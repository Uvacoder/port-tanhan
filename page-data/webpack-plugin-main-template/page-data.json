{"componentChunkName":"component---src-templates-blog-post-js","path":"/webpack-plugin-main-template/","result":{"data":{"site":{"siteMetadata":{"title":"Tan Li Hau","author":"Tan Li Hau","siteUrl":"https://lihautan.com"}},"markdownRemark":{"id":"1bea80d4-7278-5453-b8f5-e2873de1800b","excerpt":"","html":"<p>If you are using webpack to bundle your library, you most likely will export something in your entry file:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// weback.config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  entry<span class=\"token punctuation\">:</span> <span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// src/index.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And if you build it with webpack just like that, out-of-the-box, you may be surprised that if you try to <code class=\"language-text\">require()</code> the built file, you would find that there’s nothing being exported by the built file.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./dist/bundle.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// prints `{}` (empty object)</span></code></pre></div>\n<p>If you’ve read <a href=\"/i-wrote-my-module-bundler/\">my previous article on writing a module bundler</a>, you can imagine that the output bundle looks something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// dist/bundle.js</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">webpackStart</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> moduleMap<span class=\"token punctuation\">,</span> entryPoint <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span>entryPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'src/index.js'</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">exports<span class=\"token punctuation\">,</span> require</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    exports<span class=\"token punctuation\">.</span>default <span class=\"token operator\">=</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"caption\">(Everything should be familiar, except the fact that instead of calling <code class=\"language-text\">webpackStart</code> in a separate statement, I made it into a IIFE (Immediately Invoked Function Expression) for reasons that will be apparent later)</div>\n<p>In order to build for a library, ie: to expose whatever is exported by the entry file, webpack provides 3 options that you can play with:</p>\n<ul>\n<li><a href=\"https://webpack.js.org/configuration/output/#outputlibrary\">output.library</a></li>\n<li><a href=\"https://webpack.js.org/configuration/output/#outputlibraryexport\">output.libraryExport</a></li>\n<li><a href=\"https://webpack.js.org/configuration/output/#outputlibrarytarget\">output.libraryTarget</a></li>\n</ul>\n<h2 id=\"webpacks-outputlibrary-options\"><a href=\"#webpacks-outputlibrary-options\" aria-label=\"webpacks outputlibrary options permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Webpack’s output.library* options</h2>\n<p>To understand how each of them works, let’s start with <code class=\"language-text\">output.libraryTarget</code>.</p>\n<p><code class=\"language-text\">output.libraryTarget</code> accepts <code class=\"language-text\">string</code> as value, there are 2 main groups of values that you can provide to the <code class=\"language-text\">output.libraryTarget</code> option:</p>\n<h4 id=\"1-name-of-a-module-system-code-classlanguage-textquotcommonjsquotcode-code-classlanguage-textquotcommonjs2quotcode-code-classlanguage-textquotamdquotcode-code-classlanguage-textquotumdquotcode-\"><a href=\"#1-name-of-a-module-system-code-classlanguage-textquotcommonjsquotcode-code-classlanguage-textquotcommonjs2quotcode-code-classlanguage-textquotamdquotcode-code-classlanguage-textquotumdquotcode-\" aria-label=\"1 name of a module system code classlanguage textquotcommonjsquotcode code classlanguage textquotcommonjs2quotcode code classlanguage textquotamdquotcode code classlanguage textquotumdquotcode  permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Name of a module system: <code class=\"language-text\">&quot;commonjs&quot;</code>, <code class=\"language-text\">&quot;commonjs2&quot;</code>, <code class=\"language-text\">&quot;amd&quot;</code>, <code class=\"language-text\">&quot;umd&quot;</code>, …</h4>\n<p>Webpack allows you to specify the name of the module system that you want to use to expose the exported values of the entry file.</p>\n<p>You can specify a module system that is different from the one that you are using in your library.</p>\n<p>Let’s try <code class=\"language-text\">commonjs2</code> as an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  libraryTarget<span class=\"token punctuation\">:</span> <span class=\"token string\">'commonjs2'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// dist/bundle.js</span>\n<span class=\"gatsby-highlight-code-line\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">webpackStart</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> moduleMap<span class=\"token punctuation\">,</span> entryPoint <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span>entryPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'src/index.js'</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">exports<span class=\"token punctuation\">,</span> require</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    exports<span class=\"token punctuation\">.</span>default <span class=\"token operator\">=</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">commonjs2</code> uses <code class=\"language-text\">module.exports</code> to export values from a module. In this example, webpack assigns the return value of the IIFE to <code class=\"language-text\">module.exports</code>.</p>\n<p>If you look at the bundled code, it is not much different than the one without specifying <code class=\"language-text\">output.libraryTarget</code>. The only difference is that the bundled code is prefixed with <code class=\"language-text\">module.exports =</code>;</p>\n<blockquote>\n<p>By the way, if you are curious about the difference between commonjs and commonjs2, you can follow the thread of <a href=\"https://github.com/webpack/webpack/issues/1114\">this issue</a>.</p>\n</blockquote>\n<h4 id=\"2-name-of-a-variable-code-classlanguage-textquotvarquotcode-code-classlanguage-textquotthisquotcode-code-classlanguage-textquotselfquotcode-code-classlanguage-textquotwindowquotcode-code-classlanguage-textquotglobalquotcode\"><a href=\"#2-name-of-a-variable-code-classlanguage-textquotvarquotcode-code-classlanguage-textquotthisquotcode-code-classlanguage-textquotselfquotcode-code-classlanguage-textquotwindowquotcode-code-classlanguage-textquotglobalquotcode\" aria-label=\"2 name of a variable code classlanguage textquotvarquotcode code classlanguage textquotthisquotcode code classlanguage textquotselfquotcode code classlanguage textquotwindowquotcode code classlanguage textquotglobalquotcode permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Name of a variable: <code class=\"language-text\">&quot;var&quot;</code>, <code class=\"language-text\">&quot;this&quot;</code>, <code class=\"language-text\">&quot;self&quot;</code>, <code class=\"language-text\">&quot;window&quot;</code>, <code class=\"language-text\">&quot;global&quot;</code></h4>\n<p>On the other hand, instead of exposing the library content through a module system, you can specify the variable name which the export object is assigned to.</p>\n<p>Let’s take <code class=\"language-text\">self</code> as an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  libraryTarget<span class=\"token punctuation\">:</span> <span class=\"token string\">'self'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// dist/bundle.js</span>\n<span class=\"gatsby-highlight-code-line\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">  self<span class=\"token punctuation\">,</span></span>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">webpackStart</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> moduleMap<span class=\"token punctuation\">,</span> entryPoint <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span>entryPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'src/index.js'</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">exports<span class=\"token punctuation\">,</span> require</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      exports<span class=\"token punctuation\">.</span>default <span class=\"token operator\">=</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// self.default === 'foo'</span></code></pre></div>\n<p>All the exported values are assigned to <code class=\"language-text\">self</code>.</p>\n<p>Again observe the bundled code, this time round we prefixed the bundled code with <code class=\"language-text\">Object.assign(self,</code> and suffixed it with <code class=\"language-text\">);</code>.</p>\n<p>Specifiying the <code class=\"language-text\">output.libraryTarget</code> as <code class=\"language-text\">var</code> on the other hand, allows you to assign it to a variable name, which you can provide in <code class=\"language-text\">output.library</code> option:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  library<span class=\"token punctuation\">:</span> <span class=\"token string\">'myApp'</span><span class=\"token punctuation\">,</span>\n  libraryTarget<span class=\"token punctuation\">:</span> <span class=\"token string\">'var'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// dist/bundle.js</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">var</span> myApp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">webpackStart</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> moduleMap<span class=\"token punctuation\">,</span> entryPoint <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span>entryPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'src/index.js'</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">exports<span class=\"token punctuation\">,</span> require</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    exports<span class=\"token punctuation\">.</span>default <span class=\"token operator\">=</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// myApp === { default: 'foo' }</span></code></pre></div>\n<p>If you don’t want <code class=\"language-text\">myApp</code> to contain all the exported value of the entry file, you can provide the key that you want to export only in the <code class=\"language-text\">output.libraryExport</code> option:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  library<span class=\"token punctuation\">:</span> <span class=\"token string\">'myApp'</span><span class=\"token punctuation\">,</span>\n  libraryTarget<span class=\"token punctuation\">:</span> <span class=\"token string\">'var'</span><span class=\"token punctuation\">,</span>\n  libraryExport<span class=\"token punctuation\">:</span> <span class=\"token string\">'default'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// dist/bundle.js</span>\n<span class=\"token keyword\">var</span> myApp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">webpackStart</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> moduleMap<span class=\"token punctuation\">,</span> entryPoint <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span>entryPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'src/index.js'</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">exports<span class=\"token punctuation\">,</span> require</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    exports<span class=\"token punctuation\">.</span>default <span class=\"token operator\">=</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">;</span></span>\n<span class=\"token comment\">// myApp === 'foo'</span></code></pre></div>\n<p>Again you can observe that by playing different option values of <code class=\"language-text\">output.library</code>, <code class=\"language-text\">output.libraryTarget</code>, <code class=\"language-text\">output.libraryExport</code>, webpack adds different prefix and suffix to the bundled code:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// libraryTarget: 'commonjs2':</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token constant\">BUNDLED_CODE</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// libraryTarget: 'self':</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token constant\">BUNDLED_CODE</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// library: 'myApp', libraryTarget: 'var':</span>\n<span class=\"token keyword\">var</span> myApp <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token constant\">BUNDLED_CODE</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// library: 'myApp', libraryTarget: 'var', libraryExport: 'default':</span>\n<span class=\"token keyword\">var</span> myApp <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token constant\">BUNDLED_CODE</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">;</span></code></pre></div>\n<p>So, instead of using the webpack built-in library targets, what should we do if we want to support a custom library target that looks something like below:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// libraryTarget: ???</span>\ncustomRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-app'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token constant\">BUNDLED_CODE</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>I searched through the <a href=\"https://webpack.js.org/configuration/output/\">webpack official docs</a> and found no options that allows that. So the only solution at the moment is to write a webpack plugin.</p>\n<h2 id=\"writing-a-webpack-plugin\"><a href=\"#writing-a-webpack-plugin\" aria-label=\"writing a webpack plugin permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Writing a webpack plugin</h2>\n<p>After digging around the <a href=\"https://github.com/webpack/webpack\">webpack source code</a>, I found out that <a href=\"https://github.com/webpack/webpack/blob/master/lib/LibraryTemplatePlugin.js\">LibraryTemplatePlugin</a> instantiates different TemplatePlugins based on the value of the <code class=\"language-text\">output.libraryTarget</code> option:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack/lib/LibraryTemplatePlugin.js</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LibraryTemplatePlugin</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token function\">apply</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">compiler</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>libraryTarget<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'amd'</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'amd-require'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">AmdTemplatePlugin</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>compiler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'var'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">SetVarTemplatePlugin</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>compiler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'this'</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'self'</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">case</span> <span class=\"token string\">'window'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">SetVarTemplatePlugin</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>compiler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I went to look into one of the TemplatePlugins, the <a href=\"https://github.com/webpack/webpack/blob/master/lib/SetVarTemplatePlugin.js\">SetVarTemplatePlugin</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> ConcatSource <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack-sources'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SetVarTemplatePlugin</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">compiler</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    compiler<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>thisCompilation<span class=\"token punctuation\">.</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SetVarTemplatePlugin'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">compilation</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ...</span>\n      hooks<span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">.</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">'SetVarTemplatePlugin'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token parameter\">source<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> chunk<span class=\"token punctuation\">,</span> chunkGraph <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// ...</span>\n<span class=\"gatsby-highlight-code-line\">          <span class=\"token keyword\">const</span> prefix <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>varExpression<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> =</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">          <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcatSource</span><span class=\"token punctuation\">(</span>prefix<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I don’t understand line-by-line everything that happened in the file, but I do know that the line highlighted above, is where webpack concats the <code class=\"language-text\">varExpression =</code> (in the case of <code class=\"language-text\">commonjs</code>, <code class=\"language-text\">varExpression</code> is <code class=\"language-text\">module.exports</code>, thus <code class=\"language-text\">module.exports =</code>) and the source (which in this case is the bundled code).</p>\n<p>So, to have the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">customRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-app'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token constant\">BUNDLED_CODE</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>we need:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcatSource</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">customRegistry.register('my-app', </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">,</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>So, I did the following:</p>\n<ol>\n<li>Created a new file and pasted the entire source from <a href=\"https://github.com/webpack/webpack/blob/master/lib/SetVarTemplatePlugin.js\">SetVarTemplatePlugin.js</a></li>\n<li>Searched + replaced to rename the plugin name to something more appropriate, (SetModuleTemplatePlugin)</li>\n<li>Replaced relative import, <code class=\"language-text\">require(&quot;./RuntimeGlobals&quot;)</code> to require from webpack, <code class=\"language-text\">require(&quot;webpack/lib/RuntimeGlobals&quot;)</code></li>\n<li>\n<p>Replaced the line <code class=\"language-text\">return new ConcatSource(prefix, source);</code> to the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcatSource</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">customRegistry.register('my-app', </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">,</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>Removed <code class=\"language-text\">output.library</code>, <code class=\"language-text\">output.libraryTarget</code> from webpack config</li>\n<li>\n<p>Added my new plugin:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// webpack.config.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\nplugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SetModuleTemplatePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ol>\n<p>To my surprise, it worked! Almost.</p>\n<p>When I run the bundled code, the customRegistry registered an empty object, nothing is exported from the bundled code.</p>\n<p>I went into <a href=\"https://github.com/webpack/webpack/blob/master/lib/LibraryTemplatePlugin.js\">LibraryTemplatePlugin.js</a> to look about, because that’s the most obvious place to start looking, since I’ve copied line-by-line from <a href=\"https://github.com/webpack/webpack/blob/master/lib/SetVarTemplatePlugin.js\">SetVarTemplatePlugin.js</a>.</p>\n<p>I found a pretty obvious line that says:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> FlagEntryExportAsUsedPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./FlagEntryExportAsUsedPlugin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">FlagEntryExportAsUsedPlugin</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>libraryTarget <span class=\"token operator\">!==</span> <span class=\"token string\">\"module\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"used a library export\"</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>compiler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If I would have to guess, I think that what this line is doing is to mark the export of the entry file as used, so that webpack would not <em>treeshake them away</em>.</p>\n<blockquote>\n<p>Which, <strong>treeshake</strong> is a cool word that means remove them.</p>\n<blockquote>\n<p>Which you could argue that <strong>treeshake</strong> does way more that just remove the entry exports, it removes things that is only used by the entry exports, recursively.</p>\n</blockquote>\n</blockquote>\n<p>I added these 2 lines into my <code class=\"language-text\">SetModuleTemplatePlugin</code>, and it worked! Perfectly this time. <span class=\"emoji\">🎉</span></p>\n<p>I created <a href=\"https://gist.github.com/tanhauhau/b6b355fbbabe224c9242a5257baa4dec\">a gist</a> for the complete code, if you are lazy.</p>\n<p>Lastly, if you noticed, this example is based on the latest master webpack source (at the time writing), which is <code class=\"language-text\">webpack@5.0.0-beta.12</code>.</p>\n<p>If you want a similar plugin with <code class=\"language-text\">webpack^4</code>, you can trust me that this article serves as a good enough entry point for you to write the plugin on your own.</p>\n<p><strong>And I trust you that you can do it. <span class=\"emoji\">😎</span></strong></p>\n<h2 id=\"closing-note\"><a href=\"#closing-note\" aria-label=\"closing note permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Closing Note</h2>\n<p>Writing a webpack plugin is not impossible. It will especially be easier if you have a good understanding how webpack as a bundler works.</p>\n<p><em>(Plug: if you want to know more, you can read my <a href=\"/what-is-module-bundler-and-how-does-it-work/\">“What is module bundler and how does it work?”</a>)</em></p>","fields":{"slug":"/webpack-plugin-main-template/","wip":false},"frontmatter":{"title":"Webpack's TemplatePlugin","dateTimestamp":"2020-01-21T08:00:00UTC","date":"January 21, 2020","lastUpdatedTimestamp":null,"lastUpdated":null,"description":null,"tags":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/webpack-plugin-main-template/","type":"blog","noteDate":null,"noteTitle":null,"wip":false,"heroImageUrl":null,"heroTwitterImageUrl":null,"previous":{"id":"b32b81aa-3d4f-5b87-a321-e214c78063f6","fields":{"slug":"/debugging-build-failed-error-from-terser/","type":"blog","noteDate":null,"noteTitle":null,"wip":false},"frontmatter":{"title":"Debugging Story: Build failed, error from Terser"}},"next":{"id":"1fee6c49-27fe-594a-b983-882f55c2c7a5","fields":{"slug":"/webpack-additional-compilation-pass/","type":"blog","noteDate":null,"noteTitle":null,"wip":false},"frontmatter":{"title":"Webpack Additional Compilation Pass"}}}}}