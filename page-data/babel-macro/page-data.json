{"componentChunkName":"component---src-templates-blog-post-js","path":"/babel-macro/","webpackCompilationHash":"740aaaa335c868f4acf4","result":{"data":{"site":{"siteMetadata":{"title":"Tan Li Hau","author":"Tan Li Hau"}},"markdownRemark":{"id":"527ebd29-2eb1-5654-ab3e-3f04038d2547","excerpt":"","html":"<p>In this article, I am going to talk about Babel macros.</p>\n<p>Specifically, about the motivation of Babel macros, what is Babel macros and the how to write your Babel macros with an example.</p>\n<h2 id=\"motivation\"><a href=\"#motivation\" aria-label=\"motivation permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Motivation</h2>\n<p>In my previous post, <a href=\"/creating-custom-javascript-syntax-with-babel\">“Creating custom JavaScript syntax with Babel”</a>, I’ve shown you detailed steps on how you can create your own syntax and write transform plugin or polyfills so that the syntax can be run in browsers today.</p>\n<p>However, it is purely educational, and I am not recommending you to create your custom JavaScript syntax for production projects for several reasons:</p>\n<h4 id=\"documentation-and-community-support\"><a href=\"#documentation-and-community-support\" aria-label=\"documentation and community support permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Documentation and community support</h4>\n<p>If anything goes wrong, the great JavaScript community out there has no idea what is the <code class=\"language-text\">@@</code> (<a href=\"/creating-custom-javascript-syntax-with-babel#overview\">the curry function syntax we created previously</a>) means. Meaning the support that a new developer to the team gets is only as good as your documentation.</p>\n<h4 id=\"tooling\"><a href=\"#tooling\" aria-label=\"tooling permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tooling</h4>\n<p>Tooling counts together as community support, eslint, prettier, flow/TypeScript?</p>\n<h4 id=\"maintainability\"><a href=\"#maintainability\" aria-label=\"maintainability permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Maintainability</h4>\n<p>If the forked version has a bug, do you have enough support to fix it?\nIf the upstream fixed bugs or added features, how often do you merge the upstream in?</p>\n<h4 id=\"consistency-of-the-syntax\"><a href=\"#consistency-of-the-syntax\" aria-label=\"consistency of the syntax permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Consistency of the syntax</h4>\n<p>This is the hardest part of creating a new syntax. An added syntax is an added mental concept for the language users, so it is best that the new mental model is transferable to every scenario of the language. Take our <code class=\"language-text\">@@</code> syntax for example, if it works for a normal function declaration, it’s expected to work for annoymous functions, arrow functions, class methods. And how does it work if specified with generator functions, async functions? If a curried function returns another function, does that make the returned function curried as well?</p>\n<h2 id=\"motivation-1\"><a href=\"#motivation-1\" aria-label=\"motivation 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Motivation</h2>\n<p>I think you get my point. But the idea of having a magical syntax that keep the code elegant and short is enticing.</p>\n<p>Take <a href=\"https://v8.dev/features/optional-chaining\">optional chaining</a> for example, before having the optional chaining operator <code class=\"language-text\">?.</code>, we had a few ways to write <code class=\"language-text\">props?.user?.friends?.[0]?.friend</code>, which is:</p>\n<h4 id=\"a-mundane-to-write-not-easy-to-read-less-intentional-but-most-efficient-possible\"><a href=\"#a-mundane-to-write-not-easy-to-read-less-intentional-but-most-efficient-possible\" aria-label=\"a mundane to write not easy to read less intentional but most efficient possible permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>a mundane to write, not easy to read (less intentional), but most efficient possible:</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> firstFriend <span class=\"token operator\">=</span>\n  props<span class=\"token punctuation\">.</span>user <span class=\"token operator\">&amp;&amp;</span> props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>friends <span class=\"token operator\">&amp;&amp;</span> props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token operator\">?</span> props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>friend\n    <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// or with ternary</span>\n<span class=\"token keyword\">const</span> firstFriend <span class=\"token operator\">=</span> props\n  <span class=\"token operator\">?</span> props<span class=\"token punctuation\">.</span>user\n    <span class=\"token operator\">?</span> props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>friends\n      <span class=\"token operator\">?</span> props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>friends\n        <span class=\"token operator\">?</span> props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n          <span class=\"token operator\">?</span> props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>friend\n          <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n        <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n      <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n    <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"easy-to-write-easy-to-read-but-with-slightly-more-runtime-overhead\"><a href=\"#easy-to-write-easy-to-read-but-with-slightly-more-runtime-overhead\" aria-label=\"easy to write easy to read but with slightly more runtime overhead permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>easy to write, easy to read, but with slightly more runtime overhead:</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> firstFriend <span class=\"token operator\">=</span> <span class=\"token function\">idx</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=></span> _<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">idx</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> accessor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">accessor</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p><small><strong>Note:</strong> I’ve tried to search online whether a <code class=\"language-text\">try-catch</code> is more expensive, however the <a href=\"https://stackoverflow.com/questions/19727905/in-javascript-is-it-expensive-to-use-try-catch-blocks-even-if-an-exception-is-n\">search result</a> <a href=\"https://news.ycombinator.com/item?id=3922963\">is not</a> <a href=\"https://stackoverflow.com/questions/3217294/javascript-try-catch-performance-vs-error-checking-code\">conclusive</a>. <a href=\"https://twitter.com/lihautan\">Let me know</a> if you have a conclusive research on this.</small></p>\n</blockquote>\n<p>Is there a third option that is <strong>easy to read and write, yet without the try-catch runtime overhead?</strong></p>\n<p>Well, if you look at the <a href=\"https://github.com/facebookincubator/idx\"><code class=\"language-text\">facebookincubator/idx</code></a> library, it uses a <a href=\"https://github.com/facebookincubator/idx#babel-plugin\">Babel plugin</a> to search through require or imports of <code class=\"language-text\">idx</code> and replaces all it usages, eg:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> idx <span class=\"token keyword\">from</span> <span class=\"token string\">'idx'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getFriends</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">idx</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=></span> _<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>gets transformed into</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getFriends</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> props<span class=\"token punctuation\">.</span>user <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span>\n    <span class=\"token operator\">?</span> props<span class=\"token punctuation\">.</span>user\n    <span class=\"token punctuation\">:</span> props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>friends <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span>\n    <span class=\"token operator\">?</span> props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>friends\n    <span class=\"token punctuation\">:</span> props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span>\n    <span class=\"token operator\">?</span> props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">:</span> props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So here you get literally the best of both worlds!</p>\n<p>I wanted to point out some personal opinions of mine about this approach:</p>\n<h4 id=\"while-maintaining-a-good-developer-experience-dx-weve-shifted-the-runtime-overhead-to-compile-time\"><a href=\"#while-maintaining-a-good-developer-experience-dx-weve-shifted-the-runtime-overhead-to-compile-time\" aria-label=\"while maintaining a good developer experience dx weve shifted the runtime overhead to compile time permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>While maintaining a good developer experience (DX), we’ve shifted the runtime overhead to compile time.</h4>\n<p>You can keep the way you wanted to write the code, while having the compiler to transform the code to something you are <em>“supposed”</em> to write.</p>\n<p>A win-win solution.</p>\n<h4 id=\"how-do-we-replicate-this-solution-to-other-situations\"><a href=\"#how-do-we-replicate-this-solution-to-other-situations\" aria-label=\"how do we replicate this solution to other situations permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How do we replicate this solution to other situations?</h4>\n<p>First, you need to <a href=\"/step-by-step-guide-for-writing-a-babel-transformation\">write a Babel plugin</a>.</p>\n<p>Secondly, you need a <strong>marker</strong> to target the transformation.</p>\n<p>In this example, the default import from the <code class=\"language-text\">&quot;idx&quot;</code> module is the <strong>marker</strong>, all the usage of the default import would be transformed by the Babel plugin.</p>\n<p>Thirdly, you need to update your babel configuration. For every new plugin, <strong>you need to add them in</strong>; <strong>you need to make sure the order of plugin is correct</strong>.</p>\n<h4 id=\"what-if-theres-a-bug-in-the-babel-plugin\"><a href=\"#what-if-theres-a-bug-in-the-babel-plugin\" aria-label=\"what if theres a bug in the babel plugin permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What if there’s a bug in the Babel plugin?</h4>\n<p>This would be the most confusing part to the new developers on the codebase.</p>\n<p>In this example, if the <code class=\"language-text\">idx</code> function has a bug, it is natural for developers to dig into the source code of <code class=\"language-text\">idx</code>. However <code class=\"language-text\">&quot;idx&quot;</code> is nothing but a <strong>marker</strong> for the <code class=\"language-text\">babel-plugin-idx</code> to transform away, so if there’s any bug, it should be inside <code class=\"language-text\">babel-plugin-idx</code> instead of <code class=\"language-text\">idx</code>.</p>\n<p>Besides, the bug may be due to the configuration of the Babel plugin instead of the code logic itself. However if you change the configuration, it could affect all the usages of the <code class=\"language-text\">idx</code> function, because <strong>babel configuration is global</strong>.</p>\n<hr>\n<p>To summarise, I think that this solution is a win-win for DX vs User Experience (UX), however, if we can make the transform plugin more accessible to all developers, eg: without having to update babel configuration for every new transform plugin, easier to debug, and a localised configuration.</p>\n<p>Well, you are looking at <a href=\"https://github.com/kentcdodds/babel-plugin-macros\">babel macros</a>.</p>\n<h2 id=\"babel-macros\"><a href=\"#babel-macros\" aria-label=\"babel macros permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Babel macros</h2>\n<p>So, here’s how it would look like with babel macro:</p>\n<h4 id=\"you-add-code-classlanguage-textbabel-plugin-macrocode-to-babel-config\"><a href=\"#you-add-code-classlanguage-textbabel-plugin-macrocode-to-babel-config\" aria-label=\"you add code classlanguage textbabel plugin macrocode to babel config permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>You add <code class=\"language-text\">babel-plugin-macro</code> to babel config</h4>\n<p>And that’s all the change you need for babel configuration.</p>\n<p class=\"filename\">babel.config.js</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'babel-plugin-macros'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"you-write-your-own-macro\"><a href=\"#you-write-your-own-macro\" aria-label=\"you write your own macro permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>You write your own macro</h4>\n<p class=\"filename\">src/utils/idx.macro.js</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createMacro <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'babel-plugin-macros'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">createMacro</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> state<span class=\"token punctuation\">,</span> references <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  references<span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>referencePath <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">idx_transform</span><span class=\"token punctuation\">(</span>referencePath<span class=\"token punctuation\">.</span>parentPath<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We’ll talk about the code later, one thing to take away here is that your filename has to end with <code class=\"language-text\">.macro</code> or <code class=\"language-text\">.macro.js</code>.</p>\n<h4 id=\"use-it\"><a href=\"#use-it\" aria-label=\"use it permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use it</h4>\n<p class=\"filename\">src/index.js</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> idx <span class=\"token keyword\">from</span> <span class=\"token string\">'./utils/idx.macro'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getFriends</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">idx</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=></span> _<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As you can see here, if there’s something wrong about <code class=\"language-text\">idx</code>, the user would know which file exactly to look at.</p>\n<p>You dont get the divergent between the module <code class=\"language-text\">idx</code> and the plugin <code class=\"language-text\">babel-plugin-idx</code>.</p>\n<p>Besides, if you want to modify configuration, say for this usage, you can do it easily:</p>\n<p class=\"filename\">src/index.js</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> idx <span class=\"token keyword\">from</span> <span class=\"token string\">'./utils/idx.macro'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getFriends</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token function\">idx</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=></span> _<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> strict<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Simple and explicit. Isn’t that great?</p>\n<h3 id=\"so-what-is-babel-macros-again\"><a href=\"#so-what-is-babel-macros-again\" aria-label=\"so what is babel macros again permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>So what is Babel macros again?</h3>\n<p><strong>Babel macros</strong> is a concept from the <a href=\"https://github.com/kentcdodds/babel-plugin-macros\"><code class=\"language-text\">babel-plugin-macros</code></a>, which defines the standard interface between compile-time code transformation and your runtime code.</p>\n<p>In compile time, <code class=\"language-text\">babel-plugin-macros</code> will look for all <code class=\"language-text\">import</code> or <code class=\"language-text\">require</code> from modules ends with <code class=\"language-text\">.macro</code>, finds all references of the imported variables, and passes them to the <code class=\"language-text\">.macro</code> file to transform them.</p>\n<p>The imported variables is not restricted to be a function, it can be a variable, a type from type system (Flow / TypeScript).</p>\n<p>If it is a default export, you can name it anyway you like, if it is a named export, you can reassign to another variable name too.</p>\n<p>Cool, so how can I write my Babel macros?</p>\n<h2 id=\"how-to-write-babel-macros\"><a href=\"#how-to-write-babel-macros\" aria-label=\"how to write babel macros permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to write Babel macros</h2>\n<p>Kent C Dodds has written <a href=\"https://github.com/kentcdodds/babel-plugin-macros/blob/master/other/docs/author.md\">a fantastic guide for macro authors</a>.</p>\n<p>Please go read it. </p>\n<p>If you insist to stay, I am going to show you how I wrote my Babel macros, in particularly, the <a href=\"\">mock.macro</a>. And hopefully along the way, you learned how to write your Babel macros as well.</p>\n<h3 id=\"mockmacro\"><a href=\"#mockmacro\" aria-label=\"mockmacro permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>mock.macro</h3>\n<p>During development, sometimes I need </p>","fields":{"slug":"/babel-macro/","wip":false},"frontmatter":{"title":"Babel macros","date":null,"lastUpdated":null,"description":null,"tags":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/babel-macro/","type":"blog","noteDate":null,"noteTitle":null,"wip":false,"heroImageUrl":null,"heroTwitterImageUrl":null,"previous":{"id":"7629cb09-d150-560d-b1a1-820a26f7e7a4","fields":{"slug":"/creating-custom-javascript-syntax-with-babel/","type":"blog","noteDate":null,"noteTitle":null,"wip":false},"frontmatter":{"title":"Creating custom JavaScript syntax with Babel"}},"next":null}}}