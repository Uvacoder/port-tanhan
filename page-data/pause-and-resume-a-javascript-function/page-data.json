{"componentChunkName":"component---src-templates-blog-post-js","path":"/pause-and-resume-a-javascript-function/","result":{"data":{"site":{"siteMetadata":{"title":"Tan Li Hau","author":"Tan Li Hau"}},"markdownRemark":{"id":"dc897282-35dc-5fff-b85e-bced1ac63b95","excerpt":"","html":"<p>In JavaScript, IO (eg Filesystem IO, Network IO) is <strong>asynchronous</strong>. That means when you are calling a function that involves IO, you got to have a callback function passed in to be notified when the IO is done.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getWeddingDetail</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">itemId<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// call IO</span>\n  window<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://api.com/wedding/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>itemId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">error<span class=\"token punctuation\">,</span>\n    wedding</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// get notified when the result is back</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>wedding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It may seemed innocent at first, but once we start to chain multiple asynchronous calls, we end up in a situation known as the <strong>callback hell</strong>, which without a doubt, is something really not nice to work with:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getProfile</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">userId<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://api.com/user/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>userId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getWeddingDetail</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">itemId<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// call IO</span>\n  window<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://api.com/wedding/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>itemId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">error<span class=\"token punctuation\">,</span>\n    wedding</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// get notified when the result is back</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">getProfile</span><span class=\"token punctuation\">(</span>wedding<span class=\"token punctuation\">.</span>groomId<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">groomError<span class=\"token punctuation\">,</span> groom</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>groomError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>groomError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">getProfile</span><span class=\"token punctuation\">(</span>wedding<span class=\"token punctuation\">.</span>brideId<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">brideError<span class=\"token punctuation\">,</span> bride</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>brideError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>brideError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> wedding<span class=\"token punctuation\">,</span> bride<span class=\"token punctuation\">,</span> groom <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So we came up with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\"><code class=\"language-text\">async-await</code></a>, to make life easier.</p>\n<p><code class=\"language-text\">async-await</code> allows us to write asynchronous code like a synchronous one, using <code class=\"language-text\">await</code>, you can pause the function, wait for the IO, and continue the execution.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getProfile</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">userId</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://api.com/user/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>userId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getWeddingDetail</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">weddingId</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// pause to get detail through IO</span>\n    <span class=\"token keyword\">const</span> wedding <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://api.com/wedding/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>weddingId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// and resume when the result is back, and pause again...</span>\n    <span class=\"token keyword\">const</span> groom <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getProfile</span><span class=\"token punctuation\">(</span>wedding<span class=\"token punctuation\">.</span>groomId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ... and resume and pause ...</span>\n    <span class=\"token keyword\">const</span> bride <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getProfile</span><span class=\"token punctuation\">(</span>wedding<span class=\"token punctuation\">.</span>brideId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ... and resume</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> wedding<span class=\"token punctuation\">,</span> bride<span class=\"token punctuation\">,</span> groom <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>What’s more, you can catch all the error at once, magical right?</p>\n<h3 id=\"every-function-has-a-color\"><a href=\"#every-function-has-a-color\" aria-label=\"every function has a color permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Every function has a color</h3>\n<p>Still, <code class=\"language-text\">async-await</code> has its short-coming. Things go wrong when you forgot to use <code class=\"language-text\">await</code>.</p>\n<p>This could happen if you didn’t know the implementation detail of <code class=\"language-text\">getProfile</code> where <code class=\"language-text\">getProfile</code> is asynchronous, because it makes an asynchronous IO call.</p>\n<p>This leads to another problem, which is <a href=\"https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/\">every function has a color</a>. As soon as you make an asynchronous call in a function, you have to make the function itself asynchronous, and the caller of this function to be asynchronous, and its caller too, …!</p>\n<p>So, is there another way to pause a JavaScript function, without having to <code class=\"language-text\">await</code>?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getWeddingDetail</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">weddingId</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// dont need await</span>\n  <span class=\"token keyword\">const</span> wedding <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://api.com/wedding/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>weddingId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// `getProfile` could be synchronous or asynchronous</span>\n  <span class=\"token comment\">// but `getWeddingDetail` shouldn't care</span>\n  <span class=\"token keyword\">const</span> groom <span class=\"token operator\">=</span> <span class=\"token function\">getProfile</span><span class=\"token punctuation\">(</span>wedding<span class=\"token punctuation\">.</span>groomId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> bride <span class=\"token operator\">=</span> <span class=\"token function\">getProfile</span><span class=\"token punctuation\">(</span>wedding<span class=\"token punctuation\">.</span>brideId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> wedding<span class=\"token punctuation\">,</span> bride<span class=\"token punctuation\">,</span> groom <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This would be arguably much simpler, making everything seemingly “synchronous”.</p>\n<p>So, is this possible?</p>\n<p>To be able to pause a JavaScript function, is something decided in the JavaScript runtime.</p>\n<p><strong>So are we diving into the JavaScript runtime engine today?</strong></p>\n<p>Not really, I don’t know much about C++ or whatever language the JavaScript runtime is implemented. <span class=\"emoji\">🙈</span></p>\n<p>But we are going to write a simple runtime in JavaScript, with some constraints. <em>(Come on, it is hard to write a full blown runtime, adding constraints will make it easier for me to finish it in one blog post)</em></p>\n<h2 id=\"writing-the-runtime\"><a href=\"#writing-the-runtime\" aria-label=\"writing the runtime permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Writing “the runtime”</h2>\n<h3 id=\"the-first-constraint-entry-point\"><a href=\"#the-first-constraint-entry-point\" aria-label=\"the first constraint entry point permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The first constraint: entry point</h3>\n<p>The first constraint for the runtime, is to have an entry point.</p>\n<p>In our case, we are going to make <code class=\"language-text\">main</code> our entry point:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Getting wedding:'</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> wedding<span class=\"token punctuation\">,</span> bride<span class=\"token punctuation\">,</span> groom <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">getWeddingDetail</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Wedding detail:'</span><span class=\"token punctuation\">,</span> wedding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So our runtime looks something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">runtime</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mainFn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// run our entry point</span>\n  <span class=\"token function\">mainFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// start runtime</span>\n<span class=\"token function\">runtime</span><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ok, so we have our basic structure, what’s next?</p>\n<p>Firstly, we need to figure how to pause a JS function midway, without using <code class=\"language-text\">await</code>.</p>\n<p>Well, there’s <code class=\"language-text\">throw</code> or <code class=\"language-text\">return</code>, which is able to exit the JS function midway. I gonna choose <code class=\"language-text\">throw</code>, which is more suited to exit the function “unexpectedly”, rather than <code class=\"language-text\">return</code> which is more for exit normally:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">runtime</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mainFn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// patch the `window.fetch` to make it \"pause\" the function</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> _originalFetch <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>fetch<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">fetch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// \"pause\" the function</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// run our entry point</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">mainFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// function \"paused\"</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getWeddingDetail</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">weddingId</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// calling `window.fetch` will \"pause\" the function and stop executing the next line.</span>\n  <span class=\"token keyword\">const</span> wedding <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://api.com/wedding/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>weddingId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>But in both cases, there’s no way to “resume” the function. However, it is still a good starting point.</p>\n<p>One way of “resuming” the function is to rerun the <code class=\"language-text\">main</code> function again.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">runtime</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mainFn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// patch the `window.fetch` to make it \"pause\" the function</span>\n  <span class=\"token keyword\">const</span> _originalFetch <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>fetch<span class=\"token punctuation\">;</span>\n  window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">fetch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// \"pause\" the function</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// run our entry point</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">runMain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">mainFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// function \"paused\"</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token comment\">// resumed by rerun the `mainFn`</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">runMain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">runMain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ignore all the doubts you have for why rerunning the entire <code class=\"language-text\">main</code> function is a bad idea for “resuming” the function for now.</p>\n<p>The current implementation is inaccurate, and will lead us to an infinite loop, because we “resumed” the “paused” function immediately, which should be only after the <code class=\"language-text\">window.fetch</code> had succeeded:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">runtime</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mainFn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// patch the `window.fetch` to make it \"pause\" the function</span>\n  <span class=\"token keyword\">const</span> _originalFetch <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>fetch<span class=\"token punctuation\">;</span>\n  window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">fetch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">_originalFetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token comment\">// resume only when the result is back</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">runMain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// run our entry point</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">runMain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">mainFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// function \"paused\"</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token comment\">// no rerun</span></span>    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">runMain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Still the infinite-loop still happened, that’s because <code class=\"language-text\">window.fetch</code> should return the response object when “resumed”:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ...</span>\n<span class=\"token comment\">// 1st time running `getWeddingDetail`</span>\n<span class=\"token comment\">// call `window.fetch`, throw Error and \"paused\"</span>\n<span class=\"token keyword\">const</span> wedding <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://api.com/wedding/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>weddingId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token comment\">// when fetch response returns, rerun the main function</span>\n<span class=\"token comment\">// 2nd time running `getWeddingDetail`</span>\n<span class=\"token comment\">// call `window.fetch`, and should return the response to \"resume\"</span>\n<span class=\"token keyword\">const</span> wedding <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://api.com/wedding/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>weddingId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>How do we throw Error when the <code class=\"language-text\">fetch</code> is called the 1st time, and return the response for the subsequent calls?</p>\n<p>One can achieve it by caching the response:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">runtime</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mainFn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// patch the `window.fetch` to make it \"pause\" the function</span>\n  <span class=\"token keyword\">const</span> _originalFetch <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>fetch<span class=\"token punctuation\">;</span>\n  window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">fetch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// return immediately if response is cached.</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">_originalFetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      cache<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token comment\">// resume only when the result is back</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">runMain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// run our entry point ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It works!</p>\n<p>After running the main function a few times, by “pausing” and “resuming”, or shall I say, “early exit” and “rerun”, we finally hit the last statement of the main function and finish the function.</p>\n<p>Except, if you look at the console, because of rerunning multiple times, we see the <code class=\"language-text\">&quot;Getting wedding: 123&quot;</code> multiple times!</p>\n<p>That is because, <code class=\"language-text\">console.log</code> has side effects!</p>\n<h3 id=\"the-second-constraint-pure-functions\"><a href=\"#the-second-constraint-pure-functions\" aria-label=\"the second constraint pure functions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>The second constraint: pure functions</strong></h3>\n<p>The second constraint of our runtime is to use only pure functions. If you wish to call functions with side effects, you have to use our special construct, <code class=\"language-text\">runSideEffects()</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">runSideEffects</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Getting wedding:'</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> wedding<span class=\"token punctuation\">,</span> bride<span class=\"token punctuation\">,</span> groom <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">getWeddingDetail</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">runSideEffects</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Wedding detail:'</span><span class=\"token punctuation\">,</span> wedding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>So, how is <code class=\"language-text\">runSideEffects</code> implemented?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">runtime</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mainFn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// patch the `window.fetch` to make it \"pause\" the function...</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// provide `runSideEffects`</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> sideEffects <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">runSideEffects</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">fn</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    sideEffects<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token comment\">// run our entry point</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">runMain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">mainFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">      sideEffects<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span> <span class=\"token operator\">=></span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token comment\">// clear side effects</span></span><span class=\"gatsby-highlight-code-line\">      sideEffects<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> sideEffects<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">runMain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>What we are trying to do here is that, we push all the side effects into an array, and only run all of them when we finally finish our <code class=\"language-text\">main</code> function.</p>\n<p>And if we “paused” our function, before rerunning the <code class=\"language-text\">main</code> function to “resume”, we clear all the side effects, since the same side effects will be pushed into the array again.</p>\n<p>Run it again, and yes it works!</p>\n<p>You can try out the complete code in the CodeSandbox:</p>\n<iframe\n\tsrc=\"https://codesandbox.io/embed/pausing-a-javascript-function-dh0mw?expanddevtools=1&fontsize=14&hidenavigation=1&theme=dark&view=editor\"\n\tstyle=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n\ttitle=\"Pausing a JavaScript function\"\n\tallow=\"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb\"\n\tsandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"\n></iframe>\n<h2 id=\"what-have-we-done-so-far\"><a href=\"#what-have-we-done-so-far\" aria-label=\"what have we done so far permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What have we done so far?</h2>\n<p>To mimic a pause and resume a function in JavaScript, we can throw an error to “pause” the execution of the function halfway, and “resume” it by reruning the function.</p>\n<p>To “resuming” from where it left off, the point of where we threw an error should now returning a value instead, so that it feels like we are picking up and resuming from that point. To achieve this, we can use some caching mechanism.</p>\n<p>Lastly, to safely reruning the function multiple times, we need to make sure that the function is pure. If we have side effects, we need to collect them and only apply them when the function has successfully reach the end.</p>\n<h2 id=\"okay-cool-why-are-we-doing-this\"><a href=\"#okay-cool-why-are-we-doing-this\" aria-label=\"okay cool why are we doing this permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Okay cool. Why are we doing this?</h2>\n<p>Well, the idea of how to pause and resume a JavaScript function comes when I was reading about <a href=\"https://reactjs.org/docs/concurrent-mode-suspense.html#what-suspense-lets-you-do\">React Suspense</a>. With Suspense, fetching / getting data can be written declaratively:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token function\">getDataFromNetwork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">getDataFromNetwork</code> will get actually get the data from the network, which is asynchronous, but how did React make it look like it is synchronous?</p>\n<p>Think of how you would have written in React:</p>\n<ul>\n<li>Instead of providing an entry point, your <code class=\"language-text\">render</code> function is the entry point for React. To “resume” each “pause” the render, React calls the <code class=\"language-text\">render</code> function multiple times.</li>\n<li>Your render function has to be pure and side-effects free</li>\n<li>To <code class=\"language-text\">runSideEffects</code>, you use <code class=\"language-text\">React.useEffect</code> instead.</li>\n<li>To fetch + cache, you use <code class=\"language-text\">react-cache</code> to create a resource.</li>\n<li>Except, instead of “pause” and do nothing, React handles the “pause” with the nearest <code class=\"language-text\">&lt;Suspense /&gt;</code> componnet to render some fallback content. When the promise is resolve, React “resumes” the render and render the content with the data.</li>\n</ul>\n<h3 id=\"yet-this-is-not-suspense\"><a href=\"#yet-this-is-not-suspense\" aria-label=\"yet this is not suspense permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Yet, this is not Suspense.</h3>\n<p>No, I dont think so.</p>\n<p>Suspense is based on some function programming concept, called the “one-shot delimited continuation”, which is explained in Dan Abramov’s <a href=\"https://overreacted.io/algebraic-effects-for-the-rest-of-us/\">“Algebraic Effects for the Rest of Us”</a>.</p>\n<h2 id=\"closing-note\"><a href=\"#closing-note\" aria-label=\"closing note permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Closing Note</h2>\n<p>This whole article is based on a thought experiment I had when I was trying to understand the mechanics of <a href=\"https://reactjs.org/docs/concurrent-mode-suspense.html\">React Suspense</a>. So, pardon me if the flow of the content is a bit awkward or crude.</p>\n<p>Yet, after writing my thought process out, I did more research, and realised that “pausing and resuming execution” is a concept called <a href=\"https://en.wikipedia.org/wiki/Continuation\">“continuations”</a> in functional programming.</p>\n<p>So, if you are interested to learn more, here are some starting points:</p>\n<ul>\n<li>James Long’s <a href=\"https://jlongster.com/Whats-in-a-Continuation\">What’s in a Continuation</a></li>\n<li>Florian Loitsch’s <a href=\"http://www.schemeworkshop.org/2007/procPaper4.pdf\">Exceptional Continuations in JavaScript</a></li>\n</ul>","fields":{"slug":"/pause-and-resume-a-javascript-function/","wip":false},"frontmatter":{"title":"Pause and resume a JavaScript function","date":"December 09, 2019","lastUpdated":null,"description":"A thought experiment on how you can pause and resume the execution of a JavaScript function","tags":"JavaScript,React"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/pause-and-resume-a-javascript-function/","type":"blog","noteDate":null,"noteTitle":null,"wip":false,"heroImageUrl":null,"heroTwitterImageUrl":null,"previous":{"id":"e9d98e62-8bd1-5838-9270-a87ce81de154","fields":{"slug":"/12-line-rollup-plugin/","type":"blog","noteDate":null,"noteTitle":null,"wip":false},"frontmatter":{"title":"I wrote a 12-line Rollup plugin"}},"next":null}}}