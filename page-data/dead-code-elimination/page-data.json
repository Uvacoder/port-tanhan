{"componentChunkName":"component---src-templates-blog-post-js","path":"/dead-code-elimination/","webpackCompilationHash":"33db727181cf38f0ffde","result":{"data":{"site":{"siteMetadata":{"title":"Tan Li Hau","author":"Tan Li Hau"}},"markdownRemark":{"id":"64f59134-dfa4-5d1c-a30f-21574a414752","excerpt":"","html":"<p>Imagine you have the code below:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token function\">foobar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>after passing this code through <a href=\"https://www.npmjs.com/package/uglify-js\">uglify-js</a>, you will get the code below:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">foobar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>uglify-js</strong> will do dead code removal, ie: it will remove code that will not affect the program results. Since we defined <code class=\"language-text\">a</code> and <code class=\"language-text\">b</code> in the function <code class=\"language-text\">foo</code> and we are not using <code class=\"language-text\">a</code> and <code class=\"language-text\">b</code> within the <code class=\"language-text\">foo</code>, <strong>uglify-js</strong> safely removes it from the uglified code.</p>\n<p>However, if you can see from the uglified code, <code class=\"language-text\">foobar()</code> is preserved. This is because calling <code class=\"language-text\">foobar</code> may have side effects on the program, so <strong>uglify-js</strong> preserves foobar(). But since we do not need the return value of <code class=\"language-text\">foobar()</code>, which is assigned to <code class=\"language-text\">a</code>, <code class=\"language-text\">a</code> got removed by uglify-js.</p>\n<hr>\n<p>What if we know that <code class=\"language-text\">foobar()</code> will not caused any side effects?</p>\n<p>How do we tell <strong>uglify-js</strong> that if we are not using the return value from <code class=\"language-text\">foobar()</code>, please remove it as well?</p>\n<hr>\n<p>Turns out that <strong>uglify-js</strong> will treat a function call as ‚Äúpure‚Äù if there is a comment annotation <code class=\"language-text\">/*@__PURE__*/</code> or <code class=\"language-text\">/*#__PURE__*/</code> immediately precedes the call.</p>\n<p>For example: <code class=\"language-text\">/* @__PURE__ */ foobar()</code> !</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// before uglify</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token comment\">/*@__PURE__*/</span><span class=\"token function\">foobar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// after uglify</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that now <code class=\"language-text\">foobar()</code> is being removed!</p>\n<hr>\n<p>So, how is this useful?</p>\n<p>As a library author, you can write a babel plugin to mark your function to be pure, so that <strong>uglify-js</strong> can drop the function call if the return value is not being used in the code. (There is a <a href=\"https://babeljs.io/docs/en/next/babel-helper-annotate-as-pure.html\">util from babel</a> to do just the job of marking function as pure <span class=\"emoji\">üòé</span>)</p>","fields":{"slug":"/dead-code-elimination/","wip":false},"frontmatter":{"title":"Dead-code elimination","date":"October 24, 2018","lastUpdated":null,"description":"How to hint uglify-js that your function is pure","tags":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/dead-code-elimination/","type":"blog","noteDate":null,"noteTitle":null,"wip":false,"heroImageUrl":null,"heroTwitterImageUrl":null,"previous":{"id":"88ebba64-8955-568c-a7f9-d1c017ab9602","fields":{"slug":"/why-docker-ignores-my-file/","type":"blog","noteDate":null,"noteTitle":null,"wip":false},"frontmatter":{"title":"Took me hours to realise why docker build ignores my .dockerignore"}},"next":{"id":"c417abb4-2bb9-5f89-a991-a0299cb6041c","fields":{"slug":"/uglify-ascii-only/","type":"blog","noteDate":null,"noteTitle":null,"wip":false},"frontmatter":{"title":"The `ascii_only` option in uglify-js"}}}}}