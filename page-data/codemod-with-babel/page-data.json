{"componentChunkName":"component---src-templates-blog-post-js","path":"/codemod-with-babel/","webpackCompilationHash":"599947e9b3a51561b8d2","result":{"data":{"site":{"siteMetadata":{"title":"Tan Li Hau","author":"Tan Li Hau"}},"markdownRemark":{"id":"9102142a-7caa-517f-be4d-88720e0f4876","excerpt":"","html":"<p>A general template that I used:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> babel <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@babel/core'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> promisify <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'util'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> writeFile <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">promisify</span><span class=\"token punctuation\">(</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>writeFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> code <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> babel<span class=\"token punctuation\">.</span><span class=\"token function\">transformFileAsync</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">manipulateOptions</span><span class=\"token punctuation\">(</span>opts<span class=\"token punctuation\">,</span> parserOpts<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">/*\n             add to parserOpts.plugins to enable the syntax\n             eg: \n              jsx, flow, typescript, objectRestSpread, pipelineOperator, \n              throwExpressions, optionalChaining, nullishCoalescingOperator, \n              exportDefaultFrom, dynamicImport, ...\n            */</span>\n            parserOpts<span class=\"token punctuation\">.</span>plugins<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>\n              <span class=\"token string\">'classProperties'</span><span class=\"token punctuation\">,</span>\n              <span class=\"token string\">'classPrivateProperties'</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          visitor<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// fill in a transformer here</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> code<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>[Updated on 2019-09-13]</p>\n<p>I have written a <a href=\"/step-by-step-guide-for-writing-a-babel-transformation\">step-by-step guide</a> on how to write a babel transformation plugin.</p>\n<p>The only difference in this template than the guide is that there’s this <code class=\"language-text\">manipulateOptions</code> where you can add additional parser options to enable ES2015+ syntax.</p>","fields":{"slug":"/codemod-with-babel/","wip":false},"frontmatter":{"title":"Codemod with babel","date":"March 13, 2019","lastUpdated":"September 13, 2019","description":"A template which I used","tags":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/codemod-with-babel/","type":"blog","noteDate":null,"noteTitle":null,"wip":false,"heroImageUrl":null,"heroTwitterImageUrl":null,"previous":{"id":"0f4c425a-86e4-54e8-b3ac-94cad582004a","fields":{"slug":"/eslint-for-flow-explicit-type-argument-syntax/","type":"blog","noteDate":null,"noteTitle":null,"wip":false},"frontmatter":{"title":"My eslint doesn’t work with for flow 0.85’s explicit type argument syntax"}},"next":{"id":"3c04f8ef-c430-57fc-800d-250d6fb3d88a","fields":{"slug":"/understand-the-frontend-tools/","type":"blog","noteDate":null,"noteTitle":null,"wip":false},"frontmatter":{"title":"Understand the frontend tools"}}}}}