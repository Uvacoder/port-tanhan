{"componentChunkName":"component---src-templates-blog-post-js","path":"/compile-svelte-in-your-head-part-1/","result":{"data":{"site":{"siteMetadata":{"title":"Tan Li Hau","author":"Tan Li Hau"}},"markdownRemark":{"id":"a75a48eb-95a3-5d08-9f7f-9c13687cf94f","excerpt":"","html":"<h2 id=\"background\"><a href=\"#background\" aria-label=\"background permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Background</h2>\n<p>A while ago, <a href=\"https://twitter.com/swyx\">@swyx</a> came back to Singapore and visited us in <a href=\"https://careers.shopee.sg/about/\">Shopee Singapore</a> (<a href=\"https://grnh.se/32e5b3532\">Weâ€™re hiring!</a>).</p>\n<p>He gave an amazing sharing on <a href=\"https://www.swyx.io/speaking/svelte-compile-lightning/\">Compile Svelte in Your Head</a> (<a href=\"https://www.youtube.com/watch?v=FNmvcswdjV8\">video</a>) in the <a href=\"https://reactknowledgeable.org/\">ReactKnowledgeable Originals</a>.</p>\n<p>I love his presentation and the title is so catchy, so I begged him to use the catchy title as this series of articles about the Svelte compiler. It will be about how Svelte sees your code and compiles it down to plain JavaScript.</p>\n<h2 id=\"introduction\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h2>\n<p>Lets refresh ourselves with how we write web app without any framework:</p>\n<h3 id=\"creating-an-element\"><a href=\"#creating-an-element\" aria-label=\"creating an element permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating an element</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// create a h1 element</span>\n<span class=\"token keyword\">const</span> h1 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElment</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nh1<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...and add it to the body</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>h1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"updating-an-element\"><a href=\"#updating-an-element\" aria-label=\"updating an element permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Updating an element</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// update the text of the h1 element</span>\nh1<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'Bye World'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"removing-an-element\"><a href=\"#removing-an-element\" aria-label=\"removing an element permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Removing an element</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// finally, we remove the h1 element</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>h1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"adding-style-to-an-element\"><a href=\"#adding-style-to-an-element\" aria-label=\"adding style to an element permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adding style to an element</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> h1 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElment</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nh1<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// add class name to the h1 element</span></span><span class=\"gatsby-highlight-code-line\">h1<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// ...and add a &lt;style> tag to the head</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> style <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'style'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">style<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'.abc { color: blue; }'</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">document<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>style<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>h1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"listen-for-click-events-on-an-element\"><a href=\"#listen-for-click-events-on-an-element\" aria-label=\"listen for click events on an element permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Listen for click events on an element</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbutton<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'Click Me!'</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// listen to \"click\" events</span></span><span class=\"gatsby-highlight-code-line\">button<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hi!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>These are code that you have to write, without using any framework or library.</p>\n<p>The main idea of this article is to show how the Svelte compiler compiles the Svelte syntax into statements of codes that Iâ€™ve shown above.</p>\n<h2 id=\"svelte-syntax\"><a href=\"#svelte-syntax\" aria-label=\"svelte syntax permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Svelte syntax</h2>\n<p>Here Iâ€™m going to show you some basics of the Svelte syntax.</p>\n<blockquote>\n<p>If you wish to learn more, I highly recommend trying <a href=\"https://svelte.dev/tutorial/basics\">Svelteâ€™s interactive tutorial</a>.</p>\n</blockquote>\n<p>So here is a basic Svelte component:</p>\n<div class=\"gatsby-highlight\" data-language=\"svelte\"><pre class=\"language-svelte\"><code class=\"language-svelte\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Hello World<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><a href=\"https://svelte.dev/repl/99aeea705b1e48fe8610b3ccee948280\">Svelte REPL</a></p>\n<p>To add style, you add a <code class=\"language-text\">&lt;style&gt;</code> tag:</p>\n<div class=\"gatsby-highlight\" data-language=\"svelte\"><pre class=\"language-svelte\"><code class=\"language-svelte\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\">h1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> rebeccapurple<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Hello World<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><a href=\"https://svelte.dev/repl/cf54441399864c0f9b0cb25710a5fe9b\">Svelte REPL</a></p>\n<p>At this point, writing Svelte component just feels like writing HTML, thatâ€™s because Svelte syntax is a super set of the HTML syntax.</p>\n<p>Letâ€™s look at how we add a data to our component:</p>\n<div class=\"gatsby-highlight\" data-language=\"svelte\"><pre class=\"language-svelte\"><code class=\"language-svelte\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'World'</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Hello <span class=\"token language-javascript\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><a href=\"https://svelte.dev/repl/c149ca960b0444948dc0c00a9175bcb3\">Svelte REPL</a></p>\n<p>We put JavaScript inside the curly brackets.</p>\n<p>To add a click handler, we use the <code class=\"language-text\">on:</code> directive</p>\n<div class=\"gatsby-highlight\" data-language=\"svelte\"><pre class=\"language-svelte\"><code class=\"language-svelte\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">onClickButton</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\"><span class=\"token namespace\">on:</span>click=</span><span class=\"token language-javascript\"><span class=\"token punctuation\">{</span>onClickButton<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>Clicked <span class=\"token language-javascript\"><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><a href=\"https://svelte.dev/repl/1da1dcaf51814ed09d2341ea7915f0a1\">Svelte REPL</a></p>\n<p>To change the data, we use <a href=\"https://www.w3schools.com/js/js_assignment.asp\">assignment operators</a></p>\n<div class=\"gatsby-highlight\" data-language=\"svelte\"><pre class=\"language-svelte\"><code class=\"language-svelte\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">onClickButton</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\"><span class=\"token namespace\">on:</span>click=</span><span class=\"token language-javascript\"><span class=\"token punctuation\">{</span>onClickButton<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>Clicked <span class=\"token language-javascript\"><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><a href=\"https://svelte.dev/repl/7bff4b7746df4007a51155d2006ce724\">Svelte REPL</a></p>\n<p>Letâ€™s move on to see how Svelte syntax is compiled into JavaScript that weâ€™ve seen earlier</p>\n<h2 id=\"compile-svelte-in-your-head\"><a href=\"#compile-svelte-in-your-head\" aria-label=\"compile svelte in your head permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Compile Svelte in your Head</h2>\n<p>The Svelte compiler analyses the code you write and generates an optimised JavaScript output.</p>\n<p>To study how Svelte compiles the code, lets start with the smallest example possible, and slowly build up the code. Through the process, you will see that Svelte incrementally adds to the output code based on your changes.</p>\n<p>The first example that we are going to see is:</p>\n<div class=\"gatsby-highlight\" data-language=\"svelte\"><pre class=\"language-svelte\"><code class=\"language-svelte\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Hello World<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><a href=\"https://svelte.dev/repl/99aeea705b1e48fe8610b3ccee948280?version=3.19.1\">Svelte REPL</a></p>\n<p>The output code:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">create_fragment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> h1<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      h1 <span class=\"token operator\">=</span> <span class=\"token function\">element</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      h1<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'Hello world'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> anchor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> h1<span class=\"token punctuation\">,</span> anchor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">detaching</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>detaching<span class=\"token punctuation\">)</span> <span class=\"token function\">detach</span><span class=\"token punctuation\">(</span>h1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SvelteComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> create_fragment<span class=\"token punctuation\">,</span> safe_not_equal<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can break down the output code into 2 sections:</p>\n<ul>\n<li><code class=\"language-text\">create_fragment</code></li>\n<li><code class=\"language-text\">class App extends SvelteComponent</code></li>\n</ul>\n<h3 id=\"create_fragment\"><a href=\"#create_fragment\" aria-label=\"create_fragment permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>create_fragment</h3>\n<p>Svelte components are the building blocks of a Svelte application. Each Svelte componnet focus on building their piece or fragment of the final DOM.</p>\n<p>The <code class=\"language-text\">create_fragment</code> function gives the Svelte component an instruction manual on how to build the DOM fragment.</p>\n<p>Look at the return object of the <code class=\"language-text\">create_fragment</code> function. It has methods, such as:</p>\n<h4 id=\"--c\"><a href=\"#--c\" aria-label=\"  c permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- c()</h4>\n<p>Short for <strong>create</strong>.</p>\n<p>Contains instructions to create all the elements in the fragment.</p>\n<p>In this example, it contains instruction to create the <code class=\"language-text\">h1</code> element</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">h1 <span class=\"token operator\">=</span> <span class=\"token function\">element</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nh1<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"--mtarget-anchor\"><a href=\"#--mtarget-anchor\" aria-label=\"  mtarget anchor permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- m(target, anchor)</h4>\n<p>Short for <strong>mount</strong>.</p>\n<p>Contains instructions to mount the elements into the target.</p>\n<p>In this example, it contains instruction to insert the <code class=\"language-text\">h1</code> element into the <code class=\"language-text\">target</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> h1<span class=\"token punctuation\">,</span> anchor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// http://github.com/sveltejs/svelte/tree/master/src/runtime/internal/dom.ts</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> anchor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  target<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> anchor <span class=\"token operator\">||</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"--ddetaching\"><a href=\"#--ddetaching\" aria-label=\"  ddetaching permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- d(detaching)</h4>\n<p>Short for <strong>destroy</strong>.</p>\n<p>Contains instructions to remove the elements from the target.</p>\n<p>In this example, we detach the <code class=\"language-text\">h1</code> element from the DOM</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">detach</span><span class=\"token punctuation\">(</span>h1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// http://github.com/sveltejs/svelte/tree/master/src/runtime/internal/dom.ts</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">detach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  node<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>The method names are short for better minification. <a href=\"https://alistapart.com/article/javascript-minification-part-ii/#section3\">See what canâ€™t be minified here</a>.</p>\n</blockquote>\n<h3 id=\"export-default-class-app-extends-sveltecomponent\"><a href=\"#export-default-class-app-extends-sveltecomponent\" aria-label=\"export default class app extends sveltecomponent permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>export default class App extends SvelteComponent</h3>\n<p>Each component is a class, which you can import and instantiate it through <a href=\"https://svelte.dev/docs#Client-side_component_API\">this API</a>.</p>\n<p>And in the constructor, we initialize the component with information that made up the component such as <code class=\"language-text\">create_fragment</code>. Svelte will only pass information that it is needed and removing them whenever it is not necessary.</p>\n<p>Try removing the <code class=\"language-text\">&lt;h1&gt;</code> tag and see what happens to the output:</p>\n<div class=\"gatsby-highlight\" data-language=\"svelte\"><pre class=\"language-svelte\"><code class=\"language-svelte\"><span class=\"token comment\">&lt;!-- empty --></span></code></pre></div>\n<p><a href=\"https://svelte.dev/repl/1f29ce52adf446fc9116bb957b7200ec?version=3.19.1\">Svelte REPL</a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SvelteComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> safe_not_equal<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Svelte will pass in <code class=\"language-text\">null</code> instead of <code class=\"language-text\">create_fragment</code>!</p>\n<p>The <code class=\"language-text\">init</code> function is where Svelte set ups most of the internals, such as:</p>\n<ul>\n<li>component props, <code class=\"language-text\">ctx</code> (will explained what is <code class=\"language-text\">ctx</code> later) and context</li>\n<li>component lifecycle events</li>\n<li>component update mechanism</li>\n</ul>\n<p>and at the very end, Svelte calls the <code class=\"language-text\">create_fragment</code> to create and mount elements into the DOM.</p>\n<p>If you noticed, all the internals state and methods are attached to <code class=\"language-text\">this.$$</code>.</p>\n<p>So if you ever access the <code class=\"language-text\">$$</code> property of the component, you are tapping into the internals. Youâ€™ve been warned! <span class=\"emoji\">ðŸ™ˆ</span><span class=\"emoji\">ðŸš¨</span></p>\n<h3 id=\"adding-data\"><a href=\"#adding-data\" aria-label=\"adding data permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adding data</h3>\n<p>Now that weâ€™ve looked at the bare minimum of a Svelte component, letâ€™s see how adding a data would change the compiled output:</p>\n<div class=\"gatsby-highlight\" data-language=\"svelte\"><pre class=\"language-svelte\"><code class=\"language-svelte\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n\t<span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'World'</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Hello <span class=\"token language-javascript\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><a href=\"https://svelte.dev/repl/c149ca960b0444948dc0c00a9175bcb3?version=3.19.1\">Svelte REPL</a></p>\n<p>Notice the change in the output:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">create_fragment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      h1 <span class=\"token operator\">=</span> <span class=\"token function\">element</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">      h1<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'World'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SvelteComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Some observations:</p>\n<ul>\n<li>What youâ€™ve written in the <code class=\"language-text\">&lt;script&gt;</code> tag is moved into the top level of the code</li>\n<li><code class=\"language-text\">h1</code> elementâ€™s text content is now a template literals</li>\n</ul>\n<p>Thereâ€™s a lot of amazing things happening under the hood right now, but letâ€™s hold our horses for a while, because itâ€™s best explained when comparing with the next code change.</p>\n<h3 id=\"updating-data\"><a href=\"#updating-data\" aria-label=\"updating data permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Updating data</h3>\n<p>Letâ€™s add a function to update the <code class=\"language-text\">name</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"svelte\"><pre class=\"language-svelte\"><code class=\"language-svelte\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n\t<span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'World'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tname <span class=\"token operator\">=</span> <span class=\"token string\">'Svelte'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Hello <span class=\"token language-javascript\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><a href=\"https://svelte.dev/repl/3841485f4d224774ba42617e4e964968?version=3.19.1\">Svelte REPL</a></p>\n<p>â€¦and observe the change in the compiled output:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">create_fragment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      h1 <span class=\"token operator\">=</span> <span class=\"token function\">element</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">      t0 <span class=\"token operator\">=</span> <span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">      t1 <span class=\"token operator\">=</span> <span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/*name*/</span> ctx<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> anchor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> h1<span class=\"token punctuation\">,</span> anchor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>h1<span class=\"token punctuation\">,</span> t0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>h1<span class=\"token punctuation\">,</span> t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>dirty<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dirty <span class=\"token operator\">&amp;</span> <span class=\"token comment\">/*name*/</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">set_data</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">,</span> <span class=\"token comment\">/*name*/</span> ctx<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>    <span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">detaching</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>detaching<span class=\"token punctuation\">)</span> <span class=\"token function\">detach</span><span class=\"token punctuation\">(</span>h1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">function</span> <span class=\"token function\">instance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">$$self<span class=\"token punctuation\">,</span> $$props<span class=\"token punctuation\">,</span> $$invalidate</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'World'</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">function</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">$$invalidate</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Svelte'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SvelteComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">,</span> create_fragment<span class=\"token punctuation\">,</span> safe_not_equal<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Some observations:</p>\n<ul>\n<li>the text content of <code class=\"language-text\">&lt;h1&gt;</code> element is now broken into 2 text nodes, created by the <code class=\"language-text\">text(...)</code> function</li>\n<li>the return object of the <code class=\"language-text\">create_fragment</code> has a new method, <code class=\"language-text\">p(ctx, dirty)</code></li>\n<li>a new function <code class=\"language-text\">instance</code> is created</li>\n<li>What youâ€™ve written in the <code class=\"language-text\">&lt;script&gt;</code> tag is now moved into the <code class=\"language-text\">instance</code> function</li>\n<li>for the sharp-eyed, the variable <code class=\"language-text\">name</code> that was used in the <code class=\"language-text\">create_fragment</code> is now replaced by <code class=\"language-text\">ctx[0]</code></li>\n</ul>\n<p>So, why the change?</p>\n<p>The Svelte compiler tracks all the variable in declared in the <code class=\"language-text\">&lt;script&gt;</code> tag.</p>\n<p>It tracks whether the variable:</p>\n<ul>\n<li>can be mutated? eg: <code class=\"language-text\">count++</code>,</li>\n<li>can be reassigned? eg: <code class=\"language-text\">name = &#39;Svelte&#39;</code>,</li>\n<li>is referenced in the template? eg: <code class=\"language-text\">&lt;h1&gt;Hello {name}&lt;/h1&gt;</code></li>\n<li>is writable? eg: <code class=\"language-text\">const i = 1;</code> vs <code class=\"language-text\">let i = 1;</code></li>\n<li>â€¦ and many more</li>\n</ul>\n<p>When the Svelte compiler realise that the variable <code class=\"language-text\">name</code> can be reassigned, (due to <code class=\"language-text\">name = &#39;Svelte&#39;;</code> in <code class=\"language-text\">update</code>), it breaks down the text content of the <code class=\"language-text\">h1</code> into parts, so that it can dynamically update part of the text.</p>\n<p>Indeed, you can see that thereâ€™s a new method, <code class=\"language-text\">p</code>, to update the text node.</p>\n<h4 id=\"--pctx-dirty\"><a href=\"#--pctx-dirty\" aria-label=\"  pctx dirty permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- p(ctx, dirty)</h4>\n<p>Short for <strong>u<em>p</em>date</strong>.</p>\n<p><strong>p(ctx, dirty)</strong> contains instruction to update the elements based on what has changed in the state (<code class=\"language-text\">dirty</code>) and the state (<code class=\"language-text\">ctx</code>) of the component.</p>\n<h3 id=\"instance-variable\"><a href=\"#instance-variable\" aria-label=\"instance variable permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>instance variable</h3>\n<p>The compiler realises that the variable <code class=\"language-text\">name</code> cannot be shared across different instances of the <code class=\"language-text\">App</code> component. Thatâ€™s why it moves the declaration of the variable <code class=\"language-text\">name</code> into a function called <code class=\"language-text\">instance</code>.</p>\n<p>In the previous example, no matter how many instances of the <code class=\"language-text\">App</code> component, the value of the variable <code class=\"language-text\">name</code> is the same and unchanged across the instances:</p>\n<div class=\"gatsby-highlight\" data-language=\"svelte\"><pre class=\"language-svelte\"><code class=\"language-svelte\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>App</span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>App</span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>App</span> <span class=\"token punctuation\">/></span></span>\n\n<span class=\"token comment\">&lt;!-- gives you --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Hello world<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Hello world<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Hello world<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>But, in this example, the variable <code class=\"language-text\">name</code> can be changed within 1 instance of the component, so the declaration of the variable <code class=\"language-text\">name</code> is now moved into the <code class=\"language-text\">instance</code> function:</p>\n<div class=\"gatsby-highlight\" data-language=\"svelte\"><pre class=\"language-svelte\"><code class=\"language-svelte\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>App</span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>App</span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>App</span> <span class=\"token punctuation\">/></span></span>\n\n<span class=\"token comment\">&lt;!-- could possibly be --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Hello world<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Hello Svelte<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Hello world<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- depending on the inner state of the component --></span></code></pre></div>\n<h3 id=\"instanceself-props-invalidate\"><a href=\"#instanceself-props-invalidate\" aria-label=\"instanceself props invalidate permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>instance($$self, $$props, $$invalidate)</h3>\n<p>The <code class=\"language-text\">instance</code> function returns a list of <em>instance</em> variables, which are variables that are:</p>\n<ul>\n<li>referenced in the template</li>\n<li>mutated or reassigned, (can be changed within 1 instance of the component)</li>\n</ul>\n<p>In Svelte, we call this list of instance variables, <strong>ctx</strong>.</p>\n<p>In the <code class=\"language-text\">init</code> function, Svelte calls the <code class=\"language-text\">instance</code> function to create <strong>ctx</strong>, and uses it to create the fragment for the component:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// conceptually,</span>\n<span class=\"token keyword\">const</span> ctx <span class=\"token operator\">=</span> <span class=\"token function\">instance</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> fragment <span class=\"token operator\">=</span> <span class=\"token function\">create_fragment</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// create the fragment</span>\nfragment<span class=\"token punctuation\">.</span><span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// mount the fragment onto the DOM</span>\nfragment<span class=\"token punctuation\">.</span><span class=\"token function\">m</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now, instead of accessing the variable <code class=\"language-text\">name</code> outside of the component, we refer to the variable <code class=\"language-text\">name</code> passed via the <strong>ctx</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">t1 <span class=\"token operator\">=</span> <span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/*name*/</span> ctx<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The reason that ctx is an array instead of a map or an object is because of an optimisation related to bitmask, you can see <a href=\"https://github.com/sveltejs/svelte/issues/1922\">the discussion about it here</a></p>\n<h3 id=\"invalidate\"><a href=\"#invalidate\" aria-label=\"invalidate permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>$$invalidate</h3>\n<p>The secret behind the system of reactivity in Svelte is the <code class=\"language-text\">$$invalidate</code> function.</p>\n<p>For every variable that has</p>\n<ul>\n<li>reassigned or mutated</li>\n<li>referenced in the template</li>\n</ul>\n<p>will have the <code class=\"language-text\">$$invalidate</code> function inserted right after the assignment or mutation:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">name <span class=\"token operator\">=</span> <span class=\"token string\">'Svelte'</span><span class=\"token punctuation\">;</span>\ncount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\nfoo<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// compiled into something like</span>\nname <span class=\"token operator\">=</span> <span class=\"token string\">'Svelte'</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">$$invalidate</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* name */</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">$$invalidate</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* count */</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfoo<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">$$invalidate</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* foo */</span><span class=\"token punctuation\">,</span> foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <code class=\"language-text\">$$invalidate</code> function marks the variable dirty and schedules an update for the component:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// conceptually...</span>\n<span class=\"token keyword\">const</span> ctx <span class=\"token operator\">=</span> <span class=\"token function\">instance</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> fragment <span class=\"token operator\">=</span> <span class=\"token function\">create_fragment</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// to track which variable has changed</span>\n<span class=\"token keyword\">const</span> dirty <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">$$invalidate</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">variable<span class=\"token punctuation\">,</span> newValue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// update ctx</span>\n  ctx<span class=\"token punctuation\">[</span>variable<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> newValue<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// mark variable as dirty</span>\n  dirty<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>variable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// schedules update for the component</span>\n  <span class=\"token function\">scheduleUpdate</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// get called when update scheduled</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">flushUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// update the fragment</span>\n  fragment<span class=\"token punctuation\">.</span><span class=\"token function\">p</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> dirty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// clear the dirty</span>\n  dirty<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"adding-event-listeners\"><a href=\"#adding-event-listeners\" aria-label=\"adding event listeners permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adding event listeners</h3>\n<p>Letâ€™s now add an event listener</p>\n<div class=\"gatsby-highlight\" data-language=\"svelte\"><pre class=\"language-svelte\"><code class=\"language-svelte\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n\t<span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tname <span class=\"token operator\">=</span> <span class=\"token string\">'Svelte'</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\"><span class=\"token namespace\">on:</span>click=</span><span class=\"token language-javascript\"><span class=\"token punctuation\">{</span>update<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>Hello <span class=\"token language-javascript\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></span></code></pre></div>\n<p><a href=\"https://svelte.dev/repl/5b12ff52c2874f4dbb6405d9133b34da?version=3.19.1\">Svelte REPL</a></p>\n<p>And observe the difference:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">create_fragment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      h1 <span class=\"token operator\">=</span> <span class=\"token function\">element</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      t0 <span class=\"token operator\">=</span> <span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      t1 <span class=\"token operator\">=</span> <span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/*name*/</span> ctx<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">m</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> anchor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> h1<span class=\"token punctuation\">,</span> anchor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>h1<span class=\"token punctuation\">,</span> t0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>h1<span class=\"token punctuation\">,</span> t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">      dispose <span class=\"token operator\">=</span> <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>h1<span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/*update*/</span> ctx<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>dirty<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dirty <span class=\"token operator\">&amp;</span> <span class=\"token comment\">/*name*/</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">set_data</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">,</span> <span class=\"token comment\">/*name*/</span> ctx<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">detaching</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>detaching<span class=\"token punctuation\">)</span> <span class=\"token function\">detach</span><span class=\"token punctuation\">(</span>h1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">instance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">$$self<span class=\"token punctuation\">,</span> $$props<span class=\"token punctuation\">,</span> $$invalidate</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">$$invalidate</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Svelte'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> update<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>Some observations:</p>\n<ul>\n<li><code class=\"language-text\">instance</code> function now returns 2 variables instead of 1</li>\n<li>Listen to click event during <strong>mount</strong> and dispose it in <strong>destroy</strong></li>\n</ul>\n<p>As Iâ€™ve mentioned earlier, <code class=\"language-text\">instance</code> function returns variables that are <strong>referenced in the template</strong> and that are <strong>mutated or reassigned</strong>.</p>\n<p>Since weâ€™ve just referenced the <code class=\"language-text\">update</code> function in the template, it is now returned in the <code class=\"language-text\">instance</code> function as part of the <strong>ctx</strong>.</p>\n<p>Svelte tries generate as compact JavaScript output as possible, not returning an extra variable if it is not necessary.</p>\n<h3 id=\"listen-and-dispose\"><a href=\"#listen-and-dispose\" aria-label=\"listen and dispose permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>listen and dispose</h3>\n<p>Whenever you add <a href=\"https://svelte.dev/tutorial/dom-events\">an event listener</a> in Svelte, Svelte will inject code to add an <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/EventListener\">event listener</a> and remove it when the DOM fragment is removed from the DOM.</p>\n<p>Try add more event listeners,</p>\n<div class=\"gatsby-highlight\" data-language=\"svelte\"><pre class=\"language-svelte\"><code class=\"language-svelte\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span>\n\t<span class=\"token attr-name\"><span class=\"token namespace\">on:</span>click=</span><span class=\"token language-javascript\"><span class=\"token punctuation\">{</span>update<span class=\"token punctuation\">}</span></span>\n\t<span class=\"token attr-name\"><span class=\"token namespace\">on:</span>mousedown=</span><span class=\"token language-javascript\"><span class=\"token punctuation\">{</span>update<span class=\"token punctuation\">}</span></span>\n\t<span class=\"token attr-name\"><span class=\"token namespace\">on:</span>touchstart=</span><span class=\"token language-javascript\"><span class=\"token punctuation\">{</span>update<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>\n  Hello <span class=\"token language-javascript\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span>!\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><a href=\"https://svelte.dev/repl/efde6f2aaf624e708767f1bd3e94e479?version=3.19.1\">Svelte REPL</a></p>\n<p>add observe the compiled output:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ...</span>\n<span class=\"gatsby-highlight-code-line\">dispose <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>h1<span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/*update*/</span> ctx<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>h1<span class=\"token punctuation\">,</span> <span class=\"token string\">'mousedown'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/*update*/</span> ctx<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>h1<span class=\"token punctuation\">,</span> <span class=\"token string\">'touchstart'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/*update*/</span> ctx<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> passive<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span><span class=\"token comment\">// ...</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token function\">run_all</span><span class=\"token punctuation\">(</span>dispose<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p>Instead of declaring and creating a new variable to remove each event listener, Svelte assigns all of them to an array:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// instead of</span>\ndispose1 <span class=\"token operator\">=</span> <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>h1<span class=\"token punctuation\">,</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/*update*/</span> ctx<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndispose2 <span class=\"token operator\">=</span> <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>h1<span class=\"token punctuation\">,</span> <span class=\"token string\">'mousedown'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/*update*/</span> ctx<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndispose2 <span class=\"token operator\">=</span> <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>h1<span class=\"token punctuation\">,</span> <span class=\"token string\">'touchstart'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">/*update*/</span> ctx<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> passive<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token function\">dispose1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">dispose2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">dispose3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Minification can compact the variable name, but you canâ€™t remove the brackets.</p>\n<p>Again, this is another great example of where Svelte tries to generate a compact JavaScript output. Svelte does not create the <code class=\"language-text\">dispose</code> array when thereâ€™s only 1 event listener.</p>\n<h2 id=\"summary\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h2>\n<p>The Svelte syntax is a superset of HTML.</p>\n<p>When you write a Svelte component, the Svelte compiler analyses your code and generates an optimised JavaScript code output.</p>\n<p>The output can be divided into 3 segments:</p>\n<h4 id=\"1-create_fragment\"><a href=\"#1-create_fragment\" aria-label=\"1 create_fragment permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. create_fragment</h4>\n<ul>\n<li>Returns a fragment, which is an instruction manual on how to build the DOM fragment for the component</li>\n</ul>\n<h4 id=\"2-instance\"><a href=\"#2-instance\" aria-label=\"2 instance permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. instance</h4>\n<ul>\n<li>Most of the code written in the <code class=\"language-text\">&lt;script&gt;</code> tag is in here.</li>\n<li>Returns a list of instance variables that are referenced in the template</li>\n<li><code class=\"language-text\">$$invalidate</code> is inserted after every assignment and mutation of the instance variable</li>\n</ul>\n<h4 id=\"3-class-app-extends-sveltecomponent\"><a href=\"#3-class-app-extends-sveltecomponent\" aria-label=\"3 class app extends sveltecomponent permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. class App extends SvelteComponent</h4>\n<ul>\n<li>Initialise the component with <code class=\"language-text\">create_fragment</code> and <code class=\"language-text\">instance</code> function</li>\n<li>Sets up the component internals</li>\n<li>Provides the <a href=\"https://svelte.dev/docs#Client-side_component_API\">Component API</a></li>\n</ul>\n<p>Svelte strives to generate as compact JavaScript as possible, for example:</p>\n<ul>\n<li>Breaking text content of <code class=\"language-text\">h1</code> into separate text nodes only when part of the text can be updated</li>\n<li>Not defining <code class=\"language-text\">create_fragment</code> or <code class=\"language-text\">instance</code> function when it is not needed</li>\n<li>Generate <code class=\"language-text\">dispose</code> as an array or a function, depending on the number of event listeners.</li>\n<li>â€¦</li>\n</ul>\n<h2 id=\"closing-note\"><a href=\"#closing-note\" aria-label=\"closing note permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Closing Note</h2>\n<p>Weâ€™ve covered the basic structure of the Svelteâ€™s compiled output, and this is just the beginning.</p>\n<p>If you wish to know more, <a href=\"https://twitter.com/lihautan\">follow me on Twitter</a>.</p>\n<p>Iâ€™ll post it on Twitter when the next part is ready, where Iâ€™ll be covering <a href=\"https://svelte.dev/tutorial/if-blocks\">logic blocks</a>, <a href=\"https://svelte.dev/tutorial/slots\">slots</a>, <a href=\"https://svelte.dev/tutorial/context-api\">context</a>, and many others.</p>","fields":{"slug":"/compile-svelte-in-your-head-part-1/","wip":false},"frontmatter":{"title":"Compile Svelte in your head (Part 1)","date":"March 04, 2020","lastUpdated":null,"description":null,"tags":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/compile-svelte-in-your-head-part-1/","type":"blog","noteDate":null,"noteTitle":null,"wip":false,"heroImageUrl":null,"heroTwitterImageUrl":"/static/hero-twitter-eaa97bddac12481b810134ee71a97676.jpg","previous":{"id":"f8c064e3-663a-59de-a0ed-28eeaaa08349","fields":{"slug":"/hydrating-text-content/","type":"blog","noteDate":null,"noteTitle":null,"wip":false},"frontmatter":{"title":"Hydrating text content from Server-Side Rendering"}},"next":null}}}