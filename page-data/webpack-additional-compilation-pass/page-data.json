{"componentChunkName":"component---src-templates-blog-post-js","path":"/webpack-additional-compilation-pass/","result":{"data":{"site":{"siteMetadata":{"title":"Tan Li Hau","author":"Tan Li Hau"}},"markdownRemark":{"id":"1fee6c49-27fe-594a-b983-882f55c2c7a5","excerpt":"","html":"<p>Recently, I was working on a server-side rendering application, and encounter a scenario that I think it requires “double compilation” with webpack.</p>\n<h2 id=\"the-problem\"><a href=\"#the-problem\" aria-label=\"the problem permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The problem</h2>\n<p>I am not entirely sure I am doing it in the right approach, feel free to suggest or discuss it with me. The following will be about the problem I faced and how I worked on it.</p>\n<p>The server-side rendering application that I worked on, has an endpoint that takes in request and respond with a partial HTML content and CSS files required for styling:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"css\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"http://cdn/assets/style.xxx.css\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"html\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"&lt;div class=\\\"container_xyz\\\">Hello world&lt;/div>\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p class=\"filename\">http://cdn/assets/style.xxx.css</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.container_xyz</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Comic Sans'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The application code itself uses <a href=\"https://expressjs.com/\">Express</a> and <a href=\"https://reactjs.org/\">React</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> renderToStaticMarkup <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/server'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> styles <span class=\"token keyword\">from</span> <span class=\"token string\">'./app.scss'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>styles<span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Hello world<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> htmlContent <span class=\"token operator\">=</span> <span class=\"token function\">renderToStaticMarkup</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    css<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    html<span class=\"token punctuation\">:</span> htmlContent<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now, the problem is, how do I get the list of CSS files?</p>\n<p>The list of CSS files produced by the build is only available after I compile the application, but I need the information to be part of compiled code.</p>\n<p>The compiled code being part of the compilation, needs to contain information of the compilation.</p>\n<h2 id=\"the-1st-approach\"><a href=\"#the-1st-approach\" aria-label=\"the 1st approach permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The 1st approach</h2>\n<p>A naive solution at first is to use <a href=\"https://www.npmjs.com/package/webpack-manifest-plugin\">Webpack Manifest Plugin</a> to get the compilation manifest, and in the code, import the manifest as json and consumes it:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">import</span> webpackManifest <span class=\"token keyword\">from</span> <span class=\"token string\">'./dist/webpack-manifest.json'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> cssFiles <span class=\"token operator\">=</span> <span class=\"token function\">filterCssFiles</span><span class=\"token punctuation\">(</span>webpackManifest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    css<span class=\"token punctuation\">:</span> cssFiles<span class=\"token punctuation\">,</span>\n    html<span class=\"token punctuation\">:</span> htmlContent<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>Yet, the <code class=\"language-text\">./dist/webpack-manifest.json</code> is not available in the first place, before compiling the code.</p>\n<p>Since the <code class=\"language-text\">./dist/webpack-manifest.json</code> can only be available after build, maybe we can import it during runtime, using <a href=\"https://webpack.js.org/api/module-variables/#__non_webpack_require__-webpack-specific\"><strong>non<em>webpack</em>require</strong></a>. The difference between <code class=\"language-text\">require</code> and <code class=\"language-text\">__non_webpack_require__</code> is that the latter is webpack specific, which tells webpack to transform it to just pure <code class=\"language-text\">require()</code> expression, without bundling the required module:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">const</span> webpackManifest <span class=\"token operator\">=</span> <span class=\"token function\">__non_webpack_require__</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./dist/webpack-manifest.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> cssFiles <span class=\"token operator\">=</span> <span class=\"token function\">filterCssFiles</span><span class=\"token punctuation\">(</span>webpackManifest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    css<span class=\"token punctuation\">:</span> cssFiles<span class=\"token punctuation\">,</span>\n    html<span class=\"token punctuation\">:</span> htmlContent<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>If you scrutinize the code, you may wonder whether <code class=\"language-text\">./dist/webpack-manifest.json</code> is the correct relative path from the compiled code?</p>\n<p>Probably <code class=\"language-text\">./webpack-manifest.json</code> would be more accurate, if our output folder looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">dist\n├── webpack-manifest.json\n└── bundle.js  // &lt;-- the main output bundle</code></pre></div>\n<p>One can safely argue that, the approach above works and let’s move on the next task. But, curiosity drives me to seek deeper for a more “elegant” solution, where one don’t need <code class=\"language-text\">require(&#39;webpack-manifest.json&#39;)</code> in runtime, but that information is compiled into the code.</p>\n<h3 id=\"updated-feb-27-2020\"><a href=\"#updated-feb-27-2020\" aria-label=\"updated feb 27 2020 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[Updated Feb 27, 2020]</h3>\n<p>Thanks to <a href=\"https://twitter.com/wSokra\">@wSokra</a>’s <a href=\"https://twitter.com/wSokra/status/1230448421351444482\">suggestion</a>, instead of using <code class=\"language-text\">__non_webpack_require__()</code>, you can use a normal import and declaring the manifest file as an external:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">import</span> webpackManifest <span class=\"token keyword\">from</span> <span class=\"token string\">'webpack-manifest'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> cssFiles <span class=\"token operator\">=</span> <span class=\"token function\">filterCssFiles</span><span class=\"token punctuation\">(</span>webpackManifest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p class=\"filename\">webpack.config.js</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  externals<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'webpack-manifest'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"commonjs2 ./webpack-manifest.json\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>What this output is something similar to the following:</p>\n<p class=\"filename\">bundle.js</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> webpackManifest <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./webpack-manifest.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> cssFiles <span class=\"token operator\">=</span> <span class=\"token function\">filterCssFiles</span><span class=\"token punctuation\">(</span>webpackManifest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>The reason we are using the relative path <code class=\"language-text\">./webpack-manifest.json</code> is that we are assuming the output folder looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">dist\n├── bundle.js  // &lt;-- the main output bundle\n└── webpack-manifest.json // &lt;-- relative to bundle.js</code></pre></div>\n<p>You can read more about webpack externals from <a href=\"https://webpack.js.org/configuration/externals/\">the webpack documentation</a>.</p>\n<h2 id=\"the-2nd-approach\"><a href=\"#the-2nd-approach\" aria-label=\"the 2nd approach permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The 2nd approach</h2>\n<p>So, the next “intuitive” approach is to <a href=\"/webpack-plugin-main-template\">write a custom template plugin</a>, that adds the webpack manifest on top of the main bundle, an example of the output:</p>\n<p class=\"filename\">bundle.js</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// added by template plugin</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">CSS_FILES</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'http://cdn/assets/style.xxx.css'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// END added by template plugin</span>\n<span class=\"token comment\">// ...the main bundle</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    css<span class=\"token punctuation\">:</span> <span class=\"token constant\">CSS_FILES</span><span class=\"token punctuation\">,</span>\n    html<span class=\"token punctuation\">:</span> htmlContent<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In the source code, I will use the global variable <code class=\"language-text\">CSS_FILES</code>, and hopefully it will get defined by webpack, by adding <code class=\"language-text\">const CSS_FILES = ...</code> at the very top of the file.</p>\n<p>And to be extra careful, I have to make sure also that there’s no variable <code class=\"language-text\">CSS_FILES</code> declared between the global scope and the current scope the variable is being used.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> ManifestPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack-manifest-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyWebpackPlugin</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">compiler</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">ManifestPlugin</span><span class=\"token punctuation\">(</span>manifestOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>compiler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// get manifest from `webpack-manifest-plugin`</span>\n    ManifestPlugin<span class=\"token punctuation\">.</span><span class=\"token function\">getCompilerHooks</span><span class=\"token punctuation\">(</span>compiler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>afterEmit<span class=\"token punctuation\">.</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">'MyWebpackPlugin'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token parameter\">manifest</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>manifest <span class=\"token operator\">=</span> manifest<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// see https://lihautan.com/webpack-plugin-main-template</span>\n    <span class=\"token comment\">// on writing template plugin</span>\n    compiler<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>thisCompilation<span class=\"token punctuation\">.</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span><span class=\"token string\">'MyWebpackPlugin'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">compilation</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ...</span>\n      hooks<span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">.</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span><span class=\"token string\">'MyWebpackPlugin'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">source<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> chunk<span class=\"token punctuation\">,</span> chunkGraph <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token keyword\">const</span> prefix <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">const CSS_FILES = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>manifest<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcatSource</span><span class=\"token punctuation\">(</span>prefix<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Apparently, this does not work at all. The compiled output shows:</p>\n<p class=\"filename\">bundle.js</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">CSS_FILES</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...continue with bundle.js</span></code></pre></div>\n<p>After tracing through the code, I realised that I was ignorant of the sequence of execution of the <a href=\"https://webpack.js.org/api/compiler-hooks/\">compiler hooks</a>.</p>\n<p>In the <a href=\"https://webpack.js.org/api/compiler-hooks/\">docs for compiler hooks</a>, each hooks is executed in sequence:</p>\n<ul>\n<li>…</li>\n<li>run</li>\n<li>…</li>\n<li>thisCompilation</li>\n<li>…</li>\n<li>emit</li>\n<li>afterEmit</li>\n<li>…</li>\n</ul>\n<p>The webpack manifest plugin executes mainly <a href=\"https://github.com/danethurber/webpack-manifest-plugin/blob/63d3ee2/lib/plugin.js#L255\">during the <code class=\"language-text\">emit</code> phase</a>, right before webpack writes all the assets into the output directory. And, we are modifying the template source in the <code class=\"language-text\">thisCompilation</code> phase, which is way before the <code class=\"language-text\">emit</code> phase. That’s why <code class=\"language-text\">this.manifest</code> property is still undefined at the time of execution.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">-</span> <span class=\"token function\">thisCompliation</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>manifest <span class=\"token operator\">==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">-</span> <span class=\"token comment\">// ...</span>\n<span class=\"token operator\">-</span> <span class=\"token function\">emit</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>manifest <span class=\"token operator\">=</span> manifest<span class=\"token punctuation\">)</span> <span class=\"token comment\">// too late!</span></code></pre></div>\n<p>Upon reading the code fot he <code class=\"language-text\">webpack-manifest-plugin</code>, I realised that during the <code class=\"language-text\">emit</code> phase, I can access to the <code class=\"language-text\">compilation.assets</code>, and so, I could modifying the source for the assets during that time!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> ManifestPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack-manifest-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyWebpackPlugin</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">compiler</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">ManifestPlugin</span><span class=\"token punctuation\">(</span>manifestOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>compiler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// get manifest from `webpack-manifest-plugin`</span>\n    ManifestPlugin<span class=\"token punctuation\">.</span><span class=\"token function\">getCompilerHooks</span><span class=\"token punctuation\">(</span>compiler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>afterEmit<span class=\"token punctuation\">.</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">'MyWebpackPlugin'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token parameter\">manifest</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>manifest <span class=\"token operator\">=</span> manifest<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    compiler<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>emit<span class=\"token punctuation\">.</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span><span class=\"token string\">'MyWebpackPlugin'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">compilation</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> prefix <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">const CSS_FILES = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>manifest<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> file <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>compilation<span class=\"token punctuation\">.</span>assets<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        compilation<span class=\"token punctuation\">.</span>assets<span class=\"token punctuation\">[</span>file<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcatSource</span><span class=\"token punctuation\">(</span>\n          prefix<span class=\"token punctuation\">,</span>\n          compilation<span class=\"token punctuation\">.</span>assets<span class=\"token punctuation\">[</span>file<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Apparently that works, but I wonder whether is it a good practice to modifying the source of an asset during the <code class=\"language-text\">emit</code> phase? <span class=\"emoji\">🤔</span></p>\n<p>And, if you noticed, I need to append the <code class=\"language-text\">const CSS_FILES = [...]</code> to every file, that’s because I have no idea in which file <code class=\"language-text\">CSS_FILES</code> is referenced. And because I declared it using <code class=\"language-text\">const</code>, it only exists within the file’s scope, so I have to redeclare it all the other files.</p>\n<h3 id=\"updated-feb-27-2020-1\"><a href=\"#updated-feb-27-2020-1\" aria-label=\"updated feb 27 2020 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[Updated Feb 27, 2020]</h3>\n<p>According to <a href=\"https://twitter.com/evilebottnawi\">@evilebottnawi</a> that this is not appropriate</p>\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">A lot of plugin uses `compiler.hooks.emit` for emitting new assets, it is invalid. Ideally plugins should use `compilation.hooks.additionalAssets` for adding new assets.</p>&mdash; evilebottnawi (@evilebottnawi) <a href=\"https://twitter.com/evilebottnawi/status/1230417598677954560?ref_src=twsrc%5Etfw\">February 20, 2020</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<h2 id=\"the-3rd-approach\"><a href=\"#the-3rd-approach\" aria-label=\"the 3rd approach permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The 3rd approach</h2>\n<p>I was still not convinced that this is the best I could do, so I continued looking around webpack’s doc. I found a particular compilation hooks, <a href=\"https://webpack.js.org/api/compilation-hooks/#needadditionalpass\"><code class=\"language-text\">needAdditionalPass</code></a>, which seems useful. It says, <em>“Called to determine if an asset needs to be processed further after being emitted.”</em>.</p>\n<p>So, if I return <code class=\"language-text\">true</code> in the <code class=\"language-text\">needAdditionalPass</code>, webpack will re<code class=\"language-text\">compile</code> the asset again:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyWebpackPlugin</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">compiler</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    compiler<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>thisCompilation<span class=\"token punctuation\">.</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span><span class=\"token string\">'MyWebpackPlugin'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">compilation</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      compilation<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>needAdditionalPass<span class=\"token punctuation\">.</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span><span class=\"token string\">'MyWebpackPlugin'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// if it is always true, will lead to infinite loop!</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">-</span> <span class=\"token function\">thisCompliation</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>manifest <span class=\"token operator\">==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">-</span> <span class=\"token comment\">// ...</span>\n<span class=\"token operator\">-</span> <span class=\"token function\">emit</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>manifest <span class=\"token operator\">=</span> manifest<span class=\"token punctuation\">)</span> <span class=\"token comment\">// too late!</span>\n<span class=\"token operator\">-</span> <span class=\"token comment\">// ...</span>\n<span class=\"token operator\">-</span> <span class=\"token function\">needAddtionalPass</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// to start the compilation again</span>\n<span class=\"token operator\">-</span> <span class=\"token comment\">// ...</span>\n<span class=\"token operator\">-</span> <span class=\"token function\">thisCompilation</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>manifest <span class=\"token operator\">==</span> manifest<span class=\"token punctuation\">)</span> <span class=\"token comment\">// now `this.manifest` is available</span>\n<span class=\"token operator\">-</span> <span class=\"token comment\">// ... will continue run through every stages again</span>\n<span class=\"token operator\">-</span> <span class=\"token function\">emit</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>manifest <span class=\"token operator\">=</span> manifest<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">-</span> <span class=\"token comment\">// ...</span></code></pre></div>\n<p>Note that using <code class=\"language-text\">needAdditionalPass</code> will cause the build time to roughly doubled!</p>\n<p>You may argue that why do we need to rerun the <code class=\"language-text\">compilation</code> process again, isn’t the end result can be equally achieved by modifying the assets source in the <code class=\"language-text\">emit</code> phase?</p>\n<p>Well, that’s because, I realised I could make use <a href=\"https://github.com/webpack/webpack/blob/d426b6c/lib/DefinePlugin.js\">some of the code from the <code class=\"language-text\">DefinePlugin</code></a>, which could replace the usage of <code class=\"language-text\">CSS_FILES</code> throughout the code. That way, I don’t have to prefix every file with <code class=\"language-text\">const CSS_FILES = ...</code>.</p>\n<p>DefinePlugin uses something called <a href=\"https://webpack.js.org/api/parser/\"><strong>JavaScriptParser Hooks</strong></a>, which you can rename a variable through <code class=\"language-text\">canRename</code> and <code class=\"language-text\">identifier</code> hooks or replace an expression through the <code class=\"language-text\">expression</code> hook:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyWebpackPlugin</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">compiler</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    compiler<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>thisCompilation<span class=\"token punctuation\">.</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">'MyWebpackPlugin'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\">compilation<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> normalModuleFactory <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        normalModuleFactory<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>parser\n          <span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'javascript/auto'</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span><span class=\"token string\">'MyWebpackPlugin'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">parser</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">            parser<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>expression</span><span class=\"gatsby-highlight-code-line\">              <span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'CSS_FILES'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">              <span class=\"token punctuation\">.</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span><span class=\"token string\">'MyWebpackPlugin'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">expr</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">                <span class=\"token keyword\">return</span> ParserHelpers<span class=\"token punctuation\">.</span><span class=\"token function\">toConstantDependency</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">                  parser<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">                  <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>manifest<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>expr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The complete code can be found in <a href=\"https://gist.github.com/tanhauhau/2dc6cc376fd190e05d14901b984c7fc1\">this gist</a>.</p>\n<p>An example of the compiled output:</p>\n<p class=\"filename\">bundle.js</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ...</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// replaced via parser hooks</span>\n<span class=\"gatsby-highlight-code-line\">    css<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'http://cdn/assets/style.xxx.css'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span>    html<span class=\"token punctuation\">:</span> htmlContent<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"closing-notes\"><a href=\"#closing-notes\" aria-label=\"closing notes permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Closing Notes</h2>\n<p>The compile output for the 3rd approach seemed to be better (more precise?) than the other, yet I am not entirely sure using a <code class=\"language-text\">needAdditionalPass</code> is the right way of going about it.</p>\n<p>So, <a href=\"https://twitter.com/lihautan\">let me know</a> if you have any thoughts or suggestions, yea?</p>\n<h3 id=\"updated-feb-27-2020-2\"><a href=\"#updated-feb-27-2020-2\" aria-label=\"updated feb 27 2020 2 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[Updated Feb 27, 2020]</h3>\n<p>You can read <a href=\"https://twitter.com/lihautan/status/1230301241533583360\">the discussions that’s happening on Twitter</a>:</p>\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Need some suggestions and inputs from <a href=\"https://twitter.com/webpack?ref_src=twsrc%5Etfw\">@webpack</a> masters, I&#39;ve written the problem and approaches that I&#39;ve taken over here: <a href=\"https://t.co/gLsPG9Joeq\">https://t.co/gLsPG9Joeq</a>, still I&#39;m not sure I am doing it right 🙈<a href=\"https://twitter.com/wSokra?ref_src=twsrc%5Etfw\">@wSokra</a> <a href=\"https://twitter.com/evilebottnawi?ref_src=twsrc%5Etfw\">@evilebottnawi</a></p>&mdash; Tan Li Hau (@lihautan) <a href=\"https://twitter.com/lihautan/status/1230301241533583360?ref_src=twsrc%5Etfw\">February 20, 2020</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>","fields":{"slug":"/webpack-additional-compilation-pass/","wip":false},"frontmatter":{"title":"Webpack Additional Compilation Pass","date":"February 20, 2020","lastUpdated":"February 27, 2020","description":null,"tags":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/webpack-additional-compilation-pass/","type":"blog","noteDate":null,"noteTitle":null,"wip":false,"heroImageUrl":null,"heroTwitterImageUrl":null,"previous":{"id":"1bea80d4-7278-5453-b8f5-e2873de1800b","fields":{"slug":"/webpack-plugin-main-template/","type":"blog","noteDate":null,"noteTitle":null,"wip":false},"frontmatter":{"title":"Webpack's TemplatePlugin"}},"next":{"id":"f8c064e3-663a-59de-a0ed-28eeaaa08349","fields":{"slug":"/hydrating-text-content/","type":"blog","noteDate":null,"noteTitle":null,"wip":false},"frontmatter":{"title":"Hydrating text content from Server-Side Rendering"}}}}}