{"componentChunkName":"component---src-templates-blog-post-js","path":"/compile-svelte-in-your-head-part-2/","result":{"data":{"site":{"siteMetadata":{"title":"Tan Li Hau","author":"Tan Li Hau","siteUrl":"https://lihautan.com"}},"markdownRemark":{"id":"e91eed41-75d0-5b87-9405-7f991b0b2e83","excerpt":"","html":"<p><strong>⬅ ⬅  Previously in <a href=\"/compile-svelte-in-your-head-part-1/\">Part 1</a>.</strong></p>\n<p><a href=\"/compile-svelte-in-your-head-part-1/\">Previously</a>, when I mentioned the <code class=\"language-text\">$$invalidate</code> function, I explained that the <code class=\"language-text\">$$invalidate</code> function works conceptually like the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// conceptually...</span>\n<span class=\"token keyword\">const</span> ctx <span class=\"token operator\">=</span> <span class=\"token function\">instance</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> fragment <span class=\"token operator\">=</span> <span class=\"token function\">create_fragment</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// to track which variable has changed</span>\n<span class=\"token keyword\">const</span> dirty <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">$$invalidate</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">variable<span class=\"token punctuation\">,</span> newValue</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// update ctx</span>\n  ctx<span class=\"token punctuation\">[</span>variable<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> newValue<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// mark variable as dirty</span>\n  dirty<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>variable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// schedules update for the component</span>\n  <span class=\"token function\">scheduleUpdate</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// gets called when update is scheduled</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">flushUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// update the fragment</span>\n  fragment<span class=\"token punctuation\">.</span><span class=\"token function\">p</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> dirty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// clear the dirty</span>\n  dirty<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>but that’s not the exact implementation of the <code class=\"language-text\">$$invaldiate</code> function. So in this article, we are going to look at how <code class=\"language-text\">$$invalidate</code> is implemented in Svelte.</p>\n<p>At the point of writing, Svelte is at <a href=\"https://github.com/sveltejs/svelte/blob/v3.20.1/CHANGELOG.md#3201\">v3.20.1</a>.</p>\n<h2 id=\"pre-v3160\"><a href=\"#pre-v3160\" aria-label=\"pre v3160 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pre v3.16.0</h2>\n<p>There’s a big optimisation that changes the underlying implementation of the <code class=\"language-text\">$$invalidate</code> function in <a href=\"https://github.com/sveltejs/svelte/blob/master/CHANGELOG.md#3160\">v3.16.0</a>, namely in <a href=\"https://github.com/sveltejs/svelte/pull/3945\">#3945</a>. The underlying concept doesn’t change, but it’ll be much easier to understand about <code class=\"language-text\">$$invalidate</code> prior the change and learn about the optimisation change separately.</p>\n<p>Let’s explain some of the variables that you are going to see, some of which was introduced in <a href=\"/compile-svelte-in-your-head-part-1\">Part 1</a>:</p>\n<h3 id=\"ctx\"><a href=\"#ctx\" aria-label=\"ctx permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>$$.ctx</h3>\n<p>There’s no official name for it. You can call it <strong>context</strong> as it is the context which the template is based on to render onto the DOM.</p>\n<p>I called it <a href=\"/compile-svelte-in-your-head-part-1#instance-variable\">instance variables</a>. As it is a JavaScript Object that contains all the variables that you:</p>\n<ul>\n<li>declared in the <code class=\"language-text\">&lt;script&gt;</code> tag</li>\n<li>mutated or reassigned</li>\n<li>referenced in the template</li>\n</ul>\n<p>that belongs to a component instance.</p>\n<p>The instance variables themselves can be of a primitive value, object, array or function.</p>\n<p>The <code class=\"language-text\">instance</code> function creates and returns the <code class=\"language-text\">ctx</code> object.</p>\n<p>Functions declared in the <code class=\"language-text\">&lt;script&gt;</code> tag will refer to the instance variable that is scoped withn the <code class=\"language-text\">instance</code> function closure:</p>\n<div class=\"gatsby-highlight\" data-language=\"svelte\"><pre class=\"language-svelte\"><code class=\"language-svelte\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    name <span class=\"token operator\">=</span> <span class=\"token string\">'Svelte'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\"><span class=\"token namespace\">on:</span>click=</span><span class=\"token language-javascript\"><span class=\"token punctuation\">{</span>update<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token language-javascript\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><a href=\"https://svelte.dev/repl/5b12ff52c2874f4dbb6405d9133b34da?version=3.20.1\">Svelte REPL</a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">instance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">$$self<span class=\"token punctuation\">,</span> $$props<span class=\"token punctuation\">,</span> $$invalidate</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">$$invalidate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Svelte'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> update <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ...some where in `create_fragment`</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// logs `world` scoped in the `instance` closure</span></code></pre></div>\n<p>Whenever a new instance of a component is created, the <code class=\"language-text\">instance</code> function is called and the <code class=\"language-text\">ctx</code> object is created and captured within a new closure scope.</p>\n<h3 id=\"dirty\"><a href=\"#dirty\" aria-label=\"dirty permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>$$.dirty</h3>\n<p><code class=\"language-text\">$$.dirty</code> is a object that is used to track which instance variable had just changed and needs to be updated onto the DOM.</p>\n<p>For example, in the following Svelte component:</p>\n<div class=\"gatsby-highlight\" data-language=\"svelte\"><pre class=\"language-svelte\"><code class=\"language-svelte\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">let</span> agility <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> power <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">incrementAgility</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    agility <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">incrementPower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    power <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">levelUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    agility <span class=\"token operator\">+=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n    power <span class=\"token operator\">+=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\nAgility: <span class=\"token language-javascript\"><span class=\"token punctuation\">{</span>agility<span class=\"token punctuation\">}</span></span>\nPower: <span class=\"token language-javascript\"><span class=\"token punctuation\">{</span>power<span class=\"token punctuation\">}</span></span>\nStats: <span class=\"token language-javascript\"><span class=\"token punctuation\">{</span>agility <span class=\"token operator\">*</span> power<span class=\"token punctuation\">}</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\"><span class=\"token namespace\">on:</span>click=</span><span class=\"token language-javascript\"><span class=\"token punctuation\">{</span>incrementAgility<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>+ Agility<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\"><span class=\"token namespace\">on:</span>click=</span><span class=\"token language-javascript\"><span class=\"token punctuation\">{</span>incrementPower<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>+ Power<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\"><span class=\"token namespace\">on:</span>click=</span><span class=\"token language-javascript\"><span class=\"token punctuation\">{</span>levelUp<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>Level Up<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><a href=\"https://svelte.dev/repl/da579d0113b44f01b2b94893dce21487?version=3.20.1\">Svelte REPL</a></p>\n<p>The initial <code class=\"language-text\">$$.dirty</code> is <code class=\"language-text\">null</code> (<a href=\"https://github.com/sveltejs/svelte/blob/v3.15.0/src/runtime/internal/Component.ts#L124\">source code</a>).</p>\n<p>If you clicked on the <strong>”+ Agility”</strong> button, <code class=\"language-text\">$$.dirty</code> will turn into:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span> agility<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you clicked on the <strong>“Level Up”</strong> button, <code class=\"language-text\">$$.dirty</code> will turn into:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span> agility<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> power<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">$$.dirty</code> is useful for Svelte, so that it doesn’t update the DOM unnecessarily.</p>\n<p>If you looked at the <strong>p (u<em>p</em>date)</strong> function of the compiled code, you will see Svelte checks whether a variable is marked in <code class=\"language-text\">$$.dirty</code>, before updating the DOM.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// NOTE: $$.dirty is passed into the `p` function as `changed`</span>\n<span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">changed<span class=\"token punctuation\">,</span> ctx</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// checked if agility has changed before update the agility text</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>changed<span class=\"token punctuation\">.</span>agility<span class=\"token punctuation\">)</span> <span class=\"token function\">set_data</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">.</span>agility<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>changed<span class=\"token punctuation\">.</span>power<span class=\"token punctuation\">)</span> <span class=\"token function\">set_data</span><span class=\"token punctuation\">(</span>t3<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">.</span>power<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// if either agility or power has changed, update the stats text</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>changed<span class=\"token punctuation\">.</span>agility <span class=\"token operator\">||</span> changed<span class=\"token punctuation\">.</span>power<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> t5_value <span class=\"token operator\">!==</span> <span class=\"token punctuation\">(</span>t5_value <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>agility <span class=\"token operator\">*</span> ctx<span class=\"token punctuation\">.</span>power <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">set_data</span><span class=\"token punctuation\">(</span>t5<span class=\"token punctuation\">,</span> t5_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>After Svelte updates the DOM, the <code class=\"language-text\">$$.dirty</code> is set back to <code class=\"language-text\">null</code> to indicate all changes has been applied onto the DOM.</p>\n<h3 id=\"invalidate\"><a href=\"#invalidate\" aria-label=\"invalidate permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>$$invalidate</h3>\n<p><code class=\"language-text\">$$invalidate</code> is the secret behind reactivity in Svelte.</p>\n<p>Whenever a variable is</p>\n<ul>\n<li>reassigned <code class=\"language-text\">(foo = 1)</code></li>\n<li>mutated <code class=\"language-text\">(foo.bar = 1)</code></li>\n</ul>\n<p>Svelte will wrap the assignment or update around with the <code class=\"language-text\">$$invalidate</code> function:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">name <span class=\"token operator\">=</span> <span class=\"token string\">'Svelte'</span><span class=\"token punctuation\">;</span>\ncount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\nfoo<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nbar <span class=\"token operator\">=</span> baz <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// compiled into</span>\n<span class=\"token function\">$$invalidate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Svelte'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">$$invalidate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'count'</span><span class=\"token punctuation\">,</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">$$invalidate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">$$invalidate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>bar <span class=\"token operator\">=</span> <span class=\"token function\">$$invalidate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'baz'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>baz <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>the <code class=\"language-text\">$$invalidate</code> function will:</p>\n<ol>\n<li>update the variable in <code class=\"language-text\">$$.ctx</code></li>\n<li>mark the variable in <code class=\"language-text\">$$.dirty</code></li>\n<li>schedule an update</li>\n<li>return the value of the assignment or update expression</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// src/runtime/internal/Component.ts</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">$$invalidate</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">,</span> value <span class=\"token operator\">=</span> ret</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>$$<span class=\"token punctuation\">.</span>ctx <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">not_equal</span><span class=\"token punctuation\">(</span>$$<span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 1. update the variable in $$.ctx</span>\n    $$<span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token comment\">// 2a. mark the variable in $$.dirty</span>\n    <span class=\"token function\">make_dirty</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 4. return the value of the assignment or update expression</span>\n  <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// src/runtime/internal/Component.ts</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">make_dirty</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">component<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>component<span class=\"token punctuation\">.</span>$$<span class=\"token punctuation\">.</span>dirty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    dirty_components<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 3. schedule an update</span>\n    <span class=\"token function\">schedule_update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// initialise $$.dirty</span>\n    component<span class=\"token punctuation\">.</span>$$<span class=\"token punctuation\">.</span>dirty <span class=\"token operator\">=</span> <span class=\"token function\">blank_object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 2b. mark the variable in $$.dirty</span>\n  component<span class=\"token punctuation\">.</span>$$<span class=\"token punctuation\">.</span>dirty<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://github.com/sveltejs/svelte/blob/v3.15.0/src/runtime/internal/Component.ts#L130-L136\">Source code</a></p>\n<p>One interesting note about the function <code class=\"language-text\">$$invalidate</code> is that, it wraps around the assignment or update expression and returns what the expression evaluates to.</p>\n<p>This makes <code class=\"language-text\">$$invalidate</code> chainable:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  b<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>foo <span class=\"token operator\">=</span> bar<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nobj<span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> c <span class=\"token operator\">=</span> d<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> b <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> baz <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// assuming all variables are referenced in the template</span>\n<span class=\"token comment\">// the above compiles into</span>\n\n<span class=\"token function\">$$invalidate</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'obj'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span>obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    b<span class=\"token punctuation\">:</span> <span class=\"token function\">$$invalidate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>foo <span class=\"token operator\">=</span> <span class=\"token function\">$$invalidate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span> bar<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">$$invalidate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'obj'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">$$invalidate</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> c <span class=\"token operator\">=</span> <span class=\"token function\">$$invalidate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> d<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> b <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">$$invalidate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'baz'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>baz <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  c<span class=\"token punctuation\">,</span>\n  <span class=\"token function\">$$invalidate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>It seemed complex when there’s a lot of assignment or update expressions in 1 statement! <span class=\"emoji\">🙈</span></p>\n<p>The 2nd argument of <code class=\"language-text\">$$invalidate</code> is the assignment or update expressions verbatim. But if it contains any assignment or update sub-expressions, we recursively wrap it with <code class=\"language-text\">$$invalidate</code>.</p>\n<p>In case where the assignment expression changes a property of an object, we pass the object in as a 3rd argument of the <code class=\"language-text\">$$invalidate</code> function, eg:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">obj<span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// compiles into</span>\n<span class=\"token function\">$$invalidate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'obj'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// - it invalidates `obj`</span>\n<span class=\"token comment\">// - it returns the evaluated value of the expression `obj.c = 'hello'`, which is 'hello'</span></code></pre></div>\n<p>So that, we update the <code class=\"language-text\">&quot;obj&quot;</code> variable to <code class=\"language-text\">obj</code> instead of the value of the 2nd argument, <code class=\"language-text\">&quot;hello&quot;</code>.</p>\n<h3 id=\"schedule_update\"><a href=\"#schedule_update\" aria-label=\"schedule_update permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>schedule_update</h3>\n<p><code class=\"language-text\">schedule_update</code> schedules Svelte to update the DOM with the changes made thus far.</p>\n<p>Svelte, at the point of writing (<a href=\"https://github.com/sveltejs/svelte/blob/v3.20.1/CHANGELOG.md#3201\">v3.20.1</a>), uses <a href=\"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\">microtask queue</a> to batch change updates. The actual DOM update happens in the next microtask, so that any synchronous <code class=\"language-text\">$$invalidate</code> operations that happen within the same task get batched into the next DOM update.</p>\n<p>To schedule a next microtask, Svelte uses the Promise callback.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// src/runtime/internal/scheduler.ts</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">schedule_update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>update_scheduled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    update_scheduled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// NOTE: `flush` will do the DOM update</span>\n    <span class=\"token comment\">// we push it into the microtask queue</span>\n<span class=\"gatsby-highlight-code-line\">    resolved_promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>flush<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In <code class=\"language-text\">flush</code>, we call update for each component marked dirty:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// src/runtime/internal/scheduler.ts</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token comment\">// for each componnet in `dirty_components`</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">.</span>$$<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// src/runtime/internal/scheduler.ts</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">$$</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>$$<span class=\"token punctuation\">.</span>fragment <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// NOTE: this will be important later</span>\n    $$<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>$$<span class=\"token punctuation\">.</span>dirty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">run_all</span><span class=\"token punctuation\">(</span>$$<span class=\"token punctuation\">.</span>before_update<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// calls the `p` function</span>\n<span class=\"gatsby-highlight-code-line\">    $$<span class=\"token punctuation\">.</span>fragment <span class=\"token operator\">&amp;&amp;</span> $$<span class=\"token punctuation\">.</span>fragment<span class=\"token punctuation\">.</span><span class=\"token function\">p</span><span class=\"token punctuation\">(</span>$$<span class=\"token punctuation\">.</span>dirty<span class=\"token punctuation\">,</span> $$<span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token comment\">// resets `$$.dirty`</span>\n    $$<span class=\"token punctuation\">.</span>dirty <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n    $$<span class=\"token punctuation\">.</span>after_update<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>add_render_callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://github.com/sveltejs/svelte/blob/v3.15.0/src/runtime/internal/scheduler.ts#L14\">Source code</a></p>\n<p>So, if you write a Svelte component like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"svelte\"><pre class=\"language-svelte\"><code class=\"language-svelte\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">let</span> givenName<span class=\"token punctuation\">,</span> familyName<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    givenName <span class=\"token operator\">=</span> <span class=\"token string\">'Li Hau'</span><span class=\"token punctuation\">;</span>\n    familyName <span class=\"token operator\">=</span> <span class=\"token string\">'Tan'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\nName: <span class=\"token language-javascript\"><span class=\"token punctuation\">{</span>familyName<span class=\"token punctuation\">}</span></span> <span class=\"token language-javascript\"><span class=\"token punctuation\">{</span>givenName<span class=\"token punctuation\">}</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\"><span class=\"token namespace\">on:</span>click=</span><span class=\"token language-javascript\"><span class=\"token punctuation\">{</span>update<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>Update<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><a href=\"https://svelte.dev/repl/761a0a6cc2834afb842942e1d23875b1?version=3.20.1\">Svelte REPL</a></p>\n<p>The DOM update for the <code class=\"language-text\">givenName</code> and <code class=\"language-text\">familyName</code> happens in the same microtask:</p>\n<ol>\n<li>Click on the <strong>“Update”</strong> to call the <code class=\"language-text\">update</code> function</li>\n<li><code class=\"language-text\">$$invalidate(&#39;givenName&#39;, givenName = &#39;Li Hau&#39;)</code></li>\n<li>Mark the variable <code class=\"language-text\">givenName</code> dirty, <code class=\"language-text\">$$.dirty[&#39;givenName&#39;] = true</code></li>\n<li>Schedule an update, <code class=\"language-text\">schedule_update()</code></li>\n<li>Since it’s the first update in the call stack, push the <code class=\"language-text\">flush</code> function into the microtask queue</li>\n<li><code class=\"language-text\">$$invalidate(&#39;familyName&#39;, familyName = &#39;Tan&#39;)</code></li>\n<li>Mark the variable <code class=\"language-text\">familyName</code> dirty, <code class=\"language-text\">$$.dirty[&#39;familyName&#39;] = true</code></li>\n<li>Schedule an update, <code class=\"language-text\">schedule_update()</code></li>\n<li>Since <code class=\"language-text\">update_scheduled = true</code>, do nothing.</li>\n<li><strong>— End of task —</strong></li>\n<li><strong>— Start of microtask—</strong></li>\n<li><code class=\"language-text\">flush()</code> calls <code class=\"language-text\">update()</code> for each component marked dirty</li>\n<li>\n<p>Calls <code class=\"language-text\">$$.fragment.p($$.dirty, $$.ctx)</code>.</p>\n<ul>\n<li><code class=\"language-text\">$$.dirty</code> is now <code class=\"language-text\">{ givenName: true, familyName: true }</code></li>\n<li><code class=\"language-text\">$$.ctx</code> is now <code class=\"language-text\">{ givenName: &#39;Li Hau&#39;, familyName: &#39;Tan&#39; }</code></li>\n</ul>\n</li>\n<li>\n<p>In <code class=\"language-text\">function p(dirty, ctx)</code>,</p>\n<ul>\n<li>Update the 1st text node to <code class=\"language-text\">$$.ctx[&#39;givenName&#39;]</code> if <code class=\"language-text\">$$.dirty[&#39;givenName&#39;] === true</code></li>\n<li>Update the 2nd text node to <code class=\"language-text\">$$.ctx[&#39;familyName&#39;]</code> if <code class=\"language-text\">$$.dirty[&#39;familyName&#39;] === true</code></li>\n</ul>\n</li>\n<li>Resets the <code class=\"language-text\">$$.dirty</code> to <code class=\"language-text\">null</code></li>\n<li>…</li>\n<li><strong>— End of microtask—</strong></li>\n</ol>\n<h4 id=\"tldr\"><a href=\"#tldr\" aria-label=\"tldr permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tl/dr:</h4>\n<ul>\n<li>For each assignment or update, Svelte calls <code class=\"language-text\">$$invalidate</code> to update the variable in <code class=\"language-text\">$$.ctx</code> and mark the variable dirty in <code class=\"language-text\">$$.dirty</code>.</li>\n<li>The acutal DOM update is batched into the next microtask queue.</li>\n<li>To update the DOM for each component, the component <code class=\"language-text\">$$.fragment.p($$.diry, $$.ctx)</code> is called.</li>\n<li>After the DOM update, the <code class=\"language-text\">$$.dirty</code> is reset to <code class=\"language-text\">null</code>.</li>\n</ul>\n<h2 id=\"v3160\"><a href=\"#v3160\" aria-label=\"v3160 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>v3.16.0</h2>\n<p>One big change in v3.16.0 is the PR <a href=\"https://github.com/sveltejs/svelte/pull/3945\">#3945</a>, namely <strong>bitmask-based change tracking</strong>.</p>\n<p>Instead of marking the variable dirty using an object:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">$$<span class=\"token punctuation\">.</span>diry <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> givenName<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> familyName<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Svelte assign each variable an index:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">givenName <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">0</span>\nfamilyName <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">1</span></code></pre></div>\n<p>and uses <a href=\"https://en.wikipedia.org/wiki/Mask_(computing)\">bitmask</a> to store the dirty information:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">$$<span class=\"token punctuation\">.</span>dirty <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0b0000_0011</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// the 0th and 1st bit marked true</span></code></pre></div>\n<p>which is far more compact than the previous compiled code.</p>\n<h3 id=\"bitmask\"><a href=\"#bitmask\" aria-label=\"bitmask permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bitmask</h3>\n<p>For those who don’t understand, allow me to quickly explain what it is.</p>\n<p>Of course, if you want to learn more about it, feel free to read a more detailed explanation, like <a href=\"https://blog.bitsrc.io/the-art-of-bitmasking-ec58ab1b4c03\">this</a> and <a href=\"https://dev.to/somedood/bitmasks-a-very-esoteric-and-impractical-way-of-managing-booleans-1hlf\">this</a>.</p>\n<p>The most compact way of representing a group of <code class=\"language-text\">true</code> or <code class=\"language-text\">false</code> is to use bits. If the bit is <code class=\"language-text\">1</code> it is <code class=\"language-text\">true</code> and if it is <code class=\"language-text\">0</code> it is <code class=\"language-text\">false</code>.</p>\n<p>A number can be represented in binary, <strong>5</strong> is <code class=\"language-text\">0b0101</code> in binary.</p>\n<p>If <strong>5</strong> is represented in a 4-bit binary, then it can store 4 boolean values, with the 0th and 2nd bit as <code class=\"language-text\">true</code> and 1st and 3rd bit as <code class=\"language-text\">false</code>, (reading from the right to left, from <a href=\"https://en.wikipedia.org/wiki/Bit_numbering#Least_significant_bit\">least significant bit</a> to the <a href=\"https://en.wikipedia.org/wiki/Bit_numbering#Most_significant_bit\">most significant bit</a>).</p>\n<p><strong>How many boolean values can a number store?</strong></p>\n<p>That depends on the language, a 16-bit integer in Java can store 16 boolean values.</p>\n<p>In JavaScript, numbers can are <a href=\"https://2ality.com/2012/04/number-encoding.html\">represented in 64 bits</a>. However, when using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators\">bitwise operations</a> on the number, JavaScript will treat the number as 32 bits.</p>\n<p>To inspect or modify the boolean value stored in a number, we use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators\">bitwise operations</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// set 1st boolean to true</span>\n<span class=\"token number\">0b0101</span> <span class=\"token operator\">|</span> <span class=\"token number\">0b0010</span> <span class=\"token operator\">=</span> <span class=\"token number\">0b0111</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// set 2nd boolean to false</span>\n<span class=\"token number\">0b0101</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0b1011</span> <span class=\"token operator\">=</span> <span class=\"token number\">0b0001</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// is 2nd boolean true?</span>\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0b0101</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0b0100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// NOTE: You can test multiple boolean values at once</span>\n<span class=\"token comment\">// is 2nd and 3rd boolean true?</span>\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0b0101</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0b1100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The 2nd operand we use in the bitwise operation, is like a <a href=\"https://en.wikipedia.org/wiki/Mask_(computing)\">mask</a> that allow us to target a specific bit in the 1st number, that stores our boolean values.</p>\n<p>We call the mask, <strong>bitmask</strong>.</p>\n<h3 id=\"bitmask-in-svelte\"><a href=\"#bitmask-in-svelte\" aria-label=\"bitmask in svelte permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bitmask in Svelte</h3>\n<p>As mentioned earlier, we assign each variable an index:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">givenName <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">0</span>\nfirstName <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">1</span></code></pre></div>\n<p>So instead of returning the instance variable as an JavaScript Object, we now return it as an JavaScript Array:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Previous</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">instance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">$$self<span class=\"token punctuation\">,</span> $$props<span class=\"token punctuation\">,</span> $$invalidate</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> givenName<span class=\"token punctuation\">,</span> familyName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Now</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">instance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">$$self<span class=\"token punctuation\">,</span> $$props<span class=\"token punctuation\">,</span> $$invalidate</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>givenName<span class=\"token punctuation\">,</span> familyName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>The variable is accessed via <strong>index</strong>, <code class=\"language-text\">$$.ctx[index]</code>, instead of <strong>variable name</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Previous</span>\n$$<span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">.</span>givenName <span class=\"token operator\">+</span> $$<span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">.</span>familyName<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Now</span>\n$$<span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> $$<span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <code class=\"language-text\">$$invalidate</code> function works the same, except it takes in <strong>index</strong> instead of <strong>variable name</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Previous</span>\n<span class=\"token function\">$$invalidate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'givenName'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>givenName <span class=\"token operator\">=</span> <span class=\"token string\">'Li Hau'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Now</span>\n<span class=\"token function\">$$invalidate</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>givenName <span class=\"token operator\">=</span> <span class=\"token string\">'Li Hau'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">$$.dirty</code> now stores a list of numbers. Each number carries 31 boolean values, each boolean value indicates whether the variable of that index is dirty or not.</p>\n<p>To set a variable as dirty, we use bitwise operation:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Previous</span>\n$$<span class=\"token punctuation\">.</span>dirty<span class=\"token punctuation\">[</span><span class=\"token string\">'givenName'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Now</span>\n$$<span class=\"token punctuation\">.</span>dirty<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And to verify whether a variable is dirty, we use bitwise operation too!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Previous</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>$dirty<span class=\"token punctuation\">.</span>givenName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>$dirty<span class=\"token punctuation\">.</span>givenName <span class=\"token operator\">&amp;&amp;</span> $dirty<span class=\"token punctuation\">.</span>familyName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Now</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>$dirty<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>$dirty<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>With using bitmask, <code class=\"language-text\">$$.dirty</code> is now reset to <code class=\"language-text\">[-1]</code> instead of <code class=\"language-text\">null</code>.</p>\n<p><strong>Trivia:</strong> <code class=\"language-text\">-1</code> is <code class=\"language-text\">0b1111_1111</code> in binary, where all the bits are <code class=\"language-text\">1</code>.</p>\n<h4 id=\"destructuring-dirty\"><a href=\"#destructuring-dirty\" aria-label=\"destructuring dirty permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Destructuring <strong>$$.dirty</strong></h4>\n<p>One code-size optimisation that Svelte does is to always destructure the <code class=\"language-text\">dirty</code> array in the <strong>u<em>p</em>date function</strong> if there’s less than 32 variables, since we will always access <code class=\"language-text\">dirty[0]</code> anyway:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// If less than 32 variables,</span>\n<span class=\"token comment\">// Instead of having `dirty[0]` all the time,</span>\np<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> dirty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dirty<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dirty<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Svelte optimises the compiled code by </span>\n<span class=\"token comment\">// destruct the array in the arguments</span>\np<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>dirty<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dirty <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dirty <span class=\"token operator\">&amp;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// If more than or equal to 32 variables</span>\np<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> dirty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dirty<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dirty<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"tldr-1\"><a href=\"#tldr-1\" aria-label=\"tldr 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tl/dr:</h4>\n<ul>\n<li>The underlying mechanism for <code class=\"language-text\">$$invalidate</code> and <code class=\"language-text\">schedule_update</code> does not change</li>\n<li>Using bitmask, the compiled code is much compact</li>\n</ul>\n<h2 id=\"reactive-declaration\"><a href=\"#reactive-declaration\" aria-label=\"reactive declaration permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reactive Declaration</h2>\n<p>Svelte allow us to declare reactive values via the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label\">labeled statement</a>, <code class=\"language-text\">$:</code></p>\n<div class=\"gatsby-highlight\" data-language=\"svelte\"><pre class=\"language-svelte\"><code class=\"language-svelte\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// `doubled`, `tripled`, `quadrupled` are reactive</span>\n<span class=\"gatsby-highlight-code-line\">  $<span class=\"token punctuation\">:</span> doubled <span class=\"token operator\">=</span> count <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  $<span class=\"token punctuation\">:</span> tripled <span class=\"token operator\">=</span> count <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  $<span class=\"token punctuation\">:</span> quadrupled <span class=\"token operator\">=</span> doubled <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token language-javascript\"><span class=\"token punctuation\">{</span>doubled<span class=\"token punctuation\">}</span></span> <span class=\"token language-javascript\"><span class=\"token punctuation\">{</span>tripled<span class=\"token punctuation\">}</span></span> <span class=\"token language-javascript\"><span class=\"token punctuation\">{</span>quadrupled<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p><a href=\"https://svelte.dev/repl/e37329dd126448b2aa0679c08993f9a8?version=3.20.1\">Svelte REPL</a></p>\n<p>If you look at the compiled output, you would find out that the declarative statements appeared in the <a href=\"/compile-svelte-in-your-head-part-1/#instanceself-props-invalidate\"><code class=\"language-text\">instance</code> function</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">instance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">$$self<span class=\"token punctuation\">,</span> $$props<span class=\"token punctuation\">,</span> $$invalidate</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n<span class=\"gatsby-highlight-code-line\">\t$$self<span class=\"token punctuation\">.</span>$$<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">update</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>$$self<span class=\"token punctuation\">.</span>$$<span class=\"token punctuation\">.</span>dirty <span class=\"token operator\">&amp;</span> <span class=\"token comment\">/*count*/</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">\t\t\t$<span class=\"token punctuation\">:</span> <span class=\"token function\">$$invalidate</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> doubled <span class=\"token operator\">=</span> count <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">\t\t<span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>$$self<span class=\"token punctuation\">.</span>$$<span class=\"token punctuation\">.</span>dirty <span class=\"token operator\">&amp;</span> <span class=\"token comment\">/*count*/</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">\t\t\t$<span class=\"token punctuation\">:</span> <span class=\"token function\">$$invalidate</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> tripled <span class=\"token operator\">=</span> count <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">\t\t<span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>$$self<span class=\"token punctuation\">.</span>$$<span class=\"token punctuation\">.</span>dirty <span class=\"token operator\">&amp;</span> <span class=\"token comment\">/*doubled*/</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">\t\t\t$<span class=\"token punctuation\">:</span> <span class=\"token function\">$$invalidate</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> quadrupled <span class=\"token operator\">=</span> doubled <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">\t\t<span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>doubled<span class=\"token punctuation\">,</span> tripled<span class=\"token punctuation\">,</span> quadrupled<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Try reorder the reactive declarations and observe the change in the compiled output:</p>\n<div class=\"gatsby-highlight\" data-language=\"svelte\"><pre class=\"language-svelte\"><code class=\"language-svelte\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// NOTE: move `quadrupled` before `doubled`</span>\n<span class=\"gatsby-highlight-code-line\">  $<span class=\"token punctuation\">:</span> quadrupled <span class=\"token operator\">=</span> doubled <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  $<span class=\"token punctuation\">:</span> doubled <span class=\"token operator\">=</span> count <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></span>  $<span class=\"token punctuation\">:</span> tripled <span class=\"token operator\">=</span> count <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><a href=\"https://svelte.dev/repl/fc6995856489402d90291c4c30952939?version=3.20.1\">Svelte REPL</a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">instance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">$$self<span class=\"token punctuation\">,</span> $$props<span class=\"token punctuation\">,</span> $$invalidate</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// ...</span>\n\n\t$$self<span class=\"token punctuation\">.</span>$$<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">update</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// NOTE: `quadrupled` invalidates after `doubled`</span>\n<span class=\"gatsby-highlight-code-line\">\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>$$self<span class=\"token punctuation\">.</span>$$<span class=\"token punctuation\">.</span>dirty <span class=\"token operator\">&amp;</span> <span class=\"token comment\">/*count*/</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">\t\t\t$<span class=\"token punctuation\">:</span> <span class=\"token function\">$$invalidate</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>doubled <span class=\"token operator\">=</span> count <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">\t\t<span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>$$self<span class=\"token punctuation\">.</span>$$<span class=\"token punctuation\">.</span>dirty <span class=\"token operator\">&amp;</span> <span class=\"token comment\">/*doubled*/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">\t\t\t$<span class=\"token punctuation\">:</span> <span class=\"token function\">$$invalidate</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>quadrupled <span class=\"token operator\">=</span> doubled <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">\t\t<span class=\"token punctuation\">}</span></span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>$$self<span class=\"token punctuation\">.</span>$$<span class=\"token punctuation\">.</span>dirty <span class=\"token operator\">&amp;</span> <span class=\"token comment\">/*count*/</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t$<span class=\"token punctuation\">:</span> <span class=\"token function\">$$invalidate</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>tripled <span class=\"token operator\">=</span> count <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>doubled<span class=\"token punctuation\">,</span> tripled<span class=\"token punctuation\">,</span> quadrupled<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Some observations:</p>\n<ul>\n<li>\n<p>When there are reactive declarations, Svelte defines a custom <code class=\"language-text\">$$.update</code> method.</p>\n<ul>\n<li><code class=\"language-text\">$$.update</code> is a <a href=\"https://en.wikipedia.org/wiki/NOP_(code)\">no-op function</a> by default. (See <a href=\"https://github.com/sveltejs/svelte/blob/v3.20.1/src/runtime/internal/Component.ts#L111\">src/runtime/internal/Component.ts</a>)</li>\n</ul>\n</li>\n<li>Svelte uses <code class=\"language-text\">$$invalidate</code> to update the value of a reactive variable too.</li>\n<li>\n<p>Svelte sorts the reactive declarations and statements, based on the dependency relationship between the declarations and statements</p>\n<ul>\n<li><code class=\"language-text\">quadrupled</code> depends on <code class=\"language-text\">doubled</code>, so <code class=\"language-text\">quadrupled</code> is evaluated and <code class=\"language-text\">$$invalidate</code>d after <code class=\"language-text\">doubled</code>.</li>\n</ul>\n</li>\n</ul>\n<p>Since all reactive declarations and statements are grouped into the <code class=\"language-text\">$$.update</code> method, and also the fact that Svelte will sort the declarations and statements according to their dependency relationship, it is irrelevant of the location or the order you declared them.</p>\n<p>The following component still works:</p>\n<div class=\"gatsby-highlight\" data-language=\"svelte\"><pre class=\"language-svelte\"><code class=\"language-svelte\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token comment\">// NOTE: use `count` in a reactive declaration before `count` is declared</span>\n$<span class=\"token punctuation\">:</span> doubled <span class=\"token operator\">=</span> count <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token language-javascript\"><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span></span> * 2 = <span class=\"token language-javascript\"><span class=\"token punctuation\">{</span>doubled<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p><a href=\"https://svelte.dev/repl/fc6995856489402d90291c4c30952939?version=3.20.1\">Svelte REPL</a></p>\n<p><strong>The next thing you may ask, when is <code class=\"language-text\">$$.update</code> being called?</strong></p>\n<p>Remember the <code class=\"language-text\">update</code> function that gets called in the <code class=\"language-text\">flush</code> function?</p>\n<p>I put a <code class=\"language-text\">NOTE:</code> comment saying that it will be important later. Well, it is important now.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// src/runtime/internal/scheduler.ts</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">$$</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>$$<span class=\"token punctuation\">.</span>fragment <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// NOTE: this is important now!</span>\n<span class=\"gatsby-highlight-code-line\">    $$<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>$$<span class=\"token punctuation\">.</span>dirty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token function\">run_all</span><span class=\"token punctuation\">(</span>$$<span class=\"token punctuation\">.</span>before_update<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// calls the `p` function</span>\n    $$<span class=\"token punctuation\">.</span>fragment <span class=\"token operator\">&amp;&amp;</span> $$<span class=\"token punctuation\">.</span>fragment<span class=\"token punctuation\">.</span><span class=\"token function\">p</span><span class=\"token punctuation\">(</span>$$<span class=\"token punctuation\">.</span>dirty<span class=\"token punctuation\">,</span> $$<span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">$$.update</code> function gets called <strong>in the same microtask</strong> with the DOM update, right before we called the <code class=\"language-text\">$$.fragment.p()</code> to update the DOM.</p>\n<p>The implication of the above fact is</p>\n<h4 id=\"1-execution-of-all-reactive-declarations-and-statements-are-batched\"><a href=\"#1-execution-of-all-reactive-declarations-and-statements-are-batched\" aria-label=\"1 execution of all reactive declarations and statements are batched permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Execution of all reactive declarations and statements are batched</h4>\n<p>Just as how DOM updates are batched, reactive declarations and statements are batched too!</p>\n<div class=\"gatsby-highlight\" data-language=\"svelte\"><pre class=\"language-svelte\"><code class=\"language-svelte\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">let</span> givenName <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> familyName <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    givenName <span class=\"token operator\">=</span> <span class=\"token string\">'Li Hau'</span><span class=\"token punctuation\">;</span>\n    familyName <span class=\"token operator\">=</span> <span class=\"token string\">'Tan'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  $<span class=\"token punctuation\">:</span> name <span class=\"token operator\">=</span> givenName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> familyName<span class=\"token punctuation\">;</span>\n  $<span class=\"token punctuation\">:</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><a href=\"https://svelte.dev/repl/941195f1cd5248e9bd14613f9513ad1d?version=3.20.1\">Svelte REPL</a></p>\n<p>When <code class=\"language-text\">update()</code> get called,</p>\n<ol>\n<li>Similar to the <a href=\"#schedule_update\">flow described above</a>, <code class=\"language-text\">$$invalidate</code> both <strong>“givenName”</strong> and <strong>“familyName”</strong>, and schedules an update</li>\n<li><strong>— End of task —</strong></li>\n<li><strong>— Start of microtask—</strong></li>\n<li><code class=\"language-text\">flush()</code> calls <code class=\"language-text\">update()</code> for each component marked dirty</li>\n<li>\n<p>Runs <code class=\"language-text\">$$.update()</code></p>\n<ul>\n<li>As <strong>“givenName”</strong> and <strong>“familyName”</strong> has changed, evaluates and <code class=\"language-text\">$$invalidate</code> <strong>“name”</strong></li>\n<li>As <strong>“name”</strong> has changed, executes <code class=\"language-text\">console.log(&#39;name&#39;, name);</code></li>\n</ul>\n</li>\n<li>Calls <code class=\"language-text\">$$.fragment.p(...)</code> to update the DOM.</li>\n</ol>\n<p>As you can see, even though we’ve updated <code class=\"language-text\">givenName</code> and <code class=\"language-text\">familyName</code>, we only evaluate <code class=\"language-text\">name</code> and executes <code class=\"language-text\">console.log(&#39;name&#39;, name)</code> <strong>once</strong> instead of twice:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Instead of</span>\n<span class=\"token comment\">// #1 `givenName = 'Li Hau'</span>\nname <span class=\"token operator\">=</span> <span class=\"token string\">'Li Hau'</span> <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Li Hau '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// #2 `familyName = 'Tan'</span>\nname <span class=\"token operator\">=</span> <span class=\"token string\">'Li Hau'</span> <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> <span class=\"token string\">'Tan'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Li Hau Tan'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Reactive declarations and statements are batched</span>\n<span class=\"token comment\">// #1 `givenName = 'Li Hau'</span>\n<span class=\"token comment\">// #2 `familyName = 'Tan'</span>\nname <span class=\"token operator\">=</span> <span class=\"token string\">'Li Hau'</span> <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> <span class=\"token string\">'Tan'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Li Hau Tan'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"2-the-value-of-reactive-variable-outside-of-reactive-declarations-and-statements-may-not-be-up-to-date\"><a href=\"#2-the-value-of-reactive-variable-outside-of-reactive-declarations-and-statements-may-not-be-up-to-date\" aria-label=\"2 the value of reactive variable outside of reactive declarations and statements may not be up to date permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. The value of reactive variable outside of reactive declarations and statements may not be up to date</h4>\n<p>Because the reactive declarations and statements are batched and executed in the next microtask, you can’t expect the value to be updated synchronously.</p>\n<div class=\"gatsby-highlight\" data-language=\"svelte\"><pre class=\"language-svelte\"><code class=\"language-svelte\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">let</span> givenName <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> familyName <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    givenName <span class=\"token operator\">=</span> <span class=\"token string\">'Li Hau'</span><span class=\"token punctuation\">;</span>\n    familyName <span class=\"token operator\">=</span> <span class=\"token string\">'Tan'</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Logs ''</span></span>  <span class=\"token punctuation\">}</span>\n  $<span class=\"token punctuation\">:</span> name <span class=\"token operator\">=</span> givenName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> familyName<span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><a href=\"https://svelte.dev/repl/437548d5c7044cb59bfd0c8a0f4c725d?version=3.20.1\">Svelte REPL</a></p>\n<p>Instead, you <strong>have to</strong> refer the reactive variable in another reactive declaration or statement:</p>\n<div class=\"gatsby-highlight\" data-language=\"svelte\"><pre class=\"language-svelte\"><code class=\"language-svelte\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">let</span> givenName <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> familyName <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    givenName <span class=\"token operator\">=</span> <span class=\"token string\">'Li Hau'</span><span class=\"token punctuation\">;</span>\n    familyName <span class=\"token operator\">=</span> <span class=\"token string\">'Tan'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  $<span class=\"token punctuation\">:</span> name <span class=\"token operator\">=</span> givenName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> familyName<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  $<span class=\"token punctuation\">:</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Logs 'Li Hau Tan'</span></span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h3 id=\"sorting-of-reactive-declarations-and-statements\"><a href=\"#sorting-of-reactive-declarations-and-statements\" aria-label=\"sorting of reactive declarations and statements permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sorting of reactive declarations and statements</h3>\n<p>Svelte tries to preserve the order of reactive declarations and statements as they are declared as much as possible.</p>\n<p>However, if one reactive declaration or statement refers to a variable that was defined by another reactive declaration, then, <strong>it will be inserted after the latter reactive declaration</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// NOTE: refers to `doubled`</span>\n$<span class=\"token punctuation\">:</span> quadrupled <span class=\"token operator\">=</span> doubled <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// NOTE: defined `doubled`</span>\n$<span class=\"token punctuation\">:</span> doubled <span class=\"token operator\">=</span> count <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// compiles into:</span>\n\n$$self<span class=\"token punctuation\">.</span>$$<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">update</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  $<span class=\"token punctuation\">:</span> <span class=\"token function\">$$invalidate</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* doubled */</span><span class=\"token punctuation\">,</span> doubled <span class=\"token operator\">=</span> count <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  $<span class=\"token punctuation\">:</span> <span class=\"token function\">$$invalidate</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* quadrupled */</span><span class=\"token punctuation\">,</span> quadrupled <span class=\"token operator\">=</span> doubled <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"reactive-variable-that-is-not-reactive\"><a href=\"#reactive-variable-that-is-not-reactive\" aria-label=\"reactive variable that is not reactive permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reactive variable that is not reactive</h3>\n<p>The Svelte compiler tracks all the variables declared in the <code class=\"language-text\">&lt;script&gt;</code> tag.</p>\n<p>If all the variables of a reactive declaration or statement refers to, never gets mutated or reassigned, then the reactive declaration or statement will not be added into <code class=\"language-text\">$$.update</code>.</p>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"svelte\"><pre class=\"language-svelte\"><code class=\"language-svelte\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  $<span class=\"token punctuation\">:</span> doubled <span class=\"token operator\">=</span> count <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token language-javascript\"><span class=\"token punctuation\">{</span> count <span class=\"token punctuation\">}</span></span> x 2 = <span class=\"token language-javascript\"><span class=\"token punctuation\">{</span>doubled<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p><a href=\"https://svelte.dev/repl/af86472e1f494cfea2efa494f63fff08?version=3.20.1\">Svelte REPL</a></p>\n<p>Since, <code class=\"language-text\">count</code> never gets mutated or reassigned, Svelte optimises the compiled output by not defining <code class=\"language-text\">$$self.$$.update</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">instance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">$$self<span class=\"token punctuation\">,</span> $$props<span class=\"token punctuation\">,</span> $$invalidate</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> doubled<span class=\"token punctuation\">;</span>\n  $<span class=\"token punctuation\">:</span> <span class=\"token function\">$$invalidate</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>doubled <span class=\"token operator\">=</span> count <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>doubled<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"summary\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h2>\n<h4 id=\"1-svelte-keeps-track-of-which-variables-are-dirty-and-batched-the-dom-updates\"><a href=\"#1-svelte-keeps-track-of-which-variables-are-dirty-and-batched-the-dom-updates\" aria-label=\"1 svelte keeps track of which variables are dirty and batched the dom updates permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Svelte keeps track of which variables are dirty and batched the DOM updates.</h4>\n<h4 id=\"2-using-bitmask-svelte-able-to-generate-a-more-compact-compiled-code\"><a href=\"#2-using-bitmask-svelte-able-to-generate-a-more-compact-compiled-code\" aria-label=\"2 using bitmask svelte able to generate a more compact compiled code permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Using bitmask, Svelte able to generate a more compact compiled code.</h4>\n<h4 id=\"3-reactive-declarations-and-statements-are-executed-in-batch-just-like-dom-updates\"><a href=\"#3-reactive-declarations-and-statements-are-executed-in-batch-just-like-dom-updates\" aria-label=\"3 reactive declarations and statements are executed in batch just like dom updates permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Reactive declarations and statements are executed in batch, just like DOM updates</h4>\n<h2 id=\"closing-note\"><a href=\"#closing-note\" aria-label=\"closing note permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Closing Note</h2>\n<p>If you wish to know more, <a href=\"https://twitter.com/lihautan\">follow me on Twitter</a>.</p>\n<p>I’ll post it on Twitter when the next part is ready, where I’ll be covering <a href=\"https://svelte.dev/tutorial/if-blocks\">logic blocks</a>, <a href=\"https://svelte.dev/tutorial/slots\">slots</a>, <a href=\"https://svelte.dev/tutorial/context-api\">context</a>, and many others.</p>\n<p><strong>⬅ ⬅  Previously in <a href=\"/compile-svelte-in-your-head-part-1/\">Part 1</a>.</strong></p>\n<p><strong>➡ ➡  Continue reading on <a href=\"/compile-svelte-in-your-head-part-3/\">Part 3</a>.</strong></p>\n<h2 id=\"further-resources\"><a href=\"#further-resources\" aria-label=\"further resources permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Further Resources</h2>\n<ul>\n<li>Rich Harris shares about <a href=\"https://www.youtube.com/watch?v=zq6PpM5t3z0&#x26;t=2530s\">Bitmask Tracking at Svelte Society NYC</a>.</li>\n<li>Svelte Tutorial - <a href=\"https://svelte.dev/tutorial/reactive-assignments\">Reactivity</a>\n<a href=\"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\">https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/</a></li>\n<li><a href=\"https://blog.bitsrc.io/the-art-of-bitmasking-ec58ab1b4c03\">The Art of Bitmasking</a> by Shakib Ahmed</li>\n<li><a href=\"https://dev.to/somedood/bitmasks-a-very-esoteric-and-impractical-way-of-managing-booleans-1hlf\">Bitmasks: A very esoteric (and impractical) way of managing booleans</a> by Basti Ortiz</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators\">MDN: Bitwise Operators</a></li>\n</ul>","fields":{"slug":"/compile-svelte-in-your-head-part-2/","wip":false},"frontmatter":{"title":"Compile Svelte in your head (Part 2)","dateTimestamp":"2020-03-22T08:00:00UTC","date":"March 22, 2020","lastUpdatedTimestamp":null,"lastUpdated":null,"description":null,"tags":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/compile-svelte-in-your-head-part-2/","type":"blog","noteDate":null,"noteTitle":null,"wip":false,"heroImageUrl":null,"heroTwitterImageUrl":"/static/hero-twitter-58a4078b8a6940bfab0e3c891c2dad4d.jpg","previous":{"id":"a75a48eb-95a3-5d08-9f7f-9c13687cf94f","fields":{"slug":"/compile-svelte-in-your-head-part-1/","type":"blog","noteDate":null,"noteTitle":null,"wip":false},"frontmatter":{"title":"Compile Svelte in your head (Part 1)"}},"next":{"id":"7fc9542f-858a-593a-b85c-b29067438362","fields":{"slug":"/the-svelte-compiler-handbook/","type":"blog","noteDate":null,"noteTitle":null,"wip":false},"frontmatter":{"title":"The Svelte Compiler Handbook"}}}}}