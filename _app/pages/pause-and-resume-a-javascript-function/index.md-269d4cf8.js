import{S as hc,i as kc,s as yc,C as Qr,w as vc,x as dc,y as uc,z as fc,A as Ai,q as wc,o as mc,B as xc,r as gc,Y as qi,e as n,t as e,k as i,c as t,a,h as r,d as o,m as c,b as l,X as Ec,f as wn,g as x,H as s,J as _c}from"../../chunks/vendor-da4388d4.js";import{B as bc}from"../../chunks/BlogLayout-14cfab6f.js";import{_ as Ic}from"../../chunks/twitter-card-image-a57df29d.js";import"../../chunks/stores-1fad7c36.js";import"../../chunks/ldjson-b0805387.js";/* empty css                                */function Sc(Ps){let y,T,I,$,w,E,Cs,qo,Zn,Kn,Qn,Ds,Ri=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getWeddingDetail</span><span style="color: var(--shiki-color-text)">(itemId</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callback) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// call IO</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-token-function)">.fetch</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;https://api.com/wedding/</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">itemId</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">callback</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    error</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    wedding</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// get notified when the result is back</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (error) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">handleError</span><span style="color: var(--shiki-color-text)">(error);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">callback</span><span style="color: var(--shiki-color-text)">(wedding);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,se,V,oe,Lo,ne,ee,te,Ws,Fi=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getProfile</span><span style="color: var(--shiki-color-text)">(userId</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callback) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-token-function)">.fetch</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;https://api.com/user/</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">userId</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callback);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getWeddingDetail</span><span style="color: var(--shiki-color-text)">(itemId</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callback) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// call IO</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-token-function)">.fetch</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;https://api.com/wedding/</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">itemId</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">callback</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    error</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    wedding</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// get notified when the result is back</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (error) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">handleError</span><span style="color: var(--shiki-color-text)">(error);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">getProfile</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">wedding</span><span style="color: var(--shiki-color-text)">.groomId</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(groomError</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> groom) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (groomError) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">handleError</span><span style="color: var(--shiki-color-text)">(groomError);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">getProfile</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">wedding</span><span style="color: var(--shiki-color-text)">.brideId</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(brideError</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> bride) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (brideError) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">handleError</span><span style="color: var(--shiki-color-text)">(brideError);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">callback</span><span style="color: var(--shiki-color-text)">(&#123; wedding</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> bride</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> groom &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ae,q,re,j,le,ie,Y,Js,ce,pe,he,M,As,ke,ye,qs,ve,de,ue,Ls,Hi=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getProfile</span><span style="color: var(--shiki-color-text)">(userId) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-token-function)">.fetch</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;https://api.com/user/</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">userId</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getWeddingDetail</span><span style="color: var(--shiki-color-text)">(weddingId) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// pause to get detail through IO</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">wedding</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-token-function)">.fetch</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;https://api.com/wedding/</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">weddingId</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// and resume when the result is back, and pause again...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">groom</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getProfile</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">wedding</span><span style="color: var(--shiki-color-text)">.groomId);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ... and resume and pause ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">bride</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getProfile</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">wedding</span><span style="color: var(--shiki-color-text)">.brideId);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ... and resume</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123; wedding</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> bride</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> groom &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> (error) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">handleError</span><span style="color: var(--shiki-color-text)">(error);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,fe,Ro,we,mn,d,Fo,G,me,xe,L,ge,Rs,Ee,_e,Fs,be,Ie,Se,R,Oe,Hs,Te,Pe,Ms,Ce,De,We,B,Je,U,Ae,qe,Le,z,Re,Ns,Fe,He,Me,$s,Mi=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getWeddingDetail</span><span style="color: var(--shiki-color-text)">(weddingId) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// dont need await</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">wedding</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-token-function)">.fetch</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;https://api.com/wedding/</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">weddingId</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// &#96;getProfile&#96; could be synchronous or asynchronous</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// but &#96;getWeddingDetail&#96; shouldn&#39;t care</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">groom</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getProfile</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">wedding</span><span style="color: var(--shiki-color-text)">.groomId);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">bride</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getProfile</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">wedding</span><span style="color: var(--shiki-color-text)">.brideId);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123; wedding</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> bride</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> groom &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ne,Ho,$e,Ve,Mo,je,Ye,No,Ge,Be,$o,Vo,Ue,ze,jo,Xe,Ze,Vs,Ke,Yo,Qe,xn,js,Go,X,st,gn,p,Bo,Z,ot,nt,Uo,et,tt,K,at,Ys,rt,lt,it,Gs,Ni=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">main</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">id</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">123</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Getting wedding:&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> id);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">wedding</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">bride</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">groom</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getWeddingDetail</span><span style="color: var(--shiki-color-text)">(id);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Wedding detail:&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> wedding);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ct,zo,pt,ht,Bs,$i=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">runtime</span><span style="color: var(--shiki-color-text)">(mainFn) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// run our entry point</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">mainFn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// start runtime</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">runtime</span><span style="color: var(--shiki-color-text)">(main);</span></span></code></pre>`,kt,Xo,yt,vt,Q,dt,Us,ut,ft,wt,S,mt,zs,xt,gt,Xs,Et,_t,Zs,bt,It,Ks,St,Ot,Tt,Qs,Vi=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">runtime</span><span style="color: var(--shiki-color-text)">(mainFn) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// patch the &#96;window.fetch&#96; to make it &quot;pause&quot; the function</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">_originalFetch</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-color-text)">.fetch;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">fetch</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (url</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> options) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// &quot;pause&quot; the function</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line highlight"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// run our entry point</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">mainFn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> (error) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// function &quot;paused&quot;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getWeddingDetail</span><span style="color: var(--shiki-color-text)">(weddingId) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// calling &#96;window.fetch&#96; will &quot;pause&quot; the function and stop executing the next line.</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">wedding</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-token-function)">.fetch</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;https://api.com/wedding/</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">weddingId</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Pt,Zo,Ct,Dt,ss,Wt,so,Jt,At,qt,oo,ji=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">runtime</span><span style="color: var(--shiki-color-text)">(mainFn) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// patch the &#96;window.fetch&#96; to make it &quot;pause&quot; the function</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">_originalFetch</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-color-text)">.fetch;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">fetch</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (url</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> options) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// &quot;pause&quot; the function</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// run our entry point</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">runMain</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">mainFn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> (error) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// function &quot;paused&quot;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// resumed by rerun the &#96;mainFn&#96;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">runMain</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">runMain</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Lt,os,Rt,no,Ft,Ht,Mt,ns,Nt,eo,$t,Vt,jt,to,Yi=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">runtime</span><span style="color: var(--shiki-color-text)">(mainFn) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// patch the &#96;window.fetch&#96; to make it &quot;pause&quot; the function</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">_originalFetch</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-color-text)">.fetch;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">fetch</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (url</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> options) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">_originalFetch</span><span style="color: var(--shiki-color-text)">(url</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> options)</span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(result </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// resume only when the result is back</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">runMain</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// run our entry point</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">runMain</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">mainFn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> (error) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// function &quot;paused&quot;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// no rerun</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">runMain</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Yt,es,Gt,ao,Bt,Ut,zt,ro,Gi=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// 1st time running &#96;getWeddingDetail&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// call &#96;window.fetch&#96;, throw Error and &quot;paused&quot;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">wedding</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-token-function)">.fetch</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;https://api.com/wedding/</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">weddingId</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// when fetch response returns, rerun the main function</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// 2nd time running &#96;getWeddingDetail&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// call &#96;window.fetch&#96;, and should return the response to &quot;resume&quot;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">wedding</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-token-function)">.fetch</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;https://api.com/wedding/</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">weddingId</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`,Xt,ts,Zt,lo,Kt,Qt,sa,Ko,oa,na,io,Bi=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">runtime</span><span style="color: var(--shiki-color-text)">(mainFn) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// patch the &#96;window.fetch&#96; to make it &quot;pause&quot; the function</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">_originalFetch</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-color-text)">.fetch;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">fetch</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (url</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> options) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// return immediately if response is cached.</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">cache</span><span style="color: var(--shiki-token-function)">.has</span><span style="color: var(--shiki-color-text)">([url</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> options])) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">cache</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">([url</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> options]);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line highlight"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">_originalFetch</span><span style="color: var(--shiki-color-text)">(url</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> options)</span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(result </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">cache</span><span style="color: var(--shiki-token-function)">.set</span><span style="color: var(--shiki-color-text)">([url</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> options]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> result);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// resume only when the result is back</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">runMain</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// run our entry point ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ea,Qo,ta,aa,sn,ra,la,as,ia,co,ca,pa,ha,rs,ka,po,ya,va,En,u,on,ls,nn,da,ua,is,fa,ho,wa,ma,xa,ko,Ui=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">main</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">id</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">123</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">runSideEffects</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Getting wedding:&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> id));</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">wedding</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">bride</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">groom</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getWeddingDetail</span><span style="color: var(--shiki-color-text)">(id);</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">runSideEffects</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Wedding detail:&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> wedding));</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ga,cs,Ea,yo,_a,ba,Ia,vo,zi=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">runtime</span><span style="color: var(--shiki-color-text)">(mainFn) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// patch the &#96;window.fetch&#96; to make it &quot;pause&quot; the function...</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// provide &#96;runSideEffects&#96;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">sideEffects</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [];</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">runSideEffects</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> fn </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">sideEffects</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(fn);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// run our entry point</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">runMain</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">mainFn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">sideEffects</span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">(fn </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> (error) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// clear side effects</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">sideEffects</span><span style="color: var(--shiki-token-function)">.splice</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">sideEffects</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">runMain</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Sa,ps,Oa,uo,Ta,Pa,Ca,hs,Da,fo,Wa,Ja,Aa,en,qa,La,tn,Ra,Fa,_,sl,_n,P,an,ks,Ha,Ma,rn,Na,$a,ln,Va,ja,cn,Ya,bn,g,pn,ys,Ga,Ba,vs,Ua,ds,za,Xa,Za,wo,Xi=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Component</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">data</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getDataFromNetwork</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> /&gt;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ka,mo,xo,Qa,sr,or,hn,nr,er,O,F,tr,go,ar,rr,Eo,lr,ir,cr,kn,pr,hr,H,kr,_o,yr,vr,bo,dr,ur,fr,us,wr,Io,mr,xr,gr,fs,Er,So,_r,br,In,D,yn,ws,Ir,Sr,vn,Or,Tr,ms,Pr,xs,Cr,Dr,Sn,b,dn,gs,Wr,Jr,Es,Ar,_s,qr,Lr,Rr,bs,Fr,Is,Hr,Mr,Nr,un,$r,Vr,Ss,Oo,jr,Os,Yr,Gr,To,Br,Ts,Ur;return{c(){y=n("section"),T=n("h2"),I=n("a"),$=e("Asynchronous JavaScript"),w=i(),E=n("p"),Cs=e("In JavaScript, IO (eg Filesystem IO, Network IO) is "),qo=n("strong"),Zn=e("asynchronous"),Kn=e(". That means when you are calling a function that involves IO, you got to have a callback function passed in to be notified when the IO is done."),Qn=i(),Ds=n("div"),se=i(),V=n("p"),oe=e("It may seemed innocent at first, but once we start to chain multiple asynchronous calls, we end up in a situation known as the "),Lo=n("strong"),ne=e("callback hell"),ee=e(", which without a doubt, is something really not nice to work with:"),te=i(),Ws=n("div"),ae=i(),q=n("p"),re=e("So we came up with "),j=n("a"),le=e("Promise"),ie=e(" and "),Y=n("a"),Js=n("code"),ce=e("async-await"),pe=e(", to make life easier."),he=i(),M=n("p"),As=n("code"),ke=e("async-await"),ye=e(" allows us to write asynchronous code like a synchronous one, using "),qs=n("code"),ve=e("await"),de=e(", you can pause the function, wait for the IO, and continue the execution."),ue=i(),Ls=n("div"),fe=i(),Ro=n("p"),we=e("What's more, you can catch all the error at once, magical right?"),mn=i(),d=n("section"),Fo=n("h3"),G=n("a"),me=e("Every function has a color"),xe=i(),L=n("p"),ge=e("Still, "),Rs=n("code"),Ee=e("async-await"),_e=e(" has its short-coming. Things go wrong when you forgot to use "),Fs=n("code"),be=e("await"),Ie=e("."),Se=i(),R=n("p"),Oe=e("This could happen if you didn't know the implementation detail of "),Hs=n("code"),Te=e("getProfile"),Pe=e(" where "),Ms=n("code"),Ce=e("getProfile"),De=e(" is asynchronous, because it makes an asynchronous IO call."),We=i(),B=n("p"),Je=e("This leads to another problem, which is "),U=n("a"),Ae=e("every function has a color"),qe=e(". As soon as you make an asynchronous call in a function, you have to make the function itself asynchronous, and the caller of this function to be asynchronous, and its caller too, ...!"),Le=i(),z=n("p"),Re=e("So, is there another way to pause a JavaScript function, without having to "),Ns=n("code"),Fe=e("await"),He=e("?"),Me=i(),$s=n("div"),Ne=i(),Ho=n("p"),$e=e('This would be arguably much simpler, making everything seemingly "synchronous".'),Ve=i(),Mo=n("p"),je=e("So, is this possible?"),Ye=i(),No=n("p"),Ge=e("To be able to pause a JavaScript function, is something decided in the JavaScript runtime."),Be=i(),$o=n("p"),Vo=n("strong"),Ue=e("So are we diving into the JavaScript runtime engine today?"),ze=i(),jo=n("p"),Xe=e("Not really, I don't know much about C++ or whatever language the JavaScript runtime is implemented. \u{1F648}"),Ze=i(),Vs=n("p"),Ke=e("But we are going to write a simple runtime in JavaScript, with some constraints. "),Yo=n("em"),Qe=e("(Come on, it is hard to write a full blown runtime, adding constraints will make it easier for me to finish it in one blog post)"),xn=i(),js=n("section"),Go=n("h2"),X=n("a"),st=e('Writing "the runtime"'),gn=i(),p=n("section"),Bo=n("h3"),Z=n("a"),ot=e("The first constraint: entry point"),nt=i(),Uo=n("p"),et=e("The first constraint for the runtime, is to have an entry point."),tt=i(),K=n("p"),at=e("In our case, we are going to make "),Ys=n("code"),rt=e("main"),lt=e(" our entry point:"),it=i(),Gs=n("div"),ct=i(),zo=n("p"),pt=e("So our runtime looks something like this:"),ht=i(),Bs=n("div"),kt=i(),Xo=n("p"),yt=e("Ok, so we have our basic structure, what's next?"),vt=i(),Q=n("p"),dt=e("Firstly, we need to figure how to pause a JS function midway, without using "),Us=n("code"),ut=e("await"),ft=e("."),wt=i(),S=n("p"),mt=e("Well, there's "),zs=n("code"),xt=e("throw"),gt=e(" or "),Xs=n("code"),Et=e("return"),_t=e(", which is able to exit the JS function midway. I gonna choose "),Zs=n("code"),bt=e("throw"),It=e(', which is more suited to exit the function "unexpectedly", rather than '),Ks=n("code"),St=e("return"),Ot=e(" which is more for exit normally:"),Tt=i(),Qs=n("div"),Pt=i(),Zo=n("p"),Ct=e(`But in both cases, there's no way to "resume" the function. However, it is still a good starting point.`),Dt=i(),ss=n("p"),Wt=e('One way of "resuming" the function is to rerun the '),so=n("code"),Jt=e("main"),At=e(" function again."),qt=i(),oo=n("div"),Lt=i(),os=n("p"),Rt=e("Ignore all the doubts you have for why rerunning the entire "),no=n("code"),Ft=e("main"),Ht=e(' function is a bad idea for "resuming" the function for now.'),Mt=i(),ns=n("p"),Nt=e('The current implementation is inaccurate, and will lead us to an infinite loop, because we "resumed" the "paused" function immediately, which should be only after the '),eo=n("code"),$t=e("window.fetch"),Vt=e(" had succeeded:"),jt=i(),to=n("div"),Yt=i(),es=n("p"),Gt=e("Still the infinite-loop still happened, that's because "),ao=n("code"),Bt=e("window.fetch"),Ut=e(' should return the response object when "resumed":'),zt=i(),ro=n("div"),Xt=i(),ts=n("p"),Zt=e("How do we throw Error when the "),lo=n("code"),Kt=e("fetch"),Qt=e(" is called the 1st time, and return the response for the subsequent calls?"),sa=i(),Ko=n("p"),oa=e("One can achieve it by caching the response:"),na=i(),io=n("div"),ea=i(),Qo=n("p"),ta=e("It works!"),aa=i(),sn=n("p"),ra=e('After running the main function a few times, by "pausing" and "resuming", or shall I say, "early exit" and "rerun", we finally hit the last statement of the main function and finish the function.'),la=i(),as=n("p"),ia=e("Except, if you look at the console, because of rerunning multiple times, we see the "),co=n("code"),ca=e('"Getting wedding: 123"'),pa=e(" multiple times!"),ha=i(),rs=n("p"),ka=e("That is because, "),po=n("code"),ya=e("console.log"),va=e(" has side effects!"),En=i(),u=n("section"),on=n("h3"),ls=n("a"),nn=n("strong"),da=e("The second constraint: pure functions"),ua=i(),is=n("p"),fa=e("The second constraint of our runtime is to use only pure functions. If you wish to call functions with side effects, you have to use our special construct, "),ho=n("code"),wa=e("runSideEffects()"),ma=e(":"),xa=i(),ko=n("div"),ga=i(),cs=n("p"),Ea=e("So, how is "),yo=n("code"),_a=e("runSideEffects"),ba=e(" implemented?"),Ia=i(),vo=n("div"),Sa=i(),ps=n("p"),Oa=e("What we are trying to do here is that, we push all the side effects into an array, and only run all of them when we finally finish our "),uo=n("code"),Ta=e("main"),Pa=e(" function."),Ca=i(),hs=n("p"),Da=e('And if we "paused" our function, before rerunning the '),fo=n("code"),Wa=e("main"),Ja=e(' function to "resume", we clear all the side effects, since the same side effects will be pushed into the array again.'),Aa=i(),en=n("p"),qa=e("Run it again, and yes it works!"),La=i(),tn=n("p"),Ra=e("You can try out the complete code in the CodeSandbox:"),Fa=i(),_=n("iframe"),_n=i(),P=n("section"),an=n("h2"),ks=n("a"),Ha=e("What have we done so far?"),Ma=i(),rn=n("p"),Na=e('To mimic a pause and resume a function in JavaScript, we can throw an error to "pause" the execution of the function halfway, and "resume" it by reruning the function.'),$a=i(),ln=n("p"),Va=e('To "resuming" from where it left off, the point of where we threw an error should now returning a value instead, so that it feels like we are picking up and resuming from that point. To achieve this, we can use some caching mechanism.'),ja=i(),cn=n("p"),Ya=e("Lastly, to safely reruning the function multiple times, we need to make sure that the function is pure. If we have side effects, we need to collect them and only apply them when the function has successfully reach the end."),bn=i(),g=n("section"),pn=n("h2"),ys=n("a"),Ga=e("Okay cool. Why are we doing this?"),Ba=i(),vs=n("p"),Ua=e("Well, the idea of how to pause and resume a JavaScript function comes when I was reading about "),ds=n("a"),za=e("React Suspense"),Xa=e(". With Suspense, fetching / getting data can be written declaratively:"),Za=i(),wo=n("div"),Ka=i(),mo=n("p"),xo=n("code"),Qa=e("getDataFromNetwork"),sr=e(" will get actually get the data from the network, which is asynchronous, but how did React make it look like it is synchronous?"),or=i(),hn=n("p"),nr=e("Think of how you would have written in React:"),er=i(),O=n("ul"),F=n("li"),tr=e("Instead of providing an entry point, your "),go=n("code"),ar=e("render"),rr=e(' function is the entry point for React. To "resume" each "pause" the render, React calls the '),Eo=n("code"),lr=e("render"),ir=e(" function multiple times."),cr=i(),kn=n("li"),pr=e("Your render function has to be pure and side-effects free"),hr=i(),H=n("li"),kr=e("To "),_o=n("code"),yr=e("runSideEffects"),vr=e(", you use "),bo=n("code"),dr=e("React.useEffect"),ur=e(" instead."),fr=i(),us=n("li"),wr=e("To fetch + cache, you use "),Io=n("code"),mr=e("react-cache"),xr=e(" to create a resource."),gr=i(),fs=n("li"),Er=e('Except, instead of "pause" and do nothing, React handles the "pause" with the nearest '),So=n("code"),_r=e("<Suspense />"),br=e(' componnet to render some fallback content. When the promise is resolve, React "resumes" the render and render the content with the data.'),In=i(),D=n("section"),yn=n("h3"),ws=n("a"),Ir=e("Yet, this is not Suspense."),Sr=i(),vn=n("p"),Or=e("No, I dont think so."),Tr=i(),ms=n("p"),Pr=e(`Suspense is based on some function programming concept, called the "one-shot delimited continuation", which is explained in Dan Abramov's `),xs=n("a"),Cr=e('"Algebraic Effects for the Rest of Us"'),Dr=e("."),Sn=i(),b=n("section"),dn=n("h2"),gs=n("a"),Wr=e("Closing Note"),Jr=i(),Es=n("p"),Ar=e("This whole article is based on a thought experiment I had when I was trying to understand the mechanics of "),_s=n("a"),qr=e("React Suspense"),Lr=e(". So, pardon me if the flow of the content is a bit awkward or crude."),Rr=i(),bs=n("p"),Fr=e('Yet, after writing my thought process out, I did more research, and realised that "pausing and resuming execution" is a concept called '),Is=n("a"),Hr=e('"continuations"'),Mr=e(" in functional programming."),Nr=i(),un=n("p"),$r=e("So, if you are interested to learn more, here are some starting points:"),Vr=i(),Ss=n("ul"),Oo=n("li"),jr=e("James Long's "),Os=n("a"),Yr=e("What's in a Continuation"),Gr=i(),To=n("li"),Br=e("Florian Loitsch's "),Ts=n("a"),Ur=e("Exceptional Continuations in JavaScript"),this.h()},l(h){y=t(h,"SECTION",{});var v=a(y);T=t(v,"H2",{});var ol=a(T);I=t(ol,"A",{href:!0,id:!0});var nl=a(I);$=r(nl,"Asynchronous JavaScript"),nl.forEach(o),ol.forEach(o),w=c(v),E=t(v,"P",{});var On=a(E);Cs=r(On,"In JavaScript, IO (eg Filesystem IO, Network IO) is "),qo=t(On,"STRONG",{});var el=a(qo);Zn=r(el,"asynchronous"),el.forEach(o),Kn=r(On,". That means when you are calling a function that involves IO, you got to have a callback function passed in to be notified when the IO is done."),On.forEach(o),Qn=c(v),Ds=t(v,"DIV",{class:!0});var Zi=a(Ds);Zi.forEach(o),se=c(v),V=t(v,"P",{});var Tn=a(V);oe=r(Tn,"It may seemed innocent at first, but once we start to chain multiple asynchronous calls, we end up in a situation known as the "),Lo=t(Tn,"STRONG",{});var tl=a(Lo);ne=r(tl,"callback hell"),tl.forEach(o),ee=r(Tn,", which without a doubt, is something really not nice to work with:"),Tn.forEach(o),te=c(v),Ws=t(v,"DIV",{class:!0});var Ki=a(Ws);Ki.forEach(o),ae=c(v),q=t(v,"P",{});var Po=a(q);re=r(Po,"So we came up with "),j=t(Po,"A",{href:!0,rel:!0});var al=a(j);le=r(al,"Promise"),al.forEach(o),ie=r(Po," and "),Y=t(Po,"A",{href:!0,rel:!0});var rl=a(Y);Js=t(rl,"CODE",{class:!0});var ll=a(Js);ce=r(ll,"async-await"),ll.forEach(o),rl.forEach(o),pe=r(Po,", to make life easier."),Po.forEach(o),he=c(v),M=t(v,"P",{});var fn=a(M);As=t(fn,"CODE",{class:!0});var il=a(As);ke=r(il,"async-await"),il.forEach(o),ye=r(fn," allows us to write asynchronous code like a synchronous one, using "),qs=t(fn,"CODE",{class:!0});var cl=a(qs);ve=r(cl,"await"),cl.forEach(o),de=r(fn,", you can pause the function, wait for the IO, and continue the execution."),fn.forEach(o),ue=c(v),Ls=t(v,"DIV",{class:!0});var Qi=a(Ls);Qi.forEach(o),fe=c(v),Ro=t(v,"P",{});var pl=a(Ro);we=r(pl,"What's more, you can catch all the error at once, magical right?"),pl.forEach(o),v.forEach(o),mn=c(h),d=t(h,"SECTION",{});var f=a(d);Fo=t(f,"H3",{});var hl=a(Fo);G=t(hl,"A",{href:!0,id:!0});var kl=a(G);me=r(kl,"Every function has a color"),kl.forEach(o),hl.forEach(o),xe=c(f),L=t(f,"P",{});var Co=a(L);ge=r(Co,"Still, "),Rs=t(Co,"CODE",{class:!0});var yl=a(Rs);Ee=r(yl,"async-await"),yl.forEach(o),_e=r(Co," has its short-coming. Things go wrong when you forgot to use "),Fs=t(Co,"CODE",{class:!0});var vl=a(Fs);be=r(vl,"await"),vl.forEach(o),Ie=r(Co,"."),Co.forEach(o),Se=c(f),R=t(f,"P",{});var Do=a(R);Oe=r(Do,"This could happen if you didn't know the implementation detail of "),Hs=t(Do,"CODE",{class:!0});var dl=a(Hs);Te=r(dl,"getProfile"),dl.forEach(o),Pe=r(Do," where "),Ms=t(Do,"CODE",{class:!0});var ul=a(Ms);Ce=r(ul,"getProfile"),ul.forEach(o),De=r(Do," is asynchronous, because it makes an asynchronous IO call."),Do.forEach(o),We=c(f),B=t(f,"P",{});var Pn=a(B);Je=r(Pn,"This leads to another problem, which is "),U=t(Pn,"A",{href:!0,rel:!0});var fl=a(U);Ae=r(fl,"every function has a color"),fl.forEach(o),qe=r(Pn,". As soon as you make an asynchronous call in a function, you have to make the function itself asynchronous, and the caller of this function to be asynchronous, and its caller too, ...!"),Pn.forEach(o),Le=c(f),z=t(f,"P",{});var Cn=a(z);Re=r(Cn,"So, is there another way to pause a JavaScript function, without having to "),Ns=t(Cn,"CODE",{class:!0});var wl=a(Ns);Fe=r(wl,"await"),wl.forEach(o),He=r(Cn,"?"),Cn.forEach(o),Me=c(f),$s=t(f,"DIV",{class:!0});var sc=a($s);sc.forEach(o),Ne=c(f),Ho=t(f,"P",{});var ml=a(Ho);$e=r(ml,'This would be arguably much simpler, making everything seemingly "synchronous".'),ml.forEach(o),Ve=c(f),Mo=t(f,"P",{});var xl=a(Mo);je=r(xl,"So, is this possible?"),xl.forEach(o),Ye=c(f),No=t(f,"P",{});var gl=a(No);Ge=r(gl,"To be able to pause a JavaScript function, is something decided in the JavaScript runtime."),gl.forEach(o),Be=c(f),$o=t(f,"P",{});var El=a($o);Vo=t(El,"STRONG",{});var _l=a(Vo);Ue=r(_l,"So are we diving into the JavaScript runtime engine today?"),_l.forEach(o),El.forEach(o),ze=c(f),jo=t(f,"P",{});var bl=a(jo);Xe=r(bl,"Not really, I don't know much about C++ or whatever language the JavaScript runtime is implemented. \u{1F648}"),bl.forEach(o),Ze=c(f),Vs=t(f,"P",{});var zr=a(Vs);Ke=r(zr,"But we are going to write a simple runtime in JavaScript, with some constraints. "),Yo=t(zr,"EM",{});var Il=a(Yo);Qe=r(Il,"(Come on, it is hard to write a full blown runtime, adding constraints will make it easier for me to finish it in one blog post)"),Il.forEach(o),zr.forEach(o),f.forEach(o),xn=c(h),js=t(h,"SECTION",{});var Sl=a(js);Go=t(Sl,"H2",{});var Ol=a(Go);X=t(Ol,"A",{href:!0,id:!0});var Tl=a(X);st=r(Tl,'Writing "the runtime"'),Tl.forEach(o),Ol.forEach(o),Sl.forEach(o),gn=c(h),p=t(h,"SECTION",{});var k=a(p);Bo=t(k,"H3",{});var Pl=a(Bo);Z=t(Pl,"A",{href:!0,id:!0});var Cl=a(Z);ot=r(Cl,"The first constraint: entry point"),Cl.forEach(o),Pl.forEach(o),nt=c(k),Uo=t(k,"P",{});var Dl=a(Uo);et=r(Dl,"The first constraint for the runtime, is to have an entry point."),Dl.forEach(o),tt=c(k),K=t(k,"P",{});var Dn=a(K);at=r(Dn,"In our case, we are going to make "),Ys=t(Dn,"CODE",{class:!0});var Wl=a(Ys);rt=r(Wl,"main"),Wl.forEach(o),lt=r(Dn," our entry point:"),Dn.forEach(o),it=c(k),Gs=t(k,"DIV",{class:!0});var oc=a(Gs);oc.forEach(o),ct=c(k),zo=t(k,"P",{});var Jl=a(zo);pt=r(Jl,"So our runtime looks something like this:"),Jl.forEach(o),ht=c(k),Bs=t(k,"DIV",{class:!0});var nc=a(Bs);nc.forEach(o),kt=c(k),Xo=t(k,"P",{});var Al=a(Xo);yt=r(Al,"Ok, so we have our basic structure, what's next?"),Al.forEach(o),vt=c(k),Q=t(k,"P",{});var Wn=a(Q);dt=r(Wn,"Firstly, we need to figure how to pause a JS function midway, without using "),Us=t(Wn,"CODE",{class:!0});var ql=a(Us);ut=r(ql,"await"),ql.forEach(o),ft=r(Wn,"."),Wn.forEach(o),wt=c(k),S=t(k,"P",{});var W=a(S);mt=r(W,"Well, there's "),zs=t(W,"CODE",{class:!0});var Ll=a(zs);xt=r(Ll,"throw"),Ll.forEach(o),gt=r(W," or "),Xs=t(W,"CODE",{class:!0});var Rl=a(Xs);Et=r(Rl,"return"),Rl.forEach(o),_t=r(W,", which is able to exit the JS function midway. I gonna choose "),Zs=t(W,"CODE",{class:!0});var Fl=a(Zs);bt=r(Fl,"throw"),Fl.forEach(o),It=r(W,', which is more suited to exit the function "unexpectedly", rather than '),Ks=t(W,"CODE",{class:!0});var Hl=a(Ks);St=r(Hl,"return"),Hl.forEach(o),Ot=r(W," which is more for exit normally:"),W.forEach(o),Tt=c(k),Qs=t(k,"DIV",{class:!0});var ec=a(Qs);ec.forEach(o),Pt=c(k),Zo=t(k,"P",{});var Ml=a(Zo);Ct=r(Ml,`But in both cases, there's no way to "resume" the function. However, it is still a good starting point.`),Ml.forEach(o),Dt=c(k),ss=t(k,"P",{});var Jn=a(ss);Wt=r(Jn,'One way of "resuming" the function is to rerun the '),so=t(Jn,"CODE",{class:!0});var Nl=a(so);Jt=r(Nl,"main"),Nl.forEach(o),At=r(Jn," function again."),Jn.forEach(o),qt=c(k),oo=t(k,"DIV",{class:!0});var tc=a(oo);tc.forEach(o),Lt=c(k),os=t(k,"P",{});var An=a(os);Rt=r(An,"Ignore all the doubts you have for why rerunning the entire "),no=t(An,"CODE",{class:!0});var $l=a(no);Ft=r($l,"main"),$l.forEach(o),Ht=r(An,' function is a bad idea for "resuming" the function for now.'),An.forEach(o),Mt=c(k),ns=t(k,"P",{});var qn=a(ns);Nt=r(qn,'The current implementation is inaccurate, and will lead us to an infinite loop, because we "resumed" the "paused" function immediately, which should be only after the '),eo=t(qn,"CODE",{class:!0});var Vl=a(eo);$t=r(Vl,"window.fetch"),Vl.forEach(o),Vt=r(qn," had succeeded:"),qn.forEach(o),jt=c(k),to=t(k,"DIV",{class:!0});var ac=a(to);ac.forEach(o),Yt=c(k),es=t(k,"P",{});var Ln=a(es);Gt=r(Ln,"Still the infinite-loop still happened, that's because "),ao=t(Ln,"CODE",{class:!0});var jl=a(ao);Bt=r(jl,"window.fetch"),jl.forEach(o),Ut=r(Ln,' should return the response object when "resumed":'),Ln.forEach(o),zt=c(k),ro=t(k,"DIV",{class:!0});var rc=a(ro);rc.forEach(o),Xt=c(k),ts=t(k,"P",{});var Rn=a(ts);Zt=r(Rn,"How do we throw Error when the "),lo=t(Rn,"CODE",{class:!0});var Yl=a(lo);Kt=r(Yl,"fetch"),Yl.forEach(o),Qt=r(Rn," is called the 1st time, and return the response for the subsequent calls?"),Rn.forEach(o),sa=c(k),Ko=t(k,"P",{});var Gl=a(Ko);oa=r(Gl,"One can achieve it by caching the response:"),Gl.forEach(o),na=c(k),io=t(k,"DIV",{class:!0});var lc=a(io);lc.forEach(o),ea=c(k),Qo=t(k,"P",{});var Bl=a(Qo);ta=r(Bl,"It works!"),Bl.forEach(o),aa=c(k),sn=t(k,"P",{});var Ul=a(sn);ra=r(Ul,'After running the main function a few times, by "pausing" and "resuming", or shall I say, "early exit" and "rerun", we finally hit the last statement of the main function and finish the function.'),Ul.forEach(o),la=c(k),as=t(k,"P",{});var Fn=a(as);ia=r(Fn,"Except, if you look at the console, because of rerunning multiple times, we see the "),co=t(Fn,"CODE",{class:!0});var zl=a(co);ca=r(zl,'"Getting wedding: 123"'),zl.forEach(o),pa=r(Fn," multiple times!"),Fn.forEach(o),ha=c(k),rs=t(k,"P",{});var Hn=a(rs);ka=r(Hn,"That is because, "),po=t(Hn,"CODE",{class:!0});var Xl=a(po);ya=r(Xl,"console.log"),Xl.forEach(o),va=r(Hn," has side effects!"),Hn.forEach(o),k.forEach(o),En=c(h),u=t(h,"SECTION",{});var m=a(u);on=t(m,"H3",{});var Zl=a(on);ls=t(Zl,"A",{href:!0,id:!0});var Kl=a(ls);nn=t(Kl,"STRONG",{});var Ql=a(nn);da=r(Ql,"The second constraint: pure functions"),Ql.forEach(o),Kl.forEach(o),Zl.forEach(o),ua=c(m),is=t(m,"P",{});var Mn=a(is);fa=r(Mn,"The second constraint of our runtime is to use only pure functions. If you wish to call functions with side effects, you have to use our special construct, "),ho=t(Mn,"CODE",{class:!0});var si=a(ho);wa=r(si,"runSideEffects()"),si.forEach(o),ma=r(Mn,":"),Mn.forEach(o),xa=c(m),ko=t(m,"DIV",{class:!0});var ic=a(ko);ic.forEach(o),ga=c(m),cs=t(m,"P",{});var Nn=a(cs);Ea=r(Nn,"So, how is "),yo=t(Nn,"CODE",{class:!0});var oi=a(yo);_a=r(oi,"runSideEffects"),oi.forEach(o),ba=r(Nn," implemented?"),Nn.forEach(o),Ia=c(m),vo=t(m,"DIV",{class:!0});var cc=a(vo);cc.forEach(o),Sa=c(m),ps=t(m,"P",{});var $n=a(ps);Oa=r($n,"What we are trying to do here is that, we push all the side effects into an array, and only run all of them when we finally finish our "),uo=t($n,"CODE",{class:!0});var ni=a(uo);Ta=r(ni,"main"),ni.forEach(o),Pa=r($n," function."),$n.forEach(o),Ca=c(m),hs=t(m,"P",{});var Vn=a(hs);Da=r(Vn,'And if we "paused" our function, before rerunning the '),fo=t(Vn,"CODE",{class:!0});var ei=a(fo);Wa=r(ei,"main"),ei.forEach(o),Ja=r(Vn,' function to "resume", we clear all the side effects, since the same side effects will be pushed into the array again.'),Vn.forEach(o),Aa=c(m),en=t(m,"P",{});var ti=a(en);qa=r(ti,"Run it again, and yes it works!"),ti.forEach(o),La=c(m),tn=t(m,"P",{});var ai=a(tn);Ra=r(ai,"You can try out the complete code in the CodeSandbox:"),ai.forEach(o),Fa=c(m),_=t(m,"IFRAME",{src:!0,style:!0,title:!0,allow:!0,sandbox:!0}),a(_).forEach(o),m.forEach(o),_n=c(h),P=t(h,"SECTION",{});var N=a(P);an=t(N,"H2",{});var ri=a(an);ks=t(ri,"A",{href:!0,id:!0});var li=a(ks);Ha=r(li,"What have we done so far?"),li.forEach(o),ri.forEach(o),Ma=c(N),rn=t(N,"P",{});var ii=a(rn);Na=r(ii,'To mimic a pause and resume a function in JavaScript, we can throw an error to "pause" the execution of the function halfway, and "resume" it by reruning the function.'),ii.forEach(o),$a=c(N),ln=t(N,"P",{});var ci=a(ln);Va=r(ci,'To "resuming" from where it left off, the point of where we threw an error should now returning a value instead, so that it feels like we are picking up and resuming from that point. To achieve this, we can use some caching mechanism.'),ci.forEach(o),ja=c(N),cn=t(N,"P",{});var pi=a(cn);Ya=r(pi,"Lastly, to safely reruning the function multiple times, we need to make sure that the function is pure. If we have side effects, we need to collect them and only apply them when the function has successfully reach the end."),pi.forEach(o),N.forEach(o),bn=c(h),g=t(h,"SECTION",{});var C=a(g);pn=t(C,"H2",{});var hi=a(pn);ys=t(hi,"A",{href:!0,id:!0});var ki=a(ys);Ga=r(ki,"Okay cool. Why are we doing this?"),ki.forEach(o),hi.forEach(o),Ba=c(C),vs=t(C,"P",{});var jn=a(vs);Ua=r(jn,"Well, the idea of how to pause and resume a JavaScript function comes when I was reading about "),ds=t(jn,"A",{href:!0,rel:!0});var yi=a(ds);za=r(yi,"React Suspense"),yi.forEach(o),Xa=r(jn,". With Suspense, fetching / getting data can be written declaratively:"),jn.forEach(o),Za=c(C),wo=t(C,"DIV",{class:!0});var pc=a(wo);pc.forEach(o),Ka=c(C),mo=t(C,"P",{});var Xr=a(mo);xo=t(Xr,"CODE",{class:!0});var vi=a(xo);Qa=r(vi,"getDataFromNetwork"),vi.forEach(o),sr=r(Xr," will get actually get the data from the network, which is asynchronous, but how did React make it look like it is synchronous?"),Xr.forEach(o),or=c(C),hn=t(C,"P",{});var di=a(hn);nr=r(di,"Think of how you would have written in React:"),di.forEach(o),er=c(C),O=t(C,"UL",{});var J=a(O);F=t(J,"LI",{});var Wo=a(F);tr=r(Wo,"Instead of providing an entry point, your "),go=t(Wo,"CODE",{class:!0});var ui=a(go);ar=r(ui,"render"),ui.forEach(o),rr=r(Wo,' function is the entry point for React. To "resume" each "pause" the render, React calls the '),Eo=t(Wo,"CODE",{class:!0});var fi=a(Eo);lr=r(fi,"render"),fi.forEach(o),ir=r(Wo," function multiple times."),Wo.forEach(o),cr=c(J),kn=t(J,"LI",{});var wi=a(kn);pr=r(wi,"Your render function has to be pure and side-effects free"),wi.forEach(o),hr=c(J),H=t(J,"LI",{});var Jo=a(H);kr=r(Jo,"To "),_o=t(Jo,"CODE",{class:!0});var mi=a(_o);yr=r(mi,"runSideEffects"),mi.forEach(o),vr=r(Jo,", you use "),bo=t(Jo,"CODE",{class:!0});var xi=a(bo);dr=r(xi,"React.useEffect"),xi.forEach(o),ur=r(Jo," instead."),Jo.forEach(o),fr=c(J),us=t(J,"LI",{});var Yn=a(us);wr=r(Yn,"To fetch + cache, you use "),Io=t(Yn,"CODE",{class:!0});var gi=a(Io);mr=r(gi,"react-cache"),gi.forEach(o),xr=r(Yn," to create a resource."),Yn.forEach(o),gr=c(J),fs=t(J,"LI",{});var Gn=a(fs);Er=r(Gn,'Except, instead of "pause" and do nothing, React handles the "pause" with the nearest '),So=t(Gn,"CODE",{class:!0});var Ei=a(So);_r=r(Ei,"<Suspense />"),Ei.forEach(o),br=r(Gn,' componnet to render some fallback content. When the promise is resolve, React "resumes" the render and render the content with the data.'),Gn.forEach(o),J.forEach(o),C.forEach(o),In=c(h),D=t(h,"SECTION",{});var Ao=a(D);yn=t(Ao,"H3",{});var _i=a(yn);ws=t(_i,"A",{href:!0,id:!0});var bi=a(ws);Ir=r(bi,"Yet, this is not Suspense."),bi.forEach(o),_i.forEach(o),Sr=c(Ao),vn=t(Ao,"P",{});var Ii=a(vn);Or=r(Ii,"No, I dont think so."),Ii.forEach(o),Tr=c(Ao),ms=t(Ao,"P",{});var Bn=a(ms);Pr=r(Bn,`Suspense is based on some function programming concept, called the "one-shot delimited continuation", which is explained in Dan Abramov's `),xs=t(Bn,"A",{href:!0,rel:!0});var Si=a(xs);Cr=r(Si,'"Algebraic Effects for the Rest of Us"'),Si.forEach(o),Dr=r(Bn,"."),Bn.forEach(o),Ao.forEach(o),Sn=c(h),b=t(h,"SECTION",{});var A=a(b);dn=t(A,"H2",{});var Oi=a(dn);gs=t(Oi,"A",{href:!0,id:!0});var Ti=a(gs);Wr=r(Ti,"Closing Note"),Ti.forEach(o),Oi.forEach(o),Jr=c(A),Es=t(A,"P",{});var Un=a(Es);Ar=r(Un,"This whole article is based on a thought experiment I had when I was trying to understand the mechanics of "),_s=t(Un,"A",{href:!0,rel:!0});var Pi=a(_s);qr=r(Pi,"React Suspense"),Pi.forEach(o),Lr=r(Un,". So, pardon me if the flow of the content is a bit awkward or crude."),Un.forEach(o),Rr=c(A),bs=t(A,"P",{});var zn=a(bs);Fr=r(zn,'Yet, after writing my thought process out, I did more research, and realised that "pausing and resuming execution" is a concept called '),Is=t(zn,"A",{href:!0,rel:!0});var Ci=a(Is);Hr=r(Ci,'"continuations"'),Ci.forEach(o),Mr=r(zn," in functional programming."),zn.forEach(o),Nr=c(A),un=t(A,"P",{});var Di=a(un);$r=r(Di,"So, if you are interested to learn more, here are some starting points:"),Di.forEach(o),Vr=c(A),Ss=t(A,"UL",{});var Xn=a(Ss);Oo=t(Xn,"LI",{});var Zr=a(Oo);jr=r(Zr,"James Long's "),Os=t(Zr,"A",{href:!0,rel:!0});var Wi=a(Os);Yr=r(Wi,"What's in a Continuation"),Wi.forEach(o),Zr.forEach(o),Gr=c(Xn),To=t(Xn,"LI",{});var Kr=a(To);Br=r(Kr,"Florian Loitsch's "),Ts=t(Kr,"A",{href:!0,rel:!0});var Ji=a(Ts);Ur=r(Ji,"Exceptional Continuations in JavaScript"),Ji.forEach(o),Kr.forEach(o),Xn.forEach(o),A.forEach(o),this.h()},h(){l(I,"href","#asynchronous-javascript"),l(I,"id","asynchronous-javascript"),l(Ds,"class","code-section"),l(Ws,"class","code-section"),l(j,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"),l(j,"rel","nofollow"),l(Js,"class","inline"),l(Y,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"),l(Y,"rel","nofollow"),l(As,"class","inline"),l(qs,"class","inline"),l(Ls,"class","code-section"),l(G,"href","#every-function-has-a-color"),l(G,"id","every-function-has-a-color"),l(Rs,"class","inline"),l(Fs,"class","inline"),l(Hs,"class","inline"),l(Ms,"class","inline"),l(U,"href","https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/"),l(U,"rel","nofollow"),l(Ns,"class","inline"),l($s,"class","code-section"),l(X,"href","#writing-the-runtime"),l(X,"id","writing-the-runtime"),l(Z,"href","#the-first-constraint-entry-point"),l(Z,"id","the-first-constraint-entry-point"),l(Ys,"class","inline"),l(Gs,"class","code-section"),l(Bs,"class","code-section"),l(Us,"class","inline"),l(zs,"class","inline"),l(Xs,"class","inline"),l(Zs,"class","inline"),l(Ks,"class","inline"),l(Qs,"class","code-section"),l(so,"class","inline"),l(oo,"class","code-section"),l(no,"class","inline"),l(eo,"class","inline"),l(to,"class","code-section"),l(ao,"class","inline"),l(ro,"class","code-section"),l(lo,"class","inline"),l(io,"class","code-section"),l(co,"class","inline"),l(po,"class","inline"),l(ls,"href","#the-second-constraint-pure-functions"),l(ls,"id","the-second-constraint-pure-functions"),l(ho,"class","inline"),l(ko,"class","code-section"),l(yo,"class","inline"),l(vo,"class","code-section"),l(uo,"class","inline"),l(fo,"class","inline"),Ec(_.src,sl="https://codesandbox.io/embed/pausing-a-javascript-function-dh0mw?expanddevtools=1&fontsize=14&hidenavigation=1&theme=dark&view=editor")||l(_,"src",sl),wn(_,"width","100%"),wn(_,"height","500px"),wn(_,"border","0"),wn(_,"border-radius","4px"),wn(_,"overflow","hidden"),l(_,"title","Pausing a JavaScript function"),l(_,"allow","geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb"),l(_,"sandbox","allow-modals allow-forms allow-popups allow-scripts allow-same-origin"),l(ks,"href","#what-have-we-done-so-far"),l(ks,"id","what-have-we-done-so-far"),l(ys,"href","#okay-cool-why-are-we-doing-this"),l(ys,"id","okay-cool-why-are-we-doing-this"),l(ds,"href","https://reactjs.org/docs/concurrent-mode-suspense.html#what-suspense-lets-you-do"),l(ds,"rel","nofollow"),l(wo,"class","code-section"),l(xo,"class","inline"),l(go,"class","inline"),l(Eo,"class","inline"),l(_o,"class","inline"),l(bo,"class","inline"),l(Io,"class","inline"),l(So,"class","inline"),l(ws,"href","#yet-this-is-not-suspense"),l(ws,"id","yet-this-is-not-suspense"),l(xs,"href","https://overreacted.io/algebraic-effects-for-the-rest-of-us/"),l(xs,"rel","nofollow"),l(gs,"href","#closing-note"),l(gs,"id","closing-note"),l(_s,"href","https://reactjs.org/docs/concurrent-mode-suspense.html"),l(_s,"rel","nofollow"),l(Is,"href","https://en.wikipedia.org/wiki/Continuation"),l(Is,"rel","nofollow"),l(Os,"href","https://jlongster.com/Whats-in-a-Continuation"),l(Os,"rel","nofollow"),l(Ts,"href","http://www.schemeworkshop.org/2007/procPaper4.pdf"),l(Ts,"rel","nofollow")},m(h,v){x(h,y,v),s(y,T),s(T,I),s(I,$),s(y,w),s(y,E),s(E,Cs),s(E,qo),s(qo,Zn),s(E,Kn),s(y,Qn),s(y,Ds),Ds.innerHTML=Ri,s(y,se),s(y,V),s(V,oe),s(V,Lo),s(Lo,ne),s(V,ee),s(y,te),s(y,Ws),Ws.innerHTML=Fi,s(y,ae),s(y,q),s(q,re),s(q,j),s(j,le),s(q,ie),s(q,Y),s(Y,Js),s(Js,ce),s(q,pe),s(y,he),s(y,M),s(M,As),s(As,ke),s(M,ye),s(M,qs),s(qs,ve),s(M,de),s(y,ue),s(y,Ls),Ls.innerHTML=Hi,s(y,fe),s(y,Ro),s(Ro,we),x(h,mn,v),x(h,d,v),s(d,Fo),s(Fo,G),s(G,me),s(d,xe),s(d,L),s(L,ge),s(L,Rs),s(Rs,Ee),s(L,_e),s(L,Fs),s(Fs,be),s(L,Ie),s(d,Se),s(d,R),s(R,Oe),s(R,Hs),s(Hs,Te),s(R,Pe),s(R,Ms),s(Ms,Ce),s(R,De),s(d,We),s(d,B),s(B,Je),s(B,U),s(U,Ae),s(B,qe),s(d,Le),s(d,z),s(z,Re),s(z,Ns),s(Ns,Fe),s(z,He),s(d,Me),s(d,$s),$s.innerHTML=Mi,s(d,Ne),s(d,Ho),s(Ho,$e),s(d,Ve),s(d,Mo),s(Mo,je),s(d,Ye),s(d,No),s(No,Ge),s(d,Be),s(d,$o),s($o,Vo),s(Vo,Ue),s(d,ze),s(d,jo),s(jo,Xe),s(d,Ze),s(d,Vs),s(Vs,Ke),s(Vs,Yo),s(Yo,Qe),x(h,xn,v),x(h,js,v),s(js,Go),s(Go,X),s(X,st),x(h,gn,v),x(h,p,v),s(p,Bo),s(Bo,Z),s(Z,ot),s(p,nt),s(p,Uo),s(Uo,et),s(p,tt),s(p,K),s(K,at),s(K,Ys),s(Ys,rt),s(K,lt),s(p,it),s(p,Gs),Gs.innerHTML=Ni,s(p,ct),s(p,zo),s(zo,pt),s(p,ht),s(p,Bs),Bs.innerHTML=$i,s(p,kt),s(p,Xo),s(Xo,yt),s(p,vt),s(p,Q),s(Q,dt),s(Q,Us),s(Us,ut),s(Q,ft),s(p,wt),s(p,S),s(S,mt),s(S,zs),s(zs,xt),s(S,gt),s(S,Xs),s(Xs,Et),s(S,_t),s(S,Zs),s(Zs,bt),s(S,It),s(S,Ks),s(Ks,St),s(S,Ot),s(p,Tt),s(p,Qs),Qs.innerHTML=Vi,s(p,Pt),s(p,Zo),s(Zo,Ct),s(p,Dt),s(p,ss),s(ss,Wt),s(ss,so),s(so,Jt),s(ss,At),s(p,qt),s(p,oo),oo.innerHTML=ji,s(p,Lt),s(p,os),s(os,Rt),s(os,no),s(no,Ft),s(os,Ht),s(p,Mt),s(p,ns),s(ns,Nt),s(ns,eo),s(eo,$t),s(ns,Vt),s(p,jt),s(p,to),to.innerHTML=Yi,s(p,Yt),s(p,es),s(es,Gt),s(es,ao),s(ao,Bt),s(es,Ut),s(p,zt),s(p,ro),ro.innerHTML=Gi,s(p,Xt),s(p,ts),s(ts,Zt),s(ts,lo),s(lo,Kt),s(ts,Qt),s(p,sa),s(p,Ko),s(Ko,oa),s(p,na),s(p,io),io.innerHTML=Bi,s(p,ea),s(p,Qo),s(Qo,ta),s(p,aa),s(p,sn),s(sn,ra),s(p,la),s(p,as),s(as,ia),s(as,co),s(co,ca),s(as,pa),s(p,ha),s(p,rs),s(rs,ka),s(rs,po),s(po,ya),s(rs,va),x(h,En,v),x(h,u,v),s(u,on),s(on,ls),s(ls,nn),s(nn,da),s(u,ua),s(u,is),s(is,fa),s(is,ho),s(ho,wa),s(is,ma),s(u,xa),s(u,ko),ko.innerHTML=Ui,s(u,ga),s(u,cs),s(cs,Ea),s(cs,yo),s(yo,_a),s(cs,ba),s(u,Ia),s(u,vo),vo.innerHTML=zi,s(u,Sa),s(u,ps),s(ps,Oa),s(ps,uo),s(uo,Ta),s(ps,Pa),s(u,Ca),s(u,hs),s(hs,Da),s(hs,fo),s(fo,Wa),s(hs,Ja),s(u,Aa),s(u,en),s(en,qa),s(u,La),s(u,tn),s(tn,Ra),s(u,Fa),s(u,_),x(h,_n,v),x(h,P,v),s(P,an),s(an,ks),s(ks,Ha),s(P,Ma),s(P,rn),s(rn,Na),s(P,$a),s(P,ln),s(ln,Va),s(P,ja),s(P,cn),s(cn,Ya),x(h,bn,v),x(h,g,v),s(g,pn),s(pn,ys),s(ys,Ga),s(g,Ba),s(g,vs),s(vs,Ua),s(vs,ds),s(ds,za),s(vs,Xa),s(g,Za),s(g,wo),wo.innerHTML=Xi,s(g,Ka),s(g,mo),s(mo,xo),s(xo,Qa),s(mo,sr),s(g,or),s(g,hn),s(hn,nr),s(g,er),s(g,O),s(O,F),s(F,tr),s(F,go),s(go,ar),s(F,rr),s(F,Eo),s(Eo,lr),s(F,ir),s(O,cr),s(O,kn),s(kn,pr),s(O,hr),s(O,H),s(H,kr),s(H,_o),s(_o,yr),s(H,vr),s(H,bo),s(bo,dr),s(H,ur),s(O,fr),s(O,us),s(us,wr),s(us,Io),s(Io,mr),s(us,xr),s(O,gr),s(O,fs),s(fs,Er),s(fs,So),s(So,_r),s(fs,br),x(h,In,v),x(h,D,v),s(D,yn),s(yn,ws),s(ws,Ir),s(D,Sr),s(D,vn),s(vn,Or),s(D,Tr),s(D,ms),s(ms,Pr),s(ms,xs),s(xs,Cr),s(ms,Dr),x(h,Sn,v),x(h,b,v),s(b,dn),s(dn,gs),s(gs,Wr),s(b,Jr),s(b,Es),s(Es,Ar),s(Es,_s),s(_s,qr),s(Es,Lr),s(b,Rr),s(b,bs),s(bs,Fr),s(bs,Is),s(Is,Hr),s(bs,Mr),s(b,Nr),s(b,un),s(un,$r),s(b,Vr),s(b,Ss),s(Ss,Oo),s(Oo,jr),s(Oo,Os),s(Os,Yr),s(Ss,Gr),s(Ss,To),s(To,Br),s(To,Ts),s(Ts,Ur)},p:_c,d(h){h&&o(y),h&&o(mn),h&&o(d),h&&o(xn),h&&o(js),h&&o(gn),h&&o(p),h&&o(En),h&&o(u),h&&o(_n),h&&o(P),h&&o(bn),h&&o(g),h&&o(In),h&&o(D),h&&o(Sn),h&&o(b)}}}function Oc(Ps){let y,T;const I=[Ps[0],Li];let $={$$slots:{default:[Sc]},$$scope:{ctx:Ps}};for(let w=0;w<I.length;w+=1)$=Qr($,I[w]);return y=new bc({props:$}),{c(){vc(y.$$.fragment)},l(w){dc(y.$$.fragment,w)},m(w,E){uc(y,w,E),T=!0},p(w,[E]){const Cs=E&1?fc(I,[E&1&&Ai(w[0]),E&0&&Ai(Li)]):{};E&2&&(Cs.$$scope={dirty:E,ctx:w}),y.$set(Cs)},i(w){T||(wc(y.$$.fragment,w),T=!0)},o(w){mc(y.$$.fragment,w),T=!1},d(w){xc(y,w)}}}const Li={title:"Pause and resume a JavaScript function",date:"2019-12-09T08:00:00Z",description:"A thought experiment on how you can pause and resume the execution of a JavaScript function",tags:["JavaScript","React"],label:"blog",tableOfContents:[{link:"asynchronous-javascript",title:"Asynchronous JavaScript",nested:[{link:"every-function-has-a-color",title:"Every function has a color"}]},{link:"writing-the-runtime",title:'Writing "the runtime"',nested:[{link:"the-first-constraint-entry-point",title:"The first constraint: entry point"},{link:"the-second-constraint-pure-functions",title:"The second constraint: pure functions"}]},{link:"what-have-we-done-so-far",title:"What have we done so far?"},{link:"okay-cool-why-are-we-doing-this",title:"Okay cool. Why are we doing this?",nested:[{link:"yet-this-is-not-suspense",title:"Yet, this is not Suspense."}]},{link:"closing-note",title:"Closing Note"}]};function Tc(Ps,y,T){return gc("blog",{image:Ic}),Ps.$$set=I=>{T(0,y=Qr(Qr({},y),qi(I)))},y=qi(y),[y]}class qc extends hc{constructor(y){super();kc(this,y,Tc,Oc,yc,{})}}export{qc as default,Li as metadata};
