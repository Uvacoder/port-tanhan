import{S as H_,i as j_,s as M_,C as Gu,w as N_,x as q_,y as V_,z as R_,A as P2,q as W_,o as J_,B as G_,r as U_,Y as S2,e as n,t as e,k as i,c as o,a as l,h as a,d as t,m as r,b as c,g as C,H as s,J as Y_}from"../../chunks/vendor-da4388d4.js";import{B as $_}from"../../chunks/BlogLayout-86707f1c.js";import"../../chunks/stores-1fad7c36.js";import"../../chunks/ldjson-b0805387.js";/* empty css                                */var F_="/_app/assets/hero-twitter-33a71fdc.jpg";function K_(Se){let x,S,is,es,w,W,Rs,Cs,Nl,Xn,ql,Vl,Xo,Le,Rl,sl,O,so,rs,Wl,Ae,Jl,Gl,Ul,Ws,Yl,Be,$l,Fl,Kl,He,A2='<pre class="prism language-svelte"><code><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> condition<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Conditionally rendered content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></div></code></pre>',Ql,ps,zl,je,Zl,Xl,Me,sc,ec,ac,ds,tc,Ne,nc,oc,qe,lc,cc,ic,Ve,B2='<pre class="prism language-svelte"><code><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> condition_a<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Rendered due to condition_a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">:</span><span class="token keyword">else</span> <span class="token keyword">if</span> condition_b<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Rendered due to condition_b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">:</span><span class="token keyword">else</span><span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Otherwise<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></div></code></pre>',rc,Js,pc,Os,Re,dc,kc,hc,el,as,eo,Gs,vc,uc,Us,yc,We,fc,_c,Ec,Ys,xc,Je,gc,mc,al,v,ao,$s,wc,bc,Fs,Cc,Ge,Oc,Dc,Ic,Ue,H2=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createElementsIfConditionA</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// code to create &#96;&lt;div&gt;Rendered due to condition_a&lt;/div&gt;&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createElementsIfConditionB</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// code to create &#96;&lt;div&gt;Rendered due to condition_b&lt;/div&gt;&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createElementsElse</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// code to create &#96;&lt;div&gt;Otherwise&lt;/div&gt;&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createIfBlock</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (condition_a) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">createElementsIfConditionA</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (condition_b) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">createElementsIfConditionB</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">createElementsElse</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Tc,J,Pc,Ye,Sc,Lc,$e,Ac,Bc,Fe,Hc,jc,Mc,to,Nc,qc,no,Vc,Rc,Ke,j2=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">destroyElementsIfConditionA</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// code to destroy &#96;&lt;div&gt;Rendered due to condition_a&lt;/div&gt;&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">destroyElementsIfConditionB</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// code to destroy &#96;&lt;div&gt;Rendered due to condition_b&lt;/div&gt;&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">destroyElementsElse</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// code to destroy &#96;&lt;div&gt;Otherwise&lt;/div&gt;&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> previousDestroy;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getPreviousDestroy</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (condition_a) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    previousDestroy </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> destroyElementsIfConditionA;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (condition_b) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    previousDestroy </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> destroyElementsIfConditionB;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    previousDestroy </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> destroyElementsElse;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createIfBlock</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">getPreviousDestroy</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Wc,Ks,Jc,oo,Gc,Uc,Yc,Qe,M2=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">updateIfBlock</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// if &#96;condition_a&#96; or &#96;condition_b&#96; changed</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (conditionChanged) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">previousDestroy</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">createIfBlock</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,$c,G,Fc,ze,Kc,Qc,Ze,zc,Zc,Xe,Xc,si,ei,sa,N2='<pre class="prism language-svelte"><code><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> condition_a<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">&#123;</span> value_a <span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">:</span><span class="token keyword">else</span> <span class="token keyword">if</span> condition_b<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">&#123;</span> value_b <span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">:</span><span class="token keyword">else</span><span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">&#123;</span> value_else <span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></div></code></pre>',ai,lo,ti,ni,ea,q2=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">updateElementsIfConditionA</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// code to update &#96;&lt;div&gt;&#123; value_a &#125;&lt;/div&gt;&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">updateElementsIfConditionB</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// code to update &#96;&lt;div&gt;&#123; value_b &#125;&lt;/div&gt;&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">updateElementsElse</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// code to update &#96;&lt;div&gt;&#123; value_else &#125;&lt;/div&gt;&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">updateIfBlock</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// if &#96;condition_a&#96; or &#96;condition_b&#96; changed</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (conditionChanged) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">previousDestroy</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">createIfBlock</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (condition_a) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">updateElementsIfConditionA</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (condition_b) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">updateElementsIfConditionB</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">updateElementsElse</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,oi,ks,li,aa,ci,ii,ta,ri,pi,di,na,V2=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">destroyIfBlock</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">previousDestroy</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ki,b,hi,oa,vi,ui,la,yi,fi,ca,_i,Ei,ia,xi,gi,ra,mi,wi,pa,bi,Ci,da,Oi,Di,Ii,co,Ti,tl,_,io,Qs,Pi,Si,ro,Li,Ai,hs,po,ka,Bi,Hi,ko,ha,ji,Mi,ho,va,Ni,qi,zs,Vi,Zs,Ri,Wi,Ji,Xs,Gi,ua,Ui,Yi,$i,ya,R2=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">operationConditionA</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  create</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> createElementsIfConditionA</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  update</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> updateElementsIfConditionA</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  destroy</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> destroyElementsIfConditionA</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">operationConditionB</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  create</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> createElementsIfConditionB</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  update</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> updateElementsIfConditionB</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  destroy</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> destroyElementsIfConditionB</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">operationConditionElse</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  create</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> createElementsElse</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  update</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> updateElementsElse</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  destroy</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> destroyElementsElse</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,Fi,vo,Ki,Qi,fa,W2=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getOperation</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (condition_a) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> operationConditionA;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (condition_b) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> operationConditionB;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> operationConditionElse;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,zi,U,Zi,_a,Xi,sr,Ea,er,ar,xa,tr,nr,or,ga,J2=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> currentOperation </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getOperation</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createIfBlock</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">currentOperation</span><span style="color: var(--shiki-token-function)">.create</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">updateIfBlock</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">previousOperation</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> currentOperation;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  currentOperation </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getOperation</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// if (conditionChanged)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (currentOperation </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> previousOperation) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">previousOperation</span><span style="color: var(--shiki-token-function)">.destroy</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">currentOperation</span><span style="color: var(--shiki-token-function)">.create</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">currentOperation</span><span style="color: var(--shiki-token-function)">.update</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">destroyIfBlock</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">currentOperation</span><span style="color: var(--shiki-token-function)">.destroy</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,lr,uo,cr,nl,h,yo,se,ir,rr,ee,pr,ma,dr,kr,hr,wa,G2='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">	<span class="token keyword">let</span> loggedIn <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></div><div class="line"></div><div class="line">	<span class="token keyword">function</span> <span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">		loggedIn <span class="token operator">=</span> <span class="token operator">!</span>loggedIn<span class="token punctuation">;</span></div><div class="line">	<span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> loggedIn<span class="token punctuation">&#125;</span></span></div><div class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>toggle<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div><div class="line">		Log out</div><div class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">:</span><span class="token keyword">else</span><span class="token punctuation">&#125;</span></span></div><div class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>toggle<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div><div class="line">		Log in</div><div class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></div></code></pre>',vr,fo,ae,ur,yr,_o,fr,_r,te,Eo,Er,xr,ba,U2=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">/* App.svelte generated by Svelte v3.25.1 */</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_else_block</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    p</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> noop</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">(detaching) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// (9:0) &#123;#if loggedIn&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_if_block</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    p</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> noop</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">(detaching) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">select_block_type</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-comment)">/*loggedIn*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]) </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> create_if_block;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> create_else_block;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> current_block_type </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">select_block_type</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> if_block </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">current_block_type</span><span style="color: var(--shiki-color-text)">(ctx);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">if_block</span><span style="color: var(--shiki-token-function)">.c</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      if_block_anchor </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">empty</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">if_block</span><span style="color: var(--shiki-token-function)">.m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> if_block_anchor</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [dirty]) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (current_block_type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> (current_block_type </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">select_block_type</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty)) </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> if_block) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">if_block</span><span style="color: var(--shiki-token-function)">.p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">if_block</span><span style="color: var(--shiki-token-function)">.d</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        if_block </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">current_block_type</span><span style="color: var(--shiki-color-text)">(ctx);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (if_block) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-constant)">if_block</span><span style="color: var(--shiki-token-function)">.c</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-constant)">if_block</span><span style="color: var(--shiki-token-function)">.m</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">if_block_anchor</span><span style="color: var(--shiki-color-text)">.parentNode</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> if_block_anchor);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    i</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> noop</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    o</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> noop</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">(detaching) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">if_block</span><span style="color: var(--shiki-token-function)">.d</span><span style="color: var(--shiki-color-text)">(detaching);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (detaching) </span><span style="color: var(--shiki-token-function)">detach</span><span style="color: var(--shiki-color-text)">(if_block_anchor);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,gr,xo,mr,wr,go,mo,br,Cr,vs,ne,A,Or,oe,Ca,Dr,Ir,Tr,Oa,Pr,Sr,Da,Lr,Ar,wo,Br,Hr,jr,Y,Mr,Ia,Nr,qr,Ta,Vr,Rr,Pa,Wr,Jr,Gr,le,us,Ur,Sa,Yr,$r,La,Fr,Kr,Qr,ce,zr,Aa,Zr,Xr,sp,bo,Co,ep,ap,Ba,Y2=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> current_block_type </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">select_block_type</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> if_block </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">current_block_type</span><span style="color: var(--shiki-color-text)">(ctx);</span></span></code></pre>`,tp,ie,ys,Oo,np,op,$,Ha,lp,ja,cp,ip,Ma,rp,Na,pp,dp,qa,kp,Va,hp,vp,Ra,up,Wa,yp,fp,re,_p,Ja,Ep,xp,gp,fs,B,mp,Ga,wp,bp,Do,Cp,Op,Ua,Dp,Ip,Ya,Tp,Pp,Sp,H,Lp,$a,Ap,Bp,Fa,Hp,jp,Ka,Mp,Np,Qa,qp,Vp,Rp,F,Wp,za,Jp,Gp,Za,Up,Yp,Xa,$p,Fp,Kp,Io,Ds,Qp,st,zp,Zp,et,Xp,sd,at,$2='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">if_block_anchor </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">empty</span><span style="color: var(--shiki-color-text)">()</span></span></code></pre>',ed,tt,nt,ad,td,nd,ot,F2=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// https://github.com/sveltejs/svelte/blob/v3.25.1/src/runtime/internal/dom.ts#L56-L58</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">empty</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">text</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,od,K,ld,lt,cd,id,ct,rd,pd,To,dd,kd,hd,it,K2='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">if_block</span><span style="color: var(--shiki-token-function)">.m</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">if_block_anchor</span><span style="color: var(--shiki-color-text)">.parentNode</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> if_block_anchor)</span></span></code></pre>',vd,Po,ud,ol,p,So,pe,yd,fd,de,_d,rt,Ed,xd,gd,ke,md,he,pt,wd,bd,Cd,ve,Od,dt,Dd,Id,Td,Lo,ue,Pd,kt,Sd,Ld,Ad,ht,Q2='<pre class="prism language-svelte"><code><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> condition<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token punctuation">/></span></span></div></code></pre>',Bd,Ao,ye,Hd,jd,Bo,Md,Nd,fe,Ho,qd,Vd,_e,Rd,vt,Wd,Jd,Gd,ut,z2='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">if_block</span><span style="color: var(--shiki-token-function)">.m</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">span</span><span style="color: var(--shiki-color-text)">.parentNode</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> span)</span></span></code></pre>',Ud,jo,Q,Yd,yt,$d,Fd,ft,Kd,Qd,_t,zd,Zd,Xd,Mo,_s,sk,Et,ek,ak,xt,tk,nk,ok,gt,Z2='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span></div><div class="line">  <span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> condition<span class="token punctuation">&#125;</span></span></div><div class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">/></span></span></div><div class="line">  <span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div></code></pre>',lk,No,Ee,ck,ik,qo,rk,pk,xe,Vo,dk,kk,I,hk,mt,vk,uk,wt,yk,fk,bt,_k,Ek,Ct,xk,gk,Ot,mk,wk,bk,Dt,X2='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">if_block</span><span style="color: var(--shiki-token-function)">.m</span><span style="color: var(--shiki-color-text)">(div</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>',Ck,Ro,z,Ok,It,Dk,Ik,Tt,Tk,Pk,Pt,Sk,Lk,Ak,Wo,Es,Bk,St,Hk,jk,Lt,Mk,Nk,qk,At,s_='<pre class="prism language-svelte"><code><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> condition<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></div></code></pre>',Vk,Jo,ge,Rk,Wk,Go,Jk,Gk,xs,me,Uk,Bt,Yk,$k,Fk,gs,Kk,Ht,Qk,zk,jt,Zk,Xk,sh,Z,eh,Uo,ah,th,Mt,nh,oh,Nt,lh,ch,ih,qt,e_='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">if_block</span><span style="color: var(--shiki-token-function)">.m</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">if_block_anchor</span><span style="color: var(--shiki-color-text)">.parentNode</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> if_block_anchor);</span></span></code></pre>',rh,Yo,X,ph,Vt,dh,kh,Rt,hh,vh,Wt,uh,yh,fh,$o,_h,Eh,Fo,xh,gh,Ko,mh,wh,Jt,a_=`<pre class="prism language-svelte"><code><div class="line"><span class="token comment">&lt;!-- A.svelte --></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> condition<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- B.svelte --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- App.svelte --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">import</span> <span class="token constant">A</span> <span class="token keyword">from</span> <span class="token string">'./A.svelte'</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">import</span> <span class="token constant">B</span> <span class="token keyword">from</span> <span class="token string">'./B.svelte'</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>A</span> <span class="token punctuation">/></span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>B</span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div></code></pre>`,bh,ms,Ch,Gt,Oh,Dh,Ut,Ih,Th,Ph,f,Sh,Yt,Lh,Ah,$t,Bh,Hh,Ft,jh,Mh,Kt,Nh,qh,Qt,Vh,Rh,zt,Wh,Jh,Zt,Gh,Uh,Xt,Yh,$h,sn,Fh,Kh,en,Qh,zh,an,Zh,Xh,tn,sv,ev,av,nn,t_=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;parent&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;b&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;a&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-comment)">&lt;!-- newly inserted element --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,tv,we,nv,on,ov,lv,cv,ws,iv,ln,rv,pv,cn,dv,kv,hv,rn,n_=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;parent&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;#text /&gt; </span><span style="color: var(--shiki-token-comment)">&lt;!-- an empty text node, not visible to the user --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;b&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,vv,j,uv,pn,yv,fv,dn,_v,Ev,kn,xv,gv,hn,mv,wv,bv,vn,o_=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;parent&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;a&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-comment)">&lt;!-- newly inserted element --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;#text /&gt; </span><span style="color: var(--shiki-token-comment)">&lt;!-- an empty text node, not visible to the user --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;b&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,Cv,bs,Ov,un,Dv,Iv,yn,Tv,Pv,Sv,T,Lv,fn,Av,Bv,_n,Hv,jv,be,Mv,Nv,En,qv,Vv,xn,Rv,Wv,Jv,Qo,Ce,Gv,gn,Uv,Yv,$v,Oe,Fv,mn,Kv,Qv,zv,wn,l_='<pre class="prism language-svelte"><code><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> condition<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> condition2<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></div></code></pre>',Zv,M,Xv,bn,su,eu,Cn,au,tu,On,nu,ou,Dn,lu,cu,iu,P,ru,In,pu,du,Tn,ku,hu,Pn,vu,uu,Sn,yu,fu,Ln,_u,Eu,ll,N,zo,De,xu,gu,ss,mu,An,wu,bu,Bn,Cu,Ou,Hn,Du,Iu,Tu,Ie,Pu,Te,Su,Lu,Au,Pe,Bu,jn,Hu,ju;return{c(){x=n("p"),S=n("strong"),is=e("\u2B05 \u2B05 Previously in "),es=n("a"),w=e("Part 3"),W=e("."),Rs=i(),Cs=n("p"),Nl=e("In this article, we are going to cover our first logic block, the "),Xn=n("strong"),ql=e("if block"),Vl=e("."),Xo=i(),Le=n("p"),Rl=e("To make sure we are on the same page, let's first explain how if block works."),sl=i(),O=n("section"),so=n("h2"),rs=n("a"),Wl=e("The "),Ae=n("code"),Jl=e("{#if}"),Gl=e(" block"),Ul=i(),Ws=n("p"),Yl=e("To render content conditionally, you can wrap it with the "),Be=n("code"),$l=e("{#if}"),Fl=e(" block:"),Kl=i(),He=n("div"),Ql=i(),ps=n("p"),zl=e("If the "),je=n("code"),Zl=e("condition"),Xl=e(" is truthy, you will see the "),Me=n("code"),sc=e("<div>Conditionally rendered content</div>"),ec=e(", otherwise you will see nothing."),ac=i(),ds=n("p"),tc=e("Like JavaScript, you can use "),Ne=n("code"),nc=e("else"),oc=e(" and "),qe=n("code"),lc=e("else if"),cc=e(" in Svelte to test multiple conditions too:"),ic=i(),Ve=n("div"),rc=i(),Js=n("p"),pc=e("You can visit Svelte's interactive tutorial to learn more about the "),Os=n("a"),Re=n("code"),dc=e("{#if}"),kc=e(" logic block"),hc=e("."),el=i(),as=n("section"),eo=n("h2"),Gs=n("a"),vc=e("The Vanilla JS"),uc=i(),Us=n("p"),yc=e("So how do we implement an "),We=n("code"),fc=e("{#if}"),_c=e(" logic without any framework?"),Ec=i(),Ys=n("p"),xc=e("As "),Je=n("a"),gc=e("mentioned in the Part 1 of the series"),mc=e(", we've seen how we can create elements without framework help."),al=i(),v=n("section"),ao=n("h3"),$s=n("a"),wc=e("Implementating the if block"),bc=i(),Fs=n("p"),Cc=e("Implementing an "),Ge=n("code"),Oc=e("{#if}"),Dc=e(" logic block can be as follow:"),Ic=i(),Ue=n("div"),Tc=i(),J=n("p"),Pc=e("The "),Ye=n("code"),Sc=e("condition_a"),Lc=e(" and "),$e=n("code"),Ac=e("condition_b"),Bc=e(" could be dynamic, which means if the condition changed, we may need to call "),Fe=n("code"),Hc=e("createIfBlock"),jc=e(" again."),Mc=i(),to=n("p"),Nc=e("But before that, we need to remove the elements that we created previously. This depends on which conditions were met previously, and which elements were created previously."),qc=i(),no=n("p"),Vc=e("So, let's store that information in a variable:"),Rc=i(),Ke=n("div"),Wc=i(),Ks=n("p"),Jc=e("So, "),oo=n("strong"),Gc=e("if conditions changed"),Uc=e(", we destroy the previously created elements, and create a new one:"),Yc=i(),Qe=n("div"),$c=i(),G=n("p"),Fc=e("However, if the condition does not change, but the content within the if block changes, for example, "),ze=n("code"),Kc=e("value_a"),Qc=e(", "),Ze=n("code"),zc=e("value_b"),Zc=e(" or "),Xe=n("code"),Xc=e("value_else"),si=e(" change in the following code:"),ei=i(),sa=n("div"),ai=i(),lo=n("p"),ti=e("Then we need to know how to update the elements as well:"),ni=i(),ea=n("div"),oi=i(),ks=n("p"),li=e("Finally to destroy the elements if we want to unmount the whole "),aa=n("code"),ci=e("{#if}"),ii=e(" block, we can use "),ta=n("code"),ri=e("previousDestroy"),pi=e(", since it will be based on the conditions that the elements were created with:"),di=i(),na=n("div"),ki=i(),b=n("p"),hi=e("Here we have "),oa=n("code"),vi=e("createIfBlock"),ui=e(", "),la=n("code"),yi=e("updateIfBlock"),fi=e(" and "),ca=n("code"),_i=e("destroyIfBlock"),Ei=e(". It looks unwieldy, as the "),ia=n("code"),xi=e("if (condition)"),gi=e(" logic is scattered across "),ra=n("code"),mi=e("createIfBlock"),wi=e(", "),pa=n("code"),bi=e("getPreviousDestroy"),Ci=e(" and "),da=n("code"),Oi=e("updateIfBlock"),Di=e("."),Ii=i(),co=n("p"),Ti=e("So, let's refactor this. Let's shift code around to make it cleaner. \u2728"),tl=i(),_=n("section"),io=n("h3"),Qs=n("a"),Pi=e("Refactor the code"),Si=i(),ro=n("p"),Li=e("For each of the logic branch, we have functions to create, update and destroy its elements. For the first condition branch, we have:"),Ai=i(),hs=n("ul"),po=n("li"),ka=n("code"),Bi=e("createElementsIfConditionA"),Hi=i(),ko=n("li"),ha=n("code"),ji=e("updateElementsIfConditionA"),Mi=i(),ho=n("li"),va=n("code"),Ni=e("destroyElementsIfConditionA"),qi=i(),zs=n("p"),Vi=e("It seems like we can employ some sort of "),Zs=n("a"),Ri=e("Strategy Pattern"),Wi=e(" over here."),Ji=i(),Xs=n("p"),Gi=e("We can group the operations for each condition branch together, where each operation has the same interface, "),ua=n("code"),Ui=e("{ create(){}, update(){}, destroy(){} }"),Yi=e(" :"),$i=i(),ya=n("div"),Fi=i(),vo=n("p"),Ki=e("Now, we choose the operation based on the condition, since they have the same interface, they should be able to be used interchangeably:"),Qi=i(),fa=n("div"),zi=i(),U=n("p"),Zi=e("Here, we can rewrite our "),_a=n("code"),Xi=e("createIfBlock"),sr=e(", "),Ea=n("code"),er=e("updateIfBlock"),ar=e(" and "),xa=n("code"),tr=e("destroyIfBlock"),nr=e(":"),or=i(),ga=n("div"),lr=i(),uo=n("p"),cr=e("To determine whether the condition changed, we can compute the operation and compare it with the previous operation to see if it has changed."),nl=i(),h=n("section"),yo=n("h2"),se=n("a"),ir=e("The Compiled JS"),rr=i(),ee=n("p"),pr=e("Now let's take look at how Svelte compiles "),ma=n("code"),dr=e("{#if}"),kr=e(" into output JavaScript."),hr=i(),wa=n("div"),vr=i(),fo=n("p"),ae=n("a"),ur=e("Svelte REPL"),yr=i(),_o=n("p"),fr=e("The output code:"),_r=i(),te=n("details"),Eo=n("summary"),Er=e("Click to expand..."),xr=i(),ba=n("div"),gr=i(),xo=n("p"),mr=e("Some observations:"),wr=i(),go=n("p"),mo=n("strong"),br=e("Observation 1: If you compare the Svelte's compiled output and the JS code we came out earlier, you may see some resemblance:"),Cr=i(),vs=n("ul"),ne=n("li"),A=n("p"),Or=e("For each logic branch, we have a "),oe=n("a"),Ca=n("code"),Dr=e("create_fragment"),Ir=e(" function"),Tr=e(", which in this case is "),Oa=n("code"),Pr=e("create_else_block"),Sr=e(" and "),Da=n("code"),Lr=e("create_if_block"),Ar=e(". As explain in the previous article, these functions return an "),wo=n("em"),Br=e("instruction manual"),Hr=e(" on how to build the DOM fragment for each logic branch."),jr=i(),Y=n("p"),Mr=e("This is similar to the operations we discussed earlier, eg: "),Ia=n("code"),Nr=e("operationConditionA"),qr=e(", "),Ta=n("code"),Vr=e("operationConditionB"),Rr=e(" and "),Pa=n("code"),Wr=e("operationConditionElse"),Jr=e("."),Gr=i(),le=n("li"),us=n("p"),Ur=e("To determine which "),Sa=n("code"),Yr=e("create_fragment"),$r=e(" function to use, we have the "),La=n("code"),Fr=e("select_block_type"),Kr=e(" function."),Qr=i(),ce=n("p"),zr=e("This is similar to the "),Aa=n("code"),Zr=e("getOperation"),Xr=e(" we discussed earlier."),sp=i(),bo=n("li"),Co=n("p"),ep=e("We then initialise the fragment for the current condition branch,"),ap=i(),Ba=n("div"),tp=i(),ie=n("ul"),ys=n("li"),Oo=n("p"),np=e("Now we can:"),op=i(),$=n("ul"),Ha=n("li"),lp=e("create "),ja=n("code"),cp=e("if_block.c()"),ip=i(),Ma=n("li"),rp=e("mount "),Na=n("code"),pp=e("if_block.m(target, anchor)"),dp=i(),qa=n("li"),kp=e("update "),Va=n("code"),hp=e("if_block.p(ctx, dirty)"),vp=i(),Ra=n("li"),up=e("destroy "),Wa=n("code"),yp=e("if_block.d(detaching)"),fp=i(),re=n("p"),_p=e("elements for the "),Ja=n("code"),Ep=e("{#if}"),xp=e(" block."),gp=i(),fs=n("li"),B=n("p"),mp=e("In the "),Ga=n("code"),wp=e("p"),bp=i(),Do=n("strong"),Cp=e("(u_p_date)"),Op=e(" method, we check if the "),Ua=n("code"),Dp=e("current_block_type"),Ip=e(" has changed, if not, then we call "),Ya=n("code"),Tp=e("if_block.p(ctx, dirty)"),Pp=e(" to update as necessary."),Sp=i(),H=n("p"),Lp=e("If there's change, then we destroy "),$a=n("code"),Ap=e("if_block.d(1)"),Bp=e(" the previous elements, create a new fragment based on the "),Fa=n("code"),Hp=e("current_block_type"),jp=e(", then create and mount the elements via "),Ka=n("code"),Mp=e("if_block.c()"),Np=e(" and "),Qa=n("code"),qp=e("if_block.m(...)"),Vp=e("."),Rp=i(),F=n("p"),Wp=e("This is similar to how we call "),za=n("code"),Jp=e("previousOperation.destroy()"),Gp=e(" and "),Za=n("code"),Up=e("currentOperation.create()"),Yp=e("  or "),Xa=n("code"),$p=e("currentOperation.update()"),Fp=e("."),Kp=i(),Io=n("p"),Ds=n("strong"),Qp=e("Observation 2: There's a "),st=n("code"),zp=e("if_block_anchor"),Zp=e(" inserted after the "),et=n("code"),Xp=e("if_block"),sd=i(),at=n("div"),ed=i(),tt=n("p"),nt=n("code"),ad=e("empty()"),td=e(" creates an empty text node."),nd=i(),ot=n("div"),od=i(),K=n("p"),ld=e("The "),lt=n("code"),cd=e("if_block_anchor"),id=e(" is then used when mounting the "),ct=n("code"),rd=e("if_block"),pd=e(" in the "),To=n("strong"),dd=e("u_p_date"),kd=e(" method."),hd=i(),it=n("div"),vd=i(),Po=n("p"),ud=e("So what is this extra empty text node for?"),ol=i(),p=n("section"),So=n("h3"),pe=n("a"),yd=e("The extra text node"),fd=i(),de=n("p"),_d=e("When we update the "),rt=n("code"),Ed=e("{#if}"),xd=e(" block and notice that we need to change the fragment block type, we need to destroy the elements created previously, and insert newly created elements."),gd=i(),ke=n("p"),md=e("When we insert the new elements, we need to know where to insert them. The "),he=n("a"),pt=n("code"),wd=e("insertBefore"),bd=e(" API allow us to specify which node the elements should be inserted before. So now it begs the question, which node?"),Cd=i(),ve=n("p"),Od=e("The answer depends on the position "),dt=n("code"),Dd=e("{#if}"),Id=e(" block is written in the component. There are 4 possible scenarios:"),Td=i(),Lo=n("p"),ue=n("strong"),Pd=e("1. There's an element right after the "),kt=n("code"),Sd=e("{#if}"),Ld=e(" block"),Ad=i(),ht=n("div"),Bd=i(),Ao=n("p"),ye=n("a"),Hd=e("Svelte REPL"),jd=i(),Bo=n("p"),Md=e("You'll see that"),Nd=i(),fe=n("ul"),Ho=n("li"),qd=e("Svelte does not create the extra text node"),Vd=i(),_e=n("li"),Rd=e("Instead, Svelte uses the "),vt=n("code"),Wd=e("<span />"),Jd=e(" node instead"),Gd=i(),ut=n("div"),Ud=i(),jo=n("blockquote"),Q=n("p"),Yd=e("When the "),yt=n("code"),$d=e("{#if}"),Fd=e(" condition changes, "),ft=n("code"),Kd=e("{#if}"),Qd=e(" block will replace and insert new elements before the "),_t=n("code"),zd=e("<span />"),Zd=e(" element."),Xd=i(),Mo=n("p"),_s=n("strong"),sk=e("2. "),Et=n("code"),ek=e("{#if}"),ak=e(" block is the last child, "),xt=n("code"),tk=e("{#if}"),nk=e(" block has a parent"),ok=i(),gt=n("div"),lk=i(),No=n("p"),Ee=n("a"),ck=e("Svelte REPL"),ik=i(),qo=n("p"),rk=e("You'll see that"),pk=i(),xe=n("ul"),Vo=n("li"),dk=e("Svelte does not create the extra text node"),kk=i(),I=n("li"),hk=e("Instead, Svelte inserts the "),mt=n("code"),vk=e("{#if}"),uk=e(" block into the parent node, "),wt=n("code"),yk=e("<div />"),fk=e(" and insert before "),bt=n("code"),_k=e("null"),Ek=e(". (If you pass "),Ct=n("code"),xk=e("null"),gk=e(" to "),Ot=n("code"),mk=e("insertBefore"),wk=e(", it will append the element as the last child)"),bk=i(),Dt=n("div"),Ck=i(),Ro=n("blockquote"),z=n("p"),Ok=e("When the "),It=n("code"),Dk=e("{#if}"),Ik=e(" condition changes, "),Tt=n("code"),Tk=e("{#if}"),Pk=e(" block will replace and insert new elements as the last children of the parent "),Pt=n("code"),Sk=e("<div />"),Lk=e(" element."),Ak=i(),Wo=n("p"),Es=n("strong"),Bk=e("3. "),St=n("code"),Hk=e("{#if}"),jk=e(" block is the last child, "),Lt=n("code"),Mk=e("{#if}"),Nk=e(" block does not have a parent"),qk=i(),At=n("div"),Vk=i(),Jo=n("p"),ge=n("a"),Rk=e("Svelte REPL"),Wk=i(),Go=n("p"),Jk=e("You'll see that"),Gk=i(),xs=n("ul"),me=n("li"),Uk=e("Svelte creates an extra "),Bt=n("code"),Yk=e("anchor"),$k=e(" element"),Fk=i(),gs=n("li"),Kk=e("The "),Ht=n("code"),Qk=e("anchor"),zk=e(" element is inserted after the "),jt=n("code"),Zk=e("{#if}"),Xk=e(" block."),sh=i(),Z=n("li"),eh=e("Subsequently in the "),Uo=n("strong"),ah=e("u_p_date"),th=e(" function, Svelte insert "),Mt=n("code"),nh=e("{#if}"),oh=e(" block before the "),Nt=n("code"),lh=e("anchor"),ch=e(" element."),ih=i(),qt=n("div"),rh=i(),Yo=n("blockquote"),X=n("p"),ph=e("When the "),Vt=n("code"),dh=e("{#if}"),kh=e(" condition changes, "),Rt=n("code"),hh=e("{#if}"),vh=e(" block will replace and insert new elements before the "),Wt=n("code"),uh=e("anchor"),yh=e(" element."),fh=i(),$o=n("p"),_h=e("But why?"),Eh=i(),Fo=n("p"),xh=e("This is because a Svelte component can be used in anywhere."),gh=i(),Ko=n("p"),mh=e("Let's take a look at the scenario below:"),wh=i(),Jt=n("div"),bh=i(),ms=n("p"),Ch=e("In the "),Gt=n("code"),Oh=e("A.svelte"),Dh=e(", the "),Ut=n("code"),Ih=e("{#if}"),Th=e(" block is the last child, it does not have any sibling elements after it."),Ph=i(),f=n("p"),Sh=e("Let's first assume we don't have the "),Yt=n("code"),Lh=e("anchor"),Ah=e(" element. When the "),$t=n("code"),Bh=e("condition"),Hh=e(" changes from "),Ft=n("code"),jh=e("false"),Mh=e(" to "),Kt=n("code"),Nh=e("true"),qh=e(", Svelte will have to insert the new element "),Qt=n("code"),Vh=e('<div id="a">'),Rh=e(" into its parent. And because there's no next element after "),zt=n("code"),Wh=e("{#if}"),Jh=e(" block, and no "),Zt=n("code"),Gh=e("anchor"),Uh=e(" element, we will have to insert before "),Xt=n("code"),Yh=e("null"),$h=e(". In which, the "),sn=n("code"),Fh=e('<div id="a" />'),Kh=e(" will be inserted as the last child of the parent element, "),en=n("code"),Qh=e('<div id="parent">'),zh=e(". And hey, we got ourselves a bug! Elements inside "),an=n("code"),Zh=e("<A />"),Xh=e(" appears after "),tn=n("code"),sv=e("<B />"),ev=e("!"),av=i(),nn=n("div"),tv=i(),we=n("p"),nv=e("We can prevent this from happening by adding an "),on=n("code"),ov=e("anchor"),lv=e(" element."),cv=i(),ws=n("p"),iv=e("When the "),ln=n("code"),rv=e("condition"),pv=e(" is "),cn=n("code"),dv=e("false"),kv=e(", our DOM looks like this:"),hv=i(),rn=n("div"),vv=i(),j=n("p"),uv=e("And when the "),pn=n("code"),yv=e("condition"),fv=e(" turns "),dn=n("code"),_v=e("true"),Ev=e(", we insert "),kn=n("code"),xv=e('<div id="a" />'),gv=e(" before the "),hn=n("code"),mv=e("anchor"),wv=e(" element:"),bv=i(),vn=n("div"),Cv=i(),bs=n("p"),Ov=e("Yay, we maintain the order of "),un=n("code"),Dv=e("<A />"),Iv=e(" and "),yn=n("code"),Tv=e("<B />"),Pv=e(" \u{1F389} !"),Sv=i(),T=n("p"),Lv=e("The "),fn=n("code"),Av=e("anchor"),Bv=e(" element to the "),_n=n("code"),Hv=e("{#if}"),jv=e(" block, is like "),be=n("a"),Mv=e("an anchor to a ship"),Nv=e(', "Here is where '),En=n("code"),qv=e("{#if}"),Vv=e(" block should "),xn=n("code"),Rv=e("insertBefore()"),Wv=e(' !"'),Jv=i(),Qo=n("p"),Ce=n("strong"),Gv=e("4. "),gn=n("code"),Uv=e("{#if}"),Yv=e(" block followed by another logic block"),$v=i(),Oe=n("p"),Fv=e("The final scenario. "),mn=n("code"),Kv=e("{#if}"),Qv=e(" block followed by another logic block:"),zv=i(),wn=n("div"),Zv=i(),M=n("p"),Xv=e("The 2nd "),bn=n("code"),su=e("{#if}"),eu=e(" block condition could be "),Cn=n("code"),au=e("true"),tu=e(" or "),On=n("code"),nu=e("false"),ou=e(". Which means "),Dn=n("code"),lu=e('<div id="b" />'),cu=e(" could be there or not there."),iu=i(),P=n("p"),ru=e("So, to know where we should insert "),In=n("code"),pu=e('<div id="a" />'),du=e(" when chaging the "),Tn=n("code"),ku=e("condition"),hu=e(", we need an "),Pn=n("code"),vu=e("anchor"),uu=e(" element after the 1st "),Sn=n("code"),yu=e("{#if}"),fu=e(" block, before the 2nd "),Ln=n("code"),_u=e("{#if}"),Eu=e(" block."),ll=i(),N=n("section"),zo=n("h2"),De=n("a"),xu=e("Closing Note"),gu=i(),ss=n("p"),mu=e("We've covered how Svelte compiles an "),An=n("code"),wu=e("{#if}"),bu=e(" block, as well as how and why an "),Bn=n("code"),Cu=e("anchor"),Ou=e(" element is needed for the "),Hn=n("code"),Du=e("{#if}"),Iu=e(" block."),Tu=i(),Ie=n("p"),Pu=e("If you wish to learn more about Svelte, "),Te=n("a"),Su=e("follow me on Twitter"),Lu=e("."),Au=i(),Pe=n("p"),Bu=e("I'll post it on Twitter when the next part is ready, the next post will be about "),jn=n("code"),Hu=e("{#each}"),ju=e(" logic block."),this.h()},l(k){x=o(k,"P",{});var g=l(x);S=o(g,"STRONG",{});var cl=l(S);is=a(cl,"\u2B05 \u2B05 Previously in "),es=o(cl,"A",{href:!0});var Uu=l(es);w=a(Uu,"Part 3"),Uu.forEach(t),W=a(cl,"."),cl.forEach(t),g.forEach(t),Rs=r(k),Cs=o(k,"P",{});var il=l(Cs);Nl=a(il,"In this article, we are going to cover our first logic block, the "),Xn=o(il,"STRONG",{});var Yu=l(Xn);ql=a(Yu,"if block"),Yu.forEach(t),Vl=a(il,"."),il.forEach(t),Xo=r(k),Le=o(k,"P",{});var $u=l(Le);Rl=a($u,"To make sure we are on the same page, let's first explain how if block works."),$u.forEach(t),sl=r(k),O=o(k,"SECTION",{});var L=l(O);so=o(L,"H2",{});var Fu=l(so);rs=o(Fu,"A",{href:!0,id:!0});var rl=l(rs);Wl=a(rl,"The "),Ae=o(rl,"CODE",{class:!0});var Ku=l(Ae);Jl=a(Ku,"{#if}"),Ku.forEach(t),Gl=a(rl," block"),rl.forEach(t),Fu.forEach(t),Ul=r(L),Ws=o(L,"P",{});var pl=l(Ws);Yl=a(pl,"To render content conditionally, you can wrap it with the "),Be=o(pl,"CODE",{class:!0});var Qu=l(Be);$l=a(Qu,"{#if}"),Qu.forEach(t),Fl=a(pl," block:"),pl.forEach(t),Kl=r(L),He=o(L,"DIV",{class:!0});var c_=l(He);c_.forEach(t),Ql=r(L),ps=o(L,"P",{});var Mn=l(ps);zl=a(Mn,"If the "),je=o(Mn,"CODE",{class:!0});var zu=l(je);Zl=a(zu,"condition"),zu.forEach(t),Xl=a(Mn," is truthy, you will see the "),Me=o(Mn,"CODE",{class:!0});var Zu=l(Me);sc=a(Zu,"<div>Conditionally rendered content</div>"),Zu.forEach(t),ec=a(Mn,", otherwise you will see nothing."),Mn.forEach(t),ac=r(L),ds=o(L,"P",{});var Nn=l(ds);tc=a(Nn,"Like JavaScript, you can use "),Ne=o(Nn,"CODE",{class:!0});var Xu=l(Ne);nc=a(Xu,"else"),Xu.forEach(t),oc=a(Nn," and "),qe=o(Nn,"CODE",{class:!0});var sy=l(qe);lc=a(sy,"else if"),sy.forEach(t),cc=a(Nn," in Svelte to test multiple conditions too:"),Nn.forEach(t),ic=r(L),Ve=o(L,"DIV",{class:!0});var i_=l(Ve);i_.forEach(t),rc=r(L),Js=o(L,"P",{});var dl=l(Js);pc=a(dl,"You can visit Svelte's interactive tutorial to learn more about the "),Os=o(dl,"A",{href:!0,rel:!0});var Mu=l(Os);Re=o(Mu,"CODE",{class:!0});var ey=l(Re);dc=a(ey,"{#if}"),ey.forEach(t),kc=a(Mu," logic block"),Mu.forEach(t),hc=a(dl,"."),dl.forEach(t),L.forEach(t),el=r(k),as=o(k,"SECTION",{});var qn=l(as);eo=o(qn,"H2",{});var ay=l(eo);Gs=o(ay,"A",{href:!0,id:!0});var ty=l(Gs);vc=a(ty,"The Vanilla JS"),ty.forEach(t),ay.forEach(t),uc=r(qn),Us=o(qn,"P",{});var kl=l(Us);yc=a(kl,"So how do we implement an "),We=o(kl,"CODE",{class:!0});var ny=l(We);fc=a(ny,"{#if}"),ny.forEach(t),_c=a(kl," logic without any framework?"),kl.forEach(t),Ec=r(qn),Ys=o(qn,"P",{});var hl=l(Ys);xc=a(hl,"As "),Je=o(hl,"A",{href:!0});var oy=l(Je);gc=a(oy,"mentioned in the Part 1 of the series"),oy.forEach(t),mc=a(hl,", we've seen how we can create elements without framework help."),hl.forEach(t),qn.forEach(t),al=r(k),v=o(k,"SECTION",{});var y=l(v);ao=o(y,"H3",{});var ly=l(ao);$s=o(ly,"A",{href:!0,id:!0});var cy=l($s);wc=a(cy,"Implementating the if block"),cy.forEach(t),ly.forEach(t),bc=r(y),Fs=o(y,"P",{});var vl=l(Fs);Cc=a(vl,"Implementing an "),Ge=o(vl,"CODE",{class:!0});var iy=l(Ge);Oc=a(iy,"{#if}"),iy.forEach(t),Dc=a(vl," logic block can be as follow:"),vl.forEach(t),Ic=r(y),Ue=o(y,"DIV",{class:!0});var r_=l(Ue);r_.forEach(t),Tc=r(y),J=o(y,"P",{});var Is=l(J);Pc=a(Is,"The "),Ye=o(Is,"CODE",{class:!0});var ry=l(Ye);Sc=a(ry,"condition_a"),ry.forEach(t),Lc=a(Is," and "),$e=o(Is,"CODE",{class:!0});var py=l($e);Ac=a(py,"condition_b"),py.forEach(t),Bc=a(Is," could be dynamic, which means if the condition changed, we may need to call "),Fe=o(Is,"CODE",{class:!0});var dy=l(Fe);Hc=a(dy,"createIfBlock"),dy.forEach(t),jc=a(Is," again."),Is.forEach(t),Mc=r(y),to=o(y,"P",{});var ky=l(to);Nc=a(ky,"But before that, we need to remove the elements that we created previously. This depends on which conditions were met previously, and which elements were created previously."),ky.forEach(t),qc=r(y),no=o(y,"P",{});var hy=l(no);Vc=a(hy,"So, let's store that information in a variable:"),hy.forEach(t),Rc=r(y),Ke=o(y,"DIV",{class:!0});var p_=l(Ke);p_.forEach(t),Wc=r(y),Ks=o(y,"P",{});var ul=l(Ks);Jc=a(ul,"So, "),oo=o(ul,"STRONG",{});var vy=l(oo);Gc=a(vy,"if conditions changed"),vy.forEach(t),Uc=a(ul,", we destroy the previously created elements, and create a new one:"),ul.forEach(t),Yc=r(y),Qe=o(y,"DIV",{class:!0});var d_=l(Qe);d_.forEach(t),$c=r(y),G=o(y,"P",{});var Ts=l(G);Fc=a(Ts,"However, if the condition does not change, but the content within the if block changes, for example, "),ze=o(Ts,"CODE",{class:!0});var uy=l(ze);Kc=a(uy,"value_a"),uy.forEach(t),Qc=a(Ts,", "),Ze=o(Ts,"CODE",{class:!0});var yy=l(Ze);zc=a(yy,"value_b"),yy.forEach(t),Zc=a(Ts," or "),Xe=o(Ts,"CODE",{class:!0});var fy=l(Xe);Xc=a(fy,"value_else"),fy.forEach(t),si=a(Ts," change in the following code:"),Ts.forEach(t),ei=r(y),sa=o(y,"DIV",{class:!0});var k_=l(sa);k_.forEach(t),ai=r(y),lo=o(y,"P",{});var _y=l(lo);ti=a(_y,"Then we need to know how to update the elements as well:"),_y.forEach(t),ni=r(y),ea=o(y,"DIV",{class:!0});var h_=l(ea);h_.forEach(t),oi=r(y),ks=o(y,"P",{});var Vn=l(ks);li=a(Vn,"Finally to destroy the elements if we want to unmount the whole "),aa=o(Vn,"CODE",{class:!0});var Ey=l(aa);ci=a(Ey,"{#if}"),Ey.forEach(t),ii=a(Vn," block, we can use "),ta=o(Vn,"CODE",{class:!0});var xy=l(ta);ri=a(xy,"previousDestroy"),xy.forEach(t),pi=a(Vn,", since it will be based on the conditions that the elements were created with:"),Vn.forEach(t),di=r(y),na=o(y,"DIV",{class:!0});var v_=l(na);v_.forEach(t),ki=r(y),b=o(y,"P",{});var D=l(b);hi=a(D,"Here we have "),oa=o(D,"CODE",{class:!0});var gy=l(oa);vi=a(gy,"createIfBlock"),gy.forEach(t),ui=a(D,", "),la=o(D,"CODE",{class:!0});var my=l(la);yi=a(my,"updateIfBlock"),my.forEach(t),fi=a(D," and "),ca=o(D,"CODE",{class:!0});var wy=l(ca);_i=a(wy,"destroyIfBlock"),wy.forEach(t),Ei=a(D,". It looks unwieldy, as the "),ia=o(D,"CODE",{class:!0});var by=l(ia);xi=a(by,"if (condition)"),by.forEach(t),gi=a(D," logic is scattered across "),ra=o(D,"CODE",{class:!0});var Cy=l(ra);mi=a(Cy,"createIfBlock"),Cy.forEach(t),wi=a(D,", "),pa=o(D,"CODE",{class:!0});var Oy=l(pa);bi=a(Oy,"getPreviousDestroy"),Oy.forEach(t),Ci=a(D," and "),da=o(D,"CODE",{class:!0});var Dy=l(da);Oi=a(Dy,"updateIfBlock"),Dy.forEach(t),Di=a(D,"."),D.forEach(t),Ii=r(y),co=o(y,"P",{});var Iy=l(co);Ti=a(Iy,"So, let's refactor this. Let's shift code around to make it cleaner. \u2728"),Iy.forEach(t),y.forEach(t),tl=r(k),_=o(k,"SECTION",{});var m=l(_);io=o(m,"H3",{});var Ty=l(io);Qs=o(Ty,"A",{href:!0,id:!0});var Py=l(Qs);Pi=a(Py,"Refactor the code"),Py.forEach(t),Ty.forEach(t),Si=r(m),ro=o(m,"P",{});var Sy=l(ro);Li=a(Sy,"For each of the logic branch, we have functions to create, update and destroy its elements. For the first condition branch, we have:"),Sy.forEach(t),Ai=r(m),hs=o(m,"UL",{});var Rn=l(hs);po=o(Rn,"LI",{});var Ly=l(po);ka=o(Ly,"CODE",{class:!0});var Ay=l(ka);Bi=a(Ay,"createElementsIfConditionA"),Ay.forEach(t),Ly.forEach(t),Hi=r(Rn),ko=o(Rn,"LI",{});var By=l(ko);ha=o(By,"CODE",{class:!0});var Hy=l(ha);ji=a(Hy,"updateElementsIfConditionA"),Hy.forEach(t),By.forEach(t),Mi=r(Rn),ho=o(Rn,"LI",{});var jy=l(ho);va=o(jy,"CODE",{class:!0});var My=l(va);Ni=a(My,"destroyElementsIfConditionA"),My.forEach(t),jy.forEach(t),Rn.forEach(t),qi=r(m),zs=o(m,"P",{});var yl=l(zs);Vi=a(yl,"It seems like we can employ some sort of "),Zs=o(yl,"A",{href:!0,rel:!0});var Ny=l(Zs);Ri=a(Ny,"Strategy Pattern"),Ny.forEach(t),Wi=a(yl," over here."),yl.forEach(t),Ji=r(m),Xs=o(m,"P",{});var fl=l(Xs);Gi=a(fl,"We can group the operations for each condition branch together, where each operation has the same interface, "),ua=o(fl,"CODE",{class:!0});var qy=l(ua);Ui=a(qy,"{ create(){}, update(){}, destroy(){} }"),qy.forEach(t),Yi=a(fl," :"),fl.forEach(t),$i=r(m),ya=o(m,"DIV",{class:!0});var u_=l(ya);u_.forEach(t),Fi=r(m),vo=o(m,"P",{});var Vy=l(vo);Ki=a(Vy,"Now, we choose the operation based on the condition, since they have the same interface, they should be able to be used interchangeably:"),Vy.forEach(t),Qi=r(m),fa=o(m,"DIV",{class:!0});var y_=l(fa);y_.forEach(t),zi=r(m),U=o(m,"P",{});var Ps=l(U);Zi=a(Ps,"Here, we can rewrite our "),_a=o(Ps,"CODE",{class:!0});var Ry=l(_a);Xi=a(Ry,"createIfBlock"),Ry.forEach(t),sr=a(Ps,", "),Ea=o(Ps,"CODE",{class:!0});var Wy=l(Ea);er=a(Wy,"updateIfBlock"),Wy.forEach(t),ar=a(Ps," and "),xa=o(Ps,"CODE",{class:!0});var Jy=l(xa);tr=a(Jy,"destroyIfBlock"),Jy.forEach(t),nr=a(Ps,":"),Ps.forEach(t),or=r(m),ga=o(m,"DIV",{class:!0});var f_=l(ga);f_.forEach(t),lr=r(m),uo=o(m,"P",{});var Gy=l(uo);cr=a(Gy,"To determine whether the condition changed, we can compute the operation and compare it with the previous operation to see if it has changed."),Gy.forEach(t),m.forEach(t),nl=r(k),h=o(k,"SECTION",{});var u=l(h);yo=o(u,"H2",{});var Uy=l(yo);se=o(Uy,"A",{href:!0,id:!0});var Yy=l(se);ir=a(Yy,"The Compiled JS"),Yy.forEach(t),Uy.forEach(t),rr=r(u),ee=o(u,"P",{});var _l=l(ee);pr=a(_l,"Now let's take look at how Svelte compiles "),ma=o(_l,"CODE",{class:!0});var $y=l(ma);dr=a($y,"{#if}"),$y.forEach(t),kr=a(_l," into output JavaScript."),_l.forEach(t),hr=r(u),wa=o(u,"DIV",{class:!0});var __=l(wa);__.forEach(t),vr=r(u),fo=o(u,"P",{});var Fy=l(fo);ae=o(Fy,"A",{href:!0,rel:!0});var Ky=l(ae);ur=a(Ky,"Svelte REPL"),Ky.forEach(t),Fy.forEach(t),yr=r(u),_o=o(u,"P",{});var Qy=l(_o);fr=a(Qy,"The output code:"),Qy.forEach(t),_r=r(u),te=o(u,"DETAILS",{});var El=l(te);Eo=o(El,"SUMMARY",{});var zy=l(Eo);Er=a(zy,"Click to expand..."),zy.forEach(t),xr=r(El),ba=o(El,"DIV",{class:!0});var E_=l(ba);E_.forEach(t),El.forEach(t),gr=r(u),xo=o(u,"P",{});var Zy=l(xo);mr=a(Zy,"Some observations:"),Zy.forEach(t),wr=r(u),go=o(u,"P",{});var Xy=l(go);mo=o(Xy,"STRONG",{});var sf=l(mo);br=a(sf,"Observation 1: If you compare the Svelte's compiled output and the JS code we came out earlier, you may see some resemblance:"),sf.forEach(t),Xy.forEach(t),Cr=r(u),vs=o(u,"UL",{});var Wn=l(vs);ne=o(Wn,"LI",{});var xl=l(ne);A=o(xl,"P",{});var ts=l(A);Or=a(ts,"For each logic branch, we have a "),oe=o(ts,"A",{href:!0});var Nu=l(oe);Ca=o(Nu,"CODE",{class:!0});var ef=l(Ca);Dr=a(ef,"create_fragment"),ef.forEach(t),Ir=a(Nu," function"),Nu.forEach(t),Tr=a(ts,", which in this case is "),Oa=o(ts,"CODE",{class:!0});var af=l(Oa);Pr=a(af,"create_else_block"),af.forEach(t),Sr=a(ts," and "),Da=o(ts,"CODE",{class:!0});var tf=l(Da);Lr=a(tf,"create_if_block"),tf.forEach(t),Ar=a(ts,". As explain in the previous article, these functions return an "),wo=o(ts,"EM",{});var nf=l(wo);Br=a(nf,"instruction manual"),nf.forEach(t),Hr=a(ts," on how to build the DOM fragment for each logic branch."),ts.forEach(t),jr=r(xl),Y=o(xl,"P",{});var Ss=l(Y);Mr=a(Ss,"This is similar to the operations we discussed earlier, eg: "),Ia=o(Ss,"CODE",{class:!0});var of=l(Ia);Nr=a(of,"operationConditionA"),of.forEach(t),qr=a(Ss,", "),Ta=o(Ss,"CODE",{class:!0});var lf=l(Ta);Vr=a(lf,"operationConditionB"),lf.forEach(t),Rr=a(Ss," and "),Pa=o(Ss,"CODE",{class:!0});var cf=l(Pa);Wr=a(cf,"operationConditionElse"),cf.forEach(t),Jr=a(Ss,"."),Ss.forEach(t),xl.forEach(t),Gr=r(Wn),le=o(Wn,"LI",{});var gl=l(le);us=o(gl,"P",{});var Jn=l(us);Ur=a(Jn,"To determine which "),Sa=o(Jn,"CODE",{class:!0});var rf=l(Sa);Yr=a(rf,"create_fragment"),rf.forEach(t),$r=a(Jn," function to use, we have the "),La=o(Jn,"CODE",{class:!0});var pf=l(La);Fr=a(pf,"select_block_type"),pf.forEach(t),Kr=a(Jn," function."),Jn.forEach(t),Qr=r(gl),ce=o(gl,"P",{});var ml=l(ce);zr=a(ml,"This is similar to the "),Aa=o(ml,"CODE",{class:!0});var df=l(Aa);Zr=a(df,"getOperation"),df.forEach(t),Xr=a(ml," we discussed earlier."),ml.forEach(t),gl.forEach(t),sp=r(Wn),bo=o(Wn,"LI",{});var kf=l(bo);Co=o(kf,"P",{});var hf=l(Co);ep=a(hf,"We then initialise the fragment for the current condition branch,"),hf.forEach(t),kf.forEach(t),Wn.forEach(t),ap=r(u),Ba=o(u,"DIV",{class:!0});var x_=l(Ba);x_.forEach(t),tp=r(u),ie=o(u,"UL",{});var wl=l(ie);ys=o(wl,"LI",{});var Gn=l(ys);Oo=o(Gn,"P",{});var vf=l(Oo);np=a(vf,"Now we can:"),vf.forEach(t),op=r(Gn),$=o(Gn,"UL",{});var Ls=l($);Ha=o(Ls,"LI",{});var qu=l(Ha);lp=a(qu,"create "),ja=o(qu,"CODE",{class:!0});var uf=l(ja);cp=a(uf,"if_block.c()"),uf.forEach(t),qu.forEach(t),ip=r(Ls),Ma=o(Ls,"LI",{});var Vu=l(Ma);rp=a(Vu,"mount "),Na=o(Vu,"CODE",{class:!0});var yf=l(Na);pp=a(yf,"if_block.m(target, anchor)"),yf.forEach(t),Vu.forEach(t),dp=r(Ls),qa=o(Ls,"LI",{});var Ru=l(qa);kp=a(Ru,"update "),Va=o(Ru,"CODE",{class:!0});var ff=l(Va);hp=a(ff,"if_block.p(ctx, dirty)"),ff.forEach(t),Ru.forEach(t),vp=r(Ls),Ra=o(Ls,"LI",{});var Wu=l(Ra);up=a(Wu,"destroy "),Wa=o(Wu,"CODE",{class:!0});var _f=l(Wa);yp=a(_f,"if_block.d(detaching)"),_f.forEach(t),Wu.forEach(t),Ls.forEach(t),fp=r(Gn),re=o(Gn,"P",{});var bl=l(re);_p=a(bl,"elements for the "),Ja=o(bl,"CODE",{class:!0});var Ef=l(Ja);Ep=a(Ef,"{#if}"),Ef.forEach(t),xp=a(bl," block."),bl.forEach(t),Gn.forEach(t),gp=r(wl),fs=o(wl,"LI",{});var Un=l(fs);B=o(Un,"P",{});var ns=l(B);mp=a(ns,"In the "),Ga=o(ns,"CODE",{class:!0});var xf=l(Ga);wp=a(xf,"p"),xf.forEach(t),bp=r(ns),Do=o(ns,"STRONG",{});var gf=l(Do);Cp=a(gf,"(u_p_date)"),gf.forEach(t),Op=a(ns," method, we check if the "),Ua=o(ns,"CODE",{class:!0});var mf=l(Ua);Dp=a(mf,"current_block_type"),mf.forEach(t),Ip=a(ns," has changed, if not, then we call "),Ya=o(ns,"CODE",{class:!0});var wf=l(Ya);Tp=a(wf,"if_block.p(ctx, dirty)"),wf.forEach(t),Pp=a(ns," to update as necessary."),ns.forEach(t),Sp=r(Un),H=o(Un,"P",{});var os=l(H);Lp=a(os,"If there's change, then we destroy "),$a=o(os,"CODE",{class:!0});var bf=l($a);Ap=a(bf,"if_block.d(1)"),bf.forEach(t),Bp=a(os," the previous elements, create a new fragment based on the "),Fa=o(os,"CODE",{class:!0});var Cf=l(Fa);Hp=a(Cf,"current_block_type"),Cf.forEach(t),jp=a(os,", then create and mount the elements via "),Ka=o(os,"CODE",{class:!0});var Of=l(Ka);Mp=a(Of,"if_block.c()"),Of.forEach(t),Np=a(os," and "),Qa=o(os,"CODE",{class:!0});var Df=l(Qa);qp=a(Df,"if_block.m(...)"),Df.forEach(t),Vp=a(os,"."),os.forEach(t),Rp=r(Un),F=o(Un,"P",{});var As=l(F);Wp=a(As,"This is similar to how we call "),za=o(As,"CODE",{class:!0});var If=l(za);Jp=a(If,"previousOperation.destroy()"),If.forEach(t),Gp=a(As," and "),Za=o(As,"CODE",{class:!0});var Tf=l(Za);Up=a(Tf,"currentOperation.create()"),Tf.forEach(t),Yp=a(As,"  or "),Xa=o(As,"CODE",{class:!0});var Pf=l(Xa);$p=a(Pf,"currentOperation.update()"),Pf.forEach(t),Fp=a(As,"."),As.forEach(t),Un.forEach(t),wl.forEach(t),Kp=r(u),Io=o(u,"P",{});var Sf=l(Io);Ds=o(Sf,"STRONG",{});var Zo=l(Ds);Qp=a(Zo,"Observation 2: There's a "),st=o(Zo,"CODE",{class:!0});var Lf=l(st);zp=a(Lf,"if_block_anchor"),Lf.forEach(t),Zp=a(Zo," inserted after the "),et=o(Zo,"CODE",{class:!0});var Af=l(et);Xp=a(Af,"if_block"),Af.forEach(t),Zo.forEach(t),Sf.forEach(t),sd=r(u),at=o(u,"DIV",{class:!0});var g_=l(at);g_.forEach(t),ed=r(u),tt=o(u,"P",{});var Ju=l(tt);nt=o(Ju,"CODE",{class:!0});var Bf=l(nt);ad=a(Bf,"empty()"),Bf.forEach(t),td=a(Ju," creates an empty text node."),Ju.forEach(t),nd=r(u),ot=o(u,"DIV",{class:!0});var m_=l(ot);m_.forEach(t),od=r(u),K=o(u,"P",{});var Bs=l(K);ld=a(Bs,"The "),lt=o(Bs,"CODE",{class:!0});var Hf=l(lt);cd=a(Hf,"if_block_anchor"),Hf.forEach(t),id=a(Bs," is then used when mounting the "),ct=o(Bs,"CODE",{class:!0});var jf=l(ct);rd=a(jf,"if_block"),jf.forEach(t),pd=a(Bs," in the "),To=o(Bs,"STRONG",{});var Mf=l(To);dd=a(Mf,"u_p_date"),Mf.forEach(t),kd=a(Bs," method."),Bs.forEach(t),hd=r(u),it=o(u,"DIV",{class:!0});var w_=l(it);w_.forEach(t),vd=r(u),Po=o(u,"P",{});var Nf=l(Po);ud=a(Nf,"So what is this extra empty text node for?"),Nf.forEach(t),u.forEach(t),ol=r(k),p=o(k,"SECTION",{});var d=l(p);So=o(d,"H3",{});var qf=l(So);pe=o(qf,"A",{href:!0,id:!0});var Vf=l(pe);yd=a(Vf,"The extra text node"),Vf.forEach(t),qf.forEach(t),fd=r(d),de=o(d,"P",{});var Cl=l(de);_d=a(Cl,"When we update the "),rt=o(Cl,"CODE",{class:!0});var Rf=l(rt);Ed=a(Rf,"{#if}"),Rf.forEach(t),xd=a(Cl," block and notice that we need to change the fragment block type, we need to destroy the elements created previously, and insert newly created elements."),Cl.forEach(t),gd=r(d),ke=o(d,"P",{});var Ol=l(ke);md=a(Ol,"When we insert the new elements, we need to know where to insert them. The "),he=o(Ol,"A",{href:!0,rel:!0});var Wf=l(he);pt=o(Wf,"CODE",{class:!0});var Jf=l(pt);wd=a(Jf,"insertBefore"),Jf.forEach(t),Wf.forEach(t),bd=a(Ol," API allow us to specify which node the elements should be inserted before. So now it begs the question, which node?"),Ol.forEach(t),Cd=r(d),ve=o(d,"P",{});var Dl=l(ve);Od=a(Dl,"The answer depends on the position "),dt=o(Dl,"CODE",{class:!0});var Gf=l(dt);Dd=a(Gf,"{#if}"),Gf.forEach(t),Id=a(Dl," block is written in the component. There are 4 possible scenarios:"),Dl.forEach(t),Td=r(d),Lo=o(d,"P",{});var Uf=l(Lo);ue=o(Uf,"STRONG",{});var Il=l(ue);Pd=a(Il,"1. There's an element right after the "),kt=o(Il,"CODE",{class:!0});var Yf=l(kt);Sd=a(Yf,"{#if}"),Yf.forEach(t),Ld=a(Il," block"),Il.forEach(t),Uf.forEach(t),Ad=r(d),ht=o(d,"DIV",{class:!0});var b_=l(ht);b_.forEach(t),Bd=r(d),Ao=o(d,"P",{});var $f=l(Ao);ye=o($f,"A",{href:!0,rel:!0});var Ff=l(ye);Hd=a(Ff,"Svelte REPL"),Ff.forEach(t),$f.forEach(t),jd=r(d),Bo=o(d,"P",{});var Kf=l(Bo);Md=a(Kf,"You'll see that"),Kf.forEach(t),Nd=r(d),fe=o(d,"UL",{});var Tl=l(fe);Ho=o(Tl,"LI",{});var Qf=l(Ho);qd=a(Qf,"Svelte does not create the extra text node"),Qf.forEach(t),Vd=r(Tl),_e=o(Tl,"LI",{});var Pl=l(_e);Rd=a(Pl,"Instead, Svelte uses the "),vt=o(Pl,"CODE",{class:!0});var zf=l(vt);Wd=a(zf,"<span />"),zf.forEach(t),Jd=a(Pl," node instead"),Pl.forEach(t),Tl.forEach(t),Gd=r(d),ut=o(d,"DIV",{class:!0});var C_=l(ut);C_.forEach(t),Ud=r(d),jo=o(d,"BLOCKQUOTE",{});var Zf=l(jo);Q=o(Zf,"P",{});var Hs=l(Q);Yd=a(Hs,"When the "),yt=o(Hs,"CODE",{class:!0});var Xf=l(yt);$d=a(Xf,"{#if}"),Xf.forEach(t),Fd=a(Hs," condition changes, "),ft=o(Hs,"CODE",{class:!0});var s1=l(ft);Kd=a(s1,"{#if}"),s1.forEach(t),Qd=a(Hs," block will replace and insert new elements before the "),_t=o(Hs,"CODE",{class:!0});var e1=l(_t);zd=a(e1,"<span />"),e1.forEach(t),Zd=a(Hs," element."),Hs.forEach(t),Zf.forEach(t),Xd=r(d),Mo=o(d,"P",{});var a1=l(Mo);_s=o(a1,"STRONG",{});var Yn=l(_s);sk=a(Yn,"2. "),Et=o(Yn,"CODE",{class:!0});var t1=l(Et);ek=a(t1,"{#if}"),t1.forEach(t),ak=a(Yn," block is the last child, "),xt=o(Yn,"CODE",{class:!0});var n1=l(xt);tk=a(n1,"{#if}"),n1.forEach(t),nk=a(Yn," block has a parent"),Yn.forEach(t),a1.forEach(t),ok=r(d),gt=o(d,"DIV",{class:!0});var O_=l(gt);O_.forEach(t),lk=r(d),No=o(d,"P",{});var o1=l(No);Ee=o(o1,"A",{href:!0,rel:!0});var l1=l(Ee);ck=a(l1,"Svelte REPL"),l1.forEach(t),o1.forEach(t),ik=r(d),qo=o(d,"P",{});var c1=l(qo);rk=a(c1,"You'll see that"),c1.forEach(t),pk=r(d),xe=o(d,"UL",{});var Sl=l(xe);Vo=o(Sl,"LI",{});var i1=l(Vo);dk=a(i1,"Svelte does not create the extra text node"),i1.forEach(t),kk=r(Sl),I=o(Sl,"LI",{});var q=l(I);hk=a(q,"Instead, Svelte inserts the "),mt=o(q,"CODE",{class:!0});var r1=l(mt);vk=a(r1,"{#if}"),r1.forEach(t),uk=a(q," block into the parent node, "),wt=o(q,"CODE",{class:!0});var p1=l(wt);yk=a(p1,"<div />"),p1.forEach(t),fk=a(q," and insert before "),bt=o(q,"CODE",{class:!0});var d1=l(bt);_k=a(d1,"null"),d1.forEach(t),Ek=a(q,". (If you pass "),Ct=o(q,"CODE",{class:!0});var k1=l(Ct);xk=a(k1,"null"),k1.forEach(t),gk=a(q," to "),Ot=o(q,"CODE",{class:!0});var h1=l(Ot);mk=a(h1,"insertBefore"),h1.forEach(t),wk=a(q,", it will append the element as the last child)"),q.forEach(t),Sl.forEach(t),bk=r(d),Dt=o(d,"DIV",{class:!0});var D_=l(Dt);D_.forEach(t),Ck=r(d),Ro=o(d,"BLOCKQUOTE",{});var v1=l(Ro);z=o(v1,"P",{});var js=l(z);Ok=a(js,"When the "),It=o(js,"CODE",{class:!0});var u1=l(It);Dk=a(u1,"{#if}"),u1.forEach(t),Ik=a(js," condition changes, "),Tt=o(js,"CODE",{class:!0});var y1=l(Tt);Tk=a(y1,"{#if}"),y1.forEach(t),Pk=a(js," block will replace and insert new elements as the last children of the parent "),Pt=o(js,"CODE",{class:!0});var f1=l(Pt);Sk=a(f1,"<div />"),f1.forEach(t),Lk=a(js," element."),js.forEach(t),v1.forEach(t),Ak=r(d),Wo=o(d,"P",{});var _1=l(Wo);Es=o(_1,"STRONG",{});var $n=l(Es);Bk=a($n,"3. "),St=o($n,"CODE",{class:!0});var E1=l(St);Hk=a(E1,"{#if}"),E1.forEach(t),jk=a($n," block is the last child, "),Lt=o($n,"CODE",{class:!0});var x1=l(Lt);Mk=a(x1,"{#if}"),x1.forEach(t),Nk=a($n," block does not have a parent"),$n.forEach(t),_1.forEach(t),qk=r(d),At=o(d,"DIV",{class:!0});var I_=l(At);I_.forEach(t),Vk=r(d),Jo=o(d,"P",{});var g1=l(Jo);ge=o(g1,"A",{href:!0,rel:!0});var m1=l(ge);Rk=a(m1,"Svelte REPL"),m1.forEach(t),g1.forEach(t),Wk=r(d),Go=o(d,"P",{});var w1=l(Go);Jk=a(w1,"You'll see that"),w1.forEach(t),Gk=r(d),xs=o(d,"UL",{});var Fn=l(xs);me=o(Fn,"LI",{});var Ll=l(me);Uk=a(Ll,"Svelte creates an extra "),Bt=o(Ll,"CODE",{class:!0});var b1=l(Bt);Yk=a(b1,"anchor"),b1.forEach(t),$k=a(Ll," element"),Ll.forEach(t),Fk=r(Fn),gs=o(Fn,"LI",{});var Kn=l(gs);Kk=a(Kn,"The "),Ht=o(Kn,"CODE",{class:!0});var C1=l(Ht);Qk=a(C1,"anchor"),C1.forEach(t),zk=a(Kn," element is inserted after the "),jt=o(Kn,"CODE",{class:!0});var O1=l(jt);Zk=a(O1,"{#if}"),O1.forEach(t),Xk=a(Kn," block."),Kn.forEach(t),sh=r(Fn),Z=o(Fn,"LI",{});var Ms=l(Z);eh=a(Ms,"Subsequently in the "),Uo=o(Ms,"STRONG",{});var D1=l(Uo);ah=a(D1,"u_p_date"),D1.forEach(t),th=a(Ms," function, Svelte insert "),Mt=o(Ms,"CODE",{class:!0});var I1=l(Mt);nh=a(I1,"{#if}"),I1.forEach(t),oh=a(Ms," block before the "),Nt=o(Ms,"CODE",{class:!0});var T1=l(Nt);lh=a(T1,"anchor"),T1.forEach(t),ch=a(Ms," element."),Ms.forEach(t),Fn.forEach(t),ih=r(d),qt=o(d,"DIV",{class:!0});var T_=l(qt);T_.forEach(t),rh=r(d),Yo=o(d,"BLOCKQUOTE",{});var P1=l(Yo);X=o(P1,"P",{});var Ns=l(X);ph=a(Ns,"When the "),Vt=o(Ns,"CODE",{class:!0});var S1=l(Vt);dh=a(S1,"{#if}"),S1.forEach(t),kh=a(Ns," condition changes, "),Rt=o(Ns,"CODE",{class:!0});var L1=l(Rt);hh=a(L1,"{#if}"),L1.forEach(t),vh=a(Ns," block will replace and insert new elements before the "),Wt=o(Ns,"CODE",{class:!0});var A1=l(Wt);uh=a(A1,"anchor"),A1.forEach(t),yh=a(Ns," element."),Ns.forEach(t),P1.forEach(t),fh=r(d),$o=o(d,"P",{});var B1=l($o);_h=a(B1,"But why?"),B1.forEach(t),Eh=r(d),Fo=o(d,"P",{});var H1=l(Fo);xh=a(H1,"This is because a Svelte component can be used in anywhere."),H1.forEach(t),gh=r(d),Ko=o(d,"P",{});var j1=l(Ko);mh=a(j1,"Let's take a look at the scenario below:"),j1.forEach(t),wh=r(d),Jt=o(d,"DIV",{class:!0});var P_=l(Jt);P_.forEach(t),bh=r(d),ms=o(d,"P",{});var Qn=l(ms);Ch=a(Qn,"In the "),Gt=o(Qn,"CODE",{class:!0});var M1=l(Gt);Oh=a(M1,"A.svelte"),M1.forEach(t),Dh=a(Qn,", the "),Ut=o(Qn,"CODE",{class:!0});var N1=l(Ut);Ih=a(N1,"{#if}"),N1.forEach(t),Th=a(Qn," block is the last child, it does not have any sibling elements after it."),Qn.forEach(t),Ph=r(d),f=o(d,"P",{});var E=l(f);Sh=a(E,"Let's first assume we don't have the "),Yt=o(E,"CODE",{class:!0});var q1=l(Yt);Lh=a(q1,"anchor"),q1.forEach(t),Ah=a(E," element. When the "),$t=o(E,"CODE",{class:!0});var V1=l($t);Bh=a(V1,"condition"),V1.forEach(t),Hh=a(E," changes from "),Ft=o(E,"CODE",{class:!0});var R1=l(Ft);jh=a(R1,"false"),R1.forEach(t),Mh=a(E," to "),Kt=o(E,"CODE",{class:!0});var W1=l(Kt);Nh=a(W1,"true"),W1.forEach(t),qh=a(E,", Svelte will have to insert the new element "),Qt=o(E,"CODE",{class:!0});var J1=l(Qt);Vh=a(J1,'<div id="a">'),J1.forEach(t),Rh=a(E," into its parent. And because there's no next element after "),zt=o(E,"CODE",{class:!0});var G1=l(zt);Wh=a(G1,"{#if}"),G1.forEach(t),Jh=a(E," block, and no "),Zt=o(E,"CODE",{class:!0});var U1=l(Zt);Gh=a(U1,"anchor"),U1.forEach(t),Uh=a(E," element, we will have to insert before "),Xt=o(E,"CODE",{class:!0});var Y1=l(Xt);Yh=a(Y1,"null"),Y1.forEach(t),$h=a(E,". In which, the "),sn=o(E,"CODE",{class:!0});var $1=l(sn);Fh=a($1,'<div id="a" />'),$1.forEach(t),Kh=a(E," will be inserted as the last child of the parent element, "),en=o(E,"CODE",{class:!0});var F1=l(en);Qh=a(F1,'<div id="parent">'),F1.forEach(t),zh=a(E,". And hey, we got ourselves a bug! Elements inside "),an=o(E,"CODE",{class:!0});var K1=l(an);Zh=a(K1,"<A />"),K1.forEach(t),Xh=a(E," appears after "),tn=o(E,"CODE",{class:!0});var Q1=l(tn);sv=a(Q1,"<B />"),Q1.forEach(t),ev=a(E,"!"),E.forEach(t),av=r(d),nn=o(d,"DIV",{class:!0});var S_=l(nn);S_.forEach(t),tv=r(d),we=o(d,"P",{});var Al=l(we);nv=a(Al,"We can prevent this from happening by adding an "),on=o(Al,"CODE",{class:!0});var z1=l(on);ov=a(z1,"anchor"),z1.forEach(t),lv=a(Al," element."),Al.forEach(t),cv=r(d),ws=o(d,"P",{});var zn=l(ws);iv=a(zn,"When the "),ln=o(zn,"CODE",{class:!0});var Z1=l(ln);rv=a(Z1,"condition"),Z1.forEach(t),pv=a(zn," is "),cn=o(zn,"CODE",{class:!0});var X1=l(cn);dv=a(X1,"false"),X1.forEach(t),kv=a(zn,", our DOM looks like this:"),zn.forEach(t),hv=r(d),rn=o(d,"DIV",{class:!0});var L_=l(rn);L_.forEach(t),vv=r(d),j=o(d,"P",{});var ls=l(j);uv=a(ls,"And when the "),pn=o(ls,"CODE",{class:!0});var s2=l(pn);yv=a(s2,"condition"),s2.forEach(t),fv=a(ls," turns "),dn=o(ls,"CODE",{class:!0});var e2=l(dn);_v=a(e2,"true"),e2.forEach(t),Ev=a(ls,", we insert "),kn=o(ls,"CODE",{class:!0});var a2=l(kn);xv=a(a2,'<div id="a" />'),a2.forEach(t),gv=a(ls," before the "),hn=o(ls,"CODE",{class:!0});var t2=l(hn);mv=a(t2,"anchor"),t2.forEach(t),wv=a(ls," element:"),ls.forEach(t),bv=r(d),vn=o(d,"DIV",{class:!0});var A_=l(vn);A_.forEach(t),Cv=r(d),bs=o(d,"P",{});var Zn=l(bs);Ov=a(Zn,"Yay, we maintain the order of "),un=o(Zn,"CODE",{class:!0});var n2=l(un);Dv=a(n2,"<A />"),n2.forEach(t),Iv=a(Zn," and "),yn=o(Zn,"CODE",{class:!0});var o2=l(yn);Tv=a(o2,"<B />"),o2.forEach(t),Pv=a(Zn," \u{1F389} !"),Zn.forEach(t),Sv=r(d),T=o(d,"P",{});var V=l(T);Lv=a(V,"The "),fn=o(V,"CODE",{class:!0});var l2=l(fn);Av=a(l2,"anchor"),l2.forEach(t),Bv=a(V," element to the "),_n=o(V,"CODE",{class:!0});var c2=l(_n);Hv=a(c2,"{#if}"),c2.forEach(t),jv=a(V," block, is like "),be=o(V,"A",{href:!0,rel:!0});var i2=l(be);Mv=a(i2,"an anchor to a ship"),i2.forEach(t),Nv=a(V,', "Here is where '),En=o(V,"CODE",{class:!0});var r2=l(En);qv=a(r2,"{#if}"),r2.forEach(t),Vv=a(V," block should "),xn=o(V,"CODE",{class:!0});var p2=l(xn);Rv=a(p2,"insertBefore()"),p2.forEach(t),Wv=a(V,' !"'),V.forEach(t),Jv=r(d),Qo=o(d,"P",{});var d2=l(Qo);Ce=o(d2,"STRONG",{});var Bl=l(Ce);Gv=a(Bl,"4. "),gn=o(Bl,"CODE",{class:!0});var k2=l(gn);Uv=a(k2,"{#if}"),k2.forEach(t),Yv=a(Bl," block followed by another logic block"),Bl.forEach(t),d2.forEach(t),$v=r(d),Oe=o(d,"P",{});var Hl=l(Oe);Fv=a(Hl,"The final scenario. "),mn=o(Hl,"CODE",{class:!0});var h2=l(mn);Kv=a(h2,"{#if}"),h2.forEach(t),Qv=a(Hl," block followed by another logic block:"),Hl.forEach(t),zv=r(d),wn=o(d,"DIV",{class:!0});var B_=l(wn);B_.forEach(t),Zv=r(d),M=o(d,"P",{});var cs=l(M);Xv=a(cs,"The 2nd "),bn=o(cs,"CODE",{class:!0});var v2=l(bn);su=a(v2,"{#if}"),v2.forEach(t),eu=a(cs," block condition could be "),Cn=o(cs,"CODE",{class:!0});var u2=l(Cn);au=a(u2,"true"),u2.forEach(t),tu=a(cs," or "),On=o(cs,"CODE",{class:!0});var y2=l(On);nu=a(y2,"false"),y2.forEach(t),ou=a(cs,". Which means "),Dn=o(cs,"CODE",{class:!0});var f2=l(Dn);lu=a(f2,'<div id="b" />'),f2.forEach(t),cu=a(cs," could be there or not there."),cs.forEach(t),iu=r(d),P=o(d,"P",{});var R=l(P);ru=a(R,"So, to know where we should insert "),In=o(R,"CODE",{class:!0});var _2=l(In);pu=a(_2,'<div id="a" />'),_2.forEach(t),du=a(R," when chaging the "),Tn=o(R,"CODE",{class:!0});var E2=l(Tn);ku=a(E2,"condition"),E2.forEach(t),hu=a(R,", we need an "),Pn=o(R,"CODE",{class:!0});var x2=l(Pn);vu=a(x2,"anchor"),x2.forEach(t),uu=a(R," element after the 1st "),Sn=o(R,"CODE",{class:!0});var g2=l(Sn);yu=a(g2,"{#if}"),g2.forEach(t),fu=a(R," block, before the 2nd "),Ln=o(R,"CODE",{class:!0});var m2=l(Ln);_u=a(m2,"{#if}"),m2.forEach(t),Eu=a(R," block."),R.forEach(t),d.forEach(t),ll=r(k),N=o(k,"SECTION",{});var qs=l(N);zo=o(qs,"H2",{});var w2=l(zo);De=o(w2,"A",{href:!0,id:!0});var b2=l(De);xu=a(b2,"Closing Note"),b2.forEach(t),w2.forEach(t),gu=r(qs),ss=o(qs,"P",{});var Vs=l(ss);mu=a(Vs,"We've covered how Svelte compiles an "),An=o(Vs,"CODE",{class:!0});var C2=l(An);wu=a(C2,"{#if}"),C2.forEach(t),bu=a(Vs," block, as well as how and why an "),Bn=o(Vs,"CODE",{class:!0});var O2=l(Bn);Cu=a(O2,"anchor"),O2.forEach(t),Ou=a(Vs," element is needed for the "),Hn=o(Vs,"CODE",{class:!0});var D2=l(Hn);Du=a(D2,"{#if}"),D2.forEach(t),Iu=a(Vs," block."),Vs.forEach(t),Tu=r(qs),Ie=o(qs,"P",{});var jl=l(Ie);Pu=a(jl,"If you wish to learn more about Svelte, "),Te=o(jl,"A",{href:!0,rel:!0});var I2=l(Te);Su=a(I2,"follow me on Twitter"),I2.forEach(t),Lu=a(jl,"."),jl.forEach(t),Au=r(qs),Pe=o(qs,"P",{});var Ml=l(Pe);Bu=a(Ml,"I'll post it on Twitter when the next part is ready, the next post will be about "),jn=o(Ml,"CODE",{class:!0});var T2=l(jn);Hu=a(T2,"{#each}"),T2.forEach(t),ju=a(Ml," logic block."),Ml.forEach(t),qs.forEach(t),this.h()},h(){c(es,"href","/compile-svelte-in-your-head-part-3/"),c(Ae,"class","inline"),c(rs,"href","#the-123-if-125-block"),c(rs,"id","the-123-if-125-block"),c(Be,"class","inline"),c(He,"class","code-section"),c(je,"class","inline"),c(Me,"class","inline"),c(Ne,"class","inline"),c(qe,"class","inline"),c(Ve,"class","code-section"),c(Re,"class","inline"),c(Os,"href","https://svelte.dev/tutorial/if-blocks"),c(Os,"rel","nofollow"),c(Gs,"href","#the-vanilla-js"),c(Gs,"id","the-vanilla-js"),c(We,"class","inline"),c(Je,"href","/compile-svelte-in-your-head-part-1/#creating-an-element"),c($s,"href","#implementating-the-if-block"),c($s,"id","implementating-the-if-block"),c(Ge,"class","inline"),c(Ue,"class","code-section"),c(Ye,"class","inline"),c($e,"class","inline"),c(Fe,"class","inline"),c(Ke,"class","code-section"),c(Qe,"class","code-section"),c(ze,"class","inline"),c(Ze,"class","inline"),c(Xe,"class","inline"),c(sa,"class","code-section"),c(ea,"class","code-section"),c(aa,"class","inline"),c(ta,"class","inline"),c(na,"class","code-section"),c(oa,"class","inline"),c(la,"class","inline"),c(ca,"class","inline"),c(ia,"class","inline"),c(ra,"class","inline"),c(pa,"class","inline"),c(da,"class","inline"),c(Qs,"href","#refactor-the-code"),c(Qs,"id","refactor-the-code"),c(ka,"class","inline"),c(ha,"class","inline"),c(va,"class","inline"),c(Zs,"href","https://dev.to/carlillo/design-patterns---strategy-pattern-in-javascript-2hg3"),c(Zs,"rel","nofollow"),c(ua,"class","inline"),c(ya,"class","code-section"),c(fa,"class","code-section"),c(_a,"class","inline"),c(Ea,"class","inline"),c(xa,"class","inline"),c(ga,"class","code-section"),c(se,"href","#the-compiled-js"),c(se,"id","the-compiled-js"),c(ma,"class","inline"),c(wa,"class","code-section"),c(ae,"href","https://svelte.dev/repl/39aec874a5214a35b34ff069ae9fa143"),c(ae,"rel","nofollow"),c(ba,"class","code-section"),c(Ca,"class","inline"),c(oe,"href","/compile-svelte-in-your-head-part-1/#create-fragment"),c(Oa,"class","inline"),c(Da,"class","inline"),c(Ia,"class","inline"),c(Ta,"class","inline"),c(Pa,"class","inline"),c(Sa,"class","inline"),c(La,"class","inline"),c(Aa,"class","inline"),c(Ba,"class","code-section"),c(ja,"class","inline"),c(Na,"class","inline"),c(Va,"class","inline"),c(Wa,"class","inline"),c(Ja,"class","inline"),c(Ga,"class","inline"),c(Ua,"class","inline"),c(Ya,"class","inline"),c($a,"class","inline"),c(Fa,"class","inline"),c(Ka,"class","inline"),c(Qa,"class","inline"),c(za,"class","inline"),c(Za,"class","inline"),c(Xa,"class","inline"),c(st,"class","inline"),c(et,"class","inline"),c(at,"class","code-section"),c(nt,"class","inline"),c(ot,"class","code-section"),c(lt,"class","inline"),c(ct,"class","inline"),c(it,"class","code-section"),c(pe,"href","#the-extra-text-node"),c(pe,"id","the-extra-text-node"),c(rt,"class","inline"),c(pt,"class","inline"),c(he,"href","https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore"),c(he,"rel","nofollow"),c(dt,"class","inline"),c(kt,"class","inline"),c(ht,"class","code-section"),c(ye,"href","https://svelte.dev/repl/5d75daf3190f412f83656fd2e689cb14"),c(ye,"rel","nofollow"),c(vt,"class","inline"),c(ut,"class","code-section"),c(yt,"class","inline"),c(ft,"class","inline"),c(_t,"class","inline"),c(Et,"class","inline"),c(xt,"class","inline"),c(gt,"class","code-section"),c(Ee,"href","https://svelte.dev/repl/5fac48804cfb49639cfda1ab8273cba8"),c(Ee,"rel","nofollow"),c(mt,"class","inline"),c(wt,"class","inline"),c(bt,"class","inline"),c(Ct,"class","inline"),c(Ot,"class","inline"),c(Dt,"class","code-section"),c(It,"class","inline"),c(Tt,"class","inline"),c(Pt,"class","inline"),c(St,"class","inline"),c(Lt,"class","inline"),c(At,"class","code-section"),c(ge,"href","https://svelte.dev/repl/b9b5dae5ab9f4399bf901f802a6885cb"),c(ge,"rel","nofollow"),c(Bt,"class","inline"),c(Ht,"class","inline"),c(jt,"class","inline"),c(Mt,"class","inline"),c(Nt,"class","inline"),c(qt,"class","code-section"),c(Vt,"class","inline"),c(Rt,"class","inline"),c(Wt,"class","inline"),c(Jt,"class","code-section"),c(Gt,"class","inline"),c(Ut,"class","inline"),c(Yt,"class","inline"),c($t,"class","inline"),c(Ft,"class","inline"),c(Kt,"class","inline"),c(Qt,"class","inline"),c(zt,"class","inline"),c(Zt,"class","inline"),c(Xt,"class","inline"),c(sn,"class","inline"),c(en,"class","inline"),c(an,"class","inline"),c(tn,"class","inline"),c(nn,"class","code-section"),c(on,"class","inline"),c(ln,"class","inline"),c(cn,"class","inline"),c(rn,"class","code-section"),c(pn,"class","inline"),c(dn,"class","inline"),c(kn,"class","inline"),c(hn,"class","inline"),c(vn,"class","code-section"),c(un,"class","inline"),c(yn,"class","inline"),c(fn,"class","inline"),c(_n,"class","inline"),c(be,"href","https://www.britannica.com/technology/anchor-nautical-device"),c(be,"rel","nofollow"),c(En,"class","inline"),c(xn,"class","inline"),c(gn,"class","inline"),c(mn,"class","inline"),c(wn,"class","code-section"),c(bn,"class","inline"),c(Cn,"class","inline"),c(On,"class","inline"),c(Dn,"class","inline"),c(In,"class","inline"),c(Tn,"class","inline"),c(Pn,"class","inline"),c(Sn,"class","inline"),c(Ln,"class","inline"),c(De,"href","#closing-note"),c(De,"id","closing-note"),c(An,"class","inline"),c(Bn,"class","inline"),c(Hn,"class","inline"),c(Te,"href","https://twitter.com/lihautan"),c(Te,"rel","nofollow"),c(jn,"class","inline")},m(k,g){C(k,x,g),s(x,S),s(S,is),s(S,es),s(es,w),s(S,W),C(k,Rs,g),C(k,Cs,g),s(Cs,Nl),s(Cs,Xn),s(Xn,ql),s(Cs,Vl),C(k,Xo,g),C(k,Le,g),s(Le,Rl),C(k,sl,g),C(k,O,g),s(O,so),s(so,rs),s(rs,Wl),s(rs,Ae),s(Ae,Jl),s(rs,Gl),s(O,Ul),s(O,Ws),s(Ws,Yl),s(Ws,Be),s(Be,$l),s(Ws,Fl),s(O,Kl),s(O,He),He.innerHTML=A2,s(O,Ql),s(O,ps),s(ps,zl),s(ps,je),s(je,Zl),s(ps,Xl),s(ps,Me),s(Me,sc),s(ps,ec),s(O,ac),s(O,ds),s(ds,tc),s(ds,Ne),s(Ne,nc),s(ds,oc),s(ds,qe),s(qe,lc),s(ds,cc),s(O,ic),s(O,Ve),Ve.innerHTML=B2,s(O,rc),s(O,Js),s(Js,pc),s(Js,Os),s(Os,Re),s(Re,dc),s(Os,kc),s(Js,hc),C(k,el,g),C(k,as,g),s(as,eo),s(eo,Gs),s(Gs,vc),s(as,uc),s(as,Us),s(Us,yc),s(Us,We),s(We,fc),s(Us,_c),s(as,Ec),s(as,Ys),s(Ys,xc),s(Ys,Je),s(Je,gc),s(Ys,mc),C(k,al,g),C(k,v,g),s(v,ao),s(ao,$s),s($s,wc),s(v,bc),s(v,Fs),s(Fs,Cc),s(Fs,Ge),s(Ge,Oc),s(Fs,Dc),s(v,Ic),s(v,Ue),Ue.innerHTML=H2,s(v,Tc),s(v,J),s(J,Pc),s(J,Ye),s(Ye,Sc),s(J,Lc),s(J,$e),s($e,Ac),s(J,Bc),s(J,Fe),s(Fe,Hc),s(J,jc),s(v,Mc),s(v,to),s(to,Nc),s(v,qc),s(v,no),s(no,Vc),s(v,Rc),s(v,Ke),Ke.innerHTML=j2,s(v,Wc),s(v,Ks),s(Ks,Jc),s(Ks,oo),s(oo,Gc),s(Ks,Uc),s(v,Yc),s(v,Qe),Qe.innerHTML=M2,s(v,$c),s(v,G),s(G,Fc),s(G,ze),s(ze,Kc),s(G,Qc),s(G,Ze),s(Ze,zc),s(G,Zc),s(G,Xe),s(Xe,Xc),s(G,si),s(v,ei),s(v,sa),sa.innerHTML=N2,s(v,ai),s(v,lo),s(lo,ti),s(v,ni),s(v,ea),ea.innerHTML=q2,s(v,oi),s(v,ks),s(ks,li),s(ks,aa),s(aa,ci),s(ks,ii),s(ks,ta),s(ta,ri),s(ks,pi),s(v,di),s(v,na),na.innerHTML=V2,s(v,ki),s(v,b),s(b,hi),s(b,oa),s(oa,vi),s(b,ui),s(b,la),s(la,yi),s(b,fi),s(b,ca),s(ca,_i),s(b,Ei),s(b,ia),s(ia,xi),s(b,gi),s(b,ra),s(ra,mi),s(b,wi),s(b,pa),s(pa,bi),s(b,Ci),s(b,da),s(da,Oi),s(b,Di),s(v,Ii),s(v,co),s(co,Ti),C(k,tl,g),C(k,_,g),s(_,io),s(io,Qs),s(Qs,Pi),s(_,Si),s(_,ro),s(ro,Li),s(_,Ai),s(_,hs),s(hs,po),s(po,ka),s(ka,Bi),s(hs,Hi),s(hs,ko),s(ko,ha),s(ha,ji),s(hs,Mi),s(hs,ho),s(ho,va),s(va,Ni),s(_,qi),s(_,zs),s(zs,Vi),s(zs,Zs),s(Zs,Ri),s(zs,Wi),s(_,Ji),s(_,Xs),s(Xs,Gi),s(Xs,ua),s(ua,Ui),s(Xs,Yi),s(_,$i),s(_,ya),ya.innerHTML=R2,s(_,Fi),s(_,vo),s(vo,Ki),s(_,Qi),s(_,fa),fa.innerHTML=W2,s(_,zi),s(_,U),s(U,Zi),s(U,_a),s(_a,Xi),s(U,sr),s(U,Ea),s(Ea,er),s(U,ar),s(U,xa),s(xa,tr),s(U,nr),s(_,or),s(_,ga),ga.innerHTML=J2,s(_,lr),s(_,uo),s(uo,cr),C(k,nl,g),C(k,h,g),s(h,yo),s(yo,se),s(se,ir),s(h,rr),s(h,ee),s(ee,pr),s(ee,ma),s(ma,dr),s(ee,kr),s(h,hr),s(h,wa),wa.innerHTML=G2,s(h,vr),s(h,fo),s(fo,ae),s(ae,ur),s(h,yr),s(h,_o),s(_o,fr),s(h,_r),s(h,te),s(te,Eo),s(Eo,Er),s(te,xr),s(te,ba),ba.innerHTML=U2,s(h,gr),s(h,xo),s(xo,mr),s(h,wr),s(h,go),s(go,mo),s(mo,br),s(h,Cr),s(h,vs),s(vs,ne),s(ne,A),s(A,Or),s(A,oe),s(oe,Ca),s(Ca,Dr),s(oe,Ir),s(A,Tr),s(A,Oa),s(Oa,Pr),s(A,Sr),s(A,Da),s(Da,Lr),s(A,Ar),s(A,wo),s(wo,Br),s(A,Hr),s(ne,jr),s(ne,Y),s(Y,Mr),s(Y,Ia),s(Ia,Nr),s(Y,qr),s(Y,Ta),s(Ta,Vr),s(Y,Rr),s(Y,Pa),s(Pa,Wr),s(Y,Jr),s(vs,Gr),s(vs,le),s(le,us),s(us,Ur),s(us,Sa),s(Sa,Yr),s(us,$r),s(us,La),s(La,Fr),s(us,Kr),s(le,Qr),s(le,ce),s(ce,zr),s(ce,Aa),s(Aa,Zr),s(ce,Xr),s(vs,sp),s(vs,bo),s(bo,Co),s(Co,ep),s(h,ap),s(h,Ba),Ba.innerHTML=Y2,s(h,tp),s(h,ie),s(ie,ys),s(ys,Oo),s(Oo,np),s(ys,op),s(ys,$),s($,Ha),s(Ha,lp),s(Ha,ja),s(ja,cp),s($,ip),s($,Ma),s(Ma,rp),s(Ma,Na),s(Na,pp),s($,dp),s($,qa),s(qa,kp),s(qa,Va),s(Va,hp),s($,vp),s($,Ra),s(Ra,up),s(Ra,Wa),s(Wa,yp),s(ys,fp),s(ys,re),s(re,_p),s(re,Ja),s(Ja,Ep),s(re,xp),s(ie,gp),s(ie,fs),s(fs,B),s(B,mp),s(B,Ga),s(Ga,wp),s(B,bp),s(B,Do),s(Do,Cp),s(B,Op),s(B,Ua),s(Ua,Dp),s(B,Ip),s(B,Ya),s(Ya,Tp),s(B,Pp),s(fs,Sp),s(fs,H),s(H,Lp),s(H,$a),s($a,Ap),s(H,Bp),s(H,Fa),s(Fa,Hp),s(H,jp),s(H,Ka),s(Ka,Mp),s(H,Np),s(H,Qa),s(Qa,qp),s(H,Vp),s(fs,Rp),s(fs,F),s(F,Wp),s(F,za),s(za,Jp),s(F,Gp),s(F,Za),s(Za,Up),s(F,Yp),s(F,Xa),s(Xa,$p),s(F,Fp),s(h,Kp),s(h,Io),s(Io,Ds),s(Ds,Qp),s(Ds,st),s(st,zp),s(Ds,Zp),s(Ds,et),s(et,Xp),s(h,sd),s(h,at),at.innerHTML=$2,s(h,ed),s(h,tt),s(tt,nt),s(nt,ad),s(tt,td),s(h,nd),s(h,ot),ot.innerHTML=F2,s(h,od),s(h,K),s(K,ld),s(K,lt),s(lt,cd),s(K,id),s(K,ct),s(ct,rd),s(K,pd),s(K,To),s(To,dd),s(K,kd),s(h,hd),s(h,it),it.innerHTML=K2,s(h,vd),s(h,Po),s(Po,ud),C(k,ol,g),C(k,p,g),s(p,So),s(So,pe),s(pe,yd),s(p,fd),s(p,de),s(de,_d),s(de,rt),s(rt,Ed),s(de,xd),s(p,gd),s(p,ke),s(ke,md),s(ke,he),s(he,pt),s(pt,wd),s(ke,bd),s(p,Cd),s(p,ve),s(ve,Od),s(ve,dt),s(dt,Dd),s(ve,Id),s(p,Td),s(p,Lo),s(Lo,ue),s(ue,Pd),s(ue,kt),s(kt,Sd),s(ue,Ld),s(p,Ad),s(p,ht),ht.innerHTML=Q2,s(p,Bd),s(p,Ao),s(Ao,ye),s(ye,Hd),s(p,jd),s(p,Bo),s(Bo,Md),s(p,Nd),s(p,fe),s(fe,Ho),s(Ho,qd),s(fe,Vd),s(fe,_e),s(_e,Rd),s(_e,vt),s(vt,Wd),s(_e,Jd),s(p,Gd),s(p,ut),ut.innerHTML=z2,s(p,Ud),s(p,jo),s(jo,Q),s(Q,Yd),s(Q,yt),s(yt,$d),s(Q,Fd),s(Q,ft),s(ft,Kd),s(Q,Qd),s(Q,_t),s(_t,zd),s(Q,Zd),s(p,Xd),s(p,Mo),s(Mo,_s),s(_s,sk),s(_s,Et),s(Et,ek),s(_s,ak),s(_s,xt),s(xt,tk),s(_s,nk),s(p,ok),s(p,gt),gt.innerHTML=Z2,s(p,lk),s(p,No),s(No,Ee),s(Ee,ck),s(p,ik),s(p,qo),s(qo,rk),s(p,pk),s(p,xe),s(xe,Vo),s(Vo,dk),s(xe,kk),s(xe,I),s(I,hk),s(I,mt),s(mt,vk),s(I,uk),s(I,wt),s(wt,yk),s(I,fk),s(I,bt),s(bt,_k),s(I,Ek),s(I,Ct),s(Ct,xk),s(I,gk),s(I,Ot),s(Ot,mk),s(I,wk),s(p,bk),s(p,Dt),Dt.innerHTML=X2,s(p,Ck),s(p,Ro),s(Ro,z),s(z,Ok),s(z,It),s(It,Dk),s(z,Ik),s(z,Tt),s(Tt,Tk),s(z,Pk),s(z,Pt),s(Pt,Sk),s(z,Lk),s(p,Ak),s(p,Wo),s(Wo,Es),s(Es,Bk),s(Es,St),s(St,Hk),s(Es,jk),s(Es,Lt),s(Lt,Mk),s(Es,Nk),s(p,qk),s(p,At),At.innerHTML=s_,s(p,Vk),s(p,Jo),s(Jo,ge),s(ge,Rk),s(p,Wk),s(p,Go),s(Go,Jk),s(p,Gk),s(p,xs),s(xs,me),s(me,Uk),s(me,Bt),s(Bt,Yk),s(me,$k),s(xs,Fk),s(xs,gs),s(gs,Kk),s(gs,Ht),s(Ht,Qk),s(gs,zk),s(gs,jt),s(jt,Zk),s(gs,Xk),s(xs,sh),s(xs,Z),s(Z,eh),s(Z,Uo),s(Uo,ah),s(Z,th),s(Z,Mt),s(Mt,nh),s(Z,oh),s(Z,Nt),s(Nt,lh),s(Z,ch),s(p,ih),s(p,qt),qt.innerHTML=e_,s(p,rh),s(p,Yo),s(Yo,X),s(X,ph),s(X,Vt),s(Vt,dh),s(X,kh),s(X,Rt),s(Rt,hh),s(X,vh),s(X,Wt),s(Wt,uh),s(X,yh),s(p,fh),s(p,$o),s($o,_h),s(p,Eh),s(p,Fo),s(Fo,xh),s(p,gh),s(p,Ko),s(Ko,mh),s(p,wh),s(p,Jt),Jt.innerHTML=a_,s(p,bh),s(p,ms),s(ms,Ch),s(ms,Gt),s(Gt,Oh),s(ms,Dh),s(ms,Ut),s(Ut,Ih),s(ms,Th),s(p,Ph),s(p,f),s(f,Sh),s(f,Yt),s(Yt,Lh),s(f,Ah),s(f,$t),s($t,Bh),s(f,Hh),s(f,Ft),s(Ft,jh),s(f,Mh),s(f,Kt),s(Kt,Nh),s(f,qh),s(f,Qt),s(Qt,Vh),s(f,Rh),s(f,zt),s(zt,Wh),s(f,Jh),s(f,Zt),s(Zt,Gh),s(f,Uh),s(f,Xt),s(Xt,Yh),s(f,$h),s(f,sn),s(sn,Fh),s(f,Kh),s(f,en),s(en,Qh),s(f,zh),s(f,an),s(an,Zh),s(f,Xh),s(f,tn),s(tn,sv),s(f,ev),s(p,av),s(p,nn),nn.innerHTML=t_,s(p,tv),s(p,we),s(we,nv),s(we,on),s(on,ov),s(we,lv),s(p,cv),s(p,ws),s(ws,iv),s(ws,ln),s(ln,rv),s(ws,pv),s(ws,cn),s(cn,dv),s(ws,kv),s(p,hv),s(p,rn),rn.innerHTML=n_,s(p,vv),s(p,j),s(j,uv),s(j,pn),s(pn,yv),s(j,fv),s(j,dn),s(dn,_v),s(j,Ev),s(j,kn),s(kn,xv),s(j,gv),s(j,hn),s(hn,mv),s(j,wv),s(p,bv),s(p,vn),vn.innerHTML=o_,s(p,Cv),s(p,bs),s(bs,Ov),s(bs,un),s(un,Dv),s(bs,Iv),s(bs,yn),s(yn,Tv),s(bs,Pv),s(p,Sv),s(p,T),s(T,Lv),s(T,fn),s(fn,Av),s(T,Bv),s(T,_n),s(_n,Hv),s(T,jv),s(T,be),s(be,Mv),s(T,Nv),s(T,En),s(En,qv),s(T,Vv),s(T,xn),s(xn,Rv),s(T,Wv),s(p,Jv),s(p,Qo),s(Qo,Ce),s(Ce,Gv),s(Ce,gn),s(gn,Uv),s(Ce,Yv),s(p,$v),s(p,Oe),s(Oe,Fv),s(Oe,mn),s(mn,Kv),s(Oe,Qv),s(p,zv),s(p,wn),wn.innerHTML=l_,s(p,Zv),s(p,M),s(M,Xv),s(M,bn),s(bn,su),s(M,eu),s(M,Cn),s(Cn,au),s(M,tu),s(M,On),s(On,nu),s(M,ou),s(M,Dn),s(Dn,lu),s(M,cu),s(p,iu),s(p,P),s(P,ru),s(P,In),s(In,pu),s(P,du),s(P,Tn),s(Tn,ku),s(P,hu),s(P,Pn),s(Pn,vu),s(P,uu),s(P,Sn),s(Sn,yu),s(P,fu),s(P,Ln),s(Ln,_u),s(P,Eu),C(k,ll,g),C(k,N,g),s(N,zo),s(zo,De),s(De,xu),s(N,gu),s(N,ss),s(ss,mu),s(ss,An),s(An,wu),s(ss,bu),s(ss,Bn),s(Bn,Cu),s(ss,Ou),s(ss,Hn),s(Hn,Du),s(ss,Iu),s(N,Tu),s(N,Ie),s(Ie,Pu),s(Ie,Te),s(Te,Su),s(Ie,Lu),s(N,Au),s(N,Pe),s(Pe,Bu),s(Pe,jn),s(jn,Hu),s(Pe,ju)},p:Y_,d(k){k&&t(x),k&&t(Rs),k&&t(Cs),k&&t(Xo),k&&t(Le),k&&t(sl),k&&t(O),k&&t(el),k&&t(as),k&&t(al),k&&t(v),k&&t(tl),k&&t(_),k&&t(nl),k&&t(h),k&&t(ol),k&&t(p),k&&t(ll),k&&t(N)}}}function Q_(Se){let x,S;const is=[Se[0],L2];let es={$$slots:{default:[K_]},$$scope:{ctx:Se}};for(let w=0;w<is.length;w+=1)es=Gu(es,is[w]);return x=new $_({props:es}),{c(){N_(x.$$.fragment)},l(w){q_(x.$$.fragment,w)},m(w,W){V_(x,w,W),S=!0},p(w,[W]){const Rs=W&1?R_(is,[W&1&&P2(w[0]),W&0&&P2(L2)]):{};W&2&&(Rs.$$scope={dirty:W,ctx:w}),x.$set(Rs)},i(w){S||(W_(x.$$.fragment,w),S=!0)},o(w){J_(x.$$.fragment,w),S=!1},d(w){G_(x,w)}}}const L2={title:"Compile Svelte in your head (Part 4)",date:"2020-09-22T08:00:00Z",tags:["Svelte","JavaScript"],series:"Compile Svelte in your head",label:"blog",description:"\u2B05 \u2B05 Previously in Part 3.In this article, we are going to cover our first logic block, the if block.To make sure we are on the same page, let's first explain how if block works.The `&#123;#if&#125;` block...",tableOfContents:[{link:"the-123-if-125-block",title:"The  `&#123;#if&#125;`  block"},{link:"the-vanilla-js",title:"The Vanilla JS",nested:[{link:"implementating-the-if-block",title:"Implementating the if block"},{link:"refactor-the-code",title:"Refactor the code"}]},{link:"the-compiled-js",title:"The Compiled JS",nested:[{link:"the-extra-text-node",title:"The extra text node"}]},{link:"closing-note",title:"Closing Note"}]};function z_(Se,x,S){return U_("blog",{image:F_}),Se.$$set=is=>{S(0,x=Gu(Gu({},x),S2(is)))},x=S2(x),[x]}class tE extends H_{constructor(x){super();j_(this,x,z_,Q_,M_,{})}}export{tE as default,L2 as metadata};
