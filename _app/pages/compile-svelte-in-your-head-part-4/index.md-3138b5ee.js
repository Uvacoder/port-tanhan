import{S as J_,i as G_,s as U_,C as Yu,w as j2,x as M2,y as N2,z as Y_,A as A2,q as q2,o as R2,B as V2,r as F_,R as B2,k as i,e as n,t as e,m as r,c as o,a as l,h as a,d as t,b as c,g as b,F as s,O as K_}from"../../chunks/vendor-6bf294e3.js";import{B as Q_}from"../../chunks/BlogLayout-152f599b.js";import{T as z_}from"../../chunks/TableOfContent-1b9e4572.js";import"../../chunks/stores-e20b7872.js";import"../../chunks/WebMentions-745413ea.js";/* empty css                                */var Z_="/_app/assets/hero-twitter-33a71fdc.jpg";function X_(Pe){let x,$,N,J,w,S,Se,Rl,Xo,Cs,Vl,Xn,Wl,$l,sl,Le,Jl,el,O,so,rs,Gl,Ae,Ul,Yl,Fl,Vs,Kl,Be,Ql,zl,Zl,He,W2='<pre class="prism language-svelte"><code><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> condition<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Conditionally rendered content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></div></code></pre>',Xl,ps,sc,je,ec,ac,Me,tc,nc,oc,ds,lc,Ne,cc,ic,qe,rc,pc,dc,Re,$2='<pre class="prism language-svelte"><code><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> condition_a<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Rendered due to condition_a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">:</span><span class="token keyword">else</span> <span class="token keyword">if</span> condition_b<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Rendered due to condition_b<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">:</span><span class="token keyword">else</span><span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Otherwise<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></div></code></pre>',kc,Ws,hc,Os,Ve,vc,uc,yc,al,ts,eo,$s,fc,_c,Js,Ec,We,xc,gc,mc,Gs,wc,$e,bc,Cc,tl,v,ao,Us,Oc,Dc,Ys,Ic,Je,Tc,Pc,Sc,Ge,J2=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createElementsIfConditionA</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// code to create &#96;&lt;div&gt;Rendered due to condition_a&lt;/div&gt;&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createElementsIfConditionB</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// code to create &#96;&lt;div&gt;Rendered due to condition_b&lt;/div&gt;&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createElementsElse</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// code to create &#96;&lt;div&gt;Otherwise&lt;/div&gt;&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createIfBlock</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (condition_a) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">createElementsIfConditionA</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (condition_b) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">createElementsIfConditionB</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">createElementsElse</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Lc,G,Ac,Ue,Bc,Hc,Ye,jc,Mc,Fe,Nc,qc,Rc,to,Vc,Wc,no,$c,Jc,Ke,G2=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">destroyElementsIfConditionA</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// code to destroy &#96;&lt;div&gt;Rendered due to condition_a&lt;/div&gt;&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">destroyElementsIfConditionB</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// code to destroy &#96;&lt;div&gt;Rendered due to condition_b&lt;/div&gt;&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">destroyElementsElse</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// code to destroy &#96;&lt;div&gt;Otherwise&lt;/div&gt;&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> previousDestroy;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getPreviousDestroy</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (condition_a) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    previousDestroy </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> destroyElementsIfConditionA;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (condition_b) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    previousDestroy </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> destroyElementsIfConditionB;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    previousDestroy </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> destroyElementsElse;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createIfBlock</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">getPreviousDestroy</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Gc,Fs,Uc,oo,Yc,Fc,Kc,Qe,U2=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">updateIfBlock</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// if &#96;condition_a&#96; or &#96;condition_b&#96; changed</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (conditionChanged) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">previousDestroy</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">createIfBlock</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Qc,U,zc,ze,Zc,Xc,Ze,si,ei,Xe,ai,ti,ni,sa,Y2='<pre class="prism language-svelte"><code><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> condition_a<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">&#123;</span> value_a <span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">:</span><span class="token keyword">else</span> <span class="token keyword">if</span> condition_b<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">&#123;</span> value_b <span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">:</span><span class="token keyword">else</span><span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">&#123;</span> value_else <span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></div></code></pre>',oi,lo,li,ci,ea,F2=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">updateElementsIfConditionA</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// code to update &#96;&lt;div&gt;&#123; value_a &#125;&lt;/div&gt;&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">updateElementsIfConditionB</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// code to update &#96;&lt;div&gt;&#123; value_b &#125;&lt;/div&gt;&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">updateElementsElse</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// code to update &#96;&lt;div&gt;&#123; value_else &#125;&lt;/div&gt;&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">updateIfBlock</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// if &#96;condition_a&#96; or &#96;condition_b&#96; changed</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (conditionChanged) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">previousDestroy</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">createIfBlock</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (condition_a) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">updateElementsIfConditionA</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (condition_b) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">updateElementsIfConditionB</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">updateElementsElse</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ii,ks,ri,aa,pi,di,ta,ki,hi,vi,na,K2=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">destroyIfBlock</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">previousDestroy</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ui,C,yi,oa,fi,_i,la,Ei,xi,ca,gi,mi,ia,wi,bi,ra,Ci,Oi,pa,Di,Ii,da,Ti,Pi,Si,co,Li,nl,_,io,Ks,Ai,Bi,ro,Hi,ji,hs,po,ka,Mi,Ni,ko,ha,qi,Ri,ho,va,Vi,Wi,Qs,$i,zs,Ji,Gi,Ui,Zs,Yi,ua,Fi,Ki,Qi,ya,Q2=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">operationConditionA</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  create</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> createElementsIfConditionA</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  update</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> updateElementsIfConditionA</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  destroy</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> destroyElementsIfConditionA</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">operationConditionB</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  create</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> createElementsIfConditionB</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  update</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> updateElementsIfConditionB</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  destroy</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> destroyElementsIfConditionB</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">operationConditionElse</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  create</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> createElementsElse</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  update</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> updateElementsElse</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  destroy</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> destroyElementsElse</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,zi,vo,Zi,Xi,fa,z2=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getOperation</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (condition_a) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> operationConditionA;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (condition_b) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> operationConditionB;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> operationConditionElse;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,sr,Y,er,_a,ar,tr,Ea,nr,or,xa,lr,cr,ir,ga,Z2=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> currentOperation </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getOperation</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createIfBlock</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">currentOperation</span><span style="color: var(--shiki-token-function)">.create</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">updateIfBlock</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">previousOperation</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> currentOperation;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  currentOperation </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getOperation</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// if (conditionChanged)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (currentOperation </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> previousOperation) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">previousOperation</span><span style="color: var(--shiki-token-function)">.destroy</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">currentOperation</span><span style="color: var(--shiki-token-function)">.create</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">currentOperation</span><span style="color: var(--shiki-token-function)">.update</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">destroyIfBlock</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">currentOperation</span><span style="color: var(--shiki-token-function)">.destroy</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,rr,uo,pr,ol,h,yo,Xs,dr,kr,se,hr,ma,vr,ur,yr,wa,X2='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">	<span class="token keyword">let</span> loggedIn <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></div><div class="line"></div><div class="line">	<span class="token keyword">function</span> <span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">		loggedIn <span class="token operator">=</span> <span class="token operator">!</span>loggedIn<span class="token punctuation">;</span></div><div class="line">	<span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> loggedIn<span class="token punctuation">&#125;</span></span></div><div class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>toggle<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div><div class="line">		Log out</div><div class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">:</span><span class="token keyword">else</span><span class="token punctuation">&#125;</span></span></div><div class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>toggle<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div><div class="line">		Log in</div><div class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></div></code></pre>',fr,fo,ee,_r,Er,_o,xr,gr,ae,Eo,mr,wr,ba,s_=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">/* App.svelte generated by Svelte v3.25.1 */</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_else_block</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    p</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> noop</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">(detaching) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// (9:0) &#123;#if loggedIn&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_if_block</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    p</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> noop</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">(detaching) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">select_block_type</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-comment)">/*loggedIn*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]) </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> create_if_block;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> create_else_block;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> current_block_type </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">select_block_type</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> if_block </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">current_block_type</span><span style="color: var(--shiki-color-text)">(ctx);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">if_block</span><span style="color: var(--shiki-token-function)">.c</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      if_block_anchor </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">empty</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">if_block</span><span style="color: var(--shiki-token-function)">.m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> if_block_anchor</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [dirty]) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (current_block_type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> (current_block_type </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">select_block_type</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty)) </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> if_block) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">if_block</span><span style="color: var(--shiki-token-function)">.p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">if_block</span><span style="color: var(--shiki-token-function)">.d</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        if_block </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">current_block_type</span><span style="color: var(--shiki-color-text)">(ctx);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (if_block) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-constant)">if_block</span><span style="color: var(--shiki-token-function)">.c</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-constant)">if_block</span><span style="color: var(--shiki-token-function)">.m</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">if_block_anchor</span><span style="color: var(--shiki-color-text)">.parentNode</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> if_block_anchor);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    i</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> noop</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    o</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> noop</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">(detaching) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">if_block</span><span style="color: var(--shiki-token-function)">.d</span><span style="color: var(--shiki-color-text)">(detaching);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (detaching) </span><span style="color: var(--shiki-token-function)">detach</span><span style="color: var(--shiki-color-text)">(if_block_anchor);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,br,xo,Cr,Or,go,mo,Dr,Ir,vs,te,A,Tr,ne,Ca,Pr,Sr,Lr,Oa,Ar,Br,Da,Hr,jr,wo,Mr,Nr,qr,F,Rr,Ia,Vr,Wr,Ta,$r,Jr,Pa,Gr,Ur,Yr,oe,us,Fr,Sa,Kr,Qr,La,zr,Zr,Xr,le,sp,Aa,ep,ap,tp,bo,Co,np,op,Ba,e_=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> current_block_type </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">select_block_type</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> if_block </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">current_block_type</span><span style="color: var(--shiki-color-text)">(ctx);</span></span></code></pre>`,lp,ce,ys,Oo,cp,ip,K,Ha,rp,ja,pp,dp,Ma,kp,Na,hp,vp,qa,up,Ra,yp,fp,Va,_p,Wa,Ep,xp,ie,gp,$a,mp,wp,bp,fs,B,Cp,Ja,Op,Dp,Do,Ip,Tp,Ga,Pp,Sp,Ua,Lp,Ap,Bp,H,Hp,Ya,jp,Mp,Fa,Np,qp,Ka,Rp,Vp,Qa,Wp,$p,Jp,Q,Gp,za,Up,Yp,Za,Fp,Kp,Xa,Qp,zp,Zp,Io,Ds,Xp,st,sd,ed,et,ad,td,at,a_='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">if_block_anchor </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">empty</span><span style="color: var(--shiki-color-text)">()</span></span></code></pre>',nd,tt,nt,od,ld,cd,ot,t_=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// https://github.com/sveltejs/svelte/blob/v3.25.1/src/runtime/internal/dom.ts#L56-L58</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">empty</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">text</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,id,z,rd,lt,pd,dd,ct,kd,hd,To,vd,ud,yd,it,n_='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">if_block</span><span style="color: var(--shiki-token-function)">.m</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">if_block_anchor</span><span style="color: var(--shiki-color-text)">.parentNode</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> if_block_anchor)</span></span></code></pre>',fd,Po,_d,ll,p,So,re,Ed,xd,pe,gd,rt,md,wd,bd,de,Cd,ke,pt,Od,Dd,Id,he,Td,dt,Pd,Sd,Ld,Lo,ve,Ad,kt,Bd,Hd,jd,ht,o_='<pre class="prism language-svelte"><code><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> condition<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token punctuation">/></span></span></div></code></pre>',Md,Ao,ue,Nd,qd,Bo,Rd,Vd,ye,Ho,Wd,$d,fe,Jd,vt,Gd,Ud,Yd,ut,l_='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">if_block</span><span style="color: var(--shiki-token-function)">.m</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">span</span><span style="color: var(--shiki-color-text)">.parentNode</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> span)</span></span></code></pre>',Fd,jo,Z,Kd,yt,Qd,zd,ft,Zd,Xd,_t,sk,ek,ak,Mo,_s,tk,Et,nk,ok,xt,lk,ck,ik,gt,c_='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span></div><div class="line">  <span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> condition<span class="token punctuation">&#125;</span></span></div><div class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">/></span></span></div><div class="line">  <span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div></code></pre>',rk,No,_e,pk,dk,qo,kk,hk,Ee,Ro,vk,uk,I,yk,mt,fk,_k,wt,Ek,xk,bt,gk,mk,Ct,wk,bk,Ot,Ck,Ok,Dk,Dt,i_='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">if_block</span><span style="color: var(--shiki-token-function)">.m</span><span style="color: var(--shiki-color-text)">(div</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>',Ik,Vo,X,Tk,It,Pk,Sk,Tt,Lk,Ak,Pt,Bk,Hk,jk,Wo,Es,Mk,St,Nk,qk,Lt,Rk,Vk,Wk,At,r_='<pre class="prism language-svelte"><code><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> condition<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></div></code></pre>',$k,$o,xe,Jk,Gk,Jo,Uk,Yk,xs,ge,Fk,Bt,Kk,Qk,zk,gs,Zk,Ht,Xk,sh,jt,eh,ah,th,ss,nh,Go,oh,lh,Mt,ch,ih,Nt,rh,ph,dh,qt,p_='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">if_block</span><span style="color: var(--shiki-token-function)">.m</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">if_block_anchor</span><span style="color: var(--shiki-color-text)">.parentNode</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> if_block_anchor);</span></span></code></pre>',kh,Uo,es,hh,Rt,vh,uh,Vt,yh,fh,Wt,_h,Eh,xh,Yo,gh,mh,Fo,wh,bh,Ko,Ch,Oh,$t,d_=`<pre class="prism language-svelte"><code><div class="line"><span class="token comment">&lt;!-- A.svelte --></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> condition<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- B.svelte --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- App.svelte --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">import</span> <span class="token constant">A</span> <span class="token keyword">from</span> <span class="token string">'./A.svelte'</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">import</span> <span class="token constant">B</span> <span class="token keyword">from</span> <span class="token string">'./B.svelte'</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>A</span> <span class="token punctuation">/></span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>B</span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div></code></pre>`,Dh,ms,Ih,Jt,Th,Ph,Gt,Sh,Lh,Ah,f,Bh,Ut,Hh,jh,Yt,Mh,Nh,Ft,qh,Rh,Kt,Vh,Wh,Qt,$h,Jh,zt,Gh,Uh,Zt,Yh,Fh,Xt,Kh,Qh,sn,zh,Zh,en,Xh,sv,an,ev,av,tn,tv,nv,ov,nn,k_=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;parent&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;b&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;a&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-comment)">&lt;!-- newly inserted element --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,lv,me,cv,on,iv,rv,pv,ws,dv,ln,kv,hv,cn,vv,uv,yv,rn,h_=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;parent&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;#text /&gt; </span><span style="color: var(--shiki-token-comment)">&lt;!-- an empty text node, not visible to the user --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;b&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,fv,j,_v,pn,Ev,xv,dn,gv,mv,kn,wv,bv,hn,Cv,Ov,Dv,vn,v_=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;parent&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;a&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-comment)">&lt;!-- newly inserted element --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;#text /&gt; </span><span style="color: var(--shiki-token-comment)">&lt;!-- an empty text node, not visible to the user --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;b&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,Iv,bs,Tv,un,Pv,Sv,yn,Lv,Av,Bv,T,Hv,fn,jv,Mv,_n,Nv,qv,we,Rv,Vv,En,Wv,$v,xn,Jv,Gv,Uv,Qo,be,Yv,gn,Fv,Kv,Qv,Ce,zv,mn,Zv,Xv,su,wn,u_='<pre class="prism language-svelte"><code><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> condition<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> condition2<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></div></code></pre>',eu,M,au,bn,tu,nu,Cn,ou,lu,On,cu,iu,Dn,ru,pu,du,P,ku,In,hu,vu,Tn,uu,yu,Pn,fu,_u,Sn,Eu,xu,Ln,gu,mu,cl,q,zo,Oe,wu,bu,as,Cu,An,Ou,Du,Bn,Iu,Tu,Hn,Pu,Su,Lu,De,Au,Ie,Bu,Hu,ju,Te,Mu,jn,Nu,qu,il;return x=new z_({props:{data:[{link:"the-if-block",title:"The  `&#123;#if&#125;`  block"},{link:"the-vanilla-js",title:"The Vanilla JS",nested:[{link:"implementating-the-if-block",title:"Implementating the if block"},{link:"refactor-the-code",title:"Refactor the code"}]},{link:"the-compiled-js",title:"The Compiled JS",nested:[{link:"the-extra-text-node",title:"The extra text node"}]},{link:"closing-note",title:"Closing Note"}]}}),{c(){j2(x.$$.fragment),$=i(),N=n("p"),J=n("strong"),w=e("\u2B05 \u2B05 Previously in "),S=n("a"),Se=e("Part 3"),Rl=e("."),Xo=i(),Cs=n("p"),Vl=e("In this article, we are going to cover our first logic block, the "),Xn=n("strong"),Wl=e("if block"),$l=e("."),sl=i(),Le=n("p"),Jl=e("To make sure we are on the same page, let's first explain how if block works."),el=i(),O=n("section"),so=n("h2"),rs=n("a"),Gl=e("The "),Ae=n("code"),Ul=e("{#if}"),Yl=e(" block"),Fl=i(),Vs=n("p"),Kl=e("To render content conditionally, you can wrap it with the "),Be=n("code"),Ql=e("{#if}"),zl=e(" block:"),Zl=i(),He=n("div"),Xl=i(),ps=n("p"),sc=e("If the "),je=n("code"),ec=e("condition"),ac=e(" is truthy, you will see the "),Me=n("code"),tc=e("<div>Conditionally rendered content</div>"),nc=e(", otherwise you will see nothing."),oc=i(),ds=n("p"),lc=e("Like JavaScript, you can use "),Ne=n("code"),cc=e("else"),ic=e(" and "),qe=n("code"),rc=e("else if"),pc=e(" in Svelte to test multiple conditions too:"),dc=i(),Re=n("div"),kc=i(),Ws=n("p"),hc=e("You can visit Svelte's interactive tutorial to learn more about the "),Os=n("a"),Ve=n("code"),vc=e("{#if}"),uc=e(" logic block"),yc=e("."),al=i(),ts=n("section"),eo=n("h2"),$s=n("a"),fc=e("The Vanilla JS"),_c=i(),Js=n("p"),Ec=e("So how do we implement an "),We=n("code"),xc=e("{#if}"),gc=e(" logic without any framework?"),mc=i(),Gs=n("p"),wc=e("As "),$e=n("a"),bc=e("mentioned in the Part 1 of the series"),Cc=e(", we've seen how we can create elements without framework help."),tl=i(),v=n("section"),ao=n("h3"),Us=n("a"),Oc=e("Implementating the if block"),Dc=i(),Ys=n("p"),Ic=e("Implementing an "),Je=n("code"),Tc=e("{#if}"),Pc=e(" logic block can be as follow:"),Sc=i(),Ge=n("div"),Lc=i(),G=n("p"),Ac=e("The "),Ue=n("code"),Bc=e("condition_a"),Hc=e(" and "),Ye=n("code"),jc=e("condition_b"),Mc=e(" could be dynamic, which means if the condition changed, we may need to call "),Fe=n("code"),Nc=e("createIfBlock"),qc=e(" again."),Rc=i(),to=n("p"),Vc=e("But before that, we need to remove the elements that we created previously. This depends on which conditions were met previously, and which elements were created previously."),Wc=i(),no=n("p"),$c=e("So, let's store that information in a variable:"),Jc=i(),Ke=n("div"),Gc=i(),Fs=n("p"),Uc=e("So, "),oo=n("strong"),Yc=e("if conditions changed"),Fc=e(", we destroy the previously created elements, and create a new one:"),Kc=i(),Qe=n("div"),Qc=i(),U=n("p"),zc=e("However, if the condition does not change, but the content within the if block changes, for example, "),ze=n("code"),Zc=e("value_a"),Xc=e(", "),Ze=n("code"),si=e("value_b"),ei=e(" or "),Xe=n("code"),ai=e("value_else"),ti=e(" change in the following code:"),ni=i(),sa=n("div"),oi=i(),lo=n("p"),li=e("Then we need to know how to update the elements as well:"),ci=i(),ea=n("div"),ii=i(),ks=n("p"),ri=e("Finally to destroy the elements if we want to unmount the whole "),aa=n("code"),pi=e("{#if}"),di=e(" block, we can use "),ta=n("code"),ki=e("previousDestroy"),hi=e(", since it will be based on the conditions that the elements were created with:"),vi=i(),na=n("div"),ui=i(),C=n("p"),yi=e("Here we have "),oa=n("code"),fi=e("createIfBlock"),_i=e(", "),la=n("code"),Ei=e("updateIfBlock"),xi=e(" and "),ca=n("code"),gi=e("destroyIfBlock"),mi=e(". It looks unwieldy, as the "),ia=n("code"),wi=e("if (condition)"),bi=e(" logic is scattered across "),ra=n("code"),Ci=e("createIfBlock"),Oi=e(", "),pa=n("code"),Di=e("getPreviousDestroy"),Ii=e(" and "),da=n("code"),Ti=e("updateIfBlock"),Pi=e("."),Si=i(),co=n("p"),Li=e("So, let's refactor this. Let's shift code around to make it cleaner. \u2728"),nl=i(),_=n("section"),io=n("h3"),Ks=n("a"),Ai=e("Refactor the code"),Bi=i(),ro=n("p"),Hi=e("For each of the logic branch, we have functions to create, update and destroy its elements. For the first condition branch, we have:"),ji=i(),hs=n("ul"),po=n("li"),ka=n("code"),Mi=e("createElementsIfConditionA"),Ni=i(),ko=n("li"),ha=n("code"),qi=e("updateElementsIfConditionA"),Ri=i(),ho=n("li"),va=n("code"),Vi=e("destroyElementsIfConditionA"),Wi=i(),Qs=n("p"),$i=e("It seems like we can employ some sort of "),zs=n("a"),Ji=e("Strategy Pattern"),Gi=e(" over here."),Ui=i(),Zs=n("p"),Yi=e("We can group the operations for each condition branch together, where each operation has the same interface, "),ua=n("code"),Fi=e("{ create(){}, update(){}, destroy(){} }"),Ki=e(" :"),Qi=i(),ya=n("div"),zi=i(),vo=n("p"),Zi=e("Now, we choose the operation based on the condition, since they have the same interface, they should be able to be used interchangeably:"),Xi=i(),fa=n("div"),sr=i(),Y=n("p"),er=e("Here, we can rewrite our "),_a=n("code"),ar=e("createIfBlock"),tr=e(", "),Ea=n("code"),nr=e("updateIfBlock"),or=e(" and "),xa=n("code"),lr=e("destroyIfBlock"),cr=e(":"),ir=i(),ga=n("div"),rr=i(),uo=n("p"),pr=e("To determine whether the condition changed, we can compute the operation and compare it with the previous operation to see if it has changed."),ol=i(),h=n("section"),yo=n("h2"),Xs=n("a"),dr=e("The Compiled JS"),kr=i(),se=n("p"),hr=e("Now let's take look at how Svelte compiles "),ma=n("code"),vr=e("{#if}"),ur=e(" into output JavaScript."),yr=i(),wa=n("div"),fr=i(),fo=n("p"),ee=n("a"),_r=e("Svelte REPL"),Er=i(),_o=n("p"),xr=e("The output code:"),gr=i(),ae=n("details"),Eo=n("summary"),mr=e("Click to expand..."),wr=i(),ba=n("div"),br=i(),xo=n("p"),Cr=e("Some observations:"),Or=i(),go=n("p"),mo=n("strong"),Dr=e("Observation 1: If you compare the Svelte's compiled output and the JS code we came out earlier, you may see some resemblance:"),Ir=i(),vs=n("ul"),te=n("li"),A=n("p"),Tr=e("For each logic branch, we have a "),ne=n("a"),Ca=n("code"),Pr=e("create_fragment"),Sr=e(" function"),Lr=e(", which in this case is "),Oa=n("code"),Ar=e("create_else_block"),Br=e(" and "),Da=n("code"),Hr=e("create_if_block"),jr=e(". As explain in the previous article, these functions return an "),wo=n("em"),Mr=e("instruction manual"),Nr=e(" on how to build the DOM fragment for each logic branch."),qr=i(),F=n("p"),Rr=e("This is similar to the operations we discussed earlier, eg: "),Ia=n("code"),Vr=e("operationConditionA"),Wr=e(", "),Ta=n("code"),$r=e("operationConditionB"),Jr=e(" and "),Pa=n("code"),Gr=e("operationConditionElse"),Ur=e("."),Yr=i(),oe=n("li"),us=n("p"),Fr=e("To determine which "),Sa=n("code"),Kr=e("create_fragment"),Qr=e(" function to use, we have the "),La=n("code"),zr=e("select_block_type"),Zr=e(" function."),Xr=i(),le=n("p"),sp=e("This is similar to the "),Aa=n("code"),ep=e("getOperation"),ap=e(" we discussed earlier."),tp=i(),bo=n("li"),Co=n("p"),np=e("We then initialise the fragment for the current condition branch,"),op=i(),Ba=n("div"),lp=i(),ce=n("ul"),ys=n("li"),Oo=n("p"),cp=e("Now we can:"),ip=i(),K=n("ul"),Ha=n("li"),rp=e("create "),ja=n("code"),pp=e("if_block.c()"),dp=i(),Ma=n("li"),kp=e("mount "),Na=n("code"),hp=e("if_block.m(target, anchor)"),vp=i(),qa=n("li"),up=e("update "),Ra=n("code"),yp=e("if_block.p(ctx, dirty)"),fp=i(),Va=n("li"),_p=e("destroy "),Wa=n("code"),Ep=e("if_block.d(detaching)"),xp=i(),ie=n("p"),gp=e("elements for the "),$a=n("code"),mp=e("{#if}"),wp=e(" block."),bp=i(),fs=n("li"),B=n("p"),Cp=e("In the "),Ja=n("code"),Op=e("p"),Dp=i(),Do=n("strong"),Ip=e("(u_p_date)"),Tp=e(" method, we check if the "),Ga=n("code"),Pp=e("current_block_type"),Sp=e(" has changed, if not, then we call "),Ua=n("code"),Lp=e("if_block.p(ctx, dirty)"),Ap=e(" to update as necessary."),Bp=i(),H=n("p"),Hp=e("If there's change, then we destroy "),Ya=n("code"),jp=e("if_block.d(1)"),Mp=e(" the previous elements, create a new fragment based on the "),Fa=n("code"),Np=e("current_block_type"),qp=e(", then create and mount the elements via "),Ka=n("code"),Rp=e("if_block.c()"),Vp=e(" and "),Qa=n("code"),Wp=e("if_block.m(...)"),$p=e("."),Jp=i(),Q=n("p"),Gp=e("This is similar to how we call "),za=n("code"),Up=e("previousOperation.destroy()"),Yp=e(" and "),Za=n("code"),Fp=e("currentOperation.create()"),Kp=e("  or "),Xa=n("code"),Qp=e("currentOperation.update()"),zp=e("."),Zp=i(),Io=n("p"),Ds=n("strong"),Xp=e("Observation 2: There's a "),st=n("code"),sd=e("if_block_anchor"),ed=e(" inserted after the "),et=n("code"),ad=e("if_block"),td=i(),at=n("div"),nd=i(),tt=n("p"),nt=n("code"),od=e("empty()"),ld=e(" creates an empty text node."),cd=i(),ot=n("div"),id=i(),z=n("p"),rd=e("The "),lt=n("code"),pd=e("if_block_anchor"),dd=e(" is then used when mounting the "),ct=n("code"),kd=e("if_block"),hd=e(" in the "),To=n("strong"),vd=e("u_p_date"),ud=e(" method."),yd=i(),it=n("div"),fd=i(),Po=n("p"),_d=e("So what is this extra empty text node for?"),ll=i(),p=n("section"),So=n("h3"),re=n("a"),Ed=e("The extra text node"),xd=i(),pe=n("p"),gd=e("When we update the "),rt=n("code"),md=e("{#if}"),wd=e(" block and notice that we need to change the fragment block type, we need to destroy the elements created previously, and insert newly created elements."),bd=i(),de=n("p"),Cd=e("When we insert the new elements, we need to know where to insert them. The "),ke=n("a"),pt=n("code"),Od=e("insertBefore"),Dd=e(" API allow us to specify which node the elements should be inserted before. So now it begs the question, which node?"),Id=i(),he=n("p"),Td=e("The answer depends on the position "),dt=n("code"),Pd=e("{#if}"),Sd=e(" block is written in the component. There are 4 possible scenarios:"),Ld=i(),Lo=n("p"),ve=n("strong"),Ad=e("1. There's an element right after the "),kt=n("code"),Bd=e("{#if}"),Hd=e(" block"),jd=i(),ht=n("div"),Md=i(),Ao=n("p"),ue=n("a"),Nd=e("Svelte REPL"),qd=i(),Bo=n("p"),Rd=e("You'll see that"),Vd=i(),ye=n("ul"),Ho=n("li"),Wd=e("Svelte does not create the extra text node"),$d=i(),fe=n("li"),Jd=e("Instead, Svelte uses the "),vt=n("code"),Gd=e("<span />"),Ud=e(" node instead"),Yd=i(),ut=n("div"),Fd=i(),jo=n("blockquote"),Z=n("p"),Kd=e("When the "),yt=n("code"),Qd=e("{#if}"),zd=e(" condition changes, "),ft=n("code"),Zd=e("{#if}"),Xd=e(" block will replace and insert new elements before the "),_t=n("code"),sk=e("<span />"),ek=e(" element."),ak=i(),Mo=n("p"),_s=n("strong"),tk=e("2. "),Et=n("code"),nk=e("{#if}"),ok=e(" block is the last child, "),xt=n("code"),lk=e("{#if}"),ck=e(" block has a parent"),ik=i(),gt=n("div"),rk=i(),No=n("p"),_e=n("a"),pk=e("Svelte REPL"),dk=i(),qo=n("p"),kk=e("You'll see that"),hk=i(),Ee=n("ul"),Ro=n("li"),vk=e("Svelte does not create the extra text node"),uk=i(),I=n("li"),yk=e("Instead, Svelte inserts the "),mt=n("code"),fk=e("{#if}"),_k=e(" block into the parent node, "),wt=n("code"),Ek=e("<div />"),xk=e(" and insert before "),bt=n("code"),gk=e("null"),mk=e(". (If you pass "),Ct=n("code"),wk=e("null"),bk=e(" to "),Ot=n("code"),Ck=e("insertBefore"),Ok=e(", it will append the element as the last child)"),Dk=i(),Dt=n("div"),Ik=i(),Vo=n("blockquote"),X=n("p"),Tk=e("When the "),It=n("code"),Pk=e("{#if}"),Sk=e(" condition changes, "),Tt=n("code"),Lk=e("{#if}"),Ak=e(" block will replace and insert new elements as the last children of the parent "),Pt=n("code"),Bk=e("<div />"),Hk=e(" element."),jk=i(),Wo=n("p"),Es=n("strong"),Mk=e("3. "),St=n("code"),Nk=e("{#if}"),qk=e(" block is the last child, "),Lt=n("code"),Rk=e("{#if}"),Vk=e(" block does not have a parent"),Wk=i(),At=n("div"),$k=i(),$o=n("p"),xe=n("a"),Jk=e("Svelte REPL"),Gk=i(),Jo=n("p"),Uk=e("You'll see that"),Yk=i(),xs=n("ul"),ge=n("li"),Fk=e("Svelte creates an extra "),Bt=n("code"),Kk=e("anchor"),Qk=e(" element"),zk=i(),gs=n("li"),Zk=e("The "),Ht=n("code"),Xk=e("anchor"),sh=e(" element is inserted after the "),jt=n("code"),eh=e("{#if}"),ah=e(" block."),th=i(),ss=n("li"),nh=e("Subsequently in the "),Go=n("strong"),oh=e("u_p_date"),lh=e(" function, Svelte insert "),Mt=n("code"),ch=e("{#if}"),ih=e(" block before the "),Nt=n("code"),rh=e("anchor"),ph=e(" element."),dh=i(),qt=n("div"),kh=i(),Uo=n("blockquote"),es=n("p"),hh=e("When the "),Rt=n("code"),vh=e("{#if}"),uh=e(" condition changes, "),Vt=n("code"),yh=e("{#if}"),fh=e(" block will replace and insert new elements before the "),Wt=n("code"),_h=e("anchor"),Eh=e(" element."),xh=i(),Yo=n("p"),gh=e("But why?"),mh=i(),Fo=n("p"),wh=e("This is because a Svelte component can be used in anywhere."),bh=i(),Ko=n("p"),Ch=e("Let's take a look at the scenario below:"),Oh=i(),$t=n("div"),Dh=i(),ms=n("p"),Ih=e("In the "),Jt=n("code"),Th=e("A.svelte"),Ph=e(", the "),Gt=n("code"),Sh=e("{#if}"),Lh=e(" block is the last child, it does not have any sibling elements after it."),Ah=i(),f=n("p"),Bh=e("Let's first assume we don't have the "),Ut=n("code"),Hh=e("anchor"),jh=e(" element. When the "),Yt=n("code"),Mh=e("condition"),Nh=e(" changes from "),Ft=n("code"),qh=e("false"),Rh=e(" to "),Kt=n("code"),Vh=e("true"),Wh=e(", Svelte will have to insert the new element "),Qt=n("code"),$h=e('<div id="a">'),Jh=e(" into its parent. And because there's no next element after "),zt=n("code"),Gh=e("{#if}"),Uh=e(" block, and no "),Zt=n("code"),Yh=e("anchor"),Fh=e(" element, we will have to insert before "),Xt=n("code"),Kh=e("null"),Qh=e(". In which, the "),sn=n("code"),zh=e('<div id="a" />'),Zh=e(" will be inserted as the last child of the parent element, "),en=n("code"),Xh=e('<div id="parent">'),sv=e(". And hey, we got ourselves a bug! Elements inside "),an=n("code"),ev=e("<A />"),av=e(" appears after "),tn=n("code"),tv=e("<B />"),nv=e("!"),ov=i(),nn=n("div"),lv=i(),me=n("p"),cv=e("We can prevent this from happening by adding an "),on=n("code"),iv=e("anchor"),rv=e(" element."),pv=i(),ws=n("p"),dv=e("When the "),ln=n("code"),kv=e("condition"),hv=e(" is "),cn=n("code"),vv=e("false"),uv=e(", our DOM looks like this:"),yv=i(),rn=n("div"),fv=i(),j=n("p"),_v=e("And when the "),pn=n("code"),Ev=e("condition"),xv=e(" turns "),dn=n("code"),gv=e("true"),mv=e(", we insert "),kn=n("code"),wv=e('<div id="a" />'),bv=e(" before the "),hn=n("code"),Cv=e("anchor"),Ov=e(" element:"),Dv=i(),vn=n("div"),Iv=i(),bs=n("p"),Tv=e("Yay, we maintain the order of "),un=n("code"),Pv=e("<A />"),Sv=e(" and "),yn=n("code"),Lv=e("<B />"),Av=e(" \u{1F389} !"),Bv=i(),T=n("p"),Hv=e("The "),fn=n("code"),jv=e("anchor"),Mv=e(" element to the "),_n=n("code"),Nv=e("{#if}"),qv=e(" block, is like "),we=n("a"),Rv=e("an anchor to a ship"),Vv=e(', "Here is where '),En=n("code"),Wv=e("{#if}"),$v=e(" block should "),xn=n("code"),Jv=e("insertBefore()"),Gv=e(' !"'),Uv=i(),Qo=n("p"),be=n("strong"),Yv=e("4. "),gn=n("code"),Fv=e("{#if}"),Kv=e(" block followed by another logic block"),Qv=i(),Ce=n("p"),zv=e("The final scenario. "),mn=n("code"),Zv=e("{#if}"),Xv=e(" block followed by another logic block:"),su=i(),wn=n("div"),eu=i(),M=n("p"),au=e("The 2nd "),bn=n("code"),tu=e("{#if}"),nu=e(" block condition could be "),Cn=n("code"),ou=e("true"),lu=e(" or "),On=n("code"),cu=e("false"),iu=e(". Which means "),Dn=n("code"),ru=e('<div id="b" />'),pu=e(" could be there or not there."),du=i(),P=n("p"),ku=e("So, to know where we should insert "),In=n("code"),hu=e('<div id="a" />'),vu=e(" when chaging the "),Tn=n("code"),uu=e("condition"),yu=e(", we need an "),Pn=n("code"),fu=e("anchor"),_u=e(" element after the 1st "),Sn=n("code"),Eu=e("{#if}"),xu=e(" block, before the 2nd "),Ln=n("code"),gu=e("{#if}"),mu=e(" block."),cl=i(),q=n("section"),zo=n("h2"),Oe=n("a"),wu=e("Closing Note"),bu=i(),as=n("p"),Cu=e("We've covered how Svelte compiles an "),An=n("code"),Ou=e("{#if}"),Du=e(" block, as well as how and why an "),Bn=n("code"),Iu=e("anchor"),Tu=e(" element is needed for the "),Hn=n("code"),Pu=e("{#if}"),Su=e(" block."),Lu=i(),De=n("p"),Au=e("If you wish to learn more about Svelte, "),Ie=n("a"),Bu=e("follow me on Twitter"),Hu=e("."),ju=i(),Te=n("p"),Mu=e("I'll post it on Twitter when the next part is ready, the next post will be about "),jn=n("code"),Nu=e("{#each}"),qu=e(" logic block."),this.h()},l(k){M2(x.$$.fragment,k),$=r(k),N=o(k,"P",{});var g=l(N);J=o(g,"STRONG",{});var rl=l(J);w=a(rl,"\u2B05 \u2B05 Previously in "),S=o(rl,"A",{href:!0});var Fu=l(S);Se=a(Fu,"Part 3"),Fu.forEach(t),Rl=a(rl,"."),rl.forEach(t),g.forEach(t),Xo=r(k),Cs=o(k,"P",{});var pl=l(Cs);Vl=a(pl,"In this article, we are going to cover our first logic block, the "),Xn=o(pl,"STRONG",{});var Ku=l(Xn);Wl=a(Ku,"if block"),Ku.forEach(t),$l=a(pl,"."),pl.forEach(t),sl=r(k),Le=o(k,"P",{});var Qu=l(Le);Jl=a(Qu,"To make sure we are on the same page, let's first explain how if block works."),Qu.forEach(t),el=r(k),O=o(k,"SECTION",{});var L=l(O);so=o(L,"H2",{});var zu=l(so);rs=o(zu,"A",{href:!0,id:!0});var dl=l(rs);Gl=a(dl,"The "),Ae=o(dl,"CODE",{class:!0});var Zu=l(Ae);Ul=a(Zu,"{#if}"),Zu.forEach(t),Yl=a(dl," block"),dl.forEach(t),zu.forEach(t),Fl=r(L),Vs=o(L,"P",{});var kl=l(Vs);Kl=a(kl,"To render content conditionally, you can wrap it with the "),Be=o(kl,"CODE",{class:!0});var Xu=l(Be);Ql=a(Xu,"{#if}"),Xu.forEach(t),zl=a(kl," block:"),kl.forEach(t),Zl=r(L),He=o(L,"DIV",{class:!0});var y_=l(He);y_.forEach(t),Xl=r(L),ps=o(L,"P",{});var Mn=l(ps);sc=a(Mn,"If the "),je=o(Mn,"CODE",{class:!0});var sy=l(je);ec=a(sy,"condition"),sy.forEach(t),ac=a(Mn," is truthy, you will see the "),Me=o(Mn,"CODE",{class:!0});var ey=l(Me);tc=a(ey,"<div>Conditionally rendered content</div>"),ey.forEach(t),nc=a(Mn,", otherwise you will see nothing."),Mn.forEach(t),oc=r(L),ds=o(L,"P",{});var Nn=l(ds);lc=a(Nn,"Like JavaScript, you can use "),Ne=o(Nn,"CODE",{class:!0});var ay=l(Ne);cc=a(ay,"else"),ay.forEach(t),ic=a(Nn," and "),qe=o(Nn,"CODE",{class:!0});var ty=l(qe);rc=a(ty,"else if"),ty.forEach(t),pc=a(Nn," in Svelte to test multiple conditions too:"),Nn.forEach(t),dc=r(L),Re=o(L,"DIV",{class:!0});var f_=l(Re);f_.forEach(t),kc=r(L),Ws=o(L,"P",{});var hl=l(Ws);hc=a(hl,"You can visit Svelte's interactive tutorial to learn more about the "),Os=o(hl,"A",{href:!0,rel:!0});var Ru=l(Os);Ve=o(Ru,"CODE",{class:!0});var ny=l(Ve);vc=a(ny,"{#if}"),ny.forEach(t),uc=a(Ru," logic block"),Ru.forEach(t),yc=a(hl,"."),hl.forEach(t),L.forEach(t),al=r(k),ts=o(k,"SECTION",{});var qn=l(ts);eo=o(qn,"H2",{});var oy=l(eo);$s=o(oy,"A",{href:!0,id:!0});var ly=l($s);fc=a(ly,"The Vanilla JS"),ly.forEach(t),oy.forEach(t),_c=r(qn),Js=o(qn,"P",{});var vl=l(Js);Ec=a(vl,"So how do we implement an "),We=o(vl,"CODE",{class:!0});var cy=l(We);xc=a(cy,"{#if}"),cy.forEach(t),gc=a(vl," logic without any framework?"),vl.forEach(t),mc=r(qn),Gs=o(qn,"P",{});var ul=l(Gs);wc=a(ul,"As "),$e=o(ul,"A",{href:!0});var iy=l($e);bc=a(iy,"mentioned in the Part 1 of the series"),iy.forEach(t),Cc=a(ul,", we've seen how we can create elements without framework help."),ul.forEach(t),qn.forEach(t),tl=r(k),v=o(k,"SECTION",{});var y=l(v);ao=o(y,"H3",{});var ry=l(ao);Us=o(ry,"A",{href:!0,id:!0});var py=l(Us);Oc=a(py,"Implementating the if block"),py.forEach(t),ry.forEach(t),Dc=r(y),Ys=o(y,"P",{});var yl=l(Ys);Ic=a(yl,"Implementing an "),Je=o(yl,"CODE",{class:!0});var dy=l(Je);Tc=a(dy,"{#if}"),dy.forEach(t),Pc=a(yl," logic block can be as follow:"),yl.forEach(t),Sc=r(y),Ge=o(y,"DIV",{class:!0});var __=l(Ge);__.forEach(t),Lc=r(y),G=o(y,"P",{});var Is=l(G);Ac=a(Is,"The "),Ue=o(Is,"CODE",{class:!0});var ky=l(Ue);Bc=a(ky,"condition_a"),ky.forEach(t),Hc=a(Is," and "),Ye=o(Is,"CODE",{class:!0});var hy=l(Ye);jc=a(hy,"condition_b"),hy.forEach(t),Mc=a(Is," could be dynamic, which means if the condition changed, we may need to call "),Fe=o(Is,"CODE",{class:!0});var vy=l(Fe);Nc=a(vy,"createIfBlock"),vy.forEach(t),qc=a(Is," again."),Is.forEach(t),Rc=r(y),to=o(y,"P",{});var uy=l(to);Vc=a(uy,"But before that, we need to remove the elements that we created previously. This depends on which conditions were met previously, and which elements were created previously."),uy.forEach(t),Wc=r(y),no=o(y,"P",{});var yy=l(no);$c=a(yy,"So, let's store that information in a variable:"),yy.forEach(t),Jc=r(y),Ke=o(y,"DIV",{class:!0});var E_=l(Ke);E_.forEach(t),Gc=r(y),Fs=o(y,"P",{});var fl=l(Fs);Uc=a(fl,"So, "),oo=o(fl,"STRONG",{});var fy=l(oo);Yc=a(fy,"if conditions changed"),fy.forEach(t),Fc=a(fl,", we destroy the previously created elements, and create a new one:"),fl.forEach(t),Kc=r(y),Qe=o(y,"DIV",{class:!0});var x_=l(Qe);x_.forEach(t),Qc=r(y),U=o(y,"P",{});var Ts=l(U);zc=a(Ts,"However, if the condition does not change, but the content within the if block changes, for example, "),ze=o(Ts,"CODE",{class:!0});var _y=l(ze);Zc=a(_y,"value_a"),_y.forEach(t),Xc=a(Ts,", "),Ze=o(Ts,"CODE",{class:!0});var Ey=l(Ze);si=a(Ey,"value_b"),Ey.forEach(t),ei=a(Ts," or "),Xe=o(Ts,"CODE",{class:!0});var xy=l(Xe);ai=a(xy,"value_else"),xy.forEach(t),ti=a(Ts," change in the following code:"),Ts.forEach(t),ni=r(y),sa=o(y,"DIV",{class:!0});var g_=l(sa);g_.forEach(t),oi=r(y),lo=o(y,"P",{});var gy=l(lo);li=a(gy,"Then we need to know how to update the elements as well:"),gy.forEach(t),ci=r(y),ea=o(y,"DIV",{class:!0});var m_=l(ea);m_.forEach(t),ii=r(y),ks=o(y,"P",{});var Rn=l(ks);ri=a(Rn,"Finally to destroy the elements if we want to unmount the whole "),aa=o(Rn,"CODE",{class:!0});var my=l(aa);pi=a(my,"{#if}"),my.forEach(t),di=a(Rn," block, we can use "),ta=o(Rn,"CODE",{class:!0});var wy=l(ta);ki=a(wy,"previousDestroy"),wy.forEach(t),hi=a(Rn,", since it will be based on the conditions that the elements were created with:"),Rn.forEach(t),vi=r(y),na=o(y,"DIV",{class:!0});var w_=l(na);w_.forEach(t),ui=r(y),C=o(y,"P",{});var D=l(C);yi=a(D,"Here we have "),oa=o(D,"CODE",{class:!0});var by=l(oa);fi=a(by,"createIfBlock"),by.forEach(t),_i=a(D,", "),la=o(D,"CODE",{class:!0});var Cy=l(la);Ei=a(Cy,"updateIfBlock"),Cy.forEach(t),xi=a(D," and "),ca=o(D,"CODE",{class:!0});var Oy=l(ca);gi=a(Oy,"destroyIfBlock"),Oy.forEach(t),mi=a(D,". It looks unwieldy, as the "),ia=o(D,"CODE",{class:!0});var Dy=l(ia);wi=a(Dy,"if (condition)"),Dy.forEach(t),bi=a(D," logic is scattered across "),ra=o(D,"CODE",{class:!0});var Iy=l(ra);Ci=a(Iy,"createIfBlock"),Iy.forEach(t),Oi=a(D,", "),pa=o(D,"CODE",{class:!0});var Ty=l(pa);Di=a(Ty,"getPreviousDestroy"),Ty.forEach(t),Ii=a(D," and "),da=o(D,"CODE",{class:!0});var Py=l(da);Ti=a(Py,"updateIfBlock"),Py.forEach(t),Pi=a(D,"."),D.forEach(t),Si=r(y),co=o(y,"P",{});var Sy=l(co);Li=a(Sy,"So, let's refactor this. Let's shift code around to make it cleaner. \u2728"),Sy.forEach(t),y.forEach(t),nl=r(k),_=o(k,"SECTION",{});var m=l(_);io=o(m,"H3",{});var Ly=l(io);Ks=o(Ly,"A",{href:!0,id:!0});var Ay=l(Ks);Ai=a(Ay,"Refactor the code"),Ay.forEach(t),Ly.forEach(t),Bi=r(m),ro=o(m,"P",{});var By=l(ro);Hi=a(By,"For each of the logic branch, we have functions to create, update and destroy its elements. For the first condition branch, we have:"),By.forEach(t),ji=r(m),hs=o(m,"UL",{});var Vn=l(hs);po=o(Vn,"LI",{});var Hy=l(po);ka=o(Hy,"CODE",{class:!0});var jy=l(ka);Mi=a(jy,"createElementsIfConditionA"),jy.forEach(t),Hy.forEach(t),Ni=r(Vn),ko=o(Vn,"LI",{});var My=l(ko);ha=o(My,"CODE",{class:!0});var Ny=l(ha);qi=a(Ny,"updateElementsIfConditionA"),Ny.forEach(t),My.forEach(t),Ri=r(Vn),ho=o(Vn,"LI",{});var qy=l(ho);va=o(qy,"CODE",{class:!0});var Ry=l(va);Vi=a(Ry,"destroyElementsIfConditionA"),Ry.forEach(t),qy.forEach(t),Vn.forEach(t),Wi=r(m),Qs=o(m,"P",{});var _l=l(Qs);$i=a(_l,"It seems like we can employ some sort of "),zs=o(_l,"A",{href:!0,rel:!0});var Vy=l(zs);Ji=a(Vy,"Strategy Pattern"),Vy.forEach(t),Gi=a(_l," over here."),_l.forEach(t),Ui=r(m),Zs=o(m,"P",{});var El=l(Zs);Yi=a(El,"We can group the operations for each condition branch together, where each operation has the same interface, "),ua=o(El,"CODE",{class:!0});var Wy=l(ua);Fi=a(Wy,"{ create(){}, update(){}, destroy(){} }"),Wy.forEach(t),Ki=a(El," :"),El.forEach(t),Qi=r(m),ya=o(m,"DIV",{class:!0});var b_=l(ya);b_.forEach(t),zi=r(m),vo=o(m,"P",{});var $y=l(vo);Zi=a($y,"Now, we choose the operation based on the condition, since they have the same interface, they should be able to be used interchangeably:"),$y.forEach(t),Xi=r(m),fa=o(m,"DIV",{class:!0});var C_=l(fa);C_.forEach(t),sr=r(m),Y=o(m,"P",{});var Ps=l(Y);er=a(Ps,"Here, we can rewrite our "),_a=o(Ps,"CODE",{class:!0});var Jy=l(_a);ar=a(Jy,"createIfBlock"),Jy.forEach(t),tr=a(Ps,", "),Ea=o(Ps,"CODE",{class:!0});var Gy=l(Ea);nr=a(Gy,"updateIfBlock"),Gy.forEach(t),or=a(Ps," and "),xa=o(Ps,"CODE",{class:!0});var Uy=l(xa);lr=a(Uy,"destroyIfBlock"),Uy.forEach(t),cr=a(Ps,":"),Ps.forEach(t),ir=r(m),ga=o(m,"DIV",{class:!0});var O_=l(ga);O_.forEach(t),rr=r(m),uo=o(m,"P",{});var Yy=l(uo);pr=a(Yy,"To determine whether the condition changed, we can compute the operation and compare it with the previous operation to see if it has changed."),Yy.forEach(t),m.forEach(t),ol=r(k),h=o(k,"SECTION",{});var u=l(h);yo=o(u,"H2",{});var Fy=l(yo);Xs=o(Fy,"A",{href:!0,id:!0});var Ky=l(Xs);dr=a(Ky,"The Compiled JS"),Ky.forEach(t),Fy.forEach(t),kr=r(u),se=o(u,"P",{});var xl=l(se);hr=a(xl,"Now let's take look at how Svelte compiles "),ma=o(xl,"CODE",{class:!0});var Qy=l(ma);vr=a(Qy,"{#if}"),Qy.forEach(t),ur=a(xl," into output JavaScript."),xl.forEach(t),yr=r(u),wa=o(u,"DIV",{class:!0});var D_=l(wa);D_.forEach(t),fr=r(u),fo=o(u,"P",{});var zy=l(fo);ee=o(zy,"A",{href:!0,rel:!0});var Zy=l(ee);_r=a(Zy,"Svelte REPL"),Zy.forEach(t),zy.forEach(t),Er=r(u),_o=o(u,"P",{});var Xy=l(_o);xr=a(Xy,"The output code:"),Xy.forEach(t),gr=r(u),ae=o(u,"DETAILS",{});var gl=l(ae);Eo=o(gl,"SUMMARY",{});var sf=l(Eo);mr=a(sf,"Click to expand..."),sf.forEach(t),wr=r(gl),ba=o(gl,"DIV",{class:!0});var I_=l(ba);I_.forEach(t),gl.forEach(t),br=r(u),xo=o(u,"P",{});var ef=l(xo);Cr=a(ef,"Some observations:"),ef.forEach(t),Or=r(u),go=o(u,"P",{});var af=l(go);mo=o(af,"STRONG",{});var tf=l(mo);Dr=a(tf,"Observation 1: If you compare the Svelte's compiled output and the JS code we came out earlier, you may see some resemblance:"),tf.forEach(t),af.forEach(t),Ir=r(u),vs=o(u,"UL",{});var Wn=l(vs);te=o(Wn,"LI",{});var ml=l(te);A=o(ml,"P",{});var ns=l(A);Tr=a(ns,"For each logic branch, we have a "),ne=o(ns,"A",{href:!0});var Vu=l(ne);Ca=o(Vu,"CODE",{class:!0});var nf=l(Ca);Pr=a(nf,"create_fragment"),nf.forEach(t),Sr=a(Vu," function"),Vu.forEach(t),Lr=a(ns,", which in this case is "),Oa=o(ns,"CODE",{class:!0});var of=l(Oa);Ar=a(of,"create_else_block"),of.forEach(t),Br=a(ns," and "),Da=o(ns,"CODE",{class:!0});var lf=l(Da);Hr=a(lf,"create_if_block"),lf.forEach(t),jr=a(ns,". As explain in the previous article, these functions return an "),wo=o(ns,"EM",{});var cf=l(wo);Mr=a(cf,"instruction manual"),cf.forEach(t),Nr=a(ns," on how to build the DOM fragment for each logic branch."),ns.forEach(t),qr=r(ml),F=o(ml,"P",{});var Ss=l(F);Rr=a(Ss,"This is similar to the operations we discussed earlier, eg: "),Ia=o(Ss,"CODE",{class:!0});var rf=l(Ia);Vr=a(rf,"operationConditionA"),rf.forEach(t),Wr=a(Ss,", "),Ta=o(Ss,"CODE",{class:!0});var pf=l(Ta);$r=a(pf,"operationConditionB"),pf.forEach(t),Jr=a(Ss," and "),Pa=o(Ss,"CODE",{class:!0});var df=l(Pa);Gr=a(df,"operationConditionElse"),df.forEach(t),Ur=a(Ss,"."),Ss.forEach(t),ml.forEach(t),Yr=r(Wn),oe=o(Wn,"LI",{});var wl=l(oe);us=o(wl,"P",{});var $n=l(us);Fr=a($n,"To determine which "),Sa=o($n,"CODE",{class:!0});var kf=l(Sa);Kr=a(kf,"create_fragment"),kf.forEach(t),Qr=a($n," function to use, we have the "),La=o($n,"CODE",{class:!0});var hf=l(La);zr=a(hf,"select_block_type"),hf.forEach(t),Zr=a($n," function."),$n.forEach(t),Xr=r(wl),le=o(wl,"P",{});var bl=l(le);sp=a(bl,"This is similar to the "),Aa=o(bl,"CODE",{class:!0});var vf=l(Aa);ep=a(vf,"getOperation"),vf.forEach(t),ap=a(bl," we discussed earlier."),bl.forEach(t),wl.forEach(t),tp=r(Wn),bo=o(Wn,"LI",{});var uf=l(bo);Co=o(uf,"P",{});var yf=l(Co);np=a(yf,"We then initialise the fragment for the current condition branch,"),yf.forEach(t),uf.forEach(t),Wn.forEach(t),op=r(u),Ba=o(u,"DIV",{class:!0});var T_=l(Ba);T_.forEach(t),lp=r(u),ce=o(u,"UL",{});var Cl=l(ce);ys=o(Cl,"LI",{});var Jn=l(ys);Oo=o(Jn,"P",{});var ff=l(Oo);cp=a(ff,"Now we can:"),ff.forEach(t),ip=r(Jn),K=o(Jn,"UL",{});var Ls=l(K);Ha=o(Ls,"LI",{});var Wu=l(Ha);rp=a(Wu,"create "),ja=o(Wu,"CODE",{class:!0});var _f=l(ja);pp=a(_f,"if_block.c()"),_f.forEach(t),Wu.forEach(t),dp=r(Ls),Ma=o(Ls,"LI",{});var $u=l(Ma);kp=a($u,"mount "),Na=o($u,"CODE",{class:!0});var Ef=l(Na);hp=a(Ef,"if_block.m(target, anchor)"),Ef.forEach(t),$u.forEach(t),vp=r(Ls),qa=o(Ls,"LI",{});var Ju=l(qa);up=a(Ju,"update "),Ra=o(Ju,"CODE",{class:!0});var xf=l(Ra);yp=a(xf,"if_block.p(ctx, dirty)"),xf.forEach(t),Ju.forEach(t),fp=r(Ls),Va=o(Ls,"LI",{});var Gu=l(Va);_p=a(Gu,"destroy "),Wa=o(Gu,"CODE",{class:!0});var gf=l(Wa);Ep=a(gf,"if_block.d(detaching)"),gf.forEach(t),Gu.forEach(t),Ls.forEach(t),xp=r(Jn),ie=o(Jn,"P",{});var Ol=l(ie);gp=a(Ol,"elements for the "),$a=o(Ol,"CODE",{class:!0});var mf=l($a);mp=a(mf,"{#if}"),mf.forEach(t),wp=a(Ol," block."),Ol.forEach(t),Jn.forEach(t),bp=r(Cl),fs=o(Cl,"LI",{});var Gn=l(fs);B=o(Gn,"P",{});var os=l(B);Cp=a(os,"In the "),Ja=o(os,"CODE",{class:!0});var wf=l(Ja);Op=a(wf,"p"),wf.forEach(t),Dp=r(os),Do=o(os,"STRONG",{});var bf=l(Do);Ip=a(bf,"(u_p_date)"),bf.forEach(t),Tp=a(os," method, we check if the "),Ga=o(os,"CODE",{class:!0});var Cf=l(Ga);Pp=a(Cf,"current_block_type"),Cf.forEach(t),Sp=a(os," has changed, if not, then we call "),Ua=o(os,"CODE",{class:!0});var Of=l(Ua);Lp=a(Of,"if_block.p(ctx, dirty)"),Of.forEach(t),Ap=a(os," to update as necessary."),os.forEach(t),Bp=r(Gn),H=o(Gn,"P",{});var ls=l(H);Hp=a(ls,"If there's change, then we destroy "),Ya=o(ls,"CODE",{class:!0});var Df=l(Ya);jp=a(Df,"if_block.d(1)"),Df.forEach(t),Mp=a(ls," the previous elements, create a new fragment based on the "),Fa=o(ls,"CODE",{class:!0});var If=l(Fa);Np=a(If,"current_block_type"),If.forEach(t),qp=a(ls,", then create and mount the elements via "),Ka=o(ls,"CODE",{class:!0});var Tf=l(Ka);Rp=a(Tf,"if_block.c()"),Tf.forEach(t),Vp=a(ls," and "),Qa=o(ls,"CODE",{class:!0});var Pf=l(Qa);Wp=a(Pf,"if_block.m(...)"),Pf.forEach(t),$p=a(ls,"."),ls.forEach(t),Jp=r(Gn),Q=o(Gn,"P",{});var As=l(Q);Gp=a(As,"This is similar to how we call "),za=o(As,"CODE",{class:!0});var Sf=l(za);Up=a(Sf,"previousOperation.destroy()"),Sf.forEach(t),Yp=a(As," and "),Za=o(As,"CODE",{class:!0});var Lf=l(Za);Fp=a(Lf,"currentOperation.create()"),Lf.forEach(t),Kp=a(As,"  or "),Xa=o(As,"CODE",{class:!0});var Af=l(Xa);Qp=a(Af,"currentOperation.update()"),Af.forEach(t),zp=a(As,"."),As.forEach(t),Gn.forEach(t),Cl.forEach(t),Zp=r(u),Io=o(u,"P",{});var Bf=l(Io);Ds=o(Bf,"STRONG",{});var Zo=l(Ds);Xp=a(Zo,"Observation 2: There's a "),st=o(Zo,"CODE",{class:!0});var Hf=l(st);sd=a(Hf,"if_block_anchor"),Hf.forEach(t),ed=a(Zo," inserted after the "),et=o(Zo,"CODE",{class:!0});var jf=l(et);ad=a(jf,"if_block"),jf.forEach(t),Zo.forEach(t),Bf.forEach(t),td=r(u),at=o(u,"DIV",{class:!0});var P_=l(at);P_.forEach(t),nd=r(u),tt=o(u,"P",{});var Uu=l(tt);nt=o(Uu,"CODE",{class:!0});var Mf=l(nt);od=a(Mf,"empty()"),Mf.forEach(t),ld=a(Uu," creates an empty text node."),Uu.forEach(t),cd=r(u),ot=o(u,"DIV",{class:!0});var S_=l(ot);S_.forEach(t),id=r(u),z=o(u,"P",{});var Bs=l(z);rd=a(Bs,"The "),lt=o(Bs,"CODE",{class:!0});var Nf=l(lt);pd=a(Nf,"if_block_anchor"),Nf.forEach(t),dd=a(Bs," is then used when mounting the "),ct=o(Bs,"CODE",{class:!0});var qf=l(ct);kd=a(qf,"if_block"),qf.forEach(t),hd=a(Bs," in the "),To=o(Bs,"STRONG",{});var Rf=l(To);vd=a(Rf,"u_p_date"),Rf.forEach(t),ud=a(Bs," method."),Bs.forEach(t),yd=r(u),it=o(u,"DIV",{class:!0});var L_=l(it);L_.forEach(t),fd=r(u),Po=o(u,"P",{});var Vf=l(Po);_d=a(Vf,"So what is this extra empty text node for?"),Vf.forEach(t),u.forEach(t),ll=r(k),p=o(k,"SECTION",{});var d=l(p);So=o(d,"H3",{});var Wf=l(So);re=o(Wf,"A",{href:!0,id:!0});var $f=l(re);Ed=a($f,"The extra text node"),$f.forEach(t),Wf.forEach(t),xd=r(d),pe=o(d,"P",{});var Dl=l(pe);gd=a(Dl,"When we update the "),rt=o(Dl,"CODE",{class:!0});var Jf=l(rt);md=a(Jf,"{#if}"),Jf.forEach(t),wd=a(Dl," block and notice that we need to change the fragment block type, we need to destroy the elements created previously, and insert newly created elements."),Dl.forEach(t),bd=r(d),de=o(d,"P",{});var Il=l(de);Cd=a(Il,"When we insert the new elements, we need to know where to insert them. The "),ke=o(Il,"A",{href:!0,rel:!0});var Gf=l(ke);pt=o(Gf,"CODE",{class:!0});var Uf=l(pt);Od=a(Uf,"insertBefore"),Uf.forEach(t),Gf.forEach(t),Dd=a(Il," API allow us to specify which node the elements should be inserted before. So now it begs the question, which node?"),Il.forEach(t),Id=r(d),he=o(d,"P",{});var Tl=l(he);Td=a(Tl,"The answer depends on the position "),dt=o(Tl,"CODE",{class:!0});var Yf=l(dt);Pd=a(Yf,"{#if}"),Yf.forEach(t),Sd=a(Tl," block is written in the component. There are 4 possible scenarios:"),Tl.forEach(t),Ld=r(d),Lo=o(d,"P",{});var Ff=l(Lo);ve=o(Ff,"STRONG",{});var Pl=l(ve);Ad=a(Pl,"1. There's an element right after the "),kt=o(Pl,"CODE",{class:!0});var Kf=l(kt);Bd=a(Kf,"{#if}"),Kf.forEach(t),Hd=a(Pl," block"),Pl.forEach(t),Ff.forEach(t),jd=r(d),ht=o(d,"DIV",{class:!0});var A_=l(ht);A_.forEach(t),Md=r(d),Ao=o(d,"P",{});var Qf=l(Ao);ue=o(Qf,"A",{href:!0,rel:!0});var zf=l(ue);Nd=a(zf,"Svelte REPL"),zf.forEach(t),Qf.forEach(t),qd=r(d),Bo=o(d,"P",{});var Zf=l(Bo);Rd=a(Zf,"You'll see that"),Zf.forEach(t),Vd=r(d),ye=o(d,"UL",{});var Sl=l(ye);Ho=o(Sl,"LI",{});var Xf=l(Ho);Wd=a(Xf,"Svelte does not create the extra text node"),Xf.forEach(t),$d=r(Sl),fe=o(Sl,"LI",{});var Ll=l(fe);Jd=a(Ll,"Instead, Svelte uses the "),vt=o(Ll,"CODE",{class:!0});var s1=l(vt);Gd=a(s1,"<span />"),s1.forEach(t),Ud=a(Ll," node instead"),Ll.forEach(t),Sl.forEach(t),Yd=r(d),ut=o(d,"DIV",{class:!0});var B_=l(ut);B_.forEach(t),Fd=r(d),jo=o(d,"BLOCKQUOTE",{});var e1=l(jo);Z=o(e1,"P",{});var Hs=l(Z);Kd=a(Hs,"When the "),yt=o(Hs,"CODE",{class:!0});var a1=l(yt);Qd=a(a1,"{#if}"),a1.forEach(t),zd=a(Hs," condition changes, "),ft=o(Hs,"CODE",{class:!0});var t1=l(ft);Zd=a(t1,"{#if}"),t1.forEach(t),Xd=a(Hs," block will replace and insert new elements before the "),_t=o(Hs,"CODE",{class:!0});var n1=l(_t);sk=a(n1,"<span />"),n1.forEach(t),ek=a(Hs," element."),Hs.forEach(t),e1.forEach(t),ak=r(d),Mo=o(d,"P",{});var o1=l(Mo);_s=o(o1,"STRONG",{});var Un=l(_s);tk=a(Un,"2. "),Et=o(Un,"CODE",{class:!0});var l1=l(Et);nk=a(l1,"{#if}"),l1.forEach(t),ok=a(Un," block is the last child, "),xt=o(Un,"CODE",{class:!0});var c1=l(xt);lk=a(c1,"{#if}"),c1.forEach(t),ck=a(Un," block has a parent"),Un.forEach(t),o1.forEach(t),ik=r(d),gt=o(d,"DIV",{class:!0});var H_=l(gt);H_.forEach(t),rk=r(d),No=o(d,"P",{});var i1=l(No);_e=o(i1,"A",{href:!0,rel:!0});var r1=l(_e);pk=a(r1,"Svelte REPL"),r1.forEach(t),i1.forEach(t),dk=r(d),qo=o(d,"P",{});var p1=l(qo);kk=a(p1,"You'll see that"),p1.forEach(t),hk=r(d),Ee=o(d,"UL",{});var Al=l(Ee);Ro=o(Al,"LI",{});var d1=l(Ro);vk=a(d1,"Svelte does not create the extra text node"),d1.forEach(t),uk=r(Al),I=o(Al,"LI",{});var R=l(I);yk=a(R,"Instead, Svelte inserts the "),mt=o(R,"CODE",{class:!0});var k1=l(mt);fk=a(k1,"{#if}"),k1.forEach(t),_k=a(R," block into the parent node, "),wt=o(R,"CODE",{class:!0});var h1=l(wt);Ek=a(h1,"<div />"),h1.forEach(t),xk=a(R," and insert before "),bt=o(R,"CODE",{class:!0});var v1=l(bt);gk=a(v1,"null"),v1.forEach(t),mk=a(R,". (If you pass "),Ct=o(R,"CODE",{class:!0});var u1=l(Ct);wk=a(u1,"null"),u1.forEach(t),bk=a(R," to "),Ot=o(R,"CODE",{class:!0});var y1=l(Ot);Ck=a(y1,"insertBefore"),y1.forEach(t),Ok=a(R,", it will append the element as the last child)"),R.forEach(t),Al.forEach(t),Dk=r(d),Dt=o(d,"DIV",{class:!0});var j_=l(Dt);j_.forEach(t),Ik=r(d),Vo=o(d,"BLOCKQUOTE",{});var f1=l(Vo);X=o(f1,"P",{});var js=l(X);Tk=a(js,"When the "),It=o(js,"CODE",{class:!0});var _1=l(It);Pk=a(_1,"{#if}"),_1.forEach(t),Sk=a(js," condition changes, "),Tt=o(js,"CODE",{class:!0});var E1=l(Tt);Lk=a(E1,"{#if}"),E1.forEach(t),Ak=a(js," block will replace and insert new elements as the last children of the parent "),Pt=o(js,"CODE",{class:!0});var x1=l(Pt);Bk=a(x1,"<div />"),x1.forEach(t),Hk=a(js," element."),js.forEach(t),f1.forEach(t),jk=r(d),Wo=o(d,"P",{});var g1=l(Wo);Es=o(g1,"STRONG",{});var Yn=l(Es);Mk=a(Yn,"3. "),St=o(Yn,"CODE",{class:!0});var m1=l(St);Nk=a(m1,"{#if}"),m1.forEach(t),qk=a(Yn," block is the last child, "),Lt=o(Yn,"CODE",{class:!0});var w1=l(Lt);Rk=a(w1,"{#if}"),w1.forEach(t),Vk=a(Yn," block does not have a parent"),Yn.forEach(t),g1.forEach(t),Wk=r(d),At=o(d,"DIV",{class:!0});var M_=l(At);M_.forEach(t),$k=r(d),$o=o(d,"P",{});var b1=l($o);xe=o(b1,"A",{href:!0,rel:!0});var C1=l(xe);Jk=a(C1,"Svelte REPL"),C1.forEach(t),b1.forEach(t),Gk=r(d),Jo=o(d,"P",{});var O1=l(Jo);Uk=a(O1,"You'll see that"),O1.forEach(t),Yk=r(d),xs=o(d,"UL",{});var Fn=l(xs);ge=o(Fn,"LI",{});var Bl=l(ge);Fk=a(Bl,"Svelte creates an extra "),Bt=o(Bl,"CODE",{class:!0});var D1=l(Bt);Kk=a(D1,"anchor"),D1.forEach(t),Qk=a(Bl," element"),Bl.forEach(t),zk=r(Fn),gs=o(Fn,"LI",{});var Kn=l(gs);Zk=a(Kn,"The "),Ht=o(Kn,"CODE",{class:!0});var I1=l(Ht);Xk=a(I1,"anchor"),I1.forEach(t),sh=a(Kn," element is inserted after the "),jt=o(Kn,"CODE",{class:!0});var T1=l(jt);eh=a(T1,"{#if}"),T1.forEach(t),ah=a(Kn," block."),Kn.forEach(t),th=r(Fn),ss=o(Fn,"LI",{});var Ms=l(ss);nh=a(Ms,"Subsequently in the "),Go=o(Ms,"STRONG",{});var P1=l(Go);oh=a(P1,"u_p_date"),P1.forEach(t),lh=a(Ms," function, Svelte insert "),Mt=o(Ms,"CODE",{class:!0});var S1=l(Mt);ch=a(S1,"{#if}"),S1.forEach(t),ih=a(Ms," block before the "),Nt=o(Ms,"CODE",{class:!0});var L1=l(Nt);rh=a(L1,"anchor"),L1.forEach(t),ph=a(Ms," element."),Ms.forEach(t),Fn.forEach(t),dh=r(d),qt=o(d,"DIV",{class:!0});var N_=l(qt);N_.forEach(t),kh=r(d),Uo=o(d,"BLOCKQUOTE",{});var A1=l(Uo);es=o(A1,"P",{});var Ns=l(es);hh=a(Ns,"When the "),Rt=o(Ns,"CODE",{class:!0});var B1=l(Rt);vh=a(B1,"{#if}"),B1.forEach(t),uh=a(Ns," condition changes, "),Vt=o(Ns,"CODE",{class:!0});var H1=l(Vt);yh=a(H1,"{#if}"),H1.forEach(t),fh=a(Ns," block will replace and insert new elements before the "),Wt=o(Ns,"CODE",{class:!0});var j1=l(Wt);_h=a(j1,"anchor"),j1.forEach(t),Eh=a(Ns," element."),Ns.forEach(t),A1.forEach(t),xh=r(d),Yo=o(d,"P",{});var M1=l(Yo);gh=a(M1,"But why?"),M1.forEach(t),mh=r(d),Fo=o(d,"P",{});var N1=l(Fo);wh=a(N1,"This is because a Svelte component can be used in anywhere."),N1.forEach(t),bh=r(d),Ko=o(d,"P",{});var q1=l(Ko);Ch=a(q1,"Let's take a look at the scenario below:"),q1.forEach(t),Oh=r(d),$t=o(d,"DIV",{class:!0});var q_=l($t);q_.forEach(t),Dh=r(d),ms=o(d,"P",{});var Qn=l(ms);Ih=a(Qn,"In the "),Jt=o(Qn,"CODE",{class:!0});var R1=l(Jt);Th=a(R1,"A.svelte"),R1.forEach(t),Ph=a(Qn,", the "),Gt=o(Qn,"CODE",{class:!0});var V1=l(Gt);Sh=a(V1,"{#if}"),V1.forEach(t),Lh=a(Qn," block is the last child, it does not have any sibling elements after it."),Qn.forEach(t),Ah=r(d),f=o(d,"P",{});var E=l(f);Bh=a(E,"Let's first assume we don't have the "),Ut=o(E,"CODE",{class:!0});var W1=l(Ut);Hh=a(W1,"anchor"),W1.forEach(t),jh=a(E," element. When the "),Yt=o(E,"CODE",{class:!0});var $1=l(Yt);Mh=a($1,"condition"),$1.forEach(t),Nh=a(E," changes from "),Ft=o(E,"CODE",{class:!0});var J1=l(Ft);qh=a(J1,"false"),J1.forEach(t),Rh=a(E," to "),Kt=o(E,"CODE",{class:!0});var G1=l(Kt);Vh=a(G1,"true"),G1.forEach(t),Wh=a(E,", Svelte will have to insert the new element "),Qt=o(E,"CODE",{class:!0});var U1=l(Qt);$h=a(U1,'<div id="a">'),U1.forEach(t),Jh=a(E," into its parent. And because there's no next element after "),zt=o(E,"CODE",{class:!0});var Y1=l(zt);Gh=a(Y1,"{#if}"),Y1.forEach(t),Uh=a(E," block, and no "),Zt=o(E,"CODE",{class:!0});var F1=l(Zt);Yh=a(F1,"anchor"),F1.forEach(t),Fh=a(E," element, we will have to insert before "),Xt=o(E,"CODE",{class:!0});var K1=l(Xt);Kh=a(K1,"null"),K1.forEach(t),Qh=a(E,". In which, the "),sn=o(E,"CODE",{class:!0});var Q1=l(sn);zh=a(Q1,'<div id="a" />'),Q1.forEach(t),Zh=a(E," will be inserted as the last child of the parent element, "),en=o(E,"CODE",{class:!0});var z1=l(en);Xh=a(z1,'<div id="parent">'),z1.forEach(t),sv=a(E,". And hey, we got ourselves a bug! Elements inside "),an=o(E,"CODE",{class:!0});var Z1=l(an);ev=a(Z1,"<A />"),Z1.forEach(t),av=a(E," appears after "),tn=o(E,"CODE",{class:!0});var X1=l(tn);tv=a(X1,"<B />"),X1.forEach(t),nv=a(E,"!"),E.forEach(t),ov=r(d),nn=o(d,"DIV",{class:!0});var R_=l(nn);R_.forEach(t),lv=r(d),me=o(d,"P",{});var Hl=l(me);cv=a(Hl,"We can prevent this from happening by adding an "),on=o(Hl,"CODE",{class:!0});var s2=l(on);iv=a(s2,"anchor"),s2.forEach(t),rv=a(Hl," element."),Hl.forEach(t),pv=r(d),ws=o(d,"P",{});var zn=l(ws);dv=a(zn,"When the "),ln=o(zn,"CODE",{class:!0});var e2=l(ln);kv=a(e2,"condition"),e2.forEach(t),hv=a(zn," is "),cn=o(zn,"CODE",{class:!0});var a2=l(cn);vv=a(a2,"false"),a2.forEach(t),uv=a(zn,", our DOM looks like this:"),zn.forEach(t),yv=r(d),rn=o(d,"DIV",{class:!0});var V_=l(rn);V_.forEach(t),fv=r(d),j=o(d,"P",{});var cs=l(j);_v=a(cs,"And when the "),pn=o(cs,"CODE",{class:!0});var t2=l(pn);Ev=a(t2,"condition"),t2.forEach(t),xv=a(cs," turns "),dn=o(cs,"CODE",{class:!0});var n2=l(dn);gv=a(n2,"true"),n2.forEach(t),mv=a(cs,", we insert "),kn=o(cs,"CODE",{class:!0});var o2=l(kn);wv=a(o2,'<div id="a" />'),o2.forEach(t),bv=a(cs," before the "),hn=o(cs,"CODE",{class:!0});var l2=l(hn);Cv=a(l2,"anchor"),l2.forEach(t),Ov=a(cs," element:"),cs.forEach(t),Dv=r(d),vn=o(d,"DIV",{class:!0});var W_=l(vn);W_.forEach(t),Iv=r(d),bs=o(d,"P",{});var Zn=l(bs);Tv=a(Zn,"Yay, we maintain the order of "),un=o(Zn,"CODE",{class:!0});var c2=l(un);Pv=a(c2,"<A />"),c2.forEach(t),Sv=a(Zn," and "),yn=o(Zn,"CODE",{class:!0});var i2=l(yn);Lv=a(i2,"<B />"),i2.forEach(t),Av=a(Zn," \u{1F389} !"),Zn.forEach(t),Bv=r(d),T=o(d,"P",{});var V=l(T);Hv=a(V,"The "),fn=o(V,"CODE",{class:!0});var r2=l(fn);jv=a(r2,"anchor"),r2.forEach(t),Mv=a(V," element to the "),_n=o(V,"CODE",{class:!0});var p2=l(_n);Nv=a(p2,"{#if}"),p2.forEach(t),qv=a(V," block, is like "),we=o(V,"A",{href:!0,rel:!0});var d2=l(we);Rv=a(d2,"an anchor to a ship"),d2.forEach(t),Vv=a(V,', "Here is where '),En=o(V,"CODE",{class:!0});var k2=l(En);Wv=a(k2,"{#if}"),k2.forEach(t),$v=a(V," block should "),xn=o(V,"CODE",{class:!0});var h2=l(xn);Jv=a(h2,"insertBefore()"),h2.forEach(t),Gv=a(V,' !"'),V.forEach(t),Uv=r(d),Qo=o(d,"P",{});var v2=l(Qo);be=o(v2,"STRONG",{});var jl=l(be);Yv=a(jl,"4. "),gn=o(jl,"CODE",{class:!0});var u2=l(gn);Fv=a(u2,"{#if}"),u2.forEach(t),Kv=a(jl," block followed by another logic block"),jl.forEach(t),v2.forEach(t),Qv=r(d),Ce=o(d,"P",{});var Ml=l(Ce);zv=a(Ml,"The final scenario. "),mn=o(Ml,"CODE",{class:!0});var y2=l(mn);Zv=a(y2,"{#if}"),y2.forEach(t),Xv=a(Ml," block followed by another logic block:"),Ml.forEach(t),su=r(d),wn=o(d,"DIV",{class:!0});var $_=l(wn);$_.forEach(t),eu=r(d),M=o(d,"P",{});var is=l(M);au=a(is,"The 2nd "),bn=o(is,"CODE",{class:!0});var f2=l(bn);tu=a(f2,"{#if}"),f2.forEach(t),nu=a(is," block condition could be "),Cn=o(is,"CODE",{class:!0});var _2=l(Cn);ou=a(_2,"true"),_2.forEach(t),lu=a(is," or "),On=o(is,"CODE",{class:!0});var E2=l(On);cu=a(E2,"false"),E2.forEach(t),iu=a(is,". Which means "),Dn=o(is,"CODE",{class:!0});var x2=l(Dn);ru=a(x2,'<div id="b" />'),x2.forEach(t),pu=a(is," could be there or not there."),is.forEach(t),du=r(d),P=o(d,"P",{});var W=l(P);ku=a(W,"So, to know where we should insert "),In=o(W,"CODE",{class:!0});var g2=l(In);hu=a(g2,'<div id="a" />'),g2.forEach(t),vu=a(W," when chaging the "),Tn=o(W,"CODE",{class:!0});var m2=l(Tn);uu=a(m2,"condition"),m2.forEach(t),yu=a(W,", we need an "),Pn=o(W,"CODE",{class:!0});var w2=l(Pn);fu=a(w2,"anchor"),w2.forEach(t),_u=a(W," element after the 1st "),Sn=o(W,"CODE",{class:!0});var b2=l(Sn);Eu=a(b2,"{#if}"),b2.forEach(t),xu=a(W," block, before the 2nd "),Ln=o(W,"CODE",{class:!0});var C2=l(Ln);gu=a(C2,"{#if}"),C2.forEach(t),mu=a(W," block."),W.forEach(t),d.forEach(t),cl=r(k),q=o(k,"SECTION",{});var qs=l(q);zo=o(qs,"H2",{});var O2=l(zo);Oe=o(O2,"A",{href:!0,id:!0});var D2=l(Oe);wu=a(D2,"Closing Note"),D2.forEach(t),O2.forEach(t),bu=r(qs),as=o(qs,"P",{});var Rs=l(as);Cu=a(Rs,"We've covered how Svelte compiles an "),An=o(Rs,"CODE",{class:!0});var I2=l(An);Ou=a(I2,"{#if}"),I2.forEach(t),Du=a(Rs," block, as well as how and why an "),Bn=o(Rs,"CODE",{class:!0});var T2=l(Bn);Iu=a(T2,"anchor"),T2.forEach(t),Tu=a(Rs," element is needed for the "),Hn=o(Rs,"CODE",{class:!0});var P2=l(Hn);Pu=a(P2,"{#if}"),P2.forEach(t),Su=a(Rs," block."),Rs.forEach(t),Lu=r(qs),De=o(qs,"P",{});var Nl=l(De);Au=a(Nl,"If you wish to learn more about Svelte, "),Ie=o(Nl,"A",{href:!0,rel:!0});var S2=l(Ie);Bu=a(S2,"follow me on Twitter"),S2.forEach(t),Hu=a(Nl,"."),Nl.forEach(t),ju=r(qs),Te=o(qs,"P",{});var ql=l(Te);Mu=a(ql,"I'll post it on Twitter when the next part is ready, the next post will be about "),jn=o(ql,"CODE",{class:!0});var L2=l(jn);Nu=a(L2,"{#each}"),L2.forEach(t),qu=a(ql," logic block."),ql.forEach(t),qs.forEach(t),this.h()},h(){c(S,"href","/compile-svelte-in-your-head-part-3/"),c(Ae,"class","inline"),c(rs,"href","#the-if-block"),c(rs,"id","the-if-block"),c(Be,"class","inline"),c(He,"class","code-section"),c(je,"class","inline"),c(Me,"class","inline"),c(Ne,"class","inline"),c(qe,"class","inline"),c(Re,"class","code-section"),c(Ve,"class","inline"),c(Os,"href","https://svelte.dev/tutorial/if-blocks"),c(Os,"rel","nofollow"),c($s,"href","#the-vanilla-js"),c($s,"id","the-vanilla-js"),c(We,"class","inline"),c($e,"href","/compile-svelte-in-your-head-part-1/#creating-an-element"),c(Us,"href","#implementating-the-if-block"),c(Us,"id","implementating-the-if-block"),c(Je,"class","inline"),c(Ge,"class","code-section"),c(Ue,"class","inline"),c(Ye,"class","inline"),c(Fe,"class","inline"),c(Ke,"class","code-section"),c(Qe,"class","code-section"),c(ze,"class","inline"),c(Ze,"class","inline"),c(Xe,"class","inline"),c(sa,"class","code-section"),c(ea,"class","code-section"),c(aa,"class","inline"),c(ta,"class","inline"),c(na,"class","code-section"),c(oa,"class","inline"),c(la,"class","inline"),c(ca,"class","inline"),c(ia,"class","inline"),c(ra,"class","inline"),c(pa,"class","inline"),c(da,"class","inline"),c(Ks,"href","#refactor-the-code"),c(Ks,"id","refactor-the-code"),c(ka,"class","inline"),c(ha,"class","inline"),c(va,"class","inline"),c(zs,"href","https://dev.to/carlillo/design-patterns---strategy-pattern-in-javascript-2hg3"),c(zs,"rel","nofollow"),c(ua,"class","inline"),c(ya,"class","code-section"),c(fa,"class","code-section"),c(_a,"class","inline"),c(Ea,"class","inline"),c(xa,"class","inline"),c(ga,"class","code-section"),c(Xs,"href","#the-compiled-js"),c(Xs,"id","the-compiled-js"),c(ma,"class","inline"),c(wa,"class","code-section"),c(ee,"href","https://svelte.dev/repl/39aec874a5214a35b34ff069ae9fa143"),c(ee,"rel","nofollow"),c(ba,"class","code-section"),c(Ca,"class","inline"),c(ne,"href","/compile-svelte-in-your-head-part-1/#create-fragment"),c(Oa,"class","inline"),c(Da,"class","inline"),c(Ia,"class","inline"),c(Ta,"class","inline"),c(Pa,"class","inline"),c(Sa,"class","inline"),c(La,"class","inline"),c(Aa,"class","inline"),c(Ba,"class","code-section"),c(ja,"class","inline"),c(Na,"class","inline"),c(Ra,"class","inline"),c(Wa,"class","inline"),c($a,"class","inline"),c(Ja,"class","inline"),c(Ga,"class","inline"),c(Ua,"class","inline"),c(Ya,"class","inline"),c(Fa,"class","inline"),c(Ka,"class","inline"),c(Qa,"class","inline"),c(za,"class","inline"),c(Za,"class","inline"),c(Xa,"class","inline"),c(st,"class","inline"),c(et,"class","inline"),c(at,"class","code-section"),c(nt,"class","inline"),c(ot,"class","code-section"),c(lt,"class","inline"),c(ct,"class","inline"),c(it,"class","code-section"),c(re,"href","#the-extra-text-node"),c(re,"id","the-extra-text-node"),c(rt,"class","inline"),c(pt,"class","inline"),c(ke,"href","https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore"),c(ke,"rel","nofollow"),c(dt,"class","inline"),c(kt,"class","inline"),c(ht,"class","code-section"),c(ue,"href","https://svelte.dev/repl/5d75daf3190f412f83656fd2e689cb14"),c(ue,"rel","nofollow"),c(vt,"class","inline"),c(ut,"class","code-section"),c(yt,"class","inline"),c(ft,"class","inline"),c(_t,"class","inline"),c(Et,"class","inline"),c(xt,"class","inline"),c(gt,"class","code-section"),c(_e,"href","https://svelte.dev/repl/5fac48804cfb49639cfda1ab8273cba8"),c(_e,"rel","nofollow"),c(mt,"class","inline"),c(wt,"class","inline"),c(bt,"class","inline"),c(Ct,"class","inline"),c(Ot,"class","inline"),c(Dt,"class","code-section"),c(It,"class","inline"),c(Tt,"class","inline"),c(Pt,"class","inline"),c(St,"class","inline"),c(Lt,"class","inline"),c(At,"class","code-section"),c(xe,"href","https://svelte.dev/repl/b9b5dae5ab9f4399bf901f802a6885cb"),c(xe,"rel","nofollow"),c(Bt,"class","inline"),c(Ht,"class","inline"),c(jt,"class","inline"),c(Mt,"class","inline"),c(Nt,"class","inline"),c(qt,"class","code-section"),c(Rt,"class","inline"),c(Vt,"class","inline"),c(Wt,"class","inline"),c($t,"class","code-section"),c(Jt,"class","inline"),c(Gt,"class","inline"),c(Ut,"class","inline"),c(Yt,"class","inline"),c(Ft,"class","inline"),c(Kt,"class","inline"),c(Qt,"class","inline"),c(zt,"class","inline"),c(Zt,"class","inline"),c(Xt,"class","inline"),c(sn,"class","inline"),c(en,"class","inline"),c(an,"class","inline"),c(tn,"class","inline"),c(nn,"class","code-section"),c(on,"class","inline"),c(ln,"class","inline"),c(cn,"class","inline"),c(rn,"class","code-section"),c(pn,"class","inline"),c(dn,"class","inline"),c(kn,"class","inline"),c(hn,"class","inline"),c(vn,"class","code-section"),c(un,"class","inline"),c(yn,"class","inline"),c(fn,"class","inline"),c(_n,"class","inline"),c(we,"href","https://www.britannica.com/technology/anchor-nautical-device"),c(we,"rel","nofollow"),c(En,"class","inline"),c(xn,"class","inline"),c(gn,"class","inline"),c(mn,"class","inline"),c(wn,"class","code-section"),c(bn,"class","inline"),c(Cn,"class","inline"),c(On,"class","inline"),c(Dn,"class","inline"),c(In,"class","inline"),c(Tn,"class","inline"),c(Pn,"class","inline"),c(Sn,"class","inline"),c(Ln,"class","inline"),c(Oe,"href","#closing-note"),c(Oe,"id","closing-note"),c(An,"class","inline"),c(Bn,"class","inline"),c(Hn,"class","inline"),c(Ie,"href","https://twitter.com/lihautan"),c(Ie,"rel","nofollow"),c(jn,"class","inline")},m(k,g){N2(x,k,g),b(k,$,g),b(k,N,g),s(N,J),s(J,w),s(J,S),s(S,Se),s(J,Rl),b(k,Xo,g),b(k,Cs,g),s(Cs,Vl),s(Cs,Xn),s(Xn,Wl),s(Cs,$l),b(k,sl,g),b(k,Le,g),s(Le,Jl),b(k,el,g),b(k,O,g),s(O,so),s(so,rs),s(rs,Gl),s(rs,Ae),s(Ae,Ul),s(rs,Yl),s(O,Fl),s(O,Vs),s(Vs,Kl),s(Vs,Be),s(Be,Ql),s(Vs,zl),s(O,Zl),s(O,He),He.innerHTML=W2,s(O,Xl),s(O,ps),s(ps,sc),s(ps,je),s(je,ec),s(ps,ac),s(ps,Me),s(Me,tc),s(ps,nc),s(O,oc),s(O,ds),s(ds,lc),s(ds,Ne),s(Ne,cc),s(ds,ic),s(ds,qe),s(qe,rc),s(ds,pc),s(O,dc),s(O,Re),Re.innerHTML=$2,s(O,kc),s(O,Ws),s(Ws,hc),s(Ws,Os),s(Os,Ve),s(Ve,vc),s(Os,uc),s(Ws,yc),b(k,al,g),b(k,ts,g),s(ts,eo),s(eo,$s),s($s,fc),s(ts,_c),s(ts,Js),s(Js,Ec),s(Js,We),s(We,xc),s(Js,gc),s(ts,mc),s(ts,Gs),s(Gs,wc),s(Gs,$e),s($e,bc),s(Gs,Cc),b(k,tl,g),b(k,v,g),s(v,ao),s(ao,Us),s(Us,Oc),s(v,Dc),s(v,Ys),s(Ys,Ic),s(Ys,Je),s(Je,Tc),s(Ys,Pc),s(v,Sc),s(v,Ge),Ge.innerHTML=J2,s(v,Lc),s(v,G),s(G,Ac),s(G,Ue),s(Ue,Bc),s(G,Hc),s(G,Ye),s(Ye,jc),s(G,Mc),s(G,Fe),s(Fe,Nc),s(G,qc),s(v,Rc),s(v,to),s(to,Vc),s(v,Wc),s(v,no),s(no,$c),s(v,Jc),s(v,Ke),Ke.innerHTML=G2,s(v,Gc),s(v,Fs),s(Fs,Uc),s(Fs,oo),s(oo,Yc),s(Fs,Fc),s(v,Kc),s(v,Qe),Qe.innerHTML=U2,s(v,Qc),s(v,U),s(U,zc),s(U,ze),s(ze,Zc),s(U,Xc),s(U,Ze),s(Ze,si),s(U,ei),s(U,Xe),s(Xe,ai),s(U,ti),s(v,ni),s(v,sa),sa.innerHTML=Y2,s(v,oi),s(v,lo),s(lo,li),s(v,ci),s(v,ea),ea.innerHTML=F2,s(v,ii),s(v,ks),s(ks,ri),s(ks,aa),s(aa,pi),s(ks,di),s(ks,ta),s(ta,ki),s(ks,hi),s(v,vi),s(v,na),na.innerHTML=K2,s(v,ui),s(v,C),s(C,yi),s(C,oa),s(oa,fi),s(C,_i),s(C,la),s(la,Ei),s(C,xi),s(C,ca),s(ca,gi),s(C,mi),s(C,ia),s(ia,wi),s(C,bi),s(C,ra),s(ra,Ci),s(C,Oi),s(C,pa),s(pa,Di),s(C,Ii),s(C,da),s(da,Ti),s(C,Pi),s(v,Si),s(v,co),s(co,Li),b(k,nl,g),b(k,_,g),s(_,io),s(io,Ks),s(Ks,Ai),s(_,Bi),s(_,ro),s(ro,Hi),s(_,ji),s(_,hs),s(hs,po),s(po,ka),s(ka,Mi),s(hs,Ni),s(hs,ko),s(ko,ha),s(ha,qi),s(hs,Ri),s(hs,ho),s(ho,va),s(va,Vi),s(_,Wi),s(_,Qs),s(Qs,$i),s(Qs,zs),s(zs,Ji),s(Qs,Gi),s(_,Ui),s(_,Zs),s(Zs,Yi),s(Zs,ua),s(ua,Fi),s(Zs,Ki),s(_,Qi),s(_,ya),ya.innerHTML=Q2,s(_,zi),s(_,vo),s(vo,Zi),s(_,Xi),s(_,fa),fa.innerHTML=z2,s(_,sr),s(_,Y),s(Y,er),s(Y,_a),s(_a,ar),s(Y,tr),s(Y,Ea),s(Ea,nr),s(Y,or),s(Y,xa),s(xa,lr),s(Y,cr),s(_,ir),s(_,ga),ga.innerHTML=Z2,s(_,rr),s(_,uo),s(uo,pr),b(k,ol,g),b(k,h,g),s(h,yo),s(yo,Xs),s(Xs,dr),s(h,kr),s(h,se),s(se,hr),s(se,ma),s(ma,vr),s(se,ur),s(h,yr),s(h,wa),wa.innerHTML=X2,s(h,fr),s(h,fo),s(fo,ee),s(ee,_r),s(h,Er),s(h,_o),s(_o,xr),s(h,gr),s(h,ae),s(ae,Eo),s(Eo,mr),s(ae,wr),s(ae,ba),ba.innerHTML=s_,s(h,br),s(h,xo),s(xo,Cr),s(h,Or),s(h,go),s(go,mo),s(mo,Dr),s(h,Ir),s(h,vs),s(vs,te),s(te,A),s(A,Tr),s(A,ne),s(ne,Ca),s(Ca,Pr),s(ne,Sr),s(A,Lr),s(A,Oa),s(Oa,Ar),s(A,Br),s(A,Da),s(Da,Hr),s(A,jr),s(A,wo),s(wo,Mr),s(A,Nr),s(te,qr),s(te,F),s(F,Rr),s(F,Ia),s(Ia,Vr),s(F,Wr),s(F,Ta),s(Ta,$r),s(F,Jr),s(F,Pa),s(Pa,Gr),s(F,Ur),s(vs,Yr),s(vs,oe),s(oe,us),s(us,Fr),s(us,Sa),s(Sa,Kr),s(us,Qr),s(us,La),s(La,zr),s(us,Zr),s(oe,Xr),s(oe,le),s(le,sp),s(le,Aa),s(Aa,ep),s(le,ap),s(vs,tp),s(vs,bo),s(bo,Co),s(Co,np),s(h,op),s(h,Ba),Ba.innerHTML=e_,s(h,lp),s(h,ce),s(ce,ys),s(ys,Oo),s(Oo,cp),s(ys,ip),s(ys,K),s(K,Ha),s(Ha,rp),s(Ha,ja),s(ja,pp),s(K,dp),s(K,Ma),s(Ma,kp),s(Ma,Na),s(Na,hp),s(K,vp),s(K,qa),s(qa,up),s(qa,Ra),s(Ra,yp),s(K,fp),s(K,Va),s(Va,_p),s(Va,Wa),s(Wa,Ep),s(ys,xp),s(ys,ie),s(ie,gp),s(ie,$a),s($a,mp),s(ie,wp),s(ce,bp),s(ce,fs),s(fs,B),s(B,Cp),s(B,Ja),s(Ja,Op),s(B,Dp),s(B,Do),s(Do,Ip),s(B,Tp),s(B,Ga),s(Ga,Pp),s(B,Sp),s(B,Ua),s(Ua,Lp),s(B,Ap),s(fs,Bp),s(fs,H),s(H,Hp),s(H,Ya),s(Ya,jp),s(H,Mp),s(H,Fa),s(Fa,Np),s(H,qp),s(H,Ka),s(Ka,Rp),s(H,Vp),s(H,Qa),s(Qa,Wp),s(H,$p),s(fs,Jp),s(fs,Q),s(Q,Gp),s(Q,za),s(za,Up),s(Q,Yp),s(Q,Za),s(Za,Fp),s(Q,Kp),s(Q,Xa),s(Xa,Qp),s(Q,zp),s(h,Zp),s(h,Io),s(Io,Ds),s(Ds,Xp),s(Ds,st),s(st,sd),s(Ds,ed),s(Ds,et),s(et,ad),s(h,td),s(h,at),at.innerHTML=a_,s(h,nd),s(h,tt),s(tt,nt),s(nt,od),s(tt,ld),s(h,cd),s(h,ot),ot.innerHTML=t_,s(h,id),s(h,z),s(z,rd),s(z,lt),s(lt,pd),s(z,dd),s(z,ct),s(ct,kd),s(z,hd),s(z,To),s(To,vd),s(z,ud),s(h,yd),s(h,it),it.innerHTML=n_,s(h,fd),s(h,Po),s(Po,_d),b(k,ll,g),b(k,p,g),s(p,So),s(So,re),s(re,Ed),s(p,xd),s(p,pe),s(pe,gd),s(pe,rt),s(rt,md),s(pe,wd),s(p,bd),s(p,de),s(de,Cd),s(de,ke),s(ke,pt),s(pt,Od),s(de,Dd),s(p,Id),s(p,he),s(he,Td),s(he,dt),s(dt,Pd),s(he,Sd),s(p,Ld),s(p,Lo),s(Lo,ve),s(ve,Ad),s(ve,kt),s(kt,Bd),s(ve,Hd),s(p,jd),s(p,ht),ht.innerHTML=o_,s(p,Md),s(p,Ao),s(Ao,ue),s(ue,Nd),s(p,qd),s(p,Bo),s(Bo,Rd),s(p,Vd),s(p,ye),s(ye,Ho),s(Ho,Wd),s(ye,$d),s(ye,fe),s(fe,Jd),s(fe,vt),s(vt,Gd),s(fe,Ud),s(p,Yd),s(p,ut),ut.innerHTML=l_,s(p,Fd),s(p,jo),s(jo,Z),s(Z,Kd),s(Z,yt),s(yt,Qd),s(Z,zd),s(Z,ft),s(ft,Zd),s(Z,Xd),s(Z,_t),s(_t,sk),s(Z,ek),s(p,ak),s(p,Mo),s(Mo,_s),s(_s,tk),s(_s,Et),s(Et,nk),s(_s,ok),s(_s,xt),s(xt,lk),s(_s,ck),s(p,ik),s(p,gt),gt.innerHTML=c_,s(p,rk),s(p,No),s(No,_e),s(_e,pk),s(p,dk),s(p,qo),s(qo,kk),s(p,hk),s(p,Ee),s(Ee,Ro),s(Ro,vk),s(Ee,uk),s(Ee,I),s(I,yk),s(I,mt),s(mt,fk),s(I,_k),s(I,wt),s(wt,Ek),s(I,xk),s(I,bt),s(bt,gk),s(I,mk),s(I,Ct),s(Ct,wk),s(I,bk),s(I,Ot),s(Ot,Ck),s(I,Ok),s(p,Dk),s(p,Dt),Dt.innerHTML=i_,s(p,Ik),s(p,Vo),s(Vo,X),s(X,Tk),s(X,It),s(It,Pk),s(X,Sk),s(X,Tt),s(Tt,Lk),s(X,Ak),s(X,Pt),s(Pt,Bk),s(X,Hk),s(p,jk),s(p,Wo),s(Wo,Es),s(Es,Mk),s(Es,St),s(St,Nk),s(Es,qk),s(Es,Lt),s(Lt,Rk),s(Es,Vk),s(p,Wk),s(p,At),At.innerHTML=r_,s(p,$k),s(p,$o),s($o,xe),s(xe,Jk),s(p,Gk),s(p,Jo),s(Jo,Uk),s(p,Yk),s(p,xs),s(xs,ge),s(ge,Fk),s(ge,Bt),s(Bt,Kk),s(ge,Qk),s(xs,zk),s(xs,gs),s(gs,Zk),s(gs,Ht),s(Ht,Xk),s(gs,sh),s(gs,jt),s(jt,eh),s(gs,ah),s(xs,th),s(xs,ss),s(ss,nh),s(ss,Go),s(Go,oh),s(ss,lh),s(ss,Mt),s(Mt,ch),s(ss,ih),s(ss,Nt),s(Nt,rh),s(ss,ph),s(p,dh),s(p,qt),qt.innerHTML=p_,s(p,kh),s(p,Uo),s(Uo,es),s(es,hh),s(es,Rt),s(Rt,vh),s(es,uh),s(es,Vt),s(Vt,yh),s(es,fh),s(es,Wt),s(Wt,_h),s(es,Eh),s(p,xh),s(p,Yo),s(Yo,gh),s(p,mh),s(p,Fo),s(Fo,wh),s(p,bh),s(p,Ko),s(Ko,Ch),s(p,Oh),s(p,$t),$t.innerHTML=d_,s(p,Dh),s(p,ms),s(ms,Ih),s(ms,Jt),s(Jt,Th),s(ms,Ph),s(ms,Gt),s(Gt,Sh),s(ms,Lh),s(p,Ah),s(p,f),s(f,Bh),s(f,Ut),s(Ut,Hh),s(f,jh),s(f,Yt),s(Yt,Mh),s(f,Nh),s(f,Ft),s(Ft,qh),s(f,Rh),s(f,Kt),s(Kt,Vh),s(f,Wh),s(f,Qt),s(Qt,$h),s(f,Jh),s(f,zt),s(zt,Gh),s(f,Uh),s(f,Zt),s(Zt,Yh),s(f,Fh),s(f,Xt),s(Xt,Kh),s(f,Qh),s(f,sn),s(sn,zh),s(f,Zh),s(f,en),s(en,Xh),s(f,sv),s(f,an),s(an,ev),s(f,av),s(f,tn),s(tn,tv),s(f,nv),s(p,ov),s(p,nn),nn.innerHTML=k_,s(p,lv),s(p,me),s(me,cv),s(me,on),s(on,iv),s(me,rv),s(p,pv),s(p,ws),s(ws,dv),s(ws,ln),s(ln,kv),s(ws,hv),s(ws,cn),s(cn,vv),s(ws,uv),s(p,yv),s(p,rn),rn.innerHTML=h_,s(p,fv),s(p,j),s(j,_v),s(j,pn),s(pn,Ev),s(j,xv),s(j,dn),s(dn,gv),s(j,mv),s(j,kn),s(kn,wv),s(j,bv),s(j,hn),s(hn,Cv),s(j,Ov),s(p,Dv),s(p,vn),vn.innerHTML=v_,s(p,Iv),s(p,bs),s(bs,Tv),s(bs,un),s(un,Pv),s(bs,Sv),s(bs,yn),s(yn,Lv),s(bs,Av),s(p,Bv),s(p,T),s(T,Hv),s(T,fn),s(fn,jv),s(T,Mv),s(T,_n),s(_n,Nv),s(T,qv),s(T,we),s(we,Rv),s(T,Vv),s(T,En),s(En,Wv),s(T,$v),s(T,xn),s(xn,Jv),s(T,Gv),s(p,Uv),s(p,Qo),s(Qo,be),s(be,Yv),s(be,gn),s(gn,Fv),s(be,Kv),s(p,Qv),s(p,Ce),s(Ce,zv),s(Ce,mn),s(mn,Zv),s(Ce,Xv),s(p,su),s(p,wn),wn.innerHTML=u_,s(p,eu),s(p,M),s(M,au),s(M,bn),s(bn,tu),s(M,nu),s(M,Cn),s(Cn,ou),s(M,lu),s(M,On),s(On,cu),s(M,iu),s(M,Dn),s(Dn,ru),s(M,pu),s(p,du),s(p,P),s(P,ku),s(P,In),s(In,hu),s(P,vu),s(P,Tn),s(Tn,uu),s(P,yu),s(P,Pn),s(Pn,fu),s(P,_u),s(P,Sn),s(Sn,Eu),s(P,xu),s(P,Ln),s(Ln,gu),s(P,mu),b(k,cl,g),b(k,q,g),s(q,zo),s(zo,Oe),s(Oe,wu),s(q,bu),s(q,as),s(as,Cu),s(as,An),s(An,Ou),s(as,Du),s(as,Bn),s(Bn,Iu),s(as,Tu),s(as,Hn),s(Hn,Pu),s(as,Su),s(q,Lu),s(q,De),s(De,Au),s(De,Ie),s(Ie,Bu),s(De,Hu),s(q,ju),s(q,Te),s(Te,Mu),s(Te,jn),s(jn,Nu),s(Te,qu),il=!0},p:K_,i(k){il||(q2(x.$$.fragment,k),il=!0)},o(k){R2(x.$$.fragment,k),il=!1},d(k){V2(x,k),k&&t($),k&&t(N),k&&t(Xo),k&&t(Cs),k&&t(sl),k&&t(Le),k&&t(el),k&&t(O),k&&t(al),k&&t(ts),k&&t(tl),k&&t(v),k&&t(nl),k&&t(_),k&&t(ol),k&&t(h),k&&t(ll),k&&t(p),k&&t(cl),k&&t(q)}}}function sE(Pe){let x,$;const N=[Pe[0],H2];let J={$$slots:{default:[X_]},$$scope:{ctx:Pe}};for(let w=0;w<N.length;w+=1)J=Yu(J,N[w]);return x=new Q_({props:J}),{c(){j2(x.$$.fragment)},l(w){M2(x.$$.fragment,w)},m(w,S){N2(x,w,S),$=!0},p(w,[S]){const Se=S&1?Y_(N,[S&1&&A2(w[0]),S&0&&A2(H2)]):{};S&2&&(Se.$$scope={dirty:S,ctx:w}),x.$set(Se)},i(w){$||(q2(x.$$.fragment,w),$=!0)},o(w){R2(x.$$.fragment,w),$=!1},d(w){V2(x,w)}}}const H2={title:"Compile Svelte in your head (Part 4)",date:"2020-09-22T08:00:00Z",tags:["Svelte","JavaScript"],series:"Compile Svelte in your head",label:"blog"};function eE(Pe,x,$){return F_("blog",{image:Z_}),Pe.$$set=N=>{$(0,x=Yu(Yu({},x),B2(N)))},x=B2(x),[x]}class iE extends J_{constructor(x){super();G_(this,x,eE,sE,U_,{})}}export{iE as default,H2 as metadata};
