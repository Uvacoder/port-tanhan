import{S as Vf,i as Jf,s as Bf,C as Yv,w as fx,x as mx,y as wx,z as Wf,A as yx,q as gx,o as bx,B as _x,r as Ff,R as dx,k as i,e,t as a,m as p,c as t,a as l,h as n,d as o,b as r,Q as Uf,f as Ps,g as f,F as s,O as $f}from"../../chunks/vendor-569a3c5c.js";import{B as Kf}from"../../chunks/BlogLayout-17b76cb2.js";import{T as Yf}from"../../chunks/TableOfContent-dbc18cb8.js";import"../../chunks/stores-ee936cd4.js";import"../../chunks/WebMentions-968cc380.js";/* empty css                                */var zf="/_app/assets/ast-import-0512f895.webp",Zf="/_app/assets/ast-import-1b4b97d2.webp",Qf="/_app/assets/ast-import-ef9368ff.png",ux="/_app/assets/ast-import-9eb42f5d.png",Xf="/_app/assets/hero-twitter-43549bfa.jpg";function sm(To){let b,F,T,Ts,_,U,qo,qs,pl,cl,As,hl,kl,mn,Ao,vl,wn,gn,bn,ms,yl,Da,dl,ul,_n,En,In,D,Ma,Os,xl,fl,Ss,ml,Oo,wl,gl,bl,Cs,_l,La,El,Il,Pl,js,So,Tl,Na,ql,Al,Co,Ol,Ha,Sl,Cl,Ga,Ds,jl,Ra,Dl,Ml,Pn,O,Va,Ms,Ll,Nl,Ja,Hl,Gl,jo,Ex=`<div class="filename">index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> squareArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./square.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> circleArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./circle.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">squareArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circleArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span></code></pre>`,Rl,Do,Ix=`<div class="filename">square.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(side) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> side </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> side;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> area;</span></span></code></pre>`,Vl,Mo,Px=`<div class="filename">circle.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> area;</span></span></code></pre>`,Jl,$,Bl,Ls,Wl,Fl,Lo,Ul,$l,No,Kl,Yl,Tn,h,Ba,Ns,zl,Zl,Wa,Ql,Xl,Ho,Tx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">build</span><span style="color: var(--shiki-color-text)">(&#123; entryFile</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> outputFolder &#125;) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// build dependency graph</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">graph</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createDependencyGraph</span><span style="color: var(--shiki-color-text)">(entryFile);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// bundle the asset</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">outputFiles</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">bundle</span><span style="color: var(--shiki-color-text)">(graph);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// write to output folder</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">outputFile</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> outputFiles) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.writeFileSync</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(outputFolder</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">outputFile</span><span style="color: var(--shiki-color-text)">.name)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">outputFile</span><span style="color: var(--shiki-color-text)">.content</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#39;utf-8&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    )</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,sr,Fa,ns,or,Ua,er,ar,Hs,tr,nr,lr,Go,qx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createDependencyGraph</span><span style="color: var(--shiki-color-text)">(entryFile) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">rootModule</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createModule</span><span style="color: var(--shiki-color-text)">(entryFile);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> rootModule;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,rr,$a,ir,pr,ls,cr,Ro,hr,kr,Vo,vr,yr,dr,Jo,Ax=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createModule</span><span style="color: var(--shiki-color-text)">(filePath) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)">(filePath);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ur,Gs,xr,Bo,fr,mr,wr,Wo,Ox=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(filePath) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.filePath </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> filePath;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.content </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.readFileSync</span><span style="color: var(--shiki-color-text)">(filePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;utf-8&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.dependencies </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,gr,K,br,Fo,_r,Er,Rs,Ir,Pr,Ka,Tr,qr,Ar,Uo,Sx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line highlight"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;@babel/core&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(filePath) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.filePath </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> filePath;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.content </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.readFileSync</span><span style="color: var(--shiki-color-text)">(filePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;utf-8&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.ast </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.parseSync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.content);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Or,Ya,Sr,Cr,$o,Cx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(filePath) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.filePath </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> filePath;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.content </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.readFileSync</span><span style="color: var(--shiki-color-text)">(filePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;utf-8&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.ast </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.parseSync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.content);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.dependencies </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.findDependencies</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">findDependencies</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">//</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,jr,za,Dr,Mr,rs,Lr,Ko,Nr,Hr,Vs,Gr,Rr,Vr,Za,is,Yo,Qa,N,zv,Jr,j,Br,zo,Wr,Fr,Zo,Ur,$r,Qo,Kr,Yr,Xo,zr,Zr,se,Qr,Xr,si,oe,jx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">findDependencies</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">ast</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">program</span><span style="color: var(--shiki-color-text)">.body</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.filter</span><span style="color: var(--shiki-color-text)">(node </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;ImportDeclaration&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(node </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">source</span><span style="color: var(--shiki-color-text)">.value)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,oi,H,ei,ee,ai,ti,ae,ni,li,te,ri,ii,Xa,pi,ci,hi,Js,ki,st,vi,yi,di,ne,Dx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">findDependencies</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">ast</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">program</span><span style="color: var(--shiki-color-text)">.body</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.filter</span><span style="color: var(--shiki-color-text)">(node </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;ImportDeclaration&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(node </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">source</span><span style="color: var(--shiki-color-text)">.value)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(relativePath </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">resolveRequest</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.filePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> relativePath))</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// resolving</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">resolveRequest</span><span style="color: var(--shiki-color-text)">(requester</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> requestedPath) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">//</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ui,ot,et,xi,qn,k,at,Bs,fi,mi,ps,wi,le,gi,bi,re,_i,Ei,Ii,ie,Mx='<div class="filename">project/a.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./b.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>',Pi,pe,Lx='<div class="filename">project/foo/a.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./b.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>',Ti,tt,qi,Ai,Ws,Oi,Fs,Si,Ci,ji,cs,Di,ce,Mi,Li,he,Ni,Hi,Gi,ke,Nx=`<pre class="prism language-"><code><span class="line">b</span>
<span class="line">b.js</span>
<span class="line">b.json</span>
<span class="line">b.node</span></code></pre>`,Ri,Us,Vi,ve,Ji,Bi,Wi,ye,Hx=`<pre class="prism language-"><code><span class="line">&quot;main&quot; in b/package.json</span>
<span class="line">b/index.js</span>
<span class="line">b/index.json</span>
<span class="line">b/index.node</span></code></pre>`,Fi,hs,Ui,de,$i,Ki,ue,Yi,zi,Zi,ks,Qi,xe,Xi,sp,$s,op,ep,ap,Ks,tp,nt,np,lp,rp,fe,Gx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;path&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// resolving</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">resolveRequest</span><span style="color: var(--shiki-color-text)">(requester</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> requestedPath) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.dirname</span><span style="color: var(--shiki-color-text)">(requester)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> requestedPath);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ip,lt,rt,pp,cp,it,hp,kp,me,Rx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">findDependencies</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">ast</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">program</span><span style="color: var(--shiki-color-text)">.body</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.filter</span><span style="color: var(--shiki-color-text)">(node </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;ImportDeclaration&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(node </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">source</span><span style="color: var(--shiki-color-text)">.value)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(relativePath </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">resolveRequest</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.filePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> relativePath))</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(absolutePath </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createModule</span><span style="color: var(--shiki-color-text)">(absolutePath))</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,vp,pt,yp,dp,we,Vx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">Module &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  filePath</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;/Projects/byo-bundler/fixture/index.js&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  content</span><span style="color: var(--shiki-token-punctuation)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-string-expression)">&#39;import squareArea from &#39;./square.js&#39;;&#92;nimport circleArea from &#39;./circle.js&#39;;&#92;n&#92;nconsole.log(&#39;Area of square: &#39;, squareArea(5));&#92;nconsole.log(&#39;Area of circle&#39;, circleArea(5));&#92;n&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ast</span><span style="color: var(--shiki-token-punctuation)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   Node &#123; </span><span style="color: var(--shiki-token-comment)">/*...*/</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  dependencies</span><span style="color: var(--shiki-token-punctuation)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   [ Module &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">       filePath</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;/Projects/byo-bundler/fixture/square.js&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">       content</span><span style="color: var(--shiki-token-keyword)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-string-expression)">&#39;function area(side) &#123;&#92;n  return side * side;&#92;n&#125;&#92;nexport default area;&#92;n&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">       ast</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> Node &#123;</span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)">&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">       dependencies</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> []</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">     Module &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">       filePath</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;/Projects/byo-bundler/fixture/circle.js&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">       content</span><span style="color: var(--shiki-token-keyword)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-string-expression)">&#39;const PI = 3.141;&#92;nfunction area(radius) &#123;&#92;n    return PI * radius * radius;&#92;n&#125;&#92;nexport default area;&#92;n&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">       ast</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> Node &#123;</span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)">&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">       dependencies</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> []</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   ]</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,up,G,xp,ge,fp,mp,be,wp,gp,_e,bp,_p,Ee,Ep,Ip,Pp,ct,ht,Tp,An,P,kt,Ys,qp,Ap,vt,Op,Sp,R,Cp,yt,jp,Dp,dt,Mp,Lp,ut,Np,Hp,xt,Gp,Rp,Vp,ft,Y,Jp,mt,Bp,Wp,wt,Fp,Up,Ie,$p,Kp,Yp,gt,zp,Zp,Pe,Jx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;circle.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;square.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(side) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> side </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> side;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;app.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">squareArea</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;square.js&#39;</span><span style="color: var(--shiki-color-text)">).default;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">circleArea</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;circle.js&#39;</span><span style="color: var(--shiki-color-text)">).default;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">squareArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circleArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">webpackStart</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  modules</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  entry</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;app.js&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,Qp,bt,Xp,sc,vs,_t,Et,oc,ec,Te,It,ac,tc,nc,qe,Pt,lc,rc,On,S,Tt,zs,ic,pc,ys,cc,Zs,hc,kc,Qs,vc,yc,dc,qt,uc,xc,At,fc,mc,Ae,Bx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">bundle</span><span style="color: var(--shiki-color-text)">(graph) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">collectModules</span><span style="color: var(--shiki-color-text)">(graph);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">collectModules</span><span style="color: var(--shiki-color-text)">(graph) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">collect</span><span style="color: var(--shiki-color-text)">(graph</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> modules);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> modules;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">collect</span><span style="color: var(--shiki-color-text)">(module</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> modules) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">dependencies</span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">(dependency </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">collect</span><span style="color: var(--shiki-color-text)">(dependency</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> modules));</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,wc,Ot,gc,Sn,d,St,Xs,bc,_c,Ct,Ec,Ic,ds,Pc,Oe,Tc,qc,Se,Ac,Oc,Sc,z,Cc,Ce,jc,Dc,so,Mc,Lc,je,Nc,Hc,Gc,De,Wx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">bundle</span><span style="color: var(--shiki-color-text)">(graph) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">collectModules</span><span style="color: var(--shiki-color-text)">(graph);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">moduleMap</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">toModuleMap</span><span style="color: var(--shiki-color-text)">(modules);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">toModuleMap</span><span style="color: var(--shiki-color-text)">(modules) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> moduleMap </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  moduleMap </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#123;&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> modules) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    moduleMap </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;&quot;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.filePath</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&quot;: &#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    moduleMap </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;function(exports, require) &#123; </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.content</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> &#125;,&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  moduleMap </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#125;&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> moduleMap;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Rc,oo,Vc,Me,Jc,Bc,Wc,eo,Le,Ne,Fc,Uc,$c,He,Ge,Kc,Yc,zc,jt,Zc,Qc,Re,Fx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&quot;index.js&quot;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> squareArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./square.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> circleArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./circle.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">squareArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circleArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&quot;square.js&quot;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(side) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> side </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> side;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> area;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&quot;circle.js&quot;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> area;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Xc,V,sh,Ve,oh,eh,Je,ah,th,Be,nh,lh,We,rh,ih,ph,Dt,ch,hh,Mt,kh,vh,Fe,Ux=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// #1</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// from</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> a</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; b</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> c &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// to</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; default: </span><span style="color: var(--shiki-token-constant)">a</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">b</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">c</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// #2</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> a;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">b</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> &#123; c &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// to</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.default </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> a;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.b </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.c </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> c;</span></span></code></pre>`,yh,Lt,ao,dh,Ue,uh,xh,fh,us,mh,Nt,wh,gh,Ht,bh,_h,Eh,$e,$x=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> modules) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-token-function)">.transformModuleInterface</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  moduleMap </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;&quot;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.filePath</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&quot;: function(exports, require) &#123; </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.content</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> &#125;,&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">transformModuleInterface</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">code</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.transformFromAstSync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.content</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)"> &#125;);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.ast </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> ast;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.content </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> code;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ih,Ke,Ph,to,Th,qh,Gt,Ah,Oh,Ye,Kx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&quot;index.js&quot;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; default: </span><span style="color: var(--shiki-token-constant)">squareArea</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;square.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; default: </span><span style="color: var(--shiki-token-constant)">circleArea</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;circle.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">squareArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circleArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&quot;square.js&quot;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(side) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> side </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> side;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.default </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> area;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&quot;circle.js&quot;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.default </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> area;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Sh,no,Ch,ze,jh,Dh,Cn,w,Rt,lo,Vt,Mh,Lh,Jt,Nh,Hh,Bt,Gh,Rh,Ze,Yx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">bundle</span><span style="color: var(--shiki-color-text)">(graph) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">collectModules</span><span style="color: var(--shiki-color-text)">(graph);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">moduleMap</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">toModuleMap</span><span style="color: var(--shiki-color-text)">(modules);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">moduleCode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">addRuntime</span><span style="color: var(--shiki-color-text)">(moduleMap</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> modules[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">].filePath);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">addRuntime</span><span style="color: var(--shiki-color-text)">(moduleMap</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> entryPoint) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">trim</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">    const modules = </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">moduleMap</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">    const entry = &quot;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">entryPoint</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&quot;;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">    function webpackStart(&#123; modules, entry &#125;) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">      const moduleCache = &#123;&#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">      const require = moduleName =&gt; &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        // if in cache, return the cached version</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        if (moduleCache[moduleName]) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">          return moduleCache[moduleName];</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        const exports = &#123;&#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        // this will prevent infinite &quot;require&quot; loop</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        // from circular dependencies</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        moduleCache[moduleName] = exports;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">    </span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        // &quot;require&quot;-ing the module,</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        // exported stuff will assigned to &quot;exports&quot;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        modules[moduleName](exports, require);</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        return moduleCache[moduleName];</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">      &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">    </span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">      // start the program</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">      require(entry);</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">    &#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">    webpackStart(&#123; modules, entry &#125;);&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// trim away spaces before the line</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">trim</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">lines</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">str</span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#92;n&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.filter</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">Boolean</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">padLength</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> lines[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">].</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> lines[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-function)">.trimLeft</span><span style="color: var(--shiki-color-text)">().</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">RegExp</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;^\\s&#123;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">padLength</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#125;&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">lines</span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(line </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">line</span><span style="color: var(--shiki-token-function)">.replace</span><span style="color: var(--shiki-color-text)">(regex</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">))</span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#92;n&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Vh,xs,Jh,Qe,Bh,Wh,Xe,Fh,Uh,$h,ro,Kh,sa,Yh,zh,Zh,oa,zx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">bundle</span><span style="color: var(--shiki-color-text)">(graph) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">collectModules</span><span style="color: var(--shiki-color-text)">(graph);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">moduleMap</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">toModuleMap</span><span style="color: var(--shiki-color-text)">(modules);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">moduleCode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">addRuntime</span><span style="color: var(--shiki-color-text)">(moduleMap</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> modules[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">].filePath);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [&#123; name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;bundle.js&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> content</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> moduleCode &#125;];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Qh,io,Xh,ea,sk,ok,ek,aa,Zx=`<pre class="prism language-"><code><span class="line">Area of square:  25</span>
<span class="line">Area of circle 78.525</span></code></pre>`,ak,Wt,tk,nk,po,lk,Ft,rk,ik,jn,q,Ut,co,pk,ck,ho,hk,$t,kk,vk,yk,Kt,dk,uk,ta,Qx=`<div class="filename">index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> squareArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./square.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> circleArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./circle.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">squareArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line dim"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circleArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span></code></pre>`,xk,na,Xx=`<div class="filename">circle.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line highlight"><span style="color: var(--shiki-token-comment)">// const PI = 3.141;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; PI &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./index.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> area;</span></span></code></pre>`,fk,Yt,mk,wk,la,sf='<pre class="prism language-"><code><span class="line">RangeError: Maximum call stack size exceeded</span></code></pre>',Dn,m,zt,ko,gk,bk,Zt,_k,Ek,vo,Qt,Ik,Pk,Xt,Tk,qk,ra,of=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// fixing circular dependencies when generating module graph</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">MODULE_CACHE</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Map</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createModule</span><span style="color: var(--shiki-color-text)">(filePath) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-token-constant)">MODULE_CACHE</span><span style="color: var(--shiki-token-function)">.has</span><span style="color: var(--shiki-color-text)">(filePath)) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)">(filePath);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-constant)">MODULE_CACHE</span><span style="color: var(--shiki-token-function)">.set</span><span style="color: var(--shiki-color-text)">(filePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-token-function)">.initDependencies</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">MODULE_CACHE</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(filePath);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">initDependencies</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.dependencies </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.findDependencies</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// fixing circular dependencies when traversing module graph</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">collectModules</span><span style="color: var(--shiki-color-text)">(graph) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Set</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">collect</span><span style="color: var(--shiki-color-text)">(graph</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> modules);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Array</span><span style="color: var(--shiki-token-function)">.from</span><span style="color: var(--shiki-color-text)">(modules);</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">collect</span><span style="color: var(--shiki-color-text)">(module</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> modules) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-token-function)">.has</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">)) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-token-function)">.add</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">dependencies</span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">(dependency </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">collect</span><span style="color: var(--shiki-color-text)">(dependency</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> modules));</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ak,sn,Ok,Sk,ia,ef=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">$ node output/bundle.js</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">Area of square:  25</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">Area of circle NaN</span></span></code></pre>`,Ck,on,jk,Dk,pa,af=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;index.js&#39;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; default: </span><span style="color: var(--shiki-token-constant)">squareArea</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;square.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 1. require circle.js</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; default: </span><span style="color: var(--shiki-token-constant)">circleArea</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;circle.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 3. define PI on exports</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">squareArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 4. call &#96;circleArea&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circleArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;circle.js&#39;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 2. at the point of executing this, PI is not yet defined</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; PI: </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;index.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// 5. PI is undefined</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.default </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> area;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Mk,I,Lk,ca,Nk,Hk,ha,Gk,Rk,ka,Vk,Jk,va,Bk,Wk,ya,Fk,Uk,da,$k,Kk,ua,Yk,zk,xa,Zk,Qk,Xk,en,sv,ov,fa,tf=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;index.js&#39;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">square_import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;square.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 1. require circle.js</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">circle_import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;circle.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 3. define PI on exports</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> square_import[</span><span style="color: var(--shiki-token-string-expression)">&#39;default&#39;</span><span style="color: var(--shiki-color-text)">](</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 4. call &#96;circleArea&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> circle_import[</span><span style="color: var(--shiki-token-string-expression)">&#39;default&#39;</span><span style="color: var(--shiki-color-text)">](</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;circle.js&#39;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 2. we keep a reference of the &#96;index.js&#96;&#39;s &#96;exports&#96; object</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">index_import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;index.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// 5. we get PI from the &#96;exports&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> index_import[</span><span style="color: var(--shiki-token-string-expression)">&#39;PI&#39;</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.default </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> area;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ev,yo,av,ma,tv,nv,lv,uo,rv,xo,iv,pv,Mn,Q,an,fo,cv,hv,fs,kv,tn,vv,yv,nn,dv,uv,xv,mo,fv,ln,mv,wv,Ln,M,rn,wo,gv,bv,pn,_v,Ev,go,cn,Iv,Pv,hn,Tv,qv,kn,Av,Ov,vn,Sv,Nn,ws,yn,bo,Cv,jv,Z,dn,_o,Dv,Mv,un,Eo,Lv,Nv,xn,Io,Hv,Gv,fn,Po,Rv,Hn;return b=new Yf({props:{data:[{link:"getting-started",title:"Getting Started",nested:[{link:"the-input",title:"The Input"}]},{link:"writing",title:"Writing"},{link:"resolving",title:"Resolving"},{link:"bundling",title:"Bundling",nested:[{link:"grouping-modules-into-files",title:"Grouping modules into files"},{link:"creating-module-map",title:"Creating module map"},{link:"create-the-runtime",title:'Create the "runtime"'}]},{link:"optimisation",title:"Optimisation",nested:[{link:"circular-dependency",title:"Circular dependency"}]},{link:"summary",title:"Summary",nested:[{link:"whats-next",title:"Whats next?"}]},{link:"further-readings",title:"Further Readings"}]}}),{c(){fx(b.$$.fragment),F=i(),T=e("p"),Ts=a("In my "),_=e("a"),U=a("previous article"),qo=a(", I explained how module bundler works. I used "),qs=e("a"),pl=a("webpack"),cl=a(" and "),As=e("a"),hl=a("rollup"),kl=a(" as example, how each of them gave us a different perspective on how we can bundle our JavaScript application."),mn=i(),Ao=e("p"),vl=a("In this article, I am going to show you how I wrote my module bundler. The module bundler itself is not production-ready, yet I learned a ton through the exercise, and I am ever more appreciative of what modern module bundlers have provided."),wn=i(),gn=e("hr"),bn=i(),ms=e("p"),yl=a("\u26A0\uFE0F "),Da=e("strong"),dl=a("Warning: Tons of JavaScript code ahead. \u{1F648}\u{1F631}\u{1F628}"),ul=a(" \u26A0\uFE0F"),_n=i(),En=e("hr"),In=i(),D=e("section"),Ma=e("h2"),Os=e("a"),xl=a("Getting Started"),fl=i(),Ss=e("p"),ml=a("I talked about the input (the JavaScript modules) and the output (the bundled JavaScript file) of a module bundler in "),Oo=e("a"),wl=a("my previous article"),gl=a(". Now it's time to write a module bundler that takes in the input and produces the output."),bl=i(),Cs=e("p"),_l=a("A "),La=e("em"),El=a("basic"),Il=a(" module bundler can be broken down into 2 parts:"),Pl=i(),js=e("ul"),So=e("li"),Tl=a("Understands the code and constructs the dependency graph "),Na=e("strong"),ql=a("(Dependency Resolution)"),Al=i(),Co=e("li"),Ol=a("Assembles the module into a single (or multiple) JavaScript file "),Ha=e("strong"),Sl=a("(Bundle)"),Cl=i(),Ga=e("blockquote"),Ds=e("p"),jl=a("A "),Ra=e("strong"),Dl=a("dependency graph"),Ml=a(" is a graph representation of the dependency relationship between modules."),Pn=i(),O=e("section"),Va=e("h3"),Ms=e("a"),Ll=a("The Input"),Nl=i(),Ja=e("p"),Hl=a("In this article, I will be using following files as my input to the bundler:"),Gl=i(),jo=e("div"),Rl=i(),Do=e("div"),Vl=i(),Mo=e("div"),Jl=i(),$=e("p"),Bl=a("I've created the project on "),Ls=e("a"),Wl=a("Github"),Fl=a(", so if you are interested to try out yourself, you can clone it and checkout the "),Lo=e("code"),Ul=a("fixture-1"),$l=a(" tag. The input files are in the "),No=e("code"),Kl=a("fixture/"),Yl=a(" folder."),Tn=i(),h=e("section"),Ba=e("h2"),Ns=e("a"),zl=a("Writing"),Zl=i(),Wa=e("p"),Ql=a("I started with the main structure of the module bundler:"),Xl=i(),Ho=e("div"),sr=i(),Fa=e("blockquote"),ns=e("p"),or=a("The "),Ua=e("strong"),er=a("dependency graph"),ar=a(" is a "),Hs=e("a"),tr=a("directed graph"),nr=a(", where the vertex is the module, and the directed edge is the dependency relationship between the modules."),lr=i(),Go=e("div"),rr=i(),$a=e("p"),ir=a('So, the entry module is "the root" of the graph.'),pr=i(),ls=e("p"),cr=a("In "),Ro=e("code"),hr=a("createModule"),kr=a(", I instantiate a new "),Vo=e("code"),vr=a("Module"),yr=a(" instance:"),dr=i(),Jo=e("div"),ur=i(),Gs=e("p"),xr=a("The class "),Bo=e("code"),fr=a("Module"),mr=a(" will be used to record module properties, such as the content, the dependencies, exported keys, etc."),wr=i(),Wo=e("div"),gr=i(),K=e("p"),br=a("While the "),Fo=e("code"),_r=a("content"),Er=a(" is the string content of the module, to understand what it actually means, I used "),Rs=e("a"),Ir=a("babel"),Pr=a(" to "),Ka=e("em"),Tr=a("parse the content"),qr=a(" into AST (Abstract Syntax Tree):"),Ar=i(),Uo=e("div"),Or=i(),Ya=e("p"),Sr=a("Next, I need to find out the dependency of this module:"),Cr=i(),$o=e("div"),jr=i(),za=e("p"),Dr=a("So, how can I know what are the dependencies of this module?"),Mr=i(),rs=e("p"),Lr=a("I can look for the "),Ko=e("code"),Nr=a("import"),Hr=a(` statement from the AST with the help of the
`),Vs=e("a"),Gr=a("babel-ast-explorer"),Rr=a("."),Vr=i(),Za=e("p"),is=e("span"),Yo=e("picture"),Qa=e("source"),N=e("img"),Jr=i(),j=e("p"),Br=a("I found out that the "),zo=e("code"),Wr=a("import"),Fr=a(" statement in the AST is called the "),Zo=e("code"),Ur=a("ImportDeclaration"),$r=a(". It has "),Qo=e("code"),Kr=a("specifiers"),Yr=a(" and "),Xo=e("code"),zr=a("source"),Zr=a(", which the "),se=e("code"),Qr=a("source.value"),Xr=a(" tells us what this module is importing from:"),si=i(),oe=e("div"),oi=i(),H=e("p"),ei=a("So I had the path that the module is requesting, but it could be relative to the current file, eg "),ee=e("code"),ai=a('"./foo/bar"'),ti=a(", or from the "),ae=e("code"),ni=a("node_modules"),li=a(", eg: "),te=e("code"),ri=a('"lodash"'),ii=a(". How do I know what is the "),Xa=e("strong"),pi=a("actual file path"),ci=a(" that the module is requesting?"),hi=i(),Js=e("p"),ki=a("The step of figuring out the actual path based on the requested path, is called "),st=e("strong"),vi=a('"Resolving"'),yi=a(":"),di=i(),ne=e("div"),ui=i(),ot=e("p"),et=e("em"),xi=a("Resolving path to the actual file path"),qn=i(),k=e("section"),at=e("h2"),Bs=e("a"),fi=a("Resolving"),mi=i(),ps=e("p"),wi=a(`Let's talk about resolving. We know that "import"ing `),le=e("code"),gi=a("./b.js"),bi=a(" in the following examples will result in getting a different file, because when we specify "),re=e("code"),_i=a("./"),Ei=a(', we are "import"ing relative to the current file.'),Ii=i(),ie=e("div"),Pi=i(),pe=e("div"),Ti=i(),tt=e("p"),qi=a("So, what are the rules of resolving a module?"),Ai=i(),Ws=e("p"),Oi=a("The Node.js documentation has listed out the "),Fs=e("a"),Si=a("detailed step of the module resolving algorithm"),Ci=a(":"),ji=i(),cs=e("p"),Di=a("When we specify a relative path, "),ce=e("code"),Mi=a("./b"),Li=a(", Node.js will first assume that "),he=e("code"),Ni=a("./b"),Hi=a(" is a file, and tries the following extension if it doesn't exactly match the file name:"),Gi=i(),ke=e("div"),Ri=i(),Us=e("p"),Vi=a("If the file does not exist, Node.js will then try to treat "),ve=e("code"),Ji=a("./b"),Bi=a(" as a directory, and try the following:"),Wi=i(),ye=e("div"),Fi=i(),hs=e("p"),Ui=a("If we specify "),de=e("code"),$i=a("import 'b'"),Ki=a(" instead, Node.js will treat it as a package within "),ue=e("code"),Yi=a("node_modules/"),zi=a(", and have a different resolving strategy."),Zi=i(),ks=e("p"),Qi=a("Through the above illustration, we can see that resolving "),xe=e("code"),Xi=a("import './b'"),sp=a(" is not as simple as it seems. Besides the default Node.js resolving behaviour, "),$s=e("a"),op=a("webpack provides a lot more customisation options"),ep=a(", such as custom extensions, alias, modules folders, etc."),ap=i(),Ks=e("p"),tp=a("Here, I am showing you the "),nt=e("em"),np=a('"simplest"'),lp=a(" resolver, which is to resolve relative path only:"),rp=i(),fe=e("div"),ip=i(),lt=e("blockquote"),rt=e("small"),pp=a("**Note:** You should try out writing a full node resolvers that resolve relatively as well as absolutely from `node_modules/`"),cp=i(),it=e("p"),hp=a("Now I know the actual requested file paths, I then create modules out of them."),kp=i(),me=e("div"),vp=i(),pt=e("p"),yp=a("So, for each module, I find their dependencies, parse them, and find each dependency's dependencies, parse them as well, and find their dependencies, and so forth recursively. At the end of the process, I get a module dependency graph that looks something like this:"),dp=i(),we=e("div"),up=i(),G=e("p"),xp=a("The root of the graph is our entry module, and you can traverse the graph through the "),ge=e("code"),fp=a("dependencies"),mp=a(" of the module. As you can see, the "),be=e("code"),wp=a("index.js"),gp=a(" has 2 dependencies, the "),_e=e("code"),bp=a("square.js"),_p=a(" and the "),Ee=e("code"),Ep=a("circle.js"),Ip=a("."),Pp=i(),ct=e("blockquote"),ht=e("small"),Tp=a("**Note:** If you are following along, you can checkout the tag `feat-1-module-dependency-graph`, to see the code that I had written up till this point."),An=i(),P=e("section"),kt=e("h2"),Ys=e("a"),qp=a("Bundling"),Ap=i(),vt=e("p"),Op=a("With the module dependency graph, it's time to bundle them into a file!"),Sp=i(),R=e("p"),Cp=a("At this point in time, we can choose whether we want to bundle it in the "),yt=e("strong"),jp=a('"webpack way"'),Dp=a(" or the "),dt=e("strong"),Mp=a('"rollup way"'),Lp=a(". In this article I am showing you how I did it the "),ut=e("strong"),Np=a('"webpack way"'),Hp=a(". I'll write about bundling in the "),xt=e("strong"),Gp=a('"rollup way"'),Rp=a(" in the coming article."),Vp=i(),ft=e("blockquote"),Y=e("p"),Jp=a("If you have no idea about what is the "),mt=e("strong"),Bp=a('"webpack way"'),Wp=a(" or "),wt=e("strong"),Fp=a('"rollup way"'),Up=a(', I have "coined" the term in my '),Ie=e("a"),$p=a("previous article"),Kp=a(" and have detailed explanation about them!"),Yp=i(),gt=e("p"),zp=a("Let's take a look how the final bundled file would look like:"),Zp=i(),Pe=e("div"),Qp=i(),bt=e("p"),Xp=a("Let's break it down to a few steps:"),sc=i(),vs=e("ul"),_t=e("li"),Et=e("strong"),oc=a("Group modules into files"),ec=i(),Te=e("li"),It=e("strong"),ac=a("Create the module map"),tc=a(' and wrapping each module in a "special" module factory function'),nc=i(),qe=e("li"),Pt=e("strong"),lc=a('Create the "runtime"'),rc=a(", the glue that links each module together."),On=i(),S=e("section"),Tt=e("h3"),zs=e("a"),ic=a("Grouping modules into files"),pc=i(),ys=e("p"),cc=a("This step is to decide which modules goes to which file. We can split modules into different files because of "),Zs=e("a"),hc=a("code splitting"),kc=a(" due to dynamic import as well as optimisation, such as the webpack's "),Qs=e("a"),vc=a("Chunk Splitting"),yc=a("."),dc=i(),qt=e("p"),uc=a("I will support code splitting in the future. For now, I grouped all modules into 1 file."),xc=i(),At=e("p"),fc=a("To collect all the modules from module graph into a list of modules, I did a graph traversal:"),mc=i(),Ae=e("div"),wc=i(),Ot=e("p"),gc=a("...and I used the list of modules to create a module map."),Sn=i(),d=e("section"),St=e("h3"),Xs=e("a"),bc=a("Creating module map"),_c=i(),Ct=e("p"),Ec=a("The module map I created is a string, that would be inlined into the final bundle file."),Ic=i(),ds=e("p"),Pc=a("I looped through each module, and used "),Oe=e("code"),Tc=a("module.filePath"),qc=a(" as the key, and "),Se=e("code"),Ac=a("module.content"),Oc=a(" as the value."),Sc=i(),z=e("p"),Cc=a("The reason I dont use "),Ce=e("code"),jc=a("JSON.stringify(moduleMap)"),Dc=a(" instead of manually concatenating to build up the module map, is because JSON can only takes in "),so=e("a"),Mc=a("JSON primitive data type"),Lc=a(" as value, but what I built here is a JavaScript map, with "),je=e("code"),Nc=a("function"),Hc=a(" as value, but in string."),Gc=i(),De=e("div"),Rc=i(),oo=e("p"),Vc=a("The function that wraps around the "),Me=e("code"),Jc=a("module.content"),Bc=a(" is called the module factory function. It provides 2 parameter to the module:"),Wc=i(),eo=e("ul"),Le=e("li"),Ne=e("code"),Fc=a("exports"),Uc=a(", an object that the module can assign its exported value onto"),$c=i(),He=e("li"),Ge=e("code"),Kc=a("require"),Yc=a(", a function that the module can invoke with module path to import exported value from another module"),zc=i(),jt=e("p"),Zc=a("The module map right now is not something that can be executed:"),Qc=i(),Re=e("div"),Xc=i(),V=e("p"),sh=a("because it still uses "),Ve=e("code"),oh=a("import"),eh=a(" and "),Je=e("code"),ah=a("export"),th=a(". I had to transform them to use the "),Be=e("code"),nh=a("exports"),lh=a(" and "),We=e("code"),rh=a("require"),ih=a(" that we pass in."),ph=i(),Dt=e("p"),ch=a("To transform the code, I used the AST of the module again: trasform the ast and generate the new code from the transformed ast."),hh=i(),Mt=e("p"),kh=a('What I need is to trasform the "from" to "to" of the following:'),vh=i(),Fe=e("div"),yh=i(),Lt=e("blockquote"),ao=e("p"),dh=a("I wrote a "),Ue=e("a"),uh=a("step by step guide"),xh=a(" on how to write babel transformation, please do check it out."),fh=i(),us=e("p"),mh=a("Knowing "),Nt=e("strong"),wh=a("what to target on AST"),gh=a(" and "),Ht=e("strong"),bh=a("how the transformed AST look like"),_h=a(", I wrote my transformation code:"),Eh=i(),$e=e("div"),Ih=i(),Ke=e("p"),Ph=a("I omitted the actual babel transformation code, because it is lengthy. If you are interested to read about it, you can check out "),to=e("a"),Th=a("from my Github repo"),qh=i(),Gt=e("p"),Ah=a("So, now the module map looks ready:"),Oh=i(),Ye=e("div"),Sh=i(),no=e("p"),Ch=a("One thing to take note is that, for the "),ze=e("code"),jh=a("require"),Dh=a(" statements, I replaced the requested path to the actual resolved path, because I used the actual resolved path as the key to the module map."),Cn=i(),w=e("section"),Rt=e("h3"),lo=e("a"),Vt=e("strong"),Mh=a('Create the "runtime"'),Lh=i(),Jt=e("p"),Nh=a("Now it's time to create the runtime. The runtime is a piece of code that is part of the output bundle, that runs when the application code is running, therefore, the runtime."),Hh=i(),Bt=e("p"),Gh=a("The runtime code can be from a template file, but for simplicity sake, I kept the runtime code as a string:"),Rh=i(),Ze=e("div"),Vh=i(),xs=e("p"),Jh=a("The code above is self explanatory, except if you have no idea what does the "),Qe=e("code"),Bh=a("webpackStart()"),Wh=a(" do, you can read more about it in "),Xe=e("a"),Fh=a("my previous post"),Uh=a("."),$h=i(),ro=e("p"),Kh=a("Finally, I returned the module code from the "),sa=e("code"),Yh=a("bundle"),zh=a(" function:"),Zh=i(),oa=e("div"),Qh=i(),io=e("p"),Xh=a("Now I run my bundler, it generates a "),ea=e("code"),sk=a("output/bundle.js"),ok=a(" file. I run the generated file with node and I see:"),ek=i(),aa=e("div"),ak=i(),Wt=e("p"),tk=a("That's it! A working module bundler!"),nk=i(),po=e("p"),lk=a("Of course, the module bundler I've shown here is "),Ft=e("strong"),rk=a("nowhere near webpack"),ik=a(". Webpack supports more module system, resolving strategies, loading strategies, plugin system, optimisation, and many many more."),jn=i(),q=e("section"),Ut=e("h2"),co=e("a"),pk=a("Optimisation"),ck=i(),ho=e("p"),hk=a("I played around my module bundler, and I quickly noticed a bug: "),$t=e("strong"),kk=a("Circular Dependency"),vk=a("."),yk=i(),Kt=e("p"),dk=a("Here's my input files that I've tweaked:"),uk=i(),ta=e("div"),xk=i(),na=e("div"),fk=i(),Yt=e("p"),mk=a("When I ran it through my module bunlder, immediately it ran into a stack overflow:"),wk=i(),la=e("div"),Dn=i(),m=e("section"),zt=e("h3"),ko=e("a"),gk=a("Circular dependency"),bk=i(),Zt=e("p"),_k=a("There were 2 junctures that the code did recursive traversal which have led to the endless loop:"),Ek=i(),vo=e("ul"),Qt=e("li"),Ik=a("Generating dependency graphs"),Pk=i(),Xt=e("li"),Tk=a("Traversing module graph for bundling"),qk=i(),ra=e("div"),Ak=i(),sn=e("p"),Ok=a("Bundle with the latest code, the stack overflow is gone. However when I executed the output bundle, I saw"),Sk=i(),ia=e("div"),Ck=i(),on=e("p"),jk=a("So I took a look at the output bundle:"),Dk=i(),pa=e("div"),Mk=i(),I=e("p"),Lk=a("So, the problem is that I destructed "),ca=e("code"),Nk=a("PI"),Hk=a(" from the exports of "),ha=e("code"),Gk=a("index.js"),Rk=a(" before it is defined, so naturally "),ka=e("code"),Vk=a("PI"),Jk=a(" within "),va=e("code"),Bk=a("circle.js"),Wk=a(" would stay as "),ya=e("code"),Fk=a("undefined"),Uk=a(" throughout the application. However before I called "),da=e("code"),$k=a("circleArea"),Kk=a(", we defined "),ua=e("code"),Yk=a("PI"),zk=a(" on the "),xa=e("code"),Zk=a("index.js"),Qk=a("'s export, I am expecting it to be available."),Xk=i(),en=e("p"),sv=a("So I built my application with webpack and took a look at how webpack solved this problem."),ov=i(),fa=e("div"),ev=i(),yo=e("p"),av=a("Brilliant! The key is to lazily get the value of "),ma=e("code"),tv=a("PI"),nv=a(" when needed!"),lv=i(),uo=e("p"),rv=a("I changed my babel transformation code, which I am not showing it here. If you are curious enough, you can check out "),xo=e("a"),iv=a("the changes I made from Github"),pv=a("."),Mn=i(),Q=e("section"),an=e("h2"),fo=e("a"),cv=a("Summary"),hv=i(),fs=e("p"),kv=a("There's two phases in module bundling: "),tn=e("strong"),vv=a("Dependency Resolution"),yv=a(" and "),nn=e("strong"),dv=a("Bundling"),uv=a("."),xv=i(),mo=e("p"),fv=a("I showed you how I constructed the dependency graph, by finding import statements and resolving modules. I shared how I created module maps and transformed the imports / exports syntax during "),ln=e("strong"),mv=a("bundling"),wv=a(". Lastly, I fixed the circular dependency bug that was in the first version of my module bundler."),Ln=i(),M=e("section"),rn=e("h3"),wo=e("a"),gv=a("Whats next?"),bv=i(),pn=e("p"),_v=a("I have a few ideas that I will add to my module bundler, such as:"),Ev=i(),go=e("ul"),cn=e("li"),Iv=a("code spliting"),Pv=i(),hn=e("li"),Tv=a("watch mode and reloading"),qv=i(),kn=e("p"),Av=a("which I will cover them in my next article when they are ready."),Ov=i(),vn=e("p"),Sv=a("Till then. Cheers. \u{1F60E}"),Nn=i(),ws=e("section"),yn=e("h2"),bo=e("a"),Cv=a("Further Readings"),jv=i(),Z=e("ul"),dn=e("li"),_o=e("a"),Dv=a("Ronen Amiel, Build Your Own Webpack - You Gotta Love Frontend 2018"),Mv=i(),un=e("li"),Eo=e("a"),Lv=a("Luciano Mammino, Unbundling the JavaScript module bundler - DublinJS July 2018"),Nv=i(),xn=e("li"),Io=e("a"),Hv=a("Adam Kelly, Let\u2019s learn how module bundlers work and then write one ourselves"),Gv=i(),fn=e("li"),Po=e("a"),Rv=a("Webpack founder Tobias Koppers demos bundling live by hand"),this.h()},l(c){mx(b.$$.fragment,c),F=p(c),T=t(c,"P",{});var v=l(T);Ts=n(v,"In my "),_=t(v,"A",{href:!0});var Zv=l(_);U=n(Zv,"previous article"),Zv.forEach(o),qo=n(v,", I explained how module bundler works. I used "),qs=t(v,"A",{href:!0,rel:!0});var Qv=l(qs);pl=n(Qv,"webpack"),Qv.forEach(o),cl=n(v," and "),As=t(v,"A",{href:!0,rel:!0});var Xv=l(As);hl=n(Xv,"rollup"),Xv.forEach(o),kl=n(v," as example, how each of them gave us a different perspective on how we can bundle our JavaScript application."),v.forEach(o),mn=p(c),Ao=t(c,"P",{});var sy=l(Ao);vl=n(sy,"In this article, I am going to show you how I wrote my module bundler. The module bundler itself is not production-ready, yet I learned a ton through the exercise, and I am ever more appreciative of what modern module bundlers have provided."),sy.forEach(o),wn=p(c),gn=t(c,"HR",{}),bn=p(c),ms=t(c,"P",{});var Gn=l(ms);yl=n(Gn,"\u26A0\uFE0F "),Da=t(Gn,"STRONG",{});var oy=l(Da);dl=n(oy,"Warning: Tons of JavaScript code ahead. \u{1F648}\u{1F631}\u{1F628}"),oy.forEach(o),ul=n(Gn," \u26A0\uFE0F"),Gn.forEach(o),_n=p(c),En=t(c,"HR",{}),In=p(c),D=t(c,"SECTION",{});var X=l(D);Ma=t(X,"H2",{});var ey=l(Ma);Os=t(ey,"A",{href:!0,id:!0});var ay=l(Os);xl=n(ay,"Getting Started"),ay.forEach(o),ey.forEach(o),fl=p(X),Ss=t(X,"P",{});var Rn=l(Ss);ml=n(Rn,"I talked about the input (the JavaScript modules) and the output (the bundled JavaScript file) of a module bundler in "),Oo=t(Rn,"A",{href:!0});var ty=l(Oo);wl=n(ty,"my previous article"),ty.forEach(o),gl=n(Rn,". Now it's time to write a module bundler that takes in the input and produces the output."),Rn.forEach(o),bl=p(X),Cs=t(X,"P",{});var Vn=l(Cs);_l=n(Vn,"A "),La=t(Vn,"EM",{});var ny=l(La);El=n(ny,"basic"),ny.forEach(o),Il=n(Vn," module bundler can be broken down into 2 parts:"),Vn.forEach(o),Pl=p(X),js=t(X,"UL",{});var Jn=l(js);So=t(Jn,"LI",{});var Vv=l(So);Tl=n(Vv,"Understands the code and constructs the dependency graph "),Na=t(Vv,"STRONG",{});var ly=l(Na);ql=n(ly,"(Dependency Resolution)"),ly.forEach(o),Vv.forEach(o),Al=p(Jn),Co=t(Jn,"LI",{});var Jv=l(Co);Ol=n(Jv,"Assembles the module into a single (or multiple) JavaScript file "),Ha=t(Jv,"STRONG",{});var ry=l(Ha);Sl=n(ry,"(Bundle)"),ry.forEach(o),Jv.forEach(o),Jn.forEach(o),Cl=p(X),Ga=t(X,"BLOCKQUOTE",{});var iy=l(Ga);Ds=t(iy,"P",{});var Bn=l(Ds);jl=n(Bn,"A "),Ra=t(Bn,"STRONG",{});var py=l(Ra);Dl=n(py,"dependency graph"),py.forEach(o),Ml=n(Bn," is a graph representation of the dependency relationship between modules."),Bn.forEach(o),iy.forEach(o),X.forEach(o),Pn=p(c),O=t(c,"SECTION",{});var J=l(O);Va=t(J,"H3",{});var cy=l(Va);Ms=t(cy,"A",{href:!0,id:!0});var hy=l(Ms);Ll=n(hy,"The Input"),hy.forEach(o),cy.forEach(o),Nl=p(J),Ja=t(J,"P",{});var ky=l(Ja);Hl=n(ky,"In this article, I will be using following files as my input to the bundler:"),ky.forEach(o),Gl=p(J),jo=t(J,"DIV",{class:!0});var nf=l(jo);nf.forEach(o),Rl=p(J),Do=t(J,"DIV",{class:!0});var lf=l(Do);lf.forEach(o),Vl=p(J),Mo=t(J,"DIV",{class:!0});var rf=l(Mo);rf.forEach(o),Jl=p(J),$=t(J,"P",{});var gs=l($);Bl=n(gs,"I've created the project on "),Ls=t(gs,"A",{href:!0,rel:!0});var vy=l(Ls);Wl=n(vy,"Github"),vy.forEach(o),Fl=n(gs,", so if you are interested to try out yourself, you can clone it and checkout the "),Lo=t(gs,"CODE",{class:!0});var yy=l(Lo);Ul=n(yy,"fixture-1"),yy.forEach(o),$l=n(gs," tag. The input files are in the "),No=t(gs,"CODE",{class:!0});var dy=l(No);Kl=n(dy,"fixture/"),dy.forEach(o),Yl=n(gs," folder."),gs.forEach(o),J.forEach(o),Tn=p(c),h=t(c,"SECTION",{});var y=l(h);Ba=t(y,"H2",{});var uy=l(Ba);Ns=t(uy,"A",{href:!0,id:!0});var xy=l(Ns);zl=n(xy,"Writing"),xy.forEach(o),uy.forEach(o),Zl=p(y),Wa=t(y,"P",{});var fy=l(Wa);Ql=n(fy,"I started with the main structure of the module bundler:"),fy.forEach(o),Xl=p(y),Ho=t(y,"DIV",{class:!0});var pf=l(Ho);pf.forEach(o),sr=p(y),Fa=t(y,"BLOCKQUOTE",{});var my=l(Fa);ns=t(my,"P",{});var wa=l(ns);or=n(wa,"The "),Ua=t(wa,"STRONG",{});var wy=l(Ua);er=n(wy,"dependency graph"),wy.forEach(o),ar=n(wa," is a "),Hs=t(wa,"A",{href:!0,rel:!0});var gy=l(Hs);tr=n(gy,"directed graph"),gy.forEach(o),nr=n(wa,", where the vertex is the module, and the directed edge is the dependency relationship between the modules."),wa.forEach(o),my.forEach(o),lr=p(y),Go=t(y,"DIV",{class:!0});var cf=l(Go);cf.forEach(o),rr=p(y),$a=t(y,"P",{});var by=l($a);ir=n(by,'So, the entry module is "the root" of the graph.'),by.forEach(o),pr=p(y),ls=t(y,"P",{});var ga=l(ls);cr=n(ga,"In "),Ro=t(ga,"CODE",{class:!0});var _y=l(Ro);hr=n(_y,"createModule"),_y.forEach(o),kr=n(ga,", I instantiate a new "),Vo=t(ga,"CODE",{class:!0});var Ey=l(Vo);vr=n(Ey,"Module"),Ey.forEach(o),yr=n(ga," instance:"),ga.forEach(o),dr=p(y),Jo=t(y,"DIV",{class:!0});var hf=l(Jo);hf.forEach(o),ur=p(y),Gs=t(y,"P",{});var Wn=l(Gs);xr=n(Wn,"The class "),Bo=t(Wn,"CODE",{class:!0});var Iy=l(Bo);fr=n(Iy,"Module"),Iy.forEach(o),mr=n(Wn," will be used to record module properties, such as the content, the dependencies, exported keys, etc."),Wn.forEach(o),wr=p(y),Wo=t(y,"DIV",{class:!0});var kf=l(Wo);kf.forEach(o),gr=p(y),K=t(y,"P",{});var bs=l(K);br=n(bs,"While the "),Fo=t(bs,"CODE",{class:!0});var Py=l(Fo);_r=n(Py,"content"),Py.forEach(o),Er=n(bs," is the string content of the module, to understand what it actually means, I used "),Rs=t(bs,"A",{href:!0,rel:!0});var Ty=l(Rs);Ir=n(Ty,"babel"),Ty.forEach(o),Pr=n(bs," to "),Ka=t(bs,"EM",{});var qy=l(Ka);Tr=n(qy,"parse the content"),qy.forEach(o),qr=n(bs," into AST (Abstract Syntax Tree):"),bs.forEach(o),Ar=p(y),Uo=t(y,"DIV",{class:!0});var vf=l(Uo);vf.forEach(o),Or=p(y),Ya=t(y,"P",{});var Ay=l(Ya);Sr=n(Ay,"Next, I need to find out the dependency of this module:"),Ay.forEach(o),Cr=p(y),$o=t(y,"DIV",{class:!0});var yf=l($o);yf.forEach(o),jr=p(y),za=t(y,"P",{});var Oy=l(za);Dr=n(Oy,"So, how can I know what are the dependencies of this module?"),Oy.forEach(o),Mr=p(y),rs=t(y,"P",{});var ba=l(rs);Lr=n(ba,"I can look for the "),Ko=t(ba,"CODE",{class:!0});var Sy=l(Ko);Nr=n(Sy,"import"),Sy.forEach(o),Hr=n(ba,` statement from the AST with the help of the
`),Vs=t(ba,"A",{href:!0,rel:!0});var Cy=l(Vs);Gr=n(Cy,"babel-ast-explorer"),Cy.forEach(o),Rr=n(ba,"."),ba.forEach(o),Vr=p(y),Za=t(y,"P",{});var jy=l(Za);is=t(jy,"SPAN",{style:!0});var Dy=l(is);Yo=t(Dy,"PICTURE",{});var Bv=l(Yo);Qa=t(Bv,"SOURCE",{type:!0,srcset:!0}),N=t(Bv,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0,title:!0}),Bv.forEach(o),Dy.forEach(o),jy.forEach(o),Jr=p(y),j=t(y,"P",{});var B=l(j);Br=n(B,"I found out that the "),zo=t(B,"CODE",{class:!0});var My=l(zo);Wr=n(My,"import"),My.forEach(o),Fr=n(B," statement in the AST is called the "),Zo=t(B,"CODE",{class:!0});var Ly=l(Zo);Ur=n(Ly,"ImportDeclaration"),Ly.forEach(o),$r=n(B,". It has "),Qo=t(B,"CODE",{class:!0});var Ny=l(Qo);Kr=n(Ny,"specifiers"),Ny.forEach(o),Yr=n(B," and "),Xo=t(B,"CODE",{class:!0});var Hy=l(Xo);zr=n(Hy,"source"),Hy.forEach(o),Zr=n(B,", which the "),se=t(B,"CODE",{class:!0});var Gy=l(se);Qr=n(Gy,"source.value"),Gy.forEach(o),Xr=n(B," tells us what this module is importing from:"),B.forEach(o),si=p(y),oe=t(y,"DIV",{class:!0});var df=l(oe);df.forEach(o),oi=p(y),H=t(y,"P",{});var ss=l(H);ei=n(ss,"So I had the path that the module is requesting, but it could be relative to the current file, eg "),ee=t(ss,"CODE",{class:!0});var Ry=l(ee);ai=n(Ry,'"./foo/bar"'),Ry.forEach(o),ti=n(ss,", or from the "),ae=t(ss,"CODE",{class:!0});var Vy=l(ae);ni=n(Vy,"node_modules"),Vy.forEach(o),li=n(ss,", eg: "),te=t(ss,"CODE",{class:!0});var Jy=l(te);ri=n(Jy,'"lodash"'),Jy.forEach(o),ii=n(ss,". How do I know what is the "),Xa=t(ss,"STRONG",{});var By=l(Xa);pi=n(By,"actual file path"),By.forEach(o),ci=n(ss," that the module is requesting?"),ss.forEach(o),hi=p(y),Js=t(y,"P",{});var Fn=l(Js);ki=n(Fn,"The step of figuring out the actual path based on the requested path, is called "),st=t(Fn,"STRONG",{});var Wy=l(st);vi=n(Wy,'"Resolving"'),Wy.forEach(o),yi=n(Fn,":"),Fn.forEach(o),di=p(y),ne=t(y,"DIV",{class:!0});var uf=l(ne);uf.forEach(o),ui=p(y),ot=t(y,"P",{});var Fy=l(ot);et=t(Fy,"EM",{});var Uy=l(et);xi=n(Uy,"Resolving path to the actual file path"),Uy.forEach(o),Fy.forEach(o),y.forEach(o),qn=p(c),k=t(c,"SECTION",{});var u=l(k);at=t(u,"H2",{});var $y=l(at);Bs=t($y,"A",{href:!0,id:!0});var Ky=l(Bs);fi=n(Ky,"Resolving"),Ky.forEach(o),$y.forEach(o),mi=p(u),ps=t(u,"P",{});var _a=l(ps);wi=n(_a,`Let's talk about resolving. We know that "import"ing `),le=t(_a,"CODE",{class:!0});var Yy=l(le);gi=n(Yy,"./b.js"),Yy.forEach(o),bi=n(_a," in the following examples will result in getting a different file, because when we specify "),re=t(_a,"CODE",{class:!0});var zy=l(re);_i=n(zy,"./"),zy.forEach(o),Ei=n(_a,', we are "import"ing relative to the current file.'),_a.forEach(o),Ii=p(u),ie=t(u,"DIV",{class:!0});var xf=l(ie);xf.forEach(o),Pi=p(u),pe=t(u,"DIV",{class:!0});var ff=l(pe);ff.forEach(o),Ti=p(u),tt=t(u,"P",{});var Zy=l(tt);qi=n(Zy,"So, what are the rules of resolving a module?"),Zy.forEach(o),Ai=p(u),Ws=t(u,"P",{});var Un=l(Ws);Oi=n(Un,"The Node.js documentation has listed out the "),Fs=t(Un,"A",{href:!0,rel:!0});var Qy=l(Fs);Si=n(Qy,"detailed step of the module resolving algorithm"),Qy.forEach(o),Ci=n(Un,":"),Un.forEach(o),ji=p(u),cs=t(u,"P",{});var Ea=l(cs);Di=n(Ea,"When we specify a relative path, "),ce=t(Ea,"CODE",{class:!0});var Xy=l(ce);Mi=n(Xy,"./b"),Xy.forEach(o),Li=n(Ea,", Node.js will first assume that "),he=t(Ea,"CODE",{class:!0});var sd=l(he);Ni=n(sd,"./b"),sd.forEach(o),Hi=n(Ea," is a file, and tries the following extension if it doesn't exactly match the file name:"),Ea.forEach(o),Gi=p(u),ke=t(u,"DIV",{class:!0});var mf=l(ke);mf.forEach(o),Ri=p(u),Us=t(u,"P",{});var $n=l(Us);Vi=n($n,"If the file does not exist, Node.js will then try to treat "),ve=t($n,"CODE",{class:!0});var od=l(ve);Ji=n(od,"./b"),od.forEach(o),Bi=n($n," as a directory, and try the following:"),$n.forEach(o),Wi=p(u),ye=t(u,"DIV",{class:!0});var wf=l(ye);wf.forEach(o),Fi=p(u),hs=t(u,"P",{});var Ia=l(hs);Ui=n(Ia,"If we specify "),de=t(Ia,"CODE",{class:!0});var ed=l(de);$i=n(ed,"import 'b'"),ed.forEach(o),Ki=n(Ia," instead, Node.js will treat it as a package within "),ue=t(Ia,"CODE",{class:!0});var ad=l(ue);Yi=n(ad,"node_modules/"),ad.forEach(o),zi=n(Ia,", and have a different resolving strategy."),Ia.forEach(o),Zi=p(u),ks=t(u,"P",{});var Pa=l(ks);Qi=n(Pa,"Through the above illustration, we can see that resolving "),xe=t(Pa,"CODE",{class:!0});var td=l(xe);Xi=n(td,"import './b'"),td.forEach(o),sp=n(Pa," is not as simple as it seems. Besides the default Node.js resolving behaviour, "),$s=t(Pa,"A",{href:!0,rel:!0});var nd=l($s);op=n(nd,"webpack provides a lot more customisation options"),nd.forEach(o),ep=n(Pa,", such as custom extensions, alias, modules folders, etc."),Pa.forEach(o),ap=p(u),Ks=t(u,"P",{});var Kn=l(Ks);tp=n(Kn,"Here, I am showing you the "),nt=t(Kn,"EM",{});var ld=l(nt);np=n(ld,'"simplest"'),ld.forEach(o),lp=n(Kn," resolver, which is to resolve relative path only:"),Kn.forEach(o),rp=p(u),fe=t(u,"DIV",{class:!0});var gf=l(fe);gf.forEach(o),ip=p(u),lt=t(u,"BLOCKQUOTE",{});var rd=l(lt);rt=t(rd,"SMALL",{});var id=l(rt);pp=n(id,"**Note:** You should try out writing a full node resolvers that resolve relatively as well as absolutely from `node_modules/`"),id.forEach(o),rd.forEach(o),cp=p(u),it=t(u,"P",{});var pd=l(it);hp=n(pd,"Now I know the actual requested file paths, I then create modules out of them."),pd.forEach(o),kp=p(u),me=t(u,"DIV",{class:!0});var bf=l(me);bf.forEach(o),vp=p(u),pt=t(u,"P",{});var cd=l(pt);yp=n(cd,"So, for each module, I find their dependencies, parse them, and find each dependency's dependencies, parse them as well, and find their dependencies, and so forth recursively. At the end of the process, I get a module dependency graph that looks something like this:"),cd.forEach(o),dp=p(u),we=t(u,"DIV",{class:!0});var _f=l(we);_f.forEach(o),up=p(u),G=t(u,"P",{});var os=l(G);xp=n(os,"The root of the graph is our entry module, and you can traverse the graph through the "),ge=t(os,"CODE",{class:!0});var hd=l(ge);fp=n(hd,"dependencies"),hd.forEach(o),mp=n(os," of the module. As you can see, the "),be=t(os,"CODE",{class:!0});var kd=l(be);wp=n(kd,"index.js"),kd.forEach(o),gp=n(os," has 2 dependencies, the "),_e=t(os,"CODE",{class:!0});var vd=l(_e);bp=n(vd,"square.js"),vd.forEach(o),_p=n(os," and the "),Ee=t(os,"CODE",{class:!0});var yd=l(Ee);Ep=n(yd,"circle.js"),yd.forEach(o),Ip=n(os,"."),os.forEach(o),Pp=p(u),ct=t(u,"BLOCKQUOTE",{});var dd=l(ct);ht=t(dd,"SMALL",{});var ud=l(ht);Tp=n(ud,"**Note:** If you are following along, you can checkout the tag `feat-1-module-dependency-graph`, to see the code that I had written up till this point."),ud.forEach(o),dd.forEach(o),u.forEach(o),An=p(c),P=t(c,"SECTION",{});var C=l(P);kt=t(C,"H2",{});var xd=l(kt);Ys=t(xd,"A",{href:!0,id:!0});var fd=l(Ys);qp=n(fd,"Bundling"),fd.forEach(o),xd.forEach(o),Ap=p(C),vt=t(C,"P",{});var md=l(vt);Op=n(md,"With the module dependency graph, it's time to bundle them into a file!"),md.forEach(o),Sp=p(C),R=t(C,"P",{});var es=l(R);Cp=n(es,"At this point in time, we can choose whether we want to bundle it in the "),yt=t(es,"STRONG",{});var wd=l(yt);jp=n(wd,'"webpack way"'),wd.forEach(o),Dp=n(es," or the "),dt=t(es,"STRONG",{});var gd=l(dt);Mp=n(gd,'"rollup way"'),gd.forEach(o),Lp=n(es,". In this article I am showing you how I did it the "),ut=t(es,"STRONG",{});var bd=l(ut);Np=n(bd,'"webpack way"'),bd.forEach(o),Hp=n(es,". I'll write about bundling in the "),xt=t(es,"STRONG",{});var _d=l(xt);Gp=n(_d,'"rollup way"'),_d.forEach(o),Rp=n(es," in the coming article."),es.forEach(o),Vp=p(C),ft=t(C,"BLOCKQUOTE",{});var Ed=l(ft);Y=t(Ed,"P",{});var _s=l(Y);Jp=n(_s,"If you have no idea about what is the "),mt=t(_s,"STRONG",{});var Id=l(mt);Bp=n(Id,'"webpack way"'),Id.forEach(o),Wp=n(_s," or "),wt=t(_s,"STRONG",{});var Pd=l(wt);Fp=n(Pd,'"rollup way"'),Pd.forEach(o),Up=n(_s,', I have "coined" the term in my '),Ie=t(_s,"A",{href:!0});var Td=l(Ie);$p=n(Td,"previous article"),Td.forEach(o),Kp=n(_s," and have detailed explanation about them!"),_s.forEach(o),Ed.forEach(o),Yp=p(C),gt=t(C,"P",{});var qd=l(gt);zp=n(qd,"Let's take a look how the final bundled file would look like:"),qd.forEach(o),Zp=p(C),Pe=t(C,"DIV",{class:!0});var Ef=l(Pe);Ef.forEach(o),Qp=p(C),bt=t(C,"P",{});var Ad=l(bt);Xp=n(Ad,"Let's break it down to a few steps:"),Ad.forEach(o),sc=p(C),vs=t(C,"UL",{});var Ta=l(vs);_t=t(Ta,"LI",{});var Od=l(_t);Et=t(Od,"STRONG",{});var Sd=l(Et);oc=n(Sd,"Group modules into files"),Sd.forEach(o),Od.forEach(o),ec=p(Ta),Te=t(Ta,"LI",{});var Wv=l(Te);It=t(Wv,"STRONG",{});var Cd=l(It);ac=n(Cd,"Create the module map"),Cd.forEach(o),tc=n(Wv,' and wrapping each module in a "special" module factory function'),Wv.forEach(o),nc=p(Ta),qe=t(Ta,"LI",{});var Fv=l(qe);Pt=t(Fv,"STRONG",{});var jd=l(Pt);lc=n(jd,'Create the "runtime"'),jd.forEach(o),rc=n(Fv,", the glue that links each module together."),Fv.forEach(o),Ta.forEach(o),C.forEach(o),On=p(c),S=t(c,"SECTION",{});var W=l(S);Tt=t(W,"H3",{});var Dd=l(Tt);zs=t(Dd,"A",{href:!0,id:!0});var Md=l(zs);ic=n(Md,"Grouping modules into files"),Md.forEach(o),Dd.forEach(o),pc=p(W),ys=t(W,"P",{});var qa=l(ys);cc=n(qa,"This step is to decide which modules goes to which file. We can split modules into different files because of "),Zs=t(qa,"A",{href:!0,rel:!0});var Ld=l(Zs);hc=n(Ld,"code splitting"),Ld.forEach(o),kc=n(qa," due to dynamic import as well as optimisation, such as the webpack's "),Qs=t(qa,"A",{href:!0,rel:!0});var Nd=l(Qs);vc=n(Nd,"Chunk Splitting"),Nd.forEach(o),yc=n(qa,"."),qa.forEach(o),dc=p(W),qt=t(W,"P",{});var Hd=l(qt);uc=n(Hd,"I will support code splitting in the future. For now, I grouped all modules into 1 file."),Hd.forEach(o),xc=p(W),At=t(W,"P",{});var Gd=l(At);fc=n(Gd,"To collect all the modules from module graph into a list of modules, I did a graph traversal:"),Gd.forEach(o),mc=p(W),Ae=t(W,"DIV",{class:!0});var If=l(Ae);If.forEach(o),wc=p(W),Ot=t(W,"P",{});var Rd=l(Ot);gc=n(Rd,"...and I used the list of modules to create a module map."),Rd.forEach(o),W.forEach(o),Sn=p(c),d=t(c,"SECTION",{});var x=l(d);St=t(x,"H3",{});var Vd=l(St);Xs=t(Vd,"A",{href:!0,id:!0});var Jd=l(Xs);bc=n(Jd,"Creating module map"),Jd.forEach(o),Vd.forEach(o),_c=p(x),Ct=t(x,"P",{});var Bd=l(Ct);Ec=n(Bd,"The module map I created is a string, that would be inlined into the final bundle file."),Bd.forEach(o),Ic=p(x),ds=t(x,"P",{});var Aa=l(ds);Pc=n(Aa,"I looped through each module, and used "),Oe=t(Aa,"CODE",{class:!0});var Wd=l(Oe);Tc=n(Wd,"module.filePath"),Wd.forEach(o),qc=n(Aa," as the key, and "),Se=t(Aa,"CODE",{class:!0});var Fd=l(Se);Ac=n(Fd,"module.content"),Fd.forEach(o),Oc=n(Aa," as the value."),Aa.forEach(o),Sc=p(x),z=t(x,"P",{});var Es=l(z);Cc=n(Es,"The reason I dont use "),Ce=t(Es,"CODE",{class:!0});var Ud=l(Ce);jc=n(Ud,"JSON.stringify(moduleMap)"),Ud.forEach(o),Dc=n(Es," instead of manually concatenating to build up the module map, is because JSON can only takes in "),so=t(Es,"A",{href:!0,rel:!0});var $d=l(so);Mc=n($d,"JSON primitive data type"),$d.forEach(o),Lc=n(Es," as value, but what I built here is a JavaScript map, with "),je=t(Es,"CODE",{class:!0});var Kd=l(je);Nc=n(Kd,"function"),Kd.forEach(o),Hc=n(Es," as value, but in string."),Es.forEach(o),Gc=p(x),De=t(x,"DIV",{class:!0});var Pf=l(De);Pf.forEach(o),Rc=p(x),oo=t(x,"P",{});var Yn=l(oo);Vc=n(Yn,"The function that wraps around the "),Me=t(Yn,"CODE",{class:!0});var Yd=l(Me);Jc=n(Yd,"module.content"),Yd.forEach(o),Bc=n(Yn," is called the module factory function. It provides 2 parameter to the module:"),Yn.forEach(o),Wc=p(x),eo=t(x,"UL",{});var zn=l(eo);Le=t(zn,"LI",{});var Uv=l(Le);Ne=t(Uv,"CODE",{class:!0});var zd=l(Ne);Fc=n(zd,"exports"),zd.forEach(o),Uc=n(Uv,", an object that the module can assign its exported value onto"),Uv.forEach(o),$c=p(zn),He=t(zn,"LI",{});var $v=l(He);Ge=t($v,"CODE",{class:!0});var Zd=l(Ge);Kc=n(Zd,"require"),Zd.forEach(o),Yc=n($v,", a function that the module can invoke with module path to import exported value from another module"),$v.forEach(o),zn.forEach(o),zc=p(x),jt=t(x,"P",{});var Qd=l(jt);Zc=n(Qd,"The module map right now is not something that can be executed:"),Qd.forEach(o),Qc=p(x),Re=t(x,"DIV",{class:!0});var Tf=l(Re);Tf.forEach(o),Xc=p(x),V=t(x,"P",{});var as=l(V);sh=n(as,"because it still uses "),Ve=t(as,"CODE",{class:!0});var Xd=l(Ve);oh=n(Xd,"import"),Xd.forEach(o),eh=n(as," and "),Je=t(as,"CODE",{class:!0});var su=l(Je);ah=n(su,"export"),su.forEach(o),th=n(as,". I had to transform them to use the "),Be=t(as,"CODE",{class:!0});var ou=l(Be);nh=n(ou,"exports"),ou.forEach(o),lh=n(as," and "),We=t(as,"CODE",{class:!0});var eu=l(We);rh=n(eu,"require"),eu.forEach(o),ih=n(as," that we pass in."),as.forEach(o),ph=p(x),Dt=t(x,"P",{});var au=l(Dt);ch=n(au,"To transform the code, I used the AST of the module again: trasform the ast and generate the new code from the transformed ast."),au.forEach(o),hh=p(x),Mt=t(x,"P",{});var tu=l(Mt);kh=n(tu,'What I need is to trasform the "from" to "to" of the following:'),tu.forEach(o),vh=p(x),Fe=t(x,"DIV",{class:!0});var qf=l(Fe);qf.forEach(o),yh=p(x),Lt=t(x,"BLOCKQUOTE",{});var nu=l(Lt);ao=t(nu,"P",{});var Zn=l(ao);dh=n(Zn,"I wrote a "),Ue=t(Zn,"A",{href:!0});var lu=l(Ue);uh=n(lu,"step by step guide"),lu.forEach(o),xh=n(Zn," on how to write babel transformation, please do check it out."),Zn.forEach(o),nu.forEach(o),fh=p(x),us=t(x,"P",{});var Oa=l(us);mh=n(Oa,"Knowing "),Nt=t(Oa,"STRONG",{});var ru=l(Nt);wh=n(ru,"what to target on AST"),ru.forEach(o),gh=n(Oa," and "),Ht=t(Oa,"STRONG",{});var iu=l(Ht);bh=n(iu,"how the transformed AST look like"),iu.forEach(o),_h=n(Oa,", I wrote my transformation code:"),Oa.forEach(o),Eh=p(x),$e=t(x,"DIV",{class:!0});var Af=l($e);Af.forEach(o),Ih=p(x),Ke=t(x,"P",{});var Kv=l(Ke);Ph=n(Kv,"I omitted the actual babel transformation code, because it is lengthy. If you are interested to read about it, you can check out "),to=t(Kv,"A",{href:!0,rel:!0});var pu=l(to);Th=n(pu,"from my Github repo"),pu.forEach(o),Kv.forEach(o),qh=p(x),Gt=t(x,"P",{});var cu=l(Gt);Ah=n(cu,"So, now the module map looks ready:"),cu.forEach(o),Oh=p(x),Ye=t(x,"DIV",{class:!0});var Of=l(Ye);Of.forEach(o),Sh=p(x),no=t(x,"P",{});var Qn=l(no);Ch=n(Qn,"One thing to take note is that, for the "),ze=t(Qn,"CODE",{class:!0});var hu=l(ze);jh=n(hu,"require"),hu.forEach(o),Dh=n(Qn," statements, I replaced the requested path to the actual resolved path, because I used the actual resolved path as the key to the module map."),Qn.forEach(o),x.forEach(o),Cn=p(c),w=t(c,"SECTION",{});var E=l(w);Rt=t(E,"H3",{});var ku=l(Rt);lo=t(ku,"A",{href:!0,id:!0});var vu=l(lo);Vt=t(vu,"STRONG",{});var yu=l(Vt);Mh=n(yu,'Create the "runtime"'),yu.forEach(o),vu.forEach(o),ku.forEach(o),Lh=p(E),Jt=t(E,"P",{});var du=l(Jt);Nh=n(du,"Now it's time to create the runtime. The runtime is a piece of code that is part of the output bundle, that runs when the application code is running, therefore, the runtime."),du.forEach(o),Hh=p(E),Bt=t(E,"P",{});var uu=l(Bt);Gh=n(uu,"The runtime code can be from a template file, but for simplicity sake, I kept the runtime code as a string:"),uu.forEach(o),Rh=p(E),Ze=t(E,"DIV",{class:!0});var Sf=l(Ze);Sf.forEach(o),Vh=p(E),xs=t(E,"P",{});var Sa=l(xs);Jh=n(Sa,"The code above is self explanatory, except if you have no idea what does the "),Qe=t(Sa,"CODE",{class:!0});var xu=l(Qe);Bh=n(xu,"webpackStart()"),xu.forEach(o),Wh=n(Sa," do, you can read more about it in "),Xe=t(Sa,"A",{href:!0});var fu=l(Xe);Fh=n(fu,"my previous post"),fu.forEach(o),Uh=n(Sa,"."),Sa.forEach(o),$h=p(E),ro=t(E,"P",{});var Xn=l(ro);Kh=n(Xn,"Finally, I returned the module code from the "),sa=t(Xn,"CODE",{class:!0});var mu=l(sa);Yh=n(mu,"bundle"),mu.forEach(o),zh=n(Xn," function:"),Xn.forEach(o),Zh=p(E),oa=t(E,"DIV",{class:!0});var Cf=l(oa);Cf.forEach(o),Qh=p(E),io=t(E,"P",{});var sl=l(io);Xh=n(sl,"Now I run my bundler, it generates a "),ea=t(sl,"CODE",{class:!0});var wu=l(ea);sk=n(wu,"output/bundle.js"),wu.forEach(o),ok=n(sl," file. I run the generated file with node and I see:"),sl.forEach(o),ek=p(E),aa=t(E,"DIV",{class:!0});var jf=l(aa);jf.forEach(o),ak=p(E),Wt=t(E,"P",{});var gu=l(Wt);tk=n(gu,"That's it! A working module bundler!"),gu.forEach(o),nk=p(E),po=t(E,"P",{});var ol=l(po);lk=n(ol,"Of course, the module bundler I've shown here is "),Ft=t(ol,"STRONG",{});var bu=l(Ft);rk=n(bu,"nowhere near webpack"),bu.forEach(o),ik=n(ol,". Webpack supports more module system, resolving strategies, loading strategies, plugin system, optimisation, and many many more."),ol.forEach(o),E.forEach(o),jn=p(c),q=t(c,"SECTION",{});var L=l(q);Ut=t(L,"H2",{});var _u=l(Ut);co=t(_u,"A",{href:!0,id:!0});var Eu=l(co);pk=n(Eu,"Optimisation"),Eu.forEach(o),_u.forEach(o),ck=p(L),ho=t(L,"P",{});var el=l(ho);hk=n(el,"I played around my module bundler, and I quickly noticed a bug: "),$t=t(el,"STRONG",{});var Iu=l($t);kk=n(Iu,"Circular Dependency"),Iu.forEach(o),vk=n(el,"."),el.forEach(o),yk=p(L),Kt=t(L,"P",{});var Pu=l(Kt);dk=n(Pu,"Here's my input files that I've tweaked:"),Pu.forEach(o),uk=p(L),ta=t(L,"DIV",{class:!0});var Df=l(ta);Df.forEach(o),xk=p(L),na=t(L,"DIV",{class:!0});var Mf=l(na);Mf.forEach(o),fk=p(L),Yt=t(L,"P",{});var Tu=l(Yt);mk=n(Tu,"When I ran it through my module bunlder, immediately it ran into a stack overflow:"),Tu.forEach(o),wk=p(L),la=t(L,"DIV",{class:!0});var Lf=l(la);Lf.forEach(o),L.forEach(o),Dn=p(c),m=t(c,"SECTION",{});var g=l(m);zt=t(g,"H3",{});var qu=l(zt);ko=t(qu,"A",{href:!0,id:!0});var Au=l(ko);gk=n(Au,"Circular dependency"),Au.forEach(o),qu.forEach(o),bk=p(g),Zt=t(g,"P",{});var Ou=l(Zt);_k=n(Ou,"There were 2 junctures that the code did recursive traversal which have led to the endless loop:"),Ou.forEach(o),Ek=p(g),vo=t(g,"UL",{});var al=l(vo);Qt=t(al,"LI",{});var Su=l(Qt);Ik=n(Su,"Generating dependency graphs"),Su.forEach(o),Pk=p(al),Xt=t(al,"LI",{});var Cu=l(Xt);Tk=n(Cu,"Traversing module graph for bundling"),Cu.forEach(o),al.forEach(o),qk=p(g),ra=t(g,"DIV",{class:!0});var Nf=l(ra);Nf.forEach(o),Ak=p(g),sn=t(g,"P",{});var ju=l(sn);Ok=n(ju,"Bundle with the latest code, the stack overflow is gone. However when I executed the output bundle, I saw"),ju.forEach(o),Sk=p(g),ia=t(g,"DIV",{class:!0});var Hf=l(ia);Hf.forEach(o),Ck=p(g),on=t(g,"P",{});var Du=l(on);jk=n(Du,"So I took a look at the output bundle:"),Du.forEach(o),Dk=p(g),pa=t(g,"DIV",{class:!0});var Gf=l(pa);Gf.forEach(o),Mk=p(g),I=t(g,"P",{});var A=l(I);Lk=n(A,"So, the problem is that I destructed "),ca=t(A,"CODE",{class:!0});var Mu=l(ca);Nk=n(Mu,"PI"),Mu.forEach(o),Hk=n(A," from the exports of "),ha=t(A,"CODE",{class:!0});var Lu=l(ha);Gk=n(Lu,"index.js"),Lu.forEach(o),Rk=n(A," before it is defined, so naturally "),ka=t(A,"CODE",{class:!0});var Nu=l(ka);Vk=n(Nu,"PI"),Nu.forEach(o),Jk=n(A," within "),va=t(A,"CODE",{class:!0});var Hu=l(va);Bk=n(Hu,"circle.js"),Hu.forEach(o),Wk=n(A," would stay as "),ya=t(A,"CODE",{class:!0});var Gu=l(ya);Fk=n(Gu,"undefined"),Gu.forEach(o),Uk=n(A," throughout the application. However before I called "),da=t(A,"CODE",{class:!0});var Ru=l(da);$k=n(Ru,"circleArea"),Ru.forEach(o),Kk=n(A,", we defined "),ua=t(A,"CODE",{class:!0});var Vu=l(ua);Yk=n(Vu,"PI"),Vu.forEach(o),zk=n(A," on the "),xa=t(A,"CODE",{class:!0});var Ju=l(xa);Zk=n(Ju,"index.js"),Ju.forEach(o),Qk=n(A,"'s export, I am expecting it to be available."),A.forEach(o),Xk=p(g),en=t(g,"P",{});var Bu=l(en);sv=n(Bu,"So I built my application with webpack and took a look at how webpack solved this problem."),Bu.forEach(o),ov=p(g),fa=t(g,"DIV",{class:!0});var Rf=l(fa);Rf.forEach(o),ev=p(g),yo=t(g,"P",{});var tl=l(yo);av=n(tl,"Brilliant! The key is to lazily get the value of "),ma=t(tl,"CODE",{class:!0});var Wu=l(ma);tv=n(Wu,"PI"),Wu.forEach(o),nv=n(tl," when needed!"),tl.forEach(o),lv=p(g),uo=t(g,"P",{});var nl=l(uo);rv=n(nl,"I changed my babel transformation code, which I am not showing it here. If you are curious enough, you can check out "),xo=t(nl,"A",{href:!0,rel:!0});var Fu=l(xo);iv=n(Fu,"the changes I made from Github"),Fu.forEach(o),pv=n(nl,"."),nl.forEach(o),g.forEach(o),Mn=p(c),Q=t(c,"SECTION",{});var Ca=l(Q);an=t(Ca,"H2",{});var Uu=l(an);fo=t(Uu,"A",{href:!0,id:!0});var $u=l(fo);cv=n($u,"Summary"),$u.forEach(o),Uu.forEach(o),hv=p(Ca),fs=t(Ca,"P",{});var ja=l(fs);kv=n(ja,"There's two phases in module bundling: "),tn=t(ja,"STRONG",{});var Ku=l(tn);vv=n(Ku,"Dependency Resolution"),Ku.forEach(o),yv=n(ja," and "),nn=t(ja,"STRONG",{});var Yu=l(nn);dv=n(Yu,"Bundling"),Yu.forEach(o),uv=n(ja,"."),ja.forEach(o),xv=p(Ca),mo=t(Ca,"P",{});var ll=l(mo);fv=n(ll,"I showed you how I constructed the dependency graph, by finding import statements and resolving modules. I shared how I created module maps and transformed the imports / exports syntax during "),ln=t(ll,"STRONG",{});var zu=l(ln);mv=n(zu,"bundling"),zu.forEach(o),wv=n(ll,". Lastly, I fixed the circular dependency bug that was in the first version of my module bundler."),ll.forEach(o),Ca.forEach(o),Ln=p(c),M=t(c,"SECTION",{});var ts=l(M);rn=t(ts,"H3",{});var Zu=l(rn);wo=t(Zu,"A",{href:!0,id:!0});var Qu=l(wo);gv=n(Qu,"Whats next?"),Qu.forEach(o),Zu.forEach(o),bv=p(ts),pn=t(ts,"P",{});var Xu=l(pn);_v=n(Xu,"I have a few ideas that I will add to my module bundler, such as:"),Xu.forEach(o),Ev=p(ts),go=t(ts,"UL",{});var rl=l(go);cn=t(rl,"LI",{});var sx=l(cn);Iv=n(sx,"code spliting"),sx.forEach(o),Pv=p(rl),hn=t(rl,"LI",{});var ox=l(hn);Tv=n(ox,"watch mode and reloading"),ox.forEach(o),rl.forEach(o),qv=p(ts),kn=t(ts,"P",{});var ex=l(kn);Av=n(ex,"which I will cover them in my next article when they are ready."),ex.forEach(o),Ov=p(ts),vn=t(ts,"P",{});var ax=l(vn);Sv=n(ax,"Till then. Cheers. \u{1F60E}"),ax.forEach(o),ts.forEach(o),Nn=p(c),ws=t(c,"SECTION",{});var il=l(ws);yn=t(il,"H2",{});var tx=l(yn);bo=t(tx,"A",{href:!0,id:!0});var nx=l(bo);Cv=n(nx,"Further Readings"),nx.forEach(o),tx.forEach(o),jv=p(il),Z=t(il,"UL",{});var Is=l(Z);dn=t(Is,"LI",{});var lx=l(dn);_o=t(lx,"A",{href:!0,rel:!0});var rx=l(_o);Dv=n(rx,"Ronen Amiel, Build Your Own Webpack - You Gotta Love Frontend 2018"),rx.forEach(o),lx.forEach(o),Mv=p(Is),un=t(Is,"LI",{});var ix=l(un);Eo=t(ix,"A",{href:!0,rel:!0});var px=l(Eo);Lv=n(px,"Luciano Mammino, Unbundling the JavaScript module bundler - DublinJS July 2018"),px.forEach(o),ix.forEach(o),Nv=p(Is),xn=t(Is,"LI",{});var cx=l(xn);Io=t(cx,"A",{href:!0,rel:!0});var hx=l(Io);Hv=n(hx,"Adam Kelly, Let\u2019s learn how module bundlers work and then write one ourselves"),hx.forEach(o),cx.forEach(o),Gv=p(Is),fn=t(Is,"LI",{});var kx=l(fn);Po=t(kx,"A",{href:!0,rel:!0});var vx=l(Po);Rv=n(vx,"Webpack founder Tobias Koppers demos bundling live by hand"),vx.forEach(o),kx.forEach(o),Is.forEach(o),il.forEach(o),this.h()},h(){r(_,"href","/what-is-module-bundler-and-how-does-it-work/"),r(qs,"href","https://webpack.js.org"),r(qs,"rel","nofollow"),r(As,"href","https://rollupjs.org"),r(As,"rel","nofollow"),r(Os,"href","#getting-started"),r(Os,"id","getting-started"),r(Oo,"href","/what-is-module-bundler-and-how-does-it-work/"),r(Ms,"href","#the-input"),r(Ms,"id","the-input"),r(jo,"class","code-section"),r(Do,"class","code-section"),r(Mo,"class","code-section"),r(Ls,"href","https://github.com/tanhauhau/byo-bundler/tree/master/fixture"),r(Ls,"rel","nofollow"),r(Lo,"class","inline"),r(No,"class","inline"),r(Ns,"href","#writing"),r(Ns,"id","writing"),r(Ho,"class","code-section"),r(Hs,"href","https://en.wikipedia.org/wiki/Directed_graph"),r(Hs,"rel","nofollow"),r(Go,"class","code-section"),r(Ro,"class","inline"),r(Vo,"class","inline"),r(Jo,"class","code-section"),r(Bo,"class","inline"),r(Wo,"class","code-section"),r(Fo,"class","inline"),r(Rs,"href","http://babeljs.io"),r(Rs,"rel","nofollow"),r(Uo,"class","code-section"),r($o,"class","code-section"),r(Ko,"class","inline"),r(Vs,"href","https://lihautan.com/babel-ast-explorer/#?eyJiYWJlbFNldHRpbmdzIjp7InZlcnNpb24iOiI3LjQuNSJ9LCJ0cmVlU2V0dGluZ3MiOnsiaGlkZUVtcHR5Ijp0cnVlLCJoaWRlTG9jYXRpb24iOnRydWUsImhpZGVUeXBlIjp0cnVlfSwiY29kZSI6ImltcG9ydCBzcXVhcmVBcmVhIGZyb20gJy4vc3F1YXJlLmpzJztcbmltcG9ydCBjaXJjbGVBcmVhIGZyb20gJy4vY2lyY2xlLmpzJztcblxuY29uc29sZS5sb2coJ0FyZWEgb2Ygc3F1YXJlOiAnLCBzcXVhcmVBcmVhKDUpKTtcbmNvbnNvbGUubG9nKCdBcmVhIG9mIGNpcmNsZScsIGNpcmNsZUFyZWEoNSkpO1xuIn0="),r(Vs,"rel","nofollow"),r(Qa,"type","image/webp"),r(Qa,"srcset",Zf+", "+zf+" 2x"),Uf(N.src,zv=ux)||r(N,"src",zv),r(N,"srcset",ux+", "+Qf+" 2x"),r(N,"loading","lazy"),Ps(N,"position","absolute"),Ps(N,"top","0"),Ps(N,"width","100%"),Ps(N,"height","100%"),r(N,"alt","babel-ast-explorer"),r(N,"title","Visualizing AST through babel-ast-explorer"),Ps(is,"display","block"),Ps(is,"position","relative"),Ps(is,"padding-top","38.672%"),Ps(is,"width","100%"),r(zo,"class","inline"),r(Zo,"class","inline"),r(Qo,"class","inline"),r(Xo,"class","inline"),r(se,"class","inline"),r(oe,"class","code-section"),r(ee,"class","inline"),r(ae,"class","inline"),r(te,"class","inline"),r(ne,"class","code-section"),r(Bs,"href","#resolving"),r(Bs,"id","resolving"),r(le,"class","inline"),r(re,"class","inline"),r(ie,"class","code-section"),r(pe,"class","code-section"),r(Fs,"href","http://nodejs.org/api/modules.html#modules_all_together"),r(Fs,"rel","nofollow"),r(ce,"class","inline"),r(he,"class","inline"),r(ke,"class","code-section"),r(ve,"class","inline"),r(ye,"class","code-section"),r(de,"class","inline"),r(ue,"class","inline"),r(xe,"class","inline"),r($s,"href","https://webpack.js.org/configuration/resolve/"),r($s,"rel","nofollow"),r(fe,"class","code-section"),r(me,"class","code-section"),r(we,"class","code-section"),r(ge,"class","inline"),r(be,"class","inline"),r(_e,"class","inline"),r(Ee,"class","inline"),r(Ys,"href","#bundling"),r(Ys,"id","bundling"),r(Ie,"href","/what-is-module-bundler-and-how-does-it-work/"),r(Pe,"class","code-section"),r(zs,"href","#grouping-modules-into-files"),r(zs,"id","grouping-modules-into-files"),r(Zs,"href","https://webpack.js.org/guides/code-splitting/"),r(Zs,"rel","nofollow"),r(Qs,"href","https://webpack.js.org/plugins/split-chunks-plugin/"),r(Qs,"rel","nofollow"),r(Ae,"class","code-section"),r(Xs,"href","#creating-module-map"),r(Xs,"id","creating-module-map"),r(Oe,"class","inline"),r(Se,"class","inline"),r(Ce,"class","inline"),r(so,"href","https://documentation.progress.com/output/ua/OpenEdge_latest/index.html#page/dvjsn/json-data-types.html"),r(so,"rel","nofollow"),r(je,"class","inline"),r(De,"class","code-section"),r(Me,"class","inline"),r(Ne,"class","inline"),r(Ge,"class","inline"),r(Re,"class","code-section"),r(Ve,"class","inline"),r(Je,"class","inline"),r(Be,"class","inline"),r(We,"class","inline"),r(Fe,"class","code-section"),r(Ue,"href","/step-by-step-guide-for-writing-a-babel-transformation"),r($e,"class","code-section"),r(to,"href","https://github.com/tanhauhau/byo-bundler/blob/feat-2-bundling/src/index.js#L46-L138"),r(to,"rel","nofollow"),r(Ye,"class","code-section"),r(ze,"class","inline"),r(lo,"href","#create-the-runtime"),r(lo,"id","create-the-runtime"),r(Ze,"class","code-section"),r(Qe,"class","inline"),r(Xe,"href","/what-is-module-bundler-and-how-does-it-work/"),r(sa,"class","inline"),r(oa,"class","code-section"),r(ea,"class","inline"),r(aa,"class","code-section"),r(co,"href","#optimisation"),r(co,"id","optimisation"),r(ta,"class","code-section"),r(na,"class","code-section"),r(la,"class","code-section"),r(ko,"href","#circular-dependency"),r(ko,"id","circular-dependency"),r(ra,"class","code-section"),r(ia,"class","code-section"),r(pa,"class","code-section"),r(ca,"class","inline"),r(ha,"class","inline"),r(ka,"class","inline"),r(va,"class","inline"),r(ya,"class","inline"),r(da,"class","inline"),r(ua,"class","inline"),r(xa,"class","inline"),r(fa,"class","code-section"),r(ma,"class","inline"),r(xo,"href","https://github.com/tanhauhau/byo-bundler/compare/feat-2-bundling...feat-3-circular-dependency"),r(xo,"rel","nofollow"),r(fo,"href","#summary"),r(fo,"id","summary"),r(wo,"href","#whats-next"),r(wo,"id","whats-next"),r(bo,"href","#further-readings"),r(bo,"id","further-readings"),r(_o,"href","https://www.youtube.com/watch?v=Gc9-7PBqOC8"),r(_o,"rel","nofollow"),r(Eo,"href","https://slides.com/lucianomammino/unbundling-the-javascript-module-bundler-dublinjs"),r(Eo,"rel","nofollow"),r(Io,"href","https://www.freecodecamp.org/news/lets-learn-how-module-bundlers-work-and-then-write-one-ourselves-b2e3fe6c88ae/"),r(Io,"rel","nofollow"),r(Po,"href","https://www.youtube.com/watch?v=UNMkLHzofQI"),r(Po,"rel","nofollow")},m(c,v){wx(b,c,v),f(c,F,v),f(c,T,v),s(T,Ts),s(T,_),s(_,U),s(T,qo),s(T,qs),s(qs,pl),s(T,cl),s(T,As),s(As,hl),s(T,kl),f(c,mn,v),f(c,Ao,v),s(Ao,vl),f(c,wn,v),f(c,gn,v),f(c,bn,v),f(c,ms,v),s(ms,yl),s(ms,Da),s(Da,dl),s(ms,ul),f(c,_n,v),f(c,En,v),f(c,In,v),f(c,D,v),s(D,Ma),s(Ma,Os),s(Os,xl),s(D,fl),s(D,Ss),s(Ss,ml),s(Ss,Oo),s(Oo,wl),s(Ss,gl),s(D,bl),s(D,Cs),s(Cs,_l),s(Cs,La),s(La,El),s(Cs,Il),s(D,Pl),s(D,js),s(js,So),s(So,Tl),s(So,Na),s(Na,ql),s(js,Al),s(js,Co),s(Co,Ol),s(Co,Ha),s(Ha,Sl),s(D,Cl),s(D,Ga),s(Ga,Ds),s(Ds,jl),s(Ds,Ra),s(Ra,Dl),s(Ds,Ml),f(c,Pn,v),f(c,O,v),s(O,Va),s(Va,Ms),s(Ms,Ll),s(O,Nl),s(O,Ja),s(Ja,Hl),s(O,Gl),s(O,jo),jo.innerHTML=Ex,s(O,Rl),s(O,Do),Do.innerHTML=Ix,s(O,Vl),s(O,Mo),Mo.innerHTML=Px,s(O,Jl),s(O,$),s($,Bl),s($,Ls),s(Ls,Wl),s($,Fl),s($,Lo),s(Lo,Ul),s($,$l),s($,No),s(No,Kl),s($,Yl),f(c,Tn,v),f(c,h,v),s(h,Ba),s(Ba,Ns),s(Ns,zl),s(h,Zl),s(h,Wa),s(Wa,Ql),s(h,Xl),s(h,Ho),Ho.innerHTML=Tx,s(h,sr),s(h,Fa),s(Fa,ns),s(ns,or),s(ns,Ua),s(Ua,er),s(ns,ar),s(ns,Hs),s(Hs,tr),s(ns,nr),s(h,lr),s(h,Go),Go.innerHTML=qx,s(h,rr),s(h,$a),s($a,ir),s(h,pr),s(h,ls),s(ls,cr),s(ls,Ro),s(Ro,hr),s(ls,kr),s(ls,Vo),s(Vo,vr),s(ls,yr),s(h,dr),s(h,Jo),Jo.innerHTML=Ax,s(h,ur),s(h,Gs),s(Gs,xr),s(Gs,Bo),s(Bo,fr),s(Gs,mr),s(h,wr),s(h,Wo),Wo.innerHTML=Ox,s(h,gr),s(h,K),s(K,br),s(K,Fo),s(Fo,_r),s(K,Er),s(K,Rs),s(Rs,Ir),s(K,Pr),s(K,Ka),s(Ka,Tr),s(K,qr),s(h,Ar),s(h,Uo),Uo.innerHTML=Sx,s(h,Or),s(h,Ya),s(Ya,Sr),s(h,Cr),s(h,$o),$o.innerHTML=Cx,s(h,jr),s(h,za),s(za,Dr),s(h,Mr),s(h,rs),s(rs,Lr),s(rs,Ko),s(Ko,Nr),s(rs,Hr),s(rs,Vs),s(Vs,Gr),s(rs,Rr),s(h,Vr),s(h,Za),s(Za,is),s(is,Yo),s(Yo,Qa),s(Yo,N),s(h,Jr),s(h,j),s(j,Br),s(j,zo),s(zo,Wr),s(j,Fr),s(j,Zo),s(Zo,Ur),s(j,$r),s(j,Qo),s(Qo,Kr),s(j,Yr),s(j,Xo),s(Xo,zr),s(j,Zr),s(j,se),s(se,Qr),s(j,Xr),s(h,si),s(h,oe),oe.innerHTML=jx,s(h,oi),s(h,H),s(H,ei),s(H,ee),s(ee,ai),s(H,ti),s(H,ae),s(ae,ni),s(H,li),s(H,te),s(te,ri),s(H,ii),s(H,Xa),s(Xa,pi),s(H,ci),s(h,hi),s(h,Js),s(Js,ki),s(Js,st),s(st,vi),s(Js,yi),s(h,di),s(h,ne),ne.innerHTML=Dx,s(h,ui),s(h,ot),s(ot,et),s(et,xi),f(c,qn,v),f(c,k,v),s(k,at),s(at,Bs),s(Bs,fi),s(k,mi),s(k,ps),s(ps,wi),s(ps,le),s(le,gi),s(ps,bi),s(ps,re),s(re,_i),s(ps,Ei),s(k,Ii),s(k,ie),ie.innerHTML=Mx,s(k,Pi),s(k,pe),pe.innerHTML=Lx,s(k,Ti),s(k,tt),s(tt,qi),s(k,Ai),s(k,Ws),s(Ws,Oi),s(Ws,Fs),s(Fs,Si),s(Ws,Ci),s(k,ji),s(k,cs),s(cs,Di),s(cs,ce),s(ce,Mi),s(cs,Li),s(cs,he),s(he,Ni),s(cs,Hi),s(k,Gi),s(k,ke),ke.innerHTML=Nx,s(k,Ri),s(k,Us),s(Us,Vi),s(Us,ve),s(ve,Ji),s(Us,Bi),s(k,Wi),s(k,ye),ye.innerHTML=Hx,s(k,Fi),s(k,hs),s(hs,Ui),s(hs,de),s(de,$i),s(hs,Ki),s(hs,ue),s(ue,Yi),s(hs,zi),s(k,Zi),s(k,ks),s(ks,Qi),s(ks,xe),s(xe,Xi),s(ks,sp),s(ks,$s),s($s,op),s(ks,ep),s(k,ap),s(k,Ks),s(Ks,tp),s(Ks,nt),s(nt,np),s(Ks,lp),s(k,rp),s(k,fe),fe.innerHTML=Gx,s(k,ip),s(k,lt),s(lt,rt),s(rt,pp),s(k,cp),s(k,it),s(it,hp),s(k,kp),s(k,me),me.innerHTML=Rx,s(k,vp),s(k,pt),s(pt,yp),s(k,dp),s(k,we),we.innerHTML=Vx,s(k,up),s(k,G),s(G,xp),s(G,ge),s(ge,fp),s(G,mp),s(G,be),s(be,wp),s(G,gp),s(G,_e),s(_e,bp),s(G,_p),s(G,Ee),s(Ee,Ep),s(G,Ip),s(k,Pp),s(k,ct),s(ct,ht),s(ht,Tp),f(c,An,v),f(c,P,v),s(P,kt),s(kt,Ys),s(Ys,qp),s(P,Ap),s(P,vt),s(vt,Op),s(P,Sp),s(P,R),s(R,Cp),s(R,yt),s(yt,jp),s(R,Dp),s(R,dt),s(dt,Mp),s(R,Lp),s(R,ut),s(ut,Np),s(R,Hp),s(R,xt),s(xt,Gp),s(R,Rp),s(P,Vp),s(P,ft),s(ft,Y),s(Y,Jp),s(Y,mt),s(mt,Bp),s(Y,Wp),s(Y,wt),s(wt,Fp),s(Y,Up),s(Y,Ie),s(Ie,$p),s(Y,Kp),s(P,Yp),s(P,gt),s(gt,zp),s(P,Zp),s(P,Pe),Pe.innerHTML=Jx,s(P,Qp),s(P,bt),s(bt,Xp),s(P,sc),s(P,vs),s(vs,_t),s(_t,Et),s(Et,oc),s(vs,ec),s(vs,Te),s(Te,It),s(It,ac),s(Te,tc),s(vs,nc),s(vs,qe),s(qe,Pt),s(Pt,lc),s(qe,rc),f(c,On,v),f(c,S,v),s(S,Tt),s(Tt,zs),s(zs,ic),s(S,pc),s(S,ys),s(ys,cc),s(ys,Zs),s(Zs,hc),s(ys,kc),s(ys,Qs),s(Qs,vc),s(ys,yc),s(S,dc),s(S,qt),s(qt,uc),s(S,xc),s(S,At),s(At,fc),s(S,mc),s(S,Ae),Ae.innerHTML=Bx,s(S,wc),s(S,Ot),s(Ot,gc),f(c,Sn,v),f(c,d,v),s(d,St),s(St,Xs),s(Xs,bc),s(d,_c),s(d,Ct),s(Ct,Ec),s(d,Ic),s(d,ds),s(ds,Pc),s(ds,Oe),s(Oe,Tc),s(ds,qc),s(ds,Se),s(Se,Ac),s(ds,Oc),s(d,Sc),s(d,z),s(z,Cc),s(z,Ce),s(Ce,jc),s(z,Dc),s(z,so),s(so,Mc),s(z,Lc),s(z,je),s(je,Nc),s(z,Hc),s(d,Gc),s(d,De),De.innerHTML=Wx,s(d,Rc),s(d,oo),s(oo,Vc),s(oo,Me),s(Me,Jc),s(oo,Bc),s(d,Wc),s(d,eo),s(eo,Le),s(Le,Ne),s(Ne,Fc),s(Le,Uc),s(eo,$c),s(eo,He),s(He,Ge),s(Ge,Kc),s(He,Yc),s(d,zc),s(d,jt),s(jt,Zc),s(d,Qc),s(d,Re),Re.innerHTML=Fx,s(d,Xc),s(d,V),s(V,sh),s(V,Ve),s(Ve,oh),s(V,eh),s(V,Je),s(Je,ah),s(V,th),s(V,Be),s(Be,nh),s(V,lh),s(V,We),s(We,rh),s(V,ih),s(d,ph),s(d,Dt),s(Dt,ch),s(d,hh),s(d,Mt),s(Mt,kh),s(d,vh),s(d,Fe),Fe.innerHTML=Ux,s(d,yh),s(d,Lt),s(Lt,ao),s(ao,dh),s(ao,Ue),s(Ue,uh),s(ao,xh),s(d,fh),s(d,us),s(us,mh),s(us,Nt),s(Nt,wh),s(us,gh),s(us,Ht),s(Ht,bh),s(us,_h),s(d,Eh),s(d,$e),$e.innerHTML=$x,s(d,Ih),s(d,Ke),s(Ke,Ph),s(Ke,to),s(to,Th),s(d,qh),s(d,Gt),s(Gt,Ah),s(d,Oh),s(d,Ye),Ye.innerHTML=Kx,s(d,Sh),s(d,no),s(no,Ch),s(no,ze),s(ze,jh),s(no,Dh),f(c,Cn,v),f(c,w,v),s(w,Rt),s(Rt,lo),s(lo,Vt),s(Vt,Mh),s(w,Lh),s(w,Jt),s(Jt,Nh),s(w,Hh),s(w,Bt),s(Bt,Gh),s(w,Rh),s(w,Ze),Ze.innerHTML=Yx,s(w,Vh),s(w,xs),s(xs,Jh),s(xs,Qe),s(Qe,Bh),s(xs,Wh),s(xs,Xe),s(Xe,Fh),s(xs,Uh),s(w,$h),s(w,ro),s(ro,Kh),s(ro,sa),s(sa,Yh),s(ro,zh),s(w,Zh),s(w,oa),oa.innerHTML=zx,s(w,Qh),s(w,io),s(io,Xh),s(io,ea),s(ea,sk),s(io,ok),s(w,ek),s(w,aa),aa.innerHTML=Zx,s(w,ak),s(w,Wt),s(Wt,tk),s(w,nk),s(w,po),s(po,lk),s(po,Ft),s(Ft,rk),s(po,ik),f(c,jn,v),f(c,q,v),s(q,Ut),s(Ut,co),s(co,pk),s(q,ck),s(q,ho),s(ho,hk),s(ho,$t),s($t,kk),s(ho,vk),s(q,yk),s(q,Kt),s(Kt,dk),s(q,uk),s(q,ta),ta.innerHTML=Qx,s(q,xk),s(q,na),na.innerHTML=Xx,s(q,fk),s(q,Yt),s(Yt,mk),s(q,wk),s(q,la),la.innerHTML=sf,f(c,Dn,v),f(c,m,v),s(m,zt),s(zt,ko),s(ko,gk),s(m,bk),s(m,Zt),s(Zt,_k),s(m,Ek),s(m,vo),s(vo,Qt),s(Qt,Ik),s(vo,Pk),s(vo,Xt),s(Xt,Tk),s(m,qk),s(m,ra),ra.innerHTML=of,s(m,Ak),s(m,sn),s(sn,Ok),s(m,Sk),s(m,ia),ia.innerHTML=ef,s(m,Ck),s(m,on),s(on,jk),s(m,Dk),s(m,pa),pa.innerHTML=af,s(m,Mk),s(m,I),s(I,Lk),s(I,ca),s(ca,Nk),s(I,Hk),s(I,ha),s(ha,Gk),s(I,Rk),s(I,ka),s(ka,Vk),s(I,Jk),s(I,va),s(va,Bk),s(I,Wk),s(I,ya),s(ya,Fk),s(I,Uk),s(I,da),s(da,$k),s(I,Kk),s(I,ua),s(ua,Yk),s(I,zk),s(I,xa),s(xa,Zk),s(I,Qk),s(m,Xk),s(m,en),s(en,sv),s(m,ov),s(m,fa),fa.innerHTML=tf,s(m,ev),s(m,yo),s(yo,av),s(yo,ma),s(ma,tv),s(yo,nv),s(m,lv),s(m,uo),s(uo,rv),s(uo,xo),s(xo,iv),s(uo,pv),f(c,Mn,v),f(c,Q,v),s(Q,an),s(an,fo),s(fo,cv),s(Q,hv),s(Q,fs),s(fs,kv),s(fs,tn),s(tn,vv),s(fs,yv),s(fs,nn),s(nn,dv),s(fs,uv),s(Q,xv),s(Q,mo),s(mo,fv),s(mo,ln),s(ln,mv),s(mo,wv),f(c,Ln,v),f(c,M,v),s(M,rn),s(rn,wo),s(wo,gv),s(M,bv),s(M,pn),s(pn,_v),s(M,Ev),s(M,go),s(go,cn),s(cn,Iv),s(go,Pv),s(go,hn),s(hn,Tv),s(M,qv),s(M,kn),s(kn,Av),s(M,Ov),s(M,vn),s(vn,Sv),f(c,Nn,v),f(c,ws,v),s(ws,yn),s(yn,bo),s(bo,Cv),s(ws,jv),s(ws,Z),s(Z,dn),s(dn,_o),s(_o,Dv),s(Z,Mv),s(Z,un),s(un,Eo),s(Eo,Lv),s(Z,Nv),s(Z,xn),s(xn,Io),s(Io,Hv),s(Z,Gv),s(Z,fn),s(fn,Po),s(Po,Rv),Hn=!0},p:$f,i(c){Hn||(gx(b.$$.fragment,c),Hn=!0)},o(c){bx(b.$$.fragment,c),Hn=!1},d(c){_x(b,c),c&&o(F),c&&o(T),c&&o(mn),c&&o(Ao),c&&o(wn),c&&o(gn),c&&o(bn),c&&o(ms),c&&o(_n),c&&o(En),c&&o(In),c&&o(D),c&&o(Pn),c&&o(O),c&&o(Tn),c&&o(h),c&&o(qn),c&&o(k),c&&o(An),c&&o(P),c&&o(On),c&&o(S),c&&o(Sn),c&&o(d),c&&o(Cn),c&&o(w),c&&o(jn),c&&o(q),c&&o(Dn),c&&o(m),c&&o(Mn),c&&o(Q),c&&o(Ln),c&&o(M),c&&o(Nn),c&&o(ws)}}}function om(To){let b,F;const T=[To[0],xx];let Ts={$$slots:{default:[sm]},$$scope:{ctx:To}};for(let _=0;_<T.length;_+=1)Ts=Yv(Ts,T[_]);return b=new Kf({props:Ts}),{c(){fx(b.$$.fragment)},l(_){mx(b.$$.fragment,_)},m(_,U){wx(b,_,U),F=!0},p(_,[U]){const qo=U&1?Wf(T,[U&1&&yx(_[0]),U&0&&yx(xx)]):{};U&2&&(qo.$$scope={dirty:U,ctx:_}),b.$set(qo)},i(_){F||(gx(b.$$.fragment,_),F=!0)},o(_){bx(b.$$.fragment,_),F=!1},d(_){_x(b,_)}}}const xx={title:"I wrote my module bundler",date:"2019-09-18T08:00:00Z",tags:["JavaScript","module bundler","dev tool","webpack"],description:"In my previous article, I explained how module bundler works. In this article, I am going to show you how I wrote my module bundler...",series:"Write a module bundler",label:"blog"};function em(To,b,F){return Ff("blog",{image:Xf}),To.$$set=T=>{F(0,b=Yv(Yv({},b),dx(T)))},b=dx(b),[b]}class pm extends Vf{constructor(b){super();Jf(this,b,em,om,Bf,{})}}export{pm as default,xx as metadata};
