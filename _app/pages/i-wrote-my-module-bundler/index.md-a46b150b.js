import{S as Gf,i as Rf,s as Vf,C as Kv,w as ux,x as xx,y as fx,z as Jf,A as kx,q as mx,o as wx,B as gx,r as Bf,R as vx,k as i,e,t as a,m as p,c as t,a as l,h as n,d as o,b as r,Q as Wf,g as f,F as s,O as Ff}from"../../chunks/vendor-ea160616.js";import{B as Uf}from"../../chunks/BlogLayout-1be3dc1e.js";import{T as $f}from"../../chunks/TableOfContent-c4f5cb6e.js";import"../../chunks/stores-7d7fda0c.js";import"../../chunks/WebMentions-d768a574.js";/* empty css                                */var Kf="/_app/assets/ast-import-1b4b97d2.webp",yx="/_app/assets/ast-import-9eb42f5d.png",Yf="/_app/assets/hero-twitter-43549bfa.jpg";function zf(Po){let b,W,T,Is,_,F,To,Ps,pl,cl,Ts,hl,kl,fn,qo,vl,mn,wn,gn,xs,yl,Ca,dl,ul,bn,_n,En,D,ja,qs,xl,fl,As,ml,Ao,wl,gl,bl,Os,_l,Da,El,Il,Pl,Ss,Oo,Tl,Ma,ql,Al,So,Ol,La,Sl,Cl,Na,Cs,jl,Ha,Dl,Ml,In,O,Ga,js,Ll,Nl,Ra,Hl,Gl,Co,bx=`<div class="filename">index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> squareArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./square.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> circleArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./circle.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">squareArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circleArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span></code></pre>`,Rl,jo,_x=`<div class="filename">square.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(side) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> side </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> side;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> area;</span></span></code></pre>`,Vl,Do,Ex=`<div class="filename">circle.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> area;</span></span></code></pre>`,Jl,U,Bl,Ds,Wl,Fl,Mo,Ul,$l,Lo,Kl,Yl,Pn,h,Va,Ms,zl,Zl,Ja,Ql,Xl,No,Ix=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">build</span><span style="color: var(--shiki-color-text)">(&#123; entryFile</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> outputFolder &#125;) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// build dependency graph</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">graph</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createDependencyGraph</span><span style="color: var(--shiki-color-text)">(entryFile);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// bundle the asset</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">outputFiles</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">bundle</span><span style="color: var(--shiki-color-text)">(graph);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// write to output folder</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">outputFile</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> outputFiles) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.writeFileSync</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(outputFolder</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">outputFile</span><span style="color: var(--shiki-color-text)">.name)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">outputFile</span><span style="color: var(--shiki-color-text)">.content</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#39;utf-8&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    )</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,sr,Ba,ts,or,Wa,er,ar,Ls,tr,nr,lr,Ho,Px=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createDependencyGraph</span><span style="color: var(--shiki-color-text)">(entryFile) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">rootModule</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createModule</span><span style="color: var(--shiki-color-text)">(entryFile);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> rootModule;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,rr,Fa,ir,pr,ns,cr,Go,hr,kr,Ro,vr,yr,dr,Vo,Tx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createModule</span><span style="color: var(--shiki-color-text)">(filePath) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)">(filePath);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ur,Ns,xr,Jo,fr,mr,wr,Bo,qx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(filePath) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.filePath </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> filePath;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.content </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.readFileSync</span><span style="color: var(--shiki-color-text)">(filePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;utf-8&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.dependencies </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,gr,$,br,Wo,_r,Er,Hs,Ir,Pr,Ua,Tr,qr,Ar,Fo,Ax=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line highlight"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;@babel/core&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(filePath) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.filePath </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> filePath;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.content </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.readFileSync</span><span style="color: var(--shiki-color-text)">(filePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;utf-8&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.ast </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.parseSync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.content);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Or,$a,Sr,Cr,Uo,Ox=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(filePath) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.filePath </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> filePath;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.content </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.readFileSync</span><span style="color: var(--shiki-color-text)">(filePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;utf-8&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.ast </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.parseSync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.content);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.dependencies </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.findDependencies</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">findDependencies</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">//</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,jr,Ka,Dr,Mr,ls,Lr,$o,Nr,Hr,Gs,Gr,Rr,Vr,Ya,Rs,za,Za,fs,Yv,Jr,j,Br,Ko,Wr,Fr,Yo,Ur,$r,zo,Kr,Yr,Zo,zr,Zr,Qo,Qr,Xr,si,Xo,Sx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">findDependencies</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">ast</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">program</span><span style="color: var(--shiki-color-text)">.body</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.filter</span><span style="color: var(--shiki-color-text)">(node </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;ImportDeclaration&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(node </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">source</span><span style="color: var(--shiki-color-text)">.value)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,oi,N,ei,se,ai,ti,oe,ni,li,ee,ri,ii,Qa,pi,ci,hi,Vs,ki,Xa,vi,yi,di,ae,Cx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">findDependencies</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">ast</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">program</span><span style="color: var(--shiki-color-text)">.body</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.filter</span><span style="color: var(--shiki-color-text)">(node </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;ImportDeclaration&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(node </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">source</span><span style="color: var(--shiki-color-text)">.value)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(relativePath </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">resolveRequest</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.filePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> relativePath))</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// resolving</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">resolveRequest</span><span style="color: var(--shiki-color-text)">(requester</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> requestedPath) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">//</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ui,st,ot,xi,Tn,k,et,Js,fi,mi,rs,wi,te,gi,bi,ne,_i,Ei,Ii,le,jx='<div class="filename">project/a.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./b.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>',Pi,re,Dx='<div class="filename">project/foo/a.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./b.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>',Ti,at,qi,Ai,Bs,Oi,Ws,Si,Ci,ji,is,Di,ie,Mi,Li,pe,Ni,Hi,Gi,ce,Mx=`<pre class="prism language-"><code><span class="line">b</span>
<span class="line">b.js</span>
<span class="line">b.json</span>
<span class="line">b.node</span></code></pre>`,Ri,Fs,Vi,he,Ji,Bi,Wi,ke,Lx=`<pre class="prism language-"><code><span class="line">&quot;main&quot; in b/package.json</span>
<span class="line">b/index.js</span>
<span class="line">b/index.json</span>
<span class="line">b/index.node</span></code></pre>`,Fi,ps,Ui,ve,$i,Ki,ye,Yi,zi,Zi,cs,Qi,de,Xi,sp,Us,op,ep,ap,$s,tp,tt,np,lp,rp,ue,Nx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;path&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// resolving</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">resolveRequest</span><span style="color: var(--shiki-color-text)">(requester</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> requestedPath) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.dirname</span><span style="color: var(--shiki-color-text)">(requester)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> requestedPath);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ip,nt,lt,pp,cp,rt,hp,kp,xe,Hx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">findDependencies</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">ast</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">program</span><span style="color: var(--shiki-color-text)">.body</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.filter</span><span style="color: var(--shiki-color-text)">(node </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;ImportDeclaration&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(node </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">source</span><span style="color: var(--shiki-color-text)">.value)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(relativePath </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">resolveRequest</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.filePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> relativePath))</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(absolutePath </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createModule</span><span style="color: var(--shiki-color-text)">(absolutePath))</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,vp,it,yp,dp,fe,Gx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">Module &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  filePath</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;/Projects/byo-bundler/fixture/index.js&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  content</span><span style="color: var(--shiki-token-punctuation)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-string-expression)">&#39;import squareArea from &#39;./square.js&#39;;&#92;nimport circleArea from &#39;./circle.js&#39;;&#92;n&#92;nconsole.log(&#39;Area of square: &#39;, squareArea(5));&#92;nconsole.log(&#39;Area of circle&#39;, circleArea(5));&#92;n&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ast</span><span style="color: var(--shiki-token-punctuation)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   Node &#123; </span><span style="color: var(--shiki-token-comment)">/*...*/</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  dependencies</span><span style="color: var(--shiki-token-punctuation)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   [ Module &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">       filePath</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;/Projects/byo-bundler/fixture/square.js&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">       content</span><span style="color: var(--shiki-token-keyword)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-string-expression)">&#39;function area(side) &#123;&#92;n  return side * side;&#92;n&#125;&#92;nexport default area;&#92;n&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">       ast</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> Node &#123;</span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)">&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">       dependencies</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> []</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">     Module &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">       filePath</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;/Projects/byo-bundler/fixture/circle.js&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">       content</span><span style="color: var(--shiki-token-keyword)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-string-expression)">&#39;const PI = 3.141;&#92;nfunction area(radius) &#123;&#92;n    return PI * radius * radius;&#92;n&#125;&#92;nexport default area;&#92;n&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">       ast</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> Node &#123;</span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)">&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">       dependencies</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> []</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   ]</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,up,H,xp,me,fp,mp,we,wp,gp,ge,bp,_p,be,Ep,Ip,Pp,pt,ct,Tp,qn,P,ht,Ks,qp,Ap,kt,Op,Sp,G,Cp,vt,jp,Dp,yt,Mp,Lp,dt,Np,Hp,ut,Gp,Rp,Vp,xt,K,Jp,ft,Bp,Wp,mt,Fp,Up,_e,$p,Kp,Yp,wt,zp,Zp,Ee,Rx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;circle.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;square.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(side) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> side </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> side;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;app.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">squareArea</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;square.js&#39;</span><span style="color: var(--shiki-color-text)">).default;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">circleArea</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;circle.js&#39;</span><span style="color: var(--shiki-color-text)">).default;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">squareArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circleArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">webpackStart</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  modules</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  entry</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;app.js&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,Qp,gt,Xp,sc,hs,bt,_t,oc,ec,Ie,Et,ac,tc,nc,Pe,It,lc,rc,An,S,Pt,Ys,ic,pc,ks,cc,zs,hc,kc,Zs,vc,yc,dc,Tt,uc,xc,qt,fc,mc,Te,Vx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">bundle</span><span style="color: var(--shiki-color-text)">(graph) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">collectModules</span><span style="color: var(--shiki-color-text)">(graph);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">collectModules</span><span style="color: var(--shiki-color-text)">(graph) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">collect</span><span style="color: var(--shiki-color-text)">(graph</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> modules);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> modules;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">collect</span><span style="color: var(--shiki-color-text)">(module</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> modules) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">dependencies</span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">(dependency </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">collect</span><span style="color: var(--shiki-color-text)">(dependency</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> modules));</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,wc,At,gc,On,d,Ot,Qs,bc,_c,St,Ec,Ic,vs,Pc,qe,Tc,qc,Ae,Ac,Oc,Sc,Y,Cc,Oe,jc,Dc,Xs,Mc,Lc,Se,Nc,Hc,Gc,Ce,Jx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">bundle</span><span style="color: var(--shiki-color-text)">(graph) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">collectModules</span><span style="color: var(--shiki-color-text)">(graph);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">moduleMap</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">toModuleMap</span><span style="color: var(--shiki-color-text)">(modules);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">toModuleMap</span><span style="color: var(--shiki-color-text)">(modules) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> moduleMap </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  moduleMap </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#123;&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> modules) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    moduleMap </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;&quot;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.filePath</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&quot;: &#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    moduleMap </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;function(exports, require) &#123; </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.content</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> &#125;,&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  moduleMap </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#125;&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> moduleMap;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Rc,so,Vc,je,Jc,Bc,Wc,oo,De,Me,Fc,Uc,$c,Le,Ne,Kc,Yc,zc,Ct,Zc,Qc,He,Bx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&quot;index.js&quot;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> squareArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./square.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> circleArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./circle.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">squareArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circleArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&quot;square.js&quot;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(side) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> side </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> side;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> area;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&quot;circle.js&quot;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> area;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Xc,R,sh,Ge,oh,eh,Re,ah,th,Ve,nh,lh,Je,rh,ih,ph,jt,ch,hh,Dt,kh,vh,Be,Wx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// #1</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// from</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> a</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; b</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> c &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// to</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; default: </span><span style="color: var(--shiki-token-constant)">a</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">b</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">c</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// #2</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> a;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">b</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> &#123; c &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// to</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.default </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> a;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.b </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.c </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> c;</span></span></code></pre>`,yh,Mt,eo,dh,We,uh,xh,fh,ys,mh,Lt,wh,gh,Nt,bh,_h,Eh,Fe,Fx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> modules) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-token-function)">.transformModuleInterface</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  moduleMap </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;&quot;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.filePath</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&quot;: function(exports, require) &#123; </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.content</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> &#125;,&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">transformModuleInterface</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">code</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.transformFromAstSync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.content</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)"> &#125;);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.ast </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> ast;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.content </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> code;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ih,Ue,Ph,ao,Th,qh,Ht,Ah,Oh,$e,Ux=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&quot;index.js&quot;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; default: </span><span style="color: var(--shiki-token-constant)">squareArea</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;square.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; default: </span><span style="color: var(--shiki-token-constant)">circleArea</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;circle.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">squareArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circleArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&quot;square.js&quot;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(side) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> side </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> side;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.default </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> area;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&quot;circle.js&quot;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.default </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> area;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Sh,to,Ch,Ke,jh,Dh,Sn,w,Gt,no,Rt,Mh,Lh,Vt,Nh,Hh,Jt,Gh,Rh,Ye,$x=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">bundle</span><span style="color: var(--shiki-color-text)">(graph) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">collectModules</span><span style="color: var(--shiki-color-text)">(graph);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">moduleMap</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">toModuleMap</span><span style="color: var(--shiki-color-text)">(modules);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">moduleCode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">addRuntime</span><span style="color: var(--shiki-color-text)">(moduleMap</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> modules[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">].filePath);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">addRuntime</span><span style="color: var(--shiki-color-text)">(moduleMap</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> entryPoint) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">trim</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">    const modules = </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">moduleMap</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">    const entry = &quot;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">entryPoint</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&quot;;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">    function webpackStart(&#123; modules, entry &#125;) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">      const moduleCache = &#123;&#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">      const require = moduleName =&gt; &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        // if in cache, return the cached version</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        if (moduleCache[moduleName]) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">          return moduleCache[moduleName];</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        const exports = &#123;&#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        // this will prevent infinite &quot;require&quot; loop</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        // from circular dependencies</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        moduleCache[moduleName] = exports;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">    </span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        // &quot;require&quot;-ing the module,</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        // exported stuff will assigned to &quot;exports&quot;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        modules[moduleName](exports, require);</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">        return moduleCache[moduleName];</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">      &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">    </span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">      // start the program</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">      require(entry);</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">    &#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">    webpackStart(&#123; modules, entry &#125;);&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// trim away spaces before the line</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">trim</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">lines</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">str</span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#92;n&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.filter</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">Boolean</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">padLength</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> lines[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">].</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> lines[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-function)">.trimLeft</span><span style="color: var(--shiki-color-text)">().</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">RegExp</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;^\\s&#123;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">padLength</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#125;&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">lines</span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(line </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">line</span><span style="color: var(--shiki-token-function)">.replace</span><span style="color: var(--shiki-color-text)">(regex</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">))</span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#92;n&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Vh,ds,Jh,ze,Bh,Wh,Ze,Fh,Uh,$h,lo,Kh,Qe,Yh,zh,Zh,Xe,Kx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">bundle</span><span style="color: var(--shiki-color-text)">(graph) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">collectModules</span><span style="color: var(--shiki-color-text)">(graph);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">moduleMap</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">toModuleMap</span><span style="color: var(--shiki-color-text)">(modules);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">moduleCode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">addRuntime</span><span style="color: var(--shiki-color-text)">(moduleMap</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> modules[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">].filePath);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [&#123; name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;bundle.js&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> content</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> moduleCode &#125;];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Qh,ro,Xh,sa,sk,ok,ek,oa,Yx=`<pre class="prism language-"><code><span class="line">Area of square:  25</span>
<span class="line">Area of circle 78.525</span></code></pre>`,ak,Bt,tk,nk,io,lk,Wt,rk,ik,Cn,q,Ft,po,pk,ck,co,hk,Ut,kk,vk,yk,$t,dk,uk,ea,zx=`<div class="filename">index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> squareArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./square.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> circleArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./circle.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">squareArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line dim"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circleArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span></code></pre>`,xk,aa,Zx=`<div class="filename">circle.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line highlight"><span style="color: var(--shiki-token-comment)">// const PI = 3.141;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; PI &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./index.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> area;</span></span></code></pre>`,fk,Kt,mk,wk,ta,Qx='<pre class="prism language-"><code><span class="line">RangeError: Maximum call stack size exceeded</span></code></pre>',jn,m,Yt,ho,gk,bk,zt,_k,Ek,ko,Zt,Ik,Pk,Qt,Tk,qk,na,Xx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// fixing circular dependencies when generating module graph</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">MODULE_CACHE</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Map</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createModule</span><span style="color: var(--shiki-color-text)">(filePath) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-token-constant)">MODULE_CACHE</span><span style="color: var(--shiki-token-function)">.has</span><span style="color: var(--shiki-color-text)">(filePath)) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)">(filePath);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-constant)">MODULE_CACHE</span><span style="color: var(--shiki-token-function)">.set</span><span style="color: var(--shiki-color-text)">(filePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-token-function)">.initDependencies</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">MODULE_CACHE</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(filePath);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">initDependencies</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.dependencies </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.findDependencies</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// fixing circular dependencies when traversing module graph</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">collectModules</span><span style="color: var(--shiki-color-text)">(graph) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Set</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">collect</span><span style="color: var(--shiki-color-text)">(graph</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> modules);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Array</span><span style="color: var(--shiki-token-function)">.from</span><span style="color: var(--shiki-color-text)">(modules);</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">collect</span><span style="color: var(--shiki-color-text)">(module</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> modules) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-token-function)">.has</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">)) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-token-function)">.add</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">dependencies</span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">(dependency </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">collect</span><span style="color: var(--shiki-color-text)">(dependency</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> modules));</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ak,Xt,Ok,Sk,la,sf=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">$ node output/bundle.js</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">Area of square:  25</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">Area of circle NaN</span></span></code></pre>`,Ck,sn,jk,Dk,ra,of=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;index.js&#39;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; default: </span><span style="color: var(--shiki-token-constant)">squareArea</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;square.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 1. require circle.js</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; default: </span><span style="color: var(--shiki-token-constant)">circleArea</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;circle.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 3. define PI on exports</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">squareArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 4. call &#96;circleArea&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circleArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;circle.js&#39;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 2. at the point of executing this, PI is not yet defined</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; PI: </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;index.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// 5. PI is undefined</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.default </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> area;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Mk,I,Lk,ia,Nk,Hk,pa,Gk,Rk,ca,Vk,Jk,ha,Bk,Wk,ka,Fk,Uk,va,$k,Kk,ya,Yk,zk,da,Zk,Qk,Xk,on,sv,ov,ua,ef=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;index.js&#39;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">square_import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;square.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 1. require circle.js</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">circle_import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;circle.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 3. define PI on exports</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> square_import[</span><span style="color: var(--shiki-token-string-expression)">&#39;default&#39;</span><span style="color: var(--shiki-color-text)">](</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 4. call &#96;circleArea&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> circle_import[</span><span style="color: var(--shiki-token-string-expression)">&#39;default&#39;</span><span style="color: var(--shiki-color-text)">](</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;circle.js&#39;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> require) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 2. we keep a reference of the &#96;index.js&#96;&#39;s &#96;exports&#96; object</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">index_import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;index.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// 5. we get PI from the &#96;exports&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> index_import[</span><span style="color: var(--shiki-token-string-expression)">&#39;PI&#39;</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">.default </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> area;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ev,vo,av,xa,tv,nv,lv,yo,rv,uo,iv,pv,Dn,Z,en,xo,cv,hv,us,kv,an,vv,yv,tn,dv,uv,xv,fo,fv,nn,mv,wv,Mn,M,ln,mo,gv,bv,rn,_v,Ev,wo,pn,Iv,Pv,cn,Tv,qv,hn,Av,Ov,kn,Sv,Ln,ms,vn,go,Cv,jv,z,yn,bo,Dv,Mv,dn,_o,Lv,Nv,un,Eo,Hv,Gv,xn,Io,Rv,Nn;return b=new $f({props:{data:[{link:"getting-started",title:"Getting Started",nested:[{link:"the-input",title:"The Input"}]},{link:"writing",title:"Writing"},{link:"resolving",title:"Resolving"},{link:"bundling",title:"Bundling",nested:[{link:"grouping-modules-into-files",title:"Grouping modules into files"},{link:"creating-module-map",title:"Creating module map"},{link:"create-the-runtime",title:'Create the "runtime"'}]},{link:"optimisation",title:"Optimisation",nested:[{link:"circular-dependency",title:"Circular dependency"}]},{link:"summary",title:"Summary",nested:[{link:"whats-next",title:"Whats next?"}]},{link:"further-readings",title:"Further Readings"}]}}),{c(){ux(b.$$.fragment),W=i(),T=e("p"),Is=a("In my "),_=e("a"),F=a("previous article"),To=a(", I explained how module bundler works. I used "),Ps=e("a"),pl=a("webpack"),cl=a(" and "),Ts=e("a"),hl=a("rollup"),kl=a(" as example, how each of them gave us a different perspective on how we can bundle our JavaScript application."),fn=i(),qo=e("p"),vl=a("In this article, I am going to show you how I wrote my module bundler. The module bundler itself is not production-ready, yet I learned a ton through the exercise, and I am ever more appreciative of what modern module bundlers have provided."),mn=i(),wn=e("hr"),gn=i(),xs=e("p"),yl=a("\u26A0\uFE0F "),Ca=e("strong"),dl=a("Warning: Tons of JavaScript code ahead. \u{1F648}\u{1F631}\u{1F628}"),ul=a(" \u26A0\uFE0F"),bn=i(),_n=e("hr"),En=i(),D=e("section"),ja=e("h2"),qs=e("a"),xl=a("Getting Started"),fl=i(),As=e("p"),ml=a("I talked about the input (the JavaScript modules) and the output (the bundled JavaScript file) of a module bundler in "),Ao=e("a"),wl=a("my previous article"),gl=a(". Now it's time to write a module bundler that takes in the input and produces the output."),bl=i(),Os=e("p"),_l=a("A "),Da=e("em"),El=a("basic"),Il=a(" module bundler can be broken down into 2 parts:"),Pl=i(),Ss=e("ul"),Oo=e("li"),Tl=a("Understands the code and constructs the dependency graph "),Ma=e("strong"),ql=a("(Dependency Resolution)"),Al=i(),So=e("li"),Ol=a("Assembles the module into a single (or multiple) JavaScript file "),La=e("strong"),Sl=a("(Bundle)"),Cl=i(),Na=e("blockquote"),Cs=e("p"),jl=a("A "),Ha=e("strong"),Dl=a("dependency graph"),Ml=a(" is a graph representation of the dependency relationship between modules."),In=i(),O=e("section"),Ga=e("h3"),js=e("a"),Ll=a("The Input"),Nl=i(),Ra=e("p"),Hl=a("In this article, I will be using following files as my input to the bundler:"),Gl=i(),Co=e("div"),Rl=i(),jo=e("div"),Vl=i(),Do=e("div"),Jl=i(),U=e("p"),Bl=a("I've created the project on "),Ds=e("a"),Wl=a("Github"),Fl=a(", so if you are interested to try out yourself, you can clone it and checkout the "),Mo=e("code"),Ul=a("fixture-1"),$l=a(" tag. The input files are in the "),Lo=e("code"),Kl=a("fixture/"),Yl=a(" folder."),Pn=i(),h=e("section"),Va=e("h2"),Ms=e("a"),zl=a("Writing"),Zl=i(),Ja=e("p"),Ql=a("I started with the main structure of the module bundler:"),Xl=i(),No=e("div"),sr=i(),Ba=e("blockquote"),ts=e("p"),or=a("The "),Wa=e("strong"),er=a("dependency graph"),ar=a(" is a "),Ls=e("a"),tr=a("directed graph"),nr=a(", where the vertex is the module, and the directed edge is the dependency relationship between the modules."),lr=i(),Ho=e("div"),rr=i(),Fa=e("p"),ir=a('So, the entry module is "the root" of the graph.'),pr=i(),ns=e("p"),cr=a("In "),Go=e("code"),hr=a("createModule"),kr=a(", I instantiate a new "),Ro=e("code"),vr=a("Module"),yr=a(" instance:"),dr=i(),Vo=e("div"),ur=i(),Ns=e("p"),xr=a("The class "),Jo=e("code"),fr=a("Module"),mr=a(" will be used to record module properties, such as the content, the dependencies, exported keys, etc."),wr=i(),Bo=e("div"),gr=i(),$=e("p"),br=a("While the "),Wo=e("code"),_r=a("content"),Er=a(" is the string content of the module, to understand what it actually means, I used "),Hs=e("a"),Ir=a("babel"),Pr=a(" to "),Ua=e("em"),Tr=a("parse the content"),qr=a(" into AST (Abstract Syntax Tree):"),Ar=i(),Fo=e("div"),Or=i(),$a=e("p"),Sr=a("Next, I need to find out the dependency of this module:"),Cr=i(),Uo=e("div"),jr=i(),Ka=e("p"),Dr=a("So, how can I know what are the dependencies of this module?"),Mr=i(),ls=e("p"),Lr=a("I can look for the "),$o=e("code"),Nr=a("import"),Hr=a(` statement from the AST with the help of the
`),Gs=e("a"),Gr=a("babel-ast-explorer"),Rr=a("."),Vr=i(),Ya=e("p"),Rs=e("picture"),za=e("source"),Za=e("source"),fs=e("img"),Jr=i(),j=e("p"),Br=a("I found out that the "),Ko=e("code"),Wr=a("import"),Fr=a(" statement in the AST is called the "),Yo=e("code"),Ur=a("ImportDeclaration"),$r=a(". It has "),zo=e("code"),Kr=a("specifiers"),Yr=a(" and "),Zo=e("code"),zr=a("source"),Zr=a(", which the "),Qo=e("code"),Qr=a("source.value"),Xr=a(" tells us what this module is importing from:"),si=i(),Xo=e("div"),oi=i(),N=e("p"),ei=a("So I had the path that the module is requesting, but it could be relative to the current file, eg "),se=e("code"),ai=a('"./foo/bar"'),ti=a(", or from the "),oe=e("code"),ni=a("node_modules"),li=a(", eg: "),ee=e("code"),ri=a('"lodash"'),ii=a(". How do I know what is the "),Qa=e("strong"),pi=a("actual file path"),ci=a(" that the module is requesting?"),hi=i(),Vs=e("p"),ki=a("The step of figuring out the actual path based on the requested path, is called "),Xa=e("strong"),vi=a('"Resolving"'),yi=a(":"),di=i(),ae=e("div"),ui=i(),st=e("p"),ot=e("em"),xi=a("Resolving path to the actual file path"),Tn=i(),k=e("section"),et=e("h2"),Js=e("a"),fi=a("Resolving"),mi=i(),rs=e("p"),wi=a(`Let's talk about resolving. We know that "import"ing `),te=e("code"),gi=a("./b.js"),bi=a(" in the following examples will result in getting a different file, because when we specify "),ne=e("code"),_i=a("./"),Ei=a(', we are "import"ing relative to the current file.'),Ii=i(),le=e("div"),Pi=i(),re=e("div"),Ti=i(),at=e("p"),qi=a("So, what are the rules of resolving a module?"),Ai=i(),Bs=e("p"),Oi=a("The Node.js documentation has listed out the "),Ws=e("a"),Si=a("detailed step of the module resolving algorithm"),Ci=a(":"),ji=i(),is=e("p"),Di=a("When we specify a relative path, "),ie=e("code"),Mi=a("./b"),Li=a(", Node.js will first assume that "),pe=e("code"),Ni=a("./b"),Hi=a(" is a file, and tries the following extension if it doesn't exactly match the file name:"),Gi=i(),ce=e("div"),Ri=i(),Fs=e("p"),Vi=a("If the file does not exist, Node.js will then try to treat "),he=e("code"),Ji=a("./b"),Bi=a(" as a directory, and try the following:"),Wi=i(),ke=e("div"),Fi=i(),ps=e("p"),Ui=a("If we specify "),ve=e("code"),$i=a("import 'b'"),Ki=a(" instead, Node.js will treat it as a package within "),ye=e("code"),Yi=a("node_modules/"),zi=a(", and have a different resolving strategy."),Zi=i(),cs=e("p"),Qi=a("Through the above illustration, we can see that resolving "),de=e("code"),Xi=a("import './b'"),sp=a(" is not as simple as it seems. Besides the default Node.js resolving behaviour, "),Us=e("a"),op=a("webpack provides a lot more customisation options"),ep=a(", such as custom extensions, alias, modules folders, etc."),ap=i(),$s=e("p"),tp=a("Here, I am showing you the "),tt=e("em"),np=a('"simplest"'),lp=a(" resolver, which is to resolve relative path only:"),rp=i(),ue=e("div"),ip=i(),nt=e("blockquote"),lt=e("small"),pp=a("**Note:** You should try out writing a full node resolvers that resolve relatively as well as absolutely from `node_modules/`"),cp=i(),rt=e("p"),hp=a("Now I know the actual requested file paths, I then create modules out of them."),kp=i(),xe=e("div"),vp=i(),it=e("p"),yp=a("So, for each module, I find their dependencies, parse them, and find each dependency's dependencies, parse them as well, and find their dependencies, and so forth recursively. At the end of the process, I get a module dependency graph that looks something like this:"),dp=i(),fe=e("div"),up=i(),H=e("p"),xp=a("The root of the graph is our entry module, and you can traverse the graph through the "),me=e("code"),fp=a("dependencies"),mp=a(" of the module. As you can see, the "),we=e("code"),wp=a("index.js"),gp=a(" has 2 dependencies, the "),ge=e("code"),bp=a("square.js"),_p=a(" and the "),be=e("code"),Ep=a("circle.js"),Ip=a("."),Pp=i(),pt=e("blockquote"),ct=e("small"),Tp=a("**Note:** If you are following along, you can checkout the tag `feat-1-module-dependency-graph`, to see the code that I had written up till this point."),qn=i(),P=e("section"),ht=e("h2"),Ks=e("a"),qp=a("Bundling"),Ap=i(),kt=e("p"),Op=a("With the module dependency graph, it's time to bundle them into a file!"),Sp=i(),G=e("p"),Cp=a("At this point in time, we can choose whether we want to bundle it in the "),vt=e("strong"),jp=a('"webpack way"'),Dp=a(" or the "),yt=e("strong"),Mp=a('"rollup way"'),Lp=a(". In this article I am showing you how I did it the "),dt=e("strong"),Np=a('"webpack way"'),Hp=a(". I'll write about bundling in the "),ut=e("strong"),Gp=a('"rollup way"'),Rp=a(" in the coming article."),Vp=i(),xt=e("blockquote"),K=e("p"),Jp=a("If you have no idea about what is the "),ft=e("strong"),Bp=a('"webpack way"'),Wp=a(" or "),mt=e("strong"),Fp=a('"rollup way"'),Up=a(', I have "coined" the term in my '),_e=e("a"),$p=a("previous article"),Kp=a(" and have detailed explanation about them!"),Yp=i(),wt=e("p"),zp=a("Let's take a look how the final bundled file would look like:"),Zp=i(),Ee=e("div"),Qp=i(),gt=e("p"),Xp=a("Let's break it down to a few steps:"),sc=i(),hs=e("ul"),bt=e("li"),_t=e("strong"),oc=a("Group modules into files"),ec=i(),Ie=e("li"),Et=e("strong"),ac=a("Create the module map"),tc=a(' and wrapping each module in a "special" module factory function'),nc=i(),Pe=e("li"),It=e("strong"),lc=a('Create the "runtime"'),rc=a(", the glue that links each module together."),An=i(),S=e("section"),Pt=e("h3"),Ys=e("a"),ic=a("Grouping modules into files"),pc=i(),ks=e("p"),cc=a("This step is to decide which modules goes to which file. We can split modules into different files because of "),zs=e("a"),hc=a("code splitting"),kc=a(" due to dynamic import as well as optimisation, such as the webpack's "),Zs=e("a"),vc=a("Chunk Splitting"),yc=a("."),dc=i(),Tt=e("p"),uc=a("I will support code splitting in the future. For now, I grouped all modules into 1 file."),xc=i(),qt=e("p"),fc=a("To collect all the modules from module graph into a list of modules, I did a graph traversal:"),mc=i(),Te=e("div"),wc=i(),At=e("p"),gc=a("...and I used the list of modules to create a module map."),On=i(),d=e("section"),Ot=e("h3"),Qs=e("a"),bc=a("Creating module map"),_c=i(),St=e("p"),Ec=a("The module map I created is a string, that would be inlined into the final bundle file."),Ic=i(),vs=e("p"),Pc=a("I looped through each module, and used "),qe=e("code"),Tc=a("module.filePath"),qc=a(" as the key, and "),Ae=e("code"),Ac=a("module.content"),Oc=a(" as the value."),Sc=i(),Y=e("p"),Cc=a("The reason I dont use "),Oe=e("code"),jc=a("JSON.stringify(moduleMap)"),Dc=a(" instead of manually concatenating to build up the module map, is because JSON can only takes in "),Xs=e("a"),Mc=a("JSON primitive data type"),Lc=a(" as value, but what I built here is a JavaScript map, with "),Se=e("code"),Nc=a("function"),Hc=a(" as value, but in string."),Gc=i(),Ce=e("div"),Rc=i(),so=e("p"),Vc=a("The function that wraps around the "),je=e("code"),Jc=a("module.content"),Bc=a(" is called the module factory function. It provides 2 parameter to the module:"),Wc=i(),oo=e("ul"),De=e("li"),Me=e("code"),Fc=a("exports"),Uc=a(", an object that the module can assign its exported value onto"),$c=i(),Le=e("li"),Ne=e("code"),Kc=a("require"),Yc=a(", a function that the module can invoke with module path to import exported value from another module"),zc=i(),Ct=e("p"),Zc=a("The module map right now is not something that can be executed:"),Qc=i(),He=e("div"),Xc=i(),R=e("p"),sh=a("because it still uses "),Ge=e("code"),oh=a("import"),eh=a(" and "),Re=e("code"),ah=a("export"),th=a(". I had to transform them to use the "),Ve=e("code"),nh=a("exports"),lh=a(" and "),Je=e("code"),rh=a("require"),ih=a(" that we pass in."),ph=i(),jt=e("p"),ch=a("To transform the code, I used the AST of the module again: trasform the ast and generate the new code from the transformed ast."),hh=i(),Dt=e("p"),kh=a('What I need is to trasform the "from" to "to" of the following:'),vh=i(),Be=e("div"),yh=i(),Mt=e("blockquote"),eo=e("p"),dh=a("I wrote a "),We=e("a"),uh=a("step by step guide"),xh=a(" on how to write babel transformation, please do check it out."),fh=i(),ys=e("p"),mh=a("Knowing "),Lt=e("strong"),wh=a("what to target on AST"),gh=a(" and "),Nt=e("strong"),bh=a("how the transformed AST look like"),_h=a(", I wrote my transformation code:"),Eh=i(),Fe=e("div"),Ih=i(),Ue=e("p"),Ph=a("I omitted the actual babel transformation code, because it is lengthy. If you are interested to read about it, you can check out "),ao=e("a"),Th=a("from my Github repo"),qh=i(),Ht=e("p"),Ah=a("So, now the module map looks ready:"),Oh=i(),$e=e("div"),Sh=i(),to=e("p"),Ch=a("One thing to take note is that, for the "),Ke=e("code"),jh=a("require"),Dh=a(" statements, I replaced the requested path to the actual resolved path, because I used the actual resolved path as the key to the module map."),Sn=i(),w=e("section"),Gt=e("h3"),no=e("a"),Rt=e("strong"),Mh=a('Create the "runtime"'),Lh=i(),Vt=e("p"),Nh=a("Now it's time to create the runtime. The runtime is a piece of code that is part of the output bundle, that runs when the application code is running, therefore, the runtime."),Hh=i(),Jt=e("p"),Gh=a("The runtime code can be from a template file, but for simplicity sake, I kept the runtime code as a string:"),Rh=i(),Ye=e("div"),Vh=i(),ds=e("p"),Jh=a("The code above is self explanatory, except if you have no idea what does the "),ze=e("code"),Bh=a("webpackStart()"),Wh=a(" do, you can read more about it in "),Ze=e("a"),Fh=a("my previous post"),Uh=a("."),$h=i(),lo=e("p"),Kh=a("Finally, I returned the module code from the "),Qe=e("code"),Yh=a("bundle"),zh=a(" function:"),Zh=i(),Xe=e("div"),Qh=i(),ro=e("p"),Xh=a("Now I run my bundler, it generates a "),sa=e("code"),sk=a("output/bundle.js"),ok=a(" file. I run the generated file with node and I see:"),ek=i(),oa=e("div"),ak=i(),Bt=e("p"),tk=a("That's it! A working module bundler!"),nk=i(),io=e("p"),lk=a("Of course, the module bundler I've shown here is "),Wt=e("strong"),rk=a("nowhere near webpack"),ik=a(". Webpack supports more module system, resolving strategies, loading strategies, plugin system, optimisation, and many many more."),Cn=i(),q=e("section"),Ft=e("h2"),po=e("a"),pk=a("Optimisation"),ck=i(),co=e("p"),hk=a("I played around my module bundler, and I quickly noticed a bug: "),Ut=e("strong"),kk=a("Circular Dependency"),vk=a("."),yk=i(),$t=e("p"),dk=a("Here's my input files that I've tweaked:"),uk=i(),ea=e("div"),xk=i(),aa=e("div"),fk=i(),Kt=e("p"),mk=a("When I ran it through my module bunlder, immediately it ran into a stack overflow:"),wk=i(),ta=e("div"),jn=i(),m=e("section"),Yt=e("h3"),ho=e("a"),gk=a("Circular dependency"),bk=i(),zt=e("p"),_k=a("There were 2 junctures that the code did recursive traversal which have led to the endless loop:"),Ek=i(),ko=e("ul"),Zt=e("li"),Ik=a("Generating dependency graphs"),Pk=i(),Qt=e("li"),Tk=a("Traversing module graph for bundling"),qk=i(),na=e("div"),Ak=i(),Xt=e("p"),Ok=a("Bundle with the latest code, the stack overflow is gone. However when I executed the output bundle, I saw"),Sk=i(),la=e("div"),Ck=i(),sn=e("p"),jk=a("So I took a look at the output bundle:"),Dk=i(),ra=e("div"),Mk=i(),I=e("p"),Lk=a("So, the problem is that I destructed "),ia=e("code"),Nk=a("PI"),Hk=a(" from the exports of "),pa=e("code"),Gk=a("index.js"),Rk=a(" before it is defined, so naturally "),ca=e("code"),Vk=a("PI"),Jk=a(" within "),ha=e("code"),Bk=a("circle.js"),Wk=a(" would stay as "),ka=e("code"),Fk=a("undefined"),Uk=a(" throughout the application. However before I called "),va=e("code"),$k=a("circleArea"),Kk=a(", we defined "),ya=e("code"),Yk=a("PI"),zk=a(" on the "),da=e("code"),Zk=a("index.js"),Qk=a("'s export, I am expecting it to be available."),Xk=i(),on=e("p"),sv=a("So I built my application with webpack and took a look at how webpack solved this problem."),ov=i(),ua=e("div"),ev=i(),vo=e("p"),av=a("Brilliant! The key is to lazily get the value of "),xa=e("code"),tv=a("PI"),nv=a(" when needed!"),lv=i(),yo=e("p"),rv=a("I changed my babel transformation code, which I am not showing it here. If you are curious enough, you can check out "),uo=e("a"),iv=a("the changes I made from Github"),pv=a("."),Dn=i(),Z=e("section"),en=e("h2"),xo=e("a"),cv=a("Summary"),hv=i(),us=e("p"),kv=a("There's two phases in module bundling: "),an=e("strong"),vv=a("Dependency Resolution"),yv=a(" and "),tn=e("strong"),dv=a("Bundling"),uv=a("."),xv=i(),fo=e("p"),fv=a("I showed you how I constructed the dependency graph, by finding import statements and resolving modules. I shared how I created module maps and transformed the imports / exports syntax during "),nn=e("strong"),mv=a("bundling"),wv=a(". Lastly, I fixed the circular dependency bug that was in the first version of my module bundler."),Mn=i(),M=e("section"),ln=e("h3"),mo=e("a"),gv=a("Whats next?"),bv=i(),rn=e("p"),_v=a("I have a few ideas that I will add to my module bundler, such as:"),Ev=i(),wo=e("ul"),pn=e("li"),Iv=a("code spliting"),Pv=i(),cn=e("li"),Tv=a("watch mode and reloading"),qv=i(),hn=e("p"),Av=a("which I will cover them in my next article when they are ready."),Ov=i(),kn=e("p"),Sv=a("Till then. Cheers. \u{1F60E}"),Ln=i(),ms=e("section"),vn=e("h2"),go=e("a"),Cv=a("Further Readings"),jv=i(),z=e("ul"),yn=e("li"),bo=e("a"),Dv=a("Ronen Amiel, Build Your Own Webpack - You Gotta Love Frontend 2018"),Mv=i(),dn=e("li"),_o=e("a"),Lv=a("Luciano Mammino, Unbundling the JavaScript module bundler - DublinJS July 2018"),Nv=i(),un=e("li"),Eo=e("a"),Hv=a("Adam Kelly, Let\u2019s learn how module bundlers work and then write one ourselves"),Gv=i(),xn=e("li"),Io=e("a"),Rv=a("Webpack founder Tobias Koppers demos bundling live by hand"),this.h()},l(c){xx(b.$$.fragment,c),W=p(c),T=t(c,"P",{});var v=l(T);Is=n(v,"In my "),_=t(v,"A",{href:!0});var zv=l(_);F=n(zv,"previous article"),zv.forEach(o),To=n(v,", I explained how module bundler works. I used "),Ps=t(v,"A",{href:!0,rel:!0});var Zv=l(Ps);pl=n(Zv,"webpack"),Zv.forEach(o),cl=n(v," and "),Ts=t(v,"A",{href:!0,rel:!0});var Qv=l(Ts);hl=n(Qv,"rollup"),Qv.forEach(o),kl=n(v," as example, how each of them gave us a different perspective on how we can bundle our JavaScript application."),v.forEach(o),fn=p(c),qo=t(c,"P",{});var Xv=l(qo);vl=n(Xv,"In this article, I am going to show you how I wrote my module bundler. The module bundler itself is not production-ready, yet I learned a ton through the exercise, and I am ever more appreciative of what modern module bundlers have provided."),Xv.forEach(o),mn=p(c),wn=t(c,"HR",{}),gn=p(c),xs=t(c,"P",{});var Hn=l(xs);yl=n(Hn,"\u26A0\uFE0F "),Ca=t(Hn,"STRONG",{});var sy=l(Ca);dl=n(sy,"Warning: Tons of JavaScript code ahead. \u{1F648}\u{1F631}\u{1F628}"),sy.forEach(o),ul=n(Hn," \u26A0\uFE0F"),Hn.forEach(o),bn=p(c),_n=t(c,"HR",{}),En=p(c),D=t(c,"SECTION",{});var Q=l(D);ja=t(Q,"H2",{});var oy=l(ja);qs=t(oy,"A",{href:!0,id:!0});var ey=l(qs);xl=n(ey,"Getting Started"),ey.forEach(o),oy.forEach(o),fl=p(Q),As=t(Q,"P",{});var Gn=l(As);ml=n(Gn,"I talked about the input (the JavaScript modules) and the output (the bundled JavaScript file) of a module bundler in "),Ao=t(Gn,"A",{href:!0});var ay=l(Ao);wl=n(ay,"my previous article"),ay.forEach(o),gl=n(Gn,". Now it's time to write a module bundler that takes in the input and produces the output."),Gn.forEach(o),bl=p(Q),Os=t(Q,"P",{});var Rn=l(Os);_l=n(Rn,"A "),Da=t(Rn,"EM",{});var ty=l(Da);El=n(ty,"basic"),ty.forEach(o),Il=n(Rn," module bundler can be broken down into 2 parts:"),Rn.forEach(o),Pl=p(Q),Ss=t(Q,"UL",{});var Vn=l(Ss);Oo=t(Vn,"LI",{});var Vv=l(Oo);Tl=n(Vv,"Understands the code and constructs the dependency graph "),Ma=t(Vv,"STRONG",{});var ny=l(Ma);ql=n(ny,"(Dependency Resolution)"),ny.forEach(o),Vv.forEach(o),Al=p(Vn),So=t(Vn,"LI",{});var Jv=l(So);Ol=n(Jv,"Assembles the module into a single (or multiple) JavaScript file "),La=t(Jv,"STRONG",{});var ly=l(La);Sl=n(ly,"(Bundle)"),ly.forEach(o),Jv.forEach(o),Vn.forEach(o),Cl=p(Q),Na=t(Q,"BLOCKQUOTE",{});var ry=l(Na);Cs=t(ry,"P",{});var Jn=l(Cs);jl=n(Jn,"A "),Ha=t(Jn,"STRONG",{});var iy=l(Ha);Dl=n(iy,"dependency graph"),iy.forEach(o),Ml=n(Jn," is a graph representation of the dependency relationship between modules."),Jn.forEach(o),ry.forEach(o),Q.forEach(o),In=p(c),O=t(c,"SECTION",{});var V=l(O);Ga=t(V,"H3",{});var py=l(Ga);js=t(py,"A",{href:!0,id:!0});var cy=l(js);Ll=n(cy,"The Input"),cy.forEach(o),py.forEach(o),Nl=p(V),Ra=t(V,"P",{});var hy=l(Ra);Hl=n(hy,"In this article, I will be using following files as my input to the bundler:"),hy.forEach(o),Gl=p(V),Co=t(V,"DIV",{class:!0});var af=l(Co);af.forEach(o),Rl=p(V),jo=t(V,"DIV",{class:!0});var tf=l(jo);tf.forEach(o),Vl=p(V),Do=t(V,"DIV",{class:!0});var nf=l(Do);nf.forEach(o),Jl=p(V),U=t(V,"P",{});var ws=l(U);Bl=n(ws,"I've created the project on "),Ds=t(ws,"A",{href:!0,rel:!0});var ky=l(Ds);Wl=n(ky,"Github"),ky.forEach(o),Fl=n(ws,", so if you are interested to try out yourself, you can clone it and checkout the "),Mo=t(ws,"CODE",{class:!0});var vy=l(Mo);Ul=n(vy,"fixture-1"),vy.forEach(o),$l=n(ws," tag. The input files are in the "),Lo=t(ws,"CODE",{class:!0});var yy=l(Lo);Kl=n(yy,"fixture/"),yy.forEach(o),Yl=n(ws," folder."),ws.forEach(o),V.forEach(o),Pn=p(c),h=t(c,"SECTION",{});var y=l(h);Va=t(y,"H2",{});var dy=l(Va);Ms=t(dy,"A",{href:!0,id:!0});var uy=l(Ms);zl=n(uy,"Writing"),uy.forEach(o),dy.forEach(o),Zl=p(y),Ja=t(y,"P",{});var xy=l(Ja);Ql=n(xy,"I started with the main structure of the module bundler:"),xy.forEach(o),Xl=p(y),No=t(y,"DIV",{class:!0});var lf=l(No);lf.forEach(o),sr=p(y),Ba=t(y,"BLOCKQUOTE",{});var fy=l(Ba);ts=t(fy,"P",{});var fa=l(ts);or=n(fa,"The "),Wa=t(fa,"STRONG",{});var my=l(Wa);er=n(my,"dependency graph"),my.forEach(o),ar=n(fa," is a "),Ls=t(fa,"A",{href:!0,rel:!0});var wy=l(Ls);tr=n(wy,"directed graph"),wy.forEach(o),nr=n(fa,", where the vertex is the module, and the directed edge is the dependency relationship between the modules."),fa.forEach(o),fy.forEach(o),lr=p(y),Ho=t(y,"DIV",{class:!0});var rf=l(Ho);rf.forEach(o),rr=p(y),Fa=t(y,"P",{});var gy=l(Fa);ir=n(gy,'So, the entry module is "the root" of the graph.'),gy.forEach(o),pr=p(y),ns=t(y,"P",{});var ma=l(ns);cr=n(ma,"In "),Go=t(ma,"CODE",{class:!0});var by=l(Go);hr=n(by,"createModule"),by.forEach(o),kr=n(ma,", I instantiate a new "),Ro=t(ma,"CODE",{class:!0});var _y=l(Ro);vr=n(_y,"Module"),_y.forEach(o),yr=n(ma," instance:"),ma.forEach(o),dr=p(y),Vo=t(y,"DIV",{class:!0});var pf=l(Vo);pf.forEach(o),ur=p(y),Ns=t(y,"P",{});var Bn=l(Ns);xr=n(Bn,"The class "),Jo=t(Bn,"CODE",{class:!0});var Ey=l(Jo);fr=n(Ey,"Module"),Ey.forEach(o),mr=n(Bn," will be used to record module properties, such as the content, the dependencies, exported keys, etc."),Bn.forEach(o),wr=p(y),Bo=t(y,"DIV",{class:!0});var cf=l(Bo);cf.forEach(o),gr=p(y),$=t(y,"P",{});var gs=l($);br=n(gs,"While the "),Wo=t(gs,"CODE",{class:!0});var Iy=l(Wo);_r=n(Iy,"content"),Iy.forEach(o),Er=n(gs," is the string content of the module, to understand what it actually means, I used "),Hs=t(gs,"A",{href:!0,rel:!0});var Py=l(Hs);Ir=n(Py,"babel"),Py.forEach(o),Pr=n(gs," to "),Ua=t(gs,"EM",{});var Ty=l(Ua);Tr=n(Ty,"parse the content"),Ty.forEach(o),qr=n(gs," into AST (Abstract Syntax Tree):"),gs.forEach(o),Ar=p(y),Fo=t(y,"DIV",{class:!0});var hf=l(Fo);hf.forEach(o),Or=p(y),$a=t(y,"P",{});var qy=l($a);Sr=n(qy,"Next, I need to find out the dependency of this module:"),qy.forEach(o),Cr=p(y),Uo=t(y,"DIV",{class:!0});var kf=l(Uo);kf.forEach(o),jr=p(y),Ka=t(y,"P",{});var Ay=l(Ka);Dr=n(Ay,"So, how can I know what are the dependencies of this module?"),Ay.forEach(o),Mr=p(y),ls=t(y,"P",{});var wa=l(ls);Lr=n(wa,"I can look for the "),$o=t(wa,"CODE",{class:!0});var Oy=l($o);Nr=n(Oy,"import"),Oy.forEach(o),Hr=n(wa,` statement from the AST with the help of the
`),Gs=t(wa,"A",{href:!0,rel:!0});var Sy=l(Gs);Gr=n(Sy,"babel-ast-explorer"),Sy.forEach(o),Rr=n(wa,"."),wa.forEach(o),Vr=p(y),Ya=t(y,"P",{});var Cy=l(Ya);Rs=t(Cy,"PICTURE",{});var Wn=l(Rs);za=t(Wn,"SOURCE",{type:!0,srcset:!0}),Za=t(Wn,"SOURCE",{type:!0,srcset:!0}),fs=t(Wn,"IMG",{src:!0,loading:!0,alt:!0,title:!0}),Wn.forEach(o),Cy.forEach(o),Jr=p(y),j=t(y,"P",{});var J=l(j);Br=n(J,"I found out that the "),Ko=t(J,"CODE",{class:!0});var jy=l(Ko);Wr=n(jy,"import"),jy.forEach(o),Fr=n(J," statement in the AST is called the "),Yo=t(J,"CODE",{class:!0});var Dy=l(Yo);Ur=n(Dy,"ImportDeclaration"),Dy.forEach(o),$r=n(J,". It has "),zo=t(J,"CODE",{class:!0});var My=l(zo);Kr=n(My,"specifiers"),My.forEach(o),Yr=n(J," and "),Zo=t(J,"CODE",{class:!0});var Ly=l(Zo);zr=n(Ly,"source"),Ly.forEach(o),Zr=n(J,", which the "),Qo=t(J,"CODE",{class:!0});var Ny=l(Qo);Qr=n(Ny,"source.value"),Ny.forEach(o),Xr=n(J," tells us what this module is importing from:"),J.forEach(o),si=p(y),Xo=t(y,"DIV",{class:!0});var vf=l(Xo);vf.forEach(o),oi=p(y),N=t(y,"P",{});var X=l(N);ei=n(X,"So I had the path that the module is requesting, but it could be relative to the current file, eg "),se=t(X,"CODE",{class:!0});var Hy=l(se);ai=n(Hy,'"./foo/bar"'),Hy.forEach(o),ti=n(X,", or from the "),oe=t(X,"CODE",{class:!0});var Gy=l(oe);ni=n(Gy,"node_modules"),Gy.forEach(o),li=n(X,", eg: "),ee=t(X,"CODE",{class:!0});var Ry=l(ee);ri=n(Ry,'"lodash"'),Ry.forEach(o),ii=n(X,". How do I know what is the "),Qa=t(X,"STRONG",{});var Vy=l(Qa);pi=n(Vy,"actual file path"),Vy.forEach(o),ci=n(X," that the module is requesting?"),X.forEach(o),hi=p(y),Vs=t(y,"P",{});var Fn=l(Vs);ki=n(Fn,"The step of figuring out the actual path based on the requested path, is called "),Xa=t(Fn,"STRONG",{});var Jy=l(Xa);vi=n(Jy,'"Resolving"'),Jy.forEach(o),yi=n(Fn,":"),Fn.forEach(o),di=p(y),ae=t(y,"DIV",{class:!0});var yf=l(ae);yf.forEach(o),ui=p(y),st=t(y,"P",{});var By=l(st);ot=t(By,"EM",{});var Wy=l(ot);xi=n(Wy,"Resolving path to the actual file path"),Wy.forEach(o),By.forEach(o),y.forEach(o),Tn=p(c),k=t(c,"SECTION",{});var u=l(k);et=t(u,"H2",{});var Fy=l(et);Js=t(Fy,"A",{href:!0,id:!0});var Uy=l(Js);fi=n(Uy,"Resolving"),Uy.forEach(o),Fy.forEach(o),mi=p(u),rs=t(u,"P",{});var ga=l(rs);wi=n(ga,`Let's talk about resolving. We know that "import"ing `),te=t(ga,"CODE",{class:!0});var $y=l(te);gi=n($y,"./b.js"),$y.forEach(o),bi=n(ga," in the following examples will result in getting a different file, because when we specify "),ne=t(ga,"CODE",{class:!0});var Ky=l(ne);_i=n(Ky,"./"),Ky.forEach(o),Ei=n(ga,', we are "import"ing relative to the current file.'),ga.forEach(o),Ii=p(u),le=t(u,"DIV",{class:!0});var df=l(le);df.forEach(o),Pi=p(u),re=t(u,"DIV",{class:!0});var uf=l(re);uf.forEach(o),Ti=p(u),at=t(u,"P",{});var Yy=l(at);qi=n(Yy,"So, what are the rules of resolving a module?"),Yy.forEach(o),Ai=p(u),Bs=t(u,"P",{});var Un=l(Bs);Oi=n(Un,"The Node.js documentation has listed out the "),Ws=t(Un,"A",{href:!0,rel:!0});var zy=l(Ws);Si=n(zy,"detailed step of the module resolving algorithm"),zy.forEach(o),Ci=n(Un,":"),Un.forEach(o),ji=p(u),is=t(u,"P",{});var ba=l(is);Di=n(ba,"When we specify a relative path, "),ie=t(ba,"CODE",{class:!0});var Zy=l(ie);Mi=n(Zy,"./b"),Zy.forEach(o),Li=n(ba,", Node.js will first assume that "),pe=t(ba,"CODE",{class:!0});var Qy=l(pe);Ni=n(Qy,"./b"),Qy.forEach(o),Hi=n(ba," is a file, and tries the following extension if it doesn't exactly match the file name:"),ba.forEach(o),Gi=p(u),ce=t(u,"DIV",{class:!0});var xf=l(ce);xf.forEach(o),Ri=p(u),Fs=t(u,"P",{});var $n=l(Fs);Vi=n($n,"If the file does not exist, Node.js will then try to treat "),he=t($n,"CODE",{class:!0});var Xy=l(he);Ji=n(Xy,"./b"),Xy.forEach(o),Bi=n($n," as a directory, and try the following:"),$n.forEach(o),Wi=p(u),ke=t(u,"DIV",{class:!0});var ff=l(ke);ff.forEach(o),Fi=p(u),ps=t(u,"P",{});var _a=l(ps);Ui=n(_a,"If we specify "),ve=t(_a,"CODE",{class:!0});var sd=l(ve);$i=n(sd,"import 'b'"),sd.forEach(o),Ki=n(_a," instead, Node.js will treat it as a package within "),ye=t(_a,"CODE",{class:!0});var od=l(ye);Yi=n(od,"node_modules/"),od.forEach(o),zi=n(_a,", and have a different resolving strategy."),_a.forEach(o),Zi=p(u),cs=t(u,"P",{});var Ea=l(cs);Qi=n(Ea,"Through the above illustration, we can see that resolving "),de=t(Ea,"CODE",{class:!0});var ed=l(de);Xi=n(ed,"import './b'"),ed.forEach(o),sp=n(Ea," is not as simple as it seems. Besides the default Node.js resolving behaviour, "),Us=t(Ea,"A",{href:!0,rel:!0});var ad=l(Us);op=n(ad,"webpack provides a lot more customisation options"),ad.forEach(o),ep=n(Ea,", such as custom extensions, alias, modules folders, etc."),Ea.forEach(o),ap=p(u),$s=t(u,"P",{});var Kn=l($s);tp=n(Kn,"Here, I am showing you the "),tt=t(Kn,"EM",{});var td=l(tt);np=n(td,'"simplest"'),td.forEach(o),lp=n(Kn," resolver, which is to resolve relative path only:"),Kn.forEach(o),rp=p(u),ue=t(u,"DIV",{class:!0});var mf=l(ue);mf.forEach(o),ip=p(u),nt=t(u,"BLOCKQUOTE",{});var nd=l(nt);lt=t(nd,"SMALL",{});var ld=l(lt);pp=n(ld,"**Note:** You should try out writing a full node resolvers that resolve relatively as well as absolutely from `node_modules/`"),ld.forEach(o),nd.forEach(o),cp=p(u),rt=t(u,"P",{});var rd=l(rt);hp=n(rd,"Now I know the actual requested file paths, I then create modules out of them."),rd.forEach(o),kp=p(u),xe=t(u,"DIV",{class:!0});var wf=l(xe);wf.forEach(o),vp=p(u),it=t(u,"P",{});var id=l(it);yp=n(id,"So, for each module, I find their dependencies, parse them, and find each dependency's dependencies, parse them as well, and find their dependencies, and so forth recursively. At the end of the process, I get a module dependency graph that looks something like this:"),id.forEach(o),dp=p(u),fe=t(u,"DIV",{class:!0});var gf=l(fe);gf.forEach(o),up=p(u),H=t(u,"P",{});var ss=l(H);xp=n(ss,"The root of the graph is our entry module, and you can traverse the graph through the "),me=t(ss,"CODE",{class:!0});var pd=l(me);fp=n(pd,"dependencies"),pd.forEach(o),mp=n(ss," of the module. As you can see, the "),we=t(ss,"CODE",{class:!0});var cd=l(we);wp=n(cd,"index.js"),cd.forEach(o),gp=n(ss," has 2 dependencies, the "),ge=t(ss,"CODE",{class:!0});var hd=l(ge);bp=n(hd,"square.js"),hd.forEach(o),_p=n(ss," and the "),be=t(ss,"CODE",{class:!0});var kd=l(be);Ep=n(kd,"circle.js"),kd.forEach(o),Ip=n(ss,"."),ss.forEach(o),Pp=p(u),pt=t(u,"BLOCKQUOTE",{});var vd=l(pt);ct=t(vd,"SMALL",{});var yd=l(ct);Tp=n(yd,"**Note:** If you are following along, you can checkout the tag `feat-1-module-dependency-graph`, to see the code that I had written up till this point."),yd.forEach(o),vd.forEach(o),u.forEach(o),qn=p(c),P=t(c,"SECTION",{});var C=l(P);ht=t(C,"H2",{});var dd=l(ht);Ks=t(dd,"A",{href:!0,id:!0});var ud=l(Ks);qp=n(ud,"Bundling"),ud.forEach(o),dd.forEach(o),Ap=p(C),kt=t(C,"P",{});var xd=l(kt);Op=n(xd,"With the module dependency graph, it's time to bundle them into a file!"),xd.forEach(o),Sp=p(C),G=t(C,"P",{});var os=l(G);Cp=n(os,"At this point in time, we can choose whether we want to bundle it in the "),vt=t(os,"STRONG",{});var fd=l(vt);jp=n(fd,'"webpack way"'),fd.forEach(o),Dp=n(os," or the "),yt=t(os,"STRONG",{});var md=l(yt);Mp=n(md,'"rollup way"'),md.forEach(o),Lp=n(os,". In this article I am showing you how I did it the "),dt=t(os,"STRONG",{});var wd=l(dt);Np=n(wd,'"webpack way"'),wd.forEach(o),Hp=n(os,". I'll write about bundling in the "),ut=t(os,"STRONG",{});var gd=l(ut);Gp=n(gd,'"rollup way"'),gd.forEach(o),Rp=n(os," in the coming article."),os.forEach(o),Vp=p(C),xt=t(C,"BLOCKQUOTE",{});var bd=l(xt);K=t(bd,"P",{});var bs=l(K);Jp=n(bs,"If you have no idea about what is the "),ft=t(bs,"STRONG",{});var _d=l(ft);Bp=n(_d,'"webpack way"'),_d.forEach(o),Wp=n(bs," or "),mt=t(bs,"STRONG",{});var Ed=l(mt);Fp=n(Ed,'"rollup way"'),Ed.forEach(o),Up=n(bs,', I have "coined" the term in my '),_e=t(bs,"A",{href:!0});var Id=l(_e);$p=n(Id,"previous article"),Id.forEach(o),Kp=n(bs," and have detailed explanation about them!"),bs.forEach(o),bd.forEach(o),Yp=p(C),wt=t(C,"P",{});var Pd=l(wt);zp=n(Pd,"Let's take a look how the final bundled file would look like:"),Pd.forEach(o),Zp=p(C),Ee=t(C,"DIV",{class:!0});var bf=l(Ee);bf.forEach(o),Qp=p(C),gt=t(C,"P",{});var Td=l(gt);Xp=n(Td,"Let's break it down to a few steps:"),Td.forEach(o),sc=p(C),hs=t(C,"UL",{});var Ia=l(hs);bt=t(Ia,"LI",{});var qd=l(bt);_t=t(qd,"STRONG",{});var Ad=l(_t);oc=n(Ad,"Group modules into files"),Ad.forEach(o),qd.forEach(o),ec=p(Ia),Ie=t(Ia,"LI",{});var Bv=l(Ie);Et=t(Bv,"STRONG",{});var Od=l(Et);ac=n(Od,"Create the module map"),Od.forEach(o),tc=n(Bv,' and wrapping each module in a "special" module factory function'),Bv.forEach(o),nc=p(Ia),Pe=t(Ia,"LI",{});var Wv=l(Pe);It=t(Wv,"STRONG",{});var Sd=l(It);lc=n(Sd,'Create the "runtime"'),Sd.forEach(o),rc=n(Wv,", the glue that links each module together."),Wv.forEach(o),Ia.forEach(o),C.forEach(o),An=p(c),S=t(c,"SECTION",{});var B=l(S);Pt=t(B,"H3",{});var Cd=l(Pt);Ys=t(Cd,"A",{href:!0,id:!0});var jd=l(Ys);ic=n(jd,"Grouping modules into files"),jd.forEach(o),Cd.forEach(o),pc=p(B),ks=t(B,"P",{});var Pa=l(ks);cc=n(Pa,"This step is to decide which modules goes to which file. We can split modules into different files because of "),zs=t(Pa,"A",{href:!0,rel:!0});var Dd=l(zs);hc=n(Dd,"code splitting"),Dd.forEach(o),kc=n(Pa," due to dynamic import as well as optimisation, such as the webpack's "),Zs=t(Pa,"A",{href:!0,rel:!0});var Md=l(Zs);vc=n(Md,"Chunk Splitting"),Md.forEach(o),yc=n(Pa,"."),Pa.forEach(o),dc=p(B),Tt=t(B,"P",{});var Ld=l(Tt);uc=n(Ld,"I will support code splitting in the future. For now, I grouped all modules into 1 file."),Ld.forEach(o),xc=p(B),qt=t(B,"P",{});var Nd=l(qt);fc=n(Nd,"To collect all the modules from module graph into a list of modules, I did a graph traversal:"),Nd.forEach(o),mc=p(B),Te=t(B,"DIV",{class:!0});var _f=l(Te);_f.forEach(o),wc=p(B),At=t(B,"P",{});var Hd=l(At);gc=n(Hd,"...and I used the list of modules to create a module map."),Hd.forEach(o),B.forEach(o),On=p(c),d=t(c,"SECTION",{});var x=l(d);Ot=t(x,"H3",{});var Gd=l(Ot);Qs=t(Gd,"A",{href:!0,id:!0});var Rd=l(Qs);bc=n(Rd,"Creating module map"),Rd.forEach(o),Gd.forEach(o),_c=p(x),St=t(x,"P",{});var Vd=l(St);Ec=n(Vd,"The module map I created is a string, that would be inlined into the final bundle file."),Vd.forEach(o),Ic=p(x),vs=t(x,"P",{});var Ta=l(vs);Pc=n(Ta,"I looped through each module, and used "),qe=t(Ta,"CODE",{class:!0});var Jd=l(qe);Tc=n(Jd,"module.filePath"),Jd.forEach(o),qc=n(Ta," as the key, and "),Ae=t(Ta,"CODE",{class:!0});var Bd=l(Ae);Ac=n(Bd,"module.content"),Bd.forEach(o),Oc=n(Ta," as the value."),Ta.forEach(o),Sc=p(x),Y=t(x,"P",{});var _s=l(Y);Cc=n(_s,"The reason I dont use "),Oe=t(_s,"CODE",{class:!0});var Wd=l(Oe);jc=n(Wd,"JSON.stringify(moduleMap)"),Wd.forEach(o),Dc=n(_s," instead of manually concatenating to build up the module map, is because JSON can only takes in "),Xs=t(_s,"A",{href:!0,rel:!0});var Fd=l(Xs);Mc=n(Fd,"JSON primitive data type"),Fd.forEach(o),Lc=n(_s," as value, but what I built here is a JavaScript map, with "),Se=t(_s,"CODE",{class:!0});var Ud=l(Se);Nc=n(Ud,"function"),Ud.forEach(o),Hc=n(_s," as value, but in string."),_s.forEach(o),Gc=p(x),Ce=t(x,"DIV",{class:!0});var Ef=l(Ce);Ef.forEach(o),Rc=p(x),so=t(x,"P",{});var Yn=l(so);Vc=n(Yn,"The function that wraps around the "),je=t(Yn,"CODE",{class:!0});var $d=l(je);Jc=n($d,"module.content"),$d.forEach(o),Bc=n(Yn," is called the module factory function. It provides 2 parameter to the module:"),Yn.forEach(o),Wc=p(x),oo=t(x,"UL",{});var zn=l(oo);De=t(zn,"LI",{});var Fv=l(De);Me=t(Fv,"CODE",{class:!0});var Kd=l(Me);Fc=n(Kd,"exports"),Kd.forEach(o),Uc=n(Fv,", an object that the module can assign its exported value onto"),Fv.forEach(o),$c=p(zn),Le=t(zn,"LI",{});var Uv=l(Le);Ne=t(Uv,"CODE",{class:!0});var Yd=l(Ne);Kc=n(Yd,"require"),Yd.forEach(o),Yc=n(Uv,", a function that the module can invoke with module path to import exported value from another module"),Uv.forEach(o),zn.forEach(o),zc=p(x),Ct=t(x,"P",{});var zd=l(Ct);Zc=n(zd,"The module map right now is not something that can be executed:"),zd.forEach(o),Qc=p(x),He=t(x,"DIV",{class:!0});var If=l(He);If.forEach(o),Xc=p(x),R=t(x,"P",{});var es=l(R);sh=n(es,"because it still uses "),Ge=t(es,"CODE",{class:!0});var Zd=l(Ge);oh=n(Zd,"import"),Zd.forEach(o),eh=n(es," and "),Re=t(es,"CODE",{class:!0});var Qd=l(Re);ah=n(Qd,"export"),Qd.forEach(o),th=n(es,". I had to transform them to use the "),Ve=t(es,"CODE",{class:!0});var Xd=l(Ve);nh=n(Xd,"exports"),Xd.forEach(o),lh=n(es," and "),Je=t(es,"CODE",{class:!0});var su=l(Je);rh=n(su,"require"),su.forEach(o),ih=n(es," that we pass in."),es.forEach(o),ph=p(x),jt=t(x,"P",{});var ou=l(jt);ch=n(ou,"To transform the code, I used the AST of the module again: trasform the ast and generate the new code from the transformed ast."),ou.forEach(o),hh=p(x),Dt=t(x,"P",{});var eu=l(Dt);kh=n(eu,'What I need is to trasform the "from" to "to" of the following:'),eu.forEach(o),vh=p(x),Be=t(x,"DIV",{class:!0});var Pf=l(Be);Pf.forEach(o),yh=p(x),Mt=t(x,"BLOCKQUOTE",{});var au=l(Mt);eo=t(au,"P",{});var Zn=l(eo);dh=n(Zn,"I wrote a "),We=t(Zn,"A",{href:!0});var tu=l(We);uh=n(tu,"step by step guide"),tu.forEach(o),xh=n(Zn," on how to write babel transformation, please do check it out."),Zn.forEach(o),au.forEach(o),fh=p(x),ys=t(x,"P",{});var qa=l(ys);mh=n(qa,"Knowing "),Lt=t(qa,"STRONG",{});var nu=l(Lt);wh=n(nu,"what to target on AST"),nu.forEach(o),gh=n(qa," and "),Nt=t(qa,"STRONG",{});var lu=l(Nt);bh=n(lu,"how the transformed AST look like"),lu.forEach(o),_h=n(qa,", I wrote my transformation code:"),qa.forEach(o),Eh=p(x),Fe=t(x,"DIV",{class:!0});var Tf=l(Fe);Tf.forEach(o),Ih=p(x),Ue=t(x,"P",{});var $v=l(Ue);Ph=n($v,"I omitted the actual babel transformation code, because it is lengthy. If you are interested to read about it, you can check out "),ao=t($v,"A",{href:!0,rel:!0});var ru=l(ao);Th=n(ru,"from my Github repo"),ru.forEach(o),$v.forEach(o),qh=p(x),Ht=t(x,"P",{});var iu=l(Ht);Ah=n(iu,"So, now the module map looks ready:"),iu.forEach(o),Oh=p(x),$e=t(x,"DIV",{class:!0});var qf=l($e);qf.forEach(o),Sh=p(x),to=t(x,"P",{});var Qn=l(to);Ch=n(Qn,"One thing to take note is that, for the "),Ke=t(Qn,"CODE",{class:!0});var pu=l(Ke);jh=n(pu,"require"),pu.forEach(o),Dh=n(Qn," statements, I replaced the requested path to the actual resolved path, because I used the actual resolved path as the key to the module map."),Qn.forEach(o),x.forEach(o),Sn=p(c),w=t(c,"SECTION",{});var E=l(w);Gt=t(E,"H3",{});var cu=l(Gt);no=t(cu,"A",{href:!0,id:!0});var hu=l(no);Rt=t(hu,"STRONG",{});var ku=l(Rt);Mh=n(ku,'Create the "runtime"'),ku.forEach(o),hu.forEach(o),cu.forEach(o),Lh=p(E),Vt=t(E,"P",{});var vu=l(Vt);Nh=n(vu,"Now it's time to create the runtime. The runtime is a piece of code that is part of the output bundle, that runs when the application code is running, therefore, the runtime."),vu.forEach(o),Hh=p(E),Jt=t(E,"P",{});var yu=l(Jt);Gh=n(yu,"The runtime code can be from a template file, but for simplicity sake, I kept the runtime code as a string:"),yu.forEach(o),Rh=p(E),Ye=t(E,"DIV",{class:!0});var Af=l(Ye);Af.forEach(o),Vh=p(E),ds=t(E,"P",{});var Aa=l(ds);Jh=n(Aa,"The code above is self explanatory, except if you have no idea what does the "),ze=t(Aa,"CODE",{class:!0});var du=l(ze);Bh=n(du,"webpackStart()"),du.forEach(o),Wh=n(Aa," do, you can read more about it in "),Ze=t(Aa,"A",{href:!0});var uu=l(Ze);Fh=n(uu,"my previous post"),uu.forEach(o),Uh=n(Aa,"."),Aa.forEach(o),$h=p(E),lo=t(E,"P",{});var Xn=l(lo);Kh=n(Xn,"Finally, I returned the module code from the "),Qe=t(Xn,"CODE",{class:!0});var xu=l(Qe);Yh=n(xu,"bundle"),xu.forEach(o),zh=n(Xn," function:"),Xn.forEach(o),Zh=p(E),Xe=t(E,"DIV",{class:!0});var Of=l(Xe);Of.forEach(o),Qh=p(E),ro=t(E,"P",{});var sl=l(ro);Xh=n(sl,"Now I run my bundler, it generates a "),sa=t(sl,"CODE",{class:!0});var fu=l(sa);sk=n(fu,"output/bundle.js"),fu.forEach(o),ok=n(sl," file. I run the generated file with node and I see:"),sl.forEach(o),ek=p(E),oa=t(E,"DIV",{class:!0});var Sf=l(oa);Sf.forEach(o),ak=p(E),Bt=t(E,"P",{});var mu=l(Bt);tk=n(mu,"That's it! A working module bundler!"),mu.forEach(o),nk=p(E),io=t(E,"P",{});var ol=l(io);lk=n(ol,"Of course, the module bundler I've shown here is "),Wt=t(ol,"STRONG",{});var wu=l(Wt);rk=n(wu,"nowhere near webpack"),wu.forEach(o),ik=n(ol,". Webpack supports more module system, resolving strategies, loading strategies, plugin system, optimisation, and many many more."),ol.forEach(o),E.forEach(o),Cn=p(c),q=t(c,"SECTION",{});var L=l(q);Ft=t(L,"H2",{});var gu=l(Ft);po=t(gu,"A",{href:!0,id:!0});var bu=l(po);pk=n(bu,"Optimisation"),bu.forEach(o),gu.forEach(o),ck=p(L),co=t(L,"P",{});var el=l(co);hk=n(el,"I played around my module bundler, and I quickly noticed a bug: "),Ut=t(el,"STRONG",{});var _u=l(Ut);kk=n(_u,"Circular Dependency"),_u.forEach(o),vk=n(el,"."),el.forEach(o),yk=p(L),$t=t(L,"P",{});var Eu=l($t);dk=n(Eu,"Here's my input files that I've tweaked:"),Eu.forEach(o),uk=p(L),ea=t(L,"DIV",{class:!0});var Cf=l(ea);Cf.forEach(o),xk=p(L),aa=t(L,"DIV",{class:!0});var jf=l(aa);jf.forEach(o),fk=p(L),Kt=t(L,"P",{});var Iu=l(Kt);mk=n(Iu,"When I ran it through my module bunlder, immediately it ran into a stack overflow:"),Iu.forEach(o),wk=p(L),ta=t(L,"DIV",{class:!0});var Df=l(ta);Df.forEach(o),L.forEach(o),jn=p(c),m=t(c,"SECTION",{});var g=l(m);Yt=t(g,"H3",{});var Pu=l(Yt);ho=t(Pu,"A",{href:!0,id:!0});var Tu=l(ho);gk=n(Tu,"Circular dependency"),Tu.forEach(o),Pu.forEach(o),bk=p(g),zt=t(g,"P",{});var qu=l(zt);_k=n(qu,"There were 2 junctures that the code did recursive traversal which have led to the endless loop:"),qu.forEach(o),Ek=p(g),ko=t(g,"UL",{});var al=l(ko);Zt=t(al,"LI",{});var Au=l(Zt);Ik=n(Au,"Generating dependency graphs"),Au.forEach(o),Pk=p(al),Qt=t(al,"LI",{});var Ou=l(Qt);Tk=n(Ou,"Traversing module graph for bundling"),Ou.forEach(o),al.forEach(o),qk=p(g),na=t(g,"DIV",{class:!0});var Mf=l(na);Mf.forEach(o),Ak=p(g),Xt=t(g,"P",{});var Su=l(Xt);Ok=n(Su,"Bundle with the latest code, the stack overflow is gone. However when I executed the output bundle, I saw"),Su.forEach(o),Sk=p(g),la=t(g,"DIV",{class:!0});var Lf=l(la);Lf.forEach(o),Ck=p(g),sn=t(g,"P",{});var Cu=l(sn);jk=n(Cu,"So I took a look at the output bundle:"),Cu.forEach(o),Dk=p(g),ra=t(g,"DIV",{class:!0});var Nf=l(ra);Nf.forEach(o),Mk=p(g),I=t(g,"P",{});var A=l(I);Lk=n(A,"So, the problem is that I destructed "),ia=t(A,"CODE",{class:!0});var ju=l(ia);Nk=n(ju,"PI"),ju.forEach(o),Hk=n(A," from the exports of "),pa=t(A,"CODE",{class:!0});var Du=l(pa);Gk=n(Du,"index.js"),Du.forEach(o),Rk=n(A," before it is defined, so naturally "),ca=t(A,"CODE",{class:!0});var Mu=l(ca);Vk=n(Mu,"PI"),Mu.forEach(o),Jk=n(A," within "),ha=t(A,"CODE",{class:!0});var Lu=l(ha);Bk=n(Lu,"circle.js"),Lu.forEach(o),Wk=n(A," would stay as "),ka=t(A,"CODE",{class:!0});var Nu=l(ka);Fk=n(Nu,"undefined"),Nu.forEach(o),Uk=n(A," throughout the application. However before I called "),va=t(A,"CODE",{class:!0});var Hu=l(va);$k=n(Hu,"circleArea"),Hu.forEach(o),Kk=n(A,", we defined "),ya=t(A,"CODE",{class:!0});var Gu=l(ya);Yk=n(Gu,"PI"),Gu.forEach(o),zk=n(A," on the "),da=t(A,"CODE",{class:!0});var Ru=l(da);Zk=n(Ru,"index.js"),Ru.forEach(o),Qk=n(A,"'s export, I am expecting it to be available."),A.forEach(o),Xk=p(g),on=t(g,"P",{});var Vu=l(on);sv=n(Vu,"So I built my application with webpack and took a look at how webpack solved this problem."),Vu.forEach(o),ov=p(g),ua=t(g,"DIV",{class:!0});var Hf=l(ua);Hf.forEach(o),ev=p(g),vo=t(g,"P",{});var tl=l(vo);av=n(tl,"Brilliant! The key is to lazily get the value of "),xa=t(tl,"CODE",{class:!0});var Ju=l(xa);tv=n(Ju,"PI"),Ju.forEach(o),nv=n(tl," when needed!"),tl.forEach(o),lv=p(g),yo=t(g,"P",{});var nl=l(yo);rv=n(nl,"I changed my babel transformation code, which I am not showing it here. If you are curious enough, you can check out "),uo=t(nl,"A",{href:!0,rel:!0});var Bu=l(uo);iv=n(Bu,"the changes I made from Github"),Bu.forEach(o),pv=n(nl,"."),nl.forEach(o),g.forEach(o),Dn=p(c),Z=t(c,"SECTION",{});var Oa=l(Z);en=t(Oa,"H2",{});var Wu=l(en);xo=t(Wu,"A",{href:!0,id:!0});var Fu=l(xo);cv=n(Fu,"Summary"),Fu.forEach(o),Wu.forEach(o),hv=p(Oa),us=t(Oa,"P",{});var Sa=l(us);kv=n(Sa,"There's two phases in module bundling: "),an=t(Sa,"STRONG",{});var Uu=l(an);vv=n(Uu,"Dependency Resolution"),Uu.forEach(o),yv=n(Sa," and "),tn=t(Sa,"STRONG",{});var $u=l(tn);dv=n($u,"Bundling"),$u.forEach(o),uv=n(Sa,"."),Sa.forEach(o),xv=p(Oa),fo=t(Oa,"P",{});var ll=l(fo);fv=n(ll,"I showed you how I constructed the dependency graph, by finding import statements and resolving modules. I shared how I created module maps and transformed the imports / exports syntax during "),nn=t(ll,"STRONG",{});var Ku=l(nn);mv=n(Ku,"bundling"),Ku.forEach(o),wv=n(ll,". Lastly, I fixed the circular dependency bug that was in the first version of my module bundler."),ll.forEach(o),Oa.forEach(o),Mn=p(c),M=t(c,"SECTION",{});var as=l(M);ln=t(as,"H3",{});var Yu=l(ln);mo=t(Yu,"A",{href:!0,id:!0});var zu=l(mo);gv=n(zu,"Whats next?"),zu.forEach(o),Yu.forEach(o),bv=p(as),rn=t(as,"P",{});var Zu=l(rn);_v=n(Zu,"I have a few ideas that I will add to my module bundler, such as:"),Zu.forEach(o),Ev=p(as),wo=t(as,"UL",{});var rl=l(wo);pn=t(rl,"LI",{});var Qu=l(pn);Iv=n(Qu,"code spliting"),Qu.forEach(o),Pv=p(rl),cn=t(rl,"LI",{});var Xu=l(cn);Tv=n(Xu,"watch mode and reloading"),Xu.forEach(o),rl.forEach(o),qv=p(as),hn=t(as,"P",{});var sx=l(hn);Av=n(sx,"which I will cover them in my next article when they are ready."),sx.forEach(o),Ov=p(as),kn=t(as,"P",{});var ox=l(kn);Sv=n(ox,"Till then. Cheers. \u{1F60E}"),ox.forEach(o),as.forEach(o),Ln=p(c),ms=t(c,"SECTION",{});var il=l(ms);vn=t(il,"H2",{});var ex=l(vn);go=t(ex,"A",{href:!0,id:!0});var ax=l(go);Cv=n(ax,"Further Readings"),ax.forEach(o),ex.forEach(o),jv=p(il),z=t(il,"UL",{});var Es=l(z);yn=t(Es,"LI",{});var tx=l(yn);bo=t(tx,"A",{href:!0,rel:!0});var nx=l(bo);Dv=n(nx,"Ronen Amiel, Build Your Own Webpack - You Gotta Love Frontend 2018"),nx.forEach(o),tx.forEach(o),Mv=p(Es),dn=t(Es,"LI",{});var lx=l(dn);_o=t(lx,"A",{href:!0,rel:!0});var rx=l(_o);Lv=n(rx,"Luciano Mammino, Unbundling the JavaScript module bundler - DublinJS July 2018"),rx.forEach(o),lx.forEach(o),Nv=p(Es),un=t(Es,"LI",{});var ix=l(un);Eo=t(ix,"A",{href:!0,rel:!0});var px=l(Eo);Hv=n(px,"Adam Kelly, Let\u2019s learn how module bundlers work and then write one ourselves"),px.forEach(o),ix.forEach(o),Gv=p(Es),xn=t(Es,"LI",{});var cx=l(xn);Io=t(cx,"A",{href:!0,rel:!0});var hx=l(Io);Rv=n(hx,"Webpack founder Tobias Koppers demos bundling live by hand"),hx.forEach(o),cx.forEach(o),Es.forEach(o),il.forEach(o),this.h()},h(){r(_,"href","/what-is-module-bundler-and-how-does-it-work/"),r(Ps,"href","https://webpack.js.org"),r(Ps,"rel","nofollow"),r(Ts,"href","https://rollupjs.org"),r(Ts,"rel","nofollow"),r(qs,"href","#getting-started"),r(qs,"id","getting-started"),r(Ao,"href","/what-is-module-bundler-and-how-does-it-work/"),r(js,"href","#the-input"),r(js,"id","the-input"),r(Co,"class","code-section"),r(jo,"class","code-section"),r(Do,"class","code-section"),r(Ds,"href","https://github.com/tanhauhau/byo-bundler/tree/master/fixture"),r(Ds,"rel","nofollow"),r(Mo,"class","inline"),r(Lo,"class","inline"),r(Ms,"href","#writing"),r(Ms,"id","writing"),r(No,"class","code-section"),r(Ls,"href","https://en.wikipedia.org/wiki/Directed_graph"),r(Ls,"rel","nofollow"),r(Ho,"class","code-section"),r(Go,"class","inline"),r(Ro,"class","inline"),r(Vo,"class","code-section"),r(Jo,"class","inline"),r(Bo,"class","code-section"),r(Wo,"class","inline"),r(Hs,"href","http://babeljs.io"),r(Hs,"rel","nofollow"),r(Fo,"class","code-section"),r(Uo,"class","code-section"),r($o,"class","inline"),r(Gs,"href","https://lihautan.com/babel-ast-explorer/#?eyJiYWJlbFNldHRpbmdzIjp7InZlcnNpb24iOiI3LjQuNSJ9LCJ0cmVlU2V0dGluZ3MiOnsiaGlkZUVtcHR5Ijp0cnVlLCJoaWRlTG9jYXRpb24iOnRydWUsImhpZGVUeXBlIjp0cnVlfSwiY29kZSI6ImltcG9ydCBzcXVhcmVBcmVhIGZyb20gJy4vc3F1YXJlLmpzJztcbmltcG9ydCBjaXJjbGVBcmVhIGZyb20gJy4vY2lyY2xlLmpzJztcblxuY29uc29sZS5sb2coJ0FyZWEgb2Ygc3F1YXJlOiAnLCBzcXVhcmVBcmVhKDUpKTtcbmNvbnNvbGUubG9nKCdBcmVhIG9mIGNpcmNsZScsIGNpcmNsZUFyZWEoNSkpO1xuIn0="),r(Gs,"rel","nofollow"),r(za,"type","image/webp"),r(za,"srcset",Kf),r(Za,"type","image/png"),r(Za,"srcset",yx),Wf(fs.src,Yv=yx)||r(fs,"src",Yv),r(fs,"loading","lazy"),r(fs,"alt","babel-ast-explorer"),r(fs,"title","Visualizing AST through babel-ast-explorer"),r(Ko,"class","inline"),r(Yo,"class","inline"),r(zo,"class","inline"),r(Zo,"class","inline"),r(Qo,"class","inline"),r(Xo,"class","code-section"),r(se,"class","inline"),r(oe,"class","inline"),r(ee,"class","inline"),r(ae,"class","code-section"),r(Js,"href","#resolving"),r(Js,"id","resolving"),r(te,"class","inline"),r(ne,"class","inline"),r(le,"class","code-section"),r(re,"class","code-section"),r(Ws,"href","http://nodejs.org/api/modules.html#modules_all_together"),r(Ws,"rel","nofollow"),r(ie,"class","inline"),r(pe,"class","inline"),r(ce,"class","code-section"),r(he,"class","inline"),r(ke,"class","code-section"),r(ve,"class","inline"),r(ye,"class","inline"),r(de,"class","inline"),r(Us,"href","https://webpack.js.org/configuration/resolve/"),r(Us,"rel","nofollow"),r(ue,"class","code-section"),r(xe,"class","code-section"),r(fe,"class","code-section"),r(me,"class","inline"),r(we,"class","inline"),r(ge,"class","inline"),r(be,"class","inline"),r(Ks,"href","#bundling"),r(Ks,"id","bundling"),r(_e,"href","/what-is-module-bundler-and-how-does-it-work/"),r(Ee,"class","code-section"),r(Ys,"href","#grouping-modules-into-files"),r(Ys,"id","grouping-modules-into-files"),r(zs,"href","https://webpack.js.org/guides/code-splitting/"),r(zs,"rel","nofollow"),r(Zs,"href","https://webpack.js.org/plugins/split-chunks-plugin/"),r(Zs,"rel","nofollow"),r(Te,"class","code-section"),r(Qs,"href","#creating-module-map"),r(Qs,"id","creating-module-map"),r(qe,"class","inline"),r(Ae,"class","inline"),r(Oe,"class","inline"),r(Xs,"href","https://documentation.progress.com/output/ua/OpenEdge_latest/index.html#page/dvjsn/json-data-types.html"),r(Xs,"rel","nofollow"),r(Se,"class","inline"),r(Ce,"class","code-section"),r(je,"class","inline"),r(Me,"class","inline"),r(Ne,"class","inline"),r(He,"class","code-section"),r(Ge,"class","inline"),r(Re,"class","inline"),r(Ve,"class","inline"),r(Je,"class","inline"),r(Be,"class","code-section"),r(We,"href","/step-by-step-guide-for-writing-a-babel-transformation"),r(Fe,"class","code-section"),r(ao,"href","https://github.com/tanhauhau/byo-bundler/blob/feat-2-bundling/src/index.js#L46-L138"),r(ao,"rel","nofollow"),r($e,"class","code-section"),r(Ke,"class","inline"),r(no,"href","#create-the-runtime"),r(no,"id","create-the-runtime"),r(Ye,"class","code-section"),r(ze,"class","inline"),r(Ze,"href","/what-is-module-bundler-and-how-does-it-work/"),r(Qe,"class","inline"),r(Xe,"class","code-section"),r(sa,"class","inline"),r(oa,"class","code-section"),r(po,"href","#optimisation"),r(po,"id","optimisation"),r(ea,"class","code-section"),r(aa,"class","code-section"),r(ta,"class","code-section"),r(ho,"href","#circular-dependency"),r(ho,"id","circular-dependency"),r(na,"class","code-section"),r(la,"class","code-section"),r(ra,"class","code-section"),r(ia,"class","inline"),r(pa,"class","inline"),r(ca,"class","inline"),r(ha,"class","inline"),r(ka,"class","inline"),r(va,"class","inline"),r(ya,"class","inline"),r(da,"class","inline"),r(ua,"class","code-section"),r(xa,"class","inline"),r(uo,"href","https://github.com/tanhauhau/byo-bundler/compare/feat-2-bundling...feat-3-circular-dependency"),r(uo,"rel","nofollow"),r(xo,"href","#summary"),r(xo,"id","summary"),r(mo,"href","#whats-next"),r(mo,"id","whats-next"),r(go,"href","#further-readings"),r(go,"id","further-readings"),r(bo,"href","https://www.youtube.com/watch?v=Gc9-7PBqOC8"),r(bo,"rel","nofollow"),r(_o,"href","https://slides.com/lucianomammino/unbundling-the-javascript-module-bundler-dublinjs"),r(_o,"rel","nofollow"),r(Eo,"href","https://www.freecodecamp.org/news/lets-learn-how-module-bundlers-work-and-then-write-one-ourselves-b2e3fe6c88ae/"),r(Eo,"rel","nofollow"),r(Io,"href","https://www.youtube.com/watch?v=UNMkLHzofQI"),r(Io,"rel","nofollow")},m(c,v){fx(b,c,v),f(c,W,v),f(c,T,v),s(T,Is),s(T,_),s(_,F),s(T,To),s(T,Ps),s(Ps,pl),s(T,cl),s(T,Ts),s(Ts,hl),s(T,kl),f(c,fn,v),f(c,qo,v),s(qo,vl),f(c,mn,v),f(c,wn,v),f(c,gn,v),f(c,xs,v),s(xs,yl),s(xs,Ca),s(Ca,dl),s(xs,ul),f(c,bn,v),f(c,_n,v),f(c,En,v),f(c,D,v),s(D,ja),s(ja,qs),s(qs,xl),s(D,fl),s(D,As),s(As,ml),s(As,Ao),s(Ao,wl),s(As,gl),s(D,bl),s(D,Os),s(Os,_l),s(Os,Da),s(Da,El),s(Os,Il),s(D,Pl),s(D,Ss),s(Ss,Oo),s(Oo,Tl),s(Oo,Ma),s(Ma,ql),s(Ss,Al),s(Ss,So),s(So,Ol),s(So,La),s(La,Sl),s(D,Cl),s(D,Na),s(Na,Cs),s(Cs,jl),s(Cs,Ha),s(Ha,Dl),s(Cs,Ml),f(c,In,v),f(c,O,v),s(O,Ga),s(Ga,js),s(js,Ll),s(O,Nl),s(O,Ra),s(Ra,Hl),s(O,Gl),s(O,Co),Co.innerHTML=bx,s(O,Rl),s(O,jo),jo.innerHTML=_x,s(O,Vl),s(O,Do),Do.innerHTML=Ex,s(O,Jl),s(O,U),s(U,Bl),s(U,Ds),s(Ds,Wl),s(U,Fl),s(U,Mo),s(Mo,Ul),s(U,$l),s(U,Lo),s(Lo,Kl),s(U,Yl),f(c,Pn,v),f(c,h,v),s(h,Va),s(Va,Ms),s(Ms,zl),s(h,Zl),s(h,Ja),s(Ja,Ql),s(h,Xl),s(h,No),No.innerHTML=Ix,s(h,sr),s(h,Ba),s(Ba,ts),s(ts,or),s(ts,Wa),s(Wa,er),s(ts,ar),s(ts,Ls),s(Ls,tr),s(ts,nr),s(h,lr),s(h,Ho),Ho.innerHTML=Px,s(h,rr),s(h,Fa),s(Fa,ir),s(h,pr),s(h,ns),s(ns,cr),s(ns,Go),s(Go,hr),s(ns,kr),s(ns,Ro),s(Ro,vr),s(ns,yr),s(h,dr),s(h,Vo),Vo.innerHTML=Tx,s(h,ur),s(h,Ns),s(Ns,xr),s(Ns,Jo),s(Jo,fr),s(Ns,mr),s(h,wr),s(h,Bo),Bo.innerHTML=qx,s(h,gr),s(h,$),s($,br),s($,Wo),s(Wo,_r),s($,Er),s($,Hs),s(Hs,Ir),s($,Pr),s($,Ua),s(Ua,Tr),s($,qr),s(h,Ar),s(h,Fo),Fo.innerHTML=Ax,s(h,Or),s(h,$a),s($a,Sr),s(h,Cr),s(h,Uo),Uo.innerHTML=Ox,s(h,jr),s(h,Ka),s(Ka,Dr),s(h,Mr),s(h,ls),s(ls,Lr),s(ls,$o),s($o,Nr),s(ls,Hr),s(ls,Gs),s(Gs,Gr),s(ls,Rr),s(h,Vr),s(h,Ya),s(Ya,Rs),s(Rs,za),s(Rs,Za),s(Rs,fs),s(h,Jr),s(h,j),s(j,Br),s(j,Ko),s(Ko,Wr),s(j,Fr),s(j,Yo),s(Yo,Ur),s(j,$r),s(j,zo),s(zo,Kr),s(j,Yr),s(j,Zo),s(Zo,zr),s(j,Zr),s(j,Qo),s(Qo,Qr),s(j,Xr),s(h,si),s(h,Xo),Xo.innerHTML=Sx,s(h,oi),s(h,N),s(N,ei),s(N,se),s(se,ai),s(N,ti),s(N,oe),s(oe,ni),s(N,li),s(N,ee),s(ee,ri),s(N,ii),s(N,Qa),s(Qa,pi),s(N,ci),s(h,hi),s(h,Vs),s(Vs,ki),s(Vs,Xa),s(Xa,vi),s(Vs,yi),s(h,di),s(h,ae),ae.innerHTML=Cx,s(h,ui),s(h,st),s(st,ot),s(ot,xi),f(c,Tn,v),f(c,k,v),s(k,et),s(et,Js),s(Js,fi),s(k,mi),s(k,rs),s(rs,wi),s(rs,te),s(te,gi),s(rs,bi),s(rs,ne),s(ne,_i),s(rs,Ei),s(k,Ii),s(k,le),le.innerHTML=jx,s(k,Pi),s(k,re),re.innerHTML=Dx,s(k,Ti),s(k,at),s(at,qi),s(k,Ai),s(k,Bs),s(Bs,Oi),s(Bs,Ws),s(Ws,Si),s(Bs,Ci),s(k,ji),s(k,is),s(is,Di),s(is,ie),s(ie,Mi),s(is,Li),s(is,pe),s(pe,Ni),s(is,Hi),s(k,Gi),s(k,ce),ce.innerHTML=Mx,s(k,Ri),s(k,Fs),s(Fs,Vi),s(Fs,he),s(he,Ji),s(Fs,Bi),s(k,Wi),s(k,ke),ke.innerHTML=Lx,s(k,Fi),s(k,ps),s(ps,Ui),s(ps,ve),s(ve,$i),s(ps,Ki),s(ps,ye),s(ye,Yi),s(ps,zi),s(k,Zi),s(k,cs),s(cs,Qi),s(cs,de),s(de,Xi),s(cs,sp),s(cs,Us),s(Us,op),s(cs,ep),s(k,ap),s(k,$s),s($s,tp),s($s,tt),s(tt,np),s($s,lp),s(k,rp),s(k,ue),ue.innerHTML=Nx,s(k,ip),s(k,nt),s(nt,lt),s(lt,pp),s(k,cp),s(k,rt),s(rt,hp),s(k,kp),s(k,xe),xe.innerHTML=Hx,s(k,vp),s(k,it),s(it,yp),s(k,dp),s(k,fe),fe.innerHTML=Gx,s(k,up),s(k,H),s(H,xp),s(H,me),s(me,fp),s(H,mp),s(H,we),s(we,wp),s(H,gp),s(H,ge),s(ge,bp),s(H,_p),s(H,be),s(be,Ep),s(H,Ip),s(k,Pp),s(k,pt),s(pt,ct),s(ct,Tp),f(c,qn,v),f(c,P,v),s(P,ht),s(ht,Ks),s(Ks,qp),s(P,Ap),s(P,kt),s(kt,Op),s(P,Sp),s(P,G),s(G,Cp),s(G,vt),s(vt,jp),s(G,Dp),s(G,yt),s(yt,Mp),s(G,Lp),s(G,dt),s(dt,Np),s(G,Hp),s(G,ut),s(ut,Gp),s(G,Rp),s(P,Vp),s(P,xt),s(xt,K),s(K,Jp),s(K,ft),s(ft,Bp),s(K,Wp),s(K,mt),s(mt,Fp),s(K,Up),s(K,_e),s(_e,$p),s(K,Kp),s(P,Yp),s(P,wt),s(wt,zp),s(P,Zp),s(P,Ee),Ee.innerHTML=Rx,s(P,Qp),s(P,gt),s(gt,Xp),s(P,sc),s(P,hs),s(hs,bt),s(bt,_t),s(_t,oc),s(hs,ec),s(hs,Ie),s(Ie,Et),s(Et,ac),s(Ie,tc),s(hs,nc),s(hs,Pe),s(Pe,It),s(It,lc),s(Pe,rc),f(c,An,v),f(c,S,v),s(S,Pt),s(Pt,Ys),s(Ys,ic),s(S,pc),s(S,ks),s(ks,cc),s(ks,zs),s(zs,hc),s(ks,kc),s(ks,Zs),s(Zs,vc),s(ks,yc),s(S,dc),s(S,Tt),s(Tt,uc),s(S,xc),s(S,qt),s(qt,fc),s(S,mc),s(S,Te),Te.innerHTML=Vx,s(S,wc),s(S,At),s(At,gc),f(c,On,v),f(c,d,v),s(d,Ot),s(Ot,Qs),s(Qs,bc),s(d,_c),s(d,St),s(St,Ec),s(d,Ic),s(d,vs),s(vs,Pc),s(vs,qe),s(qe,Tc),s(vs,qc),s(vs,Ae),s(Ae,Ac),s(vs,Oc),s(d,Sc),s(d,Y),s(Y,Cc),s(Y,Oe),s(Oe,jc),s(Y,Dc),s(Y,Xs),s(Xs,Mc),s(Y,Lc),s(Y,Se),s(Se,Nc),s(Y,Hc),s(d,Gc),s(d,Ce),Ce.innerHTML=Jx,s(d,Rc),s(d,so),s(so,Vc),s(so,je),s(je,Jc),s(so,Bc),s(d,Wc),s(d,oo),s(oo,De),s(De,Me),s(Me,Fc),s(De,Uc),s(oo,$c),s(oo,Le),s(Le,Ne),s(Ne,Kc),s(Le,Yc),s(d,zc),s(d,Ct),s(Ct,Zc),s(d,Qc),s(d,He),He.innerHTML=Bx,s(d,Xc),s(d,R),s(R,sh),s(R,Ge),s(Ge,oh),s(R,eh),s(R,Re),s(Re,ah),s(R,th),s(R,Ve),s(Ve,nh),s(R,lh),s(R,Je),s(Je,rh),s(R,ih),s(d,ph),s(d,jt),s(jt,ch),s(d,hh),s(d,Dt),s(Dt,kh),s(d,vh),s(d,Be),Be.innerHTML=Wx,s(d,yh),s(d,Mt),s(Mt,eo),s(eo,dh),s(eo,We),s(We,uh),s(eo,xh),s(d,fh),s(d,ys),s(ys,mh),s(ys,Lt),s(Lt,wh),s(ys,gh),s(ys,Nt),s(Nt,bh),s(ys,_h),s(d,Eh),s(d,Fe),Fe.innerHTML=Fx,s(d,Ih),s(d,Ue),s(Ue,Ph),s(Ue,ao),s(ao,Th),s(d,qh),s(d,Ht),s(Ht,Ah),s(d,Oh),s(d,$e),$e.innerHTML=Ux,s(d,Sh),s(d,to),s(to,Ch),s(to,Ke),s(Ke,jh),s(to,Dh),f(c,Sn,v),f(c,w,v),s(w,Gt),s(Gt,no),s(no,Rt),s(Rt,Mh),s(w,Lh),s(w,Vt),s(Vt,Nh),s(w,Hh),s(w,Jt),s(Jt,Gh),s(w,Rh),s(w,Ye),Ye.innerHTML=$x,s(w,Vh),s(w,ds),s(ds,Jh),s(ds,ze),s(ze,Bh),s(ds,Wh),s(ds,Ze),s(Ze,Fh),s(ds,Uh),s(w,$h),s(w,lo),s(lo,Kh),s(lo,Qe),s(Qe,Yh),s(lo,zh),s(w,Zh),s(w,Xe),Xe.innerHTML=Kx,s(w,Qh),s(w,ro),s(ro,Xh),s(ro,sa),s(sa,sk),s(ro,ok),s(w,ek),s(w,oa),oa.innerHTML=Yx,s(w,ak),s(w,Bt),s(Bt,tk),s(w,nk),s(w,io),s(io,lk),s(io,Wt),s(Wt,rk),s(io,ik),f(c,Cn,v),f(c,q,v),s(q,Ft),s(Ft,po),s(po,pk),s(q,ck),s(q,co),s(co,hk),s(co,Ut),s(Ut,kk),s(co,vk),s(q,yk),s(q,$t),s($t,dk),s(q,uk),s(q,ea),ea.innerHTML=zx,s(q,xk),s(q,aa),aa.innerHTML=Zx,s(q,fk),s(q,Kt),s(Kt,mk),s(q,wk),s(q,ta),ta.innerHTML=Qx,f(c,jn,v),f(c,m,v),s(m,Yt),s(Yt,ho),s(ho,gk),s(m,bk),s(m,zt),s(zt,_k),s(m,Ek),s(m,ko),s(ko,Zt),s(Zt,Ik),s(ko,Pk),s(ko,Qt),s(Qt,Tk),s(m,qk),s(m,na),na.innerHTML=Xx,s(m,Ak),s(m,Xt),s(Xt,Ok),s(m,Sk),s(m,la),la.innerHTML=sf,s(m,Ck),s(m,sn),s(sn,jk),s(m,Dk),s(m,ra),ra.innerHTML=of,s(m,Mk),s(m,I),s(I,Lk),s(I,ia),s(ia,Nk),s(I,Hk),s(I,pa),s(pa,Gk),s(I,Rk),s(I,ca),s(ca,Vk),s(I,Jk),s(I,ha),s(ha,Bk),s(I,Wk),s(I,ka),s(ka,Fk),s(I,Uk),s(I,va),s(va,$k),s(I,Kk),s(I,ya),s(ya,Yk),s(I,zk),s(I,da),s(da,Zk),s(I,Qk),s(m,Xk),s(m,on),s(on,sv),s(m,ov),s(m,ua),ua.innerHTML=ef,s(m,ev),s(m,vo),s(vo,av),s(vo,xa),s(xa,tv),s(vo,nv),s(m,lv),s(m,yo),s(yo,rv),s(yo,uo),s(uo,iv),s(yo,pv),f(c,Dn,v),f(c,Z,v),s(Z,en),s(en,xo),s(xo,cv),s(Z,hv),s(Z,us),s(us,kv),s(us,an),s(an,vv),s(us,yv),s(us,tn),s(tn,dv),s(us,uv),s(Z,xv),s(Z,fo),s(fo,fv),s(fo,nn),s(nn,mv),s(fo,wv),f(c,Mn,v),f(c,M,v),s(M,ln),s(ln,mo),s(mo,gv),s(M,bv),s(M,rn),s(rn,_v),s(M,Ev),s(M,wo),s(wo,pn),s(pn,Iv),s(wo,Pv),s(wo,cn),s(cn,Tv),s(M,qv),s(M,hn),s(hn,Av),s(M,Ov),s(M,kn),s(kn,Sv),f(c,Ln,v),f(c,ms,v),s(ms,vn),s(vn,go),s(go,Cv),s(ms,jv),s(ms,z),s(z,yn),s(yn,bo),s(bo,Dv),s(z,Mv),s(z,dn),s(dn,_o),s(_o,Lv),s(z,Nv),s(z,un),s(un,Eo),s(Eo,Hv),s(z,Gv),s(z,xn),s(xn,Io),s(Io,Rv),Nn=!0},p:Ff,i(c){Nn||(mx(b.$$.fragment,c),Nn=!0)},o(c){wx(b.$$.fragment,c),Nn=!1},d(c){gx(b,c),c&&o(W),c&&o(T),c&&o(fn),c&&o(qo),c&&o(mn),c&&o(wn),c&&o(gn),c&&o(xs),c&&o(bn),c&&o(_n),c&&o(En),c&&o(D),c&&o(In),c&&o(O),c&&o(Pn),c&&o(h),c&&o(Tn),c&&o(k),c&&o(qn),c&&o(P),c&&o(An),c&&o(S),c&&o(On),c&&o(d),c&&o(Sn),c&&o(w),c&&o(Cn),c&&o(q),c&&o(jn),c&&o(m),c&&o(Dn),c&&o(Z),c&&o(Mn),c&&o(M),c&&o(Ln),c&&o(ms)}}}function Zf(Po){let b,W;const T=[Po[0],dx];let Is={$$slots:{default:[zf]},$$scope:{ctx:Po}};for(let _=0;_<T.length;_+=1)Is=Kv(Is,T[_]);return b=new Uf({props:Is}),{c(){ux(b.$$.fragment)},l(_){xx(b.$$.fragment,_)},m(_,F){fx(b,_,F),W=!0},p(_,[F]){const To=F&1?Jf(T,[F&1&&kx(_[0]),F&0&&kx(dx)]):{};F&2&&(To.$$scope={dirty:F,ctx:_}),b.$set(To)},i(_){W||(mx(b.$$.fragment,_),W=!0)},o(_){wx(b.$$.fragment,_),W=!1},d(_){gx(b,_)}}}const dx={title:"I wrote my module bundler",date:"2019-09-18T08:00:00Z",tags:["JavaScript","module bundler","dev tool","webpack"],description:"In my previous article, I explained how module bundler works. In this article, I am going to show you how I wrote my module bundler...",series:"Write a module bundler",label:"blog"};function Qf(Po,b,W){return Bf("blog",{image:Yf}),Po.$$set=T=>{W(0,b=Kv(Kv({},b),vx(T)))},b=vx(b),[b]}class nm extends Gf{constructor(b){super();Rf(this,b,Qf,Zf,Vf,{})}}export{nm as default,dx as metadata};
