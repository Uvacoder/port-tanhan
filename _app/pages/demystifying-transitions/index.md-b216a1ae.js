import{S as uw,i as fw,s as ww,C as Ev,w as mw,x as xw,y as Ew,z as _w,A as hw,q as gw,o as bw,B as Cw,r as Ow,Y as kw,e as a,t,k as i,c as n,a as l,h as s,d as o,m as c,b as r,g,H as e,J as Dw}from"../../chunks/vendor-da4388d4.js";import{T as Sw}from"../../chunks/TalkLayout-d81f0c42.js";import"../../chunks/stores-1fad7c36.js";import"../../chunks/ldjson-b0805387.js";/* empty css                                */var Pw="https://lihautan.com/_app/assets/hero-twitter-9c2cf96e.jpg";function Iw(kt){let f,U,J,Ae,m,T,dt,vt,Rn,Un,cn,b,Bo,Te,zn,Gn,Vo,Bn,Vn,Ko,Kn,Qn,Qo,Xn,Zn,Xo,el,tl,Zo,sl,ol,Le,al,yt,nl,ll,pn,z,ea,je,rl,il,ta,cl,pl,sa,hl,kl,oa,dl,hn,C,aa,ne,vl,ut,yl,ul,fl,He,wl,ft,ml,xl,El,Z,_l,wt,gl,bl,mt,Cl,Ol,xt,Dl,Sl,Pl,na,Il,Al,le,Tl,Et,Ll,jl,_t,Hl,Nl,ql,re,Wl,gt,$l,Fl,bt,Jl,Yl,Ml,Y,Rl,Ct,Ul,zl,Ot,Gl,Bl,Dt,Vl,Kl,St,Ql,Xl,kn,x,la,ie,Zl,Pt,er,tr,sr,Ne,or,It,ar,nr,lr,M,rr,At,ir,cr,Tt,pr,hr,Lt,kr,dr,jt,vr,yr,ur,ra,fr,wr,ia,mr,xr,L,Er,Ht,_r,gr,Nt,br,Cr,qt,Or,Dr,Wt,Sr,Pr,$t,Ir,Ar,Tr,ca,Lr,jr,pa,Hr,dn,p,ha,qe,Nr,qr,ka,Wr,$r,da,Fr,Jr,va,Yr,Mr,ya,Rr,Ur,ua,zr,Gr,We,Br,Ft,Vr,Kr,Qr,$e,Xr,Jt,Zr,ei,ti,fa,si,oi,ce,ai,Yt,ni,li,Mt,ri,ii,ci,wa,pi,hi,ma,ki,di,Fe,vi,Rt,yi,ui,fi,O,wi,Ut,mi,xi,zt,Ei,_i,Gt,gi,bi,Bt,Ci,Oi,Vt,Di,Si,Kt,Pi,Ii,Ai,pe,Ti,Qt,Li,ji,Xt,Hi,Ni,qi,he,Wi,Zt,$i,Fi,es,Ji,Yi,Mi,xa,Ri,Ui,j,zi,ts,Gi,Bi,ss,Vi,Ki,os,Qi,Xi,as,Zi,ec,ns,tc,sc,oc,D,ac,ls,nc,lc,rs,rc,ic,is,cc,pc,cs,hc,kc,ps,dc,vc,hs,yc,uc,fc,Je,wc,ks,mc,xc,Ec,ee,_c,ds,gc,bc,vs,Cc,Oc,ys,Dc,Sc,Pc,Ye,Ic,us,Ac,Tc,Lc,Ea,jc,Hc,_a,Nc,qc,ga,Me,Wc,$c,ba,Fc,Jc,Ca,Yc,Mc,ge,Rc,fs,Uc,zc,Oa,Gc,Bc,Da,Vc,vn,y,Sa,Re,Kc,Qc,Pa,Xc,Zc,Ia,ep,tp,Aa,sp,op,Ta,ap,np,La,lp,rp,ja,ip,cp,Ha,pp,hp,Ue,kp,ws,dp,vp,yp,ke,up,ms,fp,wp,Na,mp,xp,Ep,qa,Wa,_p,gp,$a,bp,Cp,xs,Es,Op,Dp,Sp,de,Pp,_s,Ip,Ap,gs,Tp,Lp,jp,ze,Hp,bs,Np,qp,Wp,Fa,$p,yn,be,Ja,Ge,Fp,Jp,Cs,vw=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.getElementById</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;app&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">btn1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">btn2</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.querySelectorAll</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;button&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">btn1</span><span style="color: var(--shiki-token-function)">.addEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;click&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> insertNewItem);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">btn2</span><span style="color: var(--shiki-token-function)">.addEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;click&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> removeLastItem);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> ul </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.querySelector</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;ul&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> list </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">generateAnimation</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">insertNewItem</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">li</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;li&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">li</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;new item </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">list</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">ul</span><span style="color: var(--shiki-token-function)">.append</span><span style="color: var(--shiki-color-text)">(li);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">list</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(li);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">transitionIn</span><span style="color: var(--shiki-color-text)">(li</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    delay</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    duration</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">500</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">css</span><span style="color: var(--shiki-color-text)">(t</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> u) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;transform: translateY(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">u </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">50</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">px)&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">tick</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">generateAnimation</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">duration</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2000</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// 2seconds</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">keyframes</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Math</span><span style="color: var(--shiki-token-function)">.ceil</span><span style="color: var(--shiki-color-text)">(duration </span><span style="color: var(--shiki-token-keyword)">/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">16.66</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">rules</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    @keyframes bounceIn &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">      </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">Array</span><span style="color: var(--shiki-color-text)">(keyframes)</span><span style="color: var(--shiki-token-function)">.fill</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">((_</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index)</span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> t </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> index </span><span style="color: var(--shiki-token-keyword)">/</span><span style="color: var(--shiki-color-text)"> keyframes;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> eased_t </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">bounceOut</span><span style="color: var(--shiki-color-text)">(t);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">t </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">100</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">% &#123; transform: translateY(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> eased_t) </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">50</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">px) &#125;&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;)</span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#92;n&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">      100% &#123; transform: translateY(0px); &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  &#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;style&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">head</span><span style="color: var(--shiki-token-function)">.appendChild</span><span style="color: var(--shiki-color-text)">(style);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">sheet</span><span style="color: var(--shiki-token-function)">.insertRule</span><span style="color: var(--shiki-color-text)">(rules);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">removeLastItem</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">list</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">li</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">list</span><span style="color: var(--shiki-token-function)">.pop</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">text</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">li</span><span style="color: var(--shiki-color-text)">.textContent;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">transitionIn</span><span style="color: var(--shiki-color-text)">(li</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      delay</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      duration</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">500</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">css</span><span style="color: var(--shiki-color-text)">(t</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> u) &#123; </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">; &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">tick</span><span style="color: var(--shiki-color-text)">(t</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> u) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (t </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-constant)">ul</span><span style="color: var(--shiki-token-function)">.removeChild</span><span style="color: var(--shiki-color-text)">(li);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)">&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-constant)">li</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">text</span><span style="color: var(--shiki-token-function)">.slice</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Math</span><span style="color: var(--shiki-token-function)">.round</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">text</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> t)));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">transitionIn</span><span style="color: var(--shiki-color-text)">(element</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; duration</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> delay</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> easing</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> css</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> tick &#125;) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">name</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;bounceIn</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">keyframes</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Math</span><span style="color: var(--shiki-token-function)">.ceil</span><span style="color: var(--shiki-color-text)">(duration </span><span style="color: var(--shiki-token-keyword)">/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">16.66</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">rules</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  @keyframes </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">name</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">Array</span><span style="color: var(--shiki-color-text)">(keyframes)</span><span style="color: var(--shiki-token-function)">.fill</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">((_</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index)</span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> t </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> index </span><span style="color: var(--shiki-token-keyword)">/</span><span style="color: var(--shiki-color-text)"> keyframes;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> eased_t </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">bounceOut</span><span style="color: var(--shiki-color-text)">(t);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">t </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">100</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">% &#123; </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-function)">css</span><span style="color: var(--shiki-color-text)">(eased_t</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> eased_t)</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> &#125;&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;)</span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#92;n&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    100% &#123; </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-function)">css</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;style&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">head</span><span style="color: var(--shiki-token-function)">.appendChild</span><span style="color: var(--shiki-color-text)">(style);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">sheet</span><span style="color: var(--shiki-token-function)">.insertRule</span><span style="color: var(--shiki-color-text)">(rules);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)">.animation </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">name</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">duration</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">ms linear </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">delay</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">ms 1 both&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// js animation</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> start </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Date</span><span style="color: var(--shiki-token-function)">.now</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> end </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> start </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> duration;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">tick</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">loop</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> now </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Date</span><span style="color: var(--shiki-token-function)">.now</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (now </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> end) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">tick</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> t </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (now </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> start) </span><span style="color: var(--shiki-token-keyword)">/</span><span style="color: var(--shiki-color-text)"> duration;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> eased_t </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> t;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">tick</span><span style="color: var(--shiki-color-text)">(eased_t</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> eased_t);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">requestAnimationFrame</span><span style="color: var(--shiki-color-text)">(loop);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">requestAnimationFrame</span><span style="color: var(--shiki-color-text)">(loop);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">startJsTransition</span><span style="color: var(--shiki-color-text)">(element</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callback) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> duration </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2000</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// 2s</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> start </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Date</span><span style="color: var(--shiki-token-function)">.now</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> end </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> start </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> duration;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">text</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-color-text)">.textContent;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">loop</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> now </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Date</span><span style="color: var(--shiki-token-function)">.now</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (now </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> end) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">callback</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> t </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (now </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> start) </span><span style="color: var(--shiki-token-keyword)">/</span><span style="color: var(--shiki-color-text)"> duration;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> eased_t </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> t;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">text</span><span style="color: var(--shiki-token-function)">.slice</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Math</span><span style="color: var(--shiki-token-function)">.round</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">text</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> eased_t)));</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">requestAnimationFrame</span><span style="color: var(--shiki-color-text)">(loop);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">requestAnimationFrame</span><span style="color: var(--shiki-color-text)">(loop);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">bounceOut</span><span style="color: var(--shiki-color-text)">(t) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">a</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">4.0</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">11.0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">b</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">8.0</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">11.0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">c</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">9.0</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">10.0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ca</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">4356.0</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">361.0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">cb</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">35442.0</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1805.0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">cc</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">16061.0</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1805.0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">t2</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> t </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> t;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> t </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> a</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">7.5625</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> t2</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> t </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> b</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">			</span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">9.075</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> t2 </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">9.9</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> t </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.4</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">			</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> t </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> c</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">				</span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> ca </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> t2 </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> cb </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> t </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> cc</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">				</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">10.8</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> t </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> t </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">20.52</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> t </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">10.72</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,un,k,Ya,Ce,Os,Yp,Mp,Rp,Ma,Up,zp,ve,Gp,Ds,Bp,Vp,Ss,Kp,Qp,Xp,Be,Zp,Ps,eh,th,sh,ye,oh,Is,ah,nh,As,lh,rh,ih,Ra,ch,ph,ue,hh,Ts,kh,dh,Ls,vh,yh,uh,E,fh,js,wh,mh,Hs,xh,Eh,Ns,_h,gh,qs,bh,Ch,Ws,Oh,Dh,$s,Sh,Ph,Fs,Ih,Ah,Th,Ua,Lh,jh,za,Hh,Nh,_,qh,Js,Wh,$h,Ys,Fh,Jh,Ms,Yh,Mh,Rs,Rh,Uh,Us,zh,Gh,zs,Bh,Vh,Gs,Kh,Qh,Xh,Ga,Zh,ek,Ve,tk,Bs,sk,ok,ak,Ke,nk,Vs,lk,rk,ik,R,ck,Ks,pk,hk,Qs,kk,dk,Xs,vk,yk,Zs,uk,fk,wk,H,mk,eo,xk,Ek,to,_k,gk,so,bk,Ck,oo,Ok,Dk,ao,Sk,Pk,Ik,Ba,Ak,Tk,fe,Lk,no,jk,Hk,lo,Nk,qk,Wk,Qe,$k,ro,Fk,Jk,Yk,Xe,Mk,io,Rk,Uk,zk,we,Gk,co,Bk,Vk,po,Kk,Qk,Xk,Va,Zk,ed,Ka,td,sd,me,Ze,Qa,et,od,ad,tt,st,ho,nd,ld,ko,rd,id,xe,vo,cd,pd,yo,hd,kd,uo,dd,vd,ot,Xa,at,yd,ud,Za,Ee,fo,fd,wd,wo,md,xd,mo,Ed,_d,nt,Oe,lt,gd,bd,xo,Cd,Od,Dd,en,G,Eo,Sd,Pd,_o,Id,Ad,go,Td,Ld,bo,jd,Hd,Nd,te,qd,Co,Wd,$d,Oo,Fd,Jd,Do,Yd,Md,Rd,tn,Ud,zd,N,Gd,So,Bd,Vd,Po,Kd,Qd,Io,Xd,Zd,Ao,ev,tv,To,sv,ov,fn,S,sn,rt,av,nv,on,lv,rv,an,iv,cv,it,pv,ct,hv,kv,dv,pt,vv,ht,yv,uv,fv,nn,wv;return{c(){f=a("section"),U=a("h2"),J=a("a"),Ae=t("Slides"),m=i(),T=a("p"),dt=t("["),vt=a("a"),Rn=t("Link to slides"),Un=t("] (Left arrow and right arrow to navigate)"),cn=i(),b=a("section"),Bo=a("h2"),Te=a("a"),zn=t("Script"),Gn=i(),Vo=a("p"),Bn=t("Thank you for having me."),Vn=i(),Ko=a("p"),Kn=t("Transitions allow user to understand where thing comes from and where it goes to."),Qn=i(),Qo=a("p"),Xn=t("Much like the button over here, when I click on it, it fells into the center, and the title of my talk floats up from it."),Zn=i(),Xo=a("p"),el=t("Yes, today, I will demystify transitions in svelte. And how am I going to do it?"),tl=i(),Zo=a("p"),sl=t("We will dive into Svelte transitions level-by-level."),ol=i(),Le=a("p"),al=t("We start at the first level, where we will learn how to use "),yt=a("code"),nl=t("transition:"),ll=t(` in svelte.
As we reached the 2nd level, we'll look at how to author a transition in svelte.
At the 3rd level, we go deeper and take a look at how Svelte compiles and handle transitions under the hood.`),pn=i(),z=a("section"),ea=a("h3"),je=a("a"),rl=t("Who am I"),il=i(),ta=a("p"),cl=t("My name is Tan Li Hau, I am a software engineer at Shopee. Shopee is a e-commerce platform in South east asia that is based in Singapore."),pl=i(),sa=a("p"),hl=t("I grew up in a lovely town called penang in malaysia, which has the best street food in malaysia, such as char koay teow, stir-fry flat rice noodles; rojak, a eclectic fruit salad with palm sugar, peanuts and chilli dressing, and well, these are just one of the many great street foods that i hope to try again when I can go back after this coronavirus pandemic is over."),kl=i(),oa=a("p"),dl=t("last but not the least, im one of the maintainers of svelte"),hn=i(),C=a("section"),aa=a("h3"),ne=a("a"),vl=t("Level 1. Using "),ut=a("code"),yl=t("transition:"),ul=t("."),fl=i(),He=a("p"),wl=t("Here, we have a list of items, rendered using the "),ft=a("code"),ml=t("{#each}"),xl=t(" block. When we add or remove an item, the item appears and disappears in an instant. we have no idea where the item is coming from, or disappear into."),El=i(),Z=a("p"),_l=t("To add transition for the items, firstly, we import a transition from "),wt=a("code"),gl=t("svelte/transtion"),bl=t(". here we import fade. to add an entrance transition for the item, we add "),mt=a("code"),Cl=t("in"),Ol=t(" colon "),xt=a("code"),Dl=t("fade"),Sl=t("."),Pl=i(),na=a("p"),Il=t("Now the item fades into existence."),Al=i(),le=a("p"),Tl=t("To customise the transition, we can add parameters. such as duration, or delay. For exit transition, we use "),Et=a("code"),Ll=t("out"),jl=t(" colon "),_t=a("code"),Hl=t("fade"),Nl=t("."),ql=i(),re=a("p"),Wl=t("If you want both entrance and exit transtion, you can use "),gt=a("code"),$l=t("transition"),Fl=t(" colon "),bt=a("code"),Jl=t("transition name"),Yl=t("."),Ml=i(),Y=a("p"),Rl=t("There are multiple built-in transitions in svelte, such as "),Ct=a("code"),Ul=t("fly"),zl=t(", "),Ot=a("code"),Gl=t("slide"),Bl=t(", "),Dt=a("code"),Vl=t("scale"),Kl=t(", "),St=a("code"),Ql=t("blur"),Xl=t(" and more. this list is not exhaustive, which i recommend you to check them out in the docs as well as the tutorials."),kn=i(),x=a("section"),la=a("h3"),ie=a("a"),Zl=t("Level 2. The "),Pt=a("code"),er=t("transition:"),tr=t(" contract."),sr=i(),Ne=a("p"),or=t("Not sure if you've heard about the store contract in svelte, which states that, if any object follows the store contract, that object can be used like a store, where you can subscribe to it and read the value like a store using the "),It=a("code"),ar=t("$"),nr=t("-prefix."),lr=i(),M=a("p"),rr=t("The same thing goes with the "),At=a("code"),ir=t("transition"),cr=t(". A transition has a contract. Any function that follows the transition contract, can be used together with the "),Tt=a("code"),pr=t("in:"),hr=t(", "),Lt=a("code"),kr=t("out:"),dr=t(" or "),jt=a("code"),vr=t("transition:"),yr=t(" directives."),ur=i(),ra=a("p"),fr=t("Here is how the transition function should look like. It's a function that takes in 2 parameters, the element node that the transition is applied to, and the parameter that is passed into the transition."),wr=i(),ia=a("p"),mr=t("And, it should return an object that describes the transition, or return a function that returns that object."),xr=i(),L=a("p"),Er=t("The object should contain properties such as "),Ht=a("code"),_r=t("delay"),gr=t(", in milliseconds, how long before the transition starts; "),Nt=a("code"),br=t("duration"),Cr=t(", in millisecond, how long the transition takes; "),qt=a("code"),Or=t("easing"),Dr=t(", the easing function, which I'll explained later together with; "),Wt=a("code"),Sr=t("css"),Pr=t(", a function that returns a css string; and "),$t=a("code"),Ir=t("tick"),Ar=t(" a callback function."),Tr=i(),ca=a("p"),Lr=t("All of the properties are optional, if not specified, the default for delay is 0ms, the default for duration is 300ms, and the default easing is linear."),jr=i(),pa=a("p"),Hr=t("Usually you would want the transition to be customisable, that's where the parameter is for you can return the delay or duration, passed into the parameter from the user."),dn=i(),p=a("section"),ha=a("h3"),qe=a("a"),Nr=t("Easing"),qr=i(),ka=a("p"),Wr=t("Now, let's talk about easing."),$r=i(),da=a("p"),Fr=t("Easing describes how much an animation progresses at different point of time throughout the animation."),Jr=i(),va=a("p"),Yr=t("For convenience sake, we describe time from 0 to 1, begins with 0% and ends in a 100%."),Mr=i(),ya=a("p"),Rr=t("Here, as the red dot moves from time 0 to 1 along the red line, the value of eased time moves from 0 to 1 as well."),Ur=i(),ua=a("p"),zr=t("The easing function that we are looking at now, is the linear function. The eased value grows linearly with time."),Gr=i(),We=a("p"),Br=t("However if I switch to "),Ft=a("code"),Vr=t("cubicIn"),Kr=t(", the eased value grows in the power of 3 with time."),Qr=i(),$e=a("p"),Xr=t("This is described by the "),Jt=a("code"),Zr=t("cubicIn"),ei=t(" function."),ti=i(),fa=a("p"),si=t("Here's why we use 0 to 1 for time, because 0 power 3 is 0, and 1 power 3 is still 1. So after we power 3 the value of time, we still starts with 0 and ends in 1."),oi=i(),ce=a("p"),ai=t("Well, the easing function does not have to be a polynomial function, you can have if-else case in your easing function, like the "),Yt=a("code"),ni=t("bounceOut"),li=t(", or calling another function like (bounceInOut) "),Mt=a("code"),ri=t("bounceInOut"),ii=t("."),ci=i(),wa=a("p"),pi=t("So, how do we calculate the time?"),hi=i(),ma=a("p"),ki=t("At the beginning of the transition, we record the start time."),di=i(),Fe=a("p"),vi=t("Throughout the transition, we have "),Rt=a("code"),yi=t("t"),ui=t(", the time passed since the starting time, in milliseconds."),fi=i(),O=a("p"),wi=t("We divide the value of "),Ut=a("code"),mi=t("t"),xi=t(" by the duration of the transition, so now we get the value from "),zt=a("code"),Ei=t("0"),_i=t(" to "),Gt=a("code"),gi=t("1"),bi=t(" for "),Bt=a("code"),Ci=t("t"),Oi=t(", "),Vt=a("code"),Di=t("0"),Si=t(" in the beginning of the transition, and "),Kt=a("code"),Pi=t("1"),Ii=t(" at the end of the transition."),Ai=i(),pe=a("p"),Ti=t("Now if I pass in the value of "),Qt=a("code"),Li=t("t"),ji=t(" into the easing function, in this case "),Xt=a("code"),Hi=t("bounceInOut"),Ni=t(", I'll get the eased value."),qi=i(),he=a("p"),Wi=t("The value does not go from "),Zt=a("code"),$i=t("0"),Fi=t(" to "),es=a("code"),Ji=t("1"),Yi=t(" directly, it goes to 0.05, back to 0, 0.14~5, back to 0, all the 1, 0.85, 1, 0.95, 1."),Mi=i(),xa=a("p"),Ri=t("And if I use this eased value to calculate how much I need to translate an element, I'll get an element that bounce in out."),Ui=i(),j=a("p"),zi=t("And that's how the css function works. it takes in "),ts=a("code"),Gi=t("t"),Bi=t(", and you return a css style in string, that will be applied to the element. You also have "),ss=a("code"),Vi=t("u"),Ki=t(", the 2nd paramter, which is "),os=a("code"),Qi=t("1 - t"),Xi=t(", the inverse of "),as=a("code"),Zi=t("t"),ec=t(". as you can see if you use "),ns=a("code"),tc=t("u"),sc=t(" instead, then the element moves in the opposite direction."),oc=i(),D=a("p"),ac=t("So, if you transition an element into the view, the "),ls=a("code"),nc=t("t"),lc=t(" will go from "),rs=a("code"),rc=t("0"),ic=t(" to "),is=a("code"),cc=t("1"),pc=t(", but if you transition an element out of the view, "),cs=a("code"),hc=t("t"),kc=t(" will go from "),ps=a("code"),dc=t("1"),vc=t(" to "),hs=a("code"),yc=t("0"),uc=t("."),fc=i(),Je=a("p"),wc=t("And, if you want to manipulate the element beyond CSS, you can use the "),ks=a("code"),mc=t("tick"),xc=t(" function."),Ec=i(),ee=a("p"),_c=t("It also takes in the "),ds=a("code"),gc=t("t"),bc=t(" and "),vs=a("code"),Cc=t("u"),Oc=t(" the same way as the "),ys=a("code"),Dc=t("css"),Sc=t(" function."),Pc=i(),Ye=a("p"),Ic=t("One very common use case of this "),us=a("code"),Ac=t("tick"),Tc=t(" function is to create a typewriter transition."),Lc=i(),Ea=a("p"),jc=t("Do take note that, the tick function is going to be called on every frame, if you want your application to be buttery smooth 60 frames per second, make sure the tick function is fast to prevent jank."),Hc=i(),_a=a("p"),Nc=t("So we've covered all the properties in the transtion contract, let's take an example of a custom transition"),qc=i(),ga=a("p"),Me=a("a"),Wc=t("REPL"),$c=i(),ba=a("p"),Fc=t("Here I applied different font styles to the element, so the text stays bold and maroon for the 1st 40% of the time, then italic the next 40% of time, and then back to regular text."),Jc=i(),Ca=a("p"),Yc=t("Well, 40% of time is debatable depending on the easing function, in this case we are using linear easing, so it is exactly 40%."),Mc=i(),ge=a("p"),Rc=t("As you can see, you don't have to limit your css transition to just CSS transform, or having to interpolate the value of "),fs=a("code"),Uc=t("t"),zc=t(". "),Oa=a("strong"),Gc=t("the sky is the limit."),Bc=i(),Da=a("p"),Vc=t("Likewise, the text stays at 'coming soon' at the 1st 40% of time, before changing back to the original text."),vn=i(),y=a("section"),Sa=a("h3"),Re=a("a"),Kc=t("Level 3, compile transition in your head."),Qc=i(),Pa=a("p"),Xc=t(`This is a reference to the series of blogs i've written, "compile svelte in your head". be sure to check them out.`),Zc=i(),Ia=a("p"),ep=t("As, how we usually start with a compile svelte in your head article, we are going to explore how we can write a transition in vanilla javascript."),tp=i(),Aa=a("p"),sp=t("There are a few technologies at our hands we can make use of, the 1st is CSS Transition."),op=i(),Ta=a("p"),ap=t("We add the transition property to a selector, describing which css property to be transitioned, the duration, easing function and delay."),np=i(),La=a("p"),lp=t(`And when you change the value of the specified property, in this case opacity, the opacity of the element will transition smoothly based on the easing function.
so here i add the class to change the opacity to 0 and back to 1`),rp=i(),ja=a("p"),ip=t("However the CSS transition is a bit restrictive, you have limited easing functions, no offense, cubic bezier is great."),cp=i(),Ha=a("p"),pp=t("Another thing CSS offers us is CSS Animation."),hp=i(),Ue=a("p"),kp=t("We can define the keyframes of the animation, and then apply it to the element using the "),ws=a("code"),dp=t("animation"),vp=t(" property."),yp=i(),ke=a("p"),up=t("We can have multiple animations happening at the same time, and as we change the value of the transformation, we can have different easing. Noticed that we can still use the linear easing in the "),ms=a("code"),fp=t("animation"),wp=t(" property, so the keyframes will happen linearly. but as the transformation in each frame grows "),Na=a("strong"),mp=t("in cubic power"),xp=t(", the element translates in cubic easing."),Ep=i(),qa=a("p"),Wa=a("strong"),_p=t("We are no longer limited by the easing functions provided by CSS."),gp=i(),$a=a("p"),bp=t("If the transition is not CSS based, we can use JavaScript."),Cp=i(),xs=a("p"),Es=a("code"),Op=t("requestAnimationFrame"),Dp=t(" lets you tell the browser that you wish to perform an animation, the browser will call the function provided for your animation update, right before the next repaint."),Sp=i(),de=a("p"),Pp=t("As you can see here, we can create a loop using "),_s=a("code"),Ip=t("requestAnimationFrame"),Ap=t(", and the "),gs=a("code"),Tp=t("loop"),Lp=t(" function will be called on every frame right before the next repaint."),jp=i(),ze=a("p"),Hp=t("In the "),bs=a("code"),Np=t("loop"),qp=t(" function, we have similar code as we've seen earlier, we calculate the duration since the start, and set the text content based on the duration passed."),Wp=i(),Fa=a("p"),$p=t("So, with CSS animation and JS animation, let see how we can implement transition in vanilla JS."),yn=i(),be=a("section"),Ja=a("h3"),Ge=a("a"),Fp=t("Live Coding"),Jp=i(),Cs=a("div"),un=i(),k=a("section"),Ya=a("h3"),Ce=a("a"),Os=a("code"),Yp=t("transition:"),Mp=t(" in compiled JS"),Rp=i(),Ma=a("p"),Up=t("As we've seen how we can implement transition in vanilla JS, let see how transition is compiled by Svelte."),zp=i(),ve=a("p"),Gp=t("If you've read my compile svelte in your head blog series, you should know about the "),Ds=a("code"),Bp=t("create_fragment"),Vp=t(" function. To those that haven't read it and have no idea what a "),Ss=a("code"),Kp=t("create_fragment"),Qp=t(" function is, well, go read it! what are you waiting for?"),Xp=i(),Be=a("p"),Zp=t("Anyway, a "),Ps=a("code"),eh=t("create_fragment"),th=t(" function is part of the Svelte compiled code, it returns an object describing how to create, mount, update and destroy elements for the Svelte component. You can think of it as a recipe for Svelte components, and create, mount, update and destroy are the basics operations of all Svelte components."),sh=i(),ye=a("p"),oh=t("Here are 2 more operations added if you use transitions "),Is=a("code"),ah=t("intro"),nh=t(" and "),As=a("code"),lh=t("outro"),rh=t("."),ih=i(),Ra=a("p"),ch=t("Let's see how is it being used."),ph=i(),ue=a("p"),hh=t("Say you have an each block. so in the main "),Ts=a("code"),kh=t("create_fragment"),dh=t(" function, you create the each block. and you have the "),Ls=a("code"),vh=t("create_each_block"),yh=t(" function that has the recipe to create elements for individual each items."),uh=i(),E=a("p"),fh=t("In the "),js=a("code"),wh=t("create_fragment"),mh=t(" function, we call the "),Hs=a("code"),xh=t("transition_in"),Eh=t(" and "),Ns=a("code"),_h=t("transition_out"),gh=t(" in the "),qs=a("code"),bh=t("intro"),Ch=t(" and "),Ws=a("code"),Oh=t("outro"),Dh=t(" function. This will in turn call the "),$s=a("code"),Sh=t("intro"),Ph=t(" and "),Fs=a("code"),Ih=t("outro"),Ah=t(" method of the individual each item block."),Th=i(),Ua=a("p"),Lh=t("And when the each block has changes, say adding a new item to the array, svelte will also transition in the newly created block."),jh=i(),za=a("p"),Hh=t("And when the item is removed from the array, svelte will start a new group of outros, transition out the removed items and synchronises the outros."),Nh=i(),_=a("p"),qh=t("let's take a look how's the "),Js=a("code"),Wh=t("intro"),$h=t(" and "),Ys=a("code"),Fh=t("outro"),Jh=t(` method look like for each item.
first in the `),Ms=a("code"),Yh=t("intro"),Mh=t(" method, it will create a bidirectional transition for the "),Rs=a("code"),Rh=t("<div />"),Uh=t(", the element we applied transition on, if it has not been created, and run it to "),Us=a("code"),zh=t("1"),Gh=t(". for the "),zs=a("code"),Bh=t("outro"),Vh=t(" method on the other hand, we run the transition to "),Gs=a("code"),Kh=t("0"),Qh=t("."),Xh=i(),Ga=a("p"),Zh=t("Here, both the intro and outro is sharing the same transition object, so, if the item is added and removed immediately, when we run the transition to 0, the intro animation is cancelled and the outro animation is played immediately, depending on the outro delay."),ek=i(),Ve=a("p"),tk=t("If you only use the "),Bs=a("code"),sk=t("in:"),ok=t(" directive, then, only the intro transition is created."),ak=i(),Ke=a("p"),nk=t("On the other hand, same thing goes if you use only the "),Vs=a("code"),lk=t("out:"),rk=t(" directive."),ik=i(),R=a("p"),ck=t("Let's take a look at the how "),Ks=a("code"),pk=t("create_in_transition"),hk=t(" looks like, hopefully you can see some resemblance with the vanilla code that we've just written. We are going to look at just the "),Qs=a("code"),kk=t("create_in_transition"),dk=t(", as the "),Xs=a("code"),vk=t("create_out_transition"),yk=t(" and "),Zs=a("code"),uk=t("create_bidirectional_transition"),fk=t(" is almost similar in structure."),wk=i(),H=a("p"),mk=t("Here we have the "),eo=a("code"),xk=t("start"),Ek=t(", "),to=a("code"),_k=t("invalidate"),gk=t(" and "),so=a("code"),bk=t("end"),Ck=t(", and the "),oo=a("code"),Ok=t("start"),Dk=t(" will call the function "),ao=a("code"),Sk=t("go"),Pk=t(", which starts the transition."),Ik=i(),Ba=a("p"),Ak=t("First we create the css rule. where we construct the keyframes and we insert the keyframes into the stylesheet, and apply it to the element."),Tk=i(),fe=a("p"),Lk=t("Next we start the loop. if you look into the loop, it is implemented using "),no=a("code"),jk=t("requestAnimationFrame"),Hk=t(`. before we start, we record down the start time of the animation and the end time, so we know when it will end.
and we call the 1st `),lo=a("code"),Nk=t("tick"),qk=t(" function."),Wk=i(),Qe=a("p"),$k=t("If the current time has passed the start time, we calculate the eased time, and call the "),ro=a("code"),Fk=t("tick"),Jk=t(" function."),Yk=i(),Xe=a("p"),Mk=t("And if the time passed the end time, we call the "),io=a("code"),Rk=t("tick"),Uk=t(" function 1 last time."),zk=i(),we=a("p"),Gk=t("In the begining of the loop, we dispatch the "),co=a("code"),Bk=t("on:introstart"),Vk=t(" event, and when it ends, we dispatch the "),po=a("code"),Kk=t("on:introend"),Qk=t(" event."),Xk=i(),Va=a("p"),Zk=t("And of course some cleanup after that."),ed=i(),Ka=a("p"),td=t("Here are some source code reference if you are interested."),sd=i(),me=a("ul"),Ze=a("li"),Qa=a("p"),et=a("a"),od=t("src/runtime/internal/transitions.ts"),ad=i(),tt=a("ul"),st=a("li"),ho=a("code"),nd=t("transition_in"),ld=t(", "),ko=a("code"),rd=t("transition_out"),id=i(),xe=a("li"),vo=a("code"),cd=t("create_in_transition"),pd=t(", "),yo=a("code"),hd=t("create_out_transition"),kd=t(", "),uo=a("code"),dd=t("create_bidirectional_transition"),vd=i(),ot=a("li"),Xa=a("p"),at=a("a"),yd=t("src/runtime/internal/style_manager.ts"),ud=i(),Za=a("ul"),Ee=a("li"),fo=a("code"),fd=t("create_rule"),wd=t(", "),wo=a("code"),md=t("delete_rule"),xd=t(", "),mo=a("code"),Ed=t("clear_rules"),_d=i(),nt=a("li"),Oe=a("p"),lt=a("a"),gd=t("src/runtime/transition/index.ts"),bd=t(" ("),xo=a("code"),Cd=t("svelte/transition"),Od=t(")"),Dd=i(),en=a("ul"),G=a("li"),Eo=a("code"),Sd=t("fade"),Pd=t(", "),_o=a("code"),Id=t("fly"),Ad=t(", "),go=a("code"),Td=t("slide"),Ld=t(", "),bo=a("code"),jd=t("crossfade"),Hd=t(", ..."),Nd=i(),te=a("p"),qd=t("First is the internal transitions, where the "),Co=a("code"),Wd=t("transition_in"),$d=t(", "),Oo=a("code"),Fd=t("transition_out"),Jd=t(", "),Do=a("code"),Yd=t("create_transition"),Md=t("s method being defined."),Rd=i(),tn=a("p"),Ud=t("Following on that is the internal style manager, the part where how svelte create new keyframe rules and manages stylesheets."),zd=i(),N=a("p"),Gd=t("Lastly is the runtime transitions, that's where you import "),So=a("code"),Bd=t("svelte/transtions"),Vd=t(" from. You can check out the code for "),Po=a("code"),Kd=t("fade"),Qd=t(", "),Io=a("code"),Xd=t("fly"),Zd=t(", "),Ao=a("code"),ev=t("slide"),tv=t(", "),To=a("code"),sv=t("crossfade"),ov=t(" and many other transitions."),fn=i(),S=a("section"),sn=a("h3"),rt=a("a"),av=t("Recap"),nv=i(),on=a("p"),lv=t("Finally a recap, we've seen how you can use a transition in svelte, author a transition in svelte, and finally how svelte implements the transition mechanism."),rv=i(),an=a("p"),iv=t("Hopefully, transition is no longer a mystical feature to you, and hope to see more creative transitions coming up."),cv=i(),it=a("p"),pv=t("Tag me on twitter or discord "),ct=a("a"),hv=t("@lihautan"),kv=t(", if you created a something cool with transitions, I look forward to see them."),dv=i(),pt=a("p"),vv=t("Once again, I'm "),ht=a("a"),yv=t("@lihautan"),uv=t(" on twitter, follow me where i post cool and fun knowledge about svelte."),fv=i(),nn=a("p"),wv=t("Thank you and enjoy the Svelte summit!"),this.h()},l(h){f=n(h,"SECTION",{});var w=l(f);U=n(w,"H2",{});var _v=l(U);J=n(_v,"A",{href:!0,id:!0});var gv=l(J);Ae=s(gv,"Slides"),gv.forEach(o),_v.forEach(o),m=c(w),T=n(w,"P",{});var wn=l(T);dt=s(wn,"["),vt=n(wn,"A",{href:!0});var bv=l(vt);Rn=s(bv,"Link to slides"),bv.forEach(o),Un=s(wn,"] (Left arrow and right arrow to navigate)"),wn.forEach(o),w.forEach(o),cn=c(h),b=n(h,"SECTION",{});var q=l(b);Bo=n(q,"H2",{});var Cv=l(Bo);Te=n(Cv,"A",{href:!0,id:!0});var Ov=l(Te);zn=s(Ov,"Script"),Ov.forEach(o),Cv.forEach(o),Gn=c(q),Vo=n(q,"P",{});var Dv=l(Vo);Bn=s(Dv,"Thank you for having me."),Dv.forEach(o),Vn=c(q),Ko=n(q,"P",{});var Sv=l(Ko);Kn=s(Sv,"Transitions allow user to understand where thing comes from and where it goes to."),Sv.forEach(o),Qn=c(q),Qo=n(q,"P",{});var Pv=l(Qo);Xn=s(Pv,"Much like the button over here, when I click on it, it fells into the center, and the title of my talk floats up from it."),Pv.forEach(o),Zn=c(q),Xo=n(q,"P",{});var Iv=l(Xo);el=s(Iv,"Yes, today, I will demystify transitions in svelte. And how am I going to do it?"),Iv.forEach(o),tl=c(q),Zo=n(q,"P",{});var Av=l(Zo);sl=s(Av,"We will dive into Svelte transitions level-by-level."),Av.forEach(o),ol=c(q),Le=n(q,"P",{});var mn=l(Le);al=s(mn,"We start at the first level, where we will learn how to use "),yt=n(mn,"CODE",{class:!0});var Tv=l(yt);nl=s(Tv,"transition:"),Tv.forEach(o),ll=s(mn,` in svelte.
As we reached the 2nd level, we'll look at how to author a transition in svelte.
At the 3rd level, we go deeper and take a look at how Svelte compiles and handle transitions under the hood.`),mn.forEach(o),q.forEach(o),pn=c(h),z=n(h,"SECTION",{});var De=l(z);ea=n(De,"H3",{});var Lv=l(ea);je=n(Lv,"A",{href:!0,id:!0});var jv=l(je);rl=s(jv,"Who am I"),jv.forEach(o),Lv.forEach(o),il=c(De),ta=n(De,"P",{});var Hv=l(ta);cl=s(Hv,"My name is Tan Li Hau, I am a software engineer at Shopee. Shopee is a e-commerce platform in South east asia that is based in Singapore."),Hv.forEach(o),pl=c(De),sa=n(De,"P",{});var Nv=l(sa);hl=s(Nv,"I grew up in a lovely town called penang in malaysia, which has the best street food in malaysia, such as char koay teow, stir-fry flat rice noodles; rojak, a eclectic fruit salad with palm sugar, peanuts and chilli dressing, and well, these are just one of the many great street foods that i hope to try again when I can go back after this coronavirus pandemic is over."),Nv.forEach(o),kl=c(De),oa=n(De,"P",{});var qv=l(oa);dl=s(qv,"last but not the least, im one of the maintainers of svelte"),qv.forEach(o),De.forEach(o),hn=c(h),C=n(h,"SECTION",{});var W=l(C);aa=n(W,"H3",{});var Wv=l(aa);ne=n(Wv,"A",{href:!0,id:!0});var xn=l(ne);vl=s(xn,"Level 1. Using "),ut=n(xn,"CODE",{class:!0});var $v=l(ut);yl=s($v,"transition:"),$v.forEach(o),ul=s(xn,"."),xn.forEach(o),Wv.forEach(o),fl=c(W),He=n(W,"P",{});var En=l(He);wl=s(En,"Here, we have a list of items, rendered using the "),ft=n(En,"CODE",{class:!0});var Fv=l(ft);ml=s(Fv,"{#each}"),Fv.forEach(o),xl=s(En," block. When we add or remove an item, the item appears and disappears in an instant. we have no idea where the item is coming from, or disappear into."),En.forEach(o),El=c(W),Z=n(W,"P",{});var Se=l(Z);_l=s(Se,"To add transition for the items, firstly, we import a transition from "),wt=n(Se,"CODE",{class:!0});var Jv=l(wt);gl=s(Jv,"svelte/transtion"),Jv.forEach(o),bl=s(Se,". here we import fade. to add an entrance transition for the item, we add "),mt=n(Se,"CODE",{class:!0});var Yv=l(mt);Cl=s(Yv,"in"),Yv.forEach(o),Ol=s(Se," colon "),xt=n(Se,"CODE",{class:!0});var Mv=l(xt);Dl=s(Mv,"fade"),Mv.forEach(o),Sl=s(Se,"."),Se.forEach(o),Pl=c(W),na=n(W,"P",{});var Rv=l(na);Il=s(Rv,"Now the item fades into existence."),Rv.forEach(o),Al=c(W),le=n(W,"P",{});var Lo=l(le);Tl=s(Lo,"To customise the transition, we can add parameters. such as duration, or delay. For exit transition, we use "),Et=n(Lo,"CODE",{class:!0});var Uv=l(Et);Ll=s(Uv,"out"),Uv.forEach(o),jl=s(Lo," colon "),_t=n(Lo,"CODE",{class:!0});var zv=l(_t);Hl=s(zv,"fade"),zv.forEach(o),Nl=s(Lo,"."),Lo.forEach(o),ql=c(W),re=n(W,"P",{});var jo=l(re);Wl=s(jo,"If you want both entrance and exit transtion, you can use "),gt=n(jo,"CODE",{class:!0});var Gv=l(gt);$l=s(Gv,"transition"),Gv.forEach(o),Fl=s(jo," colon "),bt=n(jo,"CODE",{class:!0});var Bv=l(bt);Jl=s(Bv,"transition name"),Bv.forEach(o),Yl=s(jo,"."),jo.forEach(o),Ml=c(W),Y=n(W,"P",{});var se=l(Y);Rl=s(se,"There are multiple built-in transitions in svelte, such as "),Ct=n(se,"CODE",{class:!0});var Vv=l(Ct);Ul=s(Vv,"fly"),Vv.forEach(o),zl=s(se,", "),Ot=n(se,"CODE",{class:!0});var Kv=l(Ot);Gl=s(Kv,"slide"),Kv.forEach(o),Bl=s(se,", "),Dt=n(se,"CODE",{class:!0});var Qv=l(Dt);Vl=s(Qv,"scale"),Qv.forEach(o),Kl=s(se,", "),St=n(se,"CODE",{class:!0});var Xv=l(St);Ql=s(Xv,"blur"),Xv.forEach(o),Xl=s(se," and more. this list is not exhaustive, which i recommend you to check them out in the docs as well as the tutorials."),se.forEach(o),W.forEach(o),kn=c(h),x=n(h,"SECTION",{});var P=l(x);la=n(P,"H3",{});var Zv=l(la);ie=n(Zv,"A",{href:!0,id:!0});var _n=l(ie);Zl=s(_n,"Level 2. The "),Pt=n(_n,"CODE",{class:!0});var ey=l(Pt);er=s(ey,"transition:"),ey.forEach(o),tr=s(_n," contract."),_n.forEach(o),Zv.forEach(o),sr=c(P),Ne=n(P,"P",{});var gn=l(Ne);or=s(gn,"Not sure if you've heard about the store contract in svelte, which states that, if any object follows the store contract, that object can be used like a store, where you can subscribe to it and read the value like a store using the "),It=n(gn,"CODE",{class:!0});var ty=l(It);ar=s(ty,"$"),ty.forEach(o),nr=s(gn,"-prefix."),gn.forEach(o),lr=c(P),M=n(P,"P",{});var oe=l(M);rr=s(oe,"The same thing goes with the "),At=n(oe,"CODE",{class:!0});var sy=l(At);ir=s(sy,"transition"),sy.forEach(o),cr=s(oe,". A transition has a contract. Any function that follows the transition contract, can be used together with the "),Tt=n(oe,"CODE",{class:!0});var oy=l(Tt);pr=s(oy,"in:"),oy.forEach(o),hr=s(oe,", "),Lt=n(oe,"CODE",{class:!0});var ay=l(Lt);kr=s(ay,"out:"),ay.forEach(o),dr=s(oe," or "),jt=n(oe,"CODE",{class:!0});var ny=l(jt);vr=s(ny,"transition:"),ny.forEach(o),yr=s(oe," directives."),oe.forEach(o),ur=c(P),ra=n(P,"P",{});var ly=l(ra);fr=s(ly,"Here is how the transition function should look like. It's a function that takes in 2 parameters, the element node that the transition is applied to, and the parameter that is passed into the transition."),ly.forEach(o),wr=c(P),ia=n(P,"P",{});var ry=l(ia);mr=s(ry,"And, it should return an object that describes the transition, or return a function that returns that object."),ry.forEach(o),xr=c(P),L=n(P,"P",{});var B=l(L);Er=s(B,"The object should contain properties such as "),Ht=n(B,"CODE",{class:!0});var iy=l(Ht);_r=s(iy,"delay"),iy.forEach(o),gr=s(B,", in milliseconds, how long before the transition starts; "),Nt=n(B,"CODE",{class:!0});var cy=l(Nt);br=s(cy,"duration"),cy.forEach(o),Cr=s(B,", in millisecond, how long the transition takes; "),qt=n(B,"CODE",{class:!0});var py=l(qt);Or=s(py,"easing"),py.forEach(o),Dr=s(B,", the easing function, which I'll explained later together with; "),Wt=n(B,"CODE",{class:!0});var hy=l(Wt);Sr=s(hy,"css"),hy.forEach(o),Pr=s(B,", a function that returns a css string; and "),$t=n(B,"CODE",{class:!0});var ky=l($t);Ir=s(ky,"tick"),ky.forEach(o),Ar=s(B," a callback function."),B.forEach(o),Tr=c(P),ca=n(P,"P",{});var dy=l(ca);Lr=s(dy,"All of the properties are optional, if not specified, the default for delay is 0ms, the default for duration is 300ms, and the default easing is linear."),dy.forEach(o),jr=c(P),pa=n(P,"P",{});var vy=l(pa);Hr=s(vy,"Usually you would want the transition to be customisable, that's where the parameter is for you can return the delay or duration, passed into the parameter from the user."),vy.forEach(o),P.forEach(o),dn=c(h),p=n(h,"SECTION",{});var d=l(p);ha=n(d,"H3",{});var yy=l(ha);qe=n(yy,"A",{href:!0,id:!0});var uy=l(qe);Nr=s(uy,"Easing"),uy.forEach(o),yy.forEach(o),qr=c(d),ka=n(d,"P",{});var fy=l(ka);Wr=s(fy,"Now, let's talk about easing."),fy.forEach(o),$r=c(d),da=n(d,"P",{});var wy=l(da);Fr=s(wy,"Easing describes how much an animation progresses at different point of time throughout the animation."),wy.forEach(o),Jr=c(d),va=n(d,"P",{});var my=l(va);Yr=s(my,"For convenience sake, we describe time from 0 to 1, begins with 0% and ends in a 100%."),my.forEach(o),Mr=c(d),ya=n(d,"P",{});var xy=l(ya);Rr=s(xy,"Here, as the red dot moves from time 0 to 1 along the red line, the value of eased time moves from 0 to 1 as well."),xy.forEach(o),Ur=c(d),ua=n(d,"P",{});var Ey=l(ua);zr=s(Ey,"The easing function that we are looking at now, is the linear function. The eased value grows linearly with time."),Ey.forEach(o),Gr=c(d),We=n(d,"P",{});var bn=l(We);Br=s(bn,"However if I switch to "),Ft=n(bn,"CODE",{class:!0});var _y=l(Ft);Vr=s(_y,"cubicIn"),_y.forEach(o),Kr=s(bn,", the eased value grows in the power of 3 with time."),bn.forEach(o),Qr=c(d),$e=n(d,"P",{});var Cn=l($e);Xr=s(Cn,"This is described by the "),Jt=n(Cn,"CODE",{class:!0});var gy=l(Jt);Zr=s(gy,"cubicIn"),gy.forEach(o),ei=s(Cn," function."),Cn.forEach(o),ti=c(d),fa=n(d,"P",{});var by=l(fa);si=s(by,"Here's why we use 0 to 1 for time, because 0 power 3 is 0, and 1 power 3 is still 1. So after we power 3 the value of time, we still starts with 0 and ends in 1."),by.forEach(o),oi=c(d),ce=n(d,"P",{});var Ho=l(ce);ai=s(Ho,"Well, the easing function does not have to be a polynomial function, you can have if-else case in your easing function, like the "),Yt=n(Ho,"CODE",{class:!0});var Cy=l(Yt);ni=s(Cy,"bounceOut"),Cy.forEach(o),li=s(Ho,", or calling another function like (bounceInOut) "),Mt=n(Ho,"CODE",{class:!0});var Oy=l(Mt);ri=s(Oy,"bounceInOut"),Oy.forEach(o),ii=s(Ho,"."),Ho.forEach(o),ci=c(d),wa=n(d,"P",{});var Dy=l(wa);pi=s(Dy,"So, how do we calculate the time?"),Dy.forEach(o),hi=c(d),ma=n(d,"P",{});var Sy=l(ma);ki=s(Sy,"At the beginning of the transition, we record the start time."),Sy.forEach(o),di=c(d),Fe=n(d,"P",{});var On=l(Fe);vi=s(On,"Throughout the transition, we have "),Rt=n(On,"CODE",{class:!0});var Py=l(Rt);yi=s(Py,"t"),Py.forEach(o),ui=s(On,", the time passed since the starting time, in milliseconds."),On.forEach(o),fi=c(d),O=n(d,"P",{});var $=l(O);wi=s($,"We divide the value of "),Ut=n($,"CODE",{class:!0});var Iy=l(Ut);mi=s(Iy,"t"),Iy.forEach(o),xi=s($," by the duration of the transition, so now we get the value from "),zt=n($,"CODE",{class:!0});var Ay=l(zt);Ei=s(Ay,"0"),Ay.forEach(o),_i=s($," to "),Gt=n($,"CODE",{class:!0});var Ty=l(Gt);gi=s(Ty,"1"),Ty.forEach(o),bi=s($," for "),Bt=n($,"CODE",{class:!0});var Ly=l(Bt);Ci=s(Ly,"t"),Ly.forEach(o),Oi=s($,", "),Vt=n($,"CODE",{class:!0});var jy=l(Vt);Di=s(jy,"0"),jy.forEach(o),Si=s($," in the beginning of the transition, and "),Kt=n($,"CODE",{class:!0});var Hy=l(Kt);Pi=s(Hy,"1"),Hy.forEach(o),Ii=s($," at the end of the transition."),$.forEach(o),Ai=c(d),pe=n(d,"P",{});var No=l(pe);Ti=s(No,"Now if I pass in the value of "),Qt=n(No,"CODE",{class:!0});var Ny=l(Qt);Li=s(Ny,"t"),Ny.forEach(o),ji=s(No," into the easing function, in this case "),Xt=n(No,"CODE",{class:!0});var qy=l(Xt);Hi=s(qy,"bounceInOut"),qy.forEach(o),Ni=s(No,", I'll get the eased value."),No.forEach(o),qi=c(d),he=n(d,"P",{});var qo=l(he);Wi=s(qo,"The value does not go from "),Zt=n(qo,"CODE",{class:!0});var Wy=l(Zt);$i=s(Wy,"0"),Wy.forEach(o),Fi=s(qo," to "),es=n(qo,"CODE",{class:!0});var $y=l(es);Ji=s($y,"1"),$y.forEach(o),Yi=s(qo," directly, it goes to 0.05, back to 0, 0.14~5, back to 0, all the 1, 0.85, 1, 0.95, 1."),qo.forEach(o),Mi=c(d),xa=n(d,"P",{});var Fy=l(xa);Ri=s(Fy,"And if I use this eased value to calculate how much I need to translate an element, I'll get an element that bounce in out."),Fy.forEach(o),Ui=c(d),j=n(d,"P",{});var V=l(j);zi=s(V,"And that's how the css function works. it takes in "),ts=n(V,"CODE",{class:!0});var Jy=l(ts);Gi=s(Jy,"t"),Jy.forEach(o),Bi=s(V,", and you return a css style in string, that will be applied to the element. You also have "),ss=n(V,"CODE",{class:!0});var Yy=l(ss);Vi=s(Yy,"u"),Yy.forEach(o),Ki=s(V,", the 2nd paramter, which is "),os=n(V,"CODE",{class:!0});var My=l(os);Qi=s(My,"1 - t"),My.forEach(o),Xi=s(V,", the inverse of "),as=n(V,"CODE",{class:!0});var Ry=l(as);Zi=s(Ry,"t"),Ry.forEach(o),ec=s(V,". as you can see if you use "),ns=n(V,"CODE",{class:!0});var Uy=l(ns);tc=s(Uy,"u"),Uy.forEach(o),sc=s(V," instead, then the element moves in the opposite direction."),V.forEach(o),oc=c(d),D=n(d,"P",{});var F=l(D);ac=s(F,"So, if you transition an element into the view, the "),ls=n(F,"CODE",{class:!0});var zy=l(ls);nc=s(zy,"t"),zy.forEach(o),lc=s(F," will go from "),rs=n(F,"CODE",{class:!0});var Gy=l(rs);rc=s(Gy,"0"),Gy.forEach(o),ic=s(F," to "),is=n(F,"CODE",{class:!0});var By=l(is);cc=s(By,"1"),By.forEach(o),pc=s(F,", but if you transition an element out of the view, "),cs=n(F,"CODE",{class:!0});var Vy=l(cs);hc=s(Vy,"t"),Vy.forEach(o),kc=s(F," will go from "),ps=n(F,"CODE",{class:!0});var Ky=l(ps);dc=s(Ky,"1"),Ky.forEach(o),vc=s(F," to "),hs=n(F,"CODE",{class:!0});var Qy=l(hs);yc=s(Qy,"0"),Qy.forEach(o),uc=s(F,"."),F.forEach(o),fc=c(d),Je=n(d,"P",{});var Dn=l(Je);wc=s(Dn,"And, if you want to manipulate the element beyond CSS, you can use the "),ks=n(Dn,"CODE",{class:!0});var Xy=l(ks);mc=s(Xy,"tick"),Xy.forEach(o),xc=s(Dn," function."),Dn.forEach(o),Ec=c(d),ee=n(d,"P",{});var Pe=l(ee);_c=s(Pe,"It also takes in the "),ds=n(Pe,"CODE",{class:!0});var Zy=l(ds);gc=s(Zy,"t"),Zy.forEach(o),bc=s(Pe," and "),vs=n(Pe,"CODE",{class:!0});var eu=l(vs);Cc=s(eu,"u"),eu.forEach(o),Oc=s(Pe," the same way as the "),ys=n(Pe,"CODE",{class:!0});var tu=l(ys);Dc=s(tu,"css"),tu.forEach(o),Sc=s(Pe," function."),Pe.forEach(o),Pc=c(d),Ye=n(d,"P",{});var Sn=l(Ye);Ic=s(Sn,"One very common use case of this "),us=n(Sn,"CODE",{class:!0});var su=l(us);Ac=s(su,"tick"),su.forEach(o),Tc=s(Sn," function is to create a typewriter transition."),Sn.forEach(o),Lc=c(d),Ea=n(d,"P",{});var ou=l(Ea);jc=s(ou,"Do take note that, the tick function is going to be called on every frame, if you want your application to be buttery smooth 60 frames per second, make sure the tick function is fast to prevent jank."),ou.forEach(o),Hc=c(d),_a=n(d,"P",{});var au=l(_a);Nc=s(au,"So we've covered all the properties in the transtion contract, let's take an example of a custom transition"),au.forEach(o),qc=c(d),ga=n(d,"P",{});var nu=l(ga);Me=n(nu,"A",{href:!0,rel:!0});var lu=l(Me);Wc=s(lu,"REPL"),lu.forEach(o),nu.forEach(o),$c=c(d),ba=n(d,"P",{});var ru=l(ba);Fc=s(ru,"Here I applied different font styles to the element, so the text stays bold and maroon for the 1st 40% of the time, then italic the next 40% of time, and then back to regular text."),ru.forEach(o),Jc=c(d),Ca=n(d,"P",{});var iu=l(Ca);Yc=s(iu,"Well, 40% of time is debatable depending on the easing function, in this case we are using linear easing, so it is exactly 40%."),iu.forEach(o),Mc=c(d),ge=n(d,"P",{});var ln=l(ge);Rc=s(ln,"As you can see, you don't have to limit your css transition to just CSS transform, or having to interpolate the value of "),fs=n(ln,"CODE",{class:!0});var cu=l(fs);Uc=s(cu,"t"),cu.forEach(o),zc=s(ln,". "),Oa=n(ln,"STRONG",{});var pu=l(Oa);Gc=s(pu,"the sky is the limit."),pu.forEach(o),ln.forEach(o),Bc=c(d),Da=n(d,"P",{});var hu=l(Da);Vc=s(hu,"Likewise, the text stays at 'coming soon' at the 1st 40% of time, before changing back to the original text."),hu.forEach(o),d.forEach(o),vn=c(h),y=n(h,"SECTION",{});var u=l(y);Sa=n(u,"H3",{});var ku=l(Sa);Re=n(ku,"A",{href:!0,id:!0});var du=l(Re);Kc=s(du,"Level 3, compile transition in your head."),du.forEach(o),ku.forEach(o),Qc=c(u),Pa=n(u,"P",{});var vu=l(Pa);Xc=s(vu,`This is a reference to the series of blogs i've written, "compile svelte in your head". be sure to check them out.`),vu.forEach(o),Zc=c(u),Ia=n(u,"P",{});var yu=l(Ia);ep=s(yu,"As, how we usually start with a compile svelte in your head article, we are going to explore how we can write a transition in vanilla javascript."),yu.forEach(o),tp=c(u),Aa=n(u,"P",{});var uu=l(Aa);sp=s(uu,"There are a few technologies at our hands we can make use of, the 1st is CSS Transition."),uu.forEach(o),op=c(u),Ta=n(u,"P",{});var fu=l(Ta);ap=s(fu,"We add the transition property to a selector, describing which css property to be transitioned, the duration, easing function and delay."),fu.forEach(o),np=c(u),La=n(u,"P",{});var wu=l(La);lp=s(wu,`And when you change the value of the specified property, in this case opacity, the opacity of the element will transition smoothly based on the easing function.
so here i add the class to change the opacity to 0 and back to 1`),wu.forEach(o),rp=c(u),ja=n(u,"P",{});var mu=l(ja);ip=s(mu,"However the CSS transition is a bit restrictive, you have limited easing functions, no offense, cubic bezier is great."),mu.forEach(o),cp=c(u),Ha=n(u,"P",{});var xu=l(Ha);pp=s(xu,"Another thing CSS offers us is CSS Animation."),xu.forEach(o),hp=c(u),Ue=n(u,"P",{});var Pn=l(Ue);kp=s(Pn,"We can define the keyframes of the animation, and then apply it to the element using the "),ws=n(Pn,"CODE",{class:!0});var Eu=l(ws);dp=s(Eu,"animation"),Eu.forEach(o),vp=s(Pn," property."),Pn.forEach(o),yp=c(u),ke=n(u,"P",{});var Wo=l(ke);up=s(Wo,"We can have multiple animations happening at the same time, and as we change the value of the transformation, we can have different easing. Noticed that we can still use the linear easing in the "),ms=n(Wo,"CODE",{class:!0});var _u=l(ms);fp=s(_u,"animation"),_u.forEach(o),wp=s(Wo," property, so the keyframes will happen linearly. but as the transformation in each frame grows "),Na=n(Wo,"STRONG",{});var gu=l(Na);mp=s(gu,"in cubic power"),gu.forEach(o),xp=s(Wo,", the element translates in cubic easing."),Wo.forEach(o),Ep=c(u),qa=n(u,"P",{});var bu=l(qa);Wa=n(bu,"STRONG",{});var Cu=l(Wa);_p=s(Cu,"We are no longer limited by the easing functions provided by CSS."),Cu.forEach(o),bu.forEach(o),gp=c(u),$a=n(u,"P",{});var Ou=l($a);bp=s(Ou,"If the transition is not CSS based, we can use JavaScript."),Ou.forEach(o),Cp=c(u),xs=n(u,"P",{});var mv=l(xs);Es=n(mv,"CODE",{class:!0});var Du=l(Es);Op=s(Du,"requestAnimationFrame"),Du.forEach(o),Dp=s(mv," lets you tell the browser that you wish to perform an animation, the browser will call the function provided for your animation update, right before the next repaint."),mv.forEach(o),Sp=c(u),de=n(u,"P",{});var $o=l(de);Pp=s($o,"As you can see here, we can create a loop using "),_s=n($o,"CODE",{class:!0});var Su=l(_s);Ip=s(Su,"requestAnimationFrame"),Su.forEach(o),Ap=s($o,", and the "),gs=n($o,"CODE",{class:!0});var Pu=l(gs);Tp=s(Pu,"loop"),Pu.forEach(o),Lp=s($o," function will be called on every frame right before the next repaint."),$o.forEach(o),jp=c(u),ze=n(u,"P",{});var In=l(ze);Hp=s(In,"In the "),bs=n(In,"CODE",{class:!0});var Iu=l(bs);Np=s(Iu,"loop"),Iu.forEach(o),qp=s(In," function, we have similar code as we've seen earlier, we calculate the duration since the start, and set the text content based on the duration passed."),In.forEach(o),Wp=c(u),Fa=n(u,"P",{});var Au=l(Fa);$p=s(Au,"So, with CSS animation and JS animation, let see how we can implement transition in vanilla JS."),Au.forEach(o),u.forEach(o),yn=c(h),be=n(h,"SECTION",{});var An=l(be);Ja=n(An,"H3",{});var Tu=l(Ja);Ge=n(Tu,"A",{href:!0,id:!0});var Lu=l(Ge);Fp=s(Lu,"Live Coding"),Lu.forEach(o),Tu.forEach(o),Jp=c(An),Cs=n(An,"DIV",{class:!0});var yw=l(Cs);yw.forEach(o),An.forEach(o),un=c(h),k=n(h,"SECTION",{});var v=l(k);Ya=n(v,"H3",{});var ju=l(Ya);Ce=n(ju,"A",{href:!0,id:!0});var xv=l(Ce);Os=n(xv,"CODE",{class:!0});var Hu=l(Os);Yp=s(Hu,"transition:"),Hu.forEach(o),Mp=s(xv," in compiled JS"),xv.forEach(o),ju.forEach(o),Rp=c(v),Ma=n(v,"P",{});var Nu=l(Ma);Up=s(Nu,"As we've seen how we can implement transition in vanilla JS, let see how transition is compiled by Svelte."),Nu.forEach(o),zp=c(v),ve=n(v,"P",{});var Fo=l(ve);Gp=s(Fo,"If you've read my compile svelte in your head blog series, you should know about the "),Ds=n(Fo,"CODE",{class:!0});var qu=l(Ds);Bp=s(qu,"create_fragment"),qu.forEach(o),Vp=s(Fo," function. To those that haven't read it and have no idea what a "),Ss=n(Fo,"CODE",{class:!0});var Wu=l(Ss);Kp=s(Wu,"create_fragment"),Wu.forEach(o),Qp=s(Fo," function is, well, go read it! what are you waiting for?"),Fo.forEach(o),Xp=c(v),Be=n(v,"P",{});var Tn=l(Be);Zp=s(Tn,"Anyway, a "),Ps=n(Tn,"CODE",{class:!0});var $u=l(Ps);eh=s($u,"create_fragment"),$u.forEach(o),th=s(Tn," function is part of the Svelte compiled code, it returns an object describing how to create, mount, update and destroy elements for the Svelte component. You can think of it as a recipe for Svelte components, and create, mount, update and destroy are the basics operations of all Svelte components."),Tn.forEach(o),sh=c(v),ye=n(v,"P",{});var Jo=l(ye);oh=s(Jo,"Here are 2 more operations added if you use transitions "),Is=n(Jo,"CODE",{class:!0});var Fu=l(Is);ah=s(Fu,"intro"),Fu.forEach(o),nh=s(Jo," and "),As=n(Jo,"CODE",{class:!0});var Ju=l(As);lh=s(Ju,"outro"),Ju.forEach(o),rh=s(Jo,"."),Jo.forEach(o),ih=c(v),Ra=n(v,"P",{});var Yu=l(Ra);ch=s(Yu,"Let's see how is it being used."),Yu.forEach(o),ph=c(v),ue=n(v,"P",{});var Yo=l(ue);hh=s(Yo,"Say you have an each block. so in the main "),Ts=n(Yo,"CODE",{class:!0});var Mu=l(Ts);kh=s(Mu,"create_fragment"),Mu.forEach(o),dh=s(Yo," function, you create the each block. and you have the "),Ls=n(Yo,"CODE",{class:!0});var Ru=l(Ls);vh=s(Ru,"create_each_block"),Ru.forEach(o),yh=s(Yo," function that has the recipe to create elements for individual each items."),Yo.forEach(o),uh=c(v),E=n(v,"P",{});var I=l(E);fh=s(I,"In the "),js=n(I,"CODE",{class:!0});var Uu=l(js);wh=s(Uu,"create_fragment"),Uu.forEach(o),mh=s(I," function, we call the "),Hs=n(I,"CODE",{class:!0});var zu=l(Hs);xh=s(zu,"transition_in"),zu.forEach(o),Eh=s(I," and "),Ns=n(I,"CODE",{class:!0});var Gu=l(Ns);_h=s(Gu,"transition_out"),Gu.forEach(o),gh=s(I," in the "),qs=n(I,"CODE",{class:!0});var Bu=l(qs);bh=s(Bu,"intro"),Bu.forEach(o),Ch=s(I," and "),Ws=n(I,"CODE",{class:!0});var Vu=l(Ws);Oh=s(Vu,"outro"),Vu.forEach(o),Dh=s(I," function. This will in turn call the "),$s=n(I,"CODE",{class:!0});var Ku=l($s);Sh=s(Ku,"intro"),Ku.forEach(o),Ph=s(I," and "),Fs=n(I,"CODE",{class:!0});var Qu=l(Fs);Ih=s(Qu,"outro"),Qu.forEach(o),Ah=s(I," method of the individual each item block."),I.forEach(o),Th=c(v),Ua=n(v,"P",{});var Xu=l(Ua);Lh=s(Xu,"And when the each block has changes, say adding a new item to the array, svelte will also transition in the newly created block."),Xu.forEach(o),jh=c(v),za=n(v,"P",{});var Zu=l(za);Hh=s(Zu,"And when the item is removed from the array, svelte will start a new group of outros, transition out the removed items and synchronises the outros."),Zu.forEach(o),Nh=c(v),_=n(v,"P",{});var A=l(_);qh=s(A,"let's take a look how's the "),Js=n(A,"CODE",{class:!0});var ef=l(Js);Wh=s(ef,"intro"),ef.forEach(o),$h=s(A," and "),Ys=n(A,"CODE",{class:!0});var tf=l(Ys);Fh=s(tf,"outro"),tf.forEach(o),Jh=s(A,` method look like for each item.
first in the `),Ms=n(A,"CODE",{class:!0});var sf=l(Ms);Yh=s(sf,"intro"),sf.forEach(o),Mh=s(A," method, it will create a bidirectional transition for the "),Rs=n(A,"CODE",{class:!0});var of=l(Rs);Rh=s(of,"<div />"),of.forEach(o),Uh=s(A,", the element we applied transition on, if it has not been created, and run it to "),Us=n(A,"CODE",{class:!0});var af=l(Us);zh=s(af,"1"),af.forEach(o),Gh=s(A,". for the "),zs=n(A,"CODE",{class:!0});var nf=l(zs);Bh=s(nf,"outro"),nf.forEach(o),Vh=s(A," method on the other hand, we run the transition to "),Gs=n(A,"CODE",{class:!0});var lf=l(Gs);Kh=s(lf,"0"),lf.forEach(o),Qh=s(A,"."),A.forEach(o),Xh=c(v),Ga=n(v,"P",{});var rf=l(Ga);Zh=s(rf,"Here, both the intro and outro is sharing the same transition object, so, if the item is added and removed immediately, when we run the transition to 0, the intro animation is cancelled and the outro animation is played immediately, depending on the outro delay."),rf.forEach(o),ek=c(v),Ve=n(v,"P",{});var Ln=l(Ve);tk=s(Ln,"If you only use the "),Bs=n(Ln,"CODE",{class:!0});var cf=l(Bs);sk=s(cf,"in:"),cf.forEach(o),ok=s(Ln," directive, then, only the intro transition is created."),Ln.forEach(o),ak=c(v),Ke=n(v,"P",{});var jn=l(Ke);nk=s(jn,"On the other hand, same thing goes if you use only the "),Vs=n(jn,"CODE",{class:!0});var pf=l(Vs);lk=s(pf,"out:"),pf.forEach(o),rk=s(jn," directive."),jn.forEach(o),ik=c(v),R=n(v,"P",{});var ae=l(R);ck=s(ae,"Let's take a look at the how "),Ks=n(ae,"CODE",{class:!0});var hf=l(Ks);pk=s(hf,"create_in_transition"),hf.forEach(o),hk=s(ae," looks like, hopefully you can see some resemblance with the vanilla code that we've just written. We are going to look at just the "),Qs=n(ae,"CODE",{class:!0});var kf=l(Qs);kk=s(kf,"create_in_transition"),kf.forEach(o),dk=s(ae,", as the "),Xs=n(ae,"CODE",{class:!0});var df=l(Xs);vk=s(df,"create_out_transition"),df.forEach(o),yk=s(ae," and "),Zs=n(ae,"CODE",{class:!0});var vf=l(Zs);uk=s(vf,"create_bidirectional_transition"),vf.forEach(o),fk=s(ae," is almost similar in structure."),ae.forEach(o),wk=c(v),H=n(v,"P",{});var K=l(H);mk=s(K,"Here we have the "),eo=n(K,"CODE",{class:!0});var yf=l(eo);xk=s(yf,"start"),yf.forEach(o),Ek=s(K,", "),to=n(K,"CODE",{class:!0});var uf=l(to);_k=s(uf,"invalidate"),uf.forEach(o),gk=s(K," and "),so=n(K,"CODE",{class:!0});var ff=l(so);bk=s(ff,"end"),ff.forEach(o),Ck=s(K,", and the "),oo=n(K,"CODE",{class:!0});var wf=l(oo);Ok=s(wf,"start"),wf.forEach(o),Dk=s(K," will call the function "),ao=n(K,"CODE",{class:!0});var mf=l(ao);Sk=s(mf,"go"),mf.forEach(o),Pk=s(K,", which starts the transition."),K.forEach(o),Ik=c(v),Ba=n(v,"P",{});var xf=l(Ba);Ak=s(xf,"First we create the css rule. where we construct the keyframes and we insert the keyframes into the stylesheet, and apply it to the element."),xf.forEach(o),Tk=c(v),fe=n(v,"P",{});var Mo=l(fe);Lk=s(Mo,"Next we start the loop. if you look into the loop, it is implemented using "),no=n(Mo,"CODE",{class:!0});var Ef=l(no);jk=s(Ef,"requestAnimationFrame"),Ef.forEach(o),Hk=s(Mo,`. before we start, we record down the start time of the animation and the end time, so we know when it will end.
and we call the 1st `),lo=n(Mo,"CODE",{class:!0});var _f=l(lo);Nk=s(_f,"tick"),_f.forEach(o),qk=s(Mo," function."),Mo.forEach(o),Wk=c(v),Qe=n(v,"P",{});var Hn=l(Qe);$k=s(Hn,"If the current time has passed the start time, we calculate the eased time, and call the "),ro=n(Hn,"CODE",{class:!0});var gf=l(ro);Fk=s(gf,"tick"),gf.forEach(o),Jk=s(Hn," function."),Hn.forEach(o),Yk=c(v),Xe=n(v,"P",{});var Nn=l(Xe);Mk=s(Nn,"And if the time passed the end time, we call the "),io=n(Nn,"CODE",{class:!0});var bf=l(io);Rk=s(bf,"tick"),bf.forEach(o),Uk=s(Nn," function 1 last time."),Nn.forEach(o),zk=c(v),we=n(v,"P",{});var Ro=l(we);Gk=s(Ro,"In the begining of the loop, we dispatch the "),co=n(Ro,"CODE",{class:!0});var Cf=l(co);Bk=s(Cf,"on:introstart"),Cf.forEach(o),Vk=s(Ro," event, and when it ends, we dispatch the "),po=n(Ro,"CODE",{class:!0});var Of=l(po);Kk=s(Of,"on:introend"),Of.forEach(o),Qk=s(Ro," event."),Ro.forEach(o),Xk=c(v),Va=n(v,"P",{});var Df=l(Va);Zk=s(Df,"And of course some cleanup after that."),Df.forEach(o),ed=c(v),Ka=n(v,"P",{});var Sf=l(Ka);td=s(Sf,"Here are some source code reference if you are interested."),Sf.forEach(o),sd=c(v),me=n(v,"UL",{});var Uo=l(me);Ze=n(Uo,"LI",{});var qn=l(Ze);Qa=n(qn,"P",{});var Pf=l(Qa);et=n(Pf,"A",{href:!0,rel:!0});var If=l(et);od=s(If,"src/runtime/internal/transitions.ts"),If.forEach(o),Pf.forEach(o),ad=c(qn),tt=n(qn,"UL",{});var Wn=l(tt);st=n(Wn,"LI",{});var $n=l(st);ho=n($n,"CODE",{class:!0});var Af=l(ho);nd=s(Af,"transition_in"),Af.forEach(o),ld=s($n,", "),ko=n($n,"CODE",{class:!0});var Tf=l(ko);rd=s(Tf,"transition_out"),Tf.forEach(o),$n.forEach(o),id=c(Wn),xe=n(Wn,"LI",{});var zo=l(xe);vo=n(zo,"CODE",{class:!0});var Lf=l(vo);cd=s(Lf,"create_in_transition"),Lf.forEach(o),pd=s(zo,", "),yo=n(zo,"CODE",{class:!0});var jf=l(yo);hd=s(jf,"create_out_transition"),jf.forEach(o),kd=s(zo,", "),uo=n(zo,"CODE",{class:!0});var Hf=l(uo);dd=s(Hf,"create_bidirectional_transition"),Hf.forEach(o),zo.forEach(o),Wn.forEach(o),qn.forEach(o),vd=c(Uo),ot=n(Uo,"LI",{});var Fn=l(ot);Xa=n(Fn,"P",{});var Nf=l(Xa);at=n(Nf,"A",{href:!0,rel:!0});var qf=l(at);yd=s(qf,"src/runtime/internal/style_manager.ts"),qf.forEach(o),Nf.forEach(o),ud=c(Fn),Za=n(Fn,"UL",{});var Wf=l(Za);Ee=n(Wf,"LI",{});var Go=l(Ee);fo=n(Go,"CODE",{class:!0});var $f=l(fo);fd=s($f,"create_rule"),$f.forEach(o),wd=s(Go,", "),wo=n(Go,"CODE",{class:!0});var Ff=l(wo);md=s(Ff,"delete_rule"),Ff.forEach(o),xd=s(Go,", "),mo=n(Go,"CODE",{class:!0});var Jf=l(mo);Ed=s(Jf,"clear_rules"),Jf.forEach(o),Go.forEach(o),Wf.forEach(o),Fn.forEach(o),_d=c(Uo),nt=n(Uo,"LI",{});var Jn=l(nt);Oe=n(Jn,"P",{});var rn=l(Oe);lt=n(rn,"A",{href:!0,rel:!0});var Yf=l(lt);gd=s(Yf,"src/runtime/transition/index.ts"),Yf.forEach(o),bd=s(rn," ("),xo=n(rn,"CODE",{class:!0});var Mf=l(xo);Cd=s(Mf,"svelte/transition"),Mf.forEach(o),Od=s(rn,")"),rn.forEach(o),Dd=c(Jn),en=n(Jn,"UL",{});var Rf=l(en);G=n(Rf,"LI",{});var _e=l(G);Eo=n(_e,"CODE",{class:!0});var Uf=l(Eo);Sd=s(Uf,"fade"),Uf.forEach(o),Pd=s(_e,", "),_o=n(_e,"CODE",{class:!0});var zf=l(_o);Id=s(zf,"fly"),zf.forEach(o),Ad=s(_e,", "),go=n(_e,"CODE",{class:!0});var Gf=l(go);Td=s(Gf,"slide"),Gf.forEach(o),Ld=s(_e,", "),bo=n(_e,"CODE",{class:!0});var Bf=l(bo);jd=s(Bf,"crossfade"),Bf.forEach(o),Hd=s(_e,", ..."),_e.forEach(o),Rf.forEach(o),Jn.forEach(o),Uo.forEach(o),Nd=c(v),te=n(v,"P",{});var Ie=l(te);qd=s(Ie,"First is the internal transitions, where the "),Co=n(Ie,"CODE",{class:!0});var Vf=l(Co);Wd=s(Vf,"transition_in"),Vf.forEach(o),$d=s(Ie,", "),Oo=n(Ie,"CODE",{class:!0});var Kf=l(Oo);Fd=s(Kf,"transition_out"),Kf.forEach(o),Jd=s(Ie,", "),Do=n(Ie,"CODE",{class:!0});var Qf=l(Do);Yd=s(Qf,"create_transition"),Qf.forEach(o),Md=s(Ie,"s method being defined."),Ie.forEach(o),Rd=c(v),tn=n(v,"P",{});var Xf=l(tn);Ud=s(Xf,"Following on that is the internal style manager, the part where how svelte create new keyframe rules and manages stylesheets."),Xf.forEach(o),zd=c(v),N=n(v,"P",{});var Q=l(N);Gd=s(Q,"Lastly is the runtime transitions, that's where you import "),So=n(Q,"CODE",{class:!0});var Zf=l(So);Bd=s(Zf,"svelte/transtions"),Zf.forEach(o),Vd=s(Q," from. You can check out the code for "),Po=n(Q,"CODE",{class:!0});var ew=l(Po);Kd=s(ew,"fade"),ew.forEach(o),Qd=s(Q,", "),Io=n(Q,"CODE",{class:!0});var tw=l(Io);Xd=s(tw,"fly"),tw.forEach(o),Zd=s(Q,", "),Ao=n(Q,"CODE",{class:!0});var sw=l(Ao);ev=s(sw,"slide"),sw.forEach(o),tv=s(Q,", "),To=n(Q,"CODE",{class:!0});var ow=l(To);sv=s(ow,"crossfade"),ow.forEach(o),ov=s(Q," and many other transitions."),Q.forEach(o),v.forEach(o),fn=c(h),S=n(h,"SECTION",{});var X=l(S);sn=n(X,"H3",{});var aw=l(sn);rt=n(aw,"A",{href:!0,id:!0});var nw=l(rt);av=s(nw,"Recap"),nw.forEach(o),aw.forEach(o),nv=c(X),on=n(X,"P",{});var lw=l(on);lv=s(lw,"Finally a recap, we've seen how you can use a transition in svelte, author a transition in svelte, and finally how svelte implements the transition mechanism."),lw.forEach(o),rv=c(X),an=n(X,"P",{});var rw=l(an);iv=s(rw,"Hopefully, transition is no longer a mystical feature to you, and hope to see more creative transitions coming up."),rw.forEach(o),cv=c(X),it=n(X,"P",{});var Yn=l(it);pv=s(Yn,"Tag me on twitter or discord "),ct=n(Yn,"A",{href:!0,rel:!0});var iw=l(ct);hv=s(iw,"@lihautan"),iw.forEach(o),kv=s(Yn,", if you created a something cool with transitions, I look forward to see them."),Yn.forEach(o),dv=c(X),pt=n(X,"P",{});var Mn=l(pt);vv=s(Mn,"Once again, I'm "),ht=n(Mn,"A",{href:!0,rel:!0});var cw=l(ht);yv=s(cw,"@lihautan"),cw.forEach(o),uv=s(Mn," on twitter, follow me where i post cool and fun knowledge about svelte."),Mn.forEach(o),fv=c(X),nn=n(X,"P",{});var pw=l(nn);wv=s(pw,"Thank you and enjoy the Svelte summit!"),pw.forEach(o),X.forEach(o),this.h()},h(){r(J,"href","#slides"),r(J,"id","slides"),r(vt,"href","/slides/demystifying-transitions/"),r(Te,"href","#script"),r(Te,"id","script"),r(yt,"class","inline"),r(je,"href","#who-am-i"),r(je,"id","who-am-i"),r(ut,"class","inline"),r(ne,"href","#level-1-using-transition"),r(ne,"id","level-1-using-transition"),r(ft,"class","inline"),r(wt,"class","inline"),r(mt,"class","inline"),r(xt,"class","inline"),r(Et,"class","inline"),r(_t,"class","inline"),r(gt,"class","inline"),r(bt,"class","inline"),r(Ct,"class","inline"),r(Ot,"class","inline"),r(Dt,"class","inline"),r(St,"class","inline"),r(Pt,"class","inline"),r(ie,"href","#level-2-the-transition-contract"),r(ie,"id","level-2-the-transition-contract"),r(It,"class","inline"),r(At,"class","inline"),r(Tt,"class","inline"),r(Lt,"class","inline"),r(jt,"class","inline"),r(Ht,"class","inline"),r(Nt,"class","inline"),r(qt,"class","inline"),r(Wt,"class","inline"),r($t,"class","inline"),r(qe,"href","#easing"),r(qe,"id","easing"),r(Ft,"class","inline"),r(Jt,"class","inline"),r(Yt,"class","inline"),r(Mt,"class","inline"),r(Rt,"class","inline"),r(Ut,"class","inline"),r(zt,"class","inline"),r(Gt,"class","inline"),r(Bt,"class","inline"),r(Vt,"class","inline"),r(Kt,"class","inline"),r(Qt,"class","inline"),r(Xt,"class","inline"),r(Zt,"class","inline"),r(es,"class","inline"),r(ts,"class","inline"),r(ss,"class","inline"),r(os,"class","inline"),r(as,"class","inline"),r(ns,"class","inline"),r(ls,"class","inline"),r(rs,"class","inline"),r(is,"class","inline"),r(cs,"class","inline"),r(ps,"class","inline"),r(hs,"class","inline"),r(ks,"class","inline"),r(ds,"class","inline"),r(vs,"class","inline"),r(ys,"class","inline"),r(us,"class","inline"),r(Me,"href","https://svelte.dev/repl/c88da2fde68a415cbd43aa738bfcefab?version=3.29.0"),r(Me,"rel","nofollow"),r(fs,"class","inline"),r(Re,"href","#level-3-compile-transition-in-your-head"),r(Re,"id","level-3-compile-transition-in-your-head"),r(ws,"class","inline"),r(ms,"class","inline"),r(Es,"class","inline"),r(_s,"class","inline"),r(gs,"class","inline"),r(bs,"class","inline"),r(Ge,"href","#live-coding"),r(Ge,"id","live-coding"),r(Cs,"class","code-section"),r(Os,"class","inline"),r(Ce,"href","#transition-in-compiled-js"),r(Ce,"id","transition-in-compiled-js"),r(Ds,"class","inline"),r(Ss,"class","inline"),r(Ps,"class","inline"),r(Is,"class","inline"),r(As,"class","inline"),r(Ts,"class","inline"),r(Ls,"class","inline"),r(js,"class","inline"),r(Hs,"class","inline"),r(Ns,"class","inline"),r(qs,"class","inline"),r(Ws,"class","inline"),r($s,"class","inline"),r(Fs,"class","inline"),r(Js,"class","inline"),r(Ys,"class","inline"),r(Ms,"class","inline"),r(Rs,"class","inline"),r(Us,"class","inline"),r(zs,"class","inline"),r(Gs,"class","inline"),r(Bs,"class","inline"),r(Vs,"class","inline"),r(Ks,"class","inline"),r(Qs,"class","inline"),r(Xs,"class","inline"),r(Zs,"class","inline"),r(eo,"class","inline"),r(to,"class","inline"),r(so,"class","inline"),r(oo,"class","inline"),r(ao,"class","inline"),r(no,"class","inline"),r(lo,"class","inline"),r(ro,"class","inline"),r(io,"class","inline"),r(co,"class","inline"),r(po,"class","inline"),r(et,"href","https://github.com/sveltejs/svelte/blob/master/src/runtime/internal/transitions.ts"),r(et,"rel","nofollow"),r(ho,"class","inline"),r(ko,"class","inline"),r(vo,"class","inline"),r(yo,"class","inline"),r(uo,"class","inline"),r(at,"href","https://github.com/sveltejs/svelte/blob/master/src/runtime/internal/style_manager.ts"),r(at,"rel","nofollow"),r(fo,"class","inline"),r(wo,"class","inline"),r(mo,"class","inline"),r(lt,"href","https://github.com/sveltejs/svelte/blob/master/src/runtime/transition/index.ts"),r(lt,"rel","nofollow"),r(xo,"class","inline"),r(Eo,"class","inline"),r(_o,"class","inline"),r(go,"class","inline"),r(bo,"class","inline"),r(Co,"class","inline"),r(Oo,"class","inline"),r(Do,"class","inline"),r(So,"class","inline"),r(Po,"class","inline"),r(Io,"class","inline"),r(Ao,"class","inline"),r(To,"class","inline"),r(rt,"href","#recap"),r(rt,"id","recap"),r(ct,"href","https://twitter.com/lihautan"),r(ct,"rel","nofollow"),r(ht,"href","https://twitter.com/lihautan"),r(ht,"rel","nofollow")},m(h,w){g(h,f,w),e(f,U),e(U,J),e(J,Ae),e(f,m),e(f,T),e(T,dt),e(T,vt),e(vt,Rn),e(T,Un),g(h,cn,w),g(h,b,w),e(b,Bo),e(Bo,Te),e(Te,zn),e(b,Gn),e(b,Vo),e(Vo,Bn),e(b,Vn),e(b,Ko),e(Ko,Kn),e(b,Qn),e(b,Qo),e(Qo,Xn),e(b,Zn),e(b,Xo),e(Xo,el),e(b,tl),e(b,Zo),e(Zo,sl),e(b,ol),e(b,Le),e(Le,al),e(Le,yt),e(yt,nl),e(Le,ll),g(h,pn,w),g(h,z,w),e(z,ea),e(ea,je),e(je,rl),e(z,il),e(z,ta),e(ta,cl),e(z,pl),e(z,sa),e(sa,hl),e(z,kl),e(z,oa),e(oa,dl),g(h,hn,w),g(h,C,w),e(C,aa),e(aa,ne),e(ne,vl),e(ne,ut),e(ut,yl),e(ne,ul),e(C,fl),e(C,He),e(He,wl),e(He,ft),e(ft,ml),e(He,xl),e(C,El),e(C,Z),e(Z,_l),e(Z,wt),e(wt,gl),e(Z,bl),e(Z,mt),e(mt,Cl),e(Z,Ol),e(Z,xt),e(xt,Dl),e(Z,Sl),e(C,Pl),e(C,na),e(na,Il),e(C,Al),e(C,le),e(le,Tl),e(le,Et),e(Et,Ll),e(le,jl),e(le,_t),e(_t,Hl),e(le,Nl),e(C,ql),e(C,re),e(re,Wl),e(re,gt),e(gt,$l),e(re,Fl),e(re,bt),e(bt,Jl),e(re,Yl),e(C,Ml),e(C,Y),e(Y,Rl),e(Y,Ct),e(Ct,Ul),e(Y,zl),e(Y,Ot),e(Ot,Gl),e(Y,Bl),e(Y,Dt),e(Dt,Vl),e(Y,Kl),e(Y,St),e(St,Ql),e(Y,Xl),g(h,kn,w),g(h,x,w),e(x,la),e(la,ie),e(ie,Zl),e(ie,Pt),e(Pt,er),e(ie,tr),e(x,sr),e(x,Ne),e(Ne,or),e(Ne,It),e(It,ar),e(Ne,nr),e(x,lr),e(x,M),e(M,rr),e(M,At),e(At,ir),e(M,cr),e(M,Tt),e(Tt,pr),e(M,hr),e(M,Lt),e(Lt,kr),e(M,dr),e(M,jt),e(jt,vr),e(M,yr),e(x,ur),e(x,ra),e(ra,fr),e(x,wr),e(x,ia),e(ia,mr),e(x,xr),e(x,L),e(L,Er),e(L,Ht),e(Ht,_r),e(L,gr),e(L,Nt),e(Nt,br),e(L,Cr),e(L,qt),e(qt,Or),e(L,Dr),e(L,Wt),e(Wt,Sr),e(L,Pr),e(L,$t),e($t,Ir),e(L,Ar),e(x,Tr),e(x,ca),e(ca,Lr),e(x,jr),e(x,pa),e(pa,Hr),g(h,dn,w),g(h,p,w),e(p,ha),e(ha,qe),e(qe,Nr),e(p,qr),e(p,ka),e(ka,Wr),e(p,$r),e(p,da),e(da,Fr),e(p,Jr),e(p,va),e(va,Yr),e(p,Mr),e(p,ya),e(ya,Rr),e(p,Ur),e(p,ua),e(ua,zr),e(p,Gr),e(p,We),e(We,Br),e(We,Ft),e(Ft,Vr),e(We,Kr),e(p,Qr),e(p,$e),e($e,Xr),e($e,Jt),e(Jt,Zr),e($e,ei),e(p,ti),e(p,fa),e(fa,si),e(p,oi),e(p,ce),e(ce,ai),e(ce,Yt),e(Yt,ni),e(ce,li),e(ce,Mt),e(Mt,ri),e(ce,ii),e(p,ci),e(p,wa),e(wa,pi),e(p,hi),e(p,ma),e(ma,ki),e(p,di),e(p,Fe),e(Fe,vi),e(Fe,Rt),e(Rt,yi),e(Fe,ui),e(p,fi),e(p,O),e(O,wi),e(O,Ut),e(Ut,mi),e(O,xi),e(O,zt),e(zt,Ei),e(O,_i),e(O,Gt),e(Gt,gi),e(O,bi),e(O,Bt),e(Bt,Ci),e(O,Oi),e(O,Vt),e(Vt,Di),e(O,Si),e(O,Kt),e(Kt,Pi),e(O,Ii),e(p,Ai),e(p,pe),e(pe,Ti),e(pe,Qt),e(Qt,Li),e(pe,ji),e(pe,Xt),e(Xt,Hi),e(pe,Ni),e(p,qi),e(p,he),e(he,Wi),e(he,Zt),e(Zt,$i),e(he,Fi),e(he,es),e(es,Ji),e(he,Yi),e(p,Mi),e(p,xa),e(xa,Ri),e(p,Ui),e(p,j),e(j,zi),e(j,ts),e(ts,Gi),e(j,Bi),e(j,ss),e(ss,Vi),e(j,Ki),e(j,os),e(os,Qi),e(j,Xi),e(j,as),e(as,Zi),e(j,ec),e(j,ns),e(ns,tc),e(j,sc),e(p,oc),e(p,D),e(D,ac),e(D,ls),e(ls,nc),e(D,lc),e(D,rs),e(rs,rc),e(D,ic),e(D,is),e(is,cc),e(D,pc),e(D,cs),e(cs,hc),e(D,kc),e(D,ps),e(ps,dc),e(D,vc),e(D,hs),e(hs,yc),e(D,uc),e(p,fc),e(p,Je),e(Je,wc),e(Je,ks),e(ks,mc),e(Je,xc),e(p,Ec),e(p,ee),e(ee,_c),e(ee,ds),e(ds,gc),e(ee,bc),e(ee,vs),e(vs,Cc),e(ee,Oc),e(ee,ys),e(ys,Dc),e(ee,Sc),e(p,Pc),e(p,Ye),e(Ye,Ic),e(Ye,us),e(us,Ac),e(Ye,Tc),e(p,Lc),e(p,Ea),e(Ea,jc),e(p,Hc),e(p,_a),e(_a,Nc),e(p,qc),e(p,ga),e(ga,Me),e(Me,Wc),e(p,$c),e(p,ba),e(ba,Fc),e(p,Jc),e(p,Ca),e(Ca,Yc),e(p,Mc),e(p,ge),e(ge,Rc),e(ge,fs),e(fs,Uc),e(ge,zc),e(ge,Oa),e(Oa,Gc),e(p,Bc),e(p,Da),e(Da,Vc),g(h,vn,w),g(h,y,w),e(y,Sa),e(Sa,Re),e(Re,Kc),e(y,Qc),e(y,Pa),e(Pa,Xc),e(y,Zc),e(y,Ia),e(Ia,ep),e(y,tp),e(y,Aa),e(Aa,sp),e(y,op),e(y,Ta),e(Ta,ap),e(y,np),e(y,La),e(La,lp),e(y,rp),e(y,ja),e(ja,ip),e(y,cp),e(y,Ha),e(Ha,pp),e(y,hp),e(y,Ue),e(Ue,kp),e(Ue,ws),e(ws,dp),e(Ue,vp),e(y,yp),e(y,ke),e(ke,up),e(ke,ms),e(ms,fp),e(ke,wp),e(ke,Na),e(Na,mp),e(ke,xp),e(y,Ep),e(y,qa),e(qa,Wa),e(Wa,_p),e(y,gp),e(y,$a),e($a,bp),e(y,Cp),e(y,xs),e(xs,Es),e(Es,Op),e(xs,Dp),e(y,Sp),e(y,de),e(de,Pp),e(de,_s),e(_s,Ip),e(de,Ap),e(de,gs),e(gs,Tp),e(de,Lp),e(y,jp),e(y,ze),e(ze,Hp),e(ze,bs),e(bs,Np),e(ze,qp),e(y,Wp),e(y,Fa),e(Fa,$p),g(h,yn,w),g(h,be,w),e(be,Ja),e(Ja,Ge),e(Ge,Fp),e(be,Jp),e(be,Cs),Cs.innerHTML=vw,g(h,un,w),g(h,k,w),e(k,Ya),e(Ya,Ce),e(Ce,Os),e(Os,Yp),e(Ce,Mp),e(k,Rp),e(k,Ma),e(Ma,Up),e(k,zp),e(k,ve),e(ve,Gp),e(ve,Ds),e(Ds,Bp),e(ve,Vp),e(ve,Ss),e(Ss,Kp),e(ve,Qp),e(k,Xp),e(k,Be),e(Be,Zp),e(Be,Ps),e(Ps,eh),e(Be,th),e(k,sh),e(k,ye),e(ye,oh),e(ye,Is),e(Is,ah),e(ye,nh),e(ye,As),e(As,lh),e(ye,rh),e(k,ih),e(k,Ra),e(Ra,ch),e(k,ph),e(k,ue),e(ue,hh),e(ue,Ts),e(Ts,kh),e(ue,dh),e(ue,Ls),e(Ls,vh),e(ue,yh),e(k,uh),e(k,E),e(E,fh),e(E,js),e(js,wh),e(E,mh),e(E,Hs),e(Hs,xh),e(E,Eh),e(E,Ns),e(Ns,_h),e(E,gh),e(E,qs),e(qs,bh),e(E,Ch),e(E,Ws),e(Ws,Oh),e(E,Dh),e(E,$s),e($s,Sh),e(E,Ph),e(E,Fs),e(Fs,Ih),e(E,Ah),e(k,Th),e(k,Ua),e(Ua,Lh),e(k,jh),e(k,za),e(za,Hh),e(k,Nh),e(k,_),e(_,qh),e(_,Js),e(Js,Wh),e(_,$h),e(_,Ys),e(Ys,Fh),e(_,Jh),e(_,Ms),e(Ms,Yh),e(_,Mh),e(_,Rs),e(Rs,Rh),e(_,Uh),e(_,Us),e(Us,zh),e(_,Gh),e(_,zs),e(zs,Bh),e(_,Vh),e(_,Gs),e(Gs,Kh),e(_,Qh),e(k,Xh),e(k,Ga),e(Ga,Zh),e(k,ek),e(k,Ve),e(Ve,tk),e(Ve,Bs),e(Bs,sk),e(Ve,ok),e(k,ak),e(k,Ke),e(Ke,nk),e(Ke,Vs),e(Vs,lk),e(Ke,rk),e(k,ik),e(k,R),e(R,ck),e(R,Ks),e(Ks,pk),e(R,hk),e(R,Qs),e(Qs,kk),e(R,dk),e(R,Xs),e(Xs,vk),e(R,yk),e(R,Zs),e(Zs,uk),e(R,fk),e(k,wk),e(k,H),e(H,mk),e(H,eo),e(eo,xk),e(H,Ek),e(H,to),e(to,_k),e(H,gk),e(H,so),e(so,bk),e(H,Ck),e(H,oo),e(oo,Ok),e(H,Dk),e(H,ao),e(ao,Sk),e(H,Pk),e(k,Ik),e(k,Ba),e(Ba,Ak),e(k,Tk),e(k,fe),e(fe,Lk),e(fe,no),e(no,jk),e(fe,Hk),e(fe,lo),e(lo,Nk),e(fe,qk),e(k,Wk),e(k,Qe),e(Qe,$k),e(Qe,ro),e(ro,Fk),e(Qe,Jk),e(k,Yk),e(k,Xe),e(Xe,Mk),e(Xe,io),e(io,Rk),e(Xe,Uk),e(k,zk),e(k,we),e(we,Gk),e(we,co),e(co,Bk),e(we,Vk),e(we,po),e(po,Kk),e(we,Qk),e(k,Xk),e(k,Va),e(Va,Zk),e(k,ed),e(k,Ka),e(Ka,td),e(k,sd),e(k,me),e(me,Ze),e(Ze,Qa),e(Qa,et),e(et,od),e(Ze,ad),e(Ze,tt),e(tt,st),e(st,ho),e(ho,nd),e(st,ld),e(st,ko),e(ko,rd),e(tt,id),e(tt,xe),e(xe,vo),e(vo,cd),e(xe,pd),e(xe,yo),e(yo,hd),e(xe,kd),e(xe,uo),e(uo,dd),e(me,vd),e(me,ot),e(ot,Xa),e(Xa,at),e(at,yd),e(ot,ud),e(ot,Za),e(Za,Ee),e(Ee,fo),e(fo,fd),e(Ee,wd),e(Ee,wo),e(wo,md),e(Ee,xd),e(Ee,mo),e(mo,Ed),e(me,_d),e(me,nt),e(nt,Oe),e(Oe,lt),e(lt,gd),e(Oe,bd),e(Oe,xo),e(xo,Cd),e(Oe,Od),e(nt,Dd),e(nt,en),e(en,G),e(G,Eo),e(Eo,Sd),e(G,Pd),e(G,_o),e(_o,Id),e(G,Ad),e(G,go),e(go,Td),e(G,Ld),e(G,bo),e(bo,jd),e(G,Hd),e(k,Nd),e(k,te),e(te,qd),e(te,Co),e(Co,Wd),e(te,$d),e(te,Oo),e(Oo,Fd),e(te,Jd),e(te,Do),e(Do,Yd),e(te,Md),e(k,Rd),e(k,tn),e(tn,Ud),e(k,zd),e(k,N),e(N,Gd),e(N,So),e(So,Bd),e(N,Vd),e(N,Po),e(Po,Kd),e(N,Qd),e(N,Io),e(Io,Xd),e(N,Zd),e(N,Ao),e(Ao,ev),e(N,tv),e(N,To),e(To,sv),e(N,ov),g(h,fn,w),g(h,S,w),e(S,sn),e(sn,rt),e(rt,av),e(S,nv),e(S,on),e(on,lv),e(S,rv),e(S,an),e(an,iv),e(S,cv),e(S,it),e(it,pv),e(it,ct),e(ct,hv),e(it,kv),e(S,dv),e(S,pt),e(pt,vv),e(pt,ht),e(ht,yv),e(pt,uv),e(S,fv),e(S,nn),e(nn,wv)},p:Dw,d(h){h&&o(f),h&&o(cn),h&&o(b),h&&o(pn),h&&o(z),h&&o(hn),h&&o(C),h&&o(kn),h&&o(x),h&&o(dn),h&&o(p),h&&o(vn),h&&o(y),h&&o(yn),h&&o(be),h&&o(un),h&&o(k),h&&o(fn),h&&o(S)}}}function Aw(kt){let f,U;const J=[kt[0],dw];let Ae={$$slots:{default:[Iw]},$$scope:{ctx:kt}};for(let m=0;m<J.length;m+=1)Ae=Ev(Ae,J[m]);return f=new Sw({props:Ae}),{c(){mw(f.$$.fragment)},l(m){xw(f.$$.fragment,m)},m(m,T){Ew(f,m,T),U=!0},p(m,[T]){const dt=T&1?_w(J,[T&1&&hw(m[0]),T&0&&hw(dw)]):{};T&2&&(dt.$$scope={dirty:T,ctx:m}),f.$set(dt)},i(m){U||(gw(f.$$.fragment,m),U=!0)},o(m){bw(f.$$.fragment,m),U=!1},d(m){Cw(f,m)}}}const dw={title:"Demystifying Transitions",occasion:"Svelte Summit 2020",date:"2020-10-19",label:"talk",layout:"talk",description:"Slides[Link to slides] (Left arrow and right arrow to navigate)ScriptThank you for having me.Transitions allow user to understand where thing comes from and where it goes to.Much like the button over here, when I click on it, it fells into the center, and the title of my talk floats up from it....",tableOfContents:[{link:"slides",title:"Slides"},{link:"script",title:"Script",nested:[{link:"who-am-i",title:"Who am I"},{link:"level-1-using-transition",title:"Level 1. Using  `transition:` ."},{link:"level-2-the-transition-contract",title:"Level 2. The  `transition:`  contract."},{link:"easing",title:"Easing"},{link:"level-3-compile-transition-in-your-head",title:"Level 3, compile transition in your head."},{link:"live-coding",title:"Live Coding"},{link:"transition-in-compiled-js",title:"`transition:`  in compiled JS"},{link:"recap",title:"Recap"}]}]};function Tw(kt,f,U){return Ow("blog",{image:Pw}),kt.$$set=J=>{U(0,f=Ev(Ev({},f),kw(J)))},f=kw(f),[f]}class Ww extends uw{constructor(f){super();fw(this,f,Tw,Aw,ww,{})}}export{Ww as default,dw as metadata};
