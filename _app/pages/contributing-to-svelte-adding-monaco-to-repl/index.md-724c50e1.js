import{S as xa,i as fa,s as ga,C as _o,w as _a,x as wa,y as ba,z as Ea,A as ra,q as La,o as Ia,B as Ma,r as Sa,Y as ia,e as a,t as r,k as i,c as t,a as n,h as p,d as o,m as c,b as k,g as go,H as s,J as Pa}from"../../chunks/vendor-da4388d4.js";import{B as Ta}from"../../chunks/BlogLayout-14cfab6f.js";import{_ as Aa}from"../../chunks/twitter-card-image-a57df29d.js";import"../../chunks/stores-1fad7c36.js";import"../../chunks/ldjson-b0805387.js";/* empty css                                */function Ca(N){let e,u,y,E,h,d,f,_s,ws,J,bs,Es,z,Y,Ls,Is,Z,Ms,Ss,F,V,Ps,L,Ts,As,$,ca=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">changeTab</span><span style="color: var(--shiki-color-text)">(selectedTabNode</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> desiredModelId) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">tabArea</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">childNodes</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> child </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">tabArea</span><span style="color: var(--shiki-color-text)">.childNodes[i];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-string-expression)">/tab/</span><span style="color: var(--shiki-token-function)">.test</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.className)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.className </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;tab&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">selectedTabNode</span><span style="color: var(--shiki-color-text)">.className </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;tab active&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> currentState </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">editor</span><span style="color: var(--shiki-token-function)">.saveViewState</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> currentModel </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">editor</span><span style="color: var(--shiki-token-function)">.getModel</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (currentModel </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">data</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">js</span><span style="color: var(--shiki-color-text)">.model) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">data</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">js</span><span style="color: var(--shiki-color-text)">.state </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> currentState;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (currentModel </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">data</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">css</span><span style="color: var(--shiki-color-text)">.model) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">data</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">css</span><span style="color: var(--shiki-color-text)">.state </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> currentState;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (currentModel </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">data</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">html</span><span style="color: var(--shiki-color-text)">.model) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">data</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">html</span><span style="color: var(--shiki-color-text)">.state </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> currentState;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">editor</span><span style="color: var(--shiki-token-function)">.setModel</span><span style="color: var(--shiki-color-text)">(data[desiredModelId].model);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">editor</span><span style="color: var(--shiki-token-function)">.restoreViewState</span><span style="color: var(--shiki-color-text)">(data[desiredModelId].state);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">editor</span><span style="color: var(--shiki-token-function)">.focus</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Cs,j,ha=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">loadSample</span><span style="color: var(--shiki-color-text)">(sampleId</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> (err</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> sample) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (err) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">alert</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Sample not found! &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">err</span><span style="color: var(--shiki-color-text)">.message);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (myToken </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> currentToken) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">data</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">js</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">model</span><span style="color: var(--shiki-token-function)">.setValue</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">sample</span><span style="color: var(--shiki-color-text)">.js);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">data</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">html</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">model</span><span style="color: var(--shiki-token-function)">.setValue</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">sample</span><span style="color: var(--shiki-color-text)">.html);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">data</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">css</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">model</span><span style="color: var(--shiki-token-function)">.setValue</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">sample</span><span style="color: var(--shiki-color-text)">.css);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">editor</span><span style="color: var(--shiki-token-function)">.setScrollTop</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">run</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,Ns,U,ka=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-constant)">data</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">js</span><span style="color: var(--shiki-color-text)">.model </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">monaco</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">editor</span><span style="color: var(--shiki-token-function)">.createModel</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;console.log(&quot;hi&quot;)&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;javascript&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-constant)">data</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">css</span><span style="color: var(--shiki-color-text)">.model </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">monaco</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">editor</span><span style="color: var(--shiki-token-function)">.createModel</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;css&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;css&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-constant)">data</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">html</span><span style="color: var(--shiki-color-text)">.model </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">monaco</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">editor</span><span style="color: var(--shiki-token-function)">.createModel</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;html&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;html&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">		editor </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">monaco</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">editor</span><span style="color: var(--shiki-token-function)">.create</span><span style="color: var(--shiki-color-text)">(editorContainer</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">			model</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">data</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">js</span><span style="color: var(--shiki-color-text)">.model</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">			minimap</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">				enabled</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">			&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		&#125;);</span></span></code></pre>`,Vs,I,G,$s,js,K,Us,Hs,Q,qs,Ds,m,R,W,Bs,Os,X,ss,Js,zs,os,as,Ys,Zs,ts,ns,Fs,Gs,H,va='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">editor</span><span style="color: var(--shiki-color-text)">.onDidChangeModelContent</span></span></code></pre>',xs,v,es,M,Ks,Qs,ls,Rs,Ws,_,S,rs,P,Xs,so,w,is,oo,ao,ps,to,no,cs,eo,lo,hs,ks,T,ro,io,vs,ys,po,co,q,ho,A,ko,vo,ds,D,yo,us,ms,C,uo;return{c(){e=a("section"),u=a("h2"),y=a("a"),E=r("monaco samples:"),h=i(),d=a("p"),f=a("a"),_s=r("https://github.com/microsoft/monaco-editor-samples/blob/master/browser-amd-monarch/index.html"),ws=i(),J=a("p"),bs=r("tab + history undo buffer"),Es=i(),z=a("ul"),Y=a("li"),Ls=r("link to issues that was fixed previously"),Is=i(),Z=a("p"),Ms=r("get inspiration from the playground"),Ss=i(),F=a("ul"),V=a("li"),Ps=r(`it has 3 tabs
`),L=a("a"),Ts=r("https://microsoft.github.io/monaco-editor/playground.html"),As=i(),$=a("div"),Cs=i(),j=a("div"),Ns=i(),U=a("div"),Vs=i(),I=a("ul"),G=a("li"),$s=r("how to add svlete language server into it"),js=i(),K=a("li"),Us=r("markdown"),Hs=i(),Q=a("p"),qs=r("** store as global variable"),Ds=i(),m=a("ul"),R=a("li"),W=a("p"),Bs=r("window.xxx"),Os=i(),X=a("li"),ss=a("p"),Js=r(`right-click, "store as global variable"
quickly test out apis, without having to wait for reload`),zs=i(),os=a("li"),as=a("p"),Ys=r(`allow switching tabs
create new model on new tab / init
store the state when switching tabs
restore state upon selecting tabs`),Zs=i(),ts=a("li"),ns=a("p"),Fs=r("listen to changes"),Gs=i(),H=a("div"),xs=i(),v=a("section"),es=a("h2"),M=a("a"),Ks=r("syntax highlighting"),Qs=i(),ls=a("p"),Rs=r("this is rough man"),Ws=i(),_=a("ul"),S=a("li"),rs=a("p"),P=a("a"),Xs=r("https://gearset.com/blog/writing-an-open-source-apex-syntax-highlighter-for-monaco-editor"),so=i(),w=a("ul"),is=a("li"),oo=r("vs code vs monaco"),ao=i(),ps=a("li"),to=r("text mate grammars, language servers, monarch grammars"),no=i(),cs=a("li"),eo=r("native library"),lo=i(),hs=a("li"),ks=a("p"),T=a("a"),ro=r("https://github.com/microsoft/monaco-editor/issues/171"),io=i(),vs=a("li"),ys=a("p"),po=r("implement a monaco language, shouldn't be hard? \u{1F937}\u200D\u2642\uFE0F"),co=i(),q=a("p"),ho=r("playground "),A=a("a"),ko=r("https://microsoft.github.io/monaco-editor/monarch.html"),vo=i(),ds=a("ul"),D=a("li"),yo=r("proxy based language server"),us=a("ul"),ms=a("li"),C=a("a"),uo=r("https://medium.com/dscddu/language-server-protocol-adding-support-for-multiple-language-servers-to-monaco-editor-a3c35e42a98d"),this.h()},l(x){e=t(x,"SECTION",{});var l=n(e);u=t(l,"H2",{});var wo=n(u);y=t(wo,"A",{href:!0,id:!0});var bo=n(y);E=p(bo,"monaco samples:"),bo.forEach(o),wo.forEach(o),h=c(l),d=t(l,"P",{});var Eo=n(d);f=t(Eo,"A",{href:!0,rel:!0});var Lo=n(f);_s=p(Lo,"https://github.com/microsoft/monaco-editor-samples/blob/master/browser-amd-monarch/index.html"),Lo.forEach(o),Eo.forEach(o),ws=c(l),J=t(l,"P",{});var Io=n(J);bs=p(Io,"tab + history undo buffer"),Io.forEach(o),Es=c(l),z=t(l,"UL",{});var Mo=n(z);Y=t(Mo,"LI",{});var So=n(Y);Ls=p(So,"link to issues that was fixed previously"),So.forEach(o),Mo.forEach(o),Is=c(l),Z=t(l,"P",{});var Po=n(Z);Ms=p(Po,"get inspiration from the playground"),Po.forEach(o),Ss=c(l),F=t(l,"UL",{});var To=n(F);V=t(To,"LI",{});var mo=n(V);Ps=p(mo,`it has 3 tabs
`),L=t(mo,"A",{href:!0,rel:!0});var Ao=n(L);Ts=p(Ao,"https://microsoft.github.io/monaco-editor/playground.html"),Ao.forEach(o),mo.forEach(o),To.forEach(o),As=c(l),$=t(l,"DIV",{class:!0});var ya=n($);ya.forEach(o),Cs=c(l),j=t(l,"DIV",{class:!0});var da=n(j);da.forEach(o),Ns=c(l),U=t(l,"DIV",{class:!0});var ua=n(U);ua.forEach(o),Vs=c(l),I=t(l,"UL",{});var fs=n(I);G=t(fs,"LI",{});var Co=n(G);$s=p(Co,"how to add svlete language server into it"),Co.forEach(o),js=c(fs),K=t(fs,"LI",{});var No=n(K);Us=p(No,"markdown"),No.forEach(o),fs.forEach(o),Hs=c(l),Q=t(l,"P",{});var Vo=n(Q);qs=p(Vo,"** store as global variable"),Vo.forEach(o),Ds=c(l),m=t(l,"UL",{});var b=n(m);R=t(b,"LI",{});var $o=n(R);W=t($o,"P",{});var jo=n(W);Bs=p(jo,"window.xxx"),jo.forEach(o),$o.forEach(o),Os=c(b),X=t(b,"LI",{});var Uo=n(X);ss=t(Uo,"P",{});var Ho=n(ss);Js=p(Ho,`right-click, "store as global variable"
quickly test out apis, without having to wait for reload`),Ho.forEach(o),Uo.forEach(o),zs=c(b),os=t(b,"LI",{});var qo=n(os);as=t(qo,"P",{});var Do=n(as);Ys=p(Do,`allow switching tabs
create new model on new tab / init
store the state when switching tabs
restore state upon selecting tabs`),Do.forEach(o),qo.forEach(o),Zs=c(b),ts=t(b,"LI",{});var Bo=n(ts);ns=t(Bo,"P",{});var Oo=n(ns);Fs=p(Oo,"listen to changes"),Oo.forEach(o),Bo.forEach(o),b.forEach(o),Gs=c(l),H=t(l,"DIV",{class:!0});var ma=n(H);ma.forEach(o),l.forEach(o),xs=c(x),v=t(x,"SECTION",{});var g=n(v);es=t(g,"H2",{});var Jo=n(es);M=t(Jo,"A",{href:!0,id:!0});var zo=n(M);Ks=p(zo,"syntax highlighting"),zo.forEach(o),Jo.forEach(o),Qs=c(g),ls=t(g,"P",{});var Yo=n(ls);Rs=p(Yo,"this is rough man"),Yo.forEach(o),Ws=c(g),_=t(g,"UL",{});var B=n(_);S=t(B,"LI",{});var gs=n(S);rs=t(gs,"P",{});var Zo=n(rs);P=t(Zo,"A",{href:!0,rel:!0});var Fo=n(P);Xs=p(Fo,"https://gearset.com/blog/writing-an-open-source-apex-syntax-highlighter-for-monaco-editor"),Fo.forEach(o),Zo.forEach(o),so=c(gs),w=t(gs,"UL",{});var O=n(w);is=t(O,"LI",{});var Go=n(is);oo=p(Go,"vs code vs monaco"),Go.forEach(o),ao=c(O),ps=t(O,"LI",{});var Ko=n(ps);to=p(Ko,"text mate grammars, language servers, monarch grammars"),Ko.forEach(o),no=c(O),cs=t(O,"LI",{});var Qo=n(cs);eo=p(Qo,"native library"),Qo.forEach(o),O.forEach(o),gs.forEach(o),lo=c(B),hs=t(B,"LI",{});var Ro=n(hs);ks=t(Ro,"P",{});var Wo=n(ks);T=t(Wo,"A",{href:!0,rel:!0});var Xo=n(T);ro=p(Xo,"https://github.com/microsoft/monaco-editor/issues/171"),Xo.forEach(o),Wo.forEach(o),Ro.forEach(o),io=c(B),vs=t(B,"LI",{});var sa=n(vs);ys=t(sa,"P",{});var oa=n(ys);po=p(oa,"implement a monaco language, shouldn't be hard? \u{1F937}\u200D\u2642\uFE0F"),oa.forEach(o),sa.forEach(o),B.forEach(o),co=c(g),q=t(g,"P",{});var xo=n(q);ho=p(xo,"playground "),A=t(xo,"A",{href:!0,rel:!0});var aa=n(A);ko=p(aa,"https://microsoft.github.io/monaco-editor/monarch.html"),aa.forEach(o),xo.forEach(o),vo=c(g),ds=t(g,"UL",{});var ta=n(ds);D=t(ta,"LI",{});var fo=n(D);yo=p(fo,"proxy based language server"),us=t(fo,"UL",{});var na=n(us);ms=t(na,"LI",{});var ea=n(ms);C=t(ea,"A",{href:!0,rel:!0});var la=n(C);uo=p(la,"https://medium.com/dscddu/language-server-protocol-adding-support-for-multiple-language-servers-to-monaco-editor-a3c35e42a98d"),la.forEach(o),ea.forEach(o),na.forEach(o),fo.forEach(o),ta.forEach(o),g.forEach(o),this.h()},h(){k(y,"href","#monaco-samples"),k(y,"id","monaco-samples"),k(f,"href","https://github.com/microsoft/monaco-editor-samples/blob/master/browser-amd-monarch/index.html"),k(f,"rel","nofollow"),k(L,"href","https://microsoft.github.io/monaco-editor/playground.html"),k(L,"rel","nofollow"),k($,"class","code-section"),k(j,"class","code-section"),k(U,"class","code-section"),k(H,"class","code-section"),k(M,"href","#syntax-highlighting"),k(M,"id","syntax-highlighting"),k(P,"href","https://gearset.com/blog/writing-an-open-source-apex-syntax-highlighter-for-monaco-editor"),k(P,"rel","nofollow"),k(T,"href","https://github.com/microsoft/monaco-editor/issues/171"),k(T,"rel","nofollow"),k(A,"href","https://microsoft.github.io/monaco-editor/monarch.html"),k(A,"rel","nofollow"),k(C,"href","https://medium.com/dscddu/language-server-protocol-adding-support-for-multiple-language-servers-to-monaco-editor-a3c35e42a98d"),k(C,"rel","nofollow")},m(x,l){go(x,e,l),s(e,u),s(u,y),s(y,E),s(e,h),s(e,d),s(d,f),s(f,_s),s(e,ws),s(e,J),s(J,bs),s(e,Es),s(e,z),s(z,Y),s(Y,Ls),s(e,Is),s(e,Z),s(Z,Ms),s(e,Ss),s(e,F),s(F,V),s(V,Ps),s(V,L),s(L,Ts),s(e,As),s(e,$),$.innerHTML=ca,s(e,Cs),s(e,j),j.innerHTML=ha,s(e,Ns),s(e,U),U.innerHTML=ka,s(e,Vs),s(e,I),s(I,G),s(G,$s),s(I,js),s(I,K),s(K,Us),s(e,Hs),s(e,Q),s(Q,qs),s(e,Ds),s(e,m),s(m,R),s(R,W),s(W,Bs),s(m,Os),s(m,X),s(X,ss),s(ss,Js),s(m,zs),s(m,os),s(os,as),s(as,Ys),s(m,Zs),s(m,ts),s(ts,ns),s(ns,Fs),s(e,Gs),s(e,H),H.innerHTML=va,go(x,xs,l),go(x,v,l),s(v,es),s(es,M),s(M,Ks),s(v,Qs),s(v,ls),s(ls,Rs),s(v,Ws),s(v,_),s(_,S),s(S,rs),s(rs,P),s(P,Xs),s(S,so),s(S,w),s(w,is),s(is,oo),s(w,ao),s(w,ps),s(ps,to),s(w,no),s(w,cs),s(cs,eo),s(_,lo),s(_,hs),s(hs,ks),s(ks,T),s(T,ro),s(_,io),s(_,vs),s(vs,ys),s(ys,po),s(v,co),s(v,q),s(q,ho),s(q,A),s(A,ko),s(v,vo),s(v,ds),s(ds,D),s(D,yo),s(D,us),s(us,ms),s(ms,C),s(C,uo)},p:Pa,d(x){x&&o(e),x&&o(xs),x&&o(v)}}}function Na(N){let e,u;const y=[N[0],pa];let E={$$slots:{default:[Ca]},$$scope:{ctx:N}};for(let h=0;h<y.length;h+=1)E=_o(E,y[h]);return e=new Ta({props:E}),{c(){_a(e.$$.fragment)},l(h){wa(e.$$.fragment,h)},m(h,d){ba(e,h,d),u=!0},p(h,[d]){const f=d&1?Ea(y,[d&1&&ra(h[0]),d&0&&ra(pa)]):{};d&2&&(f.$$scope={dirty:d,ctx:h}),e.$set(f)},i(h){u||(La(e.$$.fragment,h),u=!0)},o(h){Ia(e.$$.fragment,h),u=!1},d(h){Ma(e,h)}}}const pa={title:"adding monaco to the svelte repl",date:"2020-03-22T08:00:00Z",tags:["Svelte","JavaScript"],wip:!0,label:"blog",description:"monaco samples:https://github.com/microsoft/monaco-editor-samples/blob/master/browser-amd-monarch/index.htmltab + history undo bufferlink to issues that was fixed previouslyget inspiration from the playground...",tableOfContents:[{link:"monaco-samples",title:"monaco samples:"},{link:"syntax-highlighting",title:"syntax highlighting"}]};function Va(N,e,u){return Sa("blog",{image:Aa}),N.$$set=y=>{u(0,e=_o(_o({},e),ia(y)))},e=ia(e),[e]}class Ba extends xa{constructor(e){super();fa(this,e,Va,Na,ga,{})}}export{Ba as default,pa as metadata};
