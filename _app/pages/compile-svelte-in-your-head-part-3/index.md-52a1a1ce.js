import{S as rg,i as kg,s as dg,C as Ih,w as pm,x as cm,y as rm,z as vg,A as om,q as km,o as dm,B as vm,r as hg,R as lm,k as c,e as t,t as a,m as r,c as o,a as l,h as e,d as n,b as i,g as d,F as s,O as ug}from"../../chunks/vendor-6bf294e3.js";import{B as yg}from"../../chunks/BlogLayout-152f599b.js";import{T as fg}from"../../chunks/TableOfContent-1b9e4572.js";import"../../chunks/stores-e20b7872.js";import"../../chunks/WebMentions-745413ea.js";/* empty css                                */var mg="/_app/assets/hero-twitter-aecf8b39.jpg";function gg(Fn){let f,J,U,F,_,S,zn,Al,Go,z,Bn,jl,Ml,Zn,Hl,$l,Kn,Nl,Vl,Yo,Qn,Rl,qo,es,Xn,sa,Ul,Wl,Gl,na,aa,Yl,ql,Jl,ea,ta,Fl,zl,Jo,oa,Bl,Fo,la,St,W,Zl,ia,Kl,Ql,pa,Xl,si,ca,ni,zo,ts,It,Ts,ra,ai,ei,ti,Bs,oi,ka,li,ii,pi,da,hm='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">function</span> <span class="token function">handleMouseMove</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></div><div class="line"></div><div class="line">  <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- You can pass in as variable --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">on:</span>mousemove=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>handleMouseMove<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- or you can inline the event handler --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">on:</span>mousemove=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">/*...*/</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- You can modify event handler with modifiers  --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">on:</span>click|stopPropagation|once=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>handleClick<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div></code></pre>',Bo,G,Lt,Ps,va,ci,ri,ki,Zs,di,ha,vi,hi,ui,At,yi,fi,ua,um='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> name<span class="token punctuation">,</span> yes<span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- You can bind &#96;name&#96; to input.value --></span></div><div class="line"><span class="token comment">&lt;!-- Changing &#96;name&#96; will update input.value to be the value of &#96;name&#96; and --></span></div><div class="line"><span class="token comment">&lt;!-- changing input.value will update &#96;name&#96; to be input.value --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- You can bind input.checked for a checkbox input --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>checked=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>yes<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div></code></pre>',Zo,y,jt,Ss,ya,mi,gi,xi,vs,Ei,fa,_i,wi,Mt,Ks,bi,Ci,Di,Qs,Oi,ma,Ti,Pi,Si,Xs,Ii,ga,Li,Ai,ji,xa,ym='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    <span class="token comment">// do something with the element</span></div><div class="line">    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span></div><div class="line">      <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">        <span class="token comment">// cleanup</span></div><div class="line">      <span class="token punctuation">&#125;</span></div><div class="line">    <span class="token punctuation">&#125;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">use:</span>doSomething</span> <span class="token punctuation">/></span></span></div></code></pre>',Mi,Ht,Hi,$i,Ea,fm=`<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line dim">  <span class="token keyword">import</span> Draggable <span class="token keyword">from</span> <span class="token string">'the-draggable-library'</span><span class="token punctuation">;</span></div><div class="line dim"></div><div class="line dim">  <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line highlight">    <span class="token keyword">const</span> draggable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Draggable</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line highlight">    draggable<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line dim">    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span></div><div class="line dim">      <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line highlight">        draggable<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line dim">      <span class="token punctuation">&#125;</span></div><div class="line dim">    <span class="token punctuation">&#125;</span></div><div class="line dim">  <span class="token punctuation">&#125;</span></div><div class="line dim"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line dim"></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">use:</span>doSomething</span> <span class="token punctuation">/></span></span></div></code></pre>`,Ni,sn,Vi,_a,Ri,Ui,Wi,wa,mm=`<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line dim">  <span class="token keyword">import</span> Draggable <span class="token keyword">from</span> <span class="token string">'the-draggable-library'</span><span class="token punctuation">;</span></div><div class="line dim"></div><div class="line dim">  <span class="token keyword">let</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></div><div class="line dim"></div><div class="line highlight">  <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line highlight">    <span class="token keyword">const</span> draggable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Draggable</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line dim">    draggable<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line dim"></div><div class="line dim">    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span></div><div class="line highlight">      <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line highlight">        draggable<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line highlight">      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></div><div class="line dim">      <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line dim">        draggable<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line dim">      <span class="token punctuation">&#125;</span></div><div class="line dim">    <span class="token punctuation">&#125;</span></div><div class="line dim">  <span class="token punctuation">&#125;</span></div><div class="line dim"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line dim"></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">use:</span>doSomething=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>options<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line dim"></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span></div><div class="line dim">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>checked=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>options<span class="token punctuation">.</span>foo<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line dim">  Foo</div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span></div><div class="line dim">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>checked=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>options<span class="token punctuation">.</span>bar<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line dim">  Bar</div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></div></code></pre>`,Gi,$t,Yi,qi,hs,Nt,Is,Ji,ba,Fi,zi,Vt,Ls,Bi,Ca,Zi,Ki,Rt,As,Qi,Da,Xi,Ko,js,Ut,nn,sp,np,Wt,ap,Qo,I,Gt,an,ep,tp,us,op,Oa,lp,ip,en,pp,cp,rp,Ta,gm='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-token-function)">.addEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;click&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> handleClick);</span></span></code></pre>',kp,Yt,dp,vp,Pa,xm=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-token-function)">.addEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;click&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> handleClick</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  capture</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// triggered before any child element</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  once</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// triggered at most once</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  passive</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// indicates that will never call &#96;preventDefault&#96; to improve performance</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,Xo,os,qt,tn,hp,up,ls,on,yp,fp,Sa,mp,gp,Ia,xp,Ep,_p,La,Em=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-token-function)">.addEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;click&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> event </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">event</span><span style="color: var(--shiki-token-function)">.preventDefault</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,sl,L,Jt,ln,wp,bp,Aa,pn,Cp,Dp,Op,ja,_m=`<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></div><div class="line dim">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'click not triggered'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line dim"><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div><div class="line dim">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></div><div class="line highlight">    event<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line dim">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div><div class="line dim">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div></code></pre>`,Tp,T,Pp,Ma,Sp,Ip,Ha,Lp,Ap,$a,jp,Mp,Na,Hp,$p,Va,Np,Vp,cn,Rp,Up,Wp,Ra,wm='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-token-function)">.removeEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;click&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> handleClick);</span></span></code></pre>',nl,u,Ft,rn,Gp,Yp,zt,qp,Jp,Bt,Fp,zp,Zt,kn,Bp,Ua,Zp,Kp,Qp,dn,Xp,Kt,sc,nc,ac,Wa,bm=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// binding variable &#96;checked&#96; with the checkbox &#96;checked&#96; property</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> checked;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> input </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.querySelector</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;#checkbox&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// synchronise variable &#96;checked&#96; to checkbox &#96;checked&#96; property</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">observe</span><span style="color: var(--shiki-color-text)">(checked</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> newValue </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">input</span><span style="color: var(--shiki-color-text)">.checked </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> newValue;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// synchronise checkbox &#96;checked&#96; property to variable &#96;checked&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// listen to &#96;change&#96; event for &#96;checked&#96; property</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">input</span><span style="color: var(--shiki-token-function)">.addEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;change&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> event </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  checked </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">input</span><span style="color: var(--shiki-color-text)">.checked;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,ec,Qt,tc,oc,Xt,so,lc,ic,ys,pc,Ga,cc,rc,Ya,kc,dc,vc,no,ao,hc,uc,N,yc,vn,fc,mc,hn,qa,gc,xc,Ja,Ec,_c,Fa,wc,bc,Cc,un,Dc,yn,Oc,Tc,al,A,eo,fn,Pc,Sc,to,Ic,Lc,oo,Ac,jc,mn,za,Ba,Mc,Hc,$c,Za,Ka,Nc,Vc,Rc,Qa,Cm=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">actionFn</span><span style="color: var(--shiki-color-text)">(element</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parameter) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)">(newParameter) &#123;&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">destroy</span><span style="color: var(--shiki-color-text)">() &#123;&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// When element is mounted onto the DOM</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> parameter </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">actionObj</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">actionFn</span><span style="color: var(--shiki-color-text)">(element</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parameter);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// When parameter changes</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">parameter </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">actionObj</span><span style="color: var(--shiki-token-function)">.update</span><span style="color: var(--shiki-color-text)">(parameter);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// When element is removed from the DOM</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">actionObj</span><span style="color: var(--shiki-token-function)">.destroy</span><span style="color: var(--shiki-color-text)">();</span></span></code></pre>`,el,Ms,lo,gn,Uc,Wc,B,Gc,Xa,Yc,qc,se,Jc,Fc,ne,zc,Bc,tl,x,io,Hs,ae,Zc,Kc,Qc,ee,Dm='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">function</span> <span class="token function">onChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">on:</span>change=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>onChange<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div></code></pre>',Xc,po,xn,sr,nr,co,ar,er,te,Om=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">/* App.svelte generated by Svelte v3.22.2 */</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> input;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> dispose;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      input </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">element</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;input&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> remount) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> input</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (remount) </span><span style="color: var(--shiki-token-function)">dispose</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      dispose </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(input</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;change&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*onChange*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">(detaching) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (detaching) </span><span style="color: var(--shiki-token-function)">detach</span><span style="color: var(--shiki-color-text)">(input);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">dispose</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">onChange</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [onChange];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`,tr,ro,or,lr,En,fs,ir,oe,pr,cr,ko,rr,kr,dr,ms,vr,le,hr,ur,vo,yr,fr,mr,gs,gr,ie,xr,Er,pe,_r,wr,br,_n,Cr,ce,Dr,Or,ol,m,ho,wn,Tr,Pr,uo,Sr,Ir,re,Tm='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">	<span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></div><div class="line">	<span class="token keyword">function</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">		i<span class="token operator">++</span><span class="token punctuation">;</span></div><div class="line">	<span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click|preventDefault=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>onClick<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>change|stopPropagation=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>onClick<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>change|once=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>onClick<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>change|capture=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>onClick<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- Chain multiple modifiers --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click|preventDefault|stopPropagation|once|capture=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>onClick<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div></code></pre>',Lr,yo,bn,Ar,jr,fo,Mr,Hr,ke,Pm=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">/* App.svelte generated by Svelte v3.22.2 */</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> remount) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      dispose </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(button0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;click&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">prevent_default</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*onClick*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(button1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;change&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">stop_propagation</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*onClick*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(button2</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;change&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*onClick*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; once</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> &#125;)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(button3</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;change&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*onClick*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          button4</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-string-expression)">&quot;click&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">stop_propagation</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">prevent_default</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*onClick*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          &#123; once</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> capture</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        )</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      ];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,$r,mo,Nr,Vr,xs,go,Rr,Ur,P,Wr,de,Gr,Yr,ve,qr,Jr,he,Fr,zr,Cn,Br,Zr,ue,Kr,Qr,Xr,Z,sk,ye,nk,ak,fe,ek,tk,me,ok,lk,ik,Dn,pk,ge,ck,rk,kk,xe,Sm=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">prevent_default</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(event) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">event</span><span style="color: var(--shiki-token-function)">.preventDefault</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fn</span><span style="color: var(--shiki-token-function)">.call</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> event);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ll,b,xo,$s,Ee,dk,vk,hk,_e,Im='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">	<span class="token keyword">let</span> checked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></div><div class="line">	<span class="token keyword">function</span> <span class="token function">updateChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">		checked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></div><div class="line">	<span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>checked</span> <span class="token punctuation">/></span></span></div></code></pre>',uk,Eo,On,yk,fk,_o,mk,gk,we,Lm=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">/* App.svelte generated by Svelte v3.22.2 */</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> input;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> dispose;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> remount) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> input</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">input</span><span style="color: var(--shiki-color-text)">.checked </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*checked*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">];</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (remount) </span><span style="color: var(--shiki-token-function)">dispose</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      dispose </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(input</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;change&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*input_change_handler*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [dirty]) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*checked*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">input</span><span style="color: var(--shiki-color-text)">.checked </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*checked*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">];</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">(detaching) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (detaching) </span><span style="color: var(--shiki-token-function)">detach</span><span style="color: var(--shiki-color-text)">(input);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">dispose</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> checked </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">updateChecked</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (checked </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">input_change_handler</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    checked </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.checked;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> checked);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [checked</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> input_change_handler];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,xk,wo,Ek,_k,Tn,be,wk,Pn,Ns,bk,Ce,Ck,Dk,De,Ok,Tk,V,Pk,bo,Sk,Ik,Oe,Lk,Ak,Te,jk,Mk,Pe,Hk,$k,Nk,Se,Vk,Sn,Es,Rk,Ie,Uk,Wk,Le,Gk,Yk,qk,R,Jk,Ae,Fk,zk,Co,Bk,Zk,je,Kk,Qk,Do,Xk,sd,il,C,Oo,Vs,Me,nd,ad,ed,He,Am=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">	<span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span></div><div class="line">	<span class="token keyword">function</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">updateI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    i<span class="token operator">++</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">use:</span>action=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div></code></pre>`,td,To,In,od,ld,Po,id,pd,$e,jm=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">/* App.svelte generated by Svelte v3.22.2 */</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> action_action;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> remount) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> div</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (remount) </span><span style="color: var(--shiki-token-function)">dispose</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      dispose </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">action_destroyer</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        (action_action </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">action</span><span style="color: var(--shiki-token-function)">.call</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> div</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*i*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]))</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      );</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [dirty]) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (action_action </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">is_function</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">action_action</span><span style="color: var(--shiki-color-text)">.update) </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*i*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">action_action</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">update</span><span style="color: var(--shiki-token-function)">.call</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*i*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">(detaching) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (detaching) </span><span style="color: var(--shiki-token-function)">detach</span><span style="color: var(--shiki-color-text)">(div);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">dispose</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,cd,So,rd,kd,_s,K,dd,Ne,vd,hd,Ve,ud,yd,Io,fd,md,gd,ws,xd,Re,Ed,_d,Lo,wd,bd,Cd,Y,Ue,Dd,Od,We,Td,Pd,Ge,Sd,Id,Ye,Ld,Ad,pl,v,Ao,Ln,jd,Md,bs,Hd,qe,$d,Nd,Je,Vd,Rd,Ud,jo,Wd,Gd,Fe,Mm=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> before <span class="token operator">=</span> <span class="token string">''</span></div><div class="line">  <span class="token keyword">let</span> after <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">uppercase</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    <span class="token comment">// modifying the input.value</span></div><div class="line">    event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- bind after adding input listener --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">on:</span>input=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>uppercase<span class="token punctuation">&#125;</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>after<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>after<span class="token punctuation">&#125;</span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- bind before adding input listener --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>before<span class="token punctuation">&#125;</span></span> <span class="token attr-name"><span class="token namespace">on:</span>input=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>uppercase<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>before<span class="token punctuation">&#125;</span></span></div></code></pre>`,Yd,Q,qd,ze,Jd,Fd,Be,zd,Bd,Ze,Zd,Kd,Qd,Cs,Xd,Ke,sv,nv,Qe,av,ev,tv,An,ov,Xe,lv,iv,pv,st,Hm=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> before <span class="token operator">=</span> <span class="token string">''</span></div><div class="line">  <span class="token keyword">let</span> after <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">uppercaseAction</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">      event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span></div><div class="line">    <span class="token punctuation">&#125;</span></div><div class="line">    element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line">    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span></div><div class="line">      <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">        element<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line">      <span class="token punctuation">&#125;</span></div><div class="line">    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- bind after adding action --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">use:</span>uppercase</span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>after<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>after<span class="token punctuation">&#125;</span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- bind before adding action --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>before<span class="token punctuation">&#125;</span></span> <span class="token attr-name"><span class="token namespace">use:</span>uppercase</span> <span class="token punctuation">/></span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>before<span class="token punctuation">&#125;</span></span></div></code></pre>`,cv,Ds,rv,Mo,kv,dv,X,vv,nt,hv,uv,at,yv,fv,et,mv,gv,xv,Ev,Ho,_v,wv,tt,$m='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> checked<span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">onChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span></div><div class="line">  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>checkbox</span></div><div class="line">  <span class="token attr-name"><span class="token namespace">bind:</span>checked</span></div><div class="line">  <span class="token attr-name"><span class="token namespace">on:</span>change=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>onChange<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token attr-name"><span class="token namespace">use:</span>action</span></div><div class="line"><span class="token punctuation">/></span></span></div></code></pre>',bv,$o,jn,Cv,Dv,ss,Ov,ot,Tv,Pv,lt,Sv,Iv,it,Lv,Av,jv,pt,Nm=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> input;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> action_action;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> dispose;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> remount) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      dispose </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// bind:checked</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(input</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;change&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*input_change_handler*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">])</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// on:change=&#123;onChange&#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(input</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;change&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> onChange)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// use:action</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">action_destroyer</span><span style="color: var(--shiki-color-text)">((action_action </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">action</span><span style="color: var(--shiki-token-function)">.call</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> input)))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      ];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Mv,Mn,Hv,Hn,$v,Nv,cl,D,No,$n,Vv,Rv,ns,Uv,ct,Wv,Gv,rt,Yv,qv,kt,Jv,Fv,zv,Vo,Bv,Zv,Ro,Kv,Qv,Nn,Xv,Vn,sh,nh,ah,as,eh,Rn,th,oh,Un,lh,ih,Wn,ph,ch,rh,Uo,Gn,kh,dt,dh,vh,rl;return f=new fg({props:{data:[{link:"the-on-bind-and-use",title:"The  `on:` ,  `bind:`  and  `use:`",nested:[{link:"on-event-handlers",title:"`on:`  event handlers"},{link:"bind-bindings",title:"`bind:`  bindings"},{link:"use-actions",title:"`use:`  actions"}]},{link:"the-vanilla-js",title:"The Vanilla JS",nested:[{link:"event-handler",title:"Event handler",nested:[{link:"event-preventdefault",title:"event.preventDefault"},{link:"event-stoppropagation",title:"event.stopPropagation"}]},{link:"bindings",title:"Bindings"},{link:"actions",title:"Actions"}]},{link:"the-compiled-js",title:"The Compiled JS",nested:[{link:"on-directive",title:"`on:`  directive",nested:[{link:"event-modifiers",title:"Event modifiers"}]},{link:"bind-directive",title:"`bind:`  directive"},{link:"use-directive",title:"`use:`  directive"},{link:"the-order-of-directives",title:"The order of directives"}]},{link:"closing-note",title:"Closing Note"}]}}),{c(){pm(f.$$.fragment),J=c(),U=t("p"),F=t("strong"),_=a("\u2B05 \u2B05  Previously in "),S=t("a"),zn=a("Part 2"),Al=a("."),Go=c(),z=t("p"),Bn=t("a"),jl=a("Previously"),Ml=a(", I detailed how "),Zn=t("code"),Hl=a("$$invalidate"),$l=a(" works, described how bitmask was used in "),Kn=t("code"),Nl=a("$$invalidate"),Vl=a(", and explained how reactive declarations work as well."),Yo=c(),Qn=t("p"),Rl=a("In this article, we are going to look into 3 DOM related directives:"),qo=c(),es=t("ul"),Xn=t("li"),sa=t("code"),Ul=a("on:"),Wl=a(" for event handlers"),Gl=c(),na=t("li"),aa=t("code"),Yl=a("bind:"),ql=a(" for bindings"),Jl=c(),ea=t("li"),ta=t("code"),Fl=a("use:"),zl=a(" for actions"),Jo=c(),oa=t("p"),Bl=a("To make sure we are on the same page, let's first explain how these 3 directives work."),Fo=c(),la=t("section"),St=t("h2"),W=t("a"),Zl=a("The "),ia=t("code"),Kl=a("on:"),Ql=a(", "),pa=t("code"),Xl=a("bind:"),si=a(" and "),ca=t("code"),ni=a("use:"),zo=c(),ts=t("section"),It=t("h3"),Ts=t("a"),ra=t("code"),ai=a("on:"),ei=a(" event handlers"),ti=c(),Bs=t("p"),oi=a("You can use the "),ka=t("code"),li=a("on:"),ii=a(" directive to listen to any event on an element:"),pi=c(),da=t("div"),Bo=c(),G=t("section"),Lt=t("h3"),Ps=t("a"),va=t("code"),ci=a("bind:"),ri=a(" bindings"),ki=c(),Zs=t("p"),di=a("The "),ha=t("code"),vi=a("bind:"),hi=a(" directive allows you to bind a variable to a property of an element."),ui=c(),At=t("p"),yi=a("Updating the variable will modifying the property of the element, conversely, modifying the property of the element via interacting with the element will, in turn, update the variable."),fi=c(),ua=t("div"),Zo=c(),y=t("section"),jt=t("h3"),Ss=t("a"),ya=t("code"),mi=a("use:"),gi=a(" actions"),xi=c(),vs=t("p"),Ei=a("The "),fa=t("code"),_i=a("use:"),wi=a(" directive is called "),Mt=t("strong"),Ks=t("a"),bi=a('"Action"'),Ci=a(". It provides you an interface to enhance your element."),Di=c(),Qs=t("p"),Oi=a("You pass a function to the "),ma=t("code"),Ti=a("use:"),Pi=a(" directive of an element and the function will be called when your element is mounted."),Si=c(),Xs=t("p"),Ii=a("The function should return an object in which the "),ga=t("code"),Li=a("destroy"),Ai=a(" method of the object will be called when the element is unmounted."),ji=c(),xa=t("div"),Mi=c(),Ht=t("p"),Hi=a("This is useful when you want to interface with 3rd-party libraries:"),$i=c(),Ea=t("div"),Ni=c(),sn=t("p"),Vi=a("You can pass in parameters to the "),_a=t("code"),Ri=a("use:"),Ui=a(" directive, to bring in reactivity into your actions"),Wi=c(),wa=t("div"),Gi=c(),$t=t("p"),Yi=a("You can visit Svelte's interactive tutorial to learn more about:"),qi=c(),hs=t("ul"),Nt=t("li"),Is=t("a"),Ji=a("event handlers with "),ba=t("code"),Fi=a("on:"),zi=c(),Vt=t("li"),Ls=t("a"),Bi=a("bindings with "),Ca=t("code"),Zi=a("bind:"),Ki=c(),Rt=t("li"),As=t("a"),Qi=a("actions with "),Da=t("code"),Xi=a("use:"),Ko=c(),js=t("section"),Ut=t("h2"),nn=t("a"),sp=a("The Vanilla JS"),np=c(),Wt=t("p"),ap=a("Now, let's refresh ourselves with how we can implement an event handler, bindings, and actions without using any framework."),Qo=c(),I=t("section"),Gt=t("h3"),an=t("a"),ep=a("Event handler"),tp=c(),us=t("p"),op=a("As "),Oa=t("a"),lp=a("mentioned in the Part 1 of the series"),ip=a(", we can use "),en=t("a"),pp=a("element.addEventListener"),cp=a(" to listen to events."),rp=c(),Ta=t("div"),kp=c(),Yt=t("p"),dp=a("The event listener takes in an optional 3rd argument, which allows you to specifies the characteristics of the event handler:"),vp=c(),Pa=t("div"),Xo=c(),os=t("section"),qt=t("h4"),tn=t("a"),hp=a("event.preventDefault"),up=c(),ls=t("p"),on=t("a"),yp=a("event.preventDefault"),fp=a(" allows you to prevent the default behavior of the event, for example submitting form for "),Sa=t("code"),mp=a('<button type="submit" />'),gp=a(" or navigating to the target for "),Ia=t("code"),xp=a('<a href="...">'),Ep=a("."),_p=c(),La=t("div"),sl=c(),L=t("section"),Jt=t("h4"),ln=t("a"),wp=a("event.stopPropagation"),bp=c(),Aa=t("p"),pn=t("a"),Cp=a("event.stopPropagation"),Dp=a(" allows you to prevent event to continue propagate."),Op=c(),ja=t("div"),Tp=c(),T=t("p"),Pp=a("To remove the event listener, you need to call "),Ma=t("code"),Sp=a("element.removeEventListener"),Ip=a(" with the same event "),Ha=t("code"),Lp=a("type"),Ap=a(", "),$a=t("code"),jp=a("listener"),Mp=a(" and "),Na=t("code"),Hp=a("capture"),$p=a("/"),Va=t("code"),Np=a("useCapture"),Vp=a(" flag. You can check out the "),cn=t("a"),Rp=a('MDN docs on "Matching event listeners for removal"'),Up=a("."),Wp=c(),Ra=t("div"),nl=c(),u=t("section"),Ft=t("h3"),rn=t("a"),Gp=a("Bindings"),Yp=c(),zt=t("p"),qp=a("Binding is to synchronise between the value of a variable and a property of an element."),Jp=c(),Bt=t("p"),Fp=a("To synchronise the variable to a property of an element, we need to observe the value of the variable. When it changes, apply it to the property of the element."),zp=c(),Zt=t("p"),kn=t("em"),Bp=a("You can check out my previous article "),Ua=t("a"),Zp=a('"Reactivity in Web Frameworks"'),Kp=a(" on how we get notified when the value of a variable changed."),Qp=c(),dn=t("p"),Xp=a("On the other hand, to synchronise the property of an element to a variable, we "),Kt=t("strong"),sc=a("listen to an event of the element"),nc=a(", depending on the property, and update the value of the variable when it happens."),ac=c(),Wa=t("div"),ec=c(),Qt=t("p"),tc=a("Some observations:"),oc=c(),Xt=t("p"),so=t("strong"),lc=a("- The name of the event and the property name of the element may not be the same."),ic=c(),ys=t("p"),pc=a("In this example, we listen to "),Ga=t("code"),cc=a('"change"'),rc=a(" event for the checkbox "),Ya=t("code"),kc=a("checked"),dc=a(" property."),vc=c(),no=t("p"),ao=t("strong"),hc=a("- It is almost impossible to bind a property of an element, if there's no event fired from the element to indicate the property has changed"),uc=c(),N=t("p"),yc=a("A recent example I found out is the "),vn=t("a"),fc=a("HTMLDialogElement"),mc=a(". It has "),hn=t("a"),qa=t("code"),gc=a('"close"'),xc=a(" but not "),Ja=t("code"),Ec=a('"open"'),_c=a(" event, which makes it hard to implement "),Fa=t("code"),wc=a("bind:open"),bc=a(" on the dialog element."),Cc=c(),un=t("p"),Dc=a("Maybe an alternative would be using "),yn=t("a"),Oc=a("MutationObserver"),Tc=a(", which I haven't seen any usage of it in Svelte codebase yet."),al=c(),A=t("section"),eo=t("h3"),fn=t("a"),Pc=a("Actions"),Sc=c(),to=t("p"),Ic=a("Action is a function that gets called when your element is created and mounted onto the DOM."),Lc=c(),oo=t("p"),Ac=a("The function returns an object, with 2 methods:"),jc=c(),mn=t("ul"),za=t("li"),Ba=t("code"),Mc=a("update"),Hc=a(", which gets called when the parameters change"),$c=c(),Za=t("li"),Ka=t("code"),Nc=a("destroy"),Vc=a(", which gets called when the element is removed from the DOM"),Rc=c(),Qa=t("div"),el=c(),Ms=t("section"),lo=t("h2"),gn=t("a"),Uc=a("The Compiled JS"),Wc=c(),B=t("p"),Gc=a("Now let's take look at how Svelte compiles "),Xa=t("code"),Yc=a("on:"),qc=a(", "),se=t("code"),Jc=a("bind:"),Fc=a(" and "),ne=t("code"),zc=a("use:"),Bc=a(" directives into output JavaScript."),tl=c(),x=t("section"),io=t("h3"),Hs=t("a"),ae=t("code"),Zc=a("on:"),Kc=a(" directive"),Qc=c(),ee=t("div"),Xc=c(),po=t("p"),xn=t("a"),sr=a("Svelte REPL"),nr=c(),co=t("p"),ar=a("The output code:"),er=c(),te=t("div"),tr=c(),ro=t("p"),or=a("Some observations:"),lr=c(),En=t("ul"),fs=t("li"),ir=a("Svelte adds event handler, "),oe=t("code"),pr=a("listen(...)"),cr=a(", in the "),ko=t("strong"),rr=a("_m_ount"),kr=a(" method."),dr=c(),ms=t("li"),vr=a("Svelte removes event handler, "),le=t("code"),hr=a("dispose()"),ur=a(", in the "),vo=t("strong"),yr=a("_d_estroy"),fr=a(" method."),mr=c(),gs=t("p"),gr=a("As pointed out in "),ie=t("a"),xr=a("Part 1 #listen and dispose"),Er=a(", to optimise for minification, the "),pe=t("code"),_r=a("dispose"),wr=a(" variable could be a function or an array of functions, depending on having one or many event handlers."),br=c(),_n=t("p"),Cr=a("We will discuss "),ce=t("code"),Dr=a("remount"),Or=a(" in the future, as it is related to remounting elements while reordering items within each block."),ol=c(),m=t("section"),ho=t("h4"),wn=t("a"),Tr=a("Event modifiers"),Pr=c(),uo=t("p"),Sr=a("Event handlers can have modifiers that alter their behavior."),Ir=c(),re=t("div"),Lr=c(),yo=t("p"),bn=t("a"),Ar=a("Svelte REPL"),jr=c(),fo=t("p"),Mr=a("The output code:"),Hr=c(),ke=t("div"),$r=c(),mo=t("p"),Nr=a("Some observations:"),Vr=c(),xs=t("ul"),go=t("li"),Rr=a("Svelte handles different modifiers differently."),Ur=c(),P=t("li"),Wr=a("For "),de=t("code"),Gr=a("capture"),Yr=a(", "),ve=t("code"),qr=a("once"),Jr=a(", and "),he=t("code"),Fr=a("passive"),zr=a(" modifiers, which they are part of the options for "),Cn=t("a"),Br=a("element.addEventListener"),Zr=a(", they will be passed as options into the "),ue=t("code"),Kr=a("listen"),Qr=a(" function."),Xr=c(),Z=t("li"),sk=a("For "),ye=t("code"),nk=a("stopPropagation"),ak=a(", "),fe=t("code"),ek=a("preventDefault"),tk=a(", and "),me=t("code"),ok=a("self"),lk=a(" modifiers, the event handler is decorated with respective decorator functions."),ik=c(),Dn=t("p"),pk=a("An example implementation of the "),ge=t("code"),ck=a("prevent_default"),rk=a(" decorator function:"),kk=c(),xe=t("div"),ll=c(),b=t("section"),xo=t("h3"),$s=t("a"),Ee=t("code"),dk=a("bind:"),vk=a(" directive"),hk=c(),_e=t("div"),uk=c(),Eo=t("p"),On=t("a"),yk=a("Svelte REPL"),fk=c(),_o=t("p"),mk=a("The output code:"),gk=c(),we=t("div"),xk=c(),wo=t("p"),Ek=a("Some observations:"),_k=c(),Tn=t("ul"),be=t("li"),wk=a("To synchronise the value of the variable to the property of the element:"),Pn=t("ul"),Ns=t("li"),bk=a("Svelte wraps the update of the variable "),Ce=t("code"),Ck=a("checked"),Dk=a(" with "),De=t("code"),Ok=a("$$invalidate(...)"),Tk=c(),V=t("li"),Pk=a("In the "),bo=t("strong"),Sk=a("u_p_date"),Ik=a(" method, if the variable "),Oe=t("code"),Lk=a("checked"),Ak=a(" is updated, Svelte sets "),Te=t("code"),jk=a("input.checked"),Mk=a(" to the value of the variable "),Pe=t("code"),Hk=a("checked"),$k=a("."),Nk=c(),Se=t("li"),Vk=a("To syncrhonise the property of the element to the variable"),Sn=t("ul"),Es=t("li"),Rk=a("Svelte creates an input handler that reads the "),Ie=t("code"),Uk=a("this.checked"),Wk=a(" property of the input and calls "),Le=t("code"),Gk=a("$$invalidate(...)"),Yk=a(" to update it."),qk=c(),R=t("li"),Jk=a("Svelte sets up "),Ae=t("code"),Fk=a("listen(...)"),zk=a(" in the "),Co=t("strong"),Bk=a("_m_ount"),Zk=a(" method and "),je=t("code"),Kk=a("dispose(...)"),Qk=a(" in the "),Do=t("strong"),Xk=a("_d_estroy"),sd=a(" method for the input handler"),il=c(),C=t("section"),Oo=t("h3"),Vs=t("a"),Me=t("code"),nd=a("use:"),ad=a(" directive"),ed=c(),He=t("div"),td=c(),To=t("p"),In=t("a"),od=a("Svelte REPL"),ld=c(),Po=t("p"),id=a("The output code:"),pd=c(),$e=t("div"),cd=c(),So=t("p"),rd=a("Some observations:"),kd=c(),_s=t("ul"),K=t("li"),dd=a("Creating "),Ne=t("code"),vd=a("action_action"),hd=a(" object by calling the "),Ve=t("code"),ud=a("action"),yd=a(" function in the "),Io=t("strong"),fd=a("_m_out"),md=a(" method"),gd=c(),ws=t("li"),xd=a("When the paramter change, call the "),Re=t("code"),Ed=a("action_action.update"),_d=a(" method with the updated parameter in the "),Lo=t("strong"),wd=a("u_p_date"),bd=a(" method"),Cd=c(),Y=t("li"),Ue=t("code"),Dd=a("action_destroyer"),Od=a(" returns the "),We=t("code"),Td=a("dispose"),Pd=a(" function. The "),Ge=t("code"),Sd=a("dispose"),Id=a(" function makes sure that "),Ye=t("code"),Ld=a("action_action.destroy"),Ad=a(" is a function before calling it."),pl=c(),v=t("section"),Ao=t("h3"),Ln=t("a"),jd=a("The order of directives"),Md=c(),bs=t("p"),Hd=a("As both the "),qe=t("code"),$d=a("bind:"),Nd=a(" and the "),Je=t("code"),Vd=a("on:"),Rd=a(" directives add event listeners to the element, the order of adding event listener may have nuance side effects."),Ud=c(),jo=t("p"),Wd=a("Imagine the following scenario:"),Gd=c(),Fe=t("div"),Yd=c(),Q=t("p"),qd=a("The "),ze=t("code"),Jd=a("input.value"),Fd=a(" accessed by the implicit event handler of the "),Be=t("code"),zd=a("bind:"),Bd=a(" directive depends on whether "),Ze=t("code"),Zd=a("on:input"),Kd=a(" handler gets called before or after."),Qd=c(),Cs=t("p"),Xd=a("If the implicit event handler of the "),Ke=t("code"),sv=a("bind:"),nv=a(" directive is called before the event handler, the bound value is the value of the input before applying the "),Qe=t("code"),av=a("toUpperCase()"),ev=a(" transformation."),tv=c(),An=t("p"),ov=a("Although "),Xe=t("code"),lv=a("action:"),iv=a(" directive itself does not add event listener to the element, but it is possible to be added by the user code:"),pv=c(),st=t("div"),cv=c(),Ds=t("p"),rv=a("Although it is not officially documented, "),Mo=t("em"),kv=a("(I couldn't find it on the docs)"),dv=a(", "),X=t("strong"),vv=a("the order of declaring the directives "),nt=t("code"),hv=a("on:"),uv=a(", "),at=t("code"),yv=a("bind:"),fv=a(" and "),et=t("code"),mv=a("use:"),gv=a(" on an element does matter"),xv=a(" to provide a consistent behavior."),Ev=c(),Ho=t("p"),_v=a("Try out the following example in the REPL:"),wv=c(),tt=t("div"),bv=c(),$o=t("p"),jn=t("a"),Cv=a("Svelte REPL"),Dv=c(),ss=t("p"),Ov=a("Try reordering the "),ot=t("code"),Tv=a("bind:"),Pv=a(", "),lt=t("code"),Sv=a("on:"),Iv=a(" and "),it=t("code"),Lv=a("use:"),Av=a(" directives and see how it affects the output JS:"),jv=c(),pt=t("div"),Mv=c(),Mn=t("p"),Hv=a("If you are interested to learn more about ordering directives, the edge cases it fixed and the regression bugs it caused, you can start with "),Hn=t("a"),$v=a("this Github issue"),Nv=a("."),cl=c(),D=t("section"),No=t("h2"),$n=t("a"),Vv=a("Closing Note"),Rv=c(),ns=t("p"),Uv=a("In this article, we explored how "),ct=t("code"),Wv=a("on:"),Gv=a(", "),rt=t("code"),Yv=a("bind:"),qv=a(" and "),kt=t("code"),Jv=a("use:"),Fv=a(" directives work."),zv=c(),Vo=t("p"),Bv=a("We first looked at how we can implement them without using any framework. After that, we walked through how Svelte compiles the directives into JavaScript."),Zv=c(),Ro=t("p"),Kv=a("We've also talked about how the order of declaring directives on an element matters."),Qv=c(),Nn=t("p"),Xv=a("If you wish to know more, "),Vn=t("a"),sh=a("follow me on Twitter"),nh=a("."),ah=c(),as=t("p"),eh=a("I'll post it on Twitter when the next part is ready, where I'll be covering "),Rn=t("a"),th=a("logic blocks"),oh=a(", "),Un=t("a"),lh=a("slots"),ih=a(", "),Wn=t("a"),ph=a("context"),ch=a(", and many others."),rh=c(),Uo=t("p"),Gn=t("strong"),kh=a("\u2B05 \u2B05  Previously in "),dt=t("a"),dh=a("Part 2"),vh=a("."),this.h()},l(p){cm(f.$$.fragment,p),J=r(p),U=o(p,"P",{});var k=l(U);F=o(k,"STRONG",{});var kl=l(F);_=e(kl,"\u2B05 \u2B05  Previously in "),S=o(kl,"A",{href:!0});var Lh=l(S);zn=e(Lh,"Part 2"),Lh.forEach(n),Al=e(kl,"."),kl.forEach(n),k.forEach(n),Go=r(p),z=o(p,"P",{});var Yn=l(z);Bn=o(Yn,"A",{href:!0});var Ah=l(Bn);jl=e(Ah,"Previously"),Ah.forEach(n),Ml=e(Yn,", I detailed how "),Zn=o(Yn,"CODE",{class:!0});var jh=l(Zn);Hl=e(jh,"$$invalidate"),jh.forEach(n),$l=e(Yn," works, described how bitmask was used in "),Kn=o(Yn,"CODE",{class:!0});var Mh=l(Kn);Nl=e(Mh,"$$invalidate"),Mh.forEach(n),Vl=e(Yn,", and explained how reactive declarations work as well."),Yn.forEach(n),Yo=r(p),Qn=o(p,"P",{});var Hh=l(Qn);Rl=e(Hh,"In this article, we are going to look into 3 DOM related directives:"),Hh.forEach(n),qo=r(p),es=o(p,"UL",{});var vt=l(es);Xn=o(vt,"LI",{});var hh=l(Xn);sa=o(hh,"CODE",{class:!0});var $h=l(sa);Ul=e($h,"on:"),$h.forEach(n),Wl=e(hh," for event handlers"),hh.forEach(n),Gl=r(vt),na=o(vt,"LI",{});var uh=l(na);aa=o(uh,"CODE",{class:!0});var Nh=l(aa);Yl=e(Nh,"bind:"),Nh.forEach(n),ql=e(uh," for bindings"),uh.forEach(n),Jl=r(vt),ea=o(vt,"LI",{});var yh=l(ea);ta=o(yh,"CODE",{class:!0});var Vh=l(ta);Fl=e(Vh,"use:"),Vh.forEach(n),zl=e(yh," for actions"),yh.forEach(n),vt.forEach(n),Jo=r(p),oa=o(p,"P",{});var Rh=l(oa);Bl=e(Rh,"To make sure we are on the same page, let's first explain how these 3 directives work."),Rh.forEach(n),Fo=r(p),la=o(p,"SECTION",{});var Uh=l(la);St=o(Uh,"H2",{});var Wh=l(St);W=o(Wh,"A",{href:!0,id:!0});var qn=l(W);Zl=e(qn,"The "),ia=o(qn,"CODE",{class:!0});var Gh=l(ia);Kl=e(Gh,"on:"),Gh.forEach(n),Ql=e(qn,", "),pa=o(qn,"CODE",{class:!0});var Yh=l(pa);Xl=e(Yh,"bind:"),Yh.forEach(n),si=e(qn," and "),ca=o(qn,"CODE",{class:!0});var qh=l(ca);ni=e(qh,"use:"),qh.forEach(n),qn.forEach(n),Wh.forEach(n),Uh.forEach(n),zo=r(p),ts=o(p,"SECTION",{});var ht=l(ts);It=o(ht,"H3",{});var Jh=l(It);Ts=o(Jh,"A",{href:!0,id:!0});var fh=l(Ts);ra=o(fh,"CODE",{class:!0});var Fh=l(ra);ai=e(Fh,"on:"),Fh.forEach(n),ei=e(fh," event handlers"),fh.forEach(n),Jh.forEach(n),ti=r(ht),Bs=o(ht,"P",{});var dl=l(Bs);oi=e(dl,"You can use the "),ka=o(dl,"CODE",{class:!0});var zh=l(ka);li=e(zh,"on:"),zh.forEach(n),ii=e(dl," directive to listen to any event on an element:"),dl.forEach(n),pi=r(ht),da=o(ht,"DIV",{class:!0});var Vm=l(da);Vm.forEach(n),ht.forEach(n),Bo=r(p),G=o(p,"SECTION",{});var Rs=l(G);Lt=o(Rs,"H3",{});var Bh=l(Lt);Ps=o(Bh,"A",{href:!0,id:!0});var mh=l(Ps);va=o(mh,"CODE",{class:!0});var Zh=l(va);ci=e(Zh,"bind:"),Zh.forEach(n),ri=e(mh," bindings"),mh.forEach(n),Bh.forEach(n),ki=r(Rs),Zs=o(Rs,"P",{});var vl=l(Zs);di=e(vl,"The "),ha=o(vl,"CODE",{class:!0});var Kh=l(ha);vi=e(Kh,"bind:"),Kh.forEach(n),hi=e(vl," directive allows you to bind a variable to a property of an element."),vl.forEach(n),ui=r(Rs),At=o(Rs,"P",{});var Qh=l(At);yi=e(Qh,"Updating the variable will modifying the property of the element, conversely, modifying the property of the element via interacting with the element will, in turn, update the variable."),Qh.forEach(n),fi=r(Rs),ua=o(Rs,"DIV",{class:!0});var Rm=l(ua);Rm.forEach(n),Rs.forEach(n),Zo=r(p),y=o(p,"SECTION",{});var E=l(y);jt=o(E,"H3",{});var Xh=l(jt);Ss=o(Xh,"A",{href:!0,id:!0});var gh=l(Ss);ya=o(gh,"CODE",{class:!0});var su=l(ya);mi=e(su,"use:"),su.forEach(n),gi=e(gh," actions"),gh.forEach(n),Xh.forEach(n),xi=r(E),vs=o(E,"P",{});var ut=l(vs);Ei=e(ut,"The "),fa=o(ut,"CODE",{class:!0});var nu=l(fa);_i=e(nu,"use:"),nu.forEach(n),wi=e(ut," directive is called "),Mt=o(ut,"STRONG",{});var au=l(Mt);Ks=o(au,"A",{href:!0,rel:!0});var eu=l(Ks);bi=e(eu,'"Action"'),eu.forEach(n),au.forEach(n),Ci=e(ut,". It provides you an interface to enhance your element."),ut.forEach(n),Di=r(E),Qs=o(E,"P",{});var hl=l(Qs);Oi=e(hl,"You pass a function to the "),ma=o(hl,"CODE",{class:!0});var tu=l(ma);Ti=e(tu,"use:"),tu.forEach(n),Pi=e(hl," directive of an element and the function will be called when your element is mounted."),hl.forEach(n),Si=r(E),Xs=o(E,"P",{});var ul=l(Xs);Ii=e(ul,"The function should return an object in which the "),ga=o(ul,"CODE",{class:!0});var ou=l(ga);Li=e(ou,"destroy"),ou.forEach(n),Ai=e(ul," method of the object will be called when the element is unmounted."),ul.forEach(n),ji=r(E),xa=o(E,"DIV",{class:!0});var Um=l(xa);Um.forEach(n),Mi=r(E),Ht=o(E,"P",{});var lu=l(Ht);Hi=e(lu,"This is useful when you want to interface with 3rd-party libraries:"),lu.forEach(n),$i=r(E),Ea=o(E,"DIV",{class:!0});var Wm=l(Ea);Wm.forEach(n),Ni=r(E),sn=o(E,"P",{});var yl=l(sn);Vi=e(yl,"You can pass in parameters to the "),_a=o(yl,"CODE",{class:!0});var iu=l(_a);Ri=e(iu,"use:"),iu.forEach(n),Ui=e(yl," directive, to bring in reactivity into your actions"),yl.forEach(n),Wi=r(E),wa=o(E,"DIV",{class:!0});var Gm=l(wa);Gm.forEach(n),Gi=r(E),$t=o(E,"P",{});var pu=l($t);Yi=e(pu,"You can visit Svelte's interactive tutorial to learn more about:"),pu.forEach(n),qi=r(E),hs=o(E,"UL",{});var yt=l(hs);Nt=o(yt,"LI",{});var cu=l(Nt);Is=o(cu,"A",{href:!0,rel:!0});var xh=l(Is);Ji=e(xh,"event handlers with "),ba=o(xh,"CODE",{class:!0});var ru=l(ba);Fi=e(ru,"on:"),ru.forEach(n),xh.forEach(n),cu.forEach(n),zi=r(yt),Vt=o(yt,"LI",{});var ku=l(Vt);Ls=o(ku,"A",{href:!0,rel:!0});var Eh=l(Ls);Bi=e(Eh,"bindings with "),Ca=o(Eh,"CODE",{class:!0});var du=l(Ca);Zi=e(du,"bind:"),du.forEach(n),Eh.forEach(n),ku.forEach(n),Ki=r(yt),Rt=o(yt,"LI",{});var vu=l(Rt);As=o(vu,"A",{href:!0,rel:!0});var _h=l(As);Qi=e(_h,"actions with "),Da=o(_h,"CODE",{class:!0});var hu=l(Da);Xi=e(hu,"use:"),hu.forEach(n),_h.forEach(n),vu.forEach(n),yt.forEach(n),E.forEach(n),Ko=r(p),js=o(p,"SECTION",{});var fl=l(js);Ut=o(fl,"H2",{});var uu=l(Ut);nn=o(uu,"A",{href:!0,id:!0});var yu=l(nn);sp=e(yu,"The Vanilla JS"),yu.forEach(n),uu.forEach(n),np=r(fl),Wt=o(fl,"P",{});var fu=l(Wt);ap=e(fu,"Now, let's refresh ourselves with how we can implement an event handler, bindings, and actions without using any framework."),fu.forEach(n),fl.forEach(n),Qo=r(p),I=o(p,"SECTION",{});var is=l(I);Gt=o(is,"H3",{});var mu=l(Gt);an=o(mu,"A",{href:!0,id:!0});var gu=l(an);ep=e(gu,"Event handler"),gu.forEach(n),mu.forEach(n),tp=r(is),us=o(is,"P",{});var ft=l(us);op=e(ft,"As "),Oa=o(ft,"A",{href:!0});var xu=l(Oa);lp=e(xu,"mentioned in the Part 1 of the series"),xu.forEach(n),ip=e(ft,", we can use "),en=o(ft,"A",{href:!0,rel:!0});var Eu=l(en);pp=e(Eu,"element.addEventListener"),Eu.forEach(n),cp=e(ft," to listen to events."),ft.forEach(n),rp=r(is),Ta=o(is,"DIV",{class:!0});var Ym=l(Ta);Ym.forEach(n),kp=r(is),Yt=o(is,"P",{});var _u=l(Yt);dp=e(_u,"The event listener takes in an optional 3rd argument, which allows you to specifies the characteristics of the event handler:"),_u.forEach(n),vp=r(is),Pa=o(is,"DIV",{class:!0});var qm=l(Pa);qm.forEach(n),is.forEach(n),Xo=r(p),os=o(p,"SECTION",{});var mt=l(os);qt=o(mt,"H4",{});var wu=l(qt);tn=o(wu,"A",{href:!0,id:!0});var bu=l(tn);hp=e(bu,"event.preventDefault"),bu.forEach(n),wu.forEach(n),up=r(mt),ls=o(mt,"P",{});var Jn=l(ls);on=o(Jn,"A",{href:!0,rel:!0});var Cu=l(on);yp=e(Cu,"event.preventDefault"),Cu.forEach(n),fp=e(Jn," allows you to prevent the default behavior of the event, for example submitting form for "),Sa=o(Jn,"CODE",{class:!0});var Du=l(Sa);mp=e(Du,'<button type="submit" />'),Du.forEach(n),gp=e(Jn," or navigating to the target for "),Ia=o(Jn,"CODE",{class:!0});var Ou=l(Ia);xp=e(Ou,'<a href="...">'),Ou.forEach(n),Ep=e(Jn,"."),Jn.forEach(n),_p=r(mt),La=o(mt,"DIV",{class:!0});var Jm=l(La);Jm.forEach(n),mt.forEach(n),sl=r(p),L=o(p,"SECTION",{});var ps=l(L);Jt=o(ps,"H4",{});var Tu=l(Jt);ln=o(Tu,"A",{href:!0,id:!0});var Pu=l(ln);wp=e(Pu,"event.stopPropagation"),Pu.forEach(n),Tu.forEach(n),bp=r(ps),Aa=o(ps,"P",{});var wh=l(Aa);pn=o(wh,"A",{href:!0,rel:!0});var Su=l(pn);Cp=e(Su,"event.stopPropagation"),Su.forEach(n),Dp=e(wh," allows you to prevent event to continue propagate."),wh.forEach(n),Op=r(ps),ja=o(ps,"DIV",{class:!0});var Fm=l(ja);Fm.forEach(n),Tp=r(ps),T=o(ps,"P",{});var j=l(T);Pp=e(j,"To remove the event listener, you need to call "),Ma=o(j,"CODE",{class:!0});var Iu=l(Ma);Sp=e(Iu,"element.removeEventListener"),Iu.forEach(n),Ip=e(j," with the same event "),Ha=o(j,"CODE",{class:!0});var Lu=l(Ha);Lp=e(Lu,"type"),Lu.forEach(n),Ap=e(j,", "),$a=o(j,"CODE",{class:!0});var Au=l($a);jp=e(Au,"listener"),Au.forEach(n),Mp=e(j," and "),Na=o(j,"CODE",{class:!0});var ju=l(Na);Hp=e(ju,"capture"),ju.forEach(n),$p=e(j,"/"),Va=o(j,"CODE",{class:!0});var Mu=l(Va);Np=e(Mu,"useCapture"),Mu.forEach(n),Vp=e(j," flag. You can check out the "),cn=o(j,"A",{href:!0,rel:!0});var Hu=l(cn);Rp=e(Hu,'MDN docs on "Matching event listeners for removal"'),Hu.forEach(n),Up=e(j,"."),j.forEach(n),Wp=r(ps),Ra=o(ps,"DIV",{class:!0});var zm=l(Ra);zm.forEach(n),ps.forEach(n),nl=r(p),u=o(p,"SECTION",{});var g=l(u);Ft=o(g,"H3",{});var $u=l(Ft);rn=o($u,"A",{href:!0,id:!0});var Nu=l(rn);Gp=e(Nu,"Bindings"),Nu.forEach(n),$u.forEach(n),Yp=r(g),zt=o(g,"P",{});var Vu=l(zt);qp=e(Vu,"Binding is to synchronise between the value of a variable and a property of an element."),Vu.forEach(n),Jp=r(g),Bt=o(g,"P",{});var Ru=l(Bt);Fp=e(Ru,"To synchronise the variable to a property of an element, we need to observe the value of the variable. When it changes, apply it to the property of the element."),Ru.forEach(n),zp=r(g),Zt=o(g,"P",{});var Uu=l(Zt);kn=o(Uu,"EM",{});var ml=l(kn);Bp=e(ml,"You can check out my previous article "),Ua=o(ml,"A",{href:!0});var Wu=l(Ua);Zp=e(Wu,'"Reactivity in Web Frameworks"'),Wu.forEach(n),Kp=e(ml," on how we get notified when the value of a variable changed."),ml.forEach(n),Uu.forEach(n),Qp=r(g),dn=o(g,"P",{});var gl=l(dn);Xp=e(gl,"On the other hand, to synchronise the property of an element to a variable, we "),Kt=o(gl,"STRONG",{});var Gu=l(Kt);sc=e(Gu,"listen to an event of the element"),Gu.forEach(n),nc=e(gl,", depending on the property, and update the value of the variable when it happens."),gl.forEach(n),ac=r(g),Wa=o(g,"DIV",{class:!0});var Bm=l(Wa);Bm.forEach(n),ec=r(g),Qt=o(g,"P",{});var Yu=l(Qt);tc=e(Yu,"Some observations:"),Yu.forEach(n),oc=r(g),Xt=o(g,"P",{});var qu=l(Xt);so=o(qu,"STRONG",{});var Ju=l(so);lc=e(Ju,"- The name of the event and the property name of the element may not be the same."),Ju.forEach(n),qu.forEach(n),ic=r(g),ys=o(g,"P",{});var gt=l(ys);pc=e(gt,"In this example, we listen to "),Ga=o(gt,"CODE",{class:!0});var Fu=l(Ga);cc=e(Fu,'"change"'),Fu.forEach(n),rc=e(gt," event for the checkbox "),Ya=o(gt,"CODE",{class:!0});var zu=l(Ya);kc=e(zu,"checked"),zu.forEach(n),dc=e(gt," property."),gt.forEach(n),vc=r(g),no=o(g,"P",{});var Bu=l(no);ao=o(Bu,"STRONG",{});var Zu=l(ao);hc=e(Zu,"- It is almost impossible to bind a property of an element, if there's no event fired from the element to indicate the property has changed"),Zu.forEach(n),Bu.forEach(n),uc=r(g),N=o(g,"P",{});var cs=l(N);yc=e(cs,"A recent example I found out is the "),vn=o(cs,"A",{href:!0,rel:!0});var Ku=l(vn);fc=e(Ku,"HTMLDialogElement"),Ku.forEach(n),mc=e(cs,". It has "),hn=o(cs,"A",{href:!0,rel:!0});var Qu=l(hn);qa=o(Qu,"CODE",{class:!0});var Xu=l(qa);gc=e(Xu,'"close"'),Xu.forEach(n),Qu.forEach(n),xc=e(cs," but not "),Ja=o(cs,"CODE",{class:!0});var sy=l(Ja);Ec=e(sy,'"open"'),sy.forEach(n),_c=e(cs," event, which makes it hard to implement "),Fa=o(cs,"CODE",{class:!0});var ny=l(Fa);wc=e(ny,"bind:open"),ny.forEach(n),bc=e(cs," on the dialog element."),cs.forEach(n),Cc=r(g),un=o(g,"P",{});var xl=l(un);Dc=e(xl,"Maybe an alternative would be using "),yn=o(xl,"A",{href:!0,rel:!0});var ay=l(yn);Oc=e(ay,"MutationObserver"),ay.forEach(n),Tc=e(xl,", which I haven't seen any usage of it in Svelte codebase yet."),xl.forEach(n),g.forEach(n),al=r(p),A=o(p,"SECTION",{});var rs=l(A);eo=o(rs,"H3",{});var ey=l(eo);fn=o(ey,"A",{href:!0,id:!0});var ty=l(fn);Pc=e(ty,"Actions"),ty.forEach(n),ey.forEach(n),Sc=r(rs),to=o(rs,"P",{});var oy=l(to);Ic=e(oy,"Action is a function that gets called when your element is created and mounted onto the DOM."),oy.forEach(n),Lc=r(rs),oo=o(rs,"P",{});var ly=l(oo);Ac=e(ly,"The function returns an object, with 2 methods:"),ly.forEach(n),jc=r(rs),mn=o(rs,"UL",{});var El=l(mn);za=o(El,"LI",{});var bh=l(za);Ba=o(bh,"CODE",{class:!0});var iy=l(Ba);Mc=e(iy,"update"),iy.forEach(n),Hc=e(bh,", which gets called when the parameters change"),bh.forEach(n),$c=r(El),Za=o(El,"LI",{});var Ch=l(Za);Ka=o(Ch,"CODE",{class:!0});var py=l(Ka);Nc=e(py,"destroy"),py.forEach(n),Vc=e(Ch,", which gets called when the element is removed from the DOM"),Ch.forEach(n),El.forEach(n),Rc=r(rs),Qa=o(rs,"DIV",{class:!0});var Zm=l(Qa);Zm.forEach(n),rs.forEach(n),el=r(p),Ms=o(p,"SECTION",{});var _l=l(Ms);lo=o(_l,"H2",{});var cy=l(lo);gn=o(cy,"A",{href:!0,id:!0});var ry=l(gn);Uc=e(ry,"The Compiled JS"),ry.forEach(n),cy.forEach(n),Wc=r(_l),B=o(_l,"P",{});var Us=l(B);Gc=e(Us,"Now let's take look at how Svelte compiles "),Xa=o(Us,"CODE",{class:!0});var ky=l(Xa);Yc=e(ky,"on:"),ky.forEach(n),qc=e(Us,", "),se=o(Us,"CODE",{class:!0});var dy=l(se);Jc=e(dy,"bind:"),dy.forEach(n),Fc=e(Us," and "),ne=o(Us,"CODE",{class:!0});var vy=l(ne);zc=e(vy,"use:"),vy.forEach(n),Bc=e(Us," directives into output JavaScript."),Us.forEach(n),_l.forEach(n),tl=r(p),x=o(p,"SECTION",{});var O=l(x);io=o(O,"H3",{});var hy=l(io);Hs=o(hy,"A",{href:!0,id:!0});var Dh=l(Hs);ae=o(Dh,"CODE",{class:!0});var uy=l(ae);Zc=e(uy,"on:"),uy.forEach(n),Kc=e(Dh," directive"),Dh.forEach(n),hy.forEach(n),Qc=r(O),ee=o(O,"DIV",{class:!0});var Km=l(ee);Km.forEach(n),Xc=r(O),po=o(O,"P",{});var yy=l(po);xn=o(yy,"A",{href:!0,rel:!0});var fy=l(xn);sr=e(fy,"Svelte REPL"),fy.forEach(n),yy.forEach(n),nr=r(O),co=o(O,"P",{});var my=l(co);ar=e(my,"The output code:"),my.forEach(n),er=r(O),te=o(O,"DIV",{class:!0});var Qm=l(te);Qm.forEach(n),tr=r(O),ro=o(O,"P",{});var gy=l(ro);or=e(gy,"Some observations:"),gy.forEach(n),lr=r(O),En=o(O,"UL",{});var wl=l(En);fs=o(wl,"LI",{});var xt=l(fs);ir=e(xt,"Svelte adds event handler, "),oe=o(xt,"CODE",{class:!0});var xy=l(oe);pr=e(xy,"listen(...)"),xy.forEach(n),cr=e(xt,", in the "),ko=o(xt,"STRONG",{});var Ey=l(ko);rr=e(Ey,"_m_ount"),Ey.forEach(n),kr=e(xt," method."),xt.forEach(n),dr=r(wl),ms=o(wl,"LI",{});var Et=l(ms);vr=e(Et,"Svelte removes event handler, "),le=o(Et,"CODE",{class:!0});var _y=l(le);hr=e(_y,"dispose()"),_y.forEach(n),ur=e(Et,", in the "),vo=o(Et,"STRONG",{});var wy=l(vo);yr=e(wy,"_d_estroy"),wy.forEach(n),fr=e(Et," method."),Et.forEach(n),wl.forEach(n),mr=r(O),gs=o(O,"P",{});var _t=l(gs);gr=e(_t,"As pointed out in "),ie=o(_t,"A",{href:!0});var by=l(ie);xr=e(by,"Part 1 #listen and dispose"),by.forEach(n),Er=e(_t,", to optimise for minification, the "),pe=o(_t,"CODE",{class:!0});var Cy=l(pe);_r=e(Cy,"dispose"),Cy.forEach(n),wr=e(_t," variable could be a function or an array of functions, depending on having one or many event handlers."),_t.forEach(n),br=r(O),_n=o(O,"P",{});var bl=l(_n);Cr=e(bl,"We will discuss "),ce=o(bl,"CODE",{class:!0});var Dy=l(ce);Dr=e(Dy,"remount"),Dy.forEach(n),Or=e(bl," in the future, as it is related to remounting elements while reordering items within each block."),bl.forEach(n),O.forEach(n),ol=r(p),m=o(p,"SECTION",{});var w=l(m);ho=o(w,"H4",{});var Oy=l(ho);wn=o(Oy,"A",{href:!0,id:!0});var Ty=l(wn);Tr=e(Ty,"Event modifiers"),Ty.forEach(n),Oy.forEach(n),Pr=r(w),uo=o(w,"P",{});var Py=l(uo);Sr=e(Py,"Event handlers can have modifiers that alter their behavior."),Py.forEach(n),Ir=r(w),re=o(w,"DIV",{class:!0});var Xm=l(re);Xm.forEach(n),Lr=r(w),yo=o(w,"P",{});var Sy=l(yo);bn=o(Sy,"A",{href:!0,rel:!0});var Iy=l(bn);Ar=e(Iy,"Svelte REPL"),Iy.forEach(n),Sy.forEach(n),jr=r(w),fo=o(w,"P",{});var Ly=l(fo);Mr=e(Ly,"The output code:"),Ly.forEach(n),Hr=r(w),ke=o(w,"DIV",{class:!0});var sg=l(ke);sg.forEach(n),$r=r(w),mo=o(w,"P",{});var Ay=l(mo);Nr=e(Ay,"Some observations:"),Ay.forEach(n),Vr=r(w),xs=o(w,"UL",{});var wt=l(xs);go=o(wt,"LI",{});var jy=l(go);Rr=e(jy,"Svelte handles different modifiers differently."),jy.forEach(n),Ur=r(wt),P=o(wt,"LI",{});var q=l(P);Wr=e(q,"For "),de=o(q,"CODE",{class:!0});var My=l(de);Gr=e(My,"capture"),My.forEach(n),Yr=e(q,", "),ve=o(q,"CODE",{class:!0});var Hy=l(ve);qr=e(Hy,"once"),Hy.forEach(n),Jr=e(q,", and "),he=o(q,"CODE",{class:!0});var $y=l(he);Fr=e($y,"passive"),$y.forEach(n),zr=e(q," modifiers, which they are part of the options for "),Cn=o(q,"A",{href:!0,rel:!0});var Ny=l(Cn);Br=e(Ny,"element.addEventListener"),Ny.forEach(n),Zr=e(q,", they will be passed as options into the "),ue=o(q,"CODE",{class:!0});var Vy=l(ue);Kr=e(Vy,"listen"),Vy.forEach(n),Qr=e(q," function."),q.forEach(n),Xr=r(wt),Z=o(wt,"LI",{});var Ws=l(Z);sk=e(Ws,"For "),ye=o(Ws,"CODE",{class:!0});var Ry=l(ye);nk=e(Ry,"stopPropagation"),Ry.forEach(n),ak=e(Ws,", "),fe=o(Ws,"CODE",{class:!0});var Uy=l(fe);ek=e(Uy,"preventDefault"),Uy.forEach(n),tk=e(Ws,", and "),me=o(Ws,"CODE",{class:!0});var Wy=l(me);ok=e(Wy,"self"),Wy.forEach(n),lk=e(Ws," modifiers, the event handler is decorated with respective decorator functions."),Ws.forEach(n),wt.forEach(n),ik=r(w),Dn=o(w,"P",{});var Cl=l(Dn);pk=e(Cl,"An example implementation of the "),ge=o(Cl,"CODE",{class:!0});var Gy=l(ge);ck=e(Gy,"prevent_default"),Gy.forEach(n),rk=e(Cl," decorator function:"),Cl.forEach(n),kk=r(w),xe=o(w,"DIV",{class:!0});var ng=l(xe);ng.forEach(n),w.forEach(n),ll=r(p),b=o(p,"SECTION",{});var M=l(b);xo=o(M,"H3",{});var Yy=l(xo);$s=o(Yy,"A",{href:!0,id:!0});var Oh=l($s);Ee=o(Oh,"CODE",{class:!0});var qy=l(Ee);dk=e(qy,"bind:"),qy.forEach(n),vk=e(Oh," directive"),Oh.forEach(n),Yy.forEach(n),hk=r(M),_e=o(M,"DIV",{class:!0});var ag=l(_e);ag.forEach(n),uk=r(M),Eo=o(M,"P",{});var Jy=l(Eo);On=o(Jy,"A",{href:!0,rel:!0});var Fy=l(On);yk=e(Fy,"Svelte REPL"),Fy.forEach(n),Jy.forEach(n),fk=r(M),_o=o(M,"P",{});var zy=l(_o);mk=e(zy,"The output code:"),zy.forEach(n),gk=r(M),we=o(M,"DIV",{class:!0});var eg=l(we);eg.forEach(n),xk=r(M),wo=o(M,"P",{});var By=l(wo);Ek=e(By,"Some observations:"),By.forEach(n),_k=r(M),Tn=o(M,"UL",{});var Dl=l(Tn);be=o(Dl,"LI",{});var Th=l(be);wk=e(Th,"To synchronise the value of the variable to the property of the element:"),Pn=o(Th,"UL",{});var Ol=l(Pn);Ns=o(Ol,"LI",{});var Wo=l(Ns);bk=e(Wo,"Svelte wraps the update of the variable "),Ce=o(Wo,"CODE",{class:!0});var Zy=l(Ce);Ck=e(Zy,"checked"),Zy.forEach(n),Dk=e(Wo," with "),De=o(Wo,"CODE",{class:!0});var Ky=l(De);Ok=e(Ky,"$$invalidate(...)"),Ky.forEach(n),Wo.forEach(n),Tk=r(Ol),V=o(Ol,"LI",{});var ks=l(V);Pk=e(ks,"In the "),bo=o(ks,"STRONG",{});var Qy=l(bo);Sk=e(Qy,"u_p_date"),Qy.forEach(n),Ik=e(ks," method, if the variable "),Oe=o(ks,"CODE",{class:!0});var Xy=l(Oe);Lk=e(Xy,"checked"),Xy.forEach(n),Ak=e(ks," is updated, Svelte sets "),Te=o(ks,"CODE",{class:!0});var sf=l(Te);jk=e(sf,"input.checked"),sf.forEach(n),Mk=e(ks," to the value of the variable "),Pe=o(ks,"CODE",{class:!0});var nf=l(Pe);Hk=e(nf,"checked"),nf.forEach(n),$k=e(ks,"."),ks.forEach(n),Ol.forEach(n),Th.forEach(n),Nk=r(Dl),Se=o(Dl,"LI",{});var Ph=l(Se);Vk=e(Ph,"To syncrhonise the property of the element to the variable"),Sn=o(Ph,"UL",{});var Tl=l(Sn);Es=o(Tl,"LI",{});var bt=l(Es);Rk=e(bt,"Svelte creates an input handler that reads the "),Ie=o(bt,"CODE",{class:!0});var af=l(Ie);Uk=e(af,"this.checked"),af.forEach(n),Wk=e(bt," property of the input and calls "),Le=o(bt,"CODE",{class:!0});var ef=l(Le);Gk=e(ef,"$$invalidate(...)"),ef.forEach(n),Yk=e(bt," to update it."),bt.forEach(n),qk=r(Tl),R=o(Tl,"LI",{});var ds=l(R);Jk=e(ds,"Svelte sets up "),Ae=o(ds,"CODE",{class:!0});var tf=l(Ae);Fk=e(tf,"listen(...)"),tf.forEach(n),zk=e(ds," in the "),Co=o(ds,"STRONG",{});var of=l(Co);Bk=e(of,"_m_ount"),of.forEach(n),Zk=e(ds," method and "),je=o(ds,"CODE",{class:!0});var lf=l(je);Kk=e(lf,"dispose(...)"),lf.forEach(n),Qk=e(ds," in the "),Do=o(ds,"STRONG",{});var pf=l(Do);Xk=e(pf,"_d_estroy"),pf.forEach(n),sd=e(ds," method for the input handler"),ds.forEach(n),Tl.forEach(n),Ph.forEach(n),Dl.forEach(n),M.forEach(n),il=r(p),C=o(p,"SECTION",{});var H=l(C);Oo=o(H,"H3",{});var cf=l(Oo);Vs=o(cf,"A",{href:!0,id:!0});var Sh=l(Vs);Me=o(Sh,"CODE",{class:!0});var rf=l(Me);nd=e(rf,"use:"),rf.forEach(n),ad=e(Sh," directive"),Sh.forEach(n),cf.forEach(n),ed=r(H),He=o(H,"DIV",{class:!0});var tg=l(He);tg.forEach(n),td=r(H),To=o(H,"P",{});var kf=l(To);In=o(kf,"A",{href:!0,rel:!0});var df=l(In);od=e(df,"Svelte REPL"),df.forEach(n),kf.forEach(n),ld=r(H),Po=o(H,"P",{});var vf=l(Po);id=e(vf,"The output code:"),vf.forEach(n),pd=r(H),$e=o(H,"DIV",{class:!0});var og=l($e);og.forEach(n),cd=r(H),So=o(H,"P",{});var hf=l(So);rd=e(hf,"Some observations:"),hf.forEach(n),kd=r(H),_s=o(H,"UL",{});var Ct=l(_s);K=o(Ct,"LI",{});var Gs=l(K);dd=e(Gs,"Creating "),Ne=o(Gs,"CODE",{class:!0});var uf=l(Ne);vd=e(uf,"action_action"),uf.forEach(n),hd=e(Gs," object by calling the "),Ve=o(Gs,"CODE",{class:!0});var yf=l(Ve);ud=e(yf,"action"),yf.forEach(n),yd=e(Gs," function in the "),Io=o(Gs,"STRONG",{});var ff=l(Io);fd=e(ff,"_m_out"),ff.forEach(n),md=e(Gs," method"),Gs.forEach(n),gd=r(Ct),ws=o(Ct,"LI",{});var Dt=l(ws);xd=e(Dt,"When the paramter change, call the "),Re=o(Dt,"CODE",{class:!0});var mf=l(Re);Ed=e(mf,"action_action.update"),mf.forEach(n),_d=e(Dt," method with the updated parameter in the "),Lo=o(Dt,"STRONG",{});var gf=l(Lo);wd=e(gf,"u_p_date"),gf.forEach(n),bd=e(Dt," method"),Dt.forEach(n),Cd=r(Ct),Y=o(Ct,"LI",{});var Os=l(Y);Ue=o(Os,"CODE",{class:!0});var xf=l(Ue);Dd=e(xf,"action_destroyer"),xf.forEach(n),Od=e(Os," returns the "),We=o(Os,"CODE",{class:!0});var Ef=l(We);Td=e(Ef,"dispose"),Ef.forEach(n),Pd=e(Os," function. The "),Ge=o(Os,"CODE",{class:!0});var _f=l(Ge);Sd=e(_f,"dispose"),_f.forEach(n),Id=e(Os," function makes sure that "),Ye=o(Os,"CODE",{class:!0});var wf=l(Ye);Ld=e(wf,"action_action.destroy"),wf.forEach(n),Ad=e(Os," is a function before calling it."),Os.forEach(n),Ct.forEach(n),H.forEach(n),pl=r(p),v=o(p,"SECTION",{});var h=l(v);Ao=o(h,"H3",{});var bf=l(Ao);Ln=o(bf,"A",{href:!0,id:!0});var Cf=l(Ln);jd=e(Cf,"The order of directives"),Cf.forEach(n),bf.forEach(n),Md=r(h),bs=o(h,"P",{});var Ot=l(bs);Hd=e(Ot,"As both the "),qe=o(Ot,"CODE",{class:!0});var Df=l(qe);$d=e(Df,"bind:"),Df.forEach(n),Nd=e(Ot," and the "),Je=o(Ot,"CODE",{class:!0});var Of=l(Je);Vd=e(Of,"on:"),Of.forEach(n),Rd=e(Ot," directives add event listeners to the element, the order of adding event listener may have nuance side effects."),Ot.forEach(n),Ud=r(h),jo=o(h,"P",{});var Tf=l(jo);Wd=e(Tf,"Imagine the following scenario:"),Tf.forEach(n),Gd=r(h),Fe=o(h,"DIV",{class:!0});var lg=l(Fe);lg.forEach(n),Yd=r(h),Q=o(h,"P",{});var Ys=l(Q);qd=e(Ys,"The "),ze=o(Ys,"CODE",{class:!0});var Pf=l(ze);Jd=e(Pf,"input.value"),Pf.forEach(n),Fd=e(Ys," accessed by the implicit event handler of the "),Be=o(Ys,"CODE",{class:!0});var Sf=l(Be);zd=e(Sf,"bind:"),Sf.forEach(n),Bd=e(Ys," directive depends on whether "),Ze=o(Ys,"CODE",{class:!0});var If=l(Ze);Zd=e(If,"on:input"),If.forEach(n),Kd=e(Ys," handler gets called before or after."),Ys.forEach(n),Qd=r(h),Cs=o(h,"P",{});var Tt=l(Cs);Xd=e(Tt,"If the implicit event handler of the "),Ke=o(Tt,"CODE",{class:!0});var Lf=l(Ke);sv=e(Lf,"bind:"),Lf.forEach(n),nv=e(Tt," directive is called before the event handler, the bound value is the value of the input before applying the "),Qe=o(Tt,"CODE",{class:!0});var Af=l(Qe);av=e(Af,"toUpperCase()"),Af.forEach(n),ev=e(Tt," transformation."),Tt.forEach(n),tv=r(h),An=o(h,"P",{});var Pl=l(An);ov=e(Pl,"Although "),Xe=o(Pl,"CODE",{class:!0});var jf=l(Xe);lv=e(jf,"action:"),jf.forEach(n),iv=e(Pl," directive itself does not add event listener to the element, but it is possible to be added by the user code:"),Pl.forEach(n),pv=r(h),st=o(h,"DIV",{class:!0});var ig=l(st);ig.forEach(n),cv=r(h),Ds=o(h,"P",{});var Pt=l(Ds);rv=e(Pt,"Although it is not officially documented, "),Mo=o(Pt,"EM",{});var Mf=l(Mo);kv=e(Mf,"(I couldn't find it on the docs)"),Mf.forEach(n),dv=e(Pt,", "),X=o(Pt,"STRONG",{});var qs=l(X);vv=e(qs,"the order of declaring the directives "),nt=o(qs,"CODE",{class:!0});var Hf=l(nt);hv=e(Hf,"on:"),Hf.forEach(n),uv=e(qs,", "),at=o(qs,"CODE",{class:!0});var $f=l(at);yv=e($f,"bind:"),$f.forEach(n),fv=e(qs," and "),et=o(qs,"CODE",{class:!0});var Nf=l(et);mv=e(Nf,"use:"),Nf.forEach(n),gv=e(qs," on an element does matter"),qs.forEach(n),xv=e(Pt," to provide a consistent behavior."),Pt.forEach(n),Ev=r(h),Ho=o(h,"P",{});var Vf=l(Ho);_v=e(Vf,"Try out the following example in the REPL:"),Vf.forEach(n),wv=r(h),tt=o(h,"DIV",{class:!0});var pg=l(tt);pg.forEach(n),bv=r(h),$o=o(h,"P",{});var Rf=l($o);jn=o(Rf,"A",{href:!0,rel:!0});var Uf=l(jn);Cv=e(Uf,"Svelte REPL"),Uf.forEach(n),Rf.forEach(n),Dv=r(h),ss=o(h,"P",{});var Js=l(ss);Ov=e(Js,"Try reordering the "),ot=o(Js,"CODE",{class:!0});var Wf=l(ot);Tv=e(Wf,"bind:"),Wf.forEach(n),Pv=e(Js,", "),lt=o(Js,"CODE",{class:!0});var Gf=l(lt);Sv=e(Gf,"on:"),Gf.forEach(n),Iv=e(Js," and "),it=o(Js,"CODE",{class:!0});var Yf=l(it);Lv=e(Yf,"use:"),Yf.forEach(n),Av=e(Js," directives and see how it affects the output JS:"),Js.forEach(n),jv=r(h),pt=o(h,"DIV",{class:!0});var cg=l(pt);cg.forEach(n),Mv=r(h),Mn=o(h,"P",{});var Sl=l(Mn);Hv=e(Sl,"If you are interested to learn more about ordering directives, the edge cases it fixed and the regression bugs it caused, you can start with "),Hn=o(Sl,"A",{href:!0,rel:!0});var qf=l(Hn);$v=e(qf,"this Github issue"),qf.forEach(n),Nv=e(Sl,"."),Sl.forEach(n),h.forEach(n),cl=r(p),D=o(p,"SECTION",{});var $=l(D);No=o($,"H2",{});var Jf=l(No);$n=o(Jf,"A",{href:!0,id:!0});var Ff=l($n);Vv=e(Ff,"Closing Note"),Ff.forEach(n),Jf.forEach(n),Rv=r($),ns=o($,"P",{});var Fs=l(ns);Uv=e(Fs,"In this article, we explored how "),ct=o(Fs,"CODE",{class:!0});var zf=l(ct);Wv=e(zf,"on:"),zf.forEach(n),Gv=e(Fs,", "),rt=o(Fs,"CODE",{class:!0});var Bf=l(rt);Yv=e(Bf,"bind:"),Bf.forEach(n),qv=e(Fs," and "),kt=o(Fs,"CODE",{class:!0});var Zf=l(kt);Jv=e(Zf,"use:"),Zf.forEach(n),Fv=e(Fs," directives work."),Fs.forEach(n),zv=r($),Vo=o($,"P",{});var Kf=l(Vo);Bv=e(Kf,"We first looked at how we can implement them without using any framework. After that, we walked through how Svelte compiles the directives into JavaScript."),Kf.forEach(n),Zv=r($),Ro=o($,"P",{});var Qf=l(Ro);Kv=e(Qf,"We've also talked about how the order of declaring directives on an element matters."),Qf.forEach(n),Qv=r($),Nn=o($,"P",{});var Il=l(Nn);Xv=e(Il,"If you wish to know more, "),Vn=o(Il,"A",{href:!0,rel:!0});var Xf=l(Vn);sh=e(Xf,"follow me on Twitter"),Xf.forEach(n),nh=e(Il,"."),Il.forEach(n),ah=r($),as=o($,"P",{});var zs=l(as);eh=e(zs,"I'll post it on Twitter when the next part is ready, where I'll be covering "),Rn=o(zs,"A",{href:!0,rel:!0});var sm=l(Rn);th=e(sm,"logic blocks"),sm.forEach(n),oh=e(zs,", "),Un=o(zs,"A",{href:!0,rel:!0});var nm=l(Un);lh=e(nm,"slots"),nm.forEach(n),ih=e(zs,", "),Wn=o(zs,"A",{href:!0,rel:!0});var am=l(Wn);ph=e(am,"context"),am.forEach(n),ch=e(zs,", and many others."),zs.forEach(n),rh=r($),Uo=o($,"P",{});var em=l(Uo);Gn=o(em,"STRONG",{});var Ll=l(Gn);kh=e(Ll,"\u2B05 \u2B05  Previously in "),dt=o(Ll,"A",{href:!0});var tm=l(dt);dh=e(tm,"Part 2"),tm.forEach(n),vh=e(Ll,"."),Ll.forEach(n),em.forEach(n),$.forEach(n),this.h()},h(){i(S,"href","/compile-svelte-in-your-head-part-2/"),i(Bn,"href","/compile-svelte-in-your-head-part-2/"),i(Zn,"class","inline"),i(Kn,"class","inline"),i(sa,"class","inline"),i(aa,"class","inline"),i(ta,"class","inline"),i(ia,"class","inline"),i(pa,"class","inline"),i(ca,"class","inline"),i(W,"href","#the-on-bind-and-use"),i(W,"id","the-on-bind-and-use"),i(ra,"class","inline"),i(Ts,"href","#on-event-handlers"),i(Ts,"id","on-event-handlers"),i(ka,"class","inline"),i(da,"class","code-section"),i(va,"class","inline"),i(Ps,"href","#bind-bindings"),i(Ps,"id","bind-bindings"),i(ha,"class","inline"),i(ua,"class","code-section"),i(ya,"class","inline"),i(Ss,"href","#use-actions"),i(Ss,"id","use-actions"),i(fa,"class","inline"),i(Ks,"href","https://svelte.dev/tutorial/actions"),i(Ks,"rel","nofollow"),i(ma,"class","inline"),i(ga,"class","inline"),i(xa,"class","code-section"),i(Ea,"class","code-section"),i(_a,"class","inline"),i(wa,"class","code-section"),i(ba,"class","inline"),i(Is,"href","https://svelte.dev/tutorial/dom-events"),i(Is,"rel","nofollow"),i(Ca,"class","inline"),i(Ls,"href","https://svelte.dev/tutorial/text-inputs"),i(Ls,"rel","nofollow"),i(Da,"class","inline"),i(As,"href","https://svelte.dev/tutorial/actions"),i(As,"rel","nofollow"),i(nn,"href","#the-vanilla-js"),i(nn,"id","the-vanilla-js"),i(an,"href","#event-handler"),i(an,"id","event-handler"),i(Oa,"href","/compile-svelte-in-your-head-part-1/#listen-for-click-events-on-an-element"),i(en,"href","https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener"),i(en,"rel","nofollow"),i(Ta,"class","code-section"),i(Pa,"class","code-section"),i(tn,"href","#event-preventdefault"),i(tn,"id","event-preventdefault"),i(on,"href","https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault"),i(on,"rel","nofollow"),i(Sa,"class","inline"),i(Ia,"class","inline"),i(La,"class","code-section"),i(ln,"href","#event-stoppropagation"),i(ln,"id","event-stoppropagation"),i(pn,"href","https://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation"),i(pn,"rel","nofollow"),i(ja,"class","code-section"),i(Ma,"class","inline"),i(Ha,"class","inline"),i($a,"class","inline"),i(Na,"class","inline"),i(Va,"class","inline"),i(cn,"href","https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener#Matching_event_listeners_for_removal"),i(cn,"rel","nofollow"),i(Ra,"class","code-section"),i(rn,"href","#bindings"),i(rn,"id","bindings"),i(Ua,"href","/reactivity-in-web-frameworks-the-when/"),i(Wa,"class","code-section"),i(Ga,"class","inline"),i(Ya,"class","inline"),i(vn,"href","https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement"),i(vn,"rel","nofollow"),i(qa,"class","inline"),i(hn,"href","https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/close_event"),i(hn,"rel","nofollow"),i(Ja,"class","inline"),i(Fa,"class","inline"),i(yn,"href","https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver"),i(yn,"rel","nofollow"),i(fn,"href","#actions"),i(fn,"id","actions"),i(Ba,"class","inline"),i(Ka,"class","inline"),i(Qa,"class","code-section"),i(gn,"href","#the-compiled-js"),i(gn,"id","the-compiled-js"),i(Xa,"class","inline"),i(se,"class","inline"),i(ne,"class","inline"),i(ae,"class","inline"),i(Hs,"href","#on-directive"),i(Hs,"id","on-directive"),i(ee,"class","code-section"),i(xn,"href","https://svelte.dev/repl/0ea0c22e9fd648518cfc1231835b0f05"),i(xn,"rel","nofollow"),i(te,"class","code-section"),i(oe,"class","inline"),i(le,"class","inline"),i(ie,"href","/compile-svelte-in-your-head-part-1/#listen-and-dispose"),i(pe,"class","inline"),i(ce,"class","inline"),i(wn,"href","#event-modifiers"),i(wn,"id","event-modifiers"),i(re,"class","code-section"),i(bn,"href","https://svelte.dev/repl/11fffa988c1f49239c005619c3b506c5"),i(bn,"rel","nofollow"),i(ke,"class","code-section"),i(de,"class","inline"),i(ve,"class","inline"),i(he,"class","inline"),i(Cn,"href","https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener"),i(Cn,"rel","nofollow"),i(ue,"class","inline"),i(ye,"class","inline"),i(fe,"class","inline"),i(me,"class","inline"),i(ge,"class","inline"),i(xe,"class","code-section"),i(Ee,"class","inline"),i($s,"href","#bind-directive"),i($s,"id","bind-directive"),i(_e,"class","code-section"),i(On,"href","https://svelte.dev/repl/22ff0420e32f427c8b20e878a44170d3"),i(On,"rel","nofollow"),i(we,"class","code-section"),i(Ce,"class","inline"),i(De,"class","inline"),i(Oe,"class","inline"),i(Te,"class","inline"),i(Pe,"class","inline"),i(Ie,"class","inline"),i(Le,"class","inline"),i(Ae,"class","inline"),i(je,"class","inline"),i(Me,"class","inline"),i(Vs,"href","#use-directive"),i(Vs,"id","use-directive"),i(He,"class","code-section"),i(In,"href","https://svelte.dev/repl/88bbecb8b86943fd80d9d428961251ae"),i(In,"rel","nofollow"),i($e,"class","code-section"),i(Ne,"class","inline"),i(Ve,"class","inline"),i(Re,"class","inline"),i(Ue,"class","inline"),i(We,"class","inline"),i(Ge,"class","inline"),i(Ye,"class","inline"),i(Ln,"href","#the-order-of-directives"),i(Ln,"id","the-order-of-directives"),i(qe,"class","inline"),i(Je,"class","inline"),i(Fe,"class","code-section"),i(ze,"class","inline"),i(Be,"class","inline"),i(Ze,"class","inline"),i(Ke,"class","inline"),i(Qe,"class","inline"),i(Xe,"class","inline"),i(st,"class","code-section"),i(nt,"class","inline"),i(at,"class","inline"),i(et,"class","inline"),i(tt,"class","code-section"),i(jn,"href","https://svelte.dev/repl/f06a8a59840c418b86c43c2875d4b274"),i(jn,"rel","nofollow"),i(ot,"class","inline"),i(lt,"class","inline"),i(it,"class","inline"),i(pt,"class","code-section"),i(Hn,"href","https://github.com/sveltejs/svelte/issues/2446"),i(Hn,"rel","nofollow"),i($n,"href","#closing-note"),i($n,"id","closing-note"),i(ct,"class","inline"),i(rt,"class","inline"),i(kt,"class","inline"),i(Vn,"href","https://twitter.com/lihautan"),i(Vn,"rel","nofollow"),i(Rn,"href","https://svelte.dev/tutorial/if-blocks"),i(Rn,"rel","nofollow"),i(Un,"href","https://svelte.dev/tutorial/slots"),i(Un,"rel","nofollow"),i(Wn,"href","https://svelte.dev/tutorial/context-api"),i(Wn,"rel","nofollow"),i(dt,"href","/compile-svelte-in-your-head-part-2/")},m(p,k){rm(f,p,k),d(p,J,k),d(p,U,k),s(U,F),s(F,_),s(F,S),s(S,zn),s(F,Al),d(p,Go,k),d(p,z,k),s(z,Bn),s(Bn,jl),s(z,Ml),s(z,Zn),s(Zn,Hl),s(z,$l),s(z,Kn),s(Kn,Nl),s(z,Vl),d(p,Yo,k),d(p,Qn,k),s(Qn,Rl),d(p,qo,k),d(p,es,k),s(es,Xn),s(Xn,sa),s(sa,Ul),s(Xn,Wl),s(es,Gl),s(es,na),s(na,aa),s(aa,Yl),s(na,ql),s(es,Jl),s(es,ea),s(ea,ta),s(ta,Fl),s(ea,zl),d(p,Jo,k),d(p,oa,k),s(oa,Bl),d(p,Fo,k),d(p,la,k),s(la,St),s(St,W),s(W,Zl),s(W,ia),s(ia,Kl),s(W,Ql),s(W,pa),s(pa,Xl),s(W,si),s(W,ca),s(ca,ni),d(p,zo,k),d(p,ts,k),s(ts,It),s(It,Ts),s(Ts,ra),s(ra,ai),s(Ts,ei),s(ts,ti),s(ts,Bs),s(Bs,oi),s(Bs,ka),s(ka,li),s(Bs,ii),s(ts,pi),s(ts,da),da.innerHTML=hm,d(p,Bo,k),d(p,G,k),s(G,Lt),s(Lt,Ps),s(Ps,va),s(va,ci),s(Ps,ri),s(G,ki),s(G,Zs),s(Zs,di),s(Zs,ha),s(ha,vi),s(Zs,hi),s(G,ui),s(G,At),s(At,yi),s(G,fi),s(G,ua),ua.innerHTML=um,d(p,Zo,k),d(p,y,k),s(y,jt),s(jt,Ss),s(Ss,ya),s(ya,mi),s(Ss,gi),s(y,xi),s(y,vs),s(vs,Ei),s(vs,fa),s(fa,_i),s(vs,wi),s(vs,Mt),s(Mt,Ks),s(Ks,bi),s(vs,Ci),s(y,Di),s(y,Qs),s(Qs,Oi),s(Qs,ma),s(ma,Ti),s(Qs,Pi),s(y,Si),s(y,Xs),s(Xs,Ii),s(Xs,ga),s(ga,Li),s(Xs,Ai),s(y,ji),s(y,xa),xa.innerHTML=ym,s(y,Mi),s(y,Ht),s(Ht,Hi),s(y,$i),s(y,Ea),Ea.innerHTML=fm,s(y,Ni),s(y,sn),s(sn,Vi),s(sn,_a),s(_a,Ri),s(sn,Ui),s(y,Wi),s(y,wa),wa.innerHTML=mm,s(y,Gi),s(y,$t),s($t,Yi),s(y,qi),s(y,hs),s(hs,Nt),s(Nt,Is),s(Is,Ji),s(Is,ba),s(ba,Fi),s(hs,zi),s(hs,Vt),s(Vt,Ls),s(Ls,Bi),s(Ls,Ca),s(Ca,Zi),s(hs,Ki),s(hs,Rt),s(Rt,As),s(As,Qi),s(As,Da),s(Da,Xi),d(p,Ko,k),d(p,js,k),s(js,Ut),s(Ut,nn),s(nn,sp),s(js,np),s(js,Wt),s(Wt,ap),d(p,Qo,k),d(p,I,k),s(I,Gt),s(Gt,an),s(an,ep),s(I,tp),s(I,us),s(us,op),s(us,Oa),s(Oa,lp),s(us,ip),s(us,en),s(en,pp),s(us,cp),s(I,rp),s(I,Ta),Ta.innerHTML=gm,s(I,kp),s(I,Yt),s(Yt,dp),s(I,vp),s(I,Pa),Pa.innerHTML=xm,d(p,Xo,k),d(p,os,k),s(os,qt),s(qt,tn),s(tn,hp),s(os,up),s(os,ls),s(ls,on),s(on,yp),s(ls,fp),s(ls,Sa),s(Sa,mp),s(ls,gp),s(ls,Ia),s(Ia,xp),s(ls,Ep),s(os,_p),s(os,La),La.innerHTML=Em,d(p,sl,k),d(p,L,k),s(L,Jt),s(Jt,ln),s(ln,wp),s(L,bp),s(L,Aa),s(Aa,pn),s(pn,Cp),s(Aa,Dp),s(L,Op),s(L,ja),ja.innerHTML=_m,s(L,Tp),s(L,T),s(T,Pp),s(T,Ma),s(Ma,Sp),s(T,Ip),s(T,Ha),s(Ha,Lp),s(T,Ap),s(T,$a),s($a,jp),s(T,Mp),s(T,Na),s(Na,Hp),s(T,$p),s(T,Va),s(Va,Np),s(T,Vp),s(T,cn),s(cn,Rp),s(T,Up),s(L,Wp),s(L,Ra),Ra.innerHTML=wm,d(p,nl,k),d(p,u,k),s(u,Ft),s(Ft,rn),s(rn,Gp),s(u,Yp),s(u,zt),s(zt,qp),s(u,Jp),s(u,Bt),s(Bt,Fp),s(u,zp),s(u,Zt),s(Zt,kn),s(kn,Bp),s(kn,Ua),s(Ua,Zp),s(kn,Kp),s(u,Qp),s(u,dn),s(dn,Xp),s(dn,Kt),s(Kt,sc),s(dn,nc),s(u,ac),s(u,Wa),Wa.innerHTML=bm,s(u,ec),s(u,Qt),s(Qt,tc),s(u,oc),s(u,Xt),s(Xt,so),s(so,lc),s(u,ic),s(u,ys),s(ys,pc),s(ys,Ga),s(Ga,cc),s(ys,rc),s(ys,Ya),s(Ya,kc),s(ys,dc),s(u,vc),s(u,no),s(no,ao),s(ao,hc),s(u,uc),s(u,N),s(N,yc),s(N,vn),s(vn,fc),s(N,mc),s(N,hn),s(hn,qa),s(qa,gc),s(N,xc),s(N,Ja),s(Ja,Ec),s(N,_c),s(N,Fa),s(Fa,wc),s(N,bc),s(u,Cc),s(u,un),s(un,Dc),s(un,yn),s(yn,Oc),s(un,Tc),d(p,al,k),d(p,A,k),s(A,eo),s(eo,fn),s(fn,Pc),s(A,Sc),s(A,to),s(to,Ic),s(A,Lc),s(A,oo),s(oo,Ac),s(A,jc),s(A,mn),s(mn,za),s(za,Ba),s(Ba,Mc),s(za,Hc),s(mn,$c),s(mn,Za),s(Za,Ka),s(Ka,Nc),s(Za,Vc),s(A,Rc),s(A,Qa),Qa.innerHTML=Cm,d(p,el,k),d(p,Ms,k),s(Ms,lo),s(lo,gn),s(gn,Uc),s(Ms,Wc),s(Ms,B),s(B,Gc),s(B,Xa),s(Xa,Yc),s(B,qc),s(B,se),s(se,Jc),s(B,Fc),s(B,ne),s(ne,zc),s(B,Bc),d(p,tl,k),d(p,x,k),s(x,io),s(io,Hs),s(Hs,ae),s(ae,Zc),s(Hs,Kc),s(x,Qc),s(x,ee),ee.innerHTML=Dm,s(x,Xc),s(x,po),s(po,xn),s(xn,sr),s(x,nr),s(x,co),s(co,ar),s(x,er),s(x,te),te.innerHTML=Om,s(x,tr),s(x,ro),s(ro,or),s(x,lr),s(x,En),s(En,fs),s(fs,ir),s(fs,oe),s(oe,pr),s(fs,cr),s(fs,ko),s(ko,rr),s(fs,kr),s(En,dr),s(En,ms),s(ms,vr),s(ms,le),s(le,hr),s(ms,ur),s(ms,vo),s(vo,yr),s(ms,fr),s(x,mr),s(x,gs),s(gs,gr),s(gs,ie),s(ie,xr),s(gs,Er),s(gs,pe),s(pe,_r),s(gs,wr),s(x,br),s(x,_n),s(_n,Cr),s(_n,ce),s(ce,Dr),s(_n,Or),d(p,ol,k),d(p,m,k),s(m,ho),s(ho,wn),s(wn,Tr),s(m,Pr),s(m,uo),s(uo,Sr),s(m,Ir),s(m,re),re.innerHTML=Tm,s(m,Lr),s(m,yo),s(yo,bn),s(bn,Ar),s(m,jr),s(m,fo),s(fo,Mr),s(m,Hr),s(m,ke),ke.innerHTML=Pm,s(m,$r),s(m,mo),s(mo,Nr),s(m,Vr),s(m,xs),s(xs,go),s(go,Rr),s(xs,Ur),s(xs,P),s(P,Wr),s(P,de),s(de,Gr),s(P,Yr),s(P,ve),s(ve,qr),s(P,Jr),s(P,he),s(he,Fr),s(P,zr),s(P,Cn),s(Cn,Br),s(P,Zr),s(P,ue),s(ue,Kr),s(P,Qr),s(xs,Xr),s(xs,Z),s(Z,sk),s(Z,ye),s(ye,nk),s(Z,ak),s(Z,fe),s(fe,ek),s(Z,tk),s(Z,me),s(me,ok),s(Z,lk),s(m,ik),s(m,Dn),s(Dn,pk),s(Dn,ge),s(ge,ck),s(Dn,rk),s(m,kk),s(m,xe),xe.innerHTML=Sm,d(p,ll,k),d(p,b,k),s(b,xo),s(xo,$s),s($s,Ee),s(Ee,dk),s($s,vk),s(b,hk),s(b,_e),_e.innerHTML=Im,s(b,uk),s(b,Eo),s(Eo,On),s(On,yk),s(b,fk),s(b,_o),s(_o,mk),s(b,gk),s(b,we),we.innerHTML=Lm,s(b,xk),s(b,wo),s(wo,Ek),s(b,_k),s(b,Tn),s(Tn,be),s(be,wk),s(be,Pn),s(Pn,Ns),s(Ns,bk),s(Ns,Ce),s(Ce,Ck),s(Ns,Dk),s(Ns,De),s(De,Ok),s(Pn,Tk),s(Pn,V),s(V,Pk),s(V,bo),s(bo,Sk),s(V,Ik),s(V,Oe),s(Oe,Lk),s(V,Ak),s(V,Te),s(Te,jk),s(V,Mk),s(V,Pe),s(Pe,Hk),s(V,$k),s(Tn,Nk),s(Tn,Se),s(Se,Vk),s(Se,Sn),s(Sn,Es),s(Es,Rk),s(Es,Ie),s(Ie,Uk),s(Es,Wk),s(Es,Le),s(Le,Gk),s(Es,Yk),s(Sn,qk),s(Sn,R),s(R,Jk),s(R,Ae),s(Ae,Fk),s(R,zk),s(R,Co),s(Co,Bk),s(R,Zk),s(R,je),s(je,Kk),s(R,Qk),s(R,Do),s(Do,Xk),s(R,sd),d(p,il,k),d(p,C,k),s(C,Oo),s(Oo,Vs),s(Vs,Me),s(Me,nd),s(Vs,ad),s(C,ed),s(C,He),He.innerHTML=Am,s(C,td),s(C,To),s(To,In),s(In,od),s(C,ld),s(C,Po),s(Po,id),s(C,pd),s(C,$e),$e.innerHTML=jm,s(C,cd),s(C,So),s(So,rd),s(C,kd),s(C,_s),s(_s,K),s(K,dd),s(K,Ne),s(Ne,vd),s(K,hd),s(K,Ve),s(Ve,ud),s(K,yd),s(K,Io),s(Io,fd),s(K,md),s(_s,gd),s(_s,ws),s(ws,xd),s(ws,Re),s(Re,Ed),s(ws,_d),s(ws,Lo),s(Lo,wd),s(ws,bd),s(_s,Cd),s(_s,Y),s(Y,Ue),s(Ue,Dd),s(Y,Od),s(Y,We),s(We,Td),s(Y,Pd),s(Y,Ge),s(Ge,Sd),s(Y,Id),s(Y,Ye),s(Ye,Ld),s(Y,Ad),d(p,pl,k),d(p,v,k),s(v,Ao),s(Ao,Ln),s(Ln,jd),s(v,Md),s(v,bs),s(bs,Hd),s(bs,qe),s(qe,$d),s(bs,Nd),s(bs,Je),s(Je,Vd),s(bs,Rd),s(v,Ud),s(v,jo),s(jo,Wd),s(v,Gd),s(v,Fe),Fe.innerHTML=Mm,s(v,Yd),s(v,Q),s(Q,qd),s(Q,ze),s(ze,Jd),s(Q,Fd),s(Q,Be),s(Be,zd),s(Q,Bd),s(Q,Ze),s(Ze,Zd),s(Q,Kd),s(v,Qd),s(v,Cs),s(Cs,Xd),s(Cs,Ke),s(Ke,sv),s(Cs,nv),s(Cs,Qe),s(Qe,av),s(Cs,ev),s(v,tv),s(v,An),s(An,ov),s(An,Xe),s(Xe,lv),s(An,iv),s(v,pv),s(v,st),st.innerHTML=Hm,s(v,cv),s(v,Ds),s(Ds,rv),s(Ds,Mo),s(Mo,kv),s(Ds,dv),s(Ds,X),s(X,vv),s(X,nt),s(nt,hv),s(X,uv),s(X,at),s(at,yv),s(X,fv),s(X,et),s(et,mv),s(X,gv),s(Ds,xv),s(v,Ev),s(v,Ho),s(Ho,_v),s(v,wv),s(v,tt),tt.innerHTML=$m,s(v,bv),s(v,$o),s($o,jn),s(jn,Cv),s(v,Dv),s(v,ss),s(ss,Ov),s(ss,ot),s(ot,Tv),s(ss,Pv),s(ss,lt),s(lt,Sv),s(ss,Iv),s(ss,it),s(it,Lv),s(ss,Av),s(v,jv),s(v,pt),pt.innerHTML=Nm,s(v,Mv),s(v,Mn),s(Mn,Hv),s(Mn,Hn),s(Hn,$v),s(Mn,Nv),d(p,cl,k),d(p,D,k),s(D,No),s(No,$n),s($n,Vv),s(D,Rv),s(D,ns),s(ns,Uv),s(ns,ct),s(ct,Wv),s(ns,Gv),s(ns,rt),s(rt,Yv),s(ns,qv),s(ns,kt),s(kt,Jv),s(ns,Fv),s(D,zv),s(D,Vo),s(Vo,Bv),s(D,Zv),s(D,Ro),s(Ro,Kv),s(D,Qv),s(D,Nn),s(Nn,Xv),s(Nn,Vn),s(Vn,sh),s(Nn,nh),s(D,ah),s(D,as),s(as,eh),s(as,Rn),s(Rn,th),s(as,oh),s(as,Un),s(Un,lh),s(as,ih),s(as,Wn),s(Wn,ph),s(as,ch),s(D,rh),s(D,Uo),s(Uo,Gn),s(Gn,kh),s(Gn,dt),s(dt,dh),s(Gn,vh),rl=!0},p:ug,i(p){rl||(km(f.$$.fragment,p),rl=!0)},o(p){dm(f.$$.fragment,p),rl=!1},d(p){vm(f,p),p&&n(J),p&&n(U),p&&n(Go),p&&n(z),p&&n(Yo),p&&n(Qn),p&&n(qo),p&&n(es),p&&n(Jo),p&&n(oa),p&&n(Fo),p&&n(la),p&&n(zo),p&&n(ts),p&&n(Bo),p&&n(G),p&&n(Zo),p&&n(y),p&&n(Ko),p&&n(js),p&&n(Qo),p&&n(I),p&&n(Xo),p&&n(os),p&&n(sl),p&&n(L),p&&n(nl),p&&n(u),p&&n(al),p&&n(A),p&&n(el),p&&n(Ms),p&&n(tl),p&&n(x),p&&n(ol),p&&n(m),p&&n(ll),p&&n(b),p&&n(il),p&&n(C),p&&n(pl),p&&n(v),p&&n(cl),p&&n(D)}}}function xg(Fn){let f,J;const U=[Fn[0],im];let F={$$slots:{default:[gg]},$$scope:{ctx:Fn}};for(let _=0;_<U.length;_+=1)F=Ih(F,U[_]);return f=new yg({props:F}),{c(){pm(f.$$.fragment)},l(_){cm(f.$$.fragment,_)},m(_,S){rm(f,_,S),J=!0},p(_,[S]){const zn=S&1?vg(U,[S&1&&om(_[0]),S&0&&om(im)]):{};S&2&&(zn.$$scope={dirty:S,ctx:_}),f.$set(zn)},i(_){J||(km(f.$$.fragment,_),J=!0)},o(_){dm(f.$$.fragment,_),J=!1},d(_){vm(f,_)}}}const im={title:"Compile Svelte in your head (Part 3)",date:"2020-05-07T08:00:00Z",tags:["Svelte","JavaScript"],series:"Compile Svelte in your head",label:"blog"};function Eg(Fn,f,J){return hg("blog",{image:mg}),Fn.$$set=U=>{J(0,f=Ih(Ih({},f),lm(U)))},f=lm(f),[f]}class Tg extends rg{constructor(f){super();kg(this,f,Eg,xg,dg,{})}}export{Tg as default,im as metadata};
