import{S as ng,i as ag,s as eg,C as Th,w as tg,x as og,y as lg,z as ig,A as am,q as pg,o as cg,B as rg,r as kg,Y as em,e as t,t as a,k as c,c as o,a as l,h as e,d as n,m as r,b as i,g as d,H as s,J as dg}from"../../chunks/vendor-da4388d4.js";import{B as vg}from"../../chunks/BlogLayout-d479b777.js";import"../../chunks/stores-1fad7c36.js";import"../../chunks/ldjson-b0805387.js";/* empty css                                */var hg="https://lihautan.com/_app/assets/hero-twitter-aecf8b39.jpg";function ug(Bn){let g,S,ds,ns,_,J,Fs,q,Fn,Il,Ll,Zn,Al,jl,Kn,Ml,Hl,Yo,Qn,Nl,Go,as,Xn,sa,$l,Vl,Rl,na,aa,Ul,Wl,Yl,ea,ta,Gl,Jl,Jo,oa,ql,qo,la,St,U,zl,ia,Bl,Fl,pa,Zl,Kl,ca,Ql,zo,es,It,Ts,ra,Xl,si,ni,Zs,ai,ka,ei,ti,oi,da,om='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">function</span> <span class="token function">handleMouseMove</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></div><div class="line"></div><div class="line">  <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- You can pass in as variable --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">on:</span>mousemove=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>handleMouseMove<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- or you can inline the event handler --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">on:</span>mousemove=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">/*...*/</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- You can modify event handler with modifiers  --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">on:</span>click|stopPropagation|once=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>handleClick<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div></code></pre>',Bo,W,Lt,Ps,va,li,ii,pi,Ks,ci,ha,ri,ki,di,At,vi,hi,ua,lm='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> name<span class="token punctuation">,</span> yes<span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- You can bind &#96;name&#96; to input.value --></span></div><div class="line"><span class="token comment">&lt;!-- Changing &#96;name&#96; will update input.value to be the value of &#96;name&#96; and --></span></div><div class="line"><span class="token comment">&lt;!-- changing input.value will update &#96;name&#96; to be input.value --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- You can bind input.checked for a checkbox input --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>checked=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>yes<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div></code></pre>',Fo,y,jt,Ss,ya,ui,yi,fi,vs,mi,fa,gi,xi,Mt,Qs,Ei,_i,wi,Xs,bi,ma,Ci,Di,Oi,sn,Ti,ga,Pi,Si,Ii,xa,im='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    <span class="token comment">// do something with the element</span></div><div class="line">    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span></div><div class="line">      <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">        <span class="token comment">// cleanup</span></div><div class="line">      <span class="token punctuation">&#125;</span></div><div class="line">    <span class="token punctuation">&#125;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">use:</span>doSomething</span> <span class="token punctuation">/></span></span></div></code></pre>',Li,Ht,Ai,ji,Ea,pm=`<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line dim">  <span class="token keyword">import</span> Draggable <span class="token keyword">from</span> <span class="token string">'the-draggable-library'</span><span class="token punctuation">;</span></div><div class="line dim"></div><div class="line dim">  <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line highlight">    <span class="token keyword">const</span> draggable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Draggable</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line highlight">    draggable<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line dim">    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span></div><div class="line dim">      <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line highlight">        draggable<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line dim">      <span class="token punctuation">&#125;</span></div><div class="line dim">    <span class="token punctuation">&#125;</span></div><div class="line dim">  <span class="token punctuation">&#125;</span></div><div class="line dim"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line dim"></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">use:</span>doSomething</span> <span class="token punctuation">/></span></span></div></code></pre>`,Mi,nn,Hi,_a,Ni,$i,Vi,wa,cm=`<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line dim">  <span class="token keyword">import</span> Draggable <span class="token keyword">from</span> <span class="token string">'the-draggable-library'</span><span class="token punctuation">;</span></div><div class="line dim"></div><div class="line dim">  <span class="token keyword">let</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></div><div class="line dim"></div><div class="line highlight">  <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line highlight">    <span class="token keyword">const</span> draggable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Draggable</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line dim">    draggable<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line dim"></div><div class="line dim">    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span></div><div class="line highlight">      <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line highlight">        draggable<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line highlight">      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></div><div class="line dim">      <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line dim">        draggable<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line dim">      <span class="token punctuation">&#125;</span></div><div class="line dim">    <span class="token punctuation">&#125;</span></div><div class="line dim">  <span class="token punctuation">&#125;</span></div><div class="line dim"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line dim"></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">use:</span>doSomething=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>options<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line dim"></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span></div><div class="line dim">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>checked=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>options<span class="token punctuation">.</span>foo<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line dim">  Foo</div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span></div><div class="line dim">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>checked=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>options<span class="token punctuation">.</span>bar<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line dim">  Bar</div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></div></code></pre>`,Ri,Nt,Ui,Wi,hs,$t,Is,Yi,ba,Gi,Ji,Vt,Ls,qi,Ca,zi,Bi,Rt,As,Fi,Da,Zi,Zo,js,Ut,an,Ki,Qi,Wt,Xi,Ko,I,Yt,en,sp,np,us,ap,Oa,ep,tp,tn,op,lp,ip,Ta,rm='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-token-function)">.addEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;click&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> handleClick);</span></span></code></pre>',pp,Gt,cp,rp,Pa,km=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-token-function)">.addEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;click&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> handleClick</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  capture</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// triggered before any child element</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  once</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// triggered at most once</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  passive</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// indicates that will never call &#96;preventDefault&#96; to improve performance</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,Qo,ts,Jt,on,kp,dp,os,ln,vp,hp,Sa,up,yp,Ia,fp,mp,gp,La,dm=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-token-function)">.addEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;click&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> event </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">event</span><span style="color: var(--shiki-token-function)">.preventDefault</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,Xo,L,qt,pn,xp,Ep,Aa,cn,_p,wp,bp,ja,vm=`<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></div><div class="line dim">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'click not triggered'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line dim"><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div><div class="line dim">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token parameter">event</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></div><div class="line highlight">    event<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line dim">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div><div class="line dim">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div></code></pre>`,Cp,T,Dp,Ma,Op,Tp,Ha,Pp,Sp,Na,Ip,Lp,$a,Ap,jp,Va,Mp,Hp,rn,Np,$p,Vp,Ra,hm='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-token-function)">.removeEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;click&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> handleClick);</span></span></code></pre>',sl,u,zt,kn,Rp,Up,Bt,Wp,Yp,Ft,Gp,Jp,Zt,dn,qp,Ua,zp,Bp,Fp,vn,Zp,Kt,Kp,Qp,Xp,Wa,um=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// binding variable &#96;checked&#96; with the checkbox &#96;checked&#96; property</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> checked;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> input </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.querySelector</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;#checkbox&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// synchronise variable &#96;checked&#96; to checkbox &#96;checked&#96; property</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">observe</span><span style="color: var(--shiki-color-text)">(checked</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> newValue </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">input</span><span style="color: var(--shiki-color-text)">.checked </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> newValue;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// synchronise checkbox &#96;checked&#96; property to variable &#96;checked&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// listen to &#96;change&#96; event for &#96;checked&#96; property</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">input</span><span style="color: var(--shiki-token-function)">.addEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;change&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> event </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  checked </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">input</span><span style="color: var(--shiki-color-text)">.checked;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,sc,Qt,nc,ac,Xt,so,ec,tc,ys,oc,Ya,lc,ic,Ga,pc,cc,rc,no,ao,kc,dc,$,vc,hn,hc,uc,un,Ja,yc,fc,qa,mc,gc,za,xc,Ec,_c,yn,wc,fn,bc,Cc,nl,A,eo,mn,Dc,Oc,to,Tc,Pc,oo,Sc,Ic,gn,Ba,Fa,Lc,Ac,jc,Za,Ka,Mc,Hc,Nc,Qa,ym=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">actionFn</span><span style="color: var(--shiki-color-text)">(element</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parameter) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)">(newParameter) &#123;&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">destroy</span><span style="color: var(--shiki-color-text)">() &#123;&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// When element is mounted onto the DOM</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> parameter </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">actionObj</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">actionFn</span><span style="color: var(--shiki-color-text)">(element</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parameter);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// When parameter changes</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">parameter </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">actionObj</span><span style="color: var(--shiki-token-function)">.update</span><span style="color: var(--shiki-color-text)">(parameter);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// When element is removed from the DOM</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">actionObj</span><span style="color: var(--shiki-token-function)">.destroy</span><span style="color: var(--shiki-color-text)">();</span></span></code></pre>`,al,Ms,lo,xn,$c,Vc,z,Rc,Xa,Uc,Wc,se,Yc,Gc,ne,Jc,qc,el,x,io,Hs,ae,zc,Bc,Fc,ee,fm='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">function</span> <span class="token function">onChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">on:</span>change=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>onChange<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div></code></pre>',Zc,po,En,Kc,Qc,co,Xc,sr,te,mm=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">/* App.svelte generated by Svelte v3.22.2 */</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> input;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> dispose;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      input </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">element</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;input&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> remount) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> input</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (remount) </span><span style="color: var(--shiki-token-function)">dispose</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      dispose </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(input</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;change&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*onChange*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">(detaching) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (detaching) </span><span style="color: var(--shiki-token-function)">detach</span><span style="color: var(--shiki-color-text)">(input);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">dispose</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">onChange</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [onChange];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`,nr,ro,ar,er,_n,fs,tr,oe,or,lr,ko,ir,pr,cr,ms,rr,le,kr,dr,vo,vr,hr,ur,gs,yr,ie,fr,mr,pe,gr,xr,Er,wn,_r,ce,wr,br,tl,f,ho,bn,Cr,Dr,uo,Or,Tr,re,gm='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">	<span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></div><div class="line">	<span class="token keyword">function</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">		i<span class="token operator">++</span><span class="token punctuation">;</span></div><div class="line">	<span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click|preventDefault=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>onClick<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>change|stopPropagation=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>onClick<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>change|once=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>onClick<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>change|capture=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>onClick<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- Chain multiple modifiers --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click|preventDefault|stopPropagation|once|capture=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>onClick<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div></code></pre>',Pr,yo,Cn,Sr,Ir,fo,Lr,Ar,ke,xm=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">/* App.svelte generated by Svelte v3.22.2 */</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> remount) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      dispose </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(button0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;click&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">prevent_default</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*onClick*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(button1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;change&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">stop_propagation</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*onClick*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(button2</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;change&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*onClick*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; once</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> &#125;)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(button3</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;change&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*onClick*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          button4</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-string-expression)">&quot;click&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">stop_propagation</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">prevent_default</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*onClick*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          &#123; once</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> capture</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        )</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      ];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,jr,mo,Mr,Hr,xs,go,Nr,$r,P,Vr,de,Rr,Ur,ve,Wr,Yr,he,Gr,Jr,Dn,qr,zr,ue,Br,Fr,Zr,B,Kr,ye,Qr,Xr,fe,sk,nk,me,ak,ek,tk,On,ok,ge,lk,ik,pk,xe,Em=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">prevent_default</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(event) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">event</span><span style="color: var(--shiki-token-function)">.preventDefault</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fn</span><span style="color: var(--shiki-token-function)">.call</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> event);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ol,b,xo,Ns,Ee,ck,rk,kk,_e,_m='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">	<span class="token keyword">let</span> checked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></div><div class="line">	<span class="token keyword">function</span> <span class="token function">updateChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">		checked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></div><div class="line">	<span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>checked</span> <span class="token punctuation">/></span></span></div></code></pre>',dk,Eo,Tn,vk,hk,_o,uk,yk,we,wm=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">/* App.svelte generated by Svelte v3.22.2 */</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> input;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> dispose;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> remount) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> input</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">input</span><span style="color: var(--shiki-color-text)">.checked </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*checked*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">];</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (remount) </span><span style="color: var(--shiki-token-function)">dispose</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      dispose </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(input</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;change&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*input_change_handler*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [dirty]) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*checked*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">input</span><span style="color: var(--shiki-color-text)">.checked </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*checked*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">];</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">(detaching) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (detaching) </span><span style="color: var(--shiki-token-function)">detach</span><span style="color: var(--shiki-color-text)">(input);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">dispose</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> checked </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">updateChecked</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (checked </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">input_change_handler</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    checked </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.checked;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> checked);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [checked</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> input_change_handler];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,fk,wo,mk,gk,Pn,be,xk,Sn,$s,Ek,Ce,_k,wk,De,bk,Ck,V,Dk,bo,Ok,Tk,Oe,Pk,Sk,Te,Ik,Lk,Pe,Ak,jk,Mk,Se,Hk,In,Es,Nk,Ie,$k,Vk,Le,Rk,Uk,Wk,R,Yk,Ae,Gk,Jk,Co,qk,zk,je,Bk,Fk,Do,Zk,Kk,ll,C,Oo,Vs,Me,Qk,Xk,sd,He,bm=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">	<span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span></div><div class="line">	<span class="token keyword">function</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">updateI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    i<span class="token operator">++</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">use:</span>action=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div></code></pre>`,nd,To,Ln,ad,ed,Po,td,od,Ne,Cm=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">/* App.svelte generated by Svelte v3.22.2 */</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> action_action;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> remount) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> div</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (remount) </span><span style="color: var(--shiki-token-function)">dispose</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      dispose </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">action_destroyer</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        (action_action </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">action</span><span style="color: var(--shiki-token-function)">.call</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> div</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*i*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]))</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      );</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [dirty]) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (action_action </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">is_function</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">action_action</span><span style="color: var(--shiki-color-text)">.update) </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*i*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">action_action</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">update</span><span style="color: var(--shiki-token-function)">.call</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*i*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">(detaching) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (detaching) </span><span style="color: var(--shiki-token-function)">detach</span><span style="color: var(--shiki-color-text)">(div);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">dispose</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ld,So,id,pd,_s,F,cd,$e,rd,kd,Ve,dd,vd,Io,hd,ud,yd,ws,fd,Re,md,gd,Lo,xd,Ed,_d,Y,Ue,wd,bd,We,Cd,Dd,Ye,Od,Td,Ge,Pd,Sd,il,v,Ao,An,Id,Ld,bs,Ad,Je,jd,Md,qe,Hd,Nd,$d,jo,Vd,Rd,ze,Dm=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> before <span class="token operator">=</span> <span class="token string">''</span></div><div class="line">  <span class="token keyword">let</span> after <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">uppercase</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    <span class="token comment">// modifying the input.value</span></div><div class="line">    event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- bind after adding input listener --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">on:</span>input=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>uppercase<span class="token punctuation">&#125;</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>after<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>after<span class="token punctuation">&#125;</span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- bind before adding input listener --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>before<span class="token punctuation">&#125;</span></span> <span class="token attr-name"><span class="token namespace">on:</span>input=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>uppercase<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>before<span class="token punctuation">&#125;</span></span></div></code></pre>`,Ud,Z,Wd,Be,Yd,Gd,Fe,Jd,qd,Ze,zd,Bd,Fd,Cs,Zd,Ke,Kd,Qd,Qe,Xd,sv,nv,jn,av,Xe,ev,tv,ov,st,Om=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> before <span class="token operator">=</span> <span class="token string">''</span></div><div class="line">  <span class="token keyword">let</span> after <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">uppercaseAction</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">      event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span></div><div class="line">    <span class="token punctuation">&#125;</span></div><div class="line">    element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line">    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span></div><div class="line">      <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">        element<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line">      <span class="token punctuation">&#125;</span></div><div class="line">    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- bind after adding action --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">use:</span>uppercase</span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>after<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>after<span class="token punctuation">&#125;</span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- bind before adding action --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>before<span class="token punctuation">&#125;</span></span> <span class="token attr-name"><span class="token namespace">use:</span>uppercase</span> <span class="token punctuation">/></span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>before<span class="token punctuation">&#125;</span></span></div></code></pre>`,lv,Ds,iv,Mo,pv,cv,K,rv,nt,kv,dv,at,vv,hv,et,uv,yv,fv,mv,Ho,gv,xv,tt,Tm='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> checked<span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">onChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span></div><div class="line">  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>checkbox</span></div><div class="line">  <span class="token attr-name"><span class="token namespace">bind:</span>checked</span></div><div class="line">  <span class="token attr-name"><span class="token namespace">on:</span>change=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>onChange<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token attr-name"><span class="token namespace">use:</span>action</span></div><div class="line"><span class="token punctuation">/></span></span></div></code></pre>',Ev,No,Mn,_v,wv,Q,bv,ot,Cv,Dv,lt,Ov,Tv,it,Pv,Sv,Iv,pt,Pm=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> input;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> action_action;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> dispose;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> remount) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      dispose </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// bind:checked</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(input</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;change&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*input_change_handler*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">])</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// on:change=&#123;onChange&#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(input</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;change&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> onChange)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// use:action</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">action_destroyer</span><span style="color: var(--shiki-color-text)">((action_action </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">action</span><span style="color: var(--shiki-token-function)">.call</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> input)))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      ];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Lv,Hn,Av,Nn,jv,Mv,pl,D,$o,$n,Hv,Nv,X,$v,ct,Vv,Rv,rt,Uv,Wv,kt,Yv,Gv,Jv,Vo,qv,zv,Ro,Bv,Fv,Vn,Zv,Rn,Kv,Qv,Xv,ss,sh,Un,nh,ah,Wn,eh,th,Yn,oh,lh,ih,Uo,Gn,ph,dt,ch,rh;return{c(){g=t("p"),S=t("strong"),ds=a("\u2B05 \u2B05  Previously in "),ns=t("a"),_=a("Part 2"),J=a("."),Fs=c(),q=t("p"),Fn=t("a"),Il=a("Previously"),Ll=a(", I detailed how "),Zn=t("code"),Al=a("$$invalidate"),jl=a(" works, described how bitmask was used in "),Kn=t("code"),Ml=a("$$invalidate"),Hl=a(", and explained how reactive declarations work as well."),Yo=c(),Qn=t("p"),Nl=a("In this article, we are going to look into 3 DOM related directives:"),Go=c(),as=t("ul"),Xn=t("li"),sa=t("code"),$l=a("on:"),Vl=a(" for event handlers"),Rl=c(),na=t("li"),aa=t("code"),Ul=a("bind:"),Wl=a(" for bindings"),Yl=c(),ea=t("li"),ta=t("code"),Gl=a("use:"),Jl=a(" for actions"),Jo=c(),oa=t("p"),ql=a("To make sure we are on the same page, let's first explain how these 3 directives work."),qo=c(),la=t("section"),St=t("h2"),U=t("a"),zl=a("The "),ia=t("code"),Bl=a("on:"),Fl=a(", "),pa=t("code"),Zl=a("bind:"),Kl=a(" and "),ca=t("code"),Ql=a("use:"),zo=c(),es=t("section"),It=t("h3"),Ts=t("a"),ra=t("code"),Xl=a("on:"),si=a(" event handlers"),ni=c(),Zs=t("p"),ai=a("You can use the "),ka=t("code"),ei=a("on:"),ti=a(" directive to listen to any event on an element:"),oi=c(),da=t("div"),Bo=c(),W=t("section"),Lt=t("h3"),Ps=t("a"),va=t("code"),li=a("bind:"),ii=a(" bindings"),pi=c(),Ks=t("p"),ci=a("The "),ha=t("code"),ri=a("bind:"),ki=a(" directive allows you to bind a variable to a property of an element."),di=c(),At=t("p"),vi=a("Updating the variable will modifying the property of the element, conversely, modifying the property of the element via interacting with the element will, in turn, update the variable."),hi=c(),ua=t("div"),Fo=c(),y=t("section"),jt=t("h3"),Ss=t("a"),ya=t("code"),ui=a("use:"),yi=a(" actions"),fi=c(),vs=t("p"),mi=a("The "),fa=t("code"),gi=a("use:"),xi=a(" directive is called "),Mt=t("strong"),Qs=t("a"),Ei=a('"Action"'),_i=a(". It provides you an interface to enhance your element."),wi=c(),Xs=t("p"),bi=a("You pass a function to the "),ma=t("code"),Ci=a("use:"),Di=a(" directive of an element and the function will be called when your element is mounted."),Oi=c(),sn=t("p"),Ti=a("The function should return an object in which the "),ga=t("code"),Pi=a("destroy"),Si=a(" method of the object will be called when the element is unmounted."),Ii=c(),xa=t("div"),Li=c(),Ht=t("p"),Ai=a("This is useful when you want to interface with 3rd-party libraries:"),ji=c(),Ea=t("div"),Mi=c(),nn=t("p"),Hi=a("You can pass in parameters to the "),_a=t("code"),Ni=a("use:"),$i=a(" directive, to bring in reactivity into your actions"),Vi=c(),wa=t("div"),Ri=c(),Nt=t("p"),Ui=a("You can visit Svelte's interactive tutorial to learn more about:"),Wi=c(),hs=t("ul"),$t=t("li"),Is=t("a"),Yi=a("event handlers with "),ba=t("code"),Gi=a("on:"),Ji=c(),Vt=t("li"),Ls=t("a"),qi=a("bindings with "),Ca=t("code"),zi=a("bind:"),Bi=c(),Rt=t("li"),As=t("a"),Fi=a("actions with "),Da=t("code"),Zi=a("use:"),Zo=c(),js=t("section"),Ut=t("h2"),an=t("a"),Ki=a("The Vanilla JS"),Qi=c(),Wt=t("p"),Xi=a("Now, let's refresh ourselves with how we can implement an event handler, bindings, and actions without using any framework."),Ko=c(),I=t("section"),Yt=t("h3"),en=t("a"),sp=a("Event handler"),np=c(),us=t("p"),ap=a("As "),Oa=t("a"),ep=a("mentioned in the Part 1 of the series"),tp=a(", we can use "),tn=t("a"),op=a("element.addEventListener"),lp=a(" to listen to events."),ip=c(),Ta=t("div"),pp=c(),Gt=t("p"),cp=a("The event listener takes in an optional 3rd argument, which allows you to specifies the characteristics of the event handler:"),rp=c(),Pa=t("div"),Qo=c(),ts=t("section"),Jt=t("h4"),on=t("a"),kp=a("event.preventDefault"),dp=c(),os=t("p"),ln=t("a"),vp=a("event.preventDefault"),hp=a(" allows you to prevent the default behavior of the event, for example submitting form for "),Sa=t("code"),up=a('<button type="submit" />'),yp=a(" or navigating to the target for "),Ia=t("code"),fp=a('<a href="...">'),mp=a("."),gp=c(),La=t("div"),Xo=c(),L=t("section"),qt=t("h4"),pn=t("a"),xp=a("event.stopPropagation"),Ep=c(),Aa=t("p"),cn=t("a"),_p=a("event.stopPropagation"),wp=a(" allows you to prevent event to continue propagate."),bp=c(),ja=t("div"),Cp=c(),T=t("p"),Dp=a("To remove the event listener, you need to call "),Ma=t("code"),Op=a("element.removeEventListener"),Tp=a(" with the same event "),Ha=t("code"),Pp=a("type"),Sp=a(", "),Na=t("code"),Ip=a("listener"),Lp=a(" and "),$a=t("code"),Ap=a("capture"),jp=a("/"),Va=t("code"),Mp=a("useCapture"),Hp=a(" flag. You can check out the "),rn=t("a"),Np=a('MDN docs on "Matching event listeners for removal"'),$p=a("."),Vp=c(),Ra=t("div"),sl=c(),u=t("section"),zt=t("h3"),kn=t("a"),Rp=a("Bindings"),Up=c(),Bt=t("p"),Wp=a("Binding is to synchronise between the value of a variable and a property of an element."),Yp=c(),Ft=t("p"),Gp=a("To synchronise the variable to a property of an element, we need to observe the value of the variable. When it changes, apply it to the property of the element."),Jp=c(),Zt=t("p"),dn=t("em"),qp=a("You can check out my previous article "),Ua=t("a"),zp=a('"Reactivity in Web Frameworks"'),Bp=a(" on how we get notified when the value of a variable changed."),Fp=c(),vn=t("p"),Zp=a("On the other hand, to synchronise the property of an element to a variable, we "),Kt=t("strong"),Kp=a("listen to an event of the element"),Qp=a(", depending on the property, and update the value of the variable when it happens."),Xp=c(),Wa=t("div"),sc=c(),Qt=t("p"),nc=a("Some observations:"),ac=c(),Xt=t("p"),so=t("strong"),ec=a("- The name of the event and the property name of the element may not be the same."),tc=c(),ys=t("p"),oc=a("In this example, we listen to "),Ya=t("code"),lc=a('"change"'),ic=a(" event for the checkbox "),Ga=t("code"),pc=a("checked"),cc=a(" property."),rc=c(),no=t("p"),ao=t("strong"),kc=a("- It is almost impossible to bind a property of an element, if there's no event fired from the element to indicate the property has changed"),dc=c(),$=t("p"),vc=a("A recent example I found out is the "),hn=t("a"),hc=a("HTMLDialogElement"),uc=a(". It has "),un=t("a"),Ja=t("code"),yc=a('"close"'),fc=a(" but not "),qa=t("code"),mc=a('"open"'),gc=a(" event, which makes it hard to implement "),za=t("code"),xc=a("bind:open"),Ec=a(" on the dialog element."),_c=c(),yn=t("p"),wc=a("Maybe an alternative would be using "),fn=t("a"),bc=a("MutationObserver"),Cc=a(", which I haven't seen any usage of it in Svelte codebase yet."),nl=c(),A=t("section"),eo=t("h3"),mn=t("a"),Dc=a("Actions"),Oc=c(),to=t("p"),Tc=a("Action is a function that gets called when your element is created and mounted onto the DOM."),Pc=c(),oo=t("p"),Sc=a("The function returns an object, with 2 methods:"),Ic=c(),gn=t("ul"),Ba=t("li"),Fa=t("code"),Lc=a("update"),Ac=a(", which gets called when the parameters change"),jc=c(),Za=t("li"),Ka=t("code"),Mc=a("destroy"),Hc=a(", which gets called when the element is removed from the DOM"),Nc=c(),Qa=t("div"),al=c(),Ms=t("section"),lo=t("h2"),xn=t("a"),$c=a("The Compiled JS"),Vc=c(),z=t("p"),Rc=a("Now let's take look at how Svelte compiles "),Xa=t("code"),Uc=a("on:"),Wc=a(", "),se=t("code"),Yc=a("bind:"),Gc=a(" and "),ne=t("code"),Jc=a("use:"),qc=a(" directives into output JavaScript."),el=c(),x=t("section"),io=t("h3"),Hs=t("a"),ae=t("code"),zc=a("on:"),Bc=a(" directive"),Fc=c(),ee=t("div"),Zc=c(),po=t("p"),En=t("a"),Kc=a("Svelte REPL"),Qc=c(),co=t("p"),Xc=a("The output code:"),sr=c(),te=t("div"),nr=c(),ro=t("p"),ar=a("Some observations:"),er=c(),_n=t("ul"),fs=t("li"),tr=a("Svelte adds event handler, "),oe=t("code"),or=a("listen(...)"),lr=a(", in the "),ko=t("strong"),ir=a("_m_ount"),pr=a(" method."),cr=c(),ms=t("li"),rr=a("Svelte removes event handler, "),le=t("code"),kr=a("dispose()"),dr=a(", in the "),vo=t("strong"),vr=a("_d_estroy"),hr=a(" method."),ur=c(),gs=t("p"),yr=a("As pointed out in "),ie=t("a"),fr=a("Part 1 #listen and dispose"),mr=a(", to optimise for minification, the "),pe=t("code"),gr=a("dispose"),xr=a(" variable could be a function or an array of functions, depending on having one or many event handlers."),Er=c(),wn=t("p"),_r=a("We will discuss "),ce=t("code"),wr=a("remount"),br=a(" in the future, as it is related to remounting elements while reordering items within each block."),tl=c(),f=t("section"),ho=t("h4"),bn=t("a"),Cr=a("Event modifiers"),Dr=c(),uo=t("p"),Or=a("Event handlers can have modifiers that alter their behavior."),Tr=c(),re=t("div"),Pr=c(),yo=t("p"),Cn=t("a"),Sr=a("Svelte REPL"),Ir=c(),fo=t("p"),Lr=a("The output code:"),Ar=c(),ke=t("div"),jr=c(),mo=t("p"),Mr=a("Some observations:"),Hr=c(),xs=t("ul"),go=t("li"),Nr=a("Svelte handles different modifiers differently."),$r=c(),P=t("li"),Vr=a("For "),de=t("code"),Rr=a("capture"),Ur=a(", "),ve=t("code"),Wr=a("once"),Yr=a(", and "),he=t("code"),Gr=a("passive"),Jr=a(" modifiers, which they are part of the options for "),Dn=t("a"),qr=a("element.addEventListener"),zr=a(", they will be passed as options into the "),ue=t("code"),Br=a("listen"),Fr=a(" function."),Zr=c(),B=t("li"),Kr=a("For "),ye=t("code"),Qr=a("stopPropagation"),Xr=a(", "),fe=t("code"),sk=a("preventDefault"),nk=a(", and "),me=t("code"),ak=a("self"),ek=a(" modifiers, the event handler is decorated with respective decorator functions."),tk=c(),On=t("p"),ok=a("An example implementation of the "),ge=t("code"),lk=a("prevent_default"),ik=a(" decorator function:"),pk=c(),xe=t("div"),ol=c(),b=t("section"),xo=t("h3"),Ns=t("a"),Ee=t("code"),ck=a("bind:"),rk=a(" directive"),kk=c(),_e=t("div"),dk=c(),Eo=t("p"),Tn=t("a"),vk=a("Svelte REPL"),hk=c(),_o=t("p"),uk=a("The output code:"),yk=c(),we=t("div"),fk=c(),wo=t("p"),mk=a("Some observations:"),gk=c(),Pn=t("ul"),be=t("li"),xk=a("To synchronise the value of the variable to the property of the element:"),Sn=t("ul"),$s=t("li"),Ek=a("Svelte wraps the update of the variable "),Ce=t("code"),_k=a("checked"),wk=a(" with "),De=t("code"),bk=a("$$invalidate(...)"),Ck=c(),V=t("li"),Dk=a("In the "),bo=t("strong"),Ok=a("u_p_date"),Tk=a(" method, if the variable "),Oe=t("code"),Pk=a("checked"),Sk=a(" is updated, Svelte sets "),Te=t("code"),Ik=a("input.checked"),Lk=a(" to the value of the variable "),Pe=t("code"),Ak=a("checked"),jk=a("."),Mk=c(),Se=t("li"),Hk=a("To syncrhonise the property of the element to the variable"),In=t("ul"),Es=t("li"),Nk=a("Svelte creates an input handler that reads the "),Ie=t("code"),$k=a("this.checked"),Vk=a(" property of the input and calls "),Le=t("code"),Rk=a("$$invalidate(...)"),Uk=a(" to update it."),Wk=c(),R=t("li"),Yk=a("Svelte sets up "),Ae=t("code"),Gk=a("listen(...)"),Jk=a(" in the "),Co=t("strong"),qk=a("_m_ount"),zk=a(" method and "),je=t("code"),Bk=a("dispose(...)"),Fk=a(" in the "),Do=t("strong"),Zk=a("_d_estroy"),Kk=a(" method for the input handler"),ll=c(),C=t("section"),Oo=t("h3"),Vs=t("a"),Me=t("code"),Qk=a("use:"),Xk=a(" directive"),sd=c(),He=t("div"),nd=c(),To=t("p"),Ln=t("a"),ad=a("Svelte REPL"),ed=c(),Po=t("p"),td=a("The output code:"),od=c(),Ne=t("div"),ld=c(),So=t("p"),id=a("Some observations:"),pd=c(),_s=t("ul"),F=t("li"),cd=a("Creating "),$e=t("code"),rd=a("action_action"),kd=a(" object by calling the "),Ve=t("code"),dd=a("action"),vd=a(" function in the "),Io=t("strong"),hd=a("_m_out"),ud=a(" method"),yd=c(),ws=t("li"),fd=a("When the paramter change, call the "),Re=t("code"),md=a("action_action.update"),gd=a(" method with the updated parameter in the "),Lo=t("strong"),xd=a("u_p_date"),Ed=a(" method"),_d=c(),Y=t("li"),Ue=t("code"),wd=a("action_destroyer"),bd=a(" returns the "),We=t("code"),Cd=a("dispose"),Dd=a(" function. The "),Ye=t("code"),Od=a("dispose"),Td=a(" function makes sure that "),Ge=t("code"),Pd=a("action_action.destroy"),Sd=a(" is a function before calling it."),il=c(),v=t("section"),Ao=t("h3"),An=t("a"),Id=a("The order of directives"),Ld=c(),bs=t("p"),Ad=a("As both the "),Je=t("code"),jd=a("bind:"),Md=a(" and the "),qe=t("code"),Hd=a("on:"),Nd=a(" directives add event listeners to the element, the order of adding event listener may have nuance side effects."),$d=c(),jo=t("p"),Vd=a("Imagine the following scenario:"),Rd=c(),ze=t("div"),Ud=c(),Z=t("p"),Wd=a("The "),Be=t("code"),Yd=a("input.value"),Gd=a(" accessed by the implicit event handler of the "),Fe=t("code"),Jd=a("bind:"),qd=a(" directive depends on whether "),Ze=t("code"),zd=a("on:input"),Bd=a(" handler gets called before or after."),Fd=c(),Cs=t("p"),Zd=a("If the implicit event handler of the "),Ke=t("code"),Kd=a("bind:"),Qd=a(" directive is called before the event handler, the bound value is the value of the input before applying the "),Qe=t("code"),Xd=a("toUpperCase()"),sv=a(" transformation."),nv=c(),jn=t("p"),av=a("Although "),Xe=t("code"),ev=a("action:"),tv=a(" directive itself does not add event listener to the element, but it is possible to be added by the user code:"),ov=c(),st=t("div"),lv=c(),Ds=t("p"),iv=a("Although it is not officially documented, "),Mo=t("em"),pv=a("(I couldn't find it on the docs)"),cv=a(", "),K=t("strong"),rv=a("the order of declaring the directives "),nt=t("code"),kv=a("on:"),dv=a(", "),at=t("code"),vv=a("bind:"),hv=a(" and "),et=t("code"),uv=a("use:"),yv=a(" on an element does matter"),fv=a(" to provide a consistent behavior."),mv=c(),Ho=t("p"),gv=a("Try out the following example in the REPL:"),xv=c(),tt=t("div"),Ev=c(),No=t("p"),Mn=t("a"),_v=a("Svelte REPL"),wv=c(),Q=t("p"),bv=a("Try reordering the "),ot=t("code"),Cv=a("bind:"),Dv=a(", "),lt=t("code"),Ov=a("on:"),Tv=a(" and "),it=t("code"),Pv=a("use:"),Sv=a(" directives and see how it affects the output JS:"),Iv=c(),pt=t("div"),Lv=c(),Hn=t("p"),Av=a("If you are interested to learn more about ordering directives, the edge cases it fixed and the regression bugs it caused, you can start with "),Nn=t("a"),jv=a("this Github issue"),Mv=a("."),pl=c(),D=t("section"),$o=t("h2"),$n=t("a"),Hv=a("Closing Note"),Nv=c(),X=t("p"),$v=a("In this article, we explored how "),ct=t("code"),Vv=a("on:"),Rv=a(", "),rt=t("code"),Uv=a("bind:"),Wv=a(" and "),kt=t("code"),Yv=a("use:"),Gv=a(" directives work."),Jv=c(),Vo=t("p"),qv=a("We first looked at how we can implement them without using any framework. After that, we walked through how Svelte compiles the directives into JavaScript."),zv=c(),Ro=t("p"),Bv=a("We've also talked about how the order of declaring directives on an element matters."),Fv=c(),Vn=t("p"),Zv=a("If you wish to know more, "),Rn=t("a"),Kv=a("follow me on Twitter"),Qv=a("."),Xv=c(),ss=t("p"),sh=a("I'll post it on Twitter when the next part is ready, where I'll be covering "),Un=t("a"),nh=a("logic blocks"),ah=a(", "),Wn=t("a"),eh=a("slots"),th=a(", "),Yn=t("a"),oh=a("context"),lh=a(", and many others."),ih=c(),Uo=t("p"),Gn=t("strong"),ph=a("\u2B05 \u2B05  Previously in "),dt=t("a"),ch=a("Part 2"),rh=a("."),this.h()},l(p){g=o(p,"P",{});var k=l(g);S=o(k,"STRONG",{});var cl=l(S);ds=e(cl,"\u2B05 \u2B05  Previously in "),ns=o(cl,"A",{href:!0});var Ph=l(ns);_=e(Ph,"Part 2"),Ph.forEach(n),J=e(cl,"."),cl.forEach(n),k.forEach(n),Fs=r(p),q=o(p,"P",{});var Jn=l(q);Fn=o(Jn,"A",{href:!0});var Sh=l(Fn);Il=e(Sh,"Previously"),Sh.forEach(n),Ll=e(Jn,", I detailed how "),Zn=o(Jn,"CODE",{class:!0});var Ih=l(Zn);Al=e(Ih,"$$invalidate"),Ih.forEach(n),jl=e(Jn," works, described how bitmask was used in "),Kn=o(Jn,"CODE",{class:!0});var Lh=l(Kn);Ml=e(Lh,"$$invalidate"),Lh.forEach(n),Hl=e(Jn,", and explained how reactive declarations work as well."),Jn.forEach(n),Yo=r(p),Qn=o(p,"P",{});var Ah=l(Qn);Nl=e(Ah,"In this article, we are going to look into 3 DOM related directives:"),Ah.forEach(n),Go=r(p),as=o(p,"UL",{});var vt=l(as);Xn=o(vt,"LI",{});var kh=l(Xn);sa=o(kh,"CODE",{class:!0});var jh=l(sa);$l=e(jh,"on:"),jh.forEach(n),Vl=e(kh," for event handlers"),kh.forEach(n),Rl=r(vt),na=o(vt,"LI",{});var dh=l(na);aa=o(dh,"CODE",{class:!0});var Mh=l(aa);Ul=e(Mh,"bind:"),Mh.forEach(n),Wl=e(dh," for bindings"),dh.forEach(n),Yl=r(vt),ea=o(vt,"LI",{});var vh=l(ea);ta=o(vh,"CODE",{class:!0});var Hh=l(ta);Gl=e(Hh,"use:"),Hh.forEach(n),Jl=e(vh," for actions"),vh.forEach(n),vt.forEach(n),Jo=r(p),oa=o(p,"P",{});var Nh=l(oa);ql=e(Nh,"To make sure we are on the same page, let's first explain how these 3 directives work."),Nh.forEach(n),qo=r(p),la=o(p,"SECTION",{});var $h=l(la);St=o($h,"H2",{});var Vh=l(St);U=o(Vh,"A",{href:!0,id:!0});var qn=l(U);zl=e(qn,"The "),ia=o(qn,"CODE",{class:!0});var Rh=l(ia);Bl=e(Rh,"on:"),Rh.forEach(n),Fl=e(qn,", "),pa=o(qn,"CODE",{class:!0});var Uh=l(pa);Zl=e(Uh,"bind:"),Uh.forEach(n),Kl=e(qn," and "),ca=o(qn,"CODE",{class:!0});var Wh=l(ca);Ql=e(Wh,"use:"),Wh.forEach(n),qn.forEach(n),Vh.forEach(n),$h.forEach(n),zo=r(p),es=o(p,"SECTION",{});var ht=l(es);It=o(ht,"H3",{});var Yh=l(It);Ts=o(Yh,"A",{href:!0,id:!0});var hh=l(Ts);ra=o(hh,"CODE",{class:!0});var Gh=l(ra);Xl=e(Gh,"on:"),Gh.forEach(n),si=e(hh," event handlers"),hh.forEach(n),Yh.forEach(n),ni=r(ht),Zs=o(ht,"P",{});var rl=l(Zs);ai=e(rl,"You can use the "),ka=o(rl,"CODE",{class:!0});var Jh=l(ka);ei=e(Jh,"on:"),Jh.forEach(n),ti=e(rl," directive to listen to any event on an element:"),rl.forEach(n),oi=r(ht),da=o(ht,"DIV",{class:!0});var Sm=l(da);Sm.forEach(n),ht.forEach(n),Bo=r(p),W=o(p,"SECTION",{});var Rs=l(W);Lt=o(Rs,"H3",{});var qh=l(Lt);Ps=o(qh,"A",{href:!0,id:!0});var uh=l(Ps);va=o(uh,"CODE",{class:!0});var zh=l(va);li=e(zh,"bind:"),zh.forEach(n),ii=e(uh," bindings"),uh.forEach(n),qh.forEach(n),pi=r(Rs),Ks=o(Rs,"P",{});var kl=l(Ks);ci=e(kl,"The "),ha=o(kl,"CODE",{class:!0});var Bh=l(ha);ri=e(Bh,"bind:"),Bh.forEach(n),ki=e(kl," directive allows you to bind a variable to a property of an element."),kl.forEach(n),di=r(Rs),At=o(Rs,"P",{});var Fh=l(At);vi=e(Fh,"Updating the variable will modifying the property of the element, conversely, modifying the property of the element via interacting with the element will, in turn, update the variable."),Fh.forEach(n),hi=r(Rs),ua=o(Rs,"DIV",{class:!0});var Im=l(ua);Im.forEach(n),Rs.forEach(n),Fo=r(p),y=o(p,"SECTION",{});var E=l(y);jt=o(E,"H3",{});var Zh=l(jt);Ss=o(Zh,"A",{href:!0,id:!0});var yh=l(Ss);ya=o(yh,"CODE",{class:!0});var Kh=l(ya);ui=e(Kh,"use:"),Kh.forEach(n),yi=e(yh," actions"),yh.forEach(n),Zh.forEach(n),fi=r(E),vs=o(E,"P",{});var ut=l(vs);mi=e(ut,"The "),fa=o(ut,"CODE",{class:!0});var Qh=l(fa);gi=e(Qh,"use:"),Qh.forEach(n),xi=e(ut," directive is called "),Mt=o(ut,"STRONG",{});var Xh=l(Mt);Qs=o(Xh,"A",{href:!0,rel:!0});var su=l(Qs);Ei=e(su,'"Action"'),su.forEach(n),Xh.forEach(n),_i=e(ut,". It provides you an interface to enhance your element."),ut.forEach(n),wi=r(E),Xs=o(E,"P",{});var dl=l(Xs);bi=e(dl,"You pass a function to the "),ma=o(dl,"CODE",{class:!0});var nu=l(ma);Ci=e(nu,"use:"),nu.forEach(n),Di=e(dl," directive of an element and the function will be called when your element is mounted."),dl.forEach(n),Oi=r(E),sn=o(E,"P",{});var vl=l(sn);Ti=e(vl,"The function should return an object in which the "),ga=o(vl,"CODE",{class:!0});var au=l(ga);Pi=e(au,"destroy"),au.forEach(n),Si=e(vl," method of the object will be called when the element is unmounted."),vl.forEach(n),Ii=r(E),xa=o(E,"DIV",{class:!0});var Lm=l(xa);Lm.forEach(n),Li=r(E),Ht=o(E,"P",{});var eu=l(Ht);Ai=e(eu,"This is useful when you want to interface with 3rd-party libraries:"),eu.forEach(n),ji=r(E),Ea=o(E,"DIV",{class:!0});var Am=l(Ea);Am.forEach(n),Mi=r(E),nn=o(E,"P",{});var hl=l(nn);Hi=e(hl,"You can pass in parameters to the "),_a=o(hl,"CODE",{class:!0});var tu=l(_a);Ni=e(tu,"use:"),tu.forEach(n),$i=e(hl," directive, to bring in reactivity into your actions"),hl.forEach(n),Vi=r(E),wa=o(E,"DIV",{class:!0});var jm=l(wa);jm.forEach(n),Ri=r(E),Nt=o(E,"P",{});var ou=l(Nt);Ui=e(ou,"You can visit Svelte's interactive tutorial to learn more about:"),ou.forEach(n),Wi=r(E),hs=o(E,"UL",{});var yt=l(hs);$t=o(yt,"LI",{});var lu=l($t);Is=o(lu,"A",{href:!0,rel:!0});var fh=l(Is);Yi=e(fh,"event handlers with "),ba=o(fh,"CODE",{class:!0});var iu=l(ba);Gi=e(iu,"on:"),iu.forEach(n),fh.forEach(n),lu.forEach(n),Ji=r(yt),Vt=o(yt,"LI",{});var pu=l(Vt);Ls=o(pu,"A",{href:!0,rel:!0});var mh=l(Ls);qi=e(mh,"bindings with "),Ca=o(mh,"CODE",{class:!0});var cu=l(Ca);zi=e(cu,"bind:"),cu.forEach(n),mh.forEach(n),pu.forEach(n),Bi=r(yt),Rt=o(yt,"LI",{});var ru=l(Rt);As=o(ru,"A",{href:!0,rel:!0});var gh=l(As);Fi=e(gh,"actions with "),Da=o(gh,"CODE",{class:!0});var ku=l(Da);Zi=e(ku,"use:"),ku.forEach(n),gh.forEach(n),ru.forEach(n),yt.forEach(n),E.forEach(n),Zo=r(p),js=o(p,"SECTION",{});var ul=l(js);Ut=o(ul,"H2",{});var du=l(Ut);an=o(du,"A",{href:!0,id:!0});var vu=l(an);Ki=e(vu,"The Vanilla JS"),vu.forEach(n),du.forEach(n),Qi=r(ul),Wt=o(ul,"P",{});var hu=l(Wt);Xi=e(hu,"Now, let's refresh ourselves with how we can implement an event handler, bindings, and actions without using any framework."),hu.forEach(n),ul.forEach(n),Ko=r(p),I=o(p,"SECTION",{});var ls=l(I);Yt=o(ls,"H3",{});var uu=l(Yt);en=o(uu,"A",{href:!0,id:!0});var yu=l(en);sp=e(yu,"Event handler"),yu.forEach(n),uu.forEach(n),np=r(ls),us=o(ls,"P",{});var ft=l(us);ap=e(ft,"As "),Oa=o(ft,"A",{href:!0});var fu=l(Oa);ep=e(fu,"mentioned in the Part 1 of the series"),fu.forEach(n),tp=e(ft,", we can use "),tn=o(ft,"A",{href:!0,rel:!0});var mu=l(tn);op=e(mu,"element.addEventListener"),mu.forEach(n),lp=e(ft," to listen to events."),ft.forEach(n),ip=r(ls),Ta=o(ls,"DIV",{class:!0});var Mm=l(Ta);Mm.forEach(n),pp=r(ls),Gt=o(ls,"P",{});var gu=l(Gt);cp=e(gu,"The event listener takes in an optional 3rd argument, which allows you to specifies the characteristics of the event handler:"),gu.forEach(n),rp=r(ls),Pa=o(ls,"DIV",{class:!0});var Hm=l(Pa);Hm.forEach(n),ls.forEach(n),Qo=r(p),ts=o(p,"SECTION",{});var mt=l(ts);Jt=o(mt,"H4",{});var xu=l(Jt);on=o(xu,"A",{href:!0,id:!0});var Eu=l(on);kp=e(Eu,"event.preventDefault"),Eu.forEach(n),xu.forEach(n),dp=r(mt),os=o(mt,"P",{});var zn=l(os);ln=o(zn,"A",{href:!0,rel:!0});var _u=l(ln);vp=e(_u,"event.preventDefault"),_u.forEach(n),hp=e(zn," allows you to prevent the default behavior of the event, for example submitting form for "),Sa=o(zn,"CODE",{class:!0});var wu=l(Sa);up=e(wu,'<button type="submit" />'),wu.forEach(n),yp=e(zn," or navigating to the target for "),Ia=o(zn,"CODE",{class:!0});var bu=l(Ia);fp=e(bu,'<a href="...">'),bu.forEach(n),mp=e(zn,"."),zn.forEach(n),gp=r(mt),La=o(mt,"DIV",{class:!0});var Nm=l(La);Nm.forEach(n),mt.forEach(n),Xo=r(p),L=o(p,"SECTION",{});var is=l(L);qt=o(is,"H4",{});var Cu=l(qt);pn=o(Cu,"A",{href:!0,id:!0});var Du=l(pn);xp=e(Du,"event.stopPropagation"),Du.forEach(n),Cu.forEach(n),Ep=r(is),Aa=o(is,"P",{});var xh=l(Aa);cn=o(xh,"A",{href:!0,rel:!0});var Ou=l(cn);_p=e(Ou,"event.stopPropagation"),Ou.forEach(n),wp=e(xh," allows you to prevent event to continue propagate."),xh.forEach(n),bp=r(is),ja=o(is,"DIV",{class:!0});var $m=l(ja);$m.forEach(n),Cp=r(is),T=o(is,"P",{});var j=l(T);Dp=e(j,"To remove the event listener, you need to call "),Ma=o(j,"CODE",{class:!0});var Tu=l(Ma);Op=e(Tu,"element.removeEventListener"),Tu.forEach(n),Tp=e(j," with the same event "),Ha=o(j,"CODE",{class:!0});var Pu=l(Ha);Pp=e(Pu,"type"),Pu.forEach(n),Sp=e(j,", "),Na=o(j,"CODE",{class:!0});var Su=l(Na);Ip=e(Su,"listener"),Su.forEach(n),Lp=e(j," and "),$a=o(j,"CODE",{class:!0});var Iu=l($a);Ap=e(Iu,"capture"),Iu.forEach(n),jp=e(j,"/"),Va=o(j,"CODE",{class:!0});var Lu=l(Va);Mp=e(Lu,"useCapture"),Lu.forEach(n),Hp=e(j," flag. You can check out the "),rn=o(j,"A",{href:!0,rel:!0});var Au=l(rn);Np=e(Au,'MDN docs on "Matching event listeners for removal"'),Au.forEach(n),$p=e(j,"."),j.forEach(n),Vp=r(is),Ra=o(is,"DIV",{class:!0});var Vm=l(Ra);Vm.forEach(n),is.forEach(n),sl=r(p),u=o(p,"SECTION",{});var m=l(u);zt=o(m,"H3",{});var ju=l(zt);kn=o(ju,"A",{href:!0,id:!0});var Mu=l(kn);Rp=e(Mu,"Bindings"),Mu.forEach(n),ju.forEach(n),Up=r(m),Bt=o(m,"P",{});var Hu=l(Bt);Wp=e(Hu,"Binding is to synchronise between the value of a variable and a property of an element."),Hu.forEach(n),Yp=r(m),Ft=o(m,"P",{});var Nu=l(Ft);Gp=e(Nu,"To synchronise the variable to a property of an element, we need to observe the value of the variable. When it changes, apply it to the property of the element."),Nu.forEach(n),Jp=r(m),Zt=o(m,"P",{});var $u=l(Zt);dn=o($u,"EM",{});var yl=l(dn);qp=e(yl,"You can check out my previous article "),Ua=o(yl,"A",{href:!0});var Vu=l(Ua);zp=e(Vu,'"Reactivity in Web Frameworks"'),Vu.forEach(n),Bp=e(yl," on how we get notified when the value of a variable changed."),yl.forEach(n),$u.forEach(n),Fp=r(m),vn=o(m,"P",{});var fl=l(vn);Zp=e(fl,"On the other hand, to synchronise the property of an element to a variable, we "),Kt=o(fl,"STRONG",{});var Ru=l(Kt);Kp=e(Ru,"listen to an event of the element"),Ru.forEach(n),Qp=e(fl,", depending on the property, and update the value of the variable when it happens."),fl.forEach(n),Xp=r(m),Wa=o(m,"DIV",{class:!0});var Rm=l(Wa);Rm.forEach(n),sc=r(m),Qt=o(m,"P",{});var Uu=l(Qt);nc=e(Uu,"Some observations:"),Uu.forEach(n),ac=r(m),Xt=o(m,"P",{});var Wu=l(Xt);so=o(Wu,"STRONG",{});var Yu=l(so);ec=e(Yu,"- The name of the event and the property name of the element may not be the same."),Yu.forEach(n),Wu.forEach(n),tc=r(m),ys=o(m,"P",{});var gt=l(ys);oc=e(gt,"In this example, we listen to "),Ya=o(gt,"CODE",{class:!0});var Gu=l(Ya);lc=e(Gu,'"change"'),Gu.forEach(n),ic=e(gt," event for the checkbox "),Ga=o(gt,"CODE",{class:!0});var Ju=l(Ga);pc=e(Ju,"checked"),Ju.forEach(n),cc=e(gt," property."),gt.forEach(n),rc=r(m),no=o(m,"P",{});var qu=l(no);ao=o(qu,"STRONG",{});var zu=l(ao);kc=e(zu,"- It is almost impossible to bind a property of an element, if there's no event fired from the element to indicate the property has changed"),zu.forEach(n),qu.forEach(n),dc=r(m),$=o(m,"P",{});var ps=l($);vc=e(ps,"A recent example I found out is the "),hn=o(ps,"A",{href:!0,rel:!0});var Bu=l(hn);hc=e(Bu,"HTMLDialogElement"),Bu.forEach(n),uc=e(ps,". It has "),un=o(ps,"A",{href:!0,rel:!0});var Fu=l(un);Ja=o(Fu,"CODE",{class:!0});var Zu=l(Ja);yc=e(Zu,'"close"'),Zu.forEach(n),Fu.forEach(n),fc=e(ps," but not "),qa=o(ps,"CODE",{class:!0});var Ku=l(qa);mc=e(Ku,'"open"'),Ku.forEach(n),gc=e(ps," event, which makes it hard to implement "),za=o(ps,"CODE",{class:!0});var Qu=l(za);xc=e(Qu,"bind:open"),Qu.forEach(n),Ec=e(ps," on the dialog element."),ps.forEach(n),_c=r(m),yn=o(m,"P",{});var ml=l(yn);wc=e(ml,"Maybe an alternative would be using "),fn=o(ml,"A",{href:!0,rel:!0});var Xu=l(fn);bc=e(Xu,"MutationObserver"),Xu.forEach(n),Cc=e(ml,", which I haven't seen any usage of it in Svelte codebase yet."),ml.forEach(n),m.forEach(n),nl=r(p),A=o(p,"SECTION",{});var cs=l(A);eo=o(cs,"H3",{});var sy=l(eo);mn=o(sy,"A",{href:!0,id:!0});var ny=l(mn);Dc=e(ny,"Actions"),ny.forEach(n),sy.forEach(n),Oc=r(cs),to=o(cs,"P",{});var ay=l(to);Tc=e(ay,"Action is a function that gets called when your element is created and mounted onto the DOM."),ay.forEach(n),Pc=r(cs),oo=o(cs,"P",{});var ey=l(oo);Sc=e(ey,"The function returns an object, with 2 methods:"),ey.forEach(n),Ic=r(cs),gn=o(cs,"UL",{});var gl=l(gn);Ba=o(gl,"LI",{});var Eh=l(Ba);Fa=o(Eh,"CODE",{class:!0});var ty=l(Fa);Lc=e(ty,"update"),ty.forEach(n),Ac=e(Eh,", which gets called when the parameters change"),Eh.forEach(n),jc=r(gl),Za=o(gl,"LI",{});var _h=l(Za);Ka=o(_h,"CODE",{class:!0});var oy=l(Ka);Mc=e(oy,"destroy"),oy.forEach(n),Hc=e(_h,", which gets called when the element is removed from the DOM"),_h.forEach(n),gl.forEach(n),Nc=r(cs),Qa=o(cs,"DIV",{class:!0});var Um=l(Qa);Um.forEach(n),cs.forEach(n),al=r(p),Ms=o(p,"SECTION",{});var xl=l(Ms);lo=o(xl,"H2",{});var ly=l(lo);xn=o(ly,"A",{href:!0,id:!0});var iy=l(xn);$c=e(iy,"The Compiled JS"),iy.forEach(n),ly.forEach(n),Vc=r(xl),z=o(xl,"P",{});var Us=l(z);Rc=e(Us,"Now let's take look at how Svelte compiles "),Xa=o(Us,"CODE",{class:!0});var py=l(Xa);Uc=e(py,"on:"),py.forEach(n),Wc=e(Us,", "),se=o(Us,"CODE",{class:!0});var cy=l(se);Yc=e(cy,"bind:"),cy.forEach(n),Gc=e(Us," and "),ne=o(Us,"CODE",{class:!0});var ry=l(ne);Jc=e(ry,"use:"),ry.forEach(n),qc=e(Us," directives into output JavaScript."),Us.forEach(n),xl.forEach(n),el=r(p),x=o(p,"SECTION",{});var O=l(x);io=o(O,"H3",{});var ky=l(io);Hs=o(ky,"A",{href:!0,id:!0});var wh=l(Hs);ae=o(wh,"CODE",{class:!0});var dy=l(ae);zc=e(dy,"on:"),dy.forEach(n),Bc=e(wh," directive"),wh.forEach(n),ky.forEach(n),Fc=r(O),ee=o(O,"DIV",{class:!0});var Wm=l(ee);Wm.forEach(n),Zc=r(O),po=o(O,"P",{});var vy=l(po);En=o(vy,"A",{href:!0,rel:!0});var hy=l(En);Kc=e(hy,"Svelte REPL"),hy.forEach(n),vy.forEach(n),Qc=r(O),co=o(O,"P",{});var uy=l(co);Xc=e(uy,"The output code:"),uy.forEach(n),sr=r(O),te=o(O,"DIV",{class:!0});var Ym=l(te);Ym.forEach(n),nr=r(O),ro=o(O,"P",{});var yy=l(ro);ar=e(yy,"Some observations:"),yy.forEach(n),er=r(O),_n=o(O,"UL",{});var El=l(_n);fs=o(El,"LI",{});var xt=l(fs);tr=e(xt,"Svelte adds event handler, "),oe=o(xt,"CODE",{class:!0});var fy=l(oe);or=e(fy,"listen(...)"),fy.forEach(n),lr=e(xt,", in the "),ko=o(xt,"STRONG",{});var my=l(ko);ir=e(my,"_m_ount"),my.forEach(n),pr=e(xt," method."),xt.forEach(n),cr=r(El),ms=o(El,"LI",{});var Et=l(ms);rr=e(Et,"Svelte removes event handler, "),le=o(Et,"CODE",{class:!0});var gy=l(le);kr=e(gy,"dispose()"),gy.forEach(n),dr=e(Et,", in the "),vo=o(Et,"STRONG",{});var xy=l(vo);vr=e(xy,"_d_estroy"),xy.forEach(n),hr=e(Et," method."),Et.forEach(n),El.forEach(n),ur=r(O),gs=o(O,"P",{});var _t=l(gs);yr=e(_t,"As pointed out in "),ie=o(_t,"A",{href:!0});var Ey=l(ie);fr=e(Ey,"Part 1 #listen and dispose"),Ey.forEach(n),mr=e(_t,", to optimise for minification, the "),pe=o(_t,"CODE",{class:!0});var _y=l(pe);gr=e(_y,"dispose"),_y.forEach(n),xr=e(_t," variable could be a function or an array of functions, depending on having one or many event handlers."),_t.forEach(n),Er=r(O),wn=o(O,"P",{});var _l=l(wn);_r=e(_l,"We will discuss "),ce=o(_l,"CODE",{class:!0});var wy=l(ce);wr=e(wy,"remount"),wy.forEach(n),br=e(_l," in the future, as it is related to remounting elements while reordering items within each block."),_l.forEach(n),O.forEach(n),tl=r(p),f=o(p,"SECTION",{});var w=l(f);ho=o(w,"H4",{});var by=l(ho);bn=o(by,"A",{href:!0,id:!0});var Cy=l(bn);Cr=e(Cy,"Event modifiers"),Cy.forEach(n),by.forEach(n),Dr=r(w),uo=o(w,"P",{});var Dy=l(uo);Or=e(Dy,"Event handlers can have modifiers that alter their behavior."),Dy.forEach(n),Tr=r(w),re=o(w,"DIV",{class:!0});var Gm=l(re);Gm.forEach(n),Pr=r(w),yo=o(w,"P",{});var Oy=l(yo);Cn=o(Oy,"A",{href:!0,rel:!0});var Ty=l(Cn);Sr=e(Ty,"Svelte REPL"),Ty.forEach(n),Oy.forEach(n),Ir=r(w),fo=o(w,"P",{});var Py=l(fo);Lr=e(Py,"The output code:"),Py.forEach(n),Ar=r(w),ke=o(w,"DIV",{class:!0});var Jm=l(ke);Jm.forEach(n),jr=r(w),mo=o(w,"P",{});var Sy=l(mo);Mr=e(Sy,"Some observations:"),Sy.forEach(n),Hr=r(w),xs=o(w,"UL",{});var wt=l(xs);go=o(wt,"LI",{});var Iy=l(go);Nr=e(Iy,"Svelte handles different modifiers differently."),Iy.forEach(n),$r=r(wt),P=o(wt,"LI",{});var G=l(P);Vr=e(G,"For "),de=o(G,"CODE",{class:!0});var Ly=l(de);Rr=e(Ly,"capture"),Ly.forEach(n),Ur=e(G,", "),ve=o(G,"CODE",{class:!0});var Ay=l(ve);Wr=e(Ay,"once"),Ay.forEach(n),Yr=e(G,", and "),he=o(G,"CODE",{class:!0});var jy=l(he);Gr=e(jy,"passive"),jy.forEach(n),Jr=e(G," modifiers, which they are part of the options for "),Dn=o(G,"A",{href:!0,rel:!0});var My=l(Dn);qr=e(My,"element.addEventListener"),My.forEach(n),zr=e(G,", they will be passed as options into the "),ue=o(G,"CODE",{class:!0});var Hy=l(ue);Br=e(Hy,"listen"),Hy.forEach(n),Fr=e(G," function."),G.forEach(n),Zr=r(wt),B=o(wt,"LI",{});var Ws=l(B);Kr=e(Ws,"For "),ye=o(Ws,"CODE",{class:!0});var Ny=l(ye);Qr=e(Ny,"stopPropagation"),Ny.forEach(n),Xr=e(Ws,", "),fe=o(Ws,"CODE",{class:!0});var $y=l(fe);sk=e($y,"preventDefault"),$y.forEach(n),nk=e(Ws,", and "),me=o(Ws,"CODE",{class:!0});var Vy=l(me);ak=e(Vy,"self"),Vy.forEach(n),ek=e(Ws," modifiers, the event handler is decorated with respective decorator functions."),Ws.forEach(n),wt.forEach(n),tk=r(w),On=o(w,"P",{});var wl=l(On);ok=e(wl,"An example implementation of the "),ge=o(wl,"CODE",{class:!0});var Ry=l(ge);lk=e(Ry,"prevent_default"),Ry.forEach(n),ik=e(wl," decorator function:"),wl.forEach(n),pk=r(w),xe=o(w,"DIV",{class:!0});var qm=l(xe);qm.forEach(n),w.forEach(n),ol=r(p),b=o(p,"SECTION",{});var M=l(b);xo=o(M,"H3",{});var Uy=l(xo);Ns=o(Uy,"A",{href:!0,id:!0});var bh=l(Ns);Ee=o(bh,"CODE",{class:!0});var Wy=l(Ee);ck=e(Wy,"bind:"),Wy.forEach(n),rk=e(bh," directive"),bh.forEach(n),Uy.forEach(n),kk=r(M),_e=o(M,"DIV",{class:!0});var zm=l(_e);zm.forEach(n),dk=r(M),Eo=o(M,"P",{});var Yy=l(Eo);Tn=o(Yy,"A",{href:!0,rel:!0});var Gy=l(Tn);vk=e(Gy,"Svelte REPL"),Gy.forEach(n),Yy.forEach(n),hk=r(M),_o=o(M,"P",{});var Jy=l(_o);uk=e(Jy,"The output code:"),Jy.forEach(n),yk=r(M),we=o(M,"DIV",{class:!0});var Bm=l(we);Bm.forEach(n),fk=r(M),wo=o(M,"P",{});var qy=l(wo);mk=e(qy,"Some observations:"),qy.forEach(n),gk=r(M),Pn=o(M,"UL",{});var bl=l(Pn);be=o(bl,"LI",{});var Ch=l(be);xk=e(Ch,"To synchronise the value of the variable to the property of the element:"),Sn=o(Ch,"UL",{});var Cl=l(Sn);$s=o(Cl,"LI",{});var Wo=l($s);Ek=e(Wo,"Svelte wraps the update of the variable "),Ce=o(Wo,"CODE",{class:!0});var zy=l(Ce);_k=e(zy,"checked"),zy.forEach(n),wk=e(Wo," with "),De=o(Wo,"CODE",{class:!0});var By=l(De);bk=e(By,"$$invalidate(...)"),By.forEach(n),Wo.forEach(n),Ck=r(Cl),V=o(Cl,"LI",{});var rs=l(V);Dk=e(rs,"In the "),bo=o(rs,"STRONG",{});var Fy=l(bo);Ok=e(Fy,"u_p_date"),Fy.forEach(n),Tk=e(rs," method, if the variable "),Oe=o(rs,"CODE",{class:!0});var Zy=l(Oe);Pk=e(Zy,"checked"),Zy.forEach(n),Sk=e(rs," is updated, Svelte sets "),Te=o(rs,"CODE",{class:!0});var Ky=l(Te);Ik=e(Ky,"input.checked"),Ky.forEach(n),Lk=e(rs," to the value of the variable "),Pe=o(rs,"CODE",{class:!0});var Qy=l(Pe);Ak=e(Qy,"checked"),Qy.forEach(n),jk=e(rs,"."),rs.forEach(n),Cl.forEach(n),Ch.forEach(n),Mk=r(bl),Se=o(bl,"LI",{});var Dh=l(Se);Hk=e(Dh,"To syncrhonise the property of the element to the variable"),In=o(Dh,"UL",{});var Dl=l(In);Es=o(Dl,"LI",{});var bt=l(Es);Nk=e(bt,"Svelte creates an input handler that reads the "),Ie=o(bt,"CODE",{class:!0});var Xy=l(Ie);$k=e(Xy,"this.checked"),Xy.forEach(n),Vk=e(bt," property of the input and calls "),Le=o(bt,"CODE",{class:!0});var sf=l(Le);Rk=e(sf,"$$invalidate(...)"),sf.forEach(n),Uk=e(bt," to update it."),bt.forEach(n),Wk=r(Dl),R=o(Dl,"LI",{});var ks=l(R);Yk=e(ks,"Svelte sets up "),Ae=o(ks,"CODE",{class:!0});var nf=l(Ae);Gk=e(nf,"listen(...)"),nf.forEach(n),Jk=e(ks," in the "),Co=o(ks,"STRONG",{});var af=l(Co);qk=e(af,"_m_ount"),af.forEach(n),zk=e(ks," method and "),je=o(ks,"CODE",{class:!0});var ef=l(je);Bk=e(ef,"dispose(...)"),ef.forEach(n),Fk=e(ks," in the "),Do=o(ks,"STRONG",{});var tf=l(Do);Zk=e(tf,"_d_estroy"),tf.forEach(n),Kk=e(ks," method for the input handler"),ks.forEach(n),Dl.forEach(n),Dh.forEach(n),bl.forEach(n),M.forEach(n),ll=r(p),C=o(p,"SECTION",{});var H=l(C);Oo=o(H,"H3",{});var of=l(Oo);Vs=o(of,"A",{href:!0,id:!0});var Oh=l(Vs);Me=o(Oh,"CODE",{class:!0});var lf=l(Me);Qk=e(lf,"use:"),lf.forEach(n),Xk=e(Oh," directive"),Oh.forEach(n),of.forEach(n),sd=r(H),He=o(H,"DIV",{class:!0});var Fm=l(He);Fm.forEach(n),nd=r(H),To=o(H,"P",{});var pf=l(To);Ln=o(pf,"A",{href:!0,rel:!0});var cf=l(Ln);ad=e(cf,"Svelte REPL"),cf.forEach(n),pf.forEach(n),ed=r(H),Po=o(H,"P",{});var rf=l(Po);td=e(rf,"The output code:"),rf.forEach(n),od=r(H),Ne=o(H,"DIV",{class:!0});var Zm=l(Ne);Zm.forEach(n),ld=r(H),So=o(H,"P",{});var kf=l(So);id=e(kf,"Some observations:"),kf.forEach(n),pd=r(H),_s=o(H,"UL",{});var Ct=l(_s);F=o(Ct,"LI",{});var Ys=l(F);cd=e(Ys,"Creating "),$e=o(Ys,"CODE",{class:!0});var df=l($e);rd=e(df,"action_action"),df.forEach(n),kd=e(Ys," object by calling the "),Ve=o(Ys,"CODE",{class:!0});var vf=l(Ve);dd=e(vf,"action"),vf.forEach(n),vd=e(Ys," function in the "),Io=o(Ys,"STRONG",{});var hf=l(Io);hd=e(hf,"_m_out"),hf.forEach(n),ud=e(Ys," method"),Ys.forEach(n),yd=r(Ct),ws=o(Ct,"LI",{});var Dt=l(ws);fd=e(Dt,"When the paramter change, call the "),Re=o(Dt,"CODE",{class:!0});var uf=l(Re);md=e(uf,"action_action.update"),uf.forEach(n),gd=e(Dt," method with the updated parameter in the "),Lo=o(Dt,"STRONG",{});var yf=l(Lo);xd=e(yf,"u_p_date"),yf.forEach(n),Ed=e(Dt," method"),Dt.forEach(n),_d=r(Ct),Y=o(Ct,"LI",{});var Os=l(Y);Ue=o(Os,"CODE",{class:!0});var ff=l(Ue);wd=e(ff,"action_destroyer"),ff.forEach(n),bd=e(Os," returns the "),We=o(Os,"CODE",{class:!0});var mf=l(We);Cd=e(mf,"dispose"),mf.forEach(n),Dd=e(Os," function. The "),Ye=o(Os,"CODE",{class:!0});var gf=l(Ye);Od=e(gf,"dispose"),gf.forEach(n),Td=e(Os," function makes sure that "),Ge=o(Os,"CODE",{class:!0});var xf=l(Ge);Pd=e(xf,"action_action.destroy"),xf.forEach(n),Sd=e(Os," is a function before calling it."),Os.forEach(n),Ct.forEach(n),H.forEach(n),il=r(p),v=o(p,"SECTION",{});var h=l(v);Ao=o(h,"H3",{});var Ef=l(Ao);An=o(Ef,"A",{href:!0,id:!0});var _f=l(An);Id=e(_f,"The order of directives"),_f.forEach(n),Ef.forEach(n),Ld=r(h),bs=o(h,"P",{});var Ot=l(bs);Ad=e(Ot,"As both the "),Je=o(Ot,"CODE",{class:!0});var wf=l(Je);jd=e(wf,"bind:"),wf.forEach(n),Md=e(Ot," and the "),qe=o(Ot,"CODE",{class:!0});var bf=l(qe);Hd=e(bf,"on:"),bf.forEach(n),Nd=e(Ot," directives add event listeners to the element, the order of adding event listener may have nuance side effects."),Ot.forEach(n),$d=r(h),jo=o(h,"P",{});var Cf=l(jo);Vd=e(Cf,"Imagine the following scenario:"),Cf.forEach(n),Rd=r(h),ze=o(h,"DIV",{class:!0});var Km=l(ze);Km.forEach(n),Ud=r(h),Z=o(h,"P",{});var Gs=l(Z);Wd=e(Gs,"The "),Be=o(Gs,"CODE",{class:!0});var Df=l(Be);Yd=e(Df,"input.value"),Df.forEach(n),Gd=e(Gs," accessed by the implicit event handler of the "),Fe=o(Gs,"CODE",{class:!0});var Of=l(Fe);Jd=e(Of,"bind:"),Of.forEach(n),qd=e(Gs," directive depends on whether "),Ze=o(Gs,"CODE",{class:!0});var Tf=l(Ze);zd=e(Tf,"on:input"),Tf.forEach(n),Bd=e(Gs," handler gets called before or after."),Gs.forEach(n),Fd=r(h),Cs=o(h,"P",{});var Tt=l(Cs);Zd=e(Tt,"If the implicit event handler of the "),Ke=o(Tt,"CODE",{class:!0});var Pf=l(Ke);Kd=e(Pf,"bind:"),Pf.forEach(n),Qd=e(Tt," directive is called before the event handler, the bound value is the value of the input before applying the "),Qe=o(Tt,"CODE",{class:!0});var Sf=l(Qe);Xd=e(Sf,"toUpperCase()"),Sf.forEach(n),sv=e(Tt," transformation."),Tt.forEach(n),nv=r(h),jn=o(h,"P",{});var Ol=l(jn);av=e(Ol,"Although "),Xe=o(Ol,"CODE",{class:!0});var If=l(Xe);ev=e(If,"action:"),If.forEach(n),tv=e(Ol," directive itself does not add event listener to the element, but it is possible to be added by the user code:"),Ol.forEach(n),ov=r(h),st=o(h,"DIV",{class:!0});var Qm=l(st);Qm.forEach(n),lv=r(h),Ds=o(h,"P",{});var Pt=l(Ds);iv=e(Pt,"Although it is not officially documented, "),Mo=o(Pt,"EM",{});var Lf=l(Mo);pv=e(Lf,"(I couldn't find it on the docs)"),Lf.forEach(n),cv=e(Pt,", "),K=o(Pt,"STRONG",{});var Js=l(K);rv=e(Js,"the order of declaring the directives "),nt=o(Js,"CODE",{class:!0});var Af=l(nt);kv=e(Af,"on:"),Af.forEach(n),dv=e(Js,", "),at=o(Js,"CODE",{class:!0});var jf=l(at);vv=e(jf,"bind:"),jf.forEach(n),hv=e(Js," and "),et=o(Js,"CODE",{class:!0});var Mf=l(et);uv=e(Mf,"use:"),Mf.forEach(n),yv=e(Js," on an element does matter"),Js.forEach(n),fv=e(Pt," to provide a consistent behavior."),Pt.forEach(n),mv=r(h),Ho=o(h,"P",{});var Hf=l(Ho);gv=e(Hf,"Try out the following example in the REPL:"),Hf.forEach(n),xv=r(h),tt=o(h,"DIV",{class:!0});var Xm=l(tt);Xm.forEach(n),Ev=r(h),No=o(h,"P",{});var Nf=l(No);Mn=o(Nf,"A",{href:!0,rel:!0});var $f=l(Mn);_v=e($f,"Svelte REPL"),$f.forEach(n),Nf.forEach(n),wv=r(h),Q=o(h,"P",{});var qs=l(Q);bv=e(qs,"Try reordering the "),ot=o(qs,"CODE",{class:!0});var Vf=l(ot);Cv=e(Vf,"bind:"),Vf.forEach(n),Dv=e(qs,", "),lt=o(qs,"CODE",{class:!0});var Rf=l(lt);Ov=e(Rf,"on:"),Rf.forEach(n),Tv=e(qs," and "),it=o(qs,"CODE",{class:!0});var Uf=l(it);Pv=e(Uf,"use:"),Uf.forEach(n),Sv=e(qs," directives and see how it affects the output JS:"),qs.forEach(n),Iv=r(h),pt=o(h,"DIV",{class:!0});var sg=l(pt);sg.forEach(n),Lv=r(h),Hn=o(h,"P",{});var Tl=l(Hn);Av=e(Tl,"If you are interested to learn more about ordering directives, the edge cases it fixed and the regression bugs it caused, you can start with "),Nn=o(Tl,"A",{href:!0,rel:!0});var Wf=l(Nn);jv=e(Wf,"this Github issue"),Wf.forEach(n),Mv=e(Tl,"."),Tl.forEach(n),h.forEach(n),pl=r(p),D=o(p,"SECTION",{});var N=l(D);$o=o(N,"H2",{});var Yf=l($o);$n=o(Yf,"A",{href:!0,id:!0});var Gf=l($n);Hv=e(Gf,"Closing Note"),Gf.forEach(n),Yf.forEach(n),Nv=r(N),X=o(N,"P",{});var zs=l(X);$v=e(zs,"In this article, we explored how "),ct=o(zs,"CODE",{class:!0});var Jf=l(ct);Vv=e(Jf,"on:"),Jf.forEach(n),Rv=e(zs,", "),rt=o(zs,"CODE",{class:!0});var qf=l(rt);Uv=e(qf,"bind:"),qf.forEach(n),Wv=e(zs," and "),kt=o(zs,"CODE",{class:!0});var zf=l(kt);Yv=e(zf,"use:"),zf.forEach(n),Gv=e(zs," directives work."),zs.forEach(n),Jv=r(N),Vo=o(N,"P",{});var Bf=l(Vo);qv=e(Bf,"We first looked at how we can implement them without using any framework. After that, we walked through how Svelte compiles the directives into JavaScript."),Bf.forEach(n),zv=r(N),Ro=o(N,"P",{});var Ff=l(Ro);Bv=e(Ff,"We've also talked about how the order of declaring directives on an element matters."),Ff.forEach(n),Fv=r(N),Vn=o(N,"P",{});var Pl=l(Vn);Zv=e(Pl,"If you wish to know more, "),Rn=o(Pl,"A",{href:!0,rel:!0});var Zf=l(Rn);Kv=e(Zf,"follow me on Twitter"),Zf.forEach(n),Qv=e(Pl,"."),Pl.forEach(n),Xv=r(N),ss=o(N,"P",{});var Bs=l(ss);sh=e(Bs,"I'll post it on Twitter when the next part is ready, where I'll be covering "),Un=o(Bs,"A",{href:!0,rel:!0});var Kf=l(Un);nh=e(Kf,"logic blocks"),Kf.forEach(n),ah=e(Bs,", "),Wn=o(Bs,"A",{href:!0,rel:!0});var Qf=l(Wn);eh=e(Qf,"slots"),Qf.forEach(n),th=e(Bs,", "),Yn=o(Bs,"A",{href:!0,rel:!0});var Xf=l(Yn);oh=e(Xf,"context"),Xf.forEach(n),lh=e(Bs,", and many others."),Bs.forEach(n),ih=r(N),Uo=o(N,"P",{});var sm=l(Uo);Gn=o(sm,"STRONG",{});var Sl=l(Gn);ph=e(Sl,"\u2B05 \u2B05  Previously in "),dt=o(Sl,"A",{href:!0});var nm=l(dt);ch=e(nm,"Part 2"),nm.forEach(n),rh=e(Sl,"."),Sl.forEach(n),sm.forEach(n),N.forEach(n),this.h()},h(){i(ns,"href","/compile-svelte-in-your-head-part-2/"),i(Fn,"href","/compile-svelte-in-your-head-part-2/"),i(Zn,"class","inline"),i(Kn,"class","inline"),i(sa,"class","inline"),i(aa,"class","inline"),i(ta,"class","inline"),i(ia,"class","inline"),i(pa,"class","inline"),i(ca,"class","inline"),i(U,"href","#the-on-bind-and-use"),i(U,"id","the-on-bind-and-use"),i(ra,"class","inline"),i(Ts,"href","#on-event-handlers"),i(Ts,"id","on-event-handlers"),i(ka,"class","inline"),i(da,"class","code-section"),i(va,"class","inline"),i(Ps,"href","#bind-bindings"),i(Ps,"id","bind-bindings"),i(ha,"class","inline"),i(ua,"class","code-section"),i(ya,"class","inline"),i(Ss,"href","#use-actions"),i(Ss,"id","use-actions"),i(fa,"class","inline"),i(Qs,"href","https://svelte.dev/tutorial/actions"),i(Qs,"rel","nofollow"),i(ma,"class","inline"),i(ga,"class","inline"),i(xa,"class","code-section"),i(Ea,"class","code-section"),i(_a,"class","inline"),i(wa,"class","code-section"),i(ba,"class","inline"),i(Is,"href","https://svelte.dev/tutorial/dom-events"),i(Is,"rel","nofollow"),i(Ca,"class","inline"),i(Ls,"href","https://svelte.dev/tutorial/text-inputs"),i(Ls,"rel","nofollow"),i(Da,"class","inline"),i(As,"href","https://svelte.dev/tutorial/actions"),i(As,"rel","nofollow"),i(an,"href","#the-vanilla-js"),i(an,"id","the-vanilla-js"),i(en,"href","#event-handler"),i(en,"id","event-handler"),i(Oa,"href","/compile-svelte-in-your-head-part-1/#listen-for-click-events-on-an-element"),i(tn,"href","https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener"),i(tn,"rel","nofollow"),i(Ta,"class","code-section"),i(Pa,"class","code-section"),i(on,"href","#event-preventdefault"),i(on,"id","event-preventdefault"),i(ln,"href","https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault"),i(ln,"rel","nofollow"),i(Sa,"class","inline"),i(Ia,"class","inline"),i(La,"class","code-section"),i(pn,"href","#event-stoppropagation"),i(pn,"id","event-stoppropagation"),i(cn,"href","https://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation"),i(cn,"rel","nofollow"),i(ja,"class","code-section"),i(Ma,"class","inline"),i(Ha,"class","inline"),i(Na,"class","inline"),i($a,"class","inline"),i(Va,"class","inline"),i(rn,"href","https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener#Matching_event_listeners_for_removal"),i(rn,"rel","nofollow"),i(Ra,"class","code-section"),i(kn,"href","#bindings"),i(kn,"id","bindings"),i(Ua,"href","/reactivity-in-web-frameworks-the-when/"),i(Wa,"class","code-section"),i(Ya,"class","inline"),i(Ga,"class","inline"),i(hn,"href","https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement"),i(hn,"rel","nofollow"),i(Ja,"class","inline"),i(un,"href","https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/close_event"),i(un,"rel","nofollow"),i(qa,"class","inline"),i(za,"class","inline"),i(fn,"href","https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver"),i(fn,"rel","nofollow"),i(mn,"href","#actions"),i(mn,"id","actions"),i(Fa,"class","inline"),i(Ka,"class","inline"),i(Qa,"class","code-section"),i(xn,"href","#the-compiled-js"),i(xn,"id","the-compiled-js"),i(Xa,"class","inline"),i(se,"class","inline"),i(ne,"class","inline"),i(ae,"class","inline"),i(Hs,"href","#on-directive"),i(Hs,"id","on-directive"),i(ee,"class","code-section"),i(En,"href","https://svelte.dev/repl/0ea0c22e9fd648518cfc1231835b0f05"),i(En,"rel","nofollow"),i(te,"class","code-section"),i(oe,"class","inline"),i(le,"class","inline"),i(ie,"href","/compile-svelte-in-your-head-part-1/#listen-and-dispose"),i(pe,"class","inline"),i(ce,"class","inline"),i(bn,"href","#event-modifiers"),i(bn,"id","event-modifiers"),i(re,"class","code-section"),i(Cn,"href","https://svelte.dev/repl/11fffa988c1f49239c005619c3b506c5"),i(Cn,"rel","nofollow"),i(ke,"class","code-section"),i(de,"class","inline"),i(ve,"class","inline"),i(he,"class","inline"),i(Dn,"href","https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener"),i(Dn,"rel","nofollow"),i(ue,"class","inline"),i(ye,"class","inline"),i(fe,"class","inline"),i(me,"class","inline"),i(ge,"class","inline"),i(xe,"class","code-section"),i(Ee,"class","inline"),i(Ns,"href","#bind-directive"),i(Ns,"id","bind-directive"),i(_e,"class","code-section"),i(Tn,"href","https://svelte.dev/repl/22ff0420e32f427c8b20e878a44170d3"),i(Tn,"rel","nofollow"),i(we,"class","code-section"),i(Ce,"class","inline"),i(De,"class","inline"),i(Oe,"class","inline"),i(Te,"class","inline"),i(Pe,"class","inline"),i(Ie,"class","inline"),i(Le,"class","inline"),i(Ae,"class","inline"),i(je,"class","inline"),i(Me,"class","inline"),i(Vs,"href","#use-directive"),i(Vs,"id","use-directive"),i(He,"class","code-section"),i(Ln,"href","https://svelte.dev/repl/88bbecb8b86943fd80d9d428961251ae"),i(Ln,"rel","nofollow"),i(Ne,"class","code-section"),i($e,"class","inline"),i(Ve,"class","inline"),i(Re,"class","inline"),i(Ue,"class","inline"),i(We,"class","inline"),i(Ye,"class","inline"),i(Ge,"class","inline"),i(An,"href","#the-order-of-directives"),i(An,"id","the-order-of-directives"),i(Je,"class","inline"),i(qe,"class","inline"),i(ze,"class","code-section"),i(Be,"class","inline"),i(Fe,"class","inline"),i(Ze,"class","inline"),i(Ke,"class","inline"),i(Qe,"class","inline"),i(Xe,"class","inline"),i(st,"class","code-section"),i(nt,"class","inline"),i(at,"class","inline"),i(et,"class","inline"),i(tt,"class","code-section"),i(Mn,"href","https://svelte.dev/repl/f06a8a59840c418b86c43c2875d4b274"),i(Mn,"rel","nofollow"),i(ot,"class","inline"),i(lt,"class","inline"),i(it,"class","inline"),i(pt,"class","code-section"),i(Nn,"href","https://github.com/sveltejs/svelte/issues/2446"),i(Nn,"rel","nofollow"),i($n,"href","#closing-note"),i($n,"id","closing-note"),i(ct,"class","inline"),i(rt,"class","inline"),i(kt,"class","inline"),i(Rn,"href","https://twitter.com/lihautan"),i(Rn,"rel","nofollow"),i(Un,"href","https://svelte.dev/tutorial/if-blocks"),i(Un,"rel","nofollow"),i(Wn,"href","https://svelte.dev/tutorial/slots"),i(Wn,"rel","nofollow"),i(Yn,"href","https://svelte.dev/tutorial/context-api"),i(Yn,"rel","nofollow"),i(dt,"href","/compile-svelte-in-your-head-part-2/")},m(p,k){d(p,g,k),s(g,S),s(S,ds),s(S,ns),s(ns,_),s(S,J),d(p,Fs,k),d(p,q,k),s(q,Fn),s(Fn,Il),s(q,Ll),s(q,Zn),s(Zn,Al),s(q,jl),s(q,Kn),s(Kn,Ml),s(q,Hl),d(p,Yo,k),d(p,Qn,k),s(Qn,Nl),d(p,Go,k),d(p,as,k),s(as,Xn),s(Xn,sa),s(sa,$l),s(Xn,Vl),s(as,Rl),s(as,na),s(na,aa),s(aa,Ul),s(na,Wl),s(as,Yl),s(as,ea),s(ea,ta),s(ta,Gl),s(ea,Jl),d(p,Jo,k),d(p,oa,k),s(oa,ql),d(p,qo,k),d(p,la,k),s(la,St),s(St,U),s(U,zl),s(U,ia),s(ia,Bl),s(U,Fl),s(U,pa),s(pa,Zl),s(U,Kl),s(U,ca),s(ca,Ql),d(p,zo,k),d(p,es,k),s(es,It),s(It,Ts),s(Ts,ra),s(ra,Xl),s(Ts,si),s(es,ni),s(es,Zs),s(Zs,ai),s(Zs,ka),s(ka,ei),s(Zs,ti),s(es,oi),s(es,da),da.innerHTML=om,d(p,Bo,k),d(p,W,k),s(W,Lt),s(Lt,Ps),s(Ps,va),s(va,li),s(Ps,ii),s(W,pi),s(W,Ks),s(Ks,ci),s(Ks,ha),s(ha,ri),s(Ks,ki),s(W,di),s(W,At),s(At,vi),s(W,hi),s(W,ua),ua.innerHTML=lm,d(p,Fo,k),d(p,y,k),s(y,jt),s(jt,Ss),s(Ss,ya),s(ya,ui),s(Ss,yi),s(y,fi),s(y,vs),s(vs,mi),s(vs,fa),s(fa,gi),s(vs,xi),s(vs,Mt),s(Mt,Qs),s(Qs,Ei),s(vs,_i),s(y,wi),s(y,Xs),s(Xs,bi),s(Xs,ma),s(ma,Ci),s(Xs,Di),s(y,Oi),s(y,sn),s(sn,Ti),s(sn,ga),s(ga,Pi),s(sn,Si),s(y,Ii),s(y,xa),xa.innerHTML=im,s(y,Li),s(y,Ht),s(Ht,Ai),s(y,ji),s(y,Ea),Ea.innerHTML=pm,s(y,Mi),s(y,nn),s(nn,Hi),s(nn,_a),s(_a,Ni),s(nn,$i),s(y,Vi),s(y,wa),wa.innerHTML=cm,s(y,Ri),s(y,Nt),s(Nt,Ui),s(y,Wi),s(y,hs),s(hs,$t),s($t,Is),s(Is,Yi),s(Is,ba),s(ba,Gi),s(hs,Ji),s(hs,Vt),s(Vt,Ls),s(Ls,qi),s(Ls,Ca),s(Ca,zi),s(hs,Bi),s(hs,Rt),s(Rt,As),s(As,Fi),s(As,Da),s(Da,Zi),d(p,Zo,k),d(p,js,k),s(js,Ut),s(Ut,an),s(an,Ki),s(js,Qi),s(js,Wt),s(Wt,Xi),d(p,Ko,k),d(p,I,k),s(I,Yt),s(Yt,en),s(en,sp),s(I,np),s(I,us),s(us,ap),s(us,Oa),s(Oa,ep),s(us,tp),s(us,tn),s(tn,op),s(us,lp),s(I,ip),s(I,Ta),Ta.innerHTML=rm,s(I,pp),s(I,Gt),s(Gt,cp),s(I,rp),s(I,Pa),Pa.innerHTML=km,d(p,Qo,k),d(p,ts,k),s(ts,Jt),s(Jt,on),s(on,kp),s(ts,dp),s(ts,os),s(os,ln),s(ln,vp),s(os,hp),s(os,Sa),s(Sa,up),s(os,yp),s(os,Ia),s(Ia,fp),s(os,mp),s(ts,gp),s(ts,La),La.innerHTML=dm,d(p,Xo,k),d(p,L,k),s(L,qt),s(qt,pn),s(pn,xp),s(L,Ep),s(L,Aa),s(Aa,cn),s(cn,_p),s(Aa,wp),s(L,bp),s(L,ja),ja.innerHTML=vm,s(L,Cp),s(L,T),s(T,Dp),s(T,Ma),s(Ma,Op),s(T,Tp),s(T,Ha),s(Ha,Pp),s(T,Sp),s(T,Na),s(Na,Ip),s(T,Lp),s(T,$a),s($a,Ap),s(T,jp),s(T,Va),s(Va,Mp),s(T,Hp),s(T,rn),s(rn,Np),s(T,$p),s(L,Vp),s(L,Ra),Ra.innerHTML=hm,d(p,sl,k),d(p,u,k),s(u,zt),s(zt,kn),s(kn,Rp),s(u,Up),s(u,Bt),s(Bt,Wp),s(u,Yp),s(u,Ft),s(Ft,Gp),s(u,Jp),s(u,Zt),s(Zt,dn),s(dn,qp),s(dn,Ua),s(Ua,zp),s(dn,Bp),s(u,Fp),s(u,vn),s(vn,Zp),s(vn,Kt),s(Kt,Kp),s(vn,Qp),s(u,Xp),s(u,Wa),Wa.innerHTML=um,s(u,sc),s(u,Qt),s(Qt,nc),s(u,ac),s(u,Xt),s(Xt,so),s(so,ec),s(u,tc),s(u,ys),s(ys,oc),s(ys,Ya),s(Ya,lc),s(ys,ic),s(ys,Ga),s(Ga,pc),s(ys,cc),s(u,rc),s(u,no),s(no,ao),s(ao,kc),s(u,dc),s(u,$),s($,vc),s($,hn),s(hn,hc),s($,uc),s($,un),s(un,Ja),s(Ja,yc),s($,fc),s($,qa),s(qa,mc),s($,gc),s($,za),s(za,xc),s($,Ec),s(u,_c),s(u,yn),s(yn,wc),s(yn,fn),s(fn,bc),s(yn,Cc),d(p,nl,k),d(p,A,k),s(A,eo),s(eo,mn),s(mn,Dc),s(A,Oc),s(A,to),s(to,Tc),s(A,Pc),s(A,oo),s(oo,Sc),s(A,Ic),s(A,gn),s(gn,Ba),s(Ba,Fa),s(Fa,Lc),s(Ba,Ac),s(gn,jc),s(gn,Za),s(Za,Ka),s(Ka,Mc),s(Za,Hc),s(A,Nc),s(A,Qa),Qa.innerHTML=ym,d(p,al,k),d(p,Ms,k),s(Ms,lo),s(lo,xn),s(xn,$c),s(Ms,Vc),s(Ms,z),s(z,Rc),s(z,Xa),s(Xa,Uc),s(z,Wc),s(z,se),s(se,Yc),s(z,Gc),s(z,ne),s(ne,Jc),s(z,qc),d(p,el,k),d(p,x,k),s(x,io),s(io,Hs),s(Hs,ae),s(ae,zc),s(Hs,Bc),s(x,Fc),s(x,ee),ee.innerHTML=fm,s(x,Zc),s(x,po),s(po,En),s(En,Kc),s(x,Qc),s(x,co),s(co,Xc),s(x,sr),s(x,te),te.innerHTML=mm,s(x,nr),s(x,ro),s(ro,ar),s(x,er),s(x,_n),s(_n,fs),s(fs,tr),s(fs,oe),s(oe,or),s(fs,lr),s(fs,ko),s(ko,ir),s(fs,pr),s(_n,cr),s(_n,ms),s(ms,rr),s(ms,le),s(le,kr),s(ms,dr),s(ms,vo),s(vo,vr),s(ms,hr),s(x,ur),s(x,gs),s(gs,yr),s(gs,ie),s(ie,fr),s(gs,mr),s(gs,pe),s(pe,gr),s(gs,xr),s(x,Er),s(x,wn),s(wn,_r),s(wn,ce),s(ce,wr),s(wn,br),d(p,tl,k),d(p,f,k),s(f,ho),s(ho,bn),s(bn,Cr),s(f,Dr),s(f,uo),s(uo,Or),s(f,Tr),s(f,re),re.innerHTML=gm,s(f,Pr),s(f,yo),s(yo,Cn),s(Cn,Sr),s(f,Ir),s(f,fo),s(fo,Lr),s(f,Ar),s(f,ke),ke.innerHTML=xm,s(f,jr),s(f,mo),s(mo,Mr),s(f,Hr),s(f,xs),s(xs,go),s(go,Nr),s(xs,$r),s(xs,P),s(P,Vr),s(P,de),s(de,Rr),s(P,Ur),s(P,ve),s(ve,Wr),s(P,Yr),s(P,he),s(he,Gr),s(P,Jr),s(P,Dn),s(Dn,qr),s(P,zr),s(P,ue),s(ue,Br),s(P,Fr),s(xs,Zr),s(xs,B),s(B,Kr),s(B,ye),s(ye,Qr),s(B,Xr),s(B,fe),s(fe,sk),s(B,nk),s(B,me),s(me,ak),s(B,ek),s(f,tk),s(f,On),s(On,ok),s(On,ge),s(ge,lk),s(On,ik),s(f,pk),s(f,xe),xe.innerHTML=Em,d(p,ol,k),d(p,b,k),s(b,xo),s(xo,Ns),s(Ns,Ee),s(Ee,ck),s(Ns,rk),s(b,kk),s(b,_e),_e.innerHTML=_m,s(b,dk),s(b,Eo),s(Eo,Tn),s(Tn,vk),s(b,hk),s(b,_o),s(_o,uk),s(b,yk),s(b,we),we.innerHTML=wm,s(b,fk),s(b,wo),s(wo,mk),s(b,gk),s(b,Pn),s(Pn,be),s(be,xk),s(be,Sn),s(Sn,$s),s($s,Ek),s($s,Ce),s(Ce,_k),s($s,wk),s($s,De),s(De,bk),s(Sn,Ck),s(Sn,V),s(V,Dk),s(V,bo),s(bo,Ok),s(V,Tk),s(V,Oe),s(Oe,Pk),s(V,Sk),s(V,Te),s(Te,Ik),s(V,Lk),s(V,Pe),s(Pe,Ak),s(V,jk),s(Pn,Mk),s(Pn,Se),s(Se,Hk),s(Se,In),s(In,Es),s(Es,Nk),s(Es,Ie),s(Ie,$k),s(Es,Vk),s(Es,Le),s(Le,Rk),s(Es,Uk),s(In,Wk),s(In,R),s(R,Yk),s(R,Ae),s(Ae,Gk),s(R,Jk),s(R,Co),s(Co,qk),s(R,zk),s(R,je),s(je,Bk),s(R,Fk),s(R,Do),s(Do,Zk),s(R,Kk),d(p,ll,k),d(p,C,k),s(C,Oo),s(Oo,Vs),s(Vs,Me),s(Me,Qk),s(Vs,Xk),s(C,sd),s(C,He),He.innerHTML=bm,s(C,nd),s(C,To),s(To,Ln),s(Ln,ad),s(C,ed),s(C,Po),s(Po,td),s(C,od),s(C,Ne),Ne.innerHTML=Cm,s(C,ld),s(C,So),s(So,id),s(C,pd),s(C,_s),s(_s,F),s(F,cd),s(F,$e),s($e,rd),s(F,kd),s(F,Ve),s(Ve,dd),s(F,vd),s(F,Io),s(Io,hd),s(F,ud),s(_s,yd),s(_s,ws),s(ws,fd),s(ws,Re),s(Re,md),s(ws,gd),s(ws,Lo),s(Lo,xd),s(ws,Ed),s(_s,_d),s(_s,Y),s(Y,Ue),s(Ue,wd),s(Y,bd),s(Y,We),s(We,Cd),s(Y,Dd),s(Y,Ye),s(Ye,Od),s(Y,Td),s(Y,Ge),s(Ge,Pd),s(Y,Sd),d(p,il,k),d(p,v,k),s(v,Ao),s(Ao,An),s(An,Id),s(v,Ld),s(v,bs),s(bs,Ad),s(bs,Je),s(Je,jd),s(bs,Md),s(bs,qe),s(qe,Hd),s(bs,Nd),s(v,$d),s(v,jo),s(jo,Vd),s(v,Rd),s(v,ze),ze.innerHTML=Dm,s(v,Ud),s(v,Z),s(Z,Wd),s(Z,Be),s(Be,Yd),s(Z,Gd),s(Z,Fe),s(Fe,Jd),s(Z,qd),s(Z,Ze),s(Ze,zd),s(Z,Bd),s(v,Fd),s(v,Cs),s(Cs,Zd),s(Cs,Ke),s(Ke,Kd),s(Cs,Qd),s(Cs,Qe),s(Qe,Xd),s(Cs,sv),s(v,nv),s(v,jn),s(jn,av),s(jn,Xe),s(Xe,ev),s(jn,tv),s(v,ov),s(v,st),st.innerHTML=Om,s(v,lv),s(v,Ds),s(Ds,iv),s(Ds,Mo),s(Mo,pv),s(Ds,cv),s(Ds,K),s(K,rv),s(K,nt),s(nt,kv),s(K,dv),s(K,at),s(at,vv),s(K,hv),s(K,et),s(et,uv),s(K,yv),s(Ds,fv),s(v,mv),s(v,Ho),s(Ho,gv),s(v,xv),s(v,tt),tt.innerHTML=Tm,s(v,Ev),s(v,No),s(No,Mn),s(Mn,_v),s(v,wv),s(v,Q),s(Q,bv),s(Q,ot),s(ot,Cv),s(Q,Dv),s(Q,lt),s(lt,Ov),s(Q,Tv),s(Q,it),s(it,Pv),s(Q,Sv),s(v,Iv),s(v,pt),pt.innerHTML=Pm,s(v,Lv),s(v,Hn),s(Hn,Av),s(Hn,Nn),s(Nn,jv),s(Hn,Mv),d(p,pl,k),d(p,D,k),s(D,$o),s($o,$n),s($n,Hv),s(D,Nv),s(D,X),s(X,$v),s(X,ct),s(ct,Vv),s(X,Rv),s(X,rt),s(rt,Uv),s(X,Wv),s(X,kt),s(kt,Yv),s(X,Gv),s(D,Jv),s(D,Vo),s(Vo,qv),s(D,zv),s(D,Ro),s(Ro,Bv),s(D,Fv),s(D,Vn),s(Vn,Zv),s(Vn,Rn),s(Rn,Kv),s(Vn,Qv),s(D,Xv),s(D,ss),s(ss,sh),s(ss,Un),s(Un,nh),s(ss,ah),s(ss,Wn),s(Wn,eh),s(ss,th),s(ss,Yn),s(Yn,oh),s(ss,lh),s(D,ih),s(D,Uo),s(Uo,Gn),s(Gn,ph),s(Gn,dt),s(dt,ch),s(Gn,rh)},p:dg,d(p){p&&n(g),p&&n(Fs),p&&n(q),p&&n(Yo),p&&n(Qn),p&&n(Go),p&&n(as),p&&n(Jo),p&&n(oa),p&&n(qo),p&&n(la),p&&n(zo),p&&n(es),p&&n(Bo),p&&n(W),p&&n(Fo),p&&n(y),p&&n(Zo),p&&n(js),p&&n(Ko),p&&n(I),p&&n(Qo),p&&n(ts),p&&n(Xo),p&&n(L),p&&n(sl),p&&n(u),p&&n(nl),p&&n(A),p&&n(al),p&&n(Ms),p&&n(el),p&&n(x),p&&n(tl),p&&n(f),p&&n(ol),p&&n(b),p&&n(ll),p&&n(C),p&&n(il),p&&n(v),p&&n(pl),p&&n(D)}}}function yg(Bn){let g,S;const ds=[Bn[0],tm];let ns={$$slots:{default:[ug]},$$scope:{ctx:Bn}};for(let _=0;_<ds.length;_+=1)ns=Th(ns,ds[_]);return g=new vg({props:ns}),{c(){tg(g.$$.fragment)},l(_){og(g.$$.fragment,_)},m(_,J){lg(g,_,J),S=!0},p(_,[J]){const Fs=J&1?ig(ds,[J&1&&am(_[0]),J&0&&am(tm)]):{};J&2&&(Fs.$$scope={dirty:J,ctx:_}),g.$set(Fs)},i(_){S||(pg(g.$$.fragment,_),S=!0)},o(_){cg(g.$$.fragment,_),S=!1},d(_){rg(g,_)}}}const tm={title:"Compile Svelte in your head (Part 3)",date:"2020-05-07T08:00:00Z",tags:["Svelte","JavaScript"],series:"Compile Svelte in your head",label:"blog",description:"\u2B05 \u2B05  Previously in Part 2.Previously, I detailed how `$invalidate` works, described how bitmask was used in `$invalidate`, and explained how reactive declarations work as well.In this article, we are going to look into 3 DOM related directives:...",tableOfContents:[{link:"the-on-bind-and-use",title:"The  `on:` ,  `bind:`  and  `use:`",nested:[{link:"on-event-handlers",title:"`on:`  event handlers"},{link:"bind-bindings",title:"`bind:`  bindings"},{link:"use-actions",title:"`use:`  actions"}]},{link:"the-vanilla-js",title:"The Vanilla JS",nested:[{link:"event-handler",title:"Event handler",nested:[{link:"event-preventdefault",title:"event.preventDefault"},{link:"event-stoppropagation",title:"event.stopPropagation"}]},{link:"bindings",title:"Bindings"},{link:"actions",title:"Actions"}]},{link:"the-compiled-js",title:"The Compiled JS",nested:[{link:"on-directive",title:"`on:`  directive",nested:[{link:"event-modifiers",title:"Event modifiers"}]},{link:"bind-directive",title:"`bind:`  directive"},{link:"use-directive",title:"`use:`  directive"},{link:"the-order-of-directives",title:"The order of directives"}]},{link:"closing-note",title:"Closing Note"}]};function fg(Bn,g,S){return kg("blog",{image:hg}),Bn.$$set=ds=>{S(0,g=Th(Th({},g),em(ds)))},g=em(g),[g]}class wg extends ng{constructor(g){super();ag(this,g,fg,yg,eg,{})}}export{wg as default,tm as metadata};
