import{S as gf,i as _f,s as Ef,C as nd,w as Wu,x as Vu,y as ju,z as Sf,A as Cu,q as Ju,o as Bu,B as Gu,r as If,R as Ou,k as i,e as a,t as s,m as c,c as n,a as l,h as t,d as o,b as r,Q as ad,f as _,g as x,F as e,O as Af}from"../../chunks/vendor-569a3c5c.js";import{B as Tf}from"../../chunks/BlogLayout-17b76cb2.js";import{T as Cf}from"../../chunks/TableOfContent-dbc18cb8.js";import"../../chunks/stores-ee936cd4.js";import"../../chunks/WebMentions-968cc380.js";/* empty css                                */var Of="/_app/assets/member-expression-f5fd3f3a.webp",Df="/_app/assets/member-expression-3b771379.webp",Lf="/_app/assets/member-expression-9d5f51a8.png",Du="/_app/assets/member-expression-6f106139.png",Pf="/_app/assets/output-c89c6fe4.webp",Hf="/_app/assets/output-563200b8.webp",Wf="/_app/assets/output-428f0fce.png",Lu="/_app/assets/output-7756fc06.png",Vf="/_app/assets/targeting-e35ae87a.webp",jf="/_app/assets/targeting-908f9668.webp",Jf="/_app/assets/targeting-4a770337.png",Pu="/_app/assets/targeting-25308288.png",Bf="/_app/assets/hero-twitter-9356c385.jpg";function Gf(Xs){let w,te,J,He,m,oe,qs,an,ie,$o,We,Bn,Gn,Ie,Ve,Rn,Mn,je,Nn,Zn,Un,Je,Fn,Be,Kn,Yn,nn,O,zo,Ge,Xn,qn,Qo,$n,zn,ye,ue,Re,Qn,el,Me,sl,tl,ea,ol,al,$s,nl,Ne,ll,rl,Ze,Ue,il,cl,Fe,pl,hl,Ke,kl,Ye,dl,vl,yl,Xe,ul,qe,fl,bl,xl,sa,wl,ln,f,ta,$e,ml,gl,oa,_l,El,zs,Ru=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; parse &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@babel/parser&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> traverse </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@babel/traverse&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> generate </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@babel/generator&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">code</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;const n = 1&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// parse the code -&gt; ast</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ast</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parse</span><span style="color: var(--shiki-color-text)">(code);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// transform the ast</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">traverse</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">enter</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// in this example change all the variable &#96;n&#96; to &#96;x&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.isIdentifier</span><span style="color: var(--shiki-color-text)">(&#123; name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;n&#39;</span><span style="color: var(--shiki-color-text)"> &#125;)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;x&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// generate code &lt;- ast</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">output</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">generate</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> code);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">output</span><span style="color: var(--shiki-color-text)">.code); </span><span style="color: var(--shiki-token-comment)">// &#39;const x = 1;&#39;</span></span></code></pre>`,Sl,aa,C,Il,ze,Al,Tl,Qs,Cl,Ol,et,Dl,Ll,st,Pl,Hl,tt,Wl,Vl,ot,jl,Jl,Bl,na,Gl,Rl,at,Mu='<pre class="prism language-"><code><span class="line">code -&gt; AST -&gt; transformed AST -&gt; transformed code</span></code></pre>',Ml,Qe,Nl,nt,Zl,Ul,Fl,lt,Nu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> babel </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@babel/core&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">code</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;const n = 1&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">output</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.transformSync</span><span style="color: var(--shiki-color-text)">(code</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  plugins</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// your first babel plugin \u{1F60E}\u{1F60E}</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">myCustomPlugin</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        visitor</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-comment)">// in this example change all the variable &#96;n&#96; to &#96;x&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.isIdentifier</span><span style="color: var(--shiki-color-text)">(&#123; name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;n&#39;</span><span style="color: var(--shiki-color-text)"> &#125;)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;x&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">output</span><span style="color: var(--shiki-color-text)">.code); </span><span style="color: var(--shiki-token-comment)">// &#39;const x = 1;&#39;</span></span></code></pre>`,Kl,ae,Yl,es,Xl,ql,rt,$l,zl,it,Ql,er,sr,la,fe,tr,ct,or,ar,ss,nr,lr,rr,ts,ir,ra,cr,pr,hr,ia,kr,rn,T,ca,os,dr,vr,pa,yr,ur,as,ha,fr,br,ka,xr,wr,pt,Zu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">greet</span><span style="color: var(--shiki-color-text)">(name) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Hello &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> name;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">greet</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;tanhauhau&#39;</span><span style="color: var(--shiki-color-text)">)); </span><span style="color: var(--shiki-token-comment)">// Hello tanhauhau</span></span></code></pre>`,mr,da,gr,_r,ht,Uu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">teerg</span><span style="color: var(--shiki-color-text)">(eman) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;H&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;e&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;l&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;l&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;o&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39; &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> eman;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">teerg</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;t&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;a&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;n&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;h&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;a&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;u&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;h&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;a&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;u&#39;</span><span style="color: var(--shiki-color-text)">)); </span><span style="color: var(--shiki-token-comment)">// Hello tanhauhau</span></span></code></pre>`,Er,Ae,Sr,kt,Ir,Ar,va,Tr,cn,D,ya,ns,Cr,Or,ls,Dr,rs,Lr,Pr,Hr,ua,be,dt,fa,N,ld,Wr,ba,Vr,jr,xa,Jr,Br,is,vt,wa,Gr,Rr,Mr,yt,ma,Nr,Zr,pn,B,ga,cs,Ur,Fr,ps,Kr,hs,Yr,Xr,qr,_a,xe,ut,Ea,Z,rd,$r,Sa,zr,Qr,ne,ei,ft,si,ti,bt,oi,ai,xt,ni,li,hn,k,Ia,ks,ri,ii,Aa,ci,pi,wt,Fu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">myCustomPlugin</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    visitor</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,hi,ds,ki,vs,di,vi,yi,ys,ui,us,fi,bi,xi,fs,wi,mt,mi,gi,_i,gt,Ku=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">myCustomPlugin</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    visitor</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;identifier&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">StringLiteral</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;string literal&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ei,Ta,Si,Ii,_t,Yu=`<pre class="prism language-"><code><span class="line">identifier</span>
<span class="line">identifier</span>
<span class="line">string literal</span>
<span class="line">identifier</span>
<span class="line">identifier</span>
<span class="line">identifier</span>
<span class="line">identifier</span>
<span class="line">string literal</span></code></pre>`,Ai,Ti,Ci,W,Oi,Et,Di,Li,St,Pi,Hi,It,Wi,Vi,At,ji,Ji,Tt,Bi,Gi,Ri,E,Mi,Ct,Ni,Zi,Ot,Ui,Fi,Dt,Ki,Yi,Lt,Xi,qi,Pt,$i,zi,Ht,Qi,ec,Wt,sc,tc,Vt,oc,ac,jt,nc,lc,rc,Ca,ce,ic,Jt,cc,pc,bs,hc,kc,xs,dc,vc,yc,uc,Oa,fc,kn,h,Da,ws,bc,xc,U,wc,ms,mc,gc,Bt,_c,Ec,Gt,Sc,Ic,Rt,Ac,Tc,Cc,Mt,Xu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.reverse</span><span style="color: var(--shiki-color-text)">()</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Oc,La,Dc,Lc,Nt,qu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">teerg</span><span style="color: var(--shiki-color-text)">(eman) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Hello &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> eman;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">elosnoc</span><span style="color: var(--shiki-token-function)">.gol</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">teerg</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;tanhauhau&#39;</span><span style="color: var(--shiki-color-text)">)); </span><span style="color: var(--shiki-token-comment)">// Hello tanhauhau</span></span></code></pre>`,Pc,gs,Hc,Zt,Wc,Vc,jc,Pa,Jc,Bc,Ha,we,Ut,Wa,X,id,Gc,L,Ft,Rc,Mc,Kt,Nc,Zc,Yt,Uc,Fc,Xt,Kc,Yc,qt,Xc,qc,$t,$c,zc,Qc,me,ep,zt,sp,tp,Qt,op,ap,np,eo,$u=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">parentPath</span><span style="color: var(--shiki-token-function)">.isMemberExpression</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.parentPath</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;object&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">.isIdentifier</span><span style="color: var(--shiki-color-text)">(&#123; name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;console&#39;</span><span style="color: var(--shiki-color-text)"> &#125;) </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">parentPath</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;property&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.isIdentifier</span><span style="color: var(--shiki-color-text)">(&#123; name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;log&#39;</span><span style="color: var(--shiki-color-text)"> &#125;)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    )</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">     </span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">     </span><span style="color: var(--shiki-token-function)">.reverse</span><span style="color: var(--shiki-color-text)">()</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">     </span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,lp,Va,rp,ip,so,zu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">teerg</span><span style="color: var(--shiki-color-text)">(eman) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Hello &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> eman;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">teerg</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;tanhauhau&#39;</span><span style="color: var(--shiki-color-text)">)); </span><span style="color: var(--shiki-token-comment)">// Hello tanhauhau</span></span></code></pre>`,cp,F,pp,to,hp,kp,oo,dp,vp,ao,yp,up,no,fp,bp,xp,ge,wp,lo,mp,gp,ro,_p,Ep,Sp,io,Qu='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">log</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>',Ip,ja,I,Ap,co,Tp,Cp,po,Op,Dp,_s,Lp,Pp,ho,Hp,Wp,ko,Vp,jp,vo,Jp,Bp,Es,Gp,Rp,dn,y,Ja,Ss,Mp,Np,_e,Zp,yo,Up,Fp,uo,Kp,Yp,Xp,K,qp,Is,fo,$p,zp,bo,Qp,eh,xo,sh,th,wo,oh,ah,nh,mo,ef=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">StringLiteral</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newNode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.value</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(c </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.stringLiteral</span><span style="color: var(--shiki-color-text)">(c))</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.reduce</span><span style="color: var(--shiki-color-text)">((prev</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> curr) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.binaryExpression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;+&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> prev</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> curr);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.replaceWith</span><span style="color: var(--shiki-color-text)">(newNode);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,lh,V,rh,go,ih,ch,_o,ph,hh,Eo,kh,dh,So,vh,yh,Io,uh,fh,bh,Ba,xh,wh,Ao,sf='<pre class="prism language-"><code><span class="line">RangeError: Maximum call stack size exceeded</span></code></pre>',mh,Ga,gh,_h,A,Eh,To,Sh,Ih,Co,Ah,Th,Oo,Ch,Oh,Do,Dh,Lh,Lo,Ph,Hh,Po,Wh,Vh,Ho,jh,Jh,Bh,Ee,Gh,Wo,Rh,Mh,Vo,Nh,Zh,Uh,As,Fh,jo,Kh,Yh,Xh,Jo,tf=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">StringLiteral</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newNode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.value</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(c </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.stringLiteral</span><span style="color: var(--shiki-color-text)">(c))</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.reduce</span><span style="color: var(--shiki-color-text)">((prev</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> curr) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.binaryExpression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;+&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> prev</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> curr);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.replaceWith</span><span style="color: var(--shiki-color-text)">(newNode);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.skip</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,qh,Ra,$h,vn,G,Ma,Ts,zh,Qh,Na,ek,sk,Bo,of=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;@babel/core&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">code</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">function greet(name) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  return &#39;Hello &#39; + name;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">console.log(greet(&#39;tanhauhau&#39;)); // Hello tanhauhau</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">output</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.transformSync</span><span style="color: var(--shiki-color-text)">(code</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  plugins</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">myCustomPlugin</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        visitor</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">StringLiteral</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">concat</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.value</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(c </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.stringLiteral</span><span style="color: var(--shiki-color-text)">(c))</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">.reduce</span><span style="color: var(--shiki-color-text)">((prev</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> curr) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.binaryExpression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;+&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> prev</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> curr);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.replaceWith</span><span style="color: var(--shiki-color-text)">(concat);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.skip</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">parentPath</span><span style="color: var(--shiki-token-function)">.isMemberExpression</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.parentPath</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;object&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-function)">.isIdentifier</span><span style="color: var(--shiki-color-text)">(&#123; name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;console&#39;</span><span style="color: var(--shiki-color-text)"> &#125;) </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">parentPath</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;property&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.isIdentifier</span><span style="color: var(--shiki-color-text)">(&#123; name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;log&#39;</span><span style="color: var(--shiki-color-text)"> &#125;)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              )</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            ) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-function)">.reverse</span><span style="color: var(--shiki-color-text)">()</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">output</span><span style="color: var(--shiki-color-text)">.code);</span></span></code></pre>`,tk,Za,ok,ak,le,Ua,nk,lk,Fa,rk,ik,Ka,ck,pk,Ya,hk,yn,q,Xa,Cs,kk,dk,Os,vk,Ds,yk,uk,fk,j,bk,Ls,xk,wk,Go,mk,gk,Ro,_k,Ek,Ps,Sk,Ik,Hs,Ak,Tk,Ck,re,qa,$a,Ok,Dk,Ws,Lk,Vs,Pk,Hk,Wk,za,Vk,jk,Qa,en,js,Jk,un,Te,sn,Js,Bk,Gk,Se,Bs,Gs,Rk,Mk,Rs,Nk,Zk,Ms,Ns,Uk,Fk,Zs,Kk,Yk,Us,Fs,Xk,qk,Ks,$k,fn;return w=new Cf({props:{data:[{link:"what-is-babel",title:"What is babel?",nested:[{link:"what-is-abstract-syntax-tree-ast",title:"What is Abstract Syntax Tree (AST)?"}]},{link:"how-to-use-babel-to-transform-code",title:"How to use babel to transform code",nested:[{link:"1-have-in-mind-what-you-want-to-transform-from-and-transform-into",title:"1. Have in mind what you want to transform from and transform into"},{link:"2-know-what-to-target-on-the-ast",title:"2. Know what to target on the AST"},{link:"3-know-how-the-transformed-ast-looks-like",title:"3. Know how the transformed AST looks like"},{link:"4-write-code",title:"4. Write code",nested:[{link:"transforming-variable-name",title:"Transforming variable name"},{link:"transforming-strings",title:"Transforming strings"}]}]},{link:"summary",title:"Summary"},{link:"further-resources",title:"Further resources"},{link:"reference",title:"Reference"}]}}),{c(){Wu(w.$$.fragment),te=i(),J=a("p"),He=s("Today, I will share a step-by-step guide for writing a custom "),m=a("a"),oe=s("babel"),qs=s(" transformation. You can use this technique to write your own automated code modifications, refactoring and code generation."),an=i(),ie=a("section"),$o=a("h2"),We=a("a"),Bn=s("What is babel?"),Gn=i(),Ie=a("p"),Ve=a("a"),Rn=s("Babel"),Mn=s(" is a JavaScript compiler that is mainly used to convert ECMAScript 2015+ code into backward compatible version of JavaScript in current and older browsers or environments. Babel uses a "),je=a("a"),Nn=s("plugin system"),Zn=s(" to do code transformation, so anyone can write their own transformation plugin for babel."),Un=i(),Je=a("p"),Fn=s("Before you get started writing a transformation plugin for babel, you would need to know what is an "),Be=a("a"),Kn=s("Abstract Syntax Tree (AST)"),Yn=s("."),nn=i(),O=a("section"),zo=a("h3"),Ge=a("a"),Xn=s("What is Abstract Syntax Tree (AST)?"),qn=i(),Qo=a("p"),$n=s("I am not sure I can explain this better than the amazing articles out there on the web:"),zn=i(),ye=a("ul"),ue=a("li"),Re=a("a"),Qn=s("Leveling Up One\u2019s Parsing Game With ASTs"),el=s(" by "),Me=a("a"),sl=s("Vaidehi Joshi"),tl=s(" * "),ea=a("em"),ol=s("(Highly recommend this one! \u{1F44D})"),al=i(),$s=a("li"),nl=s("Wikipedia's "),Ne=a("a"),ll=s("Abstract syntax tree"),rl=i(),Ze=a("li"),Ue=a("a"),il=s("What is an Abstract Syntax Tree"),cl=s(" by "),Fe=a("a"),pl=s("Chidume Nnamdi"),hl=i(),Ke=a("p"),kl=s("To summarize, AST is a tree representation of your code. In the case of JavaScript, the JavaScript AST follows the "),Ye=a("a"),dl=s("estree specification"),vl=s("."),yl=i(),Xe=a("p"),ul=s("AST represents your code, the structure and the meaning of your code. So it allows the compiler like "),qe=a("a"),fl=s("babel"),bl=s(" to understand the code and make specific meaningful transformation to it."),xl=i(),sa=a("p"),wl=s("So now you know what is AST, let's write a custom babel transformation to modify your code using AST."),ln=i(),f=a("section"),ta=a("h2"),$e=a("a"),ml=s("How to use babel to transform code"),gl=i(),oa=a("p"),_l=s("The following is the general template of using babel to do code transformation:"),El=i(),zs=a("div"),Sl=i(),aa=a("blockquote"),C=a("p"),Il=s("You would need to install "),ze=a("a"),Al=s("@babel/core"),Tl=s(" to run this. "),Qs=a("code"),Cl=s("@babel/parser"),Ol=s(", "),et=a("code"),Dl=s("@babel/traverse"),Ll=s(", "),st=a("code"),Pl=s("@babel/generator"),Hl=s(" are all dependencies of "),tt=a("code"),Wl=s("@babel/core"),Vl=s(", so installing "),ot=a("code"),jl=s("@babel/core"),Jl=s(" would suffice."),Bl=i(),na=a("p"),Gl=s("So the general idea is to parse your code to AST, transform the AST, and then generate code from the transformed AST."),Rl=i(),at=a("div"),Ml=i(),Qe=a("p"),Nl=s("However, we can use another API from "),nt=a("code"),Zl=s("babel"),Ul=s(" to do all the above:"),Fl=i(),lt=a("div"),Kl=i(),ae=a("p"),Yl=s("Now, you have written your first "),es=a("a"),Xl=s("babel transform plugin"),ql=s(" that replace all variable named "),rt=a("code"),$l=s("n"),zl=s(" to "),it=a("code"),Ql=s("x"),er=s(", how cool is that?!"),sr=i(),la=a("blockquote"),fe=a("p"),tr=s("Extract out the function "),ct=a("code"),or=s("myCustomPlugin"),ar=s(" to a new file and export it. "),ss=a("a"),nr=s("Package and publish your file as a npm package"),lr=s(" and you can proudly say you have published a babel plugin! \u{1F389}\u{1F389}"),rr=i(),ts=a("p"),ir=s("At this point, you must have thought: "),ra=a("em"),cr=s(`"Yes I've just written a babel plugin, but I have no idea how it works..."`),pr=s(", so fret not, let's dive in on how you can write the babel transformation plugin yourself!"),hr=i(),ia=a("p"),kr=s("So, here is the step-by-step guide to do it:"),rn=i(),T=a("section"),ca=a("h3"),os=a("a"),dr=s("1. Have in mind what you want to transform from and transform into"),vr=i(),pa=a("p"),yr=s("In this example, I want to prank my colleague by creating a babel plugin that will:"),ur=i(),as=a("ul"),ha=a("li"),fr=s("reverse all the variables' and functions' names"),br=i(),ka=a("li"),xr=s("split out string into individual characters"),wr=i(),pt=a("div"),mr=i(),da=a("p"),gr=s("into"),_r=i(),ht=a("div"),Er=i(),Ae=a("p"),Sr=s("Well, we have to keep the "),kt=a("code"),Ir=s("console.log"),Ar=s(", so that even the code is hardly readable, it is still working fine. "),va=a("em"),Tr=s("(I wouldn't want to break the production code!)"),cn=i(),D=a("section"),ya=a("h3"),ns=a("a"),Cr=s("2. Know what to target on the AST"),Or=i(),ls=a("p"),Dr=s("Head down to a "),rs=a("a"),Lr=s("babel AST explorer"),Pr=s(", click on different parts of the code and see where / how it is represented on the AST:"),Hr=i(),ua=a("p"),be=a("span"),dt=a("picture"),fa=a("source"),N=a("img"),Wr=i(),ba=a("p"),Vr=s("If this is your first time seeing the AST, play around with it for a little while and get the sense of how is it look like, and get to know the names of the node on the AST with respect to your code."),jr=i(),xa=a("p"),Jr=s("So, now we know that we need to target:"),Br=i(),is=a("ul"),vt=a("li"),wa=a("strong"),Gr=s("Identifier"),Rr=s(" for variable and function names"),Mr=i(),yt=a("li"),ma=a("strong"),Nr=s("StringLiteral"),Zr=s(" for the string."),pn=i(),B=a("section"),ga=a("h3"),cs=a("a"),Ur=s("3. Know how the transformed AST looks like"),Fr=i(),ps=a("p"),Kr=s("Head down to the "),hs=a("a"),Yr=s("babel AST explorer"),Xr=s(" again, but this time around with the output code you want to generate."),qr=i(),_a=a("p"),xe=a("span"),ut=a("picture"),Ea=a("source"),Z=a("img"),$r=i(),Sa=a("p"),zr=s("Play around and think how you can transform from the previous AST to the current AST."),Qr=i(),ne=a("p"),ei=s("For example, you can see that "),ft=a("code"),si=s("'H' + 'e' + 'l' + 'l' + 'o' + ' ' + eman"),ti=s(" is formed by nested "),bt=a("code"),oi=s("BinaryExpression"),ai=s(" with "),xt=a("code"),ni=s("StringLiteral"),li=s("."),hn=i(),k=a("section"),Ia=a("h3"),ks=a("a"),ri=s("4. Write code"),ii=i(),Aa=a("p"),ci=s("Now look at our code again:"),pi=i(),wt=a("div"),hi=i(),ds=a("p"),ki=s("The transformation uses "),vs=a("a"),di=s("the visitor pattern"),vi=s("."),yi=i(),ys=a("p"),ui=s("During the traversal phase, babel will do a "),us=a("a"),fi=s("depth-first search traversal"),bi=s(" and visit each node in the AST. You can specify a callback method in the visitor, such that while visiting the node, babel will call the callback method with the node it is currently visiting."),xi=i(),fs=a("p"),wi=s("In the visitor object, you can specify the name of the node you want to be "),mt=a("code"),mi=s("callback"),gi=s("ed:"),_i=i(),gt=a("div"),Ei=i(),Ta=a("p"),Si=s('Run it and you will see that "string literal" and "identifier" is being called whenever babel encounters it:'),Ii=i(),_t=a("div"),Ai=i(),Ti=a("hr"),Ci=i(),W=a("p"),Oi=s("Before we continue, let's look at the parameter of "),Et=a("code"),Di=s("Identifer(path) {}"),Li=s(". It says "),St=a("code"),Pi=s("path"),Hi=s(" instead of "),It=a("code"),Wi=s("node"),Vi=s(", what is the difference between "),At=a("code"),ji=s("path"),Ji=s(" and "),Tt=a("code"),Bi=s("node"),Gi=s("? \u{1F937}\u200D"),Ri=i(),E=a("p"),Mi=s("In babel, "),Ct=a("code"),Ni=s("path"),Zi=s(" is an abstraction above "),Ot=a("code"),Ui=s("node"),Fi=s(", it provides the link between nodes, ie the "),Dt=a("code"),Ki=s("parent"),Yi=s(" of the node, as well as information such as the "),Lt=a("code"),Xi=s("scope"),qi=s(", "),Pt=a("code"),$i=s("context"),zi=s(", etc. Besides, the "),Ht=a("code"),Qi=s("path"),ec=s(" provides method such as "),Wt=a("code"),sc=s("replaceWith"),tc=s(", "),Vt=a("code"),oc=s("insertBefore"),ac=s(", "),jt=a("code"),nc=s("remove"),lc=s(", etc that will update and reflect on the underlying AST node."),rc=i(),Ca=a("blockquote"),ce=a("p"),ic=s("You can read more detail about "),Jt=a("code"),cc=s("path"),pc=s(" in "),bs=a("a"),hc=s("Jamie Kyle"),kc=s("'s "),xs=a("a"),dc=s("babel handbook"),vc=i(),yc=a("hr"),uc=i(),Oa=a("p"),fc=s("So let's continue writing our babel plugin."),kn=i(),h=a("section"),Da=a("h4"),ws=a("a"),bc=s("Transforming variable name"),xc=i(),U=a("p"),wc=s("As we can see from the "),ms=a("a"),mc=s("AST explorer"),gc=s(", the name of the "),Bt=a("code"),_c=s("Identifier"),Ec=s(" is stored in the property called "),Gt=a("code"),Sc=s("name"),Ic=s(", so what we will do is to reverse the "),Rt=a("code"),Ac=s("name"),Tc=s("."),Cc=i(),Mt=a("div"),Oc=i(),La=a("p"),Dc=s("Run it and you will see:"),Lc=i(),Nt=a("div"),Pc=i(),gs=a("p"),Hc=s("We are almost there, except we've accidentally reversed "),Zt=a("code"),Wc=s("console.log"),Vc=s(" as well. How can we prevent that?"),jc=i(),Pa=a("p"),Jc=s("Take a look at the AST again:"),Bc=i(),Ha=a("p"),we=a("span"),Ut=a("picture"),Wa=a("source"),X=a("img"),Gc=i(),L=a("p"),Ft=a("code"),Rc=s("console.log"),Mc=s(" is part of the "),Kt=a("code"),Nc=s("MemberExpression"),Zc=s(", with the "),Yt=a("code"),Uc=s("object"),Fc=s(" as "),Xt=a("code"),Kc=s('"console"'),Yc=s(" and "),qt=a("code"),Xc=s("property"),qc=s(" as "),$t=a("code"),$c=s('"log"'),zc=s("."),Qc=i(),me=a("p"),ep=s("So let's check that if our current "),zt=a("code"),sp=s("Identifier"),tp=s(" is within this "),Qt=a("code"),op=s("MemberExpression"),ap=s(" and we will not reverse the name:"),np=i(),eo=a("div"),lp=i(),Va=a("p"),rp=s("And yes, now you get it right!"),ip=i(),so=a("div"),cp=i(),F=a("p"),pp=s("So, why do we have to check whether the "),to=a("code"),hp=s("Identifier"),kp=s("'s parent is not a "),oo=a("code"),dp=s("console.log"),vp=i(),ao=a("code"),yp=s("MemberExpression"),up=s("? Why don't we just compare whether the current "),no=a("code"),fp=s("Identifier.name === 'console' || Identifier.name === 'log'"),bp=s("?"),xp=i(),ge=a("p"),wp=s("You can do that, except that it will not reverse the variable name if it is named "),lo=a("code"),mp=s("console"),gp=s(" or "),ro=a("code"),_p=s("log"),Ep=s(":"),Sp=i(),io=a("div"),Ip=i(),ja=a("blockquote"),I=a("p"),Ap=s("So, how do I know the method "),co=a("code"),Tp=s("isMemberExpression"),Cp=s(" and "),po=a("code"),Op=s("isIdentifier"),Dp=s("? Well, all the node types specified in the "),_s=a("a"),Lp=s("@babel/types"),Pp=s(" have the "),ho=a("code"),Hp=s("isXxxx"),Wp=s(" validator function counterpart, eg: "),ko=a("code"),Vp=s("anyTypeAnnotation"),jp=s(" function will have a "),vo=a("code"),Jp=s("isAnyTypeAnnotation"),Bp=s(" validator. If you want to know the exhaustive list of the validator functions, you can head over "),Es=a("a"),Gp=s("to the actual source code"),Rp=s("."),dn=i(),y=a("section"),Ja=a("h4"),Ss=a("a"),Mp=s("Transforming strings"),Np=i(),_e=a("p"),Zp=s("The next step is to generate a nested "),yo=a("code"),Up=s("BinaryExpression"),Fp=s(" out of "),uo=a("code"),Kp=s("StringLiteral"),Yp=s("."),Xp=i(),K=a("p"),qp=s("To create an AST node, you can use the utility function from "),Is=a("a"),fo=a("code"),$p=s("@babel/types"),zp=s(". "),bo=a("code"),Qp=s("@babel/types"),eh=s(" is also available via "),xo=a("code"),sh=s("babel.types"),th=s(" from "),wo=a("code"),oh=s("@babel/core"),ah=s("."),nh=i(),mo=a("div"),lh=i(),V=a("p"),rh=s("So, we split the content of the "),go=a("code"),ih=s("StringLiteral"),ch=s(", which is in "),_o=a("code"),ph=s("path.node.value"),hh=s(", make each character a "),Eo=a("code"),kh=s("StringLiteral"),dh=s(", and combine them with "),So=a("code"),vh=s("BinaryExpression"),yh=s(". Finally, we replace the "),Io=a("code"),uh=s("StringLiteral"),fh=s(" with the newly created node."),bh=i(),Ba=a("p"),xh=s("...And that's it! Except, we ran into Stack Overflow \u{1F605}:"),wh=i(),Ao=a("div"),mh=i(),Ga=a("p"),gh=s("Why \u{1F937}\u200D ?"),_h=i(),A=a("p"),Eh=s("Well, that's because for each "),To=a("code"),Sh=s("StringLiteral"),Ih=s(" we created more "),Co=a("code"),Ah=s("StringLiteral"),Th=s(", and in each of those "),Oo=a("code"),Ch=s("StringLiteral"),Oh=s(', we are "creating" more '),Do=a("code"),Dh=s("StringLiteral"),Lh=s(". Although we will replace a "),Lo=a("code"),Ph=s("StringLiteral"),Hh=s(" with another "),Po=a("code"),Wh=s("StringLiteral"),Vh=s(", babel will treat it as a new node and will visit the newly created "),Ho=a("code"),jh=s("StringLiteral"),Jh=s(", thus the infinite recursive and stack overflow."),Bh=i(),Ee=a("p"),Gh=s("So, how do we tell babel that once we replaced the "),Wo=a("code"),Rh=s("StringLiteral"),Mh=s(" with the "),Vo=a("code"),Nh=s("newNode"),Zh=s(", babel can stop and don't have to go down and visit the newly created node anymore?"),Uh=i(),As=a("p"),Fh=s("We can use "),jo=a("code"),Kh=s("path.skip()"),Yh=s(" to skip traversing the children of the current path:"),Xh=i(),Jo=a("div"),qh=i(),Ra=a("p"),$h=s("...And yes it works now with now stack overflow!"),vn=i(),G=a("section"),Ma=a("h2"),Ts=a("a"),zh=s("Summary"),Qh=i(),Na=a("p"),ek=s("So, here we have it, our first code transformation with babel:"),sk=i(),Bo=a("div"),tk=i(),Za=a("p"),ok=s("A summary of the steps on how we get here:"),ak=i(),le=a("ol"),Ua=a("li"),nk=s("Have in mind what you want to transform from and transform into"),lk=i(),Fa=a("li"),rk=s("Know what to target on the AST"),ik=i(),Ka=a("li"),ck=s("Know how the transformed AST looks like"),pk=i(),Ya=a("li"),hk=s("Write code"),yn=i(),q=a("section"),Xa=a("h2"),Cs=a("a"),kk=s("Further resources"),dk=i(),Os=a("p"),vk=s("If you are interested to learn more, "),Ds=a("a"),yk=s("babel's Github repo"),uk=s(" is always the best place to find out more code examples of writing a babel transformation."),fk=i(),j=a("p"),bk=s("Head down to "),Ls=a("a"),xk=s("https://github.com/babel/babel"),wk=s(", and look for "),Go=a("code"),mk=s("babel-plugin-transform-*"),gk=s(" or "),Ro=a("code"),_k=s("babel-plugin-proposal-*"),Ek=s(" folders, they are all babel transformation plugin, where you can find code on how babel "),Ps=a("a"),Sk=s("transform the nullish coalescing operator"),Ik=s(", "),Hs=a("a"),Ak=s("optional chaining"),Tk=s(" and many more."),Ck=i(),re=a("blockquote"),qa=a("p"),$a=a("strong"),Ok=s("Manipulating AST with JavaScript using Babel"),Dk=i(),Ws=a("p"),Lk=s("If you like what you've read so far, and want to learn how you could do it with Babel. I've created a "),Vs=a("a"),Pk=s("video course"),Hk=s(", showing you step-by-step, how to write a babel plugin and codemod."),Wk=i(),za=a("p"),Vk=s("In the video course, I detailed tips and tricks, such as how to handle scope, how to use state, and also nested traversals."),jk=i(),Qa=a("p"),en=a("strong"),js=a("a"),Jk=s("Sounds interesting, let's take a look at the video course"),un=i(),Te=a("section"),sn=a("h2"),Js=a("a"),Bk=s("Reference"),Gk=i(),Se=a("ul"),Bs=a("li"),Gs=a("a"),Rk=s("Babel docs"),Mk=s(" & "),Rs=a("a"),Nk=s("Github repo"),Zk=i(),Ms=a("li"),Ns=a("a"),Uk=s("Babel Handbook"),Fk=s(" by "),Zs=a("a"),Kk=s("Jamie Kyle"),Yk=i(),Us=a("li"),Fs=a("a"),Xk=s("Leveling Up One\u2019s Parsing Game With ASTs"),qk=s(" by "),Ks=a("a"),$k=s("Vaidehi Joshi"),this.h()},l(p){Vu(w.$$.fragment,p),te=c(p),J=n(p,"P",{});var v=l(J);He=t(v,"Today, I will share a step-by-step guide for writing a custom "),m=n(v,"A",{href:!0,rel:!0});var cd=l(m);oe=t(cd,"babel"),cd.forEach(o),qs=t(v," transformation. You can use this technique to write your own automated code modifications, refactoring and code generation."),v.forEach(o),an=c(p),ie=n(p,"SECTION",{});var Mo=l(ie);$o=n(Mo,"H2",{});var pd=l($o);We=n(pd,"A",{href:!0,id:!0});var hd=l(We);Bn=t(hd,"What is babel?"),hd.forEach(o),pd.forEach(o),Gn=c(Mo),Ie=n(Mo,"P",{});var tn=l(Ie);Ve=n(tn,"A",{href:!0,rel:!0});var kd=l(Ve);Rn=t(kd,"Babel"),kd.forEach(o),Mn=t(tn," is a JavaScript compiler that is mainly used to convert ECMAScript 2015+ code into backward compatible version of JavaScript in current and older browsers or environments. Babel uses a "),je=n(tn,"A",{href:!0,rel:!0});var dd=l(je);Nn=t(dd,"plugin system"),dd.forEach(o),Zn=t(tn," to do code transformation, so anyone can write their own transformation plugin for babel."),tn.forEach(o),Un=c(Mo),Je=n(Mo,"P",{});var bn=l(Je);Fn=t(bn,"Before you get started writing a transformation plugin for babel, you would need to know what is an "),Be=n(bn,"A",{href:!0,rel:!0});var vd=l(Be);Kn=t(vd,"Abstract Syntax Tree (AST)"),vd.forEach(o),Yn=t(bn,"."),bn.forEach(o),Mo.forEach(o),nn=c(p),O=n(p,"SECTION",{});var $=l(O);zo=n($,"H3",{});var yd=l(zo);Ge=n(yd,"A",{href:!0,id:!0});var ud=l(Ge);Xn=t(ud,"What is Abstract Syntax Tree (AST)?"),ud.forEach(o),yd.forEach(o),qn=c($),Qo=n($,"P",{});var fd=l(Qo);$n=t(fd,"I am not sure I can explain this better than the amazing articles out there on the web:"),fd.forEach(o),zn=c($),ye=n($,"UL",{});var No=l(ye);ue=n(No,"LI",{});var Zo=l(ue);Re=n(Zo,"A",{href:!0,rel:!0});var bd=l(Re);Qn=t(bd,"Leveling Up One\u2019s Parsing Game With ASTs"),bd.forEach(o),el=t(Zo," by "),Me=n(Zo,"A",{href:!0,rel:!0});var xd=l(Me);sl=t(xd,"Vaidehi Joshi"),xd.forEach(o),tl=t(Zo," * "),ea=n(Zo,"EM",{});var wd=l(ea);ol=t(wd,"(Highly recommend this one! \u{1F44D})"),wd.forEach(o),Zo.forEach(o),al=c(No),$s=n(No,"LI",{});var zk=l($s);nl=t(zk,"Wikipedia's "),Ne=n(zk,"A",{href:!0,rel:!0});var md=l(Ne);ll=t(md,"Abstract syntax tree"),md.forEach(o),zk.forEach(o),rl=c(No),Ze=n(No,"LI",{});var xn=l(Ze);Ue=n(xn,"A",{href:!0,rel:!0});var gd=l(Ue);il=t(gd,"What is an Abstract Syntax Tree"),gd.forEach(o),cl=t(xn," by "),Fe=n(xn,"A",{href:!0,rel:!0});var _d=l(Fe);pl=t(_d,"Chidume Nnamdi"),_d.forEach(o),xn.forEach(o),No.forEach(o),hl=c($),Ke=n($,"P",{});var wn=l(Ke);kl=t(wn,"To summarize, AST is a tree representation of your code. In the case of JavaScript, the JavaScript AST follows the "),Ye=n(wn,"A",{href:!0,rel:!0});var Ed=l(Ye);dl=t(Ed,"estree specification"),Ed.forEach(o),vl=t(wn,"."),wn.forEach(o),yl=c($),Xe=n($,"P",{});var mn=l(Xe);ul=t(mn,"AST represents your code, the structure and the meaning of your code. So it allows the compiler like "),qe=n(mn,"A",{href:!0,rel:!0});var Sd=l(qe);fl=t(Sd,"babel"),Sd.forEach(o),bl=t(mn," to understand the code and make specific meaningful transformation to it."),mn.forEach(o),xl=c($),sa=n($,"P",{});var Id=l(sa);wl=t(Id,"So now you know what is AST, let's write a custom babel transformation to modify your code using AST."),Id.forEach(o),$.forEach(o),ln=c(p),f=n(p,"SECTION",{});var g=l(f);ta=n(g,"H2",{});var Ad=l(ta);$e=n(Ad,"A",{href:!0,id:!0});var Td=l($e);ml=t(Td,"How to use babel to transform code"),Td.forEach(o),Ad.forEach(o),gl=c(g),oa=n(g,"P",{});var Cd=l(oa);_l=t(Cd,"The following is the general template of using babel to do code transformation:"),Cd.forEach(o),El=c(g),zs=n(g,"DIV",{class:!0});var af=l(zs);af.forEach(o),Sl=c(g),aa=n(g,"BLOCKQUOTE",{});var Od=l(aa);C=n(Od,"P",{});var R=l(C);Il=t(R,"You would need to install "),ze=n(R,"A",{href:!0,rel:!0});var Dd=l(ze);Al=t(Dd,"@babel/core"),Dd.forEach(o),Tl=t(R," to run this. "),Qs=n(R,"CODE",{class:!0});var Ld=l(Qs);Cl=t(Ld,"@babel/parser"),Ld.forEach(o),Ol=t(R,", "),et=n(R,"CODE",{class:!0});var Pd=l(et);Dl=t(Pd,"@babel/traverse"),Pd.forEach(o),Ll=t(R,", "),st=n(R,"CODE",{class:!0});var Hd=l(st);Pl=t(Hd,"@babel/generator"),Hd.forEach(o),Hl=t(R," are all dependencies of "),tt=n(R,"CODE",{class:!0});var Wd=l(tt);Wl=t(Wd,"@babel/core"),Wd.forEach(o),Vl=t(R,", so installing "),ot=n(R,"CODE",{class:!0});var Vd=l(ot);jl=t(Vd,"@babel/core"),Vd.forEach(o),Jl=t(R," would suffice."),R.forEach(o),Od.forEach(o),Bl=c(g),na=n(g,"P",{});var jd=l(na);Gl=t(jd,"So the general idea is to parse your code to AST, transform the AST, and then generate code from the transformed AST."),jd.forEach(o),Rl=c(g),at=n(g,"DIV",{class:!0});var nf=l(at);nf.forEach(o),Ml=c(g),Qe=n(g,"P",{});var gn=l(Qe);Nl=t(gn,"However, we can use another API from "),nt=n(gn,"CODE",{class:!0});var Jd=l(nt);Zl=t(Jd,"babel"),Jd.forEach(o),Ul=t(gn," to do all the above:"),gn.forEach(o),Fl=c(g),lt=n(g,"DIV",{class:!0});var lf=l(lt);lf.forEach(o),Kl=c(g),ae=n(g,"P",{});var Ce=l(ae);Yl=t(Ce,"Now, you have written your first "),es=n(Ce,"A",{href:!0,rel:!0});var Bd=l(es);Xl=t(Bd,"babel transform plugin"),Bd.forEach(o),ql=t(Ce," that replace all variable named "),rt=n(Ce,"CODE",{class:!0});var Gd=l(rt);$l=t(Gd,"n"),Gd.forEach(o),zl=t(Ce," to "),it=n(Ce,"CODE",{class:!0});var Rd=l(it);Ql=t(Rd,"x"),Rd.forEach(o),er=t(Ce,", how cool is that?!"),Ce.forEach(o),sr=c(g),la=n(g,"BLOCKQUOTE",{});var Md=l(la);fe=n(Md,"P",{});var Uo=l(fe);tr=t(Uo,"Extract out the function "),ct=n(Uo,"CODE",{class:!0});var Nd=l(ct);or=t(Nd,"myCustomPlugin"),Nd.forEach(o),ar=t(Uo," to a new file and export it. "),ss=n(Uo,"A",{href:!0,rel:!0});var Zd=l(ss);nr=t(Zd,"Package and publish your file as a npm package"),Zd.forEach(o),lr=t(Uo," and you can proudly say you have published a babel plugin! \u{1F389}\u{1F389}"),Uo.forEach(o),Md.forEach(o),rr=c(g),ts=n(g,"P",{});var _n=l(ts);ir=t(_n,"At this point, you must have thought: "),ra=n(_n,"EM",{});var Ud=l(ra);cr=t(Ud,`"Yes I've just written a babel plugin, but I have no idea how it works..."`),Ud.forEach(o),pr=t(_n,", so fret not, let's dive in on how you can write the babel transformation plugin yourself!"),_n.forEach(o),hr=c(g),ia=n(g,"P",{});var Fd=l(ia);kr=t(Fd,"So, here is the step-by-step guide to do it:"),Fd.forEach(o),g.forEach(o),rn=c(p),T=n(p,"SECTION",{});var M=l(T);ca=n(M,"H3",{});var Kd=l(ca);os=n(Kd,"A",{href:!0,id:!0});var Yd=l(os);dr=t(Yd,"1. Have in mind what you want to transform from and transform into"),Yd.forEach(o),Kd.forEach(o),vr=c(M),pa=n(M,"P",{});var Xd=l(pa);yr=t(Xd,"In this example, I want to prank my colleague by creating a babel plugin that will:"),Xd.forEach(o),ur=c(M),as=n(M,"UL",{});var En=l(as);ha=n(En,"LI",{});var qd=l(ha);fr=t(qd,"reverse all the variables' and functions' names"),qd.forEach(o),br=c(En),ka=n(En,"LI",{});var $d=l(ka);xr=t($d,"split out string into individual characters"),$d.forEach(o),En.forEach(o),wr=c(M),pt=n(M,"DIV",{class:!0});var rf=l(pt);rf.forEach(o),mr=c(M),da=n(M,"P",{});var zd=l(da);gr=t(zd,"into"),zd.forEach(o),_r=c(M),ht=n(M,"DIV",{class:!0});var cf=l(ht);cf.forEach(o),Er=c(M),Ae=n(M,"P",{});var on=l(Ae);Sr=t(on,"Well, we have to keep the "),kt=n(on,"CODE",{class:!0});var Qd=l(kt);Ir=t(Qd,"console.log"),Qd.forEach(o),Ar=t(on,", so that even the code is hardly readable, it is still working fine. "),va=n(on,"EM",{});var ev=l(va);Tr=t(ev,"(I wouldn't want to break the production code!)"),ev.forEach(o),on.forEach(o),M.forEach(o),cn=c(p),D=n(p,"SECTION",{});var z=l(D);ya=n(z,"H3",{});var sv=l(ya);ns=n(sv,"A",{href:!0,id:!0});var tv=l(ns);Cr=t(tv,"2. Know what to target on the AST"),tv.forEach(o),sv.forEach(o),Or=c(z),ls=n(z,"P",{});var Sn=l(ls);Dr=t(Sn,"Head down to a "),rs=n(Sn,"A",{href:!0,rel:!0});var ov=l(rs);Lr=t(ov,"babel AST explorer"),ov.forEach(o),Pr=t(Sn,", click on different parts of the code and see where / how it is represented on the AST:"),Sn.forEach(o),Hr=c(z),ua=n(z,"P",{});var av=l(ua);be=n(av,"SPAN",{style:!0});var nv=l(be);dt=n(nv,"PICTURE",{});var Qk=l(dt);fa=n(Qk,"SOURCE",{type:!0,srcset:!0}),N=n(Qk,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0,title:!0}),Qk.forEach(o),nv.forEach(o),av.forEach(o),Wr=c(z),ba=n(z,"P",{});var lv=l(ba);Vr=t(lv,"If this is your first time seeing the AST, play around with it for a little while and get the sense of how is it look like, and get to know the names of the node on the AST with respect to your code."),lv.forEach(o),jr=c(z),xa=n(z,"P",{});var rv=l(xa);Jr=t(rv,"So, now we know that we need to target:"),rv.forEach(o),Br=c(z),is=n(z,"UL",{});var In=l(is);vt=n(In,"LI",{});var ed=l(vt);wa=n(ed,"STRONG",{});var iv=l(wa);Gr=t(iv,"Identifier"),iv.forEach(o),Rr=t(ed," for variable and function names"),ed.forEach(o),Mr=c(In),yt=n(In,"LI",{});var sd=l(yt);ma=n(sd,"STRONG",{});var cv=l(ma);Nr=t(cv,"StringLiteral"),cv.forEach(o),Zr=t(sd," for the string."),sd.forEach(o),In.forEach(o),z.forEach(o),pn=c(p),B=n(p,"SECTION",{});var pe=l(B);ga=n(pe,"H3",{});var pv=l(ga);cs=n(pv,"A",{href:!0,id:!0});var hv=l(cs);Ur=t(hv,"3. Know how the transformed AST looks like"),hv.forEach(o),pv.forEach(o),Fr=c(pe),ps=n(pe,"P",{});var An=l(ps);Kr=t(An,"Head down to the "),hs=n(An,"A",{href:!0,rel:!0});var kv=l(hs);Yr=t(kv,"babel AST explorer"),kv.forEach(o),Xr=t(An," again, but this time around with the output code you want to generate."),An.forEach(o),qr=c(pe),_a=n(pe,"P",{});var dv=l(_a);xe=n(dv,"SPAN",{style:!0});var vv=l(xe);ut=n(vv,"PICTURE",{});var td=l(ut);Ea=n(td,"SOURCE",{type:!0,srcset:!0}),Z=n(td,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0,title:!0}),td.forEach(o),vv.forEach(o),dv.forEach(o),$r=c(pe),Sa=n(pe,"P",{});var yv=l(Sa);zr=t(yv,"Play around and think how you can transform from the previous AST to the current AST."),yv.forEach(o),Qr=c(pe),ne=n(pe,"P",{});var Oe=l(ne);ei=t(Oe,"For example, you can see that "),ft=n(Oe,"CODE",{class:!0});var uv=l(ft);si=t(uv,"'H' + 'e' + 'l' + 'l' + 'o' + ' ' + eman"),uv.forEach(o),ti=t(Oe," is formed by nested "),bt=n(Oe,"CODE",{class:!0});var fv=l(bt);oi=t(fv,"BinaryExpression"),fv.forEach(o),ai=t(Oe," with "),xt=n(Oe,"CODE",{class:!0});var bv=l(xt);ni=t(bv,"StringLiteral"),bv.forEach(o),li=t(Oe,"."),Oe.forEach(o),pe.forEach(o),hn=c(p),k=n(p,"SECTION",{});var u=l(k);Ia=n(u,"H3",{});var xv=l(Ia);ks=n(xv,"A",{href:!0,id:!0});var wv=l(ks);ri=t(wv,"4. Write code"),wv.forEach(o),xv.forEach(o),ii=c(u),Aa=n(u,"P",{});var mv=l(Aa);ci=t(mv,"Now look at our code again:"),mv.forEach(o),pi=c(u),wt=n(u,"DIV",{class:!0});var pf=l(wt);pf.forEach(o),hi=c(u),ds=n(u,"P",{});var Tn=l(ds);ki=t(Tn,"The transformation uses "),vs=n(Tn,"A",{href:!0,rel:!0});var gv=l(vs);di=t(gv,"the visitor pattern"),gv.forEach(o),vi=t(Tn,"."),Tn.forEach(o),yi=c(u),ys=n(u,"P",{});var Cn=l(ys);ui=t(Cn,"During the traversal phase, babel will do a "),us=n(Cn,"A",{href:!0,rel:!0});var _v=l(us);fi=t(_v,"depth-first search traversal"),_v.forEach(o),bi=t(Cn," and visit each node in the AST. You can specify a callback method in the visitor, such that while visiting the node, babel will call the callback method with the node it is currently visiting."),Cn.forEach(o),xi=c(u),fs=n(u,"P",{});var On=l(fs);wi=t(On,"In the visitor object, you can specify the name of the node you want to be "),mt=n(On,"CODE",{class:!0});var Ev=l(mt);mi=t(Ev,"callback"),Ev.forEach(o),gi=t(On,"ed:"),On.forEach(o),_i=c(u),gt=n(u,"DIV",{class:!0});var hf=l(gt);hf.forEach(o),Ei=c(u),Ta=n(u,"P",{});var Sv=l(Ta);Si=t(Sv,'Run it and you will see that "string literal" and "identifier" is being called whenever babel encounters it:'),Sv.forEach(o),Ii=c(u),_t=n(u,"DIV",{class:!0});var kf=l(_t);kf.forEach(o),Ai=c(u),Ti=n(u,"HR",{}),Ci=c(u),W=n(u,"P",{});var Q=l(W);Oi=t(Q,"Before we continue, let's look at the parameter of "),Et=n(Q,"CODE",{class:!0});var Iv=l(Et);Di=t(Iv,"Identifer(path) {}"),Iv.forEach(o),Li=t(Q,". It says "),St=n(Q,"CODE",{class:!0});var Av=l(St);Pi=t(Av,"path"),Av.forEach(o),Hi=t(Q," instead of "),It=n(Q,"CODE",{class:!0});var Tv=l(It);Wi=t(Tv,"node"),Tv.forEach(o),Vi=t(Q,", what is the difference between "),At=n(Q,"CODE",{class:!0});var Cv=l(At);ji=t(Cv,"path"),Cv.forEach(o),Ji=t(Q," and "),Tt=n(Q,"CODE",{class:!0});var Ov=l(Tt);Bi=t(Ov,"node"),Ov.forEach(o),Gi=t(Q,"? \u{1F937}\u200D"),Q.forEach(o),Ri=c(u),E=n(u,"P",{});var S=l(E);Mi=t(S,"In babel, "),Ct=n(S,"CODE",{class:!0});var Dv=l(Ct);Ni=t(Dv,"path"),Dv.forEach(o),Zi=t(S," is an abstraction above "),Ot=n(S,"CODE",{class:!0});var Lv=l(Ot);Ui=t(Lv,"node"),Lv.forEach(o),Fi=t(S,", it provides the link between nodes, ie the "),Dt=n(S,"CODE",{class:!0});var Pv=l(Dt);Ki=t(Pv,"parent"),Pv.forEach(o),Yi=t(S," of the node, as well as information such as the "),Lt=n(S,"CODE",{class:!0});var Hv=l(Lt);Xi=t(Hv,"scope"),Hv.forEach(o),qi=t(S,", "),Pt=n(S,"CODE",{class:!0});var Wv=l(Pt);$i=t(Wv,"context"),Wv.forEach(o),zi=t(S,", etc. Besides, the "),Ht=n(S,"CODE",{class:!0});var Vv=l(Ht);Qi=t(Vv,"path"),Vv.forEach(o),ec=t(S," provides method such as "),Wt=n(S,"CODE",{class:!0});var jv=l(Wt);sc=t(jv,"replaceWith"),jv.forEach(o),tc=t(S,", "),Vt=n(S,"CODE",{class:!0});var Jv=l(Vt);oc=t(Jv,"insertBefore"),Jv.forEach(o),ac=t(S,", "),jt=n(S,"CODE",{class:!0});var Bv=l(jt);nc=t(Bv,"remove"),Bv.forEach(o),lc=t(S,", etc that will update and reflect on the underlying AST node."),S.forEach(o),rc=c(u),Ca=n(u,"BLOCKQUOTE",{});var Gv=l(Ca);ce=n(Gv,"P",{});var Ys=l(ce);ic=t(Ys,"You can read more detail about "),Jt=n(Ys,"CODE",{class:!0});var Rv=l(Jt);cc=t(Rv,"path"),Rv.forEach(o),pc=t(Ys," in "),bs=n(Ys,"A",{href:!0,rel:!0});var Mv=l(bs);hc=t(Mv,"Jamie Kyle"),Mv.forEach(o),kc=t(Ys,"'s "),xs=n(Ys,"A",{href:!0,rel:!0});var Nv=l(xs);dc=t(Nv,"babel handbook"),Nv.forEach(o),Ys.forEach(o),Gv.forEach(o),vc=c(u),yc=n(u,"HR",{}),uc=c(u),Oa=n(u,"P",{});var Zv=l(Oa);fc=t(Zv,"So let's continue writing our babel plugin."),Zv.forEach(o),u.forEach(o),kn=c(p),h=n(p,"SECTION",{});var d=l(h);Da=n(d,"H4",{});var Uv=l(Da);ws=n(Uv,"A",{href:!0,id:!0});var Fv=l(ws);bc=t(Fv,"Transforming variable name"),Fv.forEach(o),Uv.forEach(o),xc=c(d),U=n(d,"P",{});var he=l(U);wc=t(he,"As we can see from the "),ms=n(he,"A",{href:!0,rel:!0});var Kv=l(ms);mc=t(Kv,"AST explorer"),Kv.forEach(o),gc=t(he,", the name of the "),Bt=n(he,"CODE",{class:!0});var Yv=l(Bt);_c=t(Yv,"Identifier"),Yv.forEach(o),Ec=t(he," is stored in the property called "),Gt=n(he,"CODE",{class:!0});var Xv=l(Gt);Sc=t(Xv,"name"),Xv.forEach(o),Ic=t(he,", so what we will do is to reverse the "),Rt=n(he,"CODE",{class:!0});var qv=l(Rt);Ac=t(qv,"name"),qv.forEach(o),Tc=t(he,"."),he.forEach(o),Cc=c(d),Mt=n(d,"DIV",{class:!0});var df=l(Mt);df.forEach(o),Oc=c(d),La=n(d,"P",{});var $v=l(La);Dc=t($v,"Run it and you will see:"),$v.forEach(o),Lc=c(d),Nt=n(d,"DIV",{class:!0});var vf=l(Nt);vf.forEach(o),Pc=c(d),gs=n(d,"P",{});var Dn=l(gs);Hc=t(Dn,"We are almost there, except we've accidentally reversed "),Zt=n(Dn,"CODE",{class:!0});var zv=l(Zt);Wc=t(zv,"console.log"),zv.forEach(o),Vc=t(Dn," as well. How can we prevent that?"),Dn.forEach(o),jc=c(d),Pa=n(d,"P",{});var Qv=l(Pa);Jc=t(Qv,"Take a look at the AST again:"),Qv.forEach(o),Bc=c(d),Ha=n(d,"P",{});var ey=l(Ha);we=n(ey,"SPAN",{style:!0});var sy=l(we);Ut=n(sy,"PICTURE",{});var od=l(Ut);Wa=n(od,"SOURCE",{type:!0,srcset:!0}),X=n(od,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),od.forEach(o),sy.forEach(o),ey.forEach(o),Gc=c(d),L=n(d,"P",{});var Y=l(L);Ft=n(Y,"CODE",{class:!0});var ty=l(Ft);Rc=t(ty,"console.log"),ty.forEach(o),Mc=t(Y," is part of the "),Kt=n(Y,"CODE",{class:!0});var oy=l(Kt);Nc=t(oy,"MemberExpression"),oy.forEach(o),Zc=t(Y,", with the "),Yt=n(Y,"CODE",{class:!0});var ay=l(Yt);Uc=t(ay,"object"),ay.forEach(o),Fc=t(Y," as "),Xt=n(Y,"CODE",{class:!0});var ny=l(Xt);Kc=t(ny,'"console"'),ny.forEach(o),Yc=t(Y," and "),qt=n(Y,"CODE",{class:!0});var ly=l(qt);Xc=t(ly,"property"),ly.forEach(o),qc=t(Y," as "),$t=n(Y,"CODE",{class:!0});var ry=l($t);$c=t(ry,'"log"'),ry.forEach(o),zc=t(Y,"."),Y.forEach(o),Qc=c(d),me=n(d,"P",{});var Fo=l(me);ep=t(Fo,"So let's check that if our current "),zt=n(Fo,"CODE",{class:!0});var iy=l(zt);sp=t(iy,"Identifier"),iy.forEach(o),tp=t(Fo," is within this "),Qt=n(Fo,"CODE",{class:!0});var cy=l(Qt);op=t(cy,"MemberExpression"),cy.forEach(o),ap=t(Fo," and we will not reverse the name:"),Fo.forEach(o),np=c(d),eo=n(d,"DIV",{class:!0});var yf=l(eo);yf.forEach(o),lp=c(d),Va=n(d,"P",{});var py=l(Va);rp=t(py,"And yes, now you get it right!"),py.forEach(o),ip=c(d),so=n(d,"DIV",{class:!0});var uf=l(so);uf.forEach(o),cp=c(d),F=n(d,"P",{});var ke=l(F);pp=t(ke,"So, why do we have to check whether the "),to=n(ke,"CODE",{class:!0});var hy=l(to);hp=t(hy,"Identifier"),hy.forEach(o),kp=t(ke,"'s parent is not a "),oo=n(ke,"CODE",{class:!0});var ky=l(oo);dp=t(ky,"console.log"),ky.forEach(o),vp=c(ke),ao=n(ke,"CODE",{class:!0});var dy=l(ao);yp=t(dy,"MemberExpression"),dy.forEach(o),up=t(ke,"? Why don't we just compare whether the current "),no=n(ke,"CODE",{class:!0});var vy=l(no);fp=t(vy,"Identifier.name === 'console' || Identifier.name === 'log'"),vy.forEach(o),bp=t(ke,"?"),ke.forEach(o),xp=c(d),ge=n(d,"P",{});var Ko=l(ge);wp=t(Ko,"You can do that, except that it will not reverse the variable name if it is named "),lo=n(Ko,"CODE",{class:!0});var yy=l(lo);mp=t(yy,"console"),yy.forEach(o),gp=t(Ko," or "),ro=n(Ko,"CODE",{class:!0});var uy=l(ro);_p=t(uy,"log"),uy.forEach(o),Ep=t(Ko,":"),Ko.forEach(o),Sp=c(d),io=n(d,"DIV",{class:!0});var ff=l(io);ff.forEach(o),Ip=c(d),ja=n(d,"BLOCKQUOTE",{});var fy=l(ja);I=n(fy,"P",{});var P=l(I);Ap=t(P,"So, how do I know the method "),co=n(P,"CODE",{class:!0});var by=l(co);Tp=t(by,"isMemberExpression"),by.forEach(o),Cp=t(P," and "),po=n(P,"CODE",{class:!0});var xy=l(po);Op=t(xy,"isIdentifier"),xy.forEach(o),Dp=t(P,"? Well, all the node types specified in the "),_s=n(P,"A",{href:!0,rel:!0});var wy=l(_s);Lp=t(wy,"@babel/types"),wy.forEach(o),Pp=t(P," have the "),ho=n(P,"CODE",{class:!0});var my=l(ho);Hp=t(my,"isXxxx"),my.forEach(o),Wp=t(P," validator function counterpart, eg: "),ko=n(P,"CODE",{class:!0});var gy=l(ko);Vp=t(gy,"anyTypeAnnotation"),gy.forEach(o),jp=t(P," function will have a "),vo=n(P,"CODE",{class:!0});var _y=l(vo);Jp=t(_y,"isAnyTypeAnnotation"),_y.forEach(o),Bp=t(P," validator. If you want to know the exhaustive list of the validator functions, you can head over "),Es=n(P,"A",{href:!0,rel:!0});var Ey=l(Es);Gp=t(Ey,"to the actual source code"),Ey.forEach(o),Rp=t(P,"."),P.forEach(o),fy.forEach(o),d.forEach(o),dn=c(p),y=n(p,"SECTION",{});var b=l(y);Ja=n(b,"H4",{});var Sy=l(Ja);Ss=n(Sy,"A",{href:!0,id:!0});var Iy=l(Ss);Mp=t(Iy,"Transforming strings"),Iy.forEach(o),Sy.forEach(o),Np=c(b),_e=n(b,"P",{});var Yo=l(_e);Zp=t(Yo,"The next step is to generate a nested "),yo=n(Yo,"CODE",{class:!0});var Ay=l(yo);Up=t(Ay,"BinaryExpression"),Ay.forEach(o),Fp=t(Yo," out of "),uo=n(Yo,"CODE",{class:!0});var Ty=l(uo);Kp=t(Ty,"StringLiteral"),Ty.forEach(o),Yp=t(Yo,"."),Yo.forEach(o),Xp=c(b),K=n(b,"P",{});var de=l(K);qp=t(de,"To create an AST node, you can use the utility function from "),Is=n(de,"A",{href:!0,rel:!0});var Cy=l(Is);fo=n(Cy,"CODE",{class:!0});var Oy=l(fo);$p=t(Oy,"@babel/types"),Oy.forEach(o),Cy.forEach(o),zp=t(de,". "),bo=n(de,"CODE",{class:!0});var Dy=l(bo);Qp=t(Dy,"@babel/types"),Dy.forEach(o),eh=t(de," is also available via "),xo=n(de,"CODE",{class:!0});var Ly=l(xo);sh=t(Ly,"babel.types"),Ly.forEach(o),th=t(de," from "),wo=n(de,"CODE",{class:!0});var Py=l(wo);oh=t(Py,"@babel/core"),Py.forEach(o),ah=t(de,"."),de.forEach(o),nh=c(b),mo=n(b,"DIV",{class:!0});var bf=l(mo);bf.forEach(o),lh=c(b),V=n(b,"P",{});var ee=l(V);rh=t(ee,"So, we split the content of the "),go=n(ee,"CODE",{class:!0});var Hy=l(go);ih=t(Hy,"StringLiteral"),Hy.forEach(o),ch=t(ee,", which is in "),_o=n(ee,"CODE",{class:!0});var Wy=l(_o);ph=t(Wy,"path.node.value"),Wy.forEach(o),hh=t(ee,", make each character a "),Eo=n(ee,"CODE",{class:!0});var Vy=l(Eo);kh=t(Vy,"StringLiteral"),Vy.forEach(o),dh=t(ee,", and combine them with "),So=n(ee,"CODE",{class:!0});var jy=l(So);vh=t(jy,"BinaryExpression"),jy.forEach(o),yh=t(ee,". Finally, we replace the "),Io=n(ee,"CODE",{class:!0});var Jy=l(Io);uh=t(Jy,"StringLiteral"),Jy.forEach(o),fh=t(ee," with the newly created node."),ee.forEach(o),bh=c(b),Ba=n(b,"P",{});var By=l(Ba);xh=t(By,"...And that's it! Except, we ran into Stack Overflow \u{1F605}:"),By.forEach(o),wh=c(b),Ao=n(b,"DIV",{class:!0});var xf=l(Ao);xf.forEach(o),mh=c(b),Ga=n(b,"P",{});var Gy=l(Ga);gh=t(Gy,"Why \u{1F937}\u200D ?"),Gy.forEach(o),_h=c(b),A=n(b,"P",{});var H=l(A);Eh=t(H,"Well, that's because for each "),To=n(H,"CODE",{class:!0});var Ry=l(To);Sh=t(Ry,"StringLiteral"),Ry.forEach(o),Ih=t(H," we created more "),Co=n(H,"CODE",{class:!0});var My=l(Co);Ah=t(My,"StringLiteral"),My.forEach(o),Th=t(H,", and in each of those "),Oo=n(H,"CODE",{class:!0});var Ny=l(Oo);Ch=t(Ny,"StringLiteral"),Ny.forEach(o),Oh=t(H,', we are "creating" more '),Do=n(H,"CODE",{class:!0});var Zy=l(Do);Dh=t(Zy,"StringLiteral"),Zy.forEach(o),Lh=t(H,". Although we will replace a "),Lo=n(H,"CODE",{class:!0});var Uy=l(Lo);Ph=t(Uy,"StringLiteral"),Uy.forEach(o),Hh=t(H," with another "),Po=n(H,"CODE",{class:!0});var Fy=l(Po);Wh=t(Fy,"StringLiteral"),Fy.forEach(o),Vh=t(H,", babel will treat it as a new node and will visit the newly created "),Ho=n(H,"CODE",{class:!0});var Ky=l(Ho);jh=t(Ky,"StringLiteral"),Ky.forEach(o),Jh=t(H,", thus the infinite recursive and stack overflow."),H.forEach(o),Bh=c(b),Ee=n(b,"P",{});var Xo=l(Ee);Gh=t(Xo,"So, how do we tell babel that once we replaced the "),Wo=n(Xo,"CODE",{class:!0});var Yy=l(Wo);Rh=t(Yy,"StringLiteral"),Yy.forEach(o),Mh=t(Xo," with the "),Vo=n(Xo,"CODE",{class:!0});var Xy=l(Vo);Nh=t(Xy,"newNode"),Xy.forEach(o),Zh=t(Xo,", babel can stop and don't have to go down and visit the newly created node anymore?"),Xo.forEach(o),Uh=c(b),As=n(b,"P",{});var Ln=l(As);Fh=t(Ln,"We can use "),jo=n(Ln,"CODE",{class:!0});var qy=l(jo);Kh=t(qy,"path.skip()"),qy.forEach(o),Yh=t(Ln," to skip traversing the children of the current path:"),Ln.forEach(o),Xh=c(b),Jo=n(b,"DIV",{class:!0});var wf=l(Jo);wf.forEach(o),qh=c(b),Ra=n(b,"P",{});var $y=l(Ra);$h=t($y,"...And yes it works now with now stack overflow!"),$y.forEach(o),b.forEach(o),vn=c(p),G=n(p,"SECTION",{});var ve=l(G);Ma=n(ve,"H2",{});var zy=l(Ma);Ts=n(zy,"A",{href:!0,id:!0});var Qy=l(Ts);zh=t(Qy,"Summary"),Qy.forEach(o),zy.forEach(o),Qh=c(ve),Na=n(ve,"P",{});var eu=l(Na);ek=t(eu,"So, here we have it, our first code transformation with babel:"),eu.forEach(o),sk=c(ve),Bo=n(ve,"DIV",{class:!0});var mf=l(Bo);mf.forEach(o),tk=c(ve),Za=n(ve,"P",{});var su=l(Za);ok=t(su,"A summary of the steps on how we get here:"),su.forEach(o),ak=c(ve),le=n(ve,"OL",{});var De=l(le);Ua=n(De,"LI",{});var tu=l(Ua);nk=t(tu,"Have in mind what you want to transform from and transform into"),tu.forEach(o),lk=c(De),Fa=n(De,"LI",{});var ou=l(Fa);rk=t(ou,"Know what to target on the AST"),ou.forEach(o),ik=c(De),Ka=n(De,"LI",{});var au=l(Ka);ck=t(au,"Know how the transformed AST looks like"),au.forEach(o),pk=c(De),Ya=n(De,"LI",{});var nu=l(Ya);hk=t(nu,"Write code"),nu.forEach(o),De.forEach(o),ve.forEach(o),yn=c(p),q=n(p,"SECTION",{});var Le=l(q);Xa=n(Le,"H2",{});var lu=l(Xa);Cs=n(lu,"A",{href:!0,id:!0});var ru=l(Cs);kk=t(ru,"Further resources"),ru.forEach(o),lu.forEach(o),dk=c(Le),Os=n(Le,"P",{});var Pn=l(Os);vk=t(Pn,"If you are interested to learn more, "),Ds=n(Pn,"A",{href:!0,rel:!0});var iu=l(Ds);yk=t(iu,"babel's Github repo"),iu.forEach(o),uk=t(Pn," is always the best place to find out more code examples of writing a babel transformation."),Pn.forEach(o),fk=c(Le),j=n(Le,"P",{});var se=l(j);bk=t(se,"Head down to "),Ls=n(se,"A",{href:!0,rel:!0});var cu=l(Ls);xk=t(cu,"https://github.com/babel/babel"),cu.forEach(o),wk=t(se,", and look for "),Go=n(se,"CODE",{class:!0});var pu=l(Go);mk=t(pu,"babel-plugin-transform-*"),pu.forEach(o),gk=t(se," or "),Ro=n(se,"CODE",{class:!0});var hu=l(Ro);_k=t(hu,"babel-plugin-proposal-*"),hu.forEach(o),Ek=t(se," folders, they are all babel transformation plugin, where you can find code on how babel "),Ps=n(se,"A",{href:!0,rel:!0});var ku=l(Ps);Sk=t(ku,"transform the nullish coalescing operator"),ku.forEach(o),Ik=t(se,", "),Hs=n(se,"A",{href:!0,rel:!0});var du=l(Hs);Ak=t(du,"optional chaining"),du.forEach(o),Tk=t(se," and many more."),se.forEach(o),Ck=c(Le),re=n(Le,"BLOCKQUOTE",{});var Pe=l(re);qa=n(Pe,"P",{});var vu=l(qa);$a=n(vu,"STRONG",{});var yu=l($a);Ok=t(yu,"Manipulating AST with JavaScript using Babel"),yu.forEach(o),vu.forEach(o),Dk=c(Pe),Ws=n(Pe,"P",{});var Hn=l(Ws);Lk=t(Hn,"If you like what you've read so far, and want to learn how you could do it with Babel. I've created a "),Vs=n(Hn,"A",{href:!0,rel:!0});var uu=l(Vs);Pk=t(uu,"video course"),uu.forEach(o),Hk=t(Hn,", showing you step-by-step, how to write a babel plugin and codemod."),Hn.forEach(o),Wk=c(Pe),za=n(Pe,"P",{});var fu=l(za);Vk=t(fu,"In the video course, I detailed tips and tricks, such as how to handle scope, how to use state, and also nested traversals."),fu.forEach(o),jk=c(Pe),Qa=n(Pe,"P",{});var bu=l(Qa);en=n(bu,"STRONG",{});var xu=l(en);js=n(xu,"A",{href:!0,rel:!0});var wu=l(js);Jk=t(wu,"Sounds interesting, let's take a look at the video course"),wu.forEach(o),xu.forEach(o),bu.forEach(o),Pe.forEach(o),Le.forEach(o),un=c(p),Te=n(p,"SECTION",{});var Wn=l(Te);sn=n(Wn,"H2",{});var mu=l(sn);Js=n(mu,"A",{href:!0,id:!0});var gu=l(Js);Bk=t(gu,"Reference"),gu.forEach(o),mu.forEach(o),Gk=c(Wn),Se=n(Wn,"UL",{});var qo=l(Se);Bs=n(qo,"LI",{});var Vn=l(Bs);Gs=n(Vn,"A",{href:!0,rel:!0});var _u=l(Gs);Rk=t(_u,"Babel docs"),_u.forEach(o),Mk=t(Vn," & "),Rs=n(Vn,"A",{href:!0,rel:!0});var Eu=l(Rs);Nk=t(Eu,"Github repo"),Eu.forEach(o),Vn.forEach(o),Zk=c(qo),Ms=n(qo,"LI",{});var jn=l(Ms);Ns=n(jn,"A",{href:!0,rel:!0});var Su=l(Ns);Uk=t(Su,"Babel Handbook"),Su.forEach(o),Fk=t(jn," by "),Zs=n(jn,"A",{href:!0,rel:!0});var Iu=l(Zs);Kk=t(Iu,"Jamie Kyle"),Iu.forEach(o),jn.forEach(o),Yk=c(qo),Us=n(qo,"LI",{});var Jn=l(Us);Fs=n(Jn,"A",{href:!0,rel:!0});var Au=l(Fs);Xk=t(Au,"Leveling Up One\u2019s Parsing Game With ASTs"),Au.forEach(o),qk=t(Jn," by "),Ks=n(Jn,"A",{href:!0,rel:!0});var Tu=l(Ks);$k=t(Tu,"Vaidehi Joshi"),Tu.forEach(o),Jn.forEach(o),qo.forEach(o),Wn.forEach(o),this.h()},h(){r(m,"href","https://babeljs.io/docs/en/babel-core"),r(m,"rel","nofollow"),r(We,"href","#what-is-babel"),r(We,"id","what-is-babel"),r(Ve,"href","https://babeljs.io/docs/en/"),r(Ve,"rel","nofollow"),r(je,"href","https://babeljs.io/docs/en/plugins"),r(je,"rel","nofollow"),r(Be,"href","https://en.wikipedia.org/wiki/Abstract_syntax_tree"),r(Be,"rel","nofollow"),r(Ge,"href","#what-is-abstract-syntax-tree-ast"),r(Ge,"id","what-is-abstract-syntax-tree-ast"),r(Re,"href","https://medium.com/basecs/leveling-up-ones-parsing-game-with-asts-d7a6fc2400ff"),r(Re,"rel","nofollow"),r(Me,"href","https://twitter.com/vaidehijoshi"),r(Me,"rel","nofollow"),r(Ne,"href","https://en.wikipedia.org/wiki/Abstract_syntax_tree"),r(Ne,"rel","nofollow"),r(Ue,"href","https://blog.bitsrc.io/what-is-an-abstract-syntax-tree-7502b71bde27"),r(Ue,"rel","nofollow"),r(Fe,"href","https://twitter.com/ngArchangel"),r(Fe,"rel","nofollow"),r(Ye,"href","https://github.com/estree/estree"),r(Ye,"rel","nofollow"),r(qe,"href","https://babeljs.io"),r(qe,"rel","nofollow"),r($e,"href","#how-to-use-babel-to-transform-code"),r($e,"id","how-to-use-babel-to-transform-code"),r(zs,"class","code-section"),r(ze,"href","https://www.npmjs.com/package/@babel/core"),r(ze,"rel","nofollow"),r(Qs,"class","inline"),r(et,"class","inline"),r(st,"class","inline"),r(tt,"class","inline"),r(ot,"class","inline"),r(at,"class","code-section"),r(nt,"class","inline"),r(lt,"class","code-section"),r(es,"href","https://babeljs.io/docs/en/plugins"),r(es,"rel","nofollow"),r(rt,"class","inline"),r(it,"class","inline"),r(ct,"class","inline"),r(ss,"href","https://medium.com/@bretcameron/how-to-publish-your-first-npm-package-b224296fc57b"),r(ss,"rel","nofollow"),r(os,"href","#1-have-in-mind-what-you-want-to-transform-from-and-transform-into"),r(os,"id","1-have-in-mind-what-you-want-to-transform-from-and-transform-into"),r(pt,"class","code-section"),r(ht,"class","code-section"),r(kt,"class","inline"),r(ns,"href","#2-know-what-to-target-on-the-ast"),r(ns,"id","2-know-what-to-target-on-the-ast"),r(rs,"href","https://lihautan.com/babel-ast-explorer/#?eyJiYWJlbFNldHRpbmdzIjp7InZlcnNpb24iOiI3LjQuNSJ9LCJ0cmVlU2V0dGluZ3MiOnsiaGlkZUVtcHR5Ijp0cnVlLCJoaWRlTG9jYXRpb24iOnRydWUsImhpZGVUeXBlIjp0cnVlfSwiY29kZSI6ImZ1bmN0aW9uIGdyZWV0KG5hbWUpIHtcbiAgcmV0dXJuICdIZWxsbyAnICsgbmFtZTtcbn1cblxuY29uc29sZS5sb2coZ3JlZXQoJ3RhbmhhdWhhdScpKTsgLy8gSGVsbG8gdGFuaGF1aGF1In0="),r(rs,"rel","nofollow"),r(fa,"type","image/webp"),r(fa,"srcset",jf+", "+Vf+" 2x"),ad(N.src,ld=Pu)||r(N,"src",ld),r(N,"srcset",Pu+", "+Jf+" 2x"),r(N,"loading","lazy"),_(N,"position","absolute"),_(N,"top","0"),_(N,"width","100%"),_(N,"height","100%"),r(N,"alt","targeting"),r(N,"title","Selecting the code on the left and see the corresponding part of the AST light up on the right"),_(be,"display","block"),_(be,"position","relative"),_(be,"padding-top","15.703%"),_(be,"width","100%"),r(cs,"href","#3-know-how-the-transformed-ast-looks-like"),r(cs,"id","3-know-how-the-transformed-ast-looks-like"),r(hs,"href","https://lihautan.com/babel-ast-explorer/#?eyJiYWJlbFNldHRpbmdzIjp7InZlcnNpb24iOiI3LjQuNSJ9LCJ0cmVlU2V0dGluZ3MiOnsiaGlkZUVtcHR5Ijp0cnVlLCJoaWRlTG9jYXRpb24iOnRydWUsImhpZGVUeXBlIjp0cnVlLCJoaWRlQ29tbWVudHMiOnRydWV9LCJjb2RlIjoiZnVuY3Rpb24gdGVlcmcoZW1hbikge1xuICByZXR1cm4gXCJIXCIgKyBcImVcIiArIFwibFwiICsgXCJsXCIgKyBcIm9cIiArIFwiIFwiICsgZW1hbjtcbn1cblxuY29uc29sZS5sb2codGVlcmcoXCJ0XCIgKyBcImFcIiArIFwiblwiICsgXCJoXCIgKyBcImFcIiArIFwidVwiICsgXCJoXCIgKyBcImFcIiArIFwidVwiKSk7IC8vIEhlbGxvIHRhbmhhdWhhdVxuIn0="),r(hs,"rel","nofollow"),r(Ea,"type","image/webp"),r(Ea,"srcset",Hf+", "+Pf+" 2x"),ad(Z.src,rd=Lu)||r(Z,"src",rd),r(Z,"srcset",Lu+", "+Wf+" 2x"),r(Z,"loading","lazy"),_(Z,"position","absolute"),_(Z,"top","0"),_(Z,"width","100%"),_(Z,"height","100%"),r(Z,"alt","output"),r(Z,"title","You can see that what used to be a `StringLiteral` is now a nested `BinaryExpression`"),_(xe,"display","block"),_(xe,"position","relative"),_(xe,"padding-top","42.782%"),_(xe,"width","100%"),r(ft,"class","inline"),r(bt,"class","inline"),r(xt,"class","inline"),r(ks,"href","#4-write-code"),r(ks,"id","4-write-code"),r(wt,"class","code-section"),r(vs,"href","https://en.wikipedia.org/wiki/Visitor_pattern"),r(vs,"rel","nofollow"),r(us,"href","https://en.wikipedia.org/wiki/Depth-first_search"),r(us,"rel","nofollow"),r(mt,"class","inline"),r(gt,"class","code-section"),r(_t,"class","code-section"),r(Et,"class","inline"),r(St,"class","inline"),r(It,"class","inline"),r(At,"class","inline"),r(Tt,"class","inline"),r(Ct,"class","inline"),r(Ot,"class","inline"),r(Dt,"class","inline"),r(Lt,"class","inline"),r(Pt,"class","inline"),r(Ht,"class","inline"),r(Wt,"class","inline"),r(Vt,"class","inline"),r(jt,"class","inline"),r(Jt,"class","inline"),r(bs,"href","https://jamie.build"),r(bs,"rel","nofollow"),r(xs,"href","https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#paths"),r(xs,"rel","nofollow"),r(ws,"href","#transforming-variable-name"),r(ws,"id","transforming-variable-name"),r(ms,"href","https://lihautan.com/babel-ast-explorer/#?eyJiYWJlbFNldHRpbmdzIjp7InZlcnNpb24iOiI3LjQuNSJ9LCJ0cmVlU2V0dGluZ3MiOnsiaGlkZUVtcHR5Ijp0cnVlLCJoaWRlTG9jYXRpb24iOnRydWUsImhpZGVUeXBlIjp0cnVlfSwiY29kZSI6ImZ1bmN0aW9uIGdyZWV0KG5hbWUpIHtcbiAgcmV0dXJuICdIZWxsbyAnICsgbmFtZTtcbn1cblxuY29uc29sZS5sb2coZ3JlZXQoJ3RhbmhhdWhhdScpKTsgLy8gSGVsbG8gdGFuaGF1aGF1In0="),r(ms,"rel","nofollow"),r(Bt,"class","inline"),r(Gt,"class","inline"),r(Rt,"class","inline"),r(Mt,"class","code-section"),r(Nt,"class","code-section"),r(Zt,"class","inline"),r(Wa,"type","image/webp"),r(Wa,"srcset",Df+", "+Of+" 2x"),ad(X.src,id=Du)||r(X,"src",id),r(X,"srcset",Du+", "+Lf+" 2x"),r(X,"loading","lazy"),_(X,"position","absolute"),_(X,"top","0"),_(X,"width","100%"),_(X,"height","100%"),r(X,"alt","member expression"),_(we,"display","block"),_(we,"position","relative"),_(we,"padding-top","18.570%"),_(we,"width","100%"),r(Ft,"class","inline"),r(Kt,"class","inline"),r(Yt,"class","inline"),r(Xt,"class","inline"),r(qt,"class","inline"),r($t,"class","inline"),r(zt,"class","inline"),r(Qt,"class","inline"),r(eo,"class","code-section"),r(so,"class","code-section"),r(to,"class","inline"),r(oo,"class","inline"),r(ao,"class","inline"),r(no,"class","inline"),r(lo,"class","inline"),r(ro,"class","inline"),r(io,"class","code-section"),r(co,"class","inline"),r(po,"class","inline"),r(_s,"href","https://babeljs.io/docs/en/babel-types"),r(_s,"rel","nofollow"),r(ho,"class","inline"),r(ko,"class","inline"),r(vo,"class","inline"),r(Es,"href","https://github.com/babel/babel/blob/master/packages/babel-types/src/validators/generated/index.js"),r(Es,"rel","nofollow"),r(Ss,"href","#transforming-strings"),r(Ss,"id","transforming-strings"),r(yo,"class","inline"),r(uo,"class","inline"),r(fo,"class","inline"),r(Is,"href","https://babeljs.io/docs/en/babel-types"),r(Is,"rel","nofollow"),r(bo,"class","inline"),r(xo,"class","inline"),r(wo,"class","inline"),r(mo,"class","code-section"),r(go,"class","inline"),r(_o,"class","inline"),r(Eo,"class","inline"),r(So,"class","inline"),r(Io,"class","inline"),r(Ao,"class","code-section"),r(To,"class","inline"),r(Co,"class","inline"),r(Oo,"class","inline"),r(Do,"class","inline"),r(Lo,"class","inline"),r(Po,"class","inline"),r(Ho,"class","inline"),r(Wo,"class","inline"),r(Vo,"class","inline"),r(jo,"class","inline"),r(Jo,"class","code-section"),r(Ts,"href","#summary"),r(Ts,"id","summary"),r(Bo,"class","code-section"),r(Cs,"href","#further-resources"),r(Cs,"id","further-resources"),r(Ds,"href","https://github.com/babel/babel/tree/master/packages"),r(Ds,"rel","nofollow"),r(Ls,"href","https://github.com/babel/babel/tree/master/packages"),r(Ls,"rel","nofollow"),r(Go,"class","inline"),r(Ro,"class","inline"),r(Ps,"href","https://github.com/babel/babel/tree/master/packages/babel-plugin-proposal-nullish-coalescing-operator"),r(Ps,"rel","nofollow"),r(Hs,"href","https://github.com/babel/babel/tree/master/packages/babel-plugin-proposal-optional-chaining"),r(Hs,"rel","nofollow"),r(Vs,"href","https://gum.co/manipulating-ast-with-javascript"),r(Vs,"rel","nofollow"),r(js,"href","https://gum.co/manipulating-ast-with-javascript"),r(js,"rel","nofollow"),r(Js,"href","#reference"),r(Js,"id","reference"),r(Gs,"href","https://babeljs.io/docs/en/"),r(Gs,"rel","nofollow"),r(Rs,"href","https://github.com/babel/babel"),r(Rs,"rel","nofollow"),r(Ns,"href","https://github.com/jamiebuilds/babel-handbook"),r(Ns,"rel","nofollow"),r(Zs,"href","https://jamie.build/"),r(Zs,"rel","nofollow"),r(Fs,"href","https://medium.com/basecs/leveling-up-ones-parsing-game-with-asts-d7a6fc2400ff"),r(Fs,"rel","nofollow"),r(Ks,"href","https://twitter.com/vaidehijoshi"),r(Ks,"rel","nofollow")},m(p,v){ju(w,p,v),x(p,te,v),x(p,J,v),e(J,He),e(J,m),e(m,oe),e(J,qs),x(p,an,v),x(p,ie,v),e(ie,$o),e($o,We),e(We,Bn),e(ie,Gn),e(ie,Ie),e(Ie,Ve),e(Ve,Rn),e(Ie,Mn),e(Ie,je),e(je,Nn),e(Ie,Zn),e(ie,Un),e(ie,Je),e(Je,Fn),e(Je,Be),e(Be,Kn),e(Je,Yn),x(p,nn,v),x(p,O,v),e(O,zo),e(zo,Ge),e(Ge,Xn),e(O,qn),e(O,Qo),e(Qo,$n),e(O,zn),e(O,ye),e(ye,ue),e(ue,Re),e(Re,Qn),e(ue,el),e(ue,Me),e(Me,sl),e(ue,tl),e(ue,ea),e(ea,ol),e(ye,al),e(ye,$s),e($s,nl),e($s,Ne),e(Ne,ll),e(ye,rl),e(ye,Ze),e(Ze,Ue),e(Ue,il),e(Ze,cl),e(Ze,Fe),e(Fe,pl),e(O,hl),e(O,Ke),e(Ke,kl),e(Ke,Ye),e(Ye,dl),e(Ke,vl),e(O,yl),e(O,Xe),e(Xe,ul),e(Xe,qe),e(qe,fl),e(Xe,bl),e(O,xl),e(O,sa),e(sa,wl),x(p,ln,v),x(p,f,v),e(f,ta),e(ta,$e),e($e,ml),e(f,gl),e(f,oa),e(oa,_l),e(f,El),e(f,zs),zs.innerHTML=Ru,e(f,Sl),e(f,aa),e(aa,C),e(C,Il),e(C,ze),e(ze,Al),e(C,Tl),e(C,Qs),e(Qs,Cl),e(C,Ol),e(C,et),e(et,Dl),e(C,Ll),e(C,st),e(st,Pl),e(C,Hl),e(C,tt),e(tt,Wl),e(C,Vl),e(C,ot),e(ot,jl),e(C,Jl),e(f,Bl),e(f,na),e(na,Gl),e(f,Rl),e(f,at),at.innerHTML=Mu,e(f,Ml),e(f,Qe),e(Qe,Nl),e(Qe,nt),e(nt,Zl),e(Qe,Ul),e(f,Fl),e(f,lt),lt.innerHTML=Nu,e(f,Kl),e(f,ae),e(ae,Yl),e(ae,es),e(es,Xl),e(ae,ql),e(ae,rt),e(rt,$l),e(ae,zl),e(ae,it),e(it,Ql),e(ae,er),e(f,sr),e(f,la),e(la,fe),e(fe,tr),e(fe,ct),e(ct,or),e(fe,ar),e(fe,ss),e(ss,nr),e(fe,lr),e(f,rr),e(f,ts),e(ts,ir),e(ts,ra),e(ra,cr),e(ts,pr),e(f,hr),e(f,ia),e(ia,kr),x(p,rn,v),x(p,T,v),e(T,ca),e(ca,os),e(os,dr),e(T,vr),e(T,pa),e(pa,yr),e(T,ur),e(T,as),e(as,ha),e(ha,fr),e(as,br),e(as,ka),e(ka,xr),e(T,wr),e(T,pt),pt.innerHTML=Zu,e(T,mr),e(T,da),e(da,gr),e(T,_r),e(T,ht),ht.innerHTML=Uu,e(T,Er),e(T,Ae),e(Ae,Sr),e(Ae,kt),e(kt,Ir),e(Ae,Ar),e(Ae,va),e(va,Tr),x(p,cn,v),x(p,D,v),e(D,ya),e(ya,ns),e(ns,Cr),e(D,Or),e(D,ls),e(ls,Dr),e(ls,rs),e(rs,Lr),e(ls,Pr),e(D,Hr),e(D,ua),e(ua,be),e(be,dt),e(dt,fa),e(dt,N),e(D,Wr),e(D,ba),e(ba,Vr),e(D,jr),e(D,xa),e(xa,Jr),e(D,Br),e(D,is),e(is,vt),e(vt,wa),e(wa,Gr),e(vt,Rr),e(is,Mr),e(is,yt),e(yt,ma),e(ma,Nr),e(yt,Zr),x(p,pn,v),x(p,B,v),e(B,ga),e(ga,cs),e(cs,Ur),e(B,Fr),e(B,ps),e(ps,Kr),e(ps,hs),e(hs,Yr),e(ps,Xr),e(B,qr),e(B,_a),e(_a,xe),e(xe,ut),e(ut,Ea),e(ut,Z),e(B,$r),e(B,Sa),e(Sa,zr),e(B,Qr),e(B,ne),e(ne,ei),e(ne,ft),e(ft,si),e(ne,ti),e(ne,bt),e(bt,oi),e(ne,ai),e(ne,xt),e(xt,ni),e(ne,li),x(p,hn,v),x(p,k,v),e(k,Ia),e(Ia,ks),e(ks,ri),e(k,ii),e(k,Aa),e(Aa,ci),e(k,pi),e(k,wt),wt.innerHTML=Fu,e(k,hi),e(k,ds),e(ds,ki),e(ds,vs),e(vs,di),e(ds,vi),e(k,yi),e(k,ys),e(ys,ui),e(ys,us),e(us,fi),e(ys,bi),e(k,xi),e(k,fs),e(fs,wi),e(fs,mt),e(mt,mi),e(fs,gi),e(k,_i),e(k,gt),gt.innerHTML=Ku,e(k,Ei),e(k,Ta),e(Ta,Si),e(k,Ii),e(k,_t),_t.innerHTML=Yu,e(k,Ai),e(k,Ti),e(k,Ci),e(k,W),e(W,Oi),e(W,Et),e(Et,Di),e(W,Li),e(W,St),e(St,Pi),e(W,Hi),e(W,It),e(It,Wi),e(W,Vi),e(W,At),e(At,ji),e(W,Ji),e(W,Tt),e(Tt,Bi),e(W,Gi),e(k,Ri),e(k,E),e(E,Mi),e(E,Ct),e(Ct,Ni),e(E,Zi),e(E,Ot),e(Ot,Ui),e(E,Fi),e(E,Dt),e(Dt,Ki),e(E,Yi),e(E,Lt),e(Lt,Xi),e(E,qi),e(E,Pt),e(Pt,$i),e(E,zi),e(E,Ht),e(Ht,Qi),e(E,ec),e(E,Wt),e(Wt,sc),e(E,tc),e(E,Vt),e(Vt,oc),e(E,ac),e(E,jt),e(jt,nc),e(E,lc),e(k,rc),e(k,Ca),e(Ca,ce),e(ce,ic),e(ce,Jt),e(Jt,cc),e(ce,pc),e(ce,bs),e(bs,hc),e(ce,kc),e(ce,xs),e(xs,dc),e(k,vc),e(k,yc),e(k,uc),e(k,Oa),e(Oa,fc),x(p,kn,v),x(p,h,v),e(h,Da),e(Da,ws),e(ws,bc),e(h,xc),e(h,U),e(U,wc),e(U,ms),e(ms,mc),e(U,gc),e(U,Bt),e(Bt,_c),e(U,Ec),e(U,Gt),e(Gt,Sc),e(U,Ic),e(U,Rt),e(Rt,Ac),e(U,Tc),e(h,Cc),e(h,Mt),Mt.innerHTML=Xu,e(h,Oc),e(h,La),e(La,Dc),e(h,Lc),e(h,Nt),Nt.innerHTML=qu,e(h,Pc),e(h,gs),e(gs,Hc),e(gs,Zt),e(Zt,Wc),e(gs,Vc),e(h,jc),e(h,Pa),e(Pa,Jc),e(h,Bc),e(h,Ha),e(Ha,we),e(we,Ut),e(Ut,Wa),e(Ut,X),e(h,Gc),e(h,L),e(L,Ft),e(Ft,Rc),e(L,Mc),e(L,Kt),e(Kt,Nc),e(L,Zc),e(L,Yt),e(Yt,Uc),e(L,Fc),e(L,Xt),e(Xt,Kc),e(L,Yc),e(L,qt),e(qt,Xc),e(L,qc),e(L,$t),e($t,$c),e(L,zc),e(h,Qc),e(h,me),e(me,ep),e(me,zt),e(zt,sp),e(me,tp),e(me,Qt),e(Qt,op),e(me,ap),e(h,np),e(h,eo),eo.innerHTML=$u,e(h,lp),e(h,Va),e(Va,rp),e(h,ip),e(h,so),so.innerHTML=zu,e(h,cp),e(h,F),e(F,pp),e(F,to),e(to,hp),e(F,kp),e(F,oo),e(oo,dp),e(F,vp),e(F,ao),e(ao,yp),e(F,up),e(F,no),e(no,fp),e(F,bp),e(h,xp),e(h,ge),e(ge,wp),e(ge,lo),e(lo,mp),e(ge,gp),e(ge,ro),e(ro,_p),e(ge,Ep),e(h,Sp),e(h,io),io.innerHTML=Qu,e(h,Ip),e(h,ja),e(ja,I),e(I,Ap),e(I,co),e(co,Tp),e(I,Cp),e(I,po),e(po,Op),e(I,Dp),e(I,_s),e(_s,Lp),e(I,Pp),e(I,ho),e(ho,Hp),e(I,Wp),e(I,ko),e(ko,Vp),e(I,jp),e(I,vo),e(vo,Jp),e(I,Bp),e(I,Es),e(Es,Gp),e(I,Rp),x(p,dn,v),x(p,y,v),e(y,Ja),e(Ja,Ss),e(Ss,Mp),e(y,Np),e(y,_e),e(_e,Zp),e(_e,yo),e(yo,Up),e(_e,Fp),e(_e,uo),e(uo,Kp),e(_e,Yp),e(y,Xp),e(y,K),e(K,qp),e(K,Is),e(Is,fo),e(fo,$p),e(K,zp),e(K,bo),e(bo,Qp),e(K,eh),e(K,xo),e(xo,sh),e(K,th),e(K,wo),e(wo,oh),e(K,ah),e(y,nh),e(y,mo),mo.innerHTML=ef,e(y,lh),e(y,V),e(V,rh),e(V,go),e(go,ih),e(V,ch),e(V,_o),e(_o,ph),e(V,hh),e(V,Eo),e(Eo,kh),e(V,dh),e(V,So),e(So,vh),e(V,yh),e(V,Io),e(Io,uh),e(V,fh),e(y,bh),e(y,Ba),e(Ba,xh),e(y,wh),e(y,Ao),Ao.innerHTML=sf,e(y,mh),e(y,Ga),e(Ga,gh),e(y,_h),e(y,A),e(A,Eh),e(A,To),e(To,Sh),e(A,Ih),e(A,Co),e(Co,Ah),e(A,Th),e(A,Oo),e(Oo,Ch),e(A,Oh),e(A,Do),e(Do,Dh),e(A,Lh),e(A,Lo),e(Lo,Ph),e(A,Hh),e(A,Po),e(Po,Wh),e(A,Vh),e(A,Ho),e(Ho,jh),e(A,Jh),e(y,Bh),e(y,Ee),e(Ee,Gh),e(Ee,Wo),e(Wo,Rh),e(Ee,Mh),e(Ee,Vo),e(Vo,Nh),e(Ee,Zh),e(y,Uh),e(y,As),e(As,Fh),e(As,jo),e(jo,Kh),e(As,Yh),e(y,Xh),e(y,Jo),Jo.innerHTML=tf,e(y,qh),e(y,Ra),e(Ra,$h),x(p,vn,v),x(p,G,v),e(G,Ma),e(Ma,Ts),e(Ts,zh),e(G,Qh),e(G,Na),e(Na,ek),e(G,sk),e(G,Bo),Bo.innerHTML=of,e(G,tk),e(G,Za),e(Za,ok),e(G,ak),e(G,le),e(le,Ua),e(Ua,nk),e(le,lk),e(le,Fa),e(Fa,rk),e(le,ik),e(le,Ka),e(Ka,ck),e(le,pk),e(le,Ya),e(Ya,hk),x(p,yn,v),x(p,q,v),e(q,Xa),e(Xa,Cs),e(Cs,kk),e(q,dk),e(q,Os),e(Os,vk),e(Os,Ds),e(Ds,yk),e(Os,uk),e(q,fk),e(q,j),e(j,bk),e(j,Ls),e(Ls,xk),e(j,wk),e(j,Go),e(Go,mk),e(j,gk),e(j,Ro),e(Ro,_k),e(j,Ek),e(j,Ps),e(Ps,Sk),e(j,Ik),e(j,Hs),e(Hs,Ak),e(j,Tk),e(q,Ck),e(q,re),e(re,qa),e(qa,$a),e($a,Ok),e(re,Dk),e(re,Ws),e(Ws,Lk),e(Ws,Vs),e(Vs,Pk),e(Ws,Hk),e(re,Wk),e(re,za),e(za,Vk),e(re,jk),e(re,Qa),e(Qa,en),e(en,js),e(js,Jk),x(p,un,v),x(p,Te,v),e(Te,sn),e(sn,Js),e(Js,Bk),e(Te,Gk),e(Te,Se),e(Se,Bs),e(Bs,Gs),e(Gs,Rk),e(Bs,Mk),e(Bs,Rs),e(Rs,Nk),e(Se,Zk),e(Se,Ms),e(Ms,Ns),e(Ns,Uk),e(Ms,Fk),e(Ms,Zs),e(Zs,Kk),e(Se,Yk),e(Se,Us),e(Us,Fs),e(Fs,Xk),e(Us,qk),e(Us,Ks),e(Ks,$k),fn=!0},p:Af,i(p){fn||(Ju(w.$$.fragment,p),fn=!0)},o(p){Bu(w.$$.fragment,p),fn=!1},d(p){Gu(w,p),p&&o(te),p&&o(J),p&&o(an),p&&o(ie),p&&o(nn),p&&o(O),p&&o(ln),p&&o(f),p&&o(rn),p&&o(T),p&&o(cn),p&&o(D),p&&o(pn),p&&o(B),p&&o(hn),p&&o(k),p&&o(kn),p&&o(h),p&&o(dn),p&&o(y),p&&o(vn),p&&o(G),p&&o(yn),p&&o(q),p&&o(un),p&&o(Te)}}}function Rf(Xs){let w,te;const J=[Xs[0],Hu];let He={$$slots:{default:[Gf]},$$scope:{ctx:Xs}};for(let m=0;m<J.length;m+=1)He=nd(He,J[m]);return w=new Tf({props:He}),{c(){Wu(w.$$.fragment)},l(m){Vu(w.$$.fragment,m)},m(m,oe){ju(w,m,oe),te=!0},p(m,[oe]){const qs=oe&1?Sf(J,[oe&1&&Cu(m[0]),oe&0&&Cu(Hu)]):{};oe&2&&(qs.$$scope={dirty:oe,ctx:m}),w.$set(qs)},i(m){te||(Ju(w.$$.fragment,m),te=!0)},o(m){Bu(w.$$.fragment,m),te=!1},d(m){Gu(w,m)}}}const Hu={title:"Step-by-step guide for writing a custom babel transformation",date:"2019-09-12T08:00:00Z",tags:["JavaScript","babel","AST","transform"],description:"Writing your first babel plugin",series:"Intermediate Babel",label:"blog"};function Mf(Xs,w,te){return If("blog",{image:Bf}),Xs.$$set=J=>{te(0,w=nd(nd({},w),Ou(J)))},w=Ou(w),[w]}class Xf extends gf{constructor(w){super();_f(this,w,Mf,Rf,Ef,{})}}export{Xf as default,Hu as metadata};
