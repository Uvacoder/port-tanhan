import{S as bf,i as xf,s as wf,C as av,w as Du,x as Lu,y as Pu,z as mf,A as Su,q as Hu,o as Wu,B as Vu,r as gf,R as Iu,k as i,e as a,t as s,m as c,c as n,a as l,h as t,d as o,b as r,Q as ov,g as x,F as e,O as Ef}from"../../chunks/vendor-ea160616.js";import{B as _f}from"../../chunks/BlogLayout-1be3dc1e.js";import{T as Sf}from"../../chunks/TableOfContent-c4f5cb6e.js";import"../../chunks/stores-7d7fda0c.js";import"../../chunks/WebMentions-d768a574.js";/* empty css                                */var If="/_app/assets/member-expression-3b771379.webp",Au="/_app/assets/member-expression-6f106139.png",Af="/_app/assets/output-563200b8.webp",Tu="/_app/assets/output-7756fc06.png",Tf="/_app/assets/targeting-908f9668.webp",Cu="/_app/assets/targeting-25308288.png",Cf="/_app/assets/hero-twitter-9356c385.jpg";function Of(Ys){let w,z,j,Ce,m,Q,Xs,on,ae,Ko,Oe,Gn,Mn,xe,De,Nn,Un,Le,Zn,Fn,Kn,Pe,Yn,He,Xn,qn,an,C,Yo,We,$n,zn,Xo,Qn,el,he,ke,Ve,sl,tl,je,ol,al,qo,nl,ll,qs,rl,Je,il,cl,Re,Be,pl,hl,Ge,kl,vl,Me,dl,Ne,yl,ul,fl,Ue,bl,Ze,xl,wl,ml,$o,gl,nn,f,zo,Fe,El,_l,Qo,Sl,Il,$s,ju=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; parse &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@babel/parser&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> traverse </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@babel/traverse&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> generate </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@babel/generator&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">code</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;const n = 1&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// parse the code -&gt; ast</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ast</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parse</span><span style="color: var(--shiki-color-text)">(code);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// transform the ast</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">traverse</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">enter</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// in this example change all the variable &#96;n&#96; to &#96;x&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.isIdentifier</span><span style="color: var(--shiki-color-text)">(&#123; name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;n&#39;</span><span style="color: var(--shiki-color-text)"> &#125;)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;x&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// generate code &lt;- ast</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">output</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">generate</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> code);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">output</span><span style="color: var(--shiki-color-text)">.code); </span><span style="color: var(--shiki-token-comment)">// &#39;const x = 1;&#39;</span></span></code></pre>`,Al,ea,T,Tl,Ke,Cl,Ol,zs,Dl,Ll,Qs,Pl,Hl,et,Wl,Vl,st,jl,Jl,tt,Rl,Bl,Gl,sa,Ml,Nl,ot,Ju='<pre class="prism language-"><code><span class="line">code -&gt; AST -&gt; transformed AST -&gt; transformed code</span></code></pre>',Ul,Ye,Zl,at,Fl,Kl,Yl,nt,Ru=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> babel </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@babel/core&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">code</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;const n = 1&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">output</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.transformSync</span><span style="color: var(--shiki-color-text)">(code</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  plugins</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// your first babel plugin \u{1F60E}\u{1F60E}</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">myCustomPlugin</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        visitor</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-comment)">// in this example change all the variable &#96;n&#96; to &#96;x&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.isIdentifier</span><span style="color: var(--shiki-color-text)">(&#123; name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;n&#39;</span><span style="color: var(--shiki-color-text)"> &#125;)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;x&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">output</span><span style="color: var(--shiki-color-text)">.code); </span><span style="color: var(--shiki-token-comment)">// &#39;const x = 1;&#39;</span></span></code></pre>`,Xl,ee,ql,Xe,$l,zl,lt,Ql,er,rt,sr,tr,or,ta,ve,ar,it,nr,lr,qe,rr,ir,cr,$e,pr,oa,hr,kr,vr,aa,dr,ln,A,na,ze,yr,ur,la,fr,br,Qe,ra,xr,wr,ia,mr,gr,ct,Bu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">greet</span><span style="color: var(--shiki-color-text)">(name) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Hello &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> name;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">greet</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;tanhauhau&#39;</span><span style="color: var(--shiki-color-text)">)); </span><span style="color: var(--shiki-token-comment)">// Hello tanhauhau</span></span></code></pre>`,Er,ca,_r,Sr,pt,Gu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">teerg</span><span style="color: var(--shiki-color-text)">(eman) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;H&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;e&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;l&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;l&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;o&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39; &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> eman;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">teerg</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;t&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;a&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;n&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;h&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;a&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;u&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;h&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;a&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;u&#39;</span><span style="color: var(--shiki-color-text)">)); </span><span style="color: var(--shiki-token-comment)">// Hello tanhauhau</span></span></code></pre>`,Ir,we,Ar,ht,Tr,Cr,pa,Or,rn,O,ha,es,Dr,Lr,ss,Pr,ts,Hr,Wr,Vr,ka,os,va,da,me,nv,jr,ya,Jr,Rr,ua,Br,Gr,as,kt,fa,Mr,Nr,Ur,vt,ba,Zr,Fr,cn,J,xa,ns,Kr,Yr,ls,Xr,rs,qr,$r,zr,wa,is,ma,ga,ge,lv,Qr,Ea,ei,si,se,ti,dt,oi,ai,yt,ni,li,ut,ri,ii,pn,k,_a,cs,ci,pi,Sa,hi,ki,ft,Mu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">myCustomPlugin</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    visitor</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,vi,ps,di,hs,yi,ui,fi,ks,bi,vs,xi,wi,mi,ds,gi,bt,Ei,_i,Si,xt,Nu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">myCustomPlugin</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    visitor</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;identifier&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">StringLiteral</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;string literal&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ii,Ia,Ai,Ti,wt,Uu=`<pre class="prism language-"><code><span class="line">identifier</span>
<span class="line">identifier</span>
<span class="line">string literal</span>
<span class="line">identifier</span>
<span class="line">identifier</span>
<span class="line">identifier</span>
<span class="line">identifier</span>
<span class="line">string literal</span></code></pre>`,Ci,Oi,Di,H,Li,mt,Pi,Hi,gt,Wi,Vi,Et,ji,Ji,_t,Ri,Bi,St,Gi,Mi,Ni,E,Ui,It,Zi,Fi,At,Ki,Yi,Tt,Xi,qi,Ct,$i,zi,Ot,Qi,ec,Dt,sc,tc,Lt,oc,ac,Pt,nc,lc,Ht,rc,ic,cc,Aa,ne,pc,Wt,hc,kc,ys,vc,dc,us,yc,uc,fc,bc,Ta,xc,hn,h,Ca,fs,wc,mc,M,gc,bs,Ec,_c,Vt,Sc,Ic,jt,Ac,Tc,Jt,Cc,Oc,Dc,Rt,Zu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.reverse</span><span style="color: var(--shiki-color-text)">()</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Lc,Oa,Pc,Hc,Bt,Fu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">teerg</span><span style="color: var(--shiki-color-text)">(eman) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Hello &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> eman;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">elosnoc</span><span style="color: var(--shiki-token-function)">.gol</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">teerg</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;tanhauhau&#39;</span><span style="color: var(--shiki-color-text)">)); </span><span style="color: var(--shiki-token-comment)">// Hello tanhauhau</span></span></code></pre>`,Wc,xs,Vc,Gt,jc,Jc,Rc,Da,Bc,Gc,La,ws,Pa,Ha,ms,rv,Mc,D,Mt,Nc,Uc,Nt,Zc,Fc,Ut,Kc,Yc,Zt,Xc,qc,Ft,$c,zc,Kt,Qc,ep,sp,de,tp,Yt,op,ap,Xt,np,lp,rp,qt,Ku=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">parentPath</span><span style="color: var(--shiki-token-function)">.isMemberExpression</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.parentPath</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;object&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">.isIdentifier</span><span style="color: var(--shiki-color-text)">(&#123; name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;console&#39;</span><span style="color: var(--shiki-color-text)"> &#125;) </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">parentPath</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;property&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.isIdentifier</span><span style="color: var(--shiki-color-text)">(&#123; name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;log&#39;</span><span style="color: var(--shiki-color-text)"> &#125;)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    )</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">     </span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">     </span><span style="color: var(--shiki-token-function)">.reverse</span><span style="color: var(--shiki-color-text)">()</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">     </span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ip,Wa,cp,pp,$t,Yu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">teerg</span><span style="color: var(--shiki-color-text)">(eman) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Hello &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> eman;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">teerg</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;tanhauhau&#39;</span><span style="color: var(--shiki-color-text)">)); </span><span style="color: var(--shiki-token-comment)">// Hello tanhauhau</span></span></code></pre>`,hp,N,kp,zt,vp,dp,Qt,yp,up,eo,fp,bp,so,xp,wp,mp,ye,gp,to,Ep,_p,oo,Sp,Ip,Ap,ao,Xu='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">log</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>',Tp,Va,S,Cp,no,Op,Dp,lo,Lp,Pp,gs,Hp,Wp,ro,Vp,jp,io,Jp,Rp,co,Bp,Gp,Es,Mp,Np,kn,y,ja,_s,Up,Zp,ue,Fp,po,Kp,Yp,ho,Xp,qp,$p,U,zp,Ss,ko,Qp,eh,vo,sh,th,yo,oh,ah,uo,nh,lh,rh,fo,qu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">StringLiteral</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newNode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.value</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(c </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.stringLiteral</span><span style="color: var(--shiki-color-text)">(c))</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.reduce</span><span style="color: var(--shiki-color-text)">((prev</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> curr) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.binaryExpression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;+&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> prev</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> curr);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.replaceWith</span><span style="color: var(--shiki-color-text)">(newNode);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ih,W,ch,bo,ph,hh,xo,kh,vh,wo,dh,yh,mo,uh,fh,go,bh,xh,wh,Ja,mh,gh,Eo,$u='<pre class="prism language-"><code><span class="line">RangeError: Maximum call stack size exceeded</span></code></pre>',Eh,Ra,_h,Sh,I,Ih,_o,Ah,Th,So,Ch,Oh,Io,Dh,Lh,Ao,Ph,Hh,To,Wh,Vh,Co,jh,Jh,Oo,Rh,Bh,Gh,fe,Mh,Do,Nh,Uh,Lo,Zh,Fh,Kh,Is,Yh,Po,Xh,qh,$h,Ho,zu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">StringLiteral</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newNode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.value</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(c </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.stringLiteral</span><span style="color: var(--shiki-color-text)">(c))</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.reduce</span><span style="color: var(--shiki-color-text)">((prev</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> curr) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.binaryExpression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;+&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> prev</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> curr);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.replaceWith</span><span style="color: var(--shiki-color-text)">(newNode);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.skip</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,zh,Ba,Qh,vn,R,Ga,As,ek,sk,Ma,tk,ok,Wo,Qu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;@babel/core&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">code</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">function greet(name) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  return &#39;Hello &#39; + name;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">console.log(greet(&#39;tanhauhau&#39;)); // Hello tanhauhau</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">output</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.transformSync</span><span style="color: var(--shiki-color-text)">(code</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  plugins</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">myCustomPlugin</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        visitor</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">StringLiteral</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">concat</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.value</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(c </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.stringLiteral</span><span style="color: var(--shiki-color-text)">(c))</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">.reduce</span><span style="color: var(--shiki-color-text)">((prev</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> curr) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.binaryExpression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;+&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> prev</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> curr);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.replaceWith</span><span style="color: var(--shiki-color-text)">(concat);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.skip</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">parentPath</span><span style="color: var(--shiki-token-function)">.isMemberExpression</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.parentPath</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;object&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-function)">.isIdentifier</span><span style="color: var(--shiki-color-text)">(&#123; name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;console&#39;</span><span style="color: var(--shiki-color-text)"> &#125;) </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">parentPath</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;property&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.isIdentifier</span><span style="color: var(--shiki-color-text)">(&#123; name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;log&#39;</span><span style="color: var(--shiki-color-text)"> &#125;)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              )</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            ) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-function)">.reverse</span><span style="color: var(--shiki-color-text)">()</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">output</span><span style="color: var(--shiki-color-text)">.code);</span></span></code></pre>`,ak,Na,nk,lk,te,Ua,rk,ik,Za,ck,pk,Fa,hk,kk,Ka,vk,dn,F,Ya,Ts,dk,yk,Cs,uk,Os,fk,bk,xk,V,wk,Ds,mk,gk,Vo,Ek,_k,jo,Sk,Ik,Ls,Ak,Tk,Ps,Ck,Ok,Dk,oe,Xa,qa,Lk,Pk,Hs,Hk,Ws,Wk,Vk,jk,$a,Jk,Rk,za,Qa,Vs,Bk,yn,Ee,en,js,Gk,Mk,be,Js,Rs,Nk,Uk,Bs,Zk,Fk,Gs,Ms,Kk,Yk,Ns,Xk,qk,Us,Zs,$k,zk,Fs,Qk,un;return w=new Sf({props:{data:[{link:"what-is-babel",title:"What is babel?",nested:[{link:"what-is-abstract-syntax-tree-ast",title:"What is Abstract Syntax Tree (AST)?"}]},{link:"how-to-use-babel-to-transform-code",title:"How to use babel to transform code",nested:[{link:"1-have-in-mind-what-you-want-to-transform-from-and-transform-into",title:"1. Have in mind what you want to transform from and transform into"},{link:"2-know-what-to-target-on-the-ast",title:"2. Know what to target on the AST"},{link:"3-know-how-the-transformed-ast-looks-like",title:"3. Know how the transformed AST looks like"},{link:"4-write-code",title:"4. Write code",nested:[{link:"transforming-variable-name",title:"Transforming variable name"},{link:"transforming-strings",title:"Transforming strings"}]}]},{link:"summary",title:"Summary"},{link:"further-resources",title:"Further resources"},{link:"reference",title:"Reference"}]}}),{c(){Du(w.$$.fragment),z=i(),j=a("p"),Ce=s("Today, I will share a step-by-step guide for writing a custom "),m=a("a"),Q=s("babel"),Xs=s(" transformation. You can use this technique to write your own automated code modifications, refactoring and code generation."),on=i(),ae=a("section"),Ko=a("h2"),Oe=a("a"),Gn=s("What is babel?"),Mn=i(),xe=a("p"),De=a("a"),Nn=s("Babel"),Un=s(" is a JavaScript compiler that is mainly used to convert ECMAScript 2015+ code into backward compatible version of JavaScript in current and older browsers or environments. Babel uses a "),Le=a("a"),Zn=s("plugin system"),Fn=s(" to do code transformation, so anyone can write their own transformation plugin for babel."),Kn=i(),Pe=a("p"),Yn=s("Before you get started writing a transformation plugin for babel, you would need to know what is an "),He=a("a"),Xn=s("Abstract Syntax Tree (AST)"),qn=s("."),an=i(),C=a("section"),Yo=a("h3"),We=a("a"),$n=s("What is Abstract Syntax Tree (AST)?"),zn=i(),Xo=a("p"),Qn=s("I am not sure I can explain this better than the amazing articles out there on the web:"),el=i(),he=a("ul"),ke=a("li"),Ve=a("a"),sl=s("Leveling Up One\u2019s Parsing Game With ASTs"),tl=s(" by "),je=a("a"),ol=s("Vaidehi Joshi"),al=s(" * "),qo=a("em"),nl=s("(Highly recommend this one! \u{1F44D})"),ll=i(),qs=a("li"),rl=s("Wikipedia's "),Je=a("a"),il=s("Abstract syntax tree"),cl=i(),Re=a("li"),Be=a("a"),pl=s("What is an Abstract Syntax Tree"),hl=s(" by "),Ge=a("a"),kl=s("Chidume Nnamdi"),vl=i(),Me=a("p"),dl=s("To summarize, AST is a tree representation of your code. In the case of JavaScript, the JavaScript AST follows the "),Ne=a("a"),yl=s("estree specification"),ul=s("."),fl=i(),Ue=a("p"),bl=s("AST represents your code, the structure and the meaning of your code. So it allows the compiler like "),Ze=a("a"),xl=s("babel"),wl=s(" to understand the code and make specific meaningful transformation to it."),ml=i(),$o=a("p"),gl=s("So now you know what is AST, let's write a custom babel transformation to modify your code using AST."),nn=i(),f=a("section"),zo=a("h2"),Fe=a("a"),El=s("How to use babel to transform code"),_l=i(),Qo=a("p"),Sl=s("The following is the general template of using babel to do code transformation:"),Il=i(),$s=a("div"),Al=i(),ea=a("blockquote"),T=a("p"),Tl=s("You would need to install "),Ke=a("a"),Cl=s("@babel/core"),Ol=s(" to run this. "),zs=a("code"),Dl=s("@babel/parser"),Ll=s(", "),Qs=a("code"),Pl=s("@babel/traverse"),Hl=s(", "),et=a("code"),Wl=s("@babel/generator"),Vl=s(" are all dependencies of "),st=a("code"),jl=s("@babel/core"),Jl=s(", so installing "),tt=a("code"),Rl=s("@babel/core"),Bl=s(" would suffice."),Gl=i(),sa=a("p"),Ml=s("So the general idea is to parse your code to AST, transform the AST, and then generate code from the transformed AST."),Nl=i(),ot=a("div"),Ul=i(),Ye=a("p"),Zl=s("However, we can use another API from "),at=a("code"),Fl=s("babel"),Kl=s(" to do all the above:"),Yl=i(),nt=a("div"),Xl=i(),ee=a("p"),ql=s("Now, you have written your first "),Xe=a("a"),$l=s("babel transform plugin"),zl=s(" that replace all variable named "),lt=a("code"),Ql=s("n"),er=s(" to "),rt=a("code"),sr=s("x"),tr=s(", how cool is that?!"),or=i(),ta=a("blockquote"),ve=a("p"),ar=s("Extract out the function "),it=a("code"),nr=s("myCustomPlugin"),lr=s(" to a new file and export it. "),qe=a("a"),rr=s("Package and publish your file as a npm package"),ir=s(" and you can proudly say you have published a babel plugin! \u{1F389}\u{1F389}"),cr=i(),$e=a("p"),pr=s("At this point, you must have thought: "),oa=a("em"),hr=s(`"Yes I've just written a babel plugin, but I have no idea how it works..."`),kr=s(", so fret not, let's dive in on how you can write the babel transformation plugin yourself!"),vr=i(),aa=a("p"),dr=s("So, here is the step-by-step guide to do it:"),ln=i(),A=a("section"),na=a("h3"),ze=a("a"),yr=s("1. Have in mind what you want to transform from and transform into"),ur=i(),la=a("p"),fr=s("In this example, I want to prank my colleague by creating a babel plugin that will:"),br=i(),Qe=a("ul"),ra=a("li"),xr=s("reverse all the variables' and functions' names"),wr=i(),ia=a("li"),mr=s("split out string into individual characters"),gr=i(),ct=a("div"),Er=i(),ca=a("p"),_r=s("into"),Sr=i(),pt=a("div"),Ir=i(),we=a("p"),Ar=s("Well, we have to keep the "),ht=a("code"),Tr=s("console.log"),Cr=s(", so that even the code is hardly readable, it is still working fine. "),pa=a("em"),Or=s("(I wouldn't want to break the production code!)"),rn=i(),O=a("section"),ha=a("h3"),es=a("a"),Dr=s("2. Know what to target on the AST"),Lr=i(),ss=a("p"),Pr=s("Head down to a "),ts=a("a"),Hr=s("babel AST explorer"),Wr=s(", click on different parts of the code and see where / how it is represented on the AST:"),Vr=i(),ka=a("p"),os=a("picture"),va=a("source"),da=a("source"),me=a("img"),jr=i(),ya=a("p"),Jr=s("If this is your first time seeing the AST, play around with it for a little while and get the sense of how is it look like, and get to know the names of the node on the AST with respect to your code."),Rr=i(),ua=a("p"),Br=s("So, now we know that we need to target:"),Gr=i(),as=a("ul"),kt=a("li"),fa=a("strong"),Mr=s("Identifier"),Nr=s(" for variable and function names"),Ur=i(),vt=a("li"),ba=a("strong"),Zr=s("StringLiteral"),Fr=s(" for the string."),cn=i(),J=a("section"),xa=a("h3"),ns=a("a"),Kr=s("3. Know how the transformed AST looks like"),Yr=i(),ls=a("p"),Xr=s("Head down to the "),rs=a("a"),qr=s("babel AST explorer"),$r=s(" again, but this time around with the output code you want to generate."),zr=i(),wa=a("p"),is=a("picture"),ma=a("source"),ga=a("source"),ge=a("img"),Qr=i(),Ea=a("p"),ei=s("Play around and think how you can transform from the previous AST to the current AST."),si=i(),se=a("p"),ti=s("For example, you can see that "),dt=a("code"),oi=s("'H' + 'e' + 'l' + 'l' + 'o' + ' ' + eman"),ai=s(" is formed by nested "),yt=a("code"),ni=s("BinaryExpression"),li=s(" with "),ut=a("code"),ri=s("StringLiteral"),ii=s("."),pn=i(),k=a("section"),_a=a("h3"),cs=a("a"),ci=s("4. Write code"),pi=i(),Sa=a("p"),hi=s("Now look at our code again:"),ki=i(),ft=a("div"),vi=i(),ps=a("p"),di=s("The transformation uses "),hs=a("a"),yi=s("the visitor pattern"),ui=s("."),fi=i(),ks=a("p"),bi=s("During the traversal phase, babel will do a "),vs=a("a"),xi=s("depth-first search traversal"),wi=s(" and visit each node in the AST. You can specify a callback method in the visitor, such that while visiting the node, babel will call the callback method with the node it is currently visiting."),mi=i(),ds=a("p"),gi=s("In the visitor object, you can specify the name of the node you want to be "),bt=a("code"),Ei=s("callback"),_i=s("ed:"),Si=i(),xt=a("div"),Ii=i(),Ia=a("p"),Ai=s('Run it and you will see that "string literal" and "identifier" is being called whenever babel encounters it:'),Ti=i(),wt=a("div"),Ci=i(),Oi=a("hr"),Di=i(),H=a("p"),Li=s("Before we continue, let's look at the parameter of "),mt=a("code"),Pi=s("Identifer(path) {}"),Hi=s(". It says "),gt=a("code"),Wi=s("path"),Vi=s(" instead of "),Et=a("code"),ji=s("node"),Ji=s(", what is the difference between "),_t=a("code"),Ri=s("path"),Bi=s(" and "),St=a("code"),Gi=s("node"),Mi=s("? \u{1F937}\u200D"),Ni=i(),E=a("p"),Ui=s("In babel, "),It=a("code"),Zi=s("path"),Fi=s(" is an abstraction above "),At=a("code"),Ki=s("node"),Yi=s(", it provides the link between nodes, ie the "),Tt=a("code"),Xi=s("parent"),qi=s(" of the node, as well as information such as the "),Ct=a("code"),$i=s("scope"),zi=s(", "),Ot=a("code"),Qi=s("context"),ec=s(", etc. Besides, the "),Dt=a("code"),sc=s("path"),tc=s(" provides method such as "),Lt=a("code"),oc=s("replaceWith"),ac=s(", "),Pt=a("code"),nc=s("insertBefore"),lc=s(", "),Ht=a("code"),rc=s("remove"),ic=s(", etc that will update and reflect on the underlying AST node."),cc=i(),Aa=a("blockquote"),ne=a("p"),pc=s("You can read more detail about "),Wt=a("code"),hc=s("path"),kc=s(" in "),ys=a("a"),vc=s("Jamie Kyle"),dc=s("'s "),us=a("a"),yc=s("babel handbook"),uc=i(),fc=a("hr"),bc=i(),Ta=a("p"),xc=s("So let's continue writing our babel plugin."),hn=i(),h=a("section"),Ca=a("h4"),fs=a("a"),wc=s("Transforming variable name"),mc=i(),M=a("p"),gc=s("As we can see from the "),bs=a("a"),Ec=s("AST explorer"),_c=s(", the name of the "),Vt=a("code"),Sc=s("Identifier"),Ic=s(" is stored in the property called "),jt=a("code"),Ac=s("name"),Tc=s(", so what we will do is to reverse the "),Jt=a("code"),Cc=s("name"),Oc=s("."),Dc=i(),Rt=a("div"),Lc=i(),Oa=a("p"),Pc=s("Run it and you will see:"),Hc=i(),Bt=a("div"),Wc=i(),xs=a("p"),Vc=s("We are almost there, except we've accidentally reversed "),Gt=a("code"),jc=s("console.log"),Jc=s(" as well. How can we prevent that?"),Rc=i(),Da=a("p"),Bc=s("Take a look at the AST again:"),Gc=i(),La=a("p"),ws=a("picture"),Pa=a("source"),Ha=a("source"),ms=a("img"),Mc=i(),D=a("p"),Mt=a("code"),Nc=s("console.log"),Uc=s(" is part of the "),Nt=a("code"),Zc=s("MemberExpression"),Fc=s(", with the "),Ut=a("code"),Kc=s("object"),Yc=s(" as "),Zt=a("code"),Xc=s('"console"'),qc=s(" and "),Ft=a("code"),$c=s("property"),zc=s(" as "),Kt=a("code"),Qc=s('"log"'),ep=s("."),sp=i(),de=a("p"),tp=s("So let's check that if our current "),Yt=a("code"),op=s("Identifier"),ap=s(" is within this "),Xt=a("code"),np=s("MemberExpression"),lp=s(" and we will not reverse the name:"),rp=i(),qt=a("div"),ip=i(),Wa=a("p"),cp=s("And yes, now you get it right!"),pp=i(),$t=a("div"),hp=i(),N=a("p"),kp=s("So, why do we have to check whether the "),zt=a("code"),vp=s("Identifier"),dp=s("'s parent is not a "),Qt=a("code"),yp=s("console.log"),up=i(),eo=a("code"),fp=s("MemberExpression"),bp=s("? Why don't we just compare whether the current "),so=a("code"),xp=s("Identifier.name === 'console' || Identifier.name === 'log'"),wp=s("?"),mp=i(),ye=a("p"),gp=s("You can do that, except that it will not reverse the variable name if it is named "),to=a("code"),Ep=s("console"),_p=s(" or "),oo=a("code"),Sp=s("log"),Ip=s(":"),Ap=i(),ao=a("div"),Tp=i(),Va=a("blockquote"),S=a("p"),Cp=s("So, how do I know the method "),no=a("code"),Op=s("isMemberExpression"),Dp=s(" and "),lo=a("code"),Lp=s("isIdentifier"),Pp=s("? Well, all the node types specified in the "),gs=a("a"),Hp=s("@babel/types"),Wp=s(" have the "),ro=a("code"),Vp=s("isXxxx"),jp=s(" validator function counterpart, eg: "),io=a("code"),Jp=s("anyTypeAnnotation"),Rp=s(" function will have a "),co=a("code"),Bp=s("isAnyTypeAnnotation"),Gp=s(" validator. If you want to know the exhaustive list of the validator functions, you can head over "),Es=a("a"),Mp=s("to the actual source code"),Np=s("."),kn=i(),y=a("section"),ja=a("h4"),_s=a("a"),Up=s("Transforming strings"),Zp=i(),ue=a("p"),Fp=s("The next step is to generate a nested "),po=a("code"),Kp=s("BinaryExpression"),Yp=s(" out of "),ho=a("code"),Xp=s("StringLiteral"),qp=s("."),$p=i(),U=a("p"),zp=s("To create an AST node, you can use the utility function from "),Ss=a("a"),ko=a("code"),Qp=s("@babel/types"),eh=s(". "),vo=a("code"),sh=s("@babel/types"),th=s(" is also available via "),yo=a("code"),oh=s("babel.types"),ah=s(" from "),uo=a("code"),nh=s("@babel/core"),lh=s("."),rh=i(),fo=a("div"),ih=i(),W=a("p"),ch=s("So, we split the content of the "),bo=a("code"),ph=s("StringLiteral"),hh=s(", which is in "),xo=a("code"),kh=s("path.node.value"),vh=s(", make each character a "),wo=a("code"),dh=s("StringLiteral"),yh=s(", and combine them with "),mo=a("code"),uh=s("BinaryExpression"),fh=s(". Finally, we replace the "),go=a("code"),bh=s("StringLiteral"),xh=s(" with the newly created node."),wh=i(),Ja=a("p"),mh=s("...And that's it! Except, we ran into Stack Overflow \u{1F605}:"),gh=i(),Eo=a("div"),Eh=i(),Ra=a("p"),_h=s("Why \u{1F937}\u200D ?"),Sh=i(),I=a("p"),Ih=s("Well, that's because for each "),_o=a("code"),Ah=s("StringLiteral"),Th=s(" we created more "),So=a("code"),Ch=s("StringLiteral"),Oh=s(", and in each of those "),Io=a("code"),Dh=s("StringLiteral"),Lh=s(', we are "creating" more '),Ao=a("code"),Ph=s("StringLiteral"),Hh=s(". Although we will replace a "),To=a("code"),Wh=s("StringLiteral"),Vh=s(" with another "),Co=a("code"),jh=s("StringLiteral"),Jh=s(", babel will treat it as a new node and will visit the newly created "),Oo=a("code"),Rh=s("StringLiteral"),Bh=s(", thus the infinite recursive and stack overflow."),Gh=i(),fe=a("p"),Mh=s("So, how do we tell babel that once we replaced the "),Do=a("code"),Nh=s("StringLiteral"),Uh=s(" with the "),Lo=a("code"),Zh=s("newNode"),Fh=s(", babel can stop and don't have to go down and visit the newly created node anymore?"),Kh=i(),Is=a("p"),Yh=s("We can use "),Po=a("code"),Xh=s("path.skip()"),qh=s(" to skip traversing the children of the current path:"),$h=i(),Ho=a("div"),zh=i(),Ba=a("p"),Qh=s("...And yes it works now with now stack overflow!"),vn=i(),R=a("section"),Ga=a("h2"),As=a("a"),ek=s("Summary"),sk=i(),Ma=a("p"),tk=s("So, here we have it, our first code transformation with babel:"),ok=i(),Wo=a("div"),ak=i(),Na=a("p"),nk=s("A summary of the steps on how we get here:"),lk=i(),te=a("ol"),Ua=a("li"),rk=s("Have in mind what you want to transform from and transform into"),ik=i(),Za=a("li"),ck=s("Know what to target on the AST"),pk=i(),Fa=a("li"),hk=s("Know how the transformed AST looks like"),kk=i(),Ka=a("li"),vk=s("Write code"),dn=i(),F=a("section"),Ya=a("h2"),Ts=a("a"),dk=s("Further resources"),yk=i(),Cs=a("p"),uk=s("If you are interested to learn more, "),Os=a("a"),fk=s("babel's Github repo"),bk=s(" is always the best place to find out more code examples of writing a babel transformation."),xk=i(),V=a("p"),wk=s("Head down to "),Ds=a("a"),mk=s("https://github.com/babel/babel"),gk=s(", and look for "),Vo=a("code"),Ek=s("babel-plugin-transform-*"),_k=s(" or "),jo=a("code"),Sk=s("babel-plugin-proposal-*"),Ik=s(" folders, they are all babel transformation plugin, where you can find code on how babel "),Ls=a("a"),Ak=s("transform the nullish coalescing operator"),Tk=s(", "),Ps=a("a"),Ck=s("optional chaining"),Ok=s(" and many more."),Dk=i(),oe=a("blockquote"),Xa=a("p"),qa=a("strong"),Lk=s("Manipulating AST with JavaScript using Babel"),Pk=i(),Hs=a("p"),Hk=s("If you like what you've read so far, and want to learn how you could do it with Babel. I've created a "),Ws=a("a"),Wk=s("video course"),Vk=s(", showing you step-by-step, how to write a babel plugin and codemod."),jk=i(),$a=a("p"),Jk=s("In the video course, I detailed tips and tricks, such as how to handle scope, how to use state, and also nested traversals."),Rk=i(),za=a("p"),Qa=a("strong"),Vs=a("a"),Bk=s("Sounds interesting, let's take a look at the video course"),yn=i(),Ee=a("section"),en=a("h2"),js=a("a"),Gk=s("Reference"),Mk=i(),be=a("ul"),Js=a("li"),Rs=a("a"),Nk=s("Babel docs"),Uk=s(" & "),Bs=a("a"),Zk=s("Github repo"),Fk=i(),Gs=a("li"),Ms=a("a"),Kk=s("Babel Handbook"),Yk=s(" by "),Ns=a("a"),Xk=s("Jamie Kyle"),qk=i(),Us=a("li"),Zs=a("a"),$k=s("Leveling Up One\u2019s Parsing Game With ASTs"),zk=s(" by "),Fs=a("a"),Qk=s("Vaidehi Joshi"),this.h()},l(p){Lu(w.$$.fragment,p),z=c(p),j=n(p,"P",{});var d=l(j);Ce=t(d,"Today, I will share a step-by-step guide for writing a custom "),m=n(d,"A",{href:!0,rel:!0});var iv=l(m);Q=t(iv,"babel"),iv.forEach(o),Xs=t(d," transformation. You can use this technique to write your own automated code modifications, refactoring and code generation."),d.forEach(o),on=c(p),ae=n(p,"SECTION",{});var Jo=l(ae);Ko=n(Jo,"H2",{});var cv=l(Ko);Oe=n(cv,"A",{href:!0,id:!0});var pv=l(Oe);Gn=t(pv,"What is babel?"),pv.forEach(o),cv.forEach(o),Mn=c(Jo),xe=n(Jo,"P",{});var sn=l(xe);De=n(sn,"A",{href:!0,rel:!0});var hv=l(De);Nn=t(hv,"Babel"),hv.forEach(o),Un=t(sn," is a JavaScript compiler that is mainly used to convert ECMAScript 2015+ code into backward compatible version of JavaScript in current and older browsers or environments. Babel uses a "),Le=n(sn,"A",{href:!0,rel:!0});var kv=l(Le);Zn=t(kv,"plugin system"),kv.forEach(o),Fn=t(sn," to do code transformation, so anyone can write their own transformation plugin for babel."),sn.forEach(o),Kn=c(Jo),Pe=n(Jo,"P",{});var fn=l(Pe);Yn=t(fn,"Before you get started writing a transformation plugin for babel, you would need to know what is an "),He=n(fn,"A",{href:!0,rel:!0});var vv=l(He);Xn=t(vv,"Abstract Syntax Tree (AST)"),vv.forEach(o),qn=t(fn,"."),fn.forEach(o),Jo.forEach(o),an=c(p),C=n(p,"SECTION",{});var K=l(C);Yo=n(K,"H3",{});var dv=l(Yo);We=n(dv,"A",{href:!0,id:!0});var yv=l(We);$n=t(yv,"What is Abstract Syntax Tree (AST)?"),yv.forEach(o),dv.forEach(o),zn=c(K),Xo=n(K,"P",{});var uv=l(Xo);Qn=t(uv,"I am not sure I can explain this better than the amazing articles out there on the web:"),uv.forEach(o),el=c(K),he=n(K,"UL",{});var Ro=l(he);ke=n(Ro,"LI",{});var Bo=l(ke);Ve=n(Bo,"A",{href:!0,rel:!0});var fv=l(Ve);sl=t(fv,"Leveling Up One\u2019s Parsing Game With ASTs"),fv.forEach(o),tl=t(Bo," by "),je=n(Bo,"A",{href:!0,rel:!0});var bv=l(je);ol=t(bv,"Vaidehi Joshi"),bv.forEach(o),al=t(Bo," * "),qo=n(Bo,"EM",{});var xv=l(qo);nl=t(xv,"(Highly recommend this one! \u{1F44D})"),xv.forEach(o),Bo.forEach(o),ll=c(Ro),qs=n(Ro,"LI",{});var ev=l(qs);rl=t(ev,"Wikipedia's "),Je=n(ev,"A",{href:!0,rel:!0});var wv=l(Je);il=t(wv,"Abstract syntax tree"),wv.forEach(o),ev.forEach(o),cl=c(Ro),Re=n(Ro,"LI",{});var bn=l(Re);Be=n(bn,"A",{href:!0,rel:!0});var mv=l(Be);pl=t(mv,"What is an Abstract Syntax Tree"),mv.forEach(o),hl=t(bn," by "),Ge=n(bn,"A",{href:!0,rel:!0});var gv=l(Ge);kl=t(gv,"Chidume Nnamdi"),gv.forEach(o),bn.forEach(o),Ro.forEach(o),vl=c(K),Me=n(K,"P",{});var xn=l(Me);dl=t(xn,"To summarize, AST is a tree representation of your code. In the case of JavaScript, the JavaScript AST follows the "),Ne=n(xn,"A",{href:!0,rel:!0});var Ev=l(Ne);yl=t(Ev,"estree specification"),Ev.forEach(o),ul=t(xn,"."),xn.forEach(o),fl=c(K),Ue=n(K,"P",{});var wn=l(Ue);bl=t(wn,"AST represents your code, the structure and the meaning of your code. So it allows the compiler like "),Ze=n(wn,"A",{href:!0,rel:!0});var _v=l(Ze);xl=t(_v,"babel"),_v.forEach(o),wl=t(wn," to understand the code and make specific meaningful transformation to it."),wn.forEach(o),ml=c(K),$o=n(K,"P",{});var Sv=l($o);gl=t(Sv,"So now you know what is AST, let's write a custom babel transformation to modify your code using AST."),Sv.forEach(o),K.forEach(o),nn=c(p),f=n(p,"SECTION",{});var g=l(f);zo=n(g,"H2",{});var Iv=l(zo);Fe=n(Iv,"A",{href:!0,id:!0});var Av=l(Fe);El=t(Av,"How to use babel to transform code"),Av.forEach(o),Iv.forEach(o),_l=c(g),Qo=n(g,"P",{});var Tv=l(Qo);Sl=t(Tv,"The following is the general template of using babel to do code transformation:"),Tv.forEach(o),Il=c(g),$s=n(g,"DIV",{class:!0});var ef=l($s);ef.forEach(o),Al=c(g),ea=n(g,"BLOCKQUOTE",{});var Cv=l(ea);T=n(Cv,"P",{});var B=l(T);Tl=t(B,"You would need to install "),Ke=n(B,"A",{href:!0,rel:!0});var Ov=l(Ke);Cl=t(Ov,"@babel/core"),Ov.forEach(o),Ol=t(B," to run this. "),zs=n(B,"CODE",{class:!0});var Dv=l(zs);Dl=t(Dv,"@babel/parser"),Dv.forEach(o),Ll=t(B,", "),Qs=n(B,"CODE",{class:!0});var Lv=l(Qs);Pl=t(Lv,"@babel/traverse"),Lv.forEach(o),Hl=t(B,", "),et=n(B,"CODE",{class:!0});var Pv=l(et);Wl=t(Pv,"@babel/generator"),Pv.forEach(o),Vl=t(B," are all dependencies of "),st=n(B,"CODE",{class:!0});var Hv=l(st);jl=t(Hv,"@babel/core"),Hv.forEach(o),Jl=t(B,", so installing "),tt=n(B,"CODE",{class:!0});var Wv=l(tt);Rl=t(Wv,"@babel/core"),Wv.forEach(o),Bl=t(B," would suffice."),B.forEach(o),Cv.forEach(o),Gl=c(g),sa=n(g,"P",{});var Vv=l(sa);Ml=t(Vv,"So the general idea is to parse your code to AST, transform the AST, and then generate code from the transformed AST."),Vv.forEach(o),Nl=c(g),ot=n(g,"DIV",{class:!0});var sf=l(ot);sf.forEach(o),Ul=c(g),Ye=n(g,"P",{});var mn=l(Ye);Zl=t(mn,"However, we can use another API from "),at=n(mn,"CODE",{class:!0});var jv=l(at);Fl=t(jv,"babel"),jv.forEach(o),Kl=t(mn," to do all the above:"),mn.forEach(o),Yl=c(g),nt=n(g,"DIV",{class:!0});var tf=l(nt);tf.forEach(o),Xl=c(g),ee=n(g,"P",{});var _e=l(ee);ql=t(_e,"Now, you have written your first "),Xe=n(_e,"A",{href:!0,rel:!0});var Jv=l(Xe);$l=t(Jv,"babel transform plugin"),Jv.forEach(o),zl=t(_e," that replace all variable named "),lt=n(_e,"CODE",{class:!0});var Rv=l(lt);Ql=t(Rv,"n"),Rv.forEach(o),er=t(_e," to "),rt=n(_e,"CODE",{class:!0});var Bv=l(rt);sr=t(Bv,"x"),Bv.forEach(o),tr=t(_e,", how cool is that?!"),_e.forEach(o),or=c(g),ta=n(g,"BLOCKQUOTE",{});var Gv=l(ta);ve=n(Gv,"P",{});var Go=l(ve);ar=t(Go,"Extract out the function "),it=n(Go,"CODE",{class:!0});var Mv=l(it);nr=t(Mv,"myCustomPlugin"),Mv.forEach(o),lr=t(Go," to a new file and export it. "),qe=n(Go,"A",{href:!0,rel:!0});var Nv=l(qe);rr=t(Nv,"Package and publish your file as a npm package"),Nv.forEach(o),ir=t(Go," and you can proudly say you have published a babel plugin! \u{1F389}\u{1F389}"),Go.forEach(o),Gv.forEach(o),cr=c(g),$e=n(g,"P",{});var gn=l($e);pr=t(gn,"At this point, you must have thought: "),oa=n(gn,"EM",{});var Uv=l(oa);hr=t(Uv,`"Yes I've just written a babel plugin, but I have no idea how it works..."`),Uv.forEach(o),kr=t(gn,", so fret not, let's dive in on how you can write the babel transformation plugin yourself!"),gn.forEach(o),vr=c(g),aa=n(g,"P",{});var Zv=l(aa);dr=t(Zv,"So, here is the step-by-step guide to do it:"),Zv.forEach(o),g.forEach(o),ln=c(p),A=n(p,"SECTION",{});var G=l(A);na=n(G,"H3",{});var Fv=l(na);ze=n(Fv,"A",{href:!0,id:!0});var Kv=l(ze);yr=t(Kv,"1. Have in mind what you want to transform from and transform into"),Kv.forEach(o),Fv.forEach(o),ur=c(G),la=n(G,"P",{});var Yv=l(la);fr=t(Yv,"In this example, I want to prank my colleague by creating a babel plugin that will:"),Yv.forEach(o),br=c(G),Qe=n(G,"UL",{});var En=l(Qe);ra=n(En,"LI",{});var Xv=l(ra);xr=t(Xv,"reverse all the variables' and functions' names"),Xv.forEach(o),wr=c(En),ia=n(En,"LI",{});var qv=l(ia);mr=t(qv,"split out string into individual characters"),qv.forEach(o),En.forEach(o),gr=c(G),ct=n(G,"DIV",{class:!0});var of=l(ct);of.forEach(o),Er=c(G),ca=n(G,"P",{});var $v=l(ca);_r=t($v,"into"),$v.forEach(o),Sr=c(G),pt=n(G,"DIV",{class:!0});var af=l(pt);af.forEach(o),Ir=c(G),we=n(G,"P",{});var tn=l(we);Ar=t(tn,"Well, we have to keep the "),ht=n(tn,"CODE",{class:!0});var zv=l(ht);Tr=t(zv,"console.log"),zv.forEach(o),Cr=t(tn,", so that even the code is hardly readable, it is still working fine. "),pa=n(tn,"EM",{});var Qv=l(pa);Or=t(Qv,"(I wouldn't want to break the production code!)"),Qv.forEach(o),tn.forEach(o),G.forEach(o),rn=c(p),O=n(p,"SECTION",{});var Y=l(O);ha=n(Y,"H3",{});var ed=l(ha);es=n(ed,"A",{href:!0,id:!0});var sd=l(es);Dr=t(sd,"2. Know what to target on the AST"),sd.forEach(o),ed.forEach(o),Lr=c(Y),ss=n(Y,"P",{});var _n=l(ss);Pr=t(_n,"Head down to a "),ts=n(_n,"A",{href:!0,rel:!0});var td=l(ts);Hr=t(td,"babel AST explorer"),td.forEach(o),Wr=t(_n,", click on different parts of the code and see where / how it is represented on the AST:"),_n.forEach(o),Vr=c(Y),ka=n(Y,"P",{});var od=l(ka);os=n(od,"PICTURE",{});var Sn=l(os);va=n(Sn,"SOURCE",{type:!0,srcset:!0}),da=n(Sn,"SOURCE",{type:!0,srcset:!0}),me=n(Sn,"IMG",{src:!0,loading:!0,alt:!0,title:!0}),Sn.forEach(o),od.forEach(o),jr=c(Y),ya=n(Y,"P",{});var ad=l(ya);Jr=t(ad,"If this is your first time seeing the AST, play around with it for a little while and get the sense of how is it look like, and get to know the names of the node on the AST with respect to your code."),ad.forEach(o),Rr=c(Y),ua=n(Y,"P",{});var nd=l(ua);Br=t(nd,"So, now we know that we need to target:"),nd.forEach(o),Gr=c(Y),as=n(Y,"UL",{});var In=l(as);kt=n(In,"LI",{});var sv=l(kt);fa=n(sv,"STRONG",{});var ld=l(fa);Mr=t(ld,"Identifier"),ld.forEach(o),Nr=t(sv," for variable and function names"),sv.forEach(o),Ur=c(In),vt=n(In,"LI",{});var tv=l(vt);ba=n(tv,"STRONG",{});var rd=l(ba);Zr=t(rd,"StringLiteral"),rd.forEach(o),Fr=t(tv," for the string."),tv.forEach(o),In.forEach(o),Y.forEach(o),cn=c(p),J=n(p,"SECTION",{});var le=l(J);xa=n(le,"H3",{});var id=l(xa);ns=n(id,"A",{href:!0,id:!0});var cd=l(ns);Kr=t(cd,"3. Know how the transformed AST looks like"),cd.forEach(o),id.forEach(o),Yr=c(le),ls=n(le,"P",{});var An=l(ls);Xr=t(An,"Head down to the "),rs=n(An,"A",{href:!0,rel:!0});var pd=l(rs);qr=t(pd,"babel AST explorer"),pd.forEach(o),$r=t(An," again, but this time around with the output code you want to generate."),An.forEach(o),zr=c(le),wa=n(le,"P",{});var hd=l(wa);is=n(hd,"PICTURE",{});var Tn=l(is);ma=n(Tn,"SOURCE",{type:!0,srcset:!0}),ga=n(Tn,"SOURCE",{type:!0,srcset:!0}),ge=n(Tn,"IMG",{src:!0,loading:!0,alt:!0,title:!0}),Tn.forEach(o),hd.forEach(o),Qr=c(le),Ea=n(le,"P",{});var kd=l(Ea);ei=t(kd,"Play around and think how you can transform from the previous AST to the current AST."),kd.forEach(o),si=c(le),se=n(le,"P",{});var Se=l(se);ti=t(Se,"For example, you can see that "),dt=n(Se,"CODE",{class:!0});var vd=l(dt);oi=t(vd,"'H' + 'e' + 'l' + 'l' + 'o' + ' ' + eman"),vd.forEach(o),ai=t(Se," is formed by nested "),yt=n(Se,"CODE",{class:!0});var dd=l(yt);ni=t(dd,"BinaryExpression"),dd.forEach(o),li=t(Se," with "),ut=n(Se,"CODE",{class:!0});var yd=l(ut);ri=t(yd,"StringLiteral"),yd.forEach(o),ii=t(Se,"."),Se.forEach(o),le.forEach(o),pn=c(p),k=n(p,"SECTION",{});var u=l(k);_a=n(u,"H3",{});var ud=l(_a);cs=n(ud,"A",{href:!0,id:!0});var fd=l(cs);ci=t(fd,"4. Write code"),fd.forEach(o),ud.forEach(o),pi=c(u),Sa=n(u,"P",{});var bd=l(Sa);hi=t(bd,"Now look at our code again:"),bd.forEach(o),ki=c(u),ft=n(u,"DIV",{class:!0});var nf=l(ft);nf.forEach(o),vi=c(u),ps=n(u,"P",{});var Cn=l(ps);di=t(Cn,"The transformation uses "),hs=n(Cn,"A",{href:!0,rel:!0});var xd=l(hs);yi=t(xd,"the visitor pattern"),xd.forEach(o),ui=t(Cn,"."),Cn.forEach(o),fi=c(u),ks=n(u,"P",{});var On=l(ks);bi=t(On,"During the traversal phase, babel will do a "),vs=n(On,"A",{href:!0,rel:!0});var wd=l(vs);xi=t(wd,"depth-first search traversal"),wd.forEach(o),wi=t(On," and visit each node in the AST. You can specify a callback method in the visitor, such that while visiting the node, babel will call the callback method with the node it is currently visiting."),On.forEach(o),mi=c(u),ds=n(u,"P",{});var Dn=l(ds);gi=t(Dn,"In the visitor object, you can specify the name of the node you want to be "),bt=n(Dn,"CODE",{class:!0});var md=l(bt);Ei=t(md,"callback"),md.forEach(o),_i=t(Dn,"ed:"),Dn.forEach(o),Si=c(u),xt=n(u,"DIV",{class:!0});var lf=l(xt);lf.forEach(o),Ii=c(u),Ia=n(u,"P",{});var gd=l(Ia);Ai=t(gd,'Run it and you will see that "string literal" and "identifier" is being called whenever babel encounters it:'),gd.forEach(o),Ti=c(u),wt=n(u,"DIV",{class:!0});var rf=l(wt);rf.forEach(o),Ci=c(u),Oi=n(u,"HR",{}),Di=c(u),H=n(u,"P",{});var X=l(H);Li=t(X,"Before we continue, let's look at the parameter of "),mt=n(X,"CODE",{class:!0});var Ed=l(mt);Pi=t(Ed,"Identifer(path) {}"),Ed.forEach(o),Hi=t(X,". It says "),gt=n(X,"CODE",{class:!0});var _d=l(gt);Wi=t(_d,"path"),_d.forEach(o),Vi=t(X," instead of "),Et=n(X,"CODE",{class:!0});var Sd=l(Et);ji=t(Sd,"node"),Sd.forEach(o),Ji=t(X,", what is the difference between "),_t=n(X,"CODE",{class:!0});var Id=l(_t);Ri=t(Id,"path"),Id.forEach(o),Bi=t(X," and "),St=n(X,"CODE",{class:!0});var Ad=l(St);Gi=t(Ad,"node"),Ad.forEach(o),Mi=t(X,"? \u{1F937}\u200D"),X.forEach(o),Ni=c(u),E=n(u,"P",{});var _=l(E);Ui=t(_,"In babel, "),It=n(_,"CODE",{class:!0});var Td=l(It);Zi=t(Td,"path"),Td.forEach(o),Fi=t(_," is an abstraction above "),At=n(_,"CODE",{class:!0});var Cd=l(At);Ki=t(Cd,"node"),Cd.forEach(o),Yi=t(_,", it provides the link between nodes, ie the "),Tt=n(_,"CODE",{class:!0});var Od=l(Tt);Xi=t(Od,"parent"),Od.forEach(o),qi=t(_," of the node, as well as information such as the "),Ct=n(_,"CODE",{class:!0});var Dd=l(Ct);$i=t(Dd,"scope"),Dd.forEach(o),zi=t(_,", "),Ot=n(_,"CODE",{class:!0});var Ld=l(Ot);Qi=t(Ld,"context"),Ld.forEach(o),ec=t(_,", etc. Besides, the "),Dt=n(_,"CODE",{class:!0});var Pd=l(Dt);sc=t(Pd,"path"),Pd.forEach(o),tc=t(_," provides method such as "),Lt=n(_,"CODE",{class:!0});var Hd=l(Lt);oc=t(Hd,"replaceWith"),Hd.forEach(o),ac=t(_,", "),Pt=n(_,"CODE",{class:!0});var Wd=l(Pt);nc=t(Wd,"insertBefore"),Wd.forEach(o),lc=t(_,", "),Ht=n(_,"CODE",{class:!0});var Vd=l(Ht);rc=t(Vd,"remove"),Vd.forEach(o),ic=t(_,", etc that will update and reflect on the underlying AST node."),_.forEach(o),cc=c(u),Aa=n(u,"BLOCKQUOTE",{});var jd=l(Aa);ne=n(jd,"P",{});var Ks=l(ne);pc=t(Ks,"You can read more detail about "),Wt=n(Ks,"CODE",{class:!0});var Jd=l(Wt);hc=t(Jd,"path"),Jd.forEach(o),kc=t(Ks," in "),ys=n(Ks,"A",{href:!0,rel:!0});var Rd=l(ys);vc=t(Rd,"Jamie Kyle"),Rd.forEach(o),dc=t(Ks,"'s "),us=n(Ks,"A",{href:!0,rel:!0});var Bd=l(us);yc=t(Bd,"babel handbook"),Bd.forEach(o),Ks.forEach(o),jd.forEach(o),uc=c(u),fc=n(u,"HR",{}),bc=c(u),Ta=n(u,"P",{});var Gd=l(Ta);xc=t(Gd,"So let's continue writing our babel plugin."),Gd.forEach(o),u.forEach(o),hn=c(p),h=n(p,"SECTION",{});var v=l(h);Ca=n(v,"H4",{});var Md=l(Ca);fs=n(Md,"A",{href:!0,id:!0});var Nd=l(fs);wc=t(Nd,"Transforming variable name"),Nd.forEach(o),Md.forEach(o),mc=c(v),M=n(v,"P",{});var re=l(M);gc=t(re,"As we can see from the "),bs=n(re,"A",{href:!0,rel:!0});var Ud=l(bs);Ec=t(Ud,"AST explorer"),Ud.forEach(o),_c=t(re,", the name of the "),Vt=n(re,"CODE",{class:!0});var Zd=l(Vt);Sc=t(Zd,"Identifier"),Zd.forEach(o),Ic=t(re," is stored in the property called "),jt=n(re,"CODE",{class:!0});var Fd=l(jt);Ac=t(Fd,"name"),Fd.forEach(o),Tc=t(re,", so what we will do is to reverse the "),Jt=n(re,"CODE",{class:!0});var Kd=l(Jt);Cc=t(Kd,"name"),Kd.forEach(o),Oc=t(re,"."),re.forEach(o),Dc=c(v),Rt=n(v,"DIV",{class:!0});var cf=l(Rt);cf.forEach(o),Lc=c(v),Oa=n(v,"P",{});var Yd=l(Oa);Pc=t(Yd,"Run it and you will see:"),Yd.forEach(o),Hc=c(v),Bt=n(v,"DIV",{class:!0});var pf=l(Bt);pf.forEach(o),Wc=c(v),xs=n(v,"P",{});var Ln=l(xs);Vc=t(Ln,"We are almost there, except we've accidentally reversed "),Gt=n(Ln,"CODE",{class:!0});var Xd=l(Gt);jc=t(Xd,"console.log"),Xd.forEach(o),Jc=t(Ln," as well. How can we prevent that?"),Ln.forEach(o),Rc=c(v),Da=n(v,"P",{});var qd=l(Da);Bc=t(qd,"Take a look at the AST again:"),qd.forEach(o),Gc=c(v),La=n(v,"P",{});var $d=l(La);ws=n($d,"PICTURE",{});var Pn=l(ws);Pa=n(Pn,"SOURCE",{type:!0,srcset:!0}),Ha=n(Pn,"SOURCE",{type:!0,srcset:!0}),ms=n(Pn,"IMG",{src:!0,loading:!0,alt:!0}),Pn.forEach(o),$d.forEach(o),Mc=c(v),D=n(v,"P",{});var Z=l(D);Mt=n(Z,"CODE",{class:!0});var zd=l(Mt);Nc=t(zd,"console.log"),zd.forEach(o),Uc=t(Z," is part of the "),Nt=n(Z,"CODE",{class:!0});var Qd=l(Nt);Zc=t(Qd,"MemberExpression"),Qd.forEach(o),Fc=t(Z,", with the "),Ut=n(Z,"CODE",{class:!0});var ey=l(Ut);Kc=t(ey,"object"),ey.forEach(o),Yc=t(Z," as "),Zt=n(Z,"CODE",{class:!0});var sy=l(Zt);Xc=t(sy,'"console"'),sy.forEach(o),qc=t(Z," and "),Ft=n(Z,"CODE",{class:!0});var ty=l(Ft);$c=t(ty,"property"),ty.forEach(o),zc=t(Z," as "),Kt=n(Z,"CODE",{class:!0});var oy=l(Kt);Qc=t(oy,'"log"'),oy.forEach(o),ep=t(Z,"."),Z.forEach(o),sp=c(v),de=n(v,"P",{});var Mo=l(de);tp=t(Mo,"So let's check that if our current "),Yt=n(Mo,"CODE",{class:!0});var ay=l(Yt);op=t(ay,"Identifier"),ay.forEach(o),ap=t(Mo," is within this "),Xt=n(Mo,"CODE",{class:!0});var ny=l(Xt);np=t(ny,"MemberExpression"),ny.forEach(o),lp=t(Mo," and we will not reverse the name:"),Mo.forEach(o),rp=c(v),qt=n(v,"DIV",{class:!0});var hf=l(qt);hf.forEach(o),ip=c(v),Wa=n(v,"P",{});var ly=l(Wa);cp=t(ly,"And yes, now you get it right!"),ly.forEach(o),pp=c(v),$t=n(v,"DIV",{class:!0});var kf=l($t);kf.forEach(o),hp=c(v),N=n(v,"P",{});var ie=l(N);kp=t(ie,"So, why do we have to check whether the "),zt=n(ie,"CODE",{class:!0});var ry=l(zt);vp=t(ry,"Identifier"),ry.forEach(o),dp=t(ie,"'s parent is not a "),Qt=n(ie,"CODE",{class:!0});var iy=l(Qt);yp=t(iy,"console.log"),iy.forEach(o),up=c(ie),eo=n(ie,"CODE",{class:!0});var cy=l(eo);fp=t(cy,"MemberExpression"),cy.forEach(o),bp=t(ie,"? Why don't we just compare whether the current "),so=n(ie,"CODE",{class:!0});var py=l(so);xp=t(py,"Identifier.name === 'console' || Identifier.name === 'log'"),py.forEach(o),wp=t(ie,"?"),ie.forEach(o),mp=c(v),ye=n(v,"P",{});var No=l(ye);gp=t(No,"You can do that, except that it will not reverse the variable name if it is named "),to=n(No,"CODE",{class:!0});var hy=l(to);Ep=t(hy,"console"),hy.forEach(o),_p=t(No," or "),oo=n(No,"CODE",{class:!0});var ky=l(oo);Sp=t(ky,"log"),ky.forEach(o),Ip=t(No,":"),No.forEach(o),Ap=c(v),ao=n(v,"DIV",{class:!0});var vf=l(ao);vf.forEach(o),Tp=c(v),Va=n(v,"BLOCKQUOTE",{});var vy=l(Va);S=n(vy,"P",{});var L=l(S);Cp=t(L,"So, how do I know the method "),no=n(L,"CODE",{class:!0});var dy=l(no);Op=t(dy,"isMemberExpression"),dy.forEach(o),Dp=t(L," and "),lo=n(L,"CODE",{class:!0});var yy=l(lo);Lp=t(yy,"isIdentifier"),yy.forEach(o),Pp=t(L,"? Well, all the node types specified in the "),gs=n(L,"A",{href:!0,rel:!0});var uy=l(gs);Hp=t(uy,"@babel/types"),uy.forEach(o),Wp=t(L," have the "),ro=n(L,"CODE",{class:!0});var fy=l(ro);Vp=t(fy,"isXxxx"),fy.forEach(o),jp=t(L," validator function counterpart, eg: "),io=n(L,"CODE",{class:!0});var by=l(io);Jp=t(by,"anyTypeAnnotation"),by.forEach(o),Rp=t(L," function will have a "),co=n(L,"CODE",{class:!0});var xy=l(co);Bp=t(xy,"isAnyTypeAnnotation"),xy.forEach(o),Gp=t(L," validator. If you want to know the exhaustive list of the validator functions, you can head over "),Es=n(L,"A",{href:!0,rel:!0});var wy=l(Es);Mp=t(wy,"to the actual source code"),wy.forEach(o),Np=t(L,"."),L.forEach(o),vy.forEach(o),v.forEach(o),kn=c(p),y=n(p,"SECTION",{});var b=l(y);ja=n(b,"H4",{});var my=l(ja);_s=n(my,"A",{href:!0,id:!0});var gy=l(_s);Up=t(gy,"Transforming strings"),gy.forEach(o),my.forEach(o),Zp=c(b),ue=n(b,"P",{});var Uo=l(ue);Fp=t(Uo,"The next step is to generate a nested "),po=n(Uo,"CODE",{class:!0});var Ey=l(po);Kp=t(Ey,"BinaryExpression"),Ey.forEach(o),Yp=t(Uo," out of "),ho=n(Uo,"CODE",{class:!0});var _y=l(ho);Xp=t(_y,"StringLiteral"),_y.forEach(o),qp=t(Uo,"."),Uo.forEach(o),$p=c(b),U=n(b,"P",{});var ce=l(U);zp=t(ce,"To create an AST node, you can use the utility function from "),Ss=n(ce,"A",{href:!0,rel:!0});var Sy=l(Ss);ko=n(Sy,"CODE",{class:!0});var Iy=l(ko);Qp=t(Iy,"@babel/types"),Iy.forEach(o),Sy.forEach(o),eh=t(ce,". "),vo=n(ce,"CODE",{class:!0});var Ay=l(vo);sh=t(Ay,"@babel/types"),Ay.forEach(o),th=t(ce," is also available via "),yo=n(ce,"CODE",{class:!0});var Ty=l(yo);oh=t(Ty,"babel.types"),Ty.forEach(o),ah=t(ce," from "),uo=n(ce,"CODE",{class:!0});var Cy=l(uo);nh=t(Cy,"@babel/core"),Cy.forEach(o),lh=t(ce,"."),ce.forEach(o),rh=c(b),fo=n(b,"DIV",{class:!0});var df=l(fo);df.forEach(o),ih=c(b),W=n(b,"P",{});var q=l(W);ch=t(q,"So, we split the content of the "),bo=n(q,"CODE",{class:!0});var Oy=l(bo);ph=t(Oy,"StringLiteral"),Oy.forEach(o),hh=t(q,", which is in "),xo=n(q,"CODE",{class:!0});var Dy=l(xo);kh=t(Dy,"path.node.value"),Dy.forEach(o),vh=t(q,", make each character a "),wo=n(q,"CODE",{class:!0});var Ly=l(wo);dh=t(Ly,"StringLiteral"),Ly.forEach(o),yh=t(q,", and combine them with "),mo=n(q,"CODE",{class:!0});var Py=l(mo);uh=t(Py,"BinaryExpression"),Py.forEach(o),fh=t(q,". Finally, we replace the "),go=n(q,"CODE",{class:!0});var Hy=l(go);bh=t(Hy,"StringLiteral"),Hy.forEach(o),xh=t(q," with the newly created node."),q.forEach(o),wh=c(b),Ja=n(b,"P",{});var Wy=l(Ja);mh=t(Wy,"...And that's it! Except, we ran into Stack Overflow \u{1F605}:"),Wy.forEach(o),gh=c(b),Eo=n(b,"DIV",{class:!0});var yf=l(Eo);yf.forEach(o),Eh=c(b),Ra=n(b,"P",{});var Vy=l(Ra);_h=t(Vy,"Why \u{1F937}\u200D ?"),Vy.forEach(o),Sh=c(b),I=n(b,"P",{});var P=l(I);Ih=t(P,"Well, that's because for each "),_o=n(P,"CODE",{class:!0});var jy=l(_o);Ah=t(jy,"StringLiteral"),jy.forEach(o),Th=t(P," we created more "),So=n(P,"CODE",{class:!0});var Jy=l(So);Ch=t(Jy,"StringLiteral"),Jy.forEach(o),Oh=t(P,", and in each of those "),Io=n(P,"CODE",{class:!0});var Ry=l(Io);Dh=t(Ry,"StringLiteral"),Ry.forEach(o),Lh=t(P,', we are "creating" more '),Ao=n(P,"CODE",{class:!0});var By=l(Ao);Ph=t(By,"StringLiteral"),By.forEach(o),Hh=t(P,". Although we will replace a "),To=n(P,"CODE",{class:!0});var Gy=l(To);Wh=t(Gy,"StringLiteral"),Gy.forEach(o),Vh=t(P," with another "),Co=n(P,"CODE",{class:!0});var My=l(Co);jh=t(My,"StringLiteral"),My.forEach(o),Jh=t(P,", babel will treat it as a new node and will visit the newly created "),Oo=n(P,"CODE",{class:!0});var Ny=l(Oo);Rh=t(Ny,"StringLiteral"),Ny.forEach(o),Bh=t(P,", thus the infinite recursive and stack overflow."),P.forEach(o),Gh=c(b),fe=n(b,"P",{});var Zo=l(fe);Mh=t(Zo,"So, how do we tell babel that once we replaced the "),Do=n(Zo,"CODE",{class:!0});var Uy=l(Do);Nh=t(Uy,"StringLiteral"),Uy.forEach(o),Uh=t(Zo," with the "),Lo=n(Zo,"CODE",{class:!0});var Zy=l(Lo);Zh=t(Zy,"newNode"),Zy.forEach(o),Fh=t(Zo,", babel can stop and don't have to go down and visit the newly created node anymore?"),Zo.forEach(o),Kh=c(b),Is=n(b,"P",{});var Hn=l(Is);Yh=t(Hn,"We can use "),Po=n(Hn,"CODE",{class:!0});var Fy=l(Po);Xh=t(Fy,"path.skip()"),Fy.forEach(o),qh=t(Hn," to skip traversing the children of the current path:"),Hn.forEach(o),$h=c(b),Ho=n(b,"DIV",{class:!0});var uf=l(Ho);uf.forEach(o),zh=c(b),Ba=n(b,"P",{});var Ky=l(Ba);Qh=t(Ky,"...And yes it works now with now stack overflow!"),Ky.forEach(o),b.forEach(o),vn=c(p),R=n(p,"SECTION",{});var pe=l(R);Ga=n(pe,"H2",{});var Yy=l(Ga);As=n(Yy,"A",{href:!0,id:!0});var Xy=l(As);ek=t(Xy,"Summary"),Xy.forEach(o),Yy.forEach(o),sk=c(pe),Ma=n(pe,"P",{});var qy=l(Ma);tk=t(qy,"So, here we have it, our first code transformation with babel:"),qy.forEach(o),ok=c(pe),Wo=n(pe,"DIV",{class:!0});var ff=l(Wo);ff.forEach(o),ak=c(pe),Na=n(pe,"P",{});var $y=l(Na);nk=t($y,"A summary of the steps on how we get here:"),$y.forEach(o),lk=c(pe),te=n(pe,"OL",{});var Ie=l(te);Ua=n(Ie,"LI",{});var zy=l(Ua);rk=t(zy,"Have in mind what you want to transform from and transform into"),zy.forEach(o),ik=c(Ie),Za=n(Ie,"LI",{});var Qy=l(Za);ck=t(Qy,"Know what to target on the AST"),Qy.forEach(o),pk=c(Ie),Fa=n(Ie,"LI",{});var eu=l(Fa);hk=t(eu,"Know how the transformed AST looks like"),eu.forEach(o),kk=c(Ie),Ka=n(Ie,"LI",{});var su=l(Ka);vk=t(su,"Write code"),su.forEach(o),Ie.forEach(o),pe.forEach(o),dn=c(p),F=n(p,"SECTION",{});var Ae=l(F);Ya=n(Ae,"H2",{});var tu=l(Ya);Ts=n(tu,"A",{href:!0,id:!0});var ou=l(Ts);dk=t(ou,"Further resources"),ou.forEach(o),tu.forEach(o),yk=c(Ae),Cs=n(Ae,"P",{});var Wn=l(Cs);uk=t(Wn,"If you are interested to learn more, "),Os=n(Wn,"A",{href:!0,rel:!0});var au=l(Os);fk=t(au,"babel's Github repo"),au.forEach(o),bk=t(Wn," is always the best place to find out more code examples of writing a babel transformation."),Wn.forEach(o),xk=c(Ae),V=n(Ae,"P",{});var $=l(V);wk=t($,"Head down to "),Ds=n($,"A",{href:!0,rel:!0});var nu=l(Ds);mk=t(nu,"https://github.com/babel/babel"),nu.forEach(o),gk=t($,", and look for "),Vo=n($,"CODE",{class:!0});var lu=l(Vo);Ek=t(lu,"babel-plugin-transform-*"),lu.forEach(o),_k=t($," or "),jo=n($,"CODE",{class:!0});var ru=l(jo);Sk=t(ru,"babel-plugin-proposal-*"),ru.forEach(o),Ik=t($," folders, they are all babel transformation plugin, where you can find code on how babel "),Ls=n($,"A",{href:!0,rel:!0});var iu=l(Ls);Ak=t(iu,"transform the nullish coalescing operator"),iu.forEach(o),Tk=t($,", "),Ps=n($,"A",{href:!0,rel:!0});var cu=l(Ps);Ck=t(cu,"optional chaining"),cu.forEach(o),Ok=t($," and many more."),$.forEach(o),Dk=c(Ae),oe=n(Ae,"BLOCKQUOTE",{});var Te=l(oe);Xa=n(Te,"P",{});var pu=l(Xa);qa=n(pu,"STRONG",{});var hu=l(qa);Lk=t(hu,"Manipulating AST with JavaScript using Babel"),hu.forEach(o),pu.forEach(o),Pk=c(Te),Hs=n(Te,"P",{});var Vn=l(Hs);Hk=t(Vn,"If you like what you've read so far, and want to learn how you could do it with Babel. I've created a "),Ws=n(Vn,"A",{href:!0,rel:!0});var ku=l(Ws);Wk=t(ku,"video course"),ku.forEach(o),Vk=t(Vn,", showing you step-by-step, how to write a babel plugin and codemod."),Vn.forEach(o),jk=c(Te),$a=n(Te,"P",{});var vu=l($a);Jk=t(vu,"In the video course, I detailed tips and tricks, such as how to handle scope, how to use state, and also nested traversals."),vu.forEach(o),Rk=c(Te),za=n(Te,"P",{});var du=l(za);Qa=n(du,"STRONG",{});var yu=l(Qa);Vs=n(yu,"A",{href:!0,rel:!0});var uu=l(Vs);Bk=t(uu,"Sounds interesting, let's take a look at the video course"),uu.forEach(o),yu.forEach(o),du.forEach(o),Te.forEach(o),Ae.forEach(o),yn=c(p),Ee=n(p,"SECTION",{});var jn=l(Ee);en=n(jn,"H2",{});var fu=l(en);js=n(fu,"A",{href:!0,id:!0});var bu=l(js);Gk=t(bu,"Reference"),bu.forEach(o),fu.forEach(o),Mk=c(jn),be=n(jn,"UL",{});var Fo=l(be);Js=n(Fo,"LI",{});var Jn=l(Js);Rs=n(Jn,"A",{href:!0,rel:!0});var xu=l(Rs);Nk=t(xu,"Babel docs"),xu.forEach(o),Uk=t(Jn," & "),Bs=n(Jn,"A",{href:!0,rel:!0});var wu=l(Bs);Zk=t(wu,"Github repo"),wu.forEach(o),Jn.forEach(o),Fk=c(Fo),Gs=n(Fo,"LI",{});var Rn=l(Gs);Ms=n(Rn,"A",{href:!0,rel:!0});var mu=l(Ms);Kk=t(mu,"Babel Handbook"),mu.forEach(o),Yk=t(Rn," by "),Ns=n(Rn,"A",{href:!0,rel:!0});var gu=l(Ns);Xk=t(gu,"Jamie Kyle"),gu.forEach(o),Rn.forEach(o),qk=c(Fo),Us=n(Fo,"LI",{});var Bn=l(Us);Zs=n(Bn,"A",{href:!0,rel:!0});var Eu=l(Zs);$k=t(Eu,"Leveling Up One\u2019s Parsing Game With ASTs"),Eu.forEach(o),zk=t(Bn," by "),Fs=n(Bn,"A",{href:!0,rel:!0});var _u=l(Fs);Qk=t(_u,"Vaidehi Joshi"),_u.forEach(o),Bn.forEach(o),Fo.forEach(o),jn.forEach(o),this.h()},h(){r(m,"href","https://babeljs.io/docs/en/babel-core"),r(m,"rel","nofollow"),r(Oe,"href","#what-is-babel"),r(Oe,"id","what-is-babel"),r(De,"href","https://babeljs.io/docs/en/"),r(De,"rel","nofollow"),r(Le,"href","https://babeljs.io/docs/en/plugins"),r(Le,"rel","nofollow"),r(He,"href","https://en.wikipedia.org/wiki/Abstract_syntax_tree"),r(He,"rel","nofollow"),r(We,"href","#what-is-abstract-syntax-tree-ast"),r(We,"id","what-is-abstract-syntax-tree-ast"),r(Ve,"href","https://medium.com/basecs/leveling-up-ones-parsing-game-with-asts-d7a6fc2400ff"),r(Ve,"rel","nofollow"),r(je,"href","https://twitter.com/vaidehijoshi"),r(je,"rel","nofollow"),r(Je,"href","https://en.wikipedia.org/wiki/Abstract_syntax_tree"),r(Je,"rel","nofollow"),r(Be,"href","https://blog.bitsrc.io/what-is-an-abstract-syntax-tree-7502b71bde27"),r(Be,"rel","nofollow"),r(Ge,"href","https://twitter.com/ngArchangel"),r(Ge,"rel","nofollow"),r(Ne,"href","https://github.com/estree/estree"),r(Ne,"rel","nofollow"),r(Ze,"href","https://babeljs.io"),r(Ze,"rel","nofollow"),r(Fe,"href","#how-to-use-babel-to-transform-code"),r(Fe,"id","how-to-use-babel-to-transform-code"),r($s,"class","code-section"),r(Ke,"href","https://www.npmjs.com/package/@babel/core"),r(Ke,"rel","nofollow"),r(zs,"class","inline"),r(Qs,"class","inline"),r(et,"class","inline"),r(st,"class","inline"),r(tt,"class","inline"),r(ot,"class","code-section"),r(at,"class","inline"),r(nt,"class","code-section"),r(Xe,"href","https://babeljs.io/docs/en/plugins"),r(Xe,"rel","nofollow"),r(lt,"class","inline"),r(rt,"class","inline"),r(it,"class","inline"),r(qe,"href","https://medium.com/@bretcameron/how-to-publish-your-first-npm-package-b224296fc57b"),r(qe,"rel","nofollow"),r(ze,"href","#1-have-in-mind-what-you-want-to-transform-from-and-transform-into"),r(ze,"id","1-have-in-mind-what-you-want-to-transform-from-and-transform-into"),r(ct,"class","code-section"),r(pt,"class","code-section"),r(ht,"class","inline"),r(es,"href","#2-know-what-to-target-on-the-ast"),r(es,"id","2-know-what-to-target-on-the-ast"),r(ts,"href","https://lihautan.com/babel-ast-explorer/#?eyJiYWJlbFNldHRpbmdzIjp7InZlcnNpb24iOiI3LjQuNSJ9LCJ0cmVlU2V0dGluZ3MiOnsiaGlkZUVtcHR5Ijp0cnVlLCJoaWRlTG9jYXRpb24iOnRydWUsImhpZGVUeXBlIjp0cnVlfSwiY29kZSI6ImZ1bmN0aW9uIGdyZWV0KG5hbWUpIHtcbiAgcmV0dXJuICdIZWxsbyAnICsgbmFtZTtcbn1cblxuY29uc29sZS5sb2coZ3JlZXQoJ3RhbmhhdWhhdScpKTsgLy8gSGVsbG8gdGFuaGF1aGF1In0="),r(ts,"rel","nofollow"),r(va,"type","image/webp"),r(va,"srcset",Tf),r(da,"type","image/png"),r(da,"srcset",Cu),ov(me.src,nv=Cu)||r(me,"src",nv),r(me,"loading","lazy"),r(me,"alt","targeting"),r(me,"title","Selecting the code on the left and see the corresponding part of the AST light up on the right"),r(ns,"href","#3-know-how-the-transformed-ast-looks-like"),r(ns,"id","3-know-how-the-transformed-ast-looks-like"),r(rs,"href","https://lihautan.com/babel-ast-explorer/#?eyJiYWJlbFNldHRpbmdzIjp7InZlcnNpb24iOiI3LjQuNSJ9LCJ0cmVlU2V0dGluZ3MiOnsiaGlkZUVtcHR5Ijp0cnVlLCJoaWRlTG9jYXRpb24iOnRydWUsImhpZGVUeXBlIjp0cnVlLCJoaWRlQ29tbWVudHMiOnRydWV9LCJjb2RlIjoiZnVuY3Rpb24gdGVlcmcoZW1hbikge1xuICByZXR1cm4gXCJIXCIgKyBcImVcIiArIFwibFwiICsgXCJsXCIgKyBcIm9cIiArIFwiIFwiICsgZW1hbjtcbn1cblxuY29uc29sZS5sb2codGVlcmcoXCJ0XCIgKyBcImFcIiArIFwiblwiICsgXCJoXCIgKyBcImFcIiArIFwidVwiICsgXCJoXCIgKyBcImFcIiArIFwidVwiKSk7IC8vIEhlbGxvIHRhbmhhdWhhdVxuIn0="),r(rs,"rel","nofollow"),r(ma,"type","image/webp"),r(ma,"srcset",Af),r(ga,"type","image/png"),r(ga,"srcset",Tu),ov(ge.src,lv=Tu)||r(ge,"src",lv),r(ge,"loading","lazy"),r(ge,"alt","output"),r(ge,"title","You can see that what used to be a `StringLiteral` is now a nested `BinaryExpression`"),r(dt,"class","inline"),r(yt,"class","inline"),r(ut,"class","inline"),r(cs,"href","#4-write-code"),r(cs,"id","4-write-code"),r(ft,"class","code-section"),r(hs,"href","https://en.wikipedia.org/wiki/Visitor_pattern"),r(hs,"rel","nofollow"),r(vs,"href","https://en.wikipedia.org/wiki/Depth-first_search"),r(vs,"rel","nofollow"),r(bt,"class","inline"),r(xt,"class","code-section"),r(wt,"class","code-section"),r(mt,"class","inline"),r(gt,"class","inline"),r(Et,"class","inline"),r(_t,"class","inline"),r(St,"class","inline"),r(It,"class","inline"),r(At,"class","inline"),r(Tt,"class","inline"),r(Ct,"class","inline"),r(Ot,"class","inline"),r(Dt,"class","inline"),r(Lt,"class","inline"),r(Pt,"class","inline"),r(Ht,"class","inline"),r(Wt,"class","inline"),r(ys,"href","https://jamie.build"),r(ys,"rel","nofollow"),r(us,"href","https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#paths"),r(us,"rel","nofollow"),r(fs,"href","#transforming-variable-name"),r(fs,"id","transforming-variable-name"),r(bs,"href","https://lihautan.com/babel-ast-explorer/#?eyJiYWJlbFNldHRpbmdzIjp7InZlcnNpb24iOiI3LjQuNSJ9LCJ0cmVlU2V0dGluZ3MiOnsiaGlkZUVtcHR5Ijp0cnVlLCJoaWRlTG9jYXRpb24iOnRydWUsImhpZGVUeXBlIjp0cnVlfSwiY29kZSI6ImZ1bmN0aW9uIGdyZWV0KG5hbWUpIHtcbiAgcmV0dXJuICdIZWxsbyAnICsgbmFtZTtcbn1cblxuY29uc29sZS5sb2coZ3JlZXQoJ3RhbmhhdWhhdScpKTsgLy8gSGVsbG8gdGFuaGF1aGF1In0="),r(bs,"rel","nofollow"),r(Vt,"class","inline"),r(jt,"class","inline"),r(Jt,"class","inline"),r(Rt,"class","code-section"),r(Bt,"class","code-section"),r(Gt,"class","inline"),r(Pa,"type","image/webp"),r(Pa,"srcset",If),r(Ha,"type","image/png"),r(Ha,"srcset",Au),ov(ms.src,rv=Au)||r(ms,"src",rv),r(ms,"loading","lazy"),r(ms,"alt","member expression"),r(Mt,"class","inline"),r(Nt,"class","inline"),r(Ut,"class","inline"),r(Zt,"class","inline"),r(Ft,"class","inline"),r(Kt,"class","inline"),r(Yt,"class","inline"),r(Xt,"class","inline"),r(qt,"class","code-section"),r($t,"class","code-section"),r(zt,"class","inline"),r(Qt,"class","inline"),r(eo,"class","inline"),r(so,"class","inline"),r(to,"class","inline"),r(oo,"class","inline"),r(ao,"class","code-section"),r(no,"class","inline"),r(lo,"class","inline"),r(gs,"href","https://babeljs.io/docs/en/babel-types"),r(gs,"rel","nofollow"),r(ro,"class","inline"),r(io,"class","inline"),r(co,"class","inline"),r(Es,"href","https://github.com/babel/babel/blob/master/packages/babel-types/src/validators/generated/index.js"),r(Es,"rel","nofollow"),r(_s,"href","#transforming-strings"),r(_s,"id","transforming-strings"),r(po,"class","inline"),r(ho,"class","inline"),r(ko,"class","inline"),r(Ss,"href","https://babeljs.io/docs/en/babel-types"),r(Ss,"rel","nofollow"),r(vo,"class","inline"),r(yo,"class","inline"),r(uo,"class","inline"),r(fo,"class","code-section"),r(bo,"class","inline"),r(xo,"class","inline"),r(wo,"class","inline"),r(mo,"class","inline"),r(go,"class","inline"),r(Eo,"class","code-section"),r(_o,"class","inline"),r(So,"class","inline"),r(Io,"class","inline"),r(Ao,"class","inline"),r(To,"class","inline"),r(Co,"class","inline"),r(Oo,"class","inline"),r(Do,"class","inline"),r(Lo,"class","inline"),r(Po,"class","inline"),r(Ho,"class","code-section"),r(As,"href","#summary"),r(As,"id","summary"),r(Wo,"class","code-section"),r(Ts,"href","#further-resources"),r(Ts,"id","further-resources"),r(Os,"href","https://github.com/babel/babel/tree/master/packages"),r(Os,"rel","nofollow"),r(Ds,"href","https://github.com/babel/babel/tree/master/packages"),r(Ds,"rel","nofollow"),r(Vo,"class","inline"),r(jo,"class","inline"),r(Ls,"href","https://github.com/babel/babel/tree/master/packages/babel-plugin-proposal-nullish-coalescing-operator"),r(Ls,"rel","nofollow"),r(Ps,"href","https://github.com/babel/babel/tree/master/packages/babel-plugin-proposal-optional-chaining"),r(Ps,"rel","nofollow"),r(Ws,"href","https://gum.co/manipulating-ast-with-javascript"),r(Ws,"rel","nofollow"),r(Vs,"href","https://gum.co/manipulating-ast-with-javascript"),r(Vs,"rel","nofollow"),r(js,"href","#reference"),r(js,"id","reference"),r(Rs,"href","https://babeljs.io/docs/en/"),r(Rs,"rel","nofollow"),r(Bs,"href","https://github.com/babel/babel"),r(Bs,"rel","nofollow"),r(Ms,"href","https://github.com/jamiebuilds/babel-handbook"),r(Ms,"rel","nofollow"),r(Ns,"href","https://jamie.build/"),r(Ns,"rel","nofollow"),r(Zs,"href","https://medium.com/basecs/leveling-up-ones-parsing-game-with-asts-d7a6fc2400ff"),r(Zs,"rel","nofollow"),r(Fs,"href","https://twitter.com/vaidehijoshi"),r(Fs,"rel","nofollow")},m(p,d){Pu(w,p,d),x(p,z,d),x(p,j,d),e(j,Ce),e(j,m),e(m,Q),e(j,Xs),x(p,on,d),x(p,ae,d),e(ae,Ko),e(Ko,Oe),e(Oe,Gn),e(ae,Mn),e(ae,xe),e(xe,De),e(De,Nn),e(xe,Un),e(xe,Le),e(Le,Zn),e(xe,Fn),e(ae,Kn),e(ae,Pe),e(Pe,Yn),e(Pe,He),e(He,Xn),e(Pe,qn),x(p,an,d),x(p,C,d),e(C,Yo),e(Yo,We),e(We,$n),e(C,zn),e(C,Xo),e(Xo,Qn),e(C,el),e(C,he),e(he,ke),e(ke,Ve),e(Ve,sl),e(ke,tl),e(ke,je),e(je,ol),e(ke,al),e(ke,qo),e(qo,nl),e(he,ll),e(he,qs),e(qs,rl),e(qs,Je),e(Je,il),e(he,cl),e(he,Re),e(Re,Be),e(Be,pl),e(Re,hl),e(Re,Ge),e(Ge,kl),e(C,vl),e(C,Me),e(Me,dl),e(Me,Ne),e(Ne,yl),e(Me,ul),e(C,fl),e(C,Ue),e(Ue,bl),e(Ue,Ze),e(Ze,xl),e(Ue,wl),e(C,ml),e(C,$o),e($o,gl),x(p,nn,d),x(p,f,d),e(f,zo),e(zo,Fe),e(Fe,El),e(f,_l),e(f,Qo),e(Qo,Sl),e(f,Il),e(f,$s),$s.innerHTML=ju,e(f,Al),e(f,ea),e(ea,T),e(T,Tl),e(T,Ke),e(Ke,Cl),e(T,Ol),e(T,zs),e(zs,Dl),e(T,Ll),e(T,Qs),e(Qs,Pl),e(T,Hl),e(T,et),e(et,Wl),e(T,Vl),e(T,st),e(st,jl),e(T,Jl),e(T,tt),e(tt,Rl),e(T,Bl),e(f,Gl),e(f,sa),e(sa,Ml),e(f,Nl),e(f,ot),ot.innerHTML=Ju,e(f,Ul),e(f,Ye),e(Ye,Zl),e(Ye,at),e(at,Fl),e(Ye,Kl),e(f,Yl),e(f,nt),nt.innerHTML=Ru,e(f,Xl),e(f,ee),e(ee,ql),e(ee,Xe),e(Xe,$l),e(ee,zl),e(ee,lt),e(lt,Ql),e(ee,er),e(ee,rt),e(rt,sr),e(ee,tr),e(f,or),e(f,ta),e(ta,ve),e(ve,ar),e(ve,it),e(it,nr),e(ve,lr),e(ve,qe),e(qe,rr),e(ve,ir),e(f,cr),e(f,$e),e($e,pr),e($e,oa),e(oa,hr),e($e,kr),e(f,vr),e(f,aa),e(aa,dr),x(p,ln,d),x(p,A,d),e(A,na),e(na,ze),e(ze,yr),e(A,ur),e(A,la),e(la,fr),e(A,br),e(A,Qe),e(Qe,ra),e(ra,xr),e(Qe,wr),e(Qe,ia),e(ia,mr),e(A,gr),e(A,ct),ct.innerHTML=Bu,e(A,Er),e(A,ca),e(ca,_r),e(A,Sr),e(A,pt),pt.innerHTML=Gu,e(A,Ir),e(A,we),e(we,Ar),e(we,ht),e(ht,Tr),e(we,Cr),e(we,pa),e(pa,Or),x(p,rn,d),x(p,O,d),e(O,ha),e(ha,es),e(es,Dr),e(O,Lr),e(O,ss),e(ss,Pr),e(ss,ts),e(ts,Hr),e(ss,Wr),e(O,Vr),e(O,ka),e(ka,os),e(os,va),e(os,da),e(os,me),e(O,jr),e(O,ya),e(ya,Jr),e(O,Rr),e(O,ua),e(ua,Br),e(O,Gr),e(O,as),e(as,kt),e(kt,fa),e(fa,Mr),e(kt,Nr),e(as,Ur),e(as,vt),e(vt,ba),e(ba,Zr),e(vt,Fr),x(p,cn,d),x(p,J,d),e(J,xa),e(xa,ns),e(ns,Kr),e(J,Yr),e(J,ls),e(ls,Xr),e(ls,rs),e(rs,qr),e(ls,$r),e(J,zr),e(J,wa),e(wa,is),e(is,ma),e(is,ga),e(is,ge),e(J,Qr),e(J,Ea),e(Ea,ei),e(J,si),e(J,se),e(se,ti),e(se,dt),e(dt,oi),e(se,ai),e(se,yt),e(yt,ni),e(se,li),e(se,ut),e(ut,ri),e(se,ii),x(p,pn,d),x(p,k,d),e(k,_a),e(_a,cs),e(cs,ci),e(k,pi),e(k,Sa),e(Sa,hi),e(k,ki),e(k,ft),ft.innerHTML=Mu,e(k,vi),e(k,ps),e(ps,di),e(ps,hs),e(hs,yi),e(ps,ui),e(k,fi),e(k,ks),e(ks,bi),e(ks,vs),e(vs,xi),e(ks,wi),e(k,mi),e(k,ds),e(ds,gi),e(ds,bt),e(bt,Ei),e(ds,_i),e(k,Si),e(k,xt),xt.innerHTML=Nu,e(k,Ii),e(k,Ia),e(Ia,Ai),e(k,Ti),e(k,wt),wt.innerHTML=Uu,e(k,Ci),e(k,Oi),e(k,Di),e(k,H),e(H,Li),e(H,mt),e(mt,Pi),e(H,Hi),e(H,gt),e(gt,Wi),e(H,Vi),e(H,Et),e(Et,ji),e(H,Ji),e(H,_t),e(_t,Ri),e(H,Bi),e(H,St),e(St,Gi),e(H,Mi),e(k,Ni),e(k,E),e(E,Ui),e(E,It),e(It,Zi),e(E,Fi),e(E,At),e(At,Ki),e(E,Yi),e(E,Tt),e(Tt,Xi),e(E,qi),e(E,Ct),e(Ct,$i),e(E,zi),e(E,Ot),e(Ot,Qi),e(E,ec),e(E,Dt),e(Dt,sc),e(E,tc),e(E,Lt),e(Lt,oc),e(E,ac),e(E,Pt),e(Pt,nc),e(E,lc),e(E,Ht),e(Ht,rc),e(E,ic),e(k,cc),e(k,Aa),e(Aa,ne),e(ne,pc),e(ne,Wt),e(Wt,hc),e(ne,kc),e(ne,ys),e(ys,vc),e(ne,dc),e(ne,us),e(us,yc),e(k,uc),e(k,fc),e(k,bc),e(k,Ta),e(Ta,xc),x(p,hn,d),x(p,h,d),e(h,Ca),e(Ca,fs),e(fs,wc),e(h,mc),e(h,M),e(M,gc),e(M,bs),e(bs,Ec),e(M,_c),e(M,Vt),e(Vt,Sc),e(M,Ic),e(M,jt),e(jt,Ac),e(M,Tc),e(M,Jt),e(Jt,Cc),e(M,Oc),e(h,Dc),e(h,Rt),Rt.innerHTML=Zu,e(h,Lc),e(h,Oa),e(Oa,Pc),e(h,Hc),e(h,Bt),Bt.innerHTML=Fu,e(h,Wc),e(h,xs),e(xs,Vc),e(xs,Gt),e(Gt,jc),e(xs,Jc),e(h,Rc),e(h,Da),e(Da,Bc),e(h,Gc),e(h,La),e(La,ws),e(ws,Pa),e(ws,Ha),e(ws,ms),e(h,Mc),e(h,D),e(D,Mt),e(Mt,Nc),e(D,Uc),e(D,Nt),e(Nt,Zc),e(D,Fc),e(D,Ut),e(Ut,Kc),e(D,Yc),e(D,Zt),e(Zt,Xc),e(D,qc),e(D,Ft),e(Ft,$c),e(D,zc),e(D,Kt),e(Kt,Qc),e(D,ep),e(h,sp),e(h,de),e(de,tp),e(de,Yt),e(Yt,op),e(de,ap),e(de,Xt),e(Xt,np),e(de,lp),e(h,rp),e(h,qt),qt.innerHTML=Ku,e(h,ip),e(h,Wa),e(Wa,cp),e(h,pp),e(h,$t),$t.innerHTML=Yu,e(h,hp),e(h,N),e(N,kp),e(N,zt),e(zt,vp),e(N,dp),e(N,Qt),e(Qt,yp),e(N,up),e(N,eo),e(eo,fp),e(N,bp),e(N,so),e(so,xp),e(N,wp),e(h,mp),e(h,ye),e(ye,gp),e(ye,to),e(to,Ep),e(ye,_p),e(ye,oo),e(oo,Sp),e(ye,Ip),e(h,Ap),e(h,ao),ao.innerHTML=Xu,e(h,Tp),e(h,Va),e(Va,S),e(S,Cp),e(S,no),e(no,Op),e(S,Dp),e(S,lo),e(lo,Lp),e(S,Pp),e(S,gs),e(gs,Hp),e(S,Wp),e(S,ro),e(ro,Vp),e(S,jp),e(S,io),e(io,Jp),e(S,Rp),e(S,co),e(co,Bp),e(S,Gp),e(S,Es),e(Es,Mp),e(S,Np),x(p,kn,d),x(p,y,d),e(y,ja),e(ja,_s),e(_s,Up),e(y,Zp),e(y,ue),e(ue,Fp),e(ue,po),e(po,Kp),e(ue,Yp),e(ue,ho),e(ho,Xp),e(ue,qp),e(y,$p),e(y,U),e(U,zp),e(U,Ss),e(Ss,ko),e(ko,Qp),e(U,eh),e(U,vo),e(vo,sh),e(U,th),e(U,yo),e(yo,oh),e(U,ah),e(U,uo),e(uo,nh),e(U,lh),e(y,rh),e(y,fo),fo.innerHTML=qu,e(y,ih),e(y,W),e(W,ch),e(W,bo),e(bo,ph),e(W,hh),e(W,xo),e(xo,kh),e(W,vh),e(W,wo),e(wo,dh),e(W,yh),e(W,mo),e(mo,uh),e(W,fh),e(W,go),e(go,bh),e(W,xh),e(y,wh),e(y,Ja),e(Ja,mh),e(y,gh),e(y,Eo),Eo.innerHTML=$u,e(y,Eh),e(y,Ra),e(Ra,_h),e(y,Sh),e(y,I),e(I,Ih),e(I,_o),e(_o,Ah),e(I,Th),e(I,So),e(So,Ch),e(I,Oh),e(I,Io),e(Io,Dh),e(I,Lh),e(I,Ao),e(Ao,Ph),e(I,Hh),e(I,To),e(To,Wh),e(I,Vh),e(I,Co),e(Co,jh),e(I,Jh),e(I,Oo),e(Oo,Rh),e(I,Bh),e(y,Gh),e(y,fe),e(fe,Mh),e(fe,Do),e(Do,Nh),e(fe,Uh),e(fe,Lo),e(Lo,Zh),e(fe,Fh),e(y,Kh),e(y,Is),e(Is,Yh),e(Is,Po),e(Po,Xh),e(Is,qh),e(y,$h),e(y,Ho),Ho.innerHTML=zu,e(y,zh),e(y,Ba),e(Ba,Qh),x(p,vn,d),x(p,R,d),e(R,Ga),e(Ga,As),e(As,ek),e(R,sk),e(R,Ma),e(Ma,tk),e(R,ok),e(R,Wo),Wo.innerHTML=Qu,e(R,ak),e(R,Na),e(Na,nk),e(R,lk),e(R,te),e(te,Ua),e(Ua,rk),e(te,ik),e(te,Za),e(Za,ck),e(te,pk),e(te,Fa),e(Fa,hk),e(te,kk),e(te,Ka),e(Ka,vk),x(p,dn,d),x(p,F,d),e(F,Ya),e(Ya,Ts),e(Ts,dk),e(F,yk),e(F,Cs),e(Cs,uk),e(Cs,Os),e(Os,fk),e(Cs,bk),e(F,xk),e(F,V),e(V,wk),e(V,Ds),e(Ds,mk),e(V,gk),e(V,Vo),e(Vo,Ek),e(V,_k),e(V,jo),e(jo,Sk),e(V,Ik),e(V,Ls),e(Ls,Ak),e(V,Tk),e(V,Ps),e(Ps,Ck),e(V,Ok),e(F,Dk),e(F,oe),e(oe,Xa),e(Xa,qa),e(qa,Lk),e(oe,Pk),e(oe,Hs),e(Hs,Hk),e(Hs,Ws),e(Ws,Wk),e(Hs,Vk),e(oe,jk),e(oe,$a),e($a,Jk),e(oe,Rk),e(oe,za),e(za,Qa),e(Qa,Vs),e(Vs,Bk),x(p,yn,d),x(p,Ee,d),e(Ee,en),e(en,js),e(js,Gk),e(Ee,Mk),e(Ee,be),e(be,Js),e(Js,Rs),e(Rs,Nk),e(Js,Uk),e(Js,Bs),e(Bs,Zk),e(be,Fk),e(be,Gs),e(Gs,Ms),e(Ms,Kk),e(Gs,Yk),e(Gs,Ns),e(Ns,Xk),e(be,qk),e(be,Us),e(Us,Zs),e(Zs,$k),e(Us,zk),e(Us,Fs),e(Fs,Qk),un=!0},p:Ef,i(p){un||(Hu(w.$$.fragment,p),un=!0)},o(p){Wu(w.$$.fragment,p),un=!1},d(p){Vu(w,p),p&&o(z),p&&o(j),p&&o(on),p&&o(ae),p&&o(an),p&&o(C),p&&o(nn),p&&o(f),p&&o(ln),p&&o(A),p&&o(rn),p&&o(O),p&&o(cn),p&&o(J),p&&o(pn),p&&o(k),p&&o(hn),p&&o(h),p&&o(kn),p&&o(y),p&&o(vn),p&&o(R),p&&o(dn),p&&o(F),p&&o(yn),p&&o(Ee)}}}function Df(Ys){let w,z;const j=[Ys[0],Ou];let Ce={$$slots:{default:[Of]},$$scope:{ctx:Ys}};for(let m=0;m<j.length;m+=1)Ce=av(Ce,j[m]);return w=new _f({props:Ce}),{c(){Du(w.$$.fragment)},l(m){Lu(w.$$.fragment,m)},m(m,Q){Pu(w,m,Q),z=!0},p(m,[Q]){const Xs=Q&1?mf(j,[Q&1&&Su(m[0]),Q&0&&Su(Ou)]):{};Q&2&&(Xs.$$scope={dirty:Q,ctx:m}),w.$set(Xs)},i(m){z||(Hu(w.$$.fragment,m),z=!0)},o(m){Wu(w.$$.fragment,m),z=!1},d(m){Vu(w,m)}}}const Ou={title:"Step-by-step guide for writing a custom babel transformation",date:"2019-09-12T08:00:00Z",tags:["JavaScript","babel","AST","transform"],description:"Writing your first babel plugin",series:"Intermediate Babel",label:"blog"};function Lf(Ys,w,z){return gf("blog",{image:Cf}),Ys.$$set=j=>{z(0,w=av(av({},w),Iu(j)))},w=Iu(w),[w]}class Rf extends bf{constructor(w){super();xf(this,w,Lf,Df,wf,{})}}export{Rf as default,Ou as metadata};
