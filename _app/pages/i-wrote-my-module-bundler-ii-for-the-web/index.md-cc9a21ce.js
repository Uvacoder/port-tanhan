import{S as Jc,i as Nc,s as Rc,C as $r,w as zp,x as Qp,y as Kp,z as Uc,A as $p,q as Zp,o as Xp,B as sc,r as $c,R as Bp,k as p,e as o,t as n,m as c,c as t,a,h as l,d as e,b as i,Q as Ur,g as d,F as s,O as Bc}from"../../chunks/vendor-6bf294e3.js";import{B as Vc}from"../../chunks/BlogLayout-152f599b.js";import{T as Wc}from"../../chunks/TableOfContent-1b9e4572.js";import"../../chunks/stores-e20b7872.js";import"../../chunks/WebMentions-745413ea.js";/* empty css                                */var Gc="/_app/assets/result-00c597af.webp",Vp="/_app/assets/result-fac4a0dc.png",Yc="/_app/assets/dev-server-b16a52fc.webp",Wp="/_app/assets/dev-server-b2c26bcc.png",zc="/_app/assets/cli-0b97d073.webp",Gp="/_app/assets/cli-ca6034f6.png",Qc="/_app/assets/hero-twitter-b3917370.jpg";function Kc(Os){let x,C,T,K,w,M,Hs,Ko,qs,Z,$e,Be,X,Br,Zo,Fs,Dt,Xo,js,At,st,H,Ve,Js,Ot,Ht,We,Ns,qt,Ft,Ge,Rs,jt,et,ot,tt,V,Jt,Ye,Nt,Rt,at,nt,lt,_,ze,ss,Ut,$t,Qe,Bt,Vt,Ke,Wt,Gt,Us,ec=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">toModuleMap</span><span style="color: var(--shiki-color-text)">(modules) &#123;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> modules) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-token-function)">.transformModuleInterface</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  moduleMap </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;&quot;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.filePath</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&quot;: function(exports, require) &#123; </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.content</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#92;n &#125;,&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Yt,Ze,zt,Qt,Xe,Kt,Zt,$s,oc=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">resolveRequest</span><span style="color: var(--shiki-color-text)">(requester</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> requestPath) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (requestPath[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;.&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// relative import</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.dirname</span><span style="color: var(--shiki-color-text)">(requester)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> requestPath);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">requesterParts</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">requester</span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">requestPaths</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [];</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">requesterParts</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i</span><span style="color: var(--shiki-token-keyword)">--</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">requestPaths</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">requesterParts</span><span style="color: var(--shiki-token-function)">.slice</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> i)</span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;/node_modules&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// absolute import</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">require</span><span style="color: var(--shiki-token-function)">.resolve</span><span style="color: var(--shiki-color-text)">(requestPath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; paths</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> requestPaths &#125;);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Xt,es,sa,Bs,ea,oa,ta,Vs,so,aa,na,rt,y,eo,os,la,ra,oo,ia,pa,ts,ca,Ws,ha,ka,va,to,ya,da,Gs,tc=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">&lt;!-- filename: index.html --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">html</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">body</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">body</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">html</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,ua,ao,fa,xa,Ys,ac='<pre class="prism language-yml"><code><div class="line"><span class="token punctuation">-</span> bundle.js</div></code></pre>',ma,as,ga,zs,wa,_a,ba,Qs,nc=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">&lt;!-- filename: index.html --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">html</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">body</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">src</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;/bundle.js&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">&lt;/</span><span style="color: var(--shiki-color-text)">body</span><span style="color: var(--shiki-token-keyword)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">&lt;/</span><span style="color: var(--shiki-color-text)">html</span><span style="color: var(--shiki-token-keyword)">&gt;</span></span></code></pre>`,Ea,no,lo,Sa,Ia,ro,Ta,Pa,Ks,lc=`<div class="filename">index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">build</span><span style="color: var(--shiki-color-text)">(&#123; entryFile</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> outputFolder</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> htmlTemplatePath &#125;) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">outputFiles</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">bundle</span><span style="color: var(--shiki-color-text)">(graph);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">outputFiles</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">generateHTMLTemplate</span><span style="color: var(--shiki-color-text)">(htmlTemplatePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> outputFiles));</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">END_BODY_TAG</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&lt;/body&gt;&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">generateHTMLTemplate</span><span style="color: var(--shiki-color-text)">(htmlTemplatePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> outputFiles) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> htmlTemplate </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.readFileSync</span><span style="color: var(--shiki-color-text)">(htmlTemplatePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;utf-8&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  htmlTemplate </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">htmlTemplate</span><span style="color: var(--shiki-token-function)">.replace</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">END_BODY_TAG</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">outputFiles</span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">((&#123; name &#125;) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;&lt;script src=&quot;/</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">name</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&quot;&gt;&lt;/script&gt;&#96;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">+</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">END_BODY_TAG</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  );</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123; name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;index.html&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> content</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> htmlTemplate &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ca,L,Ma,Zs,La,Da,Xs,Aa,Oa,se,Ha,qa,Fa,io,ee,ja,po,Ja,it,u,co,ns,Na,Ra,ho,Ua,$a,ls,Ba,oe,Va,Wa,Ga,te,rc='<div class="filename">index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./style.css&#39;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>',Ya,ae,ic=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">/* filename: style.css */</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">.square</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">blue</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">.circle</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">red</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,za,rs,Qa,ne,Ka,Za,Xa,le,pc=`<pre class="prism language-"><code><span class="line">SyntaxError: unknown: Unexpected token (1:0)</span>
<span class="line">&gt; 1 | .square &#123;</span>
<span class="line">    | ^</span>
<span class="line">  2 |   color: blue;</span>
<span class="line">  3 | &#125;</span>
<span class="line">  4 | .circle &#123;</span>
<span class="line">    at Parser.raise (node_modules/@babel/parser/lib/index.js:6344:17)</span></code></pre>`,sn,ko,en,on,D,tn,re,an,nn,ie,ln,rn,pe,pn,cn,hn,ce,cc=`<div class="filename">index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(filePath) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.filePath </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> filePath;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.content </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.readFileSync</span><span style="color: var(--shiki-color-text)">(filePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;utf-8&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">initDependencies</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.dependencies </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">transformModuleInterface</span><span style="color: var(--shiki-color-text)">() &#123;&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">JSModule</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> &#123;&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CSSModule</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> &#123;&#125;</span></span></code></pre>`,kn,F,vn,he,yn,dn,ke,un,fn,xn,ve,hc=`<div class="filename">index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line highlight"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">MODULE_LOADERS</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;.css&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> CSSModule</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> JSModule</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createModule</span><span style="color: var(--shiki-color-text)">(filePath) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fileExtension</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.extname</span><span style="color: var(--shiki-color-text)">(filePath);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ModuleCls</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">MODULE_LOADERS</span><span style="color: var(--shiki-color-text)">[fileExtension];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">ModuleCls) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Unsupported extension &quot;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">fileExtension</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&quot;.&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ModuleCls</span><span style="color: var(--shiki-color-text)">(filePath);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// hightlight-end</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">MODULE_CACHE</span><span style="color: var(--shiki-token-function)">.set</span><span style="color: var(--shiki-color-text)">(filePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,pt,h,vo,is,mn,gn,j,wn,ye,_n,bn,ps,En,Sn,In,de,Tn,cs,Pn,hs,Cn,Mn,Ln,J,Dn,yo,An,On,uo,Hn,qn,Fn,fo,jn,Jn,xo,mo,Nn,Rn,N,Un,ue,$n,Bn,fe,Vn,Wn,Gn,go,Yn,zn,xe,kc=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">.square</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">blue</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">.circle</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">red</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Qn,wo,Kn,Zn,me,vc=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">content</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;.square &#123; color: blue; &#125; .circle &#123; color: red; &#125;&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// create style tag</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;style&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;text/css&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// for ie compatibility</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)">.styleSheet) </span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">styleSheet</span><span style="color: var(--shiki-color-text)">.cssText </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> content;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-token-function)">.appendChild</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createTextNode</span><span style="color: var(--shiki-color-text)">(content));</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// append to the head</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">head</span><span style="color: var(--shiki-token-function)">.appendChild</span><span style="color: var(--shiki-color-text)">(style);</span></span></code></pre>`,Xn,R,sl,ks,el,ol,ge,tl,al,nl,U,_o,ll,rl,A,il,we,pl,cl,_e,hl,kl,be,vl,yl,dl,bo,ul,fl,Eo,So,xl,ml,vs,gl,ys,wl,_l,bl,El,Sl,ds,Il,us,Tl,Pl,Cl,Ee,yc=`<div class="filename">index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(filePath) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.transform</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CSSModule</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">transform</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.content </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">trim</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-string-expression)">      const content = &#39;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">content</span><span style="color: var(--shiki-token-function)">.replace</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">/&#92;n/</span><span style="color: var(--shiki-token-keyword)">g</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#39;;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-string-expression)">      const style = document.createElement(&#39;style&#39;);</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-string-expression)">      style.type = &#39;text/css&#39;;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-string-expression)">      if (style.styleSheet) style.styleSheet.cssText = content;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-string-expression)">      else style.appendChild(document.createTextNode(content));</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-string-expression)">      document.head.appendChild(style);</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-string-expression)">    &#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ct,b,Io,fs,Ml,Ll,To,Dl,Al,$,Po,Ol,Hl,Co,ql,Fl,Mo,jl,Jl,xs,Nl,ms,Rl,Ul,$l,O,Bl,Se,Vl,Wl,Ie,Gl,Yl,Te,zl,Ql,Kl,Pe,dc=`<div class="filename">index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line highlight"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_build</span><span style="color: var(--shiki-color-text)">(&#123; entryFile</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> htmlTemplatePath &#125;) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// build dependency graph</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">graph</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createDependencyGraph</span><span style="color: var(--shiki-color-text)">(entryFile);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// bundle the asset</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">outputFiles</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">bundle</span><span style="color: var(--shiki-color-text)">(graph);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">outputFiles</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">generateHTMLTemplate</span><span style="color: var(--shiki-color-text)">(htmlTemplatePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> outputFiles));</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123; outputFiles</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> graph &#125;;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">build</span><span style="color: var(--shiki-color-text)">(&#123; entryFile</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> outputFolder</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> htmlTemplatePath &#125;) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">outputFiles</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_build</span><span style="color: var(--shiki-color-text)">(&#123; entryFile</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> htmlTemplatePath &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// write to output folder</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">dev</span><span style="color: var(--shiki-color-text)">(&#123; entryFile</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> outputFolder</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> htmlTemplatePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> devServerOptions &#125;) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">outputFiles</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_build</span><span style="color: var(--shiki-color-text)">(&#123; entryFile</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> htmlTemplatePath &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Zl,B,Xl,Ce,sr,er,gs,or,tr,ar,Me,uc=`<div class="filename">index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">dev</span><span style="color: var(--shiki-color-text)">(&#123; entryFile</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> outputFolder</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> htmlTemplatePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> devServerOptions &#125;) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">outputFiles</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_build</span><span style="color: var(--shiki-color-text)">(&#123; entryFile</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> htmlTemplatePath &#125;);</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// create a map of [filename] -&gt; content</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">outputFileMap</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;&#125;;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">outputFile</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> outputFiles) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    outputFileMap[</span><span style="color: var(--shiki-token-constant)">outputFile</span><span style="color: var(--shiki-color-text)">.name] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">outputFile</span><span style="color: var(--shiki-color-text)">.content;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">indexHtml</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> outputFileMap[</span><span style="color: var(--shiki-token-string-expression)">&#39;index.html&#39;</span><span style="color: var(--shiki-color-text)">];</span></span>
<span class="line highlight"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">express</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.use</span><span style="color: var(--shiki-color-text)">((req</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> res) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// trim off preceding slash &#39;/&#39;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">requestFile</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">req</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.slice</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (outputFileMap[requestFile]) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">res</span><span style="color: var(--shiki-token-function)">.send</span><span style="color: var(--shiki-color-text)">(outputFileMap[requestFile]);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">res</span><span style="color: var(--shiki-token-function)">.send</span><span style="color: var(--shiki-color-text)">(indexHtml);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.listen</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">devServerOptions</span><span style="color: var(--shiki-color-text)">.port</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#96;Dev server starts at http://localhost:</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">devServerOptions</span><span style="color: var(--shiki-color-text)">.port</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    )</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  );</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,nr,Lo,lr,ht,m,Do,ws,rr,ir,_s,pr,bs,cr,hr,kr,Le,fc=`<div class="filename">main.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> squareArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./square.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> circleArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./circle.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; createElement</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> render &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;preact&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./style.css&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">render</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">createElement</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">&#39;p&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#123;&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;p&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; class</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;square&#39;</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;area of square: &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">squareArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;p&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; class</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;circle&#39;</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;area of circle: &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circleArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">))</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  )</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.getElementById</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;root&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,vr,De,xc=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">/* filename: style.css */</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">.square</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">blue</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">.circle</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">red</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,yr,Ao,dr,ur,Ae,mc=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">&lt;!-- filename: index.html --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">html</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">body</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;root&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;/</span><span style="color: var(--shiki-token-string-expression)">body</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">html</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,fr,Oo,xr,mr,Ho,Es,qo,Fo,Ss,Vr,gr,jo,wr,_r,Jo,Is,No,Ro,Ts,Wr,kt,P,Uo,Ps,br,Er,$o,Sr,Ir,Cs,Bo,Tr,Pr,Vo,Cr,Mr,Wo,Lr,Dr,Go,Ar,vt,W,Yo,Ms,Or,Hr,Ls,zo,Ds,qr,Fr,Qo,As,jr,yt;return x=new Wc({props:{data:[{link:"before-we-begin",title:"Before we begin"},{link:"adding-html-template",title:"Adding HTML Template"},{link:"adding-css",title:"Adding CSS",nested:[{link:"loaders",title:"Loaders"}]},{link:"dev-server",title:"Dev Server"},{link:"wrap-it-up",title:"Wrap it up"},{link:"whats-next",title:"Whats next?"},{link:"references",title:"References"}]}}),{c(){zp(x.$$.fragment),C=p(),T=o("p"),K=n("In my "),w=o("a"),M=n("previous article"),Hs=n(", I showed you how I built a module bundler. With the module bundler I built, I bundled a simple Nodejs script to calculate the area for a square and a circle:"),Ko=p(),qs=o("p"),Z=o("picture"),$e=o("source"),Be=o("source"),X=o("img"),Zo=p(),Fs=o("p"),Dt=n("Today, I am going to share with y'all how I enhanced on my basic module bundler so that I can use it to bundle not just a NodeJS script, but a web application."),Xo=p(),js=o("p"),At=n("I will be showing how I added the following features:"),st=p(),H=o("ul"),Ve=o("li"),Js=o("a"),Ot=n("Adding HTML Template"),Ht=p(),We=o("li"),Ns=o("a"),qt=n("Adding CSS"),Ft=p(),Ge=o("li"),Rs=o("a"),jt=n("Provide a dev server"),et=p(),ot=o("hr"),tt=p(),V=o("p"),Jt=n("\u26A0\uFE0F "),Ye=o("strong"),Nt=n("Warning: Tons of JavaScript code ahead. \u{1F648}\u{1F631}\u{1F628}"),Rt=n(" \u26A0\uFE0F"),at=p(),nt=o("hr"),lt=p(),_=o("section"),ze=o("h2"),ss=o("a"),Ut=n("Before we begin"),$t=p(),Qe=o("p"),Bt=n("I found an edge case bug in my module bundler if the module ends with a line comment, the output bundle might have a syntax error."),Vt=p(),Ke=o("p"),Wt=n("I've fixed the bug by appending a newline character to the end of the module code:"),Gt=p(),Us=o("div"),Yt=p(),Ze=o("p"),zt=n("\u{1F60E}"),Qt=p(),Xe=o("p"),Kt=n("Also, I've changed the resolver code, which used to only be able to resolve the relative path:"),Zt=p(),$s=o("div"),Xt=p(),es=o("p"),sa=n("Now I can import libraries from "),Bs=o("code"),ea=n("node_modules/"),oa=n("."),ta=p(),Vs=o("p"),so=o("em"),aa=n('Did I just said "import libraries"?'),na=n(" \u{1F64A}"),rt=p(),y=o("section"),eo=o("h2"),os=o("a"),la=n("Adding HTML Template"),ra=p(),oo=o("p"),ia=n("To bundle for the web, the most important piece is to have the HTML."),pa=p(),ts=o("p"),ca=n("Usually, we provide an HTML template to the module bundler. And when the module bundler finishes the bundling process, it will come up with a list of files that is required to start the application and add them into the HTML file in the form of a "),Ws=o("code"),ha=n("<script>"),ka=n(" tag."),va=p(),to=o("p"),ya=n("To illustrate here is the HTML template that I've prepared:"),da=p(),Gs=o("div"),ua=p(),ao=o("p"),fa=n("And at the end of the bundling process, the bundler generated the following files:"),xa=p(),Ys=o("div"),ma=p(),as=o("p"),ga=n("So the "),zs=o("code"),wa=n("bundle.js"),_a=n(" is added into the final HTML file like this:"),ba=p(),Qs=o("div"),Ea=p(),no=o("blockquote"),lo=o("small"),Sa=n("**NOTE:** the preceding slash (`/`) allows us to always fetch the JavaScript file relative from the root path. This is extremely useful for Single Page Application (SPA), where we serve the same HTML file irrelevant to the URL path."),Ia=p(),ro=o("p"),Ta=n("Code wise, it is quite straightforward to implement this:"),Pa=p(),Ks=o("div"),Ca=p(),L=o("p"),Ma=n("Here, I used a "),Zs=o("code"),La=n(".replace(END_BODY_TAG, '...' + END_BODY_TAG)"),Da=n(" to insert the "),Xs=o("code"),Aa=n("<script>"),Oa=n(" tags before the end of the "),se=o("code"),Ha=n("</body>"),qa=n(" tag."),Fa=p(),io=o("blockquote"),ee=o("small"),ja=n("**Note:** Read [here](https://www.codecademy.com/forum_questions/55dee24b937676fb5e000139) to learn why it's a best practice to add `<script>` tag at the end of the `"),po=o("body"),Ja=n("` tag."),it=p(),u=o("section"),co=o("h2"),ns=o("a"),Na=n("Adding CSS"),Ra=p(),ho=o("p"),Ua=n("Every web app has to have CSS in one way or another."),$a=p(),ls=o("p"),Ba=n("I added a css file and imported it from "),oe=o("code"),Va=n("index.js"),Wa=n(":"),Ga=p(),te=o("div"),Ya=p(),ae=o("div"),za=p(),rs=o("p"),Qa=n("If I bundle my application now, I would see a "),ne=o("code"),Ka=n("SyntaxError"),Za=n(":"),Xa=p(),le=o("div"),sn=p(),ko=o("p"),en=n("That is because I assumed all files are JavaScript files, and Babel would complain when trying to parse out the import statements."),on=p(),D=o("p"),tn=n("So, I abstracted out "),re=o("code"),an=n("Module"),nn=n(" as a base class, and created "),ie=o("code"),ln=n("JSModule"),rn=n(" and "),pe=o("code"),pn=n("CSSModule"),cn=n(":"),hn=p(),ce=o("div"),kn=p(),F=o("p"),vn=n("In the "),he=o("code"),yn=n("createModule"),dn=n(" function, I need to create different "),ke=o("code"),un=n("Module"),fn=n(" based on the file extension:"),xn=p(),ve=o("div"),pt=p(),h=o("section"),vo=o("h3"),is=o("a"),mn=n("Loaders"),gn=p(),j=o("p"),wn=n("Here I used the word "),ye=o("code"),_n=n('"LOADERS"'),bn=n(", which I borrowed from "),ps=o("a"),En=n("webpack"),Sn=n("."),In=p(),de=o("p"),Tn=n("According to webpack, "),cs=o("em"),Pn=n('"'),hs=o("a"),Cn=n("[loaders]"),Mn=n(' enable webpack to preprocess files, [which] allows you to bundle any static resource way beyond JavaScript."'),Ln=p(),J=o("p"),Dn=n("To take it from a different perspective, "),yo=o("strong"),An=n("loaders"),On=n(" are simple functions that transform any code into "),uo=o("strong"),Hn=n("browser-executable JavaScript code"),qn=n("."),Fn=p(),fo=o("p"),jn=n("For example, if you import a CSS file, the CSS code in the file will pass through the loader function to be transformed into JS code. So that you can import a CSS file as if you are importing a JS file."),Jn=p(),xo=o("p"),mo=o("strong"),Nn=n("Wait, how are we going to transform CSS code into JS code?"),Rn=p(),N=o("p"),Un=n("Well, one way you can do that is to make the CSS code into a string by wrapping it around with quote marks "),ue=o("code"),$n=n("'"),Bn=n(", and programmatically add the CSS code into the HTML "),fe=o("code"),Vn=n("<head />"),Wn=n("."),Gn=p(),go=o("p"),Yn=n("For example, taking the following CSS code:"),zn=p(),xe=o("div"),Qn=p(),wo=o("p"),Kn=n("and transform it into the following JS code:"),Zn=p(),me=o("div"),Xn=p(),R=o("p"),sl=n("This is in essence what "),ks=o("a"),el=n("style-loader"),ol=n(" is doing, except "),ge=o("code"),tl=n("style-loader"),al=n(" does even more:"),nl=p(),U=o("ul"),_o=o("li"),ll=n("supports hot reloading"),rl=p(),A=o("li"),il=n("provides different mode of injecting, "),we=o("code"),pl=n("styleTag"),cl=n(", "),_e=o("code"),hl=n("singletonStyleTag"),kl=n(", "),be=o("code"),vl=n("linkTag"),yl=n(", ... etc."),dl=p(),bo=o("li"),ul=n("provides different points in dom for injecting the style tag."),fl=p(),Eo=o("p"),So=o("strong"),xl=n('Did I mentioned "browser-executable JavaScript code"?'),ml=p(),vs=o("p"),gl=n("Yes, not all JavaScript code is executable in a browser if you are using next-generation syntaxes or constructs that is not yet available in the browser. That's why you need "),ys=o("a"),wl=n("babel-loader"),_l=n(" for your JavaScript files, to make sure they can be run in all supported browsers."),bl=p(),El=o("hr"),Sl=p(),ds=o("p"),Il=n("So, I implemented the loader transform in CSSModule with "),us=o("a"),Tl=n("template literals"),Pl=n(":"),Cl=p(),Ee=o("div"),ct=p(),b=o("section"),Io=o("h2"),fs=o("a"),Ml=n("Dev Server"),Ll=p(),To=o("p"),Dl=n("Dev server is a default feature for frontend build tools nowadays, it's common feature are:"),Al=p(),$=o("ul"),Po=o("li"),Ol=n("Serving generated assets, assets can be either served from the filesystem or in memory"),Hl=p(),Co=o("li"),ql=n("Supports watch mode, reloading and hot module replacement"),Fl=p(),Mo=o("li"),jl=n("Act as a proxy to external APIs"),Jl=p(),xs=o("p"),Nl=n("In this post, I will show you how I created a basic dev server using "),ms=o("a"),Rl=n("Express"),Ul=n(" for serving the generated assets in memory, we will discuss the watch mode in the future post."),$l=p(),O=o("p"),Bl=n("I abstracted out the "),Se=o("code"),Vl=n("_build"),Wl=n(" function and supports both "),Ie=o("code"),Gl=n("build"),Yl=n(" and "),Te=o("code"),zl=n("dev"),Ql=n(" mode."),Kl=p(),Pe=o("div"),Zl=p(),B=o("p"),Xl=n("In "),Ce=o("code"),sr=n("dev"),er=n(" mode, I did not write files to the file system, instead I served them directly through the "),gs=o("a"),or=n("Express"),tr=n(" server:"),ar=p(),Me=o("div"),nr=p(),Lo=o("p"),lr=n("And that's it. You have a basic dev server that serves the bundled files!"),ht=p(),m=o("section"),Do=o("h2"),ws=o("a"),rr=n("Wrap it up"),ir=p(),_s=o("p"),pr=n("I've added "),bs=o("a"),cr=n("Preact"),hr=n(" and CSS into my app:"),kr=p(),Le=o("div"),vr=p(),De=o("div"),yr=p(),Ao=o("p"),dr=n("And also an HTML template:"),ur=p(),Ae=o("div"),fr=p(),Oo=o("p"),xr=n("Starting my bundler:"),mr=p(),Ho=o("p"),Es=o("picture"),qo=o("source"),Fo=o("source"),Ss=o("img"),gr=p(),jo=o("p"),wr=n("And voila!"),_r=p(),Jo=o("p"),Is=o("picture"),No=o("source"),Ro=o("source"),Ts=o("img"),kt=p(),P=o("section"),Uo=o("h2"),Ps=o("a"),br=n("Whats next?"),Er=p(),$o=o("p"),Sr=n("I have promised in my previous post, features that I will implement:"),Ir=p(),Cs=o("ul"),Bo=o("li"),Tr=n("code splitting"),Pr=p(),Vo=o("li"),Cr=n("watch mode"),Mr=p(),Wo=o("p"),Lr=n("and yes, I will implement them!"),Dr=p(),Go=o("p"),Ar=n("Till then. Cheers. \u{1F60E}"),vt=p(),W=o("section"),Yo=o("h2"),Ms=o("a"),Or=n("References"),Hr=p(),Ls=o("ul"),zo=o("li"),Ds=o("a"),qr=n("Webpack Dev Server"),Fr=p(),Qo=o("li"),As=o("a"),jr=n("style-loader"),this.h()},l(r){Qp(x.$$.fragment,r),C=c(r),T=t(r,"P",{});var k=a(T);K=l(k,"In my "),w=t(k,"A",{href:!0});var Gr=a(w);M=l(Gr,"previous article"),Gr.forEach(e),Hs=l(k,", I showed you how I built a module bundler. With the module bundler I built, I bundled a simple Nodejs script to calculate the area for a square and a circle:"),k.forEach(e),Ko=c(r),qs=t(r,"P",{});var Yr=a(qs);Z=t(Yr,"PICTURE",{});var dt=a(Z);$e=t(dt,"SOURCE",{type:!0,srcset:!0}),Be=t(dt,"SOURCE",{type:!0,srcset:!0}),X=t(dt,"IMG",{src:!0,loading:!0,alt:!0}),dt.forEach(e),Yr.forEach(e),Zo=c(r),Fs=t(r,"P",{});var zr=a(Fs);Dt=l(zr,"Today, I am going to share with y'all how I enhanced on my basic module bundler so that I can use it to bundle not just a NodeJS script, but a web application."),zr.forEach(e),Xo=c(r),js=t(r,"P",{});var Qr=a(js);At=l(Qr,"I will be showing how I added the following features:"),Qr.forEach(e),st=c(r),H=t(r,"UL",{});var Oe=a(H);Ve=t(Oe,"LI",{});var Kr=a(Ve);Js=t(Kr,"A",{href:!0});var Zr=a(Js);Ot=l(Zr,"Adding HTML Template"),Zr.forEach(e),Kr.forEach(e),Ht=c(Oe),We=t(Oe,"LI",{});var Xr=a(We);Ns=t(Xr,"A",{href:!0});var si=a(Ns);qt=l(si,"Adding CSS"),si.forEach(e),Xr.forEach(e),Ft=c(Oe),Ge=t(Oe,"LI",{});var ei=a(Ge);Rs=t(ei,"A",{href:!0});var oi=a(Rs);jt=l(oi,"Provide a dev server"),oi.forEach(e),ei.forEach(e),Oe.forEach(e),et=c(r),ot=t(r,"HR",{}),tt=c(r),V=t(r,"P",{});var ut=a(V);Jt=l(ut,"\u26A0\uFE0F "),Ye=t(ut,"STRONG",{});var ti=a(Ye);Nt=l(ti,"Warning: Tons of JavaScript code ahead. \u{1F648}\u{1F631}\u{1F628}"),ti.forEach(e),Rt=l(ut," \u26A0\uFE0F"),ut.forEach(e),at=c(r),nt=t(r,"HR",{}),lt=c(r),_=t(r,"SECTION",{});var S=a(_);ze=t(S,"H2",{});var ai=a(ze);ss=t(ai,"A",{href:!0,id:!0});var ni=a(ss);Ut=l(ni,"Before we begin"),ni.forEach(e),ai.forEach(e),$t=c(S),Qe=t(S,"P",{});var li=a(Qe);Bt=l(li,"I found an edge case bug in my module bundler if the module ends with a line comment, the output bundle might have a syntax error."),li.forEach(e),Vt=c(S),Ke=t(S,"P",{});var ri=a(Ke);Wt=l(ri,"I've fixed the bug by appending a newline character to the end of the module code:"),ri.forEach(e),Gt=c(S),Us=t(S,"DIV",{class:!0});var gc=a(Us);gc.forEach(e),Yt=c(S),Ze=t(S,"P",{});var ii=a(Ze);zt=l(ii,"\u{1F60E}"),ii.forEach(e),Qt=c(S),Xe=t(S,"P",{});var pi=a(Xe);Kt=l(pi,"Also, I've changed the resolver code, which used to only be able to resolve the relative path:"),pi.forEach(e),Zt=c(S),$s=t(S,"DIV",{class:!0});var wc=a($s);wc.forEach(e),Xt=c(S),es=t(S,"P",{});var ft=a(es);sa=l(ft,"Now I can import libraries from "),Bs=t(ft,"CODE",{class:!0});var ci=a(Bs);ea=l(ci,"node_modules/"),ci.forEach(e),oa=l(ft,"."),ft.forEach(e),ta=c(S),Vs=t(S,"P",{});var Jr=a(Vs);so=t(Jr,"EM",{});var hi=a(so);aa=l(hi,'Did I just said "import libraries"?'),hi.forEach(e),na=l(Jr," \u{1F64A}"),Jr.forEach(e),S.forEach(e),rt=c(r),y=t(r,"SECTION",{});var f=a(y);eo=t(f,"H2",{});var ki=a(eo);os=t(ki,"A",{href:!0,id:!0});var vi=a(os);la=l(vi,"Adding HTML Template"),vi.forEach(e),ki.forEach(e),ra=c(f),oo=t(f,"P",{});var yi=a(oo);ia=l(yi,"To bundle for the web, the most important piece is to have the HTML."),yi.forEach(e),pa=c(f),ts=t(f,"P",{});var xt=a(ts);ca=l(xt,"Usually, we provide an HTML template to the module bundler. And when the module bundler finishes the bundling process, it will come up with a list of files that is required to start the application and add them into the HTML file in the form of a "),Ws=t(xt,"CODE",{class:!0});var di=a(Ws);ha=l(di,"<script>"),di.forEach(e),ka=l(xt," tag."),xt.forEach(e),va=c(f),to=t(f,"P",{});var ui=a(to);ya=l(ui,"To illustrate here is the HTML template that I've prepared:"),ui.forEach(e),da=c(f),Gs=t(f,"DIV",{class:!0});var _c=a(Gs);_c.forEach(e),ua=c(f),ao=t(f,"P",{});var fi=a(ao);fa=l(fi,"And at the end of the bundling process, the bundler generated the following files:"),fi.forEach(e),xa=c(f),Ys=t(f,"DIV",{class:!0});var bc=a(Ys);bc.forEach(e),ma=c(f),as=t(f,"P",{});var mt=a(as);ga=l(mt,"So the "),zs=t(mt,"CODE",{class:!0});var xi=a(zs);wa=l(xi,"bundle.js"),xi.forEach(e),_a=l(mt," is added into the final HTML file like this:"),mt.forEach(e),ba=c(f),Qs=t(f,"DIV",{class:!0});var Ec=a(Qs);Ec.forEach(e),Ea=c(f),no=t(f,"BLOCKQUOTE",{});var mi=a(no);lo=t(mi,"SMALL",{});var gi=a(lo);Sa=l(gi,"**NOTE:** the preceding slash (`/`) allows us to always fetch the JavaScript file relative from the root path. This is extremely useful for Single Page Application (SPA), where we serve the same HTML file irrelevant to the URL path."),gi.forEach(e),mi.forEach(e),Ia=c(f),ro=t(f,"P",{});var wi=a(ro);Ta=l(wi,"Code wise, it is quite straightforward to implement this:"),wi.forEach(e),Pa=c(f),Ks=t(f,"DIV",{class:!0});var Sc=a(Ks);Sc.forEach(e),Ca=c(f),L=t(f,"P",{});var G=a(L);Ma=l(G,"Here, I used a "),Zs=t(G,"CODE",{class:!0});var _i=a(Zs);La=l(_i,".replace(END_BODY_TAG, '...' + END_BODY_TAG)"),_i.forEach(e),Da=l(G," to insert the "),Xs=t(G,"CODE",{class:!0});var bi=a(Xs);Aa=l(bi,"<script>"),bi.forEach(e),Oa=l(G," tags before the end of the "),se=t(G,"CODE",{class:!0});var Ei=a(se);Ha=l(Ei,"</body>"),Ei.forEach(e),qa=l(G," tag."),G.forEach(e),Fa=c(f),io=t(f,"BLOCKQUOTE",{});var Si=a(io);ee=t(Si,"SMALL",{});var Nr=a(ee);ja=l(Nr,"**Note:** Read [here](https://www.codecademy.com/forum_questions/55dee24b937676fb5e000139) to learn why it's a best practice to add `<script>` tag at the end of the `"),po=t(Nr,"BODY",{});var Ii=a(po);Ja=l(Ii,"` tag."),Ii.forEach(e),Nr.forEach(e),Si.forEach(e),f.forEach(e),it=c(r),u=t(r,"SECTION",{});var g=a(u);co=t(g,"H2",{});var Ti=a(co);ns=t(Ti,"A",{href:!0,id:!0});var Pi=a(ns);Na=l(Pi,"Adding CSS"),Pi.forEach(e),Ti.forEach(e),Ra=c(g),ho=t(g,"P",{});var Ci=a(ho);Ua=l(Ci,"Every web app has to have CSS in one way or another."),Ci.forEach(e),$a=c(g),ls=t(g,"P",{});var gt=a(ls);Ba=l(gt,"I added a css file and imported it from "),oe=t(gt,"CODE",{class:!0});var Mi=a(oe);Va=l(Mi,"index.js"),Mi.forEach(e),Wa=l(gt,":"),gt.forEach(e),Ga=c(g),te=t(g,"DIV",{class:!0});var Ic=a(te);Ic.forEach(e),Ya=c(g),ae=t(g,"DIV",{class:!0});var Tc=a(ae);Tc.forEach(e),za=c(g),rs=t(g,"P",{});var wt=a(rs);Qa=l(wt,"If I bundle my application now, I would see a "),ne=t(wt,"CODE",{class:!0});var Li=a(ne);Ka=l(Li,"SyntaxError"),Li.forEach(e),Za=l(wt,":"),wt.forEach(e),Xa=c(g),le=t(g,"DIV",{class:!0});var Pc=a(le);Pc.forEach(e),sn=c(g),ko=t(g,"P",{});var Di=a(ko);en=l(Di,"That is because I assumed all files are JavaScript files, and Babel would complain when trying to parse out the import statements."),Di.forEach(e),on=c(g),D=t(g,"P",{});var Y=a(D);tn=l(Y,"So, I abstracted out "),re=t(Y,"CODE",{class:!0});var Ai=a(re);an=l(Ai,"Module"),Ai.forEach(e),nn=l(Y," as a base class, and created "),ie=t(Y,"CODE",{class:!0});var Oi=a(ie);ln=l(Oi,"JSModule"),Oi.forEach(e),rn=l(Y," and "),pe=t(Y,"CODE",{class:!0});var Hi=a(pe);pn=l(Hi,"CSSModule"),Hi.forEach(e),cn=l(Y,":"),Y.forEach(e),hn=c(g),ce=t(g,"DIV",{class:!0});var Cc=a(ce);Cc.forEach(e),kn=c(g),F=t(g,"P",{});var He=a(F);vn=l(He,"In the "),he=t(He,"CODE",{class:!0});var qi=a(he);yn=l(qi,"createModule"),qi.forEach(e),dn=l(He," function, I need to create different "),ke=t(He,"CODE",{class:!0});var Fi=a(ke);un=l(Fi,"Module"),Fi.forEach(e),fn=l(He," based on the file extension:"),He.forEach(e),xn=c(g),ve=t(g,"DIV",{class:!0});var Mc=a(ve);Mc.forEach(e),g.forEach(e),pt=c(r),h=t(r,"SECTION",{});var v=a(h);vo=t(v,"H3",{});var ji=a(vo);is=t(ji,"A",{href:!0,id:!0});var Ji=a(is);mn=l(Ji,"Loaders"),Ji.forEach(e),ji.forEach(e),gn=c(v),j=t(v,"P",{});var qe=a(j);wn=l(qe,"Here I used the word "),ye=t(qe,"CODE",{class:!0});var Ni=a(ye);_n=l(Ni,'"LOADERS"'),Ni.forEach(e),bn=l(qe,", which I borrowed from "),ps=t(qe,"A",{href:!0,rel:!0});var Ri=a(ps);En=l(Ri,"webpack"),Ri.forEach(e),Sn=l(qe,"."),qe.forEach(e),In=c(v),de=t(v,"P",{});var Rr=a(de);Tn=l(Rr,"According to webpack, "),cs=t(Rr,"EM",{});var _t=a(cs);Pn=l(_t,'"'),hs=t(_t,"A",{href:!0,rel:!0});var Ui=a(hs);Cn=l(Ui,"[loaders]"),Ui.forEach(e),Mn=l(_t,' enable webpack to preprocess files, [which] allows you to bundle any static resource way beyond JavaScript."'),_t.forEach(e),Rr.forEach(e),Ln=c(v),J=t(v,"P",{});var Fe=a(J);Dn=l(Fe,"To take it from a different perspective, "),yo=t(Fe,"STRONG",{});var $i=a(yo);An=l($i,"loaders"),$i.forEach(e),On=l(Fe," are simple functions that transform any code into "),uo=t(Fe,"STRONG",{});var Bi=a(uo);Hn=l(Bi,"browser-executable JavaScript code"),Bi.forEach(e),qn=l(Fe,"."),Fe.forEach(e),Fn=c(v),fo=t(v,"P",{});var Vi=a(fo);jn=l(Vi,"For example, if you import a CSS file, the CSS code in the file will pass through the loader function to be transformed into JS code. So that you can import a CSS file as if you are importing a JS file."),Vi.forEach(e),Jn=c(v),xo=t(v,"P",{});var Wi=a(xo);mo=t(Wi,"STRONG",{});var Gi=a(mo);Nn=l(Gi,"Wait, how are we going to transform CSS code into JS code?"),Gi.forEach(e),Wi.forEach(e),Rn=c(v),N=t(v,"P",{});var je=a(N);Un=l(je,"Well, one way you can do that is to make the CSS code into a string by wrapping it around with quote marks "),ue=t(je,"CODE",{class:!0});var Yi=a(ue);$n=l(Yi,"'"),Yi.forEach(e),Bn=l(je,", and programmatically add the CSS code into the HTML "),fe=t(je,"CODE",{class:!0});var zi=a(fe);Vn=l(zi,"<head />"),zi.forEach(e),Wn=l(je,"."),je.forEach(e),Gn=c(v),go=t(v,"P",{});var Qi=a(go);Yn=l(Qi,"For example, taking the following CSS code:"),Qi.forEach(e),zn=c(v),xe=t(v,"DIV",{class:!0});var Lc=a(xe);Lc.forEach(e),Qn=c(v),wo=t(v,"P",{});var Ki=a(wo);Kn=l(Ki,"and transform it into the following JS code:"),Ki.forEach(e),Zn=c(v),me=t(v,"DIV",{class:!0});var Dc=a(me);Dc.forEach(e),Xn=c(v),R=t(v,"P",{});var Je=a(R);sl=l(Je,"This is in essence what "),ks=t(Je,"A",{href:!0,rel:!0});var Zi=a(ks);el=l(Zi,"style-loader"),Zi.forEach(e),ol=l(Je," is doing, except "),ge=t(Je,"CODE",{class:!0});var Xi=a(ge);tl=l(Xi,"style-loader"),Xi.forEach(e),al=l(Je," does even more:"),Je.forEach(e),nl=c(v),U=t(v,"UL",{});var Ne=a(U);_o=t(Ne,"LI",{});var sp=a(_o);ll=l(sp,"supports hot reloading"),sp.forEach(e),rl=c(Ne),A=t(Ne,"LI",{});var z=a(A);il=l(z,"provides different mode of injecting, "),we=t(z,"CODE",{class:!0});var ep=a(we);pl=l(ep,"styleTag"),ep.forEach(e),cl=l(z,", "),_e=t(z,"CODE",{class:!0});var op=a(_e);hl=l(op,"singletonStyleTag"),op.forEach(e),kl=l(z,", "),be=t(z,"CODE",{class:!0});var tp=a(be);vl=l(tp,"linkTag"),tp.forEach(e),yl=l(z,", ... etc."),z.forEach(e),dl=c(Ne),bo=t(Ne,"LI",{});var ap=a(bo);ul=l(ap,"provides different points in dom for injecting the style tag."),ap.forEach(e),Ne.forEach(e),fl=c(v),Eo=t(v,"P",{});var np=a(Eo);So=t(np,"STRONG",{});var lp=a(So);xl=l(lp,'Did I mentioned "browser-executable JavaScript code"?'),lp.forEach(e),np.forEach(e),ml=c(v),vs=t(v,"P",{});var bt=a(vs);gl=l(bt,"Yes, not all JavaScript code is executable in a browser if you are using next-generation syntaxes or constructs that is not yet available in the browser. That's why you need "),ys=t(bt,"A",{href:!0,rel:!0});var rp=a(ys);wl=l(rp,"babel-loader"),rp.forEach(e),_l=l(bt," for your JavaScript files, to make sure they can be run in all supported browsers."),bt.forEach(e),bl=c(v),El=t(v,"HR",{}),Sl=c(v),ds=t(v,"P",{});var Et=a(ds);Il=l(Et,"So, I implemented the loader transform in CSSModule with "),us=t(Et,"A",{href:!0,rel:!0});var ip=a(us);Tl=l(ip,"template literals"),ip.forEach(e),Pl=l(Et,":"),Et.forEach(e),Cl=c(v),Ee=t(v,"DIV",{class:!0});var Ac=a(Ee);Ac.forEach(e),v.forEach(e),ct=c(r),b=t(r,"SECTION",{});var I=a(b);Io=t(I,"H2",{});var pp=a(Io);fs=t(pp,"A",{href:!0,id:!0});var cp=a(fs);Ml=l(cp,"Dev Server"),cp.forEach(e),pp.forEach(e),Ll=c(I),To=t(I,"P",{});var hp=a(To);Dl=l(hp,"Dev server is a default feature for frontend build tools nowadays, it's common feature are:"),hp.forEach(e),Al=c(I),$=t(I,"UL",{});var Re=a($);Po=t(Re,"LI",{});var kp=a(Po);Ol=l(kp,"Serving generated assets, assets can be either served from the filesystem or in memory"),kp.forEach(e),Hl=c(Re),Co=t(Re,"LI",{});var vp=a(Co);ql=l(vp,"Supports watch mode, reloading and hot module replacement"),vp.forEach(e),Fl=c(Re),Mo=t(Re,"LI",{});var yp=a(Mo);jl=l(yp,"Act as a proxy to external APIs"),yp.forEach(e),Re.forEach(e),Jl=c(I),xs=t(I,"P",{});var St=a(xs);Nl=l(St,"In this post, I will show you how I created a basic dev server using "),ms=t(St,"A",{href:!0,rel:!0});var dp=a(ms);Rl=l(dp,"Express"),dp.forEach(e),Ul=l(St," for serving the generated assets in memory, we will discuss the watch mode in the future post."),St.forEach(e),$l=c(I),O=t(I,"P",{});var Q=a(O);Bl=l(Q,"I abstracted out the "),Se=t(Q,"CODE",{class:!0});var up=a(Se);Vl=l(up,"_build"),up.forEach(e),Wl=l(Q," function and supports both "),Ie=t(Q,"CODE",{class:!0});var fp=a(Ie);Gl=l(fp,"build"),fp.forEach(e),Yl=l(Q," and "),Te=t(Q,"CODE",{class:!0});var xp=a(Te);zl=l(xp,"dev"),xp.forEach(e),Ql=l(Q," mode."),Q.forEach(e),Kl=c(I),Pe=t(I,"DIV",{class:!0});var Oc=a(Pe);Oc.forEach(e),Zl=c(I),B=t(I,"P",{});var Ue=a(B);Xl=l(Ue,"In "),Ce=t(Ue,"CODE",{class:!0});var mp=a(Ce);sr=l(mp,"dev"),mp.forEach(e),er=l(Ue," mode, I did not write files to the file system, instead I served them directly through the "),gs=t(Ue,"A",{href:!0,rel:!0});var gp=a(gs);or=l(gp,"Express"),gp.forEach(e),tr=l(Ue," server:"),Ue.forEach(e),ar=c(I),Me=t(I,"DIV",{class:!0});var Hc=a(Me);Hc.forEach(e),nr=c(I),Lo=t(I,"P",{});var wp=a(Lo);lr=l(wp,"And that's it. You have a basic dev server that serves the bundled files!"),wp.forEach(e),I.forEach(e),ht=c(r),m=t(r,"SECTION",{});var E=a(m);Do=t(E,"H2",{});var _p=a(Do);ws=t(_p,"A",{href:!0,id:!0});var bp=a(ws);rr=l(bp,"Wrap it up"),bp.forEach(e),_p.forEach(e),ir=c(E),_s=t(E,"P",{});var It=a(_s);pr=l(It,"I've added "),bs=t(It,"A",{href:!0,rel:!0});var Ep=a(bs);cr=l(Ep,"Preact"),Ep.forEach(e),hr=l(It," and CSS into my app:"),It.forEach(e),kr=c(E),Le=t(E,"DIV",{class:!0});var qc=a(Le);qc.forEach(e),vr=c(E),De=t(E,"DIV",{class:!0});var Fc=a(De);Fc.forEach(e),yr=c(E),Ao=t(E,"P",{});var Sp=a(Ao);dr=l(Sp,"And also an HTML template:"),Sp.forEach(e),ur=c(E),Ae=t(E,"DIV",{class:!0});var jc=a(Ae);jc.forEach(e),fr=c(E),Oo=t(E,"P",{});var Ip=a(Oo);xr=l(Ip,"Starting my bundler:"),Ip.forEach(e),mr=c(E),Ho=t(E,"P",{});var Tp=a(Ho);Es=t(Tp,"PICTURE",{});var Tt=a(Es);qo=t(Tt,"SOURCE",{type:!0,srcset:!0}),Fo=t(Tt,"SOURCE",{type:!0,srcset:!0}),Ss=t(Tt,"IMG",{src:!0,loading:!0,alt:!0}),Tt.forEach(e),Tp.forEach(e),gr=c(E),jo=t(E,"P",{});var Pp=a(jo);wr=l(Pp,"And voila!"),Pp.forEach(e),_r=c(E),Jo=t(E,"P",{});var Cp=a(Jo);Is=t(Cp,"PICTURE",{});var Pt=a(Is);No=t(Pt,"SOURCE",{type:!0,srcset:!0}),Ro=t(Pt,"SOURCE",{type:!0,srcset:!0}),Ts=t(Pt,"IMG",{src:!0,loading:!0,alt:!0}),Pt.forEach(e),Cp.forEach(e),E.forEach(e),kt=c(r),P=t(r,"SECTION",{});var q=a(P);Uo=t(q,"H2",{});var Mp=a(Uo);Ps=t(Mp,"A",{href:!0,id:!0});var Lp=a(Ps);br=l(Lp,"Whats next?"),Lp.forEach(e),Mp.forEach(e),Er=c(q),$o=t(q,"P",{});var Dp=a($o);Sr=l(Dp,"I have promised in my previous post, features that I will implement:"),Dp.forEach(e),Ir=c(q),Cs=t(q,"UL",{});var Ct=a(Cs);Bo=t(Ct,"LI",{});var Ap=a(Bo);Tr=l(Ap,"code splitting"),Ap.forEach(e),Pr=c(Ct),Vo=t(Ct,"LI",{});var Op=a(Vo);Cr=l(Op,"watch mode"),Op.forEach(e),Ct.forEach(e),Mr=c(q),Wo=t(q,"P",{});var Hp=a(Wo);Lr=l(Hp,"and yes, I will implement them!"),Hp.forEach(e),Dr=c(q),Go=t(q,"P",{});var qp=a(Go);Ar=l(qp,"Till then. Cheers. \u{1F60E}"),qp.forEach(e),q.forEach(e),vt=c(r),W=t(r,"SECTION",{});var Mt=a(W);Yo=t(Mt,"H2",{});var Fp=a(Yo);Ms=t(Fp,"A",{href:!0,id:!0});var jp=a(Ms);Or=l(jp,"References"),jp.forEach(e),Fp.forEach(e),Hr=c(Mt),Ls=t(Mt,"UL",{});var Lt=a(Ls);zo=t(Lt,"LI",{});var Jp=a(zo);Ds=t(Jp,"A",{href:!0,rel:!0});var Np=a(Ds);qr=l(Np,"Webpack Dev Server"),Np.forEach(e),Jp.forEach(e),Fr=c(Lt),Qo=t(Lt,"LI",{});var Rp=a(Qo);As=t(Rp,"A",{href:!0,rel:!0});var Up=a(As);jr=l(Up,"style-loader"),Up.forEach(e),Rp.forEach(e),Lt.forEach(e),Mt.forEach(e),this.h()},h(){i(w,"href","/i-wrote-my-module-bundler/"),i($e,"type","image/webp"),i($e,"srcset",zc),i(Be,"type","image/png"),i(Be,"srcset",Gp),Ur(X.src,Br=Gp)||i(X,"src",Br),i(X,"loading","lazy"),i(X,"alt","bundled code demo"),i(Js,"href","#adding-html-template"),i(Ns,"href","#adding-css"),i(Rs,"href","#dev-server"),i(ss,"href","#before-we-begin"),i(ss,"id","before-we-begin"),i(Us,"class","code-section"),i($s,"class","code-section"),i(Bs,"class","inline"),i(os,"href","#adding-html-template"),i(os,"id","adding-html-template"),i(Ws,"class","inline"),i(Gs,"class","code-section"),i(Ys,"class","code-section"),i(zs,"class","inline"),i(Qs,"class","code-section"),i(Ks,"class","code-section"),i(Zs,"class","inline"),i(Xs,"class","inline"),i(se,"class","inline"),i(ns,"href","#adding-css"),i(ns,"id","adding-css"),i(oe,"class","inline"),i(te,"class","code-section"),i(ae,"class","code-section"),i(ne,"class","inline"),i(le,"class","code-section"),i(re,"class","inline"),i(ie,"class","inline"),i(pe,"class","inline"),i(ce,"class","code-section"),i(he,"class","inline"),i(ke,"class","inline"),i(ve,"class","code-section"),i(is,"href","#loaders"),i(is,"id","loaders"),i(ye,"class","inline"),i(ps,"href","https://webpack.js.org/loaders/"),i(ps,"rel","nofollow"),i(hs,"href","https://webpack.js.org/loaders/"),i(hs,"rel","nofollow"),i(ue,"class","inline"),i(fe,"class","inline"),i(xe,"class","code-section"),i(me,"class","code-section"),i(ks,"href","https://github.com/webpack-contrib/style-loader"),i(ks,"rel","nofollow"),i(ge,"class","inline"),i(we,"class","inline"),i(_e,"class","inline"),i(be,"class","inline"),i(ys,"href","https://github.com/babel/babel-loader"),i(ys,"rel","nofollow"),i(us,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"),i(us,"rel","nofollow"),i(Ee,"class","code-section"),i(fs,"href","#dev-server"),i(fs,"id","dev-server"),i(ms,"href","https://expressjs.com"),i(ms,"rel","nofollow"),i(Se,"class","inline"),i(Ie,"class","inline"),i(Te,"class","inline"),i(Pe,"class","code-section"),i(Ce,"class","inline"),i(gs,"href","https://expressjs.com"),i(gs,"rel","nofollow"),i(Me,"class","code-section"),i(ws,"href","#wrap-it-up"),i(ws,"id","wrap-it-up"),i(bs,"href","https://preactjs.com/"),i(bs,"rel","nofollow"),i(Le,"class","code-section"),i(De,"class","code-section"),i(Ae,"class","code-section"),i(qo,"type","image/webp"),i(qo,"srcset",Yc),i(Fo,"type","image/png"),i(Fo,"srcset",Wp),Ur(Ss.src,Vr=Wp)||i(Ss,"src",Vr),i(Ss,"loading","lazy"),i(Ss,"alt","Running bundler + dev server"),i(No,"type","image/webp"),i(No,"srcset",Gc),i(Ro,"type","image/png"),i(Ro,"srcset",Vp),Ur(Ts.src,Wr=Vp)||i(Ts,"src",Wr),i(Ts,"loading","lazy"),i(Ts,"alt","Served results"),i(Ps,"href","#whats-next"),i(Ps,"id","whats-next"),i(Ms,"href","#references"),i(Ms,"id","references"),i(Ds,"href","https://github.com/webpack/webpack-dev-server"),i(Ds,"rel","nofollow"),i(As,"href","https://github.com/webpack-contrib/style-loader"),i(As,"rel","nofollow")},m(r,k){Kp(x,r,k),d(r,C,k),d(r,T,k),s(T,K),s(T,w),s(w,M),s(T,Hs),d(r,Ko,k),d(r,qs,k),s(qs,Z),s(Z,$e),s(Z,Be),s(Z,X),d(r,Zo,k),d(r,Fs,k),s(Fs,Dt),d(r,Xo,k),d(r,js,k),s(js,At),d(r,st,k),d(r,H,k),s(H,Ve),s(Ve,Js),s(Js,Ot),s(H,Ht),s(H,We),s(We,Ns),s(Ns,qt),s(H,Ft),s(H,Ge),s(Ge,Rs),s(Rs,jt),d(r,et,k),d(r,ot,k),d(r,tt,k),d(r,V,k),s(V,Jt),s(V,Ye),s(Ye,Nt),s(V,Rt),d(r,at,k),d(r,nt,k),d(r,lt,k),d(r,_,k),s(_,ze),s(ze,ss),s(ss,Ut),s(_,$t),s(_,Qe),s(Qe,Bt),s(_,Vt),s(_,Ke),s(Ke,Wt),s(_,Gt),s(_,Us),Us.innerHTML=ec,s(_,Yt),s(_,Ze),s(Ze,zt),s(_,Qt),s(_,Xe),s(Xe,Kt),s(_,Zt),s(_,$s),$s.innerHTML=oc,s(_,Xt),s(_,es),s(es,sa),s(es,Bs),s(Bs,ea),s(es,oa),s(_,ta),s(_,Vs),s(Vs,so),s(so,aa),s(Vs,na),d(r,rt,k),d(r,y,k),s(y,eo),s(eo,os),s(os,la),s(y,ra),s(y,oo),s(oo,ia),s(y,pa),s(y,ts),s(ts,ca),s(ts,Ws),s(Ws,ha),s(ts,ka),s(y,va),s(y,to),s(to,ya),s(y,da),s(y,Gs),Gs.innerHTML=tc,s(y,ua),s(y,ao),s(ao,fa),s(y,xa),s(y,Ys),Ys.innerHTML=ac,s(y,ma),s(y,as),s(as,ga),s(as,zs),s(zs,wa),s(as,_a),s(y,ba),s(y,Qs),Qs.innerHTML=nc,s(y,Ea),s(y,no),s(no,lo),s(lo,Sa),s(y,Ia),s(y,ro),s(ro,Ta),s(y,Pa),s(y,Ks),Ks.innerHTML=lc,s(y,Ca),s(y,L),s(L,Ma),s(L,Zs),s(Zs,La),s(L,Da),s(L,Xs),s(Xs,Aa),s(L,Oa),s(L,se),s(se,Ha),s(L,qa),s(y,Fa),s(y,io),s(io,ee),s(ee,ja),s(ee,po),s(po,Ja),d(r,it,k),d(r,u,k),s(u,co),s(co,ns),s(ns,Na),s(u,Ra),s(u,ho),s(ho,Ua),s(u,$a),s(u,ls),s(ls,Ba),s(ls,oe),s(oe,Va),s(ls,Wa),s(u,Ga),s(u,te),te.innerHTML=rc,s(u,Ya),s(u,ae),ae.innerHTML=ic,s(u,za),s(u,rs),s(rs,Qa),s(rs,ne),s(ne,Ka),s(rs,Za),s(u,Xa),s(u,le),le.innerHTML=pc,s(u,sn),s(u,ko),s(ko,en),s(u,on),s(u,D),s(D,tn),s(D,re),s(re,an),s(D,nn),s(D,ie),s(ie,ln),s(D,rn),s(D,pe),s(pe,pn),s(D,cn),s(u,hn),s(u,ce),ce.innerHTML=cc,s(u,kn),s(u,F),s(F,vn),s(F,he),s(he,yn),s(F,dn),s(F,ke),s(ke,un),s(F,fn),s(u,xn),s(u,ve),ve.innerHTML=hc,d(r,pt,k),d(r,h,k),s(h,vo),s(vo,is),s(is,mn),s(h,gn),s(h,j),s(j,wn),s(j,ye),s(ye,_n),s(j,bn),s(j,ps),s(ps,En),s(j,Sn),s(h,In),s(h,de),s(de,Tn),s(de,cs),s(cs,Pn),s(cs,hs),s(hs,Cn),s(cs,Mn),s(h,Ln),s(h,J),s(J,Dn),s(J,yo),s(yo,An),s(J,On),s(J,uo),s(uo,Hn),s(J,qn),s(h,Fn),s(h,fo),s(fo,jn),s(h,Jn),s(h,xo),s(xo,mo),s(mo,Nn),s(h,Rn),s(h,N),s(N,Un),s(N,ue),s(ue,$n),s(N,Bn),s(N,fe),s(fe,Vn),s(N,Wn),s(h,Gn),s(h,go),s(go,Yn),s(h,zn),s(h,xe),xe.innerHTML=kc,s(h,Qn),s(h,wo),s(wo,Kn),s(h,Zn),s(h,me),me.innerHTML=vc,s(h,Xn),s(h,R),s(R,sl),s(R,ks),s(ks,el),s(R,ol),s(R,ge),s(ge,tl),s(R,al),s(h,nl),s(h,U),s(U,_o),s(_o,ll),s(U,rl),s(U,A),s(A,il),s(A,we),s(we,pl),s(A,cl),s(A,_e),s(_e,hl),s(A,kl),s(A,be),s(be,vl),s(A,yl),s(U,dl),s(U,bo),s(bo,ul),s(h,fl),s(h,Eo),s(Eo,So),s(So,xl),s(h,ml),s(h,vs),s(vs,gl),s(vs,ys),s(ys,wl),s(vs,_l),s(h,bl),s(h,El),s(h,Sl),s(h,ds),s(ds,Il),s(ds,us),s(us,Tl),s(ds,Pl),s(h,Cl),s(h,Ee),Ee.innerHTML=yc,d(r,ct,k),d(r,b,k),s(b,Io),s(Io,fs),s(fs,Ml),s(b,Ll),s(b,To),s(To,Dl),s(b,Al),s(b,$),s($,Po),s(Po,Ol),s($,Hl),s($,Co),s(Co,ql),s($,Fl),s($,Mo),s(Mo,jl),s(b,Jl),s(b,xs),s(xs,Nl),s(xs,ms),s(ms,Rl),s(xs,Ul),s(b,$l),s(b,O),s(O,Bl),s(O,Se),s(Se,Vl),s(O,Wl),s(O,Ie),s(Ie,Gl),s(O,Yl),s(O,Te),s(Te,zl),s(O,Ql),s(b,Kl),s(b,Pe),Pe.innerHTML=dc,s(b,Zl),s(b,B),s(B,Xl),s(B,Ce),s(Ce,sr),s(B,er),s(B,gs),s(gs,or),s(B,tr),s(b,ar),s(b,Me),Me.innerHTML=uc,s(b,nr),s(b,Lo),s(Lo,lr),d(r,ht,k),d(r,m,k),s(m,Do),s(Do,ws),s(ws,rr),s(m,ir),s(m,_s),s(_s,pr),s(_s,bs),s(bs,cr),s(_s,hr),s(m,kr),s(m,Le),Le.innerHTML=fc,s(m,vr),s(m,De),De.innerHTML=xc,s(m,yr),s(m,Ao),s(Ao,dr),s(m,ur),s(m,Ae),Ae.innerHTML=mc,s(m,fr),s(m,Oo),s(Oo,xr),s(m,mr),s(m,Ho),s(Ho,Es),s(Es,qo),s(Es,Fo),s(Es,Ss),s(m,gr),s(m,jo),s(jo,wr),s(m,_r),s(m,Jo),s(Jo,Is),s(Is,No),s(Is,Ro),s(Is,Ts),d(r,kt,k),d(r,P,k),s(P,Uo),s(Uo,Ps),s(Ps,br),s(P,Er),s(P,$o),s($o,Sr),s(P,Ir),s(P,Cs),s(Cs,Bo),s(Bo,Tr),s(Cs,Pr),s(Cs,Vo),s(Vo,Cr),s(P,Mr),s(P,Wo),s(Wo,Lr),s(P,Dr),s(P,Go),s(Go,Ar),d(r,vt,k),d(r,W,k),s(W,Yo),s(Yo,Ms),s(Ms,Or),s(W,Hr),s(W,Ls),s(Ls,zo),s(zo,Ds),s(Ds,qr),s(Ls,Fr),s(Ls,Qo),s(Qo,As),s(As,jr),yt=!0},p:Bc,i(r){yt||(Zp(x.$$.fragment,r),yt=!0)},o(r){Xp(x.$$.fragment,r),yt=!1},d(r){sc(x,r),r&&e(C),r&&e(T),r&&e(Ko),r&&e(qs),r&&e(Zo),r&&e(Fs),r&&e(Xo),r&&e(js),r&&e(st),r&&e(H),r&&e(et),r&&e(ot),r&&e(tt),r&&e(V),r&&e(at),r&&e(nt),r&&e(lt),r&&e(_),r&&e(rt),r&&e(y),r&&e(it),r&&e(u),r&&e(pt),r&&e(h),r&&e(ct),r&&e(b),r&&e(ht),r&&e(m),r&&e(kt),r&&e(P),r&&e(vt),r&&e(W)}}}function Zc(Os){let x,C;const T=[Os[0],Yp];let K={$$slots:{default:[Kc]},$$scope:{ctx:Os}};for(let w=0;w<T.length;w+=1)K=$r(K,T[w]);return x=new Vc({props:K}),{c(){zp(x.$$.fragment)},l(w){Qp(x.$$.fragment,w)},m(w,M){Kp(x,w,M),C=!0},p(w,[M]){const Hs=M&1?Uc(T,[M&1&&$p(w[0]),M&0&&$p(Yp)]):{};M&2&&(Hs.$$scope={dirty:M,ctx:w}),x.$set(Hs)},i(w){C||(Zp(x.$$.fragment,w),C=!0)},o(w){Xp(x.$$.fragment,w),C=!1},d(w){sc(x,w)}}}const Yp={title:"I wrote my module bundler II",date:"2019-10-16T08:00:00Z",tags:["JavaScript","module bundler","dev tool","webpack"],description:"We've built a simple bundler to bundle javascript code. Let's add CSS, HTML and serve it in the browser!",series:"Write a module bundler",label:"blog"};function Xc(Os,x,C){return $c("blog",{image:Qc}),Os.$$set=T=>{C(0,x=$r($r({},x),Bp(T)))},x=Bp(x),[x]}class lh extends Jc{constructor(x){super();Nc(this,x,Xc,Zc,Rc,{})}}export{lh as default,Yp as metadata};
