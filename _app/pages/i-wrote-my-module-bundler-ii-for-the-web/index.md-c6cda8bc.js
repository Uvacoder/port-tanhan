import{S as $c,i as Bc,s as Vc,C as Br,w as Xp,x as sc,y as ec,z as Wc,A as Gp,q as oc,o as tc,B as ac,r as Gc,R as Yp,k as p,e as o,t as n,m as c,c as t,a,h as l,d as e,b as i,Q as $r,f as w,g as d,F as s,O as Yc}from"../../chunks/vendor-569a3c5c.js";import{B as zc}from"../../chunks/BlogLayout-17b76cb2.js";import{T as Qc}from"../../chunks/TableOfContent-dbc18cb8.js";import"../../chunks/stores-ee936cd4.js";import"../../chunks/WebMentions-968cc380.js";/* empty css                                */var Kc="/_app/assets/result-a356ba6b.webp",Zc="/_app/assets/result-00c597af.webp",Xc="/_app/assets/result-f66d34f7.png",zp="/_app/assets/result-fac4a0dc.png",sh="/_app/assets/dev-server-038166db.webp",eh="/_app/assets/dev-server-b16a52fc.webp",oh="/_app/assets/dev-server-aa082f43.png",Qp="/_app/assets/dev-server-b2c26bcc.png",th="/_app/assets/cli-b7ac374f.webp",ah="/_app/assets/cli-0b97d073.webp",nh="/_app/assets/cli-482582c7.png",Kp="/_app/assets/cli-ca6034f6.png",lh="/_app/assets/hero-twitter-b3917370.jpg";function rh(Hs){let x,A,P,as,_,O,qs,Zo,Fs,R,js,Ge,C,Vr,Xo,Ns,Ct,st,Js,Lt,et,N,Ye,Rs,Dt,At,ze,Us,Ot,Ht,Qe,$s,qt,ot,tt,at,Z,Ft,Ke,jt,Nt,nt,lt,rt,b,Ze,ns,Jt,Rt,Xe,Ut,$t,so,Bt,Vt,Bs,nc=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">toModuleMap</span><span style="color: var(--shiki-color-text)">(modules) &#123;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> modules) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-token-function)">.transformModuleInterface</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  moduleMap </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;&quot;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.filePath</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&quot;: function(exports, require) &#123; </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.content</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#92;n &#125;,&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Wt,eo,Gt,Yt,oo,zt,Qt,Vs,lc=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">resolveRequest</span><span style="color: var(--shiki-color-text)">(requester</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> requestPath) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (requestPath[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;.&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// relative import</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.dirname</span><span style="color: var(--shiki-color-text)">(requester)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> requestPath);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">requesterParts</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">requester</span><span style="color: var(--shiki-token-function)">.split</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">requestPaths</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [];</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">requesterParts</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i</span><span style="color: var(--shiki-token-keyword)">--</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">requestPaths</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">requesterParts</span><span style="color: var(--shiki-token-function)">.slice</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> i)</span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;/node_modules&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// absolute import</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">require</span><span style="color: var(--shiki-token-function)">.resolve</span><span style="color: var(--shiki-color-text)">(requestPath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; paths</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> requestPaths &#125;);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Kt,ls,Zt,Ws,Xt,sa,ea,Gs,to,oa,ta,it,y,ao,rs,aa,na,no,la,ra,is,ia,Ys,pa,ca,ha,lo,ka,va,zs,rc=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">&lt;!-- filename: index.html --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">html</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">body</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">body</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">html</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,ya,ro,da,ua,Qs,ic='<pre class="prism language-yml"><code><div class="line"><span class="token punctuation">-</span> bundle.js</div></code></pre>',fa,ps,xa,Ks,ma,ga,wa,Zs,pc=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">&lt;!-- filename: index.html --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">html</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">body</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">src</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;/bundle.js&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">&lt;/</span><span style="color: var(--shiki-color-text)">body</span><span style="color: var(--shiki-token-keyword)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">&lt;/</span><span style="color: var(--shiki-color-text)">html</span><span style="color: var(--shiki-token-keyword)">&gt;</span></span></code></pre>`,_a,io,po,ba,Ea,co,Sa,Ia,Xs,cc=`<div class="filename">index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">build</span><span style="color: var(--shiki-color-text)">(&#123; entryFile</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> outputFolder</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> htmlTemplatePath &#125;) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">outputFiles</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">bundle</span><span style="color: var(--shiki-color-text)">(graph);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">outputFiles</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">generateHTMLTemplate</span><span style="color: var(--shiki-color-text)">(htmlTemplatePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> outputFiles));</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">END_BODY_TAG</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&lt;/body&gt;&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">generateHTMLTemplate</span><span style="color: var(--shiki-color-text)">(htmlTemplatePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> outputFiles) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> htmlTemplate </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.readFileSync</span><span style="color: var(--shiki-color-text)">(htmlTemplatePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;utf-8&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  htmlTemplate </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">htmlTemplate</span><span style="color: var(--shiki-token-function)">.replace</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">END_BODY_TAG</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">outputFiles</span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">((&#123; name &#125;) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;&lt;script src=&quot;/</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">name</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&quot;&gt;&lt;/script&gt;&#96;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">+</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">END_BODY_TAG</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  );</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123; name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;index.html&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> content</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> htmlTemplate &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ta,H,Pa,se,Ma,Ca,ee,La,Da,oe,Aa,Oa,Ha,ho,te,qa,ko,Fa,pt,u,vo,cs,ja,Na,yo,Ja,Ra,hs,Ua,ae,$a,Ba,Va,ne,hc='<div class="filename">index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./style.css&#39;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>',Wa,le,kc=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">/* filename: style.css */</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">.square</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">blue</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">.circle</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">red</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ga,ks,Ya,re,za,Qa,Ka,ie,vc=`<pre class="prism language-"><code><span class="line">SyntaxError: unknown: Unexpected token (1:0)</span>
<span class="line">&gt; 1 | .square &#123;</span>
<span class="line">    | ^</span>
<span class="line">  2 |   color: blue;</span>
<span class="line">  3 | &#125;</span>
<span class="line">  4 | .circle &#123;</span>
<span class="line">    at Parser.raise (node_modules/@babel/parser/lib/index.js:6344:17)</span></code></pre>`,Za,uo,Xa,sn,q,en,pe,on,tn,ce,an,nn,he,ln,rn,pn,ke,yc=`<div class="filename">index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(filePath) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.filePath </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> filePath;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.content </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.readFileSync</span><span style="color: var(--shiki-color-text)">(filePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;utf-8&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">initDependencies</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.dependencies </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">transformModuleInterface</span><span style="color: var(--shiki-color-text)">() &#123;&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">JSModule</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> &#123;&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CSSModule</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> &#123;&#125;</span></span></code></pre>`,cn,U,hn,ve,kn,vn,ye,yn,dn,un,de,dc=`<div class="filename">index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line highlight"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">MODULE_LOADERS</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;.css&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> CSSModule</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> JSModule</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createModule</span><span style="color: var(--shiki-color-text)">(filePath) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fileExtension</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.extname</span><span style="color: var(--shiki-color-text)">(filePath);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ModuleCls</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">MODULE_LOADERS</span><span style="color: var(--shiki-color-text)">[fileExtension];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">ModuleCls) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Unsupported extension &quot;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">fileExtension</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&quot;.&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ModuleCls</span><span style="color: var(--shiki-color-text)">(filePath);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// hightlight-end</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">MODULE_CACHE</span><span style="color: var(--shiki-token-function)">.set</span><span style="color: var(--shiki-color-text)">(filePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ct,h,fo,vs,fn,xn,$,mn,ue,gn,wn,ys,_n,bn,En,fe,Sn,ds,In,us,Tn,Pn,Mn,B,Cn,xo,Ln,Dn,mo,An,On,Hn,go,qn,Fn,wo,_o,jn,Nn,V,Jn,xe,Rn,Un,me,$n,Bn,Vn,bo,Wn,Gn,ge,uc=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">.square</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">blue</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">.circle</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">red</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Yn,Eo,zn,Qn,we,fc=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">content</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;.square &#123; color: blue; &#125; .circle &#123; color: red; &#125;&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// create style tag</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;style&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;text/css&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// for ie compatibility</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)">.styleSheet) </span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">styleSheet</span><span style="color: var(--shiki-color-text)">.cssText </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> content;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-token-function)">.appendChild</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createTextNode</span><span style="color: var(--shiki-color-text)">(content));</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// append to the head</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">head</span><span style="color: var(--shiki-token-function)">.appendChild</span><span style="color: var(--shiki-color-text)">(style);</span></span></code></pre>`,Kn,W,Zn,fs,Xn,sl,_e,el,ol,tl,G,So,al,nl,F,ll,be,rl,il,Ee,pl,cl,Se,hl,kl,vl,Io,yl,dl,To,Po,ul,fl,xs,xl,ms,ml,gl,wl,_l,bl,gs,El,ws,Sl,Il,Tl,Ie,xc=`<div class="filename">index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(filePath) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.transform</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CSSModule</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Module</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">transform</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.content </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">trim</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-string-expression)">      const content = &#39;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">content</span><span style="color: var(--shiki-token-function)">.replace</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">/&#92;n/</span><span style="color: var(--shiki-token-keyword)">g</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#39;;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-string-expression)">      const style = document.createElement(&#39;style&#39;);</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-string-expression)">      style.type = &#39;text/css&#39;;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-string-expression)">      if (style.styleSheet) style.styleSheet.cssText = content;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-string-expression)">      else style.appendChild(document.createTextNode(content));</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-string-expression)">      document.head.appendChild(style);</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-string-expression)">    &#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ht,E,Mo,_s,Pl,Ml,Co,Cl,Ll,Y,Lo,Dl,Al,Do,Ol,Hl,Ao,ql,Fl,bs,jl,Es,Nl,Jl,Rl,j,Ul,Te,$l,Bl,Pe,Vl,Wl,Me,Gl,Yl,zl,Ce,mc=`<div class="filename">index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line highlight"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_build</span><span style="color: var(--shiki-color-text)">(&#123; entryFile</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> htmlTemplatePath &#125;) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// build dependency graph</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">graph</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createDependencyGraph</span><span style="color: var(--shiki-color-text)">(entryFile);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// bundle the asset</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">outputFiles</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">bundle</span><span style="color: var(--shiki-color-text)">(graph);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">outputFiles</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">generateHTMLTemplate</span><span style="color: var(--shiki-color-text)">(htmlTemplatePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> outputFiles));</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123; outputFiles</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> graph &#125;;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">build</span><span style="color: var(--shiki-color-text)">(&#123; entryFile</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> outputFolder</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> htmlTemplatePath &#125;) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">outputFiles</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_build</span><span style="color: var(--shiki-color-text)">(&#123; entryFile</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> htmlTemplatePath &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// write to output folder</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">dev</span><span style="color: var(--shiki-color-text)">(&#123; entryFile</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> outputFolder</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> htmlTemplatePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> devServerOptions &#125;) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">outputFiles</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_build</span><span style="color: var(--shiki-color-text)">(&#123; entryFile</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> htmlTemplatePath &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ql,z,Kl,Le,Zl,Xl,Ss,sr,er,or,De,gc=`<div class="filename">index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">dev</span><span style="color: var(--shiki-color-text)">(&#123; entryFile</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> outputFolder</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> htmlTemplatePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> devServerOptions &#125;) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">outputFiles</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_build</span><span style="color: var(--shiki-color-text)">(&#123; entryFile</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> htmlTemplatePath &#125;);</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// create a map of [filename] -&gt; content</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">outputFileMap</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;&#125;;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">outputFile</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> outputFiles) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    outputFileMap[</span><span style="color: var(--shiki-token-constant)">outputFile</span><span style="color: var(--shiki-color-text)">.name] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">outputFile</span><span style="color: var(--shiki-color-text)">.content;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">indexHtml</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> outputFileMap[</span><span style="color: var(--shiki-token-string-expression)">&#39;index.html&#39;</span><span style="color: var(--shiki-color-text)">];</span></span>
<span class="line highlight"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">express</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.use</span><span style="color: var(--shiki-color-text)">((req</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> res) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// trim off preceding slash &#39;/&#39;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">requestFile</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">req</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.slice</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (outputFileMap[requestFile]) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">res</span><span style="color: var(--shiki-token-function)">.send</span><span style="color: var(--shiki-color-text)">(outputFileMap[requestFile]);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">res</span><span style="color: var(--shiki-token-function)">.send</span><span style="color: var(--shiki-color-text)">(indexHtml);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.listen</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">devServerOptions</span><span style="color: var(--shiki-color-text)">.port</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#96;Dev server starts at http://localhost:</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">devServerOptions</span><span style="color: var(--shiki-color-text)">.port</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    )</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  );</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,tr,Oo,ar,kt,m,Ho,Is,nr,lr,Ts,rr,Ps,ir,pr,cr,Ae,wc=`<div class="filename">main.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> squareArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./square.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> circleArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./circle.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; createElement</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> render &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;preact&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./style.css&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">render</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">createElement</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">&#39;p&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#123;&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;p&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; class</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;square&#39;</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;area of square: &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">squareArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;p&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; class</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;circle&#39;</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;area of circle: &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circleArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">))</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  )</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.getElementById</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;root&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,hr,Oe,_c=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">/* filename: style.css */</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">.square</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">blue</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">.circle</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">red</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,kr,qo,vr,yr,He,bc=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">&lt;!-- filename: index.html --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">html</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">body</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;root&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;/</span><span style="color: var(--shiki-token-string-expression)">body</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">html</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,dr,Fo,ur,fr,jo,Q,qe,No,L,Wr,xr,Jo,mr,gr,Ro,K,Fe,Uo,D,Gr,vt,M,$o,Ms,wr,_r,Bo,br,Er,Cs,Vo,Sr,Ir,Wo,Tr,Pr,Go,Mr,Cr,Yo,Lr,yt,X,zo,Ls,Dr,Ar,Ds,Qo,As,Or,Hr,Ko,Os,qr,dt;return x=new Qc({props:{data:[{link:"before-we-begin",title:"Before we begin"},{link:"adding-html-template",title:"Adding HTML Template"},{link:"adding-css",title:"Adding CSS",nested:[{link:"loaders",title:"Loaders"}]},{link:"dev-server",title:"Dev Server"},{link:"wrap-it-up",title:"Wrap it up"},{link:"whats-next",title:"Whats next?"},{link:"references",title:"References"}]}}),{c(){Xp(x.$$.fragment),A=p(),P=o("p"),as=n("In my "),_=o("a"),O=n("previous article"),qs=n(", I showed you how I built a module bundler. With the module bundler I built, I bundled a simple Nodejs script to calculate the area for a square and a circle:"),Zo=p(),Fs=o("p"),R=o("span"),js=o("picture"),Ge=o("source"),C=o("img"),Xo=p(),Ns=o("p"),Ct=n("Today, I am going to share with y'all how I enhanced on my basic module bundler so that I can use it to bundle not just a NodeJS script, but a web application."),st=p(),Js=o("p"),Lt=n("I will be showing how I added the following features:"),et=p(),N=o("ul"),Ye=o("li"),Rs=o("a"),Dt=n("Adding HTML Template"),At=p(),ze=o("li"),Us=o("a"),Ot=n("Adding CSS"),Ht=p(),Qe=o("li"),$s=o("a"),qt=n("Provide a dev server"),ot=p(),tt=o("hr"),at=p(),Z=o("p"),Ft=n("\u26A0\uFE0F "),Ke=o("strong"),jt=n("Warning: Tons of JavaScript code ahead. \u{1F648}\u{1F631}\u{1F628}"),Nt=n(" \u26A0\uFE0F"),nt=p(),lt=o("hr"),rt=p(),b=o("section"),Ze=o("h2"),ns=o("a"),Jt=n("Before we begin"),Rt=p(),Xe=o("p"),Ut=n("I found an edge case bug in my module bundler if the module ends with a line comment, the output bundle might have a syntax error."),$t=p(),so=o("p"),Bt=n("I've fixed the bug by appending a newline character to the end of the module code:"),Vt=p(),Bs=o("div"),Wt=p(),eo=o("p"),Gt=n("\u{1F60E}"),Yt=p(),oo=o("p"),zt=n("Also, I've changed the resolver code, which used to only be able to resolve the relative path:"),Qt=p(),Vs=o("div"),Kt=p(),ls=o("p"),Zt=n("Now I can import libraries from "),Ws=o("code"),Xt=n("node_modules/"),sa=n("."),ea=p(),Gs=o("p"),to=o("em"),oa=n('Did I just said "import libraries"?'),ta=n(" \u{1F64A}"),it=p(),y=o("section"),ao=o("h2"),rs=o("a"),aa=n("Adding HTML Template"),na=p(),no=o("p"),la=n("To bundle for the web, the most important piece is to have the HTML."),ra=p(),is=o("p"),ia=n("Usually, we provide an HTML template to the module bundler. And when the module bundler finishes the bundling process, it will come up with a list of files that is required to start the application and add them into the HTML file in the form of a "),Ys=o("code"),pa=n("<script>"),ca=n(" tag."),ha=p(),lo=o("p"),ka=n("To illustrate here is the HTML template that I've prepared:"),va=p(),zs=o("div"),ya=p(),ro=o("p"),da=n("And at the end of the bundling process, the bundler generated the following files:"),ua=p(),Qs=o("div"),fa=p(),ps=o("p"),xa=n("So the "),Ks=o("code"),ma=n("bundle.js"),ga=n(" is added into the final HTML file like this:"),wa=p(),Zs=o("div"),_a=p(),io=o("blockquote"),po=o("small"),ba=n("**NOTE:** the preceding slash (`/`) allows us to always fetch the JavaScript file relative from the root path. This is extremely useful for Single Page Application (SPA), where we serve the same HTML file irrelevant to the URL path."),Ea=p(),co=o("p"),Sa=n("Code wise, it is quite straightforward to implement this:"),Ia=p(),Xs=o("div"),Ta=p(),H=o("p"),Pa=n("Here, I used a "),se=o("code"),Ma=n(".replace(END_BODY_TAG, '...' + END_BODY_TAG)"),Ca=n(" to insert the "),ee=o("code"),La=n("<script>"),Da=n(" tags before the end of the "),oe=o("code"),Aa=n("</body>"),Oa=n(" tag."),Ha=p(),ho=o("blockquote"),te=o("small"),qa=n("**Note:** Read [here](https://www.codecademy.com/forum_questions/55dee24b937676fb5e000139) to learn why it's a best practice to add `<script>` tag at the end of the `"),ko=o("body"),Fa=n("` tag."),pt=p(),u=o("section"),vo=o("h2"),cs=o("a"),ja=n("Adding CSS"),Na=p(),yo=o("p"),Ja=n("Every web app has to have CSS in one way or another."),Ra=p(),hs=o("p"),Ua=n("I added a css file and imported it from "),ae=o("code"),$a=n("index.js"),Ba=n(":"),Va=p(),ne=o("div"),Wa=p(),le=o("div"),Ga=p(),ks=o("p"),Ya=n("If I bundle my application now, I would see a "),re=o("code"),za=n("SyntaxError"),Qa=n(":"),Ka=p(),ie=o("div"),Za=p(),uo=o("p"),Xa=n("That is because I assumed all files are JavaScript files, and Babel would complain when trying to parse out the import statements."),sn=p(),q=o("p"),en=n("So, I abstracted out "),pe=o("code"),on=n("Module"),tn=n(" as a base class, and created "),ce=o("code"),an=n("JSModule"),nn=n(" and "),he=o("code"),ln=n("CSSModule"),rn=n(":"),pn=p(),ke=o("div"),cn=p(),U=o("p"),hn=n("In the "),ve=o("code"),kn=n("createModule"),vn=n(" function, I need to create different "),ye=o("code"),yn=n("Module"),dn=n(" based on the file extension:"),un=p(),de=o("div"),ct=p(),h=o("section"),fo=o("h3"),vs=o("a"),fn=n("Loaders"),xn=p(),$=o("p"),mn=n("Here I used the word "),ue=o("code"),gn=n('"LOADERS"'),wn=n(", which I borrowed from "),ys=o("a"),_n=n("webpack"),bn=n("."),En=p(),fe=o("p"),Sn=n("According to webpack, "),ds=o("em"),In=n('"'),us=o("a"),Tn=n("[loaders]"),Pn=n(' enable webpack to preprocess files, [which] allows you to bundle any static resource way beyond JavaScript."'),Mn=p(),B=o("p"),Cn=n("To take it from a different perspective, "),xo=o("strong"),Ln=n("loaders"),Dn=n(" are simple functions that transform any code into "),mo=o("strong"),An=n("browser-executable JavaScript code"),On=n("."),Hn=p(),go=o("p"),qn=n("For example, if you import a CSS file, the CSS code in the file will pass through the loader function to be transformed into JS code. So that you can import a CSS file as if you are importing a JS file."),Fn=p(),wo=o("p"),_o=o("strong"),jn=n("Wait, how are we going to transform CSS code into JS code?"),Nn=p(),V=o("p"),Jn=n("Well, one way you can do that is to make the CSS code into a string by wrapping it around with quote marks "),xe=o("code"),Rn=n("'"),Un=n(", and programmatically add the CSS code into the HTML "),me=o("code"),$n=n("<head />"),Bn=n("."),Vn=p(),bo=o("p"),Wn=n("For example, taking the following CSS code:"),Gn=p(),ge=o("div"),Yn=p(),Eo=o("p"),zn=n("and transform it into the following JS code:"),Qn=p(),we=o("div"),Kn=p(),W=o("p"),Zn=n("This is in essence what "),fs=o("a"),Xn=n("style-loader"),sl=n(" is doing, except "),_e=o("code"),el=n("style-loader"),ol=n(" does even more:"),tl=p(),G=o("ul"),So=o("li"),al=n("supports hot reloading"),nl=p(),F=o("li"),ll=n("provides different mode of injecting, "),be=o("code"),rl=n("styleTag"),il=n(", "),Ee=o("code"),pl=n("singletonStyleTag"),cl=n(", "),Se=o("code"),hl=n("linkTag"),kl=n(", ... etc."),vl=p(),Io=o("li"),yl=n("provides different points in dom for injecting the style tag."),dl=p(),To=o("p"),Po=o("strong"),ul=n('Did I mentioned "browser-executable JavaScript code"?'),fl=p(),xs=o("p"),xl=n("Yes, not all JavaScript code is executable in a browser if you are using next-generation syntaxes or constructs that is not yet available in the browser. That's why you need "),ms=o("a"),ml=n("babel-loader"),gl=n(" for your JavaScript files, to make sure they can be run in all supported browsers."),wl=p(),_l=o("hr"),bl=p(),gs=o("p"),El=n("So, I implemented the loader transform in CSSModule with "),ws=o("a"),Sl=n("template literals"),Il=n(":"),Tl=p(),Ie=o("div"),ht=p(),E=o("section"),Mo=o("h2"),_s=o("a"),Pl=n("Dev Server"),Ml=p(),Co=o("p"),Cl=n("Dev server is a default feature for frontend build tools nowadays, it's common feature are:"),Ll=p(),Y=o("ul"),Lo=o("li"),Dl=n("Serving generated assets, assets can be either served from the filesystem or in memory"),Al=p(),Do=o("li"),Ol=n("Supports watch mode, reloading and hot module replacement"),Hl=p(),Ao=o("li"),ql=n("Act as a proxy to external APIs"),Fl=p(),bs=o("p"),jl=n("In this post, I will show you how I created a basic dev server using "),Es=o("a"),Nl=n("Express"),Jl=n(" for serving the generated assets in memory, we will discuss the watch mode in the future post."),Rl=p(),j=o("p"),Ul=n("I abstracted out the "),Te=o("code"),$l=n("_build"),Bl=n(" function and supports both "),Pe=o("code"),Vl=n("build"),Wl=n(" and "),Me=o("code"),Gl=n("dev"),Yl=n(" mode."),zl=p(),Ce=o("div"),Ql=p(),z=o("p"),Kl=n("In "),Le=o("code"),Zl=n("dev"),Xl=n(" mode, I did not write files to the file system, instead I served them directly through the "),Ss=o("a"),sr=n("Express"),er=n(" server:"),or=p(),De=o("div"),tr=p(),Oo=o("p"),ar=n("And that's it. You have a basic dev server that serves the bundled files!"),kt=p(),m=o("section"),Ho=o("h2"),Is=o("a"),nr=n("Wrap it up"),lr=p(),Ts=o("p"),rr=n("I've added "),Ps=o("a"),ir=n("Preact"),pr=n(" and CSS into my app:"),cr=p(),Ae=o("div"),hr=p(),Oe=o("div"),kr=p(),qo=o("p"),vr=n("And also an HTML template:"),yr=p(),He=o("div"),dr=p(),Fo=o("p"),ur=n("Starting my bundler:"),fr=p(),jo=o("p"),Q=o("span"),qe=o("picture"),No=o("source"),L=o("img"),xr=p(),Jo=o("p"),mr=n("And voila!"),gr=p(),Ro=o("p"),K=o("span"),Fe=o("picture"),Uo=o("source"),D=o("img"),vt=p(),M=o("section"),$o=o("h2"),Ms=o("a"),wr=n("Whats next?"),_r=p(),Bo=o("p"),br=n("I have promised in my previous post, features that I will implement:"),Er=p(),Cs=o("ul"),Vo=o("li"),Sr=n("code splitting"),Ir=p(),Wo=o("li"),Tr=n("watch mode"),Pr=p(),Go=o("p"),Mr=n("and yes, I will implement them!"),Cr=p(),Yo=o("p"),Lr=n("Till then. Cheers. \u{1F60E}"),yt=p(),X=o("section"),zo=o("h2"),Ls=o("a"),Dr=n("References"),Ar=p(),Ds=o("ul"),Qo=o("li"),As=o("a"),Or=n("Webpack Dev Server"),Hr=p(),Ko=o("li"),Os=o("a"),qr=n("style-loader"),this.h()},l(r){sc(x.$$.fragment,r),A=c(r),P=t(r,"P",{});var k=a(P);as=l(k,"In my "),_=t(k,"A",{href:!0});var Yr=a(_);O=l(Yr,"previous article"),Yr.forEach(e),qs=l(k,", I showed you how I built a module bundler. With the module bundler I built, I bundled a simple Nodejs script to calculate the area for a square and a circle:"),k.forEach(e),Zo=c(r),Fs=t(r,"P",{});var zr=a(Fs);R=t(zr,"SPAN",{style:!0});var Qr=a(R);js=t(Qr,"PICTURE",{});var Fr=a(js);Ge=t(Fr,"SOURCE",{type:!0,srcset:!0}),C=t(Fr,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),Fr.forEach(e),Qr.forEach(e),zr.forEach(e),Xo=c(r),Ns=t(r,"P",{});var Kr=a(Ns);Ct=l(Kr,"Today, I am going to share with y'all how I enhanced on my basic module bundler so that I can use it to bundle not just a NodeJS script, but a web application."),Kr.forEach(e),st=c(r),Js=t(r,"P",{});var Zr=a(Js);Lt=l(Zr,"I will be showing how I added the following features:"),Zr.forEach(e),et=c(r),N=t(r,"UL",{});var je=a(N);Ye=t(je,"LI",{});var Xr=a(Ye);Rs=t(Xr,"A",{href:!0});var si=a(Rs);Dt=l(si,"Adding HTML Template"),si.forEach(e),Xr.forEach(e),At=c(je),ze=t(je,"LI",{});var ei=a(ze);Us=t(ei,"A",{href:!0});var oi=a(Us);Ot=l(oi,"Adding CSS"),oi.forEach(e),ei.forEach(e),Ht=c(je),Qe=t(je,"LI",{});var ti=a(Qe);$s=t(ti,"A",{href:!0});var ai=a($s);qt=l(ai,"Provide a dev server"),ai.forEach(e),ti.forEach(e),je.forEach(e),ot=c(r),tt=t(r,"HR",{}),at=c(r),Z=t(r,"P",{});var ut=a(Z);Ft=l(ut,"\u26A0\uFE0F "),Ke=t(ut,"STRONG",{});var ni=a(Ke);jt=l(ni,"Warning: Tons of JavaScript code ahead. \u{1F648}\u{1F631}\u{1F628}"),ni.forEach(e),Nt=l(ut," \u26A0\uFE0F"),ut.forEach(e),nt=c(r),lt=t(r,"HR",{}),rt=c(r),b=t(r,"SECTION",{});var I=a(b);Ze=t(I,"H2",{});var li=a(Ze);ns=t(li,"A",{href:!0,id:!0});var ri=a(ns);Jt=l(ri,"Before we begin"),ri.forEach(e),li.forEach(e),Rt=c(I),Xe=t(I,"P",{});var ii=a(Xe);Ut=l(ii,"I found an edge case bug in my module bundler if the module ends with a line comment, the output bundle might have a syntax error."),ii.forEach(e),$t=c(I),so=t(I,"P",{});var pi=a(so);Bt=l(pi,"I've fixed the bug by appending a newline character to the end of the module code:"),pi.forEach(e),Vt=c(I),Bs=t(I,"DIV",{class:!0});var Ec=a(Bs);Ec.forEach(e),Wt=c(I),eo=t(I,"P",{});var ci=a(eo);Gt=l(ci,"\u{1F60E}"),ci.forEach(e),Yt=c(I),oo=t(I,"P",{});var hi=a(oo);zt=l(hi,"Also, I've changed the resolver code, which used to only be able to resolve the relative path:"),hi.forEach(e),Qt=c(I),Vs=t(I,"DIV",{class:!0});var Sc=a(Vs);Sc.forEach(e),Kt=c(I),ls=t(I,"P",{});var ft=a(ls);Zt=l(ft,"Now I can import libraries from "),Ws=t(ft,"CODE",{class:!0});var ki=a(Ws);Xt=l(ki,"node_modules/"),ki.forEach(e),sa=l(ft,"."),ft.forEach(e),ea=c(I),Gs=t(I,"P",{});var jr=a(Gs);to=t(jr,"EM",{});var vi=a(to);oa=l(vi,'Did I just said "import libraries"?'),vi.forEach(e),ta=l(jr," \u{1F64A}"),jr.forEach(e),I.forEach(e),it=c(r),y=t(r,"SECTION",{});var f=a(y);ao=t(f,"H2",{});var yi=a(ao);rs=t(yi,"A",{href:!0,id:!0});var di=a(rs);aa=l(di,"Adding HTML Template"),di.forEach(e),yi.forEach(e),na=c(f),no=t(f,"P",{});var ui=a(no);la=l(ui,"To bundle for the web, the most important piece is to have the HTML."),ui.forEach(e),ra=c(f),is=t(f,"P",{});var xt=a(is);ia=l(xt,"Usually, we provide an HTML template to the module bundler. And when the module bundler finishes the bundling process, it will come up with a list of files that is required to start the application and add them into the HTML file in the form of a "),Ys=t(xt,"CODE",{class:!0});var fi=a(Ys);pa=l(fi,"<script>"),fi.forEach(e),ca=l(xt," tag."),xt.forEach(e),ha=c(f),lo=t(f,"P",{});var xi=a(lo);ka=l(xi,"To illustrate here is the HTML template that I've prepared:"),xi.forEach(e),va=c(f),zs=t(f,"DIV",{class:!0});var Ic=a(zs);Ic.forEach(e),ya=c(f),ro=t(f,"P",{});var mi=a(ro);da=l(mi,"And at the end of the bundling process, the bundler generated the following files:"),mi.forEach(e),ua=c(f),Qs=t(f,"DIV",{class:!0});var Tc=a(Qs);Tc.forEach(e),fa=c(f),ps=t(f,"P",{});var mt=a(ps);xa=l(mt,"So the "),Ks=t(mt,"CODE",{class:!0});var gi=a(Ks);ma=l(gi,"bundle.js"),gi.forEach(e),ga=l(mt," is added into the final HTML file like this:"),mt.forEach(e),wa=c(f),Zs=t(f,"DIV",{class:!0});var Pc=a(Zs);Pc.forEach(e),_a=c(f),io=t(f,"BLOCKQUOTE",{});var wi=a(io);po=t(wi,"SMALL",{});var _i=a(po);ba=l(_i,"**NOTE:** the preceding slash (`/`) allows us to always fetch the JavaScript file relative from the root path. This is extremely useful for Single Page Application (SPA), where we serve the same HTML file irrelevant to the URL path."),_i.forEach(e),wi.forEach(e),Ea=c(f),co=t(f,"P",{});var bi=a(co);Sa=l(bi,"Code wise, it is quite straightforward to implement this:"),bi.forEach(e),Ia=c(f),Xs=t(f,"DIV",{class:!0});var Mc=a(Xs);Mc.forEach(e),Ta=c(f),H=t(f,"P",{});var ss=a(H);Pa=l(ss,"Here, I used a "),se=t(ss,"CODE",{class:!0});var Ei=a(se);Ma=l(Ei,".replace(END_BODY_TAG, '...' + END_BODY_TAG)"),Ei.forEach(e),Ca=l(ss," to insert the "),ee=t(ss,"CODE",{class:!0});var Si=a(ee);La=l(Si,"<script>"),Si.forEach(e),Da=l(ss," tags before the end of the "),oe=t(ss,"CODE",{class:!0});var Ii=a(oe);Aa=l(Ii,"</body>"),Ii.forEach(e),Oa=l(ss," tag."),ss.forEach(e),Ha=c(f),ho=t(f,"BLOCKQUOTE",{});var Ti=a(ho);te=t(Ti,"SMALL",{});var Nr=a(te);qa=l(Nr,"**Note:** Read [here](https://www.codecademy.com/forum_questions/55dee24b937676fb5e000139) to learn why it's a best practice to add `<script>` tag at the end of the `"),ko=t(Nr,"BODY",{});var Pi=a(ko);Fa=l(Pi,"` tag."),Pi.forEach(e),Nr.forEach(e),Ti.forEach(e),f.forEach(e),pt=c(r),u=t(r,"SECTION",{});var g=a(u);vo=t(g,"H2",{});var Mi=a(vo);cs=t(Mi,"A",{href:!0,id:!0});var Ci=a(cs);ja=l(Ci,"Adding CSS"),Ci.forEach(e),Mi.forEach(e),Na=c(g),yo=t(g,"P",{});var Li=a(yo);Ja=l(Li,"Every web app has to have CSS in one way or another."),Li.forEach(e),Ra=c(g),hs=t(g,"P",{});var gt=a(hs);Ua=l(gt,"I added a css file and imported it from "),ae=t(gt,"CODE",{class:!0});var Di=a(ae);$a=l(Di,"index.js"),Di.forEach(e),Ba=l(gt,":"),gt.forEach(e),Va=c(g),ne=t(g,"DIV",{class:!0});var Cc=a(ne);Cc.forEach(e),Wa=c(g),le=t(g,"DIV",{class:!0});var Lc=a(le);Lc.forEach(e),Ga=c(g),ks=t(g,"P",{});var wt=a(ks);Ya=l(wt,"If I bundle my application now, I would see a "),re=t(wt,"CODE",{class:!0});var Ai=a(re);za=l(Ai,"SyntaxError"),Ai.forEach(e),Qa=l(wt,":"),wt.forEach(e),Ka=c(g),ie=t(g,"DIV",{class:!0});var Dc=a(ie);Dc.forEach(e),Za=c(g),uo=t(g,"P",{});var Oi=a(uo);Xa=l(Oi,"That is because I assumed all files are JavaScript files, and Babel would complain when trying to parse out the import statements."),Oi.forEach(e),sn=c(g),q=t(g,"P",{});var es=a(q);en=l(es,"So, I abstracted out "),pe=t(es,"CODE",{class:!0});var Hi=a(pe);on=l(Hi,"Module"),Hi.forEach(e),tn=l(es," as a base class, and created "),ce=t(es,"CODE",{class:!0});var qi=a(ce);an=l(qi,"JSModule"),qi.forEach(e),nn=l(es," and "),he=t(es,"CODE",{class:!0});var Fi=a(he);ln=l(Fi,"CSSModule"),Fi.forEach(e),rn=l(es,":"),es.forEach(e),pn=c(g),ke=t(g,"DIV",{class:!0});var Ac=a(ke);Ac.forEach(e),cn=c(g),U=t(g,"P",{});var Ne=a(U);hn=l(Ne,"In the "),ve=t(Ne,"CODE",{class:!0});var ji=a(ve);kn=l(ji,"createModule"),ji.forEach(e),vn=l(Ne," function, I need to create different "),ye=t(Ne,"CODE",{class:!0});var Ni=a(ye);yn=l(Ni,"Module"),Ni.forEach(e),dn=l(Ne," based on the file extension:"),Ne.forEach(e),un=c(g),de=t(g,"DIV",{class:!0});var Oc=a(de);Oc.forEach(e),g.forEach(e),ct=c(r),h=t(r,"SECTION",{});var v=a(h);fo=t(v,"H3",{});var Ji=a(fo);vs=t(Ji,"A",{href:!0,id:!0});var Ri=a(vs);fn=l(Ri,"Loaders"),Ri.forEach(e),Ji.forEach(e),xn=c(v),$=t(v,"P",{});var Je=a($);mn=l(Je,"Here I used the word "),ue=t(Je,"CODE",{class:!0});var Ui=a(ue);gn=l(Ui,'"LOADERS"'),Ui.forEach(e),wn=l(Je,", which I borrowed from "),ys=t(Je,"A",{href:!0,rel:!0});var $i=a(ys);_n=l($i,"webpack"),$i.forEach(e),bn=l(Je,"."),Je.forEach(e),En=c(v),fe=t(v,"P",{});var Jr=a(fe);Sn=l(Jr,"According to webpack, "),ds=t(Jr,"EM",{});var _t=a(ds);In=l(_t,'"'),us=t(_t,"A",{href:!0,rel:!0});var Bi=a(us);Tn=l(Bi,"[loaders]"),Bi.forEach(e),Pn=l(_t,' enable webpack to preprocess files, [which] allows you to bundle any static resource way beyond JavaScript."'),_t.forEach(e),Jr.forEach(e),Mn=c(v),B=t(v,"P",{});var Re=a(B);Cn=l(Re,"To take it from a different perspective, "),xo=t(Re,"STRONG",{});var Vi=a(xo);Ln=l(Vi,"loaders"),Vi.forEach(e),Dn=l(Re," are simple functions that transform any code into "),mo=t(Re,"STRONG",{});var Wi=a(mo);An=l(Wi,"browser-executable JavaScript code"),Wi.forEach(e),On=l(Re,"."),Re.forEach(e),Hn=c(v),go=t(v,"P",{});var Gi=a(go);qn=l(Gi,"For example, if you import a CSS file, the CSS code in the file will pass through the loader function to be transformed into JS code. So that you can import a CSS file as if you are importing a JS file."),Gi.forEach(e),Fn=c(v),wo=t(v,"P",{});var Yi=a(wo);_o=t(Yi,"STRONG",{});var zi=a(_o);jn=l(zi,"Wait, how are we going to transform CSS code into JS code?"),zi.forEach(e),Yi.forEach(e),Nn=c(v),V=t(v,"P",{});var Ue=a(V);Jn=l(Ue,"Well, one way you can do that is to make the CSS code into a string by wrapping it around with quote marks "),xe=t(Ue,"CODE",{class:!0});var Qi=a(xe);Rn=l(Qi,"'"),Qi.forEach(e),Un=l(Ue,", and programmatically add the CSS code into the HTML "),me=t(Ue,"CODE",{class:!0});var Ki=a(me);$n=l(Ki,"<head />"),Ki.forEach(e),Bn=l(Ue,"."),Ue.forEach(e),Vn=c(v),bo=t(v,"P",{});var Zi=a(bo);Wn=l(Zi,"For example, taking the following CSS code:"),Zi.forEach(e),Gn=c(v),ge=t(v,"DIV",{class:!0});var Hc=a(ge);Hc.forEach(e),Yn=c(v),Eo=t(v,"P",{});var Xi=a(Eo);zn=l(Xi,"and transform it into the following JS code:"),Xi.forEach(e),Qn=c(v),we=t(v,"DIV",{class:!0});var qc=a(we);qc.forEach(e),Kn=c(v),W=t(v,"P",{});var $e=a(W);Zn=l($e,"This is in essence what "),fs=t($e,"A",{href:!0,rel:!0});var sp=a(fs);Xn=l(sp,"style-loader"),sp.forEach(e),sl=l($e," is doing, except "),_e=t($e,"CODE",{class:!0});var ep=a(_e);el=l(ep,"style-loader"),ep.forEach(e),ol=l($e," does even more:"),$e.forEach(e),tl=c(v),G=t(v,"UL",{});var Be=a(G);So=t(Be,"LI",{});var op=a(So);al=l(op,"supports hot reloading"),op.forEach(e),nl=c(Be),F=t(Be,"LI",{});var os=a(F);ll=l(os,"provides different mode of injecting, "),be=t(os,"CODE",{class:!0});var tp=a(be);rl=l(tp,"styleTag"),tp.forEach(e),il=l(os,", "),Ee=t(os,"CODE",{class:!0});var ap=a(Ee);pl=l(ap,"singletonStyleTag"),ap.forEach(e),cl=l(os,", "),Se=t(os,"CODE",{class:!0});var np=a(Se);hl=l(np,"linkTag"),np.forEach(e),kl=l(os,", ... etc."),os.forEach(e),vl=c(Be),Io=t(Be,"LI",{});var lp=a(Io);yl=l(lp,"provides different points in dom for injecting the style tag."),lp.forEach(e),Be.forEach(e),dl=c(v),To=t(v,"P",{});var rp=a(To);Po=t(rp,"STRONG",{});var ip=a(Po);ul=l(ip,'Did I mentioned "browser-executable JavaScript code"?'),ip.forEach(e),rp.forEach(e),fl=c(v),xs=t(v,"P",{});var bt=a(xs);xl=l(bt,"Yes, not all JavaScript code is executable in a browser if you are using next-generation syntaxes or constructs that is not yet available in the browser. That's why you need "),ms=t(bt,"A",{href:!0,rel:!0});var pp=a(ms);ml=l(pp,"babel-loader"),pp.forEach(e),gl=l(bt," for your JavaScript files, to make sure they can be run in all supported browsers."),bt.forEach(e),wl=c(v),_l=t(v,"HR",{}),bl=c(v),gs=t(v,"P",{});var Et=a(gs);El=l(Et,"So, I implemented the loader transform in CSSModule with "),ws=t(Et,"A",{href:!0,rel:!0});var cp=a(ws);Sl=l(cp,"template literals"),cp.forEach(e),Il=l(Et,":"),Et.forEach(e),Tl=c(v),Ie=t(v,"DIV",{class:!0});var Fc=a(Ie);Fc.forEach(e),v.forEach(e),ht=c(r),E=t(r,"SECTION",{});var T=a(E);Mo=t(T,"H2",{});var hp=a(Mo);_s=t(hp,"A",{href:!0,id:!0});var kp=a(_s);Pl=l(kp,"Dev Server"),kp.forEach(e),hp.forEach(e),Ml=c(T),Co=t(T,"P",{});var vp=a(Co);Cl=l(vp,"Dev server is a default feature for frontend build tools nowadays, it's common feature are:"),vp.forEach(e),Ll=c(T),Y=t(T,"UL",{});var Ve=a(Y);Lo=t(Ve,"LI",{});var yp=a(Lo);Dl=l(yp,"Serving generated assets, assets can be either served from the filesystem or in memory"),yp.forEach(e),Al=c(Ve),Do=t(Ve,"LI",{});var dp=a(Do);Ol=l(dp,"Supports watch mode, reloading and hot module replacement"),dp.forEach(e),Hl=c(Ve),Ao=t(Ve,"LI",{});var up=a(Ao);ql=l(up,"Act as a proxy to external APIs"),up.forEach(e),Ve.forEach(e),Fl=c(T),bs=t(T,"P",{});var St=a(bs);jl=l(St,"In this post, I will show you how I created a basic dev server using "),Es=t(St,"A",{href:!0,rel:!0});var fp=a(Es);Nl=l(fp,"Express"),fp.forEach(e),Jl=l(St," for serving the generated assets in memory, we will discuss the watch mode in the future post."),St.forEach(e),Rl=c(T),j=t(T,"P",{});var ts=a(j);Ul=l(ts,"I abstracted out the "),Te=t(ts,"CODE",{class:!0});var xp=a(Te);$l=l(xp,"_build"),xp.forEach(e),Bl=l(ts," function and supports both "),Pe=t(ts,"CODE",{class:!0});var mp=a(Pe);Vl=l(mp,"build"),mp.forEach(e),Wl=l(ts," and "),Me=t(ts,"CODE",{class:!0});var gp=a(Me);Gl=l(gp,"dev"),gp.forEach(e),Yl=l(ts," mode."),ts.forEach(e),zl=c(T),Ce=t(T,"DIV",{class:!0});var jc=a(Ce);jc.forEach(e),Ql=c(T),z=t(T,"P",{});var We=a(z);Kl=l(We,"In "),Le=t(We,"CODE",{class:!0});var wp=a(Le);Zl=l(wp,"dev"),wp.forEach(e),Xl=l(We," mode, I did not write files to the file system, instead I served them directly through the "),Ss=t(We,"A",{href:!0,rel:!0});var _p=a(Ss);sr=l(_p,"Express"),_p.forEach(e),er=l(We," server:"),We.forEach(e),or=c(T),De=t(T,"DIV",{class:!0});var Nc=a(De);Nc.forEach(e),tr=c(T),Oo=t(T,"P",{});var bp=a(Oo);ar=l(bp,"And that's it. You have a basic dev server that serves the bundled files!"),bp.forEach(e),T.forEach(e),kt=c(r),m=t(r,"SECTION",{});var S=a(m);Ho=t(S,"H2",{});var Ep=a(Ho);Is=t(Ep,"A",{href:!0,id:!0});var Sp=a(Is);nr=l(Sp,"Wrap it up"),Sp.forEach(e),Ep.forEach(e),lr=c(S),Ts=t(S,"P",{});var It=a(Ts);rr=l(It,"I've added "),Ps=t(It,"A",{href:!0,rel:!0});var Ip=a(Ps);ir=l(Ip,"Preact"),Ip.forEach(e),pr=l(It," and CSS into my app:"),It.forEach(e),cr=c(S),Ae=t(S,"DIV",{class:!0});var Jc=a(Ae);Jc.forEach(e),hr=c(S),Oe=t(S,"DIV",{class:!0});var Rc=a(Oe);Rc.forEach(e),kr=c(S),qo=t(S,"P",{});var Tp=a(qo);vr=l(Tp,"And also an HTML template:"),Tp.forEach(e),yr=c(S),He=t(S,"DIV",{class:!0});var Uc=a(He);Uc.forEach(e),dr=c(S),Fo=t(S,"P",{});var Pp=a(Fo);ur=l(Pp,"Starting my bundler:"),Pp.forEach(e),fr=c(S),jo=t(S,"P",{});var Mp=a(jo);Q=t(Mp,"SPAN",{style:!0});var Cp=a(Q);qe=t(Cp,"PICTURE",{});var Rr=a(qe);No=t(Rr,"SOURCE",{type:!0,srcset:!0}),L=t(Rr,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),Rr.forEach(e),Cp.forEach(e),Mp.forEach(e),xr=c(S),Jo=t(S,"P",{});var Lp=a(Jo);mr=l(Lp,"And voila!"),Lp.forEach(e),gr=c(S),Ro=t(S,"P",{});var Dp=a(Ro);K=t(Dp,"SPAN",{style:!0});var Ap=a(K);Fe=t(Ap,"PICTURE",{});var Ur=a(Fe);Uo=t(Ur,"SOURCE",{type:!0,srcset:!0}),D=t(Ur,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),Ur.forEach(e),Ap.forEach(e),Dp.forEach(e),S.forEach(e),vt=c(r),M=t(r,"SECTION",{});var J=a(M);$o=t(J,"H2",{});var Op=a($o);Ms=t(Op,"A",{href:!0,id:!0});var Hp=a(Ms);wr=l(Hp,"Whats next?"),Hp.forEach(e),Op.forEach(e),_r=c(J),Bo=t(J,"P",{});var qp=a(Bo);br=l(qp,"I have promised in my previous post, features that I will implement:"),qp.forEach(e),Er=c(J),Cs=t(J,"UL",{});var Tt=a(Cs);Vo=t(Tt,"LI",{});var Fp=a(Vo);Sr=l(Fp,"code splitting"),Fp.forEach(e),Ir=c(Tt),Wo=t(Tt,"LI",{});var jp=a(Wo);Tr=l(jp,"watch mode"),jp.forEach(e),Tt.forEach(e),Pr=c(J),Go=t(J,"P",{});var Np=a(Go);Mr=l(Np,"and yes, I will implement them!"),Np.forEach(e),Cr=c(J),Yo=t(J,"P",{});var Jp=a(Yo);Lr=l(Jp,"Till then. Cheers. \u{1F60E}"),Jp.forEach(e),J.forEach(e),yt=c(r),X=t(r,"SECTION",{});var Pt=a(X);zo=t(Pt,"H2",{});var Rp=a(zo);Ls=t(Rp,"A",{href:!0,id:!0});var Up=a(Ls);Dr=l(Up,"References"),Up.forEach(e),Rp.forEach(e),Ar=c(Pt),Ds=t(Pt,"UL",{});var Mt=a(Ds);Qo=t(Mt,"LI",{});var $p=a(Qo);As=t($p,"A",{href:!0,rel:!0});var Bp=a(As);Or=l(Bp,"Webpack Dev Server"),Bp.forEach(e),$p.forEach(e),Hr=c(Mt),Ko=t(Mt,"LI",{});var Vp=a(Ko);Os=t(Vp,"A",{href:!0,rel:!0});var Wp=a(Os);qr=l(Wp,"style-loader"),Wp.forEach(e),Vp.forEach(e),Mt.forEach(e),Pt.forEach(e),this.h()},h(){i(_,"href","/i-wrote-my-module-bundler/"),i(Ge,"type","image/webp"),i(Ge,"srcset",ah+", "+th+" 2x"),$r(C.src,Vr=Kp)||i(C,"src",Vr),i(C,"srcset",Kp+", "+nh+" 2x"),i(C,"loading","lazy"),w(C,"position","absolute"),w(C,"top","0"),w(C,"width","100%"),w(C,"height","100%"),i(C,"alt","bundled code demo"),w(R,"display","block"),w(R,"position","relative"),w(R,"padding-top","17.949%"),w(R,"width","100%"),i(Rs,"href","#adding-html-template"),i(Us,"href","#adding-css"),i($s,"href","#dev-server"),i(ns,"href","#before-we-begin"),i(ns,"id","before-we-begin"),i(Bs,"class","code-section"),i(Vs,"class","code-section"),i(Ws,"class","inline"),i(rs,"href","#adding-html-template"),i(rs,"id","adding-html-template"),i(Ys,"class","inline"),i(zs,"class","code-section"),i(Qs,"class","code-section"),i(Ks,"class","inline"),i(Zs,"class","code-section"),i(Xs,"class","code-section"),i(se,"class","inline"),i(ee,"class","inline"),i(oe,"class","inline"),i(cs,"href","#adding-css"),i(cs,"id","adding-css"),i(ae,"class","inline"),i(ne,"class","code-section"),i(le,"class","code-section"),i(re,"class","inline"),i(ie,"class","code-section"),i(pe,"class","inline"),i(ce,"class","inline"),i(he,"class","inline"),i(ke,"class","code-section"),i(ve,"class","inline"),i(ye,"class","inline"),i(de,"class","code-section"),i(vs,"href","#loaders"),i(vs,"id","loaders"),i(ue,"class","inline"),i(ys,"href","https://webpack.js.org/loaders/"),i(ys,"rel","nofollow"),i(us,"href","https://webpack.js.org/loaders/"),i(us,"rel","nofollow"),i(xe,"class","inline"),i(me,"class","inline"),i(ge,"class","code-section"),i(we,"class","code-section"),i(fs,"href","https://github.com/webpack-contrib/style-loader"),i(fs,"rel","nofollow"),i(_e,"class","inline"),i(be,"class","inline"),i(Ee,"class","inline"),i(Se,"class","inline"),i(ms,"href","https://github.com/babel/babel-loader"),i(ms,"rel","nofollow"),i(ws,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"),i(ws,"rel","nofollow"),i(Ie,"class","code-section"),i(_s,"href","#dev-server"),i(_s,"id","dev-server"),i(Es,"href","https://expressjs.com"),i(Es,"rel","nofollow"),i(Te,"class","inline"),i(Pe,"class","inline"),i(Me,"class","inline"),i(Ce,"class","code-section"),i(Le,"class","inline"),i(Ss,"href","https://expressjs.com"),i(Ss,"rel","nofollow"),i(De,"class","code-section"),i(Is,"href","#wrap-it-up"),i(Is,"id","wrap-it-up"),i(Ps,"href","https://preactjs.com/"),i(Ps,"rel","nofollow"),i(Ae,"class","code-section"),i(Oe,"class","code-section"),i(He,"class","code-section"),i(No,"type","image/webp"),i(No,"srcset",eh+", "+sh+" 2x"),$r(L.src,Wr=Qp)||i(L,"src",Wr),i(L,"srcset",Qp+", "+oh+" 2x"),i(L,"loading","lazy"),w(L,"position","absolute"),w(L,"top","0"),w(L,"width","100%"),w(L,"height","100%"),i(L,"alt","Running bundler + dev server"),w(Q,"display","block"),w(Q,"position","relative"),w(Q,"padding-top","9.486%"),w(Q,"width","100%"),i(Uo,"type","image/webp"),i(Uo,"srcset",Zc+", "+Kc+" 2x"),$r(D.src,Gr=zp)||i(D,"src",Gr),i(D,"srcset",zp+", "+Xc+" 2x"),i(D,"loading","lazy"),w(D,"position","absolute"),w(D,"top","0"),w(D,"width","100%"),w(D,"height","100%"),i(D,"alt","Served results"),w(K,"display","block"),w(K,"position","relative"),w(K,"padding-top","62.409%"),w(K,"width","100%"),i(Ms,"href","#whats-next"),i(Ms,"id","whats-next"),i(Ls,"href","#references"),i(Ls,"id","references"),i(As,"href","https://github.com/webpack/webpack-dev-server"),i(As,"rel","nofollow"),i(Os,"href","https://github.com/webpack-contrib/style-loader"),i(Os,"rel","nofollow")},m(r,k){ec(x,r,k),d(r,A,k),d(r,P,k),s(P,as),s(P,_),s(_,O),s(P,qs),d(r,Zo,k),d(r,Fs,k),s(Fs,R),s(R,js),s(js,Ge),s(js,C),d(r,Xo,k),d(r,Ns,k),s(Ns,Ct),d(r,st,k),d(r,Js,k),s(Js,Lt),d(r,et,k),d(r,N,k),s(N,Ye),s(Ye,Rs),s(Rs,Dt),s(N,At),s(N,ze),s(ze,Us),s(Us,Ot),s(N,Ht),s(N,Qe),s(Qe,$s),s($s,qt),d(r,ot,k),d(r,tt,k),d(r,at,k),d(r,Z,k),s(Z,Ft),s(Z,Ke),s(Ke,jt),s(Z,Nt),d(r,nt,k),d(r,lt,k),d(r,rt,k),d(r,b,k),s(b,Ze),s(Ze,ns),s(ns,Jt),s(b,Rt),s(b,Xe),s(Xe,Ut),s(b,$t),s(b,so),s(so,Bt),s(b,Vt),s(b,Bs),Bs.innerHTML=nc,s(b,Wt),s(b,eo),s(eo,Gt),s(b,Yt),s(b,oo),s(oo,zt),s(b,Qt),s(b,Vs),Vs.innerHTML=lc,s(b,Kt),s(b,ls),s(ls,Zt),s(ls,Ws),s(Ws,Xt),s(ls,sa),s(b,ea),s(b,Gs),s(Gs,to),s(to,oa),s(Gs,ta),d(r,it,k),d(r,y,k),s(y,ao),s(ao,rs),s(rs,aa),s(y,na),s(y,no),s(no,la),s(y,ra),s(y,is),s(is,ia),s(is,Ys),s(Ys,pa),s(is,ca),s(y,ha),s(y,lo),s(lo,ka),s(y,va),s(y,zs),zs.innerHTML=rc,s(y,ya),s(y,ro),s(ro,da),s(y,ua),s(y,Qs),Qs.innerHTML=ic,s(y,fa),s(y,ps),s(ps,xa),s(ps,Ks),s(Ks,ma),s(ps,ga),s(y,wa),s(y,Zs),Zs.innerHTML=pc,s(y,_a),s(y,io),s(io,po),s(po,ba),s(y,Ea),s(y,co),s(co,Sa),s(y,Ia),s(y,Xs),Xs.innerHTML=cc,s(y,Ta),s(y,H),s(H,Pa),s(H,se),s(se,Ma),s(H,Ca),s(H,ee),s(ee,La),s(H,Da),s(H,oe),s(oe,Aa),s(H,Oa),s(y,Ha),s(y,ho),s(ho,te),s(te,qa),s(te,ko),s(ko,Fa),d(r,pt,k),d(r,u,k),s(u,vo),s(vo,cs),s(cs,ja),s(u,Na),s(u,yo),s(yo,Ja),s(u,Ra),s(u,hs),s(hs,Ua),s(hs,ae),s(ae,$a),s(hs,Ba),s(u,Va),s(u,ne),ne.innerHTML=hc,s(u,Wa),s(u,le),le.innerHTML=kc,s(u,Ga),s(u,ks),s(ks,Ya),s(ks,re),s(re,za),s(ks,Qa),s(u,Ka),s(u,ie),ie.innerHTML=vc,s(u,Za),s(u,uo),s(uo,Xa),s(u,sn),s(u,q),s(q,en),s(q,pe),s(pe,on),s(q,tn),s(q,ce),s(ce,an),s(q,nn),s(q,he),s(he,ln),s(q,rn),s(u,pn),s(u,ke),ke.innerHTML=yc,s(u,cn),s(u,U),s(U,hn),s(U,ve),s(ve,kn),s(U,vn),s(U,ye),s(ye,yn),s(U,dn),s(u,un),s(u,de),de.innerHTML=dc,d(r,ct,k),d(r,h,k),s(h,fo),s(fo,vs),s(vs,fn),s(h,xn),s(h,$),s($,mn),s($,ue),s(ue,gn),s($,wn),s($,ys),s(ys,_n),s($,bn),s(h,En),s(h,fe),s(fe,Sn),s(fe,ds),s(ds,In),s(ds,us),s(us,Tn),s(ds,Pn),s(h,Mn),s(h,B),s(B,Cn),s(B,xo),s(xo,Ln),s(B,Dn),s(B,mo),s(mo,An),s(B,On),s(h,Hn),s(h,go),s(go,qn),s(h,Fn),s(h,wo),s(wo,_o),s(_o,jn),s(h,Nn),s(h,V),s(V,Jn),s(V,xe),s(xe,Rn),s(V,Un),s(V,me),s(me,$n),s(V,Bn),s(h,Vn),s(h,bo),s(bo,Wn),s(h,Gn),s(h,ge),ge.innerHTML=uc,s(h,Yn),s(h,Eo),s(Eo,zn),s(h,Qn),s(h,we),we.innerHTML=fc,s(h,Kn),s(h,W),s(W,Zn),s(W,fs),s(fs,Xn),s(W,sl),s(W,_e),s(_e,el),s(W,ol),s(h,tl),s(h,G),s(G,So),s(So,al),s(G,nl),s(G,F),s(F,ll),s(F,be),s(be,rl),s(F,il),s(F,Ee),s(Ee,pl),s(F,cl),s(F,Se),s(Se,hl),s(F,kl),s(G,vl),s(G,Io),s(Io,yl),s(h,dl),s(h,To),s(To,Po),s(Po,ul),s(h,fl),s(h,xs),s(xs,xl),s(xs,ms),s(ms,ml),s(xs,gl),s(h,wl),s(h,_l),s(h,bl),s(h,gs),s(gs,El),s(gs,ws),s(ws,Sl),s(gs,Il),s(h,Tl),s(h,Ie),Ie.innerHTML=xc,d(r,ht,k),d(r,E,k),s(E,Mo),s(Mo,_s),s(_s,Pl),s(E,Ml),s(E,Co),s(Co,Cl),s(E,Ll),s(E,Y),s(Y,Lo),s(Lo,Dl),s(Y,Al),s(Y,Do),s(Do,Ol),s(Y,Hl),s(Y,Ao),s(Ao,ql),s(E,Fl),s(E,bs),s(bs,jl),s(bs,Es),s(Es,Nl),s(bs,Jl),s(E,Rl),s(E,j),s(j,Ul),s(j,Te),s(Te,$l),s(j,Bl),s(j,Pe),s(Pe,Vl),s(j,Wl),s(j,Me),s(Me,Gl),s(j,Yl),s(E,zl),s(E,Ce),Ce.innerHTML=mc,s(E,Ql),s(E,z),s(z,Kl),s(z,Le),s(Le,Zl),s(z,Xl),s(z,Ss),s(Ss,sr),s(z,er),s(E,or),s(E,De),De.innerHTML=gc,s(E,tr),s(E,Oo),s(Oo,ar),d(r,kt,k),d(r,m,k),s(m,Ho),s(Ho,Is),s(Is,nr),s(m,lr),s(m,Ts),s(Ts,rr),s(Ts,Ps),s(Ps,ir),s(Ts,pr),s(m,cr),s(m,Ae),Ae.innerHTML=wc,s(m,hr),s(m,Oe),Oe.innerHTML=_c,s(m,kr),s(m,qo),s(qo,vr),s(m,yr),s(m,He),He.innerHTML=bc,s(m,dr),s(m,Fo),s(Fo,ur),s(m,fr),s(m,jo),s(jo,Q),s(Q,qe),s(qe,No),s(qe,L),s(m,xr),s(m,Jo),s(Jo,mr),s(m,gr),s(m,Ro),s(Ro,K),s(K,Fe),s(Fe,Uo),s(Fe,D),d(r,vt,k),d(r,M,k),s(M,$o),s($o,Ms),s(Ms,wr),s(M,_r),s(M,Bo),s(Bo,br),s(M,Er),s(M,Cs),s(Cs,Vo),s(Vo,Sr),s(Cs,Ir),s(Cs,Wo),s(Wo,Tr),s(M,Pr),s(M,Go),s(Go,Mr),s(M,Cr),s(M,Yo),s(Yo,Lr),d(r,yt,k),d(r,X,k),s(X,zo),s(zo,Ls),s(Ls,Dr),s(X,Ar),s(X,Ds),s(Ds,Qo),s(Qo,As),s(As,Or),s(Ds,Hr),s(Ds,Ko),s(Ko,Os),s(Os,qr),dt=!0},p:Yc,i(r){dt||(oc(x.$$.fragment,r),dt=!0)},o(r){tc(x.$$.fragment,r),dt=!1},d(r){ac(x,r),r&&e(A),r&&e(P),r&&e(Zo),r&&e(Fs),r&&e(Xo),r&&e(Ns),r&&e(st),r&&e(Js),r&&e(et),r&&e(N),r&&e(ot),r&&e(tt),r&&e(at),r&&e(Z),r&&e(nt),r&&e(lt),r&&e(rt),r&&e(b),r&&e(it),r&&e(y),r&&e(pt),r&&e(u),r&&e(ct),r&&e(h),r&&e(ht),r&&e(E),r&&e(kt),r&&e(m),r&&e(vt),r&&e(M),r&&e(yt),r&&e(X)}}}function ih(Hs){let x,A;const P=[Hs[0],Zp];let as={$$slots:{default:[rh]},$$scope:{ctx:Hs}};for(let _=0;_<P.length;_+=1)as=Br(as,P[_]);return x=new zc({props:as}),{c(){Xp(x.$$.fragment)},l(_){sc(x.$$.fragment,_)},m(_,O){ec(x,_,O),A=!0},p(_,[O]){const qs=O&1?Wc(P,[O&1&&Gp(_[0]),O&0&&Gp(Zp)]):{};O&2&&(qs.$$scope={dirty:O,ctx:_}),x.$set(qs)},i(_){A||(oc(x.$$.fragment,_),A=!0)},o(_){tc(x.$$.fragment,_),A=!1},d(_){ac(x,_)}}}const Zp={title:"I wrote my module bundler II",date:"2019-10-16T08:00:00Z",tags:["JavaScript","module bundler","dev tool","webpack"],description:"We've built a simple bundler to bundle javascript code. Let's add CSS, HTML and serve it in the browser!",series:"Write a module bundler",label:"blog"};function ph(Hs,x,A){return Gc("blog",{image:lh}),Hs.$$set=P=>{A(0,x=Br(Br({},x),Yp(P)))},x=Yp(x),[x]}class uh extends $c{constructor(x){super();Bc(this,x,ph,ih,Vc,{})}}export{uh as default,Zp as metadata};
