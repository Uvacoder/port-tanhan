import{S as CE,i as IE,s as OE,C as Am,w as p3,x as h3,y as v3,z as TE,A as r3,q as k3,o as d3,B as u3,r as PE,R as i3,k as i,e as t,t as o,m as c,c as a,a as n,h as l,d as e,b as r,g as v,F as s,O as LE}from"../../chunks/vendor-ea160616.js";import{B as DE}from"../../chunks/BlogLayout-1be3dc1e.js";import{T as AE}from"../../chunks/TableOfContent-c4f5cb6e.js";import"../../chunks/stores-7d7fda0c.js";import"../../chunks/WebMentions-d768a574.js";/* empty css                                */var HE="/_app/assets/hero-twitter-5d88ede6.jpg";function $E(Bt){let E,K,P,ys,_,F,Jt,Q,Vi,Xs,Wi,Ui,se,Bi,Ji,ee,Gi,qi,zi,Z,Yi,te,Ki,Fi,ae,Qi,Zi,ne,Xi,sc,ec,uo,tc,xr,Ps,yo,oe,ac,nc,fo,oc,gr,Ls,mo,le,lc,rc,Gt,y3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// create a h1 element</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">h1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;h1&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">h1</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Hello World&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...and add it to the body</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">body</span><span style="color: var(--shiki-token-function)">.appendChild</span><span style="color: var(--shiki-color-text)">(h1);</span></span></code></pre>`,Er,Ds,xo,re,ic,cc,qt,f3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// update the text of the h1 element</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">h1</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Bye World&#39;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`,_r,As,go,ie,pc,hc,zt,m3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// finally, we remove the h1 element</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">body</span><span style="color: var(--shiki-token-function)">.removeChild</span><span style="color: var(--shiki-color-text)">(h1);</span></span></code></pre>`,wr,Hs,Eo,ce,vc,kc,Yt,x3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">h1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;h1&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-token-constant)">h1</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Hello World&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-comment)">// add class name to the h1 element</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-constant)">h1</span><span style="color: var(--shiki-token-function)">.setAttribute</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;class&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;abc&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-comment)">// ...and add a &lt;style&gt; tag to the head</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;style&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;.abc &#123; color: blue; &#125;&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">head</span><span style="color: var(--shiki-token-function)">.appendChild</span><span style="color: var(--shiki-color-text)">(style);</span></span>
<span class="line dim"><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">body</span><span style="color: var(--shiki-token-function)">.appendChild</span><span style="color: var(--shiki-color-text)">(h1);</span></span></code></pre>`,br,B,_o,pe,dc,uc,Kt,g3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">button</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;button&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-token-constant)">button</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Click Me!&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-comment)">// listen to &quot;click&quot; events</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-constant)">button</span><span style="color: var(--shiki-token-function)">.addEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;click&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Hi!&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">body</span><span style="color: var(--shiki-token-function)">.appendChild</span><span style="color: var(--shiki-color-text)">(button);</span></span></code></pre>`,yc,wo,fc,mc,bo,xc,Sr,k,So,he,gc,Ec,Co,_c,wc,Io,ve,bc,ke,Sc,Cc,Ic,Oo,Oc,Tc,Ft,E3='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>',Pc,To,de,Lc,Dc,ue,Ac,Qt,Hc,$c,Mc,Zt,_3='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"></div><div class="line">  <span class="token selector">h1</span> <span class="token punctuation">&#123;</span></div><div class="line">    <span class="token property">color</span><span class="token punctuation">:</span> rebeccapurple<span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>',Nc,Po,ye,Rc,jc,Lo,Vc,Wc,Do,Uc,Bc,Xt,w3=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'World'</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello <span class="token language-javascript"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>`,Jc,Ao,fe,Gc,qc,Ho,zc,Yc,me,Kc,sa,Fc,Qc,Zc,ea,b3='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">onClickButton</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>onClickButton<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Clicked <span class="token language-javascript"><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div></code></pre>',Xc,$o,xe,sp,ep,ta,tp,ge,ap,np,aa,S3='<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line dim">  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token keyword">function</span> <span class="token function">onClickButton</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line highlight">    count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token punctuation">&#125;</span></div><div class="line dim"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>onClickButton<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Clicked <span class="token language-javascript"><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div></code></pre>',op,Mo,Ee,lp,rp,No,ip,Cr,w,Ro,_e,cp,pp,jo,hp,vp,Vo,kp,dp,Wo,up,yp,na,C3='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>',fp,Uo,we,mp,xp,Bo,gp,Ep,oa,I3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> h1;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      h1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">element</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;h1&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">h1</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Hello world&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">(detaching) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (detaching) </span><span style="color: var(--shiki-token-function)">detach</span><span style="color: var(--shiki-color-text)">(h1);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">App</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">SvelteComponent</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(options) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">super</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">init</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> options</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> create_fragment</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> safe_not_equal</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;&#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,_p,Jo,wp,bp,be,Go,la,Sp,Cp,qo,ra,Ip,Ir,J,zo,Se,Op,Tp,Yo,Pp,Lp,Ce,Dp,ia,Ap,Hp,$p,Ie,Mp,ca,Np,Rp,Or,M,Ko,Oe,jp,Vp,Te,Wp,Fo,Up,Bp,Jp,Qo,Gp,qp,Pe,zp,pa,Yp,Kp,Fp,ha,O3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">h1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">element</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;h1&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">h1</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Hello World&#39;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`,Tr,N,Zo,Le,Qp,Zp,De,Xp,Xo,sh,eh,th,sl,ah,nh,fs,oh,va,lh,rh,ka,ih,ch,ph,da,T3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// http://github.com/sveltejs/svelte/tree/master/src/runtime/internal/dom.ts</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">target</span><span style="color: var(--shiki-token-function)">.insertBefore</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Pr,A,el,Ae,hh,vh,He,kh,tl,dh,uh,yh,al,fh,mh,$e,xh,ua,gh,Eh,_h,ya,P3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">detach</span><span style="color: var(--shiki-color-text)">(h1);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// http://github.com/sveltejs/svelte/tree/master/src/runtime/internal/dom.ts</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">detach</span><span style="color: var(--shiki-color-text)">(node) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">parentNode</span><span style="color: var(--shiki-token-function)">.removeChild</span><span style="color: var(--shiki-color-text)">(node);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,wh,nl,Me,bh,Ne,Sh,Ch,Lr,y,ol,Re,Ih,Oh,je,Th,Ve,Ph,Lh,Dh,We,Ah,fa,Hh,$h,Mh,Ue,Nh,ma,Rh,jh,Vh,xa,L3='<pre class="prism language-svelte"><code><div class="line"><span class="token comment">&lt;!-- empty --></span></div></code></pre>',Wh,ll,Be,Uh,Bh,ga,D3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">App</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">SvelteComponent</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(options) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">super</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">init</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> options</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> safe_not_equal</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;&#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Jh,ms,Gh,Ea,qh,zh,_a,Yh,Kh,Fh,Je,Qh,wa,Zh,Xh,sv,xs,gs,ev,ba,tv,av,Sa,nv,ov,lv,rl,rv,iv,il,cv,pv,Ge,hv,Ca,vv,kv,dv,qe,uv,Ia,yv,fv,mv,ze,xv,Oa,gv,Ev,Dr,b,cl,Ye,_v,wv,pl,bv,Sv,Ta,A3=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">	<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'World'</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello <span class="token language-javascript"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>`,Cv,hl,Ke,Iv,Ov,vl,Tv,Pv,Pa,H3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      h1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">element</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;h1&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">h1</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;Hello </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">name</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;World&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">App</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">SvelteComponent</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Lv,kl,Dv,Av,Fe,Qe,Hv,La,$v,Mv,Nv,Da,Aa,Rv,jv,Vv,dl,Wv,Ar,u,ul,Ze,Uv,Bv,Xe,Jv,Ha,Gv,qv,zv,$a,$3=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">	<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'World'</span><span class="token punctuation">;</span></div><div class="line">	<span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">		name <span class="token operator">=</span> <span class="token string">'Svelte'</span><span class="token punctuation">;</span></div><div class="line">	<span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello <span class="token language-javascript"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>`,Yv,yl,st,Kv,Fv,fl,Qv,Zv,Ma,M3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      h1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">element</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;h1&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      t0 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">text</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Hello &#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      t1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">text</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*name*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">append</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> t0);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">append</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> t1);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [dirty]) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*name*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-function)">set_data</span><span style="color: var(--shiki-color-text)">(t1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*name*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">(detaching) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (detaching) </span><span style="color: var(--shiki-token-function)">detach</span><span style="color: var(--shiki-color-text)">(h1);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;World&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Svelte&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line highlight"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [name];</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">App</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">SvelteComponent</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(options) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">super</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">init</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> options</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> instance</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> create_fragment</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> safe_not_equal</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;&#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Xv,ml,sk,ek,j,Es,tk,Na,ak,nk,Ra,ok,lk,rk,$s,ik,ja,ck,pk,Va,hk,vk,et,kk,Wa,dk,uk,yk,_s,fk,Ua,mk,xk,Ba,gk,Ek,_k,ls,wk,Ja,bk,Sk,Ga,Ck,Ik,qa,Ok,Tk,xl,Pk,Lk,tt,Dk,za,Ak,Hk,$k,gl,Mk,Nk,V,at,Rk,Ya,jk,Vk,Wk,nt,Uk,Ka,Bk,Jk,Gk,Fa,qk,Qa,zk,Yk,Ms,Kk,Za,Fk,Qk,Xa,Zk,Xk,El,sd,ed,W,td,sn,ad,nd,en,od,ld,tn,rd,id,an,cd,pd,hd,ot,vd,nn,kd,dd,Hr,rs,_l,lt,ud,yd,rt,fd,wl,md,xd,gd,is,bl,Ed,_d,on,wd,bd,ln,Sd,Cd,$r,H,Sl,it,Id,Od,U,Td,rn,Pd,Ld,cn,Dd,Ad,pn,Hd,$d,hn,Md,Nd,Rd,ws,jd,vn,Vd,Wd,kn,Ud,Bd,Jd,dn,N3='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- gives you --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>',Gd,X,qd,un,zd,Yd,yn,Kd,Fd,fn,Qd,Zd,Xd,mn,R3='<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span></div><div class="line dim"></div><div class="line dim"><span class="token comment">&lt;!-- could possibly be --></span></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div><div class="line highlight"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello Svelte<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div><div class="line dim"><span class="token comment">&lt;!-- depending on the inner state of the component --></span></div></code></pre>',Mr,S,Cl,ct,su,eu,bs,tu,xn,au,nu,Il,ou,lu,ru,pt,Ol,iu,cu,Tl,pu,hu,ht,vu,Pl,ku,du,uu,ss,yu,gn,fu,mu,En,xu,gu,Ll,Eu,_u,wu,_n,j3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// conceptually,</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*...*/</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// create the fragment</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.c</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// mount the fragment onto the DOM</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.m</span><span style="color: var(--shiki-color-text)">(target);</span></span></code></pre>`,bu,es,Su,wn,Cu,Iu,bn,Ou,Tu,Dl,Pu,Lu,Du,Sn,V3='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">t1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">text</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*name*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]);</span></span></code></pre>',Au,Cn,Hu,vt,$u,Nr,O,Al,kt,Mu,Nu,dt,Ru,In,ju,Vu,Wu,Hl,Uu,Bu,ut,$l,Ju,Gu,Ml,qu,zu,yt,Yu,On,Ku,Fu,Qu,Tn,W3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Svelte&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">count</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">foo</span><span style="color: var(--shiki-color-text)">.a </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// compiled into something like</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Svelte&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/* name */</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> name);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">count</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/* count */</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> count);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">foo</span><span style="color: var(--shiki-color-text)">.a </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/* foo */</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> foo);</span></span></code></pre>`,Zu,ft,Xu,Pn,sy,ey,ty,Ln,U3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// conceptually...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*...*/</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// to track which variable has changed</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">dirty</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Set</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (variable</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> newValue) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// update ctx</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ctx[variable] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> newValue;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// mark variable as dirty</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">dirty</span><span style="color: var(--shiki-token-function)">.add</span><span style="color: var(--shiki-color-text)">(variable);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// schedules update for the component</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">scheduleUpdate</span><span style="color: var(--shiki-color-text)">(component);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// gets called when update is scheduled</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">flushUpdate</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// update the fragment</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// clear the dirty</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">dirty</span><span style="color: var(--shiki-token-function)">.clear</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Rr,m,Nl,mt,ay,ny,Rl,oy,ly,Dn,B3=`<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line dim">	<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'world'</span><span class="token punctuation">;</span></div><div class="line dim">	<span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line dim">		name <span class="token operator">=</span> <span class="token string">'Svelte'</span><span class="token punctuation">;</span></div><div class="line dim">	<span class="token punctuation">&#125;</span></div><div class="line dim"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line highlight"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>update<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Hello <span class="token language-javascript"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>`,ry,jl,xt,iy,cy,Vl,py,hy,An,J3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      h1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">element</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;h1&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      t0 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">text</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Hello &#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      t1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">text</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*name*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">append</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> t0);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">append</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> t1);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      dispose </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;click&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*update*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [dirty]) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*name*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-function)">set_data</span><span style="color: var(--shiki-color-text)">(t1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*name*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">(detaching) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (detaching) </span><span style="color: var(--shiki-token-function)">detach</span><span style="color: var(--shiki-color-text)">(h1);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">dispose</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;world&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Svelte&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [name</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> update];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`,vy,Wl,ky,dy,gt,Hn,$n,uy,yy,fy,Ns,my,Ul,xy,gy,Bl,Ey,_y,ts,wy,Mn,by,Sy,Jl,Cy,Iy,Gl,Oy,Ty,Py,as,Ly,Nn,Dy,Ay,Rn,Hy,$y,ql,My,Ny,Ry,zl,jy,jr,x,Yl,Et,Vy,Wy,Ss,Uy,_t,By,Jy,wt,Gy,qy,zy,Kl,Yy,Ky,jn,G3='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span></div><div class="line">	<span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>update<span class="token punctuation">&#125;</span></span></div><div class="line">	<span class="token attr-name"><span class="token namespace">on:</span>mousedown=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>update<span class="token punctuation">&#125;</span></span></div><div class="line">	<span class="token attr-name"><span class="token namespace">on:</span>touchstart=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>update<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div><div class="line">  Hello <span class="token language-javascript"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span>!</div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>',Fy,Fl,bt,Qy,Zy,Ql,Xy,sf,Vn,q3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">dispose </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;click&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*update*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">])</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;mousedown&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*update*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">])</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;touchstart&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*update*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; passive</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> &#125;)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">];</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-function)">run_all</span><span style="color: var(--shiki-color-text)">(dispose);</span></span></code></pre>`,ef,Zl,tf,af,Wn,z3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// instead of</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">dispose1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;click&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*update*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">dispose2 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;mousedown&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*update*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">dispose2 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;touchstart&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*update*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; passive</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">dispose1</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">dispose2</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">dispose3</span><span style="color: var(--shiki-color-text)">();</span></span></code></pre>`,nf,Xl,of,lf,St,rf,Un,cf,pf,Vr,G,sr,Ct,hf,vf,er,kf,df,tr,uf,yf,ar,ff,Wr,Rs,nr,It,mf,xf,or,lr,gf,Ur,js,rr,Ot,Ef,_f,Cs,Tt,wf,Bn,bf,Sf,Cf,ir,If,Of,Jn,Gn,Tf,Pf,Br,q,cr,Pt,Lf,Df,Is,Os,Af,qn,Hf,$f,zn,Mf,Nf,Rf,pr,jf,Vf,Yn,Wf,Lt,Uf,Bf,hr,Jf,Gf,ns,Dt,qf,Kn,zf,Yf,Kf,Ts,Ff,Fn,Qf,Zf,Qn,Xf,sm,em,At,tm,Zn,am,nm,om,vr,lm,Jr,R,kr,Ht,rm,im,dr,cm,pm,$t,hm,Mt,vm,km,dm,os,um,Nt,ym,fm,Rt,mm,xm,jt,gm,Em,_m,ur,Vt,wm,Xn,bm,Sm,Gr;return E=new AE({props:{data:[{link:"background",title:"Background"},{link:"introduction",title:"Introduction",nested:[{link:"creating-an-element",title:"Creating an element"},{link:"updating-an-element",title:"Updating an element"},{link:"removing-an-element",title:"Removing an element"},{link:"adding-style-to-an-element",title:"Adding style to an element"},{link:"listen-for-click-events-on-an-element",title:"Listen for click events on an element"}]},{link:"svelte-syntax",title:"Svelte syntax"},{link:"compile-svelte-in-your-head",title:"Compile Svelte in your Head",nested:[{link:"create-fragment",title:"create_fragment",nested:[{link:"c",title:"- c()"},{link:"m-target-anchor",title:"- m(target, anchor)"},{link:"d-detaching",title:"- d(detaching)"}]},{link:"export-default-class-app-extends-sveltecomponent",title:"export default class App extends SvelteComponent"},{link:"adding-data",title:"Adding data"},{link:"updating-data",title:"Updating data",nested:[{link:"p-ctx-dirty",title:"- p(ctx, dirty)"}]},{link:"instance-variable",title:"instance variable"},{link:"instance-self-props-invalidate",title:"instance($$self, $$props, $$invalidate)"},{link:"invalidate",title:"$$invalidate"},{link:"adding-event-listeners",title:"Adding event listeners"},{link:"listen-and-dispose",title:"listen and dispose"}]},{link:"summary",title:"Summary",nested:[{link:"1-create-fragment",title:"1. create_fragment"},{link:"2-instance",title:"2. instance"},{link:"3-class-app-extends-sveltecomponent",title:"3. class App extends SvelteComponent"}]},{link:"closing-note",title:"Closing Note"}]}}),{c(){p3(E.$$.fragment),K=i(),P=t("section"),ys=t("h2"),_=t("a"),F=o("Background"),Jt=i(),Q=t("p"),Vi=o("A while ago, "),Xs=t("a"),Wi=o("@swyx"),Ui=o(" came back to Singapore and visited us in "),se=t("a"),Bi=o("Shopee Singapore"),Ji=o(" ("),ee=t("a"),Gi=o("We're hiring!"),qi=o(")."),zi=i(),Z=t("p"),Yi=o("He gave an amazing sharing on "),te=t("a"),Ki=o("Compile Svelte in Your Head"),Fi=o(" ("),ae=t("a"),Qi=o("video"),Zi=o(") in the "),ne=t("a"),Xi=o("ReactKnowledgeable Originals"),sc=o("."),ec=i(),uo=t("p"),tc=o("I love his presentation and the title is so catchy, so I begged him to use the catchy title as this series of articles about the Svelte compiler. It will be about how Svelte sees your code and compiles it down to plain JavaScript."),xr=i(),Ps=t("section"),yo=t("h2"),oe=t("a"),ac=o("Introduction"),nc=i(),fo=t("p"),oc=o("Lets refresh ourselves with how we write web app without any framework:"),gr=i(),Ls=t("section"),mo=t("h3"),le=t("a"),lc=o("Creating an element"),rc=i(),Gt=t("div"),Er=i(),Ds=t("section"),xo=t("h3"),re=t("a"),ic=o("Updating an element"),cc=i(),qt=t("div"),_r=i(),As=t("section"),go=t("h3"),ie=t("a"),pc=o("Removing an element"),hc=i(),zt=t("div"),wr=i(),Hs=t("section"),Eo=t("h3"),ce=t("a"),vc=o("Adding style to an element"),kc=i(),Yt=t("div"),br=i(),B=t("section"),_o=t("h3"),pe=t("a"),dc=o("Listen for click events on an element"),uc=i(),Kt=t("div"),yc=i(),wo=t("p"),fc=o("These are code that you have to write, without using any framework or library."),mc=i(),bo=t("p"),xc=o("The main idea of this article is to show how the Svelte compiler compiles the Svelte syntax into statements of codes that I've shown above."),Sr=i(),k=t("section"),So=t("h2"),he=t("a"),gc=o("Svelte syntax"),Ec=i(),Co=t("p"),_c=o("Here I'm going to show you some basics of the Svelte syntax."),wc=i(),Io=t("blockquote"),ve=t("p"),bc=o("If you wish to learn more, I highly recommend trying "),ke=t("a"),Sc=o("Svelte's interactive tutorial"),Cc=o("."),Ic=i(),Oo=t("p"),Oc=o("So here is a basic Svelte component:"),Tc=i(),Ft=t("div"),Pc=i(),To=t("p"),de=t("a"),Lc=o("Svelte REPL"),Dc=i(),ue=t("p"),Ac=o("To add style, you add a "),Qt=t("code"),Hc=o("<style>"),$c=o(" tag:"),Mc=i(),Zt=t("div"),Nc=i(),Po=t("p"),ye=t("a"),Rc=o("Svelte REPL"),jc=i(),Lo=t("p"),Vc=o("At this point, writing Svelte component just feels like writing HTML, that's because Svelte syntax is a super set of the HTML syntax."),Wc=i(),Do=t("p"),Uc=o("Let's look at how we add a data to our component:"),Bc=i(),Xt=t("div"),Jc=i(),Ao=t("p"),fe=t("a"),Gc=o("Svelte REPL"),qc=i(),Ho=t("p"),zc=o("We put JavaScript inside the curly brackets."),Yc=i(),me=t("p"),Kc=o("To add a click handler, we use the "),sa=t("code"),Fc=o("on:"),Qc=o(" directive"),Zc=i(),ea=t("div"),Xc=i(),$o=t("p"),xe=t("a"),sp=o("Svelte REPL"),ep=i(),ta=t("p"),tp=o("To change the data, we use "),ge=t("a"),ap=o("assignment operators"),np=i(),aa=t("div"),op=i(),Mo=t("p"),Ee=t("a"),lp=o("Svelte REPL"),rp=i(),No=t("p"),ip=o("Let's move on to see how Svelte syntax is compiled into JavaScript that we've seen earlier"),Cr=i(),w=t("section"),Ro=t("h2"),_e=t("a"),cp=o("Compile Svelte in your Head"),pp=i(),jo=t("p"),hp=o("The Svelte compiler analyses the code you write and generates an optimised JavaScript output."),vp=i(),Vo=t("p"),kp=o("To study how Svelte compiles the code, lets start with the smallest example possible, and slowly build up the code. Through the process, you will see that Svelte incrementally adds to the output code based on your changes."),dp=i(),Wo=t("p"),up=o("The first example that we are going to see is:"),yp=i(),na=t("div"),fp=i(),Uo=t("p"),we=t("a"),mp=o("Svelte REPL"),xp=i(),Bo=t("p"),gp=o("The output code:"),Ep=i(),oa=t("div"),_p=i(),Jo=t("p"),wp=o("You can break down the output code into 2 sections:"),bp=i(),be=t("ul"),Go=t("li"),la=t("code"),Sp=o("create_fragment"),Cp=i(),qo=t("li"),ra=t("code"),Ip=o("class App extends SvelteComponent"),Ir=i(),J=t("section"),zo=t("h3"),Se=t("a"),Op=o("create_fragment"),Tp=i(),Yo=t("p"),Pp=o("Svelte components are the building blocks of a Svelte application. Each Svelte component focuses on building its piece or fragment of the final DOM."),Lp=i(),Ce=t("p"),Dp=o("The "),ia=t("code"),Ap=o("create_fragment"),Hp=o(" function gives the Svelte component an instruction manual on how to build the DOM fragment."),$p=i(),Ie=t("p"),Mp=o("Look at the return object of the "),ca=t("code"),Np=o("create_fragment"),Rp=o(" function. It has methods, such as:"),Or=i(),M=t("section"),Ko=t("h4"),Oe=t("a"),jp=o("- c()"),Vp=i(),Te=t("p"),Wp=o("Short for "),Fo=t("strong"),Up=o("create"),Bp=o("."),Jp=i(),Qo=t("p"),Gp=o("Contains instructions to create all the elements in the fragment."),qp=i(),Pe=t("p"),zp=o("In this example, it contains instructions to create the "),pa=t("code"),Yp=o("h1"),Kp=o(" element"),Fp=i(),ha=t("div"),Tr=i(),N=t("section"),Zo=t("h4"),Le=t("a"),Qp=o("- m(target, anchor)"),Zp=i(),De=t("p"),Xp=o("Short for "),Xo=t("strong"),sh=o("mount"),eh=o("."),th=i(),sl=t("p"),ah=o("Contains instructions to mount the elements into the target."),nh=i(),fs=t("p"),oh=o("In this example, it contains instructions to insert the "),va=t("code"),lh=o("h1"),rh=o(" element into the "),ka=t("code"),ih=o("target"),ch=o("."),ph=i(),da=t("div"),Pr=i(),A=t("section"),el=t("h4"),Ae=t("a"),hh=o("- d(detaching)"),vh=i(),He=t("p"),kh=o("Short for "),tl=t("strong"),dh=o("destroy"),uh=o("."),yh=i(),al=t("p"),fh=o("Contains instructions to remove the elements from the target."),mh=i(),$e=t("p"),xh=o("In this example, we detach the "),ua=t("code"),gh=o("h1"),Eh=o(" element from the DOM"),_h=i(),ya=t("div"),wh=i(),nl=t("blockquote"),Me=t("p"),bh=o("The method names are short for better minification. "),Ne=t("a"),Sh=o("See what can't be minified here"),Ch=o("."),Lr=i(),y=t("section"),ol=t("h3"),Re=t("a"),Ih=o("export default class App extends SvelteComponent"),Oh=i(),je=t("p"),Th=o("Each component is a class, which you can import and instantiate through "),Ve=t("a"),Ph=o("this API"),Lh=o("."),Dh=i(),We=t("p"),Ah=o("And in the constructor, we initialize the component with information that made up the component such as "),fa=t("code"),Hh=o("create_fragment"),$h=o(". Svelte will only pass information that it is needed and remove them whenever it is not necessary."),Mh=i(),Ue=t("p"),Nh=o("Try removing the "),ma=t("code"),Rh=o("<h1>"),jh=o(" tag and see what happens to the output:"),Vh=i(),xa=t("div"),Wh=i(),ll=t("p"),Be=t("a"),Uh=o("Svelte REPL"),Bh=i(),ga=t("div"),Jh=i(),ms=t("p"),Gh=o("Svelte will pass in "),Ea=t("code"),qh=o("null"),zh=o(" instead of "),_a=t("code"),Yh=o("create_fragment"),Kh=o("!"),Fh=i(),Je=t("p"),Qh=o("The "),wa=t("code"),Zh=o("init"),Xh=o(" function is where Svelte sets up most of the internals, such as:"),sv=i(),xs=t("ul"),gs=t("li"),ev=o("component props, "),ba=t("code"),tv=o("ctx"),av=o(" (will explain what "),Sa=t("code"),nv=o("ctx"),ov=o(" is later) and context"),lv=i(),rl=t("li"),rv=o("component lifecycle events"),iv=i(),il=t("li"),cv=o("component update mechanism"),pv=i(),Ge=t("p"),hv=o("and at the very end, Svelte calls the "),Ca=t("code"),vv=o("create_fragment"),kv=o(" to create and mount elements into the DOM."),dv=i(),qe=t("p"),uv=o("If you noticed, all the internal state and methods are attached to "),Ia=t("code"),yv=o("this.$$"),fv=o("."),mv=i(),ze=t("p"),xv=o("So if you ever access the "),Oa=t("code"),gv=o("$$"),Ev=o(" property of the component, you are tapping into the internals. You've been warned! \u{1F648}\u{1F6A8}"),Dr=i(),b=t("section"),cl=t("h3"),Ye=t("a"),_v=o("Adding data"),wv=i(),pl=t("p"),bv=o("Now that we've looked at the bare minimum of a Svelte component, let's see how adding a data would change the compiled output:"),Sv=i(),Ta=t("div"),Cv=i(),hl=t("p"),Ke=t("a"),Iv=o("Svelte REPL"),Ov=i(),vl=t("p"),Tv=o("Notice the change in the output:"),Pv=i(),Pa=t("div"),Lv=i(),kl=t("p"),Dv=o("Some observations:"),Av=i(),Fe=t("ul"),Qe=t("li"),Hv=o("What you've written in the "),La=t("code"),$v=o("<script>"),Mv=o(" tag is moved into the top level of the code"),Nv=i(),Da=t("li"),Aa=t("code"),Rv=o("h1"),jv=o(" element's text content is now a template literal"),Vv=i(),dl=t("p"),Wv=o("There's a lot of amazing things happening under the hood right now, but let's hold our horses for a while, because it's best explained when comparing with the next code change."),Ar=i(),u=t("section"),ul=t("h3"),Ze=t("a"),Uv=o("Updating data"),Bv=i(),Xe=t("p"),Jv=o("Let's add a function to update the "),Ha=t("code"),Gv=o("name"),qv=o(":"),zv=i(),$a=t("div"),Yv=i(),yl=t("p"),st=t("a"),Kv=o("Svelte REPL"),Fv=i(),fl=t("p"),Qv=o("...and observe the change in the compiled output:"),Zv=i(),Ma=t("div"),Xv=i(),ml=t("p"),sk=o("Some observations:"),ek=i(),j=t("ul"),Es=t("li"),tk=o("the text content of "),Na=t("code"),ak=o("<h1>"),nk=o(" element is now broken into 2 text nodes, created by the "),Ra=t("code"),ok=o("text(...)"),lk=o(" function"),rk=i(),$s=t("li"),ik=o("the return object of the "),ja=t("code"),ck=o("create_fragment"),pk=o(" has a new method, "),Va=t("code"),hk=o("p(ctx, dirty)"),vk=i(),et=t("li"),kk=o("a new function "),Wa=t("code"),dk=o("instance"),uk=o(" is created"),yk=i(),_s=t("li"),fk=o("What you've written in the "),Ua=t("code"),mk=o("<script>"),xk=o(" tag is now moved into the "),Ba=t("code"),gk=o("instance"),Ek=o(" function"),_k=i(),ls=t("li"),wk=o("for the sharp-eyed, the variable "),Ja=t("code"),bk=o("name"),Sk=o(" that was used in the "),Ga=t("code"),Ck=o("create_fragment"),Ik=o(" is now replaced by "),qa=t("code"),Ok=o("ctx[0]"),Tk=i(),xl=t("p"),Pk=o("So, why the change?"),Lk=i(),tt=t("p"),Dk=o("The Svelte compiler tracks all the variables declared in the "),za=t("code"),Ak=o("<script>"),Hk=o(" tag."),$k=i(),gl=t("p"),Mk=o("It tracks whether the variable:"),Nk=i(),V=t("ul"),at=t("li"),Rk=o("can be mutated? eg: "),Ya=t("code"),jk=o("count++"),Vk=o(","),Wk=i(),nt=t("li"),Uk=o("can be reassigned? eg: "),Ka=t("code"),Bk=o("name = 'Svelte'"),Jk=o(","),Gk=i(),Fa=t("li"),qk=o("is referenced in the template? eg: "),Qa=t("code"),zk=o("<h1>Hello {name}</h1>"),Yk=i(),Ms=t("li"),Kk=o("is writable? eg: "),Za=t("code"),Fk=o("const i = 1;"),Qk=o(" vs "),Xa=t("code"),Zk=o("let i = 1;"),Xk=i(),El=t("li"),sd=o("... and many more"),ed=i(),W=t("p"),td=o("When the Svelte compiler realises that the variable "),sn=t("code"),ad=o("name"),nd=o(" can be reassigned, (due to "),en=t("code"),od=o("name = 'Svelte';"),ld=o(" in "),tn=t("code"),rd=o("update"),id=o("), it breaks down the text content of the "),an=t("code"),cd=o("h1"),pd=o(" into parts, so that it can dynamically update part of the text."),hd=i(),ot=t("p"),vd=o("Indeed, you can see that there's a new method, "),nn=t("code"),kd=o("p"),dd=o(", to update the text node."),Hr=i(),rs=t("section"),_l=t("h4"),lt=t("a"),ud=o("- p(ctx, dirty)"),yd=i(),rt=t("p"),fd=o("Short for "),wl=t("strong"),md=o("u_p_date"),xd=o("."),gd=i(),is=t("p"),bl=t("strong"),Ed=o("p(ctx, dirty)"),_d=o(" contains instructions to update the elements based on what has changed in the state ("),on=t("code"),wd=o("dirty"),bd=o(") and the state ("),ln=t("code"),Sd=o("ctx"),Cd=o(") of the component."),$r=i(),H=t("section"),Sl=t("h3"),it=t("a"),Id=o("instance variable"),Od=i(),U=t("p"),Td=o("The compiler realises that the variable "),rn=t("code"),Pd=o("name"),Ld=o(" cannot be shared across different instances of the "),cn=t("code"),Dd=o("App"),Ad=o(" component. That's why it moves the declaration of the variable "),pn=t("code"),Hd=o("name"),$d=o(" into a function called "),hn=t("code"),Md=o("instance"),Nd=o("."),Rd=i(),ws=t("p"),jd=o("In the previous example, no matter how many instances of the "),vn=t("code"),Vd=o("App"),Wd=o(" component, the value of the variable "),kn=t("code"),Ud=o("name"),Bd=o(" is the same and unchanged across the instances:"),Jd=i(),dn=t("div"),Gd=i(),X=t("p"),qd=o("But, in this example, the variable "),un=t("code"),zd=o("name"),Yd=o(" can be changed within 1 instance of the component, so the declaration of the variable "),yn=t("code"),Kd=o("name"),Fd=o(" is now moved into the "),fn=t("code"),Qd=o("instance"),Zd=o(" function:"),Xd=i(),mn=t("div"),Mr=i(),S=t("section"),Cl=t("h3"),ct=t("a"),su=o("instance($$self, $$props, $$invalidate)"),eu=i(),bs=t("p"),tu=o("The "),xn=t("code"),au=o("instance"),nu=o(" function returns a list of "),Il=t("em"),ou=o("instance"),lu=o(" variables, which are variables that are:"),ru=i(),pt=t("ul"),Ol=t("li"),iu=o("referenced in the template"),cu=i(),Tl=t("li"),pu=o("mutated or reassigned, (can be changed within 1 instance of the component)"),hu=i(),ht=t("p"),vu=o("In Svelte, we call this list of instance variables, "),Pl=t("strong"),ku=o("ctx"),du=o("."),uu=i(),ss=t("p"),yu=o("In the "),gn=t("code"),fu=o("init"),mu=o(" function, Svelte calls the "),En=t("code"),xu=o("instance"),gu=o(" function to create "),Ll=t("strong"),Eu=o("ctx"),_u=o(", and uses it to create the fragment for the component:"),wu=i(),_n=t("div"),bu=i(),es=t("p"),Su=o("Now, instead of accessing the variable "),wn=t("code"),Cu=o("name"),Iu=o(" outside of the component, we refer to the variable "),bn=t("code"),Ou=o("name"),Tu=o(" passed via the "),Dl=t("strong"),Pu=o("ctx"),Lu=o(":"),Du=i(),Sn=t("div"),Au=i(),Cn=t("p"),Hu=o("The reason that ctx is an array instead of a map or an object is because of an optimisation related to bitmask, you can see "),vt=t("a"),$u=o("the discussion about it here"),Nr=i(),O=t("section"),Al=t("h3"),kt=t("a"),Mu=o("$$invalidate"),Nu=i(),dt=t("p"),Ru=o("The secret behind the system of reactivity in Svelte is the "),In=t("code"),ju=o("$$invalidate"),Vu=o(" function."),Wu=i(),Hl=t("p"),Uu=o("Every variable that has been"),Bu=i(),ut=t("ul"),$l=t("li"),Ju=o("reassigned or mutated"),Gu=i(),Ml=t("li"),qu=o("referenced in the template"),zu=i(),yt=t("p"),Yu=o("will have the "),On=t("code"),Ku=o("$$invalidate"),Fu=o(" function inserted right after the assignment or mutation:"),Qu=i(),Tn=t("div"),Zu=i(),ft=t("p"),Xu=o("The "),Pn=t("code"),sy=o("$$invalidate"),ey=o(" function marks the variable dirty and schedules an update for the component:"),ty=i(),Ln=t("div"),Rr=i(),m=t("section"),Nl=t("h3"),mt=t("a"),ay=o("Adding event listeners"),ny=i(),Rl=t("p"),oy=o("Let's now add an event listener"),ly=i(),Dn=t("div"),ry=i(),jl=t("p"),xt=t("a"),iy=o("Svelte REPL"),cy=i(),Vl=t("p"),py=o("And observe the difference:"),hy=i(),An=t("div"),vy=i(),Wl=t("p"),ky=o("Some observations:"),dy=i(),gt=t("ul"),Hn=t("li"),$n=t("code"),uy=o("instance"),yy=o(" function now returns 2 variables instead of 1"),fy=i(),Ns=t("li"),my=o("Listen to click event during "),Ul=t("strong"),xy=o("mount"),gy=o(" and dispose it in "),Bl=t("strong"),Ey=o("destroy"),_y=i(),ts=t("p"),wy=o("As I've mentioned earlier, "),Mn=t("code"),by=o("instance"),Sy=o(" function returns variables that are "),Jl=t("strong"),Cy=o("referenced in the template"),Iy=o(" and that are "),Gl=t("strong"),Oy=o("mutated or reassigned"),Ty=o("."),Py=i(),as=t("p"),Ly=o("Since we've just referenced the "),Nn=t("code"),Dy=o("update"),Ay=o(" function in the template, it is now returned in the "),Rn=t("code"),Hy=o("instance"),$y=o(" function as part of the "),ql=t("strong"),My=o("ctx"),Ny=o("."),Ry=i(),zl=t("p"),jy=o("Svelte tries generate as compact JavaScript output as possible, not returning an extra variable if it is not necessary."),jr=i(),x=t("section"),Yl=t("h3"),Et=t("a"),Vy=o("listen and dispose"),Wy=i(),Ss=t("p"),Uy=o("Whenever you add "),_t=t("a"),By=o("an event listener"),Jy=o(" in Svelte, Svelte will inject code to add an "),wt=t("a"),Gy=o("event listener"),qy=o(" and remove it when the DOM fragment is removed from the DOM."),zy=i(),Kl=t("p"),Yy=o("Try adding more event listeners,"),Ky=i(),jn=t("div"),Fy=i(),Fl=t("p"),bt=t("a"),Qy=o("Svelte REPL"),Zy=i(),Ql=t("p"),Xy=o("and observe the compiled output:"),sf=i(),Vn=t("div"),ef=i(),Zl=t("p"),tf=o("Instead of declaring and creating a new variable to remove each event listener, Svelte assigns all of them to an array:"),af=i(),Wn=t("div"),nf=i(),Xl=t("p"),of=o("Minification can compact the variable name, but you can't remove the brackets."),lf=i(),St=t("p"),rf=o("Again, this is another great example of where Svelte tries to generate compact JavaScript output. Svelte does not create the "),Un=t("code"),cf=o("dispose"),pf=o(" array when there's only 1 event listener."),Vr=i(),G=t("section"),sr=t("h2"),Ct=t("a"),hf=o("Summary"),vf=i(),er=t("p"),kf=o("The Svelte syntax is a superset of HTML."),df=i(),tr=t("p"),uf=o("When you write a Svelte component, the Svelte compiler analyses your code and generates optimised JavaScript code output."),yf=i(),ar=t("p"),ff=o("The output can be divided into 3 segments:"),Wr=i(),Rs=t("section"),nr=t("h3"),It=t("a"),mf=o("1. create_fragment"),xf=i(),or=t("ul"),lr=t("li"),gf=o("Returns a fragment, which is an instruction manual on how to build the DOM fragment for the component"),Ur=i(),js=t("section"),rr=t("h3"),Ot=t("a"),Ef=o("2. instance"),_f=i(),Cs=t("ul"),Tt=t("li"),wf=o("Most of the code written in the "),Bn=t("code"),bf=o("<script>"),Sf=o(" tag is in here."),Cf=i(),ir=t("li"),If=o("Returns a list of instance variables that are referenced in the template"),Of=i(),Jn=t("li"),Gn=t("code"),Tf=o("$$invalidate"),Pf=o(" is inserted after every assignment and mutation of the instance variable"),Br=i(),q=t("section"),cr=t("h3"),Pt=t("a"),Lf=o("3. class App extends SvelteComponent"),Df=i(),Is=t("ul"),Os=t("li"),Af=o("Initialise the component with "),qn=t("code"),Hf=o("create_fragment"),$f=o(" and "),zn=t("code"),Mf=o("instance"),Nf=o(" function"),Rf=i(),pr=t("li"),jf=o("Sets up the component internals"),Vf=i(),Yn=t("li"),Wf=o("Provides the "),Lt=t("a"),Uf=o("Component API"),Bf=i(),hr=t("p"),Jf=o("Svelte strives to generate as compact JavaScript as possible, for example:"),Gf=i(),ns=t("ul"),Dt=t("li"),qf=o("Breaking text content of "),Kn=t("code"),zf=o("h1"),Yf=o(" into separate text nodes only when part of the text can be updated"),Kf=i(),Ts=t("li"),Ff=o("Not defining "),Fn=t("code"),Qf=o("create_fragment"),Zf=o(" or "),Qn=t("code"),Xf=o("instance"),sm=o(" function when it is not needed"),em=i(),At=t("li"),tm=o("Generate "),Zn=t("code"),am=o("dispose"),nm=o(" as an array or a function, depending on the number of event listeners."),om=i(),vr=t("li"),lm=o("..."),Jr=i(),R=t("section"),kr=t("h2"),Ht=t("a"),rm=o("Closing Note"),im=i(),dr=t("p"),cm=o("We've covered the basic structure of the Svelte's compiled output, and this is just the beginning."),pm=i(),$t=t("p"),hm=o("If you wish to know more, "),Mt=t("a"),vm=o("follow me on Twitter"),km=o("."),dm=i(),os=t("p"),um=o("I'll post it on Twitter when the next part is ready, where I'll be covering "),Nt=t("a"),ym=o("logic blocks"),fm=o(", "),Rt=t("a"),mm=o("slots"),xm=o(", "),jt=t("a"),gm=o("context"),Em=o(", and many others."),_m=i(),ur=t("p"),Vt=t("strong"),wm=o("\u27A1 \u27A1  Continue reading on "),Xn=t("a"),bm=o("Part 2"),Sm=o("."),this.h()},l(p){h3(E.$$.fragment,p),K=c(p),P=a(p,"SECTION",{});var h=n(P);ys=a(h,"H2",{});var Hm=n(ys);_=a(Hm,"A",{href:!0,id:!0});var $m=n(_);F=l($m,"Background"),$m.forEach(e),Hm.forEach(e),Jt=c(h),Q=a(h,"P",{});var Vs=n(Q);Vi=l(Vs,"A while ago, "),Xs=a(Vs,"A",{href:!0,rel:!0});var Mm=n(Xs);Wi=l(Mm,"@swyx"),Mm.forEach(e),Ui=l(Vs," came back to Singapore and visited us in "),se=a(Vs,"A",{href:!0,rel:!0});var Nm=n(se);Bi=l(Nm,"Shopee Singapore"),Nm.forEach(e),Ji=l(Vs," ("),ee=a(Vs,"A",{href:!0,rel:!0});var Rm=n(ee);Gi=l(Rm,"We're hiring!"),Rm.forEach(e),qi=l(Vs,")."),Vs.forEach(e),zi=c(h),Z=a(h,"P",{});var Ws=n(Z);Yi=l(Ws,"He gave an amazing sharing on "),te=a(Ws,"A",{href:!0,rel:!0});var jm=n(te);Ki=l(jm,"Compile Svelte in Your Head"),jm.forEach(e),Fi=l(Ws," ("),ae=a(Ws,"A",{href:!0,rel:!0});var Vm=n(ae);Qi=l(Vm,"video"),Vm.forEach(e),Zi=l(Ws,") in the "),ne=a(Ws,"A",{href:!0,rel:!0});var Wm=n(ne);Xi=l(Wm,"ReactKnowledgeable Originals"),Wm.forEach(e),sc=l(Ws,"."),Ws.forEach(e),ec=c(h),uo=a(h,"P",{});var Um=n(uo);tc=l(Um,"I love his presentation and the title is so catchy, so I begged him to use the catchy title as this series of articles about the Svelte compiler. It will be about how Svelte sees your code and compiles it down to plain JavaScript."),Um.forEach(e),h.forEach(e),xr=c(p),Ps=a(p,"SECTION",{});var qr=n(Ps);yo=a(qr,"H2",{});var Bm=n(yo);oe=a(Bm,"A",{href:!0,id:!0});var Jm=n(oe);ac=l(Jm,"Introduction"),Jm.forEach(e),Bm.forEach(e),nc=c(qr),fo=a(qr,"P",{});var Gm=n(fo);oc=l(Gm,"Lets refresh ourselves with how we write web app without any framework:"),Gm.forEach(e),qr.forEach(e),gr=c(p),Ls=a(p,"SECTION",{});var zr=n(Ls);mo=a(zr,"H3",{});var qm=n(mo);le=a(qm,"A",{href:!0,id:!0});var zm=n(le);lc=l(zm,"Creating an element"),zm.forEach(e),qm.forEach(e),rc=c(zr),Gt=a(zr,"DIV",{class:!0});var Y3=n(Gt);Y3.forEach(e),zr.forEach(e),Er=c(p),Ds=a(p,"SECTION",{});var Yr=n(Ds);xo=a(Yr,"H3",{});var Ym=n(xo);re=a(Ym,"A",{href:!0,id:!0});var Km=n(re);ic=l(Km,"Updating an element"),Km.forEach(e),Ym.forEach(e),cc=c(Yr),qt=a(Yr,"DIV",{class:!0});var K3=n(qt);K3.forEach(e),Yr.forEach(e),_r=c(p),As=a(p,"SECTION",{});var Kr=n(As);go=a(Kr,"H3",{});var Fm=n(go);ie=a(Fm,"A",{href:!0,id:!0});var Qm=n(ie);pc=l(Qm,"Removing an element"),Qm.forEach(e),Fm.forEach(e),hc=c(Kr),zt=a(Kr,"DIV",{class:!0});var F3=n(zt);F3.forEach(e),Kr.forEach(e),wr=c(p),Hs=a(p,"SECTION",{});var Fr=n(Hs);Eo=a(Fr,"H3",{});var Zm=n(Eo);ce=a(Zm,"A",{href:!0,id:!0});var Xm=n(ce);vc=l(Xm,"Adding style to an element"),Xm.forEach(e),Zm.forEach(e),kc=c(Fr),Yt=a(Fr,"DIV",{class:!0});var Q3=n(Yt);Q3.forEach(e),Fr.forEach(e),br=c(p),B=a(p,"SECTION",{});var Us=n(B);_o=a(Us,"H3",{});var s1=n(_o);pe=a(s1,"A",{href:!0,id:!0});var e1=n(pe);dc=l(e1,"Listen for click events on an element"),e1.forEach(e),s1.forEach(e),uc=c(Us),Kt=a(Us,"DIV",{class:!0});var Z3=n(Kt);Z3.forEach(e),yc=c(Us),wo=a(Us,"P",{});var t1=n(wo);fc=l(t1,"These are code that you have to write, without using any framework or library."),t1.forEach(e),mc=c(Us),bo=a(Us,"P",{});var a1=n(bo);xc=l(a1,"The main idea of this article is to show how the Svelte compiler compiles the Svelte syntax into statements of codes that I've shown above."),a1.forEach(e),Us.forEach(e),Sr=c(p),k=a(p,"SECTION",{});var d=n(k);So=a(d,"H2",{});var n1=n(So);he=a(n1,"A",{href:!0,id:!0});var o1=n(he);gc=l(o1,"Svelte syntax"),o1.forEach(e),n1.forEach(e),Ec=c(d),Co=a(d,"P",{});var l1=n(Co);_c=l(l1,"Here I'm going to show you some basics of the Svelte syntax."),l1.forEach(e),wc=c(d),Io=a(d,"BLOCKQUOTE",{});var r1=n(Io);ve=a(r1,"P",{});var Qr=n(ve);bc=l(Qr,"If you wish to learn more, I highly recommend trying "),ke=a(Qr,"A",{href:!0,rel:!0});var i1=n(ke);Sc=l(i1,"Svelte's interactive tutorial"),i1.forEach(e),Cc=l(Qr,"."),Qr.forEach(e),r1.forEach(e),Ic=c(d),Oo=a(d,"P",{});var c1=n(Oo);Oc=l(c1,"So here is a basic Svelte component:"),c1.forEach(e),Tc=c(d),Ft=a(d,"DIV",{class:!0});var X3=n(Ft);X3.forEach(e),Pc=c(d),To=a(d,"P",{});var p1=n(To);de=a(p1,"A",{href:!0,rel:!0});var h1=n(de);Lc=l(h1,"Svelte REPL"),h1.forEach(e),p1.forEach(e),Dc=c(d),ue=a(d,"P",{});var Zr=n(ue);Ac=l(Zr,"To add style, you add a "),Qt=a(Zr,"CODE",{class:!0});var v1=n(Qt);Hc=l(v1,"<style>"),v1.forEach(e),$c=l(Zr," tag:"),Zr.forEach(e),Mc=c(d),Zt=a(d,"DIV",{class:!0});var sE=n(Zt);sE.forEach(e),Nc=c(d),Po=a(d,"P",{});var k1=n(Po);ye=a(k1,"A",{href:!0,rel:!0});var d1=n(ye);Rc=l(d1,"Svelte REPL"),d1.forEach(e),k1.forEach(e),jc=c(d),Lo=a(d,"P",{});var u1=n(Lo);Vc=l(u1,"At this point, writing Svelte component just feels like writing HTML, that's because Svelte syntax is a super set of the HTML syntax."),u1.forEach(e),Wc=c(d),Do=a(d,"P",{});var y1=n(Do);Uc=l(y1,"Let's look at how we add a data to our component:"),y1.forEach(e),Bc=c(d),Xt=a(d,"DIV",{class:!0});var eE=n(Xt);eE.forEach(e),Jc=c(d),Ao=a(d,"P",{});var f1=n(Ao);fe=a(f1,"A",{href:!0,rel:!0});var m1=n(fe);Gc=l(m1,"Svelte REPL"),m1.forEach(e),f1.forEach(e),qc=c(d),Ho=a(d,"P",{});var x1=n(Ho);zc=l(x1,"We put JavaScript inside the curly brackets."),x1.forEach(e),Yc=c(d),me=a(d,"P",{});var Xr=n(me);Kc=l(Xr,"To add a click handler, we use the "),sa=a(Xr,"CODE",{class:!0});var g1=n(sa);Fc=l(g1,"on:"),g1.forEach(e),Qc=l(Xr," directive"),Xr.forEach(e),Zc=c(d),ea=a(d,"DIV",{class:!0});var tE=n(ea);tE.forEach(e),Xc=c(d),$o=a(d,"P",{});var E1=n($o);xe=a(E1,"A",{href:!0,rel:!0});var _1=n(xe);sp=l(_1,"Svelte REPL"),_1.forEach(e),E1.forEach(e),ep=c(d),ta=a(d,"P",{});var Cm=n(ta);tp=l(Cm,"To change the data, we use "),ge=a(Cm,"A",{href:!0,rel:!0});var w1=n(ge);ap=l(w1,"assignment operators"),w1.forEach(e),Cm.forEach(e),np=c(d),aa=a(d,"DIV",{class:!0});var aE=n(aa);aE.forEach(e),op=c(d),Mo=a(d,"P",{});var b1=n(Mo);Ee=a(b1,"A",{href:!0,rel:!0});var S1=n(Ee);lp=l(S1,"Svelte REPL"),S1.forEach(e),b1.forEach(e),rp=c(d),No=a(d,"P",{});var C1=n(No);ip=l(C1,"Let's move on to see how Svelte syntax is compiled into JavaScript that we've seen earlier"),C1.forEach(e),d.forEach(e),Cr=c(p),w=a(p,"SECTION",{});var T=n(w);Ro=a(T,"H2",{});var I1=n(Ro);_e=a(I1,"A",{href:!0,id:!0});var O1=n(_e);cp=l(O1,"Compile Svelte in your Head"),O1.forEach(e),I1.forEach(e),pp=c(T),jo=a(T,"P",{});var T1=n(jo);hp=l(T1,"The Svelte compiler analyses the code you write and generates an optimised JavaScript output."),T1.forEach(e),vp=c(T),Vo=a(T,"P",{});var P1=n(Vo);kp=l(P1,"To study how Svelte compiles the code, lets start with the smallest example possible, and slowly build up the code. Through the process, you will see that Svelte incrementally adds to the output code based on your changes."),P1.forEach(e),dp=c(T),Wo=a(T,"P",{});var L1=n(Wo);up=l(L1,"The first example that we are going to see is:"),L1.forEach(e),yp=c(T),na=a(T,"DIV",{class:!0});var nE=n(na);nE.forEach(e),fp=c(T),Uo=a(T,"P",{});var D1=n(Uo);we=a(D1,"A",{href:!0,rel:!0});var A1=n(we);mp=l(A1,"Svelte REPL"),A1.forEach(e),D1.forEach(e),xp=c(T),Bo=a(T,"P",{});var H1=n(Bo);gp=l(H1,"The output code:"),H1.forEach(e),Ep=c(T),oa=a(T,"DIV",{class:!0});var oE=n(oa);oE.forEach(e),_p=c(T),Jo=a(T,"P",{});var $1=n(Jo);wp=l($1,"You can break down the output code into 2 sections:"),$1.forEach(e),bp=c(T),be=a(T,"UL",{});var si=n(be);Go=a(si,"LI",{});var M1=n(Go);la=a(M1,"CODE",{class:!0});var N1=n(la);Sp=l(N1,"create_fragment"),N1.forEach(e),M1.forEach(e),Cp=c(si),qo=a(si,"LI",{});var R1=n(qo);ra=a(R1,"CODE",{class:!0});var j1=n(ra);Ip=l(j1,"class App extends SvelteComponent"),j1.forEach(e),R1.forEach(e),si.forEach(e),T.forEach(e),Ir=c(p),J=a(p,"SECTION",{});var Bs=n(J);zo=a(Bs,"H3",{});var V1=n(zo);Se=a(V1,"A",{href:!0,id:!0});var W1=n(Se);Op=l(W1,"create_fragment"),W1.forEach(e),V1.forEach(e),Tp=c(Bs),Yo=a(Bs,"P",{});var U1=n(Yo);Pp=l(U1,"Svelte components are the building blocks of a Svelte application. Each Svelte component focuses on building its piece or fragment of the final DOM."),U1.forEach(e),Lp=c(Bs),Ce=a(Bs,"P",{});var ei=n(Ce);Dp=l(ei,"The "),ia=a(ei,"CODE",{class:!0});var B1=n(ia);Ap=l(B1,"create_fragment"),B1.forEach(e),Hp=l(ei," function gives the Svelte component an instruction manual on how to build the DOM fragment."),ei.forEach(e),$p=c(Bs),Ie=a(Bs,"P",{});var ti=n(Ie);Mp=l(ti,"Look at the return object of the "),ca=a(ti,"CODE",{class:!0});var J1=n(ca);Np=l(J1,"create_fragment"),J1.forEach(e),Rp=l(ti," function. It has methods, such as:"),ti.forEach(e),Bs.forEach(e),Or=c(p),M=a(p,"SECTION",{});var cs=n(M);Ko=a(cs,"H4",{});var G1=n(Ko);Oe=a(G1,"A",{href:!0,id:!0});var q1=n(Oe);jp=l(q1,"- c()"),q1.forEach(e),G1.forEach(e),Vp=c(cs),Te=a(cs,"P",{});var ai=n(Te);Wp=l(ai,"Short for "),Fo=a(ai,"STRONG",{});var z1=n(Fo);Up=l(z1,"create"),z1.forEach(e),Bp=l(ai,"."),ai.forEach(e),Jp=c(cs),Qo=a(cs,"P",{});var Y1=n(Qo);Gp=l(Y1,"Contains instructions to create all the elements in the fragment."),Y1.forEach(e),qp=c(cs),Pe=a(cs,"P",{});var ni=n(Pe);zp=l(ni,"In this example, it contains instructions to create the "),pa=a(ni,"CODE",{class:!0});var K1=n(pa);Yp=l(K1,"h1"),K1.forEach(e),Kp=l(ni," element"),ni.forEach(e),Fp=c(cs),ha=a(cs,"DIV",{class:!0});var lE=n(ha);lE.forEach(e),cs.forEach(e),Tr=c(p),N=a(p,"SECTION",{});var ps=n(N);Zo=a(ps,"H4",{});var F1=n(Zo);Le=a(F1,"A",{href:!0,id:!0});var Q1=n(Le);Qp=l(Q1,"- m(target, anchor)"),Q1.forEach(e),F1.forEach(e),Zp=c(ps),De=a(ps,"P",{});var oi=n(De);Xp=l(oi,"Short for "),Xo=a(oi,"STRONG",{});var Z1=n(Xo);sh=l(Z1,"mount"),Z1.forEach(e),eh=l(oi,"."),oi.forEach(e),th=c(ps),sl=a(ps,"P",{});var X1=n(sl);ah=l(X1,"Contains instructions to mount the elements into the target."),X1.forEach(e),nh=c(ps),fs=a(ps,"P",{});var so=n(fs);oh=l(so,"In this example, it contains instructions to insert the "),va=a(so,"CODE",{class:!0});var sx=n(va);lh=l(sx,"h1"),sx.forEach(e),rh=l(so," element into the "),ka=a(so,"CODE",{class:!0});var ex=n(ka);ih=l(ex,"target"),ex.forEach(e),ch=l(so,"."),so.forEach(e),ph=c(ps),da=a(ps,"DIV",{class:!0});var rE=n(da);rE.forEach(e),ps.forEach(e),Pr=c(p),A=a(p,"SECTION",{});var z=n(A);el=a(z,"H4",{});var tx=n(el);Ae=a(tx,"A",{href:!0,id:!0});var ax=n(Ae);hh=l(ax,"- d(detaching)"),ax.forEach(e),tx.forEach(e),vh=c(z),He=a(z,"P",{});var li=n(He);kh=l(li,"Short for "),tl=a(li,"STRONG",{});var nx=n(tl);dh=l(nx,"destroy"),nx.forEach(e),uh=l(li,"."),li.forEach(e),yh=c(z),al=a(z,"P",{});var ox=n(al);fh=l(ox,"Contains instructions to remove the elements from the target."),ox.forEach(e),mh=c(z),$e=a(z,"P",{});var ri=n($e);xh=l(ri,"In this example, we detach the "),ua=a(ri,"CODE",{class:!0});var lx=n(ua);gh=l(lx,"h1"),lx.forEach(e),Eh=l(ri," element from the DOM"),ri.forEach(e),_h=c(z),ya=a(z,"DIV",{class:!0});var iE=n(ya);iE.forEach(e),wh=c(z),nl=a(z,"BLOCKQUOTE",{});var rx=n(nl);Me=a(rx,"P",{});var ii=n(Me);bh=l(ii,"The method names are short for better minification. "),Ne=a(ii,"A",{href:!0,rel:!0});var ix=n(Ne);Sh=l(ix,"See what can't be minified here"),ix.forEach(e),Ch=l(ii,"."),ii.forEach(e),rx.forEach(e),z.forEach(e),Lr=c(p),y=a(p,"SECTION",{});var g=n(y);ol=a(g,"H3",{});var cx=n(ol);Re=a(cx,"A",{href:!0,id:!0});var px=n(Re);Ih=l(px,"export default class App extends SvelteComponent"),px.forEach(e),cx.forEach(e),Oh=c(g),je=a(g,"P",{});var ci=n(je);Th=l(ci,"Each component is a class, which you can import and instantiate through "),Ve=a(ci,"A",{href:!0,rel:!0});var hx=n(Ve);Ph=l(hx,"this API"),hx.forEach(e),Lh=l(ci,"."),ci.forEach(e),Dh=c(g),We=a(g,"P",{});var pi=n(We);Ah=l(pi,"And in the constructor, we initialize the component with information that made up the component such as "),fa=a(pi,"CODE",{class:!0});var vx=n(fa);Hh=l(vx,"create_fragment"),vx.forEach(e),$h=l(pi,". Svelte will only pass information that it is needed and remove them whenever it is not necessary."),pi.forEach(e),Mh=c(g),Ue=a(g,"P",{});var hi=n(Ue);Nh=l(hi,"Try removing the "),ma=a(hi,"CODE",{class:!0});var kx=n(ma);Rh=l(kx,"<h1>"),kx.forEach(e),jh=l(hi," tag and see what happens to the output:"),hi.forEach(e),Vh=c(g),xa=a(g,"DIV",{class:!0});var cE=n(xa);cE.forEach(e),Wh=c(g),ll=a(g,"P",{});var dx=n(ll);Be=a(dx,"A",{href:!0,rel:!0});var ux=n(Be);Uh=l(ux,"Svelte REPL"),ux.forEach(e),dx.forEach(e),Bh=c(g),ga=a(g,"DIV",{class:!0});var pE=n(ga);pE.forEach(e),Jh=c(g),ms=a(g,"P",{});var eo=n(ms);Gh=l(eo,"Svelte will pass in "),Ea=a(eo,"CODE",{class:!0});var yx=n(Ea);qh=l(yx,"null"),yx.forEach(e),zh=l(eo," instead of "),_a=a(eo,"CODE",{class:!0});var fx=n(_a);Yh=l(fx,"create_fragment"),fx.forEach(e),Kh=l(eo,"!"),eo.forEach(e),Fh=c(g),Je=a(g,"P",{});var vi=n(Je);Qh=l(vi,"The "),wa=a(vi,"CODE",{class:!0});var mx=n(wa);Zh=l(mx,"init"),mx.forEach(e),Xh=l(vi," function is where Svelte sets up most of the internals, such as:"),vi.forEach(e),sv=c(g),xs=a(g,"UL",{});var to=n(xs);gs=a(to,"LI",{});var ao=n(gs);ev=l(ao,"component props, "),ba=a(ao,"CODE",{class:!0});var xx=n(ba);tv=l(xx,"ctx"),xx.forEach(e),av=l(ao," (will explain what "),Sa=a(ao,"CODE",{class:!0});var gx=n(Sa);nv=l(gx,"ctx"),gx.forEach(e),ov=l(ao," is later) and context"),ao.forEach(e),lv=c(to),rl=a(to,"LI",{});var Ex=n(rl);rv=l(Ex,"component lifecycle events"),Ex.forEach(e),iv=c(to),il=a(to,"LI",{});var _x=n(il);cv=l(_x,"component update mechanism"),_x.forEach(e),to.forEach(e),pv=c(g),Ge=a(g,"P",{});var ki=n(Ge);hv=l(ki,"and at the very end, Svelte calls the "),Ca=a(ki,"CODE",{class:!0});var wx=n(Ca);vv=l(wx,"create_fragment"),wx.forEach(e),kv=l(ki," to create and mount elements into the DOM."),ki.forEach(e),dv=c(g),qe=a(g,"P",{});var di=n(qe);uv=l(di,"If you noticed, all the internal state and methods are attached to "),Ia=a(di,"CODE",{class:!0});var bx=n(Ia);yv=l(bx,"this.$$"),bx.forEach(e),fv=l(di,"."),di.forEach(e),mv=c(g),ze=a(g,"P",{});var ui=n(ze);xv=l(ui,"So if you ever access the "),Oa=a(ui,"CODE",{class:!0});var Sx=n(Oa);gv=l(Sx,"$$"),Sx.forEach(e),Ev=l(ui," property of the component, you are tapping into the internals. You've been warned! \u{1F648}\u{1F6A8}"),ui.forEach(e),g.forEach(e),Dr=c(p),b=a(p,"SECTION",{});var L=n(b);cl=a(L,"H3",{});var Cx=n(cl);Ye=a(Cx,"A",{href:!0,id:!0});var Ix=n(Ye);_v=l(Ix,"Adding data"),Ix.forEach(e),Cx.forEach(e),wv=c(L),pl=a(L,"P",{});var Ox=n(pl);bv=l(Ox,"Now that we've looked at the bare minimum of a Svelte component, let's see how adding a data would change the compiled output:"),Ox.forEach(e),Sv=c(L),Ta=a(L,"DIV",{class:!0});var hE=n(Ta);hE.forEach(e),Cv=c(L),hl=a(L,"P",{});var Tx=n(hl);Ke=a(Tx,"A",{href:!0,rel:!0});var Px=n(Ke);Iv=l(Px,"Svelte REPL"),Px.forEach(e),Tx.forEach(e),Ov=c(L),vl=a(L,"P",{});var Lx=n(vl);Tv=l(Lx,"Notice the change in the output:"),Lx.forEach(e),Pv=c(L),Pa=a(L,"DIV",{class:!0});var vE=n(Pa);vE.forEach(e),Lv=c(L),kl=a(L,"P",{});var Dx=n(kl);Dv=l(Dx,"Some observations:"),Dx.forEach(e),Av=c(L),Fe=a(L,"UL",{});var yi=n(Fe);Qe=a(yi,"LI",{});var fi=n(Qe);Hv=l(fi,"What you've written in the "),La=a(fi,"CODE",{class:!0});var Ax=n(La);$v=l(Ax,"<script>"),Ax.forEach(e),Mv=l(fi," tag is moved into the top level of the code"),fi.forEach(e),Nv=c(yi),Da=a(yi,"LI",{});var Im=n(Da);Aa=a(Im,"CODE",{class:!0});var Hx=n(Aa);Rv=l(Hx,"h1"),Hx.forEach(e),jv=l(Im," element's text content is now a template literal"),Im.forEach(e),yi.forEach(e),Vv=c(L),dl=a(L,"P",{});var $x=n(dl);Wv=l($x,"There's a lot of amazing things happening under the hood right now, but let's hold our horses for a while, because it's best explained when comparing with the next code change."),$x.forEach(e),L.forEach(e),Ar=c(p),u=a(p,"SECTION",{});var f=n(u);ul=a(f,"H3",{});var Mx=n(ul);Ze=a(Mx,"A",{href:!0,id:!0});var Nx=n(Ze);Uv=l(Nx,"Updating data"),Nx.forEach(e),Mx.forEach(e),Bv=c(f),Xe=a(f,"P",{});var mi=n(Xe);Jv=l(mi,"Let's add a function to update the "),Ha=a(mi,"CODE",{class:!0});var Rx=n(Ha);Gv=l(Rx,"name"),Rx.forEach(e),qv=l(mi,":"),mi.forEach(e),zv=c(f),$a=a(f,"DIV",{class:!0});var kE=n($a);kE.forEach(e),Yv=c(f),yl=a(f,"P",{});var jx=n(yl);st=a(jx,"A",{href:!0,rel:!0});var Vx=n(st);Kv=l(Vx,"Svelte REPL"),Vx.forEach(e),jx.forEach(e),Fv=c(f),fl=a(f,"P",{});var Wx=n(fl);Qv=l(Wx,"...and observe the change in the compiled output:"),Wx.forEach(e),Zv=c(f),Ma=a(f,"DIV",{class:!0});var dE=n(Ma);dE.forEach(e),Xv=c(f),ml=a(f,"P",{});var Ux=n(ml);sk=l(Ux,"Some observations:"),Ux.forEach(e),ek=c(f),j=a(f,"UL",{});var hs=n(j);Es=a(hs,"LI",{});var no=n(Es);tk=l(no,"the text content of "),Na=a(no,"CODE",{class:!0});var Bx=n(Na);ak=l(Bx,"<h1>"),Bx.forEach(e),nk=l(no," element is now broken into 2 text nodes, created by the "),Ra=a(no,"CODE",{class:!0});var Jx=n(Ra);ok=l(Jx,"text(...)"),Jx.forEach(e),lk=l(no," function"),no.forEach(e),rk=c(hs),$s=a(hs,"LI",{});var yr=n($s);ik=l(yr,"the return object of the "),ja=a(yr,"CODE",{class:!0});var Gx=n(ja);ck=l(Gx,"create_fragment"),Gx.forEach(e),pk=l(yr," has a new method, "),Va=a(yr,"CODE",{class:!0});var qx=n(Va);hk=l(qx,"p(ctx, dirty)"),qx.forEach(e),yr.forEach(e),vk=c(hs),et=a(hs,"LI",{});var xi=n(et);kk=l(xi,"a new function "),Wa=a(xi,"CODE",{class:!0});var zx=n(Wa);dk=l(zx,"instance"),zx.forEach(e),uk=l(xi," is created"),xi.forEach(e),yk=c(hs),_s=a(hs,"LI",{});var oo=n(_s);fk=l(oo,"What you've written in the "),Ua=a(oo,"CODE",{class:!0});var Yx=n(Ua);mk=l(Yx,"<script>"),Yx.forEach(e),xk=l(oo," tag is now moved into the "),Ba=a(oo,"CODE",{class:!0});var Kx=n(Ba);gk=l(Kx,"instance"),Kx.forEach(e),Ek=l(oo," function"),oo.forEach(e),_k=c(hs),ls=a(hs,"LI",{});var Wt=n(ls);wk=l(Wt,"for the sharp-eyed, the variable "),Ja=a(Wt,"CODE",{class:!0});var Fx=n(Ja);bk=l(Fx,"name"),Fx.forEach(e),Sk=l(Wt," that was used in the "),Ga=a(Wt,"CODE",{class:!0});var Qx=n(Ga);Ck=l(Qx,"create_fragment"),Qx.forEach(e),Ik=l(Wt," is now replaced by "),qa=a(Wt,"CODE",{class:!0});var Zx=n(qa);Ok=l(Zx,"ctx[0]"),Zx.forEach(e),Wt.forEach(e),hs.forEach(e),Tk=c(f),xl=a(f,"P",{});var Xx=n(xl);Pk=l(Xx,"So, why the change?"),Xx.forEach(e),Lk=c(f),tt=a(f,"P",{});var gi=n(tt);Dk=l(gi,"The Svelte compiler tracks all the variables declared in the "),za=a(gi,"CODE",{class:!0});var sg=n(za);Ak=l(sg,"<script>"),sg.forEach(e),Hk=l(gi," tag."),gi.forEach(e),$k=c(f),gl=a(f,"P",{});var eg=n(gl);Mk=l(eg,"It tracks whether the variable:"),eg.forEach(e),Nk=c(f),V=a(f,"UL",{});var vs=n(V);at=a(vs,"LI",{});var Ei=n(at);Rk=l(Ei,"can be mutated? eg: "),Ya=a(Ei,"CODE",{class:!0});var tg=n(Ya);jk=l(tg,"count++"),tg.forEach(e),Vk=l(Ei,","),Ei.forEach(e),Wk=c(vs),nt=a(vs,"LI",{});var _i=n(nt);Uk=l(_i,"can be reassigned? eg: "),Ka=a(_i,"CODE",{class:!0});var ag=n(Ka);Bk=l(ag,"name = 'Svelte'"),ag.forEach(e),Jk=l(_i,","),_i.forEach(e),Gk=c(vs),Fa=a(vs,"LI",{});var Om=n(Fa);qk=l(Om,"is referenced in the template? eg: "),Qa=a(Om,"CODE",{class:!0});var ng=n(Qa);zk=l(ng,"<h1>Hello {name}</h1>"),ng.forEach(e),Om.forEach(e),Yk=c(vs),Ms=a(vs,"LI",{});var fr=n(Ms);Kk=l(fr,"is writable? eg: "),Za=a(fr,"CODE",{class:!0});var og=n(Za);Fk=l(og,"const i = 1;"),og.forEach(e),Qk=l(fr," vs "),Xa=a(fr,"CODE",{class:!0});var lg=n(Xa);Zk=l(lg,"let i = 1;"),lg.forEach(e),fr.forEach(e),Xk=c(vs),El=a(vs,"LI",{});var rg=n(El);sd=l(rg,"... and many more"),rg.forEach(e),vs.forEach(e),ed=c(f),W=a(f,"P",{});var ks=n(W);td=l(ks,"When the Svelte compiler realises that the variable "),sn=a(ks,"CODE",{class:!0});var ig=n(sn);ad=l(ig,"name"),ig.forEach(e),nd=l(ks," can be reassigned, (due to "),en=a(ks,"CODE",{class:!0});var cg=n(en);od=l(cg,"name = 'Svelte';"),cg.forEach(e),ld=l(ks," in "),tn=a(ks,"CODE",{class:!0});var pg=n(tn);rd=l(pg,"update"),pg.forEach(e),id=l(ks,"), it breaks down the text content of the "),an=a(ks,"CODE",{class:!0});var hg=n(an);cd=l(hg,"h1"),hg.forEach(e),pd=l(ks," into parts, so that it can dynamically update part of the text."),ks.forEach(e),hd=c(f),ot=a(f,"P",{});var wi=n(ot);vd=l(wi,"Indeed, you can see that there's a new method, "),nn=a(wi,"CODE",{class:!0});var vg=n(nn);kd=l(vg,"p"),vg.forEach(e),dd=l(wi,", to update the text node."),wi.forEach(e),f.forEach(e),Hr=c(p),rs=a(p,"SECTION",{});var lo=n(rs);_l=a(lo,"H4",{});var kg=n(_l);lt=a(kg,"A",{href:!0,id:!0});var dg=n(lt);ud=l(dg,"- p(ctx, dirty)"),dg.forEach(e),kg.forEach(e),yd=c(lo),rt=a(lo,"P",{});var bi=n(rt);fd=l(bi,"Short for "),wl=a(bi,"STRONG",{});var ug=n(wl);md=l(ug,"u_p_date"),ug.forEach(e),xd=l(bi,"."),bi.forEach(e),gd=c(lo),is=a(lo,"P",{});var Ut=n(is);bl=a(Ut,"STRONG",{});var yg=n(bl);Ed=l(yg,"p(ctx, dirty)"),yg.forEach(e),_d=l(Ut," contains instructions to update the elements based on what has changed in the state ("),on=a(Ut,"CODE",{class:!0});var fg=n(on);wd=l(fg,"dirty"),fg.forEach(e),bd=l(Ut,") and the state ("),ln=a(Ut,"CODE",{class:!0});var mg=n(ln);Sd=l(mg,"ctx"),mg.forEach(e),Cd=l(Ut,") of the component."),Ut.forEach(e),lo.forEach(e),$r=c(p),H=a(p,"SECTION",{});var Y=n(H);Sl=a(Y,"H3",{});var xg=n(Sl);it=a(xg,"A",{href:!0,id:!0});var gg=n(it);Id=l(gg,"instance variable"),gg.forEach(e),xg.forEach(e),Od=c(Y),U=a(Y,"P",{});var ds=n(U);Td=l(ds,"The compiler realises that the variable "),rn=a(ds,"CODE",{class:!0});var Eg=n(rn);Pd=l(Eg,"name"),Eg.forEach(e),Ld=l(ds," cannot be shared across different instances of the "),cn=a(ds,"CODE",{class:!0});var _g=n(cn);Dd=l(_g,"App"),_g.forEach(e),Ad=l(ds," component. That's why it moves the declaration of the variable "),pn=a(ds,"CODE",{class:!0});var wg=n(pn);Hd=l(wg,"name"),wg.forEach(e),$d=l(ds," into a function called "),hn=a(ds,"CODE",{class:!0});var bg=n(hn);Md=l(bg,"instance"),bg.forEach(e),Nd=l(ds,"."),ds.forEach(e),Rd=c(Y),ws=a(Y,"P",{});var ro=n(ws);jd=l(ro,"In the previous example, no matter how many instances of the "),vn=a(ro,"CODE",{class:!0});var Sg=n(vn);Vd=l(Sg,"App"),Sg.forEach(e),Wd=l(ro," component, the value of the variable "),kn=a(ro,"CODE",{class:!0});var Cg=n(kn);Ud=l(Cg,"name"),Cg.forEach(e),Bd=l(ro," is the same and unchanged across the instances:"),ro.forEach(e),Jd=c(Y),dn=a(Y,"DIV",{class:!0});var uE=n(dn);uE.forEach(e),Gd=c(Y),X=a(Y,"P",{});var Js=n(X);qd=l(Js,"But, in this example, the variable "),un=a(Js,"CODE",{class:!0});var Ig=n(un);zd=l(Ig,"name"),Ig.forEach(e),Yd=l(Js," can be changed within 1 instance of the component, so the declaration of the variable "),yn=a(Js,"CODE",{class:!0});var Og=n(yn);Kd=l(Og,"name"),Og.forEach(e),Fd=l(Js," is now moved into the "),fn=a(Js,"CODE",{class:!0});var Tg=n(fn);Qd=l(Tg,"instance"),Tg.forEach(e),Zd=l(Js," function:"),Js.forEach(e),Xd=c(Y),mn=a(Y,"DIV",{class:!0});var yE=n(mn);yE.forEach(e),Y.forEach(e),Mr=c(p),S=a(p,"SECTION",{});var D=n(S);Cl=a(D,"H3",{});var Pg=n(Cl);ct=a(Pg,"A",{href:!0,id:!0});var Lg=n(ct);su=l(Lg,"instance($$self, $$props, $$invalidate)"),Lg.forEach(e),Pg.forEach(e),eu=c(D),bs=a(D,"P",{});var io=n(bs);tu=l(io,"The "),xn=a(io,"CODE",{class:!0});var Dg=n(xn);au=l(Dg,"instance"),Dg.forEach(e),nu=l(io," function returns a list of "),Il=a(io,"EM",{});var Ag=n(Il);ou=l(Ag,"instance"),Ag.forEach(e),lu=l(io," variables, which are variables that are:"),io.forEach(e),ru=c(D),pt=a(D,"UL",{});var Si=n(pt);Ol=a(Si,"LI",{});var Hg=n(Ol);iu=l(Hg,"referenced in the template"),Hg.forEach(e),cu=c(Si),Tl=a(Si,"LI",{});var $g=n(Tl);pu=l($g,"mutated or reassigned, (can be changed within 1 instance of the component)"),$g.forEach(e),Si.forEach(e),hu=c(D),ht=a(D,"P",{});var Ci=n(ht);vu=l(Ci,"In Svelte, we call this list of instance variables, "),Pl=a(Ci,"STRONG",{});var Mg=n(Pl);ku=l(Mg,"ctx"),Mg.forEach(e),du=l(Ci,"."),Ci.forEach(e),uu=c(D),ss=a(D,"P",{});var Gs=n(ss);yu=l(Gs,"In the "),gn=a(Gs,"CODE",{class:!0});var Ng=n(gn);fu=l(Ng,"init"),Ng.forEach(e),mu=l(Gs," function, Svelte calls the "),En=a(Gs,"CODE",{class:!0});var Rg=n(En);xu=l(Rg,"instance"),Rg.forEach(e),gu=l(Gs," function to create "),Ll=a(Gs,"STRONG",{});var jg=n(Ll);Eu=l(jg,"ctx"),jg.forEach(e),_u=l(Gs,", and uses it to create the fragment for the component:"),Gs.forEach(e),wu=c(D),_n=a(D,"DIV",{class:!0});var fE=n(_n);fE.forEach(e),bu=c(D),es=a(D,"P",{});var qs=n(es);Su=l(qs,"Now, instead of accessing the variable "),wn=a(qs,"CODE",{class:!0});var Vg=n(wn);Cu=l(Vg,"name"),Vg.forEach(e),Iu=l(qs," outside of the component, we refer to the variable "),bn=a(qs,"CODE",{class:!0});var Wg=n(bn);Ou=l(Wg,"name"),Wg.forEach(e),Tu=l(qs," passed via the "),Dl=a(qs,"STRONG",{});var Ug=n(Dl);Pu=l(Ug,"ctx"),Ug.forEach(e),Lu=l(qs,":"),qs.forEach(e),Du=c(D),Sn=a(D,"DIV",{class:!0});var mE=n(Sn);mE.forEach(e),Au=c(D),Cn=a(D,"P",{});var Tm=n(Cn);Hu=l(Tm,"The reason that ctx is an array instead of a map or an object is because of an optimisation related to bitmask, you can see "),vt=a(Tm,"A",{href:!0,rel:!0});var Bg=n(vt);$u=l(Bg,"the discussion about it here"),Bg.forEach(e),Tm.forEach(e),D.forEach(e),Nr=c(p),O=a(p,"SECTION",{});var $=n(O);Al=a($,"H3",{});var Jg=n(Al);kt=a(Jg,"A",{href:!0,id:!0});var Gg=n(kt);Mu=l(Gg,"$$invalidate"),Gg.forEach(e),Jg.forEach(e),Nu=c($),dt=a($,"P",{});var Ii=n(dt);Ru=l(Ii,"The secret behind the system of reactivity in Svelte is the "),In=a(Ii,"CODE",{class:!0});var qg=n(In);ju=l(qg,"$$invalidate"),qg.forEach(e),Vu=l(Ii," function."),Ii.forEach(e),Wu=c($),Hl=a($,"P",{});var zg=n(Hl);Uu=l(zg,"Every variable that has been"),zg.forEach(e),Bu=c($),ut=a($,"UL",{});var Oi=n(ut);$l=a(Oi,"LI",{});var Yg=n($l);Ju=l(Yg,"reassigned or mutated"),Yg.forEach(e),Gu=c(Oi),Ml=a(Oi,"LI",{});var Kg=n(Ml);qu=l(Kg,"referenced in the template"),Kg.forEach(e),Oi.forEach(e),zu=c($),yt=a($,"P",{});var Ti=n(yt);Yu=l(Ti,"will have the "),On=a(Ti,"CODE",{class:!0});var Fg=n(On);Ku=l(Fg,"$$invalidate"),Fg.forEach(e),Fu=l(Ti," function inserted right after the assignment or mutation:"),Ti.forEach(e),Qu=c($),Tn=a($,"DIV",{class:!0});var xE=n(Tn);xE.forEach(e),Zu=c($),ft=a($,"P",{});var Pi=n(ft);Xu=l(Pi,"The "),Pn=a(Pi,"CODE",{class:!0});var Qg=n(Pn);sy=l(Qg,"$$invalidate"),Qg.forEach(e),ey=l(Pi," function marks the variable dirty and schedules an update for the component:"),Pi.forEach(e),ty=c($),Ln=a($,"DIV",{class:!0});var gE=n(Ln);gE.forEach(e),$.forEach(e),Rr=c(p),m=a(p,"SECTION",{});var C=n(m);Nl=a(C,"H3",{});var Zg=n(Nl);mt=a(Zg,"A",{href:!0,id:!0});var Xg=n(mt);ay=l(Xg,"Adding event listeners"),Xg.forEach(e),Zg.forEach(e),ny=c(C),Rl=a(C,"P",{});var s2=n(Rl);oy=l(s2,"Let's now add an event listener"),s2.forEach(e),ly=c(C),Dn=a(C,"DIV",{class:!0});var EE=n(Dn);EE.forEach(e),ry=c(C),jl=a(C,"P",{});var e2=n(jl);xt=a(e2,"A",{href:!0,rel:!0});var t2=n(xt);iy=l(t2,"Svelte REPL"),t2.forEach(e),e2.forEach(e),cy=c(C),Vl=a(C,"P",{});var a2=n(Vl);py=l(a2,"And observe the difference:"),a2.forEach(e),hy=c(C),An=a(C,"DIV",{class:!0});var _E=n(An);_E.forEach(e),vy=c(C),Wl=a(C,"P",{});var n2=n(Wl);ky=l(n2,"Some observations:"),n2.forEach(e),dy=c(C),gt=a(C,"UL",{});var Li=n(gt);Hn=a(Li,"LI",{});var Pm=n(Hn);$n=a(Pm,"CODE",{class:!0});var o2=n($n);uy=l(o2,"instance"),o2.forEach(e),yy=l(Pm," function now returns 2 variables instead of 1"),Pm.forEach(e),fy=c(Li),Ns=a(Li,"LI",{});var mr=n(Ns);my=l(mr,"Listen to click event during "),Ul=a(mr,"STRONG",{});var l2=n(Ul);xy=l(l2,"mount"),l2.forEach(e),gy=l(mr," and dispose it in "),Bl=a(mr,"STRONG",{});var r2=n(Bl);Ey=l(r2,"destroy"),r2.forEach(e),mr.forEach(e),Li.forEach(e),_y=c(C),ts=a(C,"P",{});var zs=n(ts);wy=l(zs,"As I've mentioned earlier, "),Mn=a(zs,"CODE",{class:!0});var i2=n(Mn);by=l(i2,"instance"),i2.forEach(e),Sy=l(zs," function returns variables that are "),Jl=a(zs,"STRONG",{});var c2=n(Jl);Cy=l(c2,"referenced in the template"),c2.forEach(e),Iy=l(zs," and that are "),Gl=a(zs,"STRONG",{});var p2=n(Gl);Oy=l(p2,"mutated or reassigned"),p2.forEach(e),Ty=l(zs,"."),zs.forEach(e),Py=c(C),as=a(C,"P",{});var Ys=n(as);Ly=l(Ys,"Since we've just referenced the "),Nn=a(Ys,"CODE",{class:!0});var h2=n(Nn);Dy=l(h2,"update"),h2.forEach(e),Ay=l(Ys," function in the template, it is now returned in the "),Rn=a(Ys,"CODE",{class:!0});var v2=n(Rn);Hy=l(v2,"instance"),v2.forEach(e),$y=l(Ys," function as part of the "),ql=a(Ys,"STRONG",{});var k2=n(ql);My=l(k2,"ctx"),k2.forEach(e),Ny=l(Ys,"."),Ys.forEach(e),Ry=c(C),zl=a(C,"P",{});var d2=n(zl);jy=l(d2,"Svelte tries generate as compact JavaScript output as possible, not returning an extra variable if it is not necessary."),d2.forEach(e),C.forEach(e),jr=c(p),x=a(p,"SECTION",{});var I=n(x);Yl=a(I,"H3",{});var u2=n(Yl);Et=a(u2,"A",{href:!0,id:!0});var y2=n(Et);Vy=l(y2,"listen and dispose"),y2.forEach(e),u2.forEach(e),Wy=c(I),Ss=a(I,"P",{});var co=n(Ss);Uy=l(co,"Whenever you add "),_t=a(co,"A",{href:!0,rel:!0});var f2=n(_t);By=l(f2,"an event listener"),f2.forEach(e),Jy=l(co," in Svelte, Svelte will inject code to add an "),wt=a(co,"A",{href:!0,rel:!0});var m2=n(wt);Gy=l(m2,"event listener"),m2.forEach(e),qy=l(co," and remove it when the DOM fragment is removed from the DOM."),co.forEach(e),zy=c(I),Kl=a(I,"P",{});var x2=n(Kl);Yy=l(x2,"Try adding more event listeners,"),x2.forEach(e),Ky=c(I),jn=a(I,"DIV",{class:!0});var wE=n(jn);wE.forEach(e),Fy=c(I),Fl=a(I,"P",{});var g2=n(Fl);bt=a(g2,"A",{href:!0,rel:!0});var E2=n(bt);Qy=l(E2,"Svelte REPL"),E2.forEach(e),g2.forEach(e),Zy=c(I),Ql=a(I,"P",{});var _2=n(Ql);Xy=l(_2,"and observe the compiled output:"),_2.forEach(e),sf=c(I),Vn=a(I,"DIV",{class:!0});var bE=n(Vn);bE.forEach(e),ef=c(I),Zl=a(I,"P",{});var w2=n(Zl);tf=l(w2,"Instead of declaring and creating a new variable to remove each event listener, Svelte assigns all of them to an array:"),w2.forEach(e),af=c(I),Wn=a(I,"DIV",{class:!0});var SE=n(Wn);SE.forEach(e),nf=c(I),Xl=a(I,"P",{});var b2=n(Xl);of=l(b2,"Minification can compact the variable name, but you can't remove the brackets."),b2.forEach(e),lf=c(I),St=a(I,"P",{});var Di=n(St);rf=l(Di,"Again, this is another great example of where Svelte tries to generate compact JavaScript output. Svelte does not create the "),Un=a(Di,"CODE",{class:!0});var S2=n(Un);cf=l(S2,"dispose"),S2.forEach(e),pf=l(Di," array when there's only 1 event listener."),Di.forEach(e),I.forEach(e),Vr=c(p),G=a(p,"SECTION",{});var Ks=n(G);sr=a(Ks,"H2",{});var C2=n(sr);Ct=a(C2,"A",{href:!0,id:!0});var I2=n(Ct);hf=l(I2,"Summary"),I2.forEach(e),C2.forEach(e),vf=c(Ks),er=a(Ks,"P",{});var O2=n(er);kf=l(O2,"The Svelte syntax is a superset of HTML."),O2.forEach(e),df=c(Ks),tr=a(Ks,"P",{});var T2=n(tr);uf=l(T2,"When you write a Svelte component, the Svelte compiler analyses your code and generates optimised JavaScript code output."),T2.forEach(e),yf=c(Ks),ar=a(Ks,"P",{});var P2=n(ar);ff=l(P2,"The output can be divided into 3 segments:"),P2.forEach(e),Ks.forEach(e),Wr=c(p),Rs=a(p,"SECTION",{});var Ai=n(Rs);nr=a(Ai,"H3",{});var L2=n(nr);It=a(L2,"A",{href:!0,id:!0});var D2=n(It);mf=l(D2,"1. create_fragment"),D2.forEach(e),L2.forEach(e),xf=c(Ai),or=a(Ai,"UL",{});var A2=n(or);lr=a(A2,"LI",{});var H2=n(lr);gf=l(H2,"Returns a fragment, which is an instruction manual on how to build the DOM fragment for the component"),H2.forEach(e),A2.forEach(e),Ai.forEach(e),Ur=c(p),js=a(p,"SECTION",{});var Hi=n(js);rr=a(Hi,"H3",{});var $2=n(rr);Ot=a($2,"A",{href:!0,id:!0});var M2=n(Ot);Ef=l(M2,"2. instance"),M2.forEach(e),$2.forEach(e),_f=c(Hi),Cs=a(Hi,"UL",{});var po=n(Cs);Tt=a(po,"LI",{});var $i=n(Tt);wf=l($i,"Most of the code written in the "),Bn=a($i,"CODE",{class:!0});var N2=n(Bn);bf=l(N2,"<script>"),N2.forEach(e),Sf=l($i," tag is in here."),$i.forEach(e),Cf=c(po),ir=a(po,"LI",{});var R2=n(ir);If=l(R2,"Returns a list of instance variables that are referenced in the template"),R2.forEach(e),Of=c(po),Jn=a(po,"LI",{});var Lm=n(Jn);Gn=a(Lm,"CODE",{class:!0});var j2=n(Gn);Tf=l(j2,"$$invalidate"),j2.forEach(e),Pf=l(Lm," is inserted after every assignment and mutation of the instance variable"),Lm.forEach(e),po.forEach(e),Hi.forEach(e),Br=c(p),q=a(p,"SECTION",{});var Fs=n(q);cr=a(Fs,"H3",{});var V2=n(cr);Pt=a(V2,"A",{href:!0,id:!0});var W2=n(Pt);Lf=l(W2,"3. class App extends SvelteComponent"),W2.forEach(e),V2.forEach(e),Df=c(Fs),Is=a(Fs,"UL",{});var ho=n(Is);Os=a(ho,"LI",{});var vo=n(Os);Af=l(vo,"Initialise the component with "),qn=a(vo,"CODE",{class:!0});var U2=n(qn);Hf=l(U2,"create_fragment"),U2.forEach(e),$f=l(vo," and "),zn=a(vo,"CODE",{class:!0});var B2=n(zn);Mf=l(B2,"instance"),B2.forEach(e),Nf=l(vo," function"),vo.forEach(e),Rf=c(ho),pr=a(ho,"LI",{});var J2=n(pr);jf=l(J2,"Sets up the component internals"),J2.forEach(e),Vf=c(ho),Yn=a(ho,"LI",{});var Dm=n(Yn);Wf=l(Dm,"Provides the "),Lt=a(Dm,"A",{href:!0,rel:!0});var G2=n(Lt);Uf=l(G2,"Component API"),G2.forEach(e),Dm.forEach(e),ho.forEach(e),Bf=c(Fs),hr=a(Fs,"P",{});var q2=n(hr);Jf=l(q2,"Svelte strives to generate as compact JavaScript as possible, for example:"),q2.forEach(e),Gf=c(Fs),ns=a(Fs,"UL",{});var Qs=n(ns);Dt=a(Qs,"LI",{});var Mi=n(Dt);qf=l(Mi,"Breaking text content of "),Kn=a(Mi,"CODE",{class:!0});var z2=n(Kn);zf=l(z2,"h1"),z2.forEach(e),Yf=l(Mi," into separate text nodes only when part of the text can be updated"),Mi.forEach(e),Kf=c(Qs),Ts=a(Qs,"LI",{});var ko=n(Ts);Ff=l(ko,"Not defining "),Fn=a(ko,"CODE",{class:!0});var Y2=n(Fn);Qf=l(Y2,"create_fragment"),Y2.forEach(e),Zf=l(ko," or "),Qn=a(ko,"CODE",{class:!0});var K2=n(Qn);Xf=l(K2,"instance"),K2.forEach(e),sm=l(ko," function when it is not needed"),ko.forEach(e),em=c(Qs),At=a(Qs,"LI",{});var Ni=n(At);tm=l(Ni,"Generate "),Zn=a(Ni,"CODE",{class:!0});var F2=n(Zn);am=l(F2,"dispose"),F2.forEach(e),nm=l(Ni," as an array or a function, depending on the number of event listeners."),Ni.forEach(e),om=c(Qs),vr=a(Qs,"LI",{});var Q2=n(vr);lm=l(Q2,"..."),Q2.forEach(e),Qs.forEach(e),Fs.forEach(e),Jr=c(p),R=a(p,"SECTION",{});var us=n(R);kr=a(us,"H2",{});var Z2=n(kr);Ht=a(Z2,"A",{href:!0,id:!0});var X2=n(Ht);rm=l(X2,"Closing Note"),X2.forEach(e),Z2.forEach(e),im=c(us),dr=a(us,"P",{});var s3=n(dr);cm=l(s3,"We've covered the basic structure of the Svelte's compiled output, and this is just the beginning."),s3.forEach(e),pm=c(us),$t=a(us,"P",{});var Ri=n($t);hm=l(Ri,"If you wish to know more, "),Mt=a(Ri,"A",{href:!0,rel:!0});var e3=n(Mt);vm=l(e3,"follow me on Twitter"),e3.forEach(e),km=l(Ri,"."),Ri.forEach(e),dm=c(us),os=a(us,"P",{});var Zs=n(os);um=l(Zs,"I'll post it on Twitter when the next part is ready, where I'll be covering "),Nt=a(Zs,"A",{href:!0,rel:!0});var t3=n(Nt);ym=l(t3,"logic blocks"),t3.forEach(e),fm=l(Zs,", "),Rt=a(Zs,"A",{href:!0,rel:!0});var a3=n(Rt);mm=l(a3,"slots"),a3.forEach(e),xm=l(Zs,", "),jt=a(Zs,"A",{href:!0,rel:!0});var n3=n(jt);gm=l(n3,"context"),n3.forEach(e),Em=l(Zs,", and many others."),Zs.forEach(e),_m=c(us),ur=a(us,"P",{});var o3=n(ur);Vt=a(o3,"STRONG",{});var ji=n(Vt);wm=l(ji,"\u27A1 \u27A1  Continue reading on "),Xn=a(ji,"A",{href:!0});var l3=n(Xn);bm=l(l3,"Part 2"),l3.forEach(e),Sm=l(ji,"."),ji.forEach(e),o3.forEach(e),us.forEach(e),this.h()},h(){r(_,"href","#background"),r(_,"id","background"),r(Xs,"href","https://twitter.com/swyx"),r(Xs,"rel","nofollow"),r(se,"href","https://careers.shopee.sg/about/"),r(se,"rel","nofollow"),r(ee,"href","https://grnh.se/32e5b3532"),r(ee,"rel","nofollow"),r(te,"href","https://www.swyx.io/speaking/svelte-compile-lightning/"),r(te,"rel","nofollow"),r(ae,"href","https://www.youtube.com/watch?v=FNmvcswdjV8"),r(ae,"rel","nofollow"),r(ne,"href","https://reactknowledgeable.org/"),r(ne,"rel","nofollow"),r(oe,"href","#introduction"),r(oe,"id","introduction"),r(le,"href","#creating-an-element"),r(le,"id","creating-an-element"),r(Gt,"class","code-section"),r(re,"href","#updating-an-element"),r(re,"id","updating-an-element"),r(qt,"class","code-section"),r(ie,"href","#removing-an-element"),r(ie,"id","removing-an-element"),r(zt,"class","code-section"),r(ce,"href","#adding-style-to-an-element"),r(ce,"id","adding-style-to-an-element"),r(Yt,"class","code-section"),r(pe,"href","#listen-for-click-events-on-an-element"),r(pe,"id","listen-for-click-events-on-an-element"),r(Kt,"class","code-section"),r(he,"href","#svelte-syntax"),r(he,"id","svelte-syntax"),r(ke,"href","https://svelte.dev/tutorial/basics"),r(ke,"rel","nofollow"),r(Ft,"class","code-section"),r(de,"href","https://svelte.dev/repl/99aeea705b1e48fe8610b3ccee948280"),r(de,"rel","nofollow"),r(Qt,"class","inline"),r(Zt,"class","code-section"),r(ye,"href","https://svelte.dev/repl/cf54441399864c0f9b0cb25710a5fe9b"),r(ye,"rel","nofollow"),r(Xt,"class","code-section"),r(fe,"href","https://svelte.dev/repl/c149ca960b0444948dc0c00a9175bcb3"),r(fe,"rel","nofollow"),r(sa,"class","inline"),r(ea,"class","code-section"),r(xe,"href","https://svelte.dev/repl/1da1dcaf51814ed09d2341ea7915f0a1"),r(xe,"rel","nofollow"),r(ge,"href","https://www.w3schools.com/js/js_assignment.asp"),r(ge,"rel","nofollow"),r(aa,"class","code-section"),r(Ee,"href","https://svelte.dev/repl/7bff4b7746df4007a51155d2006ce724"),r(Ee,"rel","nofollow"),r(_e,"href","#compile-svelte-in-your-head"),r(_e,"id","compile-svelte-in-your-head"),r(na,"class","code-section"),r(we,"href","https://svelte.dev/repl/99aeea705b1e48fe8610b3ccee948280?version=3.19.1"),r(we,"rel","nofollow"),r(oa,"class","code-section"),r(la,"class","inline"),r(ra,"class","inline"),r(Se,"href","#create-fragment"),r(Se,"id","create-fragment"),r(ia,"class","inline"),r(ca,"class","inline"),r(Oe,"href","#c"),r(Oe,"id","c"),r(pa,"class","inline"),r(ha,"class","code-section"),r(Le,"href","#m-target-anchor"),r(Le,"id","m-target-anchor"),r(va,"class","inline"),r(ka,"class","inline"),r(da,"class","code-section"),r(Ae,"href","#d-detaching"),r(Ae,"id","d-detaching"),r(ua,"class","inline"),r(ya,"class","code-section"),r(Ne,"href","https://alistapart.com/article/javascript-minification-part-ii/#section3"),r(Ne,"rel","nofollow"),r(Re,"href","#export-default-class-app-extends-sveltecomponent"),r(Re,"id","export-default-class-app-extends-sveltecomponent"),r(Ve,"href","https://svelte.dev/docs#Client-side_component_API"),r(Ve,"rel","nofollow"),r(fa,"class","inline"),r(ma,"class","inline"),r(xa,"class","code-section"),r(Be,"href","https://svelte.dev/repl/1f29ce52adf446fc9116bb957b7200ec?version=3.19.1"),r(Be,"rel","nofollow"),r(ga,"class","code-section"),r(Ea,"class","inline"),r(_a,"class","inline"),r(wa,"class","inline"),r(ba,"class","inline"),r(Sa,"class","inline"),r(Ca,"class","inline"),r(Ia,"class","inline"),r(Oa,"class","inline"),r(Ye,"href","#adding-data"),r(Ye,"id","adding-data"),r(Ta,"class","code-section"),r(Ke,"href","https://svelte.dev/repl/c149ca960b0444948dc0c00a9175bcb3?version=3.19.1"),r(Ke,"rel","nofollow"),r(Pa,"class","code-section"),r(La,"class","inline"),r(Aa,"class","inline"),r(Ze,"href","#updating-data"),r(Ze,"id","updating-data"),r(Ha,"class","inline"),r($a,"class","code-section"),r(st,"href","https://svelte.dev/repl/3841485f4d224774ba42617e4e964968?version=3.19.1"),r(st,"rel","nofollow"),r(Ma,"class","code-section"),r(Na,"class","inline"),r(Ra,"class","inline"),r(ja,"class","inline"),r(Va,"class","inline"),r(Wa,"class","inline"),r(Ua,"class","inline"),r(Ba,"class","inline"),r(Ja,"class","inline"),r(Ga,"class","inline"),r(qa,"class","inline"),r(za,"class","inline"),r(Ya,"class","inline"),r(Ka,"class","inline"),r(Qa,"class","inline"),r(Za,"class","inline"),r(Xa,"class","inline"),r(sn,"class","inline"),r(en,"class","inline"),r(tn,"class","inline"),r(an,"class","inline"),r(nn,"class","inline"),r(lt,"href","#p-ctx-dirty"),r(lt,"id","p-ctx-dirty"),r(on,"class","inline"),r(ln,"class","inline"),r(it,"href","#instance-variable"),r(it,"id","instance-variable"),r(rn,"class","inline"),r(cn,"class","inline"),r(pn,"class","inline"),r(hn,"class","inline"),r(vn,"class","inline"),r(kn,"class","inline"),r(dn,"class","code-section"),r(un,"class","inline"),r(yn,"class","inline"),r(fn,"class","inline"),r(mn,"class","code-section"),r(ct,"href","#instance-self-props-invalidate"),r(ct,"id","instance-self-props-invalidate"),r(xn,"class","inline"),r(gn,"class","inline"),r(En,"class","inline"),r(_n,"class","code-section"),r(wn,"class","inline"),r(bn,"class","inline"),r(Sn,"class","code-section"),r(vt,"href","https://github.com/sveltejs/svelte/issues/1922"),r(vt,"rel","nofollow"),r(kt,"href","#invalidate"),r(kt,"id","invalidate"),r(In,"class","inline"),r(On,"class","inline"),r(Tn,"class","code-section"),r(Pn,"class","inline"),r(Ln,"class","code-section"),r(mt,"href","#adding-event-listeners"),r(mt,"id","adding-event-listeners"),r(Dn,"class","code-section"),r(xt,"href","https://svelte.dev/repl/5b12ff52c2874f4dbb6405d9133b34da?version=3.19.1"),r(xt,"rel","nofollow"),r(An,"class","code-section"),r($n,"class","inline"),r(Mn,"class","inline"),r(Nn,"class","inline"),r(Rn,"class","inline"),r(Et,"href","#listen-and-dispose"),r(Et,"id","listen-and-dispose"),r(_t,"href","https://svelte.dev/tutorial/dom-events"),r(_t,"rel","nofollow"),r(wt,"href","https://developer.mozilla.org/en-US/docs/Web/API/EventListener"),r(wt,"rel","nofollow"),r(jn,"class","code-section"),r(bt,"href","https://svelte.dev/repl/efde6f2aaf624e708767f1bd3e94e479?version=3.19.1"),r(bt,"rel","nofollow"),r(Vn,"class","code-section"),r(Wn,"class","code-section"),r(Un,"class","inline"),r(Ct,"href","#summary"),r(Ct,"id","summary"),r(It,"href","#1-create-fragment"),r(It,"id","1-create-fragment"),r(Ot,"href","#2-instance"),r(Ot,"id","2-instance"),r(Bn,"class","inline"),r(Gn,"class","inline"),r(Pt,"href","#3-class-app-extends-sveltecomponent"),r(Pt,"id","3-class-app-extends-sveltecomponent"),r(qn,"class","inline"),r(zn,"class","inline"),r(Lt,"href","https://svelte.dev/docs#Client-side_component_API"),r(Lt,"rel","nofollow"),r(Kn,"class","inline"),r(Fn,"class","inline"),r(Qn,"class","inline"),r(Zn,"class","inline"),r(Ht,"href","#closing-note"),r(Ht,"id","closing-note"),r(Mt,"href","https://twitter.com/lihautan"),r(Mt,"rel","nofollow"),r(Nt,"href","https://svelte.dev/tutorial/if-blocks"),r(Nt,"rel","nofollow"),r(Rt,"href","https://svelte.dev/tutorial/slots"),r(Rt,"rel","nofollow"),r(jt,"href","https://svelte.dev/tutorial/context-api"),r(jt,"rel","nofollow"),r(Xn,"href","/compile-svelte-in-your-head-part-2/")},m(p,h){v3(E,p,h),v(p,K,h),v(p,P,h),s(P,ys),s(ys,_),s(_,F),s(P,Jt),s(P,Q),s(Q,Vi),s(Q,Xs),s(Xs,Wi),s(Q,Ui),s(Q,se),s(se,Bi),s(Q,Ji),s(Q,ee),s(ee,Gi),s(Q,qi),s(P,zi),s(P,Z),s(Z,Yi),s(Z,te),s(te,Ki),s(Z,Fi),s(Z,ae),s(ae,Qi),s(Z,Zi),s(Z,ne),s(ne,Xi),s(Z,sc),s(P,ec),s(P,uo),s(uo,tc),v(p,xr,h),v(p,Ps,h),s(Ps,yo),s(yo,oe),s(oe,ac),s(Ps,nc),s(Ps,fo),s(fo,oc),v(p,gr,h),v(p,Ls,h),s(Ls,mo),s(mo,le),s(le,lc),s(Ls,rc),s(Ls,Gt),Gt.innerHTML=y3,v(p,Er,h),v(p,Ds,h),s(Ds,xo),s(xo,re),s(re,ic),s(Ds,cc),s(Ds,qt),qt.innerHTML=f3,v(p,_r,h),v(p,As,h),s(As,go),s(go,ie),s(ie,pc),s(As,hc),s(As,zt),zt.innerHTML=m3,v(p,wr,h),v(p,Hs,h),s(Hs,Eo),s(Eo,ce),s(ce,vc),s(Hs,kc),s(Hs,Yt),Yt.innerHTML=x3,v(p,br,h),v(p,B,h),s(B,_o),s(_o,pe),s(pe,dc),s(B,uc),s(B,Kt),Kt.innerHTML=g3,s(B,yc),s(B,wo),s(wo,fc),s(B,mc),s(B,bo),s(bo,xc),v(p,Sr,h),v(p,k,h),s(k,So),s(So,he),s(he,gc),s(k,Ec),s(k,Co),s(Co,_c),s(k,wc),s(k,Io),s(Io,ve),s(ve,bc),s(ve,ke),s(ke,Sc),s(ve,Cc),s(k,Ic),s(k,Oo),s(Oo,Oc),s(k,Tc),s(k,Ft),Ft.innerHTML=E3,s(k,Pc),s(k,To),s(To,de),s(de,Lc),s(k,Dc),s(k,ue),s(ue,Ac),s(ue,Qt),s(Qt,Hc),s(ue,$c),s(k,Mc),s(k,Zt),Zt.innerHTML=_3,s(k,Nc),s(k,Po),s(Po,ye),s(ye,Rc),s(k,jc),s(k,Lo),s(Lo,Vc),s(k,Wc),s(k,Do),s(Do,Uc),s(k,Bc),s(k,Xt),Xt.innerHTML=w3,s(k,Jc),s(k,Ao),s(Ao,fe),s(fe,Gc),s(k,qc),s(k,Ho),s(Ho,zc),s(k,Yc),s(k,me),s(me,Kc),s(me,sa),s(sa,Fc),s(me,Qc),s(k,Zc),s(k,ea),ea.innerHTML=b3,s(k,Xc),s(k,$o),s($o,xe),s(xe,sp),s(k,ep),s(k,ta),s(ta,tp),s(ta,ge),s(ge,ap),s(k,np),s(k,aa),aa.innerHTML=S3,s(k,op),s(k,Mo),s(Mo,Ee),s(Ee,lp),s(k,rp),s(k,No),s(No,ip),v(p,Cr,h),v(p,w,h),s(w,Ro),s(Ro,_e),s(_e,cp),s(w,pp),s(w,jo),s(jo,hp),s(w,vp),s(w,Vo),s(Vo,kp),s(w,dp),s(w,Wo),s(Wo,up),s(w,yp),s(w,na),na.innerHTML=C3,s(w,fp),s(w,Uo),s(Uo,we),s(we,mp),s(w,xp),s(w,Bo),s(Bo,gp),s(w,Ep),s(w,oa),oa.innerHTML=I3,s(w,_p),s(w,Jo),s(Jo,wp),s(w,bp),s(w,be),s(be,Go),s(Go,la),s(la,Sp),s(be,Cp),s(be,qo),s(qo,ra),s(ra,Ip),v(p,Ir,h),v(p,J,h),s(J,zo),s(zo,Se),s(Se,Op),s(J,Tp),s(J,Yo),s(Yo,Pp),s(J,Lp),s(J,Ce),s(Ce,Dp),s(Ce,ia),s(ia,Ap),s(Ce,Hp),s(J,$p),s(J,Ie),s(Ie,Mp),s(Ie,ca),s(ca,Np),s(Ie,Rp),v(p,Or,h),v(p,M,h),s(M,Ko),s(Ko,Oe),s(Oe,jp),s(M,Vp),s(M,Te),s(Te,Wp),s(Te,Fo),s(Fo,Up),s(Te,Bp),s(M,Jp),s(M,Qo),s(Qo,Gp),s(M,qp),s(M,Pe),s(Pe,zp),s(Pe,pa),s(pa,Yp),s(Pe,Kp),s(M,Fp),s(M,ha),ha.innerHTML=O3,v(p,Tr,h),v(p,N,h),s(N,Zo),s(Zo,Le),s(Le,Qp),s(N,Zp),s(N,De),s(De,Xp),s(De,Xo),s(Xo,sh),s(De,eh),s(N,th),s(N,sl),s(sl,ah),s(N,nh),s(N,fs),s(fs,oh),s(fs,va),s(va,lh),s(fs,rh),s(fs,ka),s(ka,ih),s(fs,ch),s(N,ph),s(N,da),da.innerHTML=T3,v(p,Pr,h),v(p,A,h),s(A,el),s(el,Ae),s(Ae,hh),s(A,vh),s(A,He),s(He,kh),s(He,tl),s(tl,dh),s(He,uh),s(A,yh),s(A,al),s(al,fh),s(A,mh),s(A,$e),s($e,xh),s($e,ua),s(ua,gh),s($e,Eh),s(A,_h),s(A,ya),ya.innerHTML=P3,s(A,wh),s(A,nl),s(nl,Me),s(Me,bh),s(Me,Ne),s(Ne,Sh),s(Me,Ch),v(p,Lr,h),v(p,y,h),s(y,ol),s(ol,Re),s(Re,Ih),s(y,Oh),s(y,je),s(je,Th),s(je,Ve),s(Ve,Ph),s(je,Lh),s(y,Dh),s(y,We),s(We,Ah),s(We,fa),s(fa,Hh),s(We,$h),s(y,Mh),s(y,Ue),s(Ue,Nh),s(Ue,ma),s(ma,Rh),s(Ue,jh),s(y,Vh),s(y,xa),xa.innerHTML=L3,s(y,Wh),s(y,ll),s(ll,Be),s(Be,Uh),s(y,Bh),s(y,ga),ga.innerHTML=D3,s(y,Jh),s(y,ms),s(ms,Gh),s(ms,Ea),s(Ea,qh),s(ms,zh),s(ms,_a),s(_a,Yh),s(ms,Kh),s(y,Fh),s(y,Je),s(Je,Qh),s(Je,wa),s(wa,Zh),s(Je,Xh),s(y,sv),s(y,xs),s(xs,gs),s(gs,ev),s(gs,ba),s(ba,tv),s(gs,av),s(gs,Sa),s(Sa,nv),s(gs,ov),s(xs,lv),s(xs,rl),s(rl,rv),s(xs,iv),s(xs,il),s(il,cv),s(y,pv),s(y,Ge),s(Ge,hv),s(Ge,Ca),s(Ca,vv),s(Ge,kv),s(y,dv),s(y,qe),s(qe,uv),s(qe,Ia),s(Ia,yv),s(qe,fv),s(y,mv),s(y,ze),s(ze,xv),s(ze,Oa),s(Oa,gv),s(ze,Ev),v(p,Dr,h),v(p,b,h),s(b,cl),s(cl,Ye),s(Ye,_v),s(b,wv),s(b,pl),s(pl,bv),s(b,Sv),s(b,Ta),Ta.innerHTML=A3,s(b,Cv),s(b,hl),s(hl,Ke),s(Ke,Iv),s(b,Ov),s(b,vl),s(vl,Tv),s(b,Pv),s(b,Pa),Pa.innerHTML=H3,s(b,Lv),s(b,kl),s(kl,Dv),s(b,Av),s(b,Fe),s(Fe,Qe),s(Qe,Hv),s(Qe,La),s(La,$v),s(Qe,Mv),s(Fe,Nv),s(Fe,Da),s(Da,Aa),s(Aa,Rv),s(Da,jv),s(b,Vv),s(b,dl),s(dl,Wv),v(p,Ar,h),v(p,u,h),s(u,ul),s(ul,Ze),s(Ze,Uv),s(u,Bv),s(u,Xe),s(Xe,Jv),s(Xe,Ha),s(Ha,Gv),s(Xe,qv),s(u,zv),s(u,$a),$a.innerHTML=$3,s(u,Yv),s(u,yl),s(yl,st),s(st,Kv),s(u,Fv),s(u,fl),s(fl,Qv),s(u,Zv),s(u,Ma),Ma.innerHTML=M3,s(u,Xv),s(u,ml),s(ml,sk),s(u,ek),s(u,j),s(j,Es),s(Es,tk),s(Es,Na),s(Na,ak),s(Es,nk),s(Es,Ra),s(Ra,ok),s(Es,lk),s(j,rk),s(j,$s),s($s,ik),s($s,ja),s(ja,ck),s($s,pk),s($s,Va),s(Va,hk),s(j,vk),s(j,et),s(et,kk),s(et,Wa),s(Wa,dk),s(et,uk),s(j,yk),s(j,_s),s(_s,fk),s(_s,Ua),s(Ua,mk),s(_s,xk),s(_s,Ba),s(Ba,gk),s(_s,Ek),s(j,_k),s(j,ls),s(ls,wk),s(ls,Ja),s(Ja,bk),s(ls,Sk),s(ls,Ga),s(Ga,Ck),s(ls,Ik),s(ls,qa),s(qa,Ok),s(u,Tk),s(u,xl),s(xl,Pk),s(u,Lk),s(u,tt),s(tt,Dk),s(tt,za),s(za,Ak),s(tt,Hk),s(u,$k),s(u,gl),s(gl,Mk),s(u,Nk),s(u,V),s(V,at),s(at,Rk),s(at,Ya),s(Ya,jk),s(at,Vk),s(V,Wk),s(V,nt),s(nt,Uk),s(nt,Ka),s(Ka,Bk),s(nt,Jk),s(V,Gk),s(V,Fa),s(Fa,qk),s(Fa,Qa),s(Qa,zk),s(V,Yk),s(V,Ms),s(Ms,Kk),s(Ms,Za),s(Za,Fk),s(Ms,Qk),s(Ms,Xa),s(Xa,Zk),s(V,Xk),s(V,El),s(El,sd),s(u,ed),s(u,W),s(W,td),s(W,sn),s(sn,ad),s(W,nd),s(W,en),s(en,od),s(W,ld),s(W,tn),s(tn,rd),s(W,id),s(W,an),s(an,cd),s(W,pd),s(u,hd),s(u,ot),s(ot,vd),s(ot,nn),s(nn,kd),s(ot,dd),v(p,Hr,h),v(p,rs,h),s(rs,_l),s(_l,lt),s(lt,ud),s(rs,yd),s(rs,rt),s(rt,fd),s(rt,wl),s(wl,md),s(rt,xd),s(rs,gd),s(rs,is),s(is,bl),s(bl,Ed),s(is,_d),s(is,on),s(on,wd),s(is,bd),s(is,ln),s(ln,Sd),s(is,Cd),v(p,$r,h),v(p,H,h),s(H,Sl),s(Sl,it),s(it,Id),s(H,Od),s(H,U),s(U,Td),s(U,rn),s(rn,Pd),s(U,Ld),s(U,cn),s(cn,Dd),s(U,Ad),s(U,pn),s(pn,Hd),s(U,$d),s(U,hn),s(hn,Md),s(U,Nd),s(H,Rd),s(H,ws),s(ws,jd),s(ws,vn),s(vn,Vd),s(ws,Wd),s(ws,kn),s(kn,Ud),s(ws,Bd),s(H,Jd),s(H,dn),dn.innerHTML=N3,s(H,Gd),s(H,X),s(X,qd),s(X,un),s(un,zd),s(X,Yd),s(X,yn),s(yn,Kd),s(X,Fd),s(X,fn),s(fn,Qd),s(X,Zd),s(H,Xd),s(H,mn),mn.innerHTML=R3,v(p,Mr,h),v(p,S,h),s(S,Cl),s(Cl,ct),s(ct,su),s(S,eu),s(S,bs),s(bs,tu),s(bs,xn),s(xn,au),s(bs,nu),s(bs,Il),s(Il,ou),s(bs,lu),s(S,ru),s(S,pt),s(pt,Ol),s(Ol,iu),s(pt,cu),s(pt,Tl),s(Tl,pu),s(S,hu),s(S,ht),s(ht,vu),s(ht,Pl),s(Pl,ku),s(ht,du),s(S,uu),s(S,ss),s(ss,yu),s(ss,gn),s(gn,fu),s(ss,mu),s(ss,En),s(En,xu),s(ss,gu),s(ss,Ll),s(Ll,Eu),s(ss,_u),s(S,wu),s(S,_n),_n.innerHTML=j3,s(S,bu),s(S,es),s(es,Su),s(es,wn),s(wn,Cu),s(es,Iu),s(es,bn),s(bn,Ou),s(es,Tu),s(es,Dl),s(Dl,Pu),s(es,Lu),s(S,Du),s(S,Sn),Sn.innerHTML=V3,s(S,Au),s(S,Cn),s(Cn,Hu),s(Cn,vt),s(vt,$u),v(p,Nr,h),v(p,O,h),s(O,Al),s(Al,kt),s(kt,Mu),s(O,Nu),s(O,dt),s(dt,Ru),s(dt,In),s(In,ju),s(dt,Vu),s(O,Wu),s(O,Hl),s(Hl,Uu),s(O,Bu),s(O,ut),s(ut,$l),s($l,Ju),s(ut,Gu),s(ut,Ml),s(Ml,qu),s(O,zu),s(O,yt),s(yt,Yu),s(yt,On),s(On,Ku),s(yt,Fu),s(O,Qu),s(O,Tn),Tn.innerHTML=W3,s(O,Zu),s(O,ft),s(ft,Xu),s(ft,Pn),s(Pn,sy),s(ft,ey),s(O,ty),s(O,Ln),Ln.innerHTML=U3,v(p,Rr,h),v(p,m,h),s(m,Nl),s(Nl,mt),s(mt,ay),s(m,ny),s(m,Rl),s(Rl,oy),s(m,ly),s(m,Dn),Dn.innerHTML=B3,s(m,ry),s(m,jl),s(jl,xt),s(xt,iy),s(m,cy),s(m,Vl),s(Vl,py),s(m,hy),s(m,An),An.innerHTML=J3,s(m,vy),s(m,Wl),s(Wl,ky),s(m,dy),s(m,gt),s(gt,Hn),s(Hn,$n),s($n,uy),s(Hn,yy),s(gt,fy),s(gt,Ns),s(Ns,my),s(Ns,Ul),s(Ul,xy),s(Ns,gy),s(Ns,Bl),s(Bl,Ey),s(m,_y),s(m,ts),s(ts,wy),s(ts,Mn),s(Mn,by),s(ts,Sy),s(ts,Jl),s(Jl,Cy),s(ts,Iy),s(ts,Gl),s(Gl,Oy),s(ts,Ty),s(m,Py),s(m,as),s(as,Ly),s(as,Nn),s(Nn,Dy),s(as,Ay),s(as,Rn),s(Rn,Hy),s(as,$y),s(as,ql),s(ql,My),s(as,Ny),s(m,Ry),s(m,zl),s(zl,jy),v(p,jr,h),v(p,x,h),s(x,Yl),s(Yl,Et),s(Et,Vy),s(x,Wy),s(x,Ss),s(Ss,Uy),s(Ss,_t),s(_t,By),s(Ss,Jy),s(Ss,wt),s(wt,Gy),s(Ss,qy),s(x,zy),s(x,Kl),s(Kl,Yy),s(x,Ky),s(x,jn),jn.innerHTML=G3,s(x,Fy),s(x,Fl),s(Fl,bt),s(bt,Qy),s(x,Zy),s(x,Ql),s(Ql,Xy),s(x,sf),s(x,Vn),Vn.innerHTML=q3,s(x,ef),s(x,Zl),s(Zl,tf),s(x,af),s(x,Wn),Wn.innerHTML=z3,s(x,nf),s(x,Xl),s(Xl,of),s(x,lf),s(x,St),s(St,rf),s(St,Un),s(Un,cf),s(St,pf),v(p,Vr,h),v(p,G,h),s(G,sr),s(sr,Ct),s(Ct,hf),s(G,vf),s(G,er),s(er,kf),s(G,df),s(G,tr),s(tr,uf),s(G,yf),s(G,ar),s(ar,ff),v(p,Wr,h),v(p,Rs,h),s(Rs,nr),s(nr,It),s(It,mf),s(Rs,xf),s(Rs,or),s(or,lr),s(lr,gf),v(p,Ur,h),v(p,js,h),s(js,rr),s(rr,Ot),s(Ot,Ef),s(js,_f),s(js,Cs),s(Cs,Tt),s(Tt,wf),s(Tt,Bn),s(Bn,bf),s(Tt,Sf),s(Cs,Cf),s(Cs,ir),s(ir,If),s(Cs,Of),s(Cs,Jn),s(Jn,Gn),s(Gn,Tf),s(Jn,Pf),v(p,Br,h),v(p,q,h),s(q,cr),s(cr,Pt),s(Pt,Lf),s(q,Df),s(q,Is),s(Is,Os),s(Os,Af),s(Os,qn),s(qn,Hf),s(Os,$f),s(Os,zn),s(zn,Mf),s(Os,Nf),s(Is,Rf),s(Is,pr),s(pr,jf),s(Is,Vf),s(Is,Yn),s(Yn,Wf),s(Yn,Lt),s(Lt,Uf),s(q,Bf),s(q,hr),s(hr,Jf),s(q,Gf),s(q,ns),s(ns,Dt),s(Dt,qf),s(Dt,Kn),s(Kn,zf),s(Dt,Yf),s(ns,Kf),s(ns,Ts),s(Ts,Ff),s(Ts,Fn),s(Fn,Qf),s(Ts,Zf),s(Ts,Qn),s(Qn,Xf),s(Ts,sm),s(ns,em),s(ns,At),s(At,tm),s(At,Zn),s(Zn,am),s(At,nm),s(ns,om),s(ns,vr),s(vr,lm),v(p,Jr,h),v(p,R,h),s(R,kr),s(kr,Ht),s(Ht,rm),s(R,im),s(R,dr),s(dr,cm),s(R,pm),s(R,$t),s($t,hm),s($t,Mt),s(Mt,vm),s($t,km),s(R,dm),s(R,os),s(os,um),s(os,Nt),s(Nt,ym),s(os,fm),s(os,Rt),s(Rt,mm),s(os,xm),s(os,jt),s(jt,gm),s(os,Em),s(R,_m),s(R,ur),s(ur,Vt),s(Vt,wm),s(Vt,Xn),s(Xn,bm),s(Vt,Sm),Gr=!0},p:LE,i(p){Gr||(k3(E.$$.fragment,p),Gr=!0)},o(p){d3(E.$$.fragment,p),Gr=!1},d(p){u3(E,p),p&&e(K),p&&e(P),p&&e(xr),p&&e(Ps),p&&e(gr),p&&e(Ls),p&&e(Er),p&&e(Ds),p&&e(_r),p&&e(As),p&&e(wr),p&&e(Hs),p&&e(br),p&&e(B),p&&e(Sr),p&&e(k),p&&e(Cr),p&&e(w),p&&e(Ir),p&&e(J),p&&e(Or),p&&e(M),p&&e(Tr),p&&e(N),p&&e(Pr),p&&e(A),p&&e(Lr),p&&e(y),p&&e(Dr),p&&e(b),p&&e(Ar),p&&e(u),p&&e(Hr),p&&e(rs),p&&e($r),p&&e(H),p&&e(Mr),p&&e(S),p&&e(Nr),p&&e(O),p&&e(Rr),p&&e(m),p&&e(jr),p&&e(x),p&&e(Vr),p&&e(G),p&&e(Wr),p&&e(Rs),p&&e(Ur),p&&e(js),p&&e(Br),p&&e(q),p&&e(Jr),p&&e(R)}}}function ME(Bt){let E,K;const P=[Bt[0],c3];let ys={$$slots:{default:[$E]},$$scope:{ctx:Bt}};for(let _=0;_<P.length;_+=1)ys=Am(ys,P[_]);return E=new DE({props:ys}),{c(){p3(E.$$.fragment)},l(_){h3(E.$$.fragment,_)},m(_,F){v3(E,_,F),K=!0},p(_,[F]){const Jt=F&1?TE(P,[F&1&&r3(_[0]),F&0&&r3(c3)]):{};F&2&&(Jt.$$scope={dirty:F,ctx:_}),E.$set(Jt)},i(_){K||(k3(E.$$.fragment,_),K=!0)},o(_){d3(E.$$.fragment,_),K=!1},d(_){u3(E,_)}}}const c3={title:"Compile Svelte in your head (Part 1)",date:"2020-03-04T08:00:00Z",tags:["Svelte","JavaScript"],series:"Compile Svelte in your head",label:"blog"};function NE(Bt,E,K){return PE("blog",{image:HE}),Bt.$$set=P=>{K(0,E=Am(Am({},E),i3(P)))},E=i3(E),[E]}class JE extends CE{constructor(E){super();IE(this,E,NE,ME,OE,{})}}export{JE as default,c3 as metadata};
