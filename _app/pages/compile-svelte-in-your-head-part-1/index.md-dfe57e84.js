import{S as v3,i as k3,s as u3,C as Tm,w as y3,x as f3,y as m3,z as g3,A as eE,q as x3,o as E3,B as _3,r as w3,Y as aE,e,t as o,k as r,c as a,a as n,h as l,d as t,m as c,b as i,g as d,H as s,J as b3}from"../../chunks/vendor-da4388d4.js";import{B as S3}from"../../chunks/BlogLayout-86707f1c.js";import"../../chunks/stores-1fad7c36.js";import"../../chunks/ldjson-b0805387.js";/* empty css                                */var L3="/_app/assets/hero-twitter-5d88ede6.jpg";function T3(Be){let f,J,R,Qs,T,I,We,Fs,Nr,$r,Zs,jr,Rr,Xs,Vr,Br,Wr,F,Ur,st,Jr,Gr,tt,qr,zr,et,Yr,Kr,Qr,vo,Fr,fi,Cs,ko,at,Zr,Xr,uo,sc,mi,Ue,yo,nt,tc,gi,Hs,fo,ot,ec,ac,Je,oE=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="js" cutLines="1"><div class="language-id">js</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-comment)">// update the text of the h1 element</span></div><div class='line'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='module h1&#10;const h1: HTMLHeadingElement' >h1</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) Node.textContent: string | null' >textContent</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;Bye World&apos;</span><span style="color: var(--shiki-color-text)">;</span></div></code></div></pre>`,xi,Is,mo,lt,nc,oc,Ge,lE=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="js" cutLines="1"><div class="language-id">js</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-comment)">// finally, we remove the h1 element</span></div><div class='line'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) Document.body: HTMLElement' >body</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Node.removeChild&lt;HTMLHeadingElement>(child: HTMLHeadingElement): HTMLHeadingElement' >removeChild</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='module h1&#10;const h1: HTMLHeadingElement' >h1</data-lsp>);</span></div></code></div></pre>`,Ei,Os,go,it,lc,ic,qe,iE=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="js"><div class="language-id">js</div><div class='code-container'><code><div class='line dim'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='module h1&#10;const h1: HTMLHeadingElement' >h1</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Document.createElement&lt;"h1">(tagName: "h1", options?: ElementCreationOptions | undefined): HTMLHeadingElement (+2 overloads)' >createElement</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;h1&apos;</span><span style="color: var(--shiki-color-text)">);</span></div><div class='line dim'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='module h1&#10;const h1: HTMLHeadingElement' >h1</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) Node.textContent: string | null' >textContent</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;Hello World&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line highlight'><span style="color: var(--shiki-token-comment)">// add class name to the h1 element</span></div><div class='line highlight'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='module h1&#10;const h1: HTMLHeadingElement' >h1</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Element.setAttribute(qualifiedName: string, value: string): void' >setAttribute</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;class&apos;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;abc&apos;</span><span style="color: var(--shiki-color-text)">);</span></div><div class='line highlight'><span style="color: var(--shiki-token-comment)">// ...and add a &lt;style&gt; tag to the head</span></div><div class='line highlight'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='module style&#10;const style: HTMLStyleElement' >style</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Document.createElement&lt;"style">(tagName: "style", options?: ElementCreationOptions | undefined): HTMLStyleElement (+2 overloads)' >createElement</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;style&apos;</span><span style="color: var(--shiki-color-text)">);</span></div><div class='line highlight'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='module style&#10;const style: HTMLStyleElement' >style</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) Node.textContent: string | null' >textContent</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;.abc &#123; color: blue; &#125;&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line highlight'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) Document.head: HTMLHeadElement' >head</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Node.appendChild&lt;HTMLStyleElement>(node: HTMLStyleElement): HTMLStyleElement' >appendChild</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='module style&#10;const style: HTMLStyleElement' >style</data-lsp>);</span></div><div class='line dim'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) Document.body: HTMLElement' >body</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Node.appendChild&lt;HTMLHeadingElement>(node: HTMLHeadingElement): HTMLHeadingElement' >appendChild</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='module h1&#10;const h1: HTMLHeadingElement' >h1</data-lsp>);</span></div></code></div></pre>`,_i,G,xo,rt,rc,cc,ze,rE=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="js"><div class="language-id">js</div><div class='code-container'><code><div class='line dim'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='module button&#10;const button: HTMLButtonElement' >button</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Document.createElement&lt;"button">(tagName: "button", options?: ElementCreationOptions | undefined): HTMLButtonElement (+2 overloads)' >createElement</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;button&apos;</span><span style="color: var(--shiki-color-text)">);</span></div><div class='line dim'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='module button&#10;const button: HTMLButtonElement' >button</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) Node.textContent: string | null' >textContent</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;Click Me!&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line highlight'><span style="color: var(--shiki-token-comment)">// listen to "click" events</span></div><div class='line highlight'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='module button&#10;const button: HTMLButtonElement' >button</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) HTMLButtonElement.addEventListener&lt;"click">(type: "click", listener: (this: HTMLButtonElement, ev: MouseEvent) => any, options?: boolean | AddEventListenerOptions | undefined): void (+1 overload)' >addEventListener</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;click&apos;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line highlight'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='namespace console&#10;var console: Console' >console</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)' >log</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;Hi!&apos;</span><span style="color: var(--shiki-color-text)">);</span></div><div class='line highlight'><span style="color: var(--shiki-color-text)">&#125;);</span></div><div class='line dim'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) Document.body: HTMLElement' >body</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Node.appendChild&lt;HTMLButtonElement>(node: HTMLButtonElement): HTMLButtonElement' >appendChild</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='module button&#10;const button: HTMLButtonElement' >button</data-lsp>);</span></div></code></div></pre>`,pc,Eo,hc,dc,_o,vc,wi,v,wo,ct,kc,uc,bo,yc,fc,So,pt,mc,ht,gc,xc,Ec,Lo,_c,wc,Ye,cE='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>',bc,To,dt,Sc,Lc,vt,Tc,Ke,Cc,Hc,Ic,Qe,pE='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"></div><div class="line">  <span class="token selector">h1</span> <span class="token punctuation">&#123;</span></div><div class="line">    <span class="token property">color</span><span class="token punctuation">:</span> rebeccapurple<span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>',Oc,Co,kt,Dc,Pc,Ho,Mc,Ac,Io,Nc,$c,Fe,hE=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'World'</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello <span class="token language-javascript"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>`,jc,Oo,ut,Rc,Vc,Do,Bc,Wc,yt,Uc,Ze,Jc,Gc,qc,Xe,dE='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">onClickButton</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>onClickButton<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Clicked <span class="token language-javascript"><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div></code></pre>',zc,Po,ft,Yc,Kc,sa,Qc,mt,Fc,Zc,ta,vE='<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line dim">  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token keyword">function</span> <span class="token function">onClickButton</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line highlight">    count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token punctuation">&#125;</span></div><div class="line dim"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>onClickButton<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Clicked <span class="token language-javascript"><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div></code></pre>',Xc,Mo,gt,sp,tp,Ao,ep,bi,_,No,xt,ap,np,$o,op,lp,jo,ip,rp,Ro,cp,pp,ea,kE='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>',hp,Vo,Et,dp,vp,Bo,kp,up,aa,uE=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="js" hideJsdoc="true" cutLines="2"><div class="language-id">js</div><div class='code-container'><code><div class='line dim'><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function create_fragment(ctx: any): &#123;&#10;    c(): void;&#10;    m(target: HTMLElement, anchor: HTMLElement): void;&#10;    d(detaching: boolean): void;&#10;&#125;' >create_fragment</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) ctx: any' >ctx</data-lsp>) &#123;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='let h1: HTMLHeadingElement' >h1</data-lsp>;</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(method) c(): void' >c</data-lsp></span><span style="color: var(--shiki-color-text)">() &#123;</span></div><div class='line highlight'><span style="color: var(--shiki-color-text)">      <data-lsp lsp='let h1: HTMLHeadingElement' >h1</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(alias) element&lt;"h1">(name: "h1"): HTMLHeadingElement&#10;import element' >element</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;h1&apos;</span><span style="color: var(--shiki-color-text)">);</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='let h1: HTMLHeadingElement' >h1</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) Node.textContent: string | null' >textContent</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;Hello world&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(method) m(target: HTMLElement, anchor: HTMLElement): void' >m</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) target: HTMLElement' >target</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) anchor: HTMLElement' >anchor</data-lsp>) &#123;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(alias) insert(target: Node, node: Node, anchor?: Node | undefined): void&#10;import insert' >insert</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) target: HTMLElement' >target</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='let h1: HTMLHeadingElement' >h1</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) anchor: HTMLElement' >anchor</data-lsp>);</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(method) d(detaching: boolean): void' >d</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) detaching: boolean' >detaching</data-lsp>) &#123;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (<data-lsp lsp='(parameter) detaching: boolean' >detaching</data-lsp>) </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(alias) detach(node: Node): void&#10;import detach' >detach</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='let h1: HTMLHeadingElement' >h1</data-lsp>);</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">  &#125;;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">&#125;</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='class App' >App</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(alias) class SvelteComponent&#10;import SvelteComponent' >SvelteComponent</data-lsp></span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) options: any' >options</data-lsp>) &#123;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">super</span><span style="color: var(--shiki-color-text)">();</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(alias) init(component: any, options: any, instance: any, create_fragment: any, not_equal: any, props: any, append_styles: any, dirty?: number[] | undefined): void&#10;import init' >init</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) options: any' >options</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='function create_fragment(ctx: any): &#123;&#10;    c(): void;&#10;    m(target: HTMLElement, anchor: HTMLElement): void;&#10;    d(detaching: boolean): void;&#10;&#125;' >create_fragment</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(alias) function safe_not_equal(a: any, b: any): boolean&#10;import safe_not_equal' >safe_not_equal</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;&#125;);</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">  &#125;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">&#125;</span></div></code></div></pre>`,yp,Wo,fp,mp,_t,Uo,na,gp,xp,Jo,oa,Ep,Si,q,Go,wt,_p,wp,qo,bp,Sp,bt,Lp,la,Tp,Cp,Hp,St,Ip,ia,Op,Dp,Li,N,zo,Lt,Pp,Mp,Tt,Ap,Yo,Np,$p,jp,Ko,Rp,Vp,Ct,Bp,ra,Wp,Up,Jp,ca,yE=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts" cutLines="3"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-color-text)"><data-lsp lsp='let h1: HTMLHeadingElement' >h1</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(alias) element&lt;"h1">(name: "h1"): HTMLHeadingElement&#10;import element' >element</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;h1&apos;</span><span style="color: var(--shiki-color-text)">);</span></div><div class='line'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='let h1: HTMLHeadingElement' >h1</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) Node.textContent: string | null' >textContent</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;Hello World&apos;</span><span style="color: var(--shiki-color-text)">;</span></div></code></div></pre>`,Ti,$,Qo,Ht,Gp,qp,It,zp,Fo,Yp,Kp,Qp,Zo,Fp,Zp,us,Xp,pa,sh,th,ha,eh,ah,nh,da,fE=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="js" hideJsdoc="true" cutLines="5"><div class="language-id">js</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-function)"><data-lsp lsp='function insert(target: Node, node: Node, anchor?: Node | undefined): void' >insert</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='let target: HTMLElement' >target</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='let h1: HTMLHeadingElement' >h1</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='let anchor: HTMLElement' >anchor</data-lsp>);</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-comment)">// http://github.com/sveltejs/svelte/tree/master/src/runtime/internal/dom.ts</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function insert(target: Node, node: Node, anchor?: Node | undefined): void' >insert</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) target: Node' >target</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) node: Node' >node</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) anchor: Node | undefined' >anchor</data-lsp>) &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(parameter) target: Node' >target</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Node.insertBefore&lt;Node>(node: Node, child: Node | null): Node' >insertBefore</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) node: Node' >node</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) anchor: Node | undefined' >anchor</data-lsp> </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">);</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;</span></div></code></div></pre>`,Ci,P,Xo,Ot,oh,lh,Dt,ih,sl,rh,ch,ph,tl,hh,dh,Pt,vh,va,kh,uh,yh,ka,mE=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="js" hideJsdoc="true" cutLines="1"><div class="language-id">js</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-function)"><data-lsp lsp='function detach(node: Node): void' >detach</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='let h1: HTMLHeadingElement' >h1</data-lsp>);</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-comment)">// http://github.com/sveltejs/svelte/tree/master/src/runtime/internal/dom.ts</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function detach(node: Node): void' >detach</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) node: Node' >node</data-lsp>) &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(parameter) node: Node' >node</data-lsp></span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) Node.parentNode: ParentNode | null' >parentNode</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Node.removeChild&lt;Node>(child: Node): Node' >removeChild</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) node: Node' >node</data-lsp>);</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;</span></div></code></div></pre>`,fh,el,Mt,mh,At,gh,xh,Hi,y,al,Nt,Eh,_h,$t,wh,jt,bh,Sh,Lh,Rt,Th,ua,Ch,Hh,Ih,Vt,Oh,ya,Dh,Ph,Mh,fa,gE='<pre class="prism language-svelte"><code><div class="line"><span class="token comment">&lt;!-- empty --></span></div></code></pre>',Ah,nl,Bt,Nh,$h,ma,xE=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">App</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">SvelteComponent</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(options) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">super</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">init</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> options</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> safe_not_equal</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;&#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,jh,ys,Rh,ga,Vh,Bh,xa,Wh,Uh,Jh,Wt,Gh,Ea,qh,zh,Yh,fs,ms,Kh,_a,Qh,Fh,wa,Zh,Xh,sd,ol,td,ed,ll,ad,nd,Ut,od,ba,ld,id,rd,Jt,cd,Sa,pd,hd,dd,Gt,vd,La,kd,ud,Ii,w,il,qt,yd,fd,rl,md,gd,Ta,EE=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">	<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'World'</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello <span class="token language-javascript"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>`,xd,cl,zt,Ed,_d,pl,wd,bd,Ca,_E=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      h1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">element</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;h1&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">h1</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;Hello </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">name</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;World&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">App</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">SvelteComponent</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Sd,hl,Ld,Td,Yt,Kt,Cd,Ha,Hd,Id,Od,Ia,Oa,Dd,Pd,Md,dl,Ad,Oi,u,vl,Qt,Nd,$d,Ft,jd,Da,Rd,Vd,Bd,Pa,wE=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">	<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'World'</span><span class="token punctuation">;</span></div><div class="line">	<span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">		name <span class="token operator">=</span> <span class="token string">'Svelte'</span><span class="token punctuation">;</span></div><div class="line">	<span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello <span class="token language-javascript"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>`,Wd,kl,Zt,Ud,Jd,ul,Gd,qd,Ma,bE=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      h1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">element</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;h1&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      t0 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">text</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Hello &#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      t1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">text</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*name*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">append</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> t0);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">append</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> t1);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [dirty]) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*name*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-function)">set_data</span><span style="color: var(--shiki-color-text)">(t1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*name*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">(detaching) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (detaching) </span><span style="color: var(--shiki-token-function)">detach</span><span style="color: var(--shiki-color-text)">(h1);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;World&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Svelte&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line highlight"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [name];</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">App</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">SvelteComponent</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(options) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">super</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">init</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> options</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> instance</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> create_fragment</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> safe_not_equal</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;&#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,zd,yl,Yd,Kd,V,gs,Qd,Aa,Fd,Zd,Na,Xd,sv,tv,Ds,ev,$a,av,nv,ja,ov,lv,Xt,iv,Ra,rv,cv,pv,xs,hv,Va,dv,vv,Ba,kv,uv,yv,os,fv,Wa,mv,gv,Ua,xv,Ev,Ja,_v,wv,fl,bv,Sv,se,Lv,Ga,Tv,Cv,Hv,ml,Iv,Ov,B,te,Dv,qa,Pv,Mv,Av,ee,Nv,za,$v,jv,Rv,Ya,Vv,Ka,Bv,Wv,Ps,Uv,Qa,Jv,Gv,Fa,qv,zv,gl,Yv,Kv,W,Qv,Za,Fv,Zv,Xa,Xv,sk,sn,tk,ek,tn,ak,nk,ok,ae,lk,en,ik,rk,Di,ls,xl,ne,ck,pk,oe,hk,El,dk,vk,kk,is,_l,uk,yk,an,fk,mk,nn,gk,xk,Pi,M,wl,le,Ek,_k,U,wk,on,bk,Sk,ln,Lk,Tk,rn,Ck,Hk,cn,Ik,Ok,Dk,Es,Pk,pn,Mk,Ak,hn,Nk,$k,jk,dn,SE='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- gives you --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>',Rk,Z,Vk,vn,Bk,Wk,kn,Uk,Jk,un,Gk,qk,zk,yn,LE='<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span></div><div class="line dim"></div><div class="line dim"><span class="token comment">&lt;!-- could possibly be --></span></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div><div class="line highlight"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello Svelte<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div><div class="line dim"><span class="token comment">&lt;!-- depending on the inner state of the component --></span></div></code></pre>',Mi,b,bl,ie,Yk,Kk,_s,Qk,fn,Fk,Zk,Sl,Xk,su,tu,re,Ll,eu,au,Tl,nu,ou,ce,lu,Cl,iu,ru,cu,X,pu,mn,hu,du,gn,vu,ku,Hl,uu,yu,fu,xn,TE=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// conceptually,</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*...*/</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// create the fragment</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.c</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// mount the fragment onto the DOM</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.m</span><span style="color: var(--shiki-color-text)">(target);</span></span></code></pre>`,mu,ss,gu,En,xu,Eu,_n,_u,wu,Il,bu,Su,Lu,wn,CE='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">t1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">text</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*name*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]);</span></span></code></pre>',Tu,bn,Cu,pe,Hu,Ai,C,Ol,he,Iu,Ou,de,Du,Sn,Pu,Mu,Au,Dl,Nu,$u,ve,Pl,ju,Ru,Ml,Vu,Bu,ke,Wu,Ln,Uu,Ju,Gu,Tn,HE=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Svelte&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">count</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">foo</span><span style="color: var(--shiki-color-text)">.a </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// compiled into something like</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Svelte&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/* name */</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> name);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">count</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/* count */</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> count);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">foo</span><span style="color: var(--shiki-color-text)">.a </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/* foo */</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> foo);</span></span></code></pre>`,qu,ue,zu,Cn,Yu,Ku,Qu,Hn,IE=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// conceptually...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*...*/</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// to track which variable has changed</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">dirty</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Set</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (variable</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> newValue) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// update ctx</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ctx[variable] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> newValue;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// mark variable as dirty</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">dirty</span><span style="color: var(--shiki-token-function)">.add</span><span style="color: var(--shiki-color-text)">(variable);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// schedules update for the component</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">scheduleUpdate</span><span style="color: var(--shiki-color-text)">(component);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// gets called when update is scheduled</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">flushUpdate</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// update the fragment</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// clear the dirty</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">dirty</span><span style="color: var(--shiki-token-function)">.clear</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ni,g,Al,ye,Fu,Zu,Nl,Xu,sy,In,OE=`<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line dim">	<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'world'</span><span class="token punctuation">;</span></div><div class="line dim">	<span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line dim">		name <span class="token operator">=</span> <span class="token string">'Svelte'</span><span class="token punctuation">;</span></div><div class="line dim">	<span class="token punctuation">&#125;</span></div><div class="line dim"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line highlight"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>update<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Hello <span class="token language-javascript"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>`,ty,$l,fe,ey,ay,jl,ny,oy,On,DE=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      h1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">element</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;h1&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      t0 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">text</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Hello &#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      t1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">text</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*name*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">append</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> t0);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">append</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> t1);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      dispose </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;click&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*update*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [dirty]) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*name*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-function)">set_data</span><span style="color: var(--shiki-color-text)">(t1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*name*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">(detaching) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (detaching) </span><span style="color: var(--shiki-token-function)">detach</span><span style="color: var(--shiki-color-text)">(h1);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">dispose</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;world&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Svelte&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [name</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> update];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`,ly,Rl,iy,ry,me,Dn,Pn,cy,py,hy,Ms,dy,Vl,vy,ky,Bl,uy,yy,ts,fy,Mn,my,gy,Wl,xy,Ey,Ul,_y,wy,by,es,Sy,An,Ly,Ty,Nn,Cy,Hy,Jl,Iy,Oy,Dy,Gl,Py,$i,x,ql,ge,My,Ay,ws,Ny,xe,$y,jy,Ee,Ry,Vy,By,zl,Wy,Uy,$n,PE='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span></div><div class="line">	<span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>update<span class="token punctuation">&#125;</span></span></div><div class="line">	<span class="token attr-name"><span class="token namespace">on:</span>mousedown=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>update<span class="token punctuation">&#125;</span></span></div><div class="line">	<span class="token attr-name"><span class="token namespace">on:</span>touchstart=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>update<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div><div class="line">  Hello <span class="token language-javascript"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span>!</div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>',Jy,Yl,_e,Gy,qy,Kl,zy,Yy,jn,ME=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">dispose </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;click&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*update*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">])</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;mousedown&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*update*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">])</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;touchstart&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*update*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; passive</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> &#125;)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">];</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-function)">run_all</span><span style="color: var(--shiki-color-text)">(dispose);</span></span></code></pre>`,Ky,Ql,Qy,Fy,Rn,AE=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// instead of</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">dispose1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;click&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*update*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">dispose2 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;mousedown&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*update*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">dispose2 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;touchstart&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*update*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; passive</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">dispose1</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">dispose2</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">dispose3</span><span style="color: var(--shiki-color-text)">();</span></span></code></pre>`,Zy,Fl,Xy,sf,we,tf,Vn,ef,af,ji,z,Zl,be,nf,of,Xl,lf,rf,si,cf,pf,ti,hf,Ri,As,ei,Se,df,vf,ai,ni,kf,Vi,Ns,oi,Le,uf,yf,bs,Te,ff,Bn,mf,gf,xf,li,Ef,_f,Wn,Un,wf,bf,Bi,Y,ii,Ce,Sf,Lf,Ss,Ls,Tf,Jn,Cf,Hf,Gn,If,Of,Df,ri,Pf,Mf,qn,Af,He,Nf,$f,ci,jf,Rf,as,Ie,Vf,zn,Bf,Wf,Uf,Ts,Jf,Yn,Gf,qf,Kn,zf,Yf,Kf,Oe,Qf,Qn,Ff,Zf,Xf,pi,sm,Wi,j,hi,De,tm,em,di,am,nm,Pe,om,Me,lm,im,rm,ns,cm,Ae,pm,hm,Ne,dm,vm,$e,km,um,ym,vi,je,fm,Fn,mm,gm;return{c(){f=e("section"),J=e("h2"),R=e("a"),Qs=o("Background"),T=r(),I=e("p"),We=o("A while ago, "),Fs=e("a"),Nr=o("@swyx"),$r=o(" came back to Singapore and visited us in "),Zs=e("a"),jr=o("Shopee Singapore"),Rr=o(" ("),Xs=e("a"),Vr=o("We're hiring!"),Br=o(")."),Wr=r(),F=e("p"),Ur=o("He gave an amazing sharing on "),st=e("a"),Jr=o("Compile Svelte in Your Head"),Gr=o(" ("),tt=e("a"),qr=o("video"),zr=o(") in the "),et=e("a"),Yr=o("ReactKnowledgeable Originals"),Kr=o("."),Qr=r(),vo=e("p"),Fr=o("I love his presentation and the title is so catchy, so I begged him to use the catchy title as this series of articles about the Svelte compiler. It will be about how Svelte sees your code and compiles it down to plain JavaScript."),fi=r(),Cs=e("section"),ko=e("h2"),at=e("a"),Zr=o("Introduction"),Xr=r(),uo=e("p"),sc=o("Lets refresh ourselves with how we write web app without any framework:"),mi=r(),Ue=e("section"),yo=e("h3"),nt=e("a"),tc=o("Creating an element"),gi=r(),Hs=e("section"),fo=e("h3"),ot=e("a"),ec=o("Updating an element"),ac=r(),Je=e("div"),xi=r(),Is=e("section"),mo=e("h3"),lt=e("a"),nc=o("Removing an element"),oc=r(),Ge=e("div"),Ei=r(),Os=e("section"),go=e("h3"),it=e("a"),lc=o("Adding style to an element"),ic=r(),qe=e("div"),_i=r(),G=e("section"),xo=e("h3"),rt=e("a"),rc=o("Listen for click events on an element"),cc=r(),ze=e("div"),pc=r(),Eo=e("p"),hc=o("These are code that you have to write, without using any framework or library."),dc=r(),_o=e("p"),vc=o("The main idea of this article is to show how the Svelte compiler compiles the Svelte syntax into statements of codes that I've shown above."),wi=r(),v=e("section"),wo=e("h2"),ct=e("a"),kc=o("Svelte syntax"),uc=r(),bo=e("p"),yc=o("Here I'm going to show you some basics of the Svelte syntax."),fc=r(),So=e("blockquote"),pt=e("p"),mc=o("If you wish to learn more, I highly recommend trying "),ht=e("a"),gc=o("Svelte's interactive tutorial"),xc=o("."),Ec=r(),Lo=e("p"),_c=o("So here is a basic Svelte component:"),wc=r(),Ye=e("div"),bc=r(),To=e("p"),dt=e("a"),Sc=o("Svelte REPL"),Lc=r(),vt=e("p"),Tc=o("To add style, you add a "),Ke=e("code"),Cc=o("<style>"),Hc=o(" tag:"),Ic=r(),Qe=e("div"),Oc=r(),Co=e("p"),kt=e("a"),Dc=o("Svelte REPL"),Pc=r(),Ho=e("p"),Mc=o("At this point, writing Svelte component just feels like writing HTML, that's because Svelte syntax is a super set of the HTML syntax."),Ac=r(),Io=e("p"),Nc=o("Let's look at how we add a data to our component:"),$c=r(),Fe=e("div"),jc=r(),Oo=e("p"),ut=e("a"),Rc=o("Svelte REPL"),Vc=r(),Do=e("p"),Bc=o("We put JavaScript inside the curly brackets."),Wc=r(),yt=e("p"),Uc=o("To add a click handler, we use the "),Ze=e("code"),Jc=o("on:"),Gc=o(" directive"),qc=r(),Xe=e("div"),zc=r(),Po=e("p"),ft=e("a"),Yc=o("Svelte REPL"),Kc=r(),sa=e("p"),Qc=o("To change the data, we use "),mt=e("a"),Fc=o("assignment operators"),Zc=r(),ta=e("div"),Xc=r(),Mo=e("p"),gt=e("a"),sp=o("Svelte REPL"),tp=r(),Ao=e("p"),ep=o("Let's move on to see how Svelte syntax is compiled into JavaScript that we've seen earlier"),bi=r(),_=e("section"),No=e("h2"),xt=e("a"),ap=o("Compile Svelte in your Head"),np=r(),$o=e("p"),op=o("The Svelte compiler analyses the code you write and generates an optimised JavaScript output."),lp=r(),jo=e("p"),ip=o("To study how Svelte compiles the code, lets start with the smallest example possible, and slowly build up the code. Through the process, you will see that Svelte incrementally adds to the output code based on your changes."),rp=r(),Ro=e("p"),cp=o("The first example that we are going to see is:"),pp=r(),ea=e("div"),hp=r(),Vo=e("p"),Et=e("a"),dp=o("Svelte REPL"),vp=r(),Bo=e("p"),kp=o("The output code:"),up=r(),aa=e("div"),yp=r(),Wo=e("p"),fp=o("You can break down the output code into 2 sections:"),mp=r(),_t=e("ul"),Uo=e("li"),na=e("code"),gp=o("create_fragment"),xp=r(),Jo=e("li"),oa=e("code"),Ep=o("class App extends SvelteComponent"),Si=r(),q=e("section"),Go=e("h3"),wt=e("a"),_p=o("create_fragment"),wp=r(),qo=e("p"),bp=o("Svelte components are the building blocks of a Svelte application. Each Svelte component focuses on building its piece or fragment of the final DOM."),Sp=r(),bt=e("p"),Lp=o("The "),la=e("code"),Tp=o("create_fragment"),Cp=o(" function gives the Svelte component an instruction manual on how to build the DOM fragment."),Hp=r(),St=e("p"),Ip=o("Look at the return object of the "),ia=e("code"),Op=o("create_fragment"),Dp=o(" function. It has methods, such as:"),Li=r(),N=e("section"),zo=e("h4"),Lt=e("a"),Pp=o("- c()"),Mp=r(),Tt=e("p"),Ap=o("Short for "),Yo=e("strong"),Np=o("create"),$p=o("."),jp=r(),Ko=e("p"),Rp=o("Contains instructions to create all the elements in the fragment."),Vp=r(),Ct=e("p"),Bp=o("In this example, it contains instructions to create the "),ra=e("code"),Wp=o("h1"),Up=o(" element"),Jp=r(),ca=e("div"),Ti=r(),$=e("section"),Qo=e("h4"),Ht=e("a"),Gp=o("- m(target, anchor)"),qp=r(),It=e("p"),zp=o("Short for "),Fo=e("strong"),Yp=o("mount"),Kp=o("."),Qp=r(),Zo=e("p"),Fp=o("Contains instructions to mount the elements into the target."),Zp=r(),us=e("p"),Xp=o("In this example, it contains instructions to insert the "),pa=e("code"),sh=o("h1"),th=o(" element into the "),ha=e("code"),eh=o("target"),ah=o("."),nh=r(),da=e("div"),Ci=r(),P=e("section"),Xo=e("h4"),Ot=e("a"),oh=o("- d(detaching)"),lh=r(),Dt=e("p"),ih=o("Short for "),sl=e("strong"),rh=o("destroy"),ch=o("."),ph=r(),tl=e("p"),hh=o("Contains instructions to remove the elements from the target."),dh=r(),Pt=e("p"),vh=o("In this example, we detach the "),va=e("code"),kh=o("h1"),uh=o(" element from the DOM"),yh=r(),ka=e("div"),fh=r(),el=e("blockquote"),Mt=e("p"),mh=o("The method names are short for better minification. "),At=e("a"),gh=o("See what can't be minified here"),xh=o("."),Hi=r(),y=e("section"),al=e("h3"),Nt=e("a"),Eh=o("export default class App extends SvelteComponent"),_h=r(),$t=e("p"),wh=o("Each component is a class, which you can import and instantiate through "),jt=e("a"),bh=o("this API"),Sh=o("."),Lh=r(),Rt=e("p"),Th=o("And in the constructor, we initialize the component with information that made up the component such as "),ua=e("code"),Ch=o("create_fragment"),Hh=o(". Svelte will only pass information that it is needed and remove them whenever it is not necessary."),Ih=r(),Vt=e("p"),Oh=o("Try removing the "),ya=e("code"),Dh=o("<h1>"),Ph=o(" tag and see what happens to the output:"),Mh=r(),fa=e("div"),Ah=r(),nl=e("p"),Bt=e("a"),Nh=o("Svelte REPL"),$h=r(),ma=e("div"),jh=r(),ys=e("p"),Rh=o("Svelte will pass in "),ga=e("code"),Vh=o("null"),Bh=o(" instead of "),xa=e("code"),Wh=o("create_fragment"),Uh=o("!"),Jh=r(),Wt=e("p"),Gh=o("The "),Ea=e("code"),qh=o("init"),zh=o(" function is where Svelte sets up most of the internals, such as:"),Yh=r(),fs=e("ul"),ms=e("li"),Kh=o("component props, "),_a=e("code"),Qh=o("ctx"),Fh=o(" (will explain what "),wa=e("code"),Zh=o("ctx"),Xh=o(" is later) and context"),sd=r(),ol=e("li"),td=o("component lifecycle events"),ed=r(),ll=e("li"),ad=o("component update mechanism"),nd=r(),Ut=e("p"),od=o("and at the very end, Svelte calls the "),ba=e("code"),ld=o("create_fragment"),id=o(" to create and mount elements into the DOM."),rd=r(),Jt=e("p"),cd=o("If you noticed, all the internal state and methods are attached to "),Sa=e("code"),pd=o("this.$$"),hd=o("."),dd=r(),Gt=e("p"),vd=o("So if you ever access the "),La=e("code"),kd=o("$$"),ud=o(" property of the component, you are tapping into the internals. You've been warned! \u{1F648}\u{1F6A8}"),Ii=r(),w=e("section"),il=e("h3"),qt=e("a"),yd=o("Adding data"),fd=r(),rl=e("p"),md=o("Now that we've looked at the bare minimum of a Svelte component, let's see how adding a data would change the compiled output:"),gd=r(),Ta=e("div"),xd=r(),cl=e("p"),zt=e("a"),Ed=o("Svelte REPL"),_d=r(),pl=e("p"),wd=o("Notice the change in the output:"),bd=r(),Ca=e("div"),Sd=r(),hl=e("p"),Ld=o("Some observations:"),Td=r(),Yt=e("ul"),Kt=e("li"),Cd=o("What you've written in the "),Ha=e("code"),Hd=o("<script>"),Id=o(" tag is moved into the top level of the code"),Od=r(),Ia=e("li"),Oa=e("code"),Dd=o("h1"),Pd=o(" element's text content is now a template literal"),Md=r(),dl=e("p"),Ad=o("There's a lot of amazing things happening under the hood right now, but let's hold our horses for a while, because it's best explained when comparing with the next code change."),Oi=r(),u=e("section"),vl=e("h3"),Qt=e("a"),Nd=o("Updating data"),$d=r(),Ft=e("p"),jd=o("Let's add a function to update the "),Da=e("code"),Rd=o("name"),Vd=o(":"),Bd=r(),Pa=e("div"),Wd=r(),kl=e("p"),Zt=e("a"),Ud=o("Svelte REPL"),Jd=r(),ul=e("p"),Gd=o("...and observe the change in the compiled output:"),qd=r(),Ma=e("div"),zd=r(),yl=e("p"),Yd=o("Some observations:"),Kd=r(),V=e("ul"),gs=e("li"),Qd=o("the text content of "),Aa=e("code"),Fd=o("<h1>"),Zd=o(" element is now broken into 2 text nodes, created by the "),Na=e("code"),Xd=o("text(...)"),sv=o(" function"),tv=r(),Ds=e("li"),ev=o("the return object of the "),$a=e("code"),av=o("create_fragment"),nv=o(" has a new method, "),ja=e("code"),ov=o("p(ctx, dirty)"),lv=r(),Xt=e("li"),iv=o("a new function "),Ra=e("code"),rv=o("instance"),cv=o(" is created"),pv=r(),xs=e("li"),hv=o("What you've written in the "),Va=e("code"),dv=o("<script>"),vv=o(" tag is now moved into the "),Ba=e("code"),kv=o("instance"),uv=o(" function"),yv=r(),os=e("li"),fv=o("for the sharp-eyed, the variable "),Wa=e("code"),mv=o("name"),gv=o(" that was used in the "),Ua=e("code"),xv=o("create_fragment"),Ev=o(" is now replaced by "),Ja=e("code"),_v=o("ctx[0]"),wv=r(),fl=e("p"),bv=o("So, why the change?"),Sv=r(),se=e("p"),Lv=o("The Svelte compiler tracks all the variables declared in the "),Ga=e("code"),Tv=o("<script>"),Cv=o(" tag."),Hv=r(),ml=e("p"),Iv=o("It tracks whether the variable:"),Ov=r(),B=e("ul"),te=e("li"),Dv=o("can be mutated? eg: "),qa=e("code"),Pv=o("count++"),Mv=o(","),Av=r(),ee=e("li"),Nv=o("can be reassigned? eg: "),za=e("code"),$v=o("name = 'Svelte'"),jv=o(","),Rv=r(),Ya=e("li"),Vv=o("is referenced in the template? eg: "),Ka=e("code"),Bv=o("<h1>Hello {name}</h1>"),Wv=r(),Ps=e("li"),Uv=o("is writable? eg: "),Qa=e("code"),Jv=o("const i = 1;"),Gv=o(" vs "),Fa=e("code"),qv=o("let i = 1;"),zv=r(),gl=e("li"),Yv=o("... and many more"),Kv=r(),W=e("p"),Qv=o("When the Svelte compiler realises that the variable "),Za=e("code"),Fv=o("name"),Zv=o(" can be reassigned, (due to "),Xa=e("code"),Xv=o("name = 'Svelte';"),sk=o(" in "),sn=e("code"),tk=o("update"),ek=o("), it breaks down the text content of the "),tn=e("code"),ak=o("h1"),nk=o(" into parts, so that it can dynamically update part of the text."),ok=r(),ae=e("p"),lk=o("Indeed, you can see that there's a new method, "),en=e("code"),ik=o("p"),rk=o(", to update the text node."),Di=r(),ls=e("section"),xl=e("h4"),ne=e("a"),ck=o("- p(ctx, dirty)"),pk=r(),oe=e("p"),hk=o("Short for "),El=e("strong"),dk=o("u_p_date"),vk=o("."),kk=r(),is=e("p"),_l=e("strong"),uk=o("p(ctx, dirty)"),yk=o(" contains instructions to update the elements based on what has changed in the state ("),an=e("code"),fk=o("dirty"),mk=o(") and the state ("),nn=e("code"),gk=o("ctx"),xk=o(") of the component."),Pi=r(),M=e("section"),wl=e("h3"),le=e("a"),Ek=o("instance variable"),_k=r(),U=e("p"),wk=o("The compiler realises that the variable "),on=e("code"),bk=o("name"),Sk=o(" cannot be shared across different instances of the "),ln=e("code"),Lk=o("App"),Tk=o(" component. That's why it moves the declaration of the variable "),rn=e("code"),Ck=o("name"),Hk=o(" into a function called "),cn=e("code"),Ik=o("instance"),Ok=o("."),Dk=r(),Es=e("p"),Pk=o("In the previous example, no matter how many instances of the "),pn=e("code"),Mk=o("App"),Ak=o(" component, the value of the variable "),hn=e("code"),Nk=o("name"),$k=o(" is the same and unchanged across the instances:"),jk=r(),dn=e("div"),Rk=r(),Z=e("p"),Vk=o("But, in this example, the variable "),vn=e("code"),Bk=o("name"),Wk=o(" can be changed within 1 instance of the component, so the declaration of the variable "),kn=e("code"),Uk=o("name"),Jk=o(" is now moved into the "),un=e("code"),Gk=o("instance"),qk=o(" function:"),zk=r(),yn=e("div"),Mi=r(),b=e("section"),bl=e("h3"),ie=e("a"),Yk=o("instance($$self, $$props, $$invalidate)"),Kk=r(),_s=e("p"),Qk=o("The "),fn=e("code"),Fk=o("instance"),Zk=o(" function returns a list of "),Sl=e("em"),Xk=o("instance"),su=o(" variables, which are variables that are:"),tu=r(),re=e("ul"),Ll=e("li"),eu=o("referenced in the template"),au=r(),Tl=e("li"),nu=o("mutated or reassigned, (can be changed within 1 instance of the component)"),ou=r(),ce=e("p"),lu=o("In Svelte, we call this list of instance variables, "),Cl=e("strong"),iu=o("ctx"),ru=o("."),cu=r(),X=e("p"),pu=o("In the "),mn=e("code"),hu=o("init"),du=o(" function, Svelte calls the "),gn=e("code"),vu=o("instance"),ku=o(" function to create "),Hl=e("strong"),uu=o("ctx"),yu=o(", and uses it to create the fragment for the component:"),fu=r(),xn=e("div"),mu=r(),ss=e("p"),gu=o("Now, instead of accessing the variable "),En=e("code"),xu=o("name"),Eu=o(" outside of the component, we refer to the variable "),_n=e("code"),_u=o("name"),wu=o(" passed via the "),Il=e("strong"),bu=o("ctx"),Su=o(":"),Lu=r(),wn=e("div"),Tu=r(),bn=e("p"),Cu=o("The reason that ctx is an array instead of a map or an object is because of an optimisation related to bitmask, you can see "),pe=e("a"),Hu=o("the discussion about it here"),Ai=r(),C=e("section"),Ol=e("h3"),he=e("a"),Iu=o("$$invalidate"),Ou=r(),de=e("p"),Du=o("The secret behind the system of reactivity in Svelte is the "),Sn=e("code"),Pu=o("$$invalidate"),Mu=o(" function."),Au=r(),Dl=e("p"),Nu=o("Every variable that has been"),$u=r(),ve=e("ul"),Pl=e("li"),ju=o("reassigned or mutated"),Ru=r(),Ml=e("li"),Vu=o("referenced in the template"),Bu=r(),ke=e("p"),Wu=o("will have the "),Ln=e("code"),Uu=o("$$invalidate"),Ju=o(" function inserted right after the assignment or mutation:"),Gu=r(),Tn=e("div"),qu=r(),ue=e("p"),zu=o("The "),Cn=e("code"),Yu=o("$$invalidate"),Ku=o(" function marks the variable dirty and schedules an update for the component:"),Qu=r(),Hn=e("div"),Ni=r(),g=e("section"),Al=e("h3"),ye=e("a"),Fu=o("Adding event listeners"),Zu=r(),Nl=e("p"),Xu=o("Let's now add an event listener"),sy=r(),In=e("div"),ty=r(),$l=e("p"),fe=e("a"),ey=o("Svelte REPL"),ay=r(),jl=e("p"),ny=o("And observe the difference:"),oy=r(),On=e("div"),ly=r(),Rl=e("p"),iy=o("Some observations:"),ry=r(),me=e("ul"),Dn=e("li"),Pn=e("code"),cy=o("instance"),py=o(" function now returns 2 variables instead of 1"),hy=r(),Ms=e("li"),dy=o("Listen to click event during "),Vl=e("strong"),vy=o("mount"),ky=o(" and dispose it in "),Bl=e("strong"),uy=o("destroy"),yy=r(),ts=e("p"),fy=o("As I've mentioned earlier, "),Mn=e("code"),my=o("instance"),gy=o(" function returns variables that are "),Wl=e("strong"),xy=o("referenced in the template"),Ey=o(" and that are "),Ul=e("strong"),_y=o("mutated or reassigned"),wy=o("."),by=r(),es=e("p"),Sy=o("Since we've just referenced the "),An=e("code"),Ly=o("update"),Ty=o(" function in the template, it is now returned in the "),Nn=e("code"),Cy=o("instance"),Hy=o(" function as part of the "),Jl=e("strong"),Iy=o("ctx"),Oy=o("."),Dy=r(),Gl=e("p"),Py=o("Svelte tries generate as compact JavaScript output as possible, not returning an extra variable if it is not necessary."),$i=r(),x=e("section"),ql=e("h3"),ge=e("a"),My=o("listen and dispose"),Ay=r(),ws=e("p"),Ny=o("Whenever you add "),xe=e("a"),$y=o("an event listener"),jy=o(" in Svelte, Svelte will inject code to add an "),Ee=e("a"),Ry=o("event listener"),Vy=o(" and remove it when the DOM fragment is removed from the DOM."),By=r(),zl=e("p"),Wy=o("Try adding more event listeners,"),Uy=r(),$n=e("div"),Jy=r(),Yl=e("p"),_e=e("a"),Gy=o("Svelte REPL"),qy=r(),Kl=e("p"),zy=o("and observe the compiled output:"),Yy=r(),jn=e("div"),Ky=r(),Ql=e("p"),Qy=o("Instead of declaring and creating a new variable to remove each event listener, Svelte assigns all of them to an array:"),Fy=r(),Rn=e("div"),Zy=r(),Fl=e("p"),Xy=o("Minification can compact the variable name, but you can't remove the brackets."),sf=r(),we=e("p"),tf=o("Again, this is another great example of where Svelte tries to generate compact JavaScript output. Svelte does not create the "),Vn=e("code"),ef=o("dispose"),af=o(" array when there's only 1 event listener."),ji=r(),z=e("section"),Zl=e("h2"),be=e("a"),nf=o("Summary"),of=r(),Xl=e("p"),lf=o("The Svelte syntax is a superset of HTML."),rf=r(),si=e("p"),cf=o("When you write a Svelte component, the Svelte compiler analyses your code and generates optimised JavaScript code output."),pf=r(),ti=e("p"),hf=o("The output can be divided into 3 segments:"),Ri=r(),As=e("section"),ei=e("h3"),Se=e("a"),df=o("1. create_fragment"),vf=r(),ai=e("ul"),ni=e("li"),kf=o("Returns a fragment, which is an instruction manual on how to build the DOM fragment for the component"),Vi=r(),Ns=e("section"),oi=e("h3"),Le=e("a"),uf=o("2. instance"),yf=r(),bs=e("ul"),Te=e("li"),ff=o("Most of the code written in the "),Bn=e("code"),mf=o("<script>"),gf=o(" tag is in here."),xf=r(),li=e("li"),Ef=o("Returns a list of instance variables that are referenced in the template"),_f=r(),Wn=e("li"),Un=e("code"),wf=o("$$invalidate"),bf=o(" is inserted after every assignment and mutation of the instance variable"),Bi=r(),Y=e("section"),ii=e("h3"),Ce=e("a"),Sf=o("3. class App extends SvelteComponent"),Lf=r(),Ss=e("ul"),Ls=e("li"),Tf=o("Initialise the component with "),Jn=e("code"),Cf=o("create_fragment"),Hf=o(" and "),Gn=e("code"),If=o("instance"),Of=o(" function"),Df=r(),ri=e("li"),Pf=o("Sets up the component internals"),Mf=r(),qn=e("li"),Af=o("Provides the "),He=e("a"),Nf=o("Component API"),$f=r(),ci=e("p"),jf=o("Svelte strives to generate as compact JavaScript as possible, for example:"),Rf=r(),as=e("ul"),Ie=e("li"),Vf=o("Breaking text content of "),zn=e("code"),Bf=o("h1"),Wf=o(" into separate text nodes only when part of the text can be updated"),Uf=r(),Ts=e("li"),Jf=o("Not defining "),Yn=e("code"),Gf=o("create_fragment"),qf=o(" or "),Kn=e("code"),zf=o("instance"),Yf=o(" function when it is not needed"),Kf=r(),Oe=e("li"),Qf=o("Generate "),Qn=e("code"),Ff=o("dispose"),Zf=o(" as an array or a function, depending on the number of event listeners."),Xf=r(),pi=e("li"),sm=o("..."),Wi=r(),j=e("section"),hi=e("h2"),De=e("a"),tm=o("Closing Note"),em=r(),di=e("p"),am=o("We've covered the basic structure of the Svelte's compiled output, and this is just the beginning."),nm=r(),Pe=e("p"),om=o("If you wish to know more, "),Me=e("a"),lm=o("follow me on Twitter"),im=o("."),rm=r(),ns=e("p"),cm=o("I'll post it on Twitter when the next part is ready, where I'll be covering "),Ae=e("a"),pm=o("logic blocks"),hm=o(", "),Ne=e("a"),dm=o("slots"),vm=o(", "),$e=e("a"),km=o("context"),um=o(", and many others."),ym=r(),vi=e("p"),je=e("strong"),fm=o("\u27A1 \u27A1  Continue reading on "),Fn=e("a"),mm=o("Part 2"),gm=o("."),this.h()},l(p){f=a(p,"SECTION",{});var h=n(f);J=a(h,"H2",{});var Cm=n(J);R=a(Cm,"A",{href:!0,id:!0});var Hm=n(R);Qs=l(Hm,"Background"),Hm.forEach(t),Cm.forEach(t),T=c(h),I=a(h,"P",{});var $s=n(I);We=l($s,"A while ago, "),Fs=a($s,"A",{href:!0,rel:!0});var Im=n(Fs);Nr=l(Im,"@swyx"),Im.forEach(t),$r=l($s," came back to Singapore and visited us in "),Zs=a($s,"A",{href:!0,rel:!0});var Om=n(Zs);jr=l(Om,"Shopee Singapore"),Om.forEach(t),Rr=l($s," ("),Xs=a($s,"A",{href:!0,rel:!0});var Dm=n(Xs);Vr=l(Dm,"We're hiring!"),Dm.forEach(t),Br=l($s,")."),$s.forEach(t),Wr=c(h),F=a(h,"P",{});var js=n(F);Ur=l(js,"He gave an amazing sharing on "),st=a(js,"A",{href:!0,rel:!0});var Pm=n(st);Jr=l(Pm,"Compile Svelte in Your Head"),Pm.forEach(t),Gr=l(js," ("),tt=a(js,"A",{href:!0,rel:!0});var Mm=n(tt);qr=l(Mm,"video"),Mm.forEach(t),zr=l(js,") in the "),et=a(js,"A",{href:!0,rel:!0});var Am=n(et);Yr=l(Am,"ReactKnowledgeable Originals"),Am.forEach(t),Kr=l(js,"."),js.forEach(t),Qr=c(h),vo=a(h,"P",{});var Nm=n(vo);Fr=l(Nm,"I love his presentation and the title is so catchy, so I begged him to use the catchy title as this series of articles about the Svelte compiler. It will be about how Svelte sees your code and compiles it down to plain JavaScript."),Nm.forEach(t),h.forEach(t),fi=c(p),Cs=a(p,"SECTION",{});var Ui=n(Cs);ko=a(Ui,"H2",{});var $m=n(ko);at=a($m,"A",{href:!0,id:!0});var jm=n(at);Zr=l(jm,"Introduction"),jm.forEach(t),$m.forEach(t),Xr=c(Ui),uo=a(Ui,"P",{});var Rm=n(uo);sc=l(Rm,"Lets refresh ourselves with how we write web app without any framework:"),Rm.forEach(t),Ui.forEach(t),mi=c(p),Ue=a(p,"SECTION",{});var Vm=n(Ue);yo=a(Vm,"H3",{});var Bm=n(yo);nt=a(Bm,"A",{href:!0,id:!0});var Wm=n(nt);tc=l(Wm,"Creating an element"),Wm.forEach(t),Bm.forEach(t),Vm.forEach(t),gi=c(p),Hs=a(p,"SECTION",{});var Ji=n(Hs);fo=a(Ji,"H3",{});var Um=n(fo);ot=a(Um,"A",{href:!0,id:!0});var Jm=n(ot);ec=l(Jm,"Updating an element"),Jm.forEach(t),Um.forEach(t),ac=c(Ji),Je=a(Ji,"DIV",{class:!0});var NE=n(Je);NE.forEach(t),Ji.forEach(t),xi=c(p),Is=a(p,"SECTION",{});var Gi=n(Is);mo=a(Gi,"H3",{});var Gm=n(mo);lt=a(Gm,"A",{href:!0,id:!0});var qm=n(lt);nc=l(qm,"Removing an element"),qm.forEach(t),Gm.forEach(t),oc=c(Gi),Ge=a(Gi,"DIV",{class:!0});var $E=n(Ge);$E.forEach(t),Gi.forEach(t),Ei=c(p),Os=a(p,"SECTION",{});var qi=n(Os);go=a(qi,"H3",{});var zm=n(go);it=a(zm,"A",{href:!0,id:!0});var Ym=n(it);lc=l(Ym,"Adding style to an element"),Ym.forEach(t),zm.forEach(t),ic=c(qi),qe=a(qi,"DIV",{class:!0});var jE=n(qe);jE.forEach(t),qi.forEach(t),_i=c(p),G=a(p,"SECTION",{});var Rs=n(G);xo=a(Rs,"H3",{});var Km=n(xo);rt=a(Km,"A",{href:!0,id:!0});var Qm=n(rt);rc=l(Qm,"Listen for click events on an element"),Qm.forEach(t),Km.forEach(t),cc=c(Rs),ze=a(Rs,"DIV",{class:!0});var RE=n(ze);RE.forEach(t),pc=c(Rs),Eo=a(Rs,"P",{});var Fm=n(Eo);hc=l(Fm,"These are code that you have to write, without using any framework or library."),Fm.forEach(t),dc=c(Rs),_o=a(Rs,"P",{});var Zm=n(_o);vc=l(Zm,"The main idea of this article is to show how the Svelte compiler compiles the Svelte syntax into statements of codes that I've shown above."),Zm.forEach(t),Rs.forEach(t),wi=c(p),v=a(p,"SECTION",{});var k=n(v);wo=a(k,"H2",{});var Xm=n(wo);ct=a(Xm,"A",{href:!0,id:!0});var s1=n(ct);kc=l(s1,"Svelte syntax"),s1.forEach(t),Xm.forEach(t),uc=c(k),bo=a(k,"P",{});var t1=n(bo);yc=l(t1,"Here I'm going to show you some basics of the Svelte syntax."),t1.forEach(t),fc=c(k),So=a(k,"BLOCKQUOTE",{});var e1=n(So);pt=a(e1,"P",{});var zi=n(pt);mc=l(zi,"If you wish to learn more, I highly recommend trying "),ht=a(zi,"A",{href:!0,rel:!0});var a1=n(ht);gc=l(a1,"Svelte's interactive tutorial"),a1.forEach(t),xc=l(zi,"."),zi.forEach(t),e1.forEach(t),Ec=c(k),Lo=a(k,"P",{});var n1=n(Lo);_c=l(n1,"So here is a basic Svelte component:"),n1.forEach(t),wc=c(k),Ye=a(k,"DIV",{class:!0});var VE=n(Ye);VE.forEach(t),bc=c(k),To=a(k,"P",{});var o1=n(To);dt=a(o1,"A",{href:!0,rel:!0});var l1=n(dt);Sc=l(l1,"Svelte REPL"),l1.forEach(t),o1.forEach(t),Lc=c(k),vt=a(k,"P",{});var Yi=n(vt);Tc=l(Yi,"To add style, you add a "),Ke=a(Yi,"CODE",{class:!0});var i1=n(Ke);Cc=l(i1,"<style>"),i1.forEach(t),Hc=l(Yi," tag:"),Yi.forEach(t),Ic=c(k),Qe=a(k,"DIV",{class:!0});var BE=n(Qe);BE.forEach(t),Oc=c(k),Co=a(k,"P",{});var r1=n(Co);kt=a(r1,"A",{href:!0,rel:!0});var c1=n(kt);Dc=l(c1,"Svelte REPL"),c1.forEach(t),r1.forEach(t),Pc=c(k),Ho=a(k,"P",{});var p1=n(Ho);Mc=l(p1,"At this point, writing Svelte component just feels like writing HTML, that's because Svelte syntax is a super set of the HTML syntax."),p1.forEach(t),Ac=c(k),Io=a(k,"P",{});var h1=n(Io);Nc=l(h1,"Let's look at how we add a data to our component:"),h1.forEach(t),$c=c(k),Fe=a(k,"DIV",{class:!0});var WE=n(Fe);WE.forEach(t),jc=c(k),Oo=a(k,"P",{});var d1=n(Oo);ut=a(d1,"A",{href:!0,rel:!0});var v1=n(ut);Rc=l(v1,"Svelte REPL"),v1.forEach(t),d1.forEach(t),Vc=c(k),Do=a(k,"P",{});var k1=n(Do);Bc=l(k1,"We put JavaScript inside the curly brackets."),k1.forEach(t),Wc=c(k),yt=a(k,"P",{});var Ki=n(yt);Uc=l(Ki,"To add a click handler, we use the "),Ze=a(Ki,"CODE",{class:!0});var u1=n(Ze);Jc=l(u1,"on:"),u1.forEach(t),Gc=l(Ki," directive"),Ki.forEach(t),qc=c(k),Xe=a(k,"DIV",{class:!0});var UE=n(Xe);UE.forEach(t),zc=c(k),Po=a(k,"P",{});var y1=n(Po);ft=a(y1,"A",{href:!0,rel:!0});var f1=n(ft);Yc=l(f1,"Svelte REPL"),f1.forEach(t),y1.forEach(t),Kc=c(k),sa=a(k,"P",{});var xm=n(sa);Qc=l(xm,"To change the data, we use "),mt=a(xm,"A",{href:!0,rel:!0});var m1=n(mt);Fc=l(m1,"assignment operators"),m1.forEach(t),xm.forEach(t),Zc=c(k),ta=a(k,"DIV",{class:!0});var JE=n(ta);JE.forEach(t),Xc=c(k),Mo=a(k,"P",{});var g1=n(Mo);gt=a(g1,"A",{href:!0,rel:!0});var x1=n(gt);sp=l(x1,"Svelte REPL"),x1.forEach(t),g1.forEach(t),tp=c(k),Ao=a(k,"P",{});var E1=n(Ao);ep=l(E1,"Let's move on to see how Svelte syntax is compiled into JavaScript that we've seen earlier"),E1.forEach(t),k.forEach(t),bi=c(p),_=a(p,"SECTION",{});var H=n(_);No=a(H,"H2",{});var _1=n(No);xt=a(_1,"A",{href:!0,id:!0});var w1=n(xt);ap=l(w1,"Compile Svelte in your Head"),w1.forEach(t),_1.forEach(t),np=c(H),$o=a(H,"P",{});var b1=n($o);op=l(b1,"The Svelte compiler analyses the code you write and generates an optimised JavaScript output."),b1.forEach(t),lp=c(H),jo=a(H,"P",{});var S1=n(jo);ip=l(S1,"To study how Svelte compiles the code, lets start with the smallest example possible, and slowly build up the code. Through the process, you will see that Svelte incrementally adds to the output code based on your changes."),S1.forEach(t),rp=c(H),Ro=a(H,"P",{});var L1=n(Ro);cp=l(L1,"The first example that we are going to see is:"),L1.forEach(t),pp=c(H),ea=a(H,"DIV",{class:!0});var GE=n(ea);GE.forEach(t),hp=c(H),Vo=a(H,"P",{});var T1=n(Vo);Et=a(T1,"A",{href:!0,rel:!0});var C1=n(Et);dp=l(C1,"Svelte REPL"),C1.forEach(t),T1.forEach(t),vp=c(H),Bo=a(H,"P",{});var H1=n(Bo);kp=l(H1,"The output code:"),H1.forEach(t),up=c(H),aa=a(H,"DIV",{class:!0});var qE=n(aa);qE.forEach(t),yp=c(H),Wo=a(H,"P",{});var I1=n(Wo);fp=l(I1,"You can break down the output code into 2 sections:"),I1.forEach(t),mp=c(H),_t=a(H,"UL",{});var Qi=n(_t);Uo=a(Qi,"LI",{});var O1=n(Uo);na=a(O1,"CODE",{class:!0});var D1=n(na);gp=l(D1,"create_fragment"),D1.forEach(t),O1.forEach(t),xp=c(Qi),Jo=a(Qi,"LI",{});var P1=n(Jo);oa=a(P1,"CODE",{class:!0});var M1=n(oa);Ep=l(M1,"class App extends SvelteComponent"),M1.forEach(t),P1.forEach(t),Qi.forEach(t),H.forEach(t),Si=c(p),q=a(p,"SECTION",{});var Vs=n(q);Go=a(Vs,"H3",{});var A1=n(Go);wt=a(A1,"A",{href:!0,id:!0});var N1=n(wt);_p=l(N1,"create_fragment"),N1.forEach(t),A1.forEach(t),wp=c(Vs),qo=a(Vs,"P",{});var $1=n(qo);bp=l($1,"Svelte components are the building blocks of a Svelte application. Each Svelte component focuses on building its piece or fragment of the final DOM."),$1.forEach(t),Sp=c(Vs),bt=a(Vs,"P",{});var Fi=n(bt);Lp=l(Fi,"The "),la=a(Fi,"CODE",{class:!0});var j1=n(la);Tp=l(j1,"create_fragment"),j1.forEach(t),Cp=l(Fi," function gives the Svelte component an instruction manual on how to build the DOM fragment."),Fi.forEach(t),Hp=c(Vs),St=a(Vs,"P",{});var Zi=n(St);Ip=l(Zi,"Look at the return object of the "),ia=a(Zi,"CODE",{class:!0});var R1=n(ia);Op=l(R1,"create_fragment"),R1.forEach(t),Dp=l(Zi," function. It has methods, such as:"),Zi.forEach(t),Vs.forEach(t),Li=c(p),N=a(p,"SECTION",{});var rs=n(N);zo=a(rs,"H4",{});var V1=n(zo);Lt=a(V1,"A",{href:!0,id:!0});var B1=n(Lt);Pp=l(B1,"- c()"),B1.forEach(t),V1.forEach(t),Mp=c(rs),Tt=a(rs,"P",{});var Xi=n(Tt);Ap=l(Xi,"Short for "),Yo=a(Xi,"STRONG",{});var W1=n(Yo);Np=l(W1,"create"),W1.forEach(t),$p=l(Xi,"."),Xi.forEach(t),jp=c(rs),Ko=a(rs,"P",{});var U1=n(Ko);Rp=l(U1,"Contains instructions to create all the elements in the fragment."),U1.forEach(t),Vp=c(rs),Ct=a(rs,"P",{});var sr=n(Ct);Bp=l(sr,"In this example, it contains instructions to create the "),ra=a(sr,"CODE",{class:!0});var J1=n(ra);Wp=l(J1,"h1"),J1.forEach(t),Up=l(sr," element"),sr.forEach(t),Jp=c(rs),ca=a(rs,"DIV",{class:!0});var zE=n(ca);zE.forEach(t),rs.forEach(t),Ti=c(p),$=a(p,"SECTION",{});var cs=n($);Qo=a(cs,"H4",{});var G1=n(Qo);Ht=a(G1,"A",{href:!0,id:!0});var q1=n(Ht);Gp=l(q1,"- m(target, anchor)"),q1.forEach(t),G1.forEach(t),qp=c(cs),It=a(cs,"P",{});var tr=n(It);zp=l(tr,"Short for "),Fo=a(tr,"STRONG",{});var z1=n(Fo);Yp=l(z1,"mount"),z1.forEach(t),Kp=l(tr,"."),tr.forEach(t),Qp=c(cs),Zo=a(cs,"P",{});var Y1=n(Zo);Fp=l(Y1,"Contains instructions to mount the elements into the target."),Y1.forEach(t),Zp=c(cs),us=a(cs,"P",{});var Zn=n(us);Xp=l(Zn,"In this example, it contains instructions to insert the "),pa=a(Zn,"CODE",{class:!0});var K1=n(pa);sh=l(K1,"h1"),K1.forEach(t),th=l(Zn," element into the "),ha=a(Zn,"CODE",{class:!0});var Q1=n(ha);eh=l(Q1,"target"),Q1.forEach(t),ah=l(Zn,"."),Zn.forEach(t),nh=c(cs),da=a(cs,"DIV",{class:!0});var YE=n(da);YE.forEach(t),cs.forEach(t),Ci=c(p),P=a(p,"SECTION",{});var K=n(P);Xo=a(K,"H4",{});var F1=n(Xo);Ot=a(F1,"A",{href:!0,id:!0});var Z1=n(Ot);oh=l(Z1,"- d(detaching)"),Z1.forEach(t),F1.forEach(t),lh=c(K),Dt=a(K,"P",{});var er=n(Dt);ih=l(er,"Short for "),sl=a(er,"STRONG",{});var X1=n(sl);rh=l(X1,"destroy"),X1.forEach(t),ch=l(er,"."),er.forEach(t),ph=c(K),tl=a(K,"P",{});var sg=n(tl);hh=l(sg,"Contains instructions to remove the elements from the target."),sg.forEach(t),dh=c(K),Pt=a(K,"P",{});var ar=n(Pt);vh=l(ar,"In this example, we detach the "),va=a(ar,"CODE",{class:!0});var tg=n(va);kh=l(tg,"h1"),tg.forEach(t),uh=l(ar," element from the DOM"),ar.forEach(t),yh=c(K),ka=a(K,"DIV",{class:!0});var KE=n(ka);KE.forEach(t),fh=c(K),el=a(K,"BLOCKQUOTE",{});var eg=n(el);Mt=a(eg,"P",{});var nr=n(Mt);mh=l(nr,"The method names are short for better minification. "),At=a(nr,"A",{href:!0,rel:!0});var ag=n(At);gh=l(ag,"See what can't be minified here"),ag.forEach(t),xh=l(nr,"."),nr.forEach(t),eg.forEach(t),K.forEach(t),Hi=c(p),y=a(p,"SECTION",{});var E=n(y);al=a(E,"H3",{});var ng=n(al);Nt=a(ng,"A",{href:!0,id:!0});var og=n(Nt);Eh=l(og,"export default class App extends SvelteComponent"),og.forEach(t),ng.forEach(t),_h=c(E),$t=a(E,"P",{});var or=n($t);wh=l(or,"Each component is a class, which you can import and instantiate through "),jt=a(or,"A",{href:!0,rel:!0});var lg=n(jt);bh=l(lg,"this API"),lg.forEach(t),Sh=l(or,"."),or.forEach(t),Lh=c(E),Rt=a(E,"P",{});var lr=n(Rt);Th=l(lr,"And in the constructor, we initialize the component with information that made up the component such as "),ua=a(lr,"CODE",{class:!0});var ig=n(ua);Ch=l(ig,"create_fragment"),ig.forEach(t),Hh=l(lr,". Svelte will only pass information that it is needed and remove them whenever it is not necessary."),lr.forEach(t),Ih=c(E),Vt=a(E,"P",{});var ir=n(Vt);Oh=l(ir,"Try removing the "),ya=a(ir,"CODE",{class:!0});var rg=n(ya);Dh=l(rg,"<h1>"),rg.forEach(t),Ph=l(ir," tag and see what happens to the output:"),ir.forEach(t),Mh=c(E),fa=a(E,"DIV",{class:!0});var QE=n(fa);QE.forEach(t),Ah=c(E),nl=a(E,"P",{});var cg=n(nl);Bt=a(cg,"A",{href:!0,rel:!0});var pg=n(Bt);Nh=l(pg,"Svelte REPL"),pg.forEach(t),cg.forEach(t),$h=c(E),ma=a(E,"DIV",{class:!0});var FE=n(ma);FE.forEach(t),jh=c(E),ys=a(E,"P",{});var Xn=n(ys);Rh=l(Xn,"Svelte will pass in "),ga=a(Xn,"CODE",{class:!0});var hg=n(ga);Vh=l(hg,"null"),hg.forEach(t),Bh=l(Xn," instead of "),xa=a(Xn,"CODE",{class:!0});var dg=n(xa);Wh=l(dg,"create_fragment"),dg.forEach(t),Uh=l(Xn,"!"),Xn.forEach(t),Jh=c(E),Wt=a(E,"P",{});var rr=n(Wt);Gh=l(rr,"The "),Ea=a(rr,"CODE",{class:!0});var vg=n(Ea);qh=l(vg,"init"),vg.forEach(t),zh=l(rr," function is where Svelte sets up most of the internals, such as:"),rr.forEach(t),Yh=c(E),fs=a(E,"UL",{});var so=n(fs);ms=a(so,"LI",{});var to=n(ms);Kh=l(to,"component props, "),_a=a(to,"CODE",{class:!0});var kg=n(_a);Qh=l(kg,"ctx"),kg.forEach(t),Fh=l(to," (will explain what "),wa=a(to,"CODE",{class:!0});var ug=n(wa);Zh=l(ug,"ctx"),ug.forEach(t),Xh=l(to," is later) and context"),to.forEach(t),sd=c(so),ol=a(so,"LI",{});var yg=n(ol);td=l(yg,"component lifecycle events"),yg.forEach(t),ed=c(so),ll=a(so,"LI",{});var fg=n(ll);ad=l(fg,"component update mechanism"),fg.forEach(t),so.forEach(t),nd=c(E),Ut=a(E,"P",{});var cr=n(Ut);od=l(cr,"and at the very end, Svelte calls the "),ba=a(cr,"CODE",{class:!0});var mg=n(ba);ld=l(mg,"create_fragment"),mg.forEach(t),id=l(cr," to create and mount elements into the DOM."),cr.forEach(t),rd=c(E),Jt=a(E,"P",{});var pr=n(Jt);cd=l(pr,"If you noticed, all the internal state and methods are attached to "),Sa=a(pr,"CODE",{class:!0});var gg=n(Sa);pd=l(gg,"this.$$"),gg.forEach(t),hd=l(pr,"."),pr.forEach(t),dd=c(E),Gt=a(E,"P",{});var hr=n(Gt);vd=l(hr,"So if you ever access the "),La=a(hr,"CODE",{class:!0});var xg=n(La);kd=l(xg,"$$"),xg.forEach(t),ud=l(hr," property of the component, you are tapping into the internals. You've been warned! \u{1F648}\u{1F6A8}"),hr.forEach(t),E.forEach(t),Ii=c(p),w=a(p,"SECTION",{});var O=n(w);il=a(O,"H3",{});var Eg=n(il);qt=a(Eg,"A",{href:!0,id:!0});var _g=n(qt);yd=l(_g,"Adding data"),_g.forEach(t),Eg.forEach(t),fd=c(O),rl=a(O,"P",{});var wg=n(rl);md=l(wg,"Now that we've looked at the bare minimum of a Svelte component, let's see how adding a data would change the compiled output:"),wg.forEach(t),gd=c(O),Ta=a(O,"DIV",{class:!0});var ZE=n(Ta);ZE.forEach(t),xd=c(O),cl=a(O,"P",{});var bg=n(cl);zt=a(bg,"A",{href:!0,rel:!0});var Sg=n(zt);Ed=l(Sg,"Svelte REPL"),Sg.forEach(t),bg.forEach(t),_d=c(O),pl=a(O,"P",{});var Lg=n(pl);wd=l(Lg,"Notice the change in the output:"),Lg.forEach(t),bd=c(O),Ca=a(O,"DIV",{class:!0});var XE=n(Ca);XE.forEach(t),Sd=c(O),hl=a(O,"P",{});var Tg=n(hl);Ld=l(Tg,"Some observations:"),Tg.forEach(t),Td=c(O),Yt=a(O,"UL",{});var dr=n(Yt);Kt=a(dr,"LI",{});var vr=n(Kt);Cd=l(vr,"What you've written in the "),Ha=a(vr,"CODE",{class:!0});var Cg=n(Ha);Hd=l(Cg,"<script>"),Cg.forEach(t),Id=l(vr," tag is moved into the top level of the code"),vr.forEach(t),Od=c(dr),Ia=a(dr,"LI",{});var Em=n(Ia);Oa=a(Em,"CODE",{class:!0});var Hg=n(Oa);Dd=l(Hg,"h1"),Hg.forEach(t),Pd=l(Em," element's text content is now a template literal"),Em.forEach(t),dr.forEach(t),Md=c(O),dl=a(O,"P",{});var Ig=n(dl);Ad=l(Ig,"There's a lot of amazing things happening under the hood right now, but let's hold our horses for a while, because it's best explained when comparing with the next code change."),Ig.forEach(t),O.forEach(t),Oi=c(p),u=a(p,"SECTION",{});var m=n(u);vl=a(m,"H3",{});var Og=n(vl);Qt=a(Og,"A",{href:!0,id:!0});var Dg=n(Qt);Nd=l(Dg,"Updating data"),Dg.forEach(t),Og.forEach(t),$d=c(m),Ft=a(m,"P",{});var kr=n(Ft);jd=l(kr,"Let's add a function to update the "),Da=a(kr,"CODE",{class:!0});var Pg=n(Da);Rd=l(Pg,"name"),Pg.forEach(t),Vd=l(kr,":"),kr.forEach(t),Bd=c(m),Pa=a(m,"DIV",{class:!0});var s3=n(Pa);s3.forEach(t),Wd=c(m),kl=a(m,"P",{});var Mg=n(kl);Zt=a(Mg,"A",{href:!0,rel:!0});var Ag=n(Zt);Ud=l(Ag,"Svelte REPL"),Ag.forEach(t),Mg.forEach(t),Jd=c(m),ul=a(m,"P",{});var Ng=n(ul);Gd=l(Ng,"...and observe the change in the compiled output:"),Ng.forEach(t),qd=c(m),Ma=a(m,"DIV",{class:!0});var t3=n(Ma);t3.forEach(t),zd=c(m),yl=a(m,"P",{});var $g=n(yl);Yd=l($g,"Some observations:"),$g.forEach(t),Kd=c(m),V=a(m,"UL",{});var ps=n(V);gs=a(ps,"LI",{});var eo=n(gs);Qd=l(eo,"the text content of "),Aa=a(eo,"CODE",{class:!0});var jg=n(Aa);Fd=l(jg,"<h1>"),jg.forEach(t),Zd=l(eo," element is now broken into 2 text nodes, created by the "),Na=a(eo,"CODE",{class:!0});var Rg=n(Na);Xd=l(Rg,"text(...)"),Rg.forEach(t),sv=l(eo," function"),eo.forEach(t),tv=c(ps),Ds=a(ps,"LI",{});var ki=n(Ds);ev=l(ki,"the return object of the "),$a=a(ki,"CODE",{class:!0});var Vg=n($a);av=l(Vg,"create_fragment"),Vg.forEach(t),nv=l(ki," has a new method, "),ja=a(ki,"CODE",{class:!0});var Bg=n(ja);ov=l(Bg,"p(ctx, dirty)"),Bg.forEach(t),ki.forEach(t),lv=c(ps),Xt=a(ps,"LI",{});var ur=n(Xt);iv=l(ur,"a new function "),Ra=a(ur,"CODE",{class:!0});var Wg=n(Ra);rv=l(Wg,"instance"),Wg.forEach(t),cv=l(ur," is created"),ur.forEach(t),pv=c(ps),xs=a(ps,"LI",{});var ao=n(xs);hv=l(ao,"What you've written in the "),Va=a(ao,"CODE",{class:!0});var Ug=n(Va);dv=l(Ug,"<script>"),Ug.forEach(t),vv=l(ao," tag is now moved into the "),Ba=a(ao,"CODE",{class:!0});var Jg=n(Ba);kv=l(Jg,"instance"),Jg.forEach(t),uv=l(ao," function"),ao.forEach(t),yv=c(ps),os=a(ps,"LI",{});var Re=n(os);fv=l(Re,"for the sharp-eyed, the variable "),Wa=a(Re,"CODE",{class:!0});var Gg=n(Wa);mv=l(Gg,"name"),Gg.forEach(t),gv=l(Re," that was used in the "),Ua=a(Re,"CODE",{class:!0});var qg=n(Ua);xv=l(qg,"create_fragment"),qg.forEach(t),Ev=l(Re," is now replaced by "),Ja=a(Re,"CODE",{class:!0});var zg=n(Ja);_v=l(zg,"ctx[0]"),zg.forEach(t),Re.forEach(t),ps.forEach(t),wv=c(m),fl=a(m,"P",{});var Yg=n(fl);bv=l(Yg,"So, why the change?"),Yg.forEach(t),Sv=c(m),se=a(m,"P",{});var yr=n(se);Lv=l(yr,"The Svelte compiler tracks all the variables declared in the "),Ga=a(yr,"CODE",{class:!0});var Kg=n(Ga);Tv=l(Kg,"<script>"),Kg.forEach(t),Cv=l(yr," tag."),yr.forEach(t),Hv=c(m),ml=a(m,"P",{});var Qg=n(ml);Iv=l(Qg,"It tracks whether the variable:"),Qg.forEach(t),Ov=c(m),B=a(m,"UL",{});var hs=n(B);te=a(hs,"LI",{});var fr=n(te);Dv=l(fr,"can be mutated? eg: "),qa=a(fr,"CODE",{class:!0});var Fg=n(qa);Pv=l(Fg,"count++"),Fg.forEach(t),Mv=l(fr,","),fr.forEach(t),Av=c(hs),ee=a(hs,"LI",{});var mr=n(ee);Nv=l(mr,"can be reassigned? eg: "),za=a(mr,"CODE",{class:!0});var Zg=n(za);$v=l(Zg,"name = 'Svelte'"),Zg.forEach(t),jv=l(mr,","),mr.forEach(t),Rv=c(hs),Ya=a(hs,"LI",{});var _m=n(Ya);Vv=l(_m,"is referenced in the template? eg: "),Ka=a(_m,"CODE",{class:!0});var Xg=n(Ka);Bv=l(Xg,"<h1>Hello {name}</h1>"),Xg.forEach(t),_m.forEach(t),Wv=c(hs),Ps=a(hs,"LI",{});var ui=n(Ps);Uv=l(ui,"is writable? eg: "),Qa=a(ui,"CODE",{class:!0});var sx=n(Qa);Jv=l(sx,"const i = 1;"),sx.forEach(t),Gv=l(ui," vs "),Fa=a(ui,"CODE",{class:!0});var tx=n(Fa);qv=l(tx,"let i = 1;"),tx.forEach(t),ui.forEach(t),zv=c(hs),gl=a(hs,"LI",{});var ex=n(gl);Yv=l(ex,"... and many more"),ex.forEach(t),hs.forEach(t),Kv=c(m),W=a(m,"P",{});var ds=n(W);Qv=l(ds,"When the Svelte compiler realises that the variable "),Za=a(ds,"CODE",{class:!0});var ax=n(Za);Fv=l(ax,"name"),ax.forEach(t),Zv=l(ds," can be reassigned, (due to "),Xa=a(ds,"CODE",{class:!0});var nx=n(Xa);Xv=l(nx,"name = 'Svelte';"),nx.forEach(t),sk=l(ds," in "),sn=a(ds,"CODE",{class:!0});var ox=n(sn);tk=l(ox,"update"),ox.forEach(t),ek=l(ds,"), it breaks down the text content of the "),tn=a(ds,"CODE",{class:!0});var lx=n(tn);ak=l(lx,"h1"),lx.forEach(t),nk=l(ds," into parts, so that it can dynamically update part of the text."),ds.forEach(t),ok=c(m),ae=a(m,"P",{});var gr=n(ae);lk=l(gr,"Indeed, you can see that there's a new method, "),en=a(gr,"CODE",{class:!0});var ix=n(en);ik=l(ix,"p"),ix.forEach(t),rk=l(gr,", to update the text node."),gr.forEach(t),m.forEach(t),Di=c(p),ls=a(p,"SECTION",{});var no=n(ls);xl=a(no,"H4",{});var rx=n(xl);ne=a(rx,"A",{href:!0,id:!0});var cx=n(ne);ck=l(cx,"- p(ctx, dirty)"),cx.forEach(t),rx.forEach(t),pk=c(no),oe=a(no,"P",{});var xr=n(oe);hk=l(xr,"Short for "),El=a(xr,"STRONG",{});var px=n(El);dk=l(px,"u_p_date"),px.forEach(t),vk=l(xr,"."),xr.forEach(t),kk=c(no),is=a(no,"P",{});var Ve=n(is);_l=a(Ve,"STRONG",{});var hx=n(_l);uk=l(hx,"p(ctx, dirty)"),hx.forEach(t),yk=l(Ve," contains instructions to update the elements based on what has changed in the state ("),an=a(Ve,"CODE",{class:!0});var dx=n(an);fk=l(dx,"dirty"),dx.forEach(t),mk=l(Ve,") and the state ("),nn=a(Ve,"CODE",{class:!0});var vx=n(nn);gk=l(vx,"ctx"),vx.forEach(t),xk=l(Ve,") of the component."),Ve.forEach(t),no.forEach(t),Pi=c(p),M=a(p,"SECTION",{});var Q=n(M);wl=a(Q,"H3",{});var kx=n(wl);le=a(kx,"A",{href:!0,id:!0});var ux=n(le);Ek=l(ux,"instance variable"),ux.forEach(t),kx.forEach(t),_k=c(Q),U=a(Q,"P",{});var vs=n(U);wk=l(vs,"The compiler realises that the variable "),on=a(vs,"CODE",{class:!0});var yx=n(on);bk=l(yx,"name"),yx.forEach(t),Sk=l(vs," cannot be shared across different instances of the "),ln=a(vs,"CODE",{class:!0});var fx=n(ln);Lk=l(fx,"App"),fx.forEach(t),Tk=l(vs," component. That's why it moves the declaration of the variable "),rn=a(vs,"CODE",{class:!0});var mx=n(rn);Ck=l(mx,"name"),mx.forEach(t),Hk=l(vs," into a function called "),cn=a(vs,"CODE",{class:!0});var gx=n(cn);Ik=l(gx,"instance"),gx.forEach(t),Ok=l(vs,"."),vs.forEach(t),Dk=c(Q),Es=a(Q,"P",{});var oo=n(Es);Pk=l(oo,"In the previous example, no matter how many instances of the "),pn=a(oo,"CODE",{class:!0});var xx=n(pn);Mk=l(xx,"App"),xx.forEach(t),Ak=l(oo," component, the value of the variable "),hn=a(oo,"CODE",{class:!0});var Ex=n(hn);Nk=l(Ex,"name"),Ex.forEach(t),$k=l(oo," is the same and unchanged across the instances:"),oo.forEach(t),jk=c(Q),dn=a(Q,"DIV",{class:!0});var e3=n(dn);e3.forEach(t),Rk=c(Q),Z=a(Q,"P",{});var Bs=n(Z);Vk=l(Bs,"But, in this example, the variable "),vn=a(Bs,"CODE",{class:!0});var _x=n(vn);Bk=l(_x,"name"),_x.forEach(t),Wk=l(Bs," can be changed within 1 instance of the component, so the declaration of the variable "),kn=a(Bs,"CODE",{class:!0});var wx=n(kn);Uk=l(wx,"name"),wx.forEach(t),Jk=l(Bs," is now moved into the "),un=a(Bs,"CODE",{class:!0});var bx=n(un);Gk=l(bx,"instance"),bx.forEach(t),qk=l(Bs," function:"),Bs.forEach(t),zk=c(Q),yn=a(Q,"DIV",{class:!0});var a3=n(yn);a3.forEach(t),Q.forEach(t),Mi=c(p),b=a(p,"SECTION",{});var D=n(b);bl=a(D,"H3",{});var Sx=n(bl);ie=a(Sx,"A",{href:!0,id:!0});var Lx=n(ie);Yk=l(Lx,"instance($$self, $$props, $$invalidate)"),Lx.forEach(t),Sx.forEach(t),Kk=c(D),_s=a(D,"P",{});var lo=n(_s);Qk=l(lo,"The "),fn=a(lo,"CODE",{class:!0});var Tx=n(fn);Fk=l(Tx,"instance"),Tx.forEach(t),Zk=l(lo," function returns a list of "),Sl=a(lo,"EM",{});var Cx=n(Sl);Xk=l(Cx,"instance"),Cx.forEach(t),su=l(lo," variables, which are variables that are:"),lo.forEach(t),tu=c(D),re=a(D,"UL",{});var Er=n(re);Ll=a(Er,"LI",{});var Hx=n(Ll);eu=l(Hx,"referenced in the template"),Hx.forEach(t),au=c(Er),Tl=a(Er,"LI",{});var Ix=n(Tl);nu=l(Ix,"mutated or reassigned, (can be changed within 1 instance of the component)"),Ix.forEach(t),Er.forEach(t),ou=c(D),ce=a(D,"P",{});var _r=n(ce);lu=l(_r,"In Svelte, we call this list of instance variables, "),Cl=a(_r,"STRONG",{});var Ox=n(Cl);iu=l(Ox,"ctx"),Ox.forEach(t),ru=l(_r,"."),_r.forEach(t),cu=c(D),X=a(D,"P",{});var Ws=n(X);pu=l(Ws,"In the "),mn=a(Ws,"CODE",{class:!0});var Dx=n(mn);hu=l(Dx,"init"),Dx.forEach(t),du=l(Ws," function, Svelte calls the "),gn=a(Ws,"CODE",{class:!0});var Px=n(gn);vu=l(Px,"instance"),Px.forEach(t),ku=l(Ws," function to create "),Hl=a(Ws,"STRONG",{});var Mx=n(Hl);uu=l(Mx,"ctx"),Mx.forEach(t),yu=l(Ws,", and uses it to create the fragment for the component:"),Ws.forEach(t),fu=c(D),xn=a(D,"DIV",{class:!0});var n3=n(xn);n3.forEach(t),mu=c(D),ss=a(D,"P",{});var Us=n(ss);gu=l(Us,"Now, instead of accessing the variable "),En=a(Us,"CODE",{class:!0});var Ax=n(En);xu=l(Ax,"name"),Ax.forEach(t),Eu=l(Us," outside of the component, we refer to the variable "),_n=a(Us,"CODE",{class:!0});var Nx=n(_n);_u=l(Nx,"name"),Nx.forEach(t),wu=l(Us," passed via the "),Il=a(Us,"STRONG",{});var $x=n(Il);bu=l($x,"ctx"),$x.forEach(t),Su=l(Us,":"),Us.forEach(t),Lu=c(D),wn=a(D,"DIV",{class:!0});var o3=n(wn);o3.forEach(t),Tu=c(D),bn=a(D,"P",{});var wm=n(bn);Cu=l(wm,"The reason that ctx is an array instead of a map or an object is because of an optimisation related to bitmask, you can see "),pe=a(wm,"A",{href:!0,rel:!0});var jx=n(pe);Hu=l(jx,"the discussion about it here"),jx.forEach(t),wm.forEach(t),D.forEach(t),Ai=c(p),C=a(p,"SECTION",{});var A=n(C);Ol=a(A,"H3",{});var Rx=n(Ol);he=a(Rx,"A",{href:!0,id:!0});var Vx=n(he);Iu=l(Vx,"$$invalidate"),Vx.forEach(t),Rx.forEach(t),Ou=c(A),de=a(A,"P",{});var wr=n(de);Du=l(wr,"The secret behind the system of reactivity in Svelte is the "),Sn=a(wr,"CODE",{class:!0});var Bx=n(Sn);Pu=l(Bx,"$$invalidate"),Bx.forEach(t),Mu=l(wr," function."),wr.forEach(t),Au=c(A),Dl=a(A,"P",{});var Wx=n(Dl);Nu=l(Wx,"Every variable that has been"),Wx.forEach(t),$u=c(A),ve=a(A,"UL",{});var br=n(ve);Pl=a(br,"LI",{});var Ux=n(Pl);ju=l(Ux,"reassigned or mutated"),Ux.forEach(t),Ru=c(br),Ml=a(br,"LI",{});var Jx=n(Ml);Vu=l(Jx,"referenced in the template"),Jx.forEach(t),br.forEach(t),Bu=c(A),ke=a(A,"P",{});var Sr=n(ke);Wu=l(Sr,"will have the "),Ln=a(Sr,"CODE",{class:!0});var Gx=n(Ln);Uu=l(Gx,"$$invalidate"),Gx.forEach(t),Ju=l(Sr," function inserted right after the assignment or mutation:"),Sr.forEach(t),Gu=c(A),Tn=a(A,"DIV",{class:!0});var l3=n(Tn);l3.forEach(t),qu=c(A),ue=a(A,"P",{});var Lr=n(ue);zu=l(Lr,"The "),Cn=a(Lr,"CODE",{class:!0});var qx=n(Cn);Yu=l(qx,"$$invalidate"),qx.forEach(t),Ku=l(Lr," function marks the variable dirty and schedules an update for the component:"),Lr.forEach(t),Qu=c(A),Hn=a(A,"DIV",{class:!0});var i3=n(Hn);i3.forEach(t),A.forEach(t),Ni=c(p),g=a(p,"SECTION",{});var S=n(g);Al=a(S,"H3",{});var zx=n(Al);ye=a(zx,"A",{href:!0,id:!0});var Yx=n(ye);Fu=l(Yx,"Adding event listeners"),Yx.forEach(t),zx.forEach(t),Zu=c(S),Nl=a(S,"P",{});var Kx=n(Nl);Xu=l(Kx,"Let's now add an event listener"),Kx.forEach(t),sy=c(S),In=a(S,"DIV",{class:!0});var r3=n(In);r3.forEach(t),ty=c(S),$l=a(S,"P",{});var Qx=n($l);fe=a(Qx,"A",{href:!0,rel:!0});var Fx=n(fe);ey=l(Fx,"Svelte REPL"),Fx.forEach(t),Qx.forEach(t),ay=c(S),jl=a(S,"P",{});var Zx=n(jl);ny=l(Zx,"And observe the difference:"),Zx.forEach(t),oy=c(S),On=a(S,"DIV",{class:!0});var c3=n(On);c3.forEach(t),ly=c(S),Rl=a(S,"P",{});var Xx=n(Rl);iy=l(Xx,"Some observations:"),Xx.forEach(t),ry=c(S),me=a(S,"UL",{});var Tr=n(me);Dn=a(Tr,"LI",{});var bm=n(Dn);Pn=a(bm,"CODE",{class:!0});var s2=n(Pn);cy=l(s2,"instance"),s2.forEach(t),py=l(bm," function now returns 2 variables instead of 1"),bm.forEach(t),hy=c(Tr),Ms=a(Tr,"LI",{});var yi=n(Ms);dy=l(yi,"Listen to click event during "),Vl=a(yi,"STRONG",{});var t2=n(Vl);vy=l(t2,"mount"),t2.forEach(t),ky=l(yi," and dispose it in "),Bl=a(yi,"STRONG",{});var e2=n(Bl);uy=l(e2,"destroy"),e2.forEach(t),yi.forEach(t),Tr.forEach(t),yy=c(S),ts=a(S,"P",{});var Js=n(ts);fy=l(Js,"As I've mentioned earlier, "),Mn=a(Js,"CODE",{class:!0});var a2=n(Mn);my=l(a2,"instance"),a2.forEach(t),gy=l(Js," function returns variables that are "),Wl=a(Js,"STRONG",{});var n2=n(Wl);xy=l(n2,"referenced in the template"),n2.forEach(t),Ey=l(Js," and that are "),Ul=a(Js,"STRONG",{});var o2=n(Ul);_y=l(o2,"mutated or reassigned"),o2.forEach(t),wy=l(Js,"."),Js.forEach(t),by=c(S),es=a(S,"P",{});var Gs=n(es);Sy=l(Gs,"Since we've just referenced the "),An=a(Gs,"CODE",{class:!0});var l2=n(An);Ly=l(l2,"update"),l2.forEach(t),Ty=l(Gs," function in the template, it is now returned in the "),Nn=a(Gs,"CODE",{class:!0});var i2=n(Nn);Cy=l(i2,"instance"),i2.forEach(t),Hy=l(Gs," function as part of the "),Jl=a(Gs,"STRONG",{});var r2=n(Jl);Iy=l(r2,"ctx"),r2.forEach(t),Oy=l(Gs,"."),Gs.forEach(t),Dy=c(S),Gl=a(S,"P",{});var c2=n(Gl);Py=l(c2,"Svelte tries generate as compact JavaScript output as possible, not returning an extra variable if it is not necessary."),c2.forEach(t),S.forEach(t),$i=c(p),x=a(p,"SECTION",{});var L=n(x);ql=a(L,"H3",{});var p2=n(ql);ge=a(p2,"A",{href:!0,id:!0});var h2=n(ge);My=l(h2,"listen and dispose"),h2.forEach(t),p2.forEach(t),Ay=c(L),ws=a(L,"P",{});var io=n(ws);Ny=l(io,"Whenever you add "),xe=a(io,"A",{href:!0,rel:!0});var d2=n(xe);$y=l(d2,"an event listener"),d2.forEach(t),jy=l(io," in Svelte, Svelte will inject code to add an "),Ee=a(io,"A",{href:!0,rel:!0});var v2=n(Ee);Ry=l(v2,"event listener"),v2.forEach(t),Vy=l(io," and remove it when the DOM fragment is removed from the DOM."),io.forEach(t),By=c(L),zl=a(L,"P",{});var k2=n(zl);Wy=l(k2,"Try adding more event listeners,"),k2.forEach(t),Uy=c(L),$n=a(L,"DIV",{class:!0});var p3=n($n);p3.forEach(t),Jy=c(L),Yl=a(L,"P",{});var u2=n(Yl);_e=a(u2,"A",{href:!0,rel:!0});var y2=n(_e);Gy=l(y2,"Svelte REPL"),y2.forEach(t),u2.forEach(t),qy=c(L),Kl=a(L,"P",{});var f2=n(Kl);zy=l(f2,"and observe the compiled output:"),f2.forEach(t),Yy=c(L),jn=a(L,"DIV",{class:!0});var h3=n(jn);h3.forEach(t),Ky=c(L),Ql=a(L,"P",{});var m2=n(Ql);Qy=l(m2,"Instead of declaring and creating a new variable to remove each event listener, Svelte assigns all of them to an array:"),m2.forEach(t),Fy=c(L),Rn=a(L,"DIV",{class:!0});var d3=n(Rn);d3.forEach(t),Zy=c(L),Fl=a(L,"P",{});var g2=n(Fl);Xy=l(g2,"Minification can compact the variable name, but you can't remove the brackets."),g2.forEach(t),sf=c(L),we=a(L,"P",{});var Cr=n(we);tf=l(Cr,"Again, this is another great example of where Svelte tries to generate compact JavaScript output. Svelte does not create the "),Vn=a(Cr,"CODE",{class:!0});var x2=n(Vn);ef=l(x2,"dispose"),x2.forEach(t),af=l(Cr," array when there's only 1 event listener."),Cr.forEach(t),L.forEach(t),ji=c(p),z=a(p,"SECTION",{});var qs=n(z);Zl=a(qs,"H2",{});var E2=n(Zl);be=a(E2,"A",{href:!0,id:!0});var _2=n(be);nf=l(_2,"Summary"),_2.forEach(t),E2.forEach(t),of=c(qs),Xl=a(qs,"P",{});var w2=n(Xl);lf=l(w2,"The Svelte syntax is a superset of HTML."),w2.forEach(t),rf=c(qs),si=a(qs,"P",{});var b2=n(si);cf=l(b2,"When you write a Svelte component, the Svelte compiler analyses your code and generates optimised JavaScript code output."),b2.forEach(t),pf=c(qs),ti=a(qs,"P",{});var S2=n(ti);hf=l(S2,"The output can be divided into 3 segments:"),S2.forEach(t),qs.forEach(t),Ri=c(p),As=a(p,"SECTION",{});var Hr=n(As);ei=a(Hr,"H3",{});var L2=n(ei);Se=a(L2,"A",{href:!0,id:!0});var T2=n(Se);df=l(T2,"1. create_fragment"),T2.forEach(t),L2.forEach(t),vf=c(Hr),ai=a(Hr,"UL",{});var C2=n(ai);ni=a(C2,"LI",{});var H2=n(ni);kf=l(H2,"Returns a fragment, which is an instruction manual on how to build the DOM fragment for the component"),H2.forEach(t),C2.forEach(t),Hr.forEach(t),Vi=c(p),Ns=a(p,"SECTION",{});var Ir=n(Ns);oi=a(Ir,"H3",{});var I2=n(oi);Le=a(I2,"A",{href:!0,id:!0});var O2=n(Le);uf=l(O2,"2. instance"),O2.forEach(t),I2.forEach(t),yf=c(Ir),bs=a(Ir,"UL",{});var ro=n(bs);Te=a(ro,"LI",{});var Or=n(Te);ff=l(Or,"Most of the code written in the "),Bn=a(Or,"CODE",{class:!0});var D2=n(Bn);mf=l(D2,"<script>"),D2.forEach(t),gf=l(Or," tag is in here."),Or.forEach(t),xf=c(ro),li=a(ro,"LI",{});var P2=n(li);Ef=l(P2,"Returns a list of instance variables that are referenced in the template"),P2.forEach(t),_f=c(ro),Wn=a(ro,"LI",{});var Sm=n(Wn);Un=a(Sm,"CODE",{class:!0});var M2=n(Un);wf=l(M2,"$$invalidate"),M2.forEach(t),bf=l(Sm," is inserted after every assignment and mutation of the instance variable"),Sm.forEach(t),ro.forEach(t),Ir.forEach(t),Bi=c(p),Y=a(p,"SECTION",{});var zs=n(Y);ii=a(zs,"H3",{});var A2=n(ii);Ce=a(A2,"A",{href:!0,id:!0});var N2=n(Ce);Sf=l(N2,"3. class App extends SvelteComponent"),N2.forEach(t),A2.forEach(t),Lf=c(zs),Ss=a(zs,"UL",{});var co=n(Ss);Ls=a(co,"LI",{});var po=n(Ls);Tf=l(po,"Initialise the component with "),Jn=a(po,"CODE",{class:!0});var $2=n(Jn);Cf=l($2,"create_fragment"),$2.forEach(t),Hf=l(po," and "),Gn=a(po,"CODE",{class:!0});var j2=n(Gn);If=l(j2,"instance"),j2.forEach(t),Of=l(po," function"),po.forEach(t),Df=c(co),ri=a(co,"LI",{});var R2=n(ri);Pf=l(R2,"Sets up the component internals"),R2.forEach(t),Mf=c(co),qn=a(co,"LI",{});var Lm=n(qn);Af=l(Lm,"Provides the "),He=a(Lm,"A",{href:!0,rel:!0});var V2=n(He);Nf=l(V2,"Component API"),V2.forEach(t),Lm.forEach(t),co.forEach(t),$f=c(zs),ci=a(zs,"P",{});var B2=n(ci);jf=l(B2,"Svelte strives to generate as compact JavaScript as possible, for example:"),B2.forEach(t),Rf=c(zs),as=a(zs,"UL",{});var Ys=n(as);Ie=a(Ys,"LI",{});var Dr=n(Ie);Vf=l(Dr,"Breaking text content of "),zn=a(Dr,"CODE",{class:!0});var W2=n(zn);Bf=l(W2,"h1"),W2.forEach(t),Wf=l(Dr," into separate text nodes only when part of the text can be updated"),Dr.forEach(t),Uf=c(Ys),Ts=a(Ys,"LI",{});var ho=n(Ts);Jf=l(ho,"Not defining "),Yn=a(ho,"CODE",{class:!0});var U2=n(Yn);Gf=l(U2,"create_fragment"),U2.forEach(t),qf=l(ho," or "),Kn=a(ho,"CODE",{class:!0});var J2=n(Kn);zf=l(J2,"instance"),J2.forEach(t),Yf=l(ho," function when it is not needed"),ho.forEach(t),Kf=c(Ys),Oe=a(Ys,"LI",{});var Pr=n(Oe);Qf=l(Pr,"Generate "),Qn=a(Pr,"CODE",{class:!0});var G2=n(Qn);Ff=l(G2,"dispose"),G2.forEach(t),Zf=l(Pr," as an array or a function, depending on the number of event listeners."),Pr.forEach(t),Xf=c(Ys),pi=a(Ys,"LI",{});var q2=n(pi);sm=l(q2,"..."),q2.forEach(t),Ys.forEach(t),zs.forEach(t),Wi=c(p),j=a(p,"SECTION",{});var ks=n(j);hi=a(ks,"H2",{});var z2=n(hi);De=a(z2,"A",{href:!0,id:!0});var Y2=n(De);tm=l(Y2,"Closing Note"),Y2.forEach(t),z2.forEach(t),em=c(ks),di=a(ks,"P",{});var K2=n(di);am=l(K2,"We've covered the basic structure of the Svelte's compiled output, and this is just the beginning."),K2.forEach(t),nm=c(ks),Pe=a(ks,"P",{});var Mr=n(Pe);om=l(Mr,"If you wish to know more, "),Me=a(Mr,"A",{href:!0,rel:!0});var Q2=n(Me);lm=l(Q2,"follow me on Twitter"),Q2.forEach(t),im=l(Mr,"."),Mr.forEach(t),rm=c(ks),ns=a(ks,"P",{});var Ks=n(ns);cm=l(Ks,"I'll post it on Twitter when the next part is ready, where I'll be covering "),Ae=a(Ks,"A",{href:!0,rel:!0});var F2=n(Ae);pm=l(F2,"logic blocks"),F2.forEach(t),hm=l(Ks,", "),Ne=a(Ks,"A",{href:!0,rel:!0});var Z2=n(Ne);dm=l(Z2,"slots"),Z2.forEach(t),vm=l(Ks,", "),$e=a(Ks,"A",{href:!0,rel:!0});var X2=n($e);km=l(X2,"context"),X2.forEach(t),um=l(Ks,", and many others."),Ks.forEach(t),ym=c(ks),vi=a(ks,"P",{});var sE=n(vi);je=a(sE,"STRONG",{});var Ar=n(je);fm=l(Ar,"\u27A1 \u27A1  Continue reading on "),Fn=a(Ar,"A",{href:!0});var tE=n(Fn);mm=l(tE,"Part 2"),tE.forEach(t),gm=l(Ar,"."),Ar.forEach(t),sE.forEach(t),ks.forEach(t),this.h()},h(){i(R,"href","#background"),i(R,"id","background"),i(Fs,"href","https://twitter.com/swyx"),i(Fs,"rel","nofollow"),i(Zs,"href","https://careers.shopee.sg/about/"),i(Zs,"rel","nofollow"),i(Xs,"href","https://grnh.se/32e5b3532"),i(Xs,"rel","nofollow"),i(st,"href","https://www.swyx.io/speaking/svelte-compile-lightning/"),i(st,"rel","nofollow"),i(tt,"href","https://www.youtube.com/watch?v=FNmvcswdjV8"),i(tt,"rel","nofollow"),i(et,"href","https://reactknowledgeable.org/"),i(et,"rel","nofollow"),i(at,"href","#introduction"),i(at,"id","introduction"),i(nt,"href","#creating-an-element"),i(nt,"id","creating-an-element"),i(ot,"href","#updating-an-element"),i(ot,"id","updating-an-element"),i(Je,"class","code-section"),i(lt,"href","#removing-an-element"),i(lt,"id","removing-an-element"),i(Ge,"class","code-section"),i(it,"href","#adding-style-to-an-element"),i(it,"id","adding-style-to-an-element"),i(qe,"class","code-section"),i(rt,"href","#listen-for-click-events-on-an-element"),i(rt,"id","listen-for-click-events-on-an-element"),i(ze,"class","code-section"),i(ct,"href","#svelte-syntax"),i(ct,"id","svelte-syntax"),i(ht,"href","https://svelte.dev/tutorial/basics"),i(ht,"rel","nofollow"),i(Ye,"class","code-section"),i(dt,"href","https://svelte.dev/repl/99aeea705b1e48fe8610b3ccee948280"),i(dt,"rel","nofollow"),i(Ke,"class","inline"),i(Qe,"class","code-section"),i(kt,"href","https://svelte.dev/repl/cf54441399864c0f9b0cb25710a5fe9b"),i(kt,"rel","nofollow"),i(Fe,"class","code-section"),i(ut,"href","https://svelte.dev/repl/c149ca960b0444948dc0c00a9175bcb3"),i(ut,"rel","nofollow"),i(Ze,"class","inline"),i(Xe,"class","code-section"),i(ft,"href","https://svelte.dev/repl/1da1dcaf51814ed09d2341ea7915f0a1"),i(ft,"rel","nofollow"),i(mt,"href","https://www.w3schools.com/js/js_assignment.asp"),i(mt,"rel","nofollow"),i(ta,"class","code-section"),i(gt,"href","https://svelte.dev/repl/7bff4b7746df4007a51155d2006ce724"),i(gt,"rel","nofollow"),i(xt,"href","#compile-svelte-in-your-head"),i(xt,"id","compile-svelte-in-your-head"),i(ea,"class","code-section"),i(Et,"href","https://svelte.dev/repl/99aeea705b1e48fe8610b3ccee948280?version=3.19.1"),i(Et,"rel","nofollow"),i(aa,"class","code-section"),i(na,"class","inline"),i(oa,"class","inline"),i(wt,"href","#create-fragment"),i(wt,"id","create-fragment"),i(la,"class","inline"),i(ia,"class","inline"),i(Lt,"href","#c"),i(Lt,"id","c"),i(ra,"class","inline"),i(ca,"class","code-section"),i(Ht,"href","#m-target-anchor"),i(Ht,"id","m-target-anchor"),i(pa,"class","inline"),i(ha,"class","inline"),i(da,"class","code-section"),i(Ot,"href","#d-detaching"),i(Ot,"id","d-detaching"),i(va,"class","inline"),i(ka,"class","code-section"),i(At,"href","https://alistapart.com/article/javascript-minification-part-ii/#section3"),i(At,"rel","nofollow"),i(Nt,"href","#export-default-class-app-extends-sveltecomponent"),i(Nt,"id","export-default-class-app-extends-sveltecomponent"),i(jt,"href","https://svelte.dev/docs#Client-side_component_API"),i(jt,"rel","nofollow"),i(ua,"class","inline"),i(ya,"class","inline"),i(fa,"class","code-section"),i(Bt,"href","https://svelte.dev/repl/1f29ce52adf446fc9116bb957b7200ec?version=3.19.1"),i(Bt,"rel","nofollow"),i(ma,"class","code-section"),i(ga,"class","inline"),i(xa,"class","inline"),i(Ea,"class","inline"),i(_a,"class","inline"),i(wa,"class","inline"),i(ba,"class","inline"),i(Sa,"class","inline"),i(La,"class","inline"),i(qt,"href","#adding-data"),i(qt,"id","adding-data"),i(Ta,"class","code-section"),i(zt,"href","https://svelte.dev/repl/c149ca960b0444948dc0c00a9175bcb3?version=3.19.1"),i(zt,"rel","nofollow"),i(Ca,"class","code-section"),i(Ha,"class","inline"),i(Oa,"class","inline"),i(Qt,"href","#updating-data"),i(Qt,"id","updating-data"),i(Da,"class","inline"),i(Pa,"class","code-section"),i(Zt,"href","https://svelte.dev/repl/3841485f4d224774ba42617e4e964968?version=3.19.1"),i(Zt,"rel","nofollow"),i(Ma,"class","code-section"),i(Aa,"class","inline"),i(Na,"class","inline"),i($a,"class","inline"),i(ja,"class","inline"),i(Ra,"class","inline"),i(Va,"class","inline"),i(Ba,"class","inline"),i(Wa,"class","inline"),i(Ua,"class","inline"),i(Ja,"class","inline"),i(Ga,"class","inline"),i(qa,"class","inline"),i(za,"class","inline"),i(Ka,"class","inline"),i(Qa,"class","inline"),i(Fa,"class","inline"),i(Za,"class","inline"),i(Xa,"class","inline"),i(sn,"class","inline"),i(tn,"class","inline"),i(en,"class","inline"),i(ne,"href","#p-ctx-dirty"),i(ne,"id","p-ctx-dirty"),i(an,"class","inline"),i(nn,"class","inline"),i(le,"href","#instance-variable"),i(le,"id","instance-variable"),i(on,"class","inline"),i(ln,"class","inline"),i(rn,"class","inline"),i(cn,"class","inline"),i(pn,"class","inline"),i(hn,"class","inline"),i(dn,"class","code-section"),i(vn,"class","inline"),i(kn,"class","inline"),i(un,"class","inline"),i(yn,"class","code-section"),i(ie,"href","#instance-self-props-invalidate"),i(ie,"id","instance-self-props-invalidate"),i(fn,"class","inline"),i(mn,"class","inline"),i(gn,"class","inline"),i(xn,"class","code-section"),i(En,"class","inline"),i(_n,"class","inline"),i(wn,"class","code-section"),i(pe,"href","https://github.com/sveltejs/svelte/issues/1922"),i(pe,"rel","nofollow"),i(he,"href","#invalidate"),i(he,"id","invalidate"),i(Sn,"class","inline"),i(Ln,"class","inline"),i(Tn,"class","code-section"),i(Cn,"class","inline"),i(Hn,"class","code-section"),i(ye,"href","#adding-event-listeners"),i(ye,"id","adding-event-listeners"),i(In,"class","code-section"),i(fe,"href","https://svelte.dev/repl/5b12ff52c2874f4dbb6405d9133b34da?version=3.19.1"),i(fe,"rel","nofollow"),i(On,"class","code-section"),i(Pn,"class","inline"),i(Mn,"class","inline"),i(An,"class","inline"),i(Nn,"class","inline"),i(ge,"href","#listen-and-dispose"),i(ge,"id","listen-and-dispose"),i(xe,"href","https://svelte.dev/tutorial/dom-events"),i(xe,"rel","nofollow"),i(Ee,"href","https://developer.mozilla.org/en-US/docs/Web/API/EventListener"),i(Ee,"rel","nofollow"),i($n,"class","code-section"),i(_e,"href","https://svelte.dev/repl/efde6f2aaf624e708767f1bd3e94e479?version=3.19.1"),i(_e,"rel","nofollow"),i(jn,"class","code-section"),i(Rn,"class","code-section"),i(Vn,"class","inline"),i(be,"href","#summary"),i(be,"id","summary"),i(Se,"href","#1-create-fragment"),i(Se,"id","1-create-fragment"),i(Le,"href","#2-instance"),i(Le,"id","2-instance"),i(Bn,"class","inline"),i(Un,"class","inline"),i(Ce,"href","#3-class-app-extends-sveltecomponent"),i(Ce,"id","3-class-app-extends-sveltecomponent"),i(Jn,"class","inline"),i(Gn,"class","inline"),i(He,"href","https://svelte.dev/docs#Client-side_component_API"),i(He,"rel","nofollow"),i(zn,"class","inline"),i(Yn,"class","inline"),i(Kn,"class","inline"),i(Qn,"class","inline"),i(De,"href","#closing-note"),i(De,"id","closing-note"),i(Me,"href","https://twitter.com/lihautan"),i(Me,"rel","nofollow"),i(Ae,"href","https://svelte.dev/tutorial/if-blocks"),i(Ae,"rel","nofollow"),i(Ne,"href","https://svelte.dev/tutorial/slots"),i(Ne,"rel","nofollow"),i($e,"href","https://svelte.dev/tutorial/context-api"),i($e,"rel","nofollow"),i(Fn,"href","/compile-svelte-in-your-head-part-2/")},m(p,h){d(p,f,h),s(f,J),s(J,R),s(R,Qs),s(f,T),s(f,I),s(I,We),s(I,Fs),s(Fs,Nr),s(I,$r),s(I,Zs),s(Zs,jr),s(I,Rr),s(I,Xs),s(Xs,Vr),s(I,Br),s(f,Wr),s(f,F),s(F,Ur),s(F,st),s(st,Jr),s(F,Gr),s(F,tt),s(tt,qr),s(F,zr),s(F,et),s(et,Yr),s(F,Kr),s(f,Qr),s(f,vo),s(vo,Fr),d(p,fi,h),d(p,Cs,h),s(Cs,ko),s(ko,at),s(at,Zr),s(Cs,Xr),s(Cs,uo),s(uo,sc),d(p,mi,h),d(p,Ue,h),s(Ue,yo),s(yo,nt),s(nt,tc),d(p,gi,h),d(p,Hs,h),s(Hs,fo),s(fo,ot),s(ot,ec),s(Hs,ac),s(Hs,Je),Je.innerHTML=oE,d(p,xi,h),d(p,Is,h),s(Is,mo),s(mo,lt),s(lt,nc),s(Is,oc),s(Is,Ge),Ge.innerHTML=lE,d(p,Ei,h),d(p,Os,h),s(Os,go),s(go,it),s(it,lc),s(Os,ic),s(Os,qe),qe.innerHTML=iE,d(p,_i,h),d(p,G,h),s(G,xo),s(xo,rt),s(rt,rc),s(G,cc),s(G,ze),ze.innerHTML=rE,s(G,pc),s(G,Eo),s(Eo,hc),s(G,dc),s(G,_o),s(_o,vc),d(p,wi,h),d(p,v,h),s(v,wo),s(wo,ct),s(ct,kc),s(v,uc),s(v,bo),s(bo,yc),s(v,fc),s(v,So),s(So,pt),s(pt,mc),s(pt,ht),s(ht,gc),s(pt,xc),s(v,Ec),s(v,Lo),s(Lo,_c),s(v,wc),s(v,Ye),Ye.innerHTML=cE,s(v,bc),s(v,To),s(To,dt),s(dt,Sc),s(v,Lc),s(v,vt),s(vt,Tc),s(vt,Ke),s(Ke,Cc),s(vt,Hc),s(v,Ic),s(v,Qe),Qe.innerHTML=pE,s(v,Oc),s(v,Co),s(Co,kt),s(kt,Dc),s(v,Pc),s(v,Ho),s(Ho,Mc),s(v,Ac),s(v,Io),s(Io,Nc),s(v,$c),s(v,Fe),Fe.innerHTML=hE,s(v,jc),s(v,Oo),s(Oo,ut),s(ut,Rc),s(v,Vc),s(v,Do),s(Do,Bc),s(v,Wc),s(v,yt),s(yt,Uc),s(yt,Ze),s(Ze,Jc),s(yt,Gc),s(v,qc),s(v,Xe),Xe.innerHTML=dE,s(v,zc),s(v,Po),s(Po,ft),s(ft,Yc),s(v,Kc),s(v,sa),s(sa,Qc),s(sa,mt),s(mt,Fc),s(v,Zc),s(v,ta),ta.innerHTML=vE,s(v,Xc),s(v,Mo),s(Mo,gt),s(gt,sp),s(v,tp),s(v,Ao),s(Ao,ep),d(p,bi,h),d(p,_,h),s(_,No),s(No,xt),s(xt,ap),s(_,np),s(_,$o),s($o,op),s(_,lp),s(_,jo),s(jo,ip),s(_,rp),s(_,Ro),s(Ro,cp),s(_,pp),s(_,ea),ea.innerHTML=kE,s(_,hp),s(_,Vo),s(Vo,Et),s(Et,dp),s(_,vp),s(_,Bo),s(Bo,kp),s(_,up),s(_,aa),aa.innerHTML=uE,s(_,yp),s(_,Wo),s(Wo,fp),s(_,mp),s(_,_t),s(_t,Uo),s(Uo,na),s(na,gp),s(_t,xp),s(_t,Jo),s(Jo,oa),s(oa,Ep),d(p,Si,h),d(p,q,h),s(q,Go),s(Go,wt),s(wt,_p),s(q,wp),s(q,qo),s(qo,bp),s(q,Sp),s(q,bt),s(bt,Lp),s(bt,la),s(la,Tp),s(bt,Cp),s(q,Hp),s(q,St),s(St,Ip),s(St,ia),s(ia,Op),s(St,Dp),d(p,Li,h),d(p,N,h),s(N,zo),s(zo,Lt),s(Lt,Pp),s(N,Mp),s(N,Tt),s(Tt,Ap),s(Tt,Yo),s(Yo,Np),s(Tt,$p),s(N,jp),s(N,Ko),s(Ko,Rp),s(N,Vp),s(N,Ct),s(Ct,Bp),s(Ct,ra),s(ra,Wp),s(Ct,Up),s(N,Jp),s(N,ca),ca.innerHTML=yE,d(p,Ti,h),d(p,$,h),s($,Qo),s(Qo,Ht),s(Ht,Gp),s($,qp),s($,It),s(It,zp),s(It,Fo),s(Fo,Yp),s(It,Kp),s($,Qp),s($,Zo),s(Zo,Fp),s($,Zp),s($,us),s(us,Xp),s(us,pa),s(pa,sh),s(us,th),s(us,ha),s(ha,eh),s(us,ah),s($,nh),s($,da),da.innerHTML=fE,d(p,Ci,h),d(p,P,h),s(P,Xo),s(Xo,Ot),s(Ot,oh),s(P,lh),s(P,Dt),s(Dt,ih),s(Dt,sl),s(sl,rh),s(Dt,ch),s(P,ph),s(P,tl),s(tl,hh),s(P,dh),s(P,Pt),s(Pt,vh),s(Pt,va),s(va,kh),s(Pt,uh),s(P,yh),s(P,ka),ka.innerHTML=mE,s(P,fh),s(P,el),s(el,Mt),s(Mt,mh),s(Mt,At),s(At,gh),s(Mt,xh),d(p,Hi,h),d(p,y,h),s(y,al),s(al,Nt),s(Nt,Eh),s(y,_h),s(y,$t),s($t,wh),s($t,jt),s(jt,bh),s($t,Sh),s(y,Lh),s(y,Rt),s(Rt,Th),s(Rt,ua),s(ua,Ch),s(Rt,Hh),s(y,Ih),s(y,Vt),s(Vt,Oh),s(Vt,ya),s(ya,Dh),s(Vt,Ph),s(y,Mh),s(y,fa),fa.innerHTML=gE,s(y,Ah),s(y,nl),s(nl,Bt),s(Bt,Nh),s(y,$h),s(y,ma),ma.innerHTML=xE,s(y,jh),s(y,ys),s(ys,Rh),s(ys,ga),s(ga,Vh),s(ys,Bh),s(ys,xa),s(xa,Wh),s(ys,Uh),s(y,Jh),s(y,Wt),s(Wt,Gh),s(Wt,Ea),s(Ea,qh),s(Wt,zh),s(y,Yh),s(y,fs),s(fs,ms),s(ms,Kh),s(ms,_a),s(_a,Qh),s(ms,Fh),s(ms,wa),s(wa,Zh),s(ms,Xh),s(fs,sd),s(fs,ol),s(ol,td),s(fs,ed),s(fs,ll),s(ll,ad),s(y,nd),s(y,Ut),s(Ut,od),s(Ut,ba),s(ba,ld),s(Ut,id),s(y,rd),s(y,Jt),s(Jt,cd),s(Jt,Sa),s(Sa,pd),s(Jt,hd),s(y,dd),s(y,Gt),s(Gt,vd),s(Gt,La),s(La,kd),s(Gt,ud),d(p,Ii,h),d(p,w,h),s(w,il),s(il,qt),s(qt,yd),s(w,fd),s(w,rl),s(rl,md),s(w,gd),s(w,Ta),Ta.innerHTML=EE,s(w,xd),s(w,cl),s(cl,zt),s(zt,Ed),s(w,_d),s(w,pl),s(pl,wd),s(w,bd),s(w,Ca),Ca.innerHTML=_E,s(w,Sd),s(w,hl),s(hl,Ld),s(w,Td),s(w,Yt),s(Yt,Kt),s(Kt,Cd),s(Kt,Ha),s(Ha,Hd),s(Kt,Id),s(Yt,Od),s(Yt,Ia),s(Ia,Oa),s(Oa,Dd),s(Ia,Pd),s(w,Md),s(w,dl),s(dl,Ad),d(p,Oi,h),d(p,u,h),s(u,vl),s(vl,Qt),s(Qt,Nd),s(u,$d),s(u,Ft),s(Ft,jd),s(Ft,Da),s(Da,Rd),s(Ft,Vd),s(u,Bd),s(u,Pa),Pa.innerHTML=wE,s(u,Wd),s(u,kl),s(kl,Zt),s(Zt,Ud),s(u,Jd),s(u,ul),s(ul,Gd),s(u,qd),s(u,Ma),Ma.innerHTML=bE,s(u,zd),s(u,yl),s(yl,Yd),s(u,Kd),s(u,V),s(V,gs),s(gs,Qd),s(gs,Aa),s(Aa,Fd),s(gs,Zd),s(gs,Na),s(Na,Xd),s(gs,sv),s(V,tv),s(V,Ds),s(Ds,ev),s(Ds,$a),s($a,av),s(Ds,nv),s(Ds,ja),s(ja,ov),s(V,lv),s(V,Xt),s(Xt,iv),s(Xt,Ra),s(Ra,rv),s(Xt,cv),s(V,pv),s(V,xs),s(xs,hv),s(xs,Va),s(Va,dv),s(xs,vv),s(xs,Ba),s(Ba,kv),s(xs,uv),s(V,yv),s(V,os),s(os,fv),s(os,Wa),s(Wa,mv),s(os,gv),s(os,Ua),s(Ua,xv),s(os,Ev),s(os,Ja),s(Ja,_v),s(u,wv),s(u,fl),s(fl,bv),s(u,Sv),s(u,se),s(se,Lv),s(se,Ga),s(Ga,Tv),s(se,Cv),s(u,Hv),s(u,ml),s(ml,Iv),s(u,Ov),s(u,B),s(B,te),s(te,Dv),s(te,qa),s(qa,Pv),s(te,Mv),s(B,Av),s(B,ee),s(ee,Nv),s(ee,za),s(za,$v),s(ee,jv),s(B,Rv),s(B,Ya),s(Ya,Vv),s(Ya,Ka),s(Ka,Bv),s(B,Wv),s(B,Ps),s(Ps,Uv),s(Ps,Qa),s(Qa,Jv),s(Ps,Gv),s(Ps,Fa),s(Fa,qv),s(B,zv),s(B,gl),s(gl,Yv),s(u,Kv),s(u,W),s(W,Qv),s(W,Za),s(Za,Fv),s(W,Zv),s(W,Xa),s(Xa,Xv),s(W,sk),s(W,sn),s(sn,tk),s(W,ek),s(W,tn),s(tn,ak),s(W,nk),s(u,ok),s(u,ae),s(ae,lk),s(ae,en),s(en,ik),s(ae,rk),d(p,Di,h),d(p,ls,h),s(ls,xl),s(xl,ne),s(ne,ck),s(ls,pk),s(ls,oe),s(oe,hk),s(oe,El),s(El,dk),s(oe,vk),s(ls,kk),s(ls,is),s(is,_l),s(_l,uk),s(is,yk),s(is,an),s(an,fk),s(is,mk),s(is,nn),s(nn,gk),s(is,xk),d(p,Pi,h),d(p,M,h),s(M,wl),s(wl,le),s(le,Ek),s(M,_k),s(M,U),s(U,wk),s(U,on),s(on,bk),s(U,Sk),s(U,ln),s(ln,Lk),s(U,Tk),s(U,rn),s(rn,Ck),s(U,Hk),s(U,cn),s(cn,Ik),s(U,Ok),s(M,Dk),s(M,Es),s(Es,Pk),s(Es,pn),s(pn,Mk),s(Es,Ak),s(Es,hn),s(hn,Nk),s(Es,$k),s(M,jk),s(M,dn),dn.innerHTML=SE,s(M,Rk),s(M,Z),s(Z,Vk),s(Z,vn),s(vn,Bk),s(Z,Wk),s(Z,kn),s(kn,Uk),s(Z,Jk),s(Z,un),s(un,Gk),s(Z,qk),s(M,zk),s(M,yn),yn.innerHTML=LE,d(p,Mi,h),d(p,b,h),s(b,bl),s(bl,ie),s(ie,Yk),s(b,Kk),s(b,_s),s(_s,Qk),s(_s,fn),s(fn,Fk),s(_s,Zk),s(_s,Sl),s(Sl,Xk),s(_s,su),s(b,tu),s(b,re),s(re,Ll),s(Ll,eu),s(re,au),s(re,Tl),s(Tl,nu),s(b,ou),s(b,ce),s(ce,lu),s(ce,Cl),s(Cl,iu),s(ce,ru),s(b,cu),s(b,X),s(X,pu),s(X,mn),s(mn,hu),s(X,du),s(X,gn),s(gn,vu),s(X,ku),s(X,Hl),s(Hl,uu),s(X,yu),s(b,fu),s(b,xn),xn.innerHTML=TE,s(b,mu),s(b,ss),s(ss,gu),s(ss,En),s(En,xu),s(ss,Eu),s(ss,_n),s(_n,_u),s(ss,wu),s(ss,Il),s(Il,bu),s(ss,Su),s(b,Lu),s(b,wn),wn.innerHTML=CE,s(b,Tu),s(b,bn),s(bn,Cu),s(bn,pe),s(pe,Hu),d(p,Ai,h),d(p,C,h),s(C,Ol),s(Ol,he),s(he,Iu),s(C,Ou),s(C,de),s(de,Du),s(de,Sn),s(Sn,Pu),s(de,Mu),s(C,Au),s(C,Dl),s(Dl,Nu),s(C,$u),s(C,ve),s(ve,Pl),s(Pl,ju),s(ve,Ru),s(ve,Ml),s(Ml,Vu),s(C,Bu),s(C,ke),s(ke,Wu),s(ke,Ln),s(Ln,Uu),s(ke,Ju),s(C,Gu),s(C,Tn),Tn.innerHTML=HE,s(C,qu),s(C,ue),s(ue,zu),s(ue,Cn),s(Cn,Yu),s(ue,Ku),s(C,Qu),s(C,Hn),Hn.innerHTML=IE,d(p,Ni,h),d(p,g,h),s(g,Al),s(Al,ye),s(ye,Fu),s(g,Zu),s(g,Nl),s(Nl,Xu),s(g,sy),s(g,In),In.innerHTML=OE,s(g,ty),s(g,$l),s($l,fe),s(fe,ey),s(g,ay),s(g,jl),s(jl,ny),s(g,oy),s(g,On),On.innerHTML=DE,s(g,ly),s(g,Rl),s(Rl,iy),s(g,ry),s(g,me),s(me,Dn),s(Dn,Pn),s(Pn,cy),s(Dn,py),s(me,hy),s(me,Ms),s(Ms,dy),s(Ms,Vl),s(Vl,vy),s(Ms,ky),s(Ms,Bl),s(Bl,uy),s(g,yy),s(g,ts),s(ts,fy),s(ts,Mn),s(Mn,my),s(ts,gy),s(ts,Wl),s(Wl,xy),s(ts,Ey),s(ts,Ul),s(Ul,_y),s(ts,wy),s(g,by),s(g,es),s(es,Sy),s(es,An),s(An,Ly),s(es,Ty),s(es,Nn),s(Nn,Cy),s(es,Hy),s(es,Jl),s(Jl,Iy),s(es,Oy),s(g,Dy),s(g,Gl),s(Gl,Py),d(p,$i,h),d(p,x,h),s(x,ql),s(ql,ge),s(ge,My),s(x,Ay),s(x,ws),s(ws,Ny),s(ws,xe),s(xe,$y),s(ws,jy),s(ws,Ee),s(Ee,Ry),s(ws,Vy),s(x,By),s(x,zl),s(zl,Wy),s(x,Uy),s(x,$n),$n.innerHTML=PE,s(x,Jy),s(x,Yl),s(Yl,_e),s(_e,Gy),s(x,qy),s(x,Kl),s(Kl,zy),s(x,Yy),s(x,jn),jn.innerHTML=ME,s(x,Ky),s(x,Ql),s(Ql,Qy),s(x,Fy),s(x,Rn),Rn.innerHTML=AE,s(x,Zy),s(x,Fl),s(Fl,Xy),s(x,sf),s(x,we),s(we,tf),s(we,Vn),s(Vn,ef),s(we,af),d(p,ji,h),d(p,z,h),s(z,Zl),s(Zl,be),s(be,nf),s(z,of),s(z,Xl),s(Xl,lf),s(z,rf),s(z,si),s(si,cf),s(z,pf),s(z,ti),s(ti,hf),d(p,Ri,h),d(p,As,h),s(As,ei),s(ei,Se),s(Se,df),s(As,vf),s(As,ai),s(ai,ni),s(ni,kf),d(p,Vi,h),d(p,Ns,h),s(Ns,oi),s(oi,Le),s(Le,uf),s(Ns,yf),s(Ns,bs),s(bs,Te),s(Te,ff),s(Te,Bn),s(Bn,mf),s(Te,gf),s(bs,xf),s(bs,li),s(li,Ef),s(bs,_f),s(bs,Wn),s(Wn,Un),s(Un,wf),s(Wn,bf),d(p,Bi,h),d(p,Y,h),s(Y,ii),s(ii,Ce),s(Ce,Sf),s(Y,Lf),s(Y,Ss),s(Ss,Ls),s(Ls,Tf),s(Ls,Jn),s(Jn,Cf),s(Ls,Hf),s(Ls,Gn),s(Gn,If),s(Ls,Of),s(Ss,Df),s(Ss,ri),s(ri,Pf),s(Ss,Mf),s(Ss,qn),s(qn,Af),s(qn,He),s(He,Nf),s(Y,$f),s(Y,ci),s(ci,jf),s(Y,Rf),s(Y,as),s(as,Ie),s(Ie,Vf),s(Ie,zn),s(zn,Bf),s(Ie,Wf),s(as,Uf),s(as,Ts),s(Ts,Jf),s(Ts,Yn),s(Yn,Gf),s(Ts,qf),s(Ts,Kn),s(Kn,zf),s(Ts,Yf),s(as,Kf),s(as,Oe),s(Oe,Qf),s(Oe,Qn),s(Qn,Ff),s(Oe,Zf),s(as,Xf),s(as,pi),s(pi,sm),d(p,Wi,h),d(p,j,h),s(j,hi),s(hi,De),s(De,tm),s(j,em),s(j,di),s(di,am),s(j,nm),s(j,Pe),s(Pe,om),s(Pe,Me),s(Me,lm),s(Pe,im),s(j,rm),s(j,ns),s(ns,cm),s(ns,Ae),s(Ae,pm),s(ns,hm),s(ns,Ne),s(Ne,dm),s(ns,vm),s(ns,$e),s($e,km),s(ns,um),s(j,ym),s(j,vi),s(vi,je),s(je,fm),s(je,Fn),s(Fn,mm),s(je,gm)},p:b3,d(p){p&&t(f),p&&t(fi),p&&t(Cs),p&&t(mi),p&&t(Ue),p&&t(gi),p&&t(Hs),p&&t(xi),p&&t(Is),p&&t(Ei),p&&t(Os),p&&t(_i),p&&t(G),p&&t(wi),p&&t(v),p&&t(bi),p&&t(_),p&&t(Si),p&&t(q),p&&t(Li),p&&t(N),p&&t(Ti),p&&t($),p&&t(Ci),p&&t(P),p&&t(Hi),p&&t(y),p&&t(Ii),p&&t(w),p&&t(Oi),p&&t(u),p&&t(Di),p&&t(ls),p&&t(Pi),p&&t(M),p&&t(Mi),p&&t(b),p&&t(Ai),p&&t(C),p&&t(Ni),p&&t(g),p&&t($i),p&&t(x),p&&t(ji),p&&t(z),p&&t(Ri),p&&t(As),p&&t(Vi),p&&t(Ns),p&&t(Bi),p&&t(Y),p&&t(Wi),p&&t(j)}}}function C3(Be){let f,J;const R=[Be[0],nE];let Qs={$$slots:{default:[T3]},$$scope:{ctx:Be}};for(let T=0;T<R.length;T+=1)Qs=Tm(Qs,R[T]);return f=new S3({props:Qs}),{c(){y3(f.$$.fragment)},l(T){f3(f.$$.fragment,T)},m(T,I){m3(f,T,I),J=!0},p(T,[I]){const We=I&1?g3(R,[I&1&&eE(T[0]),I&0&&eE(nE)]):{};I&2&&(We.$$scope={dirty:I,ctx:T}),f.$set(We)},i(T){J||(x3(f.$$.fragment,T),J=!0)},o(T){E3(f.$$.fragment,T),J=!1},d(T){_3(f,T)}}}const nE={title:"Compile Svelte in your head (Part 1)",date:"2020-03-04T08:00:00Z",tags:["Svelte","JavaScript"],series:"Compile Svelte in your head",label:"blog",description:"BackgroundA while ago, @swyx came back to Singapore and visited us in Shopee Singapore (We're hiring!).He gave an amazing sharing on Compile Svelte in Your Head (video) in the ReactKnowledgeable Originals...",tableOfContents:[{link:"background",title:"Background"},{link:"introduction",title:"Introduction",nested:[{link:"creating-an-element",title:"Creating an element"},{link:"updating-an-element",title:"Updating an element"},{link:"removing-an-element",title:"Removing an element"},{link:"adding-style-to-an-element",title:"Adding style to an element"},{link:"listen-for-click-events-on-an-element",title:"Listen for click events on an element"}]},{link:"svelte-syntax",title:"Svelte syntax"},{link:"compile-svelte-in-your-head",title:"Compile Svelte in your Head",nested:[{link:"create-fragment",title:"create_fragment",nested:[{link:"c",title:"- c()"},{link:"m-target-anchor",title:"- m(target, anchor)"},{link:"d-detaching",title:"- d(detaching)"}]},{link:"export-default-class-app-extends-sveltecomponent",title:"export default class App extends SvelteComponent"},{link:"adding-data",title:"Adding data"},{link:"updating-data",title:"Updating data",nested:[{link:"p-ctx-dirty",title:"- p(ctx, dirty)"}]},{link:"instance-variable",title:"instance variable"},{link:"instance-self-props-invalidate",title:"instance($self, $props, $invalidate)"},{link:"invalidate",title:"$invalidate"},{link:"adding-event-listeners",title:"Adding event listeners"},{link:"listen-and-dispose",title:"listen and dispose"}]},{link:"summary",title:"Summary",nested:[{link:"1-create-fragment",title:"1. create_fragment"},{link:"2-instance",title:"2. instance"},{link:"3-class-app-extends-sveltecomponent",title:"3. class App extends SvelteComponent"}]},{link:"closing-note",title:"Closing Note"}]};function H3(Be,f,J){return w3("blog",{image:L3}),Be.$$set=R=>{J(0,f=Tm(Tm({},f),aE(R)))},f=aE(f),[f]}class A3 extends v3{constructor(f){super();k3(this,f,H3,C3,u3,{})}}export{A3 as default,nE as metadata};
