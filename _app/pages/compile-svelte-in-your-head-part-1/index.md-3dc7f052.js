import{S as T3,i as L3,s as H3,C as Pm,w as pE,x as dE,y as hE,z as C3,A as iE,q as vE,o as kE,B as uE,r as I3,R as rE,k as r,e,t as o,m as c,c as a,a as n,h as l,d as t,b as i,g as h,F as s,O as O3}from"../../chunks/vendor-569a3c5c.js";import{B as D3}from"../../chunks/BlogLayout-17b76cb2.js";import{T as P3}from"../../chunks/TableOfContent-dbc18cb8.js";import"../../chunks/stores-ee936cd4.js";import"../../chunks/WebMentions-968cc380.js";/* empty css                                */var M3="/_app/assets/hero-twitter-5d88ede6.jpg";function A3(Ue){let E,K,I,ys,_,F,Je,Q,Vr,Xs,Br,Wr,st,Ur,Jr,tt,Gr,qr,zr,Z,Yr,et,Kr,Fr,at,Qr,Zr,nt,Xr,sc,tc,uo,ec,gi,Is,yo,ot,ac,nc,fo,oc,xi,Os,mo,lt,lc,ic,Ge,yE=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="js" include="true" h1="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-comment)">// create a h1 element</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='module h1&#10;const h1: HTMLHeadingElement' >h1</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Document.createElement&lt;"h1">(tagName: "h1", options?: ElementCreationOptions | undefined): HTMLHeadingElement (+2 overloads)' >createElement</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;h1&apos;</span><span style="color: var(--shiki-color-text)">);</span></div><div class='line'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='module h1&#10;const h1: HTMLHeadingElement' >h1</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) Node.textContent: string | null' >textContent</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;Hello World&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-token-comment)">// ...and add it to the body</span></div><div class='line'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) Document.body: HTMLElement' >body</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Node.appendChild&lt;HTMLHeadingElement>(node: HTMLHeadingElement): HTMLHeadingElement' >appendChild</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='module h1&#10;const h1: HTMLHeadingElement' >h1</data-lsp>);</span></div></code></div></pre>`,Ei,Ds,go,it,rc,cc,qe,fE=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="js" cutLines="1"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-comment)">// update the text of the h1 element</span></div><div class='line'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='module h1&#10;const h1: HTMLHeadingElement' >h1</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) Node.textContent: string | null' >textContent</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;Bye World&apos;</span><span style="color: var(--shiki-color-text)">;</span></div></code></div></pre>`,_i,Ps,xo,rt,pc,dc,ze,mE=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="js" cutLines="1"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-comment)">// finally, we remove the h1 element</span></div><div class='line'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) Document.body: HTMLElement' >body</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Node.removeChild&lt;HTMLHeadingElement>(child: HTMLHeadingElement): HTMLHeadingElement' >removeChild</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='module h1&#10;const h1: HTMLHeadingElement' >h1</data-lsp>);</span></div></code></div></pre>`,wi,Ms,Eo,ct,hc,vc,Ye,gE=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="js"><div class="language-id">ts</div><div class='code-container'><code><div class='line dim'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='module h1&#10;const h1: HTMLHeadingElement' >h1</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Document.createElement&lt;"h1">(tagName: "h1", options?: ElementCreationOptions | undefined): HTMLHeadingElement (+2 overloads)' >createElement</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;h1&apos;</span><span style="color: var(--shiki-color-text)">);</span></div><div class='line dim'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='module h1&#10;const h1: HTMLHeadingElement' >h1</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) Node.textContent: string | null' >textContent</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;Hello World&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line highlight'><span style="color: var(--shiki-token-comment)">// add class name to the h1 element</span></div><div class='line highlight'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='module h1&#10;const h1: HTMLHeadingElement' >h1</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Element.setAttribute(qualifiedName: string, value: string): void' >setAttribute</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;class&apos;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;abc&apos;</span><span style="color: var(--shiki-color-text)">);</span></div><div class='line highlight'><span style="color: var(--shiki-token-comment)">// ...and add a &lt;style&gt; tag to the head</span></div><div class='line highlight'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='module style&#10;const style: HTMLStyleElement' >style</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Document.createElement&lt;"style">(tagName: "style", options?: ElementCreationOptions | undefined): HTMLStyleElement (+2 overloads)' >createElement</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;style&apos;</span><span style="color: var(--shiki-color-text)">);</span></div><div class='line highlight'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='module style&#10;const style: HTMLStyleElement' >style</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) Node.textContent: string | null' >textContent</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;.abc &#123; color: blue; &#125;&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line highlight'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) Document.head: HTMLHeadElement' >head</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Node.appendChild&lt;HTMLStyleElement>(node: HTMLStyleElement): HTMLStyleElement' >appendChild</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='module style&#10;const style: HTMLStyleElement' >style</data-lsp>);</span></div><div class='line dim'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) Document.body: HTMLElement' >body</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Node.appendChild&lt;HTMLHeadingElement>(node: HTMLHeadingElement): HTMLHeadingElement' >appendChild</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='module h1&#10;const h1: HTMLHeadingElement' >h1</data-lsp>);</span></div></code></div></pre>`,bi,U,_o,pt,kc,uc,Ke,xE=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="js"><div class="language-id">ts</div><div class='code-container'><code><div class='line dim'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='module button&#10;const button: HTMLButtonElement' >button</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Document.createElement&lt;"button">(tagName: "button", options?: ElementCreationOptions | undefined): HTMLButtonElement (+2 overloads)' >createElement</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;button&apos;</span><span style="color: var(--shiki-color-text)">);</span></div><div class='line dim'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='module button&#10;const button: HTMLButtonElement' >button</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) Node.textContent: string | null' >textContent</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;Click Me!&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line highlight'><span style="color: var(--shiki-token-comment)">// listen to "click" events</span></div><div class='line highlight'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='module button&#10;const button: HTMLButtonElement' >button</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) HTMLButtonElement.addEventListener&lt;"click">(type: "click", listener: (this: HTMLButtonElement, ev: MouseEvent) => any, options?: boolean | AddEventListenerOptions | undefined): void (+1 overload)' >addEventListener</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;click&apos;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line highlight'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='namespace console&#10;var console: Console' >console</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)' >log</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;Hi!&apos;</span><span style="color: var(--shiki-color-text)">);</span></div><div class='line highlight'><span style="color: var(--shiki-color-text)">&#125;);</span></div><div class='line dim'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) Document.body: HTMLElement' >body</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Node.appendChild&lt;HTMLButtonElement>(node: HTMLButtonElement): HTMLButtonElement' >appendChild</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='module button&#10;const button: HTMLButtonElement' >button</data-lsp>);</span></div></code></div></pre>`,yc,wo,fc,mc,bo,gc,Si,v,So,dt,xc,Ec,To,_c,wc,Lo,ht,bc,vt,Sc,Tc,Lc,Ho,Hc,Cc,Fe,EE='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>',Ic,Co,kt,Oc,Dc,ut,Pc,Qe,Mc,Ac,Nc,Ze,_E='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"></div><div class="line">  <span class="token selector">h1</span> <span class="token punctuation">&#123;</span></div><div class="line">    <span class="token property">color</span><span class="token punctuation">:</span> rebeccapurple<span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>',$c,Io,yt,jc,Rc,Oo,Vc,Bc,Do,Wc,Uc,Xe,wE=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'World'</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello <span class="token language-javascript"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>`,Jc,Po,ft,Gc,qc,Mo,zc,Yc,mt,Kc,sa,Fc,Qc,Zc,ta,bE='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">onClickButton</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>onClickButton<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Clicked <span class="token language-javascript"><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div></code></pre>',Xc,Ao,gt,sp,tp,ea,ep,xt,ap,np,aa,SE='<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line dim">  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token keyword">function</span> <span class="token function">onClickButton</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line highlight">    count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token punctuation">&#125;</span></div><div class="line dim"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>onClickButton<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Clicked <span class="token language-javascript"><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div></code></pre>',op,No,Et,lp,ip,$o,rp,Ti,w,jo,_t,cp,pp,Ro,dp,hp,Vo,vp,kp,Bo,up,yp,na,TE='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>',fp,Wo,wt,mp,gp,Uo,xp,Ep,oa,LE=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="js" hideJsdoc="true" cutLines="2"><div class="language-id">ts</div><div class='code-container'><code><div class='line dim'><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function create_fragment(ctx: any): &#123;&#10;    c(): void;&#10;    m(target: HTMLElement, anchor: HTMLElement): void;&#10;    d(detaching: boolean): void;&#10;&#125;' >create_fragment</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) ctx: any' >ctx</data-lsp>) &#123;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='let h1: HTMLHeadingElement' >h1</data-lsp>;</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(method) c(): void' >c</data-lsp></span><span style="color: var(--shiki-color-text)">() &#123;</span></div><div class='line highlight'><span style="color: var(--shiki-color-text)">      <data-lsp lsp='let h1: HTMLHeadingElement' >h1</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(alias) element&lt;"h1">(name: "h1"): HTMLHeadingElement&#10;import element' >element</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;h1&apos;</span><span style="color: var(--shiki-color-text)">);</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='let h1: HTMLHeadingElement' >h1</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) Node.textContent: string | null' >textContent</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;Hello world&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(method) m(target: HTMLElement, anchor: HTMLElement): void' >m</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) target: HTMLElement' >target</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) anchor: HTMLElement' >anchor</data-lsp>) &#123;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(alias) insert(target: Node, node: Node, anchor?: Node | undefined): void&#10;import insert' >insert</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) target: HTMLElement' >target</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='let h1: HTMLHeadingElement' >h1</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) anchor: HTMLElement' >anchor</data-lsp>);</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(method) d(detaching: boolean): void' >d</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) detaching: boolean' >detaching</data-lsp>) &#123;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (<data-lsp lsp='(parameter) detaching: boolean' >detaching</data-lsp>) </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(alias) detach(node: Node): void&#10;import detach' >detach</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='let h1: HTMLHeadingElement' >h1</data-lsp>);</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">  &#125;;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">&#125;</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='class App' >App</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(alias) class SvelteComponent&#10;import SvelteComponent' >SvelteComponent</data-lsp></span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) options: any' >options</data-lsp>) &#123;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">super</span><span style="color: var(--shiki-color-text)">();</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(alias) init(component: any, options: any, instance: any, create_fragment: any, not_equal: any, props: any, append_styles: any, dirty?: number[] | undefined): void&#10;import init' >init</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) options: any' >options</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='function create_fragment(ctx: any): &#123;&#10;    c(): void;&#10;    m(target: HTMLElement, anchor: HTMLElement): void;&#10;    d(detaching: boolean): void;&#10;&#125;' >create_fragment</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(alias) function safe_not_equal(a: any, b: any): boolean&#10;import safe_not_equal' >safe_not_equal</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;&#125;);</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">  &#125;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">&#125;</span></div></code></div></pre>`,_p,Jo,wp,bp,bt,Go,la,Sp,Tp,qo,ia,Lp,Li,J,zo,St,Hp,Cp,Yo,Ip,Op,Tt,Dp,ra,Pp,Mp,Ap,Lt,Np,ca,$p,jp,Hi,N,Ko,Ht,Rp,Vp,Ct,Bp,Fo,Wp,Up,Jp,Qo,Gp,qp,It,zp,pa,Yp,Kp,Fp,da,HE=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts" cutLines="3"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-color-text)"><data-lsp lsp='let h1: HTMLHeadingElement' >h1</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(alias) element&lt;"h1">(name: "h1"): HTMLHeadingElement&#10;import element' >element</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;h1&apos;</span><span style="color: var(--shiki-color-text)">);</span></div><div class='line'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='let h1: HTMLHeadingElement' >h1</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) Node.textContent: string | null' >textContent</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;Hello World&apos;</span><span style="color: var(--shiki-color-text)">;</span></div></code></div></pre>`,Ci,$,Zo,Ot,Qp,Zp,Dt,Xp,Xo,sd,td,ed,sl,ad,nd,fs,od,ha,ld,id,va,rd,cd,pd,ka,CE=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="js" hideJsdoc="true" cutLines="5"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-function)"><data-lsp lsp='function insert(target: Node, node: Node, anchor?: Node | undefined): void' >insert</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='let target: HTMLElement' >target</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='let h1: HTMLHeadingElement' >h1</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='let anchor: HTMLElement' >anchor</data-lsp>);</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-comment)">// http://github.com/sveltejs/svelte/tree/master/src/runtime/internal/dom.ts</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function insert(target: Node, node: Node, anchor?: Node | undefined): void' >insert</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) target: Node' >target</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) node: Node' >node</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) anchor: Node | undefined' >anchor</data-lsp>) &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(parameter) target: Node' >target</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Node.insertBefore&lt;Node>(node: Node, child: Node | null): Node' >insertBefore</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) node: Node' >node</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) anchor: Node | undefined' >anchor</data-lsp> </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">);</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;</span></div></code></div></pre>`,Ii,P,tl,Pt,dd,hd,Mt,vd,el,kd,ud,yd,al,fd,md,At,gd,ua,xd,Ed,_d,ya,IE=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="js" hideJsdoc="true" cutLines="1"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-function)"><data-lsp lsp='function detach(node: Node): void' >detach</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='let h1: HTMLHeadingElement' >h1</data-lsp>);</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-comment)">// http://github.com/sveltejs/svelte/tree/master/src/runtime/internal/dom.ts</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function detach(node: Node): void' >detach</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) node: Node' >node</data-lsp>) &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(parameter) node: Node' >node</data-lsp></span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) Node.parentNode: ParentNode | null' >parentNode</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Node.removeChild&lt;Node>(child: Node): Node' >removeChild</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) node: Node' >node</data-lsp>);</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;</span></div></code></div></pre>`,wd,nl,Nt,bd,$t,Sd,Td,Oi,y,ol,jt,Ld,Hd,Rt,Cd,Vt,Id,Od,Dd,Bt,Pd,fa,Md,Ad,Nd,Wt,$d,ma,jd,Rd,Vd,ga,OE='<pre class="prism language-svelte"><code><div class="line"><span class="token comment">&lt;!-- empty --></span></div></code></pre>',Bd,ll,Ut,Wd,Ud,xa,DE=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">App</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">SvelteComponent</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(options) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">super</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">init</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> options</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> safe_not_equal</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;&#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Jd,ms,Gd,Ea,qd,zd,_a,Yd,Kd,Fd,Jt,Qd,wa,Zd,Xd,sh,gs,xs,th,ba,eh,ah,Sa,nh,oh,lh,il,ih,rh,rl,ch,ph,Gt,dh,Ta,hh,vh,kh,qt,uh,La,yh,fh,mh,zt,gh,Ha,xh,Eh,Di,b,cl,Yt,_h,wh,pl,bh,Sh,Ca,PE=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">	<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'World'</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello <span class="token language-javascript"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>`,Th,dl,Kt,Lh,Hh,hl,Ch,Ih,Ia,ME=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      h1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">element</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;h1&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">h1</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;Hello </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">name</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;World&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">App</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">SvelteComponent</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Oh,vl,Dh,Ph,Ft,Qt,Mh,Oa,Ah,Nh,$h,Da,Pa,jh,Rh,Vh,kl,Bh,Pi,u,ul,Zt,Wh,Uh,Xt,Jh,Ma,Gh,qh,zh,Aa,AE=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">	<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'World'</span><span class="token punctuation">;</span></div><div class="line">	<span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">		name <span class="token operator">=</span> <span class="token string">'Svelte'</span><span class="token punctuation">;</span></div><div class="line">	<span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello <span class="token language-javascript"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>`,Yh,yl,se,Kh,Fh,fl,Qh,Zh,Na,NE=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      h1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">element</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;h1&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      t0 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">text</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Hello &#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      t1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">text</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*name*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">append</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> t0);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">append</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> t1);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [dirty]) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*name*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-function)">set_data</span><span style="color: var(--shiki-color-text)">(t1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*name*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">(detaching) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (detaching) </span><span style="color: var(--shiki-token-function)">detach</span><span style="color: var(--shiki-color-text)">(h1);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;World&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Svelte&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line highlight"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [name];</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">App</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">SvelteComponent</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(options) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">super</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">init</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> options</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> instance</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> create_fragment</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> safe_not_equal</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;&#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Xh,ml,sv,tv,R,Es,ev,$a,av,nv,ja,ov,lv,iv,As,rv,Ra,cv,pv,Va,dv,hv,te,vv,Ba,kv,uv,yv,_s,fv,Wa,mv,gv,Ua,xv,Ev,_v,ls,wv,Ja,bv,Sv,Ga,Tv,Lv,qa,Hv,Cv,gl,Iv,Ov,ee,Dv,za,Pv,Mv,Av,xl,Nv,$v,V,ae,jv,Ya,Rv,Vv,Bv,ne,Wv,Ka,Uv,Jv,Gv,Fa,qv,Qa,zv,Yv,Ns,Kv,Za,Fv,Qv,Xa,Zv,Xv,El,sk,tk,B,ek,sn,ak,nk,tn,ok,lk,en,ik,rk,an,ck,pk,dk,oe,hk,nn,vk,kk,Mi,is,_l,le,uk,yk,ie,fk,wl,mk,gk,xk,rs,bl,Ek,_k,on,wk,bk,ln,Sk,Tk,Ai,M,Sl,re,Lk,Hk,W,Ck,rn,Ik,Ok,cn,Dk,Pk,pn,Mk,Ak,dn,Nk,$k,jk,ws,Rk,hn,Vk,Bk,vn,Wk,Uk,Jk,kn,$E='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- gives you --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>',Gk,X,qk,un,zk,Yk,yn,Kk,Fk,fn,Qk,Zk,Xk,mn,jE='<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span></div><div class="line dim"></div><div class="line dim"><span class="token comment">&lt;!-- could possibly be --></span></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div><div class="line highlight"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello Svelte<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div><div class="line dim"><span class="token comment">&lt;!-- depending on the inner state of the component --></span></div></code></pre>',Ni,S,Tl,ce,su,tu,bs,eu,gn,au,nu,Ll,ou,lu,iu,pe,Hl,ru,cu,Cl,pu,du,de,hu,Il,vu,ku,uu,ss,yu,xn,fu,mu,En,gu,xu,Ol,Eu,_u,wu,_n,RE=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// conceptually,</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*...*/</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// create the fragment</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.c</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// mount the fragment onto the DOM</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.m</span><span style="color: var(--shiki-color-text)">(target);</span></span></code></pre>`,bu,ts,Su,wn,Tu,Lu,bn,Hu,Cu,Dl,Iu,Ou,Du,Sn,VE='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">t1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">text</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*name*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]);</span></span></code></pre>',Pu,Tn,Mu,he,Au,$i,H,Pl,ve,Nu,$u,ke,ju,Ln,Ru,Vu,Bu,Ml,Wu,Uu,ue,Al,Ju,Gu,Nl,qu,zu,ye,Yu,Hn,Ku,Fu,Qu,Cn,BE=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Svelte&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">count</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">foo</span><span style="color: var(--shiki-color-text)">.a </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// compiled into something like</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Svelte&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/* name */</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> name);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">count</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/* count */</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> count);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">foo</span><span style="color: var(--shiki-color-text)">.a </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/* foo */</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> foo);</span></span></code></pre>`,Zu,fe,Xu,In,sy,ty,ey,On,WE=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// conceptually...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*...*/</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// to track which variable has changed</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">dirty</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Set</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (variable</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> newValue) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// update ctx</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ctx[variable] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> newValue;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// mark variable as dirty</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">dirty</span><span style="color: var(--shiki-token-function)">.add</span><span style="color: var(--shiki-color-text)">(variable);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// schedules update for the component</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">scheduleUpdate</span><span style="color: var(--shiki-color-text)">(component);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// gets called when update is scheduled</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">flushUpdate</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// update the fragment</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// clear the dirty</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">dirty</span><span style="color: var(--shiki-token-function)">.clear</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ji,m,$l,me,ay,ny,jl,oy,ly,Dn,UE=`<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line dim">	<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'world'</span><span class="token punctuation">;</span></div><div class="line dim">	<span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line dim">		name <span class="token operator">=</span> <span class="token string">'Svelte'</span><span class="token punctuation">;</span></div><div class="line dim">	<span class="token punctuation">&#125;</span></div><div class="line dim"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line highlight"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>update<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Hello <span class="token language-javascript"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>`,iy,Rl,ge,ry,cy,Vl,py,dy,Pn,JE=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      h1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">element</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;h1&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      t0 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">text</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Hello &#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      t1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">text</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*name*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">append</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> t0);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">append</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> t1);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      dispose </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;click&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*update*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [dirty]) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*name*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-function)">set_data</span><span style="color: var(--shiki-color-text)">(t1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*name*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">(detaching) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (detaching) </span><span style="color: var(--shiki-token-function)">detach</span><span style="color: var(--shiki-color-text)">(h1);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">dispose</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;world&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Svelte&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [name</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> update];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`,hy,Bl,vy,ky,xe,Mn,An,uy,yy,fy,$s,my,Wl,gy,xy,Ul,Ey,_y,es,wy,Nn,by,Sy,Jl,Ty,Ly,Gl,Hy,Cy,Iy,as,Oy,$n,Dy,Py,jn,My,Ay,ql,Ny,$y,jy,zl,Ry,Ri,g,Yl,Ee,Vy,By,Ss,Wy,_e,Uy,Jy,we,Gy,qy,zy,Kl,Yy,Ky,Rn,GE='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span></div><div class="line">	<span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>update<span class="token punctuation">&#125;</span></span></div><div class="line">	<span class="token attr-name"><span class="token namespace">on:</span>mousedown=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>update<span class="token punctuation">&#125;</span></span></div><div class="line">	<span class="token attr-name"><span class="token namespace">on:</span>touchstart=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>update<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div><div class="line">  Hello <span class="token language-javascript"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span>!</div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>',Fy,Fl,be,Qy,Zy,Ql,Xy,sf,Vn,qE=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">dispose </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;click&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*update*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">])</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;mousedown&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*update*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">])</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;touchstart&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*update*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; passive</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> &#125;)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">];</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-function)">run_all</span><span style="color: var(--shiki-color-text)">(dispose);</span></span></code></pre>`,tf,Zl,ef,af,Bn,zE=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// instead of</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">dispose1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;click&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*update*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">dispose2 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;mousedown&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*update*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">dispose2 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;touchstart&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*update*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; passive</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">dispose1</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">dispose2</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">dispose3</span><span style="color: var(--shiki-color-text)">();</span></span></code></pre>`,nf,Xl,of,lf,Se,rf,Wn,cf,pf,Vi,G,si,Te,df,hf,ti,vf,kf,ei,uf,yf,ai,ff,Bi,js,ni,Le,mf,gf,oi,li,xf,Wi,Rs,ii,He,Ef,_f,Ts,Ce,wf,Un,bf,Sf,Tf,ri,Lf,Hf,Jn,Gn,Cf,If,Ui,q,ci,Ie,Of,Df,Ls,Hs,Pf,qn,Mf,Af,zn,Nf,$f,jf,pi,Rf,Vf,Yn,Bf,Oe,Wf,Uf,di,Jf,Gf,ns,De,qf,Kn,zf,Yf,Kf,Cs,Ff,Fn,Qf,Zf,Qn,Xf,sm,tm,Pe,em,Zn,am,nm,om,hi,lm,Ji,j,vi,Me,im,rm,ki,cm,pm,Ae,dm,Ne,hm,vm,km,os,um,$e,ym,fm,je,mm,gm,Re,xm,Em,_m,ui,Ve,wm,Xn,bm,Sm,Gi;return E=new P3({props:{data:[{link:"background",title:"Background"},{link:"introduction",title:"Introduction",nested:[{link:"creating-an-element",title:"Creating an element"},{link:"updating-an-element",title:"Updating an element"},{link:"removing-an-element",title:"Removing an element"},{link:"adding-style-to-an-element",title:"Adding style to an element"},{link:"listen-for-click-events-on-an-element",title:"Listen for click events on an element"}]},{link:"svelte-syntax",title:"Svelte syntax"},{link:"compile-svelte-in-your-head",title:"Compile Svelte in your Head",nested:[{link:"create-fragment",title:"create_fragment",nested:[{link:"c",title:"- c()"},{link:"m-target-anchor",title:"- m(target, anchor)"},{link:"d-detaching",title:"- d(detaching)"}]},{link:"export-default-class-app-extends-sveltecomponent",title:"export default class App extends SvelteComponent"},{link:"adding-data",title:"Adding data"},{link:"updating-data",title:"Updating data",nested:[{link:"p-ctx-dirty",title:"- p(ctx, dirty)"}]},{link:"instance-variable",title:"instance variable"},{link:"instance-self-props-invalidate",title:"instance($$self, $$props, $$invalidate)"},{link:"invalidate",title:"$$invalidate"},{link:"adding-event-listeners",title:"Adding event listeners"},{link:"listen-and-dispose",title:"listen and dispose"}]},{link:"summary",title:"Summary",nested:[{link:"1-create-fragment",title:"1. create_fragment"},{link:"2-instance",title:"2. instance"},{link:"3-class-app-extends-sveltecomponent",title:"3. class App extends SvelteComponent"}]},{link:"closing-note",title:"Closing Note"}]}}),{c(){pE(E.$$.fragment),K=r(),I=e("section"),ys=e("h2"),_=e("a"),F=o("Background"),Je=r(),Q=e("p"),Vr=o("A while ago, "),Xs=e("a"),Br=o("@swyx"),Wr=o(" came back to Singapore and visited us in "),st=e("a"),Ur=o("Shopee Singapore"),Jr=o(" ("),tt=e("a"),Gr=o("We're hiring!"),qr=o(")."),zr=r(),Z=e("p"),Yr=o("He gave an amazing sharing on "),et=e("a"),Kr=o("Compile Svelte in Your Head"),Fr=o(" ("),at=e("a"),Qr=o("video"),Zr=o(") in the "),nt=e("a"),Xr=o("ReactKnowledgeable Originals"),sc=o("."),tc=r(),uo=e("p"),ec=o("I love his presentation and the title is so catchy, so I begged him to use the catchy title as this series of articles about the Svelte compiler. It will be about how Svelte sees your code and compiles it down to plain JavaScript."),gi=r(),Is=e("section"),yo=e("h2"),ot=e("a"),ac=o("Introduction"),nc=r(),fo=e("p"),oc=o("Lets refresh ourselves with how we write web app without any framework:"),xi=r(),Os=e("section"),mo=e("h3"),lt=e("a"),lc=o("Creating an element"),ic=r(),Ge=e("div"),Ei=r(),Ds=e("section"),go=e("h3"),it=e("a"),rc=o("Updating an element"),cc=r(),qe=e("div"),_i=r(),Ps=e("section"),xo=e("h3"),rt=e("a"),pc=o("Removing an element"),dc=r(),ze=e("div"),wi=r(),Ms=e("section"),Eo=e("h3"),ct=e("a"),hc=o("Adding style to an element"),vc=r(),Ye=e("div"),bi=r(),U=e("section"),_o=e("h3"),pt=e("a"),kc=o("Listen for click events on an element"),uc=r(),Ke=e("div"),yc=r(),wo=e("p"),fc=o("These are code that you have to write, without using any framework or library."),mc=r(),bo=e("p"),gc=o("The main idea of this article is to show how the Svelte compiler compiles the Svelte syntax into statements of codes that I've shown above."),Si=r(),v=e("section"),So=e("h2"),dt=e("a"),xc=o("Svelte syntax"),Ec=r(),To=e("p"),_c=o("Here I'm going to show you some basics of the Svelte syntax."),wc=r(),Lo=e("blockquote"),ht=e("p"),bc=o("If you wish to learn more, I highly recommend trying "),vt=e("a"),Sc=o("Svelte's interactive tutorial"),Tc=o("."),Lc=r(),Ho=e("p"),Hc=o("So here is a basic Svelte component:"),Cc=r(),Fe=e("div"),Ic=r(),Co=e("p"),kt=e("a"),Oc=o("Svelte REPL"),Dc=r(),ut=e("p"),Pc=o("To add style, you add a "),Qe=e("code"),Mc=o("<style>"),Ac=o(" tag:"),Nc=r(),Ze=e("div"),$c=r(),Io=e("p"),yt=e("a"),jc=o("Svelte REPL"),Rc=r(),Oo=e("p"),Vc=o("At this point, writing Svelte component just feels like writing HTML, that's because Svelte syntax is a super set of the HTML syntax."),Bc=r(),Do=e("p"),Wc=o("Let's look at how we add a data to our component:"),Uc=r(),Xe=e("div"),Jc=r(),Po=e("p"),ft=e("a"),Gc=o("Svelte REPL"),qc=r(),Mo=e("p"),zc=o("We put JavaScript inside the curly brackets."),Yc=r(),mt=e("p"),Kc=o("To add a click handler, we use the "),sa=e("code"),Fc=o("on:"),Qc=o(" directive"),Zc=r(),ta=e("div"),Xc=r(),Ao=e("p"),gt=e("a"),sp=o("Svelte REPL"),tp=r(),ea=e("p"),ep=o("To change the data, we use "),xt=e("a"),ap=o("assignment operators"),np=r(),aa=e("div"),op=r(),No=e("p"),Et=e("a"),lp=o("Svelte REPL"),ip=r(),$o=e("p"),rp=o("Let's move on to see how Svelte syntax is compiled into JavaScript that we've seen earlier"),Ti=r(),w=e("section"),jo=e("h2"),_t=e("a"),cp=o("Compile Svelte in your Head"),pp=r(),Ro=e("p"),dp=o("The Svelte compiler analyses the code you write and generates an optimised JavaScript output."),hp=r(),Vo=e("p"),vp=o("To study how Svelte compiles the code, lets start with the smallest example possible, and slowly build up the code. Through the process, you will see that Svelte incrementally adds to the output code based on your changes."),kp=r(),Bo=e("p"),up=o("The first example that we are going to see is:"),yp=r(),na=e("div"),fp=r(),Wo=e("p"),wt=e("a"),mp=o("Svelte REPL"),gp=r(),Uo=e("p"),xp=o("The output code:"),Ep=r(),oa=e("div"),_p=r(),Jo=e("p"),wp=o("You can break down the output code into 2 sections:"),bp=r(),bt=e("ul"),Go=e("li"),la=e("code"),Sp=o("create_fragment"),Tp=r(),qo=e("li"),ia=e("code"),Lp=o("class App extends SvelteComponent"),Li=r(),J=e("section"),zo=e("h3"),St=e("a"),Hp=o("create_fragment"),Cp=r(),Yo=e("p"),Ip=o("Svelte components are the building blocks of a Svelte application. Each Svelte component focuses on building its piece or fragment of the final DOM."),Op=r(),Tt=e("p"),Dp=o("The "),ra=e("code"),Pp=o("create_fragment"),Mp=o(" function gives the Svelte component an instruction manual on how to build the DOM fragment."),Ap=r(),Lt=e("p"),Np=o("Look at the return object of the "),ca=e("code"),$p=o("create_fragment"),jp=o(" function. It has methods, such as:"),Hi=r(),N=e("section"),Ko=e("h4"),Ht=e("a"),Rp=o("- c()"),Vp=r(),Ct=e("p"),Bp=o("Short for "),Fo=e("strong"),Wp=o("create"),Up=o("."),Jp=r(),Qo=e("p"),Gp=o("Contains instructions to create all the elements in the fragment."),qp=r(),It=e("p"),zp=o("In this example, it contains instructions to create the "),pa=e("code"),Yp=o("h1"),Kp=o(" element"),Fp=r(),da=e("div"),Ci=r(),$=e("section"),Zo=e("h4"),Ot=e("a"),Qp=o("- m(target, anchor)"),Zp=r(),Dt=e("p"),Xp=o("Short for "),Xo=e("strong"),sd=o("mount"),td=o("."),ed=r(),sl=e("p"),ad=o("Contains instructions to mount the elements into the target."),nd=r(),fs=e("p"),od=o("In this example, it contains instructions to insert the "),ha=e("code"),ld=o("h1"),id=o(" element into the "),va=e("code"),rd=o("target"),cd=o("."),pd=r(),ka=e("div"),Ii=r(),P=e("section"),tl=e("h4"),Pt=e("a"),dd=o("- d(detaching)"),hd=r(),Mt=e("p"),vd=o("Short for "),el=e("strong"),kd=o("destroy"),ud=o("."),yd=r(),al=e("p"),fd=o("Contains instructions to remove the elements from the target."),md=r(),At=e("p"),gd=o("In this example, we detach the "),ua=e("code"),xd=o("h1"),Ed=o(" element from the DOM"),_d=r(),ya=e("div"),wd=r(),nl=e("blockquote"),Nt=e("p"),bd=o("The method names are short for better minification. "),$t=e("a"),Sd=o("See what can't be minified here"),Td=o("."),Oi=r(),y=e("section"),ol=e("h3"),jt=e("a"),Ld=o("export default class App extends SvelteComponent"),Hd=r(),Rt=e("p"),Cd=o("Each component is a class, which you can import and instantiate through "),Vt=e("a"),Id=o("this API"),Od=o("."),Dd=r(),Bt=e("p"),Pd=o("And in the constructor, we initialize the component with information that made up the component such as "),fa=e("code"),Md=o("create_fragment"),Ad=o(". Svelte will only pass information that it is needed and remove them whenever it is not necessary."),Nd=r(),Wt=e("p"),$d=o("Try removing the "),ma=e("code"),jd=o("<h1>"),Rd=o(" tag and see what happens to the output:"),Vd=r(),ga=e("div"),Bd=r(),ll=e("p"),Ut=e("a"),Wd=o("Svelte REPL"),Ud=r(),xa=e("div"),Jd=r(),ms=e("p"),Gd=o("Svelte will pass in "),Ea=e("code"),qd=o("null"),zd=o(" instead of "),_a=e("code"),Yd=o("create_fragment"),Kd=o("!"),Fd=r(),Jt=e("p"),Qd=o("The "),wa=e("code"),Zd=o("init"),Xd=o(" function is where Svelte sets up most of the internals, such as:"),sh=r(),gs=e("ul"),xs=e("li"),th=o("component props, "),ba=e("code"),eh=o("ctx"),ah=o(" (will explain what "),Sa=e("code"),nh=o("ctx"),oh=o(" is later) and context"),lh=r(),il=e("li"),ih=o("component lifecycle events"),rh=r(),rl=e("li"),ch=o("component update mechanism"),ph=r(),Gt=e("p"),dh=o("and at the very end, Svelte calls the "),Ta=e("code"),hh=o("create_fragment"),vh=o(" to create and mount elements into the DOM."),kh=r(),qt=e("p"),uh=o("If you noticed, all the internal state and methods are attached to "),La=e("code"),yh=o("this.$$"),fh=o("."),mh=r(),zt=e("p"),gh=o("So if you ever access the "),Ha=e("code"),xh=o("$$"),Eh=o(" property of the component, you are tapping into the internals. You've been warned! \u{1F648}\u{1F6A8}"),Di=r(),b=e("section"),cl=e("h3"),Yt=e("a"),_h=o("Adding data"),wh=r(),pl=e("p"),bh=o("Now that we've looked at the bare minimum of a Svelte component, let's see how adding a data would change the compiled output:"),Sh=r(),Ca=e("div"),Th=r(),dl=e("p"),Kt=e("a"),Lh=o("Svelte REPL"),Hh=r(),hl=e("p"),Ch=o("Notice the change in the output:"),Ih=r(),Ia=e("div"),Oh=r(),vl=e("p"),Dh=o("Some observations:"),Ph=r(),Ft=e("ul"),Qt=e("li"),Mh=o("What you've written in the "),Oa=e("code"),Ah=o("<script>"),Nh=o(" tag is moved into the top level of the code"),$h=r(),Da=e("li"),Pa=e("code"),jh=o("h1"),Rh=o(" element's text content is now a template literal"),Vh=r(),kl=e("p"),Bh=o("There's a lot of amazing things happening under the hood right now, but let's hold our horses for a while, because it's best explained when comparing with the next code change."),Pi=r(),u=e("section"),ul=e("h3"),Zt=e("a"),Wh=o("Updating data"),Uh=r(),Xt=e("p"),Jh=o("Let's add a function to update the "),Ma=e("code"),Gh=o("name"),qh=o(":"),zh=r(),Aa=e("div"),Yh=r(),yl=e("p"),se=e("a"),Kh=o("Svelte REPL"),Fh=r(),fl=e("p"),Qh=o("...and observe the change in the compiled output:"),Zh=r(),Na=e("div"),Xh=r(),ml=e("p"),sv=o("Some observations:"),tv=r(),R=e("ul"),Es=e("li"),ev=o("the text content of "),$a=e("code"),av=o("<h1>"),nv=o(" element is now broken into 2 text nodes, created by the "),ja=e("code"),ov=o("text(...)"),lv=o(" function"),iv=r(),As=e("li"),rv=o("the return object of the "),Ra=e("code"),cv=o("create_fragment"),pv=o(" has a new method, "),Va=e("code"),dv=o("p(ctx, dirty)"),hv=r(),te=e("li"),vv=o("a new function "),Ba=e("code"),kv=o("instance"),uv=o(" is created"),yv=r(),_s=e("li"),fv=o("What you've written in the "),Wa=e("code"),mv=o("<script>"),gv=o(" tag is now moved into the "),Ua=e("code"),xv=o("instance"),Ev=o(" function"),_v=r(),ls=e("li"),wv=o("for the sharp-eyed, the variable "),Ja=e("code"),bv=o("name"),Sv=o(" that was used in the "),Ga=e("code"),Tv=o("create_fragment"),Lv=o(" is now replaced by "),qa=e("code"),Hv=o("ctx[0]"),Cv=r(),gl=e("p"),Iv=o("So, why the change?"),Ov=r(),ee=e("p"),Dv=o("The Svelte compiler tracks all the variables declared in the "),za=e("code"),Pv=o("<script>"),Mv=o(" tag."),Av=r(),xl=e("p"),Nv=o("It tracks whether the variable:"),$v=r(),V=e("ul"),ae=e("li"),jv=o("can be mutated? eg: "),Ya=e("code"),Rv=o("count++"),Vv=o(","),Bv=r(),ne=e("li"),Wv=o("can be reassigned? eg: "),Ka=e("code"),Uv=o("name = 'Svelte'"),Jv=o(","),Gv=r(),Fa=e("li"),qv=o("is referenced in the template? eg: "),Qa=e("code"),zv=o("<h1>Hello {name}</h1>"),Yv=r(),Ns=e("li"),Kv=o("is writable? eg: "),Za=e("code"),Fv=o("const i = 1;"),Qv=o(" vs "),Xa=e("code"),Zv=o("let i = 1;"),Xv=r(),El=e("li"),sk=o("... and many more"),tk=r(),B=e("p"),ek=o("When the Svelte compiler realises that the variable "),sn=e("code"),ak=o("name"),nk=o(" can be reassigned, (due to "),tn=e("code"),ok=o("name = 'Svelte';"),lk=o(" in "),en=e("code"),ik=o("update"),rk=o("), it breaks down the text content of the "),an=e("code"),ck=o("h1"),pk=o(" into parts, so that it can dynamically update part of the text."),dk=r(),oe=e("p"),hk=o("Indeed, you can see that there's a new method, "),nn=e("code"),vk=o("p"),kk=o(", to update the text node."),Mi=r(),is=e("section"),_l=e("h4"),le=e("a"),uk=o("- p(ctx, dirty)"),yk=r(),ie=e("p"),fk=o("Short for "),wl=e("strong"),mk=o("u_p_date"),gk=o("."),xk=r(),rs=e("p"),bl=e("strong"),Ek=o("p(ctx, dirty)"),_k=o(" contains instructions to update the elements based on what has changed in the state ("),on=e("code"),wk=o("dirty"),bk=o(") and the state ("),ln=e("code"),Sk=o("ctx"),Tk=o(") of the component."),Ai=r(),M=e("section"),Sl=e("h3"),re=e("a"),Lk=o("instance variable"),Hk=r(),W=e("p"),Ck=o("The compiler realises that the variable "),rn=e("code"),Ik=o("name"),Ok=o(" cannot be shared across different instances of the "),cn=e("code"),Dk=o("App"),Pk=o(" component. That's why it moves the declaration of the variable "),pn=e("code"),Mk=o("name"),Ak=o(" into a function called "),dn=e("code"),Nk=o("instance"),$k=o("."),jk=r(),ws=e("p"),Rk=o("In the previous example, no matter how many instances of the "),hn=e("code"),Vk=o("App"),Bk=o(" component, the value of the variable "),vn=e("code"),Wk=o("name"),Uk=o(" is the same and unchanged across the instances:"),Jk=r(),kn=e("div"),Gk=r(),X=e("p"),qk=o("But, in this example, the variable "),un=e("code"),zk=o("name"),Yk=o(" can be changed within 1 instance of the component, so the declaration of the variable "),yn=e("code"),Kk=o("name"),Fk=o(" is now moved into the "),fn=e("code"),Qk=o("instance"),Zk=o(" function:"),Xk=r(),mn=e("div"),Ni=r(),S=e("section"),Tl=e("h3"),ce=e("a"),su=o("instance($$self, $$props, $$invalidate)"),tu=r(),bs=e("p"),eu=o("The "),gn=e("code"),au=o("instance"),nu=o(" function returns a list of "),Ll=e("em"),ou=o("instance"),lu=o(" variables, which are variables that are:"),iu=r(),pe=e("ul"),Hl=e("li"),ru=o("referenced in the template"),cu=r(),Cl=e("li"),pu=o("mutated or reassigned, (can be changed within 1 instance of the component)"),du=r(),de=e("p"),hu=o("In Svelte, we call this list of instance variables, "),Il=e("strong"),vu=o("ctx"),ku=o("."),uu=r(),ss=e("p"),yu=o("In the "),xn=e("code"),fu=o("init"),mu=o(" function, Svelte calls the "),En=e("code"),gu=o("instance"),xu=o(" function to create "),Ol=e("strong"),Eu=o("ctx"),_u=o(", and uses it to create the fragment for the component:"),wu=r(),_n=e("div"),bu=r(),ts=e("p"),Su=o("Now, instead of accessing the variable "),wn=e("code"),Tu=o("name"),Lu=o(" outside of the component, we refer to the variable "),bn=e("code"),Hu=o("name"),Cu=o(" passed via the "),Dl=e("strong"),Iu=o("ctx"),Ou=o(":"),Du=r(),Sn=e("div"),Pu=r(),Tn=e("p"),Mu=o("The reason that ctx is an array instead of a map or an object is because of an optimisation related to bitmask, you can see "),he=e("a"),Au=o("the discussion about it here"),$i=r(),H=e("section"),Pl=e("h3"),ve=e("a"),Nu=o("$$invalidate"),$u=r(),ke=e("p"),ju=o("The secret behind the system of reactivity in Svelte is the "),Ln=e("code"),Ru=o("$$invalidate"),Vu=o(" function."),Bu=r(),Ml=e("p"),Wu=o("Every variable that has been"),Uu=r(),ue=e("ul"),Al=e("li"),Ju=o("reassigned or mutated"),Gu=r(),Nl=e("li"),qu=o("referenced in the template"),zu=r(),ye=e("p"),Yu=o("will have the "),Hn=e("code"),Ku=o("$$invalidate"),Fu=o(" function inserted right after the assignment or mutation:"),Qu=r(),Cn=e("div"),Zu=r(),fe=e("p"),Xu=o("The "),In=e("code"),sy=o("$$invalidate"),ty=o(" function marks the variable dirty and schedules an update for the component:"),ey=r(),On=e("div"),ji=r(),m=e("section"),$l=e("h3"),me=e("a"),ay=o("Adding event listeners"),ny=r(),jl=e("p"),oy=o("Let's now add an event listener"),ly=r(),Dn=e("div"),iy=r(),Rl=e("p"),ge=e("a"),ry=o("Svelte REPL"),cy=r(),Vl=e("p"),py=o("And observe the difference:"),dy=r(),Pn=e("div"),hy=r(),Bl=e("p"),vy=o("Some observations:"),ky=r(),xe=e("ul"),Mn=e("li"),An=e("code"),uy=o("instance"),yy=o(" function now returns 2 variables instead of 1"),fy=r(),$s=e("li"),my=o("Listen to click event during "),Wl=e("strong"),gy=o("mount"),xy=o(" and dispose it in "),Ul=e("strong"),Ey=o("destroy"),_y=r(),es=e("p"),wy=o("As I've mentioned earlier, "),Nn=e("code"),by=o("instance"),Sy=o(" function returns variables that are "),Jl=e("strong"),Ty=o("referenced in the template"),Ly=o(" and that are "),Gl=e("strong"),Hy=o("mutated or reassigned"),Cy=o("."),Iy=r(),as=e("p"),Oy=o("Since we've just referenced the "),$n=e("code"),Dy=o("update"),Py=o(" function in the template, it is now returned in the "),jn=e("code"),My=o("instance"),Ay=o(" function as part of the "),ql=e("strong"),Ny=o("ctx"),$y=o("."),jy=r(),zl=e("p"),Ry=o("Svelte tries generate as compact JavaScript output as possible, not returning an extra variable if it is not necessary."),Ri=r(),g=e("section"),Yl=e("h3"),Ee=e("a"),Vy=o("listen and dispose"),By=r(),Ss=e("p"),Wy=o("Whenever you add "),_e=e("a"),Uy=o("an event listener"),Jy=o(" in Svelte, Svelte will inject code to add an "),we=e("a"),Gy=o("event listener"),qy=o(" and remove it when the DOM fragment is removed from the DOM."),zy=r(),Kl=e("p"),Yy=o("Try adding more event listeners,"),Ky=r(),Rn=e("div"),Fy=r(),Fl=e("p"),be=e("a"),Qy=o("Svelte REPL"),Zy=r(),Ql=e("p"),Xy=o("and observe the compiled output:"),sf=r(),Vn=e("div"),tf=r(),Zl=e("p"),ef=o("Instead of declaring and creating a new variable to remove each event listener, Svelte assigns all of them to an array:"),af=r(),Bn=e("div"),nf=r(),Xl=e("p"),of=o("Minification can compact the variable name, but you can't remove the brackets."),lf=r(),Se=e("p"),rf=o("Again, this is another great example of where Svelte tries to generate compact JavaScript output. Svelte does not create the "),Wn=e("code"),cf=o("dispose"),pf=o(" array when there's only 1 event listener."),Vi=r(),G=e("section"),si=e("h2"),Te=e("a"),df=o("Summary"),hf=r(),ti=e("p"),vf=o("The Svelte syntax is a superset of HTML."),kf=r(),ei=e("p"),uf=o("When you write a Svelte component, the Svelte compiler analyses your code and generates optimised JavaScript code output."),yf=r(),ai=e("p"),ff=o("The output can be divided into 3 segments:"),Bi=r(),js=e("section"),ni=e("h3"),Le=e("a"),mf=o("1. create_fragment"),gf=r(),oi=e("ul"),li=e("li"),xf=o("Returns a fragment, which is an instruction manual on how to build the DOM fragment for the component"),Wi=r(),Rs=e("section"),ii=e("h3"),He=e("a"),Ef=o("2. instance"),_f=r(),Ts=e("ul"),Ce=e("li"),wf=o("Most of the code written in the "),Un=e("code"),bf=o("<script>"),Sf=o(" tag is in here."),Tf=r(),ri=e("li"),Lf=o("Returns a list of instance variables that are referenced in the template"),Hf=r(),Jn=e("li"),Gn=e("code"),Cf=o("$$invalidate"),If=o(" is inserted after every assignment and mutation of the instance variable"),Ui=r(),q=e("section"),ci=e("h3"),Ie=e("a"),Of=o("3. class App extends SvelteComponent"),Df=r(),Ls=e("ul"),Hs=e("li"),Pf=o("Initialise the component with "),qn=e("code"),Mf=o("create_fragment"),Af=o(" and "),zn=e("code"),Nf=o("instance"),$f=o(" function"),jf=r(),pi=e("li"),Rf=o("Sets up the component internals"),Vf=r(),Yn=e("li"),Bf=o("Provides the "),Oe=e("a"),Wf=o("Component API"),Uf=r(),di=e("p"),Jf=o("Svelte strives to generate as compact JavaScript as possible, for example:"),Gf=r(),ns=e("ul"),De=e("li"),qf=o("Breaking text content of "),Kn=e("code"),zf=o("h1"),Yf=o(" into separate text nodes only when part of the text can be updated"),Kf=r(),Cs=e("li"),Ff=o("Not defining "),Fn=e("code"),Qf=o("create_fragment"),Zf=o(" or "),Qn=e("code"),Xf=o("instance"),sm=o(" function when it is not needed"),tm=r(),Pe=e("li"),em=o("Generate "),Zn=e("code"),am=o("dispose"),nm=o(" as an array or a function, depending on the number of event listeners."),om=r(),hi=e("li"),lm=o("..."),Ji=r(),j=e("section"),vi=e("h2"),Me=e("a"),im=o("Closing Note"),rm=r(),ki=e("p"),cm=o("We've covered the basic structure of the Svelte's compiled output, and this is just the beginning."),pm=r(),Ae=e("p"),dm=o("If you wish to know more, "),Ne=e("a"),hm=o("follow me on Twitter"),vm=o("."),km=r(),os=e("p"),um=o("I'll post it on Twitter when the next part is ready, where I'll be covering "),$e=e("a"),ym=o("logic blocks"),fm=o(", "),je=e("a"),mm=o("slots"),gm=o(", "),Re=e("a"),xm=o("context"),Em=o(", and many others."),_m=r(),ui=e("p"),Ve=e("strong"),wm=o("\u27A1 \u27A1  Continue reading on "),Xn=e("a"),bm=o("Part 2"),Sm=o("."),this.h()},l(p){dE(E.$$.fragment,p),K=c(p),I=a(p,"SECTION",{});var d=n(I);ys=a(d,"H2",{});var Mm=n(ys);_=a(Mm,"A",{href:!0,id:!0});var Am=n(_);F=l(Am,"Background"),Am.forEach(t),Mm.forEach(t),Je=c(d),Q=a(d,"P",{});var Vs=n(Q);Vr=l(Vs,"A while ago, "),Xs=a(Vs,"A",{href:!0,rel:!0});var Nm=n(Xs);Br=l(Nm,"@swyx"),Nm.forEach(t),Wr=l(Vs," came back to Singapore and visited us in "),st=a(Vs,"A",{href:!0,rel:!0});var $m=n(st);Ur=l($m,"Shopee Singapore"),$m.forEach(t),Jr=l(Vs," ("),tt=a(Vs,"A",{href:!0,rel:!0});var jm=n(tt);Gr=l(jm,"We're hiring!"),jm.forEach(t),qr=l(Vs,")."),Vs.forEach(t),zr=c(d),Z=a(d,"P",{});var Bs=n(Z);Yr=l(Bs,"He gave an amazing sharing on "),et=a(Bs,"A",{href:!0,rel:!0});var Rm=n(et);Kr=l(Rm,"Compile Svelte in Your Head"),Rm.forEach(t),Fr=l(Bs," ("),at=a(Bs,"A",{href:!0,rel:!0});var Vm=n(at);Qr=l(Vm,"video"),Vm.forEach(t),Zr=l(Bs,") in the "),nt=a(Bs,"A",{href:!0,rel:!0});var Bm=n(nt);Xr=l(Bm,"ReactKnowledgeable Originals"),Bm.forEach(t),sc=l(Bs,"."),Bs.forEach(t),tc=c(d),uo=a(d,"P",{});var Wm=n(uo);ec=l(Wm,"I love his presentation and the title is so catchy, so I begged him to use the catchy title as this series of articles about the Svelte compiler. It will be about how Svelte sees your code and compiles it down to plain JavaScript."),Wm.forEach(t),d.forEach(t),gi=c(p),Is=a(p,"SECTION",{});var qi=n(Is);yo=a(qi,"H2",{});var Um=n(yo);ot=a(Um,"A",{href:!0,id:!0});var Jm=n(ot);ac=l(Jm,"Introduction"),Jm.forEach(t),Um.forEach(t),nc=c(qi),fo=a(qi,"P",{});var Gm=n(fo);oc=l(Gm,"Lets refresh ourselves with how we write web app without any framework:"),Gm.forEach(t),qi.forEach(t),xi=c(p),Os=a(p,"SECTION",{});var zi=n(Os);mo=a(zi,"H3",{});var qm=n(mo);lt=a(qm,"A",{href:!0,id:!0});var zm=n(lt);lc=l(zm,"Creating an element"),zm.forEach(t),qm.forEach(t),ic=c(zi),Ge=a(zi,"DIV",{class:!0});var YE=n(Ge);YE.forEach(t),zi.forEach(t),Ei=c(p),Ds=a(p,"SECTION",{});var Yi=n(Ds);go=a(Yi,"H3",{});var Ym=n(go);it=a(Ym,"A",{href:!0,id:!0});var Km=n(it);rc=l(Km,"Updating an element"),Km.forEach(t),Ym.forEach(t),cc=c(Yi),qe=a(Yi,"DIV",{class:!0});var KE=n(qe);KE.forEach(t),Yi.forEach(t),_i=c(p),Ps=a(p,"SECTION",{});var Ki=n(Ps);xo=a(Ki,"H3",{});var Fm=n(xo);rt=a(Fm,"A",{href:!0,id:!0});var Qm=n(rt);pc=l(Qm,"Removing an element"),Qm.forEach(t),Fm.forEach(t),dc=c(Ki),ze=a(Ki,"DIV",{class:!0});var FE=n(ze);FE.forEach(t),Ki.forEach(t),wi=c(p),Ms=a(p,"SECTION",{});var Fi=n(Ms);Eo=a(Fi,"H3",{});var Zm=n(Eo);ct=a(Zm,"A",{href:!0,id:!0});var Xm=n(ct);hc=l(Xm,"Adding style to an element"),Xm.forEach(t),Zm.forEach(t),vc=c(Fi),Ye=a(Fi,"DIV",{class:!0});var QE=n(Ye);QE.forEach(t),Fi.forEach(t),bi=c(p),U=a(p,"SECTION",{});var Ws=n(U);_o=a(Ws,"H3",{});var s1=n(_o);pt=a(s1,"A",{href:!0,id:!0});var t1=n(pt);kc=l(t1,"Listen for click events on an element"),t1.forEach(t),s1.forEach(t),uc=c(Ws),Ke=a(Ws,"DIV",{class:!0});var ZE=n(Ke);ZE.forEach(t),yc=c(Ws),wo=a(Ws,"P",{});var e1=n(wo);fc=l(e1,"These are code that you have to write, without using any framework or library."),e1.forEach(t),mc=c(Ws),bo=a(Ws,"P",{});var a1=n(bo);gc=l(a1,"The main idea of this article is to show how the Svelte compiler compiles the Svelte syntax into statements of codes that I've shown above."),a1.forEach(t),Ws.forEach(t),Si=c(p),v=a(p,"SECTION",{});var k=n(v);So=a(k,"H2",{});var n1=n(So);dt=a(n1,"A",{href:!0,id:!0});var o1=n(dt);xc=l(o1,"Svelte syntax"),o1.forEach(t),n1.forEach(t),Ec=c(k),To=a(k,"P",{});var l1=n(To);_c=l(l1,"Here I'm going to show you some basics of the Svelte syntax."),l1.forEach(t),wc=c(k),Lo=a(k,"BLOCKQUOTE",{});var i1=n(Lo);ht=a(i1,"P",{});var Qi=n(ht);bc=l(Qi,"If you wish to learn more, I highly recommend trying "),vt=a(Qi,"A",{href:!0,rel:!0});var r1=n(vt);Sc=l(r1,"Svelte's interactive tutorial"),r1.forEach(t),Tc=l(Qi,"."),Qi.forEach(t),i1.forEach(t),Lc=c(k),Ho=a(k,"P",{});var c1=n(Ho);Hc=l(c1,"So here is a basic Svelte component:"),c1.forEach(t),Cc=c(k),Fe=a(k,"DIV",{class:!0});var XE=n(Fe);XE.forEach(t),Ic=c(k),Co=a(k,"P",{});var p1=n(Co);kt=a(p1,"A",{href:!0,rel:!0});var d1=n(kt);Oc=l(d1,"Svelte REPL"),d1.forEach(t),p1.forEach(t),Dc=c(k),ut=a(k,"P",{});var Zi=n(ut);Pc=l(Zi,"To add style, you add a "),Qe=a(Zi,"CODE",{class:!0});var h1=n(Qe);Mc=l(h1,"<style>"),h1.forEach(t),Ac=l(Zi," tag:"),Zi.forEach(t),Nc=c(k),Ze=a(k,"DIV",{class:!0});var s3=n(Ze);s3.forEach(t),$c=c(k),Io=a(k,"P",{});var v1=n(Io);yt=a(v1,"A",{href:!0,rel:!0});var k1=n(yt);jc=l(k1,"Svelte REPL"),k1.forEach(t),v1.forEach(t),Rc=c(k),Oo=a(k,"P",{});var u1=n(Oo);Vc=l(u1,"At this point, writing Svelte component just feels like writing HTML, that's because Svelte syntax is a super set of the HTML syntax."),u1.forEach(t),Bc=c(k),Do=a(k,"P",{});var y1=n(Do);Wc=l(y1,"Let's look at how we add a data to our component:"),y1.forEach(t),Uc=c(k),Xe=a(k,"DIV",{class:!0});var t3=n(Xe);t3.forEach(t),Jc=c(k),Po=a(k,"P",{});var f1=n(Po);ft=a(f1,"A",{href:!0,rel:!0});var m1=n(ft);Gc=l(m1,"Svelte REPL"),m1.forEach(t),f1.forEach(t),qc=c(k),Mo=a(k,"P",{});var g1=n(Mo);zc=l(g1,"We put JavaScript inside the curly brackets."),g1.forEach(t),Yc=c(k),mt=a(k,"P",{});var Xi=n(mt);Kc=l(Xi,"To add a click handler, we use the "),sa=a(Xi,"CODE",{class:!0});var x1=n(sa);Fc=l(x1,"on:"),x1.forEach(t),Qc=l(Xi," directive"),Xi.forEach(t),Zc=c(k),ta=a(k,"DIV",{class:!0});var e3=n(ta);e3.forEach(t),Xc=c(k),Ao=a(k,"P",{});var E1=n(Ao);gt=a(E1,"A",{href:!0,rel:!0});var _1=n(gt);sp=l(_1,"Svelte REPL"),_1.forEach(t),E1.forEach(t),tp=c(k),ea=a(k,"P",{});var Tm=n(ea);ep=l(Tm,"To change the data, we use "),xt=a(Tm,"A",{href:!0,rel:!0});var w1=n(xt);ap=l(w1,"assignment operators"),w1.forEach(t),Tm.forEach(t),np=c(k),aa=a(k,"DIV",{class:!0});var a3=n(aa);a3.forEach(t),op=c(k),No=a(k,"P",{});var b1=n(No);Et=a(b1,"A",{href:!0,rel:!0});var S1=n(Et);lp=l(S1,"Svelte REPL"),S1.forEach(t),b1.forEach(t),ip=c(k),$o=a(k,"P",{});var T1=n($o);rp=l(T1,"Let's move on to see how Svelte syntax is compiled into JavaScript that we've seen earlier"),T1.forEach(t),k.forEach(t),Ti=c(p),w=a(p,"SECTION",{});var C=n(w);jo=a(C,"H2",{});var L1=n(jo);_t=a(L1,"A",{href:!0,id:!0});var H1=n(_t);cp=l(H1,"Compile Svelte in your Head"),H1.forEach(t),L1.forEach(t),pp=c(C),Ro=a(C,"P",{});var C1=n(Ro);dp=l(C1,"The Svelte compiler analyses the code you write and generates an optimised JavaScript output."),C1.forEach(t),hp=c(C),Vo=a(C,"P",{});var I1=n(Vo);vp=l(I1,"To study how Svelte compiles the code, lets start with the smallest example possible, and slowly build up the code. Through the process, you will see that Svelte incrementally adds to the output code based on your changes."),I1.forEach(t),kp=c(C),Bo=a(C,"P",{});var O1=n(Bo);up=l(O1,"The first example that we are going to see is:"),O1.forEach(t),yp=c(C),na=a(C,"DIV",{class:!0});var n3=n(na);n3.forEach(t),fp=c(C),Wo=a(C,"P",{});var D1=n(Wo);wt=a(D1,"A",{href:!0,rel:!0});var P1=n(wt);mp=l(P1,"Svelte REPL"),P1.forEach(t),D1.forEach(t),gp=c(C),Uo=a(C,"P",{});var M1=n(Uo);xp=l(M1,"The output code:"),M1.forEach(t),Ep=c(C),oa=a(C,"DIV",{class:!0});var o3=n(oa);o3.forEach(t),_p=c(C),Jo=a(C,"P",{});var A1=n(Jo);wp=l(A1,"You can break down the output code into 2 sections:"),A1.forEach(t),bp=c(C),bt=a(C,"UL",{});var sr=n(bt);Go=a(sr,"LI",{});var N1=n(Go);la=a(N1,"CODE",{class:!0});var $1=n(la);Sp=l($1,"create_fragment"),$1.forEach(t),N1.forEach(t),Tp=c(sr),qo=a(sr,"LI",{});var j1=n(qo);ia=a(j1,"CODE",{class:!0});var R1=n(ia);Lp=l(R1,"class App extends SvelteComponent"),R1.forEach(t),j1.forEach(t),sr.forEach(t),C.forEach(t),Li=c(p),J=a(p,"SECTION",{});var Us=n(J);zo=a(Us,"H3",{});var V1=n(zo);St=a(V1,"A",{href:!0,id:!0});var B1=n(St);Hp=l(B1,"create_fragment"),B1.forEach(t),V1.forEach(t),Cp=c(Us),Yo=a(Us,"P",{});var W1=n(Yo);Ip=l(W1,"Svelte components are the building blocks of a Svelte application. Each Svelte component focuses on building its piece or fragment of the final DOM."),W1.forEach(t),Op=c(Us),Tt=a(Us,"P",{});var tr=n(Tt);Dp=l(tr,"The "),ra=a(tr,"CODE",{class:!0});var U1=n(ra);Pp=l(U1,"create_fragment"),U1.forEach(t),Mp=l(tr," function gives the Svelte component an instruction manual on how to build the DOM fragment."),tr.forEach(t),Ap=c(Us),Lt=a(Us,"P",{});var er=n(Lt);Np=l(er,"Look at the return object of the "),ca=a(er,"CODE",{class:!0});var J1=n(ca);$p=l(J1,"create_fragment"),J1.forEach(t),jp=l(er," function. It has methods, such as:"),er.forEach(t),Us.forEach(t),Hi=c(p),N=a(p,"SECTION",{});var cs=n(N);Ko=a(cs,"H4",{});var G1=n(Ko);Ht=a(G1,"A",{href:!0,id:!0});var q1=n(Ht);Rp=l(q1,"- c()"),q1.forEach(t),G1.forEach(t),Vp=c(cs),Ct=a(cs,"P",{});var ar=n(Ct);Bp=l(ar,"Short for "),Fo=a(ar,"STRONG",{});var z1=n(Fo);Wp=l(z1,"create"),z1.forEach(t),Up=l(ar,"."),ar.forEach(t),Jp=c(cs),Qo=a(cs,"P",{});var Y1=n(Qo);Gp=l(Y1,"Contains instructions to create all the elements in the fragment."),Y1.forEach(t),qp=c(cs),It=a(cs,"P",{});var nr=n(It);zp=l(nr,"In this example, it contains instructions to create the "),pa=a(nr,"CODE",{class:!0});var K1=n(pa);Yp=l(K1,"h1"),K1.forEach(t),Kp=l(nr," element"),nr.forEach(t),Fp=c(cs),da=a(cs,"DIV",{class:!0});var l3=n(da);l3.forEach(t),cs.forEach(t),Ci=c(p),$=a(p,"SECTION",{});var ps=n($);Zo=a(ps,"H4",{});var F1=n(Zo);Ot=a(F1,"A",{href:!0,id:!0});var Q1=n(Ot);Qp=l(Q1,"- m(target, anchor)"),Q1.forEach(t),F1.forEach(t),Zp=c(ps),Dt=a(ps,"P",{});var or=n(Dt);Xp=l(or,"Short for "),Xo=a(or,"STRONG",{});var Z1=n(Xo);sd=l(Z1,"mount"),Z1.forEach(t),td=l(or,"."),or.forEach(t),ed=c(ps),sl=a(ps,"P",{});var X1=n(sl);ad=l(X1,"Contains instructions to mount the elements into the target."),X1.forEach(t),nd=c(ps),fs=a(ps,"P",{});var so=n(fs);od=l(so,"In this example, it contains instructions to insert the "),ha=a(so,"CODE",{class:!0});var sg=n(ha);ld=l(sg,"h1"),sg.forEach(t),id=l(so," element into the "),va=a(so,"CODE",{class:!0});var tg=n(va);rd=l(tg,"target"),tg.forEach(t),cd=l(so,"."),so.forEach(t),pd=c(ps),ka=a(ps,"DIV",{class:!0});var i3=n(ka);i3.forEach(t),ps.forEach(t),Ii=c(p),P=a(p,"SECTION",{});var z=n(P);tl=a(z,"H4",{});var eg=n(tl);Pt=a(eg,"A",{href:!0,id:!0});var ag=n(Pt);dd=l(ag,"- d(detaching)"),ag.forEach(t),eg.forEach(t),hd=c(z),Mt=a(z,"P",{});var lr=n(Mt);vd=l(lr,"Short for "),el=a(lr,"STRONG",{});var ng=n(el);kd=l(ng,"destroy"),ng.forEach(t),ud=l(lr,"."),lr.forEach(t),yd=c(z),al=a(z,"P",{});var og=n(al);fd=l(og,"Contains instructions to remove the elements from the target."),og.forEach(t),md=c(z),At=a(z,"P",{});var ir=n(At);gd=l(ir,"In this example, we detach the "),ua=a(ir,"CODE",{class:!0});var lg=n(ua);xd=l(lg,"h1"),lg.forEach(t),Ed=l(ir," element from the DOM"),ir.forEach(t),_d=c(z),ya=a(z,"DIV",{class:!0});var r3=n(ya);r3.forEach(t),wd=c(z),nl=a(z,"BLOCKQUOTE",{});var ig=n(nl);Nt=a(ig,"P",{});var rr=n(Nt);bd=l(rr,"The method names are short for better minification. "),$t=a(rr,"A",{href:!0,rel:!0});var rg=n($t);Sd=l(rg,"See what can't be minified here"),rg.forEach(t),Td=l(rr,"."),rr.forEach(t),ig.forEach(t),z.forEach(t),Oi=c(p),y=a(p,"SECTION",{});var x=n(y);ol=a(x,"H3",{});var cg=n(ol);jt=a(cg,"A",{href:!0,id:!0});var pg=n(jt);Ld=l(pg,"export default class App extends SvelteComponent"),pg.forEach(t),cg.forEach(t),Hd=c(x),Rt=a(x,"P",{});var cr=n(Rt);Cd=l(cr,"Each component is a class, which you can import and instantiate through "),Vt=a(cr,"A",{href:!0,rel:!0});var dg=n(Vt);Id=l(dg,"this API"),dg.forEach(t),Od=l(cr,"."),cr.forEach(t),Dd=c(x),Bt=a(x,"P",{});var pr=n(Bt);Pd=l(pr,"And in the constructor, we initialize the component with information that made up the component such as "),fa=a(pr,"CODE",{class:!0});var hg=n(fa);Md=l(hg,"create_fragment"),hg.forEach(t),Ad=l(pr,". Svelte will only pass information that it is needed and remove them whenever it is not necessary."),pr.forEach(t),Nd=c(x),Wt=a(x,"P",{});var dr=n(Wt);$d=l(dr,"Try removing the "),ma=a(dr,"CODE",{class:!0});var vg=n(ma);jd=l(vg,"<h1>"),vg.forEach(t),Rd=l(dr," tag and see what happens to the output:"),dr.forEach(t),Vd=c(x),ga=a(x,"DIV",{class:!0});var c3=n(ga);c3.forEach(t),Bd=c(x),ll=a(x,"P",{});var kg=n(ll);Ut=a(kg,"A",{href:!0,rel:!0});var ug=n(Ut);Wd=l(ug,"Svelte REPL"),ug.forEach(t),kg.forEach(t),Ud=c(x),xa=a(x,"DIV",{class:!0});var p3=n(xa);p3.forEach(t),Jd=c(x),ms=a(x,"P",{});var to=n(ms);Gd=l(to,"Svelte will pass in "),Ea=a(to,"CODE",{class:!0});var yg=n(Ea);qd=l(yg,"null"),yg.forEach(t),zd=l(to," instead of "),_a=a(to,"CODE",{class:!0});var fg=n(_a);Yd=l(fg,"create_fragment"),fg.forEach(t),Kd=l(to,"!"),to.forEach(t),Fd=c(x),Jt=a(x,"P",{});var hr=n(Jt);Qd=l(hr,"The "),wa=a(hr,"CODE",{class:!0});var mg=n(wa);Zd=l(mg,"init"),mg.forEach(t),Xd=l(hr," function is where Svelte sets up most of the internals, such as:"),hr.forEach(t),sh=c(x),gs=a(x,"UL",{});var eo=n(gs);xs=a(eo,"LI",{});var ao=n(xs);th=l(ao,"component props, "),ba=a(ao,"CODE",{class:!0});var gg=n(ba);eh=l(gg,"ctx"),gg.forEach(t),ah=l(ao," (will explain what "),Sa=a(ao,"CODE",{class:!0});var xg=n(Sa);nh=l(xg,"ctx"),xg.forEach(t),oh=l(ao," is later) and context"),ao.forEach(t),lh=c(eo),il=a(eo,"LI",{});var Eg=n(il);ih=l(Eg,"component lifecycle events"),Eg.forEach(t),rh=c(eo),rl=a(eo,"LI",{});var _g=n(rl);ch=l(_g,"component update mechanism"),_g.forEach(t),eo.forEach(t),ph=c(x),Gt=a(x,"P",{});var vr=n(Gt);dh=l(vr,"and at the very end, Svelte calls the "),Ta=a(vr,"CODE",{class:!0});var wg=n(Ta);hh=l(wg,"create_fragment"),wg.forEach(t),vh=l(vr," to create and mount elements into the DOM."),vr.forEach(t),kh=c(x),qt=a(x,"P",{});var kr=n(qt);uh=l(kr,"If you noticed, all the internal state and methods are attached to "),La=a(kr,"CODE",{class:!0});var bg=n(La);yh=l(bg,"this.$$"),bg.forEach(t),fh=l(kr,"."),kr.forEach(t),mh=c(x),zt=a(x,"P",{});var ur=n(zt);gh=l(ur,"So if you ever access the "),Ha=a(ur,"CODE",{class:!0});var Sg=n(Ha);xh=l(Sg,"$$"),Sg.forEach(t),Eh=l(ur," property of the component, you are tapping into the internals. You've been warned! \u{1F648}\u{1F6A8}"),ur.forEach(t),x.forEach(t),Di=c(p),b=a(p,"SECTION",{});var O=n(b);cl=a(O,"H3",{});var Tg=n(cl);Yt=a(Tg,"A",{href:!0,id:!0});var Lg=n(Yt);_h=l(Lg,"Adding data"),Lg.forEach(t),Tg.forEach(t),wh=c(O),pl=a(O,"P",{});var Hg=n(pl);bh=l(Hg,"Now that we've looked at the bare minimum of a Svelte component, let's see how adding a data would change the compiled output:"),Hg.forEach(t),Sh=c(O),Ca=a(O,"DIV",{class:!0});var d3=n(Ca);d3.forEach(t),Th=c(O),dl=a(O,"P",{});var Cg=n(dl);Kt=a(Cg,"A",{href:!0,rel:!0});var Ig=n(Kt);Lh=l(Ig,"Svelte REPL"),Ig.forEach(t),Cg.forEach(t),Hh=c(O),hl=a(O,"P",{});var Og=n(hl);Ch=l(Og,"Notice the change in the output:"),Og.forEach(t),Ih=c(O),Ia=a(O,"DIV",{class:!0});var h3=n(Ia);h3.forEach(t),Oh=c(O),vl=a(O,"P",{});var Dg=n(vl);Dh=l(Dg,"Some observations:"),Dg.forEach(t),Ph=c(O),Ft=a(O,"UL",{});var yr=n(Ft);Qt=a(yr,"LI",{});var fr=n(Qt);Mh=l(fr,"What you've written in the "),Oa=a(fr,"CODE",{class:!0});var Pg=n(Oa);Ah=l(Pg,"<script>"),Pg.forEach(t),Nh=l(fr," tag is moved into the top level of the code"),fr.forEach(t),$h=c(yr),Da=a(yr,"LI",{});var Lm=n(Da);Pa=a(Lm,"CODE",{class:!0});var Mg=n(Pa);jh=l(Mg,"h1"),Mg.forEach(t),Rh=l(Lm," element's text content is now a template literal"),Lm.forEach(t),yr.forEach(t),Vh=c(O),kl=a(O,"P",{});var Ag=n(kl);Bh=l(Ag,"There's a lot of amazing things happening under the hood right now, but let's hold our horses for a while, because it's best explained when comparing with the next code change."),Ag.forEach(t),O.forEach(t),Pi=c(p),u=a(p,"SECTION",{});var f=n(u);ul=a(f,"H3",{});var Ng=n(ul);Zt=a(Ng,"A",{href:!0,id:!0});var $g=n(Zt);Wh=l($g,"Updating data"),$g.forEach(t),Ng.forEach(t),Uh=c(f),Xt=a(f,"P",{});var mr=n(Xt);Jh=l(mr,"Let's add a function to update the "),Ma=a(mr,"CODE",{class:!0});var jg=n(Ma);Gh=l(jg,"name"),jg.forEach(t),qh=l(mr,":"),mr.forEach(t),zh=c(f),Aa=a(f,"DIV",{class:!0});var v3=n(Aa);v3.forEach(t),Yh=c(f),yl=a(f,"P",{});var Rg=n(yl);se=a(Rg,"A",{href:!0,rel:!0});var Vg=n(se);Kh=l(Vg,"Svelte REPL"),Vg.forEach(t),Rg.forEach(t),Fh=c(f),fl=a(f,"P",{});var Bg=n(fl);Qh=l(Bg,"...and observe the change in the compiled output:"),Bg.forEach(t),Zh=c(f),Na=a(f,"DIV",{class:!0});var k3=n(Na);k3.forEach(t),Xh=c(f),ml=a(f,"P",{});var Wg=n(ml);sv=l(Wg,"Some observations:"),Wg.forEach(t),tv=c(f),R=a(f,"UL",{});var ds=n(R);Es=a(ds,"LI",{});var no=n(Es);ev=l(no,"the text content of "),$a=a(no,"CODE",{class:!0});var Ug=n($a);av=l(Ug,"<h1>"),Ug.forEach(t),nv=l(no," element is now broken into 2 text nodes, created by the "),ja=a(no,"CODE",{class:!0});var Jg=n(ja);ov=l(Jg,"text(...)"),Jg.forEach(t),lv=l(no," function"),no.forEach(t),iv=c(ds),As=a(ds,"LI",{});var yi=n(As);rv=l(yi,"the return object of the "),Ra=a(yi,"CODE",{class:!0});var Gg=n(Ra);cv=l(Gg,"create_fragment"),Gg.forEach(t),pv=l(yi," has a new method, "),Va=a(yi,"CODE",{class:!0});var qg=n(Va);dv=l(qg,"p(ctx, dirty)"),qg.forEach(t),yi.forEach(t),hv=c(ds),te=a(ds,"LI",{});var gr=n(te);vv=l(gr,"a new function "),Ba=a(gr,"CODE",{class:!0});var zg=n(Ba);kv=l(zg,"instance"),zg.forEach(t),uv=l(gr," is created"),gr.forEach(t),yv=c(ds),_s=a(ds,"LI",{});var oo=n(_s);fv=l(oo,"What you've written in the "),Wa=a(oo,"CODE",{class:!0});var Yg=n(Wa);mv=l(Yg,"<script>"),Yg.forEach(t),gv=l(oo," tag is now moved into the "),Ua=a(oo,"CODE",{class:!0});var Kg=n(Ua);xv=l(Kg,"instance"),Kg.forEach(t),Ev=l(oo," function"),oo.forEach(t),_v=c(ds),ls=a(ds,"LI",{});var Be=n(ls);wv=l(Be,"for the sharp-eyed, the variable "),Ja=a(Be,"CODE",{class:!0});var Fg=n(Ja);bv=l(Fg,"name"),Fg.forEach(t),Sv=l(Be," that was used in the "),Ga=a(Be,"CODE",{class:!0});var Qg=n(Ga);Tv=l(Qg,"create_fragment"),Qg.forEach(t),Lv=l(Be," is now replaced by "),qa=a(Be,"CODE",{class:!0});var Zg=n(qa);Hv=l(Zg,"ctx[0]"),Zg.forEach(t),Be.forEach(t),ds.forEach(t),Cv=c(f),gl=a(f,"P",{});var Xg=n(gl);Iv=l(Xg,"So, why the change?"),Xg.forEach(t),Ov=c(f),ee=a(f,"P",{});var xr=n(ee);Dv=l(xr,"The Svelte compiler tracks all the variables declared in the "),za=a(xr,"CODE",{class:!0});var sx=n(za);Pv=l(sx,"<script>"),sx.forEach(t),Mv=l(xr," tag."),xr.forEach(t),Av=c(f),xl=a(f,"P",{});var tx=n(xl);Nv=l(tx,"It tracks whether the variable:"),tx.forEach(t),$v=c(f),V=a(f,"UL",{});var hs=n(V);ae=a(hs,"LI",{});var Er=n(ae);jv=l(Er,"can be mutated? eg: "),Ya=a(Er,"CODE",{class:!0});var ex=n(Ya);Rv=l(ex,"count++"),ex.forEach(t),Vv=l(Er,","),Er.forEach(t),Bv=c(hs),ne=a(hs,"LI",{});var _r=n(ne);Wv=l(_r,"can be reassigned? eg: "),Ka=a(_r,"CODE",{class:!0});var ax=n(Ka);Uv=l(ax,"name = 'Svelte'"),ax.forEach(t),Jv=l(_r,","),_r.forEach(t),Gv=c(hs),Fa=a(hs,"LI",{});var Hm=n(Fa);qv=l(Hm,"is referenced in the template? eg: "),Qa=a(Hm,"CODE",{class:!0});var nx=n(Qa);zv=l(nx,"<h1>Hello {name}</h1>"),nx.forEach(t),Hm.forEach(t),Yv=c(hs),Ns=a(hs,"LI",{});var fi=n(Ns);Kv=l(fi,"is writable? eg: "),Za=a(fi,"CODE",{class:!0});var ox=n(Za);Fv=l(ox,"const i = 1;"),ox.forEach(t),Qv=l(fi," vs "),Xa=a(fi,"CODE",{class:!0});var lx=n(Xa);Zv=l(lx,"let i = 1;"),lx.forEach(t),fi.forEach(t),Xv=c(hs),El=a(hs,"LI",{});var ix=n(El);sk=l(ix,"... and many more"),ix.forEach(t),hs.forEach(t),tk=c(f),B=a(f,"P",{});var vs=n(B);ek=l(vs,"When the Svelte compiler realises that the variable "),sn=a(vs,"CODE",{class:!0});var rx=n(sn);ak=l(rx,"name"),rx.forEach(t),nk=l(vs," can be reassigned, (due to "),tn=a(vs,"CODE",{class:!0});var cx=n(tn);ok=l(cx,"name = 'Svelte';"),cx.forEach(t),lk=l(vs," in "),en=a(vs,"CODE",{class:!0});var px=n(en);ik=l(px,"update"),px.forEach(t),rk=l(vs,"), it breaks down the text content of the "),an=a(vs,"CODE",{class:!0});var dx=n(an);ck=l(dx,"h1"),dx.forEach(t),pk=l(vs," into parts, so that it can dynamically update part of the text."),vs.forEach(t),dk=c(f),oe=a(f,"P",{});var wr=n(oe);hk=l(wr,"Indeed, you can see that there's a new method, "),nn=a(wr,"CODE",{class:!0});var hx=n(nn);vk=l(hx,"p"),hx.forEach(t),kk=l(wr,", to update the text node."),wr.forEach(t),f.forEach(t),Mi=c(p),is=a(p,"SECTION",{});var lo=n(is);_l=a(lo,"H4",{});var vx=n(_l);le=a(vx,"A",{href:!0,id:!0});var kx=n(le);uk=l(kx,"- p(ctx, dirty)"),kx.forEach(t),vx.forEach(t),yk=c(lo),ie=a(lo,"P",{});var br=n(ie);fk=l(br,"Short for "),wl=a(br,"STRONG",{});var ux=n(wl);mk=l(ux,"u_p_date"),ux.forEach(t),gk=l(br,"."),br.forEach(t),xk=c(lo),rs=a(lo,"P",{});var We=n(rs);bl=a(We,"STRONG",{});var yx=n(bl);Ek=l(yx,"p(ctx, dirty)"),yx.forEach(t),_k=l(We," contains instructions to update the elements based on what has changed in the state ("),on=a(We,"CODE",{class:!0});var fx=n(on);wk=l(fx,"dirty"),fx.forEach(t),bk=l(We,") and the state ("),ln=a(We,"CODE",{class:!0});var mx=n(ln);Sk=l(mx,"ctx"),mx.forEach(t),Tk=l(We,") of the component."),We.forEach(t),lo.forEach(t),Ai=c(p),M=a(p,"SECTION",{});var Y=n(M);Sl=a(Y,"H3",{});var gx=n(Sl);re=a(gx,"A",{href:!0,id:!0});var xx=n(re);Lk=l(xx,"instance variable"),xx.forEach(t),gx.forEach(t),Hk=c(Y),W=a(Y,"P",{});var ks=n(W);Ck=l(ks,"The compiler realises that the variable "),rn=a(ks,"CODE",{class:!0});var Ex=n(rn);Ik=l(Ex,"name"),Ex.forEach(t),Ok=l(ks," cannot be shared across different instances of the "),cn=a(ks,"CODE",{class:!0});var _x=n(cn);Dk=l(_x,"App"),_x.forEach(t),Pk=l(ks," component. That's why it moves the declaration of the variable "),pn=a(ks,"CODE",{class:!0});var wx=n(pn);Mk=l(wx,"name"),wx.forEach(t),Ak=l(ks," into a function called "),dn=a(ks,"CODE",{class:!0});var bx=n(dn);Nk=l(bx,"instance"),bx.forEach(t),$k=l(ks,"."),ks.forEach(t),jk=c(Y),ws=a(Y,"P",{});var io=n(ws);Rk=l(io,"In the previous example, no matter how many instances of the "),hn=a(io,"CODE",{class:!0});var Sx=n(hn);Vk=l(Sx,"App"),Sx.forEach(t),Bk=l(io," component, the value of the variable "),vn=a(io,"CODE",{class:!0});var Tx=n(vn);Wk=l(Tx,"name"),Tx.forEach(t),Uk=l(io," is the same and unchanged across the instances:"),io.forEach(t),Jk=c(Y),kn=a(Y,"DIV",{class:!0});var u3=n(kn);u3.forEach(t),Gk=c(Y),X=a(Y,"P",{});var Js=n(X);qk=l(Js,"But, in this example, the variable "),un=a(Js,"CODE",{class:!0});var Lx=n(un);zk=l(Lx,"name"),Lx.forEach(t),Yk=l(Js," can be changed within 1 instance of the component, so the declaration of the variable "),yn=a(Js,"CODE",{class:!0});var Hx=n(yn);Kk=l(Hx,"name"),Hx.forEach(t),Fk=l(Js," is now moved into the "),fn=a(Js,"CODE",{class:!0});var Cx=n(fn);Qk=l(Cx,"instance"),Cx.forEach(t),Zk=l(Js," function:"),Js.forEach(t),Xk=c(Y),mn=a(Y,"DIV",{class:!0});var y3=n(mn);y3.forEach(t),Y.forEach(t),Ni=c(p),S=a(p,"SECTION",{});var D=n(S);Tl=a(D,"H3",{});var Ix=n(Tl);ce=a(Ix,"A",{href:!0,id:!0});var Ox=n(ce);su=l(Ox,"instance($$self, $$props, $$invalidate)"),Ox.forEach(t),Ix.forEach(t),tu=c(D),bs=a(D,"P",{});var ro=n(bs);eu=l(ro,"The "),gn=a(ro,"CODE",{class:!0});var Dx=n(gn);au=l(Dx,"instance"),Dx.forEach(t),nu=l(ro," function returns a list of "),Ll=a(ro,"EM",{});var Px=n(Ll);ou=l(Px,"instance"),Px.forEach(t),lu=l(ro," variables, which are variables that are:"),ro.forEach(t),iu=c(D),pe=a(D,"UL",{});var Sr=n(pe);Hl=a(Sr,"LI",{});var Mx=n(Hl);ru=l(Mx,"referenced in the template"),Mx.forEach(t),cu=c(Sr),Cl=a(Sr,"LI",{});var Ax=n(Cl);pu=l(Ax,"mutated or reassigned, (can be changed within 1 instance of the component)"),Ax.forEach(t),Sr.forEach(t),du=c(D),de=a(D,"P",{});var Tr=n(de);hu=l(Tr,"In Svelte, we call this list of instance variables, "),Il=a(Tr,"STRONG",{});var Nx=n(Il);vu=l(Nx,"ctx"),Nx.forEach(t),ku=l(Tr,"."),Tr.forEach(t),uu=c(D),ss=a(D,"P",{});var Gs=n(ss);yu=l(Gs,"In the "),xn=a(Gs,"CODE",{class:!0});var $x=n(xn);fu=l($x,"init"),$x.forEach(t),mu=l(Gs," function, Svelte calls the "),En=a(Gs,"CODE",{class:!0});var jx=n(En);gu=l(jx,"instance"),jx.forEach(t),xu=l(Gs," function to create "),Ol=a(Gs,"STRONG",{});var Rx=n(Ol);Eu=l(Rx,"ctx"),Rx.forEach(t),_u=l(Gs,", and uses it to create the fragment for the component:"),Gs.forEach(t),wu=c(D),_n=a(D,"DIV",{class:!0});var f3=n(_n);f3.forEach(t),bu=c(D),ts=a(D,"P",{});var qs=n(ts);Su=l(qs,"Now, instead of accessing the variable "),wn=a(qs,"CODE",{class:!0});var Vx=n(wn);Tu=l(Vx,"name"),Vx.forEach(t),Lu=l(qs," outside of the component, we refer to the variable "),bn=a(qs,"CODE",{class:!0});var Bx=n(bn);Hu=l(Bx,"name"),Bx.forEach(t),Cu=l(qs," passed via the "),Dl=a(qs,"STRONG",{});var Wx=n(Dl);Iu=l(Wx,"ctx"),Wx.forEach(t),Ou=l(qs,":"),qs.forEach(t),Du=c(D),Sn=a(D,"DIV",{class:!0});var m3=n(Sn);m3.forEach(t),Pu=c(D),Tn=a(D,"P",{});var Cm=n(Tn);Mu=l(Cm,"The reason that ctx is an array instead of a map or an object is because of an optimisation related to bitmask, you can see "),he=a(Cm,"A",{href:!0,rel:!0});var Ux=n(he);Au=l(Ux,"the discussion about it here"),Ux.forEach(t),Cm.forEach(t),D.forEach(t),$i=c(p),H=a(p,"SECTION",{});var A=n(H);Pl=a(A,"H3",{});var Jx=n(Pl);ve=a(Jx,"A",{href:!0,id:!0});var Gx=n(ve);Nu=l(Gx,"$$invalidate"),Gx.forEach(t),Jx.forEach(t),$u=c(A),ke=a(A,"P",{});var Lr=n(ke);ju=l(Lr,"The secret behind the system of reactivity in Svelte is the "),Ln=a(Lr,"CODE",{class:!0});var qx=n(Ln);Ru=l(qx,"$$invalidate"),qx.forEach(t),Vu=l(Lr," function."),Lr.forEach(t),Bu=c(A),Ml=a(A,"P",{});var zx=n(Ml);Wu=l(zx,"Every variable that has been"),zx.forEach(t),Uu=c(A),ue=a(A,"UL",{});var Hr=n(ue);Al=a(Hr,"LI",{});var Yx=n(Al);Ju=l(Yx,"reassigned or mutated"),Yx.forEach(t),Gu=c(Hr),Nl=a(Hr,"LI",{});var Kx=n(Nl);qu=l(Kx,"referenced in the template"),Kx.forEach(t),Hr.forEach(t),zu=c(A),ye=a(A,"P",{});var Cr=n(ye);Yu=l(Cr,"will have the "),Hn=a(Cr,"CODE",{class:!0});var Fx=n(Hn);Ku=l(Fx,"$$invalidate"),Fx.forEach(t),Fu=l(Cr," function inserted right after the assignment or mutation:"),Cr.forEach(t),Qu=c(A),Cn=a(A,"DIV",{class:!0});var g3=n(Cn);g3.forEach(t),Zu=c(A),fe=a(A,"P",{});var Ir=n(fe);Xu=l(Ir,"The "),In=a(Ir,"CODE",{class:!0});var Qx=n(In);sy=l(Qx,"$$invalidate"),Qx.forEach(t),ty=l(Ir," function marks the variable dirty and schedules an update for the component:"),Ir.forEach(t),ey=c(A),On=a(A,"DIV",{class:!0});var x3=n(On);x3.forEach(t),A.forEach(t),ji=c(p),m=a(p,"SECTION",{});var T=n(m);$l=a(T,"H3",{});var Zx=n($l);me=a(Zx,"A",{href:!0,id:!0});var Xx=n(me);ay=l(Xx,"Adding event listeners"),Xx.forEach(t),Zx.forEach(t),ny=c(T),jl=a(T,"P",{});var s2=n(jl);oy=l(s2,"Let's now add an event listener"),s2.forEach(t),ly=c(T),Dn=a(T,"DIV",{class:!0});var E3=n(Dn);E3.forEach(t),iy=c(T),Rl=a(T,"P",{});var t2=n(Rl);ge=a(t2,"A",{href:!0,rel:!0});var e2=n(ge);ry=l(e2,"Svelte REPL"),e2.forEach(t),t2.forEach(t),cy=c(T),Vl=a(T,"P",{});var a2=n(Vl);py=l(a2,"And observe the difference:"),a2.forEach(t),dy=c(T),Pn=a(T,"DIV",{class:!0});var _3=n(Pn);_3.forEach(t),hy=c(T),Bl=a(T,"P",{});var n2=n(Bl);vy=l(n2,"Some observations:"),n2.forEach(t),ky=c(T),xe=a(T,"UL",{});var Or=n(xe);Mn=a(Or,"LI",{});var Im=n(Mn);An=a(Im,"CODE",{class:!0});var o2=n(An);uy=l(o2,"instance"),o2.forEach(t),yy=l(Im," function now returns 2 variables instead of 1"),Im.forEach(t),fy=c(Or),$s=a(Or,"LI",{});var mi=n($s);my=l(mi,"Listen to click event during "),Wl=a(mi,"STRONG",{});var l2=n(Wl);gy=l(l2,"mount"),l2.forEach(t),xy=l(mi," and dispose it in "),Ul=a(mi,"STRONG",{});var i2=n(Ul);Ey=l(i2,"destroy"),i2.forEach(t),mi.forEach(t),Or.forEach(t),_y=c(T),es=a(T,"P",{});var zs=n(es);wy=l(zs,"As I've mentioned earlier, "),Nn=a(zs,"CODE",{class:!0});var r2=n(Nn);by=l(r2,"instance"),r2.forEach(t),Sy=l(zs," function returns variables that are "),Jl=a(zs,"STRONG",{});var c2=n(Jl);Ty=l(c2,"referenced in the template"),c2.forEach(t),Ly=l(zs," and that are "),Gl=a(zs,"STRONG",{});var p2=n(Gl);Hy=l(p2,"mutated or reassigned"),p2.forEach(t),Cy=l(zs,"."),zs.forEach(t),Iy=c(T),as=a(T,"P",{});var Ys=n(as);Oy=l(Ys,"Since we've just referenced the "),$n=a(Ys,"CODE",{class:!0});var d2=n($n);Dy=l(d2,"update"),d2.forEach(t),Py=l(Ys," function in the template, it is now returned in the "),jn=a(Ys,"CODE",{class:!0});var h2=n(jn);My=l(h2,"instance"),h2.forEach(t),Ay=l(Ys," function as part of the "),ql=a(Ys,"STRONG",{});var v2=n(ql);Ny=l(v2,"ctx"),v2.forEach(t),$y=l(Ys,"."),Ys.forEach(t),jy=c(T),zl=a(T,"P",{});var k2=n(zl);Ry=l(k2,"Svelte tries generate as compact JavaScript output as possible, not returning an extra variable if it is not necessary."),k2.forEach(t),T.forEach(t),Ri=c(p),g=a(p,"SECTION",{});var L=n(g);Yl=a(L,"H3",{});var u2=n(Yl);Ee=a(u2,"A",{href:!0,id:!0});var y2=n(Ee);Vy=l(y2,"listen and dispose"),y2.forEach(t),u2.forEach(t),By=c(L),Ss=a(L,"P",{});var co=n(Ss);Wy=l(co,"Whenever you add "),_e=a(co,"A",{href:!0,rel:!0});var f2=n(_e);Uy=l(f2,"an event listener"),f2.forEach(t),Jy=l(co," in Svelte, Svelte will inject code to add an "),we=a(co,"A",{href:!0,rel:!0});var m2=n(we);Gy=l(m2,"event listener"),m2.forEach(t),qy=l(co," and remove it when the DOM fragment is removed from the DOM."),co.forEach(t),zy=c(L),Kl=a(L,"P",{});var g2=n(Kl);Yy=l(g2,"Try adding more event listeners,"),g2.forEach(t),Ky=c(L),Rn=a(L,"DIV",{class:!0});var w3=n(Rn);w3.forEach(t),Fy=c(L),Fl=a(L,"P",{});var x2=n(Fl);be=a(x2,"A",{href:!0,rel:!0});var E2=n(be);Qy=l(E2,"Svelte REPL"),E2.forEach(t),x2.forEach(t),Zy=c(L),Ql=a(L,"P",{});var _2=n(Ql);Xy=l(_2,"and observe the compiled output:"),_2.forEach(t),sf=c(L),Vn=a(L,"DIV",{class:!0});var b3=n(Vn);b3.forEach(t),tf=c(L),Zl=a(L,"P",{});var w2=n(Zl);ef=l(w2,"Instead of declaring and creating a new variable to remove each event listener, Svelte assigns all of them to an array:"),w2.forEach(t),af=c(L),Bn=a(L,"DIV",{class:!0});var S3=n(Bn);S3.forEach(t),nf=c(L),Xl=a(L,"P",{});var b2=n(Xl);of=l(b2,"Minification can compact the variable name, but you can't remove the brackets."),b2.forEach(t),lf=c(L),Se=a(L,"P",{});var Dr=n(Se);rf=l(Dr,"Again, this is another great example of where Svelte tries to generate compact JavaScript output. Svelte does not create the "),Wn=a(Dr,"CODE",{class:!0});var S2=n(Wn);cf=l(S2,"dispose"),S2.forEach(t),pf=l(Dr," array when there's only 1 event listener."),Dr.forEach(t),L.forEach(t),Vi=c(p),G=a(p,"SECTION",{});var Ks=n(G);si=a(Ks,"H2",{});var T2=n(si);Te=a(T2,"A",{href:!0,id:!0});var L2=n(Te);df=l(L2,"Summary"),L2.forEach(t),T2.forEach(t),hf=c(Ks),ti=a(Ks,"P",{});var H2=n(ti);vf=l(H2,"The Svelte syntax is a superset of HTML."),H2.forEach(t),kf=c(Ks),ei=a(Ks,"P",{});var C2=n(ei);uf=l(C2,"When you write a Svelte component, the Svelte compiler analyses your code and generates optimised JavaScript code output."),C2.forEach(t),yf=c(Ks),ai=a(Ks,"P",{});var I2=n(ai);ff=l(I2,"The output can be divided into 3 segments:"),I2.forEach(t),Ks.forEach(t),Bi=c(p),js=a(p,"SECTION",{});var Pr=n(js);ni=a(Pr,"H3",{});var O2=n(ni);Le=a(O2,"A",{href:!0,id:!0});var D2=n(Le);mf=l(D2,"1. create_fragment"),D2.forEach(t),O2.forEach(t),gf=c(Pr),oi=a(Pr,"UL",{});var P2=n(oi);li=a(P2,"LI",{});var M2=n(li);xf=l(M2,"Returns a fragment, which is an instruction manual on how to build the DOM fragment for the component"),M2.forEach(t),P2.forEach(t),Pr.forEach(t),Wi=c(p),Rs=a(p,"SECTION",{});var Mr=n(Rs);ii=a(Mr,"H3",{});var A2=n(ii);He=a(A2,"A",{href:!0,id:!0});var N2=n(He);Ef=l(N2,"2. instance"),N2.forEach(t),A2.forEach(t),_f=c(Mr),Ts=a(Mr,"UL",{});var po=n(Ts);Ce=a(po,"LI",{});var Ar=n(Ce);wf=l(Ar,"Most of the code written in the "),Un=a(Ar,"CODE",{class:!0});var $2=n(Un);bf=l($2,"<script>"),$2.forEach(t),Sf=l(Ar," tag is in here."),Ar.forEach(t),Tf=c(po),ri=a(po,"LI",{});var j2=n(ri);Lf=l(j2,"Returns a list of instance variables that are referenced in the template"),j2.forEach(t),Hf=c(po),Jn=a(po,"LI",{});var Om=n(Jn);Gn=a(Om,"CODE",{class:!0});var R2=n(Gn);Cf=l(R2,"$$invalidate"),R2.forEach(t),If=l(Om," is inserted after every assignment and mutation of the instance variable"),Om.forEach(t),po.forEach(t),Mr.forEach(t),Ui=c(p),q=a(p,"SECTION",{});var Fs=n(q);ci=a(Fs,"H3",{});var V2=n(ci);Ie=a(V2,"A",{href:!0,id:!0});var B2=n(Ie);Of=l(B2,"3. class App extends SvelteComponent"),B2.forEach(t),V2.forEach(t),Df=c(Fs),Ls=a(Fs,"UL",{});var ho=n(Ls);Hs=a(ho,"LI",{});var vo=n(Hs);Pf=l(vo,"Initialise the component with "),qn=a(vo,"CODE",{class:!0});var W2=n(qn);Mf=l(W2,"create_fragment"),W2.forEach(t),Af=l(vo," and "),zn=a(vo,"CODE",{class:!0});var U2=n(zn);Nf=l(U2,"instance"),U2.forEach(t),$f=l(vo," function"),vo.forEach(t),jf=c(ho),pi=a(ho,"LI",{});var J2=n(pi);Rf=l(J2,"Sets up the component internals"),J2.forEach(t),Vf=c(ho),Yn=a(ho,"LI",{});var Dm=n(Yn);Bf=l(Dm,"Provides the "),Oe=a(Dm,"A",{href:!0,rel:!0});var G2=n(Oe);Wf=l(G2,"Component API"),G2.forEach(t),Dm.forEach(t),ho.forEach(t),Uf=c(Fs),di=a(Fs,"P",{});var q2=n(di);Jf=l(q2,"Svelte strives to generate as compact JavaScript as possible, for example:"),q2.forEach(t),Gf=c(Fs),ns=a(Fs,"UL",{});var Qs=n(ns);De=a(Qs,"LI",{});var Nr=n(De);qf=l(Nr,"Breaking text content of "),Kn=a(Nr,"CODE",{class:!0});var z2=n(Kn);zf=l(z2,"h1"),z2.forEach(t),Yf=l(Nr," into separate text nodes only when part of the text can be updated"),Nr.forEach(t),Kf=c(Qs),Cs=a(Qs,"LI",{});var ko=n(Cs);Ff=l(ko,"Not defining "),Fn=a(ko,"CODE",{class:!0});var Y2=n(Fn);Qf=l(Y2,"create_fragment"),Y2.forEach(t),Zf=l(ko," or "),Qn=a(ko,"CODE",{class:!0});var K2=n(Qn);Xf=l(K2,"instance"),K2.forEach(t),sm=l(ko," function when it is not needed"),ko.forEach(t),tm=c(Qs),Pe=a(Qs,"LI",{});var $r=n(Pe);em=l($r,"Generate "),Zn=a($r,"CODE",{class:!0});var F2=n(Zn);am=l(F2,"dispose"),F2.forEach(t),nm=l($r," as an array or a function, depending on the number of event listeners."),$r.forEach(t),om=c(Qs),hi=a(Qs,"LI",{});var Q2=n(hi);lm=l(Q2,"..."),Q2.forEach(t),Qs.forEach(t),Fs.forEach(t),Ji=c(p),j=a(p,"SECTION",{});var us=n(j);vi=a(us,"H2",{});var Z2=n(vi);Me=a(Z2,"A",{href:!0,id:!0});var X2=n(Me);im=l(X2,"Closing Note"),X2.forEach(t),Z2.forEach(t),rm=c(us),ki=a(us,"P",{});var sE=n(ki);cm=l(sE,"We've covered the basic structure of the Svelte's compiled output, and this is just the beginning."),sE.forEach(t),pm=c(us),Ae=a(us,"P",{});var jr=n(Ae);dm=l(jr,"If you wish to know more, "),Ne=a(jr,"A",{href:!0,rel:!0});var tE=n(Ne);hm=l(tE,"follow me on Twitter"),tE.forEach(t),vm=l(jr,"."),jr.forEach(t),km=c(us),os=a(us,"P",{});var Zs=n(os);um=l(Zs,"I'll post it on Twitter when the next part is ready, where I'll be covering "),$e=a(Zs,"A",{href:!0,rel:!0});var eE=n($e);ym=l(eE,"logic blocks"),eE.forEach(t),fm=l(Zs,", "),je=a(Zs,"A",{href:!0,rel:!0});var aE=n(je);mm=l(aE,"slots"),aE.forEach(t),gm=l(Zs,", "),Re=a(Zs,"A",{href:!0,rel:!0});var nE=n(Re);xm=l(nE,"context"),nE.forEach(t),Em=l(Zs,", and many others."),Zs.forEach(t),_m=c(us),ui=a(us,"P",{});var oE=n(ui);Ve=a(oE,"STRONG",{});var Rr=n(Ve);wm=l(Rr,"\u27A1 \u27A1  Continue reading on "),Xn=a(Rr,"A",{href:!0});var lE=n(Xn);bm=l(lE,"Part 2"),lE.forEach(t),Sm=l(Rr,"."),Rr.forEach(t),oE.forEach(t),us.forEach(t),this.h()},h(){i(_,"href","#background"),i(_,"id","background"),i(Xs,"href","https://twitter.com/swyx"),i(Xs,"rel","nofollow"),i(st,"href","https://careers.shopee.sg/about/"),i(st,"rel","nofollow"),i(tt,"href","https://grnh.se/32e5b3532"),i(tt,"rel","nofollow"),i(et,"href","https://www.swyx.io/speaking/svelte-compile-lightning/"),i(et,"rel","nofollow"),i(at,"href","https://www.youtube.com/watch?v=FNmvcswdjV8"),i(at,"rel","nofollow"),i(nt,"href","https://reactknowledgeable.org/"),i(nt,"rel","nofollow"),i(ot,"href","#introduction"),i(ot,"id","introduction"),i(lt,"href","#creating-an-element"),i(lt,"id","creating-an-element"),i(Ge,"class","code-section"),i(it,"href","#updating-an-element"),i(it,"id","updating-an-element"),i(qe,"class","code-section"),i(rt,"href","#removing-an-element"),i(rt,"id","removing-an-element"),i(ze,"class","code-section"),i(ct,"href","#adding-style-to-an-element"),i(ct,"id","adding-style-to-an-element"),i(Ye,"class","code-section"),i(pt,"href","#listen-for-click-events-on-an-element"),i(pt,"id","listen-for-click-events-on-an-element"),i(Ke,"class","code-section"),i(dt,"href","#svelte-syntax"),i(dt,"id","svelte-syntax"),i(vt,"href","https://svelte.dev/tutorial/basics"),i(vt,"rel","nofollow"),i(Fe,"class","code-section"),i(kt,"href","https://svelte.dev/repl/99aeea705b1e48fe8610b3ccee948280"),i(kt,"rel","nofollow"),i(Qe,"class","inline"),i(Ze,"class","code-section"),i(yt,"href","https://svelte.dev/repl/cf54441399864c0f9b0cb25710a5fe9b"),i(yt,"rel","nofollow"),i(Xe,"class","code-section"),i(ft,"href","https://svelte.dev/repl/c149ca960b0444948dc0c00a9175bcb3"),i(ft,"rel","nofollow"),i(sa,"class","inline"),i(ta,"class","code-section"),i(gt,"href","https://svelte.dev/repl/1da1dcaf51814ed09d2341ea7915f0a1"),i(gt,"rel","nofollow"),i(xt,"href","https://www.w3schools.com/js/js_assignment.asp"),i(xt,"rel","nofollow"),i(aa,"class","code-section"),i(Et,"href","https://svelte.dev/repl/7bff4b7746df4007a51155d2006ce724"),i(Et,"rel","nofollow"),i(_t,"href","#compile-svelte-in-your-head"),i(_t,"id","compile-svelte-in-your-head"),i(na,"class","code-section"),i(wt,"href","https://svelte.dev/repl/99aeea705b1e48fe8610b3ccee948280?version=3.19.1"),i(wt,"rel","nofollow"),i(oa,"class","code-section"),i(la,"class","inline"),i(ia,"class","inline"),i(St,"href","#create-fragment"),i(St,"id","create-fragment"),i(ra,"class","inline"),i(ca,"class","inline"),i(Ht,"href","#c"),i(Ht,"id","c"),i(pa,"class","inline"),i(da,"class","code-section"),i(Ot,"href","#m-target-anchor"),i(Ot,"id","m-target-anchor"),i(ha,"class","inline"),i(va,"class","inline"),i(ka,"class","code-section"),i(Pt,"href","#d-detaching"),i(Pt,"id","d-detaching"),i(ua,"class","inline"),i(ya,"class","code-section"),i($t,"href","https://alistapart.com/article/javascript-minification-part-ii/#section3"),i($t,"rel","nofollow"),i(jt,"href","#export-default-class-app-extends-sveltecomponent"),i(jt,"id","export-default-class-app-extends-sveltecomponent"),i(Vt,"href","https://svelte.dev/docs#Client-side_component_API"),i(Vt,"rel","nofollow"),i(fa,"class","inline"),i(ma,"class","inline"),i(ga,"class","code-section"),i(Ut,"href","https://svelte.dev/repl/1f29ce52adf446fc9116bb957b7200ec?version=3.19.1"),i(Ut,"rel","nofollow"),i(xa,"class","code-section"),i(Ea,"class","inline"),i(_a,"class","inline"),i(wa,"class","inline"),i(ba,"class","inline"),i(Sa,"class","inline"),i(Ta,"class","inline"),i(La,"class","inline"),i(Ha,"class","inline"),i(Yt,"href","#adding-data"),i(Yt,"id","adding-data"),i(Ca,"class","code-section"),i(Kt,"href","https://svelte.dev/repl/c149ca960b0444948dc0c00a9175bcb3?version=3.19.1"),i(Kt,"rel","nofollow"),i(Ia,"class","code-section"),i(Oa,"class","inline"),i(Pa,"class","inline"),i(Zt,"href","#updating-data"),i(Zt,"id","updating-data"),i(Ma,"class","inline"),i(Aa,"class","code-section"),i(se,"href","https://svelte.dev/repl/3841485f4d224774ba42617e4e964968?version=3.19.1"),i(se,"rel","nofollow"),i(Na,"class","code-section"),i($a,"class","inline"),i(ja,"class","inline"),i(Ra,"class","inline"),i(Va,"class","inline"),i(Ba,"class","inline"),i(Wa,"class","inline"),i(Ua,"class","inline"),i(Ja,"class","inline"),i(Ga,"class","inline"),i(qa,"class","inline"),i(za,"class","inline"),i(Ya,"class","inline"),i(Ka,"class","inline"),i(Qa,"class","inline"),i(Za,"class","inline"),i(Xa,"class","inline"),i(sn,"class","inline"),i(tn,"class","inline"),i(en,"class","inline"),i(an,"class","inline"),i(nn,"class","inline"),i(le,"href","#p-ctx-dirty"),i(le,"id","p-ctx-dirty"),i(on,"class","inline"),i(ln,"class","inline"),i(re,"href","#instance-variable"),i(re,"id","instance-variable"),i(rn,"class","inline"),i(cn,"class","inline"),i(pn,"class","inline"),i(dn,"class","inline"),i(hn,"class","inline"),i(vn,"class","inline"),i(kn,"class","code-section"),i(un,"class","inline"),i(yn,"class","inline"),i(fn,"class","inline"),i(mn,"class","code-section"),i(ce,"href","#instance-self-props-invalidate"),i(ce,"id","instance-self-props-invalidate"),i(gn,"class","inline"),i(xn,"class","inline"),i(En,"class","inline"),i(_n,"class","code-section"),i(wn,"class","inline"),i(bn,"class","inline"),i(Sn,"class","code-section"),i(he,"href","https://github.com/sveltejs/svelte/issues/1922"),i(he,"rel","nofollow"),i(ve,"href","#invalidate"),i(ve,"id","invalidate"),i(Ln,"class","inline"),i(Hn,"class","inline"),i(Cn,"class","code-section"),i(In,"class","inline"),i(On,"class","code-section"),i(me,"href","#adding-event-listeners"),i(me,"id","adding-event-listeners"),i(Dn,"class","code-section"),i(ge,"href","https://svelte.dev/repl/5b12ff52c2874f4dbb6405d9133b34da?version=3.19.1"),i(ge,"rel","nofollow"),i(Pn,"class","code-section"),i(An,"class","inline"),i(Nn,"class","inline"),i($n,"class","inline"),i(jn,"class","inline"),i(Ee,"href","#listen-and-dispose"),i(Ee,"id","listen-and-dispose"),i(_e,"href","https://svelte.dev/tutorial/dom-events"),i(_e,"rel","nofollow"),i(we,"href","https://developer.mozilla.org/en-US/docs/Web/API/EventListener"),i(we,"rel","nofollow"),i(Rn,"class","code-section"),i(be,"href","https://svelte.dev/repl/efde6f2aaf624e708767f1bd3e94e479?version=3.19.1"),i(be,"rel","nofollow"),i(Vn,"class","code-section"),i(Bn,"class","code-section"),i(Wn,"class","inline"),i(Te,"href","#summary"),i(Te,"id","summary"),i(Le,"href","#1-create-fragment"),i(Le,"id","1-create-fragment"),i(He,"href","#2-instance"),i(He,"id","2-instance"),i(Un,"class","inline"),i(Gn,"class","inline"),i(Ie,"href","#3-class-app-extends-sveltecomponent"),i(Ie,"id","3-class-app-extends-sveltecomponent"),i(qn,"class","inline"),i(zn,"class","inline"),i(Oe,"href","https://svelte.dev/docs#Client-side_component_API"),i(Oe,"rel","nofollow"),i(Kn,"class","inline"),i(Fn,"class","inline"),i(Qn,"class","inline"),i(Zn,"class","inline"),i(Me,"href","#closing-note"),i(Me,"id","closing-note"),i(Ne,"href","https://twitter.com/lihautan"),i(Ne,"rel","nofollow"),i($e,"href","https://svelte.dev/tutorial/if-blocks"),i($e,"rel","nofollow"),i(je,"href","https://svelte.dev/tutorial/slots"),i(je,"rel","nofollow"),i(Re,"href","https://svelte.dev/tutorial/context-api"),i(Re,"rel","nofollow"),i(Xn,"href","/compile-svelte-in-your-head-part-2/")},m(p,d){hE(E,p,d),h(p,K,d),h(p,I,d),s(I,ys),s(ys,_),s(_,F),s(I,Je),s(I,Q),s(Q,Vr),s(Q,Xs),s(Xs,Br),s(Q,Wr),s(Q,st),s(st,Ur),s(Q,Jr),s(Q,tt),s(tt,Gr),s(Q,qr),s(I,zr),s(I,Z),s(Z,Yr),s(Z,et),s(et,Kr),s(Z,Fr),s(Z,at),s(at,Qr),s(Z,Zr),s(Z,nt),s(nt,Xr),s(Z,sc),s(I,tc),s(I,uo),s(uo,ec),h(p,gi,d),h(p,Is,d),s(Is,yo),s(yo,ot),s(ot,ac),s(Is,nc),s(Is,fo),s(fo,oc),h(p,xi,d),h(p,Os,d),s(Os,mo),s(mo,lt),s(lt,lc),s(Os,ic),s(Os,Ge),Ge.innerHTML=yE,h(p,Ei,d),h(p,Ds,d),s(Ds,go),s(go,it),s(it,rc),s(Ds,cc),s(Ds,qe),qe.innerHTML=fE,h(p,_i,d),h(p,Ps,d),s(Ps,xo),s(xo,rt),s(rt,pc),s(Ps,dc),s(Ps,ze),ze.innerHTML=mE,h(p,wi,d),h(p,Ms,d),s(Ms,Eo),s(Eo,ct),s(ct,hc),s(Ms,vc),s(Ms,Ye),Ye.innerHTML=gE,h(p,bi,d),h(p,U,d),s(U,_o),s(_o,pt),s(pt,kc),s(U,uc),s(U,Ke),Ke.innerHTML=xE,s(U,yc),s(U,wo),s(wo,fc),s(U,mc),s(U,bo),s(bo,gc),h(p,Si,d),h(p,v,d),s(v,So),s(So,dt),s(dt,xc),s(v,Ec),s(v,To),s(To,_c),s(v,wc),s(v,Lo),s(Lo,ht),s(ht,bc),s(ht,vt),s(vt,Sc),s(ht,Tc),s(v,Lc),s(v,Ho),s(Ho,Hc),s(v,Cc),s(v,Fe),Fe.innerHTML=EE,s(v,Ic),s(v,Co),s(Co,kt),s(kt,Oc),s(v,Dc),s(v,ut),s(ut,Pc),s(ut,Qe),s(Qe,Mc),s(ut,Ac),s(v,Nc),s(v,Ze),Ze.innerHTML=_E,s(v,$c),s(v,Io),s(Io,yt),s(yt,jc),s(v,Rc),s(v,Oo),s(Oo,Vc),s(v,Bc),s(v,Do),s(Do,Wc),s(v,Uc),s(v,Xe),Xe.innerHTML=wE,s(v,Jc),s(v,Po),s(Po,ft),s(ft,Gc),s(v,qc),s(v,Mo),s(Mo,zc),s(v,Yc),s(v,mt),s(mt,Kc),s(mt,sa),s(sa,Fc),s(mt,Qc),s(v,Zc),s(v,ta),ta.innerHTML=bE,s(v,Xc),s(v,Ao),s(Ao,gt),s(gt,sp),s(v,tp),s(v,ea),s(ea,ep),s(ea,xt),s(xt,ap),s(v,np),s(v,aa),aa.innerHTML=SE,s(v,op),s(v,No),s(No,Et),s(Et,lp),s(v,ip),s(v,$o),s($o,rp),h(p,Ti,d),h(p,w,d),s(w,jo),s(jo,_t),s(_t,cp),s(w,pp),s(w,Ro),s(Ro,dp),s(w,hp),s(w,Vo),s(Vo,vp),s(w,kp),s(w,Bo),s(Bo,up),s(w,yp),s(w,na),na.innerHTML=TE,s(w,fp),s(w,Wo),s(Wo,wt),s(wt,mp),s(w,gp),s(w,Uo),s(Uo,xp),s(w,Ep),s(w,oa),oa.innerHTML=LE,s(w,_p),s(w,Jo),s(Jo,wp),s(w,bp),s(w,bt),s(bt,Go),s(Go,la),s(la,Sp),s(bt,Tp),s(bt,qo),s(qo,ia),s(ia,Lp),h(p,Li,d),h(p,J,d),s(J,zo),s(zo,St),s(St,Hp),s(J,Cp),s(J,Yo),s(Yo,Ip),s(J,Op),s(J,Tt),s(Tt,Dp),s(Tt,ra),s(ra,Pp),s(Tt,Mp),s(J,Ap),s(J,Lt),s(Lt,Np),s(Lt,ca),s(ca,$p),s(Lt,jp),h(p,Hi,d),h(p,N,d),s(N,Ko),s(Ko,Ht),s(Ht,Rp),s(N,Vp),s(N,Ct),s(Ct,Bp),s(Ct,Fo),s(Fo,Wp),s(Ct,Up),s(N,Jp),s(N,Qo),s(Qo,Gp),s(N,qp),s(N,It),s(It,zp),s(It,pa),s(pa,Yp),s(It,Kp),s(N,Fp),s(N,da),da.innerHTML=HE,h(p,Ci,d),h(p,$,d),s($,Zo),s(Zo,Ot),s(Ot,Qp),s($,Zp),s($,Dt),s(Dt,Xp),s(Dt,Xo),s(Xo,sd),s(Dt,td),s($,ed),s($,sl),s(sl,ad),s($,nd),s($,fs),s(fs,od),s(fs,ha),s(ha,ld),s(fs,id),s(fs,va),s(va,rd),s(fs,cd),s($,pd),s($,ka),ka.innerHTML=CE,h(p,Ii,d),h(p,P,d),s(P,tl),s(tl,Pt),s(Pt,dd),s(P,hd),s(P,Mt),s(Mt,vd),s(Mt,el),s(el,kd),s(Mt,ud),s(P,yd),s(P,al),s(al,fd),s(P,md),s(P,At),s(At,gd),s(At,ua),s(ua,xd),s(At,Ed),s(P,_d),s(P,ya),ya.innerHTML=IE,s(P,wd),s(P,nl),s(nl,Nt),s(Nt,bd),s(Nt,$t),s($t,Sd),s(Nt,Td),h(p,Oi,d),h(p,y,d),s(y,ol),s(ol,jt),s(jt,Ld),s(y,Hd),s(y,Rt),s(Rt,Cd),s(Rt,Vt),s(Vt,Id),s(Rt,Od),s(y,Dd),s(y,Bt),s(Bt,Pd),s(Bt,fa),s(fa,Md),s(Bt,Ad),s(y,Nd),s(y,Wt),s(Wt,$d),s(Wt,ma),s(ma,jd),s(Wt,Rd),s(y,Vd),s(y,ga),ga.innerHTML=OE,s(y,Bd),s(y,ll),s(ll,Ut),s(Ut,Wd),s(y,Ud),s(y,xa),xa.innerHTML=DE,s(y,Jd),s(y,ms),s(ms,Gd),s(ms,Ea),s(Ea,qd),s(ms,zd),s(ms,_a),s(_a,Yd),s(ms,Kd),s(y,Fd),s(y,Jt),s(Jt,Qd),s(Jt,wa),s(wa,Zd),s(Jt,Xd),s(y,sh),s(y,gs),s(gs,xs),s(xs,th),s(xs,ba),s(ba,eh),s(xs,ah),s(xs,Sa),s(Sa,nh),s(xs,oh),s(gs,lh),s(gs,il),s(il,ih),s(gs,rh),s(gs,rl),s(rl,ch),s(y,ph),s(y,Gt),s(Gt,dh),s(Gt,Ta),s(Ta,hh),s(Gt,vh),s(y,kh),s(y,qt),s(qt,uh),s(qt,La),s(La,yh),s(qt,fh),s(y,mh),s(y,zt),s(zt,gh),s(zt,Ha),s(Ha,xh),s(zt,Eh),h(p,Di,d),h(p,b,d),s(b,cl),s(cl,Yt),s(Yt,_h),s(b,wh),s(b,pl),s(pl,bh),s(b,Sh),s(b,Ca),Ca.innerHTML=PE,s(b,Th),s(b,dl),s(dl,Kt),s(Kt,Lh),s(b,Hh),s(b,hl),s(hl,Ch),s(b,Ih),s(b,Ia),Ia.innerHTML=ME,s(b,Oh),s(b,vl),s(vl,Dh),s(b,Ph),s(b,Ft),s(Ft,Qt),s(Qt,Mh),s(Qt,Oa),s(Oa,Ah),s(Qt,Nh),s(Ft,$h),s(Ft,Da),s(Da,Pa),s(Pa,jh),s(Da,Rh),s(b,Vh),s(b,kl),s(kl,Bh),h(p,Pi,d),h(p,u,d),s(u,ul),s(ul,Zt),s(Zt,Wh),s(u,Uh),s(u,Xt),s(Xt,Jh),s(Xt,Ma),s(Ma,Gh),s(Xt,qh),s(u,zh),s(u,Aa),Aa.innerHTML=AE,s(u,Yh),s(u,yl),s(yl,se),s(se,Kh),s(u,Fh),s(u,fl),s(fl,Qh),s(u,Zh),s(u,Na),Na.innerHTML=NE,s(u,Xh),s(u,ml),s(ml,sv),s(u,tv),s(u,R),s(R,Es),s(Es,ev),s(Es,$a),s($a,av),s(Es,nv),s(Es,ja),s(ja,ov),s(Es,lv),s(R,iv),s(R,As),s(As,rv),s(As,Ra),s(Ra,cv),s(As,pv),s(As,Va),s(Va,dv),s(R,hv),s(R,te),s(te,vv),s(te,Ba),s(Ba,kv),s(te,uv),s(R,yv),s(R,_s),s(_s,fv),s(_s,Wa),s(Wa,mv),s(_s,gv),s(_s,Ua),s(Ua,xv),s(_s,Ev),s(R,_v),s(R,ls),s(ls,wv),s(ls,Ja),s(Ja,bv),s(ls,Sv),s(ls,Ga),s(Ga,Tv),s(ls,Lv),s(ls,qa),s(qa,Hv),s(u,Cv),s(u,gl),s(gl,Iv),s(u,Ov),s(u,ee),s(ee,Dv),s(ee,za),s(za,Pv),s(ee,Mv),s(u,Av),s(u,xl),s(xl,Nv),s(u,$v),s(u,V),s(V,ae),s(ae,jv),s(ae,Ya),s(Ya,Rv),s(ae,Vv),s(V,Bv),s(V,ne),s(ne,Wv),s(ne,Ka),s(Ka,Uv),s(ne,Jv),s(V,Gv),s(V,Fa),s(Fa,qv),s(Fa,Qa),s(Qa,zv),s(V,Yv),s(V,Ns),s(Ns,Kv),s(Ns,Za),s(Za,Fv),s(Ns,Qv),s(Ns,Xa),s(Xa,Zv),s(V,Xv),s(V,El),s(El,sk),s(u,tk),s(u,B),s(B,ek),s(B,sn),s(sn,ak),s(B,nk),s(B,tn),s(tn,ok),s(B,lk),s(B,en),s(en,ik),s(B,rk),s(B,an),s(an,ck),s(B,pk),s(u,dk),s(u,oe),s(oe,hk),s(oe,nn),s(nn,vk),s(oe,kk),h(p,Mi,d),h(p,is,d),s(is,_l),s(_l,le),s(le,uk),s(is,yk),s(is,ie),s(ie,fk),s(ie,wl),s(wl,mk),s(ie,gk),s(is,xk),s(is,rs),s(rs,bl),s(bl,Ek),s(rs,_k),s(rs,on),s(on,wk),s(rs,bk),s(rs,ln),s(ln,Sk),s(rs,Tk),h(p,Ai,d),h(p,M,d),s(M,Sl),s(Sl,re),s(re,Lk),s(M,Hk),s(M,W),s(W,Ck),s(W,rn),s(rn,Ik),s(W,Ok),s(W,cn),s(cn,Dk),s(W,Pk),s(W,pn),s(pn,Mk),s(W,Ak),s(W,dn),s(dn,Nk),s(W,$k),s(M,jk),s(M,ws),s(ws,Rk),s(ws,hn),s(hn,Vk),s(ws,Bk),s(ws,vn),s(vn,Wk),s(ws,Uk),s(M,Jk),s(M,kn),kn.innerHTML=$E,s(M,Gk),s(M,X),s(X,qk),s(X,un),s(un,zk),s(X,Yk),s(X,yn),s(yn,Kk),s(X,Fk),s(X,fn),s(fn,Qk),s(X,Zk),s(M,Xk),s(M,mn),mn.innerHTML=jE,h(p,Ni,d),h(p,S,d),s(S,Tl),s(Tl,ce),s(ce,su),s(S,tu),s(S,bs),s(bs,eu),s(bs,gn),s(gn,au),s(bs,nu),s(bs,Ll),s(Ll,ou),s(bs,lu),s(S,iu),s(S,pe),s(pe,Hl),s(Hl,ru),s(pe,cu),s(pe,Cl),s(Cl,pu),s(S,du),s(S,de),s(de,hu),s(de,Il),s(Il,vu),s(de,ku),s(S,uu),s(S,ss),s(ss,yu),s(ss,xn),s(xn,fu),s(ss,mu),s(ss,En),s(En,gu),s(ss,xu),s(ss,Ol),s(Ol,Eu),s(ss,_u),s(S,wu),s(S,_n),_n.innerHTML=RE,s(S,bu),s(S,ts),s(ts,Su),s(ts,wn),s(wn,Tu),s(ts,Lu),s(ts,bn),s(bn,Hu),s(ts,Cu),s(ts,Dl),s(Dl,Iu),s(ts,Ou),s(S,Du),s(S,Sn),Sn.innerHTML=VE,s(S,Pu),s(S,Tn),s(Tn,Mu),s(Tn,he),s(he,Au),h(p,$i,d),h(p,H,d),s(H,Pl),s(Pl,ve),s(ve,Nu),s(H,$u),s(H,ke),s(ke,ju),s(ke,Ln),s(Ln,Ru),s(ke,Vu),s(H,Bu),s(H,Ml),s(Ml,Wu),s(H,Uu),s(H,ue),s(ue,Al),s(Al,Ju),s(ue,Gu),s(ue,Nl),s(Nl,qu),s(H,zu),s(H,ye),s(ye,Yu),s(ye,Hn),s(Hn,Ku),s(ye,Fu),s(H,Qu),s(H,Cn),Cn.innerHTML=BE,s(H,Zu),s(H,fe),s(fe,Xu),s(fe,In),s(In,sy),s(fe,ty),s(H,ey),s(H,On),On.innerHTML=WE,h(p,ji,d),h(p,m,d),s(m,$l),s($l,me),s(me,ay),s(m,ny),s(m,jl),s(jl,oy),s(m,ly),s(m,Dn),Dn.innerHTML=UE,s(m,iy),s(m,Rl),s(Rl,ge),s(ge,ry),s(m,cy),s(m,Vl),s(Vl,py),s(m,dy),s(m,Pn),Pn.innerHTML=JE,s(m,hy),s(m,Bl),s(Bl,vy),s(m,ky),s(m,xe),s(xe,Mn),s(Mn,An),s(An,uy),s(Mn,yy),s(xe,fy),s(xe,$s),s($s,my),s($s,Wl),s(Wl,gy),s($s,xy),s($s,Ul),s(Ul,Ey),s(m,_y),s(m,es),s(es,wy),s(es,Nn),s(Nn,by),s(es,Sy),s(es,Jl),s(Jl,Ty),s(es,Ly),s(es,Gl),s(Gl,Hy),s(es,Cy),s(m,Iy),s(m,as),s(as,Oy),s(as,$n),s($n,Dy),s(as,Py),s(as,jn),s(jn,My),s(as,Ay),s(as,ql),s(ql,Ny),s(as,$y),s(m,jy),s(m,zl),s(zl,Ry),h(p,Ri,d),h(p,g,d),s(g,Yl),s(Yl,Ee),s(Ee,Vy),s(g,By),s(g,Ss),s(Ss,Wy),s(Ss,_e),s(_e,Uy),s(Ss,Jy),s(Ss,we),s(we,Gy),s(Ss,qy),s(g,zy),s(g,Kl),s(Kl,Yy),s(g,Ky),s(g,Rn),Rn.innerHTML=GE,s(g,Fy),s(g,Fl),s(Fl,be),s(be,Qy),s(g,Zy),s(g,Ql),s(Ql,Xy),s(g,sf),s(g,Vn),Vn.innerHTML=qE,s(g,tf),s(g,Zl),s(Zl,ef),s(g,af),s(g,Bn),Bn.innerHTML=zE,s(g,nf),s(g,Xl),s(Xl,of),s(g,lf),s(g,Se),s(Se,rf),s(Se,Wn),s(Wn,cf),s(Se,pf),h(p,Vi,d),h(p,G,d),s(G,si),s(si,Te),s(Te,df),s(G,hf),s(G,ti),s(ti,vf),s(G,kf),s(G,ei),s(ei,uf),s(G,yf),s(G,ai),s(ai,ff),h(p,Bi,d),h(p,js,d),s(js,ni),s(ni,Le),s(Le,mf),s(js,gf),s(js,oi),s(oi,li),s(li,xf),h(p,Wi,d),h(p,Rs,d),s(Rs,ii),s(ii,He),s(He,Ef),s(Rs,_f),s(Rs,Ts),s(Ts,Ce),s(Ce,wf),s(Ce,Un),s(Un,bf),s(Ce,Sf),s(Ts,Tf),s(Ts,ri),s(ri,Lf),s(Ts,Hf),s(Ts,Jn),s(Jn,Gn),s(Gn,Cf),s(Jn,If),h(p,Ui,d),h(p,q,d),s(q,ci),s(ci,Ie),s(Ie,Of),s(q,Df),s(q,Ls),s(Ls,Hs),s(Hs,Pf),s(Hs,qn),s(qn,Mf),s(Hs,Af),s(Hs,zn),s(zn,Nf),s(Hs,$f),s(Ls,jf),s(Ls,pi),s(pi,Rf),s(Ls,Vf),s(Ls,Yn),s(Yn,Bf),s(Yn,Oe),s(Oe,Wf),s(q,Uf),s(q,di),s(di,Jf),s(q,Gf),s(q,ns),s(ns,De),s(De,qf),s(De,Kn),s(Kn,zf),s(De,Yf),s(ns,Kf),s(ns,Cs),s(Cs,Ff),s(Cs,Fn),s(Fn,Qf),s(Cs,Zf),s(Cs,Qn),s(Qn,Xf),s(Cs,sm),s(ns,tm),s(ns,Pe),s(Pe,em),s(Pe,Zn),s(Zn,am),s(Pe,nm),s(ns,om),s(ns,hi),s(hi,lm),h(p,Ji,d),h(p,j,d),s(j,vi),s(vi,Me),s(Me,im),s(j,rm),s(j,ki),s(ki,cm),s(j,pm),s(j,Ae),s(Ae,dm),s(Ae,Ne),s(Ne,hm),s(Ae,vm),s(j,km),s(j,os),s(os,um),s(os,$e),s($e,ym),s(os,fm),s(os,je),s(je,mm),s(os,gm),s(os,Re),s(Re,xm),s(os,Em),s(j,_m),s(j,ui),s(ui,Ve),s(Ve,wm),s(Ve,Xn),s(Xn,bm),s(Ve,Sm),Gi=!0},p:O3,i(p){Gi||(vE(E.$$.fragment,p),Gi=!0)},o(p){kE(E.$$.fragment,p),Gi=!1},d(p){uE(E,p),p&&t(K),p&&t(I),p&&t(gi),p&&t(Is),p&&t(xi),p&&t(Os),p&&t(Ei),p&&t(Ds),p&&t(_i),p&&t(Ps),p&&t(wi),p&&t(Ms),p&&t(bi),p&&t(U),p&&t(Si),p&&t(v),p&&t(Ti),p&&t(w),p&&t(Li),p&&t(J),p&&t(Hi),p&&t(N),p&&t(Ci),p&&t($),p&&t(Ii),p&&t(P),p&&t(Oi),p&&t(y),p&&t(Di),p&&t(b),p&&t(Pi),p&&t(u),p&&t(Mi),p&&t(is),p&&t(Ai),p&&t(M),p&&t(Ni),p&&t(S),p&&t($i),p&&t(H),p&&t(ji),p&&t(m),p&&t(Ri),p&&t(g),p&&t(Vi),p&&t(G),p&&t(Bi),p&&t(js),p&&t(Wi),p&&t(Rs),p&&t(Ui),p&&t(q),p&&t(Ji),p&&t(j)}}}function N3(Ue){let E,K;const I=[Ue[0],cE];let ys={$$slots:{default:[A3]},$$scope:{ctx:Ue}};for(let _=0;_<I.length;_+=1)ys=Pm(ys,I[_]);return E=new D3({props:ys}),{c(){pE(E.$$.fragment)},l(_){dE(E.$$.fragment,_)},m(_,F){hE(E,_,F),K=!0},p(_,[F]){const Je=F&1?C3(I,[F&1&&iE(_[0]),F&0&&iE(cE)]):{};F&2&&(Je.$$scope={dirty:F,ctx:_}),E.$set(Je)},i(_){K||(vE(E.$$.fragment,_),K=!0)},o(_){kE(E.$$.fragment,_),K=!1},d(_){uE(E,_)}}}const cE={title:"Compile Svelte in your head (Part 1)",date:"2020-03-04T08:00:00Z",tags:["Svelte","JavaScript"],series:"Compile Svelte in your head",label:"blog",description:"BackgroundA while ago, @swyx came back to Singapore and visited us in Shopee Singapore (We're hiring!).He gave an amazing sharing on Compile Svelte in Your Head (video) in the ReactKnowledgeable Originals..."};function $3(Ue,E,K){return I3("blog",{image:M3}),Ue.$$set=I=>{K(0,E=Pm(Pm({},E),rE(I)))},E=rE(E),[E]}class J3 extends T3{constructor(E){super();L3(this,E,$3,N3,H3,{})}}export{J3 as default,cE as metadata};
