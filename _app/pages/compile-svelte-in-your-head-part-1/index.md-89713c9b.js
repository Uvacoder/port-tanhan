import{S as f3,i as m3,s as g3,C as Im,w as x3,x as E3,y as _3,z as w3,A as nE,q as b3,o as S3,B as L3,r as T3,Y as oE,e,t as o,k as r,c as a,a as n,h as l,d as t,m as c,b as i,g as h,H as s,J as H3}from"../../chunks/vendor-9710682b.js";import{B as C3}from"../../chunks/BlogLayout-9a08402e.js";import"../../chunks/stores-f9c97213.js";import"../../chunks/TableOfContent-2fa6a472.js";/* empty css                                */var I3="/_app/assets/hero-twitter-5d88ede6.jpg";function O3(We){let f,J,R,Fs,T,I,Ue,Zs,jr,Rr,Xs,Vr,Br,st,Wr,Ur,Jr,F,Gr,tt,qr,zr,et,Yr,Kr,at,Qr,Fr,Zr,ko,Xr,mi,Hs,uo,nt,sc,tc,yo,ec,gi,Cs,fo,ot,ac,nc,Je,iE=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="js" include="true" h1="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-comment)">// create a h1 element</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='module h1&#10;const h1: HTMLHeadingElement' >h1</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Document.createElement&lt;"h1">(tagName: "h1", options?: ElementCreationOptions | undefined): HTMLHeadingElement (+2 overloads)' >createElement</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;h1&apos;</span><span style="color: var(--shiki-color-text)">);</span></div><div class='line'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='module h1&#10;const h1: HTMLHeadingElement' >h1</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) Node.textContent: string | null' >textContent</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;Hello World&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-token-comment)">// ...and add it to the body</span></div><div class='line'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) Document.body: HTMLElement' >body</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Node.appendChild&lt;HTMLHeadingElement>(node: HTMLHeadingElement): HTMLHeadingElement' >appendChild</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='module h1&#10;const h1: HTMLHeadingElement' >h1</data-lsp>);</span></div></code></div></pre>`,xi,Is,mo,lt,oc,lc,Ge,rE=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="js" cutLines="1"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-comment)">// update the text of the h1 element</span></div><div class='line'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='module h1&#10;const h1: HTMLHeadingElement' >h1</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) Node.textContent: string | null' >textContent</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;Bye World&apos;</span><span style="color: var(--shiki-color-text)">;</span></div></code></div></pre>`,Ei,Os,go,it,ic,rc,qe,cE=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="js" cutLines="1"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-comment)">// finally, we remove the h1 element</span></div><div class='line'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) Document.body: HTMLElement' >body</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Node.removeChild&lt;HTMLHeadingElement>(child: HTMLHeadingElement): HTMLHeadingElement' >removeChild</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='module h1&#10;const h1: HTMLHeadingElement' >h1</data-lsp>);</span></div></code></div></pre>`,_i,Ds,xo,rt,cc,pc,ze,pE=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="js"><div class="language-id">ts</div><div class='code-container'><code><div class='line dim'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='module h1&#10;const h1: HTMLHeadingElement' >h1</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Document.createElement&lt;"h1">(tagName: "h1", options?: ElementCreationOptions | undefined): HTMLHeadingElement (+2 overloads)' >createElement</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;h1&apos;</span><span style="color: var(--shiki-color-text)">);</span></div><div class='line dim'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='module h1&#10;const h1: HTMLHeadingElement' >h1</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) Node.textContent: string | null' >textContent</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;Hello World&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line highlight'><span style="color: var(--shiki-token-comment)">// add class name to the h1 element</span></div><div class='line highlight'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='module h1&#10;const h1: HTMLHeadingElement' >h1</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Element.setAttribute(qualifiedName: string, value: string): void' >setAttribute</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;class&apos;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;abc&apos;</span><span style="color: var(--shiki-color-text)">);</span></div><div class='line highlight'><span style="color: var(--shiki-token-comment)">// ...and add a &lt;style&gt; tag to the head</span></div><div class='line highlight'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='module style&#10;const style: HTMLStyleElement' >style</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Document.createElement&lt;"style">(tagName: "style", options?: ElementCreationOptions | undefined): HTMLStyleElement (+2 overloads)' >createElement</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;style&apos;</span><span style="color: var(--shiki-color-text)">);</span></div><div class='line highlight'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='module style&#10;const style: HTMLStyleElement' >style</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) Node.textContent: string | null' >textContent</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;.abc &#123; color: blue; &#125;&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line highlight'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) Document.head: HTMLHeadElement' >head</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Node.appendChild&lt;HTMLStyleElement>(node: HTMLStyleElement): HTMLStyleElement' >appendChild</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='module style&#10;const style: HTMLStyleElement' >style</data-lsp>);</span></div><div class='line dim'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) Document.body: HTMLElement' >body</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Node.appendChild&lt;HTMLHeadingElement>(node: HTMLHeadingElement): HTMLHeadingElement' >appendChild</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='module h1&#10;const h1: HTMLHeadingElement' >h1</data-lsp>);</span></div></code></div></pre>`,wi,G,Eo,ct,dc,hc,Ye,dE=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="js"><div class="language-id">ts</div><div class='code-container'><code><div class='line dim'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='module button&#10;const button: HTMLButtonElement' >button</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Document.createElement&lt;"button">(tagName: "button", options?: ElementCreationOptions | undefined): HTMLButtonElement (+2 overloads)' >createElement</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;button&apos;</span><span style="color: var(--shiki-color-text)">);</span></div><div class='line dim'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='module button&#10;const button: HTMLButtonElement' >button</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) Node.textContent: string | null' >textContent</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;Click Me!&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line highlight'><span style="color: var(--shiki-token-comment)">// listen to "click" events</span></div><div class='line highlight'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='module button&#10;const button: HTMLButtonElement' >button</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) HTMLButtonElement.addEventListener&lt;"click">(type: "click", listener: (this: HTMLButtonElement, ev: MouseEvent) => any, options?: boolean | AddEventListenerOptions | undefined): void (+1 overload)' >addEventListener</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;click&apos;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line highlight'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='namespace console&#10;var console: Console' >console</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Console.log(message?: any, ...optionalParams: any[]): void (+1 overload)' >log</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;Hi!&apos;</span><span style="color: var(--shiki-color-text)">);</span></div><div class='line highlight'><span style="color: var(--shiki-color-text)">&#125;);</span></div><div class='line dim'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) Document.body: HTMLElement' >body</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Node.appendChild&lt;HTMLButtonElement>(node: HTMLButtonElement): HTMLButtonElement' >appendChild</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='module button&#10;const button: HTMLButtonElement' >button</data-lsp>);</span></div></code></div></pre>`,vc,_o,kc,uc,wo,yc,bi,v,bo,pt,fc,mc,So,gc,xc,Lo,dt,Ec,ht,_c,wc,bc,To,Sc,Lc,Ke,hE='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>',Tc,Ho,vt,Hc,Cc,kt,Ic,Qe,Oc,Dc,Pc,Fe,vE='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"></div><div class="line">  <span class="token selector">h1</span> <span class="token punctuation">&#123;</span></div><div class="line">    <span class="token property">color</span><span class="token punctuation">:</span> rebeccapurple<span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>',Mc,Co,ut,Ac,Nc,Io,$c,jc,Oo,Rc,Vc,Ze,kE=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'World'</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello <span class="token language-javascript"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>`,Bc,Do,yt,Wc,Uc,Po,Jc,Gc,ft,qc,Xe,zc,Yc,Kc,sa,uE='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">onClickButton</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>onClickButton<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Clicked <span class="token language-javascript"><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div></code></pre>',Qc,Mo,mt,Fc,Zc,ta,Xc,gt,sp,tp,ea,yE='<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line dim">  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token keyword">function</span> <span class="token function">onClickButton</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line highlight">    count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token punctuation">&#125;</span></div><div class="line dim"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>onClickButton<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Clicked <span class="token language-javascript"><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div></code></pre>',ep,Ao,xt,ap,np,No,op,Si,_,$o,Et,lp,ip,jo,rp,cp,Ro,pp,dp,Vo,hp,vp,aa,fE='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>',kp,Bo,_t,up,yp,Wo,fp,mp,na,mE=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="js" hideJsdoc="true" cutLines="2"><div class="language-id">ts</div><div class='code-container'><code><div class='line dim'><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function create_fragment(ctx: any): &#123;&#10;    c(): void;&#10;    m(target: HTMLElement, anchor: HTMLElement): void;&#10;    d(detaching: boolean): void;&#10;&#125;' >create_fragment</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) ctx: any' >ctx</data-lsp>) &#123;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='let h1: HTMLHeadingElement' >h1</data-lsp>;</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(method) c(): void' >c</data-lsp></span><span style="color: var(--shiki-color-text)">() &#123;</span></div><div class='line highlight'><span style="color: var(--shiki-color-text)">      <data-lsp lsp='let h1: HTMLHeadingElement' >h1</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(alias) element&lt;"h1">(name: "h1"): HTMLHeadingElement&#10;import element' >element</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;h1&apos;</span><span style="color: var(--shiki-color-text)">);</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='let h1: HTMLHeadingElement' >h1</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) Node.textContent: string | null' >textContent</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;Hello world&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(method) m(target: HTMLElement, anchor: HTMLElement): void' >m</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) target: HTMLElement' >target</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) anchor: HTMLElement' >anchor</data-lsp>) &#123;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(alias) insert(target: Node, node: Node, anchor?: Node | undefined): void&#10;import insert' >insert</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) target: HTMLElement' >target</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='let h1: HTMLHeadingElement' >h1</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) anchor: HTMLElement' >anchor</data-lsp>);</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(method) d(detaching: boolean): void' >d</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) detaching: boolean' >detaching</data-lsp>) &#123;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (<data-lsp lsp='(parameter) detaching: boolean' >detaching</data-lsp>) </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(alias) detach(node: Node): void&#10;import detach' >detach</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='let h1: HTMLHeadingElement' >h1</data-lsp>);</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">  &#125;;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">&#125;</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='class App' >App</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(alias) class SvelteComponent&#10;import SvelteComponent' >SvelteComponent</data-lsp></span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) options: any' >options</data-lsp>) &#123;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">super</span><span style="color: var(--shiki-color-text)">();</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(alias) init(component: any, options: any, instance: any, create_fragment: any, not_equal: any, props: any, append_styles: any, dirty?: number[] | undefined): void&#10;import init' >init</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) options: any' >options</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='function create_fragment(ctx: any): &#123;&#10;    c(): void;&#10;    m(target: HTMLElement, anchor: HTMLElement): void;&#10;    d(detaching: boolean): void;&#10;&#125;' >create_fragment</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(alias) function safe_not_equal(a: any, b: any): boolean&#10;import safe_not_equal' >safe_not_equal</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;&#125;);</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">  &#125;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">&#125;</span></div></code></div></pre>`,gp,Uo,xp,Ep,wt,Jo,oa,_p,wp,Go,la,bp,Li,q,qo,bt,Sp,Lp,zo,Tp,Hp,St,Cp,ia,Ip,Op,Dp,Lt,Pp,ra,Mp,Ap,Ti,N,Yo,Tt,Np,$p,Ht,jp,Ko,Rp,Vp,Bp,Qo,Wp,Up,Ct,Jp,ca,Gp,qp,zp,pa,gE=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts" cutLines="3"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-color-text)"><data-lsp lsp='let h1: HTMLHeadingElement' >h1</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(alias) element&lt;"h1">(name: "h1"): HTMLHeadingElement&#10;import element' >element</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;h1&apos;</span><span style="color: var(--shiki-color-text)">);</span></div><div class='line'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='let h1: HTMLHeadingElement' >h1</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) Node.textContent: string | null' >textContent</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;Hello World&apos;</span><span style="color: var(--shiki-color-text)">;</span></div></code></div></pre>`,Hi,$,Fo,It,Yp,Kp,Ot,Qp,Zo,Fp,Zp,Xp,Xo,sd,td,us,ed,da,ad,nd,ha,od,ld,id,va,xE=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="js" hideJsdoc="true" cutLines="5"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-function)"><data-lsp lsp='function insert(target: Node, node: Node, anchor?: Node | undefined): void' >insert</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='let target: HTMLElement' >target</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='let h1: HTMLHeadingElement' >h1</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='let anchor: HTMLElement' >anchor</data-lsp>);</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-comment)">// http://github.com/sveltejs/svelte/tree/master/src/runtime/internal/dom.ts</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function insert(target: Node, node: Node, anchor?: Node | undefined): void' >insert</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) target: Node' >target</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) node: Node' >node</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) anchor: Node | undefined' >anchor</data-lsp>) &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(parameter) target: Node' >target</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Node.insertBefore&lt;Node>(node: Node, child: Node | null): Node' >insertBefore</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) node: Node' >node</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) anchor: Node | undefined' >anchor</data-lsp> </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">);</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;</span></div></code></div></pre>`,Ci,P,sl,Dt,rd,cd,Pt,pd,tl,dd,hd,vd,el,kd,ud,Mt,yd,ka,fd,md,gd,ua,EE=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="js" hideJsdoc="true" cutLines="1"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-function)"><data-lsp lsp='function detach(node: Node): void' >detach</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='let h1: HTMLHeadingElement' >h1</data-lsp>);</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-comment)">// http://github.com/sveltejs/svelte/tree/master/src/runtime/internal/dom.ts</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function detach(node: Node): void' >detach</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) node: Node' >node</data-lsp>) &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(parameter) node: Node' >node</data-lsp></span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) Node.parentNode: ParentNode | null' >parentNode</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Node.removeChild&lt;Node>(child: Node): Node' >removeChild</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) node: Node' >node</data-lsp>);</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;</span></div></code></div></pre>`,xd,al,At,Ed,Nt,_d,wd,Ii,y,nl,$t,bd,Sd,jt,Ld,Rt,Td,Hd,Cd,Vt,Id,ya,Od,Dd,Pd,Bt,Md,fa,Ad,Nd,$d,ma,_E='<pre class="prism language-svelte"><code><div class="line"><span class="token comment">&lt;!-- empty --></span></div></code></pre>',jd,ol,Wt,Rd,Vd,ga,wE=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">App</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">SvelteComponent</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(options) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">super</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">init</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> options</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> safe_not_equal</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;&#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Bd,ys,Wd,xa,Ud,Jd,Ea,Gd,qd,zd,Ut,Yd,_a,Kd,Qd,Fd,fs,ms,Zd,wa,Xd,sh,ba,th,eh,ah,ll,nh,oh,il,lh,ih,Jt,rh,Sa,ch,ph,dh,Gt,hh,La,vh,kh,uh,qt,yh,Ta,fh,mh,Oi,w,rl,zt,gh,xh,cl,Eh,_h,Ha,bE=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">	<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'World'</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello <span class="token language-javascript"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>`,wh,pl,Yt,bh,Sh,dl,Lh,Th,Ca,SE=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      h1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">element</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;h1&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">h1</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;Hello </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">name</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;World&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">App</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">SvelteComponent</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Hh,hl,Ch,Ih,Kt,Qt,Oh,Ia,Dh,Ph,Mh,Oa,Da,Ah,Nh,$h,vl,jh,Di,u,kl,Ft,Rh,Vh,Zt,Bh,Pa,Wh,Uh,Jh,Ma,LE=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">	<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'World'</span><span class="token punctuation">;</span></div><div class="line">	<span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">		name <span class="token operator">=</span> <span class="token string">'Svelte'</span><span class="token punctuation">;</span></div><div class="line">	<span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello <span class="token language-javascript"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>`,Gh,ul,Xt,qh,zh,yl,Yh,Kh,Aa,TE=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      h1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">element</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;h1&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      t0 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">text</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Hello &#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      t1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">text</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*name*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">append</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> t0);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">append</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> t1);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [dirty]) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*name*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-function)">set_data</span><span style="color: var(--shiki-color-text)">(t1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*name*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">(detaching) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (detaching) </span><span style="color: var(--shiki-token-function)">detach</span><span style="color: var(--shiki-color-text)">(h1);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;World&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Svelte&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line highlight"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [name];</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">App</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">SvelteComponent</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(options) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">super</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">init</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> options</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> instance</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> create_fragment</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> safe_not_equal</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;&#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Qh,fl,Fh,Zh,V,gs,Xh,Na,sv,tv,$a,ev,av,nv,Ps,ov,ja,lv,iv,Ra,rv,cv,se,pv,Va,dv,hv,vv,xs,kv,Ba,uv,yv,Wa,fv,mv,gv,os,xv,Ua,Ev,_v,Ja,wv,bv,Ga,Sv,Lv,ml,Tv,Hv,te,Cv,qa,Iv,Ov,Dv,gl,Pv,Mv,B,ee,Av,za,Nv,$v,jv,ae,Rv,Ya,Vv,Bv,Wv,Ka,Uv,Qa,Jv,Gv,Ms,qv,Fa,zv,Yv,Za,Kv,Qv,xl,Fv,Zv,W,Xv,Xa,sk,tk,sn,ek,ak,tn,nk,ok,en,lk,ik,rk,ne,ck,an,pk,dk,Pi,ls,El,oe,hk,vk,le,kk,_l,uk,yk,fk,is,wl,mk,gk,nn,xk,Ek,on,_k,wk,Mi,M,bl,ie,bk,Sk,U,Lk,ln,Tk,Hk,rn,Ck,Ik,cn,Ok,Dk,pn,Pk,Mk,Ak,Es,Nk,dn,$k,jk,hn,Rk,Vk,Bk,vn,HE='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- gives you --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>',Wk,Z,Uk,kn,Jk,Gk,un,qk,zk,yn,Yk,Kk,Qk,fn,CE='<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span></div><div class="line dim"></div><div class="line dim"><span class="token comment">&lt;!-- could possibly be --></span></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div><div class="line highlight"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello Svelte<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div><div class="line dim"><span class="token comment">&lt;!-- depending on the inner state of the component --></span></div></code></pre>',Ai,b,Sl,re,Fk,Zk,_s,Xk,mn,su,tu,Ll,eu,au,nu,ce,Tl,ou,lu,Hl,iu,ru,pe,cu,Cl,pu,du,hu,X,vu,gn,ku,uu,xn,yu,fu,Il,mu,gu,xu,En,IE=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// conceptually,</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*...*/</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// create the fragment</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.c</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// mount the fragment onto the DOM</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.m</span><span style="color: var(--shiki-color-text)">(target);</span></span></code></pre>`,Eu,ss,_u,_n,wu,bu,wn,Su,Lu,Ol,Tu,Hu,Cu,bn,OE='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">t1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">text</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*name*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]);</span></span></code></pre>',Iu,Sn,Ou,de,Du,Ni,H,Dl,he,Pu,Mu,ve,Au,Ln,Nu,$u,ju,Pl,Ru,Vu,ke,Ml,Bu,Wu,Al,Uu,Ju,ue,Gu,Tn,qu,zu,Yu,Hn,DE=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Svelte&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">count</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">foo</span><span style="color: var(--shiki-color-text)">.a </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// compiled into something like</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Svelte&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/* name */</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> name);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">count</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/* count */</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> count);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">foo</span><span style="color: var(--shiki-color-text)">.a </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/* foo */</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> foo);</span></span></code></pre>`,Ku,ye,Qu,Cn,Fu,Zu,Xu,In,PE=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// conceptually...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*...*/</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// to track which variable has changed</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">dirty</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Set</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (variable</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> newValue) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// update ctx</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ctx[variable] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> newValue;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// mark variable as dirty</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">dirty</span><span style="color: var(--shiki-token-function)">.add</span><span style="color: var(--shiki-color-text)">(variable);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// schedules update for the component</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">scheduleUpdate</span><span style="color: var(--shiki-color-text)">(component);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// gets called when update is scheduled</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">flushUpdate</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// update the fragment</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// clear the dirty</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">dirty</span><span style="color: var(--shiki-token-function)">.clear</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,$i,g,Nl,fe,sy,ty,$l,ey,ay,On,ME=`<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line dim">	<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'world'</span><span class="token punctuation">;</span></div><div class="line dim">	<span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line dim">		name <span class="token operator">=</span> <span class="token string">'Svelte'</span><span class="token punctuation">;</span></div><div class="line dim">	<span class="token punctuation">&#125;</span></div><div class="line dim"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line highlight"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>update<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Hello <span class="token language-javascript"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>`,ny,jl,me,oy,ly,Rl,iy,ry,Dn,AE=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      h1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">element</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;h1&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      t0 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">text</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Hello &#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      t1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">text</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*name*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">append</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> t0);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">append</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> t1);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      dispose </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;click&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*update*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [dirty]) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*name*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-function)">set_data</span><span style="color: var(--shiki-color-text)">(t1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*name*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">(detaching) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (detaching) </span><span style="color: var(--shiki-token-function)">detach</span><span style="color: var(--shiki-color-text)">(h1);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">dispose</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;world&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Svelte&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [name</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> update];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`,cy,Vl,py,dy,ge,Pn,Mn,hy,vy,ky,As,uy,Bl,yy,fy,Wl,my,gy,ts,xy,An,Ey,_y,Ul,wy,by,Jl,Sy,Ly,Ty,es,Hy,Nn,Cy,Iy,$n,Oy,Dy,Gl,Py,My,Ay,ql,Ny,ji,x,zl,xe,$y,jy,ws,Ry,Ee,Vy,By,_e,Wy,Uy,Jy,Yl,Gy,qy,jn,NE='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span></div><div class="line">	<span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>update<span class="token punctuation">&#125;</span></span></div><div class="line">	<span class="token attr-name"><span class="token namespace">on:</span>mousedown=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>update<span class="token punctuation">&#125;</span></span></div><div class="line">	<span class="token attr-name"><span class="token namespace">on:</span>touchstart=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>update<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div><div class="line">  Hello <span class="token language-javascript"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span>!</div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></div></code></pre>',zy,Kl,we,Yy,Ky,Ql,Qy,Fy,Rn,$E=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">dispose </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;click&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*update*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">])</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;mousedown&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*update*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">])</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;touchstart&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*update*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; passive</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> &#125;)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">];</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-function)">run_all</span><span style="color: var(--shiki-color-text)">(dispose);</span></span></code></pre>`,Zy,Fl,Xy,sf,Vn,jE=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// instead of</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">dispose1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;click&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*update*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">dispose2 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;mousedown&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*update*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">dispose2 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(h1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;touchstart&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*update*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; passive</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">dispose1</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">dispose2</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">dispose3</span><span style="color: var(--shiki-color-text)">();</span></span></code></pre>`,tf,Zl,ef,af,be,nf,Bn,of,lf,Ri,z,Xl,Se,rf,cf,si,pf,df,ti,hf,vf,ei,kf,Vi,Ns,ai,Le,uf,yf,ni,oi,ff,Bi,$s,li,Te,mf,gf,bs,He,xf,Wn,Ef,_f,wf,ii,bf,Sf,Un,Jn,Lf,Tf,Wi,Y,ri,Ce,Hf,Cf,Ss,Ls,If,Gn,Of,Df,qn,Pf,Mf,Af,ci,Nf,$f,zn,jf,Ie,Rf,Vf,pi,Bf,Wf,as,Oe,Uf,Yn,Jf,Gf,qf,Ts,zf,Kn,Yf,Kf,Qn,Qf,Ff,Zf,De,Xf,Fn,sm,tm,em,di,am,Ui,j,hi,Pe,nm,om,vi,lm,im,Me,rm,Ae,cm,pm,dm,ns,hm,Ne,vm,km,$e,um,ym,je,fm,mm,gm,ki,Re,xm,Zn,Em,_m;return{c(){f=e("section"),J=e("h2"),R=e("a"),Fs=o("Background"),T=r(),I=e("p"),Ue=o("A while ago, "),Zs=e("a"),jr=o("@swyx"),Rr=o(" came back to Singapore and visited us in "),Xs=e("a"),Vr=o("Shopee Singapore"),Br=o(" ("),st=e("a"),Wr=o("We're hiring!"),Ur=o(")."),Jr=r(),F=e("p"),Gr=o("He gave an amazing sharing on "),tt=e("a"),qr=o("Compile Svelte in Your Head"),zr=o(" ("),et=e("a"),Yr=o("video"),Kr=o(") in the "),at=e("a"),Qr=o("ReactKnowledgeable Originals"),Fr=o("."),Zr=r(),ko=e("p"),Xr=o("I love his presentation and the title is so catchy, so I begged him to use the catchy title as this series of articles about the Svelte compiler. It will be about how Svelte sees your code and compiles it down to plain JavaScript."),mi=r(),Hs=e("section"),uo=e("h2"),nt=e("a"),sc=o("Introduction"),tc=r(),yo=e("p"),ec=o("Lets refresh ourselves with how we write web app without any framework:"),gi=r(),Cs=e("section"),fo=e("h3"),ot=e("a"),ac=o("Creating an element"),nc=r(),Je=e("div"),xi=r(),Is=e("section"),mo=e("h3"),lt=e("a"),oc=o("Updating an element"),lc=r(),Ge=e("div"),Ei=r(),Os=e("section"),go=e("h3"),it=e("a"),ic=o("Removing an element"),rc=r(),qe=e("div"),_i=r(),Ds=e("section"),xo=e("h3"),rt=e("a"),cc=o("Adding style to an element"),pc=r(),ze=e("div"),wi=r(),G=e("section"),Eo=e("h3"),ct=e("a"),dc=o("Listen for click events on an element"),hc=r(),Ye=e("div"),vc=r(),_o=e("p"),kc=o("These are code that you have to write, without using any framework or library."),uc=r(),wo=e("p"),yc=o("The main idea of this article is to show how the Svelte compiler compiles the Svelte syntax into statements of codes that I've shown above."),bi=r(),v=e("section"),bo=e("h2"),pt=e("a"),fc=o("Svelte syntax"),mc=r(),So=e("p"),gc=o("Here I'm going to show you some basics of the Svelte syntax."),xc=r(),Lo=e("blockquote"),dt=e("p"),Ec=o("If you wish to learn more, I highly recommend trying "),ht=e("a"),_c=o("Svelte's interactive tutorial"),wc=o("."),bc=r(),To=e("p"),Sc=o("So here is a basic Svelte component:"),Lc=r(),Ke=e("div"),Tc=r(),Ho=e("p"),vt=e("a"),Hc=o("Svelte REPL"),Cc=r(),kt=e("p"),Ic=o("To add style, you add a "),Qe=e("code"),Oc=o("<style>"),Dc=o(" tag:"),Pc=r(),Fe=e("div"),Mc=r(),Co=e("p"),ut=e("a"),Ac=o("Svelte REPL"),Nc=r(),Io=e("p"),$c=o("At this point, writing Svelte component just feels like writing HTML, that's because Svelte syntax is a super set of the HTML syntax."),jc=r(),Oo=e("p"),Rc=o("Let's look at how we add a data to our component:"),Vc=r(),Ze=e("div"),Bc=r(),Do=e("p"),yt=e("a"),Wc=o("Svelte REPL"),Uc=r(),Po=e("p"),Jc=o("We put JavaScript inside the curly brackets."),Gc=r(),ft=e("p"),qc=o("To add a click handler, we use the "),Xe=e("code"),zc=o("on:"),Yc=o(" directive"),Kc=r(),sa=e("div"),Qc=r(),Mo=e("p"),mt=e("a"),Fc=o("Svelte REPL"),Zc=r(),ta=e("p"),Xc=o("To change the data, we use "),gt=e("a"),sp=o("assignment operators"),tp=r(),ea=e("div"),ep=r(),Ao=e("p"),xt=e("a"),ap=o("Svelte REPL"),np=r(),No=e("p"),op=o("Let's move on to see how Svelte syntax is compiled into JavaScript that we've seen earlier"),Si=r(),_=e("section"),$o=e("h2"),Et=e("a"),lp=o("Compile Svelte in your Head"),ip=r(),jo=e("p"),rp=o("The Svelte compiler analyses the code you write and generates an optimised JavaScript output."),cp=r(),Ro=e("p"),pp=o("To study how Svelte compiles the code, lets start with the smallest example possible, and slowly build up the code. Through the process, you will see that Svelte incrementally adds to the output code based on your changes."),dp=r(),Vo=e("p"),hp=o("The first example that we are going to see is:"),vp=r(),aa=e("div"),kp=r(),Bo=e("p"),_t=e("a"),up=o("Svelte REPL"),yp=r(),Wo=e("p"),fp=o("The output code:"),mp=r(),na=e("div"),gp=r(),Uo=e("p"),xp=o("You can break down the output code into 2 sections:"),Ep=r(),wt=e("ul"),Jo=e("li"),oa=e("code"),_p=o("create_fragment"),wp=r(),Go=e("li"),la=e("code"),bp=o("class App extends SvelteComponent"),Li=r(),q=e("section"),qo=e("h3"),bt=e("a"),Sp=o("create_fragment"),Lp=r(),zo=e("p"),Tp=o("Svelte components are the building blocks of a Svelte application. Each Svelte component focuses on building its piece or fragment of the final DOM."),Hp=r(),St=e("p"),Cp=o("The "),ia=e("code"),Ip=o("create_fragment"),Op=o(" function gives the Svelte component an instruction manual on how to build the DOM fragment."),Dp=r(),Lt=e("p"),Pp=o("Look at the return object of the "),ra=e("code"),Mp=o("create_fragment"),Ap=o(" function. It has methods, such as:"),Ti=r(),N=e("section"),Yo=e("h4"),Tt=e("a"),Np=o("- c()"),$p=r(),Ht=e("p"),jp=o("Short for "),Ko=e("strong"),Rp=o("create"),Vp=o("."),Bp=r(),Qo=e("p"),Wp=o("Contains instructions to create all the elements in the fragment."),Up=r(),Ct=e("p"),Jp=o("In this example, it contains instructions to create the "),ca=e("code"),Gp=o("h1"),qp=o(" element"),zp=r(),pa=e("div"),Hi=r(),$=e("section"),Fo=e("h4"),It=e("a"),Yp=o("- m(target, anchor)"),Kp=r(),Ot=e("p"),Qp=o("Short for "),Zo=e("strong"),Fp=o("mount"),Zp=o("."),Xp=r(),Xo=e("p"),sd=o("Contains instructions to mount the elements into the target."),td=r(),us=e("p"),ed=o("In this example, it contains instructions to insert the "),da=e("code"),ad=o("h1"),nd=o(" element into the "),ha=e("code"),od=o("target"),ld=o("."),id=r(),va=e("div"),Ci=r(),P=e("section"),sl=e("h4"),Dt=e("a"),rd=o("- d(detaching)"),cd=r(),Pt=e("p"),pd=o("Short for "),tl=e("strong"),dd=o("destroy"),hd=o("."),vd=r(),el=e("p"),kd=o("Contains instructions to remove the elements from the target."),ud=r(),Mt=e("p"),yd=o("In this example, we detach the "),ka=e("code"),fd=o("h1"),md=o(" element from the DOM"),gd=r(),ua=e("div"),xd=r(),al=e("blockquote"),At=e("p"),Ed=o("The method names are short for better minification. "),Nt=e("a"),_d=o("See what can't be minified here"),wd=o("."),Ii=r(),y=e("section"),nl=e("h3"),$t=e("a"),bd=o("export default class App extends SvelteComponent"),Sd=r(),jt=e("p"),Ld=o("Each component is a class, which you can import and instantiate through "),Rt=e("a"),Td=o("this API"),Hd=o("."),Cd=r(),Vt=e("p"),Id=o("And in the constructor, we initialize the component with information that made up the component such as "),ya=e("code"),Od=o("create_fragment"),Dd=o(". Svelte will only pass information that it is needed and remove them whenever it is not necessary."),Pd=r(),Bt=e("p"),Md=o("Try removing the "),fa=e("code"),Ad=o("<h1>"),Nd=o(" tag and see what happens to the output:"),$d=r(),ma=e("div"),jd=r(),ol=e("p"),Wt=e("a"),Rd=o("Svelte REPL"),Vd=r(),ga=e("div"),Bd=r(),ys=e("p"),Wd=o("Svelte will pass in "),xa=e("code"),Ud=o("null"),Jd=o(" instead of "),Ea=e("code"),Gd=o("create_fragment"),qd=o("!"),zd=r(),Ut=e("p"),Yd=o("The "),_a=e("code"),Kd=o("init"),Qd=o(" function is where Svelte sets up most of the internals, such as:"),Fd=r(),fs=e("ul"),ms=e("li"),Zd=o("component props, "),wa=e("code"),Xd=o("ctx"),sh=o(" (will explain what "),ba=e("code"),th=o("ctx"),eh=o(" is later) and context"),ah=r(),ll=e("li"),nh=o("component lifecycle events"),oh=r(),il=e("li"),lh=o("component update mechanism"),ih=r(),Jt=e("p"),rh=o("and at the very end, Svelte calls the "),Sa=e("code"),ch=o("create_fragment"),ph=o(" to create and mount elements into the DOM."),dh=r(),Gt=e("p"),hh=o("If you noticed, all the internal state and methods are attached to "),La=e("code"),vh=o("this.$$"),kh=o("."),uh=r(),qt=e("p"),yh=o("So if you ever access the "),Ta=e("code"),fh=o("$$"),mh=o(" property of the component, you are tapping into the internals. You've been warned! \u{1F648}\u{1F6A8}"),Oi=r(),w=e("section"),rl=e("h3"),zt=e("a"),gh=o("Adding data"),xh=r(),cl=e("p"),Eh=o("Now that we've looked at the bare minimum of a Svelte component, let's see how adding a data would change the compiled output:"),_h=r(),Ha=e("div"),wh=r(),pl=e("p"),Yt=e("a"),bh=o("Svelte REPL"),Sh=r(),dl=e("p"),Lh=o("Notice the change in the output:"),Th=r(),Ca=e("div"),Hh=r(),hl=e("p"),Ch=o("Some observations:"),Ih=r(),Kt=e("ul"),Qt=e("li"),Oh=o("What you've written in the "),Ia=e("code"),Dh=o("<script>"),Ph=o(" tag is moved into the top level of the code"),Mh=r(),Oa=e("li"),Da=e("code"),Ah=o("h1"),Nh=o(" element's text content is now a template literal"),$h=r(),vl=e("p"),jh=o("There's a lot of amazing things happening under the hood right now, but let's hold our horses for a while, because it's best explained when comparing with the next code change."),Di=r(),u=e("section"),kl=e("h3"),Ft=e("a"),Rh=o("Updating data"),Vh=r(),Zt=e("p"),Bh=o("Let's add a function to update the "),Pa=e("code"),Wh=o("name"),Uh=o(":"),Jh=r(),Ma=e("div"),Gh=r(),ul=e("p"),Xt=e("a"),qh=o("Svelte REPL"),zh=r(),yl=e("p"),Yh=o("...and observe the change in the compiled output:"),Kh=r(),Aa=e("div"),Qh=r(),fl=e("p"),Fh=o("Some observations:"),Zh=r(),V=e("ul"),gs=e("li"),Xh=o("the text content of "),Na=e("code"),sv=o("<h1>"),tv=o(" element is now broken into 2 text nodes, created by the "),$a=e("code"),ev=o("text(...)"),av=o(" function"),nv=r(),Ps=e("li"),ov=o("the return object of the "),ja=e("code"),lv=o("create_fragment"),iv=o(" has a new method, "),Ra=e("code"),rv=o("p(ctx, dirty)"),cv=r(),se=e("li"),pv=o("a new function "),Va=e("code"),dv=o("instance"),hv=o(" is created"),vv=r(),xs=e("li"),kv=o("What you've written in the "),Ba=e("code"),uv=o("<script>"),yv=o(" tag is now moved into the "),Wa=e("code"),fv=o("instance"),mv=o(" function"),gv=r(),os=e("li"),xv=o("for the sharp-eyed, the variable "),Ua=e("code"),Ev=o("name"),_v=o(" that was used in the "),Ja=e("code"),wv=o("create_fragment"),bv=o(" is now replaced by "),Ga=e("code"),Sv=o("ctx[0]"),Lv=r(),ml=e("p"),Tv=o("So, why the change?"),Hv=r(),te=e("p"),Cv=o("The Svelte compiler tracks all the variables declared in the "),qa=e("code"),Iv=o("<script>"),Ov=o(" tag."),Dv=r(),gl=e("p"),Pv=o("It tracks whether the variable:"),Mv=r(),B=e("ul"),ee=e("li"),Av=o("can be mutated? eg: "),za=e("code"),Nv=o("count++"),$v=o(","),jv=r(),ae=e("li"),Rv=o("can be reassigned? eg: "),Ya=e("code"),Vv=o("name = 'Svelte'"),Bv=o(","),Wv=r(),Ka=e("li"),Uv=o("is referenced in the template? eg: "),Qa=e("code"),Jv=o("<h1>Hello {name}</h1>"),Gv=r(),Ms=e("li"),qv=o("is writable? eg: "),Fa=e("code"),zv=o("const i = 1;"),Yv=o(" vs "),Za=e("code"),Kv=o("let i = 1;"),Qv=r(),xl=e("li"),Fv=o("... and many more"),Zv=r(),W=e("p"),Xv=o("When the Svelte compiler realises that the variable "),Xa=e("code"),sk=o("name"),tk=o(" can be reassigned, (due to "),sn=e("code"),ek=o("name = 'Svelte';"),ak=o(" in "),tn=e("code"),nk=o("update"),ok=o("), it breaks down the text content of the "),en=e("code"),lk=o("h1"),ik=o(" into parts, so that it can dynamically update part of the text."),rk=r(),ne=e("p"),ck=o("Indeed, you can see that there's a new method, "),an=e("code"),pk=o("p"),dk=o(", to update the text node."),Pi=r(),ls=e("section"),El=e("h4"),oe=e("a"),hk=o("- p(ctx, dirty)"),vk=r(),le=e("p"),kk=o("Short for "),_l=e("strong"),uk=o("u_p_date"),yk=o("."),fk=r(),is=e("p"),wl=e("strong"),mk=o("p(ctx, dirty)"),gk=o(" contains instructions to update the elements based on what has changed in the state ("),nn=e("code"),xk=o("dirty"),Ek=o(") and the state ("),on=e("code"),_k=o("ctx"),wk=o(") of the component."),Mi=r(),M=e("section"),bl=e("h3"),ie=e("a"),bk=o("instance variable"),Sk=r(),U=e("p"),Lk=o("The compiler realises that the variable "),ln=e("code"),Tk=o("name"),Hk=o(" cannot be shared across different instances of the "),rn=e("code"),Ck=o("App"),Ik=o(" component. That's why it moves the declaration of the variable "),cn=e("code"),Ok=o("name"),Dk=o(" into a function called "),pn=e("code"),Pk=o("instance"),Mk=o("."),Ak=r(),Es=e("p"),Nk=o("In the previous example, no matter how many instances of the "),dn=e("code"),$k=o("App"),jk=o(" component, the value of the variable "),hn=e("code"),Rk=o("name"),Vk=o(" is the same and unchanged across the instances:"),Bk=r(),vn=e("div"),Wk=r(),Z=e("p"),Uk=o("But, in this example, the variable "),kn=e("code"),Jk=o("name"),Gk=o(" can be changed within 1 instance of the component, so the declaration of the variable "),un=e("code"),qk=o("name"),zk=o(" is now moved into the "),yn=e("code"),Yk=o("instance"),Kk=o(" function:"),Qk=r(),fn=e("div"),Ai=r(),b=e("section"),Sl=e("h3"),re=e("a"),Fk=o("instance($$self, $$props, $$invalidate)"),Zk=r(),_s=e("p"),Xk=o("The "),mn=e("code"),su=o("instance"),tu=o(" function returns a list of "),Ll=e("em"),eu=o("instance"),au=o(" variables, which are variables that are:"),nu=r(),ce=e("ul"),Tl=e("li"),ou=o("referenced in the template"),lu=r(),Hl=e("li"),iu=o("mutated or reassigned, (can be changed within 1 instance of the component)"),ru=r(),pe=e("p"),cu=o("In Svelte, we call this list of instance variables, "),Cl=e("strong"),pu=o("ctx"),du=o("."),hu=r(),X=e("p"),vu=o("In the "),gn=e("code"),ku=o("init"),uu=o(" function, Svelte calls the "),xn=e("code"),yu=o("instance"),fu=o(" function to create "),Il=e("strong"),mu=o("ctx"),gu=o(", and uses it to create the fragment for the component:"),xu=r(),En=e("div"),Eu=r(),ss=e("p"),_u=o("Now, instead of accessing the variable "),_n=e("code"),wu=o("name"),bu=o(" outside of the component, we refer to the variable "),wn=e("code"),Su=o("name"),Lu=o(" passed via the "),Ol=e("strong"),Tu=o("ctx"),Hu=o(":"),Cu=r(),bn=e("div"),Iu=r(),Sn=e("p"),Ou=o("The reason that ctx is an array instead of a map or an object is because of an optimisation related to bitmask, you can see "),de=e("a"),Du=o("the discussion about it here"),Ni=r(),H=e("section"),Dl=e("h3"),he=e("a"),Pu=o("$$invalidate"),Mu=r(),ve=e("p"),Au=o("The secret behind the system of reactivity in Svelte is the "),Ln=e("code"),Nu=o("$$invalidate"),$u=o(" function."),ju=r(),Pl=e("p"),Ru=o("Every variable that has been"),Vu=r(),ke=e("ul"),Ml=e("li"),Bu=o("reassigned or mutated"),Wu=r(),Al=e("li"),Uu=o("referenced in the template"),Ju=r(),ue=e("p"),Gu=o("will have the "),Tn=e("code"),qu=o("$$invalidate"),zu=o(" function inserted right after the assignment or mutation:"),Yu=r(),Hn=e("div"),Ku=r(),ye=e("p"),Qu=o("The "),Cn=e("code"),Fu=o("$$invalidate"),Zu=o(" function marks the variable dirty and schedules an update for the component:"),Xu=r(),In=e("div"),$i=r(),g=e("section"),Nl=e("h3"),fe=e("a"),sy=o("Adding event listeners"),ty=r(),$l=e("p"),ey=o("Let's now add an event listener"),ay=r(),On=e("div"),ny=r(),jl=e("p"),me=e("a"),oy=o("Svelte REPL"),ly=r(),Rl=e("p"),iy=o("And observe the difference:"),ry=r(),Dn=e("div"),cy=r(),Vl=e("p"),py=o("Some observations:"),dy=r(),ge=e("ul"),Pn=e("li"),Mn=e("code"),hy=o("instance"),vy=o(" function now returns 2 variables instead of 1"),ky=r(),As=e("li"),uy=o("Listen to click event during "),Bl=e("strong"),yy=o("mount"),fy=o(" and dispose it in "),Wl=e("strong"),my=o("destroy"),gy=r(),ts=e("p"),xy=o("As I've mentioned earlier, "),An=e("code"),Ey=o("instance"),_y=o(" function returns variables that are "),Ul=e("strong"),wy=o("referenced in the template"),by=o(" and that are "),Jl=e("strong"),Sy=o("mutated or reassigned"),Ly=o("."),Ty=r(),es=e("p"),Hy=o("Since we've just referenced the "),Nn=e("code"),Cy=o("update"),Iy=o(" function in the template, it is now returned in the "),$n=e("code"),Oy=o("instance"),Dy=o(" function as part of the "),Gl=e("strong"),Py=o("ctx"),My=o("."),Ay=r(),ql=e("p"),Ny=o("Svelte tries generate as compact JavaScript output as possible, not returning an extra variable if it is not necessary."),ji=r(),x=e("section"),zl=e("h3"),xe=e("a"),$y=o("listen and dispose"),jy=r(),ws=e("p"),Ry=o("Whenever you add "),Ee=e("a"),Vy=o("an event listener"),By=o(" in Svelte, Svelte will inject code to add an "),_e=e("a"),Wy=o("event listener"),Uy=o(" and remove it when the DOM fragment is removed from the DOM."),Jy=r(),Yl=e("p"),Gy=o("Try adding more event listeners,"),qy=r(),jn=e("div"),zy=r(),Kl=e("p"),we=e("a"),Yy=o("Svelte REPL"),Ky=r(),Ql=e("p"),Qy=o("and observe the compiled output:"),Fy=r(),Rn=e("div"),Zy=r(),Fl=e("p"),Xy=o("Instead of declaring and creating a new variable to remove each event listener, Svelte assigns all of them to an array:"),sf=r(),Vn=e("div"),tf=r(),Zl=e("p"),ef=o("Minification can compact the variable name, but you can't remove the brackets."),af=r(),be=e("p"),nf=o("Again, this is another great example of where Svelte tries to generate compact JavaScript output. Svelte does not create the "),Bn=e("code"),of=o("dispose"),lf=o(" array when there's only 1 event listener."),Ri=r(),z=e("section"),Xl=e("h2"),Se=e("a"),rf=o("Summary"),cf=r(),si=e("p"),pf=o("The Svelte syntax is a superset of HTML."),df=r(),ti=e("p"),hf=o("When you write a Svelte component, the Svelte compiler analyses your code and generates optimised JavaScript code output."),vf=r(),ei=e("p"),kf=o("The output can be divided into 3 segments:"),Vi=r(),Ns=e("section"),ai=e("h3"),Le=e("a"),uf=o("1. create_fragment"),yf=r(),ni=e("ul"),oi=e("li"),ff=o("Returns a fragment, which is an instruction manual on how to build the DOM fragment for the component"),Bi=r(),$s=e("section"),li=e("h3"),Te=e("a"),mf=o("2. instance"),gf=r(),bs=e("ul"),He=e("li"),xf=o("Most of the code written in the "),Wn=e("code"),Ef=o("<script>"),_f=o(" tag is in here."),wf=r(),ii=e("li"),bf=o("Returns a list of instance variables that are referenced in the template"),Sf=r(),Un=e("li"),Jn=e("code"),Lf=o("$$invalidate"),Tf=o(" is inserted after every assignment and mutation of the instance variable"),Wi=r(),Y=e("section"),ri=e("h3"),Ce=e("a"),Hf=o("3. class App extends SvelteComponent"),Cf=r(),Ss=e("ul"),Ls=e("li"),If=o("Initialise the component with "),Gn=e("code"),Of=o("create_fragment"),Df=o(" and "),qn=e("code"),Pf=o("instance"),Mf=o(" function"),Af=r(),ci=e("li"),Nf=o("Sets up the component internals"),$f=r(),zn=e("li"),jf=o("Provides the "),Ie=e("a"),Rf=o("Component API"),Vf=r(),pi=e("p"),Bf=o("Svelte strives to generate as compact JavaScript as possible, for example:"),Wf=r(),as=e("ul"),Oe=e("li"),Uf=o("Breaking text content of "),Yn=e("code"),Jf=o("h1"),Gf=o(" into separate text nodes only when part of the text can be updated"),qf=r(),Ts=e("li"),zf=o("Not defining "),Kn=e("code"),Yf=o("create_fragment"),Kf=o(" or "),Qn=e("code"),Qf=o("instance"),Ff=o(" function when it is not needed"),Zf=r(),De=e("li"),Xf=o("Generate "),Fn=e("code"),sm=o("dispose"),tm=o(" as an array or a function, depending on the number of event listeners."),em=r(),di=e("li"),am=o("..."),Ui=r(),j=e("section"),hi=e("h2"),Pe=e("a"),nm=o("Closing Note"),om=r(),vi=e("p"),lm=o("We've covered the basic structure of the Svelte's compiled output, and this is just the beginning."),im=r(),Me=e("p"),rm=o("If you wish to know more, "),Ae=e("a"),cm=o("follow me on Twitter"),pm=o("."),dm=r(),ns=e("p"),hm=o("I'll post it on Twitter when the next part is ready, where I'll be covering "),Ne=e("a"),vm=o("logic blocks"),km=o(", "),$e=e("a"),um=o("slots"),ym=o(", "),je=e("a"),fm=o("context"),mm=o(", and many others."),gm=r(),ki=e("p"),Re=e("strong"),xm=o("\u27A1 \u27A1  Continue reading on "),Zn=e("a"),Em=o("Part 2"),_m=o("."),this.h()},l(p){f=a(p,"SECTION",{});var d=n(f);J=a(d,"H2",{});var Om=n(J);R=a(Om,"A",{href:!0,id:!0});var Dm=n(R);Fs=l(Dm,"Background"),Dm.forEach(t),Om.forEach(t),T=c(d),I=a(d,"P",{});var js=n(I);Ue=l(js,"A while ago, "),Zs=a(js,"A",{href:!0,rel:!0});var Pm=n(Zs);jr=l(Pm,"@swyx"),Pm.forEach(t),Rr=l(js," came back to Singapore and visited us in "),Xs=a(js,"A",{href:!0,rel:!0});var Mm=n(Xs);Vr=l(Mm,"Shopee Singapore"),Mm.forEach(t),Br=l(js," ("),st=a(js,"A",{href:!0,rel:!0});var Am=n(st);Wr=l(Am,"We're hiring!"),Am.forEach(t),Ur=l(js,")."),js.forEach(t),Jr=c(d),F=a(d,"P",{});var Rs=n(F);Gr=l(Rs,"He gave an amazing sharing on "),tt=a(Rs,"A",{href:!0,rel:!0});var Nm=n(tt);qr=l(Nm,"Compile Svelte in Your Head"),Nm.forEach(t),zr=l(Rs," ("),et=a(Rs,"A",{href:!0,rel:!0});var $m=n(et);Yr=l($m,"video"),$m.forEach(t),Kr=l(Rs,") in the "),at=a(Rs,"A",{href:!0,rel:!0});var jm=n(at);Qr=l(jm,"ReactKnowledgeable Originals"),jm.forEach(t),Fr=l(Rs,"."),Rs.forEach(t),Zr=c(d),ko=a(d,"P",{});var Rm=n(ko);Xr=l(Rm,"I love his presentation and the title is so catchy, so I begged him to use the catchy title as this series of articles about the Svelte compiler. It will be about how Svelte sees your code and compiles it down to plain JavaScript."),Rm.forEach(t),d.forEach(t),mi=c(p),Hs=a(p,"SECTION",{});var Ji=n(Hs);uo=a(Ji,"H2",{});var Vm=n(uo);nt=a(Vm,"A",{href:!0,id:!0});var Bm=n(nt);sc=l(Bm,"Introduction"),Bm.forEach(t),Vm.forEach(t),tc=c(Ji),yo=a(Ji,"P",{});var Wm=n(yo);ec=l(Wm,"Lets refresh ourselves with how we write web app without any framework:"),Wm.forEach(t),Ji.forEach(t),gi=c(p),Cs=a(p,"SECTION",{});var Gi=n(Cs);fo=a(Gi,"H3",{});var Um=n(fo);ot=a(Um,"A",{href:!0,id:!0});var Jm=n(ot);ac=l(Jm,"Creating an element"),Jm.forEach(t),Um.forEach(t),nc=c(Gi),Je=a(Gi,"DIV",{class:!0});var RE=n(Je);RE.forEach(t),Gi.forEach(t),xi=c(p),Is=a(p,"SECTION",{});var qi=n(Is);mo=a(qi,"H3",{});var Gm=n(mo);lt=a(Gm,"A",{href:!0,id:!0});var qm=n(lt);oc=l(qm,"Updating an element"),qm.forEach(t),Gm.forEach(t),lc=c(qi),Ge=a(qi,"DIV",{class:!0});var VE=n(Ge);VE.forEach(t),qi.forEach(t),Ei=c(p),Os=a(p,"SECTION",{});var zi=n(Os);go=a(zi,"H3",{});var zm=n(go);it=a(zm,"A",{href:!0,id:!0});var Ym=n(it);ic=l(Ym,"Removing an element"),Ym.forEach(t),zm.forEach(t),rc=c(zi),qe=a(zi,"DIV",{class:!0});var BE=n(qe);BE.forEach(t),zi.forEach(t),_i=c(p),Ds=a(p,"SECTION",{});var Yi=n(Ds);xo=a(Yi,"H3",{});var Km=n(xo);rt=a(Km,"A",{href:!0,id:!0});var Qm=n(rt);cc=l(Qm,"Adding style to an element"),Qm.forEach(t),Km.forEach(t),pc=c(Yi),ze=a(Yi,"DIV",{class:!0});var WE=n(ze);WE.forEach(t),Yi.forEach(t),wi=c(p),G=a(p,"SECTION",{});var Vs=n(G);Eo=a(Vs,"H3",{});var Fm=n(Eo);ct=a(Fm,"A",{href:!0,id:!0});var Zm=n(ct);dc=l(Zm,"Listen for click events on an element"),Zm.forEach(t),Fm.forEach(t),hc=c(Vs),Ye=a(Vs,"DIV",{class:!0});var UE=n(Ye);UE.forEach(t),vc=c(Vs),_o=a(Vs,"P",{});var Xm=n(_o);kc=l(Xm,"These are code that you have to write, without using any framework or library."),Xm.forEach(t),uc=c(Vs),wo=a(Vs,"P",{});var s1=n(wo);yc=l(s1,"The main idea of this article is to show how the Svelte compiler compiles the Svelte syntax into statements of codes that I've shown above."),s1.forEach(t),Vs.forEach(t),bi=c(p),v=a(p,"SECTION",{});var k=n(v);bo=a(k,"H2",{});var t1=n(bo);pt=a(t1,"A",{href:!0,id:!0});var e1=n(pt);fc=l(e1,"Svelte syntax"),e1.forEach(t),t1.forEach(t),mc=c(k),So=a(k,"P",{});var a1=n(So);gc=l(a1,"Here I'm going to show you some basics of the Svelte syntax."),a1.forEach(t),xc=c(k),Lo=a(k,"BLOCKQUOTE",{});var n1=n(Lo);dt=a(n1,"P",{});var Ki=n(dt);Ec=l(Ki,"If you wish to learn more, I highly recommend trying "),ht=a(Ki,"A",{href:!0,rel:!0});var o1=n(ht);_c=l(o1,"Svelte's interactive tutorial"),o1.forEach(t),wc=l(Ki,"."),Ki.forEach(t),n1.forEach(t),bc=c(k),To=a(k,"P",{});var l1=n(To);Sc=l(l1,"So here is a basic Svelte component:"),l1.forEach(t),Lc=c(k),Ke=a(k,"DIV",{class:!0});var JE=n(Ke);JE.forEach(t),Tc=c(k),Ho=a(k,"P",{});var i1=n(Ho);vt=a(i1,"A",{href:!0,rel:!0});var r1=n(vt);Hc=l(r1,"Svelte REPL"),r1.forEach(t),i1.forEach(t),Cc=c(k),kt=a(k,"P",{});var Qi=n(kt);Ic=l(Qi,"To add style, you add a "),Qe=a(Qi,"CODE",{class:!0});var c1=n(Qe);Oc=l(c1,"<style>"),c1.forEach(t),Dc=l(Qi," tag:"),Qi.forEach(t),Pc=c(k),Fe=a(k,"DIV",{class:!0});var GE=n(Fe);GE.forEach(t),Mc=c(k),Co=a(k,"P",{});var p1=n(Co);ut=a(p1,"A",{href:!0,rel:!0});var d1=n(ut);Ac=l(d1,"Svelte REPL"),d1.forEach(t),p1.forEach(t),Nc=c(k),Io=a(k,"P",{});var h1=n(Io);$c=l(h1,"At this point, writing Svelte component just feels like writing HTML, that's because Svelte syntax is a super set of the HTML syntax."),h1.forEach(t),jc=c(k),Oo=a(k,"P",{});var v1=n(Oo);Rc=l(v1,"Let's look at how we add a data to our component:"),v1.forEach(t),Vc=c(k),Ze=a(k,"DIV",{class:!0});var qE=n(Ze);qE.forEach(t),Bc=c(k),Do=a(k,"P",{});var k1=n(Do);yt=a(k1,"A",{href:!0,rel:!0});var u1=n(yt);Wc=l(u1,"Svelte REPL"),u1.forEach(t),k1.forEach(t),Uc=c(k),Po=a(k,"P",{});var y1=n(Po);Jc=l(y1,"We put JavaScript inside the curly brackets."),y1.forEach(t),Gc=c(k),ft=a(k,"P",{});var Fi=n(ft);qc=l(Fi,"To add a click handler, we use the "),Xe=a(Fi,"CODE",{class:!0});var f1=n(Xe);zc=l(f1,"on:"),f1.forEach(t),Yc=l(Fi," directive"),Fi.forEach(t),Kc=c(k),sa=a(k,"DIV",{class:!0});var zE=n(sa);zE.forEach(t),Qc=c(k),Mo=a(k,"P",{});var m1=n(Mo);mt=a(m1,"A",{href:!0,rel:!0});var g1=n(mt);Fc=l(g1,"Svelte REPL"),g1.forEach(t),m1.forEach(t),Zc=c(k),ta=a(k,"P",{});var wm=n(ta);Xc=l(wm,"To change the data, we use "),gt=a(wm,"A",{href:!0,rel:!0});var x1=n(gt);sp=l(x1,"assignment operators"),x1.forEach(t),wm.forEach(t),tp=c(k),ea=a(k,"DIV",{class:!0});var YE=n(ea);YE.forEach(t),ep=c(k),Ao=a(k,"P",{});var E1=n(Ao);xt=a(E1,"A",{href:!0,rel:!0});var _1=n(xt);ap=l(_1,"Svelte REPL"),_1.forEach(t),E1.forEach(t),np=c(k),No=a(k,"P",{});var w1=n(No);op=l(w1,"Let's move on to see how Svelte syntax is compiled into JavaScript that we've seen earlier"),w1.forEach(t),k.forEach(t),Si=c(p),_=a(p,"SECTION",{});var C=n(_);$o=a(C,"H2",{});var b1=n($o);Et=a(b1,"A",{href:!0,id:!0});var S1=n(Et);lp=l(S1,"Compile Svelte in your Head"),S1.forEach(t),b1.forEach(t),ip=c(C),jo=a(C,"P",{});var L1=n(jo);rp=l(L1,"The Svelte compiler analyses the code you write and generates an optimised JavaScript output."),L1.forEach(t),cp=c(C),Ro=a(C,"P",{});var T1=n(Ro);pp=l(T1,"To study how Svelte compiles the code, lets start with the smallest example possible, and slowly build up the code. Through the process, you will see that Svelte incrementally adds to the output code based on your changes."),T1.forEach(t),dp=c(C),Vo=a(C,"P",{});var H1=n(Vo);hp=l(H1,"The first example that we are going to see is:"),H1.forEach(t),vp=c(C),aa=a(C,"DIV",{class:!0});var KE=n(aa);KE.forEach(t),kp=c(C),Bo=a(C,"P",{});var C1=n(Bo);_t=a(C1,"A",{href:!0,rel:!0});var I1=n(_t);up=l(I1,"Svelte REPL"),I1.forEach(t),C1.forEach(t),yp=c(C),Wo=a(C,"P",{});var O1=n(Wo);fp=l(O1,"The output code:"),O1.forEach(t),mp=c(C),na=a(C,"DIV",{class:!0});var QE=n(na);QE.forEach(t),gp=c(C),Uo=a(C,"P",{});var D1=n(Uo);xp=l(D1,"You can break down the output code into 2 sections:"),D1.forEach(t),Ep=c(C),wt=a(C,"UL",{});var Zi=n(wt);Jo=a(Zi,"LI",{});var P1=n(Jo);oa=a(P1,"CODE",{class:!0});var M1=n(oa);_p=l(M1,"create_fragment"),M1.forEach(t),P1.forEach(t),wp=c(Zi),Go=a(Zi,"LI",{});var A1=n(Go);la=a(A1,"CODE",{class:!0});var N1=n(la);bp=l(N1,"class App extends SvelteComponent"),N1.forEach(t),A1.forEach(t),Zi.forEach(t),C.forEach(t),Li=c(p),q=a(p,"SECTION",{});var Bs=n(q);qo=a(Bs,"H3",{});var $1=n(qo);bt=a($1,"A",{href:!0,id:!0});var j1=n(bt);Sp=l(j1,"create_fragment"),j1.forEach(t),$1.forEach(t),Lp=c(Bs),zo=a(Bs,"P",{});var R1=n(zo);Tp=l(R1,"Svelte components are the building blocks of a Svelte application. Each Svelte component focuses on building its piece or fragment of the final DOM."),R1.forEach(t),Hp=c(Bs),St=a(Bs,"P",{});var Xi=n(St);Cp=l(Xi,"The "),ia=a(Xi,"CODE",{class:!0});var V1=n(ia);Ip=l(V1,"create_fragment"),V1.forEach(t),Op=l(Xi," function gives the Svelte component an instruction manual on how to build the DOM fragment."),Xi.forEach(t),Dp=c(Bs),Lt=a(Bs,"P",{});var sr=n(Lt);Pp=l(sr,"Look at the return object of the "),ra=a(sr,"CODE",{class:!0});var B1=n(ra);Mp=l(B1,"create_fragment"),B1.forEach(t),Ap=l(sr," function. It has methods, such as:"),sr.forEach(t),Bs.forEach(t),Ti=c(p),N=a(p,"SECTION",{});var rs=n(N);Yo=a(rs,"H4",{});var W1=n(Yo);Tt=a(W1,"A",{href:!0,id:!0});var U1=n(Tt);Np=l(U1,"- c()"),U1.forEach(t),W1.forEach(t),$p=c(rs),Ht=a(rs,"P",{});var tr=n(Ht);jp=l(tr,"Short for "),Ko=a(tr,"STRONG",{});var J1=n(Ko);Rp=l(J1,"create"),J1.forEach(t),Vp=l(tr,"."),tr.forEach(t),Bp=c(rs),Qo=a(rs,"P",{});var G1=n(Qo);Wp=l(G1,"Contains instructions to create all the elements in the fragment."),G1.forEach(t),Up=c(rs),Ct=a(rs,"P",{});var er=n(Ct);Jp=l(er,"In this example, it contains instructions to create the "),ca=a(er,"CODE",{class:!0});var q1=n(ca);Gp=l(q1,"h1"),q1.forEach(t),qp=l(er," element"),er.forEach(t),zp=c(rs),pa=a(rs,"DIV",{class:!0});var FE=n(pa);FE.forEach(t),rs.forEach(t),Hi=c(p),$=a(p,"SECTION",{});var cs=n($);Fo=a(cs,"H4",{});var z1=n(Fo);It=a(z1,"A",{href:!0,id:!0});var Y1=n(It);Yp=l(Y1,"- m(target, anchor)"),Y1.forEach(t),z1.forEach(t),Kp=c(cs),Ot=a(cs,"P",{});var ar=n(Ot);Qp=l(ar,"Short for "),Zo=a(ar,"STRONG",{});var K1=n(Zo);Fp=l(K1,"mount"),K1.forEach(t),Zp=l(ar,"."),ar.forEach(t),Xp=c(cs),Xo=a(cs,"P",{});var Q1=n(Xo);sd=l(Q1,"Contains instructions to mount the elements into the target."),Q1.forEach(t),td=c(cs),us=a(cs,"P",{});var Xn=n(us);ed=l(Xn,"In this example, it contains instructions to insert the "),da=a(Xn,"CODE",{class:!0});var F1=n(da);ad=l(F1,"h1"),F1.forEach(t),nd=l(Xn," element into the "),ha=a(Xn,"CODE",{class:!0});var Z1=n(ha);od=l(Z1,"target"),Z1.forEach(t),ld=l(Xn,"."),Xn.forEach(t),id=c(cs),va=a(cs,"DIV",{class:!0});var ZE=n(va);ZE.forEach(t),cs.forEach(t),Ci=c(p),P=a(p,"SECTION",{});var K=n(P);sl=a(K,"H4",{});var X1=n(sl);Dt=a(X1,"A",{href:!0,id:!0});var sg=n(Dt);rd=l(sg,"- d(detaching)"),sg.forEach(t),X1.forEach(t),cd=c(K),Pt=a(K,"P",{});var nr=n(Pt);pd=l(nr,"Short for "),tl=a(nr,"STRONG",{});var tg=n(tl);dd=l(tg,"destroy"),tg.forEach(t),hd=l(nr,"."),nr.forEach(t),vd=c(K),el=a(K,"P",{});var eg=n(el);kd=l(eg,"Contains instructions to remove the elements from the target."),eg.forEach(t),ud=c(K),Mt=a(K,"P",{});var or=n(Mt);yd=l(or,"In this example, we detach the "),ka=a(or,"CODE",{class:!0});var ag=n(ka);fd=l(ag,"h1"),ag.forEach(t),md=l(or," element from the DOM"),or.forEach(t),gd=c(K),ua=a(K,"DIV",{class:!0});var XE=n(ua);XE.forEach(t),xd=c(K),al=a(K,"BLOCKQUOTE",{});var ng=n(al);At=a(ng,"P",{});var lr=n(At);Ed=l(lr,"The method names are short for better minification. "),Nt=a(lr,"A",{href:!0,rel:!0});var og=n(Nt);_d=l(og,"See what can't be minified here"),og.forEach(t),wd=l(lr,"."),lr.forEach(t),ng.forEach(t),K.forEach(t),Ii=c(p),y=a(p,"SECTION",{});var E=n(y);nl=a(E,"H3",{});var lg=n(nl);$t=a(lg,"A",{href:!0,id:!0});var ig=n($t);bd=l(ig,"export default class App extends SvelteComponent"),ig.forEach(t),lg.forEach(t),Sd=c(E),jt=a(E,"P",{});var ir=n(jt);Ld=l(ir,"Each component is a class, which you can import and instantiate through "),Rt=a(ir,"A",{href:!0,rel:!0});var rg=n(Rt);Td=l(rg,"this API"),rg.forEach(t),Hd=l(ir,"."),ir.forEach(t),Cd=c(E),Vt=a(E,"P",{});var rr=n(Vt);Id=l(rr,"And in the constructor, we initialize the component with information that made up the component such as "),ya=a(rr,"CODE",{class:!0});var cg=n(ya);Od=l(cg,"create_fragment"),cg.forEach(t),Dd=l(rr,". Svelte will only pass information that it is needed and remove them whenever it is not necessary."),rr.forEach(t),Pd=c(E),Bt=a(E,"P",{});var cr=n(Bt);Md=l(cr,"Try removing the "),fa=a(cr,"CODE",{class:!0});var pg=n(fa);Ad=l(pg,"<h1>"),pg.forEach(t),Nd=l(cr," tag and see what happens to the output:"),cr.forEach(t),$d=c(E),ma=a(E,"DIV",{class:!0});var s3=n(ma);s3.forEach(t),jd=c(E),ol=a(E,"P",{});var dg=n(ol);Wt=a(dg,"A",{href:!0,rel:!0});var hg=n(Wt);Rd=l(hg,"Svelte REPL"),hg.forEach(t),dg.forEach(t),Vd=c(E),ga=a(E,"DIV",{class:!0});var t3=n(ga);t3.forEach(t),Bd=c(E),ys=a(E,"P",{});var so=n(ys);Wd=l(so,"Svelte will pass in "),xa=a(so,"CODE",{class:!0});var vg=n(xa);Ud=l(vg,"null"),vg.forEach(t),Jd=l(so," instead of "),Ea=a(so,"CODE",{class:!0});var kg=n(Ea);Gd=l(kg,"create_fragment"),kg.forEach(t),qd=l(so,"!"),so.forEach(t),zd=c(E),Ut=a(E,"P",{});var pr=n(Ut);Yd=l(pr,"The "),_a=a(pr,"CODE",{class:!0});var ug=n(_a);Kd=l(ug,"init"),ug.forEach(t),Qd=l(pr," function is where Svelte sets up most of the internals, such as:"),pr.forEach(t),Fd=c(E),fs=a(E,"UL",{});var to=n(fs);ms=a(to,"LI",{});var eo=n(ms);Zd=l(eo,"component props, "),wa=a(eo,"CODE",{class:!0});var yg=n(wa);Xd=l(yg,"ctx"),yg.forEach(t),sh=l(eo," (will explain what "),ba=a(eo,"CODE",{class:!0});var fg=n(ba);th=l(fg,"ctx"),fg.forEach(t),eh=l(eo," is later) and context"),eo.forEach(t),ah=c(to),ll=a(to,"LI",{});var mg=n(ll);nh=l(mg,"component lifecycle events"),mg.forEach(t),oh=c(to),il=a(to,"LI",{});var gg=n(il);lh=l(gg,"component update mechanism"),gg.forEach(t),to.forEach(t),ih=c(E),Jt=a(E,"P",{});var dr=n(Jt);rh=l(dr,"and at the very end, Svelte calls the "),Sa=a(dr,"CODE",{class:!0});var xg=n(Sa);ch=l(xg,"create_fragment"),xg.forEach(t),ph=l(dr," to create and mount elements into the DOM."),dr.forEach(t),dh=c(E),Gt=a(E,"P",{});var hr=n(Gt);hh=l(hr,"If you noticed, all the internal state and methods are attached to "),La=a(hr,"CODE",{class:!0});var Eg=n(La);vh=l(Eg,"this.$$"),Eg.forEach(t),kh=l(hr,"."),hr.forEach(t),uh=c(E),qt=a(E,"P",{});var vr=n(qt);yh=l(vr,"So if you ever access the "),Ta=a(vr,"CODE",{class:!0});var _g=n(Ta);fh=l(_g,"$$"),_g.forEach(t),mh=l(vr," property of the component, you are tapping into the internals. You've been warned! \u{1F648}\u{1F6A8}"),vr.forEach(t),E.forEach(t),Oi=c(p),w=a(p,"SECTION",{});var O=n(w);rl=a(O,"H3",{});var wg=n(rl);zt=a(wg,"A",{href:!0,id:!0});var bg=n(zt);gh=l(bg,"Adding data"),bg.forEach(t),wg.forEach(t),xh=c(O),cl=a(O,"P",{});var Sg=n(cl);Eh=l(Sg,"Now that we've looked at the bare minimum of a Svelte component, let's see how adding a data would change the compiled output:"),Sg.forEach(t),_h=c(O),Ha=a(O,"DIV",{class:!0});var e3=n(Ha);e3.forEach(t),wh=c(O),pl=a(O,"P",{});var Lg=n(pl);Yt=a(Lg,"A",{href:!0,rel:!0});var Tg=n(Yt);bh=l(Tg,"Svelte REPL"),Tg.forEach(t),Lg.forEach(t),Sh=c(O),dl=a(O,"P",{});var Hg=n(dl);Lh=l(Hg,"Notice the change in the output:"),Hg.forEach(t),Th=c(O),Ca=a(O,"DIV",{class:!0});var a3=n(Ca);a3.forEach(t),Hh=c(O),hl=a(O,"P",{});var Cg=n(hl);Ch=l(Cg,"Some observations:"),Cg.forEach(t),Ih=c(O),Kt=a(O,"UL",{});var kr=n(Kt);Qt=a(kr,"LI",{});var ur=n(Qt);Oh=l(ur,"What you've written in the "),Ia=a(ur,"CODE",{class:!0});var Ig=n(Ia);Dh=l(Ig,"<script>"),Ig.forEach(t),Ph=l(ur," tag is moved into the top level of the code"),ur.forEach(t),Mh=c(kr),Oa=a(kr,"LI",{});var bm=n(Oa);Da=a(bm,"CODE",{class:!0});var Og=n(Da);Ah=l(Og,"h1"),Og.forEach(t),Nh=l(bm," element's text content is now a template literal"),bm.forEach(t),kr.forEach(t),$h=c(O),vl=a(O,"P",{});var Dg=n(vl);jh=l(Dg,"There's a lot of amazing things happening under the hood right now, but let's hold our horses for a while, because it's best explained when comparing with the next code change."),Dg.forEach(t),O.forEach(t),Di=c(p),u=a(p,"SECTION",{});var m=n(u);kl=a(m,"H3",{});var Pg=n(kl);Ft=a(Pg,"A",{href:!0,id:!0});var Mg=n(Ft);Rh=l(Mg,"Updating data"),Mg.forEach(t),Pg.forEach(t),Vh=c(m),Zt=a(m,"P",{});var yr=n(Zt);Bh=l(yr,"Let's add a function to update the "),Pa=a(yr,"CODE",{class:!0});var Ag=n(Pa);Wh=l(Ag,"name"),Ag.forEach(t),Uh=l(yr,":"),yr.forEach(t),Jh=c(m),Ma=a(m,"DIV",{class:!0});var n3=n(Ma);n3.forEach(t),Gh=c(m),ul=a(m,"P",{});var Ng=n(ul);Xt=a(Ng,"A",{href:!0,rel:!0});var $g=n(Xt);qh=l($g,"Svelte REPL"),$g.forEach(t),Ng.forEach(t),zh=c(m),yl=a(m,"P",{});var jg=n(yl);Yh=l(jg,"...and observe the change in the compiled output:"),jg.forEach(t),Kh=c(m),Aa=a(m,"DIV",{class:!0});var o3=n(Aa);o3.forEach(t),Qh=c(m),fl=a(m,"P",{});var Rg=n(fl);Fh=l(Rg,"Some observations:"),Rg.forEach(t),Zh=c(m),V=a(m,"UL",{});var ps=n(V);gs=a(ps,"LI",{});var ao=n(gs);Xh=l(ao,"the text content of "),Na=a(ao,"CODE",{class:!0});var Vg=n(Na);sv=l(Vg,"<h1>"),Vg.forEach(t),tv=l(ao," element is now broken into 2 text nodes, created by the "),$a=a(ao,"CODE",{class:!0});var Bg=n($a);ev=l(Bg,"text(...)"),Bg.forEach(t),av=l(ao," function"),ao.forEach(t),nv=c(ps),Ps=a(ps,"LI",{});var ui=n(Ps);ov=l(ui,"the return object of the "),ja=a(ui,"CODE",{class:!0});var Wg=n(ja);lv=l(Wg,"create_fragment"),Wg.forEach(t),iv=l(ui," has a new method, "),Ra=a(ui,"CODE",{class:!0});var Ug=n(Ra);rv=l(Ug,"p(ctx, dirty)"),Ug.forEach(t),ui.forEach(t),cv=c(ps),se=a(ps,"LI",{});var fr=n(se);pv=l(fr,"a new function "),Va=a(fr,"CODE",{class:!0});var Jg=n(Va);dv=l(Jg,"instance"),Jg.forEach(t),hv=l(fr," is created"),fr.forEach(t),vv=c(ps),xs=a(ps,"LI",{});var no=n(xs);kv=l(no,"What you've written in the "),Ba=a(no,"CODE",{class:!0});var Gg=n(Ba);uv=l(Gg,"<script>"),Gg.forEach(t),yv=l(no," tag is now moved into the "),Wa=a(no,"CODE",{class:!0});var qg=n(Wa);fv=l(qg,"instance"),qg.forEach(t),mv=l(no," function"),no.forEach(t),gv=c(ps),os=a(ps,"LI",{});var Ve=n(os);xv=l(Ve,"for the sharp-eyed, the variable "),Ua=a(Ve,"CODE",{class:!0});var zg=n(Ua);Ev=l(zg,"name"),zg.forEach(t),_v=l(Ve," that was used in the "),Ja=a(Ve,"CODE",{class:!0});var Yg=n(Ja);wv=l(Yg,"create_fragment"),Yg.forEach(t),bv=l(Ve," is now replaced by "),Ga=a(Ve,"CODE",{class:!0});var Kg=n(Ga);Sv=l(Kg,"ctx[0]"),Kg.forEach(t),Ve.forEach(t),ps.forEach(t),Lv=c(m),ml=a(m,"P",{});var Qg=n(ml);Tv=l(Qg,"So, why the change?"),Qg.forEach(t),Hv=c(m),te=a(m,"P",{});var mr=n(te);Cv=l(mr,"The Svelte compiler tracks all the variables declared in the "),qa=a(mr,"CODE",{class:!0});var Fg=n(qa);Iv=l(Fg,"<script>"),Fg.forEach(t),Ov=l(mr," tag."),mr.forEach(t),Dv=c(m),gl=a(m,"P",{});var Zg=n(gl);Pv=l(Zg,"It tracks whether the variable:"),Zg.forEach(t),Mv=c(m),B=a(m,"UL",{});var ds=n(B);ee=a(ds,"LI",{});var gr=n(ee);Av=l(gr,"can be mutated? eg: "),za=a(gr,"CODE",{class:!0});var Xg=n(za);Nv=l(Xg,"count++"),Xg.forEach(t),$v=l(gr,","),gr.forEach(t),jv=c(ds),ae=a(ds,"LI",{});var xr=n(ae);Rv=l(xr,"can be reassigned? eg: "),Ya=a(xr,"CODE",{class:!0});var sx=n(Ya);Vv=l(sx,"name = 'Svelte'"),sx.forEach(t),Bv=l(xr,","),xr.forEach(t),Wv=c(ds),Ka=a(ds,"LI",{});var Sm=n(Ka);Uv=l(Sm,"is referenced in the template? eg: "),Qa=a(Sm,"CODE",{class:!0});var tx=n(Qa);Jv=l(tx,"<h1>Hello {name}</h1>"),tx.forEach(t),Sm.forEach(t),Gv=c(ds),Ms=a(ds,"LI",{});var yi=n(Ms);qv=l(yi,"is writable? eg: "),Fa=a(yi,"CODE",{class:!0});var ex=n(Fa);zv=l(ex,"const i = 1;"),ex.forEach(t),Yv=l(yi," vs "),Za=a(yi,"CODE",{class:!0});var ax=n(Za);Kv=l(ax,"let i = 1;"),ax.forEach(t),yi.forEach(t),Qv=c(ds),xl=a(ds,"LI",{});var nx=n(xl);Fv=l(nx,"... and many more"),nx.forEach(t),ds.forEach(t),Zv=c(m),W=a(m,"P",{});var hs=n(W);Xv=l(hs,"When the Svelte compiler realises that the variable "),Xa=a(hs,"CODE",{class:!0});var ox=n(Xa);sk=l(ox,"name"),ox.forEach(t),tk=l(hs," can be reassigned, (due to "),sn=a(hs,"CODE",{class:!0});var lx=n(sn);ek=l(lx,"name = 'Svelte';"),lx.forEach(t),ak=l(hs," in "),tn=a(hs,"CODE",{class:!0});var ix=n(tn);nk=l(ix,"update"),ix.forEach(t),ok=l(hs,"), it breaks down the text content of the "),en=a(hs,"CODE",{class:!0});var rx=n(en);lk=l(rx,"h1"),rx.forEach(t),ik=l(hs," into parts, so that it can dynamically update part of the text."),hs.forEach(t),rk=c(m),ne=a(m,"P",{});var Er=n(ne);ck=l(Er,"Indeed, you can see that there's a new method, "),an=a(Er,"CODE",{class:!0});var cx=n(an);pk=l(cx,"p"),cx.forEach(t),dk=l(Er,", to update the text node."),Er.forEach(t),m.forEach(t),Pi=c(p),ls=a(p,"SECTION",{});var oo=n(ls);El=a(oo,"H4",{});var px=n(El);oe=a(px,"A",{href:!0,id:!0});var dx=n(oe);hk=l(dx,"- p(ctx, dirty)"),dx.forEach(t),px.forEach(t),vk=c(oo),le=a(oo,"P",{});var _r=n(le);kk=l(_r,"Short for "),_l=a(_r,"STRONG",{});var hx=n(_l);uk=l(hx,"u_p_date"),hx.forEach(t),yk=l(_r,"."),_r.forEach(t),fk=c(oo),is=a(oo,"P",{});var Be=n(is);wl=a(Be,"STRONG",{});var vx=n(wl);mk=l(vx,"p(ctx, dirty)"),vx.forEach(t),gk=l(Be," contains instructions to update the elements based on what has changed in the state ("),nn=a(Be,"CODE",{class:!0});var kx=n(nn);xk=l(kx,"dirty"),kx.forEach(t),Ek=l(Be,") and the state ("),on=a(Be,"CODE",{class:!0});var ux=n(on);_k=l(ux,"ctx"),ux.forEach(t),wk=l(Be,") of the component."),Be.forEach(t),oo.forEach(t),Mi=c(p),M=a(p,"SECTION",{});var Q=n(M);bl=a(Q,"H3",{});var yx=n(bl);ie=a(yx,"A",{href:!0,id:!0});var fx=n(ie);bk=l(fx,"instance variable"),fx.forEach(t),yx.forEach(t),Sk=c(Q),U=a(Q,"P",{});var vs=n(U);Lk=l(vs,"The compiler realises that the variable "),ln=a(vs,"CODE",{class:!0});var mx=n(ln);Tk=l(mx,"name"),mx.forEach(t),Hk=l(vs," cannot be shared across different instances of the "),rn=a(vs,"CODE",{class:!0});var gx=n(rn);Ck=l(gx,"App"),gx.forEach(t),Ik=l(vs," component. That's why it moves the declaration of the variable "),cn=a(vs,"CODE",{class:!0});var xx=n(cn);Ok=l(xx,"name"),xx.forEach(t),Dk=l(vs," into a function called "),pn=a(vs,"CODE",{class:!0});var Ex=n(pn);Pk=l(Ex,"instance"),Ex.forEach(t),Mk=l(vs,"."),vs.forEach(t),Ak=c(Q),Es=a(Q,"P",{});var lo=n(Es);Nk=l(lo,"In the previous example, no matter how many instances of the "),dn=a(lo,"CODE",{class:!0});var _x=n(dn);$k=l(_x,"App"),_x.forEach(t),jk=l(lo," component, the value of the variable "),hn=a(lo,"CODE",{class:!0});var wx=n(hn);Rk=l(wx,"name"),wx.forEach(t),Vk=l(lo," is the same and unchanged across the instances:"),lo.forEach(t),Bk=c(Q),vn=a(Q,"DIV",{class:!0});var l3=n(vn);l3.forEach(t),Wk=c(Q),Z=a(Q,"P",{});var Ws=n(Z);Uk=l(Ws,"But, in this example, the variable "),kn=a(Ws,"CODE",{class:!0});var bx=n(kn);Jk=l(bx,"name"),bx.forEach(t),Gk=l(Ws," can be changed within 1 instance of the component, so the declaration of the variable "),un=a(Ws,"CODE",{class:!0});var Sx=n(un);qk=l(Sx,"name"),Sx.forEach(t),zk=l(Ws," is now moved into the "),yn=a(Ws,"CODE",{class:!0});var Lx=n(yn);Yk=l(Lx,"instance"),Lx.forEach(t),Kk=l(Ws," function:"),Ws.forEach(t),Qk=c(Q),fn=a(Q,"DIV",{class:!0});var i3=n(fn);i3.forEach(t),Q.forEach(t),Ai=c(p),b=a(p,"SECTION",{});var D=n(b);Sl=a(D,"H3",{});var Tx=n(Sl);re=a(Tx,"A",{href:!0,id:!0});var Hx=n(re);Fk=l(Hx,"instance($$self, $$props, $$invalidate)"),Hx.forEach(t),Tx.forEach(t),Zk=c(D),_s=a(D,"P",{});var io=n(_s);Xk=l(io,"The "),mn=a(io,"CODE",{class:!0});var Cx=n(mn);su=l(Cx,"instance"),Cx.forEach(t),tu=l(io," function returns a list of "),Ll=a(io,"EM",{});var Ix=n(Ll);eu=l(Ix,"instance"),Ix.forEach(t),au=l(io," variables, which are variables that are:"),io.forEach(t),nu=c(D),ce=a(D,"UL",{});var wr=n(ce);Tl=a(wr,"LI",{});var Ox=n(Tl);ou=l(Ox,"referenced in the template"),Ox.forEach(t),lu=c(wr),Hl=a(wr,"LI",{});var Dx=n(Hl);iu=l(Dx,"mutated or reassigned, (can be changed within 1 instance of the component)"),Dx.forEach(t),wr.forEach(t),ru=c(D),pe=a(D,"P",{});var br=n(pe);cu=l(br,"In Svelte, we call this list of instance variables, "),Cl=a(br,"STRONG",{});var Px=n(Cl);pu=l(Px,"ctx"),Px.forEach(t),du=l(br,"."),br.forEach(t),hu=c(D),X=a(D,"P",{});var Us=n(X);vu=l(Us,"In the "),gn=a(Us,"CODE",{class:!0});var Mx=n(gn);ku=l(Mx,"init"),Mx.forEach(t),uu=l(Us," function, Svelte calls the "),xn=a(Us,"CODE",{class:!0});var Ax=n(xn);yu=l(Ax,"instance"),Ax.forEach(t),fu=l(Us," function to create "),Il=a(Us,"STRONG",{});var Nx=n(Il);mu=l(Nx,"ctx"),Nx.forEach(t),gu=l(Us,", and uses it to create the fragment for the component:"),Us.forEach(t),xu=c(D),En=a(D,"DIV",{class:!0});var r3=n(En);r3.forEach(t),Eu=c(D),ss=a(D,"P",{});var Js=n(ss);_u=l(Js,"Now, instead of accessing the variable "),_n=a(Js,"CODE",{class:!0});var $x=n(_n);wu=l($x,"name"),$x.forEach(t),bu=l(Js," outside of the component, we refer to the variable "),wn=a(Js,"CODE",{class:!0});var jx=n(wn);Su=l(jx,"name"),jx.forEach(t),Lu=l(Js," passed via the "),Ol=a(Js,"STRONG",{});var Rx=n(Ol);Tu=l(Rx,"ctx"),Rx.forEach(t),Hu=l(Js,":"),Js.forEach(t),Cu=c(D),bn=a(D,"DIV",{class:!0});var c3=n(bn);c3.forEach(t),Iu=c(D),Sn=a(D,"P",{});var Lm=n(Sn);Ou=l(Lm,"The reason that ctx is an array instead of a map or an object is because of an optimisation related to bitmask, you can see "),de=a(Lm,"A",{href:!0,rel:!0});var Vx=n(de);Du=l(Vx,"the discussion about it here"),Vx.forEach(t),Lm.forEach(t),D.forEach(t),Ni=c(p),H=a(p,"SECTION",{});var A=n(H);Dl=a(A,"H3",{});var Bx=n(Dl);he=a(Bx,"A",{href:!0,id:!0});var Wx=n(he);Pu=l(Wx,"$$invalidate"),Wx.forEach(t),Bx.forEach(t),Mu=c(A),ve=a(A,"P",{});var Sr=n(ve);Au=l(Sr,"The secret behind the system of reactivity in Svelte is the "),Ln=a(Sr,"CODE",{class:!0});var Ux=n(Ln);Nu=l(Ux,"$$invalidate"),Ux.forEach(t),$u=l(Sr," function."),Sr.forEach(t),ju=c(A),Pl=a(A,"P",{});var Jx=n(Pl);Ru=l(Jx,"Every variable that has been"),Jx.forEach(t),Vu=c(A),ke=a(A,"UL",{});var Lr=n(ke);Ml=a(Lr,"LI",{});var Gx=n(Ml);Bu=l(Gx,"reassigned or mutated"),Gx.forEach(t),Wu=c(Lr),Al=a(Lr,"LI",{});var qx=n(Al);Uu=l(qx,"referenced in the template"),qx.forEach(t),Lr.forEach(t),Ju=c(A),ue=a(A,"P",{});var Tr=n(ue);Gu=l(Tr,"will have the "),Tn=a(Tr,"CODE",{class:!0});var zx=n(Tn);qu=l(zx,"$$invalidate"),zx.forEach(t),zu=l(Tr," function inserted right after the assignment or mutation:"),Tr.forEach(t),Yu=c(A),Hn=a(A,"DIV",{class:!0});var p3=n(Hn);p3.forEach(t),Ku=c(A),ye=a(A,"P",{});var Hr=n(ye);Qu=l(Hr,"The "),Cn=a(Hr,"CODE",{class:!0});var Yx=n(Cn);Fu=l(Yx,"$$invalidate"),Yx.forEach(t),Zu=l(Hr," function marks the variable dirty and schedules an update for the component:"),Hr.forEach(t),Xu=c(A),In=a(A,"DIV",{class:!0});var d3=n(In);d3.forEach(t),A.forEach(t),$i=c(p),g=a(p,"SECTION",{});var S=n(g);Nl=a(S,"H3",{});var Kx=n(Nl);fe=a(Kx,"A",{href:!0,id:!0});var Qx=n(fe);sy=l(Qx,"Adding event listeners"),Qx.forEach(t),Kx.forEach(t),ty=c(S),$l=a(S,"P",{});var Fx=n($l);ey=l(Fx,"Let's now add an event listener"),Fx.forEach(t),ay=c(S),On=a(S,"DIV",{class:!0});var h3=n(On);h3.forEach(t),ny=c(S),jl=a(S,"P",{});var Zx=n(jl);me=a(Zx,"A",{href:!0,rel:!0});var Xx=n(me);oy=l(Xx,"Svelte REPL"),Xx.forEach(t),Zx.forEach(t),ly=c(S),Rl=a(S,"P",{});var s2=n(Rl);iy=l(s2,"And observe the difference:"),s2.forEach(t),ry=c(S),Dn=a(S,"DIV",{class:!0});var v3=n(Dn);v3.forEach(t),cy=c(S),Vl=a(S,"P",{});var t2=n(Vl);py=l(t2,"Some observations:"),t2.forEach(t),dy=c(S),ge=a(S,"UL",{});var Cr=n(ge);Pn=a(Cr,"LI",{});var Tm=n(Pn);Mn=a(Tm,"CODE",{class:!0});var e2=n(Mn);hy=l(e2,"instance"),e2.forEach(t),vy=l(Tm," function now returns 2 variables instead of 1"),Tm.forEach(t),ky=c(Cr),As=a(Cr,"LI",{});var fi=n(As);uy=l(fi,"Listen to click event during "),Bl=a(fi,"STRONG",{});var a2=n(Bl);yy=l(a2,"mount"),a2.forEach(t),fy=l(fi," and dispose it in "),Wl=a(fi,"STRONG",{});var n2=n(Wl);my=l(n2,"destroy"),n2.forEach(t),fi.forEach(t),Cr.forEach(t),gy=c(S),ts=a(S,"P",{});var Gs=n(ts);xy=l(Gs,"As I've mentioned earlier, "),An=a(Gs,"CODE",{class:!0});var o2=n(An);Ey=l(o2,"instance"),o2.forEach(t),_y=l(Gs," function returns variables that are "),Ul=a(Gs,"STRONG",{});var l2=n(Ul);wy=l(l2,"referenced in the template"),l2.forEach(t),by=l(Gs," and that are "),Jl=a(Gs,"STRONG",{});var i2=n(Jl);Sy=l(i2,"mutated or reassigned"),i2.forEach(t),Ly=l(Gs,"."),Gs.forEach(t),Ty=c(S),es=a(S,"P",{});var qs=n(es);Hy=l(qs,"Since we've just referenced the "),Nn=a(qs,"CODE",{class:!0});var r2=n(Nn);Cy=l(r2,"update"),r2.forEach(t),Iy=l(qs," function in the template, it is now returned in the "),$n=a(qs,"CODE",{class:!0});var c2=n($n);Oy=l(c2,"instance"),c2.forEach(t),Dy=l(qs," function as part of the "),Gl=a(qs,"STRONG",{});var p2=n(Gl);Py=l(p2,"ctx"),p2.forEach(t),My=l(qs,"."),qs.forEach(t),Ay=c(S),ql=a(S,"P",{});var d2=n(ql);Ny=l(d2,"Svelte tries generate as compact JavaScript output as possible, not returning an extra variable if it is not necessary."),d2.forEach(t),S.forEach(t),ji=c(p),x=a(p,"SECTION",{});var L=n(x);zl=a(L,"H3",{});var h2=n(zl);xe=a(h2,"A",{href:!0,id:!0});var v2=n(xe);$y=l(v2,"listen and dispose"),v2.forEach(t),h2.forEach(t),jy=c(L),ws=a(L,"P",{});var ro=n(ws);Ry=l(ro,"Whenever you add "),Ee=a(ro,"A",{href:!0,rel:!0});var k2=n(Ee);Vy=l(k2,"an event listener"),k2.forEach(t),By=l(ro," in Svelte, Svelte will inject code to add an "),_e=a(ro,"A",{href:!0,rel:!0});var u2=n(_e);Wy=l(u2,"event listener"),u2.forEach(t),Uy=l(ro," and remove it when the DOM fragment is removed from the DOM."),ro.forEach(t),Jy=c(L),Yl=a(L,"P",{});var y2=n(Yl);Gy=l(y2,"Try adding more event listeners,"),y2.forEach(t),qy=c(L),jn=a(L,"DIV",{class:!0});var k3=n(jn);k3.forEach(t),zy=c(L),Kl=a(L,"P",{});var f2=n(Kl);we=a(f2,"A",{href:!0,rel:!0});var m2=n(we);Yy=l(m2,"Svelte REPL"),m2.forEach(t),f2.forEach(t),Ky=c(L),Ql=a(L,"P",{});var g2=n(Ql);Qy=l(g2,"and observe the compiled output:"),g2.forEach(t),Fy=c(L),Rn=a(L,"DIV",{class:!0});var u3=n(Rn);u3.forEach(t),Zy=c(L),Fl=a(L,"P",{});var x2=n(Fl);Xy=l(x2,"Instead of declaring and creating a new variable to remove each event listener, Svelte assigns all of them to an array:"),x2.forEach(t),sf=c(L),Vn=a(L,"DIV",{class:!0});var y3=n(Vn);y3.forEach(t),tf=c(L),Zl=a(L,"P",{});var E2=n(Zl);ef=l(E2,"Minification can compact the variable name, but you can't remove the brackets."),E2.forEach(t),af=c(L),be=a(L,"P",{});var Ir=n(be);nf=l(Ir,"Again, this is another great example of where Svelte tries to generate compact JavaScript output. Svelte does not create the "),Bn=a(Ir,"CODE",{class:!0});var _2=n(Bn);of=l(_2,"dispose"),_2.forEach(t),lf=l(Ir," array when there's only 1 event listener."),Ir.forEach(t),L.forEach(t),Ri=c(p),z=a(p,"SECTION",{});var zs=n(z);Xl=a(zs,"H2",{});var w2=n(Xl);Se=a(w2,"A",{href:!0,id:!0});var b2=n(Se);rf=l(b2,"Summary"),b2.forEach(t),w2.forEach(t),cf=c(zs),si=a(zs,"P",{});var S2=n(si);pf=l(S2,"The Svelte syntax is a superset of HTML."),S2.forEach(t),df=c(zs),ti=a(zs,"P",{});var L2=n(ti);hf=l(L2,"When you write a Svelte component, the Svelte compiler analyses your code and generates optimised JavaScript code output."),L2.forEach(t),vf=c(zs),ei=a(zs,"P",{});var T2=n(ei);kf=l(T2,"The output can be divided into 3 segments:"),T2.forEach(t),zs.forEach(t),Vi=c(p),Ns=a(p,"SECTION",{});var Or=n(Ns);ai=a(Or,"H3",{});var H2=n(ai);Le=a(H2,"A",{href:!0,id:!0});var C2=n(Le);uf=l(C2,"1. create_fragment"),C2.forEach(t),H2.forEach(t),yf=c(Or),ni=a(Or,"UL",{});var I2=n(ni);oi=a(I2,"LI",{});var O2=n(oi);ff=l(O2,"Returns a fragment, which is an instruction manual on how to build the DOM fragment for the component"),O2.forEach(t),I2.forEach(t),Or.forEach(t),Bi=c(p),$s=a(p,"SECTION",{});var Dr=n($s);li=a(Dr,"H3",{});var D2=n(li);Te=a(D2,"A",{href:!0,id:!0});var P2=n(Te);mf=l(P2,"2. instance"),P2.forEach(t),D2.forEach(t),gf=c(Dr),bs=a(Dr,"UL",{});var co=n(bs);He=a(co,"LI",{});var Pr=n(He);xf=l(Pr,"Most of the code written in the "),Wn=a(Pr,"CODE",{class:!0});var M2=n(Wn);Ef=l(M2,"<script>"),M2.forEach(t),_f=l(Pr," tag is in here."),Pr.forEach(t),wf=c(co),ii=a(co,"LI",{});var A2=n(ii);bf=l(A2,"Returns a list of instance variables that are referenced in the template"),A2.forEach(t),Sf=c(co),Un=a(co,"LI",{});var Hm=n(Un);Jn=a(Hm,"CODE",{class:!0});var N2=n(Jn);Lf=l(N2,"$$invalidate"),N2.forEach(t),Tf=l(Hm," is inserted after every assignment and mutation of the instance variable"),Hm.forEach(t),co.forEach(t),Dr.forEach(t),Wi=c(p),Y=a(p,"SECTION",{});var Ys=n(Y);ri=a(Ys,"H3",{});var $2=n(ri);Ce=a($2,"A",{href:!0,id:!0});var j2=n(Ce);Hf=l(j2,"3. class App extends SvelteComponent"),j2.forEach(t),$2.forEach(t),Cf=c(Ys),Ss=a(Ys,"UL",{});var po=n(Ss);Ls=a(po,"LI",{});var ho=n(Ls);If=l(ho,"Initialise the component with "),Gn=a(ho,"CODE",{class:!0});var R2=n(Gn);Of=l(R2,"create_fragment"),R2.forEach(t),Df=l(ho," and "),qn=a(ho,"CODE",{class:!0});var V2=n(qn);Pf=l(V2,"instance"),V2.forEach(t),Mf=l(ho," function"),ho.forEach(t),Af=c(po),ci=a(po,"LI",{});var B2=n(ci);Nf=l(B2,"Sets up the component internals"),B2.forEach(t),$f=c(po),zn=a(po,"LI",{});var Cm=n(zn);jf=l(Cm,"Provides the "),Ie=a(Cm,"A",{href:!0,rel:!0});var W2=n(Ie);Rf=l(W2,"Component API"),W2.forEach(t),Cm.forEach(t),po.forEach(t),Vf=c(Ys),pi=a(Ys,"P",{});var U2=n(pi);Bf=l(U2,"Svelte strives to generate as compact JavaScript as possible, for example:"),U2.forEach(t),Wf=c(Ys),as=a(Ys,"UL",{});var Ks=n(as);Oe=a(Ks,"LI",{});var Mr=n(Oe);Uf=l(Mr,"Breaking text content of "),Yn=a(Mr,"CODE",{class:!0});var J2=n(Yn);Jf=l(J2,"h1"),J2.forEach(t),Gf=l(Mr," into separate text nodes only when part of the text can be updated"),Mr.forEach(t),qf=c(Ks),Ts=a(Ks,"LI",{});var vo=n(Ts);zf=l(vo,"Not defining "),Kn=a(vo,"CODE",{class:!0});var G2=n(Kn);Yf=l(G2,"create_fragment"),G2.forEach(t),Kf=l(vo," or "),Qn=a(vo,"CODE",{class:!0});var q2=n(Qn);Qf=l(q2,"instance"),q2.forEach(t),Ff=l(vo," function when it is not needed"),vo.forEach(t),Zf=c(Ks),De=a(Ks,"LI",{});var Ar=n(De);Xf=l(Ar,"Generate "),Fn=a(Ar,"CODE",{class:!0});var z2=n(Fn);sm=l(z2,"dispose"),z2.forEach(t),tm=l(Ar," as an array or a function, depending on the number of event listeners."),Ar.forEach(t),em=c(Ks),di=a(Ks,"LI",{});var Y2=n(di);am=l(Y2,"..."),Y2.forEach(t),Ks.forEach(t),Ys.forEach(t),Ui=c(p),j=a(p,"SECTION",{});var ks=n(j);hi=a(ks,"H2",{});var K2=n(hi);Pe=a(K2,"A",{href:!0,id:!0});var Q2=n(Pe);nm=l(Q2,"Closing Note"),Q2.forEach(t),K2.forEach(t),om=c(ks),vi=a(ks,"P",{});var F2=n(vi);lm=l(F2,"We've covered the basic structure of the Svelte's compiled output, and this is just the beginning."),F2.forEach(t),im=c(ks),Me=a(ks,"P",{});var Nr=n(Me);rm=l(Nr,"If you wish to know more, "),Ae=a(Nr,"A",{href:!0,rel:!0});var Z2=n(Ae);cm=l(Z2,"follow me on Twitter"),Z2.forEach(t),pm=l(Nr,"."),Nr.forEach(t),dm=c(ks),ns=a(ks,"P",{});var Qs=n(ns);hm=l(Qs,"I'll post it on Twitter when the next part is ready, where I'll be covering "),Ne=a(Qs,"A",{href:!0,rel:!0});var X2=n(Ne);vm=l(X2,"logic blocks"),X2.forEach(t),km=l(Qs,", "),$e=a(Qs,"A",{href:!0,rel:!0});var sE=n($e);um=l(sE,"slots"),sE.forEach(t),ym=l(Qs,", "),je=a(Qs,"A",{href:!0,rel:!0});var tE=n(je);fm=l(tE,"context"),tE.forEach(t),mm=l(Qs,", and many others."),Qs.forEach(t),gm=c(ks),ki=a(ks,"P",{});var eE=n(ki);Re=a(eE,"STRONG",{});var $r=n(Re);xm=l($r,"\u27A1 \u27A1  Continue reading on "),Zn=a($r,"A",{href:!0});var aE=n(Zn);Em=l(aE,"Part 2"),aE.forEach(t),_m=l($r,"."),$r.forEach(t),eE.forEach(t),ks.forEach(t),this.h()},h(){i(R,"href","#background"),i(R,"id","background"),i(Zs,"href","https://twitter.com/swyx"),i(Zs,"rel","nofollow"),i(Xs,"href","https://careers.shopee.sg/about/"),i(Xs,"rel","nofollow"),i(st,"href","https://grnh.se/32e5b3532"),i(st,"rel","nofollow"),i(tt,"href","https://www.swyx.io/speaking/svelte-compile-lightning/"),i(tt,"rel","nofollow"),i(et,"href","https://www.youtube.com/watch?v=FNmvcswdjV8"),i(et,"rel","nofollow"),i(at,"href","https://reactknowledgeable.org/"),i(at,"rel","nofollow"),i(nt,"href","#introduction"),i(nt,"id","introduction"),i(ot,"href","#creating-an-element"),i(ot,"id","creating-an-element"),i(Je,"class","code-section"),i(lt,"href","#updating-an-element"),i(lt,"id","updating-an-element"),i(Ge,"class","code-section"),i(it,"href","#removing-an-element"),i(it,"id","removing-an-element"),i(qe,"class","code-section"),i(rt,"href","#adding-style-to-an-element"),i(rt,"id","adding-style-to-an-element"),i(ze,"class","code-section"),i(ct,"href","#listen-for-click-events-on-an-element"),i(ct,"id","listen-for-click-events-on-an-element"),i(Ye,"class","code-section"),i(pt,"href","#svelte-syntax"),i(pt,"id","svelte-syntax"),i(ht,"href","https://svelte.dev/tutorial/basics"),i(ht,"rel","nofollow"),i(Ke,"class","code-section"),i(vt,"href","https://svelte.dev/repl/99aeea705b1e48fe8610b3ccee948280"),i(vt,"rel","nofollow"),i(Qe,"class","inline"),i(Fe,"class","code-section"),i(ut,"href","https://svelte.dev/repl/cf54441399864c0f9b0cb25710a5fe9b"),i(ut,"rel","nofollow"),i(Ze,"class","code-section"),i(yt,"href","https://svelte.dev/repl/c149ca960b0444948dc0c00a9175bcb3"),i(yt,"rel","nofollow"),i(Xe,"class","inline"),i(sa,"class","code-section"),i(mt,"href","https://svelte.dev/repl/1da1dcaf51814ed09d2341ea7915f0a1"),i(mt,"rel","nofollow"),i(gt,"href","https://www.w3schools.com/js/js_assignment.asp"),i(gt,"rel","nofollow"),i(ea,"class","code-section"),i(xt,"href","https://svelte.dev/repl/7bff4b7746df4007a51155d2006ce724"),i(xt,"rel","nofollow"),i(Et,"href","#compile-svelte-in-your-head"),i(Et,"id","compile-svelte-in-your-head"),i(aa,"class","code-section"),i(_t,"href","https://svelte.dev/repl/99aeea705b1e48fe8610b3ccee948280?version=3.19.1"),i(_t,"rel","nofollow"),i(na,"class","code-section"),i(oa,"class","inline"),i(la,"class","inline"),i(bt,"href","#create-fragment"),i(bt,"id","create-fragment"),i(ia,"class","inline"),i(ra,"class","inline"),i(Tt,"href","#c"),i(Tt,"id","c"),i(ca,"class","inline"),i(pa,"class","code-section"),i(It,"href","#m-target-anchor"),i(It,"id","m-target-anchor"),i(da,"class","inline"),i(ha,"class","inline"),i(va,"class","code-section"),i(Dt,"href","#d-detaching"),i(Dt,"id","d-detaching"),i(ka,"class","inline"),i(ua,"class","code-section"),i(Nt,"href","https://alistapart.com/article/javascript-minification-part-ii/#section3"),i(Nt,"rel","nofollow"),i($t,"href","#export-default-class-app-extends-sveltecomponent"),i($t,"id","export-default-class-app-extends-sveltecomponent"),i(Rt,"href","https://svelte.dev/docs#Client-side_component_API"),i(Rt,"rel","nofollow"),i(ya,"class","inline"),i(fa,"class","inline"),i(ma,"class","code-section"),i(Wt,"href","https://svelte.dev/repl/1f29ce52adf446fc9116bb957b7200ec?version=3.19.1"),i(Wt,"rel","nofollow"),i(ga,"class","code-section"),i(xa,"class","inline"),i(Ea,"class","inline"),i(_a,"class","inline"),i(wa,"class","inline"),i(ba,"class","inline"),i(Sa,"class","inline"),i(La,"class","inline"),i(Ta,"class","inline"),i(zt,"href","#adding-data"),i(zt,"id","adding-data"),i(Ha,"class","code-section"),i(Yt,"href","https://svelte.dev/repl/c149ca960b0444948dc0c00a9175bcb3?version=3.19.1"),i(Yt,"rel","nofollow"),i(Ca,"class","code-section"),i(Ia,"class","inline"),i(Da,"class","inline"),i(Ft,"href","#updating-data"),i(Ft,"id","updating-data"),i(Pa,"class","inline"),i(Ma,"class","code-section"),i(Xt,"href","https://svelte.dev/repl/3841485f4d224774ba42617e4e964968?version=3.19.1"),i(Xt,"rel","nofollow"),i(Aa,"class","code-section"),i(Na,"class","inline"),i($a,"class","inline"),i(ja,"class","inline"),i(Ra,"class","inline"),i(Va,"class","inline"),i(Ba,"class","inline"),i(Wa,"class","inline"),i(Ua,"class","inline"),i(Ja,"class","inline"),i(Ga,"class","inline"),i(qa,"class","inline"),i(za,"class","inline"),i(Ya,"class","inline"),i(Qa,"class","inline"),i(Fa,"class","inline"),i(Za,"class","inline"),i(Xa,"class","inline"),i(sn,"class","inline"),i(tn,"class","inline"),i(en,"class","inline"),i(an,"class","inline"),i(oe,"href","#p-ctx-dirty"),i(oe,"id","p-ctx-dirty"),i(nn,"class","inline"),i(on,"class","inline"),i(ie,"href","#instance-variable"),i(ie,"id","instance-variable"),i(ln,"class","inline"),i(rn,"class","inline"),i(cn,"class","inline"),i(pn,"class","inline"),i(dn,"class","inline"),i(hn,"class","inline"),i(vn,"class","code-section"),i(kn,"class","inline"),i(un,"class","inline"),i(yn,"class","inline"),i(fn,"class","code-section"),i(re,"href","#instance-self-props-invalidate"),i(re,"id","instance-self-props-invalidate"),i(mn,"class","inline"),i(gn,"class","inline"),i(xn,"class","inline"),i(En,"class","code-section"),i(_n,"class","inline"),i(wn,"class","inline"),i(bn,"class","code-section"),i(de,"href","https://github.com/sveltejs/svelte/issues/1922"),i(de,"rel","nofollow"),i(he,"href","#invalidate"),i(he,"id","invalidate"),i(Ln,"class","inline"),i(Tn,"class","inline"),i(Hn,"class","code-section"),i(Cn,"class","inline"),i(In,"class","code-section"),i(fe,"href","#adding-event-listeners"),i(fe,"id","adding-event-listeners"),i(On,"class","code-section"),i(me,"href","https://svelte.dev/repl/5b12ff52c2874f4dbb6405d9133b34da?version=3.19.1"),i(me,"rel","nofollow"),i(Dn,"class","code-section"),i(Mn,"class","inline"),i(An,"class","inline"),i(Nn,"class","inline"),i($n,"class","inline"),i(xe,"href","#listen-and-dispose"),i(xe,"id","listen-and-dispose"),i(Ee,"href","https://svelte.dev/tutorial/dom-events"),i(Ee,"rel","nofollow"),i(_e,"href","https://developer.mozilla.org/en-US/docs/Web/API/EventListener"),i(_e,"rel","nofollow"),i(jn,"class","code-section"),i(we,"href","https://svelte.dev/repl/efde6f2aaf624e708767f1bd3e94e479?version=3.19.1"),i(we,"rel","nofollow"),i(Rn,"class","code-section"),i(Vn,"class","code-section"),i(Bn,"class","inline"),i(Se,"href","#summary"),i(Se,"id","summary"),i(Le,"href","#1-create-fragment"),i(Le,"id","1-create-fragment"),i(Te,"href","#2-instance"),i(Te,"id","2-instance"),i(Wn,"class","inline"),i(Jn,"class","inline"),i(Ce,"href","#3-class-app-extends-sveltecomponent"),i(Ce,"id","3-class-app-extends-sveltecomponent"),i(Gn,"class","inline"),i(qn,"class","inline"),i(Ie,"href","https://svelte.dev/docs#Client-side_component_API"),i(Ie,"rel","nofollow"),i(Yn,"class","inline"),i(Kn,"class","inline"),i(Qn,"class","inline"),i(Fn,"class","inline"),i(Pe,"href","#closing-note"),i(Pe,"id","closing-note"),i(Ae,"href","https://twitter.com/lihautan"),i(Ae,"rel","nofollow"),i(Ne,"href","https://svelte.dev/tutorial/if-blocks"),i(Ne,"rel","nofollow"),i($e,"href","https://svelte.dev/tutorial/slots"),i($e,"rel","nofollow"),i(je,"href","https://svelte.dev/tutorial/context-api"),i(je,"rel","nofollow"),i(Zn,"href","/compile-svelte-in-your-head-part-2/")},m(p,d){h(p,f,d),s(f,J),s(J,R),s(R,Fs),s(f,T),s(f,I),s(I,Ue),s(I,Zs),s(Zs,jr),s(I,Rr),s(I,Xs),s(Xs,Vr),s(I,Br),s(I,st),s(st,Wr),s(I,Ur),s(f,Jr),s(f,F),s(F,Gr),s(F,tt),s(tt,qr),s(F,zr),s(F,et),s(et,Yr),s(F,Kr),s(F,at),s(at,Qr),s(F,Fr),s(f,Zr),s(f,ko),s(ko,Xr),h(p,mi,d),h(p,Hs,d),s(Hs,uo),s(uo,nt),s(nt,sc),s(Hs,tc),s(Hs,yo),s(yo,ec),h(p,gi,d),h(p,Cs,d),s(Cs,fo),s(fo,ot),s(ot,ac),s(Cs,nc),s(Cs,Je),Je.innerHTML=iE,h(p,xi,d),h(p,Is,d),s(Is,mo),s(mo,lt),s(lt,oc),s(Is,lc),s(Is,Ge),Ge.innerHTML=rE,h(p,Ei,d),h(p,Os,d),s(Os,go),s(go,it),s(it,ic),s(Os,rc),s(Os,qe),qe.innerHTML=cE,h(p,_i,d),h(p,Ds,d),s(Ds,xo),s(xo,rt),s(rt,cc),s(Ds,pc),s(Ds,ze),ze.innerHTML=pE,h(p,wi,d),h(p,G,d),s(G,Eo),s(Eo,ct),s(ct,dc),s(G,hc),s(G,Ye),Ye.innerHTML=dE,s(G,vc),s(G,_o),s(_o,kc),s(G,uc),s(G,wo),s(wo,yc),h(p,bi,d),h(p,v,d),s(v,bo),s(bo,pt),s(pt,fc),s(v,mc),s(v,So),s(So,gc),s(v,xc),s(v,Lo),s(Lo,dt),s(dt,Ec),s(dt,ht),s(ht,_c),s(dt,wc),s(v,bc),s(v,To),s(To,Sc),s(v,Lc),s(v,Ke),Ke.innerHTML=hE,s(v,Tc),s(v,Ho),s(Ho,vt),s(vt,Hc),s(v,Cc),s(v,kt),s(kt,Ic),s(kt,Qe),s(Qe,Oc),s(kt,Dc),s(v,Pc),s(v,Fe),Fe.innerHTML=vE,s(v,Mc),s(v,Co),s(Co,ut),s(ut,Ac),s(v,Nc),s(v,Io),s(Io,$c),s(v,jc),s(v,Oo),s(Oo,Rc),s(v,Vc),s(v,Ze),Ze.innerHTML=kE,s(v,Bc),s(v,Do),s(Do,yt),s(yt,Wc),s(v,Uc),s(v,Po),s(Po,Jc),s(v,Gc),s(v,ft),s(ft,qc),s(ft,Xe),s(Xe,zc),s(ft,Yc),s(v,Kc),s(v,sa),sa.innerHTML=uE,s(v,Qc),s(v,Mo),s(Mo,mt),s(mt,Fc),s(v,Zc),s(v,ta),s(ta,Xc),s(ta,gt),s(gt,sp),s(v,tp),s(v,ea),ea.innerHTML=yE,s(v,ep),s(v,Ao),s(Ao,xt),s(xt,ap),s(v,np),s(v,No),s(No,op),h(p,Si,d),h(p,_,d),s(_,$o),s($o,Et),s(Et,lp),s(_,ip),s(_,jo),s(jo,rp),s(_,cp),s(_,Ro),s(Ro,pp),s(_,dp),s(_,Vo),s(Vo,hp),s(_,vp),s(_,aa),aa.innerHTML=fE,s(_,kp),s(_,Bo),s(Bo,_t),s(_t,up),s(_,yp),s(_,Wo),s(Wo,fp),s(_,mp),s(_,na),na.innerHTML=mE,s(_,gp),s(_,Uo),s(Uo,xp),s(_,Ep),s(_,wt),s(wt,Jo),s(Jo,oa),s(oa,_p),s(wt,wp),s(wt,Go),s(Go,la),s(la,bp),h(p,Li,d),h(p,q,d),s(q,qo),s(qo,bt),s(bt,Sp),s(q,Lp),s(q,zo),s(zo,Tp),s(q,Hp),s(q,St),s(St,Cp),s(St,ia),s(ia,Ip),s(St,Op),s(q,Dp),s(q,Lt),s(Lt,Pp),s(Lt,ra),s(ra,Mp),s(Lt,Ap),h(p,Ti,d),h(p,N,d),s(N,Yo),s(Yo,Tt),s(Tt,Np),s(N,$p),s(N,Ht),s(Ht,jp),s(Ht,Ko),s(Ko,Rp),s(Ht,Vp),s(N,Bp),s(N,Qo),s(Qo,Wp),s(N,Up),s(N,Ct),s(Ct,Jp),s(Ct,ca),s(ca,Gp),s(Ct,qp),s(N,zp),s(N,pa),pa.innerHTML=gE,h(p,Hi,d),h(p,$,d),s($,Fo),s(Fo,It),s(It,Yp),s($,Kp),s($,Ot),s(Ot,Qp),s(Ot,Zo),s(Zo,Fp),s(Ot,Zp),s($,Xp),s($,Xo),s(Xo,sd),s($,td),s($,us),s(us,ed),s(us,da),s(da,ad),s(us,nd),s(us,ha),s(ha,od),s(us,ld),s($,id),s($,va),va.innerHTML=xE,h(p,Ci,d),h(p,P,d),s(P,sl),s(sl,Dt),s(Dt,rd),s(P,cd),s(P,Pt),s(Pt,pd),s(Pt,tl),s(tl,dd),s(Pt,hd),s(P,vd),s(P,el),s(el,kd),s(P,ud),s(P,Mt),s(Mt,yd),s(Mt,ka),s(ka,fd),s(Mt,md),s(P,gd),s(P,ua),ua.innerHTML=EE,s(P,xd),s(P,al),s(al,At),s(At,Ed),s(At,Nt),s(Nt,_d),s(At,wd),h(p,Ii,d),h(p,y,d),s(y,nl),s(nl,$t),s($t,bd),s(y,Sd),s(y,jt),s(jt,Ld),s(jt,Rt),s(Rt,Td),s(jt,Hd),s(y,Cd),s(y,Vt),s(Vt,Id),s(Vt,ya),s(ya,Od),s(Vt,Dd),s(y,Pd),s(y,Bt),s(Bt,Md),s(Bt,fa),s(fa,Ad),s(Bt,Nd),s(y,$d),s(y,ma),ma.innerHTML=_E,s(y,jd),s(y,ol),s(ol,Wt),s(Wt,Rd),s(y,Vd),s(y,ga),ga.innerHTML=wE,s(y,Bd),s(y,ys),s(ys,Wd),s(ys,xa),s(xa,Ud),s(ys,Jd),s(ys,Ea),s(Ea,Gd),s(ys,qd),s(y,zd),s(y,Ut),s(Ut,Yd),s(Ut,_a),s(_a,Kd),s(Ut,Qd),s(y,Fd),s(y,fs),s(fs,ms),s(ms,Zd),s(ms,wa),s(wa,Xd),s(ms,sh),s(ms,ba),s(ba,th),s(ms,eh),s(fs,ah),s(fs,ll),s(ll,nh),s(fs,oh),s(fs,il),s(il,lh),s(y,ih),s(y,Jt),s(Jt,rh),s(Jt,Sa),s(Sa,ch),s(Jt,ph),s(y,dh),s(y,Gt),s(Gt,hh),s(Gt,La),s(La,vh),s(Gt,kh),s(y,uh),s(y,qt),s(qt,yh),s(qt,Ta),s(Ta,fh),s(qt,mh),h(p,Oi,d),h(p,w,d),s(w,rl),s(rl,zt),s(zt,gh),s(w,xh),s(w,cl),s(cl,Eh),s(w,_h),s(w,Ha),Ha.innerHTML=bE,s(w,wh),s(w,pl),s(pl,Yt),s(Yt,bh),s(w,Sh),s(w,dl),s(dl,Lh),s(w,Th),s(w,Ca),Ca.innerHTML=SE,s(w,Hh),s(w,hl),s(hl,Ch),s(w,Ih),s(w,Kt),s(Kt,Qt),s(Qt,Oh),s(Qt,Ia),s(Ia,Dh),s(Qt,Ph),s(Kt,Mh),s(Kt,Oa),s(Oa,Da),s(Da,Ah),s(Oa,Nh),s(w,$h),s(w,vl),s(vl,jh),h(p,Di,d),h(p,u,d),s(u,kl),s(kl,Ft),s(Ft,Rh),s(u,Vh),s(u,Zt),s(Zt,Bh),s(Zt,Pa),s(Pa,Wh),s(Zt,Uh),s(u,Jh),s(u,Ma),Ma.innerHTML=LE,s(u,Gh),s(u,ul),s(ul,Xt),s(Xt,qh),s(u,zh),s(u,yl),s(yl,Yh),s(u,Kh),s(u,Aa),Aa.innerHTML=TE,s(u,Qh),s(u,fl),s(fl,Fh),s(u,Zh),s(u,V),s(V,gs),s(gs,Xh),s(gs,Na),s(Na,sv),s(gs,tv),s(gs,$a),s($a,ev),s(gs,av),s(V,nv),s(V,Ps),s(Ps,ov),s(Ps,ja),s(ja,lv),s(Ps,iv),s(Ps,Ra),s(Ra,rv),s(V,cv),s(V,se),s(se,pv),s(se,Va),s(Va,dv),s(se,hv),s(V,vv),s(V,xs),s(xs,kv),s(xs,Ba),s(Ba,uv),s(xs,yv),s(xs,Wa),s(Wa,fv),s(xs,mv),s(V,gv),s(V,os),s(os,xv),s(os,Ua),s(Ua,Ev),s(os,_v),s(os,Ja),s(Ja,wv),s(os,bv),s(os,Ga),s(Ga,Sv),s(u,Lv),s(u,ml),s(ml,Tv),s(u,Hv),s(u,te),s(te,Cv),s(te,qa),s(qa,Iv),s(te,Ov),s(u,Dv),s(u,gl),s(gl,Pv),s(u,Mv),s(u,B),s(B,ee),s(ee,Av),s(ee,za),s(za,Nv),s(ee,$v),s(B,jv),s(B,ae),s(ae,Rv),s(ae,Ya),s(Ya,Vv),s(ae,Bv),s(B,Wv),s(B,Ka),s(Ka,Uv),s(Ka,Qa),s(Qa,Jv),s(B,Gv),s(B,Ms),s(Ms,qv),s(Ms,Fa),s(Fa,zv),s(Ms,Yv),s(Ms,Za),s(Za,Kv),s(B,Qv),s(B,xl),s(xl,Fv),s(u,Zv),s(u,W),s(W,Xv),s(W,Xa),s(Xa,sk),s(W,tk),s(W,sn),s(sn,ek),s(W,ak),s(W,tn),s(tn,nk),s(W,ok),s(W,en),s(en,lk),s(W,ik),s(u,rk),s(u,ne),s(ne,ck),s(ne,an),s(an,pk),s(ne,dk),h(p,Pi,d),h(p,ls,d),s(ls,El),s(El,oe),s(oe,hk),s(ls,vk),s(ls,le),s(le,kk),s(le,_l),s(_l,uk),s(le,yk),s(ls,fk),s(ls,is),s(is,wl),s(wl,mk),s(is,gk),s(is,nn),s(nn,xk),s(is,Ek),s(is,on),s(on,_k),s(is,wk),h(p,Mi,d),h(p,M,d),s(M,bl),s(bl,ie),s(ie,bk),s(M,Sk),s(M,U),s(U,Lk),s(U,ln),s(ln,Tk),s(U,Hk),s(U,rn),s(rn,Ck),s(U,Ik),s(U,cn),s(cn,Ok),s(U,Dk),s(U,pn),s(pn,Pk),s(U,Mk),s(M,Ak),s(M,Es),s(Es,Nk),s(Es,dn),s(dn,$k),s(Es,jk),s(Es,hn),s(hn,Rk),s(Es,Vk),s(M,Bk),s(M,vn),vn.innerHTML=HE,s(M,Wk),s(M,Z),s(Z,Uk),s(Z,kn),s(kn,Jk),s(Z,Gk),s(Z,un),s(un,qk),s(Z,zk),s(Z,yn),s(yn,Yk),s(Z,Kk),s(M,Qk),s(M,fn),fn.innerHTML=CE,h(p,Ai,d),h(p,b,d),s(b,Sl),s(Sl,re),s(re,Fk),s(b,Zk),s(b,_s),s(_s,Xk),s(_s,mn),s(mn,su),s(_s,tu),s(_s,Ll),s(Ll,eu),s(_s,au),s(b,nu),s(b,ce),s(ce,Tl),s(Tl,ou),s(ce,lu),s(ce,Hl),s(Hl,iu),s(b,ru),s(b,pe),s(pe,cu),s(pe,Cl),s(Cl,pu),s(pe,du),s(b,hu),s(b,X),s(X,vu),s(X,gn),s(gn,ku),s(X,uu),s(X,xn),s(xn,yu),s(X,fu),s(X,Il),s(Il,mu),s(X,gu),s(b,xu),s(b,En),En.innerHTML=IE,s(b,Eu),s(b,ss),s(ss,_u),s(ss,_n),s(_n,wu),s(ss,bu),s(ss,wn),s(wn,Su),s(ss,Lu),s(ss,Ol),s(Ol,Tu),s(ss,Hu),s(b,Cu),s(b,bn),bn.innerHTML=OE,s(b,Iu),s(b,Sn),s(Sn,Ou),s(Sn,de),s(de,Du),h(p,Ni,d),h(p,H,d),s(H,Dl),s(Dl,he),s(he,Pu),s(H,Mu),s(H,ve),s(ve,Au),s(ve,Ln),s(Ln,Nu),s(ve,$u),s(H,ju),s(H,Pl),s(Pl,Ru),s(H,Vu),s(H,ke),s(ke,Ml),s(Ml,Bu),s(ke,Wu),s(ke,Al),s(Al,Uu),s(H,Ju),s(H,ue),s(ue,Gu),s(ue,Tn),s(Tn,qu),s(ue,zu),s(H,Yu),s(H,Hn),Hn.innerHTML=DE,s(H,Ku),s(H,ye),s(ye,Qu),s(ye,Cn),s(Cn,Fu),s(ye,Zu),s(H,Xu),s(H,In),In.innerHTML=PE,h(p,$i,d),h(p,g,d),s(g,Nl),s(Nl,fe),s(fe,sy),s(g,ty),s(g,$l),s($l,ey),s(g,ay),s(g,On),On.innerHTML=ME,s(g,ny),s(g,jl),s(jl,me),s(me,oy),s(g,ly),s(g,Rl),s(Rl,iy),s(g,ry),s(g,Dn),Dn.innerHTML=AE,s(g,cy),s(g,Vl),s(Vl,py),s(g,dy),s(g,ge),s(ge,Pn),s(Pn,Mn),s(Mn,hy),s(Pn,vy),s(ge,ky),s(ge,As),s(As,uy),s(As,Bl),s(Bl,yy),s(As,fy),s(As,Wl),s(Wl,my),s(g,gy),s(g,ts),s(ts,xy),s(ts,An),s(An,Ey),s(ts,_y),s(ts,Ul),s(Ul,wy),s(ts,by),s(ts,Jl),s(Jl,Sy),s(ts,Ly),s(g,Ty),s(g,es),s(es,Hy),s(es,Nn),s(Nn,Cy),s(es,Iy),s(es,$n),s($n,Oy),s(es,Dy),s(es,Gl),s(Gl,Py),s(es,My),s(g,Ay),s(g,ql),s(ql,Ny),h(p,ji,d),h(p,x,d),s(x,zl),s(zl,xe),s(xe,$y),s(x,jy),s(x,ws),s(ws,Ry),s(ws,Ee),s(Ee,Vy),s(ws,By),s(ws,_e),s(_e,Wy),s(ws,Uy),s(x,Jy),s(x,Yl),s(Yl,Gy),s(x,qy),s(x,jn),jn.innerHTML=NE,s(x,zy),s(x,Kl),s(Kl,we),s(we,Yy),s(x,Ky),s(x,Ql),s(Ql,Qy),s(x,Fy),s(x,Rn),Rn.innerHTML=$E,s(x,Zy),s(x,Fl),s(Fl,Xy),s(x,sf),s(x,Vn),Vn.innerHTML=jE,s(x,tf),s(x,Zl),s(Zl,ef),s(x,af),s(x,be),s(be,nf),s(be,Bn),s(Bn,of),s(be,lf),h(p,Ri,d),h(p,z,d),s(z,Xl),s(Xl,Se),s(Se,rf),s(z,cf),s(z,si),s(si,pf),s(z,df),s(z,ti),s(ti,hf),s(z,vf),s(z,ei),s(ei,kf),h(p,Vi,d),h(p,Ns,d),s(Ns,ai),s(ai,Le),s(Le,uf),s(Ns,yf),s(Ns,ni),s(ni,oi),s(oi,ff),h(p,Bi,d),h(p,$s,d),s($s,li),s(li,Te),s(Te,mf),s($s,gf),s($s,bs),s(bs,He),s(He,xf),s(He,Wn),s(Wn,Ef),s(He,_f),s(bs,wf),s(bs,ii),s(ii,bf),s(bs,Sf),s(bs,Un),s(Un,Jn),s(Jn,Lf),s(Un,Tf),h(p,Wi,d),h(p,Y,d),s(Y,ri),s(ri,Ce),s(Ce,Hf),s(Y,Cf),s(Y,Ss),s(Ss,Ls),s(Ls,If),s(Ls,Gn),s(Gn,Of),s(Ls,Df),s(Ls,qn),s(qn,Pf),s(Ls,Mf),s(Ss,Af),s(Ss,ci),s(ci,Nf),s(Ss,$f),s(Ss,zn),s(zn,jf),s(zn,Ie),s(Ie,Rf),s(Y,Vf),s(Y,pi),s(pi,Bf),s(Y,Wf),s(Y,as),s(as,Oe),s(Oe,Uf),s(Oe,Yn),s(Yn,Jf),s(Oe,Gf),s(as,qf),s(as,Ts),s(Ts,zf),s(Ts,Kn),s(Kn,Yf),s(Ts,Kf),s(Ts,Qn),s(Qn,Qf),s(Ts,Ff),s(as,Zf),s(as,De),s(De,Xf),s(De,Fn),s(Fn,sm),s(De,tm),s(as,em),s(as,di),s(di,am),h(p,Ui,d),h(p,j,d),s(j,hi),s(hi,Pe),s(Pe,nm),s(j,om),s(j,vi),s(vi,lm),s(j,im),s(j,Me),s(Me,rm),s(Me,Ae),s(Ae,cm),s(Me,pm),s(j,dm),s(j,ns),s(ns,hm),s(ns,Ne),s(Ne,vm),s(ns,km),s(ns,$e),s($e,um),s(ns,ym),s(ns,je),s(je,fm),s(ns,mm),s(j,gm),s(j,ki),s(ki,Re),s(Re,xm),s(Re,Zn),s(Zn,Em),s(Re,_m)},p:H3,d(p){p&&t(f),p&&t(mi),p&&t(Hs),p&&t(gi),p&&t(Cs),p&&t(xi),p&&t(Is),p&&t(Ei),p&&t(Os),p&&t(_i),p&&t(Ds),p&&t(wi),p&&t(G),p&&t(bi),p&&t(v),p&&t(Si),p&&t(_),p&&t(Li),p&&t(q),p&&t(Ti),p&&t(N),p&&t(Hi),p&&t($),p&&t(Ci),p&&t(P),p&&t(Ii),p&&t(y),p&&t(Oi),p&&t(w),p&&t(Di),p&&t(u),p&&t(Pi),p&&t(ls),p&&t(Mi),p&&t(M),p&&t(Ai),p&&t(b),p&&t(Ni),p&&t(H),p&&t($i),p&&t(g),p&&t(ji),p&&t(x),p&&t(Ri),p&&t(z),p&&t(Vi),p&&t(Ns),p&&t(Bi),p&&t($s),p&&t(Wi),p&&t(Y),p&&t(Ui),p&&t(j)}}}function D3(We){let f,J;const R=[We[0],lE];let Fs={$$slots:{default:[O3]},$$scope:{ctx:We}};for(let T=0;T<R.length;T+=1)Fs=Im(Fs,R[T]);return f=new C3({props:Fs}),{c(){x3(f.$$.fragment)},l(T){E3(f.$$.fragment,T)},m(T,I){_3(f,T,I),J=!0},p(T,[I]){const Ue=I&1?w3(R,[I&1&&nE(T[0]),I&0&&nE(lE)]):{};I&2&&(Ue.$$scope={dirty:I,ctx:T}),f.$set(Ue)},i(T){J||(b3(f.$$.fragment,T),J=!0)},o(T){S3(f.$$.fragment,T),J=!1},d(T){L3(f,T)}}}const lE={title:"Compile Svelte in your head (Part 1)",date:"2020-03-04T08:00:00Z",tags:["Svelte","JavaScript"],series:"Compile Svelte in your head",label:"blog",description:"BackgroundA while ago, @swyx came back to Singapore and visited us in Shopee Singapore (We're hiring!).He gave an amazing sharing on Compile Svelte in Your Head (video) in the ReactKnowledgeable Originals...",tableOfContents:[{link:"background",title:"Background"},{link:"introduction",title:"Introduction",nested:[{link:"creating-an-element",title:"Creating an element"},{link:"updating-an-element",title:"Updating an element"},{link:"removing-an-element",title:"Removing an element"},{link:"adding-style-to-an-element",title:"Adding style to an element"},{link:"listen-for-click-events-on-an-element",title:"Listen for click events on an element"}]},{link:"svelte-syntax",title:"Svelte syntax"},{link:"compile-svelte-in-your-head",title:"Compile Svelte in your Head",nested:[{link:"create-fragment",title:"create_fragment",nested:[{link:"c",title:"- c()"},{link:"m-target-anchor",title:"- m(target, anchor)"},{link:"d-detaching",title:"- d(detaching)"}]},{link:"export-default-class-app-extends-sveltecomponent",title:"export default class App extends SvelteComponent"},{link:"adding-data",title:"Adding data"},{link:"updating-data",title:"Updating data",nested:[{link:"p-ctx-dirty",title:"- p(ctx, dirty)"}]},{link:"instance-variable",title:"instance variable"},{link:"instance-self-props-invalidate",title:"instance($self, $props, $invalidate)"},{link:"invalidate",title:"$invalidate"},{link:"adding-event-listeners",title:"Adding event listeners"},{link:"listen-and-dispose",title:"listen and dispose"}]},{link:"summary",title:"Summary",nested:[{link:"1-create-fragment",title:"1. create_fragment"},{link:"2-instance",title:"2. instance"},{link:"3-class-app-extends-sveltecomponent",title:"3. class App extends SvelteComponent"}]},{link:"closing-note",title:"Closing Note"}]};function P3(We,f,J){return T3("blog",{image:I3}),We.$$set=R=>{J(0,f=Im(Im({},f),oE(R)))},f=oE(f),[f]}class R3 extends f3{constructor(f){super();m3(this,f,P3,D3,g3,{})}}export{R3 as default,lE as metadata};
