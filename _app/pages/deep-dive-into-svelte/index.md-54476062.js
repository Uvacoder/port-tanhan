import{S as Ox,i as Tx,s as Dx,C as dd,w as Wf,x as Bf,y as qf,z as Px,A as Af,q as Jf,o as Vf,B as Ff,r as Ix,R as jf,k as i,e as a,t,m as c,c as n,a as l,h as s,d as o,b as r,f as Mx,g as M,F as e,O as Lx}from"../../chunks/vendor-6bf294e3.js";import{B as Rx}from"../../chunks/BlogLayout-152f599b.js";import{T as $x}from"../../chunks/TableOfContent-1b9e4572.js";import{_ as Hx}from"../../chunks/twitter-card-image-a57df29d.js";import"../../chunks/stores-e20b7872.js";import"../../chunks/WebMentions-745413ea.js";/* empty css                                */function Nx(nt){let m,L,x,U,w,R,lt,we,Vn,rt,Fn,Un,Yn,it,ge,Zn,zn,Kn,Ho,Qn,Xn,No,el,tl,Ee,_e,Ao,jo,sl,ol,Y,al,be,nl,ll,Se,rl,il,cl,Ce,Go,Wo,pl,hl,Oe,kl,Te,vl,dl,yl,Bo,ul,fl,De,ct,xl,qo,Jo,ml,wl,pt,gl,Vo,yn,un,k,Fo,Pe,El,_l,Uo,bl,Sl,Yo,Cl,Ol,I,ht,Tl,Dl,kt,Pl,Il,vt,Ml,Ll,Zo,Rl,$l,zo,Hl,Nl,Ko,Qo,Al,jl,Xo,Gl,Wl,dt,Uf=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">&lt;!-- filename: index.html --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;decrement&quot;</span><span style="color: var(--shiki-color-text)">&gt;-&lt;/</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">span</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;count&quot;</span><span style="color: var(--shiki-color-text)">&gt;0&lt;/</span><span style="color: var(--shiki-token-string-expression)">span</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;increment&quot;</span><span style="color: var(--shiki-color-text)">&gt;+&lt;/</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,Bl,ea,ql,Jl,yt,Yf=`<div class="filename">script.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">span</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.querySelector</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;#count&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.querySelector</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;#decrement&#39;</span><span style="color: var(--shiki-color-text)">).</span><span style="color: var(--shiki-token-function)">onclick</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  (</span><span style="color: var(--shiki-token-constant)">span</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">--</span><span style="color: var(--shiki-color-text)">count);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.querySelector</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;#increment&#39;</span><span style="color: var(--shiki-color-text)">).</span><span style="color: var(--shiki-token-function)">onclick</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  (</span><span style="color: var(--shiki-token-constant)">span</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">count);</span></span></code></pre>`,Vl,ta,sa,Fl,Ul,$,Yl,oa,Zl,zl,aa,Kl,Ql,na,Xl,er,tr,la,sr,or,ut,Zf=`<div class="filename">script.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">buildCounter</span><span style="color: var(--shiki-color-text)">(parent) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">span</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;span&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">decrementBtn</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;button&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">incrementBtn</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;button&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">span</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">decrementBtn</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;-&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">decrementBtn</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">onclick</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">span</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">--</span><span style="color: var(--shiki-color-text)">count);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">incrementBtn</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;+&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">incrementBtn</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">onclick</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">span</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">count);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">parent</span><span style="color: var(--shiki-token-function)">.appendChild</span><span style="color: var(--shiki-color-text)">(decrementBtn);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">parent</span><span style="color: var(--shiki-token-function)">.appendChild</span><span style="color: var(--shiki-color-text)">(span);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">parent</span><span style="color: var(--shiki-token-function)">.appendChild</span><span style="color: var(--shiki-color-text)">(incrementBtn);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// you can call &#96;buildCounter&#96; however times you want</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">//  to get however many counters</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">buildCounter</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-color-text)">.body);</span></span></code></pre>`,ar,ra,nr,lr,ia,Z,rr,ft,ir,cr,xt,pr,hr,kr,Ie,vr,ca,dr,yr,ur,pa,fr,xr,ha,Me,mr,ka,wr,gr,Er,va,_r,br,mt,zf=`<div class="filename">Counter.jsx</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Counter</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">count</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">setCount</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">useState</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">onClick</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">&#123;() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">setCount</span><span style="color: var(--shiki-color-text)">(c </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> c </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">)&#125;&gt;-&lt;/</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">span</span><span style="color: var(--shiki-color-text)">&gt;&#123; count &#125;&lt;/</span><span style="color: var(--shiki-token-string-expression)">span</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">onClick</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">&#123;() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">setCount</span><span style="color: var(--shiki-color-text)">(c </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> c </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">)&#125;&gt;+&lt;/</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  )</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Sr,B,Cr,wt,Or,Tr,gt,Dr,Pr,ce,Et,Ir,Mr,Lr,O,Rr,_t,$r,Hr,Le,Nr,Ar,bt,jr,Gr,St,Wr,Br,qr,da,Jr,Vr,_,Fr,Ct,Ur,Yr,Re,Zr,zr,Ot,Kr,Qr,Tt,Xr,ei,Dt,ti,si,pe,oi,Pt,ai,ni,li,$e,ri,ya,ii,ci,pi,He,hi,ua,ki,vi,di,Ne,yi,Ae,ui,fi,xi,It,Kf=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// import &#123; element, ... &#125; from &quot;svelte/internal&quot;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> button0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> span</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> t</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> button1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dispose;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      button0 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">element</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;button&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">button0</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;-&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      span </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">element</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;span&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      t </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">text</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.count);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      button1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">element</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;button&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">button1</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;+&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(button0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;click&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.click_handler)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(button1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;click&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.click_handler_1);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> button0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> span</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">append</span><span style="color: var(--shiki-color-text)">(span</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> t);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> button1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">(changed</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> ctx) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">changed</span><span style="color: var(--shiki-color-text)">.count) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">set_data</span><span style="color: var(--shiki-color-text)">(t</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.count);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">click_handler</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;count&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (count </span><span style="color: var(--shiki-token-keyword)">-=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">click_handler_1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;count&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (count </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123; count</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> click_handler</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> click_handler_1 &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`,mi,je,fa,wi,gi,Ge,Ei,We,_i,bi,Si,Be,Ci,Mt,Oi,Ti,Di,xa,Pi,fn,g,ma,qe,Ii,Mi,wa,Li,Ri,ga,$i,Hi,Lt,Qf=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)">&gt;Click Me&lt;/</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">p</span><span style="color: var(--shiki-color-text)">&gt;Hello Svelte&lt;/</span><span style="color: var(--shiki-token-string-expression)">p</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,Ni,Ea,Ai,ji,Rt,Xf=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">button</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">element</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;button&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">button</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Click Me&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">p</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">element</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;p&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">p</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Hello Svelte&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// element(&#39;p&#39;) is short for &#96;document.createElement(&#39;p&#39;);</span></span></code></pre>`,Gi,z,Wi,$t,Bi,qi,Ht,Ji,Vi,Fi,_a,Ui,Yi,Nt,ex=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">onClick</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Greetings!&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">on:click</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string)">&#123;onClick&#125;</span><span style="color: var(--shiki-color-text)">&gt;Click Me&lt;/</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">p</span><span style="color: var(--shiki-color-text)">&gt;Hello Svelte&lt;/</span><span style="color: var(--shiki-token-string-expression)">p</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,xn,p,ba,Je,Zi,zi,T,Ki,At,Qi,Xi,jt,ec,tc,Gt,sc,oc,Wt,ac,nc,lc,Ve,rc,Fe,ic,cc,pc,H,hc,Bt,kc,vc,qt,dc,yc,Jt,uc,fc,xc,Sa,mc,wc,K,Ca,Vt,gc,Ec,Oa,Ft,_c,bc,Ta,Sc,Cc,Ut,tx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// 1. create_fragment</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123; </span><span style="color: var(--shiki-token-comment)">/*...*/</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">() &#123; </span><span style="color: var(--shiki-token-comment)">/*...*/</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">() &#123; </span><span style="color: var(--shiki-token-comment)">/*...*/</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">() &#123; </span><span style="color: var(--shiki-token-comment)">/*...*/</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// 2. instance</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// 3. the Component itself</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">App</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">SvelteComponent</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(options) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-function)">super</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-function)">init</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> options</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> instance</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> create_fragment</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> safe_not_equal</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> []);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> App;</span></span></code></pre>`,Oc,Da,Tc,Dc,Pa,Ia,Pc,Ic,Ue,Mc,Yt,Lc,Rc,$c,Ma,Hc,Nc,Zt,sx='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">App</span><span style="color: var(--shiki-color-text)">(&#123; target</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-color-text)">.body &#125;);</span></span></code></pre>',Ac,D,jc,zt,Gc,Wc,Kt,Bc,qc,Qt,Jc,Vc,Xt,Fc,Uc,Yc,Q,Zc,es,zc,Kc,ts,Qc,Xc,ep,La,ss,tp,os,sp,op,X,ap,as,np,lp,ns,rp,ip,cp,N,pp,ls,hp,kp,rs,vp,dp,is,yp,up,fp,xp,mp,ee,wp,cs,gp,Ep,ps,_p,bp,Sp,A,hs,ks,vs,Cp,Op,Ra,$a,Tp,Dp,ds,ys,us,Pp,Ip,Ha,Na,Mp,Lp,fs,Aa,Rp,te,ja,$p,Hp,Ye,Np,xs,Ap,jp,Gp,ms,Ze,Wp,Bp,qp,ws,Ga,Jp,ze,Ke,Vp,gs,Fp,Up,Yp,Es,Qe,Zp,zp,Kp,Qp,Xp,j,eh,_s,th,sh,bs,oh,ah,Ss,nh,lh,rh,Wa,Cs,ih,Os,ch,ph,P,hh,Ts,kh,vh,Ds,dh,yh,Ps,uh,fh,Is,xh,mh,wh,Ms,ox=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> t;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// create</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123; </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">     t </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">text</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.greeting);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// claim</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">l</span><span style="color: var(--shiki-color-text)">(nodes) &#123; </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      t </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">claim_text</span><span style="color: var(--shiki-color-text)">(nodes</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.greeting);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// hydrate</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    h</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> noop</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// mount</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> t</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// update</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">(changed</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> ctx) &#123; </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">changed</span><span style="color: var(--shiki-color-text)">.greeting) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">set_data</span><span style="color: var(--shiki-color-text)">(t</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.greeting);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// measure</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    r</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> noop</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// fix</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    f</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> noop</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// animate</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    a</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> noop</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// intro</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    i</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> noop</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// outro</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    o</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> noop</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// destroy</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">(detaching) &#123; </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (detaching) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">detach</span><span style="color: var(--shiki-color-text)">(t);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,gh,Ba,Eh,_h,qa,Ls,bh,Ja,Sh,Ch,Va,Oh,Th,Fa,Rs,Dh,Ua,Ph,Ih,se,Mh,$s,Lh,Rh,Hs,$h,Hh,Nh,Ya,Ns,Ah,Za,jh,Gh,G,Wh,As,Bh,qh,js,Jh,Vh,Gs,Fh,Uh,Yh,za,Ws,Zh,Ka,zh,Kh,oe,Qh,Bs,Xh,ek,qs,tk,sk,ok,b,Js,ak,Qa,nk,lk,rk,Vs,ik,Xa,ck,pk,hk,Fs,kk,en,vk,dk,yk,Us,uk,tn,fk,xk,mk,Ys,wk,sn,gk,Ek,ae,_k,Zs,bk,Sk,zs,Ck,Ok,Tk,on,Ks,Dk,an,Pk,Ik,Xe,Mk,Qs,Lk,Rk,mn,y,nn,et,$k,Hk,ln,Nk,Ak,rn,jk,Gk,Xs,ax='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">App</span><span style="color: var(--shiki-color-text)">(&#123; target</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-color-text)">.body &#125;);</span></span></code></pre>',Wk,ne,Bk,eo,qk,Jk,to,Vk,Fk,Uk,so,nx='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">init</span><span style="color: var(--shiki-color-text)">(app</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> options</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> instance</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> create_fragment) &#123;&#125;</span></span></code></pre>',Yk,le,Zk,oo,zk,Kk,ao,Qk,Xk,ev,no,lx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">init</span><span style="color: var(--shiki-color-text)">(app</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> options</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> instance</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> create_fragment) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">(app</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.props);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,tv,re,sv,lo,ov,av,ro,nv,lv,rv,io,rx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">init</span><span style="color: var(--shiki-color-text)">(app</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> options</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> instance</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> create_fragment) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">(app</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.props);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,iv,cn,cv,pv,co,ix=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">init</span><span style="color: var(--shiki-color-text)">(app</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> options</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> instance</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> create_fragment) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">(app</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.props);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// create / claim the nodes</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.hydratable) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.claim</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.create</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// mount the nodes</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.mount</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,hv,tt,kv,po,vv,dv,yv,ie,uv,ho,fv,xv,pn,ko,mv,wv,gv,st,Ev,vo,_v,bv,Sv,yo,uo,Cv,Ov,Tv,fo,cx=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">init</span><span style="color: var(--shiki-color-text)">(app</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> options</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> instance</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> create_fragment) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (name</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    ctx[name] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> value;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// update the nodes</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.update</span><span style="color: var(--shiki-color-text)">(&#123; [name]</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> ctx);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">(app</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// create / claim the nodes</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.hydratable) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.claim</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.create</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// mount the nodes</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.mount</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Dv,hn,W,Pv,xo,Iv,Mv,mo,Lv,Rv,wo,$v,Hv,Nv,kn,Av,wn,he,vn,ot,jv,Gv,dn,Wv,gn;return m=new $x({props:{data:[{link:"writing-vanilla-javascript",title:"Writing vanilla JavaScript"},{link:"conceptually-how-does-compiled-svelte-component-work",title:"Conceptually, how does compiled Svelte component work?"},{link:"how-the-compiled-svelte-component-works",title:"How the compiled Svelte component works",nested:[{link:"pieces-them-together",title:"Pieces them together"}]},{link:"the-svelte-compiler",title:"The Svelte compiler"}]}}),{c(){Wf(m.$$.fragment),L=i(),x=a("section"),U=a("h1"),w=a("a"),R=t("[DRAFT] What is Svelte?"),lt=i(),we=a("p"),Vn=t("-- this is a work in progress draft, you can read "),rt=a("a"),Fn=t("Compile Svelte in your Head"),Un=t(" which is a more friendly version --"),Yn=i(),it=a("p"),ge=a("a"),Zn=t("Svelte"),zn=t(" is a compiler for web applications. Svelte provides a framework for you to write your web apps declaratively, and it will compile them into efficient JavaScript."),Kn=i(),Ho=a("p"),Qn=t("In this article, I will be sharing how Svelte works."),Xn=i(),No=a("p"),el=t("If you are:"),tl=i(),Ee=a("ul"),_e=a("li"),Ao=a("p"),jo=a("strong"),sl=t("First time hearing Svelte?"),ol=i(),Y=a("p"),al=t("Please go and watch "),be=a("a"),nl=t("Rich Harris"),ll=t(" inspiring talk on "),Se=a("a"),rl=t('"Rethinking reactivity"'),il=t(" where he announces Svelte."),cl=i(),Ce=a("li"),Go=a("p"),Wo=a("strong"),pl=t("Interested learning how to write Svelte application?"),hl=i(),Oe=a("p"),kl=t("Please follow along "),Te=a("a"),vl=t("Svelte's interactive tutorial"),dl=t(", I find it very helpful and it get me started in no time!"),yl=i(),Bo=a("p"),ul=t("Because, I will be going deep level by level, guiding you through the source code sometimes, explaining how Svelte works."),fl=i(),De=a("ul"),ct=a("li"),xl=t("look at code written in vanilla vs using framework"),qo=a("ul"),Jo=a("li"),ml=t("compile time vs build time spectrum, svelte and react opposite side of the spectrum"),wl=i(),pt=a("li"),gl=t("a picture of how a svelte component works"),Vo=a("ul"),yn=a("li"),un=i(),k=a("section"),Fo=a("h2"),Pe=a("a"),El=t("Writing vanilla JavaScript"),_l=i(),Uo=a("p"),bl=t("Before we get started, lets' do an exercise."),Sl=i(),Yo=a("p"),Cl=t("Let's write a counter app like below, without using any framework:"),Ol=i(),I=a("div"),ht=a("button"),Tl=t("-"),Dl=i(),kt=a("span"),Pl=t("0"),Il=i(),vt=a("button"),Ml=t("+"),Ll=i(),Zo=a("script"),Rl=t(`let count = 0;
    const span = document.querySelector('#ex1-count');
    document.querySelector('#ex1-decrement').onclick = () => span.textContent = --count;
    document.querySelector('#ex1-increment').onclick = () => span.textContent = ++count;`),$l=i(),zo=a("p"),Hl=t("There are generally 2 approaches to this:"),Nl=i(),Ko=a("p"),Qo=a("strong"),Al=t("1. HTML + JS"),jl=i(),Xo=a("p"),Gl=t("You build your app layout in HTML:"),Wl=i(),dt=a("div"),Bl=i(),ea=a("p"),ql=t("then in JS, you use id selector to query out the dynamic part of your HTML and attach event listeners to respond to user inputs:"),Jl=i(),yt=a("div"),Vl=i(),ta=a("p"),sa=a("strong"),Fl=t("2. JS only"),Ul=i(),$=a("p"),Yl=t("If you want to have more than 1 counter, the former approach may require you to "),oa=a("em"),Zl=t("copy + paste"),zl=t(" your HTML "),aa=a("em"),Kl=t("n"),Ql=t(" times for "),na=a("em"),Xl=t("n"),er=t(" number of counters."),tr=i(),la=a("p"),sr=t("The alternative would be to build the HTML elements programatically:"),or=i(),ut=a("div"),ar=i(),ra=a("p"),nr=t("This is the least amount of code to be written for a counter app."),lr=i(),ia=a("p"),Z=a("em"),rr=t("(One may argue that you can abstract out "),ft=a("code"),ir=t("document.createElement"),cr=t(" or "),xt=a("code"),pr=t("parent.appendChild"),hr=t(" to a function to make the code smaller, but that's besides the point.)"),kr=i(),Ie=a("p"),vr=t("This is the least amount of code to be written "),ca=a("strong"),dr=t("and be executed by the browser"),yr=t(" for a counter app."),ur=i(),pa=a("p"),fr=t("So why does this matter? Well, before we proceed to explain how this got to do with Svelte, let's first talk about React."),xr=i(),ha=a("p"),Me=a("em"),mr=t("I chose to talk about React "),ka=a("strong"),wr=t("just because I am a React developer"),gr=t(", I use React at my work and at this very blog site. I am most familiar with React than any other JS frameworks out there"),Er=i(),va=a("p"),_r=t("In React, you can argubly write a much concise and declarative code:"),br=i(),mt=a("div"),Sr=i(),B=a("p"),Cr=t("That's because React has hidden all the "),wt=a("code"),Or=t("document.createElement"),Tr=t(", "),gt=a("code"),Dr=t("parent.appendChild"),Pr=t(", ... under "),ce=a("a"),Et=a("code"),Ir=t("react-dom"),Mr=t(" renderer."),Lr=i(),O=a("p"),Rr=t("Everytime you click on a counter button, the function "),_t=a("code"),$r=t("Counter"),Hr=t(" is called to get the new "),Le=a("a"),Nr=t("Fiber tree"),Ar=t(" with the new state value, and it is compared with the current Fiber tree. After the diffing between the 2 Fiber tree, React collects the necessary DOM operations, in this case is to update "),bt=a("code"),jr=t("span"),Gr=t("'s "),St=a("code"),Wr=t("textContent"),Br=t("."),qr=i(),da=a("p"),Jr=t("If you feel this is overly complicated, wait, there is more."),Vr=i(),_=a("p"),Fr=t("When the "),Ct=a("code"),Ur=t("react-dom"),Yr=i(),Re=a("a"),Zr=t("receives the DOM operations"),zr=t(", it receives "),Ot=a("code"),Kr=t("['span', { 'children': '1' }]"),Qr=t(", the element and the update payload, and "),Tt=a("code"),Xr=t("react-dom"),ei=t(" has to figure out that "),Dt=a("code"),ti=t("children"),si=t(" meant "),pe=a("a"),oi=t("setting the "),Pt=a("code"),ai=t("textContent"),ni=t("."),li=i(),$e=a("p"),ri=t("As you can see, there's a lot of code "),ya=a("strong"),ii=t("executed"),ci=t(" under the hood, which you may think is overkill for this contrived example. But with a much larger/complex application, you will soon appreciate the flexibilty React provides. to achieve that, react has to make sure it has code to capture all the different scenarios, without knowing what will be written by us, the developer."),pi=i(),He=a("p"),hi=t("Now, here is how Svelte is different. "),ua=a("strong"),ki=t("Svelte is a compiler"),vi=t(". Svelte knows what we, the developer, has written, and generate only code that is needed for our application."),di=i(),Ne=a("p"),yi=t("Here's what Svelte generated for our Counter app ("),Ae=a("a"),ui=t("repl"),fi=t("):"),xi=i(),It=a("div"),mi=i(),je=a("p"),fa=a("strong"),wi=t("Disclaimer:"),gi=i(),Ge=a("em"),Ei=t("There are parts of code deliberately removed to make the code more concise and readable, which should not affect the point I am trying to make here. Feel free to read the original code in the "),We=a("a"),_i=t("repl"),bi=t("."),Si=i(),Be=a("p"),Ci=t("You see Svelte's generated code is much like the one we've written in plain JavaScript just now. It generates the "),Mt=a("code"),Oi=t(".textContent"),Ti=t(" directly, because during compilation, Svelte knows exactly what you are trying to do. Therefore it can try to handle all the different scenarios, where React tries to handle in runtime, in build time."),Di=i(),xa=a("p"),Pi=t("Now you know the fundamental differences between Svelte and React, let's take a look how a Svelte component works."),fn=i(),g=a("section"),ma=a("h2"),qe=a("a"),Ii=t("Conceptually, how does compiled Svelte component work?"),Mi=i(),wa=a("p"),Li=t("In this section, we are going to write Svelte component incrementally, and see how each changes ended up in the compiled Svelte component."),Ri=i(),ga=a("p"),$i=t("Let's start with a simple button and a text:"),Hi=i(),Lt=a("div"),Ni=i(),Ea=a("p"),Ai=t("When Svelte sees this, these HTML elements will translate into JavaScript statement to create the elements:"),ji=i(),Rt=a("div"),Gi=i(),z=a("p"),Wi=t("If you inspect the Svelte compiled output, you would notice that these instruction lies in a function call "),$t=a("code"),Bi=t("create_fragment"),qi=t(". "),Ht=a("code"),Ji=t("create_fragment"),Vi=t(" is the function where Svelte keeps the DOM instructions for the component."),Fi=i(),_a=a("p"),Ui=t("Next, lets add some event listener to the button:"),Yi=i(),Nt=a("div"),xn=i(),p=a("section"),ba=a("h2"),Je=a("a"),Zi=t("How the compiled Svelte component works"),zi=i(),T=a("p"),Ki=t("To differentiate between the component code you write, and the component code generated by Svelte, I will use "),At=a("code"),Qi=t(".svelte"),Xi=t(" component to refer the code you would write in a "),jt=a("code"),ec=t(".svelte"),tc=t(" file, and Svelte component to refer the "),Gt=a("code"),sc=t(".js"),oc=t(" code, generated by Svelte from your "),Wt=a("code"),ac=t(".svelte"),nc=t(" component, that will be executed in your application."),lc=i(),Ve=a("p"),rc=t("The best way to understand how Svelte component works is to use the "),Fe=a("a"),ic=t("Svelte's REPL"),cc=t(". Try writing a component, and see how Svelte compiles the component into plain JavaScript."),pc=i(),H=a("p"),hc=t("Svelte compiles the "),Bt=a("code"),kc=t(".svelte"),vc=t(" file into a "),qt=a("code"),dc=t(".js"),yc=t(" file, which the "),Jt=a("code"),uc=t("export default"),fc=t(" the compiled Svelte component."),xc=i(),Sa=a("p"),mc=t("The compiled Svelte component contains 3 main sections:"),wc=i(),K=a("ul"),Ca=a("li"),Vt=a("code"),gc=t("create_fragment"),Ec=i(),Oa=a("li"),Ft=a("code"),_c=t("instance"),bc=i(),Ta=a("li"),Sc=t("the Component itself"),Cc=i(),Ut=a("div"),Oc=i(),Da=a("p"),Tc=t("Let's explain what each section of the code is for, from the bottom up."),Dc=i(),Pa=a("p"),Ia=a("strong"),Pc=t("3. The component itself"),Ic=i(),Ue=a("p"),Mc=t("Each compiled component, by default, is a subclass of "),Yt=a("code"),Lc=t("SvelteComponent"),Rc=t("."),$c=i(),Ma=a("p"),Hc=t("To create the component onto the DOM, you can create an instance of the component:"),Nc=i(),Zt=a("div"),Ac=i(),D=a("p"),jc=t("In the constructor of "),zt=a("code"),Gc=t("App"),Wc=t(", as you can see, calls the "),Kt=a("code"),Bc=t("init"),qc=t(" function, which takes in both "),Qt=a("code"),Jc=t("instance"),Vc=t(" and "),Xt=a("code"),Fc=t("create_fragment"),Uc=t(" function."),Yc=i(),Q=a("p"),Zc=t("The "),es=a("code"),zc=t("init"),Kc=t(" function, as the name suggests, will set things up, which lead us to the "),ts=a("code"),Qc=t("instance"),Xc=t(" function."),ep=i(),La=a("p"),ss=a("strong"),tp=t("2. "),os=a("code"),sp=t("instance"),op=i(),X=a("p"),ap=t("The "),as=a("code"),np=t("instance"),lp=t(" function is where all the business logic of your "),ns=a("code"),rp=t(".svelte"),ip=t(" component lies."),cp=i(),N=a("p"),pp=t("That's why, if you take a closer look, the "),ls=a("code"),hp=t("instance"),kp=t(" function contains most, if not all, the code you write in the "),rs=a("code"),vp=t("<script>"),dp=t(" tag in the "),is=a("code"),yp=t(".svelte"),up=t(" component."),fp=i(),xp=a("hr"),mp=i(),ee=a("p"),wp=t("Code that you write in the "),cs=a("code"),gp=t("<script>"),Ep=t(" tag that will not be in the "),ps=a("code"),_p=t("instance"),bp=t(" function are:"),Sp=i(),A=a("ul"),hs=a("li"),ks=a("strong"),vs=a("code"),Cp=t("import"),Op=t(" statement"),Ra=a("ul"),$a=a("li"),Tp=t("These will be moved to the beginning of the compiled file."),Dp=i(),ds=a("li"),ys=a("strong"),us=a("code"),Pp=t("export"),Ip=t(" statement"),Ha=a("ul"),Na=a("li"),Mp=t('These are exported properties or methods of the Svelte component. It will be present in the former section, "the component itself" section.'),Lp=i(),fs=a("li"),Aa=a("strong"),Rp=t("constants"),te=a("ul"),ja=a("li"),$p=t("Since the value of a constant will not change throughout the lifetime of your application, so there's no point redeclaring a new constant for every instance of your Svelte component."),Hp=i(),Ye=a("li"),Np=t("Therefore it is moved out from the "),xs=a("code"),Ap=t("instance"),jp=t(" function."),Gp=i(),ms=a("li"),Ze=a("a"),Wp=t("Check out the repl"),Bp=t("."),qp=i(),ws=a("li"),Ga=a("strong"),Jp=t("pure functions"),ze=a("ul"),Ke=a("li"),Vp=t("The same logic goes with pure functions. If the function does not rely on any variables within the scope other than it's own arguments, the function will be moved out from the "),gs=a("code"),Fp=t("instance"),Up=t(" function."),Yp=i(),Es=a("li"),Qe=a("a"),Zp=t("Check out this repl"),zp=t("."),Kp=i(),Qp=a("hr"),Xp=i(),j=a("p"),eh=t("The "),_s=a("code"),th=t("instance"),sh=t(" function contains all of your business logic, and returns an object. The object contains all the variables and functions you've declared and used in the HTML code. The object is referred as "),bs=a("code"),oh=t("ctx"),ah=t(" in Svelte, and that brings us to the "),Ss=a("code"),nh=t("create_fragment"),lh=t(" function."),rh=i(),Wa=a("p"),Cs=a("strong"),ih=t("1. "),Os=a("code"),ch=t("create_fragment"),ph=i(),P=a("p"),hh=t("The "),Ts=a("code"),kh=t("create_fragment"),vh=t(" function deals with the HTML code you've written in a "),Ds=a("code"),dh=t(".svelte"),yh=t(" component. The "),Ps=a("code"),uh=t("create_fragment"),fh=t(" function takes in the "),Is=a("code"),xh=t("ctx"),mh=t(" object, and returns an object that instructs the Svelte component how to render into the DOM, that looks like this:"),wh=i(),Ms=a("div"),gh=i(),Ba=a("p"),Eh=t("Let's take a closer look to what each function does:"),_h=i(),qa=a("p"),Ls=a("strong"),bh=t("- c "),Ja=a("em"),Sh=t("(create)"),Ch=i(),Va=a("p"),Oh=t("This function creates all the DOM nodes needed."),Th=i(),Fa=a("p"),Rs=a("strong"),Dh=t("- l "),Ua=a("em"),Ph=t("(claim)"),Ih=i(),se=a("p"),Mh=t("On the other hand, if you use a server-side rendering, and you want to hydrate the rendered DOM with the component, the "),$s=a("code"),Lh=t("claim"),Rh=t(" function will be called instead of "),Hs=a("code"),$h=t("create"),Hh=t(". This will try to claim and assign reference to the DOM node."),Nh=i(),Ya=a("p"),Ns=a("strong"),Ah=t("- m "),Za=a("em"),jh=t("(mount)"),Gh=i(),G=a("p"),Wh=t("With the references to the DOM nodes, the "),As=a("code"),Bh=t("mount"),qh=t(" function will "),js=a("code"),Jh=t("insert"),Vh=t(" or "),Gs=a("code"),Fh=t("append"),Uh=t(" DOM nodes to the target accordingly."),Yh=i(),za=a("p"),Ws=a("strong"),Zh=t("- p "),Ka=a("em"),zh=t("(update)"),Kh=i(),oe=a("p"),Qh=t("If there's a change, say after a button click, the "),Bs=a("code"),Xh=t("update"),ek=t(" function will be called with the changed mask and the new "),qs=a("code"),tk=t("ctx"),sk=t(" object."),ok=i(),b=a("p"),Js=a("strong"),ak=t("- r "),Qa=a("em"),nk=t("(measure)"),lk=a("br"),rk=i(),Vs=a("strong"),ik=t("- f "),Xa=a("em"),ck=t("(fix)"),pk=a("br"),hk=i(),Fs=a("strong"),kk=t("- a "),en=a("em"),vk=t("(animate)"),dk=a("br"),yk=i(),Us=a("strong"),uk=t("- i "),tn=a("em"),fk=t("(intro)"),xk=a("br"),mk=i(),Ys=a("strong"),wk=t("- o "),sn=a("em"),gk=t("(outro)"),Ek=i(),ae=a("p"),_k=t("These are for animations, measuring and fixing the element before animation, "),Zs=a("code"),bk=t("intro"),Sk=t("s and "),zs=a("code"),Ck=t("outro"),Ok=t("s."),Tk=i(),on=a("p"),Ks=a("strong"),Dk=t("- d "),an=a("em"),Pk=t("(destroy)"),Ik=i(),Xe=a("p"),Mk=t("Last but not least, the "),Qs=a("code"),Lk=t("destroy"),Rk=t(" function is called when the Svelte component unmounts from the target."),mn=i(),y=a("section"),nn=a("h3"),et=a("a"),$k=t("Pieces them together"),Hk=i(),ln=a("p"),Nk=t("With every pieces in mind, let's summarise what we've learned so far:"),Ak=i(),rn=a("p"),jk=t("You create the component into DOM by create a new instance of the Svelte component:"),Gk=i(),Xs=a("div"),Wk=i(),ne=a("p"),Bk=t("Which in the constructor of "),eo=a("code"),qk=t("App"),Jk=t(", it calls the "),to=a("code"),Vk=t("init"),Fk=t(" function:"),Uk=i(),so=a("div"),Yk=i(),le=a("p"),Zk=t("Within the "),oo=a("code"),zk=t("init"),Kk=t(" function, the "),ao=a("code"),Qk=t("instance"),Xk=t(" function is called:"),ev=i(),no=a("div"),tv=i(),re=a("p"),sv=t("Which returns the "),lo=a("code"),ov=t("ctx"),av=t(", and it is passed into the "),ro=a("code"),nv=t("create_fragment"),lv=t(" function:"),rv=i(),io=a("div"),iv=i(),cn=a("p"),cv=t("Which returns instructions on how to create DOM nodes and mount the nodes into DOM:"),pv=i(),co=a("div"),hv=i(),tt=a("p"),kv=t("But hey, when does the "),po=a("code"),vv=t("fragment.update()"),dv=t(" get called when something has changed?"),yv=i(),ie=a("p"),uv=t("That my friend, is the secret 3rd argument of the "),ho=a("code"),fv=t("instance"),xv=t(" function, "),pn=a("strong"),ko=a("code"),mv=t("$$invalidate"),wv=t("."),gv=i(),st=a("p"),Ev=t("Whenever you reassign a value to your variable, Svelte will add an extra statement of "),vo=a("code"),_v=t("$$invalidate(...)"),bv=t(" statement after your re-assignment."),Sv=i(),yo=a("p"),uo=a("code"),Cv=t("$$invalidate"),Ov=t(" takes 2 arguments, the name of the variable, and the new value of the variable:"),Tv=i(),fo=a("div"),Dv=i(),hn=a("p"),W=a("em"),Pv=t("Of course, if you have consecutive "),xo=a("code"),Iv=t("$$invalidate"),Mv=t(" calls, Svelte will batch all the "),mo=a("code"),Lv=t("$$invalidate"),Rv=t(" changes, and call "),wo=a("code"),$v=t("fragment.update"),Hv=t(" only once with all the changes."),Nv=i(),kn=a("p"),Av=t("Now that you have a clearer picture on how Svelte works, let's go one level deeper, and take a look how the Svelte compiler works."),wn=i(),he=a("section"),vn=a("h2"),ot=a("a"),jv=t("The Svelte compiler"),Gv=i(),dn=a("p"),Wv=t("-- WIP --"),this.h()},l(d){Bf(m.$$.fragment,d),L=c(d),x=n(d,"SECTION",{});var f=l(x);U=n(f,"H1",{});var yd=l(U);w=n(yd,"A",{href:!0,id:!0});var ud=l(w);R=s(ud,"[DRAFT] What is Svelte?"),ud.forEach(o),yd.forEach(o),lt=c(f),we=n(f,"P",{});var En=l(we);Vn=s(En,"-- this is a work in progress draft, you can read "),rt=n(En,"A",{href:!0});var fd=l(rt);Fn=s(fd,"Compile Svelte in your Head"),fd.forEach(o),Un=s(En," which is a more friendly version --"),En.forEach(o),Yn=c(f),it=n(f,"P",{});var Bv=l(it);ge=n(Bv,"A",{href:!0,rel:!0});var xd=l(ge);Zn=s(xd,"Svelte"),xd.forEach(o),zn=s(Bv," is a compiler for web applications. Svelte provides a framework for you to write your web apps declaratively, and it will compile them into efficient JavaScript."),Bv.forEach(o),Kn=c(f),Ho=n(f,"P",{});var md=l(Ho);Qn=s(md,"In this article, I will be sharing how Svelte works."),md.forEach(o),Xn=c(f),No=n(f,"P",{});var wd=l(No);el=s(wd,"If you are:"),wd.forEach(o),tl=c(f),Ee=n(f,"UL",{});var _n=l(Ee);_e=n(_n,"LI",{});var bn=l(_e);Ao=n(bn,"P",{});var gd=l(Ao);jo=n(gd,"STRONG",{});var Ed=l(jo);sl=s(Ed,"First time hearing Svelte?"),Ed.forEach(o),gd.forEach(o),ol=c(bn),Y=n(bn,"P",{});var go=l(Y);al=s(go,"Please go and watch "),be=n(go,"A",{href:!0,rel:!0});var _d=l(be);nl=s(_d,"Rich Harris"),_d.forEach(o),ll=s(go," inspiring talk on "),Se=n(go,"A",{href:!0,rel:!0});var bd=l(Se);rl=s(bd,'"Rethinking reactivity"'),bd.forEach(o),il=s(go," where he announces Svelte."),go.forEach(o),bn.forEach(o),cl=c(_n),Ce=n(_n,"LI",{});var Sn=l(Ce);Go=n(Sn,"P",{});var Sd=l(Go);Wo=n(Sd,"STRONG",{});var Cd=l(Wo);pl=s(Cd,"Interested learning how to write Svelte application?"),Cd.forEach(o),Sd.forEach(o),hl=c(Sn),Oe=n(Sn,"P",{});var Cn=l(Oe);kl=s(Cn,"Please follow along "),Te=n(Cn,"A",{href:!0,rel:!0});var Od=l(Te);vl=s(Od,"Svelte's interactive tutorial"),Od.forEach(o),dl=s(Cn,", I find it very helpful and it get me started in no time!"),Cn.forEach(o),Sn.forEach(o),_n.forEach(o),yl=c(f),Bo=n(f,"P",{});var Td=l(Bo);ul=s(Td,"Because, I will be going deep level by level, guiding you through the source code sometimes, explaining how Svelte works."),Td.forEach(o),fl=c(f),De=n(f,"UL",{});var On=l(De);ct=n(On,"LI",{});var qv=l(ct);xl=s(qv,"look at code written in vanilla vs using framework"),qo=n(qv,"UL",{});var Dd=l(qo);Jo=n(Dd,"LI",{});var Pd=l(Jo);ml=s(Pd,"compile time vs build time spectrum, svelte and react opposite side of the spectrum"),Pd.forEach(o),Dd.forEach(o),qv.forEach(o),wl=c(On),pt=n(On,"LI",{});var Jv=l(pt);gl=s(Jv,"a picture of how a svelte component works"),Vo=n(Jv,"UL",{});var Id=l(Vo);yn=n(Id,"LI",{}),l(yn).forEach(o),Id.forEach(o),Jv.forEach(o),On.forEach(o),f.forEach(o),un=c(d),k=n(d,"SECTION",{});var v=l(k);Fo=n(v,"H2",{});var Md=l(Fo);Pe=n(Md,"A",{href:!0,id:!0});var Ld=l(Pe);El=s(Ld,"Writing vanilla JavaScript"),Ld.forEach(o),Md.forEach(o),_l=c(v),Uo=n(v,"P",{});var Rd=l(Uo);bl=s(Rd,"Before we get started, lets' do an exercise."),Rd.forEach(o),Sl=c(v),Yo=n(v,"P",{});var $d=l(Yo);Cl=s($d,"Let's write a counter app like below, without using any framework:"),$d.forEach(o),Ol=c(v),I=n(v,"DIV",{style:!0});var ke=l(I);ht=n(ke,"BUTTON",{id:!0});var Hd=l(ht);Tl=s(Hd,"-"),Hd.forEach(o),Dl=c(ke),kt=n(ke,"SPAN",{id:!0});var Nd=l(kt);Pl=s(Nd,"0"),Nd.forEach(o),Il=c(ke),vt=n(ke,"BUTTON",{id:!0});var Ad=l(vt);Ml=s(Ad,"+"),Ad.forEach(o),Ll=c(ke),Zo=n(ke,"SCRIPT",{});var jd=l(Zo);Rl=s(jd,`let count = 0;
    const span = document.querySelector('#ex1-count');
    document.querySelector('#ex1-decrement').onclick = () => span.textContent = --count;
    document.querySelector('#ex1-increment').onclick = () => span.textContent = ++count;`),jd.forEach(o),ke.forEach(o),$l=c(v),zo=n(v,"P",{});var Gd=l(zo);Hl=s(Gd,"There are generally 2 approaches to this:"),Gd.forEach(o),Nl=c(v),Ko=n(v,"P",{});var Wd=l(Ko);Qo=n(Wd,"STRONG",{});var Bd=l(Qo);Al=s(Bd,"1. HTML + JS"),Bd.forEach(o),Wd.forEach(o),jl=c(v),Xo=n(v,"P",{});var qd=l(Xo);Gl=s(qd,"You build your app layout in HTML:"),qd.forEach(o),Wl=c(v),dt=n(v,"DIV",{class:!0});var px=l(dt);px.forEach(o),Bl=c(v),ea=n(v,"P",{});var Jd=l(ea);ql=s(Jd,"then in JS, you use id selector to query out the dynamic part of your HTML and attach event listeners to respond to user inputs:"),Jd.forEach(o),Jl=c(v),yt=n(v,"DIV",{class:!0});var hx=l(yt);hx.forEach(o),Vl=c(v),ta=n(v,"P",{});var Vd=l(ta);sa=n(Vd,"STRONG",{});var Fd=l(sa);Fl=s(Fd,"2. JS only"),Fd.forEach(o),Vd.forEach(o),Ul=c(v),$=n(v,"P",{});var ve=l($);Yl=s(ve,"If you want to have more than 1 counter, the former approach may require you to "),oa=n(ve,"EM",{});var Ud=l(oa);Zl=s(Ud,"copy + paste"),Ud.forEach(o),zl=s(ve," your HTML "),aa=n(ve,"EM",{});var Yd=l(aa);Kl=s(Yd,"n"),Yd.forEach(o),Ql=s(ve," times for "),na=n(ve,"EM",{});var Zd=l(na);Xl=s(Zd,"n"),Zd.forEach(o),er=s(ve," number of counters."),ve.forEach(o),tr=c(v),la=n(v,"P",{});var zd=l(la);sr=s(zd,"The alternative would be to build the HTML elements programatically:"),zd.forEach(o),or=c(v),ut=n(v,"DIV",{class:!0});var kx=l(ut);kx.forEach(o),ar=c(v),ra=n(v,"P",{});var Kd=l(ra);nr=s(Kd,"This is the least amount of code to be written for a counter app."),Kd.forEach(o),lr=c(v),ia=n(v,"P",{});var Qd=l(ia);Z=n(Qd,"EM",{});var Eo=l(Z);rr=s(Eo,"(One may argue that you can abstract out "),ft=n(Eo,"CODE",{class:!0});var Xd=l(ft);ir=s(Xd,"document.createElement"),Xd.forEach(o),cr=s(Eo," or "),xt=n(Eo,"CODE",{class:!0});var ey=l(xt);pr=s(ey,"parent.appendChild"),ey.forEach(o),hr=s(Eo," to a function to make the code smaller, but that's besides the point.)"),Eo.forEach(o),Qd.forEach(o),kr=c(v),Ie=n(v,"P",{});var Tn=l(Ie);vr=s(Tn,"This is the least amount of code to be written "),ca=n(Tn,"STRONG",{});var ty=l(ca);dr=s(ty,"and be executed by the browser"),ty.forEach(o),yr=s(Tn," for a counter app."),Tn.forEach(o),ur=c(v),pa=n(v,"P",{});var sy=l(pa);fr=s(sy,"So why does this matter? Well, before we proceed to explain how this got to do with Svelte, let's first talk about React."),sy.forEach(o),xr=c(v),ha=n(v,"P",{});var oy=l(ha);Me=n(oy,"EM",{});var Dn=l(Me);mr=s(Dn,"I chose to talk about React "),ka=n(Dn,"STRONG",{});var ay=l(ka);wr=s(ay,"just because I am a React developer"),ay.forEach(o),gr=s(Dn,", I use React at my work and at this very blog site. I am most familiar with React than any other JS frameworks out there"),Dn.forEach(o),oy.forEach(o),Er=c(v),va=n(v,"P",{});var ny=l(va);_r=s(ny,"In React, you can argubly write a much concise and declarative code:"),ny.forEach(o),br=c(v),mt=n(v,"DIV",{class:!0});var vx=l(mt);vx.forEach(o),Sr=c(v),B=n(v,"P",{});var at=l(B);Cr=s(at,"That's because React has hidden all the "),wt=n(at,"CODE",{class:!0});var ly=l(wt);Or=s(ly,"document.createElement"),ly.forEach(o),Tr=s(at,", "),gt=n(at,"CODE",{class:!0});var ry=l(gt);Dr=s(ry,"parent.appendChild"),ry.forEach(o),Pr=s(at,", ... under "),ce=n(at,"A",{href:!0,rel:!0});var Vv=l(ce);Et=n(Vv,"CODE",{class:!0});var iy=l(Et);Ir=s(iy,"react-dom"),iy.forEach(o),Mr=s(Vv," renderer."),Vv.forEach(o),at.forEach(o),Lr=c(v),O=n(v,"P",{});var q=l(O);Rr=s(q,"Everytime you click on a counter button, the function "),_t=n(q,"CODE",{class:!0});var cy=l(_t);$r=s(cy,"Counter"),cy.forEach(o),Hr=s(q," is called to get the new "),Le=n(q,"A",{href:!0,rel:!0});var py=l(Le);Nr=s(py,"Fiber tree"),py.forEach(o),Ar=s(q," with the new state value, and it is compared with the current Fiber tree. After the diffing between the 2 Fiber tree, React collects the necessary DOM operations, in this case is to update "),bt=n(q,"CODE",{class:!0});var hy=l(bt);jr=s(hy,"span"),hy.forEach(o),Gr=s(q,"'s "),St=n(q,"CODE",{class:!0});var ky=l(St);Wr=s(ky,"textContent"),ky.forEach(o),Br=s(q,"."),q.forEach(o),qr=c(v),da=n(v,"P",{});var vy=l(da);Jr=s(vy,"If you feel this is overly complicated, wait, there is more."),vy.forEach(o),Vr=c(v),_=n(v,"P",{});var S=l(_);Fr=s(S,"When the "),Ct=n(S,"CODE",{class:!0});var dy=l(Ct);Ur=s(dy,"react-dom"),dy.forEach(o),Yr=c(S),Re=n(S,"A",{href:!0,rel:!0});var yy=l(Re);Zr=s(yy,"receives the DOM operations"),yy.forEach(o),zr=s(S,", it receives "),Ot=n(S,"CODE",{class:!0});var uy=l(Ot);Kr=s(uy,"['span', { 'children': '1' }]"),uy.forEach(o),Qr=s(S,", the element and the update payload, and "),Tt=n(S,"CODE",{class:!0});var fy=l(Tt);Xr=s(fy,"react-dom"),fy.forEach(o),ei=s(S," has to figure out that "),Dt=n(S,"CODE",{class:!0});var xy=l(Dt);ti=s(xy,"children"),xy.forEach(o),si=s(S," meant "),pe=n(S,"A",{href:!0,rel:!0});var Fv=l(pe);oi=s(Fv,"setting the "),Pt=n(Fv,"CODE",{class:!0});var my=l(Pt);ai=s(my,"textContent"),my.forEach(o),Fv.forEach(o),ni=s(S,"."),S.forEach(o),li=c(v),$e=n(v,"P",{});var Pn=l($e);ri=s(Pn,"As you can see, there's a lot of code "),ya=n(Pn,"STRONG",{});var wy=l(ya);ii=s(wy,"executed"),wy.forEach(o),ci=s(Pn," under the hood, which you may think is overkill for this contrived example. But with a much larger/complex application, you will soon appreciate the flexibilty React provides. to achieve that, react has to make sure it has code to capture all the different scenarios, without knowing what will be written by us, the developer."),Pn.forEach(o),pi=c(v),He=n(v,"P",{});var In=l(He);hi=s(In,"Now, here is how Svelte is different. "),ua=n(In,"STRONG",{});var gy=l(ua);ki=s(gy,"Svelte is a compiler"),gy.forEach(o),vi=s(In,". Svelte knows what we, the developer, has written, and generate only code that is needed for our application."),In.forEach(o),di=c(v),Ne=n(v,"P",{});var Mn=l(Ne);yi=s(Mn,"Here's what Svelte generated for our Counter app ("),Ae=n(Mn,"A",{href:!0,rel:!0});var Ey=l(Ae);ui=s(Ey,"repl"),Ey.forEach(o),fi=s(Mn,"):"),Mn.forEach(o),xi=c(v),It=n(v,"DIV",{class:!0});var dx=l(It);dx.forEach(o),mi=c(v),je=n(v,"P",{});var Ln=l(je);fa=n(Ln,"STRONG",{});var _y=l(fa);wi=s(_y,"Disclaimer:"),_y.forEach(o),gi=c(Ln),Ge=n(Ln,"EM",{});var Rn=l(Ge);Ei=s(Rn,"There are parts of code deliberately removed to make the code more concise and readable, which should not affect the point I am trying to make here. Feel free to read the original code in the "),We=n(Rn,"A",{href:!0,rel:!0});var by=l(We);_i=s(by,"repl"),by.forEach(o),bi=s(Rn,"."),Rn.forEach(o),Ln.forEach(o),Si=c(v),Be=n(v,"P",{});var $n=l(Be);Ci=s($n,"You see Svelte's generated code is much like the one we've written in plain JavaScript just now. It generates the "),Mt=n($n,"CODE",{class:!0});var Sy=l(Mt);Oi=s(Sy,".textContent"),Sy.forEach(o),Ti=s($n," directly, because during compilation, Svelte knows exactly what you are trying to do. Therefore it can try to handle all the different scenarios, where React tries to handle in runtime, in build time."),$n.forEach(o),Di=c(v),xa=n(v,"P",{});var Cy=l(xa);Pi=s(Cy,"Now you know the fundamental differences between Svelte and React, let's take a look how a Svelte component works."),Cy.forEach(o),v.forEach(o),fn=c(d),g=n(d,"SECTION",{});var E=l(g);ma=n(E,"H2",{});var Oy=l(ma);qe=n(Oy,"A",{href:!0,id:!0});var Ty=l(qe);Ii=s(Ty,"Conceptually, how does compiled Svelte component work?"),Ty.forEach(o),Oy.forEach(o),Mi=c(E),wa=n(E,"P",{});var Dy=l(wa);Li=s(Dy,"In this section, we are going to write Svelte component incrementally, and see how each changes ended up in the compiled Svelte component."),Dy.forEach(o),Ri=c(E),ga=n(E,"P",{});var Py=l(ga);$i=s(Py,"Let's start with a simple button and a text:"),Py.forEach(o),Hi=c(E),Lt=n(E,"DIV",{class:!0});var yx=l(Lt);yx.forEach(o),Ni=c(E),Ea=n(E,"P",{});var Iy=l(Ea);Ai=s(Iy,"When Svelte sees this, these HTML elements will translate into JavaScript statement to create the elements:"),Iy.forEach(o),ji=c(E),Rt=n(E,"DIV",{class:!0});var ux=l(Rt);ux.forEach(o),Gi=c(E),z=n(E,"P",{});var _o=l(z);Wi=s(_o,"If you inspect the Svelte compiled output, you would notice that these instruction lies in a function call "),$t=n(_o,"CODE",{class:!0});var My=l($t);Bi=s(My,"create_fragment"),My.forEach(o),qi=s(_o,". "),Ht=n(_o,"CODE",{class:!0});var Ly=l(Ht);Ji=s(Ly,"create_fragment"),Ly.forEach(o),Vi=s(_o," is the function where Svelte keeps the DOM instructions for the component."),_o.forEach(o),Fi=c(E),_a=n(E,"P",{});var Ry=l(_a);Ui=s(Ry,"Next, lets add some event listener to the button:"),Ry.forEach(o),Yi=c(E),Nt=n(E,"DIV",{class:!0});var fx=l(Nt);fx.forEach(o),E.forEach(o),xn=c(d),p=n(d,"SECTION",{});var h=l(p);ba=n(h,"H2",{});var $y=l(ba);Je=n($y,"A",{href:!0,id:!0});var Hy=l(Je);Zi=s(Hy,"How the compiled Svelte component works"),Hy.forEach(o),$y.forEach(o),zi=c(h),T=n(h,"P",{});var J=l(T);Ki=s(J,"To differentiate between the component code you write, and the component code generated by Svelte, I will use "),At=n(J,"CODE",{class:!0});var Ny=l(At);Qi=s(Ny,".svelte"),Ny.forEach(o),Xi=s(J," component to refer the code you would write in a "),jt=n(J,"CODE",{class:!0});var Ay=l(jt);ec=s(Ay,".svelte"),Ay.forEach(o),tc=s(J," file, and Svelte component to refer the "),Gt=n(J,"CODE",{class:!0});var jy=l(Gt);sc=s(jy,".js"),jy.forEach(o),oc=s(J," code, generated by Svelte from your "),Wt=n(J,"CODE",{class:!0});var Gy=l(Wt);ac=s(Gy,".svelte"),Gy.forEach(o),nc=s(J," component, that will be executed in your application."),J.forEach(o),lc=c(h),Ve=n(h,"P",{});var Hn=l(Ve);rc=s(Hn,"The best way to understand how Svelte component works is to use the "),Fe=n(Hn,"A",{href:!0,rel:!0});var Wy=l(Fe);ic=s(Wy,"Svelte's REPL"),Wy.forEach(o),cc=s(Hn,". Try writing a component, and see how Svelte compiles the component into plain JavaScript."),Hn.forEach(o),pc=c(h),H=n(h,"P",{});var de=l(H);hc=s(de,"Svelte compiles the "),Bt=n(de,"CODE",{class:!0});var By=l(Bt);kc=s(By,".svelte"),By.forEach(o),vc=s(de," file into a "),qt=n(de,"CODE",{class:!0});var qy=l(qt);dc=s(qy,".js"),qy.forEach(o),yc=s(de," file, which the "),Jt=n(de,"CODE",{class:!0});var Jy=l(Jt);uc=s(Jy,"export default"),Jy.forEach(o),fc=s(de," the compiled Svelte component."),de.forEach(o),xc=c(h),Sa=n(h,"P",{});var Vy=l(Sa);mc=s(Vy,"The compiled Svelte component contains 3 main sections:"),Vy.forEach(o),wc=c(h),K=n(h,"UL",{});var bo=l(K);Ca=n(bo,"LI",{});var Fy=l(Ca);Vt=n(Fy,"CODE",{class:!0});var Uy=l(Vt);gc=s(Uy,"create_fragment"),Uy.forEach(o),Fy.forEach(o),Ec=c(bo),Oa=n(bo,"LI",{});var Yy=l(Oa);Ft=n(Yy,"CODE",{class:!0});var Zy=l(Ft);_c=s(Zy,"instance"),Zy.forEach(o),Yy.forEach(o),bc=c(bo),Ta=n(bo,"LI",{});var zy=l(Ta);Sc=s(zy,"the Component itself"),zy.forEach(o),bo.forEach(o),Cc=c(h),Ut=n(h,"DIV",{class:!0});var xx=l(Ut);xx.forEach(o),Oc=c(h),Da=n(h,"P",{});var Ky=l(Da);Tc=s(Ky,"Let's explain what each section of the code is for, from the bottom up."),Ky.forEach(o),Dc=c(h),Pa=n(h,"P",{});var Qy=l(Pa);Ia=n(Qy,"STRONG",{});var Xy=l(Ia);Pc=s(Xy,"3. The component itself"),Xy.forEach(o),Qy.forEach(o),Ic=c(h),Ue=n(h,"P",{});var Nn=l(Ue);Mc=s(Nn,"Each compiled component, by default, is a subclass of "),Yt=n(Nn,"CODE",{class:!0});var eu=l(Yt);Lc=s(eu,"SvelteComponent"),eu.forEach(o),Rc=s(Nn,"."),Nn.forEach(o),$c=c(h),Ma=n(h,"P",{});var tu=l(Ma);Hc=s(tu,"To create the component onto the DOM, you can create an instance of the component:"),tu.forEach(o),Nc=c(h),Zt=n(h,"DIV",{class:!0});var mx=l(Zt);mx.forEach(o),Ac=c(h),D=n(h,"P",{});var V=l(D);jc=s(V,"In the constructor of "),zt=n(V,"CODE",{class:!0});var su=l(zt);Gc=s(su,"App"),su.forEach(o),Wc=s(V,", as you can see, calls the "),Kt=n(V,"CODE",{class:!0});var ou=l(Kt);Bc=s(ou,"init"),ou.forEach(o),qc=s(V," function, which takes in both "),Qt=n(V,"CODE",{class:!0});var au=l(Qt);Jc=s(au,"instance"),au.forEach(o),Vc=s(V," and "),Xt=n(V,"CODE",{class:!0});var nu=l(Xt);Fc=s(nu,"create_fragment"),nu.forEach(o),Uc=s(V," function."),V.forEach(o),Yc=c(h),Q=n(h,"P",{});var So=l(Q);Zc=s(So,"The "),es=n(So,"CODE",{class:!0});var lu=l(es);zc=s(lu,"init"),lu.forEach(o),Kc=s(So," function, as the name suggests, will set things up, which lead us to the "),ts=n(So,"CODE",{class:!0});var ru=l(ts);Qc=s(ru,"instance"),ru.forEach(o),Xc=s(So," function."),So.forEach(o),ep=c(h),La=n(h,"P",{});var iu=l(La);ss=n(iu,"STRONG",{});var Uv=l(ss);tp=s(Uv,"2. "),os=n(Uv,"CODE",{class:!0});var cu=l(os);sp=s(cu,"instance"),cu.forEach(o),Uv.forEach(o),iu.forEach(o),op=c(h),X=n(h,"P",{});var Co=l(X);ap=s(Co,"The "),as=n(Co,"CODE",{class:!0});var pu=l(as);np=s(pu,"instance"),pu.forEach(o),lp=s(Co," function is where all the business logic of your "),ns=n(Co,"CODE",{class:!0});var hu=l(ns);rp=s(hu,".svelte"),hu.forEach(o),ip=s(Co," component lies."),Co.forEach(o),cp=c(h),N=n(h,"P",{});var ye=l(N);pp=s(ye,"That's why, if you take a closer look, the "),ls=n(ye,"CODE",{class:!0});var ku=l(ls);hp=s(ku,"instance"),ku.forEach(o),kp=s(ye," function contains most, if not all, the code you write in the "),rs=n(ye,"CODE",{class:!0});var vu=l(rs);vp=s(vu,"<script>"),vu.forEach(o),dp=s(ye," tag in the "),is=n(ye,"CODE",{class:!0});var du=l(is);yp=s(du,".svelte"),du.forEach(o),up=s(ye," component."),ye.forEach(o),fp=c(h),xp=n(h,"HR",{}),mp=c(h),ee=n(h,"P",{});var Oo=l(ee);wp=s(Oo,"Code that you write in the "),cs=n(Oo,"CODE",{class:!0});var yu=l(cs);gp=s(yu,"<script>"),yu.forEach(o),Ep=s(Oo," tag that will not be in the "),ps=n(Oo,"CODE",{class:!0});var uu=l(ps);_p=s(uu,"instance"),uu.forEach(o),bp=s(Oo," function are:"),Oo.forEach(o),Sp=c(h),A=n(h,"UL",{});var ue=l(A);hs=n(ue,"LI",{});var Yv=l(hs);ks=n(Yv,"STRONG",{});var Zv=l(ks);vs=n(Zv,"CODE",{class:!0});var fu=l(vs);Cp=s(fu,"import"),fu.forEach(o),Op=s(Zv," statement"),Zv.forEach(o),Ra=n(Yv,"UL",{});var xu=l(Ra);$a=n(xu,"LI",{});var mu=l($a);Tp=s(mu,"These will be moved to the beginning of the compiled file."),mu.forEach(o),xu.forEach(o),Yv.forEach(o),Dp=c(ue),ds=n(ue,"LI",{});var zv=l(ds);ys=n(zv,"STRONG",{});var Kv=l(ys);us=n(Kv,"CODE",{class:!0});var wu=l(us);Pp=s(wu,"export"),wu.forEach(o),Ip=s(Kv," statement"),Kv.forEach(o),Ha=n(zv,"UL",{});var gu=l(Ha);Na=n(gu,"LI",{});var Eu=l(Na);Mp=s(Eu,'These are exported properties or methods of the Svelte component. It will be present in the former section, "the component itself" section.'),Eu.forEach(o),gu.forEach(o),zv.forEach(o),Lp=c(ue),fs=n(ue,"LI",{});var Qv=l(fs);Aa=n(Qv,"STRONG",{});var _u=l(Aa);Rp=s(_u,"constants"),_u.forEach(o),te=n(Qv,"UL",{});var To=l(te);ja=n(To,"LI",{});var bu=l(ja);$p=s(bu,"Since the value of a constant will not change throughout the lifetime of your application, so there's no point redeclaring a new constant for every instance of your Svelte component."),bu.forEach(o),Hp=c(To),Ye=n(To,"LI",{});var An=l(Ye);Np=s(An,"Therefore it is moved out from the "),xs=n(An,"CODE",{class:!0});var Su=l(xs);Ap=s(Su,"instance"),Su.forEach(o),jp=s(An," function."),An.forEach(o),Gp=c(To),ms=n(To,"LI",{});var Xv=l(ms);Ze=n(Xv,"A",{href:!0,rel:!0});var Cu=l(Ze);Wp=s(Cu,"Check out the repl"),Cu.forEach(o),Bp=s(Xv,"."),Xv.forEach(o),To.forEach(o),Qv.forEach(o),qp=c(ue),ws=n(ue,"LI",{});var ed=l(ws);Ga=n(ed,"STRONG",{});var Ou=l(Ga);Jp=s(Ou,"pure functions"),Ou.forEach(o),ze=n(ed,"UL",{});var jn=l(ze);Ke=n(jn,"LI",{});var Gn=l(Ke);Vp=s(Gn,"The same logic goes with pure functions. If the function does not rely on any variables within the scope other than it's own arguments, the function will be moved out from the "),gs=n(Gn,"CODE",{class:!0});var Tu=l(gs);Fp=s(Tu,"instance"),Tu.forEach(o),Up=s(Gn," function."),Gn.forEach(o),Yp=c(jn),Es=n(jn,"LI",{});var td=l(Es);Qe=n(td,"A",{href:!0,rel:!0});var Du=l(Qe);Zp=s(Du,"Check out this repl"),Du.forEach(o),zp=s(td,"."),td.forEach(o),jn.forEach(o),ed.forEach(o),ue.forEach(o),Kp=c(h),Qp=n(h,"HR",{}),Xp=c(h),j=n(h,"P",{});var fe=l(j);eh=s(fe,"The "),_s=n(fe,"CODE",{class:!0});var Pu=l(_s);th=s(Pu,"instance"),Pu.forEach(o),sh=s(fe," function contains all of your business logic, and returns an object. The object contains all the variables and functions you've declared and used in the HTML code. The object is referred as "),bs=n(fe,"CODE",{class:!0});var Iu=l(bs);oh=s(Iu,"ctx"),Iu.forEach(o),ah=s(fe," in Svelte, and that brings us to the "),Ss=n(fe,"CODE",{class:!0});var Mu=l(Ss);nh=s(Mu,"create_fragment"),Mu.forEach(o),lh=s(fe," function."),fe.forEach(o),rh=c(h),Wa=n(h,"P",{});var Lu=l(Wa);Cs=n(Lu,"STRONG",{});var sd=l(Cs);ih=s(sd,"1. "),Os=n(sd,"CODE",{class:!0});var Ru=l(Os);ch=s(Ru,"create_fragment"),Ru.forEach(o),sd.forEach(o),Lu.forEach(o),ph=c(h),P=n(h,"P",{});var F=l(P);hh=s(F,"The "),Ts=n(F,"CODE",{class:!0});var $u=l(Ts);kh=s($u,"create_fragment"),$u.forEach(o),vh=s(F," function deals with the HTML code you've written in a "),Ds=n(F,"CODE",{class:!0});var Hu=l(Ds);dh=s(Hu,".svelte"),Hu.forEach(o),yh=s(F," component. The "),Ps=n(F,"CODE",{class:!0});var Nu=l(Ps);uh=s(Nu,"create_fragment"),Nu.forEach(o),fh=s(F," function takes in the "),Is=n(F,"CODE",{class:!0});var Au=l(Is);xh=s(Au,"ctx"),Au.forEach(o),mh=s(F," object, and returns an object that instructs the Svelte component how to render into the DOM, that looks like this:"),F.forEach(o),wh=c(h),Ms=n(h,"DIV",{class:!0});var wx=l(Ms);wx.forEach(o),gh=c(h),Ba=n(h,"P",{});var ju=l(Ba);Eh=s(ju,"Let's take a closer look to what each function does:"),ju.forEach(o),_h=c(h),qa=n(h,"P",{});var Gu=l(qa);Ls=n(Gu,"STRONG",{});var od=l(Ls);bh=s(od,"- c "),Ja=n(od,"EM",{});var Wu=l(Ja);Sh=s(Wu,"(create)"),Wu.forEach(o),od.forEach(o),Gu.forEach(o),Ch=c(h),Va=n(h,"P",{});var Bu=l(Va);Oh=s(Bu,"This function creates all the DOM nodes needed."),Bu.forEach(o),Th=c(h),Fa=n(h,"P",{});var qu=l(Fa);Rs=n(qu,"STRONG",{});var ad=l(Rs);Dh=s(ad,"- l "),Ua=n(ad,"EM",{});var Ju=l(Ua);Ph=s(Ju,"(claim)"),Ju.forEach(o),ad.forEach(o),qu.forEach(o),Ih=c(h),se=n(h,"P",{});var Do=l(se);Mh=s(Do,"On the other hand, if you use a server-side rendering, and you want to hydrate the rendered DOM with the component, the "),$s=n(Do,"CODE",{class:!0});var Vu=l($s);Lh=s(Vu,"claim"),Vu.forEach(o),Rh=s(Do," function will be called instead of "),Hs=n(Do,"CODE",{class:!0});var Fu=l(Hs);$h=s(Fu,"create"),Fu.forEach(o),Hh=s(Do,". This will try to claim and assign reference to the DOM node."),Do.forEach(o),Nh=c(h),Ya=n(h,"P",{});var Uu=l(Ya);Ns=n(Uu,"STRONG",{});var nd=l(Ns);Ah=s(nd,"- m "),Za=n(nd,"EM",{});var Yu=l(Za);jh=s(Yu,"(mount)"),Yu.forEach(o),nd.forEach(o),Uu.forEach(o),Gh=c(h),G=n(h,"P",{});var xe=l(G);Wh=s(xe,"With the references to the DOM nodes, the "),As=n(xe,"CODE",{class:!0});var Zu=l(As);Bh=s(Zu,"mount"),Zu.forEach(o),qh=s(xe," function will "),js=n(xe,"CODE",{class:!0});var zu=l(js);Jh=s(zu,"insert"),zu.forEach(o),Vh=s(xe," or "),Gs=n(xe,"CODE",{class:!0});var Ku=l(Gs);Fh=s(Ku,"append"),Ku.forEach(o),Uh=s(xe," DOM nodes to the target accordingly."),xe.forEach(o),Yh=c(h),za=n(h,"P",{});var Qu=l(za);Ws=n(Qu,"STRONG",{});var ld=l(Ws);Zh=s(ld,"- p "),Ka=n(ld,"EM",{});var Xu=l(Ka);zh=s(Xu,"(update)"),Xu.forEach(o),ld.forEach(o),Qu.forEach(o),Kh=c(h),oe=n(h,"P",{});var Po=l(oe);Qh=s(Po,"If there's a change, say after a button click, the "),Bs=n(Po,"CODE",{class:!0});var ef=l(Bs);Xh=s(ef,"update"),ef.forEach(o),ek=s(Po," function will be called with the changed mask and the new "),qs=n(Po,"CODE",{class:!0});var tf=l(qs);tk=s(tf,"ctx"),tf.forEach(o),sk=s(Po," object."),Po.forEach(o),ok=c(h),b=n(h,"P",{});var C=l(b);Js=n(C,"STRONG",{});var rd=l(Js);ak=s(rd,"- r "),Qa=n(rd,"EM",{});var sf=l(Qa);nk=s(sf,"(measure)"),sf.forEach(o),rd.forEach(o),lk=n(C,"BR",{}),rk=c(C),Vs=n(C,"STRONG",{});var id=l(Vs);ik=s(id,"- f "),Xa=n(id,"EM",{});var of=l(Xa);ck=s(of,"(fix)"),of.forEach(o),id.forEach(o),pk=n(C,"BR",{}),hk=c(C),Fs=n(C,"STRONG",{});var cd=l(Fs);kk=s(cd,"- a "),en=n(cd,"EM",{});var af=l(en);vk=s(af,"(animate)"),af.forEach(o),cd.forEach(o),dk=n(C,"BR",{}),yk=c(C),Us=n(C,"STRONG",{});var pd=l(Us);uk=s(pd,"- i "),tn=n(pd,"EM",{});var nf=l(tn);fk=s(nf,"(intro)"),nf.forEach(o),pd.forEach(o),xk=n(C,"BR",{}),mk=c(C),Ys=n(C,"STRONG",{});var hd=l(Ys);wk=s(hd,"- o "),sn=n(hd,"EM",{});var lf=l(sn);gk=s(lf,"(outro)"),lf.forEach(o),hd.forEach(o),C.forEach(o),Ek=c(h),ae=n(h,"P",{});var Io=l(ae);_k=s(Io,"These are for animations, measuring and fixing the element before animation, "),Zs=n(Io,"CODE",{class:!0});var rf=l(Zs);bk=s(rf,"intro"),rf.forEach(o),Sk=s(Io,"s and "),zs=n(Io,"CODE",{class:!0});var cf=l(zs);Ck=s(cf,"outro"),cf.forEach(o),Ok=s(Io,"s."),Io.forEach(o),Tk=c(h),on=n(h,"P",{});var pf=l(on);Ks=n(pf,"STRONG",{});var kd=l(Ks);Dk=s(kd,"- d "),an=n(kd,"EM",{});var hf=l(an);Pk=s(hf,"(destroy)"),hf.forEach(o),kd.forEach(o),pf.forEach(o),Ik=c(h),Xe=n(h,"P",{});var Wn=l(Xe);Mk=s(Wn,"Last but not least, the "),Qs=n(Wn,"CODE",{class:!0});var kf=l(Qs);Lk=s(kf,"destroy"),kf.forEach(o),Rk=s(Wn," function is called when the Svelte component unmounts from the target."),Wn.forEach(o),h.forEach(o),mn=c(d),y=n(d,"SECTION",{});var u=l(y);nn=n(u,"H3",{});var vf=l(nn);et=n(vf,"A",{href:!0,id:!0});var df=l(et);$k=s(df,"Pieces them together"),df.forEach(o),vf.forEach(o),Hk=c(u),ln=n(u,"P",{});var yf=l(ln);Nk=s(yf,"With every pieces in mind, let's summarise what we've learned so far:"),yf.forEach(o),Ak=c(u),rn=n(u,"P",{});var uf=l(rn);jk=s(uf,"You create the component into DOM by create a new instance of the Svelte component:"),uf.forEach(o),Gk=c(u),Xs=n(u,"DIV",{class:!0});var gx=l(Xs);gx.forEach(o),Wk=c(u),ne=n(u,"P",{});var Mo=l(ne);Bk=s(Mo,"Which in the constructor of "),eo=n(Mo,"CODE",{class:!0});var ff=l(eo);qk=s(ff,"App"),ff.forEach(o),Jk=s(Mo,", it calls the "),to=n(Mo,"CODE",{class:!0});var xf=l(to);Vk=s(xf,"init"),xf.forEach(o),Fk=s(Mo," function:"),Mo.forEach(o),Uk=c(u),so=n(u,"DIV",{class:!0});var Ex=l(so);Ex.forEach(o),Yk=c(u),le=n(u,"P",{});var Lo=l(le);Zk=s(Lo,"Within the "),oo=n(Lo,"CODE",{class:!0});var mf=l(oo);zk=s(mf,"init"),mf.forEach(o),Kk=s(Lo," function, the "),ao=n(Lo,"CODE",{class:!0});var wf=l(ao);Qk=s(wf,"instance"),wf.forEach(o),Xk=s(Lo," function is called:"),Lo.forEach(o),ev=c(u),no=n(u,"DIV",{class:!0});var _x=l(no);_x.forEach(o),tv=c(u),re=n(u,"P",{});var Ro=l(re);sv=s(Ro,"Which returns the "),lo=n(Ro,"CODE",{class:!0});var gf=l(lo);ov=s(gf,"ctx"),gf.forEach(o),av=s(Ro,", and it is passed into the "),ro=n(Ro,"CODE",{class:!0});var Ef=l(ro);nv=s(Ef,"create_fragment"),Ef.forEach(o),lv=s(Ro," function:"),Ro.forEach(o),rv=c(u),io=n(u,"DIV",{class:!0});var bx=l(io);bx.forEach(o),iv=c(u),cn=n(u,"P",{});var _f=l(cn);cv=s(_f,"Which returns instructions on how to create DOM nodes and mount the nodes into DOM:"),_f.forEach(o),pv=c(u),co=n(u,"DIV",{class:!0});var Sx=l(co);Sx.forEach(o),hv=c(u),tt=n(u,"P",{});var Bn=l(tt);kv=s(Bn,"But hey, when does the "),po=n(Bn,"CODE",{class:!0});var bf=l(po);vv=s(bf,"fragment.update()"),bf.forEach(o),dv=s(Bn," get called when something has changed?"),Bn.forEach(o),yv=c(u),ie=n(u,"P",{});var $o=l(ie);uv=s($o,"That my friend, is the secret 3rd argument of the "),ho=n($o,"CODE",{class:!0});var Sf=l(ho);fv=s(Sf,"instance"),Sf.forEach(o),xv=s($o," function, "),pn=n($o,"STRONG",{});var Cf=l(pn);ko=n(Cf,"CODE",{class:!0});var Of=l(ko);mv=s(Of,"$$invalidate"),Of.forEach(o),Cf.forEach(o),wv=s($o,"."),$o.forEach(o),gv=c(u),st=n(u,"P",{});var qn=l(st);Ev=s(qn,"Whenever you reassign a value to your variable, Svelte will add an extra statement of "),vo=n(qn,"CODE",{class:!0});var Tf=l(vo);_v=s(Tf,"$$invalidate(...)"),Tf.forEach(o),bv=s(qn," statement after your re-assignment."),qn.forEach(o),Sv=c(u),yo=n(u,"P",{});var vd=l(yo);uo=n(vd,"CODE",{class:!0});var Df=l(uo);Cv=s(Df,"$$invalidate"),Df.forEach(o),Ov=s(vd," takes 2 arguments, the name of the variable, and the new value of the variable:"),vd.forEach(o),Tv=c(u),fo=n(u,"DIV",{class:!0});var Cx=l(fo);Cx.forEach(o),Dv=c(u),hn=n(u,"P",{});var Pf=l(hn);W=n(Pf,"EM",{});var me=l(W);Pv=s(me,"Of course, if you have consecutive "),xo=n(me,"CODE",{class:!0});var If=l(xo);Iv=s(If,"$$invalidate"),If.forEach(o),Mv=s(me," calls, Svelte will batch all the "),mo=n(me,"CODE",{class:!0});var Mf=l(mo);Lv=s(Mf,"$$invalidate"),Mf.forEach(o),Rv=s(me," changes, and call "),wo=n(me,"CODE",{class:!0});var Lf=l(wo);$v=s(Lf,"fragment.update"),Lf.forEach(o),Hv=s(me," only once with all the changes."),me.forEach(o),Pf.forEach(o),Nv=c(u),kn=n(u,"P",{});var Rf=l(kn);Av=s(Rf,"Now that you have a clearer picture on how Svelte works, let's go one level deeper, and take a look how the Svelte compiler works."),Rf.forEach(o),u.forEach(o),wn=c(d),he=n(d,"SECTION",{});var Jn=l(he);vn=n(Jn,"H2",{});var $f=l(vn);ot=n($f,"A",{href:!0,id:!0});var Hf=l(ot);jv=s(Hf,"The Svelte compiler"),Hf.forEach(o),$f.forEach(o),Gv=c(Jn),dn=n(Jn,"P",{});var Nf=l(dn);Wv=s(Nf,"-- WIP --"),Nf.forEach(o),Jn.forEach(o),this.h()},h(){r(w,"href","#draft-what-is-svelte"),r(w,"id","draft-what-is-svelte"),r(rt,"href","/compile-svelte-in-your-head-part-1"),r(ge,"href","http://svelte.dev/"),r(ge,"rel","nofollow"),r(be,"href","https://twitter.com/Rich_Harris"),r(be,"rel","nofollow"),r(Se,"href","https://svelte.dev/blog/svelte-3-rethinking-reactivity"),r(Se,"rel","nofollow"),r(Te,"href","https://svelte.dev/tutorial/basics"),r(Te,"rel","nofollow"),r(Pe,"href","#writing-vanilla-javascript"),r(Pe,"id","writing-vanilla-javascript"),r(ht,"id","ex1-decrement"),r(kt,"id","ex1-count"),r(vt,"id","ex1-increment"),Mx(I,"text-align","center"),r(dt,"class","code-section"),r(yt,"class","code-section"),r(ut,"class","code-section"),r(ft,"class","inline"),r(xt,"class","inline"),r(mt,"class","code-section"),r(wt,"class","inline"),r(gt,"class","inline"),r(Et,"class","inline"),r(ce,"href","https://reactjs.org/docs/react-dom.html"),r(ce,"rel","nofollow"),r(_t,"class","inline"),r(Le,"href","https://github.com/acdlite/react-fiber-architecture"),r(Le,"rel","nofollow"),r(bt,"class","inline"),r(St,"class","inline"),r(Ct,"class","inline"),r(Re,"href","https://github.com/facebook/react/blob/b8d079b41372290aa1846e3a780d85d05ab8ffc1/packages/react-dom/src/client/ReactDOMComponent.js#L372-L377"),r(Re,"rel","nofollow"),r(Ot,"class","inline"),r(Tt,"class","inline"),r(Dt,"class","inline"),r(Pt,"class","inline"),r(pe,"href","https://github.com/facebook/react/blob/b8d079b41372290aa1846e3a780d85d05ab8ffc1/packages/react-dom/src/client/ReactDOMComponent.js#L386-L388"),r(pe,"rel","nofollow"),r(Ae,"href","https://svelte.dev/repl/2ed88da423f24cd980dad77e8a07e248?version=3.12.1"),r(Ae,"rel","nofollow"),r(It,"class","code-section"),r(We,"href","https://svelte.dev/repl/2ed88da423f24cd980dad77e8a07e248?version=3.12.1"),r(We,"rel","nofollow"),r(Mt,"class","inline"),r(qe,"href","#conceptually-how-does-compiled-svelte-component-work"),r(qe,"id","conceptually-how-does-compiled-svelte-component-work"),r(Lt,"class","code-section"),r(Rt,"class","code-section"),r($t,"class","inline"),r(Ht,"class","inline"),r(Nt,"class","code-section"),r(Je,"href","#how-the-compiled-svelte-component-works"),r(Je,"id","how-the-compiled-svelte-component-works"),r(At,"class","inline"),r(jt,"class","inline"),r(Gt,"class","inline"),r(Wt,"class","inline"),r(Fe,"href","https://svelte.dev/repl"),r(Fe,"rel","nofollow"),r(Bt,"class","inline"),r(qt,"class","inline"),r(Jt,"class","inline"),r(Vt,"class","inline"),r(Ft,"class","inline"),r(Ut,"class","code-section"),r(Yt,"class","inline"),r(Zt,"class","code-section"),r(zt,"class","inline"),r(Kt,"class","inline"),r(Qt,"class","inline"),r(Xt,"class","inline"),r(es,"class","inline"),r(ts,"class","inline"),r(os,"class","inline"),r(as,"class","inline"),r(ns,"class","inline"),r(ls,"class","inline"),r(rs,"class","inline"),r(is,"class","inline"),r(cs,"class","inline"),r(ps,"class","inline"),r(vs,"class","inline"),r(us,"class","inline"),r(xs,"class","inline"),r(Ze,"href","https://svelte.dev/repl/hello-world"),r(Ze,"rel","nofollow"),r(gs,"class","inline"),r(Qe,"href","https://svelte.dev/repl/d831c0e1387d4105b9bf4cbf6e321477?version=3.12.1"),r(Qe,"rel","nofollow"),r(_s,"class","inline"),r(bs,"class","inline"),r(Ss,"class","inline"),r(Os,"class","inline"),r(Ts,"class","inline"),r(Ds,"class","inline"),r(Ps,"class","inline"),r(Is,"class","inline"),r(Ms,"class","code-section"),r($s,"class","inline"),r(Hs,"class","inline"),r(As,"class","inline"),r(js,"class","inline"),r(Gs,"class","inline"),r(Bs,"class","inline"),r(qs,"class","inline"),r(Zs,"class","inline"),r(zs,"class","inline"),r(Qs,"class","inline"),r(et,"href","#pieces-them-together"),r(et,"id","pieces-them-together"),r(Xs,"class","code-section"),r(eo,"class","inline"),r(to,"class","inline"),r(so,"class","code-section"),r(oo,"class","inline"),r(ao,"class","inline"),r(no,"class","code-section"),r(lo,"class","inline"),r(ro,"class","inline"),r(io,"class","code-section"),r(co,"class","code-section"),r(po,"class","inline"),r(ho,"class","inline"),r(ko,"class","inline"),r(vo,"class","inline"),r(uo,"class","inline"),r(fo,"class","code-section"),r(xo,"class","inline"),r(mo,"class","inline"),r(wo,"class","inline"),r(ot,"href","#the-svelte-compiler"),r(ot,"id","the-svelte-compiler")},m(d,f){qf(m,d,f),M(d,L,f),M(d,x,f),e(x,U),e(U,w),e(w,R),e(x,lt),e(x,we),e(we,Vn),e(we,rt),e(rt,Fn),e(we,Un),e(x,Yn),e(x,it),e(it,ge),e(ge,Zn),e(it,zn),e(x,Kn),e(x,Ho),e(Ho,Qn),e(x,Xn),e(x,No),e(No,el),e(x,tl),e(x,Ee),e(Ee,_e),e(_e,Ao),e(Ao,jo),e(jo,sl),e(_e,ol),e(_e,Y),e(Y,al),e(Y,be),e(be,nl),e(Y,ll),e(Y,Se),e(Se,rl),e(Y,il),e(Ee,cl),e(Ee,Ce),e(Ce,Go),e(Go,Wo),e(Wo,pl),e(Ce,hl),e(Ce,Oe),e(Oe,kl),e(Oe,Te),e(Te,vl),e(Oe,dl),e(x,yl),e(x,Bo),e(Bo,ul),e(x,fl),e(x,De),e(De,ct),e(ct,xl),e(ct,qo),e(qo,Jo),e(Jo,ml),e(De,wl),e(De,pt),e(pt,gl),e(pt,Vo),e(Vo,yn),M(d,un,f),M(d,k,f),e(k,Fo),e(Fo,Pe),e(Pe,El),e(k,_l),e(k,Uo),e(Uo,bl),e(k,Sl),e(k,Yo),e(Yo,Cl),e(k,Ol),e(k,I),e(I,ht),e(ht,Tl),e(I,Dl),e(I,kt),e(kt,Pl),e(I,Il),e(I,vt),e(vt,Ml),e(I,Ll),e(I,Zo),e(Zo,Rl),e(k,$l),e(k,zo),e(zo,Hl),e(k,Nl),e(k,Ko),e(Ko,Qo),e(Qo,Al),e(k,jl),e(k,Xo),e(Xo,Gl),e(k,Wl),e(k,dt),dt.innerHTML=Uf,e(k,Bl),e(k,ea),e(ea,ql),e(k,Jl),e(k,yt),yt.innerHTML=Yf,e(k,Vl),e(k,ta),e(ta,sa),e(sa,Fl),e(k,Ul),e(k,$),e($,Yl),e($,oa),e(oa,Zl),e($,zl),e($,aa),e(aa,Kl),e($,Ql),e($,na),e(na,Xl),e($,er),e(k,tr),e(k,la),e(la,sr),e(k,or),e(k,ut),ut.innerHTML=Zf,e(k,ar),e(k,ra),e(ra,nr),e(k,lr),e(k,ia),e(ia,Z),e(Z,rr),e(Z,ft),e(ft,ir),e(Z,cr),e(Z,xt),e(xt,pr),e(Z,hr),e(k,kr),e(k,Ie),e(Ie,vr),e(Ie,ca),e(ca,dr),e(Ie,yr),e(k,ur),e(k,pa),e(pa,fr),e(k,xr),e(k,ha),e(ha,Me),e(Me,mr),e(Me,ka),e(ka,wr),e(Me,gr),e(k,Er),e(k,va),e(va,_r),e(k,br),e(k,mt),mt.innerHTML=zf,e(k,Sr),e(k,B),e(B,Cr),e(B,wt),e(wt,Or),e(B,Tr),e(B,gt),e(gt,Dr),e(B,Pr),e(B,ce),e(ce,Et),e(Et,Ir),e(ce,Mr),e(k,Lr),e(k,O),e(O,Rr),e(O,_t),e(_t,$r),e(O,Hr),e(O,Le),e(Le,Nr),e(O,Ar),e(O,bt),e(bt,jr),e(O,Gr),e(O,St),e(St,Wr),e(O,Br),e(k,qr),e(k,da),e(da,Jr),e(k,Vr),e(k,_),e(_,Fr),e(_,Ct),e(Ct,Ur),e(_,Yr),e(_,Re),e(Re,Zr),e(_,zr),e(_,Ot),e(Ot,Kr),e(_,Qr),e(_,Tt),e(Tt,Xr),e(_,ei),e(_,Dt),e(Dt,ti),e(_,si),e(_,pe),e(pe,oi),e(pe,Pt),e(Pt,ai),e(_,ni),e(k,li),e(k,$e),e($e,ri),e($e,ya),e(ya,ii),e($e,ci),e(k,pi),e(k,He),e(He,hi),e(He,ua),e(ua,ki),e(He,vi),e(k,di),e(k,Ne),e(Ne,yi),e(Ne,Ae),e(Ae,ui),e(Ne,fi),e(k,xi),e(k,It),It.innerHTML=Kf,e(k,mi),e(k,je),e(je,fa),e(fa,wi),e(je,gi),e(je,Ge),e(Ge,Ei),e(Ge,We),e(We,_i),e(Ge,bi),e(k,Si),e(k,Be),e(Be,Ci),e(Be,Mt),e(Mt,Oi),e(Be,Ti),e(k,Di),e(k,xa),e(xa,Pi),M(d,fn,f),M(d,g,f),e(g,ma),e(ma,qe),e(qe,Ii),e(g,Mi),e(g,wa),e(wa,Li),e(g,Ri),e(g,ga),e(ga,$i),e(g,Hi),e(g,Lt),Lt.innerHTML=Qf,e(g,Ni),e(g,Ea),e(Ea,Ai),e(g,ji),e(g,Rt),Rt.innerHTML=Xf,e(g,Gi),e(g,z),e(z,Wi),e(z,$t),e($t,Bi),e(z,qi),e(z,Ht),e(Ht,Ji),e(z,Vi),e(g,Fi),e(g,_a),e(_a,Ui),e(g,Yi),e(g,Nt),Nt.innerHTML=ex,M(d,xn,f),M(d,p,f),e(p,ba),e(ba,Je),e(Je,Zi),e(p,zi),e(p,T),e(T,Ki),e(T,At),e(At,Qi),e(T,Xi),e(T,jt),e(jt,ec),e(T,tc),e(T,Gt),e(Gt,sc),e(T,oc),e(T,Wt),e(Wt,ac),e(T,nc),e(p,lc),e(p,Ve),e(Ve,rc),e(Ve,Fe),e(Fe,ic),e(Ve,cc),e(p,pc),e(p,H),e(H,hc),e(H,Bt),e(Bt,kc),e(H,vc),e(H,qt),e(qt,dc),e(H,yc),e(H,Jt),e(Jt,uc),e(H,fc),e(p,xc),e(p,Sa),e(Sa,mc),e(p,wc),e(p,K),e(K,Ca),e(Ca,Vt),e(Vt,gc),e(K,Ec),e(K,Oa),e(Oa,Ft),e(Ft,_c),e(K,bc),e(K,Ta),e(Ta,Sc),e(p,Cc),e(p,Ut),Ut.innerHTML=tx,e(p,Oc),e(p,Da),e(Da,Tc),e(p,Dc),e(p,Pa),e(Pa,Ia),e(Ia,Pc),e(p,Ic),e(p,Ue),e(Ue,Mc),e(Ue,Yt),e(Yt,Lc),e(Ue,Rc),e(p,$c),e(p,Ma),e(Ma,Hc),e(p,Nc),e(p,Zt),Zt.innerHTML=sx,e(p,Ac),e(p,D),e(D,jc),e(D,zt),e(zt,Gc),e(D,Wc),e(D,Kt),e(Kt,Bc),e(D,qc),e(D,Qt),e(Qt,Jc),e(D,Vc),e(D,Xt),e(Xt,Fc),e(D,Uc),e(p,Yc),e(p,Q),e(Q,Zc),e(Q,es),e(es,zc),e(Q,Kc),e(Q,ts),e(ts,Qc),e(Q,Xc),e(p,ep),e(p,La),e(La,ss),e(ss,tp),e(ss,os),e(os,sp),e(p,op),e(p,X),e(X,ap),e(X,as),e(as,np),e(X,lp),e(X,ns),e(ns,rp),e(X,ip),e(p,cp),e(p,N),e(N,pp),e(N,ls),e(ls,hp),e(N,kp),e(N,rs),e(rs,vp),e(N,dp),e(N,is),e(is,yp),e(N,up),e(p,fp),e(p,xp),e(p,mp),e(p,ee),e(ee,wp),e(ee,cs),e(cs,gp),e(ee,Ep),e(ee,ps),e(ps,_p),e(ee,bp),e(p,Sp),e(p,A),e(A,hs),e(hs,ks),e(ks,vs),e(vs,Cp),e(ks,Op),e(hs,Ra),e(Ra,$a),e($a,Tp),e(A,Dp),e(A,ds),e(ds,ys),e(ys,us),e(us,Pp),e(ys,Ip),e(ds,Ha),e(Ha,Na),e(Na,Mp),e(A,Lp),e(A,fs),e(fs,Aa),e(Aa,Rp),e(fs,te),e(te,ja),e(ja,$p),e(te,Hp),e(te,Ye),e(Ye,Np),e(Ye,xs),e(xs,Ap),e(Ye,jp),e(te,Gp),e(te,ms),e(ms,Ze),e(Ze,Wp),e(ms,Bp),e(A,qp),e(A,ws),e(ws,Ga),e(Ga,Jp),e(ws,ze),e(ze,Ke),e(Ke,Vp),e(Ke,gs),e(gs,Fp),e(Ke,Up),e(ze,Yp),e(ze,Es),e(Es,Qe),e(Qe,Zp),e(Es,zp),e(p,Kp),e(p,Qp),e(p,Xp),e(p,j),e(j,eh),e(j,_s),e(_s,th),e(j,sh),e(j,bs),e(bs,oh),e(j,ah),e(j,Ss),e(Ss,nh),e(j,lh),e(p,rh),e(p,Wa),e(Wa,Cs),e(Cs,ih),e(Cs,Os),e(Os,ch),e(p,ph),e(p,P),e(P,hh),e(P,Ts),e(Ts,kh),e(P,vh),e(P,Ds),e(Ds,dh),e(P,yh),e(P,Ps),e(Ps,uh),e(P,fh),e(P,Is),e(Is,xh),e(P,mh),e(p,wh),e(p,Ms),Ms.innerHTML=ox,e(p,gh),e(p,Ba),e(Ba,Eh),e(p,_h),e(p,qa),e(qa,Ls),e(Ls,bh),e(Ls,Ja),e(Ja,Sh),e(p,Ch),e(p,Va),e(Va,Oh),e(p,Th),e(p,Fa),e(Fa,Rs),e(Rs,Dh),e(Rs,Ua),e(Ua,Ph),e(p,Ih),e(p,se),e(se,Mh),e(se,$s),e($s,Lh),e(se,Rh),e(se,Hs),e(Hs,$h),e(se,Hh),e(p,Nh),e(p,Ya),e(Ya,Ns),e(Ns,Ah),e(Ns,Za),e(Za,jh),e(p,Gh),e(p,G),e(G,Wh),e(G,As),e(As,Bh),e(G,qh),e(G,js),e(js,Jh),e(G,Vh),e(G,Gs),e(Gs,Fh),e(G,Uh),e(p,Yh),e(p,za),e(za,Ws),e(Ws,Zh),e(Ws,Ka),e(Ka,zh),e(p,Kh),e(p,oe),e(oe,Qh),e(oe,Bs),e(Bs,Xh),e(oe,ek),e(oe,qs),e(qs,tk),e(oe,sk),e(p,ok),e(p,b),e(b,Js),e(Js,ak),e(Js,Qa),e(Qa,nk),e(b,lk),e(b,rk),e(b,Vs),e(Vs,ik),e(Vs,Xa),e(Xa,ck),e(b,pk),e(b,hk),e(b,Fs),e(Fs,kk),e(Fs,en),e(en,vk),e(b,dk),e(b,yk),e(b,Us),e(Us,uk),e(Us,tn),e(tn,fk),e(b,xk),e(b,mk),e(b,Ys),e(Ys,wk),e(Ys,sn),e(sn,gk),e(p,Ek),e(p,ae),e(ae,_k),e(ae,Zs),e(Zs,bk),e(ae,Sk),e(ae,zs),e(zs,Ck),e(ae,Ok),e(p,Tk),e(p,on),e(on,Ks),e(Ks,Dk),e(Ks,an),e(an,Pk),e(p,Ik),e(p,Xe),e(Xe,Mk),e(Xe,Qs),e(Qs,Lk),e(Xe,Rk),M(d,mn,f),M(d,y,f),e(y,nn),e(nn,et),e(et,$k),e(y,Hk),e(y,ln),e(ln,Nk),e(y,Ak),e(y,rn),e(rn,jk),e(y,Gk),e(y,Xs),Xs.innerHTML=ax,e(y,Wk),e(y,ne),e(ne,Bk),e(ne,eo),e(eo,qk),e(ne,Jk),e(ne,to),e(to,Vk),e(ne,Fk),e(y,Uk),e(y,so),so.innerHTML=nx,e(y,Yk),e(y,le),e(le,Zk),e(le,oo),e(oo,zk),e(le,Kk),e(le,ao),e(ao,Qk),e(le,Xk),e(y,ev),e(y,no),no.innerHTML=lx,e(y,tv),e(y,re),e(re,sv),e(re,lo),e(lo,ov),e(re,av),e(re,ro),e(ro,nv),e(re,lv),e(y,rv),e(y,io),io.innerHTML=rx,e(y,iv),e(y,cn),e(cn,cv),e(y,pv),e(y,co),co.innerHTML=ix,e(y,hv),e(y,tt),e(tt,kv),e(tt,po),e(po,vv),e(tt,dv),e(y,yv),e(y,ie),e(ie,uv),e(ie,ho),e(ho,fv),e(ie,xv),e(ie,pn),e(pn,ko),e(ko,mv),e(ie,wv),e(y,gv),e(y,st),e(st,Ev),e(st,vo),e(vo,_v),e(st,bv),e(y,Sv),e(y,yo),e(yo,uo),e(uo,Cv),e(yo,Ov),e(y,Tv),e(y,fo),fo.innerHTML=cx,e(y,Dv),e(y,hn),e(hn,W),e(W,Pv),e(W,xo),e(xo,Iv),e(W,Mv),e(W,mo),e(mo,Lv),e(W,Rv),e(W,wo),e(wo,$v),e(W,Hv),e(y,Nv),e(y,kn),e(kn,Av),M(d,wn,f),M(d,he,f),e(he,vn),e(vn,ot),e(ot,jv),e(he,Gv),e(he,dn),e(dn,Wv),gn=!0},p:Lx,i(d){gn||(Jf(m.$$.fragment,d),gn=!0)},o(d){Vf(m.$$.fragment,d),gn=!1},d(d){Ff(m,d),d&&o(L),d&&o(x),d&&o(un),d&&o(k),d&&o(fn),d&&o(g),d&&o(xn),d&&o(p),d&&o(mn),d&&o(y),d&&o(wn),d&&o(he)}}}function Ax(nt){let m,L;const x=[nt[0],Gf];let U={$$slots:{default:[Nx]},$$scope:{ctx:nt}};for(let w=0;w<x.length;w+=1)U=dd(U,x[w]);return m=new Rx({props:U}),{c(){Wf(m.$$.fragment)},l(w){Bf(m.$$.fragment,w)},m(w,R){qf(m,w,R),L=!0},p(w,[R]){const lt=R&1?Px(x,[R&1&&Af(w[0]),R&0&&Af(Gf)]):{};R&2&&(lt.$$scope={dirty:R,ctx:w}),m.$set(lt)},i(w){L||(Jf(m.$$.fragment,w),L=!0)},o(w){Vf(m.$$.fragment,w),L=!1},d(w){Ff(m,w)}}}const Gf={title:"Deep dive into Svelte",description:"wip",date:"2019-11-09T08:00:00Z",lastUpdated:"2019-11-09T08:00:00Z",wip:!0,label:"blog"};function jx(nt,m,L){return Ix("blog",{image:Hx}),nt.$$set=x=>{L(0,m=dd(dd({},m),jf(x)))},m=jf(m),[m]}class Ux extends Ox{constructor(m){super();Tx(this,m,jx,Ax,Dx,{})}}export{Ux as default,Gf as metadata};
