import{S as xx,i as mx,s as wx,C as hd,w as gx,x as Ex,y as _x,z as bx,A as Hf,q as Sx,o as Cx,B as Ox,r as Tx,Y as $f,e as a,t,k as i,c as n,a as l,h as s,d as o,m as c,b as r,f as Dx,g as W,H as e,J as Px}from"../../chunks/vendor-9710682b.js";import{B as Ix}from"../../chunks/BlogLayout-9a08402e.js";import{_ as Mx}from"../../chunks/twitter-card-image-a57df29d.js";import"../../chunks/stores-f9c97213.js";import"../../chunks/TableOfContent-2fa6a472.js";/* empty css                                */function Lx(at){let u,M,O,me,w,b,nt,lt,qn,Jn,Vn,rt,we,Un,Fn,Yn,Ho,Zn,zn,$o,Kn,Qn,ge,Ee,No,Ao,Xn,el,F,tl,_e,sl,ol,be,al,nl,ll,Se,jo,Go,rl,il,Ce,cl,Oe,pl,hl,kl,Wo,vl,dl,Te,it,yl,Bo,qo,ul,fl,ct,xl,Jo,dn,yn,k,Vo,De,ml,wl,Uo,gl,El,Fo,_l,bl,L,pt,Sl,Cl,ht,Ol,Tl,kt,Dl,Pl,Yo,Il,Ml,Zo,Ll,Rl,zo,Ko,Hl,$l,Qo,Nl,Al,vt,Af=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">&lt;!-- filename: index.html --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;decrement&quot;</span><span style="color: var(--shiki-color-text)">&gt;-&lt;/</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">span</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;count&quot;</span><span style="color: var(--shiki-color-text)">&gt;0&lt;/</span><span style="color: var(--shiki-token-string-expression)">span</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;increment&quot;</span><span style="color: var(--shiki-color-text)">&gt;+&lt;/</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,jl,Xo,Gl,Wl,dt,jf=`<div class="filename">script.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">span</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.querySelector</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;#count&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.querySelector</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;#decrement&#39;</span><span style="color: var(--shiki-color-text)">).</span><span style="color: var(--shiki-token-function)">onclick</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  (</span><span style="color: var(--shiki-token-constant)">span</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">--</span><span style="color: var(--shiki-color-text)">count);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.querySelector</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;#increment&#39;</span><span style="color: var(--shiki-color-text)">).</span><span style="color: var(--shiki-token-function)">onclick</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  (</span><span style="color: var(--shiki-token-constant)">span</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">count);</span></span></code></pre>`,Bl,ea,ta,ql,Jl,R,Vl,sa,Ul,Fl,oa,Yl,Zl,aa,zl,Kl,Ql,na,Xl,er,yt,Gf=`<div class="filename">script.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">buildCounter</span><span style="color: var(--shiki-color-text)">(parent) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">span</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;span&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">decrementBtn</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;button&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">incrementBtn</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;button&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">span</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">decrementBtn</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;-&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">decrementBtn</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">onclick</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">span</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">--</span><span style="color: var(--shiki-color-text)">count);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">incrementBtn</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;+&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">incrementBtn</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">onclick</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">span</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">count);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">parent</span><span style="color: var(--shiki-token-function)">.appendChild</span><span style="color: var(--shiki-color-text)">(decrementBtn);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">parent</span><span style="color: var(--shiki-token-function)">.appendChild</span><span style="color: var(--shiki-color-text)">(span);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">parent</span><span style="color: var(--shiki-token-function)">.appendChild</span><span style="color: var(--shiki-color-text)">(incrementBtn);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// you can call &#96;buildCounter&#96; however times you want</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">//  to get however many counters</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">buildCounter</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-color-text)">.body);</span></span></code></pre>`,tr,la,sr,or,ra,Y,ar,ut,nr,lr,ft,rr,ir,cr,Pe,pr,ia,hr,kr,vr,ca,dr,yr,pa,Ie,ur,ha,fr,xr,mr,ka,wr,gr,xt,Wf=`<div class="filename">Counter.jsx</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Counter</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">count</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">setCount</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">useState</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">onClick</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">&#123;() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">setCount</span><span style="color: var(--shiki-color-text)">(c </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> c </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">)&#125;&gt;-&lt;/</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">span</span><span style="color: var(--shiki-color-text)">&gt;&#123; count &#125;&lt;/</span><span style="color: var(--shiki-token-string-expression)">span</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">onClick</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">&#123;() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">setCount</span><span style="color: var(--shiki-color-text)">(c </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> c </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">)&#125;&gt;+&lt;/</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  )</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Er,B,_r,mt,br,Sr,wt,Cr,Or,ie,gt,Tr,Dr,Pr,T,Ir,Et,Mr,Lr,Me,Rr,Hr,_t,$r,Nr,bt,Ar,jr,Gr,va,Wr,Br,E,qr,St,Jr,Vr,Le,Ur,Fr,Ct,Yr,Zr,Ot,zr,Kr,Tt,Qr,Xr,ce,ei,Dt,ti,si,oi,Re,ai,da,ni,li,ri,He,ii,ya,ci,pi,hi,$e,ki,Ne,vi,di,yi,Pt,Bf=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// import &#123; element, ... &#125; from &quot;svelte/internal&quot;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> button0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> span</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> t</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> button1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dispose;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      button0 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">element</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;button&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">button0</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;-&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      span </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">element</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;span&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      t </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">text</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.count);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      button1 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">element</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;button&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">button1</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;+&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(button0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;click&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.click_handler)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">listen</span><span style="color: var(--shiki-color-text)">(button1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;click&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.click_handler_1);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> button0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> span</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">append</span><span style="color: var(--shiki-color-text)">(span</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> t);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> button1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">(changed</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> ctx) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">changed</span><span style="color: var(--shiki-color-text)">.count) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">set_data</span><span style="color: var(--shiki-color-text)">(t</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.count);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">click_handler</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;count&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (count </span><span style="color: var(--shiki-token-keyword)">-=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">click_handler_1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;count&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (count </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123; count</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> click_handler</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> click_handler_1 &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`,ui,Ae,ua,fi,xi,je,mi,Ge,wi,gi,Ei,We,_i,It,bi,Si,Ci,fa,Oi,un,m,xa,Be,Ti,Di,ma,Pi,Ii,wa,Mi,Li,Mt,qf=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)">&gt;Click Me&lt;/</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">p</span><span style="color: var(--shiki-color-text)">&gt;Hello Svelte&lt;/</span><span style="color: var(--shiki-token-string-expression)">p</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,Ri,ga,Hi,$i,Lt,Jf=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">button</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">element</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;button&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">button</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Click Me&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">p</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">element</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;p&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">p</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Hello Svelte&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// element(&#39;p&#39;) is short for &#96;document.createElement(&#39;p&#39;);</span></span></code></pre>`,Ni,Z,Ai,Rt,ji,Gi,Ht,Wi,Bi,qi,Ea,Ji,Vi,$t,Vf=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">onClick</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Greetings!&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">on:click</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string)">&#123;onClick&#125;</span><span style="color: var(--shiki-color-text)">&gt;Click Me&lt;/</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">p</span><span style="color: var(--shiki-color-text)">&gt;Hello Svelte&lt;/</span><span style="color: var(--shiki-token-string-expression)">p</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,fn,p,_a,qe,Ui,Fi,D,Yi,Nt,Zi,zi,At,Ki,Qi,jt,Xi,ec,Gt,tc,sc,oc,Je,ac,Ve,nc,lc,rc,H,ic,Wt,cc,pc,Bt,hc,kc,qt,vc,dc,yc,ba,uc,fc,z,Sa,Jt,xc,mc,Ca,Vt,wc,gc,Oa,Ec,_c,Ut,Uf=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// 1. create_fragment</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123; </span><span style="color: var(--shiki-token-comment)">/*...*/</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">() &#123; </span><span style="color: var(--shiki-token-comment)">/*...*/</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">() &#123; </span><span style="color: var(--shiki-token-comment)">/*...*/</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">() &#123; </span><span style="color: var(--shiki-token-comment)">/*...*/</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// 2. instance</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// 3. the Component itself</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">App</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">SvelteComponent</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(options) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-function)">super</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-function)">init</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> options</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> instance</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> create_fragment</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> safe_not_equal</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> []);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> App;</span></span></code></pre>`,bc,Ta,Sc,Cc,Da,Pa,Oc,Tc,Ue,Dc,Ft,Pc,Ic,Mc,Ia,Lc,Rc,Yt,Ff='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">App</span><span style="color: var(--shiki-color-text)">(&#123; target</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-color-text)">.body &#125;);</span></span></code></pre>',Hc,P,$c,Zt,Nc,Ac,zt,jc,Gc,Kt,Wc,Bc,Qt,qc,Jc,Vc,K,Uc,Xt,Fc,Yc,es,Zc,zc,Kc,Ma,ts,Qc,ss,Xc,ep,Q,tp,os,sp,op,as,ap,np,lp,$,rp,ns,ip,cp,ls,pp,hp,rs,kp,vp,dp,yp,up,X,fp,is,xp,mp,cs,wp,gp,Ep,N,ps,hs,ks,_p,bp,La,Ra,Sp,Cp,vs,ds,ys,Op,Tp,Ha,$a,Dp,Pp,us,Na,Ip,ee,Aa,Mp,Lp,Fe,Rp,fs,Hp,$p,Np,xs,Ye,Ap,jp,Gp,ms,ja,Wp,Ze,ze,Bp,ws,qp,Jp,Vp,gs,Ke,Up,Fp,Yp,Zp,zp,A,Kp,Es,Qp,Xp,_s,eh,th,bs,sh,oh,ah,Ga,Ss,nh,Cs,lh,rh,I,ih,Os,ch,ph,Ts,hh,kh,Ds,vh,dh,Ps,yh,uh,fh,Is,Yf=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> t;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// create</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123; </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">     t </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">text</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.greeting);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// claim</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">l</span><span style="color: var(--shiki-color-text)">(nodes) &#123; </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      t </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">claim_text</span><span style="color: var(--shiki-color-text)">(nodes</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.greeting);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// hydrate</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    h</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> noop</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// mount</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> t</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// update</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">(changed</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> ctx) &#123; </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">changed</span><span style="color: var(--shiki-color-text)">.greeting) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">set_data</span><span style="color: var(--shiki-color-text)">(t</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.greeting);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// measure</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    r</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> noop</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// fix</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    f</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> noop</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// animate</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    a</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> noop</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// intro</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    i</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> noop</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// outro</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    o</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> noop</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// destroy</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">(detaching) &#123; </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (detaching) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">detach</span><span style="color: var(--shiki-color-text)">(t);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,xh,Wa,mh,wh,Ba,Ms,gh,qa,Eh,_h,Ja,bh,Sh,Va,Ls,Ch,Ua,Oh,Th,te,Dh,Rs,Ph,Ih,Hs,Mh,Lh,Rh,Fa,$s,Hh,Ya,$h,Nh,j,Ah,Ns,jh,Gh,As,Wh,Bh,js,qh,Jh,Vh,Za,Gs,Uh,za,Fh,Yh,se,Zh,Ws,zh,Kh,Bs,Qh,Xh,ek,_,qs,tk,Ka,sk,ok,ak,Js,nk,Qa,lk,rk,ik,Vs,ck,Xa,pk,hk,kk,Us,vk,en,dk,yk,uk,Fs,fk,tn,xk,mk,oe,wk,Ys,gk,Ek,Zs,_k,bk,Sk,sn,zs,Ck,on,Ok,Tk,Qe,Dk,Ks,Pk,Ik,xn,d,an,Xe,Mk,Lk,nn,Rk,Hk,ln,$k,Nk,Qs,Zf='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">App</span><span style="color: var(--shiki-color-text)">(&#123; target</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-color-text)">.body &#125;);</span></span></code></pre>',Ak,ae,jk,Xs,Gk,Wk,eo,Bk,qk,Jk,to,zf='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">init</span><span style="color: var(--shiki-color-text)">(app</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> options</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> instance</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> create_fragment) &#123;&#125;</span></span></code></pre>',Vk,ne,Uk,so,Fk,Yk,oo,Zk,zk,Kk,ao,Kf=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">init</span><span style="color: var(--shiki-color-text)">(app</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> options</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> instance</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> create_fragment) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">(app</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.props);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Qk,le,Xk,no,ev,tv,lo,sv,ov,av,ro,Qf=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">init</span><span style="color: var(--shiki-color-text)">(app</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> options</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> instance</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> create_fragment) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">(app</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.props);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,nv,rn,lv,rv,io,Xf=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">init</span><span style="color: var(--shiki-color-text)">(app</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> options</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> instance</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> create_fragment) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">(app</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.props);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// create / claim the nodes</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.hydratable) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.claim</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.create</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// mount the nodes</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.mount</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,iv,et,cv,co,pv,hv,kv,re,vv,po,dv,yv,cn,ho,uv,fv,xv,tt,mv,ko,wv,gv,Ev,vo,yo,_v,bv,Sv,uo,ex=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">init</span><span style="color: var(--shiki-color-text)">(app</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> options</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> instance</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> create_fragment) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (name</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    ctx[name] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> value;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// update the nodes</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.update</span><span style="color: var(--shiki-color-text)">(&#123; [name]</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> ctx);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">(app</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// create / claim the nodes</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.hydratable) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.claim</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.create</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// mount the nodes</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.mount</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Cv,pn,G,Ov,fo,Tv,Dv,xo,Pv,Iv,mo,Mv,Lv,Rv,hn,Hv,mn,pe,kn,st,$v,Nv,vn,Av;return{c(){u=a("section"),M=a("h1"),O=a("a"),me=t("[DRAFT] What is Svelte?"),w=i(),b=a("p"),nt=t("-- this is a work in progress draft, you can read "),lt=a("a"),qn=t("Compile Svelte in your Head"),Jn=t(" which is a more friendly version --"),Vn=i(),rt=a("p"),we=a("a"),Un=t("Svelte"),Fn=t(" is a compiler for web applications. Svelte provides a framework for you to write your web apps declaratively, and it will compile them into efficient JavaScript."),Yn=i(),Ho=a("p"),Zn=t("In this article, I will be sharing how Svelte works."),zn=i(),$o=a("p"),Kn=t("If you are:"),Qn=i(),ge=a("ul"),Ee=a("li"),No=a("p"),Ao=a("strong"),Xn=t("First time hearing Svelte?"),el=i(),F=a("p"),tl=t("Please go and watch "),_e=a("a"),sl=t("Rich Harris"),ol=t(" inspiring talk on "),be=a("a"),al=t('"Rethinking reactivity"'),nl=t(" where he announces Svelte."),ll=i(),Se=a("li"),jo=a("p"),Go=a("strong"),rl=t("Interested learning how to write Svelte application?"),il=i(),Ce=a("p"),cl=t("Please follow along "),Oe=a("a"),pl=t("Svelte's interactive tutorial"),hl=t(", I find it very helpful and it get me started in no time!"),kl=i(),Wo=a("p"),vl=t("Because, I will be going deep level by level, guiding you through the source code sometimes, explaining how Svelte works."),dl=i(),Te=a("ul"),it=a("li"),yl=t("look at code written in vanilla vs using framework"),Bo=a("ul"),qo=a("li"),ul=t("compile time vs build time spectrum, svelte and react opposite side of the spectrum"),fl=i(),ct=a("li"),xl=t("a picture of how a svelte component works"),Jo=a("ul"),dn=a("li"),yn=i(),k=a("section"),Vo=a("h2"),De=a("a"),ml=t("Writing vanilla JavaScript"),wl=i(),Uo=a("p"),gl=t("Before we get started, lets' do an exercise."),El=i(),Fo=a("p"),_l=t("Let's write a counter app like below, without using any framework:"),bl=i(),L=a("div"),pt=a("button"),Sl=t("-"),Cl=i(),ht=a("span"),Ol=t("0"),Tl=i(),kt=a("button"),Dl=t("+"),Pl=i(),Yo=a("script"),Il=t(`let count = 0;
    const span = document.querySelector('#ex1-count');
    document.querySelector('#ex1-decrement').onclick = () => span.textContent = --count;
    document.querySelector('#ex1-increment').onclick = () => span.textContent = ++count;`),Ml=i(),Zo=a("p"),Ll=t("There are generally 2 approaches to this:"),Rl=i(),zo=a("p"),Ko=a("strong"),Hl=t("1. HTML + JS"),$l=i(),Qo=a("p"),Nl=t("You build your app layout in HTML:"),Al=i(),vt=a("div"),jl=i(),Xo=a("p"),Gl=t("then in JS, you use id selector to query out the dynamic part of your HTML and attach event listeners to respond to user inputs:"),Wl=i(),dt=a("div"),Bl=i(),ea=a("p"),ta=a("strong"),ql=t("2. JS only"),Jl=i(),R=a("p"),Vl=t("If you want to have more than 1 counter, the former approach may require you to "),sa=a("em"),Ul=t("copy + paste"),Fl=t(" your HTML "),oa=a("em"),Yl=t("n"),Zl=t(" times for "),aa=a("em"),zl=t("n"),Kl=t(" number of counters."),Ql=i(),na=a("p"),Xl=t("The alternative would be to build the HTML elements programatically:"),er=i(),yt=a("div"),tr=i(),la=a("p"),sr=t("This is the least amount of code to be written for a counter app."),or=i(),ra=a("p"),Y=a("em"),ar=t("(One may argue that you can abstract out "),ut=a("code"),nr=t("document.createElement"),lr=t(" or "),ft=a("code"),rr=t("parent.appendChild"),ir=t(" to a function to make the code smaller, but that's besides the point.)"),cr=i(),Pe=a("p"),pr=t("This is the least amount of code to be written "),ia=a("strong"),hr=t("and be executed by the browser"),kr=t(" for a counter app."),vr=i(),ca=a("p"),dr=t("So why does this matter? Well, before we proceed to explain how this got to do with Svelte, let's first talk about React."),yr=i(),pa=a("p"),Ie=a("em"),ur=t("I chose to talk about React "),ha=a("strong"),fr=t("just because I am a React developer"),xr=t(", I use React at my work and at this very blog site. I am most familiar with React than any other JS frameworks out there"),mr=i(),ka=a("p"),wr=t("In React, you can argubly write a much concise and declarative code:"),gr=i(),xt=a("div"),Er=i(),B=a("p"),_r=t("That's because React has hidden all the "),mt=a("code"),br=t("document.createElement"),Sr=t(", "),wt=a("code"),Cr=t("parent.appendChild"),Or=t(", ... under "),ie=a("a"),gt=a("code"),Tr=t("react-dom"),Dr=t(" renderer."),Pr=i(),T=a("p"),Ir=t("Everytime you click on a counter button, the function "),Et=a("code"),Mr=t("Counter"),Lr=t(" is called to get the new "),Me=a("a"),Rr=t("Fiber tree"),Hr=t(" with the new state value, and it is compared with the current Fiber tree. After the diffing between the 2 Fiber tree, React collects the necessary DOM operations, in this case is to update "),_t=a("code"),$r=t("span"),Nr=t("'s "),bt=a("code"),Ar=t("textContent"),jr=t("."),Gr=i(),va=a("p"),Wr=t("If you feel this is overly complicated, wait, there is more."),Br=i(),E=a("p"),qr=t("When the "),St=a("code"),Jr=t("react-dom"),Vr=i(),Le=a("a"),Ur=t("receives the DOM operations"),Fr=t(", it receives "),Ct=a("code"),Yr=t("['span', { 'children': '1' }]"),Zr=t(", the element and the update payload, and "),Ot=a("code"),zr=t("react-dom"),Kr=t(" has to figure out that "),Tt=a("code"),Qr=t("children"),Xr=t(" meant "),ce=a("a"),ei=t("setting the "),Dt=a("code"),ti=t("textContent"),si=t("."),oi=i(),Re=a("p"),ai=t("As you can see, there's a lot of code "),da=a("strong"),ni=t("executed"),li=t(" under the hood, which you may think is overkill for this contrived example. But with a much larger/complex application, you will soon appreciate the flexibilty React provides. to achieve that, react has to make sure it has code to capture all the different scenarios, without knowing what will be written by us, the developer."),ri=i(),He=a("p"),ii=t("Now, here is how Svelte is different. "),ya=a("strong"),ci=t("Svelte is a compiler"),pi=t(". Svelte knows what we, the developer, has written, and generate only code that is needed for our application."),hi=i(),$e=a("p"),ki=t("Here's what Svelte generated for our Counter app ("),Ne=a("a"),vi=t("repl"),di=t("):"),yi=i(),Pt=a("div"),ui=i(),Ae=a("p"),ua=a("strong"),fi=t("Disclaimer:"),xi=i(),je=a("em"),mi=t("There are parts of code deliberately removed to make the code more concise and readable, which should not affect the point I am trying to make here. Feel free to read the original code in the "),Ge=a("a"),wi=t("repl"),gi=t("."),Ei=i(),We=a("p"),_i=t("You see Svelte's generated code is much like the one we've written in plain JavaScript just now. It generates the "),It=a("code"),bi=t(".textContent"),Si=t(" directly, because during compilation, Svelte knows exactly what you are trying to do. Therefore it can try to handle all the different scenarios, where React tries to handle in runtime, in build time."),Ci=i(),fa=a("p"),Oi=t("Now you know the fundamental differences between Svelte and React, let's take a look how a Svelte component works."),un=i(),m=a("section"),xa=a("h2"),Be=a("a"),Ti=t("Conceptually, how does compiled Svelte component work?"),Di=i(),ma=a("p"),Pi=t("In this section, we are going to write Svelte component incrementally, and see how each changes ended up in the compiled Svelte component."),Ii=i(),wa=a("p"),Mi=t("Let's start with a simple button and a text:"),Li=i(),Mt=a("div"),Ri=i(),ga=a("p"),Hi=t("When Svelte sees this, these HTML elements will translate into JavaScript statement to create the elements:"),$i=i(),Lt=a("div"),Ni=i(),Z=a("p"),Ai=t("If you inspect the Svelte compiled output, you would notice that these instruction lies in a function call "),Rt=a("code"),ji=t("create_fragment"),Gi=t(". "),Ht=a("code"),Wi=t("create_fragment"),Bi=t(" is the function where Svelte keeps the DOM instructions for the component."),qi=i(),Ea=a("p"),Ji=t("Next, lets add some event listener to the button:"),Vi=i(),$t=a("div"),fn=i(),p=a("section"),_a=a("h2"),qe=a("a"),Ui=t("How the compiled Svelte component works"),Fi=i(),D=a("p"),Yi=t("To differentiate between the component code you write, and the component code generated by Svelte, I will use "),Nt=a("code"),Zi=t(".svelte"),zi=t(" component to refer the code you would write in a "),At=a("code"),Ki=t(".svelte"),Qi=t(" file, and Svelte component to refer the "),jt=a("code"),Xi=t(".js"),ec=t(" code, generated by Svelte from your "),Gt=a("code"),tc=t(".svelte"),sc=t(" component, that will be executed in your application."),oc=i(),Je=a("p"),ac=t("The best way to understand how Svelte component works is to use the "),Ve=a("a"),nc=t("Svelte's REPL"),lc=t(". Try writing a component, and see how Svelte compiles the component into plain JavaScript."),rc=i(),H=a("p"),ic=t("Svelte compiles the "),Wt=a("code"),cc=t(".svelte"),pc=t(" file into a "),Bt=a("code"),hc=t(".js"),kc=t(" file, which the "),qt=a("code"),vc=t("export default"),dc=t(" the compiled Svelte component."),yc=i(),ba=a("p"),uc=t("The compiled Svelte component contains 3 main sections:"),fc=i(),z=a("ul"),Sa=a("li"),Jt=a("code"),xc=t("create_fragment"),mc=i(),Ca=a("li"),Vt=a("code"),wc=t("instance"),gc=i(),Oa=a("li"),Ec=t("the Component itself"),_c=i(),Ut=a("div"),bc=i(),Ta=a("p"),Sc=t("Let's explain what each section of the code is for, from the bottom up."),Cc=i(),Da=a("p"),Pa=a("strong"),Oc=t("3. The component itself"),Tc=i(),Ue=a("p"),Dc=t("Each compiled component, by default, is a subclass of "),Ft=a("code"),Pc=t("SvelteComponent"),Ic=t("."),Mc=i(),Ia=a("p"),Lc=t("To create the component onto the DOM, you can create an instance of the component:"),Rc=i(),Yt=a("div"),Hc=i(),P=a("p"),$c=t("In the constructor of "),Zt=a("code"),Nc=t("App"),Ac=t(", as you can see, calls the "),zt=a("code"),jc=t("init"),Gc=t(" function, which takes in both "),Kt=a("code"),Wc=t("instance"),Bc=t(" and "),Qt=a("code"),qc=t("create_fragment"),Jc=t(" function."),Vc=i(),K=a("p"),Uc=t("The "),Xt=a("code"),Fc=t("init"),Yc=t(" function, as the name suggests, will set things up, which lead us to the "),es=a("code"),Zc=t("instance"),zc=t(" function."),Kc=i(),Ma=a("p"),ts=a("strong"),Qc=t("2. "),ss=a("code"),Xc=t("instance"),ep=i(),Q=a("p"),tp=t("The "),os=a("code"),sp=t("instance"),op=t(" function is where all the business logic of your "),as=a("code"),ap=t(".svelte"),np=t(" component lies."),lp=i(),$=a("p"),rp=t("That's why, if you take a closer look, the "),ns=a("code"),ip=t("instance"),cp=t(" function contains most, if not all, the code you write in the "),ls=a("code"),pp=t("<script>"),hp=t(" tag in the "),rs=a("code"),kp=t(".svelte"),vp=t(" component."),dp=i(),yp=a("hr"),up=i(),X=a("p"),fp=t("Code that you write in the "),is=a("code"),xp=t("<script>"),mp=t(" tag that will not be in the "),cs=a("code"),wp=t("instance"),gp=t(" function are:"),Ep=i(),N=a("ul"),ps=a("li"),hs=a("strong"),ks=a("code"),_p=t("import"),bp=t(" statement"),La=a("ul"),Ra=a("li"),Sp=t("These will be moved to the beginning of the compiled file."),Cp=i(),vs=a("li"),ds=a("strong"),ys=a("code"),Op=t("export"),Tp=t(" statement"),Ha=a("ul"),$a=a("li"),Dp=t('These are exported properties or methods of the Svelte component. It will be present in the former section, "the component itself" section.'),Pp=i(),us=a("li"),Na=a("strong"),Ip=t("constants"),ee=a("ul"),Aa=a("li"),Mp=t("Since the value of a constant will not change throughout the lifetime of your application, so there's no point redeclaring a new constant for every instance of your Svelte component."),Lp=i(),Fe=a("li"),Rp=t("Therefore it is moved out from the "),fs=a("code"),Hp=t("instance"),$p=t(" function."),Np=i(),xs=a("li"),Ye=a("a"),Ap=t("Check out the repl"),jp=t("."),Gp=i(),ms=a("li"),ja=a("strong"),Wp=t("pure functions"),Ze=a("ul"),ze=a("li"),Bp=t("The same logic goes with pure functions. If the function does not rely on any variables within the scope other than it's own arguments, the function will be moved out from the "),ws=a("code"),qp=t("instance"),Jp=t(" function."),Vp=i(),gs=a("li"),Ke=a("a"),Up=t("Check out this repl"),Fp=t("."),Yp=i(),Zp=a("hr"),zp=i(),A=a("p"),Kp=t("The "),Es=a("code"),Qp=t("instance"),Xp=t(" function contains all of your business logic, and returns an object. The object contains all the variables and functions you've declared and used in the HTML code. The object is referred as "),_s=a("code"),eh=t("ctx"),th=t(" in Svelte, and that brings us to the "),bs=a("code"),sh=t("create_fragment"),oh=t(" function."),ah=i(),Ga=a("p"),Ss=a("strong"),nh=t("1. "),Cs=a("code"),lh=t("create_fragment"),rh=i(),I=a("p"),ih=t("The "),Os=a("code"),ch=t("create_fragment"),ph=t(" function deals with the HTML code you've written in a "),Ts=a("code"),hh=t(".svelte"),kh=t(" component. The "),Ds=a("code"),vh=t("create_fragment"),dh=t(" function takes in the "),Ps=a("code"),yh=t("ctx"),uh=t(" object, and returns an object that instructs the Svelte component how to render into the DOM, that looks like this:"),fh=i(),Is=a("div"),xh=i(),Wa=a("p"),mh=t("Let's take a closer look to what each function does:"),wh=i(),Ba=a("p"),Ms=a("strong"),gh=t("- c "),qa=a("em"),Eh=t("(create)"),_h=i(),Ja=a("p"),bh=t("This function creates all the DOM nodes needed."),Sh=i(),Va=a("p"),Ls=a("strong"),Ch=t("- l "),Ua=a("em"),Oh=t("(claim)"),Th=i(),te=a("p"),Dh=t("On the other hand, if you use a server-side rendering, and you want to hydrate the rendered DOM with the component, the "),Rs=a("code"),Ph=t("claim"),Ih=t(" function will be called instead of "),Hs=a("code"),Mh=t("create"),Lh=t(". This will try to claim and assign reference to the DOM node."),Rh=i(),Fa=a("p"),$s=a("strong"),Hh=t("- m "),Ya=a("em"),$h=t("(mount)"),Nh=i(),j=a("p"),Ah=t("With the references to the DOM nodes, the "),Ns=a("code"),jh=t("mount"),Gh=t(" function will "),As=a("code"),Wh=t("insert"),Bh=t(" or "),js=a("code"),qh=t("append"),Jh=t(" DOM nodes to the target accordingly."),Vh=i(),Za=a("p"),Gs=a("strong"),Uh=t("- p "),za=a("em"),Fh=t("(update)"),Yh=i(),se=a("p"),Zh=t("If there's a change, say after a button click, the "),Ws=a("code"),zh=t("update"),Kh=t(" function will be called with the changed mask and the new "),Bs=a("code"),Qh=t("ctx"),Xh=t(" object."),ek=i(),_=a("p"),qs=a("strong"),tk=t("- r "),Ka=a("em"),sk=t("(measure)"),ok=a("br"),ak=i(),Js=a("strong"),nk=t("- f "),Qa=a("em"),lk=t("(fix)"),rk=a("br"),ik=i(),Vs=a("strong"),ck=t("- a "),Xa=a("em"),pk=t("(animate)"),hk=a("br"),kk=i(),Us=a("strong"),vk=t("- i "),en=a("em"),dk=t("(intro)"),yk=a("br"),uk=i(),Fs=a("strong"),fk=t("- o "),tn=a("em"),xk=t("(outro)"),mk=i(),oe=a("p"),wk=t("These are for animations, measuring and fixing the element before animation, "),Ys=a("code"),gk=t("intro"),Ek=t("s and "),Zs=a("code"),_k=t("outro"),bk=t("s."),Sk=i(),sn=a("p"),zs=a("strong"),Ck=t("- d "),on=a("em"),Ok=t("(destroy)"),Tk=i(),Qe=a("p"),Dk=t("Last but not least, the "),Ks=a("code"),Pk=t("destroy"),Ik=t(" function is called when the Svelte component unmounts from the target."),xn=i(),d=a("section"),an=a("h3"),Xe=a("a"),Mk=t("Pieces them together"),Lk=i(),nn=a("p"),Rk=t("With every pieces in mind, let's summarise what we've learned so far:"),Hk=i(),ln=a("p"),$k=t("You create the component into DOM by create a new instance of the Svelte component:"),Nk=i(),Qs=a("div"),Ak=i(),ae=a("p"),jk=t("Which in the constructor of "),Xs=a("code"),Gk=t("App"),Wk=t(", it calls the "),eo=a("code"),Bk=t("init"),qk=t(" function:"),Jk=i(),to=a("div"),Vk=i(),ne=a("p"),Uk=t("Within the "),so=a("code"),Fk=t("init"),Yk=t(" function, the "),oo=a("code"),Zk=t("instance"),zk=t(" function is called:"),Kk=i(),ao=a("div"),Qk=i(),le=a("p"),Xk=t("Which returns the "),no=a("code"),ev=t("ctx"),tv=t(", and it is passed into the "),lo=a("code"),sv=t("create_fragment"),ov=t(" function:"),av=i(),ro=a("div"),nv=i(),rn=a("p"),lv=t("Which returns instructions on how to create DOM nodes and mount the nodes into DOM:"),rv=i(),io=a("div"),iv=i(),et=a("p"),cv=t("But hey, when does the "),co=a("code"),pv=t("fragment.update()"),hv=t(" get called when something has changed?"),kv=i(),re=a("p"),vv=t("That my friend, is the secret 3rd argument of the "),po=a("code"),dv=t("instance"),yv=t(" function, "),cn=a("strong"),ho=a("code"),uv=t("$$invalidate"),fv=t("."),xv=i(),tt=a("p"),mv=t("Whenever you reassign a value to your variable, Svelte will add an extra statement of "),ko=a("code"),wv=t("$$invalidate(...)"),gv=t(" statement after your re-assignment."),Ev=i(),vo=a("p"),yo=a("code"),_v=t("$$invalidate"),bv=t(" takes 2 arguments, the name of the variable, and the new value of the variable:"),Sv=i(),uo=a("div"),Cv=i(),pn=a("p"),G=a("em"),Ov=t("Of course, if you have consecutive "),fo=a("code"),Tv=t("$$invalidate"),Dv=t(" calls, Svelte will batch all the "),xo=a("code"),Pv=t("$$invalidate"),Iv=t(" changes, and call "),mo=a("code"),Mv=t("fragment.update"),Lv=t(" only once with all the changes."),Rv=i(),hn=a("p"),Hv=t("Now that you have a clearer picture on how Svelte works, let's go one level deeper, and take a look how the Svelte compiler works."),mn=i(),pe=a("section"),kn=a("h2"),st=a("a"),$v=t("The Svelte compiler"),Nv=i(),vn=a("p"),Av=t("-- WIP --"),this.h()},l(f){u=n(f,"SECTION",{});var x=l(u);M=n(x,"H1",{});var kd=l(M);O=n(kd,"A",{href:!0,id:!0});var vd=l(O);me=s(vd,"[DRAFT] What is Svelte?"),vd.forEach(o),kd.forEach(o),w=c(x),b=n(x,"P",{});var wn=l(b);nt=s(wn,"-- this is a work in progress draft, you can read "),lt=n(wn,"A",{href:!0});var dd=l(lt);qn=s(dd,"Compile Svelte in your Head"),dd.forEach(o),Jn=s(wn," which is a more friendly version --"),wn.forEach(o),Vn=c(x),rt=n(x,"P",{});var jv=l(rt);we=n(jv,"A",{href:!0,rel:!0});var yd=l(we);Un=s(yd,"Svelte"),yd.forEach(o),Fn=s(jv," is a compiler for web applications. Svelte provides a framework for you to write your web apps declaratively, and it will compile them into efficient JavaScript."),jv.forEach(o),Yn=c(x),Ho=n(x,"P",{});var ud=l(Ho);Zn=s(ud,"In this article, I will be sharing how Svelte works."),ud.forEach(o),zn=c(x),$o=n(x,"P",{});var fd=l($o);Kn=s(fd,"If you are:"),fd.forEach(o),Qn=c(x),ge=n(x,"UL",{});var gn=l(ge);Ee=n(gn,"LI",{});var En=l(Ee);No=n(En,"P",{});var xd=l(No);Ao=n(xd,"STRONG",{});var md=l(Ao);Xn=s(md,"First time hearing Svelte?"),md.forEach(o),xd.forEach(o),el=c(En),F=n(En,"P",{});var wo=l(F);tl=s(wo,"Please go and watch "),_e=n(wo,"A",{href:!0,rel:!0});var wd=l(_e);sl=s(wd,"Rich Harris"),wd.forEach(o),ol=s(wo," inspiring talk on "),be=n(wo,"A",{href:!0,rel:!0});var gd=l(be);al=s(gd,'"Rethinking reactivity"'),gd.forEach(o),nl=s(wo," where he announces Svelte."),wo.forEach(o),En.forEach(o),ll=c(gn),Se=n(gn,"LI",{});var _n=l(Se);jo=n(_n,"P",{});var Ed=l(jo);Go=n(Ed,"STRONG",{});var _d=l(Go);rl=s(_d,"Interested learning how to write Svelte application?"),_d.forEach(o),Ed.forEach(o),il=c(_n),Ce=n(_n,"P",{});var bn=l(Ce);cl=s(bn,"Please follow along "),Oe=n(bn,"A",{href:!0,rel:!0});var bd=l(Oe);pl=s(bd,"Svelte's interactive tutorial"),bd.forEach(o),hl=s(bn,", I find it very helpful and it get me started in no time!"),bn.forEach(o),_n.forEach(o),gn.forEach(o),kl=c(x),Wo=n(x,"P",{});var Sd=l(Wo);vl=s(Sd,"Because, I will be going deep level by level, guiding you through the source code sometimes, explaining how Svelte works."),Sd.forEach(o),dl=c(x),Te=n(x,"UL",{});var Sn=l(Te);it=n(Sn,"LI",{});var Gv=l(it);yl=s(Gv,"look at code written in vanilla vs using framework"),Bo=n(Gv,"UL",{});var Cd=l(Bo);qo=n(Cd,"LI",{});var Od=l(qo);ul=s(Od,"compile time vs build time spectrum, svelte and react opposite side of the spectrum"),Od.forEach(o),Cd.forEach(o),Gv.forEach(o),fl=c(Sn),ct=n(Sn,"LI",{});var Wv=l(ct);xl=s(Wv,"a picture of how a svelte component works"),Jo=n(Wv,"UL",{});var Td=l(Jo);dn=n(Td,"LI",{}),l(dn).forEach(o),Td.forEach(o),Wv.forEach(o),Sn.forEach(o),x.forEach(o),yn=c(f),k=n(f,"SECTION",{});var v=l(k);Vo=n(v,"H2",{});var Dd=l(Vo);De=n(Dd,"A",{href:!0,id:!0});var Pd=l(De);ml=s(Pd,"Writing vanilla JavaScript"),Pd.forEach(o),Dd.forEach(o),wl=c(v),Uo=n(v,"P",{});var Id=l(Uo);gl=s(Id,"Before we get started, lets' do an exercise."),Id.forEach(o),El=c(v),Fo=n(v,"P",{});var Md=l(Fo);_l=s(Md,"Let's write a counter app like below, without using any framework:"),Md.forEach(o),bl=c(v),L=n(v,"DIV",{style:!0});var he=l(L);pt=n(he,"BUTTON",{id:!0});var Ld=l(pt);Sl=s(Ld,"-"),Ld.forEach(o),Cl=c(he),ht=n(he,"SPAN",{id:!0});var Rd=l(ht);Ol=s(Rd,"0"),Rd.forEach(o),Tl=c(he),kt=n(he,"BUTTON",{id:!0});var Hd=l(kt);Dl=s(Hd,"+"),Hd.forEach(o),Pl=c(he),Yo=n(he,"SCRIPT",{});var $d=l(Yo);Il=s($d,`let count = 0;
    const span = document.querySelector('#ex1-count');
    document.querySelector('#ex1-decrement').onclick = () => span.textContent = --count;
    document.querySelector('#ex1-increment').onclick = () => span.textContent = ++count;`),$d.forEach(o),he.forEach(o),Ml=c(v),Zo=n(v,"P",{});var Nd=l(Zo);Ll=s(Nd,"There are generally 2 approaches to this:"),Nd.forEach(o),Rl=c(v),zo=n(v,"P",{});var Ad=l(zo);Ko=n(Ad,"STRONG",{});var jd=l(Ko);Hl=s(jd,"1. HTML + JS"),jd.forEach(o),Ad.forEach(o),$l=c(v),Qo=n(v,"P",{});var Gd=l(Qo);Nl=s(Gd,"You build your app layout in HTML:"),Gd.forEach(o),Al=c(v),vt=n(v,"DIV",{class:!0});var tx=l(vt);tx.forEach(o),jl=c(v),Xo=n(v,"P",{});var Wd=l(Xo);Gl=s(Wd,"then in JS, you use id selector to query out the dynamic part of your HTML and attach event listeners to respond to user inputs:"),Wd.forEach(o),Wl=c(v),dt=n(v,"DIV",{class:!0});var sx=l(dt);sx.forEach(o),Bl=c(v),ea=n(v,"P",{});var Bd=l(ea);ta=n(Bd,"STRONG",{});var qd=l(ta);ql=s(qd,"2. JS only"),qd.forEach(o),Bd.forEach(o),Jl=c(v),R=n(v,"P",{});var ke=l(R);Vl=s(ke,"If you want to have more than 1 counter, the former approach may require you to "),sa=n(ke,"EM",{});var Jd=l(sa);Ul=s(Jd,"copy + paste"),Jd.forEach(o),Fl=s(ke," your HTML "),oa=n(ke,"EM",{});var Vd=l(oa);Yl=s(Vd,"n"),Vd.forEach(o),Zl=s(ke," times for "),aa=n(ke,"EM",{});var Ud=l(aa);zl=s(Ud,"n"),Ud.forEach(o),Kl=s(ke," number of counters."),ke.forEach(o),Ql=c(v),na=n(v,"P",{});var Fd=l(na);Xl=s(Fd,"The alternative would be to build the HTML elements programatically:"),Fd.forEach(o),er=c(v),yt=n(v,"DIV",{class:!0});var ox=l(yt);ox.forEach(o),tr=c(v),la=n(v,"P",{});var Yd=l(la);sr=s(Yd,"This is the least amount of code to be written for a counter app."),Yd.forEach(o),or=c(v),ra=n(v,"P",{});var Zd=l(ra);Y=n(Zd,"EM",{});var go=l(Y);ar=s(go,"(One may argue that you can abstract out "),ut=n(go,"CODE",{class:!0});var zd=l(ut);nr=s(zd,"document.createElement"),zd.forEach(o),lr=s(go," or "),ft=n(go,"CODE",{class:!0});var Kd=l(ft);rr=s(Kd,"parent.appendChild"),Kd.forEach(o),ir=s(go," to a function to make the code smaller, but that's besides the point.)"),go.forEach(o),Zd.forEach(o),cr=c(v),Pe=n(v,"P",{});var Cn=l(Pe);pr=s(Cn,"This is the least amount of code to be written "),ia=n(Cn,"STRONG",{});var Qd=l(ia);hr=s(Qd,"and be executed by the browser"),Qd.forEach(o),kr=s(Cn," for a counter app."),Cn.forEach(o),vr=c(v),ca=n(v,"P",{});var Xd=l(ca);dr=s(Xd,"So why does this matter? Well, before we proceed to explain how this got to do with Svelte, let's first talk about React."),Xd.forEach(o),yr=c(v),pa=n(v,"P",{});var ey=l(pa);Ie=n(ey,"EM",{});var On=l(Ie);ur=s(On,"I chose to talk about React "),ha=n(On,"STRONG",{});var ty=l(ha);fr=s(ty,"just because I am a React developer"),ty.forEach(o),xr=s(On,", I use React at my work and at this very blog site. I am most familiar with React than any other JS frameworks out there"),On.forEach(o),ey.forEach(o),mr=c(v),ka=n(v,"P",{});var sy=l(ka);wr=s(sy,"In React, you can argubly write a much concise and declarative code:"),sy.forEach(o),gr=c(v),xt=n(v,"DIV",{class:!0});var ax=l(xt);ax.forEach(o),Er=c(v),B=n(v,"P",{});var ot=l(B);_r=s(ot,"That's because React has hidden all the "),mt=n(ot,"CODE",{class:!0});var oy=l(mt);br=s(oy,"document.createElement"),oy.forEach(o),Sr=s(ot,", "),wt=n(ot,"CODE",{class:!0});var ay=l(wt);Cr=s(ay,"parent.appendChild"),ay.forEach(o),Or=s(ot,", ... under "),ie=n(ot,"A",{href:!0,rel:!0});var Bv=l(ie);gt=n(Bv,"CODE",{class:!0});var ny=l(gt);Tr=s(ny,"react-dom"),ny.forEach(o),Dr=s(Bv," renderer."),Bv.forEach(o),ot.forEach(o),Pr=c(v),T=n(v,"P",{});var q=l(T);Ir=s(q,"Everytime you click on a counter button, the function "),Et=n(q,"CODE",{class:!0});var ly=l(Et);Mr=s(ly,"Counter"),ly.forEach(o),Lr=s(q," is called to get the new "),Me=n(q,"A",{href:!0,rel:!0});var ry=l(Me);Rr=s(ry,"Fiber tree"),ry.forEach(o),Hr=s(q," with the new state value, and it is compared with the current Fiber tree. After the diffing between the 2 Fiber tree, React collects the necessary DOM operations, in this case is to update "),_t=n(q,"CODE",{class:!0});var iy=l(_t);$r=s(iy,"span"),iy.forEach(o),Nr=s(q,"'s "),bt=n(q,"CODE",{class:!0});var cy=l(bt);Ar=s(cy,"textContent"),cy.forEach(o),jr=s(q,"."),q.forEach(o),Gr=c(v),va=n(v,"P",{});var py=l(va);Wr=s(py,"If you feel this is overly complicated, wait, there is more."),py.forEach(o),Br=c(v),E=n(v,"P",{});var S=l(E);qr=s(S,"When the "),St=n(S,"CODE",{class:!0});var hy=l(St);Jr=s(hy,"react-dom"),hy.forEach(o),Vr=c(S),Le=n(S,"A",{href:!0,rel:!0});var ky=l(Le);Ur=s(ky,"receives the DOM operations"),ky.forEach(o),Fr=s(S,", it receives "),Ct=n(S,"CODE",{class:!0});var vy=l(Ct);Yr=s(vy,"['span', { 'children': '1' }]"),vy.forEach(o),Zr=s(S,", the element and the update payload, and "),Ot=n(S,"CODE",{class:!0});var dy=l(Ot);zr=s(dy,"react-dom"),dy.forEach(o),Kr=s(S," has to figure out that "),Tt=n(S,"CODE",{class:!0});var yy=l(Tt);Qr=s(yy,"children"),yy.forEach(o),Xr=s(S," meant "),ce=n(S,"A",{href:!0,rel:!0});var qv=l(ce);ei=s(qv,"setting the "),Dt=n(qv,"CODE",{class:!0});var uy=l(Dt);ti=s(uy,"textContent"),uy.forEach(o),qv.forEach(o),si=s(S,"."),S.forEach(o),oi=c(v),Re=n(v,"P",{});var Tn=l(Re);ai=s(Tn,"As you can see, there's a lot of code "),da=n(Tn,"STRONG",{});var fy=l(da);ni=s(fy,"executed"),fy.forEach(o),li=s(Tn," under the hood, which you may think is overkill for this contrived example. But with a much larger/complex application, you will soon appreciate the flexibilty React provides. to achieve that, react has to make sure it has code to capture all the different scenarios, without knowing what will be written by us, the developer."),Tn.forEach(o),ri=c(v),He=n(v,"P",{});var Dn=l(He);ii=s(Dn,"Now, here is how Svelte is different. "),ya=n(Dn,"STRONG",{});var xy=l(ya);ci=s(xy,"Svelte is a compiler"),xy.forEach(o),pi=s(Dn,". Svelte knows what we, the developer, has written, and generate only code that is needed for our application."),Dn.forEach(o),hi=c(v),$e=n(v,"P",{});var Pn=l($e);ki=s(Pn,"Here's what Svelte generated for our Counter app ("),Ne=n(Pn,"A",{href:!0,rel:!0});var my=l(Ne);vi=s(my,"repl"),my.forEach(o),di=s(Pn,"):"),Pn.forEach(o),yi=c(v),Pt=n(v,"DIV",{class:!0});var nx=l(Pt);nx.forEach(o),ui=c(v),Ae=n(v,"P",{});var In=l(Ae);ua=n(In,"STRONG",{});var wy=l(ua);fi=s(wy,"Disclaimer:"),wy.forEach(o),xi=c(In),je=n(In,"EM",{});var Mn=l(je);mi=s(Mn,"There are parts of code deliberately removed to make the code more concise and readable, which should not affect the point I am trying to make here. Feel free to read the original code in the "),Ge=n(Mn,"A",{href:!0,rel:!0});var gy=l(Ge);wi=s(gy,"repl"),gy.forEach(o),gi=s(Mn,"."),Mn.forEach(o),In.forEach(o),Ei=c(v),We=n(v,"P",{});var Ln=l(We);_i=s(Ln,"You see Svelte's generated code is much like the one we've written in plain JavaScript just now. It generates the "),It=n(Ln,"CODE",{class:!0});var Ey=l(It);bi=s(Ey,".textContent"),Ey.forEach(o),Si=s(Ln," directly, because during compilation, Svelte knows exactly what you are trying to do. Therefore it can try to handle all the different scenarios, where React tries to handle in runtime, in build time."),Ln.forEach(o),Ci=c(v),fa=n(v,"P",{});var _y=l(fa);Oi=s(_y,"Now you know the fundamental differences between Svelte and React, let's take a look how a Svelte component works."),_y.forEach(o),v.forEach(o),un=c(f),m=n(f,"SECTION",{});var g=l(m);xa=n(g,"H2",{});var by=l(xa);Be=n(by,"A",{href:!0,id:!0});var Sy=l(Be);Ti=s(Sy,"Conceptually, how does compiled Svelte component work?"),Sy.forEach(o),by.forEach(o),Di=c(g),ma=n(g,"P",{});var Cy=l(ma);Pi=s(Cy,"In this section, we are going to write Svelte component incrementally, and see how each changes ended up in the compiled Svelte component."),Cy.forEach(o),Ii=c(g),wa=n(g,"P",{});var Oy=l(wa);Mi=s(Oy,"Let's start with a simple button and a text:"),Oy.forEach(o),Li=c(g),Mt=n(g,"DIV",{class:!0});var lx=l(Mt);lx.forEach(o),Ri=c(g),ga=n(g,"P",{});var Ty=l(ga);Hi=s(Ty,"When Svelte sees this, these HTML elements will translate into JavaScript statement to create the elements:"),Ty.forEach(o),$i=c(g),Lt=n(g,"DIV",{class:!0});var rx=l(Lt);rx.forEach(o),Ni=c(g),Z=n(g,"P",{});var Eo=l(Z);Ai=s(Eo,"If you inspect the Svelte compiled output, you would notice that these instruction lies in a function call "),Rt=n(Eo,"CODE",{class:!0});var Dy=l(Rt);ji=s(Dy,"create_fragment"),Dy.forEach(o),Gi=s(Eo,". "),Ht=n(Eo,"CODE",{class:!0});var Py=l(Ht);Wi=s(Py,"create_fragment"),Py.forEach(o),Bi=s(Eo," is the function where Svelte keeps the DOM instructions for the component."),Eo.forEach(o),qi=c(g),Ea=n(g,"P",{});var Iy=l(Ea);Ji=s(Iy,"Next, lets add some event listener to the button:"),Iy.forEach(o),Vi=c(g),$t=n(g,"DIV",{class:!0});var ix=l($t);ix.forEach(o),g.forEach(o),fn=c(f),p=n(f,"SECTION",{});var h=l(p);_a=n(h,"H2",{});var My=l(_a);qe=n(My,"A",{href:!0,id:!0});var Ly=l(qe);Ui=s(Ly,"How the compiled Svelte component works"),Ly.forEach(o),My.forEach(o),Fi=c(h),D=n(h,"P",{});var J=l(D);Yi=s(J,"To differentiate between the component code you write, and the component code generated by Svelte, I will use "),Nt=n(J,"CODE",{class:!0});var Ry=l(Nt);Zi=s(Ry,".svelte"),Ry.forEach(o),zi=s(J," component to refer the code you would write in a "),At=n(J,"CODE",{class:!0});var Hy=l(At);Ki=s(Hy,".svelte"),Hy.forEach(o),Qi=s(J," file, and Svelte component to refer the "),jt=n(J,"CODE",{class:!0});var $y=l(jt);Xi=s($y,".js"),$y.forEach(o),ec=s(J," code, generated by Svelte from your "),Gt=n(J,"CODE",{class:!0});var Ny=l(Gt);tc=s(Ny,".svelte"),Ny.forEach(o),sc=s(J," component, that will be executed in your application."),J.forEach(o),oc=c(h),Je=n(h,"P",{});var Rn=l(Je);ac=s(Rn,"The best way to understand how Svelte component works is to use the "),Ve=n(Rn,"A",{href:!0,rel:!0});var Ay=l(Ve);nc=s(Ay,"Svelte's REPL"),Ay.forEach(o),lc=s(Rn,". Try writing a component, and see how Svelte compiles the component into plain JavaScript."),Rn.forEach(o),rc=c(h),H=n(h,"P",{});var ve=l(H);ic=s(ve,"Svelte compiles the "),Wt=n(ve,"CODE",{class:!0});var jy=l(Wt);cc=s(jy,".svelte"),jy.forEach(o),pc=s(ve," file into a "),Bt=n(ve,"CODE",{class:!0});var Gy=l(Bt);hc=s(Gy,".js"),Gy.forEach(o),kc=s(ve," file, which the "),qt=n(ve,"CODE",{class:!0});var Wy=l(qt);vc=s(Wy,"export default"),Wy.forEach(o),dc=s(ve," the compiled Svelte component."),ve.forEach(o),yc=c(h),ba=n(h,"P",{});var By=l(ba);uc=s(By,"The compiled Svelte component contains 3 main sections:"),By.forEach(o),fc=c(h),z=n(h,"UL",{});var _o=l(z);Sa=n(_o,"LI",{});var qy=l(Sa);Jt=n(qy,"CODE",{class:!0});var Jy=l(Jt);xc=s(Jy,"create_fragment"),Jy.forEach(o),qy.forEach(o),mc=c(_o),Ca=n(_o,"LI",{});var Vy=l(Ca);Vt=n(Vy,"CODE",{class:!0});var Uy=l(Vt);wc=s(Uy,"instance"),Uy.forEach(o),Vy.forEach(o),gc=c(_o),Oa=n(_o,"LI",{});var Fy=l(Oa);Ec=s(Fy,"the Component itself"),Fy.forEach(o),_o.forEach(o),_c=c(h),Ut=n(h,"DIV",{class:!0});var cx=l(Ut);cx.forEach(o),bc=c(h),Ta=n(h,"P",{});var Yy=l(Ta);Sc=s(Yy,"Let's explain what each section of the code is for, from the bottom up."),Yy.forEach(o),Cc=c(h),Da=n(h,"P",{});var Zy=l(Da);Pa=n(Zy,"STRONG",{});var zy=l(Pa);Oc=s(zy,"3. The component itself"),zy.forEach(o),Zy.forEach(o),Tc=c(h),Ue=n(h,"P",{});var Hn=l(Ue);Dc=s(Hn,"Each compiled component, by default, is a subclass of "),Ft=n(Hn,"CODE",{class:!0});var Ky=l(Ft);Pc=s(Ky,"SvelteComponent"),Ky.forEach(o),Ic=s(Hn,"."),Hn.forEach(o),Mc=c(h),Ia=n(h,"P",{});var Qy=l(Ia);Lc=s(Qy,"To create the component onto the DOM, you can create an instance of the component:"),Qy.forEach(o),Rc=c(h),Yt=n(h,"DIV",{class:!0});var px=l(Yt);px.forEach(o),Hc=c(h),P=n(h,"P",{});var V=l(P);$c=s(V,"In the constructor of "),Zt=n(V,"CODE",{class:!0});var Xy=l(Zt);Nc=s(Xy,"App"),Xy.forEach(o),Ac=s(V,", as you can see, calls the "),zt=n(V,"CODE",{class:!0});var eu=l(zt);jc=s(eu,"init"),eu.forEach(o),Gc=s(V," function, which takes in both "),Kt=n(V,"CODE",{class:!0});var tu=l(Kt);Wc=s(tu,"instance"),tu.forEach(o),Bc=s(V," and "),Qt=n(V,"CODE",{class:!0});var su=l(Qt);qc=s(su,"create_fragment"),su.forEach(o),Jc=s(V," function."),V.forEach(o),Vc=c(h),K=n(h,"P",{});var bo=l(K);Uc=s(bo,"The "),Xt=n(bo,"CODE",{class:!0});var ou=l(Xt);Fc=s(ou,"init"),ou.forEach(o),Yc=s(bo," function, as the name suggests, will set things up, which lead us to the "),es=n(bo,"CODE",{class:!0});var au=l(es);Zc=s(au,"instance"),au.forEach(o),zc=s(bo," function."),bo.forEach(o),Kc=c(h),Ma=n(h,"P",{});var nu=l(Ma);ts=n(nu,"STRONG",{});var Jv=l(ts);Qc=s(Jv,"2. "),ss=n(Jv,"CODE",{class:!0});var lu=l(ss);Xc=s(lu,"instance"),lu.forEach(o),Jv.forEach(o),nu.forEach(o),ep=c(h),Q=n(h,"P",{});var So=l(Q);tp=s(So,"The "),os=n(So,"CODE",{class:!0});var ru=l(os);sp=s(ru,"instance"),ru.forEach(o),op=s(So," function is where all the business logic of your "),as=n(So,"CODE",{class:!0});var iu=l(as);ap=s(iu,".svelte"),iu.forEach(o),np=s(So," component lies."),So.forEach(o),lp=c(h),$=n(h,"P",{});var de=l($);rp=s(de,"That's why, if you take a closer look, the "),ns=n(de,"CODE",{class:!0});var cu=l(ns);ip=s(cu,"instance"),cu.forEach(o),cp=s(de," function contains most, if not all, the code you write in the "),ls=n(de,"CODE",{class:!0});var pu=l(ls);pp=s(pu,"<script>"),pu.forEach(o),hp=s(de," tag in the "),rs=n(de,"CODE",{class:!0});var hu=l(rs);kp=s(hu,".svelte"),hu.forEach(o),vp=s(de," component."),de.forEach(o),dp=c(h),yp=n(h,"HR",{}),up=c(h),X=n(h,"P",{});var Co=l(X);fp=s(Co,"Code that you write in the "),is=n(Co,"CODE",{class:!0});var ku=l(is);xp=s(ku,"<script>"),ku.forEach(o),mp=s(Co," tag that will not be in the "),cs=n(Co,"CODE",{class:!0});var vu=l(cs);wp=s(vu,"instance"),vu.forEach(o),gp=s(Co," function are:"),Co.forEach(o),Ep=c(h),N=n(h,"UL",{});var ye=l(N);ps=n(ye,"LI",{});var Vv=l(ps);hs=n(Vv,"STRONG",{});var Uv=l(hs);ks=n(Uv,"CODE",{class:!0});var du=l(ks);_p=s(du,"import"),du.forEach(o),bp=s(Uv," statement"),Uv.forEach(o),La=n(Vv,"UL",{});var yu=l(La);Ra=n(yu,"LI",{});var uu=l(Ra);Sp=s(uu,"These will be moved to the beginning of the compiled file."),uu.forEach(o),yu.forEach(o),Vv.forEach(o),Cp=c(ye),vs=n(ye,"LI",{});var Fv=l(vs);ds=n(Fv,"STRONG",{});var Yv=l(ds);ys=n(Yv,"CODE",{class:!0});var fu=l(ys);Op=s(fu,"export"),fu.forEach(o),Tp=s(Yv," statement"),Yv.forEach(o),Ha=n(Fv,"UL",{});var xu=l(Ha);$a=n(xu,"LI",{});var mu=l($a);Dp=s(mu,'These are exported properties or methods of the Svelte component. It will be present in the former section, "the component itself" section.'),mu.forEach(o),xu.forEach(o),Fv.forEach(o),Pp=c(ye),us=n(ye,"LI",{});var Zv=l(us);Na=n(Zv,"STRONG",{});var wu=l(Na);Ip=s(wu,"constants"),wu.forEach(o),ee=n(Zv,"UL",{});var Oo=l(ee);Aa=n(Oo,"LI",{});var gu=l(Aa);Mp=s(gu,"Since the value of a constant will not change throughout the lifetime of your application, so there's no point redeclaring a new constant for every instance of your Svelte component."),gu.forEach(o),Lp=c(Oo),Fe=n(Oo,"LI",{});var $n=l(Fe);Rp=s($n,"Therefore it is moved out from the "),fs=n($n,"CODE",{class:!0});var Eu=l(fs);Hp=s(Eu,"instance"),Eu.forEach(o),$p=s($n," function."),$n.forEach(o),Np=c(Oo),xs=n(Oo,"LI",{});var zv=l(xs);Ye=n(zv,"A",{href:!0,rel:!0});var _u=l(Ye);Ap=s(_u,"Check out the repl"),_u.forEach(o),jp=s(zv,"."),zv.forEach(o),Oo.forEach(o),Zv.forEach(o),Gp=c(ye),ms=n(ye,"LI",{});var Kv=l(ms);ja=n(Kv,"STRONG",{});var bu=l(ja);Wp=s(bu,"pure functions"),bu.forEach(o),Ze=n(Kv,"UL",{});var Nn=l(Ze);ze=n(Nn,"LI",{});var An=l(ze);Bp=s(An,"The same logic goes with pure functions. If the function does not rely on any variables within the scope other than it's own arguments, the function will be moved out from the "),ws=n(An,"CODE",{class:!0});var Su=l(ws);qp=s(Su,"instance"),Su.forEach(o),Jp=s(An," function."),An.forEach(o),Vp=c(Nn),gs=n(Nn,"LI",{});var Qv=l(gs);Ke=n(Qv,"A",{href:!0,rel:!0});var Cu=l(Ke);Up=s(Cu,"Check out this repl"),Cu.forEach(o),Fp=s(Qv,"."),Qv.forEach(o),Nn.forEach(o),Kv.forEach(o),ye.forEach(o),Yp=c(h),Zp=n(h,"HR",{}),zp=c(h),A=n(h,"P",{});var ue=l(A);Kp=s(ue,"The "),Es=n(ue,"CODE",{class:!0});var Ou=l(Es);Qp=s(Ou,"instance"),Ou.forEach(o),Xp=s(ue," function contains all of your business logic, and returns an object. The object contains all the variables and functions you've declared and used in the HTML code. The object is referred as "),_s=n(ue,"CODE",{class:!0});var Tu=l(_s);eh=s(Tu,"ctx"),Tu.forEach(o),th=s(ue," in Svelte, and that brings us to the "),bs=n(ue,"CODE",{class:!0});var Du=l(bs);sh=s(Du,"create_fragment"),Du.forEach(o),oh=s(ue," function."),ue.forEach(o),ah=c(h),Ga=n(h,"P",{});var Pu=l(Ga);Ss=n(Pu,"STRONG",{});var Xv=l(Ss);nh=s(Xv,"1. "),Cs=n(Xv,"CODE",{class:!0});var Iu=l(Cs);lh=s(Iu,"create_fragment"),Iu.forEach(o),Xv.forEach(o),Pu.forEach(o),rh=c(h),I=n(h,"P",{});var U=l(I);ih=s(U,"The "),Os=n(U,"CODE",{class:!0});var Mu=l(Os);ch=s(Mu,"create_fragment"),Mu.forEach(o),ph=s(U," function deals with the HTML code you've written in a "),Ts=n(U,"CODE",{class:!0});var Lu=l(Ts);hh=s(Lu,".svelte"),Lu.forEach(o),kh=s(U," component. The "),Ds=n(U,"CODE",{class:!0});var Ru=l(Ds);vh=s(Ru,"create_fragment"),Ru.forEach(o),dh=s(U," function takes in the "),Ps=n(U,"CODE",{class:!0});var Hu=l(Ps);yh=s(Hu,"ctx"),Hu.forEach(o),uh=s(U," object, and returns an object that instructs the Svelte component how to render into the DOM, that looks like this:"),U.forEach(o),fh=c(h),Is=n(h,"DIV",{class:!0});var hx=l(Is);hx.forEach(o),xh=c(h),Wa=n(h,"P",{});var $u=l(Wa);mh=s($u,"Let's take a closer look to what each function does:"),$u.forEach(o),wh=c(h),Ba=n(h,"P",{});var Nu=l(Ba);Ms=n(Nu,"STRONG",{});var ed=l(Ms);gh=s(ed,"- c "),qa=n(ed,"EM",{});var Au=l(qa);Eh=s(Au,"(create)"),Au.forEach(o),ed.forEach(o),Nu.forEach(o),_h=c(h),Ja=n(h,"P",{});var ju=l(Ja);bh=s(ju,"This function creates all the DOM nodes needed."),ju.forEach(o),Sh=c(h),Va=n(h,"P",{});var Gu=l(Va);Ls=n(Gu,"STRONG",{});var td=l(Ls);Ch=s(td,"- l "),Ua=n(td,"EM",{});var Wu=l(Ua);Oh=s(Wu,"(claim)"),Wu.forEach(o),td.forEach(o),Gu.forEach(o),Th=c(h),te=n(h,"P",{});var To=l(te);Dh=s(To,"On the other hand, if you use a server-side rendering, and you want to hydrate the rendered DOM with the component, the "),Rs=n(To,"CODE",{class:!0});var Bu=l(Rs);Ph=s(Bu,"claim"),Bu.forEach(o),Ih=s(To," function will be called instead of "),Hs=n(To,"CODE",{class:!0});var qu=l(Hs);Mh=s(qu,"create"),qu.forEach(o),Lh=s(To,". This will try to claim and assign reference to the DOM node."),To.forEach(o),Rh=c(h),Fa=n(h,"P",{});var Ju=l(Fa);$s=n(Ju,"STRONG",{});var sd=l($s);Hh=s(sd,"- m "),Ya=n(sd,"EM",{});var Vu=l(Ya);$h=s(Vu,"(mount)"),Vu.forEach(o),sd.forEach(o),Ju.forEach(o),Nh=c(h),j=n(h,"P",{});var fe=l(j);Ah=s(fe,"With the references to the DOM nodes, the "),Ns=n(fe,"CODE",{class:!0});var Uu=l(Ns);jh=s(Uu,"mount"),Uu.forEach(o),Gh=s(fe," function will "),As=n(fe,"CODE",{class:!0});var Fu=l(As);Wh=s(Fu,"insert"),Fu.forEach(o),Bh=s(fe," or "),js=n(fe,"CODE",{class:!0});var Yu=l(js);qh=s(Yu,"append"),Yu.forEach(o),Jh=s(fe," DOM nodes to the target accordingly."),fe.forEach(o),Vh=c(h),Za=n(h,"P",{});var Zu=l(Za);Gs=n(Zu,"STRONG",{});var od=l(Gs);Uh=s(od,"- p "),za=n(od,"EM",{});var zu=l(za);Fh=s(zu,"(update)"),zu.forEach(o),od.forEach(o),Zu.forEach(o),Yh=c(h),se=n(h,"P",{});var Do=l(se);Zh=s(Do,"If there's a change, say after a button click, the "),Ws=n(Do,"CODE",{class:!0});var Ku=l(Ws);zh=s(Ku,"update"),Ku.forEach(o),Kh=s(Do," function will be called with the changed mask and the new "),Bs=n(Do,"CODE",{class:!0});var Qu=l(Bs);Qh=s(Qu,"ctx"),Qu.forEach(o),Xh=s(Do," object."),Do.forEach(o),ek=c(h),_=n(h,"P",{});var C=l(_);qs=n(C,"STRONG",{});var ad=l(qs);tk=s(ad,"- r "),Ka=n(ad,"EM",{});var Xu=l(Ka);sk=s(Xu,"(measure)"),Xu.forEach(o),ad.forEach(o),ok=n(C,"BR",{}),ak=c(C),Js=n(C,"STRONG",{});var nd=l(Js);nk=s(nd,"- f "),Qa=n(nd,"EM",{});var ef=l(Qa);lk=s(ef,"(fix)"),ef.forEach(o),nd.forEach(o),rk=n(C,"BR",{}),ik=c(C),Vs=n(C,"STRONG",{});var ld=l(Vs);ck=s(ld,"- a "),Xa=n(ld,"EM",{});var tf=l(Xa);pk=s(tf,"(animate)"),tf.forEach(o),ld.forEach(o),hk=n(C,"BR",{}),kk=c(C),Us=n(C,"STRONG",{});var rd=l(Us);vk=s(rd,"- i "),en=n(rd,"EM",{});var sf=l(en);dk=s(sf,"(intro)"),sf.forEach(o),rd.forEach(o),yk=n(C,"BR",{}),uk=c(C),Fs=n(C,"STRONG",{});var id=l(Fs);fk=s(id,"- o "),tn=n(id,"EM",{});var of=l(tn);xk=s(of,"(outro)"),of.forEach(o),id.forEach(o),C.forEach(o),mk=c(h),oe=n(h,"P",{});var Po=l(oe);wk=s(Po,"These are for animations, measuring and fixing the element before animation, "),Ys=n(Po,"CODE",{class:!0});var af=l(Ys);gk=s(af,"intro"),af.forEach(o),Ek=s(Po,"s and "),Zs=n(Po,"CODE",{class:!0});var nf=l(Zs);_k=s(nf,"outro"),nf.forEach(o),bk=s(Po,"s."),Po.forEach(o),Sk=c(h),sn=n(h,"P",{});var lf=l(sn);zs=n(lf,"STRONG",{});var cd=l(zs);Ck=s(cd,"- d "),on=n(cd,"EM",{});var rf=l(on);Ok=s(rf,"(destroy)"),rf.forEach(o),cd.forEach(o),lf.forEach(o),Tk=c(h),Qe=n(h,"P",{});var jn=l(Qe);Dk=s(jn,"Last but not least, the "),Ks=n(jn,"CODE",{class:!0});var cf=l(Ks);Pk=s(cf,"destroy"),cf.forEach(o),Ik=s(jn," function is called when the Svelte component unmounts from the target."),jn.forEach(o),h.forEach(o),xn=c(f),d=n(f,"SECTION",{});var y=l(d);an=n(y,"H3",{});var pf=l(an);Xe=n(pf,"A",{href:!0,id:!0});var hf=l(Xe);Mk=s(hf,"Pieces them together"),hf.forEach(o),pf.forEach(o),Lk=c(y),nn=n(y,"P",{});var kf=l(nn);Rk=s(kf,"With every pieces in mind, let's summarise what we've learned so far:"),kf.forEach(o),Hk=c(y),ln=n(y,"P",{});var vf=l(ln);$k=s(vf,"You create the component into DOM by create a new instance of the Svelte component:"),vf.forEach(o),Nk=c(y),Qs=n(y,"DIV",{class:!0});var kx=l(Qs);kx.forEach(o),Ak=c(y),ae=n(y,"P",{});var Io=l(ae);jk=s(Io,"Which in the constructor of "),Xs=n(Io,"CODE",{class:!0});var df=l(Xs);Gk=s(df,"App"),df.forEach(o),Wk=s(Io,", it calls the "),eo=n(Io,"CODE",{class:!0});var yf=l(eo);Bk=s(yf,"init"),yf.forEach(o),qk=s(Io," function:"),Io.forEach(o),Jk=c(y),to=n(y,"DIV",{class:!0});var vx=l(to);vx.forEach(o),Vk=c(y),ne=n(y,"P",{});var Mo=l(ne);Uk=s(Mo,"Within the "),so=n(Mo,"CODE",{class:!0});var uf=l(so);Fk=s(uf,"init"),uf.forEach(o),Yk=s(Mo," function, the "),oo=n(Mo,"CODE",{class:!0});var ff=l(oo);Zk=s(ff,"instance"),ff.forEach(o),zk=s(Mo," function is called:"),Mo.forEach(o),Kk=c(y),ao=n(y,"DIV",{class:!0});var dx=l(ao);dx.forEach(o),Qk=c(y),le=n(y,"P",{});var Lo=l(le);Xk=s(Lo,"Which returns the "),no=n(Lo,"CODE",{class:!0});var xf=l(no);ev=s(xf,"ctx"),xf.forEach(o),tv=s(Lo,", and it is passed into the "),lo=n(Lo,"CODE",{class:!0});var mf=l(lo);sv=s(mf,"create_fragment"),mf.forEach(o),ov=s(Lo," function:"),Lo.forEach(o),av=c(y),ro=n(y,"DIV",{class:!0});var yx=l(ro);yx.forEach(o),nv=c(y),rn=n(y,"P",{});var wf=l(rn);lv=s(wf,"Which returns instructions on how to create DOM nodes and mount the nodes into DOM:"),wf.forEach(o),rv=c(y),io=n(y,"DIV",{class:!0});var ux=l(io);ux.forEach(o),iv=c(y),et=n(y,"P",{});var Gn=l(et);cv=s(Gn,"But hey, when does the "),co=n(Gn,"CODE",{class:!0});var gf=l(co);pv=s(gf,"fragment.update()"),gf.forEach(o),hv=s(Gn," get called when something has changed?"),Gn.forEach(o),kv=c(y),re=n(y,"P",{});var Ro=l(re);vv=s(Ro,"That my friend, is the secret 3rd argument of the "),po=n(Ro,"CODE",{class:!0});var Ef=l(po);dv=s(Ef,"instance"),Ef.forEach(o),yv=s(Ro," function, "),cn=n(Ro,"STRONG",{});var _f=l(cn);ho=n(_f,"CODE",{class:!0});var bf=l(ho);uv=s(bf,"$$invalidate"),bf.forEach(o),_f.forEach(o),fv=s(Ro,"."),Ro.forEach(o),xv=c(y),tt=n(y,"P",{});var Wn=l(tt);mv=s(Wn,"Whenever you reassign a value to your variable, Svelte will add an extra statement of "),ko=n(Wn,"CODE",{class:!0});var Sf=l(ko);wv=s(Sf,"$$invalidate(...)"),Sf.forEach(o),gv=s(Wn," statement after your re-assignment."),Wn.forEach(o),Ev=c(y),vo=n(y,"P",{});var pd=l(vo);yo=n(pd,"CODE",{class:!0});var Cf=l(yo);_v=s(Cf,"$$invalidate"),Cf.forEach(o),bv=s(pd," takes 2 arguments, the name of the variable, and the new value of the variable:"),pd.forEach(o),Sv=c(y),uo=n(y,"DIV",{class:!0});var fx=l(uo);fx.forEach(o),Cv=c(y),pn=n(y,"P",{});var Of=l(pn);G=n(Of,"EM",{});var xe=l(G);Ov=s(xe,"Of course, if you have consecutive "),fo=n(xe,"CODE",{class:!0});var Tf=l(fo);Tv=s(Tf,"$$invalidate"),Tf.forEach(o),Dv=s(xe," calls, Svelte will batch all the "),xo=n(xe,"CODE",{class:!0});var Df=l(xo);Pv=s(Df,"$$invalidate"),Df.forEach(o),Iv=s(xe," changes, and call "),mo=n(xe,"CODE",{class:!0});var Pf=l(mo);Mv=s(Pf,"fragment.update"),Pf.forEach(o),Lv=s(xe," only once with all the changes."),xe.forEach(o),Of.forEach(o),Rv=c(y),hn=n(y,"P",{});var If=l(hn);Hv=s(If,"Now that you have a clearer picture on how Svelte works, let's go one level deeper, and take a look how the Svelte compiler works."),If.forEach(o),y.forEach(o),mn=c(f),pe=n(f,"SECTION",{});var Bn=l(pe);kn=n(Bn,"H2",{});var Mf=l(kn);st=n(Mf,"A",{href:!0,id:!0});var Lf=l(st);$v=s(Lf,"The Svelte compiler"),Lf.forEach(o),Mf.forEach(o),Nv=c(Bn),vn=n(Bn,"P",{});var Rf=l(vn);Av=s(Rf,"-- WIP --"),Rf.forEach(o),Bn.forEach(o),this.h()},h(){r(O,"href","#draft-what-is-svelte"),r(O,"id","draft-what-is-svelte"),r(lt,"href","/compile-svelte-in-your-head-part-1"),r(we,"href","http://svelte.dev/"),r(we,"rel","nofollow"),r(_e,"href","https://twitter.com/Rich_Harris"),r(_e,"rel","nofollow"),r(be,"href","https://svelte.dev/blog/svelte-3-rethinking-reactivity"),r(be,"rel","nofollow"),r(Oe,"href","https://svelte.dev/tutorial/basics"),r(Oe,"rel","nofollow"),r(De,"href","#writing-vanilla-javascript"),r(De,"id","writing-vanilla-javascript"),r(pt,"id","ex1-decrement"),r(ht,"id","ex1-count"),r(kt,"id","ex1-increment"),Dx(L,"text-align","center"),r(vt,"class","code-section"),r(dt,"class","code-section"),r(yt,"class","code-section"),r(ut,"class","inline"),r(ft,"class","inline"),r(xt,"class","code-section"),r(mt,"class","inline"),r(wt,"class","inline"),r(gt,"class","inline"),r(ie,"href","https://reactjs.org/docs/react-dom.html"),r(ie,"rel","nofollow"),r(Et,"class","inline"),r(Me,"href","https://github.com/acdlite/react-fiber-architecture"),r(Me,"rel","nofollow"),r(_t,"class","inline"),r(bt,"class","inline"),r(St,"class","inline"),r(Le,"href","https://github.com/facebook/react/blob/b8d079b41372290aa1846e3a780d85d05ab8ffc1/packages/react-dom/src/client/ReactDOMComponent.js#L372-L377"),r(Le,"rel","nofollow"),r(Ct,"class","inline"),r(Ot,"class","inline"),r(Tt,"class","inline"),r(Dt,"class","inline"),r(ce,"href","https://github.com/facebook/react/blob/b8d079b41372290aa1846e3a780d85d05ab8ffc1/packages/react-dom/src/client/ReactDOMComponent.js#L386-L388"),r(ce,"rel","nofollow"),r(Ne,"href","https://svelte.dev/repl/2ed88da423f24cd980dad77e8a07e248?version=3.12.1"),r(Ne,"rel","nofollow"),r(Pt,"class","code-section"),r(Ge,"href","https://svelte.dev/repl/2ed88da423f24cd980dad77e8a07e248?version=3.12.1"),r(Ge,"rel","nofollow"),r(It,"class","inline"),r(Be,"href","#conceptually-how-does-compiled-svelte-component-work"),r(Be,"id","conceptually-how-does-compiled-svelte-component-work"),r(Mt,"class","code-section"),r(Lt,"class","code-section"),r(Rt,"class","inline"),r(Ht,"class","inline"),r($t,"class","code-section"),r(qe,"href","#how-the-compiled-svelte-component-works"),r(qe,"id","how-the-compiled-svelte-component-works"),r(Nt,"class","inline"),r(At,"class","inline"),r(jt,"class","inline"),r(Gt,"class","inline"),r(Ve,"href","https://svelte.dev/repl"),r(Ve,"rel","nofollow"),r(Wt,"class","inline"),r(Bt,"class","inline"),r(qt,"class","inline"),r(Jt,"class","inline"),r(Vt,"class","inline"),r(Ut,"class","code-section"),r(Ft,"class","inline"),r(Yt,"class","code-section"),r(Zt,"class","inline"),r(zt,"class","inline"),r(Kt,"class","inline"),r(Qt,"class","inline"),r(Xt,"class","inline"),r(es,"class","inline"),r(ss,"class","inline"),r(os,"class","inline"),r(as,"class","inline"),r(ns,"class","inline"),r(ls,"class","inline"),r(rs,"class","inline"),r(is,"class","inline"),r(cs,"class","inline"),r(ks,"class","inline"),r(ys,"class","inline"),r(fs,"class","inline"),r(Ye,"href","https://svelte.dev/repl/hello-world"),r(Ye,"rel","nofollow"),r(ws,"class","inline"),r(Ke,"href","https://svelte.dev/repl/d831c0e1387d4105b9bf4cbf6e321477?version=3.12.1"),r(Ke,"rel","nofollow"),r(Es,"class","inline"),r(_s,"class","inline"),r(bs,"class","inline"),r(Cs,"class","inline"),r(Os,"class","inline"),r(Ts,"class","inline"),r(Ds,"class","inline"),r(Ps,"class","inline"),r(Is,"class","code-section"),r(Rs,"class","inline"),r(Hs,"class","inline"),r(Ns,"class","inline"),r(As,"class","inline"),r(js,"class","inline"),r(Ws,"class","inline"),r(Bs,"class","inline"),r(Ys,"class","inline"),r(Zs,"class","inline"),r(Ks,"class","inline"),r(Xe,"href","#pieces-them-together"),r(Xe,"id","pieces-them-together"),r(Qs,"class","code-section"),r(Xs,"class","inline"),r(eo,"class","inline"),r(to,"class","code-section"),r(so,"class","inline"),r(oo,"class","inline"),r(ao,"class","code-section"),r(no,"class","inline"),r(lo,"class","inline"),r(ro,"class","code-section"),r(io,"class","code-section"),r(co,"class","inline"),r(po,"class","inline"),r(ho,"class","inline"),r(ko,"class","inline"),r(yo,"class","inline"),r(uo,"class","code-section"),r(fo,"class","inline"),r(xo,"class","inline"),r(mo,"class","inline"),r(st,"href","#the-svelte-compiler"),r(st,"id","the-svelte-compiler")},m(f,x){W(f,u,x),e(u,M),e(M,O),e(O,me),e(u,w),e(u,b),e(b,nt),e(b,lt),e(lt,qn),e(b,Jn),e(u,Vn),e(u,rt),e(rt,we),e(we,Un),e(rt,Fn),e(u,Yn),e(u,Ho),e(Ho,Zn),e(u,zn),e(u,$o),e($o,Kn),e(u,Qn),e(u,ge),e(ge,Ee),e(Ee,No),e(No,Ao),e(Ao,Xn),e(Ee,el),e(Ee,F),e(F,tl),e(F,_e),e(_e,sl),e(F,ol),e(F,be),e(be,al),e(F,nl),e(ge,ll),e(ge,Se),e(Se,jo),e(jo,Go),e(Go,rl),e(Se,il),e(Se,Ce),e(Ce,cl),e(Ce,Oe),e(Oe,pl),e(Ce,hl),e(u,kl),e(u,Wo),e(Wo,vl),e(u,dl),e(u,Te),e(Te,it),e(it,yl),e(it,Bo),e(Bo,qo),e(qo,ul),e(Te,fl),e(Te,ct),e(ct,xl),e(ct,Jo),e(Jo,dn),W(f,yn,x),W(f,k,x),e(k,Vo),e(Vo,De),e(De,ml),e(k,wl),e(k,Uo),e(Uo,gl),e(k,El),e(k,Fo),e(Fo,_l),e(k,bl),e(k,L),e(L,pt),e(pt,Sl),e(L,Cl),e(L,ht),e(ht,Ol),e(L,Tl),e(L,kt),e(kt,Dl),e(L,Pl),e(L,Yo),e(Yo,Il),e(k,Ml),e(k,Zo),e(Zo,Ll),e(k,Rl),e(k,zo),e(zo,Ko),e(Ko,Hl),e(k,$l),e(k,Qo),e(Qo,Nl),e(k,Al),e(k,vt),vt.innerHTML=Af,e(k,jl),e(k,Xo),e(Xo,Gl),e(k,Wl),e(k,dt),dt.innerHTML=jf,e(k,Bl),e(k,ea),e(ea,ta),e(ta,ql),e(k,Jl),e(k,R),e(R,Vl),e(R,sa),e(sa,Ul),e(R,Fl),e(R,oa),e(oa,Yl),e(R,Zl),e(R,aa),e(aa,zl),e(R,Kl),e(k,Ql),e(k,na),e(na,Xl),e(k,er),e(k,yt),yt.innerHTML=Gf,e(k,tr),e(k,la),e(la,sr),e(k,or),e(k,ra),e(ra,Y),e(Y,ar),e(Y,ut),e(ut,nr),e(Y,lr),e(Y,ft),e(ft,rr),e(Y,ir),e(k,cr),e(k,Pe),e(Pe,pr),e(Pe,ia),e(ia,hr),e(Pe,kr),e(k,vr),e(k,ca),e(ca,dr),e(k,yr),e(k,pa),e(pa,Ie),e(Ie,ur),e(Ie,ha),e(ha,fr),e(Ie,xr),e(k,mr),e(k,ka),e(ka,wr),e(k,gr),e(k,xt),xt.innerHTML=Wf,e(k,Er),e(k,B),e(B,_r),e(B,mt),e(mt,br),e(B,Sr),e(B,wt),e(wt,Cr),e(B,Or),e(B,ie),e(ie,gt),e(gt,Tr),e(ie,Dr),e(k,Pr),e(k,T),e(T,Ir),e(T,Et),e(Et,Mr),e(T,Lr),e(T,Me),e(Me,Rr),e(T,Hr),e(T,_t),e(_t,$r),e(T,Nr),e(T,bt),e(bt,Ar),e(T,jr),e(k,Gr),e(k,va),e(va,Wr),e(k,Br),e(k,E),e(E,qr),e(E,St),e(St,Jr),e(E,Vr),e(E,Le),e(Le,Ur),e(E,Fr),e(E,Ct),e(Ct,Yr),e(E,Zr),e(E,Ot),e(Ot,zr),e(E,Kr),e(E,Tt),e(Tt,Qr),e(E,Xr),e(E,ce),e(ce,ei),e(ce,Dt),e(Dt,ti),e(E,si),e(k,oi),e(k,Re),e(Re,ai),e(Re,da),e(da,ni),e(Re,li),e(k,ri),e(k,He),e(He,ii),e(He,ya),e(ya,ci),e(He,pi),e(k,hi),e(k,$e),e($e,ki),e($e,Ne),e(Ne,vi),e($e,di),e(k,yi),e(k,Pt),Pt.innerHTML=Bf,e(k,ui),e(k,Ae),e(Ae,ua),e(ua,fi),e(Ae,xi),e(Ae,je),e(je,mi),e(je,Ge),e(Ge,wi),e(je,gi),e(k,Ei),e(k,We),e(We,_i),e(We,It),e(It,bi),e(We,Si),e(k,Ci),e(k,fa),e(fa,Oi),W(f,un,x),W(f,m,x),e(m,xa),e(xa,Be),e(Be,Ti),e(m,Di),e(m,ma),e(ma,Pi),e(m,Ii),e(m,wa),e(wa,Mi),e(m,Li),e(m,Mt),Mt.innerHTML=qf,e(m,Ri),e(m,ga),e(ga,Hi),e(m,$i),e(m,Lt),Lt.innerHTML=Jf,e(m,Ni),e(m,Z),e(Z,Ai),e(Z,Rt),e(Rt,ji),e(Z,Gi),e(Z,Ht),e(Ht,Wi),e(Z,Bi),e(m,qi),e(m,Ea),e(Ea,Ji),e(m,Vi),e(m,$t),$t.innerHTML=Vf,W(f,fn,x),W(f,p,x),e(p,_a),e(_a,qe),e(qe,Ui),e(p,Fi),e(p,D),e(D,Yi),e(D,Nt),e(Nt,Zi),e(D,zi),e(D,At),e(At,Ki),e(D,Qi),e(D,jt),e(jt,Xi),e(D,ec),e(D,Gt),e(Gt,tc),e(D,sc),e(p,oc),e(p,Je),e(Je,ac),e(Je,Ve),e(Ve,nc),e(Je,lc),e(p,rc),e(p,H),e(H,ic),e(H,Wt),e(Wt,cc),e(H,pc),e(H,Bt),e(Bt,hc),e(H,kc),e(H,qt),e(qt,vc),e(H,dc),e(p,yc),e(p,ba),e(ba,uc),e(p,fc),e(p,z),e(z,Sa),e(Sa,Jt),e(Jt,xc),e(z,mc),e(z,Ca),e(Ca,Vt),e(Vt,wc),e(z,gc),e(z,Oa),e(Oa,Ec),e(p,_c),e(p,Ut),Ut.innerHTML=Uf,e(p,bc),e(p,Ta),e(Ta,Sc),e(p,Cc),e(p,Da),e(Da,Pa),e(Pa,Oc),e(p,Tc),e(p,Ue),e(Ue,Dc),e(Ue,Ft),e(Ft,Pc),e(Ue,Ic),e(p,Mc),e(p,Ia),e(Ia,Lc),e(p,Rc),e(p,Yt),Yt.innerHTML=Ff,e(p,Hc),e(p,P),e(P,$c),e(P,Zt),e(Zt,Nc),e(P,Ac),e(P,zt),e(zt,jc),e(P,Gc),e(P,Kt),e(Kt,Wc),e(P,Bc),e(P,Qt),e(Qt,qc),e(P,Jc),e(p,Vc),e(p,K),e(K,Uc),e(K,Xt),e(Xt,Fc),e(K,Yc),e(K,es),e(es,Zc),e(K,zc),e(p,Kc),e(p,Ma),e(Ma,ts),e(ts,Qc),e(ts,ss),e(ss,Xc),e(p,ep),e(p,Q),e(Q,tp),e(Q,os),e(os,sp),e(Q,op),e(Q,as),e(as,ap),e(Q,np),e(p,lp),e(p,$),e($,rp),e($,ns),e(ns,ip),e($,cp),e($,ls),e(ls,pp),e($,hp),e($,rs),e(rs,kp),e($,vp),e(p,dp),e(p,yp),e(p,up),e(p,X),e(X,fp),e(X,is),e(is,xp),e(X,mp),e(X,cs),e(cs,wp),e(X,gp),e(p,Ep),e(p,N),e(N,ps),e(ps,hs),e(hs,ks),e(ks,_p),e(hs,bp),e(ps,La),e(La,Ra),e(Ra,Sp),e(N,Cp),e(N,vs),e(vs,ds),e(ds,ys),e(ys,Op),e(ds,Tp),e(vs,Ha),e(Ha,$a),e($a,Dp),e(N,Pp),e(N,us),e(us,Na),e(Na,Ip),e(us,ee),e(ee,Aa),e(Aa,Mp),e(ee,Lp),e(ee,Fe),e(Fe,Rp),e(Fe,fs),e(fs,Hp),e(Fe,$p),e(ee,Np),e(ee,xs),e(xs,Ye),e(Ye,Ap),e(xs,jp),e(N,Gp),e(N,ms),e(ms,ja),e(ja,Wp),e(ms,Ze),e(Ze,ze),e(ze,Bp),e(ze,ws),e(ws,qp),e(ze,Jp),e(Ze,Vp),e(Ze,gs),e(gs,Ke),e(Ke,Up),e(gs,Fp),e(p,Yp),e(p,Zp),e(p,zp),e(p,A),e(A,Kp),e(A,Es),e(Es,Qp),e(A,Xp),e(A,_s),e(_s,eh),e(A,th),e(A,bs),e(bs,sh),e(A,oh),e(p,ah),e(p,Ga),e(Ga,Ss),e(Ss,nh),e(Ss,Cs),e(Cs,lh),e(p,rh),e(p,I),e(I,ih),e(I,Os),e(Os,ch),e(I,ph),e(I,Ts),e(Ts,hh),e(I,kh),e(I,Ds),e(Ds,vh),e(I,dh),e(I,Ps),e(Ps,yh),e(I,uh),e(p,fh),e(p,Is),Is.innerHTML=Yf,e(p,xh),e(p,Wa),e(Wa,mh),e(p,wh),e(p,Ba),e(Ba,Ms),e(Ms,gh),e(Ms,qa),e(qa,Eh),e(p,_h),e(p,Ja),e(Ja,bh),e(p,Sh),e(p,Va),e(Va,Ls),e(Ls,Ch),e(Ls,Ua),e(Ua,Oh),e(p,Th),e(p,te),e(te,Dh),e(te,Rs),e(Rs,Ph),e(te,Ih),e(te,Hs),e(Hs,Mh),e(te,Lh),e(p,Rh),e(p,Fa),e(Fa,$s),e($s,Hh),e($s,Ya),e(Ya,$h),e(p,Nh),e(p,j),e(j,Ah),e(j,Ns),e(Ns,jh),e(j,Gh),e(j,As),e(As,Wh),e(j,Bh),e(j,js),e(js,qh),e(j,Jh),e(p,Vh),e(p,Za),e(Za,Gs),e(Gs,Uh),e(Gs,za),e(za,Fh),e(p,Yh),e(p,se),e(se,Zh),e(se,Ws),e(Ws,zh),e(se,Kh),e(se,Bs),e(Bs,Qh),e(se,Xh),e(p,ek),e(p,_),e(_,qs),e(qs,tk),e(qs,Ka),e(Ka,sk),e(_,ok),e(_,ak),e(_,Js),e(Js,nk),e(Js,Qa),e(Qa,lk),e(_,rk),e(_,ik),e(_,Vs),e(Vs,ck),e(Vs,Xa),e(Xa,pk),e(_,hk),e(_,kk),e(_,Us),e(Us,vk),e(Us,en),e(en,dk),e(_,yk),e(_,uk),e(_,Fs),e(Fs,fk),e(Fs,tn),e(tn,xk),e(p,mk),e(p,oe),e(oe,wk),e(oe,Ys),e(Ys,gk),e(oe,Ek),e(oe,Zs),e(Zs,_k),e(oe,bk),e(p,Sk),e(p,sn),e(sn,zs),e(zs,Ck),e(zs,on),e(on,Ok),e(p,Tk),e(p,Qe),e(Qe,Dk),e(Qe,Ks),e(Ks,Pk),e(Qe,Ik),W(f,xn,x),W(f,d,x),e(d,an),e(an,Xe),e(Xe,Mk),e(d,Lk),e(d,nn),e(nn,Rk),e(d,Hk),e(d,ln),e(ln,$k),e(d,Nk),e(d,Qs),Qs.innerHTML=Zf,e(d,Ak),e(d,ae),e(ae,jk),e(ae,Xs),e(Xs,Gk),e(ae,Wk),e(ae,eo),e(eo,Bk),e(ae,qk),e(d,Jk),e(d,to),to.innerHTML=zf,e(d,Vk),e(d,ne),e(ne,Uk),e(ne,so),e(so,Fk),e(ne,Yk),e(ne,oo),e(oo,Zk),e(ne,zk),e(d,Kk),e(d,ao),ao.innerHTML=Kf,e(d,Qk),e(d,le),e(le,Xk),e(le,no),e(no,ev),e(le,tv),e(le,lo),e(lo,sv),e(le,ov),e(d,av),e(d,ro),ro.innerHTML=Qf,e(d,nv),e(d,rn),e(rn,lv),e(d,rv),e(d,io),io.innerHTML=Xf,e(d,iv),e(d,et),e(et,cv),e(et,co),e(co,pv),e(et,hv),e(d,kv),e(d,re),e(re,vv),e(re,po),e(po,dv),e(re,yv),e(re,cn),e(cn,ho),e(ho,uv),e(re,fv),e(d,xv),e(d,tt),e(tt,mv),e(tt,ko),e(ko,wv),e(tt,gv),e(d,Ev),e(d,vo),e(vo,yo),e(yo,_v),e(vo,bv),e(d,Sv),e(d,uo),uo.innerHTML=ex,e(d,Cv),e(d,pn),e(pn,G),e(G,Ov),e(G,fo),e(fo,Tv),e(G,Dv),e(G,xo),e(xo,Pv),e(G,Iv),e(G,mo),e(mo,Mv),e(G,Lv),e(d,Rv),e(d,hn),e(hn,Hv),W(f,mn,x),W(f,pe,x),e(pe,kn),e(kn,st),e(st,$v),e(pe,Nv),e(pe,vn),e(vn,Av)},p:Px,d(f){f&&o(u),f&&o(yn),f&&o(k),f&&o(un),f&&o(m),f&&o(fn),f&&o(p),f&&o(xn),f&&o(d),f&&o(mn),f&&o(pe)}}}function Rx(at){let u,M;const O=[at[0],Nf];let me={$$slots:{default:[Lx]},$$scope:{ctx:at}};for(let w=0;w<O.length;w+=1)me=hd(me,O[w]);return u=new Ix({props:me}),{c(){gx(u.$$.fragment)},l(w){Ex(u.$$.fragment,w)},m(w,b){_x(u,w,b),M=!0},p(w,[b]){const nt=b&1?bx(O,[b&1&&Hf(w[0]),b&0&&Hf(Nf)]):{};b&2&&(nt.$$scope={dirty:b,ctx:w}),u.$set(nt)},i(w){M||(Sx(u.$$.fragment,w),M=!0)},o(w){Cx(u.$$.fragment,w),M=!1},d(w){Ox(u,w)}}}const Nf={title:"Deep dive into Svelte",description:"wip",date:"2019-11-09T08:00:00Z",lastUpdated:"2019-11-09T08:00:00Z",wip:!0,label:"blog",tableOfContents:[{link:"writing-vanilla-javascript",title:"Writing vanilla JavaScript"},{link:"conceptually-how-does-compiled-svelte-component-work",title:"Conceptually, how does compiled Svelte component work?"},{link:"how-the-compiled-svelte-component-works",title:"How the compiled Svelte component works",nested:[{link:"pieces-them-together",title:"Pieces them together"}]},{link:"the-svelte-compiler",title:"The Svelte compiler"}]};function Hx(at,u,M){return Tx("blog",{image:Mx}),at.$$set=O=>{M(0,u=hd(hd({},u),$f(O)))},u=$f(u),[u]}class Bx extends xx{constructor(u){super();mx(this,u,Hx,Rx,wx,{})}}export{Bx as default,Nf as metadata};
