import{S as ks,i as ys,s as _s,C as No,w as ms,x as ws,y as bs,z as Es,A as is,q as xs,o as gs,B as js,r as Os,Y as cs,e as a,t,k,c as r,a as n,h as l,d as s,m as y,b as p,g as c,H as o,J as Ds}from"../../chunks/vendor-9710682b.js";import{B as Cs}from"../../chunks/BlogLayout-9a08402e.js";import{_ as Ps}from"../../chunks/twitter-card-image-a57df29d.js";import"../../chunks/stores-f9c97213.js";import"../../chunks/TableOfContent-2fa6a472.js";/* empty css                                */function Rs(N){let f,x,g,b,d=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> a </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">foobar</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> b </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">8</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,m,E,Pe,T,Re,Te,ie,H,fs=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">()&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">foobar</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ce,u,se,He,Se,U,$e,Ne,G,Ue,Ge,A,Ae,Be,B,Ie,Le,I,Me,Ve,L,qe,Fe,te,We,ze,pe,v,Je,M,Ye,Ze,V,Ke,Qe,le,Xe,eo,q,oo,so,F,to,lo,W,ao,ro,fe,ue,de,D,no,z,io,co,ve,j,po,ae,fo,uo,J,vo,ho,he,ke,ye,w,ko,re,yo,_o,Y,mo,wo,Z,bo,Eo,_e,C,xo,K,go,jo,me,S,us=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// before uglify</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> a </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*@__PURE__*/</span><span style="color: var(--shiki-token-function)">foobar</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> b </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">8</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// after uglify</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">()&#123;</span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,we,P,Oo,Q,Do,Co,be,Ee,xe,X,Po,ge,O,Ro,ne,To,Ho,$,So,$o;return{c(){f=a("p"),x=t("Imagine you have the code below:"),g=k(),b=a("div"),m=k(),E=a("p"),Pe=t("after passing this code through "),T=a("a"),Re=t("uglify-js"),Te=t(", you will get the code below:"),ie=k(),H=a("div"),ce=k(),u=a("p"),se=a("strong"),He=t("uglify-js"),Se=t(" will do dead code removal, ie: it will remove code that will not affect the program results. Since we defined "),U=a("code"),$e=t("a"),Ne=t(" and "),G=a("code"),Ue=t("b"),Ge=t(" in the function "),A=a("code"),Ae=t("foo"),Be=t(" and we are not using "),B=a("code"),Ie=t("a"),Le=t(" and "),I=a("code"),Me=t("b"),Ve=t(" within the "),L=a("code"),qe=t("foo"),Fe=t(", "),te=a("strong"),We=t("uglify-js"),ze=t(" safely removes it from the uglified code."),pe=k(),v=a("p"),Je=t("However, if you can see from the uglified code, "),M=a("code"),Ye=t("foobar()"),Ze=t(" is preserved. This is because calling "),V=a("code"),Ke=t("foobar"),Qe=t(" may have side effects on the program, so "),le=a("strong"),Xe=t("uglify-js"),eo=t(" preserves foobar(). But since we do not need the return value of "),q=a("code"),oo=t("foobar()"),so=t(", which is assigned to "),F=a("code"),to=t("a"),lo=t(", "),W=a("code"),ao=t("a"),ro=t(" got removed by uglify-js."),fe=k(),ue=a("hr"),de=k(),D=a("p"),no=t("What if we know that "),z=a("code"),io=t("foobar()"),co=t(" will not caused any side effects?"),ve=k(),j=a("p"),po=t("How do we tell "),ae=a("strong"),fo=t("uglify-js"),uo=t(" that if we are not using the return value from "),J=a("code"),vo=t("foobar()"),ho=t(", please remove it as well?"),he=k(),ke=a("hr"),ye=k(),w=a("p"),ko=t("Turns out that "),re=a("strong"),yo=t("uglify-js"),_o=t(" will treat a function call as \u201Cpure\u201D if there is a comment annotation "),Y=a("code"),mo=t("/*@__PURE__*/"),wo=t(" or "),Z=a("code"),bo=t("/*#__PURE__*/"),Eo=t(" immediately precedes the call."),_e=k(),C=a("p"),xo=t("For example: "),K=a("code"),go=t("/* @__PURE__ */ foobar()"),jo=t(" !"),me=k(),S=a("div"),we=k(),P=a("p"),Oo=t("Note that now "),Q=a("code"),Do=t("foobar()"),Co=t(" is being removed!"),be=k(),Ee=a("hr"),xe=k(),X=a("p"),Po=t("So, how is this useful?"),ge=k(),O=a("p"),Ro=t("As a library author, you can write a babel plugin to mark your function to be pure, so that "),ne=a("strong"),To=t("uglify-js"),Ho=t(" can drop the function call if the return value is not being used in the code. (There is a "),$=a("a"),So=t("util from babel"),$o=t(" to do just the job of marking function as pure \u{1F60E})"),this.h()},l(e){f=r(e,"P",{});var i=n(f);x=l(i,"Imagine you have the code below:"),i.forEach(s),g=y(e),b=r(e,"DIV",{class:!0});var ds=n(b);ds.forEach(s),m=y(e),E=r(e,"P",{});var je=n(E);Pe=l(je,"after passing this code through "),T=r(je,"A",{href:!0,rel:!0});var Uo=n(T);Re=l(Uo,"uglify-js"),Uo.forEach(s),Te=l(je,", you will get the code below:"),je.forEach(s),ie=y(e),H=r(e,"DIV",{class:!0});var vs=n(H);vs.forEach(s),ce=y(e),u=r(e,"P",{});var h=n(u);se=r(h,"STRONG",{});var Go=n(se);He=l(Go,"uglify-js"),Go.forEach(s),Se=l(h," will do dead code removal, ie: it will remove code that will not affect the program results. Since we defined "),U=r(h,"CODE",{class:!0});var Ao=n(U);$e=l(Ao,"a"),Ao.forEach(s),Ne=l(h," and "),G=r(h,"CODE",{class:!0});var Bo=n(G);Ue=l(Bo,"b"),Bo.forEach(s),Ge=l(h," in the function "),A=r(h,"CODE",{class:!0});var Io=n(A);Ae=l(Io,"foo"),Io.forEach(s),Be=l(h," and we are not using "),B=r(h,"CODE",{class:!0});var Lo=n(B);Ie=l(Lo,"a"),Lo.forEach(s),Le=l(h," and "),I=r(h,"CODE",{class:!0});var Mo=n(I);Me=l(Mo,"b"),Mo.forEach(s),Ve=l(h," within the "),L=r(h,"CODE",{class:!0});var Vo=n(L);qe=l(Vo,"foo"),Vo.forEach(s),Fe=l(h,", "),te=r(h,"STRONG",{});var qo=n(te);We=l(qo,"uglify-js"),qo.forEach(s),ze=l(h," safely removes it from the uglified code."),h.forEach(s),pe=y(e),v=r(e,"P",{});var _=n(v);Je=l(_,"However, if you can see from the uglified code, "),M=r(_,"CODE",{class:!0});var Fo=n(M);Ye=l(Fo,"foobar()"),Fo.forEach(s),Ze=l(_," is preserved. This is because calling "),V=r(_,"CODE",{class:!0});var Wo=n(V);Ke=l(Wo,"foobar"),Wo.forEach(s),Qe=l(_," may have side effects on the program, so "),le=r(_,"STRONG",{});var zo=n(le);Xe=l(zo,"uglify-js"),zo.forEach(s),eo=l(_," preserves foobar(). But since we do not need the return value of "),q=r(_,"CODE",{class:!0});var Jo=n(q);oo=l(Jo,"foobar()"),Jo.forEach(s),so=l(_,", which is assigned to "),F=r(_,"CODE",{class:!0});var Yo=n(F);to=l(Yo,"a"),Yo.forEach(s),lo=l(_,", "),W=r(_,"CODE",{class:!0});var Zo=n(W);ao=l(Zo,"a"),Zo.forEach(s),ro=l(_," got removed by uglify-js."),_.forEach(s),fe=y(e),ue=r(e,"HR",{}),de=y(e),D=r(e,"P",{});var Oe=n(D);no=l(Oe,"What if we know that "),z=r(Oe,"CODE",{class:!0});var Ko=n(z);io=l(Ko,"foobar()"),Ko.forEach(s),co=l(Oe," will not caused any side effects?"),Oe.forEach(s),ve=y(e),j=r(e,"P",{});var ee=n(j);po=l(ee,"How do we tell "),ae=r(ee,"STRONG",{});var Qo=n(ae);fo=l(Qo,"uglify-js"),Qo.forEach(s),uo=l(ee," that if we are not using the return value from "),J=r(ee,"CODE",{class:!0});var Xo=n(J);vo=l(Xo,"foobar()"),Xo.forEach(s),ho=l(ee,", please remove it as well?"),ee.forEach(s),he=y(e),ke=r(e,"HR",{}),ye=y(e),w=r(e,"P",{});var R=n(w);ko=l(R,"Turns out that "),re=r(R,"STRONG",{});var es=n(re);yo=l(es,"uglify-js"),es.forEach(s),_o=l(R," will treat a function call as \u201Cpure\u201D if there is a comment annotation "),Y=r(R,"CODE",{class:!0});var os=n(Y);mo=l(os,"/*@__PURE__*/"),os.forEach(s),wo=l(R," or "),Z=r(R,"CODE",{class:!0});var ss=n(Z);bo=l(ss,"/*#__PURE__*/"),ss.forEach(s),Eo=l(R," immediately precedes the call."),R.forEach(s),_e=y(e),C=r(e,"P",{});var De=n(C);xo=l(De,"For example: "),K=r(De,"CODE",{class:!0});var ts=n(K);go=l(ts,"/* @__PURE__ */ foobar()"),ts.forEach(s),jo=l(De," !"),De.forEach(s),me=y(e),S=r(e,"DIV",{class:!0});var hs=n(S);hs.forEach(s),we=y(e),P=r(e,"P",{});var Ce=n(P);Oo=l(Ce,"Note that now "),Q=r(Ce,"CODE",{class:!0});var ls=n(Q);Do=l(ls,"foobar()"),ls.forEach(s),Co=l(Ce," is being removed!"),Ce.forEach(s),be=y(e),Ee=r(e,"HR",{}),xe=y(e),X=r(e,"P",{});var as=n(X);Po=l(as,"So, how is this useful?"),as.forEach(s),ge=y(e),O=r(e,"P",{});var oe=n(O);Ro=l(oe,"As a library author, you can write a babel plugin to mark your function to be pure, so that "),ne=r(oe,"STRONG",{});var rs=n(ne);To=l(rs,"uglify-js"),rs.forEach(s),Ho=l(oe," can drop the function call if the return value is not being used in the code. (There is a "),$=r(oe,"A",{href:!0,rel:!0});var ns=n($);So=l(ns,"util from babel"),ns.forEach(s),$o=l(oe," to do just the job of marking function as pure \u{1F60E})"),oe.forEach(s),this.h()},h(){p(b,"class","code-section"),p(T,"href","https://www.npmjs.com/package/uglify-js"),p(T,"rel","nofollow"),p(H,"class","code-section"),p(U,"class","inline"),p(G,"class","inline"),p(A,"class","inline"),p(B,"class","inline"),p(I,"class","inline"),p(L,"class","inline"),p(M,"class","inline"),p(V,"class","inline"),p(q,"class","inline"),p(F,"class","inline"),p(W,"class","inline"),p(z,"class","inline"),p(J,"class","inline"),p(Y,"class","inline"),p(Z,"class","inline"),p(K,"class","inline"),p(S,"class","code-section"),p(Q,"class","inline"),p($,"href","https://babeljs.io/docs/en/next/babel-helper-annotate-as-pure.html"),p($,"rel","nofollow")},m(e,i){c(e,f,i),o(f,x),c(e,g,i),c(e,b,i),b.innerHTML=d,c(e,m,i),c(e,E,i),o(E,Pe),o(E,T),o(T,Re),o(E,Te),c(e,ie,i),c(e,H,i),H.innerHTML=fs,c(e,ce,i),c(e,u,i),o(u,se),o(se,He),o(u,Se),o(u,U),o(U,$e),o(u,Ne),o(u,G),o(G,Ue),o(u,Ge),o(u,A),o(A,Ae),o(u,Be),o(u,B),o(B,Ie),o(u,Le),o(u,I),o(I,Me),o(u,Ve),o(u,L),o(L,qe),o(u,Fe),o(u,te),o(te,We),o(u,ze),c(e,pe,i),c(e,v,i),o(v,Je),o(v,M),o(M,Ye),o(v,Ze),o(v,V),o(V,Ke),o(v,Qe),o(v,le),o(le,Xe),o(v,eo),o(v,q),o(q,oo),o(v,so),o(v,F),o(F,to),o(v,lo),o(v,W),o(W,ao),o(v,ro),c(e,fe,i),c(e,ue,i),c(e,de,i),c(e,D,i),o(D,no),o(D,z),o(z,io),o(D,co),c(e,ve,i),c(e,j,i),o(j,po),o(j,ae),o(ae,fo),o(j,uo),o(j,J),o(J,vo),o(j,ho),c(e,he,i),c(e,ke,i),c(e,ye,i),c(e,w,i),o(w,ko),o(w,re),o(re,yo),o(w,_o),o(w,Y),o(Y,mo),o(w,wo),o(w,Z),o(Z,bo),o(w,Eo),c(e,_e,i),c(e,C,i),o(C,xo),o(C,K),o(K,go),o(C,jo),c(e,me,i),c(e,S,i),S.innerHTML=us,c(e,we,i),c(e,P,i),o(P,Oo),o(P,Q),o(Q,Do),o(P,Co),c(e,be,i),c(e,Ee,i),c(e,xe,i),c(e,X,i),o(X,Po),c(e,ge,i),c(e,O,i),o(O,Ro),o(O,ne),o(ne,To),o(O,Ho),o(O,$),o($,So),o(O,$o)},p:Ds,d(e){e&&s(f),e&&s(g),e&&s(b),e&&s(m),e&&s(E),e&&s(ie),e&&s(H),e&&s(ce),e&&s(u),e&&s(pe),e&&s(v),e&&s(fe),e&&s(ue),e&&s(de),e&&s(D),e&&s(ve),e&&s(j),e&&s(he),e&&s(ke),e&&s(ye),e&&s(w),e&&s(_e),e&&s(C),e&&s(me),e&&s(S),e&&s(we),e&&s(P),e&&s(be),e&&s(Ee),e&&s(xe),e&&s(X),e&&s(ge),e&&s(O)}}}function Ts(N){let f,x;const g=[N[0],ps];let b={$$slots:{default:[Rs]},$$scope:{ctx:N}};for(let d=0;d<g.length;d+=1)b=No(b,g[d]);return f=new Cs({props:b}),{c(){ms(f.$$.fragment)},l(d){ws(f.$$.fragment,d)},m(d,m){bs(f,d,m),x=!0},p(d,[m]){const E=m&1?Es(g,[m&1&&is(d[0]),m&0&&is(ps)]):{};m&2&&(E.$$scope={dirty:m,ctx:d}),f.$set(E)},i(d){x||(xs(f.$$.fragment,d),x=!0)},o(d){gs(f.$$.fragment,d),x=!1},d(d){js(f,d)}}}const ps={title:"Dead-code elimination",date:"2018-10-24T08:00:00Z",description:"How to hint uglify-js that your function is pure",label:"blog"};function Hs(N,f,x){return Os("blog",{image:Ps}),N.$$set=g=>{x(0,f=No(No({},f),cs(g)))},f=cs(f),[f]}class Bs extends ks{constructor(f){super();ys(this,f,Hs,Ts,_s,{})}}export{Bs as default,ps as metadata};
