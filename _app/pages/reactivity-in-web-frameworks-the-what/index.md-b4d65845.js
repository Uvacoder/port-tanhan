import{S as dn,i as vn,s as yn,C as Ba,w as un,x as fn,y as wn,z as mn,A as en,q as xn,o as gn,B as _n,r as bn,Y as sn,e as s,t as n,k as i,c as a,a as o,h as r,d as e,m as p,b as k,g as P,H as t,J as En}from"../../chunks/vendor-da4388d4.js";import{B as On}from"../../chunks/BlogLayout-14cfab6f.js";import{_ as Pn}from"../../chunks/twitter-card-image-a57df29d.js";import"../../chunks/stores-1fad7c36.js";import"../../chunks/ldjson-b0805387.js";/* empty css                                */function Tn(Y){let l,_,m,M,d,x,Z,xe,vt,ge,_e,yt,be,Ee,A,ut,Oe,Pe,ft,Te,Ie,R,Se,K,Ce,De,Ne,Q,on=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">App</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">counter</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">setCounter</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">React</span><span style="color: var(--shiki-token-function)">.useState</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &lt;</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">onClick</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">&#123;() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">setCounter</span><span style="color: var(--shiki-color-text)">(counter </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> counter </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">)&#125;&gt;-&lt;/</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &lt;</span><span style="color: var(--shiki-token-string-expression)">span</span><span style="color: var(--shiki-color-text)">&gt;&#123;counter&#125;&lt;/</span><span style="color: var(--shiki-token-string-expression)">span</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &lt;</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">onClick</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">&#123;() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">setCounter</span><span style="color: var(--shiki-color-text)">(counter </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> counter </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">)&#125;&gt;+&lt;/</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  );</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ue,wt,Me,Ae,mt,X,Re,tt,We,Le,W,He,L,Ge,qe,$e,xt,et,Be,H,Fe,st,je,Je,at,Ve,ot,ze,Ye,gt,nt,Ze,rt,Ke,Qe,G,Xe,lt,ts,es,ss,_t,as,os,bt,ns,rs,q,ls,Et,is,ps,cs,Ot,hs,ks,it,nn=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)">(root</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> applicationState) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// destroy everything</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">root</span><span style="color: var(--shiki-color-text)">.innerHTML </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...and rebuild</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newElement</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">buildUi</span><span style="color: var(--shiki-color-text)">(applicationState);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">root</span><span style="color: var(--shiki-token-function)">.appendChild</span><span style="color: var(--shiki-color-text)">(newElement);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// building the counter app</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">buildUi</span><span style="color: var(--shiki-color-text)">(&#123; counter &#125;) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;div&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">button1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;button&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">button1</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;-&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-token-function)">.append</span><span style="color: var(--shiki-color-text)">(button1);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">span</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;span&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">span</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> counter;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-token-function)">.append</span><span style="color: var(--shiki-color-text)">(span);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">button2</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;button&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">button2</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;+&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-token-function)">.append</span><span style="color: var(--shiki-color-text)">(button2);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> div;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ds,Pt,vs,ie,b,Tt,$,ys,us,It,fs,ws,O,St,ms,xs,Ct,gs,_s,Dt,bs,Es,Nt,Os,Ps,Ut,Ts,pe,v,Mt,B,Is,Ss,At,Cs,Ds,Rt,Ns,Us,Wt,Ms,As,S,Rs,Lt,Ws,Ls,Ht,Hs,Gs,qs,Gt,$s,Bs,g,Fs,qt,js,Js,pt,Vs,zs,$t,Ys,Zs,Bt,Ks,Qs,Xs,Ft,ta,ce,y,jt,F,ea,sa,j,aa,Jt,oa,na,ra,Vt,la,ia,J,zt,pa,ca,Yt,ha,ka,Zt,da,va,ct,rn=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> previousUi </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)">(root</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> applicationState) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newUi</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">buildIntermediateUi</span><span style="color: var(--shiki-color-text)">(applicationState);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">operationsNeeded</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">diff</span><span style="color: var(--shiki-color-text)">(newUi</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> previousUi);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">operationsNeeded</span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">(runOperation);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// keep for comparison in the next update</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  previousUi </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> newUi;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// building the counter app</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">buildIntermediateUi</span><span style="color: var(--shiki-color-text)">(&#123; counter &#125;) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    element</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;div&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    children</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        element</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;button&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        text</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;-&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        element</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;span&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        text</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> counter</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        element</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;button&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        text</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;+&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    ]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ya,C,ua,Kt,fa,wa,Qt,ma,xa,ga,Xt,_a,he,E,te,V,ba,Ea,ee,Oa,Pa,se,Ta,Ia,ht,ln=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)">(root</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> changes) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">applyChanges</span><span style="color: var(--shiki-color-text)">(root</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> changes);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// an example of apply changes for the counter app</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">applyChanges</span><span style="color: var(--shiki-color-text)">(root</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> changes) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// update span&#39;s text if &#96;counter&#96; changed</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-string-expression)">&#39;counter&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> changes) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">root</span><span style="color: var(--shiki-token-function)">.querySelector</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;span&#39;</span><span style="color: var(--shiki-color-text)">).textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">changes</span><span style="color: var(--shiki-color-text)">.counter;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ke,w,ae,z,Sa,Ca,oe,Da,Na,ne,Ua,Ma,re,Aa,Ra,le,Wa;return{c(){l=s("section"),_=s("h2"),m=s("a"),M=n("What is Reactivity?"),d=i(),x=s("p"),Z=n("Reactivity is the ability of a web framework to update your view whenever the application state has changed."),xe=i(),vt=s("p"),ge=n("It is the core of any modern web framework."),_e=i(),yt=s("p"),be=n("To achieve reactivity, the framework has to answer 2 questions"),Ee=i(),A=s("ul"),ut=s("li"),Oe=n("When does the application state change?"),Pe=i(),ft=s("li"),Te=n("What has the application state changed?"),Ie=i(),R=s("p"),Se=n("In "),K=s("a"),Ce=n("Part 1"),De=n(", I started with a counter app example."),Ne=i(),Q=s("div"),Ue=i(),wt=s("p"),Me=n("and I talked about different strategies framework used to know when does the application state change."),Ae=i(),mt=s("p"),X=s("strong"),Re=n("- "),tt=s("a"),We=n("Mutation Tracking"),Le=i(),W=s("p"),He=n("Using "),L=s("a"),Ge=n("ES6 Proxy"),qe=n(", or before that, Object getters and setters, to determine when the application state has changed."),$e=i(),xt=s("p"),et=s("strong"),Be=n("- "),H=s("a"),Fe=n("Just call "),st=s("code"),je=n("scheduleUpdate"),Je=i(),at=s("p"),Ve=n("Provide APIs that indirectly calls "),ot=s("code"),ze=n("scheduleUpdate"),Ye=i(),gt=s("p"),nt=s("strong"),Ze=n("- "),rt=s("a"),Ke=n("Static Analysis"),Qe=i(),G=s("p"),Xe=n("Analyse the code statically, and insert "),lt=s("code"),ts=n("scheduleUpdate"),es=n(" into the code right after assignments."),ss=i(),_t=s("p"),as=n("After knowing that the application state has change, the framework will then proceed to update the view."),os=i(),bt=s("p"),ns=n("But, how?"),rs=i(),q=s("p"),ls=n("The framework needs to figure out "),Et=s("strong"),is=n("what needs to be updated"),ps=n(", so that the framework will only update the part of the view that needs to be changed."),cs=i(),Ot=s("p"),hs=n("Without knowing what needs to be updated, the quickest and dirtiest way of updating the view would be to destroy and recreate everything:"),ks=i(),it=s("div"),ds=i(),Pt=s("p"),vs=n("The drawbacks of this method are"),ie=i(),b=s("section"),Tt=s("h3"),$=s("a"),ys=n("- Losing element state"),us=i(),It=s("p"),fs=n("We will lose the state of the element, such as:"),ws=i(),O=s("ul"),St=s("li"),ms=n("input focus"),xs=i(),Ct=s("li"),gs=n("text highlight"),_s=i(),Dt=s("li"),bs=n("active state"),Es=i(),Nt=s("li"),Os=n("..."),Ps=i(),Ut=s("p"),Ts=n("if we didnt preserve them before destroying them."),pe=i(),v=s("section"),Mt=s("h3"),B=s("a"),Is=n("- Cost of creating DOM elements"),Ss=i(),At=s("p"),Cs=n("It is much costly to recreate all the DOM elements needed instead of reuse and update the existing DOM elements."),Ds=i(),Rt=s("p"),Ns=n("@@@@@@@@@@@@"),Us=i(),Wt=s("p"),Ms=n("Now let's"),As=i(),S=s("p"),Rs=n("framework needs to know "),Lt=s("strong"),Ws=n("what has changed"),Ls=n(" and then based on that, figure out "),Ht=s("strong"),Hs=n("what needs to be updated"),Gs=n("."),qs=i(),Gt=s("p"),$s=n("@@@@@@@@@@@@"),Bs=i(),g=s("p"),Fs=n("Different "),qt=s("strong"),js=n('"templating" strategies'),Js=n(" and "),pt=s("a"),Vs=n("WHEN strategies"),zs=n(" give the framework varying amount of information in terms of "),$t=s("strong"),Ys=n("what has changed"),Zs=n(" and "),Bt=s("strong"),Ks=n("what needs to be updated"),Qs=n("."),Xs=i(),Ft=s("p"),ta=n("We can put that variance in the amount of information into a spectrum."),ce=i(),y=s("section"),jt=s("h3"),F=s("a"),ea=n("Framework knows nothing about what has changed"),sa=i(),j=s("p"),aa=n("At one end, our framework "),Jt=s("strong"),oa=n("knows nothing about what has changed"),na=n(". To update the application without knowing what has change, the quickest and dirtiest mechanism would be to recreate everything."),ra=i(),Vt=s("p"),la=n("However that would come with costs:"),ia=i(),J=s("ul"),zt=s("li"),pa=n("losing focus"),ca=i(),Yt=s("li"),ha=n("cost of creating new elements, DOM manipulations"),ka=i(),Zt=s("p"),da=n("So, a more well-thought mechanism is to create a intermediate representation of the UI. Instead of tearing down and recreate every DOM element everytime when there's an update, we compare the latest intermediate representation with the previous one, figure out the difference between the two representations and generate a list of operations needed to patch the DOM."),va=i(),ct=s("div"),ya=i(),C=s("p"),ua=n("By finding the differences between the new and old representations, framework figures out "),Kt=s("strong"),fa=n("what needs to be updated"),wa=n(" without knowing "),Qt=s("strong"),ma=n("what has changed"),xa=n("."),ga=i(),Xt=s("p"),_a=n("The main advantage of this mechanism is that, the intermediate representation is way cheaper to create and manipulate."),he=i(),E=s("section"),te=s("h3"),V=s("a"),ba=n("Framework knows exactly what has changed and what needs to be updated"),Ea=i(),ee=s("p"),Oa=n("On the other extreme end of the spectrum, framework knows exactly what has changed and what needs to be updated."),Pa=i(),se=s("p"),Ta=n("This is the most efficient way of updating the UI, where everything needed by the framework has already been figured out. So the only thing the framework needs to do is to apply those updates to the DOM."),Ia=i(),ht=s("div"),ke=i(),w=s("section"),ae=s("h2"),z=s("a"),Sa=n("The Component Model"),Ca=i(),oe=s("p"),Da=n("TODO:"),Na=i(),ne=s("p"),Ua=n("Components With component model, we can break the application up into is composed with components."),Ma=i(),re=s("p"),Aa=n(`So, if the framework is able to figure out what needs to be updated early on, then , the more efficient it is (without having to figure out what needs to be updated later on)
decides whether the framework`),Ra=i(),le=s("p"),Wa=n('Different "templating" strategies and [WHEN strategies'),this.h()},l(h){l=a(h,"SECTION",{});var c=o(l);_=a(c,"H2",{});var Fa=o(_);m=a(Fa,"A",{href:!0,id:!0});var ja=o(m);M=r(ja,"What is Reactivity?"),ja.forEach(e),Fa.forEach(e),d=p(c),x=a(c,"P",{});var Ja=o(x);Z=r(Ja,"Reactivity is the ability of a web framework to update your view whenever the application state has changed."),Ja.forEach(e),xe=p(c),vt=a(c,"P",{});var Va=o(vt);ge=r(Va,"It is the core of any modern web framework."),Va.forEach(e),_e=p(c),yt=a(c,"P",{});var za=o(yt);be=r(za,"To achieve reactivity, the framework has to answer 2 questions"),za.forEach(e),Ee=p(c),A=a(c,"UL",{});var de=o(A);ut=a(de,"LI",{});var Ya=o(ut);Oe=r(Ya,"When does the application state change?"),Ya.forEach(e),Pe=p(de),ft=a(de,"LI",{});var Za=o(ft);Te=r(Za,"What has the application state changed?"),Za.forEach(e),de.forEach(e),Ie=p(c),R=a(c,"P",{});var ve=o(R);Se=r(ve,"In "),K=a(ve,"A",{href:!0});var Ka=o(K);Ce=r(Ka,"Part 1"),Ka.forEach(e),De=r(ve,", I started with a counter app example."),ve.forEach(e),Ne=p(c),Q=a(c,"DIV",{class:!0});var pn=o(Q);pn.forEach(e),Ue=p(c),wt=a(c,"P",{});var Qa=o(wt);Me=r(Qa,"and I talked about different strategies framework used to know when does the application state change."),Qa.forEach(e),Ae=p(c),mt=a(c,"P",{});var Xa=o(mt);X=a(Xa,"STRONG",{});var La=o(X);Re=r(La,"- "),tt=a(La,"A",{href:!0});var to=o(tt);We=r(to,"Mutation Tracking"),to.forEach(e),La.forEach(e),Xa.forEach(e),Le=p(c),W=a(c,"P",{});var ye=o(W);He=r(ye,"Using "),L=a(ye,"A",{href:!0,rel:!0});var eo=o(L);Ge=r(eo,"ES6 Proxy"),eo.forEach(e),qe=r(ye,", or before that, Object getters and setters, to determine when the application state has changed."),ye.forEach(e),$e=p(c),xt=a(c,"P",{});var so=o(xt);et=a(so,"STRONG",{});var Ha=o(et);Be=r(Ha,"- "),H=a(Ha,"A",{href:!0});var Ga=o(H);Fe=r(Ga,"Just call "),st=a(Ga,"CODE",{class:!0});var ao=o(st);je=r(ao,"scheduleUpdate"),ao.forEach(e),Ga.forEach(e),Ha.forEach(e),so.forEach(e),Je=p(c),at=a(c,"P",{});var qa=o(at);Ve=r(qa,"Provide APIs that indirectly calls "),ot=a(qa,"CODE",{class:!0});var oo=o(ot);ze=r(oo,"scheduleUpdate"),oo.forEach(e),qa.forEach(e),Ye=p(c),gt=a(c,"P",{});var no=o(gt);nt=a(no,"STRONG",{});var $a=o(nt);Ze=r($a,"- "),rt=a($a,"A",{href:!0});var ro=o(rt);Ke=r(ro,"Static Analysis"),ro.forEach(e),$a.forEach(e),no.forEach(e),Qe=p(c),G=a(c,"P",{});var ue=o(G);Xe=r(ue,"Analyse the code statically, and insert "),lt=a(ue,"CODE",{class:!0});var lo=o(lt);ts=r(lo,"scheduleUpdate"),lo.forEach(e),es=r(ue," into the code right after assignments."),ue.forEach(e),ss=p(c),_t=a(c,"P",{});var io=o(_t);as=r(io,"After knowing that the application state has change, the framework will then proceed to update the view."),io.forEach(e),os=p(c),bt=a(c,"P",{});var po=o(bt);ns=r(po,"But, how?"),po.forEach(e),rs=p(c),q=a(c,"P",{});var fe=o(q);ls=r(fe,"The framework needs to figure out "),Et=a(fe,"STRONG",{});var co=o(Et);is=r(co,"what needs to be updated"),co.forEach(e),ps=r(fe,", so that the framework will only update the part of the view that needs to be changed."),fe.forEach(e),cs=p(c),Ot=a(c,"P",{});var ho=o(Ot);hs=r(ho,"Without knowing what needs to be updated, the quickest and dirtiest way of updating the view would be to destroy and recreate everything:"),ho.forEach(e),ks=p(c),it=a(c,"DIV",{class:!0});var cn=o(it);cn.forEach(e),ds=p(c),Pt=a(c,"P",{});var ko=o(Pt);vs=r(ko,"The drawbacks of this method are"),ko.forEach(e),c.forEach(e),ie=p(h),b=a(h,"SECTION",{});var D=o(b);Tt=a(D,"H3",{});var vo=o(Tt);$=a(vo,"A",{href:!0,id:!0});var yo=o($);ys=r(yo,"- Losing element state"),yo.forEach(e),vo.forEach(e),us=p(D),It=a(D,"P",{});var uo=o(It);fs=r(uo,"We will lose the state of the element, such as:"),uo.forEach(e),ws=p(D),O=a(D,"UL",{});var N=o(O);St=a(N,"LI",{});var fo=o(St);ms=r(fo,"input focus"),fo.forEach(e),xs=p(N),Ct=a(N,"LI",{});var wo=o(Ct);gs=r(wo,"text highlight"),wo.forEach(e),_s=p(N),Dt=a(N,"LI",{});var mo=o(Dt);bs=r(mo,"active state"),mo.forEach(e),Es=p(N),Nt=a(N,"LI",{});var xo=o(Nt);Os=r(xo,"..."),xo.forEach(e),N.forEach(e),Ps=p(D),Ut=a(D,"P",{});var go=o(Ut);Ts=r(go,"if we didnt preserve them before destroying them."),go.forEach(e),D.forEach(e),pe=p(h),v=a(h,"SECTION",{});var u=o(v);Mt=a(u,"H3",{});var _o=o(Mt);B=a(_o,"A",{href:!0,id:!0});var bo=o(B);Is=r(bo,"- Cost of creating DOM elements"),bo.forEach(e),_o.forEach(e),Ss=p(u),At=a(u,"P",{});var Eo=o(At);Cs=r(Eo,"It is much costly to recreate all the DOM elements needed instead of reuse and update the existing DOM elements."),Eo.forEach(e),Ds=p(u),Rt=a(u,"P",{});var Oo=o(Rt);Ns=r(Oo,"@@@@@@@@@@@@"),Oo.forEach(e),Us=p(u),Wt=a(u,"P",{});var Po=o(Wt);Ms=r(Po,"Now let's"),Po.forEach(e),As=p(u),S=a(u,"P",{});var kt=o(S);Rs=r(kt,"framework needs to know "),Lt=a(kt,"STRONG",{});var To=o(Lt);Ws=r(To,"what has changed"),To.forEach(e),Ls=r(kt," and then based on that, figure out "),Ht=a(kt,"STRONG",{});var Io=o(Ht);Hs=r(Io,"what needs to be updated"),Io.forEach(e),Gs=r(kt,"."),kt.forEach(e),qs=p(u),Gt=a(u,"P",{});var So=o(Gt);$s=r(So,"@@@@@@@@@@@@"),So.forEach(e),Bs=p(u),g=a(u,"P",{});var T=o(g);Fs=r(T,"Different "),qt=a(T,"STRONG",{});var Co=o(qt);js=r(Co,'"templating" strategies'),Co.forEach(e),Js=r(T," and "),pt=a(T,"A",{href:!0});var Do=o(pt);Vs=r(Do,"WHEN strategies"),Do.forEach(e),zs=r(T," give the framework varying amount of information in terms of "),$t=a(T,"STRONG",{});var No=o($t);Ys=r(No,"what has changed"),No.forEach(e),Zs=r(T," and "),Bt=a(T,"STRONG",{});var Uo=o(Bt);Ks=r(Uo,"what needs to be updated"),Uo.forEach(e),Qs=r(T,"."),T.forEach(e),Xs=p(u),Ft=a(u,"P",{});var Mo=o(Ft);ta=r(Mo,"We can put that variance in the amount of information into a spectrum."),Mo.forEach(e),u.forEach(e),ce=p(h),y=a(h,"SECTION",{});var f=o(y);jt=a(f,"H3",{});var Ao=o(jt);F=a(Ao,"A",{href:!0,id:!0});var Ro=o(F);ea=r(Ro,"Framework knows nothing about what has changed"),Ro.forEach(e),Ao.forEach(e),sa=p(f),j=a(f,"P",{});var we=o(j);aa=r(we,"At one end, our framework "),Jt=a(we,"STRONG",{});var Wo=o(Jt);oa=r(Wo,"knows nothing about what has changed"),Wo.forEach(e),na=r(we,". To update the application without knowing what has change, the quickest and dirtiest mechanism would be to recreate everything."),we.forEach(e),ra=p(f),Vt=a(f,"P",{});var Lo=o(Vt);la=r(Lo,"However that would come with costs:"),Lo.forEach(e),ia=p(f),J=a(f,"UL",{});var me=o(J);zt=a(me,"LI",{});var Ho=o(zt);pa=r(Ho,"losing focus"),Ho.forEach(e),ca=p(me),Yt=a(me,"LI",{});var Go=o(Yt);ha=r(Go,"cost of creating new elements, DOM manipulations"),Go.forEach(e),me.forEach(e),ka=p(f),Zt=a(f,"P",{});var qo=o(Zt);da=r(qo,"So, a more well-thought mechanism is to create a intermediate representation of the UI. Instead of tearing down and recreate every DOM element everytime when there's an update, we compare the latest intermediate representation with the previous one, figure out the difference between the two representations and generate a list of operations needed to patch the DOM."),qo.forEach(e),va=p(f),ct=a(f,"DIV",{class:!0});var hn=o(ct);hn.forEach(e),ya=p(f),C=a(f,"P",{});var dt=o(C);ua=r(dt,"By finding the differences between the new and old representations, framework figures out "),Kt=a(dt,"STRONG",{});var $o=o(Kt);fa=r($o,"what needs to be updated"),$o.forEach(e),wa=r(dt," without knowing "),Qt=a(dt,"STRONG",{});var Bo=o(Qt);ma=r(Bo,"what has changed"),Bo.forEach(e),xa=r(dt,"."),dt.forEach(e),ga=p(f),Xt=a(f,"P",{});var Fo=o(Xt);_a=r(Fo,"The main advantage of this mechanism is that, the intermediate representation is way cheaper to create and manipulate."),Fo.forEach(e),f.forEach(e),he=p(h),E=a(h,"SECTION",{});var U=o(E);te=a(U,"H3",{});var jo=o(te);V=a(jo,"A",{href:!0,id:!0});var Jo=o(V);ba=r(Jo,"Framework knows exactly what has changed and what needs to be updated"),Jo.forEach(e),jo.forEach(e),Ea=p(U),ee=a(U,"P",{});var Vo=o(ee);Oa=r(Vo,"On the other extreme end of the spectrum, framework knows exactly what has changed and what needs to be updated."),Vo.forEach(e),Pa=p(U),se=a(U,"P",{});var zo=o(se);Ta=r(zo,"This is the most efficient way of updating the UI, where everything needed by the framework has already been figured out. So the only thing the framework needs to do is to apply those updates to the DOM."),zo.forEach(e),Ia=p(U),ht=a(U,"DIV",{class:!0});var kn=o(ht);kn.forEach(e),U.forEach(e),ke=p(h),w=a(h,"SECTION",{});var I=o(w);ae=a(I,"H2",{});var Yo=o(ae);z=a(Yo,"A",{href:!0,id:!0});var Zo=o(z);Sa=r(Zo,"The Component Model"),Zo.forEach(e),Yo.forEach(e),Ca=p(I),oe=a(I,"P",{});var Ko=o(oe);Da=r(Ko,"TODO:"),Ko.forEach(e),Na=p(I),ne=a(I,"P",{});var Qo=o(ne);Ua=r(Qo,"Components With component model, we can break the application up into is composed with components."),Qo.forEach(e),Ma=p(I),re=a(I,"P",{});var Xo=o(re);Aa=r(Xo,`So, if the framework is able to figure out what needs to be updated early on, then , the more efficient it is (without having to figure out what needs to be updated later on)
decides whether the framework`),Xo.forEach(e),Ra=p(I),le=a(I,"P",{});var tn=o(le);Wa=r(tn,'Different "templating" strategies and [WHEN strategies'),tn.forEach(e),I.forEach(e),this.h()},h(){k(m,"href","#what-is-reactivity"),k(m,"id","what-is-reactivity"),k(K,"href","/reactivity-in-web-frameworks-the-when"),k(Q,"class","code-section"),k(tt,"href","/reactivity-in-web-frameworks-the-when#mutation-tracking"),k(L,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy"),k(L,"rel","nofollow"),k(st,"class","inline"),k(H,"href","/reactivity-in-web-frameworks-the-when#just-call-schedule-update"),k(ot,"class","inline"),k(rt,"href","/reactivity-in-web-frameworks-the-when#static-analysis"),k(lt,"class","inline"),k(it,"class","code-section"),k($,"href","#losing-element-state"),k($,"id","losing-element-state"),k(B,"href","#cost-of-creating-dom-elements"),k(B,"id","cost-of-creating-dom-elements"),k(pt,"href","/reactivity-in-web-frameworks-the-when#the-when"),k(F,"href","#framework-knows-nothing-about-what-has-changed"),k(F,"id","framework-knows-nothing-about-what-has-changed"),k(ct,"class","code-section"),k(V,"href","#framework-knows-exactly-what-has-changed-and-what-needs-to-be-updated"),k(V,"id","framework-knows-exactly-what-has-changed-and-what-needs-to-be-updated"),k(ht,"class","code-section"),k(z,"href","#the-component-model"),k(z,"id","the-component-model")},m(h,c){P(h,l,c),t(l,_),t(_,m),t(m,M),t(l,d),t(l,x),t(x,Z),t(l,xe),t(l,vt),t(vt,ge),t(l,_e),t(l,yt),t(yt,be),t(l,Ee),t(l,A),t(A,ut),t(ut,Oe),t(A,Pe),t(A,ft),t(ft,Te),t(l,Ie),t(l,R),t(R,Se),t(R,K),t(K,Ce),t(R,De),t(l,Ne),t(l,Q),Q.innerHTML=on,t(l,Ue),t(l,wt),t(wt,Me),t(l,Ae),t(l,mt),t(mt,X),t(X,Re),t(X,tt),t(tt,We),t(l,Le),t(l,W),t(W,He),t(W,L),t(L,Ge),t(W,qe),t(l,$e),t(l,xt),t(xt,et),t(et,Be),t(et,H),t(H,Fe),t(H,st),t(st,je),t(l,Je),t(l,at),t(at,Ve),t(at,ot),t(ot,ze),t(l,Ye),t(l,gt),t(gt,nt),t(nt,Ze),t(nt,rt),t(rt,Ke),t(l,Qe),t(l,G),t(G,Xe),t(G,lt),t(lt,ts),t(G,es),t(l,ss),t(l,_t),t(_t,as),t(l,os),t(l,bt),t(bt,ns),t(l,rs),t(l,q),t(q,ls),t(q,Et),t(Et,is),t(q,ps),t(l,cs),t(l,Ot),t(Ot,hs),t(l,ks),t(l,it),it.innerHTML=nn,t(l,ds),t(l,Pt),t(Pt,vs),P(h,ie,c),P(h,b,c),t(b,Tt),t(Tt,$),t($,ys),t(b,us),t(b,It),t(It,fs),t(b,ws),t(b,O),t(O,St),t(St,ms),t(O,xs),t(O,Ct),t(Ct,gs),t(O,_s),t(O,Dt),t(Dt,bs),t(O,Es),t(O,Nt),t(Nt,Os),t(b,Ps),t(b,Ut),t(Ut,Ts),P(h,pe,c),P(h,v,c),t(v,Mt),t(Mt,B),t(B,Is),t(v,Ss),t(v,At),t(At,Cs),t(v,Ds),t(v,Rt),t(Rt,Ns),t(v,Us),t(v,Wt),t(Wt,Ms),t(v,As),t(v,S),t(S,Rs),t(S,Lt),t(Lt,Ws),t(S,Ls),t(S,Ht),t(Ht,Hs),t(S,Gs),t(v,qs),t(v,Gt),t(Gt,$s),t(v,Bs),t(v,g),t(g,Fs),t(g,qt),t(qt,js),t(g,Js),t(g,pt),t(pt,Vs),t(g,zs),t(g,$t),t($t,Ys),t(g,Zs),t(g,Bt),t(Bt,Ks),t(g,Qs),t(v,Xs),t(v,Ft),t(Ft,ta),P(h,ce,c),P(h,y,c),t(y,jt),t(jt,F),t(F,ea),t(y,sa),t(y,j),t(j,aa),t(j,Jt),t(Jt,oa),t(j,na),t(y,ra),t(y,Vt),t(Vt,la),t(y,ia),t(y,J),t(J,zt),t(zt,pa),t(J,ca),t(J,Yt),t(Yt,ha),t(y,ka),t(y,Zt),t(Zt,da),t(y,va),t(y,ct),ct.innerHTML=rn,t(y,ya),t(y,C),t(C,ua),t(C,Kt),t(Kt,fa),t(C,wa),t(C,Qt),t(Qt,ma),t(C,xa),t(y,ga),t(y,Xt),t(Xt,_a),P(h,he,c),P(h,E,c),t(E,te),t(te,V),t(V,ba),t(E,Ea),t(E,ee),t(ee,Oa),t(E,Pa),t(E,se),t(se,Ta),t(E,Ia),t(E,ht),ht.innerHTML=ln,P(h,ke,c),P(h,w,c),t(w,ae),t(ae,z),t(z,Sa),t(w,Ca),t(w,oe),t(oe,Da),t(w,Na),t(w,ne),t(ne,Ua),t(w,Ma),t(w,re),t(re,Aa),t(w,Ra),t(w,le),t(le,Wa)},p:En,d(h){h&&e(l),h&&e(ie),h&&e(b),h&&e(pe),h&&e(v),h&&e(ce),h&&e(y),h&&e(he),h&&e(E),h&&e(ke),h&&e(w)}}}function In(Y){let l,_;const m=[Y[0],an];let M={$$slots:{default:[Tn]},$$scope:{ctx:Y}};for(let d=0;d<m.length;d+=1)M=Ba(M,m[d]);return l=new On({props:M}),{c(){un(l.$$.fragment)},l(d){fn(l.$$.fragment,d)},m(d,x){wn(l,d,x),_=!0},p(d,[x]){const Z=x&1?mn(m,[x&1&&en(d[0]),x&0&&en(an)]):{};x&2&&(Z.$$scope={dirty:x,ctx:d}),l.$set(Z)},i(d){_||(xn(l.$$.fragment,d),_=!0)},o(d){gn(l.$$.fragment,d),_=!1},d(d){_n(l,d)}}}const an={title:"Reactivity in Web Frameworks (Part 2)",date:"2020-03-05T08:00:00Z",description:"Reactivity is the ability of a web framework to update your view whenever the application state has changed. How do web frameworks achieve reactivity?",wip:!0,label:"blog",tableOfContents:[{link:"what-is-reactivity",title:"What is Reactivity?",nested:[{link:"losing-element-state",title:"- Losing element state"},{link:"cost-of-creating-dom-elements",title:"- Cost of creating DOM elements"},{link:"framework-knows-nothing-about-what-has-changed",title:"Framework knows nothing about what has changed"},{link:"framework-knows-exactly-what-has-changed-and-what-needs-to-be-updated",title:"Framework knows exactly what has changed and what needs to be updated"}]},{link:"the-component-model",title:"The Component Model"}]};function Sn(Y,l,_){return bn("blog",{image:Pn}),Y.$$set=m=>{_(0,l=Ba(Ba({},l),sn(m)))},l=sn(l),[l]}class Rn extends dn{constructor(l){super();vn(this,l,Sn,In,yn,{})}}export{Rn as default,an as metadata};
