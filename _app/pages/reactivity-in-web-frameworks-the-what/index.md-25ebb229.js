import{S as _n,i as bn,s as En,C as Va,w as ln,x as pn,y as cn,z as On,A as on,q as hn,o as kn,B as dn,r as Pn,R as nn,k as i,e as s,t as n,m as p,c as a,a as o,h as r,d as e,b as k,g as b,F as t,O as Tn}from"../../chunks/vendor-ea160616.js";import{B as In}from"../../chunks/BlogLayout-1be3dc1e.js";import{T as Sn}from"../../chunks/TableOfContent-c4f5cb6e.js";import{_ as Cn}from"../../chunks/twitter-card-image-a57df29d.js";import"../../chunks/stores-7d7fda0c.js";import"../../chunks/WebMentions-d768a574.js";/* empty css                                */function Dn(Z){let d,E,c,S,v,O,K,vt,_e,be,yt,Ee,Oe,ut,Pe,Te,A,ft,Ie,Se,wt,Ce,De,R,Ne,Q,Ue,Me,Ae,X,vn=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">App</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">counter</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">setCounter</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">React</span><span style="color: var(--shiki-token-function)">.useState</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &lt;</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">onClick</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">&#123;() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">setCounter</span><span style="color: var(--shiki-color-text)">(counter </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> counter </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">)&#125;&gt;-&lt;/</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &lt;</span><span style="color: var(--shiki-token-string-expression)">span</span><span style="color: var(--shiki-color-text)">&gt;&#123;counter&#125;&lt;/</span><span style="color: var(--shiki-token-string-expression)">span</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &lt;</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">onClick</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">&#123;() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">setCounter</span><span style="color: var(--shiki-color-text)">(counter </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> counter </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">)&#125;&gt;+&lt;/</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  );</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Re,mt,We,Le,xt,Y,He,tt,$e,Ge,W,qe,L,Fe,Be,je,gt,et,Ve,H,Je,st,ze,Ze,at,Ke,ot,Qe,Xe,_t,nt,Ye,rt,ts,es,$,ss,lt,as,os,ns,bt,rs,ls,Et,is,ps,G,cs,Ot,hs,ks,ds,Pt,vs,ys,it,yn=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)">(root</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> applicationState) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// destroy everything</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">root</span><span style="color: var(--shiki-color-text)">.innerHTML </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...and rebuild</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newElement</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">buildUi</span><span style="color: var(--shiki-color-text)">(applicationState);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">root</span><span style="color: var(--shiki-token-function)">.appendChild</span><span style="color: var(--shiki-color-text)">(newElement);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// building the counter app</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">buildUi</span><span style="color: var(--shiki-color-text)">(&#123; counter &#125;) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;div&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">button1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;button&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">button1</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;-&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-token-function)">.append</span><span style="color: var(--shiki-color-text)">(button1);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">span</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;span&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">span</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> counter;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-token-function)">.append</span><span style="color: var(--shiki-color-text)">(span);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">button2</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;button&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">button2</span><span style="color: var(--shiki-color-text)">.textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;+&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-token-function)">.append</span><span style="color: var(--shiki-color-text)">(button2);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> div;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,us,Tt,fs,pe,g,It,q,ws,ms,St,xs,gs,P,Ct,_s,bs,Dt,Es,Os,Nt,Ps,Ts,Ut,Is,Ss,Mt,Cs,ce,y,At,F,Ds,Ns,Rt,Us,Ms,Wt,As,Rs,Lt,Ws,Ls,C,Hs,Ht,$s,Gs,$t,qs,Fs,Bs,Gt,js,Vs,x,Js,qt,zs,Zs,pt,Ks,Qs,Ft,Xs,Ys,Bt,ta,ea,sa,jt,aa,he,u,Vt,B,oa,na,j,ra,Jt,la,ia,pa,zt,ca,ha,V,Zt,ka,da,Kt,va,ya,Qt,ua,fa,ct,un=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> previousUi </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)">(root</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> applicationState) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newUi</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">buildIntermediateUi</span><span style="color: var(--shiki-color-text)">(applicationState);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">operationsNeeded</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">diff</span><span style="color: var(--shiki-color-text)">(newUi</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> previousUi);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">operationsNeeded</span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">(runOperation);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// keep for comparison in the next update</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  previousUi </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> newUi;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// building the counter app</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">buildIntermediateUi</span><span style="color: var(--shiki-color-text)">(&#123; counter &#125;) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    element</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;div&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    children</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        element</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;button&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        text</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;-&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        element</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;span&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        text</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> counter</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        element</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;button&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        text</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;+&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    ]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,wa,D,ma,Xt,xa,ga,Yt,_a,ba,Ea,te,Oa,ke,_,ee,J,Pa,Ta,se,Ia,Sa,ae,Ca,Da,ht,fn=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)">(root</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> changes) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">applyChanges</span><span style="color: var(--shiki-color-text)">(root</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> changes);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// an example of apply changes for the counter app</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">applyChanges</span><span style="color: var(--shiki-color-text)">(root</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> changes) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// update span&#39;s text if &#96;counter&#96; changed</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-string-expression)">&#39;counter&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> changes) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">root</span><span style="color: var(--shiki-token-function)">.querySelector</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;span&#39;</span><span style="color: var(--shiki-color-text)">).textContent </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">changes</span><span style="color: var(--shiki-color-text)">.counter;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,de,m,oe,z,Na,Ua,ne,Ma,Aa,re,Ra,Wa,le,La,Ha,ie,$a,ve;return d=new Sn({props:{data:[{link:"what-is-reactivity",title:"What is Reactivity?",nested:[{link:"losing-element-state",title:"- Losing element state"},{link:"cost-of-creating-dom-elements",title:"- Cost of creating DOM elements"},{link:"framework-knows-nothing-about-what-has-changed",title:"Framework knows nothing about what has changed"},{link:"framework-knows-exactly-what-has-changed-and-what-needs-to-be-updated",title:"Framework knows exactly what has changed and what needs to be updated"}]},{link:"the-component-model",title:"The Component Model"}]}}),{c(){ln(d.$$.fragment),E=i(),c=s("section"),S=s("h2"),v=s("a"),O=n("What is Reactivity?"),K=i(),vt=s("p"),_e=n("Reactivity is the ability of a web framework to update your view whenever the application state has changed."),be=i(),yt=s("p"),Ee=n("It is the core of any modern web framework."),Oe=i(),ut=s("p"),Pe=n("To achieve reactivity, the framework has to answer 2 questions"),Te=i(),A=s("ul"),ft=s("li"),Ie=n("When does the application state change?"),Se=i(),wt=s("li"),Ce=n("What has the application state changed?"),De=i(),R=s("p"),Ne=n("In "),Q=s("a"),Ue=n("Part 1"),Me=n(", I started with a counter app example."),Ae=i(),X=s("div"),Re=i(),mt=s("p"),We=n("and I talked about different strategies framework used to know when does the application state change."),Le=i(),xt=s("p"),Y=s("strong"),He=n("- "),tt=s("a"),$e=n("Mutation Tracking"),Ge=i(),W=s("p"),qe=n("Using "),L=s("a"),Fe=n("ES6 Proxy"),Be=n(", or before that, Object getters and setters, to determine when the application state has changed."),je=i(),gt=s("p"),et=s("strong"),Ve=n("- "),H=s("a"),Je=n("Just call "),st=s("code"),ze=n("scheduleUpdate"),Ze=i(),at=s("p"),Ke=n("Provide APIs that indirectly calls "),ot=s("code"),Qe=n("scheduleUpdate"),Xe=i(),_t=s("p"),nt=s("strong"),Ye=n("- "),rt=s("a"),ts=n("Static Analysis"),es=i(),$=s("p"),ss=n("Analyse the code statically, and insert "),lt=s("code"),as=n("scheduleUpdate"),os=n(" into the code right after assignments."),ns=i(),bt=s("p"),rs=n("After knowing that the application state has change, the framework will then proceed to update the view."),ls=i(),Et=s("p"),is=n("But, how?"),ps=i(),G=s("p"),cs=n("The framework needs to figure out "),Ot=s("strong"),hs=n("what needs to be updated"),ks=n(", so that the framework will only update the part of the view that needs to be changed."),ds=i(),Pt=s("p"),vs=n("Without knowing what needs to be updated, the quickest and dirtiest way of updating the view would be to destroy and recreate everything:"),ys=i(),it=s("div"),us=i(),Tt=s("p"),fs=n("The drawbacks of this method are"),pe=i(),g=s("section"),It=s("h3"),q=s("a"),ws=n("- Losing element state"),ms=i(),St=s("p"),xs=n("We will lose the state of the element, such as:"),gs=i(),P=s("ul"),Ct=s("li"),_s=n("input focus"),bs=i(),Dt=s("li"),Es=n("text highlight"),Os=i(),Nt=s("li"),Ps=n("active state"),Ts=i(),Ut=s("li"),Is=n("..."),Ss=i(),Mt=s("p"),Cs=n("if we didnt preserve them before destroying them."),ce=i(),y=s("section"),At=s("h3"),F=s("a"),Ds=n("- Cost of creating DOM elements"),Ns=i(),Rt=s("p"),Us=n("It is much costly to recreate all the DOM elements needed instead of reuse and update the existing DOM elements."),Ms=i(),Wt=s("p"),As=n("@@@@@@@@@@@@"),Rs=i(),Lt=s("p"),Ws=n("Now let's"),Ls=i(),C=s("p"),Hs=n("framework needs to know "),Ht=s("strong"),$s=n("what has changed"),Gs=n(" and then based on that, figure out "),$t=s("strong"),qs=n("what needs to be updated"),Fs=n("."),Bs=i(),Gt=s("p"),js=n("@@@@@@@@@@@@"),Vs=i(),x=s("p"),Js=n("Different "),qt=s("strong"),zs=n('"templating" strategies'),Zs=n(" and "),pt=s("a"),Ks=n("WHEN strategies"),Qs=n(" give the framework varying amount of information in terms of "),Ft=s("strong"),Xs=n("what has changed"),Ys=n(" and "),Bt=s("strong"),ta=n("what needs to be updated"),ea=n("."),sa=i(),jt=s("p"),aa=n("We can put that variance in the amount of information into a spectrum."),he=i(),u=s("section"),Vt=s("h3"),B=s("a"),oa=n("Framework knows nothing about what has changed"),na=i(),j=s("p"),ra=n("At one end, our framework "),Jt=s("strong"),la=n("knows nothing about what has changed"),ia=n(". To update the application without knowing what has change, the quickest and dirtiest mechanism would be to recreate everything."),pa=i(),zt=s("p"),ca=n("However that would come with costs:"),ha=i(),V=s("ul"),Zt=s("li"),ka=n("losing focus"),da=i(),Kt=s("li"),va=n("cost of creating new elements, DOM manipulations"),ya=i(),Qt=s("p"),ua=n("So, a more well-thought mechanism is to create a intermediate representation of the UI. Instead of tearing down and recreate every DOM element everytime when there's an update, we compare the latest intermediate representation with the previous one, figure out the difference between the two representations and generate a list of operations needed to patch the DOM."),fa=i(),ct=s("div"),wa=i(),D=s("p"),ma=n("By finding the differences between the new and old representations, framework figures out "),Xt=s("strong"),xa=n("what needs to be updated"),ga=n(" without knowing "),Yt=s("strong"),_a=n("what has changed"),ba=n("."),Ea=i(),te=s("p"),Oa=n("The main advantage of this mechanism is that, the intermediate representation is way cheaper to create and manipulate."),ke=i(),_=s("section"),ee=s("h3"),J=s("a"),Pa=n("Framework knows exactly what has changed and what needs to be updated"),Ta=i(),se=s("p"),Ia=n("On the other extreme end of the spectrum, framework knows exactly what has changed and what needs to be updated."),Sa=i(),ae=s("p"),Ca=n("This is the most efficient way of updating the UI, where everything needed by the framework has already been figured out. So the only thing the framework needs to do is to apply those updates to the DOM."),Da=i(),ht=s("div"),de=i(),m=s("section"),oe=s("h2"),z=s("a"),Na=n("The Component Model"),Ua=i(),ne=s("p"),Ma=n("TODO:"),Aa=i(),re=s("p"),Ra=n("Components With component model, we can break the application up into is composed with components."),Wa=i(),le=s("p"),La=n(`So, if the framework is able to figure out what needs to be updated early on, then , the more efficient it is (without having to figure out what needs to be updated later on)
decides whether the framework`),Ha=i(),ie=s("p"),$a=n('Different "templating" strategies and [WHEN strategies'),this.h()},l(h){pn(d.$$.fragment,h),E=p(h),c=a(h,"SECTION",{});var l=o(c);S=a(l,"H2",{});var Ja=o(S);v=a(Ja,"A",{href:!0,id:!0});var za=o(v);O=r(za,"What is Reactivity?"),za.forEach(e),Ja.forEach(e),K=p(l),vt=a(l,"P",{});var Za=o(vt);_e=r(Za,"Reactivity is the ability of a web framework to update your view whenever the application state has changed."),Za.forEach(e),be=p(l),yt=a(l,"P",{});var Ka=o(yt);Ee=r(Ka,"It is the core of any modern web framework."),Ka.forEach(e),Oe=p(l),ut=a(l,"P",{});var Qa=o(ut);Pe=r(Qa,"To achieve reactivity, the framework has to answer 2 questions"),Qa.forEach(e),Te=p(l),A=a(l,"UL",{});var ye=o(A);ft=a(ye,"LI",{});var Xa=o(ft);Ie=r(Xa,"When does the application state change?"),Xa.forEach(e),Se=p(ye),wt=a(ye,"LI",{});var Ya=o(wt);Ce=r(Ya,"What has the application state changed?"),Ya.forEach(e),ye.forEach(e),De=p(l),R=a(l,"P",{});var ue=o(R);Ne=r(ue,"In "),Q=a(ue,"A",{href:!0});var to=o(Q);Ue=r(to,"Part 1"),to.forEach(e),Me=r(ue,", I started with a counter app example."),ue.forEach(e),Ae=p(l),X=a(l,"DIV",{class:!0});var wn=o(X);wn.forEach(e),Re=p(l),mt=a(l,"P",{});var eo=o(mt);We=r(eo,"and I talked about different strategies framework used to know when does the application state change."),eo.forEach(e),Le=p(l),xt=a(l,"P",{});var so=o(xt);Y=a(so,"STRONG",{});var Ga=o(Y);He=r(Ga,"- "),tt=a(Ga,"A",{href:!0});var ao=o(tt);$e=r(ao,"Mutation Tracking"),ao.forEach(e),Ga.forEach(e),so.forEach(e),Ge=p(l),W=a(l,"P",{});var fe=o(W);qe=r(fe,"Using "),L=a(fe,"A",{href:!0,rel:!0});var oo=o(L);Fe=r(oo,"ES6 Proxy"),oo.forEach(e),Be=r(fe,", or before that, Object getters and setters, to determine when the application state has changed."),fe.forEach(e),je=p(l),gt=a(l,"P",{});var no=o(gt);et=a(no,"STRONG",{});var qa=o(et);Ve=r(qa,"- "),H=a(qa,"A",{href:!0});var Fa=o(H);Je=r(Fa,"Just call "),st=a(Fa,"CODE",{class:!0});var ro=o(st);ze=r(ro,"scheduleUpdate"),ro.forEach(e),Fa.forEach(e),qa.forEach(e),no.forEach(e),Ze=p(l),at=a(l,"P",{});var Ba=o(at);Ke=r(Ba,"Provide APIs that indirectly calls "),ot=a(Ba,"CODE",{class:!0});var lo=o(ot);Qe=r(lo,"scheduleUpdate"),lo.forEach(e),Ba.forEach(e),Xe=p(l),_t=a(l,"P",{});var io=o(_t);nt=a(io,"STRONG",{});var ja=o(nt);Ye=r(ja,"- "),rt=a(ja,"A",{href:!0});var po=o(rt);ts=r(po,"Static Analysis"),po.forEach(e),ja.forEach(e),io.forEach(e),es=p(l),$=a(l,"P",{});var we=o($);ss=r(we,"Analyse the code statically, and insert "),lt=a(we,"CODE",{class:!0});var co=o(lt);as=r(co,"scheduleUpdate"),co.forEach(e),os=r(we," into the code right after assignments."),we.forEach(e),ns=p(l),bt=a(l,"P",{});var ho=o(bt);rs=r(ho,"After knowing that the application state has change, the framework will then proceed to update the view."),ho.forEach(e),ls=p(l),Et=a(l,"P",{});var ko=o(Et);is=r(ko,"But, how?"),ko.forEach(e),ps=p(l),G=a(l,"P",{});var me=o(G);cs=r(me,"The framework needs to figure out "),Ot=a(me,"STRONG",{});var vo=o(Ot);hs=r(vo,"what needs to be updated"),vo.forEach(e),ks=r(me,", so that the framework will only update the part of the view that needs to be changed."),me.forEach(e),ds=p(l),Pt=a(l,"P",{});var yo=o(Pt);vs=r(yo,"Without knowing what needs to be updated, the quickest and dirtiest way of updating the view would be to destroy and recreate everything:"),yo.forEach(e),ys=p(l),it=a(l,"DIV",{class:!0});var mn=o(it);mn.forEach(e),us=p(l),Tt=a(l,"P",{});var uo=o(Tt);fs=r(uo,"The drawbacks of this method are"),uo.forEach(e),l.forEach(e),pe=p(h),g=a(h,"SECTION",{});var N=o(g);It=a(N,"H3",{});var fo=o(It);q=a(fo,"A",{href:!0,id:!0});var wo=o(q);ws=r(wo,"- Losing element state"),wo.forEach(e),fo.forEach(e),ms=p(N),St=a(N,"P",{});var mo=o(St);xs=r(mo,"We will lose the state of the element, such as:"),mo.forEach(e),gs=p(N),P=a(N,"UL",{});var U=o(P);Ct=a(U,"LI",{});var xo=o(Ct);_s=r(xo,"input focus"),xo.forEach(e),bs=p(U),Dt=a(U,"LI",{});var go=o(Dt);Es=r(go,"text highlight"),go.forEach(e),Os=p(U),Nt=a(U,"LI",{});var _o=o(Nt);Ps=r(_o,"active state"),_o.forEach(e),Ts=p(U),Ut=a(U,"LI",{});var bo=o(Ut);Is=r(bo,"..."),bo.forEach(e),U.forEach(e),Ss=p(N),Mt=a(N,"P",{});var Eo=o(Mt);Cs=r(Eo,"if we didnt preserve them before destroying them."),Eo.forEach(e),N.forEach(e),ce=p(h),y=a(h,"SECTION",{});var f=o(y);At=a(f,"H3",{});var Oo=o(At);F=a(Oo,"A",{href:!0,id:!0});var Po=o(F);Ds=r(Po,"- Cost of creating DOM elements"),Po.forEach(e),Oo.forEach(e),Ns=p(f),Rt=a(f,"P",{});var To=o(Rt);Us=r(To,"It is much costly to recreate all the DOM elements needed instead of reuse and update the existing DOM elements."),To.forEach(e),Ms=p(f),Wt=a(f,"P",{});var Io=o(Wt);As=r(Io,"@@@@@@@@@@@@"),Io.forEach(e),Rs=p(f),Lt=a(f,"P",{});var So=o(Lt);Ws=r(So,"Now let's"),So.forEach(e),Ls=p(f),C=a(f,"P",{});var kt=o(C);Hs=r(kt,"framework needs to know "),Ht=a(kt,"STRONG",{});var Co=o(Ht);$s=r(Co,"what has changed"),Co.forEach(e),Gs=r(kt," and then based on that, figure out "),$t=a(kt,"STRONG",{});var Do=o($t);qs=r(Do,"what needs to be updated"),Do.forEach(e),Fs=r(kt,"."),kt.forEach(e),Bs=p(f),Gt=a(f,"P",{});var No=o(Gt);js=r(No,"@@@@@@@@@@@@"),No.forEach(e),Vs=p(f),x=a(f,"P",{});var T=o(x);Js=r(T,"Different "),qt=a(T,"STRONG",{});var Uo=o(qt);zs=r(Uo,'"templating" strategies'),Uo.forEach(e),Zs=r(T," and "),pt=a(T,"A",{href:!0});var Mo=o(pt);Ks=r(Mo,"WHEN strategies"),Mo.forEach(e),Qs=r(T," give the framework varying amount of information in terms of "),Ft=a(T,"STRONG",{});var Ao=o(Ft);Xs=r(Ao,"what has changed"),Ao.forEach(e),Ys=r(T," and "),Bt=a(T,"STRONG",{});var Ro=o(Bt);ta=r(Ro,"what needs to be updated"),Ro.forEach(e),ea=r(T,"."),T.forEach(e),sa=p(f),jt=a(f,"P",{});var Wo=o(jt);aa=r(Wo,"We can put that variance in the amount of information into a spectrum."),Wo.forEach(e),f.forEach(e),he=p(h),u=a(h,"SECTION",{});var w=o(u);Vt=a(w,"H3",{});var Lo=o(Vt);B=a(Lo,"A",{href:!0,id:!0});var Ho=o(B);oa=r(Ho,"Framework knows nothing about what has changed"),Ho.forEach(e),Lo.forEach(e),na=p(w),j=a(w,"P",{});var xe=o(j);ra=r(xe,"At one end, our framework "),Jt=a(xe,"STRONG",{});var $o=o(Jt);la=r($o,"knows nothing about what has changed"),$o.forEach(e),ia=r(xe,". To update the application without knowing what has change, the quickest and dirtiest mechanism would be to recreate everything."),xe.forEach(e),pa=p(w),zt=a(w,"P",{});var Go=o(zt);ca=r(Go,"However that would come with costs:"),Go.forEach(e),ha=p(w),V=a(w,"UL",{});var ge=o(V);Zt=a(ge,"LI",{});var qo=o(Zt);ka=r(qo,"losing focus"),qo.forEach(e),da=p(ge),Kt=a(ge,"LI",{});var Fo=o(Kt);va=r(Fo,"cost of creating new elements, DOM manipulations"),Fo.forEach(e),ge.forEach(e),ya=p(w),Qt=a(w,"P",{});var Bo=o(Qt);ua=r(Bo,"So, a more well-thought mechanism is to create a intermediate representation of the UI. Instead of tearing down and recreate every DOM element everytime when there's an update, we compare the latest intermediate representation with the previous one, figure out the difference between the two representations and generate a list of operations needed to patch the DOM."),Bo.forEach(e),fa=p(w),ct=a(w,"DIV",{class:!0});var xn=o(ct);xn.forEach(e),wa=p(w),D=a(w,"P",{});var dt=o(D);ma=r(dt,"By finding the differences between the new and old representations, framework figures out "),Xt=a(dt,"STRONG",{});var jo=o(Xt);xa=r(jo,"what needs to be updated"),jo.forEach(e),ga=r(dt," without knowing "),Yt=a(dt,"STRONG",{});var Vo=o(Yt);_a=r(Vo,"what has changed"),Vo.forEach(e),ba=r(dt,"."),dt.forEach(e),Ea=p(w),te=a(w,"P",{});var Jo=o(te);Oa=r(Jo,"The main advantage of this mechanism is that, the intermediate representation is way cheaper to create and manipulate."),Jo.forEach(e),w.forEach(e),ke=p(h),_=a(h,"SECTION",{});var M=o(_);ee=a(M,"H3",{});var zo=o(ee);J=a(zo,"A",{href:!0,id:!0});var Zo=o(J);Pa=r(Zo,"Framework knows exactly what has changed and what needs to be updated"),Zo.forEach(e),zo.forEach(e),Ta=p(M),se=a(M,"P",{});var Ko=o(se);Ia=r(Ko,"On the other extreme end of the spectrum, framework knows exactly what has changed and what needs to be updated."),Ko.forEach(e),Sa=p(M),ae=a(M,"P",{});var Qo=o(ae);Ca=r(Qo,"This is the most efficient way of updating the UI, where everything needed by the framework has already been figured out. So the only thing the framework needs to do is to apply those updates to the DOM."),Qo.forEach(e),Da=p(M),ht=a(M,"DIV",{class:!0});var gn=o(ht);gn.forEach(e),M.forEach(e),de=p(h),m=a(h,"SECTION",{});var I=o(m);oe=a(I,"H2",{});var Xo=o(oe);z=a(Xo,"A",{href:!0,id:!0});var Yo=o(z);Na=r(Yo,"The Component Model"),Yo.forEach(e),Xo.forEach(e),Ua=p(I),ne=a(I,"P",{});var tn=o(ne);Ma=r(tn,"TODO:"),tn.forEach(e),Aa=p(I),re=a(I,"P",{});var en=o(re);Ra=r(en,"Components With component model, we can break the application up into is composed with components."),en.forEach(e),Wa=p(I),le=a(I,"P",{});var sn=o(le);La=r(sn,`So, if the framework is able to figure out what needs to be updated early on, then , the more efficient it is (without having to figure out what needs to be updated later on)
decides whether the framework`),sn.forEach(e),Ha=p(I),ie=a(I,"P",{});var an=o(ie);$a=r(an,'Different "templating" strategies and [WHEN strategies'),an.forEach(e),I.forEach(e),this.h()},h(){k(v,"href","#what-is-reactivity"),k(v,"id","what-is-reactivity"),k(Q,"href","/reactivity-in-web-frameworks-the-when"),k(X,"class","code-section"),k(tt,"href","/reactivity-in-web-frameworks-the-when#mutation-tracking"),k(L,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy"),k(L,"rel","nofollow"),k(st,"class","inline"),k(H,"href","/reactivity-in-web-frameworks-the-when#just-call-schedule-update"),k(ot,"class","inline"),k(rt,"href","/reactivity-in-web-frameworks-the-when#static-analysis"),k(lt,"class","inline"),k(it,"class","code-section"),k(q,"href","#losing-element-state"),k(q,"id","losing-element-state"),k(F,"href","#cost-of-creating-dom-elements"),k(F,"id","cost-of-creating-dom-elements"),k(pt,"href","/reactivity-in-web-frameworks-the-when#the-when"),k(B,"href","#framework-knows-nothing-about-what-has-changed"),k(B,"id","framework-knows-nothing-about-what-has-changed"),k(ct,"class","code-section"),k(J,"href","#framework-knows-exactly-what-has-changed-and-what-needs-to-be-updated"),k(J,"id","framework-knows-exactly-what-has-changed-and-what-needs-to-be-updated"),k(ht,"class","code-section"),k(z,"href","#the-component-model"),k(z,"id","the-component-model")},m(h,l){cn(d,h,l),b(h,E,l),b(h,c,l),t(c,S),t(S,v),t(v,O),t(c,K),t(c,vt),t(vt,_e),t(c,be),t(c,yt),t(yt,Ee),t(c,Oe),t(c,ut),t(ut,Pe),t(c,Te),t(c,A),t(A,ft),t(ft,Ie),t(A,Se),t(A,wt),t(wt,Ce),t(c,De),t(c,R),t(R,Ne),t(R,Q),t(Q,Ue),t(R,Me),t(c,Ae),t(c,X),X.innerHTML=vn,t(c,Re),t(c,mt),t(mt,We),t(c,Le),t(c,xt),t(xt,Y),t(Y,He),t(Y,tt),t(tt,$e),t(c,Ge),t(c,W),t(W,qe),t(W,L),t(L,Fe),t(W,Be),t(c,je),t(c,gt),t(gt,et),t(et,Ve),t(et,H),t(H,Je),t(H,st),t(st,ze),t(c,Ze),t(c,at),t(at,Ke),t(at,ot),t(ot,Qe),t(c,Xe),t(c,_t),t(_t,nt),t(nt,Ye),t(nt,rt),t(rt,ts),t(c,es),t(c,$),t($,ss),t($,lt),t(lt,as),t($,os),t(c,ns),t(c,bt),t(bt,rs),t(c,ls),t(c,Et),t(Et,is),t(c,ps),t(c,G),t(G,cs),t(G,Ot),t(Ot,hs),t(G,ks),t(c,ds),t(c,Pt),t(Pt,vs),t(c,ys),t(c,it),it.innerHTML=yn,t(c,us),t(c,Tt),t(Tt,fs),b(h,pe,l),b(h,g,l),t(g,It),t(It,q),t(q,ws),t(g,ms),t(g,St),t(St,xs),t(g,gs),t(g,P),t(P,Ct),t(Ct,_s),t(P,bs),t(P,Dt),t(Dt,Es),t(P,Os),t(P,Nt),t(Nt,Ps),t(P,Ts),t(P,Ut),t(Ut,Is),t(g,Ss),t(g,Mt),t(Mt,Cs),b(h,ce,l),b(h,y,l),t(y,At),t(At,F),t(F,Ds),t(y,Ns),t(y,Rt),t(Rt,Us),t(y,Ms),t(y,Wt),t(Wt,As),t(y,Rs),t(y,Lt),t(Lt,Ws),t(y,Ls),t(y,C),t(C,Hs),t(C,Ht),t(Ht,$s),t(C,Gs),t(C,$t),t($t,qs),t(C,Fs),t(y,Bs),t(y,Gt),t(Gt,js),t(y,Vs),t(y,x),t(x,Js),t(x,qt),t(qt,zs),t(x,Zs),t(x,pt),t(pt,Ks),t(x,Qs),t(x,Ft),t(Ft,Xs),t(x,Ys),t(x,Bt),t(Bt,ta),t(x,ea),t(y,sa),t(y,jt),t(jt,aa),b(h,he,l),b(h,u,l),t(u,Vt),t(Vt,B),t(B,oa),t(u,na),t(u,j),t(j,ra),t(j,Jt),t(Jt,la),t(j,ia),t(u,pa),t(u,zt),t(zt,ca),t(u,ha),t(u,V),t(V,Zt),t(Zt,ka),t(V,da),t(V,Kt),t(Kt,va),t(u,ya),t(u,Qt),t(Qt,ua),t(u,fa),t(u,ct),ct.innerHTML=un,t(u,wa),t(u,D),t(D,ma),t(D,Xt),t(Xt,xa),t(D,ga),t(D,Yt),t(Yt,_a),t(D,ba),t(u,Ea),t(u,te),t(te,Oa),b(h,ke,l),b(h,_,l),t(_,ee),t(ee,J),t(J,Pa),t(_,Ta),t(_,se),t(se,Ia),t(_,Sa),t(_,ae),t(ae,Ca),t(_,Da),t(_,ht),ht.innerHTML=fn,b(h,de,l),b(h,m,l),t(m,oe),t(oe,z),t(z,Na),t(m,Ua),t(m,ne),t(ne,Ma),t(m,Aa),t(m,re),t(re,Ra),t(m,Wa),t(m,le),t(le,La),t(m,Ha),t(m,ie),t(ie,$a),ve=!0},p:Tn,i(h){ve||(hn(d.$$.fragment,h),ve=!0)},o(h){kn(d.$$.fragment,h),ve=!1},d(h){dn(d,h),h&&e(E),h&&e(c),h&&e(pe),h&&e(g),h&&e(ce),h&&e(y),h&&e(he),h&&e(u),h&&e(ke),h&&e(_),h&&e(de),h&&e(m)}}}function Nn(Z){let d,E;const c=[Z[0],rn];let S={$$slots:{default:[Dn]},$$scope:{ctx:Z}};for(let v=0;v<c.length;v+=1)S=Va(S,c[v]);return d=new In({props:S}),{c(){ln(d.$$.fragment)},l(v){pn(d.$$.fragment,v)},m(v,O){cn(d,v,O),E=!0},p(v,[O]){const K=O&1?On(c,[O&1&&on(v[0]),O&0&&on(rn)]):{};O&2&&(K.$$scope={dirty:O,ctx:v}),d.$set(K)},i(v){E||(hn(d.$$.fragment,v),E=!0)},o(v){kn(d.$$.fragment,v),E=!1},d(v){dn(d,v)}}}const rn={title:"Reactivity in Web Frameworks (Part 2)",date:"2020-03-05T08:00:00Z",description:"Reactivity is the ability of a web framework to update your view whenever the application state has changed. How do web frameworks achieve reactivity?",wip:!0,label:"blog"};function Un(Z,d,E){return Pn("blog",{image:Cn}),Z.$$set=c=>{E(0,d=Va(Va({},d),nn(c)))},d=nn(d),[d]}class Gn extends _n{constructor(d){super();bn(this,d,Un,Nn,En,{})}}export{Gn as default,rn as metadata};
