import{S as Sc,i as Pc,s as Tc,C as Jr,w as Fp,x as Hp,y as Np,z as Ac,A as Lp,q as Wp,o as Vp,B as $p,r as Dc,R as Mp,k as i,e as t,t as e,m as p,c as n,a as l,h as o,d as a,b as r,g as I,F as s,O as Oc}from"../../chunks/vendor-6bf294e3.js";import{B as qc}from"../../chunks/BlogLayout-152f599b.js";import{T as Lc}from"../../chunks/TableOfContent-1b9e4572.js";import{_ as Mc}from"../../chunks/twitter-card-image-a57df29d.js";import"../../chunks/stores-e20b7872.js";import"../../chunks/WebMentions-745413ea.js";/* empty css                                */function jc(Gs){let u,q,D,ns,w,v,K,ls,da,ya,ko,ua,fa,vo,ma,xa,zs,Up=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">&quot;css&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;http://cdn/assets/style.xxx.css&quot;</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">&quot;html&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&lt;div class=&quot;container_xyz&quot;&gt;Hello world&lt;/div&gt;&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,wa,Ks,Rp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">/* filename: http://cdn/assets/style.xxx.css */</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">.container_xyz</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">font-family</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Comic Sans&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ga,R,ba,rs,_a,Ea,is,Ia,Ca,Sa,Qs,Jp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> express </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;express&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> React </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;react&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; renderToStaticMarkup &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;react-dom/server&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> styles </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./app.scss&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">express</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (req</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> res) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">className</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">&#123;</span><span style="color: var(--shiki-token-constant)">styles</span><span style="color: var(--shiki-color-text)">.container&#125;&gt;Hello world&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">htmlContent</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">renderToStaticMarkup</span><span style="color: var(--shiki-color-text)">(app);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">res</span><span style="color: var(--shiki-token-function)">.json</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    css</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> []</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    html</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> htmlContent</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.listen</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">process</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">env</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">PORT</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,Pa,yo,Ta,Aa,uo,Da,Oa,fo,qa,No,f,mo,ps,La,Ma,cs,ja,hs,Fa,Ha,Na,Zs,Yp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> webpackManifest </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./dist/webpack-manifest.json&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">cssFiles</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">filterCssFiles</span><span style="color: var(--shiki-color-text)">(webpackManifest);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (req</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> res) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">res</span><span style="color: var(--shiki-token-function)">.json</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    css</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> cssFiles</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    html</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> htmlContent</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`,Wa,ks,Va,Xs,$a,Ua,Ra,S,Ja,se,Ya,Ba,vs,xo,Ga,za,ee,Ka,Qa,oe,Za,Xa,ae,st,et,ot,te,Bp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">webpackManifest</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">__non_webpack_require__</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;./dist/webpack-manifest.json&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">cssFiles</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">filterCssFiles</span><span style="color: var(--shiki-color-text)">(webpackManifest);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (req</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> res) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">res</span><span style="color: var(--shiki-token-function)">.json</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    css</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> cssFiles</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    html</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> htmlContent</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`,at,ds,tt,ne,nt,lt,rt,ys,it,le,pt,ct,ht,re,Gp=`<pre class="prism language-"><code><span class="line">dist</span>
<span class="line">\u251C\u2500\u2500 webpack-manifest.json</span>
<span class="line">\u2514\u2500\u2500 bundle.js  // &lt;-- the main output bundle</span></code></pre>`,kt,us,vt,ie,dt,yt,Wo,m,wo,fs,ut,ft,L,mt,ms,xt,wt,xs,gt,bt,pe,_t,Et,It,ce,zp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> webpackManifest </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;webpack-manifest&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">cssFiles</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">filterCssFiles</span><span style="color: var(--shiki-color-text)">(webpackManifest);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`,Ct,he,Kp=`<div class="filename">webpack.config.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  externals</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">&#39;webpack-manifest&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;commonjs2 ./webpack-manifest.json&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,St,go,Pt,Tt,ke,Qp=`<div class="filename">bundle.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">webpackManifest</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;./webpack-manifest.json&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">cssFiles</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">filterCssFiles</span><span style="color: var(--shiki-color-text)">(webpackManifest);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`,At,ws,Dt,ve,Ot,qt,Lt,de,Zp=`<pre class="prism language-"><code><span class="line">dist</span>
<span class="line">\u251C\u2500\u2500 bundle.js  // &lt;-- the main output bundle</span>
<span class="line">\u2514\u2500\u2500 webpack-manifest.json // &lt;-- relative to bundle.js</span></code></pre>`,Mt,gs,jt,bs,Ft,Ht,Vo,h,bo,_s,Nt,Wt,Es,Vt,ye,$t,Ut,Rt,ue,Xp=`<div class="filename">bundle.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// added by template plugin</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS_FILES</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&#39;http://cdn/assets/style.xxx.css&#39;</span><span style="color: var(--shiki-color-text)">];</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// END added by template plugin</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...the main bundle</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (req</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> res) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">res</span><span style="color: var(--shiki-token-function)">.json</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    css</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS_FILES</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    html</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> htmlContent</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,Jt,J,Yt,fe,Bt,Gt,me,zt,Kt,Qt,Is,Zt,xe,Xt,sn,en,we,sc=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ManifestPlugin</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;webpack-manifest-plugin&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">MyWebpackPlugin</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">apply</span><span style="color: var(--shiki-color-text)">(compiler) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ManifestPlugin</span><span style="color: var(--shiki-color-text)">(manifestOptions)</span><span style="color: var(--shiki-token-function)">.apply</span><span style="color: var(--shiki-color-text)">(compiler);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// get manifest from &#96;webpack-manifest-plugin&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">ManifestPlugin</span><span style="color: var(--shiki-token-function)">.getCompilerHooks</span><span style="color: var(--shiki-color-text)">(compiler).</span><span style="color: var(--shiki-token-constant)">afterEmit</span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#39;MyWebpackPlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      manifest </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> manifest;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// see https://lihautan.com/webpack-plugin-main-template</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// on writing template plugin</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">compiler</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">hooks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">thisCompilation</span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;MyWebpackPlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> compilation </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">hooks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">render</span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;MyWebpackPlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (source</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; chunk</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> chunkGraph &#125;) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">prefix</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;const CSS_FILES = </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-token-function)">.stringify</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest)</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">;&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ConcatSource</span><span style="color: var(--shiki-color-text)">(prefix</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> source);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,on,_o,an,tn,ge,ec=`<div class="filename">bundle.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS_FILES</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">undefined</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...continue with bundle.js</span></span></code></pre>`,nn,Cs,ln,Ss,rn,pn,cn,Ps,hn,Ts,kn,vn,dn,_,Eo,yn,un,Io,fn,mn,Co,xn,wn,So,gn,bn,Po,_n,En,To,In,Cn,Ao,Sn,Pn,Do,Tn,An,T,Dn,Y,On,be,qn,Ln,Mn,_e,jn,Fn,Ee,Hn,Nn,Ie,Wn,Vn,$n,Ce,oc=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">thisCompliation</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest </span><span style="color: var(--shiki-token-keyword)">==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">undefined</span><span style="color: var(--shiki-color-text)">;)</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">emit</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> manifest) </span><span style="color: var(--shiki-token-comment)">// too late!</span></span></code></pre>`,Un,M,Rn,Se,Jn,Yn,Pe,Bn,Gn,Te,zn,Kn,Qn,Ae,ac=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ManifestPlugin</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;webpack-manifest-plugin&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">MyWebpackPlugin</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">apply</span><span style="color: var(--shiki-color-text)">(compiler) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ManifestPlugin</span><span style="color: var(--shiki-color-text)">(manifestOptions)</span><span style="color: var(--shiki-token-function)">.apply</span><span style="color: var(--shiki-color-text)">(compiler);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// get manifest from &#96;webpack-manifest-plugin&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">ManifestPlugin</span><span style="color: var(--shiki-token-function)">.getCompilerHooks</span><span style="color: var(--shiki-color-text)">(compiler).</span><span style="color: var(--shiki-token-constant)">afterEmit</span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#39;MyWebpackPlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      manifest </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> manifest;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">compiler</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">hooks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">emit</span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;MyWebpackPlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> compilation </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">prefix</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;const CSS_FILES = </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-token-function)">.stringify</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest)</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">;&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">file</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Object</span><span style="color: var(--shiki-token-function)">.keys</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">compilation</span><span style="color: var(--shiki-color-text)">.assets)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-token-constant)">file</span><span style="color: var(--shiki-token-function)">.endsWith</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;.js&#39;</span><span style="color: var(--shiki-color-text)">)) </span><span style="color: var(--shiki-token-keyword)">continue</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">compilation</span><span style="color: var(--shiki-color-text)">.assets[file] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ConcatSource</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          prefix</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-constant)">compilation</span><span style="color: var(--shiki-color-text)">.assets[file]</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        );</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Zn,As,Xn,De,sl,el,ol,j,al,Oe,tl,nl,qe,ll,rl,Le,il,pl,$o,N,Oo,Ds,cl,hl,Os,kl,qs,vl,dl,yl,Q,Ls,ul,fl,Me,ml,Uo,d,qo,Ms,xl,wl,B,gl,js,je,bl,_l,Lo,El,Il,Cl,F,Sl,Fe,Pl,Tl,He,Al,Dl,Ne,Ol,ql,Ll,We,tc=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">MyWebpackPlugin</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">apply</span><span style="color: var(--shiki-color-text)">(compiler) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">compiler</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">hooks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">thisCompilation</span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;MyWebpackPlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> compilation </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">compilation</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">hooks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">needAdditionalPass</span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;MyWebpackPlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// if it is always true, will lead to infinite loop!</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ml,Ve,nc=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">thisCompliation</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest </span><span style="color: var(--shiki-token-keyword)">==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">undefined</span><span style="color: var(--shiki-color-text)">;)</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">emit</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> manifest) </span><span style="color: var(--shiki-token-comment)">// too late!</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">needAddtionalPass</span><span style="color: var(--shiki-color-text)"> (return </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// to start the compilation again</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">thisCompilation</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest </span><span style="color: var(--shiki-token-keyword)">==</span><span style="color: var(--shiki-color-text)"> manifest) </span><span style="color: var(--shiki-token-comment)">// now &#96;this.manifest&#96; is available</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ... will continue run through every stages again</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">emit</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> manifest)</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`,jl,Fs,Fl,$e,Hl,Nl,Wl,G,Vl,Ue,$l,Ul,Re,Rl,Jl,Yl,H,Bl,Z,Gl,Je,zl,Kl,Ye,Ql,Zl,Be,Xl,sr,er,A,or,Hs,Mo,ar,tr,Ge,nr,lr,ze,rr,ir,Ke,pr,cr,hr,Qe,lc=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">MyWebpackPlugin</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">apply</span><span style="color: var(--shiki-color-text)">(compiler) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">compiler</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">hooks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">thisCompilation</span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#39;MyWebpackPlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      (compilation</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; normalModuleFactory &#125;) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">normalModuleFactory</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">hooks</span><span style="color: var(--shiki-color-text)">.parser</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">.for</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;javascript/auto&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;MyWebpackPlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parser </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-constant)">parser</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">hooks</span><span style="color: var(--shiki-color-text)">.expression</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">.for</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;CSS_FILES&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;MyWebpackPlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> expr </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ParserHelpers</span><span style="color: var(--shiki-token-function)">.toConstantDependency</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">                  parser</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-token-function)">.stringify</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">                )(expr);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">              &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">          &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,kr,Ns,vr,Ws,dr,yr,ur,jo,fr,mr,Ze,rc=`<div class="filename">bundle.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (req</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> res) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">res</span><span style="color: var(--shiki-token-function)">.json</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// replaced via parser hooks</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    css</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&#39;http://cdn/assets/style.xxx.css&#39;</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    html</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> htmlContent</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,Ro,W,Fo,Vs,xr,wr,$s,gr,Xe,br,_r,Er,Us,Ir,Rs,Cr,Sr,Jo,V,Ho,Js,Pr,Tr,Ys,Ar,Bs,Dr,Or,qr,X,P,Lr,so,Mr,jr,eo,Fr,Hr,oo,Nr,Wr,ao,Vr,$r,to,Ur,Yo;return u=new Lc({props:{data:[{link:"the-problem",title:"The problem"},{link:"the-st-approach",title:"The 1st approach",nested:[{link:"updated-feb",title:"Updated Feb 27, 2020"}]},{link:"the-nd-approach",title:"The 2nd approach",nested:[{link:"updated-feb",title:"Updated Feb 27, 2020"}]},{link:"the-rd-approach",title:"The 3rd approach"},{link:"closing-notes",title:"Closing Notes",nested:[{link:"updated-feb",title:"Updated Feb 27, 2020"}]}]}}),{c(){Fp(u.$$.fragment),q=i(),D=t("p"),ns=e('Recently, I was working on a server-side rendering application, and encounter a scenario that I think it requires "double compilation" with webpack.'),w=i(),v=t("section"),K=t("h2"),ls=t("a"),da=e("The problem"),ya=i(),ko=t("p"),ua=e("I am not entirely sure I am doing it in the right approach, feel free to suggest or discuss it with me. The following will be about the problem I faced and how I worked on it."),fa=i(),vo=t("p"),ma=e("The server-side rendering application that I worked on, has an endpoint that takes in request and respond with a partial HTML content and CSS files required for styling:"),xa=i(),zs=t("div"),wa=i(),Ks=t("div"),ga=i(),R=t("p"),ba=e("The application code itself uses "),rs=t("a"),_a=e("Express"),Ea=e(" and "),is=t("a"),Ia=e("React"),Ca=e(":"),Sa=i(),Qs=t("div"),Pa=i(),yo=t("p"),Ta=e("Now, the problem is, how do I get the list of CSS files?"),Aa=i(),uo=t("p"),Da=e("The list of CSS files produced by the build is only available after I compile the application, but I need the information to be part of compiled code."),Oa=i(),fo=t("p"),qa=e("The compiled code being part of the compilation, needs to contain information of the compilation."),No=i(),f=t("section"),mo=t("h2"),ps=t("a"),La=e("The 1st approach"),Ma=i(),cs=t("p"),ja=e("A naive solution at first is to use "),hs=t("a"),Fa=e("Webpack Manifest Plugin"),Ha=e(" to get the compilation manifest, and in the code, import the manifest as json and consumes it:"),Na=i(),Zs=t("div"),Wa=i(),ks=t("p"),Va=e("Yet, the "),Xs=t("code"),$a=e("./dist/webpack-manifest.json"),Ua=e(" is not available in the first place, before compiling the code."),Ra=i(),S=t("p"),Ja=e("Since the "),se=t("code"),Ya=e("./dist/webpack-manifest.json"),Ba=e(" can only be available after build, maybe we can import it during runtime, using "),vs=t("a"),xo=t("strong"),Ga=e("non_webpack_require"),za=e(". The difference between "),ee=t("code"),Ka=e("require"),Qa=e(" and "),oe=t("code"),Za=e("__non_webpack_require__"),Xa=e(" is that the latter is webpack specific, which tells webpack to transform it to just pure "),ae=t("code"),st=e("require()"),et=e(" expression, without bundling the required module:"),ot=i(),te=t("div"),at=i(),ds=t("p"),tt=e("If you scrutinize the code, you may wonder whether "),ne=t("code"),nt=e("./dist/webpack-manifest.json"),lt=e(" is the correct relative path from the compiled code?"),rt=i(),ys=t("p"),it=e("Probably "),le=t("code"),pt=e("./webpack-manifest.json"),ct=e(" would be more accurate, if our output folder looks like this:"),ht=i(),re=t("div"),kt=i(),us=t("p"),vt=e(`One can safely argue that, the approach above works and let's move on the next task. But, curiosity drives me to seek deeper for a more "elegant" solution, where one don't need `),ie=t("code"),dt=e("require('webpack-manifest.json')"),yt=e(" in runtime, but that information is compiled into the code."),Wo=i(),m=t("section"),wo=t("h3"),fs=t("a"),ut=e("[Updated Feb 27, 2020]"),ft=i(),L=t("p"),mt=e("Thanks to "),ms=t("a"),xt=e("@wSokra"),wt=e("'s "),xs=t("a"),gt=e("suggestion"),bt=e(", instead of using "),pe=t("code"),_t=e("__non_webpack_require__()"),Et=e(", you can use a normal import and declaring the manifest file as an external:"),It=i(),ce=t("div"),Ct=i(),he=t("div"),St=i(),go=t("p"),Pt=e("What this output is something similar to the following:"),Tt=i(),ke=t("div"),At=i(),ws=t("p"),Dt=e("The reason we are using the relative path "),ve=t("code"),Ot=e("./webpack-manifest.json"),qt=e(" is that we are assuming the output folder looks like this:"),Lt=i(),de=t("div"),Mt=i(),gs=t("p"),jt=e("You can read more about webpack externals from "),bs=t("a"),Ft=e("the webpack documentation"),Ht=e("."),Vo=i(),h=t("section"),bo=t("h2"),_s=t("a"),Nt=e("The 2nd approach"),Wt=i(),Es=t("p"),Vt=e('So, the next "intuitive" approach is to '),ye=t("a"),$t=e("write a custom template plugin"),Ut=e(", that adds the webpack manifest on top of the main bundle, an example of the output:"),Rt=i(),ue=t("div"),Jt=i(),J=t("p"),Yt=e("In the source code, I will use the global variable "),fe=t("code"),Bt=e("CSS_FILES"),Gt=e(", and hopefully it will get defined by webpack, by adding "),me=t("code"),zt=e("const CSS_FILES = ..."),Kt=e(" at the very top of the file."),Qt=i(),Is=t("p"),Zt=e("And to be extra careful, I have to make sure also that there's no variable "),xe=t("code"),Xt=e("CSS_FILES"),sn=e(" declared between the global scope and the current scope the variable is being used."),en=i(),we=t("div"),on=i(),_o=t("p"),an=e("Apparently, this does not work at all. The compiled output shows:"),tn=i(),ge=t("div"),nn=i(),Cs=t("p"),ln=e("After tracing through the code, I realised that I was ignorant of the sequence of execution of the "),Ss=t("a"),rn=e("compiler hooks"),pn=e("."),cn=i(),Ps=t("p"),hn=e("In the "),Ts=t("a"),kn=e("docs for compiler hooks"),vn=e(", each hooks is executed in sequence:"),dn=i(),_=t("ul"),Eo=t("li"),yn=e("..."),un=i(),Io=t("li"),fn=e("run"),mn=i(),Co=t("li"),xn=e("..."),wn=i(),So=t("li"),gn=e("thisCompilation"),bn=i(),Po=t("li"),_n=e("..."),En=i(),To=t("li"),In=e("emit"),Cn=i(),Ao=t("li"),Sn=e("afterEmit"),Pn=i(),Do=t("li"),Tn=e("..."),An=i(),T=t("p"),Dn=e("The webpack manifest plugin executes mainly "),Y=t("a"),On=e("during the "),be=t("code"),qn=e("emit"),Ln=e(" phase"),Mn=e(", right before webpack writes all the assets into the output directory. And, we are modifying the template source in the "),_e=t("code"),jn=e("thisCompilation"),Fn=e(" phase, which is way before the "),Ee=t("code"),Hn=e("emit"),Nn=e(" phase. That's why "),Ie=t("code"),Wn=e("this.manifest"),Vn=e(" property is still undefined at the time of execution."),$n=i(),Ce=t("div"),Un=i(),M=t("p"),Rn=e("Upon reading the code fot he "),Se=t("code"),Jn=e("webpack-manifest-plugin"),Yn=e(", I realised that during the "),Pe=t("code"),Bn=e("emit"),Gn=e(" phase, I can access to the "),Te=t("code"),zn=e("compilation.assets"),Kn=e(", and so, I could modifying the source for the assets during that time!"),Qn=i(),Ae=t("div"),Zn=i(),As=t("p"),Xn=e("Apparently that works, but I wonder whether is it a good practice to modifying the source of an asset during the "),De=t("code"),sl=e("emit"),el=e(" phase? \u{1F914}"),ol=i(),j=t("p"),al=e("And, if you noticed, I need to append the "),Oe=t("code"),tl=e("const CSS_FILES = [...]"),nl=e(" to every file, that's because I have no idea in which file "),qe=t("code"),ll=e("CSS_FILES"),rl=e(" is referenced. And because I declared it using "),Le=t("code"),il=e("const"),pl=e(", it only exists within the file's scope, so I have to redeclare it all the other files."),$o=i(),N=t("section"),Oo=t("h3"),Ds=t("a"),cl=e("[Updated Feb 27, 2020]"),hl=i(),Os=t("p"),kl=e("According to "),qs=t("a"),vl=e("@evilebottnawi"),dl=e(" that this is not appropriate"),yl=i(),Q=t("blockquote"),Ls=t("p"),ul=e("A lot of plugin uses `compiler.hooks.emit` for emitting new assets, it is invalid. Ideally plugins should use `compilation.hooks.additionalAssets` for adding new assets."),fl=e("\u2014 evilebottnawi (@evilebottnawi) "),Me=t("a"),ml=e("February 20, 2020"),Uo=i(),d=t("section"),qo=t("h2"),Ms=t("a"),xl=e("The 3rd approach"),wl=i(),B=t("p"),gl=e("I was still not convinced that this is the best I could do, so I continued looking around webpack's doc. I found a particular compilation hooks, "),js=t("a"),je=t("code"),bl=e("needAdditionalPass"),_l=e(", which seems useful. It says, "),Lo=t("em"),El=e('"Called to determine if an asset needs to be processed further after being emitted."'),Il=e("."),Cl=i(),F=t("p"),Sl=e("So, if I return "),Fe=t("code"),Pl=e("true"),Tl=e(" in the "),He=t("code"),Al=e("needAdditionalPass"),Dl=e(", webpack will re"),Ne=t("code"),Ol=e("compile"),ql=e(" the asset again:"),Ll=i(),We=t("div"),Ml=i(),Ve=t("div"),jl=i(),Fs=t("p"),Fl=e("Note that using "),$e=t("code"),Hl=e("needAdditionalPass"),Nl=e(" will cause the build time to roughly doubled!"),Wl=i(),G=t("p"),Vl=e("You may argue that why do we need to rerun the "),Ue=t("code"),$l=e("compilation"),Ul=e(" process again, isn't the end result can be equally achieved by modifying the assets source in the "),Re=t("code"),Rl=e("emit"),Jl=e(" phase?"),Yl=i(),H=t("p"),Bl=e("Well, that's because, I realised I could make use "),Z=t("a"),Gl=e("some of the code from the "),Je=t("code"),zl=e("DefinePlugin"),Kl=e(", which could replace the usage of "),Ye=t("code"),Ql=e("CSS_FILES"),Zl=e(" throughout the code. That way, I don't have to prefix every file with "),Be=t("code"),Xl=e("const CSS_FILES = ..."),sr=e("."),er=i(),A=t("p"),or=e("DefinePlugin uses something called "),Hs=t("a"),Mo=t("strong"),ar=e("JavaScriptParser Hooks"),tr=e(", which you can rename a variable through "),Ge=t("code"),nr=e("canRename"),lr=e(" and "),ze=t("code"),rr=e("identifier"),ir=e(" hooks or replace an expression through the "),Ke=t("code"),pr=e("expression"),cr=e(" hook:"),hr=i(),Qe=t("div"),kr=i(),Ns=t("p"),vr=e("The complete code can be found in "),Ws=t("a"),dr=e("this gist"),yr=e("."),ur=i(),jo=t("p"),fr=e("An example of the compiled output:"),mr=i(),Ze=t("div"),Ro=i(),W=t("section"),Fo=t("h2"),Vs=t("a"),xr=e("Closing Notes"),wr=i(),$s=t("p"),gr=e("The compile output for the 3rd approach seemed to be better (more precise?) than the other, yet I am not entirely sure using a "),Xe=t("code"),br=e("needAdditionalPass"),_r=e(" is the right way of going about it."),Er=i(),Us=t("p"),Ir=e("So, "),Rs=t("a"),Cr=e("let me know"),Sr=e(" if you have any thoughts or suggestions, yea?"),Jo=i(),V=t("section"),Ho=t("h3"),Js=t("a"),Pr=e("[Updated Feb 27, 2020]"),Tr=i(),Ys=t("p"),Ar=e("You can read "),Bs=t("a"),Dr=e("the discussions that's happening on Twitter"),Or=e(":"),qr=i(),X=t("blockquote"),P=t("p"),Lr=e("Need some suggestions and inputs from "),so=t("a"),Mr=e("@webpack"),jr=e(" masters, I've written the problem and approaches that I've taken over here: "),eo=t("a"),Fr=e("https://t.co/gLsPG9Joeq"),Hr=e(", still I'm not sure I am doing it right \u{1F648}"),oo=t("a"),Nr=e("@wSokra"),Wr=i(),ao=t("a"),Vr=e("@evilebottnawi"),$r=e("\u2014 Tan Li Hau (@lihautan) "),to=t("a"),Ur=e("February 20, 2020"),this.h()},l(c){Hp(u.$$.fragment,c),q=p(c),D=n(c,"P",{});var x=l(D);ns=o(x,'Recently, I was working on a server-side rendering application, and encounter a scenario that I think it requires "double compilation" with webpack.'),x.forEach(a),w=p(c),v=n(c,"SECTION",{});var g=l(v);K=n(g,"H2",{});var Yr=l(K);ls=n(Yr,"A",{href:!0,id:!0});var Br=l(ls);da=o(Br,"The problem"),Br.forEach(a),Yr.forEach(a),ya=p(g),ko=n(g,"P",{});var Gr=l(ko);ua=o(Gr,"I am not entirely sure I am doing it in the right approach, feel free to suggest or discuss it with me. The following will be about the problem I faced and how I worked on it."),Gr.forEach(a),fa=p(g),vo=n(g,"P",{});var zr=l(vo);ma=o(zr,"The server-side rendering application that I worked on, has an endpoint that takes in request and respond with a partial HTML content and CSS files required for styling:"),zr.forEach(a),xa=p(g),zs=n(g,"DIV",{class:!0});var ic=l(zs);ic.forEach(a),wa=p(g),Ks=n(g,"DIV",{class:!0});var pc=l(Ks);pc.forEach(a),ga=p(g),R=n(g,"P",{});var no=l(R);ba=o(no,"The application code itself uses "),rs=n(no,"A",{href:!0,rel:!0});var Kr=l(rs);_a=o(Kr,"Express"),Kr.forEach(a),Ea=o(no," and "),is=n(no,"A",{href:!0,rel:!0});var Qr=l(is);Ia=o(Qr,"React"),Qr.forEach(a),Ca=o(no,":"),no.forEach(a),Sa=p(g),Qs=n(g,"DIV",{class:!0});var cc=l(Qs);cc.forEach(a),Pa=p(g),yo=n(g,"P",{});var Zr=l(yo);Ta=o(Zr,"Now, the problem is, how do I get the list of CSS files?"),Zr.forEach(a),Aa=p(g),uo=n(g,"P",{});var Xr=l(uo);Da=o(Xr,"The list of CSS files produced by the build is only available after I compile the application, but I need the information to be part of compiled code."),Xr.forEach(a),Oa=p(g),fo=n(g,"P",{});var si=l(fo);qa=o(si,"The compiled code being part of the compilation, needs to contain information of the compilation."),si.forEach(a),g.forEach(a),No=p(c),f=n(c,"SECTION",{});var b=l(f);mo=n(b,"H2",{});var ei=l(mo);ps=n(ei,"A",{href:!0,id:!0});var oi=l(ps);La=o(oi,"The 1st approach"),oi.forEach(a),ei.forEach(a),Ma=p(b),cs=n(b,"P",{});var Bo=l(cs);ja=o(Bo,"A naive solution at first is to use "),hs=n(Bo,"A",{href:!0,rel:!0});var ai=l(hs);Fa=o(ai,"Webpack Manifest Plugin"),ai.forEach(a),Ha=o(Bo," to get the compilation manifest, and in the code, import the manifest as json and consumes it:"),Bo.forEach(a),Na=p(b),Zs=n(b,"DIV",{class:!0});var hc=l(Zs);hc.forEach(a),Wa=p(b),ks=n(b,"P",{});var Go=l(ks);Va=o(Go,"Yet, the "),Xs=n(Go,"CODE",{class:!0});var ti=l(Xs);$a=o(ti,"./dist/webpack-manifest.json"),ti.forEach(a),Ua=o(Go," is not available in the first place, before compiling the code."),Go.forEach(a),Ra=p(b),S=n(b,"P",{});var O=l(S);Ja=o(O,"Since the "),se=n(O,"CODE",{class:!0});var ni=l(se);Ya=o(ni,"./dist/webpack-manifest.json"),ni.forEach(a),Ba=o(O," can only be available after build, maybe we can import it during runtime, using "),vs=n(O,"A",{href:!0,rel:!0});var li=l(vs);xo=n(li,"STRONG",{});var ri=l(xo);Ga=o(ri,"non_webpack_require"),ri.forEach(a),li.forEach(a),za=o(O,". The difference between "),ee=n(O,"CODE",{class:!0});var ii=l(ee);Ka=o(ii,"require"),ii.forEach(a),Qa=o(O," and "),oe=n(O,"CODE",{class:!0});var pi=l(oe);Za=o(pi,"__non_webpack_require__"),pi.forEach(a),Xa=o(O," is that the latter is webpack specific, which tells webpack to transform it to just pure "),ae=n(O,"CODE",{class:!0});var ci=l(ae);st=o(ci,"require()"),ci.forEach(a),et=o(O," expression, without bundling the required module:"),O.forEach(a),ot=p(b),te=n(b,"DIV",{class:!0});var kc=l(te);kc.forEach(a),at=p(b),ds=n(b,"P",{});var zo=l(ds);tt=o(zo,"If you scrutinize the code, you may wonder whether "),ne=n(zo,"CODE",{class:!0});var hi=l(ne);nt=o(hi,"./dist/webpack-manifest.json"),hi.forEach(a),lt=o(zo," is the correct relative path from the compiled code?"),zo.forEach(a),rt=p(b),ys=n(b,"P",{});var Ko=l(ys);it=o(Ko,"Probably "),le=n(Ko,"CODE",{class:!0});var ki=l(le);pt=o(ki,"./webpack-manifest.json"),ki.forEach(a),ct=o(Ko," would be more accurate, if our output folder looks like this:"),Ko.forEach(a),ht=p(b),re=n(b,"DIV",{class:!0});var vc=l(re);vc.forEach(a),kt=p(b),us=n(b,"P",{});var Qo=l(us);vt=o(Qo,`One can safely argue that, the approach above works and let's move on the next task. But, curiosity drives me to seek deeper for a more "elegant" solution, where one don't need `),ie=n(Qo,"CODE",{class:!0});var vi=l(ie);dt=o(vi,"require('webpack-manifest.json')"),vi.forEach(a),yt=o(Qo," in runtime, but that information is compiled into the code."),Qo.forEach(a),b.forEach(a),Wo=p(c),m=n(c,"SECTION",{});var E=l(m);wo=n(E,"H3",{});var di=l(wo);fs=n(di,"A",{href:!0,id:!0});var yi=l(fs);ut=o(yi,"[Updated Feb 27, 2020]"),yi.forEach(a),di.forEach(a),ft=p(E),L=n(E,"P",{});var ss=l(L);mt=o(ss,"Thanks to "),ms=n(ss,"A",{href:!0,rel:!0});var ui=l(ms);xt=o(ui,"@wSokra"),ui.forEach(a),wt=o(ss,"'s "),xs=n(ss,"A",{href:!0,rel:!0});var fi=l(xs);gt=o(fi,"suggestion"),fi.forEach(a),bt=o(ss,", instead of using "),pe=n(ss,"CODE",{class:!0});var mi=l(pe);_t=o(mi,"__non_webpack_require__()"),mi.forEach(a),Et=o(ss,", you can use a normal import and declaring the manifest file as an external:"),ss.forEach(a),It=p(E),ce=n(E,"DIV",{class:!0});var dc=l(ce);dc.forEach(a),Ct=p(E),he=n(E,"DIV",{class:!0});var yc=l(he);yc.forEach(a),St=p(E),go=n(E,"P",{});var xi=l(go);Pt=o(xi,"What this output is something similar to the following:"),xi.forEach(a),Tt=p(E),ke=n(E,"DIV",{class:!0});var uc=l(ke);uc.forEach(a),At=p(E),ws=n(E,"P",{});var Zo=l(ws);Dt=o(Zo,"The reason we are using the relative path "),ve=n(Zo,"CODE",{class:!0});var wi=l(ve);Ot=o(wi,"./webpack-manifest.json"),wi.forEach(a),qt=o(Zo," is that we are assuming the output folder looks like this:"),Zo.forEach(a),Lt=p(E),de=n(E,"DIV",{class:!0});var fc=l(de);fc.forEach(a),Mt=p(E),gs=n(E,"P",{});var Xo=l(gs);jt=o(Xo,"You can read more about webpack externals from "),bs=n(Xo,"A",{href:!0,rel:!0});var gi=l(bs);Ft=o(gi,"the webpack documentation"),gi.forEach(a),Ht=o(Xo,"."),Xo.forEach(a),E.forEach(a),Vo=p(c),h=n(c,"SECTION",{});var k=l(h);bo=n(k,"H2",{});var bi=l(bo);_s=n(bi,"A",{href:!0,id:!0});var _i=l(_s);Nt=o(_i,"The 2nd approach"),_i.forEach(a),bi.forEach(a),Wt=p(k),Es=n(k,"P",{});var sa=l(Es);Vt=o(sa,'So, the next "intuitive" approach is to '),ye=n(sa,"A",{href:!0});var Ei=l(ye);$t=o(Ei,"write a custom template plugin"),Ei.forEach(a),Ut=o(sa,", that adds the webpack manifest on top of the main bundle, an example of the output:"),sa.forEach(a),Rt=p(k),ue=n(k,"DIV",{class:!0});var mc=l(ue);mc.forEach(a),Jt=p(k),J=n(k,"P",{});var lo=l(J);Yt=o(lo,"In the source code, I will use the global variable "),fe=n(lo,"CODE",{class:!0});var Ii=l(fe);Bt=o(Ii,"CSS_FILES"),Ii.forEach(a),Gt=o(lo,", and hopefully it will get defined by webpack, by adding "),me=n(lo,"CODE",{class:!0});var Ci=l(me);zt=o(Ci,"const CSS_FILES = ..."),Ci.forEach(a),Kt=o(lo," at the very top of the file."),lo.forEach(a),Qt=p(k),Is=n(k,"P",{});var ea=l(Is);Zt=o(ea,"And to be extra careful, I have to make sure also that there's no variable "),xe=n(ea,"CODE",{class:!0});var Si=l(xe);Xt=o(Si,"CSS_FILES"),Si.forEach(a),sn=o(ea," declared between the global scope and the current scope the variable is being used."),ea.forEach(a),en=p(k),we=n(k,"DIV",{class:!0});var xc=l(we);xc.forEach(a),on=p(k),_o=n(k,"P",{});var Pi=l(_o);an=o(Pi,"Apparently, this does not work at all. The compiled output shows:"),Pi.forEach(a),tn=p(k),ge=n(k,"DIV",{class:!0});var wc=l(ge);wc.forEach(a),nn=p(k),Cs=n(k,"P",{});var oa=l(Cs);ln=o(oa,"After tracing through the code, I realised that I was ignorant of the sequence of execution of the "),Ss=n(oa,"A",{href:!0,rel:!0});var Ti=l(Ss);rn=o(Ti,"compiler hooks"),Ti.forEach(a),pn=o(oa,"."),oa.forEach(a),cn=p(k),Ps=n(k,"P",{});var aa=l(Ps);hn=o(aa,"In the "),Ts=n(aa,"A",{href:!0,rel:!0});var Ai=l(Ts);kn=o(Ai,"docs for compiler hooks"),Ai.forEach(a),vn=o(aa,", each hooks is executed in sequence:"),aa.forEach(a),dn=p(k),_=n(k,"UL",{});var C=l(_);Eo=n(C,"LI",{});var Di=l(Eo);yn=o(Di,"..."),Di.forEach(a),un=p(C),Io=n(C,"LI",{});var Oi=l(Io);fn=o(Oi,"run"),Oi.forEach(a),mn=p(C),Co=n(C,"LI",{});var qi=l(Co);xn=o(qi,"..."),qi.forEach(a),wn=p(C),So=n(C,"LI",{});var Li=l(So);gn=o(Li,"thisCompilation"),Li.forEach(a),bn=p(C),Po=n(C,"LI",{});var Mi=l(Po);_n=o(Mi,"..."),Mi.forEach(a),En=p(C),To=n(C,"LI",{});var ji=l(To);In=o(ji,"emit"),ji.forEach(a),Cn=p(C),Ao=n(C,"LI",{});var Fi=l(Ao);Sn=o(Fi,"afterEmit"),Fi.forEach(a),Pn=p(C),Do=n(C,"LI",{});var Hi=l(Do);Tn=o(Hi,"..."),Hi.forEach(a),C.forEach(a),An=p(k),T=n(k,"P",{});var $=l(T);Dn=o($,"The webpack manifest plugin executes mainly "),Y=n($,"A",{href:!0,rel:!0});var ta=l(Y);On=o(ta,"during the "),be=n(ta,"CODE",{class:!0});var Ni=l(be);qn=o(Ni,"emit"),Ni.forEach(a),Ln=o(ta," phase"),ta.forEach(a),Mn=o($,", right before webpack writes all the assets into the output directory. And, we are modifying the template source in the "),_e=n($,"CODE",{class:!0});var Wi=l(_e);jn=o(Wi,"thisCompilation"),Wi.forEach(a),Fn=o($," phase, which is way before the "),Ee=n($,"CODE",{class:!0});var Vi=l(Ee);Hn=o(Vi,"emit"),Vi.forEach(a),Nn=o($," phase. That's why "),Ie=n($,"CODE",{class:!0});var $i=l(Ie);Wn=o($i,"this.manifest"),$i.forEach(a),Vn=o($," property is still undefined at the time of execution."),$.forEach(a),$n=p(k),Ce=n(k,"DIV",{class:!0});var gc=l(Ce);gc.forEach(a),Un=p(k),M=n(k,"P",{});var es=l(M);Rn=o(es,"Upon reading the code fot he "),Se=n(es,"CODE",{class:!0});var Ui=l(Se);Jn=o(Ui,"webpack-manifest-plugin"),Ui.forEach(a),Yn=o(es,", I realised that during the "),Pe=n(es,"CODE",{class:!0});var Ri=l(Pe);Bn=o(Ri,"emit"),Ri.forEach(a),Gn=o(es," phase, I can access to the "),Te=n(es,"CODE",{class:!0});var Ji=l(Te);zn=o(Ji,"compilation.assets"),Ji.forEach(a),Kn=o(es,", and so, I could modifying the source for the assets during that time!"),es.forEach(a),Qn=p(k),Ae=n(k,"DIV",{class:!0});var bc=l(Ae);bc.forEach(a),Zn=p(k),As=n(k,"P",{});var na=l(As);Xn=o(na,"Apparently that works, but I wonder whether is it a good practice to modifying the source of an asset during the "),De=n(na,"CODE",{class:!0});var Yi=l(De);sl=o(Yi,"emit"),Yi.forEach(a),el=o(na," phase? \u{1F914}"),na.forEach(a),ol=p(k),j=n(k,"P",{});var os=l(j);al=o(os,"And, if you noticed, I need to append the "),Oe=n(os,"CODE",{class:!0});var Bi=l(Oe);tl=o(Bi,"const CSS_FILES = [...]"),Bi.forEach(a),nl=o(os," to every file, that's because I have no idea in which file "),qe=n(os,"CODE",{class:!0});var Gi=l(qe);ll=o(Gi,"CSS_FILES"),Gi.forEach(a),rl=o(os," is referenced. And because I declared it using "),Le=n(os,"CODE",{class:!0});var zi=l(Le);il=o(zi,"const"),zi.forEach(a),pl=o(os,", it only exists within the file's scope, so I have to redeclare it all the other files."),os.forEach(a),k.forEach(a),$o=p(c),N=n(c,"SECTION",{});var ro=l(N);Oo=n(ro,"H3",{});var Ki=l(Oo);Ds=n(Ki,"A",{href:!0,id:!0});var Qi=l(Ds);cl=o(Qi,"[Updated Feb 27, 2020]"),Qi.forEach(a),Ki.forEach(a),hl=p(ro),Os=n(ro,"P",{});var la=l(Os);kl=o(la,"According to "),qs=n(la,"A",{href:!0,rel:!0});var Zi=l(qs);vl=o(Zi,"@evilebottnawi"),Zi.forEach(a),dl=o(la," that this is not appropriate"),la.forEach(a),yl=p(ro),Q=n(ro,"BLOCKQUOTE",{class:!0});var ra=l(Q);Ls=n(ra,"P",{lang:!0,dir:!0});var Xi=l(Ls);ul=o(Xi,"A lot of plugin uses `compiler.hooks.emit` for emitting new assets, it is invalid. Ideally plugins should use `compilation.hooks.additionalAssets` for adding new assets."),Xi.forEach(a),fl=o(ra,"\u2014 evilebottnawi (@evilebottnawi) "),Me=n(ra,"A",{href:!0});var sp=l(Me);ml=o(sp,"February 20, 2020"),sp.forEach(a),ra.forEach(a),ro.forEach(a),Uo=p(c),d=n(c,"SECTION",{});var y=l(d);qo=n(y,"H2",{});var ep=l(qo);Ms=n(ep,"A",{href:!0,id:!0});var op=l(Ms);xl=o(op,"The 3rd approach"),op.forEach(a),ep.forEach(a),wl=p(y),B=n(y,"P",{});var io=l(B);gl=o(io,"I was still not convinced that this is the best I could do, so I continued looking around webpack's doc. I found a particular compilation hooks, "),js=n(io,"A",{href:!0,rel:!0});var ap=l(js);je=n(ap,"CODE",{class:!0});var tp=l(je);bl=o(tp,"needAdditionalPass"),tp.forEach(a),ap.forEach(a),_l=o(io,", which seems useful. It says, "),Lo=n(io,"EM",{});var np=l(Lo);El=o(np,'"Called to determine if an asset needs to be processed further after being emitted."'),np.forEach(a),Il=o(io,"."),io.forEach(a),Cl=p(y),F=n(y,"P",{});var as=l(F);Sl=o(as,"So, if I return "),Fe=n(as,"CODE",{class:!0});var lp=l(Fe);Pl=o(lp,"true"),lp.forEach(a),Tl=o(as," in the "),He=n(as,"CODE",{class:!0});var rp=l(He);Al=o(rp,"needAdditionalPass"),rp.forEach(a),Dl=o(as,", webpack will re"),Ne=n(as,"CODE",{class:!0});var ip=l(Ne);Ol=o(ip,"compile"),ip.forEach(a),ql=o(as," the asset again:"),as.forEach(a),Ll=p(y),We=n(y,"DIV",{class:!0});var _c=l(We);_c.forEach(a),Ml=p(y),Ve=n(y,"DIV",{class:!0});var Ec=l(Ve);Ec.forEach(a),jl=p(y),Fs=n(y,"P",{});var ia=l(Fs);Fl=o(ia,"Note that using "),$e=n(ia,"CODE",{class:!0});var pp=l($e);Hl=o(pp,"needAdditionalPass"),pp.forEach(a),Nl=o(ia," will cause the build time to roughly doubled!"),ia.forEach(a),Wl=p(y),G=n(y,"P",{});var po=l(G);Vl=o(po,"You may argue that why do we need to rerun the "),Ue=n(po,"CODE",{class:!0});var cp=l(Ue);$l=o(cp,"compilation"),cp.forEach(a),Ul=o(po," process again, isn't the end result can be equally achieved by modifying the assets source in the "),Re=n(po,"CODE",{class:!0});var hp=l(Re);Rl=o(hp,"emit"),hp.forEach(a),Jl=o(po," phase?"),po.forEach(a),Yl=p(y),H=n(y,"P",{});var ts=l(H);Bl=o(ts,"Well, that's because, I realised I could make use "),Z=n(ts,"A",{href:!0,rel:!0});var Rr=l(Z);Gl=o(Rr,"some of the code from the "),Je=n(Rr,"CODE",{class:!0});var kp=l(Je);zl=o(kp,"DefinePlugin"),kp.forEach(a),Rr.forEach(a),Kl=o(ts,", which could replace the usage of "),Ye=n(ts,"CODE",{class:!0});var vp=l(Ye);Ql=o(vp,"CSS_FILES"),vp.forEach(a),Zl=o(ts," throughout the code. That way, I don't have to prefix every file with "),Be=n(ts,"CODE",{class:!0});var dp=l(Be);Xl=o(dp,"const CSS_FILES = ..."),dp.forEach(a),sr=o(ts,"."),ts.forEach(a),er=p(y),A=n(y,"P",{});var U=l(A);or=o(U,"DefinePlugin uses something called "),Hs=n(U,"A",{href:!0,rel:!0});var yp=l(Hs);Mo=n(yp,"STRONG",{});var up=l(Mo);ar=o(up,"JavaScriptParser Hooks"),up.forEach(a),yp.forEach(a),tr=o(U,", which you can rename a variable through "),Ge=n(U,"CODE",{class:!0});var fp=l(Ge);nr=o(fp,"canRename"),fp.forEach(a),lr=o(U," and "),ze=n(U,"CODE",{class:!0});var mp=l(ze);rr=o(mp,"identifier"),mp.forEach(a),ir=o(U," hooks or replace an expression through the "),Ke=n(U,"CODE",{class:!0});var xp=l(Ke);pr=o(xp,"expression"),xp.forEach(a),cr=o(U," hook:"),U.forEach(a),hr=p(y),Qe=n(y,"DIV",{class:!0});var Ic=l(Qe);Ic.forEach(a),kr=p(y),Ns=n(y,"P",{});var pa=l(Ns);vr=o(pa,"The complete code can be found in "),Ws=n(pa,"A",{href:!0,rel:!0});var wp=l(Ws);dr=o(wp,"this gist"),wp.forEach(a),yr=o(pa,"."),pa.forEach(a),ur=p(y),jo=n(y,"P",{});var gp=l(jo);fr=o(gp,"An example of the compiled output:"),gp.forEach(a),mr=p(y),Ze=n(y,"DIV",{class:!0});var Cc=l(Ze);Cc.forEach(a),y.forEach(a),Ro=p(c),W=n(c,"SECTION",{});var co=l(W);Fo=n(co,"H2",{});var bp=l(Fo);Vs=n(bp,"A",{href:!0,id:!0});var _p=l(Vs);xr=o(_p,"Closing Notes"),_p.forEach(a),bp.forEach(a),wr=p(co),$s=n(co,"P",{});var ca=l($s);gr=o(ca,"The compile output for the 3rd approach seemed to be better (more precise?) than the other, yet I am not entirely sure using a "),Xe=n(ca,"CODE",{class:!0});var Ep=l(Xe);br=o(Ep,"needAdditionalPass"),Ep.forEach(a),_r=o(ca," is the right way of going about it."),ca.forEach(a),Er=p(co),Us=n(co,"P",{});var ha=l(Us);Ir=o(ha,"So, "),Rs=n(ha,"A",{href:!0,rel:!0});var Ip=l(Rs);Cr=o(Ip,"let me know"),Ip.forEach(a),Sr=o(ha," if you have any thoughts or suggestions, yea?"),ha.forEach(a),co.forEach(a),Jo=p(c),V=n(c,"SECTION",{});var ho=l(V);Ho=n(ho,"H3",{});var Cp=l(Ho);Js=n(Cp,"A",{href:!0,id:!0});var Sp=l(Js);Pr=o(Sp,"[Updated Feb 27, 2020]"),Sp.forEach(a),Cp.forEach(a),Tr=p(ho),Ys=n(ho,"P",{});var ka=l(Ys);Ar=o(ka,"You can read "),Bs=n(ka,"A",{href:!0,rel:!0});var Pp=l(Bs);Dr=o(Pp,"the discussions that's happening on Twitter"),Pp.forEach(a),Or=o(ka,":"),ka.forEach(a),qr=p(ho),X=n(ho,"BLOCKQUOTE",{class:!0});var va=l(X);P=n(va,"P",{lang:!0,dir:!0});var z=l(P);Lr=o(z,"Need some suggestions and inputs from "),so=n(z,"A",{href:!0});var Tp=l(so);Mr=o(Tp,"@webpack"),Tp.forEach(a),jr=o(z," masters, I've written the problem and approaches that I've taken over here: "),eo=n(z,"A",{href:!0});var Ap=l(eo);Fr=o(Ap,"https://t.co/gLsPG9Joeq"),Ap.forEach(a),Hr=o(z,", still I'm not sure I am doing it right \u{1F648}"),oo=n(z,"A",{href:!0});var Dp=l(oo);Nr=o(Dp,"@wSokra"),Dp.forEach(a),Wr=p(z),ao=n(z,"A",{href:!0});var Op=l(ao);Vr=o(Op,"@evilebottnawi"),Op.forEach(a),z.forEach(a),$r=o(va,"\u2014 Tan Li Hau (@lihautan) "),to=n(va,"A",{href:!0});var qp=l(to);Ur=o(qp,"February 20, 2020"),qp.forEach(a),va.forEach(a),ho.forEach(a),this.h()},h(){r(ls,"href","#the-problem"),r(ls,"id","the-problem"),r(zs,"class","code-section"),r(Ks,"class","code-section"),r(rs,"href","https://expressjs.com/"),r(rs,"rel","nofollow"),r(is,"href","https://reactjs.org/"),r(is,"rel","nofollow"),r(Qs,"class","code-section"),r(ps,"href","#the-st-approach"),r(ps,"id","the-st-approach"),r(hs,"href","https://www.npmjs.com/package/webpack-manifest-plugin"),r(hs,"rel","nofollow"),r(Zs,"class","code-section"),r(Xs,"class","inline"),r(se,"class","inline"),r(vs,"href","https://webpack.js.org/api/module-variables/#__non_webpack_require__-webpack-specific"),r(vs,"rel","nofollow"),r(ee,"class","inline"),r(oe,"class","inline"),r(ae,"class","inline"),r(te,"class","code-section"),r(ne,"class","inline"),r(le,"class","inline"),r(re,"class","code-section"),r(ie,"class","inline"),r(fs,"href","#updated-feb"),r(fs,"id","updated-feb"),r(ms,"href","https://twitter.com/wSokra"),r(ms,"rel","nofollow"),r(xs,"href","https://twitter.com/wSokra/status/1230448421351444482"),r(xs,"rel","nofollow"),r(pe,"class","inline"),r(ce,"class","code-section"),r(he,"class","code-section"),r(ke,"class","code-section"),r(ve,"class","inline"),r(de,"class","code-section"),r(bs,"href","https://webpack.js.org/configuration/externals/"),r(bs,"rel","nofollow"),r(_s,"href","#the-nd-approach"),r(_s,"id","the-nd-approach"),r(ye,"href","/webpack-plugin-main-template"),r(ue,"class","code-section"),r(fe,"class","inline"),r(me,"class","inline"),r(xe,"class","inline"),r(we,"class","code-section"),r(ge,"class","code-section"),r(Ss,"href","https://webpack.js.org/api/compiler-hooks/"),r(Ss,"rel","nofollow"),r(Ts,"href","https://webpack.js.org/api/compiler-hooks/"),r(Ts,"rel","nofollow"),r(be,"class","inline"),r(Y,"href","https://github.com/danethurber/webpack-manifest-plugin/blob/63d3ee2/lib/plugin.js#L255"),r(Y,"rel","nofollow"),r(_e,"class","inline"),r(Ee,"class","inline"),r(Ie,"class","inline"),r(Ce,"class","code-section"),r(Se,"class","inline"),r(Pe,"class","inline"),r(Te,"class","inline"),r(Ae,"class","code-section"),r(De,"class","inline"),r(Oe,"class","inline"),r(qe,"class","inline"),r(Le,"class","inline"),r(Ds,"href","#updated-feb"),r(Ds,"id","updated-feb"),r(qs,"href","https://twitter.com/evilebottnawi"),r(qs,"rel","nofollow"),r(Ls,"lang","en"),r(Ls,"dir","ltr"),r(Me,"href","https://twitter.com/evilebottnawi/status/1230417598677954560?ref_src=twsrc%5Etfw"),r(Q,"class","twitter-tweet"),r(Ms,"href","#the-rd-approach"),r(Ms,"id","the-rd-approach"),r(je,"class","inline"),r(js,"href","https://webpack.js.org/api/compilation-hooks/#needadditionalpass"),r(js,"rel","nofollow"),r(Fe,"class","inline"),r(He,"class","inline"),r(Ne,"class","inline"),r(We,"class","code-section"),r(Ve,"class","code-section"),r($e,"class","inline"),r(Ue,"class","inline"),r(Re,"class","inline"),r(Je,"class","inline"),r(Z,"href","https://github.com/webpack/webpack/blob/d426b6c/lib/DefinePlugin.js"),r(Z,"rel","nofollow"),r(Ye,"class","inline"),r(Be,"class","inline"),r(Hs,"href","https://webpack.js.org/api/parser/"),r(Hs,"rel","nofollow"),r(Ge,"class","inline"),r(ze,"class","inline"),r(Ke,"class","inline"),r(Qe,"class","code-section"),r(Ws,"href","https://gist.github.com/tanhauhau/2dc6cc376fd190e05d14901b984c7fc1"),r(Ws,"rel","nofollow"),r(Ze,"class","code-section"),r(Vs,"href","#closing-notes"),r(Vs,"id","closing-notes"),r(Xe,"class","inline"),r(Rs,"href","https://twitter.com/lihautan"),r(Rs,"rel","nofollow"),r(Js,"href","#updated-feb"),r(Js,"id","updated-feb"),r(Bs,"href","https://twitter.com/lihautan/status/1230301241533583360"),r(Bs,"rel","nofollow"),r(so,"href","https://twitter.com/webpack?ref_src=twsrc%5Etfw"),r(eo,"href","https://t.co/gLsPG9Joeq"),r(oo,"href","https://twitter.com/wSokra?ref_src=twsrc%5Etfw"),r(ao,"href","https://twitter.com/evilebottnawi?ref_src=twsrc%5Etfw"),r(P,"lang","en"),r(P,"dir","ltr"),r(to,"href","https://twitter.com/lihautan/status/1230301241533583360?ref_src=twsrc%5Etfw"),r(X,"class","twitter-tweet")},m(c,x){Np(u,c,x),I(c,q,x),I(c,D,x),s(D,ns),I(c,w,x),I(c,v,x),s(v,K),s(K,ls),s(ls,da),s(v,ya),s(v,ko),s(ko,ua),s(v,fa),s(v,vo),s(vo,ma),s(v,xa),s(v,zs),zs.innerHTML=Up,s(v,wa),s(v,Ks),Ks.innerHTML=Rp,s(v,ga),s(v,R),s(R,ba),s(R,rs),s(rs,_a),s(R,Ea),s(R,is),s(is,Ia),s(R,Ca),s(v,Sa),s(v,Qs),Qs.innerHTML=Jp,s(v,Pa),s(v,yo),s(yo,Ta),s(v,Aa),s(v,uo),s(uo,Da),s(v,Oa),s(v,fo),s(fo,qa),I(c,No,x),I(c,f,x),s(f,mo),s(mo,ps),s(ps,La),s(f,Ma),s(f,cs),s(cs,ja),s(cs,hs),s(hs,Fa),s(cs,Ha),s(f,Na),s(f,Zs),Zs.innerHTML=Yp,s(f,Wa),s(f,ks),s(ks,Va),s(ks,Xs),s(Xs,$a),s(ks,Ua),s(f,Ra),s(f,S),s(S,Ja),s(S,se),s(se,Ya),s(S,Ba),s(S,vs),s(vs,xo),s(xo,Ga),s(S,za),s(S,ee),s(ee,Ka),s(S,Qa),s(S,oe),s(oe,Za),s(S,Xa),s(S,ae),s(ae,st),s(S,et),s(f,ot),s(f,te),te.innerHTML=Bp,s(f,at),s(f,ds),s(ds,tt),s(ds,ne),s(ne,nt),s(ds,lt),s(f,rt),s(f,ys),s(ys,it),s(ys,le),s(le,pt),s(ys,ct),s(f,ht),s(f,re),re.innerHTML=Gp,s(f,kt),s(f,us),s(us,vt),s(us,ie),s(ie,dt),s(us,yt),I(c,Wo,x),I(c,m,x),s(m,wo),s(wo,fs),s(fs,ut),s(m,ft),s(m,L),s(L,mt),s(L,ms),s(ms,xt),s(L,wt),s(L,xs),s(xs,gt),s(L,bt),s(L,pe),s(pe,_t),s(L,Et),s(m,It),s(m,ce),ce.innerHTML=zp,s(m,Ct),s(m,he),he.innerHTML=Kp,s(m,St),s(m,go),s(go,Pt),s(m,Tt),s(m,ke),ke.innerHTML=Qp,s(m,At),s(m,ws),s(ws,Dt),s(ws,ve),s(ve,Ot),s(ws,qt),s(m,Lt),s(m,de),de.innerHTML=Zp,s(m,Mt),s(m,gs),s(gs,jt),s(gs,bs),s(bs,Ft),s(gs,Ht),I(c,Vo,x),I(c,h,x),s(h,bo),s(bo,_s),s(_s,Nt),s(h,Wt),s(h,Es),s(Es,Vt),s(Es,ye),s(ye,$t),s(Es,Ut),s(h,Rt),s(h,ue),ue.innerHTML=Xp,s(h,Jt),s(h,J),s(J,Yt),s(J,fe),s(fe,Bt),s(J,Gt),s(J,me),s(me,zt),s(J,Kt),s(h,Qt),s(h,Is),s(Is,Zt),s(Is,xe),s(xe,Xt),s(Is,sn),s(h,en),s(h,we),we.innerHTML=sc,s(h,on),s(h,_o),s(_o,an),s(h,tn),s(h,ge),ge.innerHTML=ec,s(h,nn),s(h,Cs),s(Cs,ln),s(Cs,Ss),s(Ss,rn),s(Cs,pn),s(h,cn),s(h,Ps),s(Ps,hn),s(Ps,Ts),s(Ts,kn),s(Ps,vn),s(h,dn),s(h,_),s(_,Eo),s(Eo,yn),s(_,un),s(_,Io),s(Io,fn),s(_,mn),s(_,Co),s(Co,xn),s(_,wn),s(_,So),s(So,gn),s(_,bn),s(_,Po),s(Po,_n),s(_,En),s(_,To),s(To,In),s(_,Cn),s(_,Ao),s(Ao,Sn),s(_,Pn),s(_,Do),s(Do,Tn),s(h,An),s(h,T),s(T,Dn),s(T,Y),s(Y,On),s(Y,be),s(be,qn),s(Y,Ln),s(T,Mn),s(T,_e),s(_e,jn),s(T,Fn),s(T,Ee),s(Ee,Hn),s(T,Nn),s(T,Ie),s(Ie,Wn),s(T,Vn),s(h,$n),s(h,Ce),Ce.innerHTML=oc,s(h,Un),s(h,M),s(M,Rn),s(M,Se),s(Se,Jn),s(M,Yn),s(M,Pe),s(Pe,Bn),s(M,Gn),s(M,Te),s(Te,zn),s(M,Kn),s(h,Qn),s(h,Ae),Ae.innerHTML=ac,s(h,Zn),s(h,As),s(As,Xn),s(As,De),s(De,sl),s(As,el),s(h,ol),s(h,j),s(j,al),s(j,Oe),s(Oe,tl),s(j,nl),s(j,qe),s(qe,ll),s(j,rl),s(j,Le),s(Le,il),s(j,pl),I(c,$o,x),I(c,N,x),s(N,Oo),s(Oo,Ds),s(Ds,cl),s(N,hl),s(N,Os),s(Os,kl),s(Os,qs),s(qs,vl),s(Os,dl),s(N,yl),s(N,Q),s(Q,Ls),s(Ls,ul),s(Q,fl),s(Q,Me),s(Me,ml),I(c,Uo,x),I(c,d,x),s(d,qo),s(qo,Ms),s(Ms,xl),s(d,wl),s(d,B),s(B,gl),s(B,js),s(js,je),s(je,bl),s(B,_l),s(B,Lo),s(Lo,El),s(B,Il),s(d,Cl),s(d,F),s(F,Sl),s(F,Fe),s(Fe,Pl),s(F,Tl),s(F,He),s(He,Al),s(F,Dl),s(F,Ne),s(Ne,Ol),s(F,ql),s(d,Ll),s(d,We),We.innerHTML=tc,s(d,Ml),s(d,Ve),Ve.innerHTML=nc,s(d,jl),s(d,Fs),s(Fs,Fl),s(Fs,$e),s($e,Hl),s(Fs,Nl),s(d,Wl),s(d,G),s(G,Vl),s(G,Ue),s(Ue,$l),s(G,Ul),s(G,Re),s(Re,Rl),s(G,Jl),s(d,Yl),s(d,H),s(H,Bl),s(H,Z),s(Z,Gl),s(Z,Je),s(Je,zl),s(H,Kl),s(H,Ye),s(Ye,Ql),s(H,Zl),s(H,Be),s(Be,Xl),s(H,sr),s(d,er),s(d,A),s(A,or),s(A,Hs),s(Hs,Mo),s(Mo,ar),s(A,tr),s(A,Ge),s(Ge,nr),s(A,lr),s(A,ze),s(ze,rr),s(A,ir),s(A,Ke),s(Ke,pr),s(A,cr),s(d,hr),s(d,Qe),Qe.innerHTML=lc,s(d,kr),s(d,Ns),s(Ns,vr),s(Ns,Ws),s(Ws,dr),s(Ns,yr),s(d,ur),s(d,jo),s(jo,fr),s(d,mr),s(d,Ze),Ze.innerHTML=rc,I(c,Ro,x),I(c,W,x),s(W,Fo),s(Fo,Vs),s(Vs,xr),s(W,wr),s(W,$s),s($s,gr),s($s,Xe),s(Xe,br),s($s,_r),s(W,Er),s(W,Us),s(Us,Ir),s(Us,Rs),s(Rs,Cr),s(Us,Sr),I(c,Jo,x),I(c,V,x),s(V,Ho),s(Ho,Js),s(Js,Pr),s(V,Tr),s(V,Ys),s(Ys,Ar),s(Ys,Bs),s(Bs,Dr),s(Ys,Or),s(V,qr),s(V,X),s(X,P),s(P,Lr),s(P,so),s(so,Mr),s(P,jr),s(P,eo),s(eo,Fr),s(P,Hr),s(P,oo),s(oo,Nr),s(P,Wr),s(P,ao),s(ao,Vr),s(X,$r),s(X,to),s(to,Ur),Yo=!0},p:Oc,i(c){Yo||(Wp(u.$$.fragment,c),Yo=!0)},o(c){Vp(u.$$.fragment,c),Yo=!1},d(c){$p(u,c),c&&a(q),c&&a(D),c&&a(w),c&&a(v),c&&a(No),c&&a(f),c&&a(Wo),c&&a(m),c&&a(Vo),c&&a(h),c&&a($o),c&&a(N),c&&a(Uo),c&&a(d),c&&a(Ro),c&&a(W),c&&a(Jo),c&&a(V)}}}function Fc(Gs){let u,q;const D=[Gs[0],jp];let ns={$$slots:{default:[jc]},$$scope:{ctx:Gs}};for(let w=0;w<D.length;w+=1)ns=Jr(ns,D[w]);return u=new qc({props:ns}),{c(){Fp(u.$$.fragment)},l(w){Hp(u.$$.fragment,w)},m(w,v){Np(u,w,v),q=!0},p(w,[v]){const K=v&1?Ac(D,[v&1&&Lp(w[0]),v&0&&Lp(jp)]):{};v&2&&(K.$$scope={dirty:v,ctx:w}),u.$set(K)},i(w){q||(Wp(u.$$.fragment,w),q=!0)},o(w){Vp(u.$$.fragment,w),q=!1},d(w){$p(u,w)}}}const jp={title:"Webpack Additional Compilation Pass",date:"2020-02-20T08:00:00Z",lastUpdated:"2020-02-27T08:00:00Z",label:"blog"};function Hc(Gs,u,q){return Dc("blog",{image:Mc}),Gs.$$set=D=>{q(0,u=Jr(Jr({},u),Mp(D)))},u=Mp(u),[u]}class Yc extends Sc{constructor(u){super();Pc(this,u,Hc,Fc,Tc,{})}}export{Yc as default,jp as metadata};
