import{S as mc,i as xc,s as wc,C as Ur,w as gc,x as bc,y as _c,z as Ec,A as Dp,q as Ic,o as Cc,B as Sc,r as Pc,Y as Op,e as t,t as e,k as i,c as n,a as l,h as o,d as a,m as p,b as r,g as I,H as s,J as Tc}from"../../chunks/vendor-da4388d4.js";import{B as Ac}from"../../chunks/BlogLayout-14cfab6f.js";import{_ as Dc}from"../../chunks/twitter-card-image-a57df29d.js";import"../../chunks/stores-1fad7c36.js";import"../../chunks/ldjson-b0805387.js";/* empty css                                */function Oc(Ys){let f,H,N,d,m,S,Bs,ka,ho,va,da,ko,ya,ua,Gs,Lp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">&quot;css&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;http://cdn/assets/style.xxx.css&quot;</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">&quot;html&quot;</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&lt;div class=&quot;container_xyz&quot;&gt;Hello world&lt;/div&gt;&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,fa,zs,Mp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">/* filename: http://cdn/assets/style.xxx.css */</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">.container_xyz</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">font-family</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Comic Sans&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ma,J,xa,ns,wa,ga,ls,ba,_a,Ea,Ks,jp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> express </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;express&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> React </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;react&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; renderToStaticMarkup &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;react-dom/server&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> styles </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./app.scss&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">express</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (req</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> res) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">className</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">&#123;</span><span style="color: var(--shiki-token-constant)">styles</span><span style="color: var(--shiki-color-text)">.container&#125;&gt;Hello world&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">htmlContent</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">renderToStaticMarkup</span><span style="color: var(--shiki-color-text)">(app);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">res</span><span style="color: var(--shiki-token-function)">.json</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    css</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> []</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    html</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> htmlContent</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.listen</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">process</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">env</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">PORT</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,Ia,vo,Ca,Sa,yo,Pa,Ta,uo,Aa,Ho,u,fo,rs,Da,Oa,is,qa,ps,La,Ma,ja,Qs,Fp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> webpackManifest </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./dist/webpack-manifest.json&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">cssFiles</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">filterCssFiles</span><span style="color: var(--shiki-color-text)">(webpackManifest);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (req</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> res) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">res</span><span style="color: var(--shiki-token-function)">.json</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    css</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> cssFiles</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    html</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> htmlContent</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`,Fa,cs,Ha,Zs,Na,Wa,Va,P,Ua,Xs,Ra,$a,hs,mo,Ja,Ya,se,Ba,Ga,ee,za,Ka,oe,Qa,Za,Xa,ae,Hp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">webpackManifest</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">__non_webpack_require__</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;./dist/webpack-manifest.json&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">cssFiles</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">filterCssFiles</span><span style="color: var(--shiki-color-text)">(webpackManifest);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (req</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> res) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">res</span><span style="color: var(--shiki-token-function)">.json</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    css</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> cssFiles</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    html</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> htmlContent</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`,st,ks,et,te,ot,at,tt,vs,nt,ne,lt,rt,it,le,Np=`<pre class="prism language-"><code><span class="line">dist</span>
<span class="line">\u251C\u2500\u2500 webpack-manifest.json</span>
<span class="line">\u2514\u2500\u2500 bundle.js  // &lt;-- the main output bundle</span></code></pre>`,pt,ds,ct,re,ht,kt,No,x,xo,ys,vt,dt,q,yt,us,ut,ft,fs,mt,xt,ie,wt,gt,bt,pe,Wp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> webpackManifest </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;webpack-manifest&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">cssFiles</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">filterCssFiles</span><span style="color: var(--shiki-color-text)">(webpackManifest);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`,_t,ce,Vp=`<div class="filename">webpack.config.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  externals</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">&#39;webpack-manifest&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;commonjs2 ./webpack-manifest.json&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Et,wo,It,Ct,he,Up=`<div class="filename">bundle.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">webpackManifest</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;./webpack-manifest.json&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">cssFiles</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">filterCssFiles</span><span style="color: var(--shiki-color-text)">(webpackManifest);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`,St,ms,Pt,ke,Tt,At,Dt,ve,Rp=`<pre class="prism language-"><code><span class="line">dist</span>
<span class="line">\u251C\u2500\u2500 bundle.js  // &lt;-- the main output bundle</span>
<span class="line">\u2514\u2500\u2500 webpack-manifest.json // &lt;-- relative to bundle.js</span></code></pre>`,Ot,xs,qt,ws,Lt,Mt,Wo,h,go,gs,jt,Ft,bs,Ht,de,Nt,Wt,Vt,ye,$p=`<div class="filename">bundle.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// added by template plugin</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS_FILES</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&#39;http://cdn/assets/style.xxx.css&#39;</span><span style="color: var(--shiki-color-text)">];</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// END added by template plugin</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...the main bundle</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (req</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> res) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">res</span><span style="color: var(--shiki-token-function)">.json</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    css</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS_FILES</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    html</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> htmlContent</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,Ut,Y,Rt,ue,$t,Jt,fe,Yt,Bt,Gt,_s,zt,me,Kt,Qt,Zt,xe,Jp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ManifestPlugin</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;webpack-manifest-plugin&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">MyWebpackPlugin</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">apply</span><span style="color: var(--shiki-color-text)">(compiler) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ManifestPlugin</span><span style="color: var(--shiki-color-text)">(manifestOptions)</span><span style="color: var(--shiki-token-function)">.apply</span><span style="color: var(--shiki-color-text)">(compiler);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// get manifest from &#96;webpack-manifest-plugin&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">ManifestPlugin</span><span style="color: var(--shiki-token-function)">.getCompilerHooks</span><span style="color: var(--shiki-color-text)">(compiler).</span><span style="color: var(--shiki-token-constant)">afterEmit</span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#39;MyWebpackPlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      manifest </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> manifest;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// see https://lihautan.com/webpack-plugin-main-template</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// on writing template plugin</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">compiler</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">hooks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">thisCompilation</span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;MyWebpackPlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> compilation </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">hooks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">render</span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;MyWebpackPlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (source</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; chunk</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> chunkGraph &#125;) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">prefix</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;const CSS_FILES = </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-token-function)">.stringify</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest)</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">;&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ConcatSource</span><span style="color: var(--shiki-color-text)">(prefix</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> source);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Xt,bo,sn,en,we,Yp=`<div class="filename">bundle.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS_FILES</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">undefined</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...continue with bundle.js</span></span></code></pre>`,on,Es,an,Is,tn,nn,ln,Cs,rn,Ss,pn,cn,hn,_,_o,kn,vn,Eo,dn,yn,Io,un,fn,Co,mn,xn,So,wn,gn,Po,bn,_n,To,En,In,Ao,Cn,Sn,A,Pn,B,Tn,ge,An,Dn,On,be,qn,Ln,_e,Mn,jn,Ee,Fn,Hn,Nn,Ie,Bp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">thisCompliation</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest </span><span style="color: var(--shiki-token-keyword)">==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">undefined</span><span style="color: var(--shiki-color-text)">;)</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">emit</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> manifest) </span><span style="color: var(--shiki-token-comment)">// too late!</span></span></code></pre>`,Wn,L,Vn,Ce,Un,Rn,Se,$n,Jn,Pe,Yn,Bn,Gn,Te,Gp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ManifestPlugin</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;webpack-manifest-plugin&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">MyWebpackPlugin</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">apply</span><span style="color: var(--shiki-color-text)">(compiler) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ManifestPlugin</span><span style="color: var(--shiki-color-text)">(manifestOptions)</span><span style="color: var(--shiki-token-function)">.apply</span><span style="color: var(--shiki-color-text)">(compiler);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// get manifest from &#96;webpack-manifest-plugin&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">ManifestPlugin</span><span style="color: var(--shiki-token-function)">.getCompilerHooks</span><span style="color: var(--shiki-color-text)">(compiler).</span><span style="color: var(--shiki-token-constant)">afterEmit</span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#39;MyWebpackPlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      manifest </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> manifest;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">compiler</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">hooks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">emit</span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;MyWebpackPlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> compilation </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">prefix</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;const CSS_FILES = </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-token-function)">.stringify</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest)</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">;&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">file</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Object</span><span style="color: var(--shiki-token-function)">.keys</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">compilation</span><span style="color: var(--shiki-color-text)">.assets)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-token-constant)">file</span><span style="color: var(--shiki-token-function)">.endsWith</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;.js&#39;</span><span style="color: var(--shiki-color-text)">)) </span><span style="color: var(--shiki-token-keyword)">continue</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">compilation</span><span style="color: var(--shiki-color-text)">.assets[file] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ConcatSource</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          prefix</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-constant)">compilation</span><span style="color: var(--shiki-color-text)">.assets[file]</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        );</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,zn,Ps,Kn,Ae,Qn,Zn,Xn,M,sl,De,el,ol,Oe,al,tl,qe,nl,ll,Vo,W,Do,Ts,rl,il,As,pl,Ds,cl,hl,kl,Q,Os,vl,dl,Le,yl,Uo,v,Oo,qs,ul,fl,G,ml,Ls,Me,xl,wl,qo,gl,bl,_l,j,El,je,Il,Cl,Fe,Sl,Pl,He,Tl,Al,Dl,Ne,zp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">MyWebpackPlugin</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">apply</span><span style="color: var(--shiki-color-text)">(compiler) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">compiler</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">hooks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">thisCompilation</span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;MyWebpackPlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> compilation </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">compilation</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">hooks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">needAdditionalPass</span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;MyWebpackPlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// if it is always true, will lead to infinite loop!</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ol,We,Kp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">thisCompliation</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest </span><span style="color: var(--shiki-token-keyword)">==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">undefined</span><span style="color: var(--shiki-color-text)">;)</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">emit</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> manifest) </span><span style="color: var(--shiki-token-comment)">// too late!</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">needAddtionalPass</span><span style="color: var(--shiki-color-text)"> (return </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// to start the compilation again</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">thisCompilation</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest </span><span style="color: var(--shiki-token-keyword)">==</span><span style="color: var(--shiki-color-text)"> manifest) </span><span style="color: var(--shiki-token-comment)">// now &#96;this.manifest&#96; is available</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ... will continue run through every stages again</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">emit</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> manifest)</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`,ql,Ms,Ll,Ve,Ml,jl,Fl,z,Hl,Ue,Nl,Wl,Re,Vl,Ul,Rl,F,$l,Z,Jl,$e,Yl,Bl,Je,Gl,zl,Ye,Kl,Ql,Zl,D,Xl,js,Lo,sr,er,Be,or,ar,Ge,tr,nr,ze,lr,rr,ir,Ke,Qp=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">MyWebpackPlugin</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">apply</span><span style="color: var(--shiki-color-text)">(compiler) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">compiler</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">hooks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">thisCompilation</span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#39;MyWebpackPlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      (compilation</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; normalModuleFactory &#125;) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">normalModuleFactory</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">hooks</span><span style="color: var(--shiki-color-text)">.parser</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">.for</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;javascript/auto&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;MyWebpackPlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parser </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-constant)">parser</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">hooks</span><span style="color: var(--shiki-color-text)">.expression</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">.for</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;CSS_FILES&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">.tap</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;MyWebpackPlugin&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> expr </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ParserHelpers</span><span style="color: var(--shiki-token-function)">.toConstantDependency</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">                  parser</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-token-function)">.stringify</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.manifest)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">                )(expr);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">              &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">          &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,pr,Fs,cr,Hs,hr,kr,vr,Mo,dr,yr,Qe,Zp=`<div class="filename">bundle.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-token-constant)">app</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (req</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> res) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">res</span><span style="color: var(--shiki-token-function)">.json</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// replaced via parser hooks</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    css</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&#39;http://cdn/assets/style.xxx.css&#39;</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    html</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> htmlContent</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,Ro,V,jo,Ns,ur,fr,Ws,mr,Ze,xr,wr,gr,Vs,br,Us,_r,Er,$o,U,Fo,Rs,Ir,Cr,$s,Sr,Js,Pr,Tr,Ar,X,T,Dr,Xe,Or,qr,so,Lr,Mr,eo,jr,Fr,oo,Hr,Nr,ao,Wr;return{c(){f=t("p"),H=e('Recently, I was working on a server-side rendering application, and encounter a scenario that I think it requires "double compilation" with webpack.'),N=i(),d=t("section"),m=t("h2"),S=t("a"),Bs=e("The problem"),ka=i(),ho=t("p"),va=e("I am not entirely sure I am doing it in the right approach, feel free to suggest or discuss it with me. The following will be about the problem I faced and how I worked on it."),da=i(),ko=t("p"),ya=e("The server-side rendering application that I worked on, has an endpoint that takes in request and respond with a partial HTML content and CSS files required for styling:"),ua=i(),Gs=t("div"),fa=i(),zs=t("div"),ma=i(),J=t("p"),xa=e("The application code itself uses "),ns=t("a"),wa=e("Express"),ga=e(" and "),ls=t("a"),ba=e("React"),_a=e(":"),Ea=i(),Ks=t("div"),Ia=i(),vo=t("p"),Ca=e("Now, the problem is, how do I get the list of CSS files?"),Sa=i(),yo=t("p"),Pa=e("The list of CSS files produced by the build is only available after I compile the application, but I need the information to be part of compiled code."),Ta=i(),uo=t("p"),Aa=e("The compiled code being part of the compilation, needs to contain information of the compilation."),Ho=i(),u=t("section"),fo=t("h2"),rs=t("a"),Da=e("The 1st approach"),Oa=i(),is=t("p"),qa=e("A naive solution at first is to use "),ps=t("a"),La=e("Webpack Manifest Plugin"),Ma=e(" to get the compilation manifest, and in the code, import the manifest as json and consumes it:"),ja=i(),Qs=t("div"),Fa=i(),cs=t("p"),Ha=e("Yet, the "),Zs=t("code"),Na=e("./dist/webpack-manifest.json"),Wa=e(" is not available in the first place, before compiling the code."),Va=i(),P=t("p"),Ua=e("Since the "),Xs=t("code"),Ra=e("./dist/webpack-manifest.json"),$a=e(" can only be available after build, maybe we can import it during runtime, using "),hs=t("a"),mo=t("strong"),Ja=e("non_webpack_require"),Ya=e(". The difference between "),se=t("code"),Ba=e("require"),Ga=e(" and "),ee=t("code"),za=e("__non_webpack_require__"),Ka=e(" is that the latter is webpack specific, which tells webpack to transform it to just pure "),oe=t("code"),Qa=e("require()"),Za=e(" expression, without bundling the required module:"),Xa=i(),ae=t("div"),st=i(),ks=t("p"),et=e("If you scrutinize the code, you may wonder whether "),te=t("code"),ot=e("./dist/webpack-manifest.json"),at=e(" is the correct relative path from the compiled code?"),tt=i(),vs=t("p"),nt=e("Probably "),ne=t("code"),lt=e("./webpack-manifest.json"),rt=e(" would be more accurate, if our output folder looks like this:"),it=i(),le=t("div"),pt=i(),ds=t("p"),ct=e(`One can safely argue that, the approach above works and let's move on the next task. But, curiosity drives me to seek deeper for a more "elegant" solution, where one don't need `),re=t("code"),ht=e("require('webpack-manifest.json')"),kt=e(" in runtime, but that information is compiled into the code."),No=i(),x=t("section"),xo=t("h3"),ys=t("a"),vt=e("[Updated Feb 27, 2020]"),dt=i(),q=t("p"),yt=e("Thanks to "),us=t("a"),ut=e("@wSokra"),ft=e("'s "),fs=t("a"),mt=e("suggestion"),xt=e(", instead of using "),ie=t("code"),wt=e("__non_webpack_require__()"),gt=e(", you can use a normal import and declaring the manifest file as an external:"),bt=i(),pe=t("div"),_t=i(),ce=t("div"),Et=i(),wo=t("p"),It=e("What this output is something similar to the following:"),Ct=i(),he=t("div"),St=i(),ms=t("p"),Pt=e("The reason we are using the relative path "),ke=t("code"),Tt=e("./webpack-manifest.json"),At=e(" is that we are assuming the output folder looks like this:"),Dt=i(),ve=t("div"),Ot=i(),xs=t("p"),qt=e("You can read more about webpack externals from "),ws=t("a"),Lt=e("the webpack documentation"),Mt=e("."),Wo=i(),h=t("section"),go=t("h2"),gs=t("a"),jt=e("The 2nd approach"),Ft=i(),bs=t("p"),Ht=e('So, the next "intuitive" approach is to '),de=t("a"),Nt=e("write a custom template plugin"),Wt=e(", that adds the webpack manifest on top of the main bundle, an example of the output:"),Vt=i(),ye=t("div"),Ut=i(),Y=t("p"),Rt=e("In the source code, I will use the global variable "),ue=t("code"),$t=e("CSS_FILES"),Jt=e(", and hopefully it will get defined by webpack, by adding "),fe=t("code"),Yt=e("const CSS_FILES = ..."),Bt=e(" at the very top of the file."),Gt=i(),_s=t("p"),zt=e("And to be extra careful, I have to make sure also that there's no variable "),me=t("code"),Kt=e("CSS_FILES"),Qt=e(" declared between the global scope and the current scope the variable is being used."),Zt=i(),xe=t("div"),Xt=i(),bo=t("p"),sn=e("Apparently, this does not work at all. The compiled output shows:"),en=i(),we=t("div"),on=i(),Es=t("p"),an=e("After tracing through the code, I realised that I was ignorant of the sequence of execution of the "),Is=t("a"),tn=e("compiler hooks"),nn=e("."),ln=i(),Cs=t("p"),rn=e("In the "),Ss=t("a"),pn=e("docs for compiler hooks"),cn=e(", each hooks is executed in sequence:"),hn=i(),_=t("ul"),_o=t("li"),kn=e("..."),vn=i(),Eo=t("li"),dn=e("run"),yn=i(),Io=t("li"),un=e("..."),fn=i(),Co=t("li"),mn=e("thisCompilation"),xn=i(),So=t("li"),wn=e("..."),gn=i(),Po=t("li"),bn=e("emit"),_n=i(),To=t("li"),En=e("afterEmit"),In=i(),Ao=t("li"),Cn=e("..."),Sn=i(),A=t("p"),Pn=e("The webpack manifest plugin executes mainly "),B=t("a"),Tn=e("during the "),ge=t("code"),An=e("emit"),Dn=e(" phase"),On=e(", right before webpack writes all the assets into the output directory. And, we are modifying the template source in the "),be=t("code"),qn=e("thisCompilation"),Ln=e(" phase, which is way before the "),_e=t("code"),Mn=e("emit"),jn=e(" phase. That's why "),Ee=t("code"),Fn=e("this.manifest"),Hn=e(" property is still undefined at the time of execution."),Nn=i(),Ie=t("div"),Wn=i(),L=t("p"),Vn=e("Upon reading the code fot he "),Ce=t("code"),Un=e("webpack-manifest-plugin"),Rn=e(", I realised that during the "),Se=t("code"),$n=e("emit"),Jn=e(" phase, I can access to the "),Pe=t("code"),Yn=e("compilation.assets"),Bn=e(", and so, I could modifying the source for the assets during that time!"),Gn=i(),Te=t("div"),zn=i(),Ps=t("p"),Kn=e("Apparently that works, but I wonder whether is it a good practice to modifying the source of an asset during the "),Ae=t("code"),Qn=e("emit"),Zn=e(" phase? \u{1F914}"),Xn=i(),M=t("p"),sl=e("And, if you noticed, I need to append the "),De=t("code"),el=e("const CSS_FILES = [...]"),ol=e(" to every file, that's because I have no idea in which file "),Oe=t("code"),al=e("CSS_FILES"),tl=e(" is referenced. And because I declared it using "),qe=t("code"),nl=e("const"),ll=e(", it only exists within the file's scope, so I have to redeclare it all the other files."),Vo=i(),W=t("section"),Do=t("h3"),Ts=t("a"),rl=e("[Updated Feb 27, 2020]"),il=i(),As=t("p"),pl=e("According to "),Ds=t("a"),cl=e("@evilebottnawi"),hl=e(" that this is not appropriate"),kl=i(),Q=t("blockquote"),Os=t("p"),vl=e("A lot of plugin uses `compiler.hooks.emit` for emitting new assets, it is invalid. Ideally plugins should use `compilation.hooks.additionalAssets` for adding new assets."),dl=e("\u2014 evilebottnawi (@evilebottnawi) "),Le=t("a"),yl=e("February 20, 2020"),Uo=i(),v=t("section"),Oo=t("h2"),qs=t("a"),ul=e("The 3rd approach"),fl=i(),G=t("p"),ml=e("I was still not convinced that this is the best I could do, so I continued looking around webpack's doc. I found a particular compilation hooks, "),Ls=t("a"),Me=t("code"),xl=e("needAdditionalPass"),wl=e(", which seems useful. It says, "),qo=t("em"),gl=e('"Called to determine if an asset needs to be processed further after being emitted."'),bl=e("."),_l=i(),j=t("p"),El=e("So, if I return "),je=t("code"),Il=e("true"),Cl=e(" in the "),Fe=t("code"),Sl=e("needAdditionalPass"),Pl=e(", webpack will re"),He=t("code"),Tl=e("compile"),Al=e(" the asset again:"),Dl=i(),Ne=t("div"),Ol=i(),We=t("div"),ql=i(),Ms=t("p"),Ll=e("Note that using "),Ve=t("code"),Ml=e("needAdditionalPass"),jl=e(" will cause the build time to roughly doubled!"),Fl=i(),z=t("p"),Hl=e("You may argue that why do we need to rerun the "),Ue=t("code"),Nl=e("compilation"),Wl=e(" process again, isn't the end result can be equally achieved by modifying the assets source in the "),Re=t("code"),Vl=e("emit"),Ul=e(" phase?"),Rl=i(),F=t("p"),$l=e("Well, that's because, I realised I could make use "),Z=t("a"),Jl=e("some of the code from the "),$e=t("code"),Yl=e("DefinePlugin"),Bl=e(", which could replace the usage of "),Je=t("code"),Gl=e("CSS_FILES"),zl=e(" throughout the code. That way, I don't have to prefix every file with "),Ye=t("code"),Kl=e("const CSS_FILES = ..."),Ql=e("."),Zl=i(),D=t("p"),Xl=e("DefinePlugin uses something called "),js=t("a"),Lo=t("strong"),sr=e("JavaScriptParser Hooks"),er=e(", which you can rename a variable through "),Be=t("code"),or=e("canRename"),ar=e(" and "),Ge=t("code"),tr=e("identifier"),nr=e(" hooks or replace an expression through the "),ze=t("code"),lr=e("expression"),rr=e(" hook:"),ir=i(),Ke=t("div"),pr=i(),Fs=t("p"),cr=e("The complete code can be found in "),Hs=t("a"),hr=e("this gist"),kr=e("."),vr=i(),Mo=t("p"),dr=e("An example of the compiled output:"),yr=i(),Qe=t("div"),Ro=i(),V=t("section"),jo=t("h2"),Ns=t("a"),ur=e("Closing Notes"),fr=i(),Ws=t("p"),mr=e("The compile output for the 3rd approach seemed to be better (more precise?) than the other, yet I am not entirely sure using a "),Ze=t("code"),xr=e("needAdditionalPass"),wr=e(" is the right way of going about it."),gr=i(),Vs=t("p"),br=e("So, "),Us=t("a"),_r=e("let me know"),Er=e(" if you have any thoughts or suggestions, yea?"),$o=i(),U=t("section"),Fo=t("h3"),Rs=t("a"),Ir=e("[Updated Feb 27, 2020]"),Cr=i(),$s=t("p"),Sr=e("You can read "),Js=t("a"),Pr=e("the discussions that's happening on Twitter"),Tr=e(":"),Ar=i(),X=t("blockquote"),T=t("p"),Dr=e("Need some suggestions and inputs from "),Xe=t("a"),Or=e("@webpack"),qr=e(" masters, I've written the problem and approaches that I've taken over here: "),so=t("a"),Lr=e("https://t.co/gLsPG9Joeq"),Mr=e(", still I'm not sure I am doing it right \u{1F648}"),eo=t("a"),jr=e("@wSokra"),Fr=i(),oo=t("a"),Hr=e("@evilebottnawi"),Nr=e("\u2014 Tan Li Hau (@lihautan) "),ao=t("a"),Wr=e("February 20, 2020"),this.h()},l(c){f=n(c,"P",{});var w=l(f);H=o(w,'Recently, I was working on a server-side rendering application, and encounter a scenario that I think it requires "double compilation" with webpack.'),w.forEach(a),N=p(c),d=n(c,"SECTION",{});var g=l(d);m=n(g,"H2",{});var Rr=l(m);S=n(Rr,"A",{href:!0,id:!0});var $r=l(S);Bs=o($r,"The problem"),$r.forEach(a),Rr.forEach(a),ka=p(g),ho=n(g,"P",{});var Jr=l(ho);va=o(Jr,"I am not entirely sure I am doing it in the right approach, feel free to suggest or discuss it with me. The following will be about the problem I faced and how I worked on it."),Jr.forEach(a),da=p(g),ko=n(g,"P",{});var Yr=l(ko);ya=o(Yr,"The server-side rendering application that I worked on, has an endpoint that takes in request and respond with a partial HTML content and CSS files required for styling:"),Yr.forEach(a),ua=p(g),Gs=n(g,"DIV",{class:!0});var Xp=l(Gs);Xp.forEach(a),fa=p(g),zs=n(g,"DIV",{class:!0});var sc=l(zs);sc.forEach(a),ma=p(g),J=n(g,"P",{});var to=l(J);xa=o(to,"The application code itself uses "),ns=n(to,"A",{href:!0,rel:!0});var Br=l(ns);wa=o(Br,"Express"),Br.forEach(a),ga=o(to," and "),ls=n(to,"A",{href:!0,rel:!0});var Gr=l(ls);ba=o(Gr,"React"),Gr.forEach(a),_a=o(to,":"),to.forEach(a),Ea=p(g),Ks=n(g,"DIV",{class:!0});var ec=l(Ks);ec.forEach(a),Ia=p(g),vo=n(g,"P",{});var zr=l(vo);Ca=o(zr,"Now, the problem is, how do I get the list of CSS files?"),zr.forEach(a),Sa=p(g),yo=n(g,"P",{});var Kr=l(yo);Pa=o(Kr,"The list of CSS files produced by the build is only available after I compile the application, but I need the information to be part of compiled code."),Kr.forEach(a),Ta=p(g),uo=n(g,"P",{});var Qr=l(uo);Aa=o(Qr,"The compiled code being part of the compilation, needs to contain information of the compilation."),Qr.forEach(a),g.forEach(a),Ho=p(c),u=n(c,"SECTION",{});var b=l(u);fo=n(b,"H2",{});var Zr=l(fo);rs=n(Zr,"A",{href:!0,id:!0});var Xr=l(rs);Da=o(Xr,"The 1st approach"),Xr.forEach(a),Zr.forEach(a),Oa=p(b),is=n(b,"P",{});var Jo=l(is);qa=o(Jo,"A naive solution at first is to use "),ps=n(Jo,"A",{href:!0,rel:!0});var si=l(ps);La=o(si,"Webpack Manifest Plugin"),si.forEach(a),Ma=o(Jo," to get the compilation manifest, and in the code, import the manifest as json and consumes it:"),Jo.forEach(a),ja=p(b),Qs=n(b,"DIV",{class:!0});var oc=l(Qs);oc.forEach(a),Fa=p(b),cs=n(b,"P",{});var Yo=l(cs);Ha=o(Yo,"Yet, the "),Zs=n(Yo,"CODE",{class:!0});var ei=l(Zs);Na=o(ei,"./dist/webpack-manifest.json"),ei.forEach(a),Wa=o(Yo," is not available in the first place, before compiling the code."),Yo.forEach(a),Va=p(b),P=n(b,"P",{});var O=l(P);Ua=o(O,"Since the "),Xs=n(O,"CODE",{class:!0});var oi=l(Xs);Ra=o(oi,"./dist/webpack-manifest.json"),oi.forEach(a),$a=o(O," can only be available after build, maybe we can import it during runtime, using "),hs=n(O,"A",{href:!0,rel:!0});var ai=l(hs);mo=n(ai,"STRONG",{});var ti=l(mo);Ja=o(ti,"non_webpack_require"),ti.forEach(a),ai.forEach(a),Ya=o(O,". The difference between "),se=n(O,"CODE",{class:!0});var ni=l(se);Ba=o(ni,"require"),ni.forEach(a),Ga=o(O," and "),ee=n(O,"CODE",{class:!0});var li=l(ee);za=o(li,"__non_webpack_require__"),li.forEach(a),Ka=o(O," is that the latter is webpack specific, which tells webpack to transform it to just pure "),oe=n(O,"CODE",{class:!0});var ri=l(oe);Qa=o(ri,"require()"),ri.forEach(a),Za=o(O," expression, without bundling the required module:"),O.forEach(a),Xa=p(b),ae=n(b,"DIV",{class:!0});var ac=l(ae);ac.forEach(a),st=p(b),ks=n(b,"P",{});var Bo=l(ks);et=o(Bo,"If you scrutinize the code, you may wonder whether "),te=n(Bo,"CODE",{class:!0});var ii=l(te);ot=o(ii,"./dist/webpack-manifest.json"),ii.forEach(a),at=o(Bo," is the correct relative path from the compiled code?"),Bo.forEach(a),tt=p(b),vs=n(b,"P",{});var Go=l(vs);nt=o(Go,"Probably "),ne=n(Go,"CODE",{class:!0});var pi=l(ne);lt=o(pi,"./webpack-manifest.json"),pi.forEach(a),rt=o(Go," would be more accurate, if our output folder looks like this:"),Go.forEach(a),it=p(b),le=n(b,"DIV",{class:!0});var tc=l(le);tc.forEach(a),pt=p(b),ds=n(b,"P",{});var zo=l(ds);ct=o(zo,`One can safely argue that, the approach above works and let's move on the next task. But, curiosity drives me to seek deeper for a more "elegant" solution, where one don't need `),re=n(zo,"CODE",{class:!0});var ci=l(re);ht=o(ci,"require('webpack-manifest.json')"),ci.forEach(a),kt=o(zo," in runtime, but that information is compiled into the code."),zo.forEach(a),b.forEach(a),No=p(c),x=n(c,"SECTION",{});var E=l(x);xo=n(E,"H3",{});var hi=l(xo);ys=n(hi,"A",{href:!0,id:!0});var ki=l(ys);vt=o(ki,"[Updated Feb 27, 2020]"),ki.forEach(a),hi.forEach(a),dt=p(E),q=n(E,"P",{});var ss=l(q);yt=o(ss,"Thanks to "),us=n(ss,"A",{href:!0,rel:!0});var vi=l(us);ut=o(vi,"@wSokra"),vi.forEach(a),ft=o(ss,"'s "),fs=n(ss,"A",{href:!0,rel:!0});var di=l(fs);mt=o(di,"suggestion"),di.forEach(a),xt=o(ss,", instead of using "),ie=n(ss,"CODE",{class:!0});var yi=l(ie);wt=o(yi,"__non_webpack_require__()"),yi.forEach(a),gt=o(ss,", you can use a normal import and declaring the manifest file as an external:"),ss.forEach(a),bt=p(E),pe=n(E,"DIV",{class:!0});var nc=l(pe);nc.forEach(a),_t=p(E),ce=n(E,"DIV",{class:!0});var lc=l(ce);lc.forEach(a),Et=p(E),wo=n(E,"P",{});var ui=l(wo);It=o(ui,"What this output is something similar to the following:"),ui.forEach(a),Ct=p(E),he=n(E,"DIV",{class:!0});var rc=l(he);rc.forEach(a),St=p(E),ms=n(E,"P",{});var Ko=l(ms);Pt=o(Ko,"The reason we are using the relative path "),ke=n(Ko,"CODE",{class:!0});var fi=l(ke);Tt=o(fi,"./webpack-manifest.json"),fi.forEach(a),At=o(Ko," is that we are assuming the output folder looks like this:"),Ko.forEach(a),Dt=p(E),ve=n(E,"DIV",{class:!0});var ic=l(ve);ic.forEach(a),Ot=p(E),xs=n(E,"P",{});var Qo=l(xs);qt=o(Qo,"You can read more about webpack externals from "),ws=n(Qo,"A",{href:!0,rel:!0});var mi=l(ws);Lt=o(mi,"the webpack documentation"),mi.forEach(a),Mt=o(Qo,"."),Qo.forEach(a),E.forEach(a),Wo=p(c),h=n(c,"SECTION",{});var k=l(h);go=n(k,"H2",{});var xi=l(go);gs=n(xi,"A",{href:!0,id:!0});var wi=l(gs);jt=o(wi,"The 2nd approach"),wi.forEach(a),xi.forEach(a),Ft=p(k),bs=n(k,"P",{});var Zo=l(bs);Ht=o(Zo,'So, the next "intuitive" approach is to '),de=n(Zo,"A",{href:!0});var gi=l(de);Nt=o(gi,"write a custom template plugin"),gi.forEach(a),Wt=o(Zo,", that adds the webpack manifest on top of the main bundle, an example of the output:"),Zo.forEach(a),Vt=p(k),ye=n(k,"DIV",{class:!0});var pc=l(ye);pc.forEach(a),Ut=p(k),Y=n(k,"P",{});var no=l(Y);Rt=o(no,"In the source code, I will use the global variable "),ue=n(no,"CODE",{class:!0});var bi=l(ue);$t=o(bi,"CSS_FILES"),bi.forEach(a),Jt=o(no,", and hopefully it will get defined by webpack, by adding "),fe=n(no,"CODE",{class:!0});var _i=l(fe);Yt=o(_i,"const CSS_FILES = ..."),_i.forEach(a),Bt=o(no," at the very top of the file."),no.forEach(a),Gt=p(k),_s=n(k,"P",{});var Xo=l(_s);zt=o(Xo,"And to be extra careful, I have to make sure also that there's no variable "),me=n(Xo,"CODE",{class:!0});var Ei=l(me);Kt=o(Ei,"CSS_FILES"),Ei.forEach(a),Qt=o(Xo," declared between the global scope and the current scope the variable is being used."),Xo.forEach(a),Zt=p(k),xe=n(k,"DIV",{class:!0});var cc=l(xe);cc.forEach(a),Xt=p(k),bo=n(k,"P",{});var Ii=l(bo);sn=o(Ii,"Apparently, this does not work at all. The compiled output shows:"),Ii.forEach(a),en=p(k),we=n(k,"DIV",{class:!0});var hc=l(we);hc.forEach(a),on=p(k),Es=n(k,"P",{});var sa=l(Es);an=o(sa,"After tracing through the code, I realised that I was ignorant of the sequence of execution of the "),Is=n(sa,"A",{href:!0,rel:!0});var Ci=l(Is);tn=o(Ci,"compiler hooks"),Ci.forEach(a),nn=o(sa,"."),sa.forEach(a),ln=p(k),Cs=n(k,"P",{});var ea=l(Cs);rn=o(ea,"In the "),Ss=n(ea,"A",{href:!0,rel:!0});var Si=l(Ss);pn=o(Si,"docs for compiler hooks"),Si.forEach(a),cn=o(ea,", each hooks is executed in sequence:"),ea.forEach(a),hn=p(k),_=n(k,"UL",{});var C=l(_);_o=n(C,"LI",{});var Pi=l(_o);kn=o(Pi,"..."),Pi.forEach(a),vn=p(C),Eo=n(C,"LI",{});var Ti=l(Eo);dn=o(Ti,"run"),Ti.forEach(a),yn=p(C),Io=n(C,"LI",{});var Ai=l(Io);un=o(Ai,"..."),Ai.forEach(a),fn=p(C),Co=n(C,"LI",{});var Di=l(Co);mn=o(Di,"thisCompilation"),Di.forEach(a),xn=p(C),So=n(C,"LI",{});var Oi=l(So);wn=o(Oi,"..."),Oi.forEach(a),gn=p(C),Po=n(C,"LI",{});var qi=l(Po);bn=o(qi,"emit"),qi.forEach(a),_n=p(C),To=n(C,"LI",{});var Li=l(To);En=o(Li,"afterEmit"),Li.forEach(a),In=p(C),Ao=n(C,"LI",{});var Mi=l(Ao);Cn=o(Mi,"..."),Mi.forEach(a),C.forEach(a),Sn=p(k),A=n(k,"P",{});var R=l(A);Pn=o(R,"The webpack manifest plugin executes mainly "),B=n(R,"A",{href:!0,rel:!0});var oa=l(B);Tn=o(oa,"during the "),ge=n(oa,"CODE",{class:!0});var ji=l(ge);An=o(ji,"emit"),ji.forEach(a),Dn=o(oa," phase"),oa.forEach(a),On=o(R,", right before webpack writes all the assets into the output directory. And, we are modifying the template source in the "),be=n(R,"CODE",{class:!0});var Fi=l(be);qn=o(Fi,"thisCompilation"),Fi.forEach(a),Ln=o(R," phase, which is way before the "),_e=n(R,"CODE",{class:!0});var Hi=l(_e);Mn=o(Hi,"emit"),Hi.forEach(a),jn=o(R," phase. That's why "),Ee=n(R,"CODE",{class:!0});var Ni=l(Ee);Fn=o(Ni,"this.manifest"),Ni.forEach(a),Hn=o(R," property is still undefined at the time of execution."),R.forEach(a),Nn=p(k),Ie=n(k,"DIV",{class:!0});var kc=l(Ie);kc.forEach(a),Wn=p(k),L=n(k,"P",{});var es=l(L);Vn=o(es,"Upon reading the code fot he "),Ce=n(es,"CODE",{class:!0});var Wi=l(Ce);Un=o(Wi,"webpack-manifest-plugin"),Wi.forEach(a),Rn=o(es,", I realised that during the "),Se=n(es,"CODE",{class:!0});var Vi=l(Se);$n=o(Vi,"emit"),Vi.forEach(a),Jn=o(es," phase, I can access to the "),Pe=n(es,"CODE",{class:!0});var Ui=l(Pe);Yn=o(Ui,"compilation.assets"),Ui.forEach(a),Bn=o(es,", and so, I could modifying the source for the assets during that time!"),es.forEach(a),Gn=p(k),Te=n(k,"DIV",{class:!0});var vc=l(Te);vc.forEach(a),zn=p(k),Ps=n(k,"P",{});var aa=l(Ps);Kn=o(aa,"Apparently that works, but I wonder whether is it a good practice to modifying the source of an asset during the "),Ae=n(aa,"CODE",{class:!0});var Ri=l(Ae);Qn=o(Ri,"emit"),Ri.forEach(a),Zn=o(aa," phase? \u{1F914}"),aa.forEach(a),Xn=p(k),M=n(k,"P",{});var os=l(M);sl=o(os,"And, if you noticed, I need to append the "),De=n(os,"CODE",{class:!0});var $i=l(De);el=o($i,"const CSS_FILES = [...]"),$i.forEach(a),ol=o(os," to every file, that's because I have no idea in which file "),Oe=n(os,"CODE",{class:!0});var Ji=l(Oe);al=o(Ji,"CSS_FILES"),Ji.forEach(a),tl=o(os," is referenced. And because I declared it using "),qe=n(os,"CODE",{class:!0});var Yi=l(qe);nl=o(Yi,"const"),Yi.forEach(a),ll=o(os,", it only exists within the file's scope, so I have to redeclare it all the other files."),os.forEach(a),k.forEach(a),Vo=p(c),W=n(c,"SECTION",{});var lo=l(W);Do=n(lo,"H3",{});var Bi=l(Do);Ts=n(Bi,"A",{href:!0,id:!0});var Gi=l(Ts);rl=o(Gi,"[Updated Feb 27, 2020]"),Gi.forEach(a),Bi.forEach(a),il=p(lo),As=n(lo,"P",{});var ta=l(As);pl=o(ta,"According to "),Ds=n(ta,"A",{href:!0,rel:!0});var zi=l(Ds);cl=o(zi,"@evilebottnawi"),zi.forEach(a),hl=o(ta," that this is not appropriate"),ta.forEach(a),kl=p(lo),Q=n(lo,"BLOCKQUOTE",{class:!0});var na=l(Q);Os=n(na,"P",{lang:!0,dir:!0});var Ki=l(Os);vl=o(Ki,"A lot of plugin uses `compiler.hooks.emit` for emitting new assets, it is invalid. Ideally plugins should use `compilation.hooks.additionalAssets` for adding new assets."),Ki.forEach(a),dl=o(na,"\u2014 evilebottnawi (@evilebottnawi) "),Le=n(na,"A",{href:!0});var Qi=l(Le);yl=o(Qi,"February 20, 2020"),Qi.forEach(a),na.forEach(a),lo.forEach(a),Uo=p(c),v=n(c,"SECTION",{});var y=l(v);Oo=n(y,"H2",{});var Zi=l(Oo);qs=n(Zi,"A",{href:!0,id:!0});var Xi=l(qs);ul=o(Xi,"The 3rd approach"),Xi.forEach(a),Zi.forEach(a),fl=p(y),G=n(y,"P",{});var ro=l(G);ml=o(ro,"I was still not convinced that this is the best I could do, so I continued looking around webpack's doc. I found a particular compilation hooks, "),Ls=n(ro,"A",{href:!0,rel:!0});var sp=l(Ls);Me=n(sp,"CODE",{class:!0});var ep=l(Me);xl=o(ep,"needAdditionalPass"),ep.forEach(a),sp.forEach(a),wl=o(ro,", which seems useful. It says, "),qo=n(ro,"EM",{});var op=l(qo);gl=o(op,'"Called to determine if an asset needs to be processed further after being emitted."'),op.forEach(a),bl=o(ro,"."),ro.forEach(a),_l=p(y),j=n(y,"P",{});var as=l(j);El=o(as,"So, if I return "),je=n(as,"CODE",{class:!0});var ap=l(je);Il=o(ap,"true"),ap.forEach(a),Cl=o(as," in the "),Fe=n(as,"CODE",{class:!0});var tp=l(Fe);Sl=o(tp,"needAdditionalPass"),tp.forEach(a),Pl=o(as,", webpack will re"),He=n(as,"CODE",{class:!0});var np=l(He);Tl=o(np,"compile"),np.forEach(a),Al=o(as," the asset again:"),as.forEach(a),Dl=p(y),Ne=n(y,"DIV",{class:!0});var dc=l(Ne);dc.forEach(a),Ol=p(y),We=n(y,"DIV",{class:!0});var yc=l(We);yc.forEach(a),ql=p(y),Ms=n(y,"P",{});var la=l(Ms);Ll=o(la,"Note that using "),Ve=n(la,"CODE",{class:!0});var lp=l(Ve);Ml=o(lp,"needAdditionalPass"),lp.forEach(a),jl=o(la," will cause the build time to roughly doubled!"),la.forEach(a),Fl=p(y),z=n(y,"P",{});var io=l(z);Hl=o(io,"You may argue that why do we need to rerun the "),Ue=n(io,"CODE",{class:!0});var rp=l(Ue);Nl=o(rp,"compilation"),rp.forEach(a),Wl=o(io," process again, isn't the end result can be equally achieved by modifying the assets source in the "),Re=n(io,"CODE",{class:!0});var ip=l(Re);Vl=o(ip,"emit"),ip.forEach(a),Ul=o(io," phase?"),io.forEach(a),Rl=p(y),F=n(y,"P",{});var ts=l(F);$l=o(ts,"Well, that's because, I realised I could make use "),Z=n(ts,"A",{href:!0,rel:!0});var Vr=l(Z);Jl=o(Vr,"some of the code from the "),$e=n(Vr,"CODE",{class:!0});var pp=l($e);Yl=o(pp,"DefinePlugin"),pp.forEach(a),Vr.forEach(a),Bl=o(ts,", which could replace the usage of "),Je=n(ts,"CODE",{class:!0});var cp=l(Je);Gl=o(cp,"CSS_FILES"),cp.forEach(a),zl=o(ts," throughout the code. That way, I don't have to prefix every file with "),Ye=n(ts,"CODE",{class:!0});var hp=l(Ye);Kl=o(hp,"const CSS_FILES = ..."),hp.forEach(a),Ql=o(ts,"."),ts.forEach(a),Zl=p(y),D=n(y,"P",{});var $=l(D);Xl=o($,"DefinePlugin uses something called "),js=n($,"A",{href:!0,rel:!0});var kp=l(js);Lo=n(kp,"STRONG",{});var vp=l(Lo);sr=o(vp,"JavaScriptParser Hooks"),vp.forEach(a),kp.forEach(a),er=o($,", which you can rename a variable through "),Be=n($,"CODE",{class:!0});var dp=l(Be);or=o(dp,"canRename"),dp.forEach(a),ar=o($," and "),Ge=n($,"CODE",{class:!0});var yp=l(Ge);tr=o(yp,"identifier"),yp.forEach(a),nr=o($," hooks or replace an expression through the "),ze=n($,"CODE",{class:!0});var up=l(ze);lr=o(up,"expression"),up.forEach(a),rr=o($," hook:"),$.forEach(a),ir=p(y),Ke=n(y,"DIV",{class:!0});var uc=l(Ke);uc.forEach(a),pr=p(y),Fs=n(y,"P",{});var ra=l(Fs);cr=o(ra,"The complete code can be found in "),Hs=n(ra,"A",{href:!0,rel:!0});var fp=l(Hs);hr=o(fp,"this gist"),fp.forEach(a),kr=o(ra,"."),ra.forEach(a),vr=p(y),Mo=n(y,"P",{});var mp=l(Mo);dr=o(mp,"An example of the compiled output:"),mp.forEach(a),yr=p(y),Qe=n(y,"DIV",{class:!0});var fc=l(Qe);fc.forEach(a),y.forEach(a),Ro=p(c),V=n(c,"SECTION",{});var po=l(V);jo=n(po,"H2",{});var xp=l(jo);Ns=n(xp,"A",{href:!0,id:!0});var wp=l(Ns);ur=o(wp,"Closing Notes"),wp.forEach(a),xp.forEach(a),fr=p(po),Ws=n(po,"P",{});var ia=l(Ws);mr=o(ia,"The compile output for the 3rd approach seemed to be better (more precise?) than the other, yet I am not entirely sure using a "),Ze=n(ia,"CODE",{class:!0});var gp=l(Ze);xr=o(gp,"needAdditionalPass"),gp.forEach(a),wr=o(ia," is the right way of going about it."),ia.forEach(a),gr=p(po),Vs=n(po,"P",{});var pa=l(Vs);br=o(pa,"So, "),Us=n(pa,"A",{href:!0,rel:!0});var bp=l(Us);_r=o(bp,"let me know"),bp.forEach(a),Er=o(pa," if you have any thoughts or suggestions, yea?"),pa.forEach(a),po.forEach(a),$o=p(c),U=n(c,"SECTION",{});var co=l(U);Fo=n(co,"H3",{});var _p=l(Fo);Rs=n(_p,"A",{href:!0,id:!0});var Ep=l(Rs);Ir=o(Ep,"[Updated Feb 27, 2020]"),Ep.forEach(a),_p.forEach(a),Cr=p(co),$s=n(co,"P",{});var ca=l($s);Sr=o(ca,"You can read "),Js=n(ca,"A",{href:!0,rel:!0});var Ip=l(Js);Pr=o(Ip,"the discussions that's happening on Twitter"),Ip.forEach(a),Tr=o(ca,":"),ca.forEach(a),Ar=p(co),X=n(co,"BLOCKQUOTE",{class:!0});var ha=l(X);T=n(ha,"P",{lang:!0,dir:!0});var K=l(T);Dr=o(K,"Need some suggestions and inputs from "),Xe=n(K,"A",{href:!0});var Cp=l(Xe);Or=o(Cp,"@webpack"),Cp.forEach(a),qr=o(K," masters, I've written the problem and approaches that I've taken over here: "),so=n(K,"A",{href:!0});var Sp=l(so);Lr=o(Sp,"https://t.co/gLsPG9Joeq"),Sp.forEach(a),Mr=o(K,", still I'm not sure I am doing it right \u{1F648}"),eo=n(K,"A",{href:!0});var Pp=l(eo);jr=o(Pp,"@wSokra"),Pp.forEach(a),Fr=p(K),oo=n(K,"A",{href:!0});var Tp=l(oo);Hr=o(Tp,"@evilebottnawi"),Tp.forEach(a),K.forEach(a),Nr=o(ha,"\u2014 Tan Li Hau (@lihautan) "),ao=n(ha,"A",{href:!0});var Ap=l(ao);Wr=o(Ap,"February 20, 2020"),Ap.forEach(a),ha.forEach(a),co.forEach(a),this.h()},h(){r(S,"href","#the-problem"),r(S,"id","the-problem"),r(Gs,"class","code-section"),r(zs,"class","code-section"),r(ns,"href","https://expressjs.com/"),r(ns,"rel","nofollow"),r(ls,"href","https://reactjs.org/"),r(ls,"rel","nofollow"),r(Ks,"class","code-section"),r(rs,"href","#the-1st-approach"),r(rs,"id","the-1st-approach"),r(ps,"href","https://www.npmjs.com/package/webpack-manifest-plugin"),r(ps,"rel","nofollow"),r(Qs,"class","code-section"),r(Zs,"class","inline"),r(Xs,"class","inline"),r(hs,"href","https://webpack.js.org/api/module-variables/#__non_webpack_require__-webpack-specific"),r(hs,"rel","nofollow"),r(se,"class","inline"),r(ee,"class","inline"),r(oe,"class","inline"),r(ae,"class","code-section"),r(te,"class","inline"),r(ne,"class","inline"),r(le,"class","code-section"),r(re,"class","inline"),r(ys,"href","#updated-feb-27-2020"),r(ys,"id","updated-feb-27-2020"),r(us,"href","https://twitter.com/wSokra"),r(us,"rel","nofollow"),r(fs,"href","https://twitter.com/wSokra/status/1230448421351444482"),r(fs,"rel","nofollow"),r(ie,"class","inline"),r(pe,"class","code-section"),r(ce,"class","code-section"),r(he,"class","code-section"),r(ke,"class","inline"),r(ve,"class","code-section"),r(ws,"href","https://webpack.js.org/configuration/externals/"),r(ws,"rel","nofollow"),r(gs,"href","#the-2nd-approach"),r(gs,"id","the-2nd-approach"),r(de,"href","/webpack-plugin-main-template"),r(ye,"class","code-section"),r(ue,"class","inline"),r(fe,"class","inline"),r(me,"class","inline"),r(xe,"class","code-section"),r(we,"class","code-section"),r(Is,"href","https://webpack.js.org/api/compiler-hooks/"),r(Is,"rel","nofollow"),r(Ss,"href","https://webpack.js.org/api/compiler-hooks/"),r(Ss,"rel","nofollow"),r(ge,"class","inline"),r(B,"href","https://github.com/danethurber/webpack-manifest-plugin/blob/63d3ee2/lib/plugin.js#L255"),r(B,"rel","nofollow"),r(be,"class","inline"),r(_e,"class","inline"),r(Ee,"class","inline"),r(Ie,"class","code-section"),r(Ce,"class","inline"),r(Se,"class","inline"),r(Pe,"class","inline"),r(Te,"class","code-section"),r(Ae,"class","inline"),r(De,"class","inline"),r(Oe,"class","inline"),r(qe,"class","inline"),r(Ts,"href","#updated-feb-27-2020-1"),r(Ts,"id","updated-feb-27-2020-1"),r(Ds,"href","https://twitter.com/evilebottnawi"),r(Ds,"rel","nofollow"),r(Os,"lang","en"),r(Os,"dir","ltr"),r(Le,"href","https://twitter.com/evilebottnawi/status/1230417598677954560?ref_src=twsrc%5Etfw"),r(Q,"class","twitter-tweet"),r(qs,"href","#the-3rd-approach"),r(qs,"id","the-3rd-approach"),r(Me,"class","inline"),r(Ls,"href","https://webpack.js.org/api/compilation-hooks/#needadditionalpass"),r(Ls,"rel","nofollow"),r(je,"class","inline"),r(Fe,"class","inline"),r(He,"class","inline"),r(Ne,"class","code-section"),r(We,"class","code-section"),r(Ve,"class","inline"),r(Ue,"class","inline"),r(Re,"class","inline"),r($e,"class","inline"),r(Z,"href","https://github.com/webpack/webpack/blob/d426b6c/lib/DefinePlugin.js"),r(Z,"rel","nofollow"),r(Je,"class","inline"),r(Ye,"class","inline"),r(js,"href","https://webpack.js.org/api/parser/"),r(js,"rel","nofollow"),r(Be,"class","inline"),r(Ge,"class","inline"),r(ze,"class","inline"),r(Ke,"class","code-section"),r(Hs,"href","https://gist.github.com/tanhauhau/2dc6cc376fd190e05d14901b984c7fc1"),r(Hs,"rel","nofollow"),r(Qe,"class","code-section"),r(Ns,"href","#closing-notes"),r(Ns,"id","closing-notes"),r(Ze,"class","inline"),r(Us,"href","https://twitter.com/lihautan"),r(Us,"rel","nofollow"),r(Rs,"href","#updated-feb-27-2020-2"),r(Rs,"id","updated-feb-27-2020-2"),r(Js,"href","https://twitter.com/lihautan/status/1230301241533583360"),r(Js,"rel","nofollow"),r(Xe,"href","https://twitter.com/webpack?ref_src=twsrc%5Etfw"),r(so,"href","https://t.co/gLsPG9Joeq"),r(eo,"href","https://twitter.com/wSokra?ref_src=twsrc%5Etfw"),r(oo,"href","https://twitter.com/evilebottnawi?ref_src=twsrc%5Etfw"),r(T,"lang","en"),r(T,"dir","ltr"),r(ao,"href","https://twitter.com/lihautan/status/1230301241533583360?ref_src=twsrc%5Etfw"),r(X,"class","twitter-tweet")},m(c,w){I(c,f,w),s(f,H),I(c,N,w),I(c,d,w),s(d,m),s(m,S),s(S,Bs),s(d,ka),s(d,ho),s(ho,va),s(d,da),s(d,ko),s(ko,ya),s(d,ua),s(d,Gs),Gs.innerHTML=Lp,s(d,fa),s(d,zs),zs.innerHTML=Mp,s(d,ma),s(d,J),s(J,xa),s(J,ns),s(ns,wa),s(J,ga),s(J,ls),s(ls,ba),s(J,_a),s(d,Ea),s(d,Ks),Ks.innerHTML=jp,s(d,Ia),s(d,vo),s(vo,Ca),s(d,Sa),s(d,yo),s(yo,Pa),s(d,Ta),s(d,uo),s(uo,Aa),I(c,Ho,w),I(c,u,w),s(u,fo),s(fo,rs),s(rs,Da),s(u,Oa),s(u,is),s(is,qa),s(is,ps),s(ps,La),s(is,Ma),s(u,ja),s(u,Qs),Qs.innerHTML=Fp,s(u,Fa),s(u,cs),s(cs,Ha),s(cs,Zs),s(Zs,Na),s(cs,Wa),s(u,Va),s(u,P),s(P,Ua),s(P,Xs),s(Xs,Ra),s(P,$a),s(P,hs),s(hs,mo),s(mo,Ja),s(P,Ya),s(P,se),s(se,Ba),s(P,Ga),s(P,ee),s(ee,za),s(P,Ka),s(P,oe),s(oe,Qa),s(P,Za),s(u,Xa),s(u,ae),ae.innerHTML=Hp,s(u,st),s(u,ks),s(ks,et),s(ks,te),s(te,ot),s(ks,at),s(u,tt),s(u,vs),s(vs,nt),s(vs,ne),s(ne,lt),s(vs,rt),s(u,it),s(u,le),le.innerHTML=Np,s(u,pt),s(u,ds),s(ds,ct),s(ds,re),s(re,ht),s(ds,kt),I(c,No,w),I(c,x,w),s(x,xo),s(xo,ys),s(ys,vt),s(x,dt),s(x,q),s(q,yt),s(q,us),s(us,ut),s(q,ft),s(q,fs),s(fs,mt),s(q,xt),s(q,ie),s(ie,wt),s(q,gt),s(x,bt),s(x,pe),pe.innerHTML=Wp,s(x,_t),s(x,ce),ce.innerHTML=Vp,s(x,Et),s(x,wo),s(wo,It),s(x,Ct),s(x,he),he.innerHTML=Up,s(x,St),s(x,ms),s(ms,Pt),s(ms,ke),s(ke,Tt),s(ms,At),s(x,Dt),s(x,ve),ve.innerHTML=Rp,s(x,Ot),s(x,xs),s(xs,qt),s(xs,ws),s(ws,Lt),s(xs,Mt),I(c,Wo,w),I(c,h,w),s(h,go),s(go,gs),s(gs,jt),s(h,Ft),s(h,bs),s(bs,Ht),s(bs,de),s(de,Nt),s(bs,Wt),s(h,Vt),s(h,ye),ye.innerHTML=$p,s(h,Ut),s(h,Y),s(Y,Rt),s(Y,ue),s(ue,$t),s(Y,Jt),s(Y,fe),s(fe,Yt),s(Y,Bt),s(h,Gt),s(h,_s),s(_s,zt),s(_s,me),s(me,Kt),s(_s,Qt),s(h,Zt),s(h,xe),xe.innerHTML=Jp,s(h,Xt),s(h,bo),s(bo,sn),s(h,en),s(h,we),we.innerHTML=Yp,s(h,on),s(h,Es),s(Es,an),s(Es,Is),s(Is,tn),s(Es,nn),s(h,ln),s(h,Cs),s(Cs,rn),s(Cs,Ss),s(Ss,pn),s(Cs,cn),s(h,hn),s(h,_),s(_,_o),s(_o,kn),s(_,vn),s(_,Eo),s(Eo,dn),s(_,yn),s(_,Io),s(Io,un),s(_,fn),s(_,Co),s(Co,mn),s(_,xn),s(_,So),s(So,wn),s(_,gn),s(_,Po),s(Po,bn),s(_,_n),s(_,To),s(To,En),s(_,In),s(_,Ao),s(Ao,Cn),s(h,Sn),s(h,A),s(A,Pn),s(A,B),s(B,Tn),s(B,ge),s(ge,An),s(B,Dn),s(A,On),s(A,be),s(be,qn),s(A,Ln),s(A,_e),s(_e,Mn),s(A,jn),s(A,Ee),s(Ee,Fn),s(A,Hn),s(h,Nn),s(h,Ie),Ie.innerHTML=Bp,s(h,Wn),s(h,L),s(L,Vn),s(L,Ce),s(Ce,Un),s(L,Rn),s(L,Se),s(Se,$n),s(L,Jn),s(L,Pe),s(Pe,Yn),s(L,Bn),s(h,Gn),s(h,Te),Te.innerHTML=Gp,s(h,zn),s(h,Ps),s(Ps,Kn),s(Ps,Ae),s(Ae,Qn),s(Ps,Zn),s(h,Xn),s(h,M),s(M,sl),s(M,De),s(De,el),s(M,ol),s(M,Oe),s(Oe,al),s(M,tl),s(M,qe),s(qe,nl),s(M,ll),I(c,Vo,w),I(c,W,w),s(W,Do),s(Do,Ts),s(Ts,rl),s(W,il),s(W,As),s(As,pl),s(As,Ds),s(Ds,cl),s(As,hl),s(W,kl),s(W,Q),s(Q,Os),s(Os,vl),s(Q,dl),s(Q,Le),s(Le,yl),I(c,Uo,w),I(c,v,w),s(v,Oo),s(Oo,qs),s(qs,ul),s(v,fl),s(v,G),s(G,ml),s(G,Ls),s(Ls,Me),s(Me,xl),s(G,wl),s(G,qo),s(qo,gl),s(G,bl),s(v,_l),s(v,j),s(j,El),s(j,je),s(je,Il),s(j,Cl),s(j,Fe),s(Fe,Sl),s(j,Pl),s(j,He),s(He,Tl),s(j,Al),s(v,Dl),s(v,Ne),Ne.innerHTML=zp,s(v,Ol),s(v,We),We.innerHTML=Kp,s(v,ql),s(v,Ms),s(Ms,Ll),s(Ms,Ve),s(Ve,Ml),s(Ms,jl),s(v,Fl),s(v,z),s(z,Hl),s(z,Ue),s(Ue,Nl),s(z,Wl),s(z,Re),s(Re,Vl),s(z,Ul),s(v,Rl),s(v,F),s(F,$l),s(F,Z),s(Z,Jl),s(Z,$e),s($e,Yl),s(F,Bl),s(F,Je),s(Je,Gl),s(F,zl),s(F,Ye),s(Ye,Kl),s(F,Ql),s(v,Zl),s(v,D),s(D,Xl),s(D,js),s(js,Lo),s(Lo,sr),s(D,er),s(D,Be),s(Be,or),s(D,ar),s(D,Ge),s(Ge,tr),s(D,nr),s(D,ze),s(ze,lr),s(D,rr),s(v,ir),s(v,Ke),Ke.innerHTML=Qp,s(v,pr),s(v,Fs),s(Fs,cr),s(Fs,Hs),s(Hs,hr),s(Fs,kr),s(v,vr),s(v,Mo),s(Mo,dr),s(v,yr),s(v,Qe),Qe.innerHTML=Zp,I(c,Ro,w),I(c,V,w),s(V,jo),s(jo,Ns),s(Ns,ur),s(V,fr),s(V,Ws),s(Ws,mr),s(Ws,Ze),s(Ze,xr),s(Ws,wr),s(V,gr),s(V,Vs),s(Vs,br),s(Vs,Us),s(Us,_r),s(Vs,Er),I(c,$o,w),I(c,U,w),s(U,Fo),s(Fo,Rs),s(Rs,Ir),s(U,Cr),s(U,$s),s($s,Sr),s($s,Js),s(Js,Pr),s($s,Tr),s(U,Ar),s(U,X),s(X,T),s(T,Dr),s(T,Xe),s(Xe,Or),s(T,qr),s(T,so),s(so,Lr),s(T,Mr),s(T,eo),s(eo,jr),s(T,Fr),s(T,oo),s(oo,Hr),s(X,Nr),s(X,ao),s(ao,Wr)},p:Tc,d(c){c&&a(f),c&&a(N),c&&a(d),c&&a(Ho),c&&a(u),c&&a(No),c&&a(x),c&&a(Wo),c&&a(h),c&&a(Vo),c&&a(W),c&&a(Uo),c&&a(v),c&&a(Ro),c&&a(V),c&&a($o),c&&a(U)}}}function qc(Ys){let f,H;const N=[Ys[0],qp];let d={$$slots:{default:[Oc]},$$scope:{ctx:Ys}};for(let m=0;m<N.length;m+=1)d=Ur(d,N[m]);return f=new Ac({props:d}),{c(){gc(f.$$.fragment)},l(m){bc(f.$$.fragment,m)},m(m,S){_c(f,m,S),H=!0},p(m,[S]){const Bs=S&1?Ec(N,[S&1&&Dp(m[0]),S&0&&Dp(qp)]):{};S&2&&(Bs.$$scope={dirty:S,ctx:m}),f.$set(Bs)},i(m){H||(Ic(f.$$.fragment,m),H=!0)},o(m){Cc(f.$$.fragment,m),H=!1},d(m){Sc(f,m)}}}const qp={title:"Webpack Additional Compilation Pass",date:"2020-02-20T08:00:00Z",lastUpdated:"2020-02-27T08:00:00Z",label:"blog",description:'Recently, I was working on a server-side rendering application, and encounter a scenario that I think it requires "double compilation" with webpack.The problemI am not entirely sure I am doing it in the right approach, feel free to suggest or discuss it with me. The following will be about the problem I faced and how I worked on it....',tableOfContents:[{link:"the-problem",title:"The problem"},{link:"the-1st-approach",title:"The 1st approach",nested:[{link:"updated-feb-27-2020",title:"Updated Feb 27, 2020"}]},{link:"the-2nd-approach",title:"The 2nd approach",nested:[{link:"updated-feb-27-2020-1",title:"Updated Feb 27, 2020"}]},{link:"the-3rd-approach",title:"The 3rd approach"},{link:"closing-notes",title:"Closing Notes",nested:[{link:"updated-feb-27-2020-2",title:"Updated Feb 27, 2020"}]}]};function Lc(Ys,f,H){return Pc("blog",{image:Dc}),Ys.$$set=N=>{H(0,f=Ur(Ur({},f),Op(N)))},f=Op(f),[f]}class Vc extends mc{constructor(f){super();xc(this,f,Lc,qc,wc,{})}}export{Vc as default,qp as metadata};
