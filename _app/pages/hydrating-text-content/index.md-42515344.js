import{S as od,i as ad,s as nd,C as sc,w as rd,x as ld,y as id,z as cd,A as uh,q as pd,o as hd,B as dd,r as kd,Y as gh,e as a,t,k as i,c as n,a as r,h as o,d as s,m as c,b as l,g as T,H as e,J as vd}from"../../chunks/vendor-da4388d4.js";import{B as yd}from"../../chunks/BlogLayout-14cfab6f.js";import{_ as ud}from"../../chunks/twitter-card-image-a57df29d.js";import"../../chunks/stores-1fad7c36.js";import"../../chunks/ldjson-b0805387.js";/* empty css                                */function gd(Ye){let g,D,H,ae,x,w,Ge,ne,Uo,Wo,re,$o,zo,le,Jo,Ko,Qo,q,Yo,ie,Go,Zo,ce,Xo,ea,sa,_t,ta,fo,m,Et,pe,oa,aa,bt,na,ra,Ze,xh='<pre class="prism language-"><code><span class="line">Text content did not match. Server: &quot;Count: 0&quot; Client: &quot;Count: &quot;</span></code></pre>',la,Tt,ia,ca,Xe,mh=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">App</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">count</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">setCount</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">useState</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;Count: &#123;count&#125;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &lt;</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">onClick</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">&#123;() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">setCount</span><span style="color: var(--shiki-color-text)">(count </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">)&#125;&gt;Increment&lt;/</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  );</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,pa,It,ha,da,Ht,ka,va,Mt,ya,xo,k,Dt,he,ua,ga,St,fa,xa,es,wh=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;Count: 0&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)">&gt;Increment&lt;/</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,ma,Ct,wa,_a,Ot,Ea,ba,ss,_h=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">&lt;!-- disabled javascript --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">\u2514\u2500 &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    \u251C\u2500 &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    \u2502   \u2514\u2500 &quot;Count: 0&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    \u2514\u2500 &lt;</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        \u2514\u2500 &quot;Increment&quot;</span></span></code></pre>`,Ta,ts,Eh=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">&lt;!-- enabled javascript --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">\u2514\u2500 &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    \u251C\u2500 &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    \u2502   \u251C\u2500 &quot;Count: &quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    \u2502   \u2514\u2500 &quot;0&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    \u2514\u2500 &lt;</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        \u2514\u2500 &quot;Increment&quot;</span></span></code></pre>`,Ia,Rt,Ha,Ma,C,Da,os,Sa,Ca,as,Oa,Ra,ns,La,Pa,Aa,de,qa,rs,Va,ja,Na,O,Ba,ls,Fa,Ua,is,Wa,$a,cs,za,Ja,Ka,ps,bh=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;Count: &#123;</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">&#125;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">onClick</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">&#123;() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">setCount</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">)&#125;&gt;Increment&lt;/</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,Qa,Lt,Ya,Ga,hs,Th=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  type</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;div&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  props</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    children</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> [&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      type</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;div&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      props</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        children</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-string-expression)">&#39;Count: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        ]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      type</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;button&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      props</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">onClick</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">setCount</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        children</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-string-expression)">&#39;Increment&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        ]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Za,ke,Xa,ds,en,sn,tn,ve,on,ks,an,nn,rn,Pt,ln,cn,V,pn,vs,hn,dn,ys,kn,vn,yn,us,Ih='<pre class="prism language-"><code><span class="line">Text content did not match. Server: &quot;Count: 0&quot; Client: &quot;Count: &quot;</span></code></pre>',un,j,gn,gs,fn,xn,fs,mn,wn,mo,y,At,ye,_n,En,qt,bn,Tn,Vt,In,Hn,N,Mn,ue,xs,Dn,Sn,ge,ms,Cn,On,Rn,jt,Ln,Pn,Nt,B,An,ws,qn,Vn,_s,jn,Nn,Bn,Bt,Fn,Un,F,Wn,fe,Es,$n,zn,xe,bs,Jn,Kn,Qn,me,Yn,we,Ts,Gn,Zn,Xn,Is,Hh='<pre class="prism language-diff-svelte"><code><div class="line"><span class="token deleted-sign deleted language-svelte"><span class="token prefix deleted">-</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span></div><div class="line"></span><span class="token inserted-sign inserted language-svelte"><span class="token prefix inserted">+</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">data-reactroot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span></div><div class="line"></span><span class="token deleted-sign deleted language-svelte"><span class="token prefix deleted">-</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Count: 0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div><div class="line"></span><span class="token inserted-sign inserted language-svelte"><span class="token prefix inserted">+</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Count: <span class="token comment">&lt;!-- --></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div><div class="line"></span><span class="token unchanged language-svelte"><span class="token prefix unchanged"> </span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>Increment<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div><div class="line"></span><span class="token deleted-arrow deleted language-svelte"><span class="token prefix deleted"><</span>/div></span></div></code></pre>',er,U,sr,Hs,tr,or,P,ar,Ms,nr,rr,Ds,lr,ir,cr,W,pr,Ss,hr,dr,Cs,kr,vr,yr,Os,Mh=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">&lt;!-- disabled javascript --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">\u2514\u2500 &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    \u251C\u2500 &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    \u2502   \u251C\u2500 &quot;Count: &quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    \u2502   \u251C\u2500 </span><span style="color: var(--shiki-token-comment)">&lt;!-- --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    \u2502   \u2514\u2500 &quot;0&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    \u2514\u2500 &lt;</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        \u2514\u2500 &quot;Increment&quot;</span></span></code></pre>`,ur,_e,gr,Ee,fr,xr,mr,Ft,wr,_r,be,Er,Te,br,Tr,wo,p,Ut,Ie,Ir,Hr,He,Mr,Me,Dr,Sr,Cr,Wt,Or,Rr,$t,Lr,Pr,Rs,Dh='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;&#123;a&#125; + &#123;b&#125; = &#123;a + b&#125;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>',Ar,zt,Jt,qr,Vr,De,jr,$,Nr,Ls,Br,Fr,Ur,Wr,Se,$r,Ce,zr,Jr,Kr,Ps,Sh=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    &lt;h1&gt;Introduction&lt;/h1&gt;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    &lt;div&gt;Hello World&lt;/div&gt;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  &#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#123;@html string&#125;</span></span></code></pre>`,Qr,Kt,Yr,Gr,Qt,Zr,Xr,Yt,el,sl,As,Ch=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> Header </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./Header.svelte&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> Footer </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./Footer.svelte&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    &lt;h1&gt;Introduction&lt;/h1&gt;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    &lt;div&gt;Hello World&lt;/div&gt;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  &#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">Header</span><span style="color: var(--shiki-color-text)">&gt;This is header&lt;/</span><span style="color: var(--shiki-token-string-expression)">Header</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#123;@html string&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">Footer</span><span style="color: var(--shiki-color-text)">&gt;This is footer&lt;/</span><span style="color: var(--shiki-token-string-expression)">Footer</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,tl,Gt,ol,al,qs,Oh=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">header</span><span style="color: var(--shiki-color-text)">&gt;This is header&lt;/</span><span style="color: var(--shiki-token-string-expression)">header</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">nav</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">ul</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">li</span><span style="color: var(--shiki-color-text)">&gt;&lt;</span><span style="color: var(--shiki-token-string-expression)">a</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">href</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;#&quot;</span><span style="color: var(--shiki-color-text)">&gt;Home&lt;/</span><span style="color: var(--shiki-token-string-expression)">a</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">li</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;/</span><span style="color: var(--shiki-token-string-expression)">ul</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">nav</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">h1</span><span style="color: var(--shiki-color-text)">&gt;Introduction&lt;/</span><span style="color: var(--shiki-token-string-expression)">h1</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;Hello World&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">class</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;footer&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">img</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">src</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;footer-img&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  This is footer</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,nl,R,rl,Vs,ll,il,js,cl,pl,Ns,hl,dl,kl,Zt,vl,yl,L,ul,Bs,gl,fl,Fs,xl,ml,Us,wl,_l,El,Xt,Ws,eo,bl,Tl,Il,M,Hl,$s,Ml,Dl,zs,Sl,Cl,Js,Ol,Rl,Ks,Ll,Pl,Al,Qs,Rh=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">&lt;!-- Header.svelte --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">header</span><span style="color: var(--shiki-color-text)">&gt;&lt;</span><span style="color: var(--shiki-token-string-expression)">slot</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">slot</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">header</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">nav</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">ul</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">li</span><span style="color: var(--shiki-color-text)">&gt;&lt;</span><span style="color: var(--shiki-token-string-expression)">a</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">href</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;#&quot;</span><span style="color: var(--shiki-color-text)">&gt;Home&lt;/</span><span style="color: var(--shiki-token-string-expression)">a</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">li</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;/</span><span style="color: var(--shiki-token-string-expression)">ul</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">nav</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,ql,so,Q,Vl,Ys,jl,Nl,Oe,Bl,Fl,z,Ul,Gs,Wl,$l,Zs,zl,Jl,Kl,to,Ql,Yl,Xs,Lh=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">header</span><span style="color: var(--shiki-color-text)">&gt;This is header&lt;/</span><span style="color: var(--shiki-token-string-expression)">header</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">nav</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">ul</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">li</span><span style="color: var(--shiki-color-text)">&gt;&lt;</span><span style="color: var(--shiki-token-string-expression)">a</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">href</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;#&quot;</span><span style="color: var(--shiki-color-text)">&gt;Home&lt;/</span><span style="color: var(--shiki-token-string-expression)">a</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">li</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;/</span><span style="color: var(--shiki-token-string-expression)">ul</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">nav</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">h1</span><span style="color: var(--shiki-color-text)">&gt;Introduction&lt;/</span><span style="color: var(--shiki-token-string-expression)">h1</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;Hello World&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">&lt;!-- HTML Tag Ends Here --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">class</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;footer&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">img</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">src</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;footer-img&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  This is footer</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,Gl,et,Ph=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// claim HTML node until a comment that matches the &#96;commentMarker&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">claimUntil</span><span style="color: var(--shiki-color-text)">(nodes</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> commentMarker) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">while</span><span style="color: var(--shiki-color-text)">(i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">nodes</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> nodes[i];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.nodeType </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">8</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/* comment node */</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">textContent</span><span style="color: var(--shiki-token-function)">.trim</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> commentMarker) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">break</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">nodes</span><span style="color: var(--shiki-token-function)">.splice</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> i);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">claimHtmlTag</span><span style="color: var(--shiki-color-text)">(nodes) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">htmlTagNodes</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">claimUntil</span><span style="color: var(--shiki-color-text)">(nodes</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;HTML Tag Ends Here&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">HtmlTag</span><span style="color: var(--shiki-color-text)">(htmlTagNodes);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125; </span></span></code></pre>`,_o,E,oo,Re,Zl,Xl,Le,ei,Pe,si,ti,oi,Ae,ai,st,ni,ri,li,tt,Ah=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">MyComponent</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">dangerouslySetInnerHTML</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">&#123;&#123;__html</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    &lt;h1&gt;Introduction&lt;/h1&gt;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    &lt;div&gt;Hello World&lt;/div&gt;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  &#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;&#125; /&gt;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ii,ot,qh=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">&lt;!-- the parent &#96;&lt;div&gt;&#96; act as a boundary --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">h1</span><span style="color: var(--shiki-color-text)">&gt;Introduction&lt;/</span><span style="color: var(--shiki-token-string-expression)">h1</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;Hello World&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,ci,J,pi,at,hi,di,nt,ki,vi,Eo,_,ao,qe,yi,ui,no,gi,fi,Ve,xi,Y,rt,mi,wi,_i,Ei,je,bi,lt,Ti,Ii,Hi,Ne,Mi,it,Di,Si,Ci,Be,Oi,Fe,Ri,Li,Pi,ro,G,lo,Ai,qi,Ue,Vi,ji,bo,Z,io,We,Ni,Bi,$e,ct,Fi,K,co,ze,Ui,Wi,po,Je,$i,zi,ho,Ke,Ji,Ki,pt,Qi,ko,vo,Qe,Yi;return{c(){g=a("section"),D=a("h2"),H=a("a"),ae=t("Disclaimer"),x=i(),w=a("p"),Ge=t("I am not going to talk about what is hydration, to know more about client-side rendering, server-side rendering and hydration, please "),ne=a("a"),Uo=t("read this amazing article"),Wo=t(" by "),re=a("a"),$o=t("Jason Miller"),zo=t(" and "),le=a("a"),Jo=t("Addy Osmani"),Ko=t("."),Qo=i(),q=a("p"),Yo=t("I am not going to share about how to do rehydration in React as well, you can read about that from "),ie=a("a"),Go=t("here"),Zo=t(" and "),ce=a("a"),Xo=t("here"),ea=t("."),sa=i(),_t=a("p"),ta=t('I am going to share a story, how I "understand" more about the mechanics of rehydration in React, and how I apply it in real life.'),fo=i(),m=a("section"),Et=a("h2"),pe=a("a"),oa=t("Background"),aa=i(),bt=a("p"),na=t("Recently, I was bewildered by a React hydration warning:"),ra=i(),Ze=a("div"),la=i(),Tt=a("p"),ia=t("To give you a sense of the situation, this is the component I was trying to rehydrate:"),ca=i(),Xe=a("div"),pa=i(),It=a("p"),ha=t("Although React warned about the mismatch in the console, the hydrated app still worked fine."),da=i(),Ht=a("p"),ka=t("So I can ignore it. \u{1F648}"),va=i(),Mt=a("p"),ya=t("Still, my curiosity made me dig deeper, to find out the reason behind it."),xo=i(),k=a("section"),Dt=a("h2"),he=a("a"),ua=t("The investigation"),ga=i(),St=a("p"),fa=t("So, the first thing I looked at, was the server-rendered HTML, which will be hydrated by React later."),xa=i(),es=a("div"),ma=i(),Ct=a("p"),wa=t("Looks pretty normal right?"),_a=i(),Ot=a("p"),Ea=t("Somehow, my gut feeling telling me to look at the DOM with and without hydration next:"),ba=i(),ss=a("div"),Ta=i(),ts=a("div"),Ia=i(),Rt=a("p"),Ha=t("A-ha! Noticed the difference in the DOM?"),Ma=i(),C=a("p"),Da=t("Although they both looked visually the same, but in the DOM created by the initial HTML has only 1 text node, "),os=a("code"),Sa=t('"Count: 0"'),Ca=t(", but the DOM after hydration has 2 text nodes, "),as=a("code"),Oa=t('"Count: "'),Ra=t(" and "),ns=a("code"),La=t('"0"'),Pa=t("."),Aa=i(),de=a("p"),qa=t("Why is that so? The secret lies in the component "),rs=a("code"),Va=t("App"),ja=t("."),Na=i(),O=a("p"),Ba=t("The functional component "),ls=a("code"),Fa=t("App"),Ua=t(" returns the following React element when "),is=a("code"),Wa=t("count"),$a=t(" is "),cs=a("code"),za=t("0"),Ja=t(":"),Ka=i(),ps=a("div"),Qa=i(),Lt=a("p"),Ya=t("which itself is a plain JavaScript object, which is roughly:"),Ga=i(),hs=a("div"),Za=i(),ke=a("p"),Xa=t("Noticed the "),ds=a("code"),en=t("div"),sn=t(" has 2 children? That's why it rendered 2 text nodes!"),tn=i(),ve=a("p"),on=t("So, when React tries to hydrate the "),ks=a("code"),an=t("div"),nn=t(" from SSR, it starts with comparing all the props from the React element and the attributes from the DOM. Then, it compares the element's children."),rn=i(),Pt=a("p"),ln=t("Based on the React element, React expects 2 text nodes, but the DOM only has 1. So it tries to match with the 1st text node, and create the 2nd one."),cn=i(),V=a("p"),pn=t("It is when the matching happens, where React realizes that it is expecting the text node to contain "),vs=a("code"),hn=t('"Count: "'),dn=t(", but the server content is "),ys=a("code"),kn=t('"Count: 0"'),vn=t(", thus the error message:"),yn=i(),us=a("div"),un=i(),j=a("p"),gn=t("Then, React patches the text node, by setting the content to the expected "),gs=a("code"),fn=t('"Count: "'),xn=t(", and created another text node, "),fs=a("code"),mn=t('"0"'),wn=t(", so visually there's no change, but in the DOM, React has changed the text content and created a new text node."),mo=i(),y=a("section"),At=a("h2"),ye=a("a"),_n=t("Is this a bug?"),En=i(),qt=a("p"),bn=t("So, is this a React hydration bug? or is this an expected behavior?"),Tn=i(),Vt=a("p"),In=t("Turns out that, it was my bug \u{1F92E}\u{1F92E}."),Hn=i(),N=a("p"),Mn=t("I used "),ue=a("a"),xs=a("code"),Dn=t("ReactDOMServer.renderToStaticMarkup"),Sn=t(" instead of "),ge=a("a"),ms=a("code"),Cn=t("ReactDOMServer.renderToString"),On=t("."),Rn=i(),jt=a("p"),Ln=t("The doc says clearly,"),Pn=i(),Nt=a("blockquote"),B=a("p"),An=t("If you plan to use React on the client to make the markup interactive, do not use this method. Instead, use "),ws=a("code"),qn=t("renderToString"),Vn=t(" on the server and "),_s=a("code"),jn=t("ReactDOM.hydrate()"),Nn=t(" on the client."),Bn=i(),Bt=a("p"),Fn=t("\u{1F648}"),Un=i(),F=a("p"),Wn=t("So, what is the difference between "),fe=a("a"),Es=a("code"),$n=t("ReactDOMServer.renderToStaticMarkup"),zn=t(" and "),xe=a("a"),bs=a("code"),Jn=t("ReactDOMServer.renderToString"),Kn=t(" ?"),Qn=i(),me=a("p"),Yn=t("This is what "),we=a("a"),Ts=a("code"),Gn=t("ReactDOMServer.renderToString"),Zn=t(" generates:"),Xn=i(),Is=a("div"),er=i(),U=a("p"),sr=t("It adds a "),Hs=a("code"),tr=t("data-reactroot"),or=t(" which is used by React internally. (From what I read from the code, it seemed to be used by React only to warn legacy code to "),P=a("a"),ar=t("switch from "),Ms=a("code"),nr=t("render()"),rr=t(" to "),Ds=a("code"),lr=t("hydrate()"),ir=t(" before stopping support in React v17, correct me if I'm wrong)."),cr=i(),W=a("p"),pr=t("Besides, it adds a comment in between "),Ss=a("code"),hr=t('"Count: "'),dr=t(" and "),Cs=a("code"),kr=t('"0"'),vr=t(", so the initial DOM looks like this:"),yr=i(),Os=a("div"),ur=i(),_e=a("p"),gr=t("A "),Ee=a("a"),fr=t("comment node"),xr=t(" sits in between 2 text nodes, nicely separate the boundary of the 2 text nodes."),mr=i(),Ft=a("p"),wr=t("As you could expect, this time around, there's no more hydration error."),_r=i(),be=a("p"),Er=t("The initial DOM provided 2 text nodes as React would expect, and "),Te=a("a"),br=t("React would skip comment nodes and only hydrate element nodes and text nodes"),Tr=t("."),wo=i(),p=a("section"),Ut=a("h2"),Ie=a("a"),Ir=t("Apply what I've learned"),Hr=i(),He=a("p"),Mr=t("So, the next obvious place to apply what I've learned is "),Me=a("a"),Dr=t("Svelte"),Sr=t("."),Cr=i(),Wt=a("p"),Or=t("I found out there are 2 places that Svelte can use this technique for better hydration."),Rr=i(),$t=a("p"),Lr=t('The first is the hydrating text node. I found out that Svelte hydrates neighboring text nodes the same way as I described as "a bug", modifying the 1st text node and creating the 2nd text node. It gets "worse" when you have more neighboring text nodes:'),Pr=i(),Rs=a("div"),Ar=i(),zt=a("p"),Jt=a("em"),qr=t("5 neighboring text nodes"),Vr=i(),De=a("p"),jr=t("The second place I found the technique is useful, is hydrating "),$=a("a"),Nr=t("HTML tags ("),Ls=a("code"),Br=t("{@html string}"),Fr=t(")"),Ur=t("."),Wr=i(),Se=a("p"),$r=t("HTML tags allows you to render arbitrary HTML into the DOM, just like React's "),Ce=a("a"),zr=t("dangerouslySetInnerHTML"),Jr=t("."),Kr=i(),Ps=a("div"),Qr=i(),Kt=a("p"),Yr=t("So, why is hydrating HTML tag hard?"),Gr=i(),Qt=a("p"),Zr=t("HTML tag allow multiple elements to be passed in, which makes it hard to determine the bound of the HTML tag when hydrating."),Xr=i(),Yt=a("p"),el=t("Take this example:"),sl=i(),As=a("div"),tl=i(),Gt=a("p"),ol=t("The rendered HTML may look something like this:"),al=i(),qs=a("div"),nl=i(),R=a("p"),rl=t("Now, can you tell me which elements belong to "),Vs=a("code"),ll=t("<Header />"),il=t(", "),js=a("code"),cl=t("{@html string}"),pl=t(" and "),Ns=a("code"),hl=t("<Footer />"),dl=t("?"),kl=i(),Zt=a("p"),vl=t("Let's walk through it step by step."),yl=i(),L=a("p"),ul=t("Hydrating this component meant that we are going to claim components belong to "),Bs=a("code"),gl=t("<Header>"),fl=t(", "),Fs=a("code"),xl=t("{@html string}"),ml=t(" then "),Us=a("code"),wl=t("<Footer>"),_l=t("."),El=i(),Xt=a("blockquote"),Ws=a("p"),eo=a("strong"),bl=t("Claiming"),Tl=t(" in Svelte means marking the element as part of the component, and hydrate it by providing reactivity to the element."),Il=i(),M=a("p"),Hl=t("Claiming the "),$s=a("code"),Ml=t("<Header />"),Dl=t(" component, by itself, will claim away "),zs=a("code"),Sl=t("<header>"),Cl=t(" and "),Js=a("code"),Ol=t("<nav>"),Rl=t(", because in "),Ks=a("code"),Ll=t("Header.svelte"),Pl=t(" contains these 2 elements:"),Al=i(),Qs=a("div"),ql=i(),so=a("blockquote"),Q=a("p"),Vl=t("You can learn about Svelte "),Ys=a("code"),jl=t("<slot>"),Nl=i(),Oe=a("a"),Bl=t("here"),Fl=i(),z=a("p"),Ul=t("Now claiming for "),Gs=a("code"),Wl=t("{@html string}"),$l=t(" is tricky, because you have no idea when it ends and when is the start of the "),Zs=a("code"),zl=t("<Footer />"),Jl=t(" component"),Kl=i(),to=a("p"),Ql=t("If we put a comment as a marker for the end of the HTML tag, it would make things easier:"),Yl=i(),Xs=a("div"),Gl=i(),et=a("div"),_o=i(),E=a("section"),oo=a("h2"),Re=a("a"),Zl=t("dangerouslySetInnerHtml"),Xl=i(),Le=a("p"),ei=t("React has "),Pe=a("a"),si=t("dangerouslySetInnerHTML"),ti=t(" right? Does it have the same issue?"),oi=i(),Ae=a("p"),ai=t("Apparently not. "),st=a("code"),ni=t("dangerouslySetInnerHTML"),ri=t(" is always used inside an HTML element, so the parent element is the boundary of the inner HTML content."),li=i(),tt=a("div"),ii=i(),ot=a("div"),ci=i(),J=a("p"),pi=t("Unless "),at=a("code"),hi=t("dangerouslySetInnerHTML"),di=t(" is supported on "),nt=a("code"),ki=t("React.Fragment"),vi=t(", then it would not be a problem."),Eo=i(),_=a("section"),ao=a("h2"),qe=a("a"),yi=t("React Partial Hydration"),ui=i(),no=a("p"),gi=t("Partial hydration in React is a mechanism to partially hydrate a server-rendered result while other parts of the pages are still loading the code or data."),fi=i(),Ve=a("p"),xi=t("This is helpful when you are hydrating a "),Y=a("a"),rt=a("code"),mi=t("<Suspense>"),wi=t(" component"),_i=t(". The server-rendered HTML may have rendered based on the code or data, which is yet to be fetched by the component. If React now shows the fallback content during the hydration, the user may see a flash of the actual content, before turning into a loading state until the code or data is ready."),Ei=i(),je=a("p"),bi=t("Partial hydration allows React to not hydrate those "),lt=a("code"),Ti=t("<Suspense />"),Ii=t(" component until the code or data is ready."),Hi=i(),Ne=a("p"),Mi=t("So, how does React knows the boundary of "),it=a("code"),Di=t("<Suspense />"),Si=t(" from the server-rendered HTML which it could safely skip, before hydrating them when it's ready?"),Ci=i(),Be=a("p"),Oi=t("It's "),Fe=a("a"),Ri=t("the marker comment"),Li=t(" to the rescue again!"),Pi=i(),ro=a("blockquote"),G=a("p"),lo=a("strong"),Ai=t("Disclaimer"),qi=t(`
The section above is entirely based on my understanding by reading the `),Ue=a("a"),Vi=t("Partial Hydration PR"),ji=t(", please feel free to correct me if I'm wrong."),bo=i(),Z=a("section"),io=a("h2"),We=a("a"),Ni=t("References"),Bi=i(),$e=a("ul"),ct=a("li"),Fi=t("Some interesting React commits and PRs that serves as a good entry point to understand hydration:"),K=a("ul"),co=a("li"),ze=a("a"),Ui=t("Remove most comments from HTML generation output"),Wi=i(),po=a("li"),Je=a("a"),$i=t("Warn When The HTML Mismatches in DEV"),zi=i(),ho=a("li"),Ke=a("a"),Ji=t("Partial Hydration PR"),Ki=i(),pt=a("li"),Qi=t("Some related Svelte PRs"),ko=a("ul"),vo=a("li"),Qe=a("a"),Yi=t("Use SSR rendered as initial html for runtime hydration test"),this.h()},l(d){g=n(d,"SECTION",{});var f=r(g);D=n(f,"H2",{});var tc=r(D);H=n(tc,"A",{href:!0,id:!0});var oc=r(H);ae=o(oc,"Disclaimer"),oc.forEach(s),tc.forEach(s),x=c(f),w=n(f,"P",{});var X=r(w);Ge=o(X,"I am not going to talk about what is hydration, to know more about client-side rendering, server-side rendering and hydration, please "),ne=n(X,"A",{href:!0,rel:!0});var ac=r(ne);Uo=o(ac,"read this amazing article"),ac.forEach(s),Wo=o(X," by "),re=n(X,"A",{href:!0,rel:!0});var nc=r(re);$o=o(nc,"Jason Miller"),nc.forEach(s),zo=o(X," and "),le=n(X,"A",{href:!0,rel:!0});var rc=r(le);Jo=o(rc,"Addy Osmani"),rc.forEach(s),Ko=o(X,"."),X.forEach(s),Qo=c(f),q=n(f,"P",{});var ht=r(q);Yo=o(ht,"I am not going to share about how to do rehydration in React as well, you can read about that from "),ie=n(ht,"A",{href:!0,rel:!0});var lc=r(ie);Go=o(lc,"here"),lc.forEach(s),Zo=o(ht," and "),ce=n(ht,"A",{href:!0,rel:!0});var ic=r(ce);Xo=o(ic,"here"),ic.forEach(s),ea=o(ht,"."),ht.forEach(s),sa=c(f),_t=n(f,"P",{});var cc=r(_t);ta=o(cc,'I am going to share a story, how I "understand" more about the mechanics of rehydration in React, and how I apply it in real life.'),cc.forEach(s),f.forEach(s),fo=c(d),m=n(d,"SECTION",{});var b=r(m);Et=n(b,"H2",{});var pc=r(Et);pe=n(pc,"A",{href:!0,id:!0});var hc=r(pe);oa=o(hc,"Background"),hc.forEach(s),pc.forEach(s),aa=c(b),bt=n(b,"P",{});var dc=r(bt);na=o(dc,"Recently, I was bewildered by a React hydration warning:"),dc.forEach(s),ra=c(b),Ze=n(b,"DIV",{class:!0});var Vh=r(Ze);Vh.forEach(s),la=c(b),Tt=n(b,"P",{});var kc=r(Tt);ia=o(kc,"To give you a sense of the situation, this is the component I was trying to rehydrate:"),kc.forEach(s),ca=c(b),Xe=n(b,"DIV",{class:!0});var jh=r(Xe);jh.forEach(s),pa=c(b),It=n(b,"P",{});var vc=r(It);ha=o(vc,"Although React warned about the mismatch in the console, the hydrated app still worked fine."),vc.forEach(s),da=c(b),Ht=n(b,"P",{});var yc=r(Ht);ka=o(yc,"So I can ignore it. \u{1F648}"),yc.forEach(s),va=c(b),Mt=n(b,"P",{});var uc=r(Mt);ya=o(uc,"Still, my curiosity made me dig deeper, to find out the reason behind it."),uc.forEach(s),b.forEach(s),xo=c(d),k=n(d,"SECTION",{});var v=r(k);Dt=n(v,"H2",{});var gc=r(Dt);he=n(gc,"A",{href:!0,id:!0});var fc=r(he);ua=o(fc,"The investigation"),fc.forEach(s),gc.forEach(s),ga=c(v),St=n(v,"P",{});var xc=r(St);fa=o(xc,"So, the first thing I looked at, was the server-rendered HTML, which will be hydrated by React later."),xc.forEach(s),xa=c(v),es=n(v,"DIV",{class:!0});var Nh=r(es);Nh.forEach(s),ma=c(v),Ct=n(v,"P",{});var mc=r(Ct);wa=o(mc,"Looks pretty normal right?"),mc.forEach(s),_a=c(v),Ot=n(v,"P",{});var wc=r(Ot);Ea=o(wc,"Somehow, my gut feeling telling me to look at the DOM with and without hydration next:"),wc.forEach(s),ba=c(v),ss=n(v,"DIV",{class:!0});var Bh=r(ss);Bh.forEach(s),Ta=c(v),ts=n(v,"DIV",{class:!0});var Fh=r(ts);Fh.forEach(s),Ia=c(v),Rt=n(v,"P",{});var _c=r(Rt);Ha=o(_c,"A-ha! Noticed the difference in the DOM?"),_c.forEach(s),Ma=c(v),C=n(v,"P",{});var ee=r(C);Da=o(ee,"Although they both looked visually the same, but in the DOM created by the initial HTML has only 1 text node, "),os=n(ee,"CODE",{class:!0});var Ec=r(os);Sa=o(Ec,'"Count: 0"'),Ec.forEach(s),Ca=o(ee,", but the DOM after hydration has 2 text nodes, "),as=n(ee,"CODE",{class:!0});var bc=r(as);Oa=o(bc,'"Count: "'),bc.forEach(s),Ra=o(ee," and "),ns=n(ee,"CODE",{class:!0});var Tc=r(ns);La=o(Tc,'"0"'),Tc.forEach(s),Pa=o(ee,"."),ee.forEach(s),Aa=c(v),de=n(v,"P",{});var To=r(de);qa=o(To,"Why is that so? The secret lies in the component "),rs=n(To,"CODE",{class:!0});var Ic=r(rs);Va=o(Ic,"App"),Ic.forEach(s),ja=o(To,"."),To.forEach(s),Na=c(v),O=n(v,"P",{});var se=r(O);Ba=o(se,"The functional component "),ls=n(se,"CODE",{class:!0});var Hc=r(ls);Fa=o(Hc,"App"),Hc.forEach(s),Ua=o(se," returns the following React element when "),is=n(se,"CODE",{class:!0});var Mc=r(is);Wa=o(Mc,"count"),Mc.forEach(s),$a=o(se," is "),cs=n(se,"CODE",{class:!0});var Dc=r(cs);za=o(Dc,"0"),Dc.forEach(s),Ja=o(se,":"),se.forEach(s),Ka=c(v),ps=n(v,"DIV",{class:!0});var Uh=r(ps);Uh.forEach(s),Qa=c(v),Lt=n(v,"P",{});var Sc=r(Lt);Ya=o(Sc,"which itself is a plain JavaScript object, which is roughly:"),Sc.forEach(s),Ga=c(v),hs=n(v,"DIV",{class:!0});var Wh=r(hs);Wh.forEach(s),Za=c(v),ke=n(v,"P",{});var Io=r(ke);Xa=o(Io,"Noticed the "),ds=n(Io,"CODE",{class:!0});var Cc=r(ds);en=o(Cc,"div"),Cc.forEach(s),sn=o(Io," has 2 children? That's why it rendered 2 text nodes!"),Io.forEach(s),tn=c(v),ve=n(v,"P",{});var Ho=r(ve);on=o(Ho,"So, when React tries to hydrate the "),ks=n(Ho,"CODE",{class:!0});var Oc=r(ks);an=o(Oc,"div"),Oc.forEach(s),nn=o(Ho," from SSR, it starts with comparing all the props from the React element and the attributes from the DOM. Then, it compares the element's children."),Ho.forEach(s),rn=c(v),Pt=n(v,"P",{});var Rc=r(Pt);ln=o(Rc,"Based on the React element, React expects 2 text nodes, but the DOM only has 1. So it tries to match with the 1st text node, and create the 2nd one."),Rc.forEach(s),cn=c(v),V=n(v,"P",{});var dt=r(V);pn=o(dt,"It is when the matching happens, where React realizes that it is expecting the text node to contain "),vs=n(dt,"CODE",{class:!0});var Lc=r(vs);hn=o(Lc,'"Count: "'),Lc.forEach(s),dn=o(dt,", but the server content is "),ys=n(dt,"CODE",{class:!0});var Pc=r(ys);kn=o(Pc,'"Count: 0"'),Pc.forEach(s),vn=o(dt,", thus the error message:"),dt.forEach(s),yn=c(v),us=n(v,"DIV",{class:!0});var $h=r(us);$h.forEach(s),un=c(v),j=n(v,"P",{});var kt=r(j);gn=o(kt,"Then, React patches the text node, by setting the content to the expected "),gs=n(kt,"CODE",{class:!0});var Ac=r(gs);fn=o(Ac,'"Count: "'),Ac.forEach(s),xn=o(kt,", and created another text node, "),fs=n(kt,"CODE",{class:!0});var qc=r(fs);mn=o(qc,'"0"'),qc.forEach(s),wn=o(kt,", so visually there's no change, but in the DOM, React has changed the text content and created a new text node."),kt.forEach(s),v.forEach(s),mo=c(d),y=n(d,"SECTION",{});var u=r(y);At=n(u,"H2",{});var Vc=r(At);ye=n(Vc,"A",{href:!0,id:!0});var jc=r(ye);_n=o(jc,"Is this a bug?"),jc.forEach(s),Vc.forEach(s),En=c(u),qt=n(u,"P",{});var Nc=r(qt);bn=o(Nc,"So, is this a React hydration bug? or is this an expected behavior?"),Nc.forEach(s),Tn=c(u),Vt=n(u,"P",{});var Bc=r(Vt);In=o(Bc,"Turns out that, it was my bug \u{1F92E}\u{1F92E}."),Bc.forEach(s),Hn=c(u),N=n(u,"P",{});var vt=r(N);Mn=o(vt,"I used "),ue=n(vt,"A",{href:!0,rel:!0});var Fc=r(ue);xs=n(Fc,"CODE",{class:!0});var Uc=r(xs);Dn=o(Uc,"ReactDOMServer.renderToStaticMarkup"),Uc.forEach(s),Fc.forEach(s),Sn=o(vt," instead of "),ge=n(vt,"A",{href:!0,rel:!0});var Wc=r(ge);ms=n(Wc,"CODE",{class:!0});var $c=r(ms);Cn=o($c,"ReactDOMServer.renderToString"),$c.forEach(s),Wc.forEach(s),On=o(vt,"."),vt.forEach(s),Rn=c(u),jt=n(u,"P",{});var zc=r(jt);Ln=o(zc,"The doc says clearly,"),zc.forEach(s),Pn=c(u),Nt=n(u,"BLOCKQUOTE",{});var Jc=r(Nt);B=n(Jc,"P",{});var yt=r(B);An=o(yt,"If you plan to use React on the client to make the markup interactive, do not use this method. Instead, use "),ws=n(yt,"CODE",{class:!0});var Kc=r(ws);qn=o(Kc,"renderToString"),Kc.forEach(s),Vn=o(yt," on the server and "),_s=n(yt,"CODE",{class:!0});var Qc=r(_s);jn=o(Qc,"ReactDOM.hydrate()"),Qc.forEach(s),Nn=o(yt," on the client."),yt.forEach(s),Jc.forEach(s),Bn=c(u),Bt=n(u,"P",{});var Yc=r(Bt);Fn=o(Yc,"\u{1F648}"),Yc.forEach(s),Un=c(u),F=n(u,"P",{});var ut=r(F);Wn=o(ut,"So, what is the difference between "),fe=n(ut,"A",{href:!0,rel:!0});var Gc=r(fe);Es=n(Gc,"CODE",{class:!0});var Zc=r(Es);$n=o(Zc,"ReactDOMServer.renderToStaticMarkup"),Zc.forEach(s),Gc.forEach(s),zn=o(ut," and "),xe=n(ut,"A",{href:!0,rel:!0});var Xc=r(xe);bs=n(Xc,"CODE",{class:!0});var ep=r(bs);Jn=o(ep,"ReactDOMServer.renderToString"),ep.forEach(s),Xc.forEach(s),Kn=o(ut," ?"),ut.forEach(s),Qn=c(u),me=n(u,"P",{});var Mo=r(me);Yn=o(Mo,"This is what "),we=n(Mo,"A",{href:!0,rel:!0});var sp=r(we);Ts=n(sp,"CODE",{class:!0});var tp=r(Ts);Gn=o(tp,"ReactDOMServer.renderToString"),tp.forEach(s),sp.forEach(s),Zn=o(Mo," generates:"),Mo.forEach(s),Xn=c(u),Is=n(u,"DIV",{class:!0});var zh=r(Is);zh.forEach(s),er=c(u),U=n(u,"P",{});var gt=r(U);sr=o(gt,"It adds a "),Hs=n(gt,"CODE",{class:!0});var op=r(Hs);tr=o(op,"data-reactroot"),op.forEach(s),or=o(gt," which is used by React internally. (From what I read from the code, it seemed to be used by React only to warn legacy code to "),P=n(gt,"A",{href:!0,rel:!0});var yo=r(P);ar=o(yo,"switch from "),Ms=n(yo,"CODE",{class:!0});var ap=r(Ms);nr=o(ap,"render()"),ap.forEach(s),rr=o(yo," to "),Ds=n(yo,"CODE",{class:!0});var np=r(Ds);lr=o(np,"hydrate()"),np.forEach(s),yo.forEach(s),ir=o(gt," before stopping support in React v17, correct me if I'm wrong)."),gt.forEach(s),cr=c(u),W=n(u,"P",{});var ft=r(W);pr=o(ft,"Besides, it adds a comment in between "),Ss=n(ft,"CODE",{class:!0});var rp=r(Ss);hr=o(rp,'"Count: "'),rp.forEach(s),dr=o(ft," and "),Cs=n(ft,"CODE",{class:!0});var lp=r(Cs);kr=o(lp,'"0"'),lp.forEach(s),vr=o(ft,", so the initial DOM looks like this:"),ft.forEach(s),yr=c(u),Os=n(u,"DIV",{class:!0});var Jh=r(Os);Jh.forEach(s),ur=c(u),_e=n(u,"P",{});var Do=r(_e);gr=o(Do,"A "),Ee=n(Do,"A",{href:!0,rel:!0});var ip=r(Ee);fr=o(ip,"comment node"),ip.forEach(s),xr=o(Do," sits in between 2 text nodes, nicely separate the boundary of the 2 text nodes."),Do.forEach(s),mr=c(u),Ft=n(u,"P",{});var cp=r(Ft);wr=o(cp,"As you could expect, this time around, there's no more hydration error."),cp.forEach(s),_r=c(u),be=n(u,"P",{});var So=r(be);Er=o(So,"The initial DOM provided 2 text nodes as React would expect, and "),Te=n(So,"A",{href:!0,rel:!0});var pp=r(Te);br=o(pp,"React would skip comment nodes and only hydrate element nodes and text nodes"),pp.forEach(s),Tr=o(So,"."),So.forEach(s),u.forEach(s),wo=c(d),p=n(d,"SECTION",{});var h=r(p);Ut=n(h,"H2",{});var hp=r(Ut);Ie=n(hp,"A",{href:!0,id:!0});var dp=r(Ie);Ir=o(dp,"Apply what I've learned"),dp.forEach(s),hp.forEach(s),Hr=c(h),He=n(h,"P",{});var Co=r(He);Mr=o(Co,"So, the next obvious place to apply what I've learned is "),Me=n(Co,"A",{href:!0,rel:!0});var kp=r(Me);Dr=o(kp,"Svelte"),kp.forEach(s),Sr=o(Co,"."),Co.forEach(s),Cr=c(h),Wt=n(h,"P",{});var vp=r(Wt);Or=o(vp,"I found out there are 2 places that Svelte can use this technique for better hydration."),vp.forEach(s),Rr=c(h),$t=n(h,"P",{});var yp=r($t);Lr=o(yp,'The first is the hydrating text node. I found out that Svelte hydrates neighboring text nodes the same way as I described as "a bug", modifying the 1st text node and creating the 2nd text node. It gets "worse" when you have more neighboring text nodes:'),yp.forEach(s),Pr=c(h),Rs=n(h,"DIV",{class:!0});var Kh=r(Rs);Kh.forEach(s),Ar=c(h),zt=n(h,"P",{});var up=r(zt);Jt=n(up,"EM",{});var gp=r(Jt);qr=o(gp,"5 neighboring text nodes"),gp.forEach(s),up.forEach(s),Vr=c(h),De=n(h,"P",{});var Oo=r(De);jr=o(Oo,"The second place I found the technique is useful, is hydrating "),$=n(Oo,"A",{href:!0,rel:!0});var Ro=r($);Nr=o(Ro,"HTML tags ("),Ls=n(Ro,"CODE",{class:!0});var fp=r(Ls);Br=o(fp,"{@html string}"),fp.forEach(s),Fr=o(Ro,")"),Ro.forEach(s),Ur=o(Oo,"."),Oo.forEach(s),Wr=c(h),Se=n(h,"P",{});var Lo=r(Se);$r=o(Lo,"HTML tags allows you to render arbitrary HTML into the DOM, just like React's "),Ce=n(Lo,"A",{href:!0,rel:!0});var xp=r(Ce);zr=o(xp,"dangerouslySetInnerHTML"),xp.forEach(s),Jr=o(Lo,"."),Lo.forEach(s),Kr=c(h),Ps=n(h,"DIV",{class:!0});var Qh=r(Ps);Qh.forEach(s),Qr=c(h),Kt=n(h,"P",{});var mp=r(Kt);Yr=o(mp,"So, why is hydrating HTML tag hard?"),mp.forEach(s),Gr=c(h),Qt=n(h,"P",{});var wp=r(Qt);Zr=o(wp,"HTML tag allow multiple elements to be passed in, which makes it hard to determine the bound of the HTML tag when hydrating."),wp.forEach(s),Xr=c(h),Yt=n(h,"P",{});var _p=r(Yt);el=o(_p,"Take this example:"),_p.forEach(s),sl=c(h),As=n(h,"DIV",{class:!0});var Yh=r(As);Yh.forEach(s),tl=c(h),Gt=n(h,"P",{});var Ep=r(Gt);ol=o(Ep,"The rendered HTML may look something like this:"),Ep.forEach(s),al=c(h),qs=n(h,"DIV",{class:!0});var Gh=r(qs);Gh.forEach(s),nl=c(h),R=n(h,"P",{});var te=r(R);rl=o(te,"Now, can you tell me which elements belong to "),Vs=n(te,"CODE",{class:!0});var bp=r(Vs);ll=o(bp,"<Header />"),bp.forEach(s),il=o(te,", "),js=n(te,"CODE",{class:!0});var Tp=r(js);cl=o(Tp,"{@html string}"),Tp.forEach(s),pl=o(te," and "),Ns=n(te,"CODE",{class:!0});var Ip=r(Ns);hl=o(Ip,"<Footer />"),Ip.forEach(s),dl=o(te,"?"),te.forEach(s),kl=c(h),Zt=n(h,"P",{});var Hp=r(Zt);vl=o(Hp,"Let's walk through it step by step."),Hp.forEach(s),yl=c(h),L=n(h,"P",{});var oe=r(L);ul=o(oe,"Hydrating this component meant that we are going to claim components belong to "),Bs=n(oe,"CODE",{class:!0});var Mp=r(Bs);gl=o(Mp,"<Header>"),Mp.forEach(s),fl=o(oe,", "),Fs=n(oe,"CODE",{class:!0});var Dp=r(Fs);xl=o(Dp,"{@html string}"),Dp.forEach(s),ml=o(oe," then "),Us=n(oe,"CODE",{class:!0});var Sp=r(Us);wl=o(Sp,"<Footer>"),Sp.forEach(s),_l=o(oe,"."),oe.forEach(s),El=c(h),Xt=n(h,"BLOCKQUOTE",{});var Cp=r(Xt);Ws=n(Cp,"P",{});var Gi=r(Ws);eo=n(Gi,"STRONG",{});var Op=r(eo);bl=o(Op,"Claiming"),Op.forEach(s),Tl=o(Gi," in Svelte means marking the element as part of the component, and hydrate it by providing reactivity to the element."),Gi.forEach(s),Cp.forEach(s),Il=c(h),M=n(h,"P",{});var A=r(M);Hl=o(A,"Claiming the "),$s=n(A,"CODE",{class:!0});var Rp=r($s);Ml=o(Rp,"<Header />"),Rp.forEach(s),Dl=o(A," component, by itself, will claim away "),zs=n(A,"CODE",{class:!0});var Lp=r(zs);Sl=o(Lp,"<header>"),Lp.forEach(s),Cl=o(A," and "),Js=n(A,"CODE",{class:!0});var Pp=r(Js);Ol=o(Pp,"<nav>"),Pp.forEach(s),Rl=o(A,", because in "),Ks=n(A,"CODE",{class:!0});var Ap=r(Ks);Ll=o(Ap,"Header.svelte"),Ap.forEach(s),Pl=o(A," contains these 2 elements:"),A.forEach(s),Al=c(h),Qs=n(h,"DIV",{class:!0});var Zh=r(Qs);Zh.forEach(s),ql=c(h),so=n(h,"BLOCKQUOTE",{});var qp=r(so);Q=n(qp,"P",{});var uo=r(Q);Vl=o(uo,"You can learn about Svelte "),Ys=n(uo,"CODE",{class:!0});var Vp=r(Ys);jl=o(Vp,"<slot>"),Vp.forEach(s),Nl=c(uo),Oe=n(uo,"A",{href:!0,rel:!0});var jp=r(Oe);Bl=o(jp,"here"),jp.forEach(s),uo.forEach(s),qp.forEach(s),Fl=c(h),z=n(h,"P",{});var xt=r(z);Ul=o(xt,"Now claiming for "),Gs=n(xt,"CODE",{class:!0});var Np=r(Gs);Wl=o(Np,"{@html string}"),Np.forEach(s),$l=o(xt," is tricky, because you have no idea when it ends and when is the start of the "),Zs=n(xt,"CODE",{class:!0});var Bp=r(Zs);zl=o(Bp,"<Footer />"),Bp.forEach(s),Jl=o(xt," component"),xt.forEach(s),Kl=c(h),to=n(h,"P",{});var Fp=r(to);Ql=o(Fp,"If we put a comment as a marker for the end of the HTML tag, it would make things easier:"),Fp.forEach(s),Yl=c(h),Xs=n(h,"DIV",{class:!0});var Xh=r(Xs);Xh.forEach(s),Gl=c(h),et=n(h,"DIV",{class:!0});var ed=r(et);ed.forEach(s),h.forEach(s),_o=c(d),E=n(d,"SECTION",{});var S=r(E);oo=n(S,"H2",{});var Up=r(oo);Re=n(Up,"A",{href:!0,id:!0});var Wp=r(Re);Zl=o(Wp,"dangerouslySetInnerHtml"),Wp.forEach(s),Up.forEach(s),Xl=c(S),Le=n(S,"P",{});var Po=r(Le);ei=o(Po,"React has "),Pe=n(Po,"A",{href:!0,rel:!0});var $p=r(Pe);si=o($p,"dangerouslySetInnerHTML"),$p.forEach(s),ti=o(Po," right? Does it have the same issue?"),Po.forEach(s),oi=c(S),Ae=n(S,"P",{});var Ao=r(Ae);ai=o(Ao,"Apparently not. "),st=n(Ao,"CODE",{class:!0});var zp=r(st);ni=o(zp,"dangerouslySetInnerHTML"),zp.forEach(s),ri=o(Ao," is always used inside an HTML element, so the parent element is the boundary of the inner HTML content."),Ao.forEach(s),li=c(S),tt=n(S,"DIV",{class:!0});var sd=r(tt);sd.forEach(s),ii=c(S),ot=n(S,"DIV",{class:!0});var td=r(ot);td.forEach(s),ci=c(S),J=n(S,"P",{});var mt=r(J);pi=o(mt,"Unless "),at=n(mt,"CODE",{class:!0});var Jp=r(at);hi=o(Jp,"dangerouslySetInnerHTML"),Jp.forEach(s),di=o(mt," is supported on "),nt=n(mt,"CODE",{class:!0});var Kp=r(nt);ki=o(Kp,"React.Fragment"),Kp.forEach(s),vi=o(mt,", then it would not be a problem."),mt.forEach(s),S.forEach(s),Eo=c(d),_=n(d,"SECTION",{});var I=r(_);ao=n(I,"H2",{});var Qp=r(ao);qe=n(Qp,"A",{href:!0,id:!0});var Yp=r(qe);yi=o(Yp,"React Partial Hydration"),Yp.forEach(s),Qp.forEach(s),ui=c(I),no=n(I,"P",{});var Gp=r(no);gi=o(Gp,"Partial hydration in React is a mechanism to partially hydrate a server-rendered result while other parts of the pages are still loading the code or data."),Gp.forEach(s),fi=c(I),Ve=n(I,"P",{});var qo=r(Ve);xi=o(qo,"This is helpful when you are hydrating a "),Y=n(qo,"A",{href:!0,rel:!0});var Zi=r(Y);rt=n(Zi,"CODE",{class:!0});var Zp=r(rt);mi=o(Zp,"<Suspense>"),Zp.forEach(s),wi=o(Zi," component"),Zi.forEach(s),_i=o(qo,". The server-rendered HTML may have rendered based on the code or data, which is yet to be fetched by the component. If React now shows the fallback content during the hydration, the user may see a flash of the actual content, before turning into a loading state until the code or data is ready."),qo.forEach(s),Ei=c(I),je=n(I,"P",{});var Vo=r(je);bi=o(Vo,"Partial hydration allows React to not hydrate those "),lt=n(Vo,"CODE",{class:!0});var Xp=r(lt);Ti=o(Xp,"<Suspense />"),Xp.forEach(s),Ii=o(Vo," component until the code or data is ready."),Vo.forEach(s),Hi=c(I),Ne=n(I,"P",{});var jo=r(Ne);Mi=o(jo,"So, how does React knows the boundary of "),it=n(jo,"CODE",{class:!0});var eh=r(it);Di=o(eh,"<Suspense />"),eh.forEach(s),Si=o(jo," from the server-rendered HTML which it could safely skip, before hydrating them when it's ready?"),jo.forEach(s),Ci=c(I),Be=n(I,"P",{});var No=r(Be);Oi=o(No,"It's "),Fe=n(No,"A",{href:!0,rel:!0});var sh=r(Fe);Ri=o(sh,"the marker comment"),sh.forEach(s),Li=o(No," to the rescue again!"),No.forEach(s),Pi=c(I),ro=n(I,"BLOCKQUOTE",{});var th=r(ro);G=n(th,"P",{});var go=r(G);lo=n(go,"STRONG",{});var oh=r(lo);Ai=o(oh,"Disclaimer"),oh.forEach(s),qi=o(go,`
The section above is entirely based on my understanding by reading the `),Ue=n(go,"A",{href:!0,rel:!0});var ah=r(Ue);Vi=o(ah,"Partial Hydration PR"),ah.forEach(s),ji=o(go,", please feel free to correct me if I'm wrong."),go.forEach(s),th.forEach(s),I.forEach(s),bo=c(d),Z=n(d,"SECTION",{});var Bo=r(Z);io=n(Bo,"H2",{});var nh=r(io);We=n(nh,"A",{href:!0,id:!0});var rh=r(We);Ni=o(rh,"References"),rh.forEach(s),nh.forEach(s),Bi=c(Bo),$e=n(Bo,"UL",{});var Fo=r($e);ct=n(Fo,"LI",{});var Xi=r(ct);Fi=o(Xi,"Some interesting React commits and PRs that serves as a good entry point to understand hydration:"),K=n(Xi,"UL",{});var wt=r(K);co=n(wt,"LI",{});var lh=r(co);ze=n(lh,"A",{href:!0,rel:!0});var ih=r(ze);Ui=o(ih,"Remove most comments from HTML generation output"),ih.forEach(s),lh.forEach(s),Wi=c(wt),po=n(wt,"LI",{});var ch=r(po);Je=n(ch,"A",{href:!0,rel:!0});var ph=r(Je);$i=o(ph,"Warn When The HTML Mismatches in DEV"),ph.forEach(s),ch.forEach(s),zi=c(wt),ho=n(wt,"LI",{});var hh=r(ho);Ke=n(hh,"A",{href:!0,rel:!0});var dh=r(Ke);Ji=o(dh,"Partial Hydration PR"),dh.forEach(s),hh.forEach(s),wt.forEach(s),Xi.forEach(s),Ki=c(Fo),pt=n(Fo,"LI",{});var ec=r(pt);Qi=o(ec,"Some related Svelte PRs"),ko=n(ec,"UL",{});var kh=r(ko);vo=n(kh,"LI",{});var vh=r(vo);Qe=n(vh,"A",{href:!0,rel:!0});var yh=r(Qe);Yi=o(yh,"Use SSR rendered as initial html for runtime hydration test"),yh.forEach(s),vh.forEach(s),kh.forEach(s),ec.forEach(s),Fo.forEach(s),Bo.forEach(s),this.h()},h(){l(H,"href","#disclaimer"),l(H,"id","disclaimer"),l(ne,"href","https://developers.google.com/web/updates/2019/02/rendering-on-the-web"),l(ne,"rel","nofollow"),l(re,"href","https://twitter.com/_developit"),l(re,"rel","nofollow"),l(le,"href","https://twitter.com/addyosmani"),l(le,"rel","nofollow"),l(ie,"href","https://hackernoon.com/whats-new-with-server-side-rendering-in-react-16-9b0d78585d67"),l(ie,"rel","nofollow"),l(ce,"href","https://www.freecodecamp.org/news/demystifying-reacts-server-side-render-de335d408fe4/"),l(ce,"rel","nofollow"),l(pe,"href","#background"),l(pe,"id","background"),l(Ze,"class","code-section"),l(Xe,"class","code-section"),l(he,"href","#the-investigation"),l(he,"id","the-investigation"),l(es,"class","code-section"),l(ss,"class","code-section"),l(ts,"class","code-section"),l(os,"class","inline"),l(as,"class","inline"),l(ns,"class","inline"),l(rs,"class","inline"),l(ls,"class","inline"),l(is,"class","inline"),l(cs,"class","inline"),l(ps,"class","code-section"),l(hs,"class","code-section"),l(ds,"class","inline"),l(ks,"class","inline"),l(vs,"class","inline"),l(ys,"class","inline"),l(us,"class","code-section"),l(gs,"class","inline"),l(fs,"class","inline"),l(ye,"href","#is-this-a-bug"),l(ye,"id","is-this-a-bug"),l(xs,"class","inline"),l(ue,"href","https://reactjs.org/docs/react-dom-server.html#rendertostaticmarkup"),l(ue,"rel","nofollow"),l(ms,"class","inline"),l(ge,"href","https://reactjs.org/docs/react-dom-server.html#rendertostring"),l(ge,"rel","nofollow"),l(ws,"class","inline"),l(_s,"class","inline"),l(Es,"class","inline"),l(fe,"href","https://reactjs.org/docs/react-dom-server.html#rendertostaticmarkup"),l(fe,"rel","nofollow"),l(bs,"class","inline"),l(xe,"href","https://reactjs.org/docs/react-dom-server.html#rendertostring"),l(xe,"rel","nofollow"),l(Ts,"class","inline"),l(we,"href","https://reactjs.org/docs/react-dom-server.html#rendertostring"),l(we,"rel","nofollow"),l(Is,"class","code-section"),l(Hs,"class","inline"),l(Ms,"class","inline"),l(Ds,"class","inline"),l(P,"href","https://hackernoon.com/whats-new-with-server-side-rendering-in-react-16-9b0d78585d67"),l(P,"rel","nofollow"),l(Ss,"class","inline"),l(Cs,"class","inline"),l(Os,"class","code-section"),l(Ee,"href","https://developer.mozilla.org/en-US/docs/Web/API/Comment"),l(Ee,"rel","nofollow"),l(Te,"href","https://github.com/facebook/react/blob/1a6d8179b6dd427fdf7ee50d5ac45ae5a40979eb/packages/react-dom/src/client/ReactDOMHostConfig.js#L703-L709"),l(Te,"rel","nofollow"),l(Ie,"href","#apply-what-i-ve-learned"),l(Ie,"id","apply-what-i-ve-learned"),l(Me,"href","http://github.com/sveltejs/svelte"),l(Me,"rel","nofollow"),l(Rs,"class","code-section"),l(Ls,"class","inline"),l($,"href","https://svelte.dev/tutorial/html-tags"),l($,"rel","nofollow"),l(Ce,"href","https://reactjs.org/docs/dom-elements.html#dangerouslysetinnerhtml"),l(Ce,"rel","nofollow"),l(Ps,"class","code-section"),l(As,"class","code-section"),l(qs,"class","code-section"),l(Vs,"class","inline"),l(js,"class","inline"),l(Ns,"class","inline"),l(Bs,"class","inline"),l(Fs,"class","inline"),l(Us,"class","inline"),l($s,"class","inline"),l(zs,"class","inline"),l(Js,"class","inline"),l(Ks,"class","inline"),l(Qs,"class","code-section"),l(Ys,"class","inline"),l(Oe,"href","https://svelte.dev/tutorial/slots"),l(Oe,"rel","nofollow"),l(Gs,"class","inline"),l(Zs,"class","inline"),l(Xs,"class","code-section"),l(et,"class","code-section"),l(Re,"href","#dangerouslysetinnerhtml"),l(Re,"id","dangerouslysetinnerhtml"),l(Pe,"href","https://reactjs.org/docs/dom-elements.html#dangerouslysetinnerhtml"),l(Pe,"rel","nofollow"),l(st,"class","inline"),l(tt,"class","code-section"),l(ot,"class","code-section"),l(at,"class","inline"),l(nt,"class","inline"),l(qe,"href","#react-partial-hydration"),l(qe,"id","react-partial-hydration"),l(rt,"class","inline"),l(Y,"href","https://reactjs.org/docs/react-api.html#reactsuspense"),l(Y,"rel","nofollow"),l(lt,"class","inline"),l(it,"class","inline"),l(Fe,"href","https://github.com/facebook/react/blob/1a6d8179b6dd427fdf7ee50d5ac45ae5a40979eb/packages/react-dom/src/client/ReactDOMHostConfig.js#L131-L134"),l(Fe,"rel","nofollow"),l(Ue,"href","https://github.com/facebook/react/pull/14717"),l(Ue,"rel","nofollow"),l(We,"href","#references"),l(We,"id","references"),l(ze,"href","https://github.com/facebook/react/commit/e955008b9bbee93fcaf423d4afaf4d22023e2c3f"),l(ze,"rel","nofollow"),l(Je,"href","https://github.com/facebook/react/pull/10026/files"),l(Je,"rel","nofollow"),l(Ke,"href","https://github.com/facebook/react/pull/14717"),l(Ke,"rel","nofollow"),l(Qe,"href","https://github.com/sveltejs/svelte/pull/4444"),l(Qe,"rel","nofollow")},m(d,f){T(d,g,f),e(g,D),e(D,H),e(H,ae),e(g,x),e(g,w),e(w,Ge),e(w,ne),e(ne,Uo),e(w,Wo),e(w,re),e(re,$o),e(w,zo),e(w,le),e(le,Jo),e(w,Ko),e(g,Qo),e(g,q),e(q,Yo),e(q,ie),e(ie,Go),e(q,Zo),e(q,ce),e(ce,Xo),e(q,ea),e(g,sa),e(g,_t),e(_t,ta),T(d,fo,f),T(d,m,f),e(m,Et),e(Et,pe),e(pe,oa),e(m,aa),e(m,bt),e(bt,na),e(m,ra),e(m,Ze),Ze.innerHTML=xh,e(m,la),e(m,Tt),e(Tt,ia),e(m,ca),e(m,Xe),Xe.innerHTML=mh,e(m,pa),e(m,It),e(It,ha),e(m,da),e(m,Ht),e(Ht,ka),e(m,va),e(m,Mt),e(Mt,ya),T(d,xo,f),T(d,k,f),e(k,Dt),e(Dt,he),e(he,ua),e(k,ga),e(k,St),e(St,fa),e(k,xa),e(k,es),es.innerHTML=wh,e(k,ma),e(k,Ct),e(Ct,wa),e(k,_a),e(k,Ot),e(Ot,Ea),e(k,ba),e(k,ss),ss.innerHTML=_h,e(k,Ta),e(k,ts),ts.innerHTML=Eh,e(k,Ia),e(k,Rt),e(Rt,Ha),e(k,Ma),e(k,C),e(C,Da),e(C,os),e(os,Sa),e(C,Ca),e(C,as),e(as,Oa),e(C,Ra),e(C,ns),e(ns,La),e(C,Pa),e(k,Aa),e(k,de),e(de,qa),e(de,rs),e(rs,Va),e(de,ja),e(k,Na),e(k,O),e(O,Ba),e(O,ls),e(ls,Fa),e(O,Ua),e(O,is),e(is,Wa),e(O,$a),e(O,cs),e(cs,za),e(O,Ja),e(k,Ka),e(k,ps),ps.innerHTML=bh,e(k,Qa),e(k,Lt),e(Lt,Ya),e(k,Ga),e(k,hs),hs.innerHTML=Th,e(k,Za),e(k,ke),e(ke,Xa),e(ke,ds),e(ds,en),e(ke,sn),e(k,tn),e(k,ve),e(ve,on),e(ve,ks),e(ks,an),e(ve,nn),e(k,rn),e(k,Pt),e(Pt,ln),e(k,cn),e(k,V),e(V,pn),e(V,vs),e(vs,hn),e(V,dn),e(V,ys),e(ys,kn),e(V,vn),e(k,yn),e(k,us),us.innerHTML=Ih,e(k,un),e(k,j),e(j,gn),e(j,gs),e(gs,fn),e(j,xn),e(j,fs),e(fs,mn),e(j,wn),T(d,mo,f),T(d,y,f),e(y,At),e(At,ye),e(ye,_n),e(y,En),e(y,qt),e(qt,bn),e(y,Tn),e(y,Vt),e(Vt,In),e(y,Hn),e(y,N),e(N,Mn),e(N,ue),e(ue,xs),e(xs,Dn),e(N,Sn),e(N,ge),e(ge,ms),e(ms,Cn),e(N,On),e(y,Rn),e(y,jt),e(jt,Ln),e(y,Pn),e(y,Nt),e(Nt,B),e(B,An),e(B,ws),e(ws,qn),e(B,Vn),e(B,_s),e(_s,jn),e(B,Nn),e(y,Bn),e(y,Bt),e(Bt,Fn),e(y,Un),e(y,F),e(F,Wn),e(F,fe),e(fe,Es),e(Es,$n),e(F,zn),e(F,xe),e(xe,bs),e(bs,Jn),e(F,Kn),e(y,Qn),e(y,me),e(me,Yn),e(me,we),e(we,Ts),e(Ts,Gn),e(me,Zn),e(y,Xn),e(y,Is),Is.innerHTML=Hh,e(y,er),e(y,U),e(U,sr),e(U,Hs),e(Hs,tr),e(U,or),e(U,P),e(P,ar),e(P,Ms),e(Ms,nr),e(P,rr),e(P,Ds),e(Ds,lr),e(U,ir),e(y,cr),e(y,W),e(W,pr),e(W,Ss),e(Ss,hr),e(W,dr),e(W,Cs),e(Cs,kr),e(W,vr),e(y,yr),e(y,Os),Os.innerHTML=Mh,e(y,ur),e(y,_e),e(_e,gr),e(_e,Ee),e(Ee,fr),e(_e,xr),e(y,mr),e(y,Ft),e(Ft,wr),e(y,_r),e(y,be),e(be,Er),e(be,Te),e(Te,br),e(be,Tr),T(d,wo,f),T(d,p,f),e(p,Ut),e(Ut,Ie),e(Ie,Ir),e(p,Hr),e(p,He),e(He,Mr),e(He,Me),e(Me,Dr),e(He,Sr),e(p,Cr),e(p,Wt),e(Wt,Or),e(p,Rr),e(p,$t),e($t,Lr),e(p,Pr),e(p,Rs),Rs.innerHTML=Dh,e(p,Ar),e(p,zt),e(zt,Jt),e(Jt,qr),e(p,Vr),e(p,De),e(De,jr),e(De,$),e($,Nr),e($,Ls),e(Ls,Br),e($,Fr),e(De,Ur),e(p,Wr),e(p,Se),e(Se,$r),e(Se,Ce),e(Ce,zr),e(Se,Jr),e(p,Kr),e(p,Ps),Ps.innerHTML=Sh,e(p,Qr),e(p,Kt),e(Kt,Yr),e(p,Gr),e(p,Qt),e(Qt,Zr),e(p,Xr),e(p,Yt),e(Yt,el),e(p,sl),e(p,As),As.innerHTML=Ch,e(p,tl),e(p,Gt),e(Gt,ol),e(p,al),e(p,qs),qs.innerHTML=Oh,e(p,nl),e(p,R),e(R,rl),e(R,Vs),e(Vs,ll),e(R,il),e(R,js),e(js,cl),e(R,pl),e(R,Ns),e(Ns,hl),e(R,dl),e(p,kl),e(p,Zt),e(Zt,vl),e(p,yl),e(p,L),e(L,ul),e(L,Bs),e(Bs,gl),e(L,fl),e(L,Fs),e(Fs,xl),e(L,ml),e(L,Us),e(Us,wl),e(L,_l),e(p,El),e(p,Xt),e(Xt,Ws),e(Ws,eo),e(eo,bl),e(Ws,Tl),e(p,Il),e(p,M),e(M,Hl),e(M,$s),e($s,Ml),e(M,Dl),e(M,zs),e(zs,Sl),e(M,Cl),e(M,Js),e(Js,Ol),e(M,Rl),e(M,Ks),e(Ks,Ll),e(M,Pl),e(p,Al),e(p,Qs),Qs.innerHTML=Rh,e(p,ql),e(p,so),e(so,Q),e(Q,Vl),e(Q,Ys),e(Ys,jl),e(Q,Nl),e(Q,Oe),e(Oe,Bl),e(p,Fl),e(p,z),e(z,Ul),e(z,Gs),e(Gs,Wl),e(z,$l),e(z,Zs),e(Zs,zl),e(z,Jl),e(p,Kl),e(p,to),e(to,Ql),e(p,Yl),e(p,Xs),Xs.innerHTML=Lh,e(p,Gl),e(p,et),et.innerHTML=Ph,T(d,_o,f),T(d,E,f),e(E,oo),e(oo,Re),e(Re,Zl),e(E,Xl),e(E,Le),e(Le,ei),e(Le,Pe),e(Pe,si),e(Le,ti),e(E,oi),e(E,Ae),e(Ae,ai),e(Ae,st),e(st,ni),e(Ae,ri),e(E,li),e(E,tt),tt.innerHTML=Ah,e(E,ii),e(E,ot),ot.innerHTML=qh,e(E,ci),e(E,J),e(J,pi),e(J,at),e(at,hi),e(J,di),e(J,nt),e(nt,ki),e(J,vi),T(d,Eo,f),T(d,_,f),e(_,ao),e(ao,qe),e(qe,yi),e(_,ui),e(_,no),e(no,gi),e(_,fi),e(_,Ve),e(Ve,xi),e(Ve,Y),e(Y,rt),e(rt,mi),e(Y,wi),e(Ve,_i),e(_,Ei),e(_,je),e(je,bi),e(je,lt),e(lt,Ti),e(je,Ii),e(_,Hi),e(_,Ne),e(Ne,Mi),e(Ne,it),e(it,Di),e(Ne,Si),e(_,Ci),e(_,Be),e(Be,Oi),e(Be,Fe),e(Fe,Ri),e(Be,Li),e(_,Pi),e(_,ro),e(ro,G),e(G,lo),e(lo,Ai),e(G,qi),e(G,Ue),e(Ue,Vi),e(G,ji),T(d,bo,f),T(d,Z,f),e(Z,io),e(io,We),e(We,Ni),e(Z,Bi),e(Z,$e),e($e,ct),e(ct,Fi),e(ct,K),e(K,co),e(co,ze),e(ze,Ui),e(K,Wi),e(K,po),e(po,Je),e(Je,$i),e(K,zi),e(K,ho),e(ho,Ke),e(Ke,Ji),e($e,Ki),e($e,pt),e(pt,Qi),e(pt,ko),e(ko,vo),e(vo,Qe),e(Qe,Yi)},p:vd,d(d){d&&s(g),d&&s(fo),d&&s(m),d&&s(xo),d&&s(k),d&&s(mo),d&&s(y),d&&s(wo),d&&s(p),d&&s(_o),d&&s(E),d&&s(Eo),d&&s(_),d&&s(bo),d&&s(Z)}}}function fd(Ye){let g,D;const H=[Ye[0],fh];let ae={$$slots:{default:[gd]},$$scope:{ctx:Ye}};for(let x=0;x<H.length;x+=1)ae=sc(ae,H[x]);return g=new yd({props:ae}),{c(){rd(g.$$.fragment)},l(x){ld(g.$$.fragment,x)},m(x,w){id(g,x,w),D=!0},p(x,[w]){const Ge=w&1?cd(H,[w&1&&uh(x[0]),w&0&&uh(fh)]):{};w&2&&(Ge.$$scope={dirty:w,ctx:x}),g.$set(Ge)},i(x){D||(pd(g.$$.fragment,x),D=!0)},o(x){hd(g.$$.fragment,x),D=!1},d(x){dd(g,x)}}}const fh={title:"Hydrating text content from Server-Side Rendering",date:"2020-02-28T08:00:00Z",label:"blog",description:"DisclaimerI am not going to talk about what is hydration, to know more about client-side rendering, server-side rendering and hydration, please read this amazing article by Jason Miller and Addy Osmani...",tableOfContents:[{link:"disclaimer",title:"Disclaimer"},{link:"background",title:"Background"},{link:"the-investigation",title:"The investigation"},{link:"is-this-a-bug",title:"Is this a bug?"},{link:"apply-what-i-ve-learned",title:"Apply what I've learned"},{link:"dangerouslysetinnerhtml",title:"dangerouslySetInnerHtml"},{link:"react-partial-hydration",title:"React Partial Hydration"},{link:"references",title:"References"}]};function xd(Ye,g,D){return kd("blog",{image:ud}),Ye.$$set=H=>{D(0,g=sc(sc({},g),gh(H)))},g=gh(g),[g]}class Id extends od{constructor(g){super();ad(this,g,xd,fd,nd,{})}}export{Id as default,fh as metadata};
