import{S as Ud,i as Vd,s as Gd,C as Uh,w as Wd,x as Kd,y as Yd,z as $d,A as Yv,q as Jd,o as Xd,B as zd,r as Qd,Y as $v,e,t as n,k as i,c as a,a as t,h as r,d as o,m as c,b as l,g as m,H as s,J as Zd}from"../../chunks/vendor-da4388d4.js";import{B as su}from"../../chunks/BlogLayout-14cfab6f.js";import"../../chunks/stores-1fad7c36.js";import"../../chunks/ldjson-b0805387.js";/* empty css                                */var ou="https://lihautan.com/_app/assets/hero-twitter-6030d4ff.jpg";function eu(co){let x,N,L,T,g,_,po,nn,ps,rn,ho,ln,cn,pn,Je,hn,Et,z,Xe,hs,kn,yn,U,vn,ko,dn,un,yo,fn,mn,_t,Q,ze,ks,xn,gn,Qe,wn,It,Z,Ze,ys,bn,En,sa,_n,Pt,q,oa,vs,In,Pn,ea,Tn,Dn,ds,Cn,vo,On,Sn,Tt,y,aa,us,An,Mn,ta,Bn,Hn,M,Rn,fs,Fn,Nn,uo,Ln,qn,fo,jn,Un,Vn,na,ra,Gn,Wn,mo,Xv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">firstFriend</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.user </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">].friend</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// or with ternary</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">firstFriend</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> props</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.user</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">].friend</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`,Kn,la,ia,Yn,$n,xo,zv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">firstFriend</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">idx</span><span style="color: var(--shiki-color-text)">(props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> _ </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">_</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">].friend);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">idx</span><span style="color: var(--shiki-color-text)">(input</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> accessor) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">accessor</span><span style="color: var(--shiki-color-text)">(input);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> (e) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Jn,D,ca,Xn,zn,go,Qn,Zn,wo,sr,or,bo,er,ar,Eo,tr,nr,rr,_o,lr,pa,ir,cr,B,pr,ms,Io,hr,kr,xs,yr,vr,Po,dr,ur,fr,To,Qv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> idx </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;idx&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getFriends</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">idx</span><span style="color: var(--shiki-color-text)">(props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> _ </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">_</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">].friends);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,mr,ha,xr,gr,Do,Zv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getFriends</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.user </span><span style="color: var(--shiki-token-keyword)">==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.user</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends </span><span style="color: var(--shiki-token-keyword)">==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">].friends;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,wr,ka,br,Er,ya,_r,Ir,va,da,Pr,Tr,gs,Dr,ua,Cr,Or,Sr,fa,Ar,Mr,ma,xa,Br,Hr,ws,Rr,Co,Fr,Nr,Lr,bs,qr,ga,jr,Ur,Vr,V,Gr,Oo,Wr,Kr,wa,Yr,$r,Jr,G,Xr,ba,zr,Qr,Ea,Zr,sl,ol,_a,Ia,el,al,Pa,tl,nl,w,rl,So,ll,il,Ao,cl,pl,Mo,hl,kl,Ta,yl,vl,Bo,dl,ul,Ho,fl,ml,Ro,xl,gl,wl,W,bl,Fo,El,_l,Da,Il,Pl,Tl,Dl,Cl,Ca,Ol,Sl,Es,Al,_s,Ml,Bl,Dt,d,Oa,Is,Hl,Rl,Sa,Fl,Nl,Aa,Ps,Ll,No,ql,jl,Ul,Ma,Vl,Gl,Lo,sd=`<div class="filename">babel.config.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  plugins</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&#39;babel-plugin-macros&#39;</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,Wl,Ba,Ha,Kl,Yl,qo,od=`<div class="filename">src/utils/idx.macro.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">createMacro</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;babel-plugin-macros&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createMacro</span><span style="color: var(--shiki-color-text)">((&#123; state</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> references &#125;) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">references</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">default</span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">(referencePath </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">idx_transform</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">referencePath</span><span style="color: var(--shiki-color-text)">.parentPath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> state);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,$l,K,Jl,jo,Xl,zl,Uo,Ql,Zl,si,Ra,Fa,oi,ei,Vo,ed=`<div class="filename">src/index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> idx </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./utils/idx.macro&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getFriends</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">idx</span><span style="color: var(--shiki-color-text)">(props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> _ </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">_</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">].friends);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ai,Ts,ti,Go,ni,ri,li,Y,ii,Wo,ci,pi,Ko,hi,ki,yi,Na,vi,di,Yo,ad=`<div class="filename">src/index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> idx </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./utils/idx.macro&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getFriends</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">idx</span><span style="color: var(--shiki-color-text)">(props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> _ </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">_</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">].friends</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; strict</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)"> &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ui,La,fi,Ct,b,qa,Ds,mi,xi,ss,ja,gi,wi,Cs,$o,bi,Ei,_i,I,Ii,Jo,Pi,Ti,Xo,Di,Ci,zo,Oi,Si,Qo,Ai,Mi,Zo,Bi,Hi,Ri,Ua,Fi,Ni,Va,Li,qi,Ga,ji,Ot,C,Wa,Os,Ui,Vi,os,Ss,Gi,Wi,As,Ki,Yi,$i,Ka,Ji,Xi,Ms,zi,Bs,Qi,Zi,St,p,Ya,Hs,sc,oc,$a,Ja,ec,ac,Xa,tc,nc,se,td=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fetchUser</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  userId</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Response</span><span style="color: var(--shiki-color-text)">&lt;&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  id</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  username</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  email</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  address</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;&gt; &#123;&#125;</span></span></code></pre>`,rc,za,lc,ic,oe,nd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fetchUser</span><span style="color: var(--shiki-color-text)">(userId</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Response</span><span style="color: var(--shiki-color-text)">&lt;&#123; </span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)"> &#125;&gt; &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    id</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    username</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;tanhauhau&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    email</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;tanhauhau@foo.bar&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    address</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;123 Bar Street, Foo&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,cc,Qa,pc,hc,ee,rd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fetchUser</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  userId</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Response</span><span style="color: var(--shiki-color-text)">&lt;&#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  id</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  username</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  email</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  address</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  contact</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;&gt; &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    id</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    username</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;tanhauhau&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    email</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;tanhauhau@foo.bar&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    address</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;123 Bar Street, Foo&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    contact</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;0123456789&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,kc,H,yc,Rs,vc,dc,Fs,uc,fc,Ns,mc,xc,gc,Za,wc,bc,ae,ld=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> &#123; MockResponse &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./mock.macro&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fetchUser</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  userId</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">MockResponse</span><span style="color: var(--shiki-color-text)">&lt;&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  id</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  username</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  email</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  address</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  contact</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;&gt; &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// TODO:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ec,Ls,_c,te,Ic,Pc,Tc,st,ot,Dc,Cc,qs,Oc,ne,Sc,Ac,Mc,js,Bc,re,Hc,Rc,Fc,le,id=`<div class="filename">mock.macro.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">createMacro</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;babel-plugin-macros&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createMacro</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(&#123; references</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> state</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> babel &#125;) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// TODO:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,Nc,ie,ce,Lc,qc,jc,et,at,tt,Uc,Vc,nt,Gc,Wc,rt,Kc,Yc,pe,cd='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> foo</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; bar &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./foobar.macro&#39;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>',$c,$,Jc,he,Xc,zc,ke,Qc,Zc,sp,ye,pd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&quot;default&quot;</span><span style="color: var(--shiki-color-text)">: []</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&quot;bar&quot;</span><span style="color: var(--shiki-color-text)">: []</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,op,lt,ep,ap,ve,hd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> foo </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./foobar.macro.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;a&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// &lt;-- referenced &#96;foo&#96;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">bar</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> foo </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// &lt;-- referenced &#96;foo&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">baz</span><span style="color: var(--shiki-color-text)">(foo) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> foo </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// &lt;-- not referencing &#96;foo&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// &#96;references&#96;:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&quot;default&quot;</span><span style="color: var(--shiki-color-text)">: [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    Path</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// foo in foo(&#39;a&#39;)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    Path</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// foo in foo + 1</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ]</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,tp,it,ct,pt,np,rp,ht,lp,ip,Us,cp,de,pp,hp,kp,ue,kd=`<div class="filename">mock.macro.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createMacro</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(&#123; references</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> state</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> babel &#125;) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">references</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">MockResponse</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// TODO:</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,yp,kt,vp,dp,fe,yd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> faker </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;faker&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fetchUser</span><span style="color: var(--shiki-color-text)">(userId) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    id</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">faker</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">random</span><span style="color: var(--shiki-token-function)">.number</span><span style="color: var(--shiki-color-text)">()</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    username</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">faker</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">random</span><span style="color: var(--shiki-token-function)">.word</span><span style="color: var(--shiki-color-text)">()</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    email</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">faker</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">random</span><span style="color: var(--shiki-token-function)">.word</span><span style="color: var(--shiki-color-text)">()</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    address</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">faker</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">random</span><span style="color: var(--shiki-token-function)">.word</span><span style="color: var(--shiki-color-text)">()</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    contact</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">faker</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">random</span><span style="color: var(--shiki-token-function)">.word</span><span style="color: var(--shiki-color-text)">()</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,up,Vs,fp,Gs,mp,xp,gp,Ws,wp,me,bp,Ep,_p,xe,vd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createMacro</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(&#123; references</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> state</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> babel &#125;) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">references</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">MockResponse</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fakerIdentifier</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">state</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">file</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">scope</span><span style="color: var(--shiki-token-function)">.generateUidIdentifier</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#39;faker&#39;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">importStatement</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.template</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;import %%FAKER%% from &#39;faker&#39;&quot;</span><span style="color: var(--shiki-color-text)">)(&#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      FAKER</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> fakerIdentifier</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">state</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">file</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.unshiftContainer</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;body&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> importStatement);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,Ip,R,Pp,ge,Tp,Dp,we,Cp,Op,be,Sp,Ap,Mp,Ee,dd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createMacro</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(&#123; references</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> state</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> babel &#125;) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">references</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">MockResponse</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ... inserting &#96;import faker from &#39;faker&#39;&#96;</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">references</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">MockResponse</span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">(reference </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">functionDeclaration</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">reference</span><span style="color: var(--shiki-token-function)">.getFunctionParent</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">typeDef</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">reference</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">parentPath</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;typeParameters.params.0&#39;</span><span style="color: var(--shiki-color-text)">).node;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      functionDeclaration</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;body&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">.unshiftContainer</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-string-expression)">&#39;body&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.returnStatement</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-function)">generateFakerCode</span><span style="color: var(--shiki-color-text)">(fakerIdentifier</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> typeDef)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          )</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        );</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,Bp,J,Hp,_e,Rp,Fp,Ie,Np,Lp,qp,Pe,ud=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">generateFakerCode</span><span style="color: var(--shiki-color-text)">(fakerIdentifier</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> typeDef) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">switch</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">typeDef</span><span style="color: var(--shiki-color-text)">.type) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;ObjectTypeAnnotation&#39;</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.objectExpression</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">typeDef</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">properties</span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(property </span><span style="color: var(--shiki-token-keyword)">=&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.objectProperty</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.identifier</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">property</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">key</span><span style="color: var(--shiki-color-text)">.name)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-function)">generateFakerCode</span><span style="color: var(--shiki-color-text)">(fakerIdentifier</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">property</span><span style="color: var(--shiki-color-text)">.value)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          )</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        )</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      );</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;NumberTypeAnnotation&#39;</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.expression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;%%FAKER%%.random.number()&#39;</span><span style="color: var(--shiki-color-text)">)(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        FAKER</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> fakerIdentifier</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;StringTypeAnnotation&#39;</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.expression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;%%FAKER%%.random.word()&#39;</span><span style="color: var(--shiki-color-text)">)(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        FAKER</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> fakerIdentifier</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;BooleanTypeAnnotation&#39;</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.expression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;%%FAKER%%.random.boolean()&#39;</span><span style="color: var(--shiki-color-text)">)(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        FAKER</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> fakerIdentifier</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">MacroError</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Unknown type definition: </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">typeDef</span><span style="color: var(--shiki-color-text)">.type</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,jp,yt,Up,Vp,vt,Gp,Wp,Ks,Kp,Te,Yp,$p,Jp,De,fd='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fetchUser</span><span style="color: var(--shiki-color-text)">(...)</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">MockResponse</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-comment)">/*...*/</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">&gt; &#123;&#125;</span></span></code></pre>',Xp,Ys,zp,Ce,Qp,Zp,sh,Oe,md=`<div class="filename">mock.macro.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">createMacro</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;babel-plugin-macros&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createMacro</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(&#123; references</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> state</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> babel</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> config &#125;) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">references</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">MockResponse</span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">(reference </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">functionDeclaration</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">reference</span><span style="color: var(--shiki-token-function)">.getFunctionParent</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">typeDef</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">reference</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">parentPath</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;typeParameters.params.0&#39;</span><span style="color: var(--shiki-color-text)">).node;</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// if the 2nd argument present and it is &#39;false&#39;, disable mocking</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">secondParam</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">reference</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">parentPath</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;typeParameters.params.1&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (secondParam </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">secondParam</span><span style="color: var(--shiki-token-function)">.isBooleanLiteralTypeAnnotation</span><span style="color: var(--shiki-color-text)">(&#123; value</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)"> &#125;)) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// ...insert return statement</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,oh,dt,$s,eh,Js,ah,th,At,j,ut,Xs,nh,rh,X,lh,Se,ih,ch,Ae,ph,hh,kh,es,Me,yh,vh,Be,dh,uh,Mt,as,ft,zs,fh,mh,P,Qs,Zs,xh,gh,so,wh,bh,oo,eo,Eh,_h,ao,Ih,Ph,mt,ts,He,Th,Dh,Ch,to,no,Oh,Sh,ro,Ah,Mh,xt,lo,Bh,Hh,Re,Rh,io,Fh;return{c(){x=e("p"),N=n("In this article, I am going to talk about Babel macros."),L=i(),T=e("section"),g=e("h2"),_=e("a"),po=n("Motivation"),nn=i(),ps=e("p"),rn=n("In my previous post, "),ho=e("a"),ln=n('"Creating custom JavaScript syntax with Babel"'),cn=n(", I've shown you detailed steps on how you can create a custom syntax and write transform plugin or polyfills so that the syntax can be run in browsers today."),pn=i(),Je=e("p"),hn=n("However, it is purely educational, and I am not recommending you to create your custom JavaScript syntax for production projects for several reasons:"),Et=i(),z=e("section"),Xe=e("h3"),hs=e("a"),kn=n("Documentation and community support"),yn=i(),U=e("p"),vn=n("If anything goes wrong, the great JavaScript community out there has no idea what is the "),ko=e("code"),dn=n("@@"),un=n(" ("),yo=e("a"),fn=n("the curry function syntax we created previously"),mn=n(") means. Meaning the support that a new developer to the team can get is only as good as your documentation."),_t=i(),Q=e("section"),ze=e("h3"),ks=e("a"),xn=n("Tooling"),gn=i(),Qe=e("p"),wn=n("You need to make all the tooling you use to work. I mean eslint, prettier, Flowtype/TypeScript, your editor..."),It=i(),Z=e("section"),Ze=e("h3"),ys=e("a"),bn=n("Maintainability"),En=i(),sa=e("p"),_n=n(`If the forked version has a bug, do you have enough support to fix it?
If the babel upstream fixed a bug or added a feature, how often do you merge the upstream into your fork?`),Pt=i(),q=e("section"),oa=e("h3"),vs=e("a"),In=n("Consistency of the syntax"),Pn=i(),ea=e("p"),Tn=n("This is the hardest part of creating a new syntax. An added syntax is an added mental concept for the language users, so the new mental model should be transferable to every scenario of the language."),Dn=i(),ds=e("p"),Cn=n("Take our "),vo=e("code"),On=n("@@"),Sn=n(" syntax, for example, if it works for a normal function declaration, it's expected to work for anonymous functions, arrow functions, class methods. Have you thought about how it would work with generator functions and async functions? If a curried function returns another function, does that make the returned function curried as well?"),Tt=i(),y=e("section"),aa=e("h2"),us=e("a"),An=n("Compile-time vs Runtime"),Mn=i(),ta=e("p"),Bn=n("I think you get my point. But the idea of having a magical syntax that keeps the code elegant and short is enticing."),Hn=i(),M=e("p"),Rn=n("Take "),fs=e("a"),Fn=n("optional chaining"),Nn=n(" for example, before having the optional chaining operator "),uo=e("code"),Ln=n("?."),qn=n(", we had a few ways to write "),fo=e("code"),jn=n("props?.user?.friends?.[0]?.friend"),Un=n(", which is:"),Vn=i(),na=e("p"),ra=e("strong"),Gn=n("a mundane to write, not easy to read (less intentional), but most efficient possible:"),Wn=i(),mo=e("div"),Kn=i(),la=e("p"),ia=e("strong"),Yn=n("easy to write, easy to read, but with slightly more runtime overhead:"),$n=i(),xo=e("div"),Jn=i(),D=e("blockquote"),ca=e("b"),Xn=n("Note:"),zn=n(" I've tried to search online whether a `try-catch` is more expensive, however the "),go=e("a"),Qn=n("search result"),Zn=i(),wo=e("a"),sr=n("is not"),or=i(),bo=e("a"),er=n("conclusive"),ar=n(". "),Eo=e("a"),tr=n("Let me know"),nr=n(" if you have a conclusive research on this."),rr=i(),_o=e("p"),lr=n("Is there a third option that is "),pa=e("strong"),ir=n("easy to read and write, yet without the try-catch runtime overhead?"),cr=i(),B=e("p"),pr=n("Well, if you look at the "),ms=e("a"),Io=e("code"),hr=n("facebookincubator/idx"),kr=n(" library, it uses a "),xs=e("a"),yr=n("Babel plugin"),vr=n(" to search through require or imports of "),Po=e("code"),dr=n("idx"),ur=n(" and replaces all its usages, for example when you write:"),fr=i(),To=e("div"),mr=i(),ha=e("p"),xr=n("it gets transformed into:"),gr=i(),Do=e("div"),wr=i(),ka=e("p"),br=n("So your code is easy to read, and no runtime overhead. You get the best of both worlds!"),Er=i(),ya=e("p"),_r=n("Though nothing is perfect. Here, I wanted to point out some of my personal opinions about this approach:"),Ir=i(),va=e("blockquote"),da=e("p"),Pr=n("While maintaining a good developer experience (DX), we've shifted the runtime overhead to compile time."),Tr=i(),gs=e("p"),Dr=n("You can keep the way you wanted to write the code while having the compiler to transform the code to something you are "),ua=e("em"),Cr=n('"supposed"'),Or=n(" to write."),Sr=i(),fa=e("p"),Ar=n("A win-win solution."),Mr=i(),ma=e("p"),xa=e("strong"),Br=n("How do we apply this technique to other similar situations?"),Hr=i(),ws=e("p"),Rr=n("First, you need to "),Co=e("a"),Fr=n("write a Babel plugin"),Nr=n("."),Lr=i(),bs=e("p"),qr=n("Secondly, you need a "),ga=e("strong"),jr=n("marker"),Ur=n(" to target the transformation."),Vr=i(),V=e("p"),Gr=n("In this example, the default import from the "),Oo=e("code"),Wr=n('"idx"'),Kr=n(" module is the "),wa=e("strong"),Yr=n("marker"),$r=n(", all the usage of the default import would be transformed by the Babel plugin."),Jr=i(),G=e("p"),Xr=n("Thirdly, you need to update your babel configuration. For every new plugin, "),ba=e("strong"),zr=n("you need to add them in"),Qr=n("; "),Ea=e("strong"),Zr=n("you need to make sure the order of plugin is correct"),sl=n("."),ol=i(),_a=e("p"),Ia=e("strong"),el=n("What if there's a bug in the Babel plugin?"),al=i(),Pa=e("p"),tl=n("This would be the most confusing part for the new developers on the codebase."),nl=i(),w=e("p"),rl=n("In this example, if the "),So=e("code"),ll=n("idx"),il=n(" function has a bug, it is natural for developers to dig into the source code of "),Ao=e("code"),cl=n("idx"),pl=n(". However, "),Mo=e("code"),hl=n('"idx"'),kl=n(" is nothing but a "),Ta=e("strong"),yl=n("marker"),vl=n(" for the "),Bo=e("code"),dl=n("babel-plugin-idx"),ul=n(" to transform away. So if there's any bug, it should be inside "),Ho=e("code"),fl=n("babel-plugin-idx"),ml=n(" instead of "),Ro=e("code"),xl=n("idx"),gl=n("."),wl=i(),W=e("p"),bl=n("Besides, the bug may be due to the configuration of the Babel plugin instead of the code logic itself. However if you change the configuration, it could affect all the usages of the "),Fo=e("code"),El=n("idx"),_l=n(" function, because "),Da=e("strong"),Il=n("babel configuration is global"),Pl=n("."),Tl=i(),Dl=e("hr"),Cl=i(),Ca=e("p"),Ol=n("To summarise, I think that this solution is a win-win for DX vs User Experience (UX), however, if we can make the transform plugin more accessible to all developers, eg: without having to update babel configuration for every new transform plugin, easier to debug, and a localized configuration."),Sl=i(),Es=e("p"),Al=n("Well, you are looking at "),_s=e("a"),Ml=n("babel macros"),Bl=n(". \u{1F440}"),Dt=i(),d=e("section"),Oa=e("h2"),Is=e("a"),Hl=n("Babel macros"),Rl=i(),Sa=e("p"),Fl=n("So, here's how it would look like with babel macro:"),Nl=i(),Aa=e("p"),Ps=e("strong"),Ll=n("You add "),No=e("code"),ql=n("babel-plugin-macro"),jl=n(" to babel config"),Ul=i(),Ma=e("p"),Vl=n("And that's all the change you need for babel configuration."),Gl=i(),Lo=e("div"),Wl=i(),Ba=e("p"),Ha=e("strong"),Kl=n("You write your own macro"),Yl=i(),qo=e("div"),$l=i(),K=e("p"),Jl=n("We'll talk about the code later, one thing to take away here is that your filename has to end with "),jo=e("code"),Xl=n(".macro"),zl=n(" or "),Uo=e("code"),Ql=n(".macro.js"),Zl=n("."),si=i(),Ra=e("p"),Fa=e("strong"),oi=n("Use it"),ei=i(),Vo=e("div"),ai=i(),Ts=e("p"),ti=n("As you can see here, if there's something wrong about "),Go=e("code"),ni=n("idx"),ri=n(", the user would know which file exactly to look at."),li=i(),Y=e("p"),ii=n("You don't get the disconnection between the module "),Wo=e("code"),ci=n("idx"),pi=n(" and the plugin "),Ko=e("code"),hi=n("babel-plugin-idx"),ki=n("."),yi=i(),Na=e("p"),vi=n("Besides, if you want to modify configuration, say for this usage, you can do it easily:"),di=i(),Yo=e("div"),ui=i(),La=e("p"),fi=n("Simple and explicit. Isn't that great?"),Ct=i(),b=e("section"),qa=e("h3"),Ds=e("a"),mi=n("So what is Babel macros again?"),xi=i(),ss=e("p"),ja=e("strong"),gi=n("Babel macros"),wi=n(" is a concept from the "),Cs=e("a"),$o=e("code"),bi=n("babel-plugin-macros"),Ei=n(", which defines the standard interface between compile-time code transformation and your runtime code."),_i=i(),I=e("p"),Ii=n("In compile-time, "),Jo=e("code"),Pi=n("babel-plugin-macros"),Ti=n(" will look for all "),Xo=e("code"),Di=n("import"),Ci=n(" or "),zo=e("code"),Oi=n("require"),Si=n(" from modules ends with "),Qo=e("code"),Ai=n(".macro"),Mi=n(", finds all references of the imported variables, and passes them to the "),Zo=e("code"),Bi=n(".macro"),Hi=n(" file to transform them."),Ri=i(),Ua=e("p"),Fi=n("The imported variables are not restricted to be a function, it can be a variable, a type from type system (Flow / TypeScript)."),Ni=i(),Va=e("p"),Li=n("If it is a default export, you can name it any way you like, if it is a named export, you can reassign to another variable name too."),qi=i(),Ga=e("p"),ji=n("Cool, so how can I write my Babel macros?"),Ot=i(),C=e("section"),Wa=e("h2"),Os=e("a"),Ui=n("How to write Babel macros"),Vi=i(),os=e("p"),Ss=e("a"),Gi=n("Kent C Dodds"),Wi=n(" has written "),As=e("a"),Ki=n("a fantastic guide for macro authors"),Yi=n("."),$i=i(),Ka=e("p"),Ji=n("Please go read it."),Xi=i(),Ms=e("p"),zi=n("If you insist to stay, I am going to show you how I wrote my Babel macros, in particular, the "),Bs=e("a"),Qi=n("mock.macro"),Zi=n(". And hopefully, along the way, you learned how to write your Babel macros as well."),St=i(),p=e("section"),Ya=e("h3"),Hs=e("a"),sc=n("mock.macro"),oc=i(),$a=e("p"),Ja=e("strong"),ec=n("Motivation"),ac=i(),Xa=e("p"),tc=n("Usually, when working with a backend developer on a frontend application, I would use static type to define the API schema. For example, a user api would look like this:"),nc=i(),se=e("div"),rc=i(),za=e("p"),lc=n("However while waiting for the backend developer to develop the API, I would have to use mock data for development:"),ic=i(),oe=e("div"),cc=i(),Qa=e("p"),pc=n("And along the way, due to unforeseen circumstances and lack of foresight, the response schema of the API was changed multiple times:"),hc=i(),ee=e("div"),kc=i(),H=e("p"),yc=n("Here you see I need to update both the type definition as well as the mock data. This reminds me of "),Rs=e("a"),vc=n("the double declaration problem"),dc=n(" coined by "),Fs=e("a"),uc=n("@swyx"),fc=i(),Ns=e("a"),mc=n("in his talk"),xc=n(". Which means that this could potentially be solved with Babel macros."),gc=i(),Za=e("p"),wc=n("So in my head, I imagined with Babel macros, I could write:"),bc=i(),ae=e("div"),Ec=i(),Ls=e("p"),_c=n("and when I call the function "),te=e("code"),Ic=n("fetchUser"),Pc=n(", I would get my mock response in return."),Tc=i(),st=e("p"),ot=e("strong"),Dc=n("Implementing mock.macro"),Cc=i(),qs=e("p"),Oc=n("Implementing mock.macro requires some basic knowledge about Abstract Syntax Tree (AST) and writing babel transformation, you can check out "),ne=e("a"),Sc=n("the step-by-step guide I've written previously"),Ac=n("."),Mc=i(),js=e("p"),Bc=n("Implementing Babel macros is quite easy, the api from the "),re=e("code"),Hc=n("babel-plugin-macros"),Rc=n(" is pretty straightforward, all you need is to provide a default export to your macro file:"),Fc=i(),le=e("div"),Nc=i(),ie=e("p"),ce=e("code"),Lc=n("createMacro"),qc=n(" takes in a callback function, which is executed when someone imports this macro file. It provides:"),jc=i(),et=e("ul"),at=e("li"),tt=e("strong"),Uc=n("references"),Vc=i(),nt=e("p"),Gc=n("All the reference that was imported from the macro file."),Wc=i(),rt=e("p"),Kc=n("For example:"),Yc=i(),pe=e("div"),$c=i(),$=e("p"),Jc=n("will give you an object, with the import name as the "),he=e("code"),Xc=n("key"),zc=n(", and array of paths as the "),ke=e("code"),Qc=n("value"),Zc=n(":"),sp=i(),ye=e("div"),op=i(),lt=e("p"),ep=n("Inside the array, you can get all paths where the imported names are referenced. For example:"),ap=i(),ve=e("div"),tp=i(),it=e("ul"),ct=e("li"),pt=e("strong"),np=n("state"),rp=i(),ht=e("p"),lp=n("It gives you the current state of the file being traversed."),ip=i(),Us=e("p"),cp=n("So, in this example, I need to transform all the references of "),de=e("code"),pp=n("MockResponse"),hp=n(":"),kp=i(),ue=e("div"),yp=i(),kt=e("p"),vp=n("Next, I need to figure out how the transformed code would look like:"),dp=i(),fe=e("div"),up=i(),Vs=e("p"),fp=n("I decided to use "),Gs=e("a"),mp=n("faker.js"),xp=n(" as the random data generator."),gp=i(),Ws=e("p"),wp=n("So I have to import "),me=e("code"),bp=n("faker"),Ep=n(" at the top of the file:"),_p=i(),xe=e("div"),Ip=i(),R=e("p"),Pp=n("Next, for each references of "),ge=e("code"),Tp=n("MockRespone"),Dp=n(", I need to find the "),we=e("code"),Cp=n("FunctionDeclaration"),Op=n(" that it belongs to, and insert a "),be=e("code"),Sp=n("ReturnStatement"),Ap=n(" into the top of the function body:"),Mp=i(),Ee=e("div"),Bp=i(),J=e("p"),Hp=n("In the "),_e=e("code"),Rp=n("generateFakerCode"),Fp=n(", I'll generate a AST node based on the node type of the "),Ie=e("code"),Np=n("typeDef"),Lp=n(":"),qp=i(),Pe=e("div"),jp=i(),yt=e("p"),Up=n("That's it! A generated mock function via type definition using Babel macros."),Vp=i(),vt=e("p"),Gp=n("One last thing, what happens when the API is ready, and you want to disable the mocking behavior?"),Wp=i(),Ks=e("p"),Kp=n("We can read the 2nd parameter of the "),Te=e("code"),Yp=n("MockResponse"),$p=n(":"),Jp=i(),De=e("div"),Xp=i(),Ys=e("p"),zp=n("If the 2nd parameter is "),Ce=e("code"),Qp=n("false"),Zp=n(", we disable the mocking behavior:"),sh=i(),Oe=e("div"),oh=i(),dt=e("blockquote"),$s=e("p"),eh=n("You can find the full code from "),Js=e("a"),ah=n("Github"),th=n("."),At=i(),j=e("section"),ut=e("h2"),Xs=e("a"),nh=n("Summary"),rh=i(),X=e("p"),lh=n("Sometimes, it is more efficient to move runtime abstraction and complexity to compile time. However, developing and maintaining a babel plugin for each of them may be difficult to maintain and debug, as there's a gap between the code written and build time plugin, eg: "),Se=e("code"),ih=n("idx"),ch=n(" and "),Ae=e("code"),ph=n("babel-plugin-idx"),hh=n("."),kh=i(),es=e("p"),Me=e("code"),yh=n("babel-plugin-macros"),vh=n(" solves this by allow users to import "),Be=e("code"),dh=n(".macro"),uh=n(" files directly into the codebase. The explicit import bridges the gap between build-time and runtime and allows the user to develop and debug their macro easily."),Mt=i(),as=e("section"),ft=e("h2"),zs=e("a"),fh=n("Further Reading"),mh=i(),P=e("ul"),Qs=e("li"),Zs=e("a"),xh=n("babel-plugin-macros"),gh=n(" by "),so=e("a"),wh=n("Kent C. Dodds"),bh=i(),oo=e("li"),eo=e("a"),Eh=n("I Can Babel Macros (and So Can You!)"),_h=n(" by "),ao=e("a"),Ih=n("Shawn Wang"),Ph=i(),mt=e("li"),ts=e("a"),He=e("code"),Th=n("babel-plugin-macros"),Dh=n(" Usage for macros authors"),Ch=i(),to=e("li"),no=e("a"),Oh=n("Zero-config code transformation with babel-plugin-macros"),Sh=n(" by "),ro=e("a"),Ah=n("Kent C. Dodds"),Mh=i(),xt=e("li"),lo=e("a"),Bh=n("Awesome list for Babel macros"),Hh=i(),Re=e("li"),Rh=n("The idea of converting type definition to mock generator comes from "),io=e("a"),Fh=n("Manta Style, the futuristic API Mock Server for Frontend"),this.h()},l(k){x=a(k,"P",{});var f=t(x);N=r(f,"In this article, I am going to talk about Babel macros."),f.forEach(o),L=c(k),T=a(k,"SECTION",{});var Fe=t(T);g=a(Fe,"H2",{});var Vh=t(g);_=a(Vh,"A",{href:!0,id:!0});var Gh=t(_);po=r(Gh,"Motivation"),Gh.forEach(o),Vh.forEach(o),nn=c(Fe),ps=a(Fe,"P",{});var Bt=t(ps);rn=r(Bt,"In my previous post, "),ho=a(Bt,"A",{href:!0});var Wh=t(ho);ln=r(Wh,'"Creating custom JavaScript syntax with Babel"'),Wh.forEach(o),cn=r(Bt,", I've shown you detailed steps on how you can create a custom syntax and write transform plugin or polyfills so that the syntax can be run in browsers today."),Bt.forEach(o),pn=c(Fe),Je=a(Fe,"P",{});var Kh=t(Je);hn=r(Kh,"However, it is purely educational, and I am not recommending you to create your custom JavaScript syntax for production projects for several reasons:"),Kh.forEach(o),Fe.forEach(o),Et=c(k),z=a(k,"SECTION",{});var Ht=t(z);Xe=a(Ht,"H3",{});var Yh=t(Xe);hs=a(Yh,"A",{href:!0,id:!0});var $h=t(hs);kn=r($h,"Documentation and community support"),$h.forEach(o),Yh.forEach(o),yn=c(Ht),U=a(Ht,"P",{});var Ne=t(U);vn=r(Ne,"If anything goes wrong, the great JavaScript community out there has no idea what is the "),ko=a(Ne,"CODE",{class:!0});var Jh=t(ko);dn=r(Jh,"@@"),Jh.forEach(o),un=r(Ne," ("),yo=a(Ne,"A",{href:!0});var Xh=t(yo);fn=r(Xh,"the curry function syntax we created previously"),Xh.forEach(o),mn=r(Ne,") means. Meaning the support that a new developer to the team can get is only as good as your documentation."),Ne.forEach(o),Ht.forEach(o),_t=c(k),Q=a(k,"SECTION",{});var Rt=t(Q);ze=a(Rt,"H3",{});var zh=t(ze);ks=a(zh,"A",{href:!0,id:!0});var Qh=t(ks);xn=r(Qh,"Tooling"),Qh.forEach(o),zh.forEach(o),gn=c(Rt),Qe=a(Rt,"P",{});var Zh=t(Qe);wn=r(Zh,"You need to make all the tooling you use to work. I mean eslint, prettier, Flowtype/TypeScript, your editor..."),Zh.forEach(o),Rt.forEach(o),It=c(k),Z=a(k,"SECTION",{});var Ft=t(Z);Ze=a(Ft,"H3",{});var sk=t(Ze);ys=a(sk,"A",{href:!0,id:!0});var ok=t(ys);bn=r(ok,"Maintainability"),ok.forEach(o),sk.forEach(o),En=c(Ft),sa=a(Ft,"P",{});var ek=t(sa);_n=r(ek,`If the forked version has a bug, do you have enough support to fix it?
If the babel upstream fixed a bug or added a feature, how often do you merge the upstream into your fork?`),ek.forEach(o),Ft.forEach(o),Pt=c(k),q=a(k,"SECTION",{});var Le=t(q);oa=a(Le,"H3",{});var ak=t(oa);vs=a(ak,"A",{href:!0,id:!0});var tk=t(vs);In=r(tk,"Consistency of the syntax"),tk.forEach(o),ak.forEach(o),Pn=c(Le),ea=a(Le,"P",{});var nk=t(ea);Tn=r(nk,"This is the hardest part of creating a new syntax. An added syntax is an added mental concept for the language users, so the new mental model should be transferable to every scenario of the language."),nk.forEach(o),Dn=c(Le),ds=a(Le,"P",{});var Nt=t(ds);Cn=r(Nt,"Take our "),vo=a(Nt,"CODE",{class:!0});var rk=t(vo);On=r(rk,"@@"),rk.forEach(o),Sn=r(Nt," syntax, for example, if it works for a normal function declaration, it's expected to work for anonymous functions, arrow functions, class methods. Have you thought about how it would work with generator functions and async functions? If a curried function returns another function, does that make the returned function curried as well?"),Nt.forEach(o),Le.forEach(o),Tt=c(k),y=a(k,"SECTION",{});var v=t(y);aa=a(v,"H2",{});var lk=t(aa);us=a(lk,"A",{href:!0,id:!0});var ik=t(us);An=r(ik,"Compile-time vs Runtime"),ik.forEach(o),lk.forEach(o),Mn=c(v),ta=a(v,"P",{});var ck=t(ta);Bn=r(ck,"I think you get my point. But the idea of having a magical syntax that keeps the code elegant and short is enticing."),ck.forEach(o),Hn=c(v),M=a(v,"P",{});var ns=t(M);Rn=r(ns,"Take "),fs=a(ns,"A",{href:!0,rel:!0});var pk=t(fs);Fn=r(pk,"optional chaining"),pk.forEach(o),Nn=r(ns," for example, before having the optional chaining operator "),uo=a(ns,"CODE",{class:!0});var hk=t(uo);Ln=r(hk,"?."),hk.forEach(o),qn=r(ns,", we had a few ways to write "),fo=a(ns,"CODE",{class:!0});var kk=t(fo);jn=r(kk,"props?.user?.friends?.[0]?.friend"),kk.forEach(o),Un=r(ns,", which is:"),ns.forEach(o),Vn=c(v),na=a(v,"P",{});var yk=t(na);ra=a(yk,"STRONG",{});var vk=t(ra);Gn=r(vk,"a mundane to write, not easy to read (less intentional), but most efficient possible:"),vk.forEach(o),yk.forEach(o),Wn=c(v),mo=a(v,"DIV",{class:!0});var xd=t(mo);xd.forEach(o),Kn=c(v),la=a(v,"P",{});var dk=t(la);ia=a(dk,"STRONG",{});var uk=t(ia);Yn=r(uk,"easy to write, easy to read, but with slightly more runtime overhead:"),uk.forEach(o),dk.forEach(o),$n=c(v),xo=a(v,"DIV",{class:!0});var gd=t(xo);gd.forEach(o),Jn=c(v),D=a(v,"BLOCKQUOTE",{});var F=t(D);ca=a(F,"B",{});var fk=t(ca);Xn=r(fk,"Note:"),fk.forEach(o),zn=r(F," I've tried to search online whether a `try-catch` is more expensive, however the "),go=a(F,"A",{href:!0});var mk=t(go);Qn=r(mk,"search result"),mk.forEach(o),Zn=c(F),wo=a(F,"A",{href:!0});var xk=t(wo);sr=r(xk,"is not"),xk.forEach(o),or=c(F),bo=a(F,"A",{href:!0});var gk=t(bo);er=r(gk,"conclusive"),gk.forEach(o),ar=r(F,". "),Eo=a(F,"A",{href:!0});var wk=t(Eo);tr=r(wk,"Let me know"),wk.forEach(o),nr=r(F," if you have a conclusive research on this."),F.forEach(o),rr=c(v),_o=a(v,"P",{});var Nh=t(_o);lr=r(Nh,"Is there a third option that is "),pa=a(Nh,"STRONG",{});var bk=t(pa);ir=r(bk,"easy to read and write, yet without the try-catch runtime overhead?"),bk.forEach(o),Nh.forEach(o),cr=c(v),B=a(v,"P",{});var rs=t(B);pr=r(rs,"Well, if you look at the "),ms=a(rs,"A",{href:!0,rel:!0});var Ek=t(ms);Io=a(Ek,"CODE",{class:!0});var _k=t(Io);hr=r(_k,"facebookincubator/idx"),_k.forEach(o),Ek.forEach(o),kr=r(rs," library, it uses a "),xs=a(rs,"A",{href:!0,rel:!0});var Ik=t(xs);yr=r(Ik,"Babel plugin"),Ik.forEach(o),vr=r(rs," to search through require or imports of "),Po=a(rs,"CODE",{class:!0});var Pk=t(Po);dr=r(Pk,"idx"),Pk.forEach(o),ur=r(rs," and replaces all its usages, for example when you write:"),rs.forEach(o),fr=c(v),To=a(v,"DIV",{class:!0});var wd=t(To);wd.forEach(o),mr=c(v),ha=a(v,"P",{});var Tk=t(ha);xr=r(Tk,"it gets transformed into:"),Tk.forEach(o),gr=c(v),Do=a(v,"DIV",{class:!0});var bd=t(Do);bd.forEach(o),wr=c(v),ka=a(v,"P",{});var Dk=t(ka);br=r(Dk,"So your code is easy to read, and no runtime overhead. You get the best of both worlds!"),Dk.forEach(o),Er=c(v),ya=a(v,"P",{});var Ck=t(ya);_r=r(Ck,"Though nothing is perfect. Here, I wanted to point out some of my personal opinions about this approach:"),Ck.forEach(o),Ir=c(v),va=a(v,"BLOCKQUOTE",{});var Ok=t(va);da=a(Ok,"P",{});var Sk=t(da);Pr=r(Sk,"While maintaining a good developer experience (DX), we've shifted the runtime overhead to compile time."),Sk.forEach(o),Ok.forEach(o),Tr=c(v),gs=a(v,"P",{});var Lt=t(gs);Dr=r(Lt,"You can keep the way you wanted to write the code while having the compiler to transform the code to something you are "),ua=a(Lt,"EM",{});var Ak=t(ua);Cr=r(Ak,'"supposed"'),Ak.forEach(o),Or=r(Lt," to write."),Lt.forEach(o),Sr=c(v),fa=a(v,"P",{});var Mk=t(fa);Ar=r(Mk,"A win-win solution."),Mk.forEach(o),Mr=c(v),ma=a(v,"P",{});var Bk=t(ma);xa=a(Bk,"STRONG",{});var Hk=t(xa);Br=r(Hk,"How do we apply this technique to other similar situations?"),Hk.forEach(o),Bk.forEach(o),Hr=c(v),ws=a(v,"P",{});var qt=t(ws);Rr=r(qt,"First, you need to "),Co=a(qt,"A",{href:!0});var Rk=t(Co);Fr=r(Rk,"write a Babel plugin"),Rk.forEach(o),Nr=r(qt,"."),qt.forEach(o),Lr=c(v),bs=a(v,"P",{});var jt=t(bs);qr=r(jt,"Secondly, you need a "),ga=a(jt,"STRONG",{});var Fk=t(ga);jr=r(Fk,"marker"),Fk.forEach(o),Ur=r(jt," to target the transformation."),jt.forEach(o),Vr=c(v),V=a(v,"P",{});var qe=t(V);Gr=r(qe,"In this example, the default import from the "),Oo=a(qe,"CODE",{class:!0});var Nk=t(Oo);Wr=r(Nk,'"idx"'),Nk.forEach(o),Kr=r(qe," module is the "),wa=a(qe,"STRONG",{});var Lk=t(wa);Yr=r(Lk,"marker"),Lk.forEach(o),$r=r(qe,", all the usage of the default import would be transformed by the Babel plugin."),qe.forEach(o),Jr=c(v),G=a(v,"P",{});var je=t(G);Xr=r(je,"Thirdly, you need to update your babel configuration. For every new plugin, "),ba=a(je,"STRONG",{});var qk=t(ba);zr=r(qk,"you need to add them in"),qk.forEach(o),Qr=r(je,"; "),Ea=a(je,"STRONG",{});var jk=t(Ea);Zr=r(jk,"you need to make sure the order of plugin is correct"),jk.forEach(o),sl=r(je,"."),je.forEach(o),ol=c(v),_a=a(v,"P",{});var Uk=t(_a);Ia=a(Uk,"STRONG",{});var Vk=t(Ia);el=r(Vk,"What if there's a bug in the Babel plugin?"),Vk.forEach(o),Uk.forEach(o),al=c(v),Pa=a(v,"P",{});var Gk=t(Pa);tl=r(Gk,"This would be the most confusing part for the new developers on the codebase."),Gk.forEach(o),nl=c(v),w=a(v,"P",{});var E=t(w);rl=r(E,"In this example, if the "),So=a(E,"CODE",{class:!0});var Wk=t(So);ll=r(Wk,"idx"),Wk.forEach(o),il=r(E," function has a bug, it is natural for developers to dig into the source code of "),Ao=a(E,"CODE",{class:!0});var Kk=t(Ao);cl=r(Kk,"idx"),Kk.forEach(o),pl=r(E,". However, "),Mo=a(E,"CODE",{class:!0});var Yk=t(Mo);hl=r(Yk,'"idx"'),Yk.forEach(o),kl=r(E," is nothing but a "),Ta=a(E,"STRONG",{});var $k=t(Ta);yl=r($k,"marker"),$k.forEach(o),vl=r(E," for the "),Bo=a(E,"CODE",{class:!0});var Jk=t(Bo);dl=r(Jk,"babel-plugin-idx"),Jk.forEach(o),ul=r(E," to transform away. So if there's any bug, it should be inside "),Ho=a(E,"CODE",{class:!0});var Xk=t(Ho);fl=r(Xk,"babel-plugin-idx"),Xk.forEach(o),ml=r(E," instead of "),Ro=a(E,"CODE",{class:!0});var zk=t(Ro);xl=r(zk,"idx"),zk.forEach(o),gl=r(E,"."),E.forEach(o),wl=c(v),W=a(v,"P",{});var Ue=t(W);bl=r(Ue,"Besides, the bug may be due to the configuration of the Babel plugin instead of the code logic itself. However if you change the configuration, it could affect all the usages of the "),Fo=a(Ue,"CODE",{class:!0});var Qk=t(Fo);El=r(Qk,"idx"),Qk.forEach(o),_l=r(Ue," function, because "),Da=a(Ue,"STRONG",{});var Zk=t(Da);Il=r(Zk,"babel configuration is global"),Zk.forEach(o),Pl=r(Ue,"."),Ue.forEach(o),Tl=c(v),Dl=a(v,"HR",{}),Cl=c(v),Ca=a(v,"P",{});var sy=t(Ca);Ol=r(sy,"To summarise, I think that this solution is a win-win for DX vs User Experience (UX), however, if we can make the transform plugin more accessible to all developers, eg: without having to update babel configuration for every new transform plugin, easier to debug, and a localized configuration."),sy.forEach(o),Sl=c(v),Es=a(v,"P",{});var Ut=t(Es);Al=r(Ut,"Well, you are looking at "),_s=a(Ut,"A",{href:!0,rel:!0});var oy=t(_s);Ml=r(oy,"babel macros"),oy.forEach(o),Bl=r(Ut,". \u{1F440}"),Ut.forEach(o),v.forEach(o),Dt=c(k),d=a(k,"SECTION",{});var u=t(d);Oa=a(u,"H2",{});var ey=t(Oa);Is=a(ey,"A",{href:!0,id:!0});var ay=t(Is);Hl=r(ay,"Babel macros"),ay.forEach(o),ey.forEach(o),Rl=c(u),Sa=a(u,"P",{});var ty=t(Sa);Fl=r(ty,"So, here's how it would look like with babel macro:"),ty.forEach(o),Nl=c(u),Aa=a(u,"P",{});var ny=t(Aa);Ps=a(ny,"STRONG",{});var Vt=t(Ps);Ll=r(Vt,"You add "),No=a(Vt,"CODE",{class:!0});var ry=t(No);ql=r(ry,"babel-plugin-macro"),ry.forEach(o),jl=r(Vt," to babel config"),Vt.forEach(o),ny.forEach(o),Ul=c(u),Ma=a(u,"P",{});var ly=t(Ma);Vl=r(ly,"And that's all the change you need for babel configuration."),ly.forEach(o),Gl=c(u),Lo=a(u,"DIV",{class:!0});var Ed=t(Lo);Ed.forEach(o),Wl=c(u),Ba=a(u,"P",{});var iy=t(Ba);Ha=a(iy,"STRONG",{});var cy=t(Ha);Kl=r(cy,"You write your own macro"),cy.forEach(o),iy.forEach(o),Yl=c(u),qo=a(u,"DIV",{class:!0});var _d=t(qo);_d.forEach(o),$l=c(u),K=a(u,"P",{});var Ve=t(K);Jl=r(Ve,"We'll talk about the code later, one thing to take away here is that your filename has to end with "),jo=a(Ve,"CODE",{class:!0});var py=t(jo);Xl=r(py,".macro"),py.forEach(o),zl=r(Ve," or "),Uo=a(Ve,"CODE",{class:!0});var hy=t(Uo);Ql=r(hy,".macro.js"),hy.forEach(o),Zl=r(Ve,"."),Ve.forEach(o),si=c(u),Ra=a(u,"P",{});var ky=t(Ra);Fa=a(ky,"STRONG",{});var yy=t(Fa);oi=r(yy,"Use it"),yy.forEach(o),ky.forEach(o),ei=c(u),Vo=a(u,"DIV",{class:!0});var Id=t(Vo);Id.forEach(o),ai=c(u),Ts=a(u,"P",{});var Gt=t(Ts);ti=r(Gt,"As you can see here, if there's something wrong about "),Go=a(Gt,"CODE",{class:!0});var vy=t(Go);ni=r(vy,"idx"),vy.forEach(o),ri=r(Gt,", the user would know which file exactly to look at."),Gt.forEach(o),li=c(u),Y=a(u,"P",{});var Ge=t(Y);ii=r(Ge,"You don't get the disconnection between the module "),Wo=a(Ge,"CODE",{class:!0});var dy=t(Wo);ci=r(dy,"idx"),dy.forEach(o),pi=r(Ge," and the plugin "),Ko=a(Ge,"CODE",{class:!0});var uy=t(Ko);hi=r(uy,"babel-plugin-idx"),uy.forEach(o),ki=r(Ge,"."),Ge.forEach(o),yi=c(u),Na=a(u,"P",{});var fy=t(Na);vi=r(fy,"Besides, if you want to modify configuration, say for this usage, you can do it easily:"),fy.forEach(o),di=c(u),Yo=a(u,"DIV",{class:!0});var Pd=t(Yo);Pd.forEach(o),ui=c(u),La=a(u,"P",{});var my=t(La);fi=r(my,"Simple and explicit. Isn't that great?"),my.forEach(o),u.forEach(o),Ct=c(k),b=a(k,"SECTION",{});var O=t(b);qa=a(O,"H3",{});var xy=t(qa);Ds=a(xy,"A",{href:!0,id:!0});var gy=t(Ds);mi=r(gy,"So what is Babel macros again?"),gy.forEach(o),xy.forEach(o),xi=c(O),ss=a(O,"P",{});var gt=t(ss);ja=a(gt,"STRONG",{});var wy=t(ja);gi=r(wy,"Babel macros"),wy.forEach(o),wi=r(gt," is a concept from the "),Cs=a(gt,"A",{href:!0,rel:!0});var by=t(Cs);$o=a(by,"CODE",{class:!0});var Ey=t($o);bi=r(Ey,"babel-plugin-macros"),Ey.forEach(o),by.forEach(o),Ei=r(gt,", which defines the standard interface between compile-time code transformation and your runtime code."),gt.forEach(o),_i=c(O),I=a(O,"P",{});var S=t(I);Ii=r(S,"In compile-time, "),Jo=a(S,"CODE",{class:!0});var _y=t(Jo);Pi=r(_y,"babel-plugin-macros"),_y.forEach(o),Ti=r(S," will look for all "),Xo=a(S,"CODE",{class:!0});var Iy=t(Xo);Di=r(Iy,"import"),Iy.forEach(o),Ci=r(S," or "),zo=a(S,"CODE",{class:!0});var Py=t(zo);Oi=r(Py,"require"),Py.forEach(o),Si=r(S," from modules ends with "),Qo=a(S,"CODE",{class:!0});var Ty=t(Qo);Ai=r(Ty,".macro"),Ty.forEach(o),Mi=r(S,", finds all references of the imported variables, and passes them to the "),Zo=a(S,"CODE",{class:!0});var Dy=t(Zo);Bi=r(Dy,".macro"),Dy.forEach(o),Hi=r(S," file to transform them."),S.forEach(o),Ri=c(O),Ua=a(O,"P",{});var Cy=t(Ua);Fi=r(Cy,"The imported variables are not restricted to be a function, it can be a variable, a type from type system (Flow / TypeScript)."),Cy.forEach(o),Ni=c(O),Va=a(O,"P",{});var Oy=t(Va);Li=r(Oy,"If it is a default export, you can name it any way you like, if it is a named export, you can reassign to another variable name too."),Oy.forEach(o),qi=c(O),Ga=a(O,"P",{});var Sy=t(Ga);ji=r(Sy,"Cool, so how can I write my Babel macros?"),Sy.forEach(o),O.forEach(o),Ot=c(k),C=a(k,"SECTION",{});var ls=t(C);Wa=a(ls,"H2",{});var Ay=t(Wa);Os=a(Ay,"A",{href:!0,id:!0});var My=t(Os);Ui=r(My,"How to write Babel macros"),My.forEach(o),Ay.forEach(o),Vi=c(ls),os=a(ls,"P",{});var wt=t(os);Ss=a(wt,"A",{href:!0,rel:!0});var By=t(Ss);Gi=r(By,"Kent C Dodds"),By.forEach(o),Wi=r(wt," has written "),As=a(wt,"A",{href:!0,rel:!0});var Hy=t(As);Ki=r(Hy,"a fantastic guide for macro authors"),Hy.forEach(o),Yi=r(wt,"."),wt.forEach(o),$i=c(ls),Ka=a(ls,"P",{});var Ry=t(Ka);Ji=r(Ry,"Please go read it."),Ry.forEach(o),Xi=c(ls),Ms=a(ls,"P",{});var Wt=t(Ms);zi=r(Wt,"If you insist to stay, I am going to show you how I wrote my Babel macros, in particular, the "),Bs=a(Wt,"A",{href:!0,rel:!0});var Fy=t(Bs);Qi=r(Fy,"mock.macro"),Fy.forEach(o),Zi=r(Wt,". And hopefully, along the way, you learned how to write your Babel macros as well."),Wt.forEach(o),ls.forEach(o),St=c(k),p=a(k,"SECTION",{});var h=t(p);Ya=a(h,"H3",{});var Ny=t(Ya);Hs=a(Ny,"A",{href:!0,id:!0});var Ly=t(Hs);sc=r(Ly,"mock.macro"),Ly.forEach(o),Ny.forEach(o),oc=c(h),$a=a(h,"P",{});var qy=t($a);Ja=a(qy,"STRONG",{});var jy=t(Ja);ec=r(jy,"Motivation"),jy.forEach(o),qy.forEach(o),ac=c(h),Xa=a(h,"P",{});var Uy=t(Xa);tc=r(Uy,"Usually, when working with a backend developer on a frontend application, I would use static type to define the API schema. For example, a user api would look like this:"),Uy.forEach(o),nc=c(h),se=a(h,"DIV",{class:!0});var Td=t(se);Td.forEach(o),rc=c(h),za=a(h,"P",{});var Vy=t(za);lc=r(Vy,"However while waiting for the backend developer to develop the API, I would have to use mock data for development:"),Vy.forEach(o),ic=c(h),oe=a(h,"DIV",{class:!0});var Dd=t(oe);Dd.forEach(o),cc=c(h),Qa=a(h,"P",{});var Gy=t(Qa);pc=r(Gy,"And along the way, due to unforeseen circumstances and lack of foresight, the response schema of the API was changed multiple times:"),Gy.forEach(o),hc=c(h),ee=a(h,"DIV",{class:!0});var Cd=t(ee);Cd.forEach(o),kc=c(h),H=a(h,"P",{});var is=t(H);yc=r(is,"Here you see I need to update both the type definition as well as the mock data. This reminds me of "),Rs=a(is,"A",{href:!0,rel:!0});var Wy=t(Rs);vc=r(Wy,"the double declaration problem"),Wy.forEach(o),dc=r(is," coined by "),Fs=a(is,"A",{href:!0,rel:!0});var Ky=t(Fs);uc=r(Ky,"@swyx"),Ky.forEach(o),fc=c(is),Ns=a(is,"A",{href:!0,rel:!0});var Yy=t(Ns);mc=r(Yy,"in his talk"),Yy.forEach(o),xc=r(is,". Which means that this could potentially be solved with Babel macros."),is.forEach(o),gc=c(h),Za=a(h,"P",{});var $y=t(Za);wc=r($y,"So in my head, I imagined with Babel macros, I could write:"),$y.forEach(o),bc=c(h),ae=a(h,"DIV",{class:!0});var Od=t(ae);Od.forEach(o),Ec=c(h),Ls=a(h,"P",{});var Kt=t(Ls);_c=r(Kt,"and when I call the function "),te=a(Kt,"CODE",{class:!0});var Jy=t(te);Ic=r(Jy,"fetchUser"),Jy.forEach(o),Pc=r(Kt,", I would get my mock response in return."),Kt.forEach(o),Tc=c(h),st=a(h,"P",{});var Xy=t(st);ot=a(Xy,"STRONG",{});var zy=t(ot);Dc=r(zy,"Implementing mock.macro"),zy.forEach(o),Xy.forEach(o),Cc=c(h),qs=a(h,"P",{});var Yt=t(qs);Oc=r(Yt,"Implementing mock.macro requires some basic knowledge about Abstract Syntax Tree (AST) and writing babel transformation, you can check out "),ne=a(Yt,"A",{href:!0});var Qy=t(ne);Sc=r(Qy,"the step-by-step guide I've written previously"),Qy.forEach(o),Ac=r(Yt,"."),Yt.forEach(o),Mc=c(h),js=a(h,"P",{});var $t=t(js);Bc=r($t,"Implementing Babel macros is quite easy, the api from the "),re=a($t,"CODE",{class:!0});var Zy=t(re);Hc=r(Zy,"babel-plugin-macros"),Zy.forEach(o),Rc=r($t," is pretty straightforward, all you need is to provide a default export to your macro file:"),$t.forEach(o),Fc=c(h),le=a(h,"DIV",{class:!0});var Sd=t(le);Sd.forEach(o),Nc=c(h),ie=a(h,"P",{});var Lh=t(ie);ce=a(Lh,"CODE",{class:!0});var sv=t(ce);Lc=r(sv,"createMacro"),sv.forEach(o),qc=r(Lh," takes in a callback function, which is executed when someone imports this macro file. It provides:"),Lh.forEach(o),jc=c(h),et=a(h,"UL",{});var ov=t(et);at=a(ov,"LI",{});var ev=t(at);tt=a(ev,"STRONG",{});var av=t(tt);Uc=r(av,"references"),av.forEach(o),ev.forEach(o),ov.forEach(o),Vc=c(h),nt=a(h,"P",{});var tv=t(nt);Gc=r(tv,"All the reference that was imported from the macro file."),tv.forEach(o),Wc=c(h),rt=a(h,"P",{});var nv=t(rt);Kc=r(nv,"For example:"),nv.forEach(o),Yc=c(h),pe=a(h,"DIV",{class:!0});var Ad=t(pe);Ad.forEach(o),$c=c(h),$=a(h,"P",{});var We=t($);Jc=r(We,"will give you an object, with the import name as the "),he=a(We,"CODE",{class:!0});var rv=t(he);Xc=r(rv,"key"),rv.forEach(o),zc=r(We,", and array of paths as the "),ke=a(We,"CODE",{class:!0});var lv=t(ke);Qc=r(lv,"value"),lv.forEach(o),Zc=r(We,":"),We.forEach(o),sp=c(h),ye=a(h,"DIV",{class:!0});var Md=t(ye);Md.forEach(o),op=c(h),lt=a(h,"P",{});var iv=t(lt);ep=r(iv,"Inside the array, you can get all paths where the imported names are referenced. For example:"),iv.forEach(o),ap=c(h),ve=a(h,"DIV",{class:!0});var Bd=t(ve);Bd.forEach(o),tp=c(h),it=a(h,"UL",{});var cv=t(it);ct=a(cv,"LI",{});var pv=t(ct);pt=a(pv,"STRONG",{});var hv=t(pt);np=r(hv,"state"),hv.forEach(o),pv.forEach(o),cv.forEach(o),rp=c(h),ht=a(h,"P",{});var kv=t(ht);lp=r(kv,"It gives you the current state of the file being traversed."),kv.forEach(o),ip=c(h),Us=a(h,"P",{});var Jt=t(Us);cp=r(Jt,"So, in this example, I need to transform all the references of "),de=a(Jt,"CODE",{class:!0});var yv=t(de);pp=r(yv,"MockResponse"),yv.forEach(o),hp=r(Jt,":"),Jt.forEach(o),kp=c(h),ue=a(h,"DIV",{class:!0});var Hd=t(ue);Hd.forEach(o),yp=c(h),kt=a(h,"P",{});var vv=t(kt);vp=r(vv,"Next, I need to figure out how the transformed code would look like:"),vv.forEach(o),dp=c(h),fe=a(h,"DIV",{class:!0});var Rd=t(fe);Rd.forEach(o),up=c(h),Vs=a(h,"P",{});var Xt=t(Vs);fp=r(Xt,"I decided to use "),Gs=a(Xt,"A",{href:!0,rel:!0});var dv=t(Gs);mp=r(dv,"faker.js"),dv.forEach(o),xp=r(Xt," as the random data generator."),Xt.forEach(o),gp=c(h),Ws=a(h,"P",{});var zt=t(Ws);wp=r(zt,"So I have to import "),me=a(zt,"CODE",{class:!0});var uv=t(me);bp=r(uv,"faker"),uv.forEach(o),Ep=r(zt," at the top of the file:"),zt.forEach(o),_p=c(h),xe=a(h,"DIV",{class:!0});var Fd=t(xe);Fd.forEach(o),Ip=c(h),R=a(h,"P",{});var cs=t(R);Pp=r(cs,"Next, for each references of "),ge=a(cs,"CODE",{class:!0});var fv=t(ge);Tp=r(fv,"MockRespone"),fv.forEach(o),Dp=r(cs,", I need to find the "),we=a(cs,"CODE",{class:!0});var mv=t(we);Cp=r(mv,"FunctionDeclaration"),mv.forEach(o),Op=r(cs," that it belongs to, and insert a "),be=a(cs,"CODE",{class:!0});var xv=t(be);Sp=r(xv,"ReturnStatement"),xv.forEach(o),Ap=r(cs," into the top of the function body:"),cs.forEach(o),Mp=c(h),Ee=a(h,"DIV",{class:!0});var Nd=t(Ee);Nd.forEach(o),Bp=c(h),J=a(h,"P",{});var Ke=t(J);Hp=r(Ke,"In the "),_e=a(Ke,"CODE",{class:!0});var gv=t(_e);Rp=r(gv,"generateFakerCode"),gv.forEach(o),Fp=r(Ke,", I'll generate a AST node based on the node type of the "),Ie=a(Ke,"CODE",{class:!0});var wv=t(Ie);Np=r(wv,"typeDef"),wv.forEach(o),Lp=r(Ke,":"),Ke.forEach(o),qp=c(h),Pe=a(h,"DIV",{class:!0});var Ld=t(Pe);Ld.forEach(o),jp=c(h),yt=a(h,"P",{});var bv=t(yt);Up=r(bv,"That's it! A generated mock function via type definition using Babel macros."),bv.forEach(o),Vp=c(h),vt=a(h,"P",{});var Ev=t(vt);Gp=r(Ev,"One last thing, what happens when the API is ready, and you want to disable the mocking behavior?"),Ev.forEach(o),Wp=c(h),Ks=a(h,"P",{});var Qt=t(Ks);Kp=r(Qt,"We can read the 2nd parameter of the "),Te=a(Qt,"CODE",{class:!0});var _v=t(Te);Yp=r(_v,"MockResponse"),_v.forEach(o),$p=r(Qt,":"),Qt.forEach(o),Jp=c(h),De=a(h,"DIV",{class:!0});var qd=t(De);qd.forEach(o),Xp=c(h),Ys=a(h,"P",{});var Zt=t(Ys);zp=r(Zt,"If the 2nd parameter is "),Ce=a(Zt,"CODE",{class:!0});var Iv=t(Ce);Qp=r(Iv,"false"),Iv.forEach(o),Zp=r(Zt,", we disable the mocking behavior:"),Zt.forEach(o),sh=c(h),Oe=a(h,"DIV",{class:!0});var jd=t(Oe);jd.forEach(o),oh=c(h),dt=a(h,"BLOCKQUOTE",{});var Pv=t(dt);$s=a(Pv,"P",{});var sn=t($s);eh=r(sn,"You can find the full code from "),Js=a(sn,"A",{href:!0,rel:!0});var Tv=t(Js);ah=r(Tv,"Github"),Tv.forEach(o),th=r(sn,"."),sn.forEach(o),Pv.forEach(o),h.forEach(o),At=c(k),j=a(k,"SECTION",{});var Ye=t(j);ut=a(Ye,"H2",{});var Dv=t(ut);Xs=a(Dv,"A",{href:!0,id:!0});var Cv=t(Xs);nh=r(Cv,"Summary"),Cv.forEach(o),Dv.forEach(o),rh=c(Ye),X=a(Ye,"P",{});var $e=t(X);lh=r($e,"Sometimes, it is more efficient to move runtime abstraction and complexity to compile time. However, developing and maintaining a babel plugin for each of them may be difficult to maintain and debug, as there's a gap between the code written and build time plugin, eg: "),Se=a($e,"CODE",{class:!0});var Ov=t(Se);ih=r(Ov,"idx"),Ov.forEach(o),ch=r($e," and "),Ae=a($e,"CODE",{class:!0});var Sv=t(Ae);ph=r(Sv,"babel-plugin-idx"),Sv.forEach(o),hh=r($e,"."),$e.forEach(o),kh=c(Ye),es=a(Ye,"P",{});var bt=t(es);Me=a(bt,"CODE",{class:!0});var Av=t(Me);yh=r(Av,"babel-plugin-macros"),Av.forEach(o),vh=r(bt," solves this by allow users to import "),Be=a(bt,"CODE",{class:!0});var Mv=t(Be);dh=r(Mv,".macro"),Mv.forEach(o),uh=r(bt," files directly into the codebase. The explicit import bridges the gap between build-time and runtime and allows the user to develop and debug their macro easily."),bt.forEach(o),Ye.forEach(o),Mt=c(k),as=a(k,"SECTION",{});var on=t(as);ft=a(on,"H2",{});var Bv=t(ft);zs=a(Bv,"A",{href:!0,id:!0});var Hv=t(zs);fh=r(Hv,"Further Reading"),Hv.forEach(o),Bv.forEach(o),mh=c(on),P=a(on,"UL",{});var A=t(P);Qs=a(A,"LI",{});var en=t(Qs);Zs=a(en,"A",{href:!0,rel:!0});var Rv=t(Zs);xh=r(Rv,"babel-plugin-macros"),Rv.forEach(o),gh=r(en," by "),so=a(en,"A",{href:!0,rel:!0});var Fv=t(so);wh=r(Fv,"Kent C. Dodds"),Fv.forEach(o),en.forEach(o),bh=c(A),oo=a(A,"LI",{});var an=t(oo);eo=a(an,"A",{href:!0,rel:!0});var Nv=t(eo);Eh=r(Nv,"I Can Babel Macros (and So Can You!)"),Nv.forEach(o),_h=r(an," by "),ao=a(an,"A",{href:!0,rel:!0});var Lv=t(ao);Ih=r(Lv,"Shawn Wang"),Lv.forEach(o),an.forEach(o),Ph=c(A),mt=a(A,"LI",{});var qv=t(mt);ts=a(qv,"A",{href:!0,rel:!0});var qh=t(ts);He=a(qh,"CODE",{class:!0});var jv=t(He);Th=r(jv,"babel-plugin-macros"),jv.forEach(o),Dh=r(qh," Usage for macros authors"),qh.forEach(o),qv.forEach(o),Ch=c(A),to=a(A,"LI",{});var tn=t(to);no=a(tn,"A",{href:!0,rel:!0});var Uv=t(no);Oh=r(Uv,"Zero-config code transformation with babel-plugin-macros"),Uv.forEach(o),Sh=r(tn," by "),ro=a(tn,"A",{href:!0,rel:!0});var Vv=t(ro);Ah=r(Vv,"Kent C. Dodds"),Vv.forEach(o),tn.forEach(o),Mh=c(A),xt=a(A,"LI",{});var Gv=t(xt);lo=a(Gv,"A",{href:!0,rel:!0});var Wv=t(lo);Bh=r(Wv,"Awesome list for Babel macros"),Wv.forEach(o),Gv.forEach(o),Hh=c(A),Re=a(A,"LI",{});var jh=t(Re);Rh=r(jh,"The idea of converting type definition to mock generator comes from "),io=a(jh,"A",{href:!0,rel:!0});var Kv=t(io);Fh=r(Kv,"Manta Style, the futuristic API Mock Server for Frontend"),Kv.forEach(o),jh.forEach(o),A.forEach(o),on.forEach(o),this.h()},h(){l(_,"href","#motivation"),l(_,"id","motivation"),l(ho,"href","/creating-custom-javascript-syntax-with-babel"),l(hs,"href","#documentation-and-community-support"),l(hs,"id","documentation-and-community-support"),l(ko,"class","inline"),l(yo,"href","/creating-custom-javascript-syntax-with-babel#overview"),l(ks,"href","#tooling"),l(ks,"id","tooling"),l(ys,"href","#maintainability"),l(ys,"id","maintainability"),l(vs,"href","#consistency-of-the-syntax"),l(vs,"id","consistency-of-the-syntax"),l(vo,"class","inline"),l(us,"href","#compile-time-vs-runtime"),l(us,"id","compile-time-vs-runtime"),l(fs,"href","https://v8.dev/features/optional-chaining"),l(fs,"rel","nofollow"),l(uo,"class","inline"),l(fo,"class","inline"),l(mo,"class","code-section"),l(xo,"class","code-section"),l(go,"href","https://stackoverflow.com/questions/19727905/in-javascript-is-it-expensive-to-use-try-catch-blocks-even-if-an-exception-is-n"),l(wo,"href","https://news.ycombinator.com/item?id=3922963"),l(bo,"href","https://stackoverflow.com/questions/3217294/javascript-try-catch-performance-vs-error-checking-code"),l(Eo,"href","https://twitter.com/lihautan"),l(Io,"class","inline"),l(ms,"href","https://github.com/facebookincubator/idx"),l(ms,"rel","nofollow"),l(xs,"href","https://github.com/facebookincubator/idx#babel-plugin"),l(xs,"rel","nofollow"),l(Po,"class","inline"),l(To,"class","code-section"),l(Do,"class","code-section"),l(Co,"href","/step-by-step-guide-for-writing-a-babel-transformation"),l(Oo,"class","inline"),l(So,"class","inline"),l(Ao,"class","inline"),l(Mo,"class","inline"),l(Bo,"class","inline"),l(Ho,"class","inline"),l(Ro,"class","inline"),l(Fo,"class","inline"),l(_s,"href","https://github.com/kentcdodds/babel-plugin-macros"),l(_s,"rel","nofollow"),l(Is,"href","#babel-macros"),l(Is,"id","babel-macros"),l(No,"class","inline"),l(Lo,"class","code-section"),l(qo,"class","code-section"),l(jo,"class","inline"),l(Uo,"class","inline"),l(Vo,"class","code-section"),l(Go,"class","inline"),l(Wo,"class","inline"),l(Ko,"class","inline"),l(Yo,"class","code-section"),l(Ds,"href","#so-what-is-babel-macros-again"),l(Ds,"id","so-what-is-babel-macros-again"),l($o,"class","inline"),l(Cs,"href","https://github.com/kentcdodds/babel-plugin-macros"),l(Cs,"rel","nofollow"),l(Jo,"class","inline"),l(Xo,"class","inline"),l(zo,"class","inline"),l(Qo,"class","inline"),l(Zo,"class","inline"),l(Os,"href","#how-to-write-babel-macros"),l(Os,"id","how-to-write-babel-macros"),l(Ss,"href","http://kentcdodds.com"),l(Ss,"rel","nofollow"),l(As,"href","https://github.com/kentcdodds/babel-plugin-macros/blob/master/other/docs/author.md"),l(As,"rel","nofollow"),l(Bs,"href","https://www.npmjs.com/package/mock.macro"),l(Bs,"rel","nofollow"),l(Hs,"href","#mock-macro"),l(Hs,"id","mock-macro"),l(se,"class","code-section"),l(oe,"class","code-section"),l(ee,"class","code-section"),l(Rs,"href","https://babel-blade.netlify.com/docs/declarationdeclaration"),l(Rs,"rel","nofollow"),l(Fs,"href","https://twitter.com/swyx"),l(Fs,"rel","nofollow"),l(Ns,"href","https://www.youtube.com/watch?v=1WNT5RCENfo"),l(Ns,"rel","nofollow"),l(ae,"class","code-section"),l(te,"class","inline"),l(ne,"href","/step-by-step-guide-for-writing-a-babel-transformation"),l(re,"class","inline"),l(le,"class","code-section"),l(ce,"class","inline"),l(pe,"class","code-section"),l(he,"class","inline"),l(ke,"class","inline"),l(ye,"class","code-section"),l(ve,"class","code-section"),l(de,"class","inline"),l(ue,"class","code-section"),l(fe,"class","code-section"),l(Gs,"href","https://github.com/marak/Faker.js/"),l(Gs,"rel","nofollow"),l(me,"class","inline"),l(xe,"class","code-section"),l(ge,"class","inline"),l(we,"class","inline"),l(be,"class","inline"),l(Ee,"class","code-section"),l(_e,"class","inline"),l(Ie,"class","inline"),l(Pe,"class","code-section"),l(Te,"class","inline"),l(De,"class","code-section"),l(Ce,"class","inline"),l(Oe,"class","code-section"),l(Js,"href","https://github.com/tanhauhau/mock.macro"),l(Js,"rel","nofollow"),l(Xs,"href","#summary"),l(Xs,"id","summary"),l(Se,"class","inline"),l(Ae,"class","inline"),l(Me,"class","inline"),l(Be,"class","inline"),l(zs,"href","#further-reading"),l(zs,"id","further-reading"),l(Zs,"href","https://github.com/kentcdodds/babel-plugin-macros"),l(Zs,"rel","nofollow"),l(so,"href","https://twitter.com/kentcdodds/"),l(so,"rel","nofollow"),l(eo,"href","https://www.youtube.com/watch?v=1WNT5RCENfo"),l(eo,"rel","nofollow"),l(ao,"href","https://twitter.com/swyx"),l(ao,"rel","nofollow"),l(He,"class","inline"),l(ts,"href","https://github.com/kentcdodds/babel-plugin-macros/blob/master/other/docs/author.md"),l(ts,"rel","nofollow"),l(no,"href","https://babeljs.io/blog/2017/09/11/zero-config-with-babel-macros"),l(no,"rel","nofollow"),l(ro,"href","https://twitter.com/kentcdodds/"),l(ro,"rel","nofollow"),l(lo,"href","https://github.com/jgierer12/awesome-babel-macros"),l(lo,"rel","nofollow"),l(io,"href","https://github.com/Cryrivers/manta-style"),l(io,"rel","nofollow")},m(k,f){m(k,x,f),s(x,N),m(k,L,f),m(k,T,f),s(T,g),s(g,_),s(_,po),s(T,nn),s(T,ps),s(ps,rn),s(ps,ho),s(ho,ln),s(ps,cn),s(T,pn),s(T,Je),s(Je,hn),m(k,Et,f),m(k,z,f),s(z,Xe),s(Xe,hs),s(hs,kn),s(z,yn),s(z,U),s(U,vn),s(U,ko),s(ko,dn),s(U,un),s(U,yo),s(yo,fn),s(U,mn),m(k,_t,f),m(k,Q,f),s(Q,ze),s(ze,ks),s(ks,xn),s(Q,gn),s(Q,Qe),s(Qe,wn),m(k,It,f),m(k,Z,f),s(Z,Ze),s(Ze,ys),s(ys,bn),s(Z,En),s(Z,sa),s(sa,_n),m(k,Pt,f),m(k,q,f),s(q,oa),s(oa,vs),s(vs,In),s(q,Pn),s(q,ea),s(ea,Tn),s(q,Dn),s(q,ds),s(ds,Cn),s(ds,vo),s(vo,On),s(ds,Sn),m(k,Tt,f),m(k,y,f),s(y,aa),s(aa,us),s(us,An),s(y,Mn),s(y,ta),s(ta,Bn),s(y,Hn),s(y,M),s(M,Rn),s(M,fs),s(fs,Fn),s(M,Nn),s(M,uo),s(uo,Ln),s(M,qn),s(M,fo),s(fo,jn),s(M,Un),s(y,Vn),s(y,na),s(na,ra),s(ra,Gn),s(y,Wn),s(y,mo),mo.innerHTML=Xv,s(y,Kn),s(y,la),s(la,ia),s(ia,Yn),s(y,$n),s(y,xo),xo.innerHTML=zv,s(y,Jn),s(y,D),s(D,ca),s(ca,Xn),s(D,zn),s(D,go),s(go,Qn),s(D,Zn),s(D,wo),s(wo,sr),s(D,or),s(D,bo),s(bo,er),s(D,ar),s(D,Eo),s(Eo,tr),s(D,nr),s(y,rr),s(y,_o),s(_o,lr),s(_o,pa),s(pa,ir),s(y,cr),s(y,B),s(B,pr),s(B,ms),s(ms,Io),s(Io,hr),s(B,kr),s(B,xs),s(xs,yr),s(B,vr),s(B,Po),s(Po,dr),s(B,ur),s(y,fr),s(y,To),To.innerHTML=Qv,s(y,mr),s(y,ha),s(ha,xr),s(y,gr),s(y,Do),Do.innerHTML=Zv,s(y,wr),s(y,ka),s(ka,br),s(y,Er),s(y,ya),s(ya,_r),s(y,Ir),s(y,va),s(va,da),s(da,Pr),s(y,Tr),s(y,gs),s(gs,Dr),s(gs,ua),s(ua,Cr),s(gs,Or),s(y,Sr),s(y,fa),s(fa,Ar),s(y,Mr),s(y,ma),s(ma,xa),s(xa,Br),s(y,Hr),s(y,ws),s(ws,Rr),s(ws,Co),s(Co,Fr),s(ws,Nr),s(y,Lr),s(y,bs),s(bs,qr),s(bs,ga),s(ga,jr),s(bs,Ur),s(y,Vr),s(y,V),s(V,Gr),s(V,Oo),s(Oo,Wr),s(V,Kr),s(V,wa),s(wa,Yr),s(V,$r),s(y,Jr),s(y,G),s(G,Xr),s(G,ba),s(ba,zr),s(G,Qr),s(G,Ea),s(Ea,Zr),s(G,sl),s(y,ol),s(y,_a),s(_a,Ia),s(Ia,el),s(y,al),s(y,Pa),s(Pa,tl),s(y,nl),s(y,w),s(w,rl),s(w,So),s(So,ll),s(w,il),s(w,Ao),s(Ao,cl),s(w,pl),s(w,Mo),s(Mo,hl),s(w,kl),s(w,Ta),s(Ta,yl),s(w,vl),s(w,Bo),s(Bo,dl),s(w,ul),s(w,Ho),s(Ho,fl),s(w,ml),s(w,Ro),s(Ro,xl),s(w,gl),s(y,wl),s(y,W),s(W,bl),s(W,Fo),s(Fo,El),s(W,_l),s(W,Da),s(Da,Il),s(W,Pl),s(y,Tl),s(y,Dl),s(y,Cl),s(y,Ca),s(Ca,Ol),s(y,Sl),s(y,Es),s(Es,Al),s(Es,_s),s(_s,Ml),s(Es,Bl),m(k,Dt,f),m(k,d,f),s(d,Oa),s(Oa,Is),s(Is,Hl),s(d,Rl),s(d,Sa),s(Sa,Fl),s(d,Nl),s(d,Aa),s(Aa,Ps),s(Ps,Ll),s(Ps,No),s(No,ql),s(Ps,jl),s(d,Ul),s(d,Ma),s(Ma,Vl),s(d,Gl),s(d,Lo),Lo.innerHTML=sd,s(d,Wl),s(d,Ba),s(Ba,Ha),s(Ha,Kl),s(d,Yl),s(d,qo),qo.innerHTML=od,s(d,$l),s(d,K),s(K,Jl),s(K,jo),s(jo,Xl),s(K,zl),s(K,Uo),s(Uo,Ql),s(K,Zl),s(d,si),s(d,Ra),s(Ra,Fa),s(Fa,oi),s(d,ei),s(d,Vo),Vo.innerHTML=ed,s(d,ai),s(d,Ts),s(Ts,ti),s(Ts,Go),s(Go,ni),s(Ts,ri),s(d,li),s(d,Y),s(Y,ii),s(Y,Wo),s(Wo,ci),s(Y,pi),s(Y,Ko),s(Ko,hi),s(Y,ki),s(d,yi),s(d,Na),s(Na,vi),s(d,di),s(d,Yo),Yo.innerHTML=ad,s(d,ui),s(d,La),s(La,fi),m(k,Ct,f),m(k,b,f),s(b,qa),s(qa,Ds),s(Ds,mi),s(b,xi),s(b,ss),s(ss,ja),s(ja,gi),s(ss,wi),s(ss,Cs),s(Cs,$o),s($o,bi),s(ss,Ei),s(b,_i),s(b,I),s(I,Ii),s(I,Jo),s(Jo,Pi),s(I,Ti),s(I,Xo),s(Xo,Di),s(I,Ci),s(I,zo),s(zo,Oi),s(I,Si),s(I,Qo),s(Qo,Ai),s(I,Mi),s(I,Zo),s(Zo,Bi),s(I,Hi),s(b,Ri),s(b,Ua),s(Ua,Fi),s(b,Ni),s(b,Va),s(Va,Li),s(b,qi),s(b,Ga),s(Ga,ji),m(k,Ot,f),m(k,C,f),s(C,Wa),s(Wa,Os),s(Os,Ui),s(C,Vi),s(C,os),s(os,Ss),s(Ss,Gi),s(os,Wi),s(os,As),s(As,Ki),s(os,Yi),s(C,$i),s(C,Ka),s(Ka,Ji),s(C,Xi),s(C,Ms),s(Ms,zi),s(Ms,Bs),s(Bs,Qi),s(Ms,Zi),m(k,St,f),m(k,p,f),s(p,Ya),s(Ya,Hs),s(Hs,sc),s(p,oc),s(p,$a),s($a,Ja),s(Ja,ec),s(p,ac),s(p,Xa),s(Xa,tc),s(p,nc),s(p,se),se.innerHTML=td,s(p,rc),s(p,za),s(za,lc),s(p,ic),s(p,oe),oe.innerHTML=nd,s(p,cc),s(p,Qa),s(Qa,pc),s(p,hc),s(p,ee),ee.innerHTML=rd,s(p,kc),s(p,H),s(H,yc),s(H,Rs),s(Rs,vc),s(H,dc),s(H,Fs),s(Fs,uc),s(H,fc),s(H,Ns),s(Ns,mc),s(H,xc),s(p,gc),s(p,Za),s(Za,wc),s(p,bc),s(p,ae),ae.innerHTML=ld,s(p,Ec),s(p,Ls),s(Ls,_c),s(Ls,te),s(te,Ic),s(Ls,Pc),s(p,Tc),s(p,st),s(st,ot),s(ot,Dc),s(p,Cc),s(p,qs),s(qs,Oc),s(qs,ne),s(ne,Sc),s(qs,Ac),s(p,Mc),s(p,js),s(js,Bc),s(js,re),s(re,Hc),s(js,Rc),s(p,Fc),s(p,le),le.innerHTML=id,s(p,Nc),s(p,ie),s(ie,ce),s(ce,Lc),s(ie,qc),s(p,jc),s(p,et),s(et,at),s(at,tt),s(tt,Uc),s(p,Vc),s(p,nt),s(nt,Gc),s(p,Wc),s(p,rt),s(rt,Kc),s(p,Yc),s(p,pe),pe.innerHTML=cd,s(p,$c),s(p,$),s($,Jc),s($,he),s(he,Xc),s($,zc),s($,ke),s(ke,Qc),s($,Zc),s(p,sp),s(p,ye),ye.innerHTML=pd,s(p,op),s(p,lt),s(lt,ep),s(p,ap),s(p,ve),ve.innerHTML=hd,s(p,tp),s(p,it),s(it,ct),s(ct,pt),s(pt,np),s(p,rp),s(p,ht),s(ht,lp),s(p,ip),s(p,Us),s(Us,cp),s(Us,de),s(de,pp),s(Us,hp),s(p,kp),s(p,ue),ue.innerHTML=kd,s(p,yp),s(p,kt),s(kt,vp),s(p,dp),s(p,fe),fe.innerHTML=yd,s(p,up),s(p,Vs),s(Vs,fp),s(Vs,Gs),s(Gs,mp),s(Vs,xp),s(p,gp),s(p,Ws),s(Ws,wp),s(Ws,me),s(me,bp),s(Ws,Ep),s(p,_p),s(p,xe),xe.innerHTML=vd,s(p,Ip),s(p,R),s(R,Pp),s(R,ge),s(ge,Tp),s(R,Dp),s(R,we),s(we,Cp),s(R,Op),s(R,be),s(be,Sp),s(R,Ap),s(p,Mp),s(p,Ee),Ee.innerHTML=dd,s(p,Bp),s(p,J),s(J,Hp),s(J,_e),s(_e,Rp),s(J,Fp),s(J,Ie),s(Ie,Np),s(J,Lp),s(p,qp),s(p,Pe),Pe.innerHTML=ud,s(p,jp),s(p,yt),s(yt,Up),s(p,Vp),s(p,vt),s(vt,Gp),s(p,Wp),s(p,Ks),s(Ks,Kp),s(Ks,Te),s(Te,Yp),s(Ks,$p),s(p,Jp),s(p,De),De.innerHTML=fd,s(p,Xp),s(p,Ys),s(Ys,zp),s(Ys,Ce),s(Ce,Qp),s(Ys,Zp),s(p,sh),s(p,Oe),Oe.innerHTML=md,s(p,oh),s(p,dt),s(dt,$s),s($s,eh),s($s,Js),s(Js,ah),s($s,th),m(k,At,f),m(k,j,f),s(j,ut),s(ut,Xs),s(Xs,nh),s(j,rh),s(j,X),s(X,lh),s(X,Se),s(Se,ih),s(X,ch),s(X,Ae),s(Ae,ph),s(X,hh),s(j,kh),s(j,es),s(es,Me),s(Me,yh),s(es,vh),s(es,Be),s(Be,dh),s(es,uh),m(k,Mt,f),m(k,as,f),s(as,ft),s(ft,zs),s(zs,fh),s(as,mh),s(as,P),s(P,Qs),s(Qs,Zs),s(Zs,xh),s(Qs,gh),s(Qs,so),s(so,wh),s(P,bh),s(P,oo),s(oo,eo),s(eo,Eh),s(oo,_h),s(oo,ao),s(ao,Ih),s(P,Ph),s(P,mt),s(mt,ts),s(ts,He),s(He,Th),s(ts,Dh),s(P,Ch),s(P,to),s(to,no),s(no,Oh),s(to,Sh),s(to,ro),s(ro,Ah),s(P,Mh),s(P,xt),s(xt,lo),s(lo,Bh),s(P,Hh),s(P,Re),s(Re,Rh),s(Re,io),s(io,Fh)},p:Zd,d(k){k&&o(x),k&&o(L),k&&o(T),k&&o(Et),k&&o(z),k&&o(_t),k&&o(Q),k&&o(It),k&&o(Z),k&&o(Pt),k&&o(q),k&&o(Tt),k&&o(y),k&&o(Dt),k&&o(d),k&&o(Ct),k&&o(b),k&&o(Ot),k&&o(C),k&&o(St),k&&o(p),k&&o(At),k&&o(j),k&&o(Mt),k&&o(as)}}}function au(co){let x,N;const L=[co[0],Jv];let T={$$slots:{default:[eu]},$$scope:{ctx:co}};for(let g=0;g<L.length;g+=1)T=Uh(T,L[g]);return x=new su({props:T}),{c(){Wd(x.$$.fragment)},l(g){Kd(x.$$.fragment,g)},m(g,_){Yd(x,g,_),N=!0},p(g,[_]){const po=_&1?$d(L,[_&1&&Yv(g[0]),_&0&&Yv(Jv)]):{};_&2&&(po.$$scope={dirty:_,ctx:g}),x.$set(po)},i(g){N||(Jd(x.$$.fragment,g),N=!0)},o(g){Xd(x.$$.fragment,g),N=!1},d(g){zd(x,g)}}}const Jv={title:"Babel macros",date:"2019-10-08T08:00:00Z",series:"Intermediate Babel",tags:["JavaScript","babel","AST","transform"],description:"Custom JavaScript syntax is hard to maintain, custom babel transform plugin is no better. That's why we need Babel macros.",tableOfContents:[{link:"motivation",title:"Motivation",nested:[{link:"documentation-and-community-support",title:"Documentation and community support"},{link:"tooling",title:"Tooling"},{link:"maintainability",title:"Maintainability"},{link:"consistency-of-the-syntax",title:"Consistency of the syntax"}]},{link:"compile-time-vs-runtime",title:"Compile-time vs Runtime"},{link:"babel-macros",title:"Babel macros",nested:[{link:"so-what-is-babel-macros-again",title:"So what is Babel macros again?"}]},{link:"how-to-write-babel-macros",title:"How to write Babel macros",nested:[{link:"mock-macro",title:"mock.macro"}]},{link:"summary",title:"Summary"},{link:"further-reading",title:"Further Reading"}]};function tu(co,x,N){return Qd("blog",{image:ou}),co.$$set=L=>{N(0,x=Uh(Uh({},x),$v(L)))},x=$v(x),[x]}class pu extends Ud{constructor(x){super();Vd(this,x,tu,au,Gd,{})}}export{pu as default,Jv as metadata};
