import{S as zd,i as Qd,s as Zd,C as Wh,w as Zv,x as sd,y as od,z as su,A as Xv,q as ed,o as ad,B as td,r as ou,R as zv,k as i,e,t as n,m as c,c as a,a as t,h as r,d as o,b as l,g as m,F as s,O as eu}from"../../chunks/vendor-6bf294e3.js";import{B as au}from"../../chunks/BlogLayout-152f599b.js";import{T as tu}from"../../chunks/TableOfContent-1b9e4572.js";import"../../chunks/stores-e20b7872.js";import"../../chunks/WebMentions-745413ea.js";/* empty css                                */var nu="/_app/assets/hero-twitter-6030d4ff.jpg";function ru(ho){let x,M,D,ps,g,b,X,hs,ln,cn,ks,pn,ko,hn,kn,yn,Xe,vn,_t,z,ze,ys,dn,un,j,fn,yo,mn,xn,vo,gn,wn,It,Q,Qe,vs,bn,En,Ze,_n,Tt,Z,sa,ds,In,Tn,oa,Pn,Pt,L,ea,us,Dn,Cn,aa,On,Sn,fs,An,uo,Mn,Bn,Dt,y,ta,ms,Hn,Rn,na,Fn,Nn,B,Ln,xs,qn,jn,fo,Un,Vn,mo,Gn,Wn,$n,ra,la,Kn,Yn,xo,nd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">firstFriend</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.user </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">].friend</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// or with ternary</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">firstFriend</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> props</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.user</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">].friend</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`,Jn,ia,ca,Xn,zn,go,rd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">firstFriend</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">idx</span><span style="color: var(--shiki-color-text)">(props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> _ </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">_</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">].friend);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">idx</span><span style="color: var(--shiki-color-text)">(input</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> accessor) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">accessor</span><span style="color: var(--shiki-color-text)">(input);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> (e) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Qn,P,pa,Zn,sr,wo,or,er,bo,ar,tr,Eo,nr,rr,_o,lr,ir,cr,Io,pr,ha,hr,kr,H,yr,gs,To,vr,dr,ws,ur,fr,Po,mr,xr,gr,Do,ld=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> idx </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;idx&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getFriends</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">idx</span><span style="color: var(--shiki-color-text)">(props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> _ </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">_</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">].friends);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,wr,ka,br,Er,Co,id=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getFriends</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.user </span><span style="color: var(--shiki-token-keyword)">==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.user</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends </span><span style="color: var(--shiki-token-keyword)">==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">props</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">].friends;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,_r,ya,Ir,Tr,va,Pr,Dr,da,ua,Cr,Or,bs,Sr,fa,Ar,Mr,Br,ma,Hr,Rr,xa,ga,Fr,Nr,Es,Lr,Oo,qr,jr,Ur,_s,Vr,wa,Gr,Wr,$r,U,Kr,So,Yr,Jr,ba,Xr,zr,Qr,V,Zr,Ea,sl,ol,_a,el,al,tl,Ia,Ta,nl,rl,Pa,ll,il,w,cl,Ao,pl,hl,Mo,kl,yl,Bo,vl,dl,Da,ul,fl,Ho,ml,xl,Ro,gl,wl,Fo,bl,El,_l,G,Il,No,Tl,Pl,Ca,Dl,Cl,Ol,Sl,Al,Oa,Ml,Bl,Is,Hl,Ts,Rl,Fl,Ct,d,Sa,Ps,Nl,Ll,Aa,ql,jl,Ma,Ds,Ul,Lo,Vl,Gl,Wl,Ba,$l,Kl,qo,cd=`<div class="filename">babel.config.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  plugins</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&#39;babel-plugin-macros&#39;</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,Yl,Ha,Ra,Jl,Xl,jo,pd=`<div class="filename">src/utils/idx.macro.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">createMacro</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;babel-plugin-macros&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createMacro</span><span style="color: var(--shiki-color-text)">((&#123; state</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> references &#125;) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">references</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">default</span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">(referencePath </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">idx_transform</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">referencePath</span><span style="color: var(--shiki-color-text)">.parentPath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> state);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,zl,W,Ql,Uo,Zl,si,Vo,oi,ei,ai,Fa,Na,ti,ni,Go,hd=`<div class="filename">src/index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> idx </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./utils/idx.macro&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getFriends</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">idx</span><span style="color: var(--shiki-color-text)">(props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> _ </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">_</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">].friends);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ri,Cs,li,Wo,ii,ci,pi,$,hi,$o,ki,yi,Ko,vi,di,ui,La,fi,mi,Yo,kd=`<div class="filename">src/index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> idx </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./utils/idx.macro&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getFriends</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">idx</span><span style="color: var(--shiki-color-text)">(props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> _ </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">_</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">user</span><span style="color: var(--shiki-color-text)">.friends[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">].friends</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; strict</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)"> &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,xi,qa,gi,Ot,E,ja,Os,wi,bi,ss,Ua,Ei,_i,Ss,Jo,Ii,Ti,Pi,I,Di,Xo,Ci,Oi,zo,Si,Ai,Qo,Mi,Bi,Zo,Hi,Ri,se,Fi,Ni,Li,Va,qi,ji,Ga,Ui,Vi,Wa,Gi,St,C,$a,As,Wi,$i,os,Ms,Ki,Yi,Bs,Ji,Xi,zi,Ka,Qi,Zi,Hs,sc,Rs,oc,ec,At,p,Ya,Fs,ac,tc,Ja,Xa,nc,rc,za,lc,ic,oe,yd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fetchUser</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  userId</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Response</span><span style="color: var(--shiki-color-text)">&lt;&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  id</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  username</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  email</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  address</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;&gt; &#123;&#125;</span></span></code></pre>`,cc,Qa,pc,hc,ee,vd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fetchUser</span><span style="color: var(--shiki-color-text)">(userId</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Response</span><span style="color: var(--shiki-color-text)">&lt;&#123; </span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)"> &#125;&gt; &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    id</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    username</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;tanhauhau&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    email</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;tanhauhau@foo.bar&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    address</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;123 Bar Street, Foo&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,kc,Za,yc,vc,ae,dd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fetchUser</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  userId</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Response</span><span style="color: var(--shiki-color-text)">&lt;&#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  id</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  username</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  email</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  address</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  contact</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;&gt; &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    id</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    username</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;tanhauhau&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    email</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;tanhauhau@foo.bar&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    address</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;123 Bar Street, Foo&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    contact</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;0123456789&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,dc,R,uc,Ns,fc,mc,Ls,xc,gc,qs,wc,bc,Ec,st,_c,Ic,te,ud=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> &#123; MockResponse &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./mock.macro&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fetchUser</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  userId</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">MockResponse</span><span style="color: var(--shiki-color-text)">&lt;&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  id</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  username</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  email</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  address</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  contact</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;&gt; &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// TODO:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Tc,js,Pc,ne,Dc,Cc,Oc,ot,et,Sc,Ac,Us,Mc,re,Bc,Hc,Rc,Vs,Fc,le,Nc,Lc,qc,ie,fd=`<div class="filename">mock.macro.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">createMacro</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;babel-plugin-macros&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createMacro</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(&#123; references</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> state</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> babel &#125;) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// TODO:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,jc,ce,pe,Uc,Vc,Gc,at,tt,nt,Wc,$c,rt,Kc,Yc,lt,Jc,Xc,he,md='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> foo</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; bar &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./foobar.macro&#39;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>',zc,K,Qc,ke,Zc,sp,ye,op,ep,ap,ve,xd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&quot;default&quot;</span><span style="color: var(--shiki-color-text)">: []</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&quot;bar&quot;</span><span style="color: var(--shiki-color-text)">: []</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,tp,it,np,rp,de,gd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> foo </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./foobar.macro.js&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;a&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-comment)">// &lt;-- referenced &#96;foo&#96;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">bar</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> foo </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// &lt;-- referenced &#96;foo&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">baz</span><span style="color: var(--shiki-color-text)">(foo) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> foo </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// &lt;-- not referencing &#96;foo&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// &#96;references&#96;:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&quot;default&quot;</span><span style="color: var(--shiki-color-text)">: [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    Path</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// foo in foo(&#39;a&#39;)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    Path</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// foo in foo + 1</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ]</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,lp,ct,pt,ht,ip,cp,kt,pp,hp,Gs,kp,ue,yp,vp,dp,fe,wd=`<div class="filename">mock.macro.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createMacro</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(&#123; references</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> state</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> babel &#125;) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">references</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">MockResponse</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// TODO:</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,up,yt,fp,mp,me,bd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> faker </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;faker&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fetchUser</span><span style="color: var(--shiki-color-text)">(userId) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    id</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">faker</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">random</span><span style="color: var(--shiki-token-function)">.number</span><span style="color: var(--shiki-color-text)">()</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    username</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">faker</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">random</span><span style="color: var(--shiki-token-function)">.word</span><span style="color: var(--shiki-color-text)">()</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    email</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">faker</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">random</span><span style="color: var(--shiki-token-function)">.word</span><span style="color: var(--shiki-color-text)">()</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    address</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">faker</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">random</span><span style="color: var(--shiki-token-function)">.word</span><span style="color: var(--shiki-color-text)">()</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    contact</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">faker</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">random</span><span style="color: var(--shiki-token-function)">.word</span><span style="color: var(--shiki-color-text)">()</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,xp,Ws,gp,$s,wp,bp,Ep,Ks,_p,xe,Ip,Tp,Pp,ge,Ed=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createMacro</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(&#123; references</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> state</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> babel &#125;) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">references</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">MockResponse</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fakerIdentifier</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">state</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">file</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">scope</span><span style="color: var(--shiki-token-function)">.generateUidIdentifier</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#39;faker&#39;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">importStatement</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.template</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;import %%FAKER%% from &#39;faker&#39;&quot;</span><span style="color: var(--shiki-color-text)">)(&#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      FAKER</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> fakerIdentifier</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">state</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">file</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.unshiftContainer</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;body&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> importStatement);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,Dp,F,Cp,we,Op,Sp,be,Ap,Mp,Ee,Bp,Hp,Rp,_e,_d=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createMacro</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(&#123; references</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> state</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> babel &#125;) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">references</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">MockResponse</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ... inserting &#96;import faker from &#39;faker&#39;&#96;</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">references</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">MockResponse</span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">(reference </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">functionDeclaration</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">reference</span><span style="color: var(--shiki-token-function)">.getFunctionParent</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">typeDef</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">reference</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">parentPath</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;typeParameters.params.0&#39;</span><span style="color: var(--shiki-color-text)">).node;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      functionDeclaration</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;body&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">.unshiftContainer</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-string-expression)">&#39;body&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.returnStatement</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-function)">generateFakerCode</span><span style="color: var(--shiki-color-text)">(fakerIdentifier</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> typeDef)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          )</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        );</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,Fp,Y,Np,Ie,Lp,qp,Te,jp,Up,Vp,Pe,Id=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">generateFakerCode</span><span style="color: var(--shiki-color-text)">(fakerIdentifier</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> typeDef) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">switch</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">typeDef</span><span style="color: var(--shiki-color-text)">.type) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;ObjectTypeAnnotation&#39;</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.objectExpression</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">typeDef</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">properties</span><span style="color: var(--shiki-token-function)">.map</span><span style="color: var(--shiki-color-text)">(property </span><span style="color: var(--shiki-token-keyword)">=&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.objectProperty</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-function)">.identifier</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">property</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">key</span><span style="color: var(--shiki-color-text)">.name)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-function)">generateFakerCode</span><span style="color: var(--shiki-color-text)">(fakerIdentifier</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">property</span><span style="color: var(--shiki-color-text)">.value)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          )</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        )</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      );</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;NumberTypeAnnotation&#39;</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.expression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;%%FAKER%%.random.number()&#39;</span><span style="color: var(--shiki-color-text)">)(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        FAKER</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> fakerIdentifier</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;StringTypeAnnotation&#39;</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.expression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;%%FAKER%%.random.word()&#39;</span><span style="color: var(--shiki-color-text)">)(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        FAKER</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> fakerIdentifier</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;BooleanTypeAnnotation&#39;</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.expression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;%%FAKER%%.random.boolean()&#39;</span><span style="color: var(--shiki-color-text)">)(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        FAKER</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> fakerIdentifier</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">MacroError</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Unknown type definition: </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">typeDef</span><span style="color: var(--shiki-color-text)">.type</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Gp,vt,Wp,$p,dt,Kp,Yp,Ys,Jp,De,Xp,zp,Qp,Ce,Td='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fetchUser</span><span style="color: var(--shiki-color-text)">(...)</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">MockResponse</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-comment)">/*...*/</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">&gt; &#123;&#125;</span></span></code></pre>',Zp,Js,sh,Oe,oh,eh,ah,Se,Pd=`<div class="filename">mock.macro.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">createMacro</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;babel-plugin-macros&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createMacro</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(&#123; references</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> state</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> babel</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> config &#125;) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">references</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">MockResponse</span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">(reference </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">functionDeclaration</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">reference</span><span style="color: var(--shiki-token-function)">.getFunctionParent</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">typeDef</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">reference</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">parentPath</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;typeParameters.params.0&#39;</span><span style="color: var(--shiki-color-text)">).node;</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// if the 2nd argument present and it is &#39;false&#39;, disable mocking</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">secondParam</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">reference</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">parentPath</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;typeParameters.params.1&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (secondParam </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">secondParam</span><span style="color: var(--shiki-token-function)">.isBooleanLiteralTypeAnnotation</span><span style="color: var(--shiki-color-text)">(&#123; value</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)"> &#125;)) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// ...insert return statement</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,th,ut,Xs,nh,zs,rh,lh,Mt,q,ft,Qs,ih,ch,J,ph,Ae,hh,kh,Me,yh,vh,dh,es,Be,uh,fh,He,mh,xh,Bt,as,mt,Zs,gh,wh,T,so,oo,bh,Eh,eo,_h,Ih,ao,to,Th,Ph,no,Dh,Ch,xt,ts,Re,Oh,Sh,Ah,ro,lo,Mh,Bh,io,Hh,Rh,gt,co,Fh,Nh,Fe,Lh,po,qh,Ht;return x=new tu({props:{data:[{link:"motivation",title:"Motivation",nested:[{link:"documentation-and-community-support",title:"Documentation and community support"},{link:"tooling",title:"Tooling"},{link:"maintainability",title:"Maintainability"},{link:"consistency-of-the-syntax",title:"Consistency of the syntax"}]},{link:"compile-time-vs-runtime",title:"Compile-time vs Runtime"},{link:"babel-macros",title:"Babel macros",nested:[{link:"so-what-is-babel-macros-again",title:"So what is Babel macros again?"}]},{link:"how-to-write-babel-macros",title:"How to write Babel macros",nested:[{link:"mock-macro",title:"mock.macro"}]},{link:"summary",title:"Summary"},{link:"further-reading",title:"Further Reading"}]}}),{c(){Zv(x.$$.fragment),M=i(),D=e("p"),ps=n("In this article, I am going to talk about Babel macros."),g=i(),b=e("section"),X=e("h2"),hs=e("a"),ln=n("Motivation"),cn=i(),ks=e("p"),pn=n("In my previous post, "),ko=e("a"),hn=n('"Creating custom JavaScript syntax with Babel"'),kn=n(", I've shown you detailed steps on how you can create a custom syntax and write transform plugin or polyfills so that the syntax can be run in browsers today."),yn=i(),Xe=e("p"),vn=n("However, it is purely educational, and I am not recommending you to create your custom JavaScript syntax for production projects for several reasons:"),_t=i(),z=e("section"),ze=e("h3"),ys=e("a"),dn=n("Documentation and community support"),un=i(),j=e("p"),fn=n("If anything goes wrong, the great JavaScript community out there has no idea what is the "),yo=e("code"),mn=n("@@"),xn=n(" ("),vo=e("a"),gn=n("the curry function syntax we created previously"),wn=n(") means. Meaning the support that a new developer to the team can get is only as good as your documentation."),It=i(),Q=e("section"),Qe=e("h3"),vs=e("a"),bn=n("Tooling"),En=i(),Ze=e("p"),_n=n("You need to make all the tooling you use to work. I mean eslint, prettier, Flowtype/TypeScript, your editor..."),Tt=i(),Z=e("section"),sa=e("h3"),ds=e("a"),In=n("Maintainability"),Tn=i(),oa=e("p"),Pn=n(`If the forked version has a bug, do you have enough support to fix it?
If the babel upstream fixed a bug or added a feature, how often do you merge the upstream into your fork?`),Pt=i(),L=e("section"),ea=e("h3"),us=e("a"),Dn=n("Consistency of the syntax"),Cn=i(),aa=e("p"),On=n("This is the hardest part of creating a new syntax. An added syntax is an added mental concept for the language users, so the new mental model should be transferable to every scenario of the language."),Sn=i(),fs=e("p"),An=n("Take our "),uo=e("code"),Mn=n("@@"),Bn=n(" syntax, for example, if it works for a normal function declaration, it's expected to work for anonymous functions, arrow functions, class methods. Have you thought about how it would work with generator functions and async functions? If a curried function returns another function, does that make the returned function curried as well?"),Dt=i(),y=e("section"),ta=e("h2"),ms=e("a"),Hn=n("Compile-time vs Runtime"),Rn=i(),na=e("p"),Fn=n("I think you get my point. But the idea of having a magical syntax that keeps the code elegant and short is enticing."),Nn=i(),B=e("p"),Ln=n("Take "),xs=e("a"),qn=n("optional chaining"),jn=n(" for example, before having the optional chaining operator "),fo=e("code"),Un=n("?."),Vn=n(", we had a few ways to write "),mo=e("code"),Gn=n("props?.user?.friends?.[0]?.friend"),Wn=n(", which is:"),$n=i(),ra=e("p"),la=e("strong"),Kn=n("a mundane to write, not easy to read (less intentional), but most efficient possible:"),Yn=i(),xo=e("div"),Jn=i(),ia=e("p"),ca=e("strong"),Xn=n("easy to write, easy to read, but with slightly more runtime overhead:"),zn=i(),go=e("div"),Qn=i(),P=e("blockquote"),pa=e("b"),Zn=n("Note:"),sr=n(" I've tried to search online whether a `try-catch` is more expensive, however the "),wo=e("a"),or=n("search result"),er=i(),bo=e("a"),ar=n("is not"),tr=i(),Eo=e("a"),nr=n("conclusive"),rr=n(". "),_o=e("a"),lr=n("Let me know"),ir=n(" if you have a conclusive research on this."),cr=i(),Io=e("p"),pr=n("Is there a third option that is "),ha=e("strong"),hr=n("easy to read and write, yet without the try-catch runtime overhead?"),kr=i(),H=e("p"),yr=n("Well, if you look at the "),gs=e("a"),To=e("code"),vr=n("facebookincubator/idx"),dr=n(" library, it uses a "),ws=e("a"),ur=n("Babel plugin"),fr=n(" to search through require or imports of "),Po=e("code"),mr=n("idx"),xr=n(" and replaces all its usages, for example when you write:"),gr=i(),Do=e("div"),wr=i(),ka=e("p"),br=n("it gets transformed into:"),Er=i(),Co=e("div"),_r=i(),ya=e("p"),Ir=n("So your code is easy to read, and no runtime overhead. You get the best of both worlds!"),Tr=i(),va=e("p"),Pr=n("Though nothing is perfect. Here, I wanted to point out some of my personal opinions about this approach:"),Dr=i(),da=e("blockquote"),ua=e("p"),Cr=n("While maintaining a good developer experience (DX), we've shifted the runtime overhead to compile time."),Or=i(),bs=e("p"),Sr=n("You can keep the way you wanted to write the code while having the compiler to transform the code to something you are "),fa=e("em"),Ar=n('"supposed"'),Mr=n(" to write."),Br=i(),ma=e("p"),Hr=n("A win-win solution."),Rr=i(),xa=e("p"),ga=e("strong"),Fr=n("How do we apply this technique to other similar situations?"),Nr=i(),Es=e("p"),Lr=n("First, you need to "),Oo=e("a"),qr=n("write a Babel plugin"),jr=n("."),Ur=i(),_s=e("p"),Vr=n("Secondly, you need a "),wa=e("strong"),Gr=n("marker"),Wr=n(" to target the transformation."),$r=i(),U=e("p"),Kr=n("In this example, the default import from the "),So=e("code"),Yr=n('"idx"'),Jr=n(" module is the "),ba=e("strong"),Xr=n("marker"),zr=n(", all the usage of the default import would be transformed by the Babel plugin."),Qr=i(),V=e("p"),Zr=n("Thirdly, you need to update your babel configuration. For every new plugin, "),Ea=e("strong"),sl=n("you need to add them in"),ol=n("; "),_a=e("strong"),el=n("you need to make sure the order of plugin is correct"),al=n("."),tl=i(),Ia=e("p"),Ta=e("strong"),nl=n("What if there's a bug in the Babel plugin?"),rl=i(),Pa=e("p"),ll=n("This would be the most confusing part for the new developers on the codebase."),il=i(),w=e("p"),cl=n("In this example, if the "),Ao=e("code"),pl=n("idx"),hl=n(" function has a bug, it is natural for developers to dig into the source code of "),Mo=e("code"),kl=n("idx"),yl=n(". However, "),Bo=e("code"),vl=n('"idx"'),dl=n(" is nothing but a "),Da=e("strong"),ul=n("marker"),fl=n(" for the "),Ho=e("code"),ml=n("babel-plugin-idx"),xl=n(" to transform away. So if there's any bug, it should be inside "),Ro=e("code"),gl=n("babel-plugin-idx"),wl=n(" instead of "),Fo=e("code"),bl=n("idx"),El=n("."),_l=i(),G=e("p"),Il=n("Besides, the bug may be due to the configuration of the Babel plugin instead of the code logic itself. However if you change the configuration, it could affect all the usages of the "),No=e("code"),Tl=n("idx"),Pl=n(" function, because "),Ca=e("strong"),Dl=n("babel configuration is global"),Cl=n("."),Ol=i(),Sl=e("hr"),Al=i(),Oa=e("p"),Ml=n("To summarise, I think that this solution is a win-win for DX vs User Experience (UX), however, if we can make the transform plugin more accessible to all developers, eg: without having to update babel configuration for every new transform plugin, easier to debug, and a localized configuration."),Bl=i(),Is=e("p"),Hl=n("Well, you are looking at "),Ts=e("a"),Rl=n("babel macros"),Fl=n(". \u{1F440}"),Ct=i(),d=e("section"),Sa=e("h2"),Ps=e("a"),Nl=n("Babel macros"),Ll=i(),Aa=e("p"),ql=n("So, here's how it would look like with babel macro:"),jl=i(),Ma=e("p"),Ds=e("strong"),Ul=n("You add "),Lo=e("code"),Vl=n("babel-plugin-macro"),Gl=n(" to babel config"),Wl=i(),Ba=e("p"),$l=n("And that's all the change you need for babel configuration."),Kl=i(),qo=e("div"),Yl=i(),Ha=e("p"),Ra=e("strong"),Jl=n("You write your own macro"),Xl=i(),jo=e("div"),zl=i(),W=e("p"),Ql=n("We'll talk about the code later, one thing to take away here is that your filename has to end with "),Uo=e("code"),Zl=n(".macro"),si=n(" or "),Vo=e("code"),oi=n(".macro.js"),ei=n("."),ai=i(),Fa=e("p"),Na=e("strong"),ti=n("Use it"),ni=i(),Go=e("div"),ri=i(),Cs=e("p"),li=n("As you can see here, if there's something wrong about "),Wo=e("code"),ii=n("idx"),ci=n(", the user would know which file exactly to look at."),pi=i(),$=e("p"),hi=n("You don't get the disconnection between the module "),$o=e("code"),ki=n("idx"),yi=n(" and the plugin "),Ko=e("code"),vi=n("babel-plugin-idx"),di=n("."),ui=i(),La=e("p"),fi=n("Besides, if you want to modify configuration, say for this usage, you can do it easily:"),mi=i(),Yo=e("div"),xi=i(),qa=e("p"),gi=n("Simple and explicit. Isn't that great?"),Ot=i(),E=e("section"),ja=e("h3"),Os=e("a"),wi=n("So what is Babel macros again?"),bi=i(),ss=e("p"),Ua=e("strong"),Ei=n("Babel macros"),_i=n(" is a concept from the "),Ss=e("a"),Jo=e("code"),Ii=n("babel-plugin-macros"),Ti=n(", which defines the standard interface between compile-time code transformation and your runtime code."),Pi=i(),I=e("p"),Di=n("In compile-time, "),Xo=e("code"),Ci=n("babel-plugin-macros"),Oi=n(" will look for all "),zo=e("code"),Si=n("import"),Ai=n(" or "),Qo=e("code"),Mi=n("require"),Bi=n(" from modules ends with "),Zo=e("code"),Hi=n(".macro"),Ri=n(", finds all references of the imported variables, and passes them to the "),se=e("code"),Fi=n(".macro"),Ni=n(" file to transform them."),Li=i(),Va=e("p"),qi=n("The imported variables are not restricted to be a function, it can be a variable, a type from type system (Flow / TypeScript)."),ji=i(),Ga=e("p"),Ui=n("If it is a default export, you can name it any way you like, if it is a named export, you can reassign to another variable name too."),Vi=i(),Wa=e("p"),Gi=n("Cool, so how can I write my Babel macros?"),St=i(),C=e("section"),$a=e("h2"),As=e("a"),Wi=n("How to write Babel macros"),$i=i(),os=e("p"),Ms=e("a"),Ki=n("Kent C Dodds"),Yi=n(" has written "),Bs=e("a"),Ji=n("a fantastic guide for macro authors"),Xi=n("."),zi=i(),Ka=e("p"),Qi=n("Please go read it."),Zi=i(),Hs=e("p"),sc=n("If you insist to stay, I am going to show you how I wrote my Babel macros, in particular, the "),Rs=e("a"),oc=n("mock.macro"),ec=n(". And hopefully, along the way, you learned how to write your Babel macros as well."),At=i(),p=e("section"),Ya=e("h3"),Fs=e("a"),ac=n("mock.macro"),tc=i(),Ja=e("p"),Xa=e("strong"),nc=n("Motivation"),rc=i(),za=e("p"),lc=n("Usually, when working with a backend developer on a frontend application, I would use static type to define the API schema. For example, a user api would look like this:"),ic=i(),oe=e("div"),cc=i(),Qa=e("p"),pc=n("However while waiting for the backend developer to develop the API, I would have to use mock data for development:"),hc=i(),ee=e("div"),kc=i(),Za=e("p"),yc=n("And along the way, due to unforeseen circumstances and lack of foresight, the response schema of the API was changed multiple times:"),vc=i(),ae=e("div"),dc=i(),R=e("p"),uc=n("Here you see I need to update both the type definition as well as the mock data. This reminds me of "),Ns=e("a"),fc=n("the double declaration problem"),mc=n(" coined by "),Ls=e("a"),xc=n("@swyx"),gc=i(),qs=e("a"),wc=n("in his talk"),bc=n(". Which means that this could potentially be solved with Babel macros."),Ec=i(),st=e("p"),_c=n("So in my head, I imagined with Babel macros, I could write:"),Ic=i(),te=e("div"),Tc=i(),js=e("p"),Pc=n("and when I call the function "),ne=e("code"),Dc=n("fetchUser"),Cc=n(", I would get my mock response in return."),Oc=i(),ot=e("p"),et=e("strong"),Sc=n("Implementing mock.macro"),Ac=i(),Us=e("p"),Mc=n("Implementing mock.macro requires some basic knowledge about Abstract Syntax Tree (AST) and writing babel transformation, you can check out "),re=e("a"),Bc=n("the step-by-step guide I've written previously"),Hc=n("."),Rc=i(),Vs=e("p"),Fc=n("Implementing Babel macros is quite easy, the api from the "),le=e("code"),Nc=n("babel-plugin-macros"),Lc=n(" is pretty straightforward, all you need is to provide a default export to your macro file:"),qc=i(),ie=e("div"),jc=i(),ce=e("p"),pe=e("code"),Uc=n("createMacro"),Vc=n(" takes in a callback function, which is executed when someone imports this macro file. It provides:"),Gc=i(),at=e("ul"),tt=e("li"),nt=e("strong"),Wc=n("references"),$c=i(),rt=e("p"),Kc=n("All the reference that was imported from the macro file."),Yc=i(),lt=e("p"),Jc=n("For example:"),Xc=i(),he=e("div"),zc=i(),K=e("p"),Qc=n("will give you an object, with the import name as the "),ke=e("code"),Zc=n("key"),sp=n(", and array of paths as the "),ye=e("code"),op=n("value"),ep=n(":"),ap=i(),ve=e("div"),tp=i(),it=e("p"),np=n("Inside the array, you can get all paths where the imported names are referenced. For example:"),rp=i(),de=e("div"),lp=i(),ct=e("ul"),pt=e("li"),ht=e("strong"),ip=n("state"),cp=i(),kt=e("p"),pp=n("It gives you the current state of the file being traversed."),hp=i(),Gs=e("p"),kp=n("So, in this example, I need to transform all the references of "),ue=e("code"),yp=n("MockResponse"),vp=n(":"),dp=i(),fe=e("div"),up=i(),yt=e("p"),fp=n("Next, I need to figure out how the transformed code would look like:"),mp=i(),me=e("div"),xp=i(),Ws=e("p"),gp=n("I decided to use "),$s=e("a"),wp=n("faker.js"),bp=n(" as the random data generator."),Ep=i(),Ks=e("p"),_p=n("So I have to import "),xe=e("code"),Ip=n("faker"),Tp=n(" at the top of the file:"),Pp=i(),ge=e("div"),Dp=i(),F=e("p"),Cp=n("Next, for each references of "),we=e("code"),Op=n("MockRespone"),Sp=n(", I need to find the "),be=e("code"),Ap=n("FunctionDeclaration"),Mp=n(" that it belongs to, and insert a "),Ee=e("code"),Bp=n("ReturnStatement"),Hp=n(" into the top of the function body:"),Rp=i(),_e=e("div"),Fp=i(),Y=e("p"),Np=n("In the "),Ie=e("code"),Lp=n("generateFakerCode"),qp=n(", I'll generate a AST node based on the node type of the "),Te=e("code"),jp=n("typeDef"),Up=n(":"),Vp=i(),Pe=e("div"),Gp=i(),vt=e("p"),Wp=n("That's it! A generated mock function via type definition using Babel macros."),$p=i(),dt=e("p"),Kp=n("One last thing, what happens when the API is ready, and you want to disable the mocking behavior?"),Yp=i(),Ys=e("p"),Jp=n("We can read the 2nd parameter of the "),De=e("code"),Xp=n("MockResponse"),zp=n(":"),Qp=i(),Ce=e("div"),Zp=i(),Js=e("p"),sh=n("If the 2nd parameter is "),Oe=e("code"),oh=n("false"),eh=n(", we disable the mocking behavior:"),ah=i(),Se=e("div"),th=i(),ut=e("blockquote"),Xs=e("p"),nh=n("You can find the full code from "),zs=e("a"),rh=n("Github"),lh=n("."),Mt=i(),q=e("section"),ft=e("h2"),Qs=e("a"),ih=n("Summary"),ch=i(),J=e("p"),ph=n("Sometimes, it is more efficient to move runtime abstraction and complexity to compile time. However, developing and maintaining a babel plugin for each of them may be difficult to maintain and debug, as there's a gap between the code written and build time plugin, eg: "),Ae=e("code"),hh=n("idx"),kh=n(" and "),Me=e("code"),yh=n("babel-plugin-idx"),vh=n("."),dh=i(),es=e("p"),Be=e("code"),uh=n("babel-plugin-macros"),fh=n(" solves this by allow users to import "),He=e("code"),mh=n(".macro"),xh=n(" files directly into the codebase. The explicit import bridges the gap between build-time and runtime and allows the user to develop and debug their macro easily."),Bt=i(),as=e("section"),mt=e("h2"),Zs=e("a"),gh=n("Further Reading"),wh=i(),T=e("ul"),so=e("li"),oo=e("a"),bh=n("babel-plugin-macros"),Eh=n(" by "),eo=e("a"),_h=n("Kent C. Dodds"),Ih=i(),ao=e("li"),to=e("a"),Th=n("I Can Babel Macros (and So Can You!)"),Ph=n(" by "),no=e("a"),Dh=n("Shawn Wang"),Ch=i(),xt=e("li"),ts=e("a"),Re=e("code"),Oh=n("babel-plugin-macros"),Sh=n(" Usage for macros authors"),Ah=i(),ro=e("li"),lo=e("a"),Mh=n("Zero-config code transformation with babel-plugin-macros"),Bh=n(" by "),io=e("a"),Hh=n("Kent C. Dodds"),Rh=i(),gt=e("li"),co=e("a"),Fh=n("Awesome list for Babel macros"),Nh=i(),Fe=e("li"),Lh=n("The idea of converting type definition to mock generator comes from "),po=e("a"),qh=n("Manta Style, the futuristic API Mock Server for Frontend"),this.h()},l(k){sd(x.$$.fragment,k),M=c(k),D=a(k,"P",{});var u=t(D);ps=r(u,"In this article, I am going to talk about Babel macros."),u.forEach(o),g=c(k),b=a(k,"SECTION",{});var Ne=t(b);X=a(Ne,"H2",{});var $h=t(X);hs=a($h,"A",{href:!0,id:!0});var Kh=t(hs);ln=r(Kh,"Motivation"),Kh.forEach(o),$h.forEach(o),cn=c(Ne),ks=a(Ne,"P",{});var Rt=t(ks);pn=r(Rt,"In my previous post, "),ko=a(Rt,"A",{href:!0});var Yh=t(ko);hn=r(Yh,'"Creating custom JavaScript syntax with Babel"'),Yh.forEach(o),kn=r(Rt,", I've shown you detailed steps on how you can create a custom syntax and write transform plugin or polyfills so that the syntax can be run in browsers today."),Rt.forEach(o),yn=c(Ne),Xe=a(Ne,"P",{});var Jh=t(Xe);vn=r(Jh,"However, it is purely educational, and I am not recommending you to create your custom JavaScript syntax for production projects for several reasons:"),Jh.forEach(o),Ne.forEach(o),_t=c(k),z=a(k,"SECTION",{});var Ft=t(z);ze=a(Ft,"H3",{});var Xh=t(ze);ys=a(Xh,"A",{href:!0,id:!0});var zh=t(ys);dn=r(zh,"Documentation and community support"),zh.forEach(o),Xh.forEach(o),un=c(Ft),j=a(Ft,"P",{});var Le=t(j);fn=r(Le,"If anything goes wrong, the great JavaScript community out there has no idea what is the "),yo=a(Le,"CODE",{class:!0});var Qh=t(yo);mn=r(Qh,"@@"),Qh.forEach(o),xn=r(Le," ("),vo=a(Le,"A",{href:!0});var Zh=t(vo);gn=r(Zh,"the curry function syntax we created previously"),Zh.forEach(o),wn=r(Le,") means. Meaning the support that a new developer to the team can get is only as good as your documentation."),Le.forEach(o),Ft.forEach(o),It=c(k),Q=a(k,"SECTION",{});var Nt=t(Q);Qe=a(Nt,"H3",{});var sk=t(Qe);vs=a(sk,"A",{href:!0,id:!0});var ok=t(vs);bn=r(ok,"Tooling"),ok.forEach(o),sk.forEach(o),En=c(Nt),Ze=a(Nt,"P",{});var ek=t(Ze);_n=r(ek,"You need to make all the tooling you use to work. I mean eslint, prettier, Flowtype/TypeScript, your editor..."),ek.forEach(o),Nt.forEach(o),Tt=c(k),Z=a(k,"SECTION",{});var Lt=t(Z);sa=a(Lt,"H3",{});var ak=t(sa);ds=a(ak,"A",{href:!0,id:!0});var tk=t(ds);In=r(tk,"Maintainability"),tk.forEach(o),ak.forEach(o),Tn=c(Lt),oa=a(Lt,"P",{});var nk=t(oa);Pn=r(nk,`If the forked version has a bug, do you have enough support to fix it?
If the babel upstream fixed a bug or added a feature, how often do you merge the upstream into your fork?`),nk.forEach(o),Lt.forEach(o),Pt=c(k),L=a(k,"SECTION",{});var qe=t(L);ea=a(qe,"H3",{});var rk=t(ea);us=a(rk,"A",{href:!0,id:!0});var lk=t(us);Dn=r(lk,"Consistency of the syntax"),lk.forEach(o),rk.forEach(o),Cn=c(qe),aa=a(qe,"P",{});var ik=t(aa);On=r(ik,"This is the hardest part of creating a new syntax. An added syntax is an added mental concept for the language users, so the new mental model should be transferable to every scenario of the language."),ik.forEach(o),Sn=c(qe),fs=a(qe,"P",{});var qt=t(fs);An=r(qt,"Take our "),uo=a(qt,"CODE",{class:!0});var ck=t(uo);Mn=r(ck,"@@"),ck.forEach(o),Bn=r(qt," syntax, for example, if it works for a normal function declaration, it's expected to work for anonymous functions, arrow functions, class methods. Have you thought about how it would work with generator functions and async functions? If a curried function returns another function, does that make the returned function curried as well?"),qt.forEach(o),qe.forEach(o),Dt=c(k),y=a(k,"SECTION",{});var v=t(y);ta=a(v,"H2",{});var pk=t(ta);ms=a(pk,"A",{href:!0,id:!0});var hk=t(ms);Hn=r(hk,"Compile-time vs Runtime"),hk.forEach(o),pk.forEach(o),Rn=c(v),na=a(v,"P",{});var kk=t(na);Fn=r(kk,"I think you get my point. But the idea of having a magical syntax that keeps the code elegant and short is enticing."),kk.forEach(o),Nn=c(v),B=a(v,"P",{});var ns=t(B);Ln=r(ns,"Take "),xs=a(ns,"A",{href:!0,rel:!0});var yk=t(xs);qn=r(yk,"optional chaining"),yk.forEach(o),jn=r(ns," for example, before having the optional chaining operator "),fo=a(ns,"CODE",{class:!0});var vk=t(fo);Un=r(vk,"?."),vk.forEach(o),Vn=r(ns,", we had a few ways to write "),mo=a(ns,"CODE",{class:!0});var dk=t(mo);Gn=r(dk,"props?.user?.friends?.[0]?.friend"),dk.forEach(o),Wn=r(ns,", which is:"),ns.forEach(o),$n=c(v),ra=a(v,"P",{});var uk=t(ra);la=a(uk,"STRONG",{});var fk=t(la);Kn=r(fk,"a mundane to write, not easy to read (less intentional), but most efficient possible:"),fk.forEach(o),uk.forEach(o),Yn=c(v),xo=a(v,"DIV",{class:!0});var Dd=t(xo);Dd.forEach(o),Jn=c(v),ia=a(v,"P",{});var mk=t(ia);ca=a(mk,"STRONG",{});var xk=t(ca);Xn=r(xk,"easy to write, easy to read, but with slightly more runtime overhead:"),xk.forEach(o),mk.forEach(o),zn=c(v),go=a(v,"DIV",{class:!0});var Cd=t(go);Cd.forEach(o),Qn=c(v),P=a(v,"BLOCKQUOTE",{});var N=t(P);pa=a(N,"B",{});var gk=t(pa);Zn=r(gk,"Note:"),gk.forEach(o),sr=r(N," I've tried to search online whether a `try-catch` is more expensive, however the "),wo=a(N,"A",{href:!0});var wk=t(wo);or=r(wk,"search result"),wk.forEach(o),er=c(N),bo=a(N,"A",{href:!0});var bk=t(bo);ar=r(bk,"is not"),bk.forEach(o),tr=c(N),Eo=a(N,"A",{href:!0});var Ek=t(Eo);nr=r(Ek,"conclusive"),Ek.forEach(o),rr=r(N,". "),_o=a(N,"A",{href:!0});var _k=t(_o);lr=r(_k,"Let me know"),_k.forEach(o),ir=r(N," if you have a conclusive research on this."),N.forEach(o),cr=c(v),Io=a(v,"P",{});var jh=t(Io);pr=r(jh,"Is there a third option that is "),ha=a(jh,"STRONG",{});var Ik=t(ha);hr=r(Ik,"easy to read and write, yet without the try-catch runtime overhead?"),Ik.forEach(o),jh.forEach(o),kr=c(v),H=a(v,"P",{});var rs=t(H);yr=r(rs,"Well, if you look at the "),gs=a(rs,"A",{href:!0,rel:!0});var Tk=t(gs);To=a(Tk,"CODE",{class:!0});var Pk=t(To);vr=r(Pk,"facebookincubator/idx"),Pk.forEach(o),Tk.forEach(o),dr=r(rs," library, it uses a "),ws=a(rs,"A",{href:!0,rel:!0});var Dk=t(ws);ur=r(Dk,"Babel plugin"),Dk.forEach(o),fr=r(rs," to search through require or imports of "),Po=a(rs,"CODE",{class:!0});var Ck=t(Po);mr=r(Ck,"idx"),Ck.forEach(o),xr=r(rs," and replaces all its usages, for example when you write:"),rs.forEach(o),gr=c(v),Do=a(v,"DIV",{class:!0});var Od=t(Do);Od.forEach(o),wr=c(v),ka=a(v,"P",{});var Ok=t(ka);br=r(Ok,"it gets transformed into:"),Ok.forEach(o),Er=c(v),Co=a(v,"DIV",{class:!0});var Sd=t(Co);Sd.forEach(o),_r=c(v),ya=a(v,"P",{});var Sk=t(ya);Ir=r(Sk,"So your code is easy to read, and no runtime overhead. You get the best of both worlds!"),Sk.forEach(o),Tr=c(v),va=a(v,"P",{});var Ak=t(va);Pr=r(Ak,"Though nothing is perfect. Here, I wanted to point out some of my personal opinions about this approach:"),Ak.forEach(o),Dr=c(v),da=a(v,"BLOCKQUOTE",{});var Mk=t(da);ua=a(Mk,"P",{});var Bk=t(ua);Cr=r(Bk,"While maintaining a good developer experience (DX), we've shifted the runtime overhead to compile time."),Bk.forEach(o),Mk.forEach(o),Or=c(v),bs=a(v,"P",{});var jt=t(bs);Sr=r(jt,"You can keep the way you wanted to write the code while having the compiler to transform the code to something you are "),fa=a(jt,"EM",{});var Hk=t(fa);Ar=r(Hk,'"supposed"'),Hk.forEach(o),Mr=r(jt," to write."),jt.forEach(o),Br=c(v),ma=a(v,"P",{});var Rk=t(ma);Hr=r(Rk,"A win-win solution."),Rk.forEach(o),Rr=c(v),xa=a(v,"P",{});var Fk=t(xa);ga=a(Fk,"STRONG",{});var Nk=t(ga);Fr=r(Nk,"How do we apply this technique to other similar situations?"),Nk.forEach(o),Fk.forEach(o),Nr=c(v),Es=a(v,"P",{});var Ut=t(Es);Lr=r(Ut,"First, you need to "),Oo=a(Ut,"A",{href:!0});var Lk=t(Oo);qr=r(Lk,"write a Babel plugin"),Lk.forEach(o),jr=r(Ut,"."),Ut.forEach(o),Ur=c(v),_s=a(v,"P",{});var Vt=t(_s);Vr=r(Vt,"Secondly, you need a "),wa=a(Vt,"STRONG",{});var qk=t(wa);Gr=r(qk,"marker"),qk.forEach(o),Wr=r(Vt," to target the transformation."),Vt.forEach(o),$r=c(v),U=a(v,"P",{});var je=t(U);Kr=r(je,"In this example, the default import from the "),So=a(je,"CODE",{class:!0});var jk=t(So);Yr=r(jk,'"idx"'),jk.forEach(o),Jr=r(je," module is the "),ba=a(je,"STRONG",{});var Uk=t(ba);Xr=r(Uk,"marker"),Uk.forEach(o),zr=r(je,", all the usage of the default import would be transformed by the Babel plugin."),je.forEach(o),Qr=c(v),V=a(v,"P",{});var Ue=t(V);Zr=r(Ue,"Thirdly, you need to update your babel configuration. For every new plugin, "),Ea=a(Ue,"STRONG",{});var Vk=t(Ea);sl=r(Vk,"you need to add them in"),Vk.forEach(o),ol=r(Ue,"; "),_a=a(Ue,"STRONG",{});var Gk=t(_a);el=r(Gk,"you need to make sure the order of plugin is correct"),Gk.forEach(o),al=r(Ue,"."),Ue.forEach(o),tl=c(v),Ia=a(v,"P",{});var Wk=t(Ia);Ta=a(Wk,"STRONG",{});var $k=t(Ta);nl=r($k,"What if there's a bug in the Babel plugin?"),$k.forEach(o),Wk.forEach(o),rl=c(v),Pa=a(v,"P",{});var Kk=t(Pa);ll=r(Kk,"This would be the most confusing part for the new developers on the codebase."),Kk.forEach(o),il=c(v),w=a(v,"P",{});var _=t(w);cl=r(_,"In this example, if the "),Ao=a(_,"CODE",{class:!0});var Yk=t(Ao);pl=r(Yk,"idx"),Yk.forEach(o),hl=r(_," function has a bug, it is natural for developers to dig into the source code of "),Mo=a(_,"CODE",{class:!0});var Jk=t(Mo);kl=r(Jk,"idx"),Jk.forEach(o),yl=r(_,". However, "),Bo=a(_,"CODE",{class:!0});var Xk=t(Bo);vl=r(Xk,'"idx"'),Xk.forEach(o),dl=r(_," is nothing but a "),Da=a(_,"STRONG",{});var zk=t(Da);ul=r(zk,"marker"),zk.forEach(o),fl=r(_," for the "),Ho=a(_,"CODE",{class:!0});var Qk=t(Ho);ml=r(Qk,"babel-plugin-idx"),Qk.forEach(o),xl=r(_," to transform away. So if there's any bug, it should be inside "),Ro=a(_,"CODE",{class:!0});var Zk=t(Ro);gl=r(Zk,"babel-plugin-idx"),Zk.forEach(o),wl=r(_," instead of "),Fo=a(_,"CODE",{class:!0});var sy=t(Fo);bl=r(sy,"idx"),sy.forEach(o),El=r(_,"."),_.forEach(o),_l=c(v),G=a(v,"P",{});var Ve=t(G);Il=r(Ve,"Besides, the bug may be due to the configuration of the Babel plugin instead of the code logic itself. However if you change the configuration, it could affect all the usages of the "),No=a(Ve,"CODE",{class:!0});var oy=t(No);Tl=r(oy,"idx"),oy.forEach(o),Pl=r(Ve," function, because "),Ca=a(Ve,"STRONG",{});var ey=t(Ca);Dl=r(ey,"babel configuration is global"),ey.forEach(o),Cl=r(Ve,"."),Ve.forEach(o),Ol=c(v),Sl=a(v,"HR",{}),Al=c(v),Oa=a(v,"P",{});var ay=t(Oa);Ml=r(ay,"To summarise, I think that this solution is a win-win for DX vs User Experience (UX), however, if we can make the transform plugin more accessible to all developers, eg: without having to update babel configuration for every new transform plugin, easier to debug, and a localized configuration."),ay.forEach(o),Bl=c(v),Is=a(v,"P",{});var Gt=t(Is);Hl=r(Gt,"Well, you are looking at "),Ts=a(Gt,"A",{href:!0,rel:!0});var ty=t(Ts);Rl=r(ty,"babel macros"),ty.forEach(o),Fl=r(Gt,". \u{1F440}"),Gt.forEach(o),v.forEach(o),Ct=c(k),d=a(k,"SECTION",{});var f=t(d);Sa=a(f,"H2",{});var ny=t(Sa);Ps=a(ny,"A",{href:!0,id:!0});var ry=t(Ps);Nl=r(ry,"Babel macros"),ry.forEach(o),ny.forEach(o),Ll=c(f),Aa=a(f,"P",{});var ly=t(Aa);ql=r(ly,"So, here's how it would look like with babel macro:"),ly.forEach(o),jl=c(f),Ma=a(f,"P",{});var iy=t(Ma);Ds=a(iy,"STRONG",{});var Wt=t(Ds);Ul=r(Wt,"You add "),Lo=a(Wt,"CODE",{class:!0});var cy=t(Lo);Vl=r(cy,"babel-plugin-macro"),cy.forEach(o),Gl=r(Wt," to babel config"),Wt.forEach(o),iy.forEach(o),Wl=c(f),Ba=a(f,"P",{});var py=t(Ba);$l=r(py,"And that's all the change you need for babel configuration."),py.forEach(o),Kl=c(f),qo=a(f,"DIV",{class:!0});var Ad=t(qo);Ad.forEach(o),Yl=c(f),Ha=a(f,"P",{});var hy=t(Ha);Ra=a(hy,"STRONG",{});var ky=t(Ra);Jl=r(ky,"You write your own macro"),ky.forEach(o),hy.forEach(o),Xl=c(f),jo=a(f,"DIV",{class:!0});var Md=t(jo);Md.forEach(o),zl=c(f),W=a(f,"P",{});var Ge=t(W);Ql=r(Ge,"We'll talk about the code later, one thing to take away here is that your filename has to end with "),Uo=a(Ge,"CODE",{class:!0});var yy=t(Uo);Zl=r(yy,".macro"),yy.forEach(o),si=r(Ge," or "),Vo=a(Ge,"CODE",{class:!0});var vy=t(Vo);oi=r(vy,".macro.js"),vy.forEach(o),ei=r(Ge,"."),Ge.forEach(o),ai=c(f),Fa=a(f,"P",{});var dy=t(Fa);Na=a(dy,"STRONG",{});var uy=t(Na);ti=r(uy,"Use it"),uy.forEach(o),dy.forEach(o),ni=c(f),Go=a(f,"DIV",{class:!0});var Bd=t(Go);Bd.forEach(o),ri=c(f),Cs=a(f,"P",{});var $t=t(Cs);li=r($t,"As you can see here, if there's something wrong about "),Wo=a($t,"CODE",{class:!0});var fy=t(Wo);ii=r(fy,"idx"),fy.forEach(o),ci=r($t,", the user would know which file exactly to look at."),$t.forEach(o),pi=c(f),$=a(f,"P",{});var We=t($);hi=r(We,"You don't get the disconnection between the module "),$o=a(We,"CODE",{class:!0});var my=t($o);ki=r(my,"idx"),my.forEach(o),yi=r(We," and the plugin "),Ko=a(We,"CODE",{class:!0});var xy=t(Ko);vi=r(xy,"babel-plugin-idx"),xy.forEach(o),di=r(We,"."),We.forEach(o),ui=c(f),La=a(f,"P",{});var gy=t(La);fi=r(gy,"Besides, if you want to modify configuration, say for this usage, you can do it easily:"),gy.forEach(o),mi=c(f),Yo=a(f,"DIV",{class:!0});var Hd=t(Yo);Hd.forEach(o),xi=c(f),qa=a(f,"P",{});var wy=t(qa);gi=r(wy,"Simple and explicit. Isn't that great?"),wy.forEach(o),f.forEach(o),Ot=c(k),E=a(k,"SECTION",{});var O=t(E);ja=a(O,"H3",{});var by=t(ja);Os=a(by,"A",{href:!0,id:!0});var Ey=t(Os);wi=r(Ey,"So what is Babel macros again?"),Ey.forEach(o),by.forEach(o),bi=c(O),ss=a(O,"P",{});var wt=t(ss);Ua=a(wt,"STRONG",{});var _y=t(Ua);Ei=r(_y,"Babel macros"),_y.forEach(o),_i=r(wt," is a concept from the "),Ss=a(wt,"A",{href:!0,rel:!0});var Iy=t(Ss);Jo=a(Iy,"CODE",{class:!0});var Ty=t(Jo);Ii=r(Ty,"babel-plugin-macros"),Ty.forEach(o),Iy.forEach(o),Ti=r(wt,", which defines the standard interface between compile-time code transformation and your runtime code."),wt.forEach(o),Pi=c(O),I=a(O,"P",{});var S=t(I);Di=r(S,"In compile-time, "),Xo=a(S,"CODE",{class:!0});var Py=t(Xo);Ci=r(Py,"babel-plugin-macros"),Py.forEach(o),Oi=r(S," will look for all "),zo=a(S,"CODE",{class:!0});var Dy=t(zo);Si=r(Dy,"import"),Dy.forEach(o),Ai=r(S," or "),Qo=a(S,"CODE",{class:!0});var Cy=t(Qo);Mi=r(Cy,"require"),Cy.forEach(o),Bi=r(S," from modules ends with "),Zo=a(S,"CODE",{class:!0});var Oy=t(Zo);Hi=r(Oy,".macro"),Oy.forEach(o),Ri=r(S,", finds all references of the imported variables, and passes them to the "),se=a(S,"CODE",{class:!0});var Sy=t(se);Fi=r(Sy,".macro"),Sy.forEach(o),Ni=r(S," file to transform them."),S.forEach(o),Li=c(O),Va=a(O,"P",{});var Ay=t(Va);qi=r(Ay,"The imported variables are not restricted to be a function, it can be a variable, a type from type system (Flow / TypeScript)."),Ay.forEach(o),ji=c(O),Ga=a(O,"P",{});var My=t(Ga);Ui=r(My,"If it is a default export, you can name it any way you like, if it is a named export, you can reassign to another variable name too."),My.forEach(o),Vi=c(O),Wa=a(O,"P",{});var By=t(Wa);Gi=r(By,"Cool, so how can I write my Babel macros?"),By.forEach(o),O.forEach(o),St=c(k),C=a(k,"SECTION",{});var ls=t(C);$a=a(ls,"H2",{});var Hy=t($a);As=a(Hy,"A",{href:!0,id:!0});var Ry=t(As);Wi=r(Ry,"How to write Babel macros"),Ry.forEach(o),Hy.forEach(o),$i=c(ls),os=a(ls,"P",{});var bt=t(os);Ms=a(bt,"A",{href:!0,rel:!0});var Fy=t(Ms);Ki=r(Fy,"Kent C Dodds"),Fy.forEach(o),Yi=r(bt," has written "),Bs=a(bt,"A",{href:!0,rel:!0});var Ny=t(Bs);Ji=r(Ny,"a fantastic guide for macro authors"),Ny.forEach(o),Xi=r(bt,"."),bt.forEach(o),zi=c(ls),Ka=a(ls,"P",{});var Ly=t(Ka);Qi=r(Ly,"Please go read it."),Ly.forEach(o),Zi=c(ls),Hs=a(ls,"P",{});var Kt=t(Hs);sc=r(Kt,"If you insist to stay, I am going to show you how I wrote my Babel macros, in particular, the "),Rs=a(Kt,"A",{href:!0,rel:!0});var qy=t(Rs);oc=r(qy,"mock.macro"),qy.forEach(o),ec=r(Kt,". And hopefully, along the way, you learned how to write your Babel macros as well."),Kt.forEach(o),ls.forEach(o),At=c(k),p=a(k,"SECTION",{});var h=t(p);Ya=a(h,"H3",{});var jy=t(Ya);Fs=a(jy,"A",{href:!0,id:!0});var Uy=t(Fs);ac=r(Uy,"mock.macro"),Uy.forEach(o),jy.forEach(o),tc=c(h),Ja=a(h,"P",{});var Vy=t(Ja);Xa=a(Vy,"STRONG",{});var Gy=t(Xa);nc=r(Gy,"Motivation"),Gy.forEach(o),Vy.forEach(o),rc=c(h),za=a(h,"P",{});var Wy=t(za);lc=r(Wy,"Usually, when working with a backend developer on a frontend application, I would use static type to define the API schema. For example, a user api would look like this:"),Wy.forEach(o),ic=c(h),oe=a(h,"DIV",{class:!0});var Rd=t(oe);Rd.forEach(o),cc=c(h),Qa=a(h,"P",{});var $y=t(Qa);pc=r($y,"However while waiting for the backend developer to develop the API, I would have to use mock data for development:"),$y.forEach(o),hc=c(h),ee=a(h,"DIV",{class:!0});var Fd=t(ee);Fd.forEach(o),kc=c(h),Za=a(h,"P",{});var Ky=t(Za);yc=r(Ky,"And along the way, due to unforeseen circumstances and lack of foresight, the response schema of the API was changed multiple times:"),Ky.forEach(o),vc=c(h),ae=a(h,"DIV",{class:!0});var Nd=t(ae);Nd.forEach(o),dc=c(h),R=a(h,"P",{});var is=t(R);uc=r(is,"Here you see I need to update both the type definition as well as the mock data. This reminds me of "),Ns=a(is,"A",{href:!0,rel:!0});var Yy=t(Ns);fc=r(Yy,"the double declaration problem"),Yy.forEach(o),mc=r(is," coined by "),Ls=a(is,"A",{href:!0,rel:!0});var Jy=t(Ls);xc=r(Jy,"@swyx"),Jy.forEach(o),gc=c(is),qs=a(is,"A",{href:!0,rel:!0});var Xy=t(qs);wc=r(Xy,"in his talk"),Xy.forEach(o),bc=r(is,". Which means that this could potentially be solved with Babel macros."),is.forEach(o),Ec=c(h),st=a(h,"P",{});var zy=t(st);_c=r(zy,"So in my head, I imagined with Babel macros, I could write:"),zy.forEach(o),Ic=c(h),te=a(h,"DIV",{class:!0});var Ld=t(te);Ld.forEach(o),Tc=c(h),js=a(h,"P",{});var Yt=t(js);Pc=r(Yt,"and when I call the function "),ne=a(Yt,"CODE",{class:!0});var Qy=t(ne);Dc=r(Qy,"fetchUser"),Qy.forEach(o),Cc=r(Yt,", I would get my mock response in return."),Yt.forEach(o),Oc=c(h),ot=a(h,"P",{});var Zy=t(ot);et=a(Zy,"STRONG",{});var sv=t(et);Sc=r(sv,"Implementing mock.macro"),sv.forEach(o),Zy.forEach(o),Ac=c(h),Us=a(h,"P",{});var Jt=t(Us);Mc=r(Jt,"Implementing mock.macro requires some basic knowledge about Abstract Syntax Tree (AST) and writing babel transformation, you can check out "),re=a(Jt,"A",{href:!0});var ov=t(re);Bc=r(ov,"the step-by-step guide I've written previously"),ov.forEach(o),Hc=r(Jt,"."),Jt.forEach(o),Rc=c(h),Vs=a(h,"P",{});var Xt=t(Vs);Fc=r(Xt,"Implementing Babel macros is quite easy, the api from the "),le=a(Xt,"CODE",{class:!0});var ev=t(le);Nc=r(ev,"babel-plugin-macros"),ev.forEach(o),Lc=r(Xt," is pretty straightforward, all you need is to provide a default export to your macro file:"),Xt.forEach(o),qc=c(h),ie=a(h,"DIV",{class:!0});var qd=t(ie);qd.forEach(o),jc=c(h),ce=a(h,"P",{});var Uh=t(ce);pe=a(Uh,"CODE",{class:!0});var av=t(pe);Uc=r(av,"createMacro"),av.forEach(o),Vc=r(Uh," takes in a callback function, which is executed when someone imports this macro file. It provides:"),Uh.forEach(o),Gc=c(h),at=a(h,"UL",{});var tv=t(at);tt=a(tv,"LI",{});var nv=t(tt);nt=a(nv,"STRONG",{});var rv=t(nt);Wc=r(rv,"references"),rv.forEach(o),nv.forEach(o),tv.forEach(o),$c=c(h),rt=a(h,"P",{});var lv=t(rt);Kc=r(lv,"All the reference that was imported from the macro file."),lv.forEach(o),Yc=c(h),lt=a(h,"P",{});var iv=t(lt);Jc=r(iv,"For example:"),iv.forEach(o),Xc=c(h),he=a(h,"DIV",{class:!0});var jd=t(he);jd.forEach(o),zc=c(h),K=a(h,"P",{});var $e=t(K);Qc=r($e,"will give you an object, with the import name as the "),ke=a($e,"CODE",{class:!0});var cv=t(ke);Zc=r(cv,"key"),cv.forEach(o),sp=r($e,", and array of paths as the "),ye=a($e,"CODE",{class:!0});var pv=t(ye);op=r(pv,"value"),pv.forEach(o),ep=r($e,":"),$e.forEach(o),ap=c(h),ve=a(h,"DIV",{class:!0});var Ud=t(ve);Ud.forEach(o),tp=c(h),it=a(h,"P",{});var hv=t(it);np=r(hv,"Inside the array, you can get all paths where the imported names are referenced. For example:"),hv.forEach(o),rp=c(h),de=a(h,"DIV",{class:!0});var Vd=t(de);Vd.forEach(o),lp=c(h),ct=a(h,"UL",{});var kv=t(ct);pt=a(kv,"LI",{});var yv=t(pt);ht=a(yv,"STRONG",{});var vv=t(ht);ip=r(vv,"state"),vv.forEach(o),yv.forEach(o),kv.forEach(o),cp=c(h),kt=a(h,"P",{});var dv=t(kt);pp=r(dv,"It gives you the current state of the file being traversed."),dv.forEach(o),hp=c(h),Gs=a(h,"P",{});var zt=t(Gs);kp=r(zt,"So, in this example, I need to transform all the references of "),ue=a(zt,"CODE",{class:!0});var uv=t(ue);yp=r(uv,"MockResponse"),uv.forEach(o),vp=r(zt,":"),zt.forEach(o),dp=c(h),fe=a(h,"DIV",{class:!0});var Gd=t(fe);Gd.forEach(o),up=c(h),yt=a(h,"P",{});var fv=t(yt);fp=r(fv,"Next, I need to figure out how the transformed code would look like:"),fv.forEach(o),mp=c(h),me=a(h,"DIV",{class:!0});var Wd=t(me);Wd.forEach(o),xp=c(h),Ws=a(h,"P",{});var Qt=t(Ws);gp=r(Qt,"I decided to use "),$s=a(Qt,"A",{href:!0,rel:!0});var mv=t($s);wp=r(mv,"faker.js"),mv.forEach(o),bp=r(Qt," as the random data generator."),Qt.forEach(o),Ep=c(h),Ks=a(h,"P",{});var Zt=t(Ks);_p=r(Zt,"So I have to import "),xe=a(Zt,"CODE",{class:!0});var xv=t(xe);Ip=r(xv,"faker"),xv.forEach(o),Tp=r(Zt," at the top of the file:"),Zt.forEach(o),Pp=c(h),ge=a(h,"DIV",{class:!0});var $d=t(ge);$d.forEach(o),Dp=c(h),F=a(h,"P",{});var cs=t(F);Cp=r(cs,"Next, for each references of "),we=a(cs,"CODE",{class:!0});var gv=t(we);Op=r(gv,"MockRespone"),gv.forEach(o),Sp=r(cs,", I need to find the "),be=a(cs,"CODE",{class:!0});var wv=t(be);Ap=r(wv,"FunctionDeclaration"),wv.forEach(o),Mp=r(cs," that it belongs to, and insert a "),Ee=a(cs,"CODE",{class:!0});var bv=t(Ee);Bp=r(bv,"ReturnStatement"),bv.forEach(o),Hp=r(cs," into the top of the function body:"),cs.forEach(o),Rp=c(h),_e=a(h,"DIV",{class:!0});var Kd=t(_e);Kd.forEach(o),Fp=c(h),Y=a(h,"P",{});var Ke=t(Y);Np=r(Ke,"In the "),Ie=a(Ke,"CODE",{class:!0});var Ev=t(Ie);Lp=r(Ev,"generateFakerCode"),Ev.forEach(o),qp=r(Ke,", I'll generate a AST node based on the node type of the "),Te=a(Ke,"CODE",{class:!0});var _v=t(Te);jp=r(_v,"typeDef"),_v.forEach(o),Up=r(Ke,":"),Ke.forEach(o),Vp=c(h),Pe=a(h,"DIV",{class:!0});var Yd=t(Pe);Yd.forEach(o),Gp=c(h),vt=a(h,"P",{});var Iv=t(vt);Wp=r(Iv,"That's it! A generated mock function via type definition using Babel macros."),Iv.forEach(o),$p=c(h),dt=a(h,"P",{});var Tv=t(dt);Kp=r(Tv,"One last thing, what happens when the API is ready, and you want to disable the mocking behavior?"),Tv.forEach(o),Yp=c(h),Ys=a(h,"P",{});var sn=t(Ys);Jp=r(sn,"We can read the 2nd parameter of the "),De=a(sn,"CODE",{class:!0});var Pv=t(De);Xp=r(Pv,"MockResponse"),Pv.forEach(o),zp=r(sn,":"),sn.forEach(o),Qp=c(h),Ce=a(h,"DIV",{class:!0});var Jd=t(Ce);Jd.forEach(o),Zp=c(h),Js=a(h,"P",{});var on=t(Js);sh=r(on,"If the 2nd parameter is "),Oe=a(on,"CODE",{class:!0});var Dv=t(Oe);oh=r(Dv,"false"),Dv.forEach(o),eh=r(on,", we disable the mocking behavior:"),on.forEach(o),ah=c(h),Se=a(h,"DIV",{class:!0});var Xd=t(Se);Xd.forEach(o),th=c(h),ut=a(h,"BLOCKQUOTE",{});var Cv=t(ut);Xs=a(Cv,"P",{});var en=t(Xs);nh=r(en,"You can find the full code from "),zs=a(en,"A",{href:!0,rel:!0});var Ov=t(zs);rh=r(Ov,"Github"),Ov.forEach(o),lh=r(en,"."),en.forEach(o),Cv.forEach(o),h.forEach(o),Mt=c(k),q=a(k,"SECTION",{});var Ye=t(q);ft=a(Ye,"H2",{});var Sv=t(ft);Qs=a(Sv,"A",{href:!0,id:!0});var Av=t(Qs);ih=r(Av,"Summary"),Av.forEach(o),Sv.forEach(o),ch=c(Ye),J=a(Ye,"P",{});var Je=t(J);ph=r(Je,"Sometimes, it is more efficient to move runtime abstraction and complexity to compile time. However, developing and maintaining a babel plugin for each of them may be difficult to maintain and debug, as there's a gap between the code written and build time plugin, eg: "),Ae=a(Je,"CODE",{class:!0});var Mv=t(Ae);hh=r(Mv,"idx"),Mv.forEach(o),kh=r(Je," and "),Me=a(Je,"CODE",{class:!0});var Bv=t(Me);yh=r(Bv,"babel-plugin-idx"),Bv.forEach(o),vh=r(Je,"."),Je.forEach(o),dh=c(Ye),es=a(Ye,"P",{});var Et=t(es);Be=a(Et,"CODE",{class:!0});var Hv=t(Be);uh=r(Hv,"babel-plugin-macros"),Hv.forEach(o),fh=r(Et," solves this by allow users to import "),He=a(Et,"CODE",{class:!0});var Rv=t(He);mh=r(Rv,".macro"),Rv.forEach(o),xh=r(Et," files directly into the codebase. The explicit import bridges the gap between build-time and runtime and allows the user to develop and debug their macro easily."),Et.forEach(o),Ye.forEach(o),Bt=c(k),as=a(k,"SECTION",{});var an=t(as);mt=a(an,"H2",{});var Fv=t(mt);Zs=a(Fv,"A",{href:!0,id:!0});var Nv=t(Zs);gh=r(Nv,"Further Reading"),Nv.forEach(o),Fv.forEach(o),wh=c(an),T=a(an,"UL",{});var A=t(T);so=a(A,"LI",{});var tn=t(so);oo=a(tn,"A",{href:!0,rel:!0});var Lv=t(oo);bh=r(Lv,"babel-plugin-macros"),Lv.forEach(o),Eh=r(tn," by "),eo=a(tn,"A",{href:!0,rel:!0});var qv=t(eo);_h=r(qv,"Kent C. Dodds"),qv.forEach(o),tn.forEach(o),Ih=c(A),ao=a(A,"LI",{});var nn=t(ao);to=a(nn,"A",{href:!0,rel:!0});var jv=t(to);Th=r(jv,"I Can Babel Macros (and So Can You!)"),jv.forEach(o),Ph=r(nn," by "),no=a(nn,"A",{href:!0,rel:!0});var Uv=t(no);Dh=r(Uv,"Shawn Wang"),Uv.forEach(o),nn.forEach(o),Ch=c(A),xt=a(A,"LI",{});var Vv=t(xt);ts=a(Vv,"A",{href:!0,rel:!0});var Vh=t(ts);Re=a(Vh,"CODE",{class:!0});var Gv=t(Re);Oh=r(Gv,"babel-plugin-macros"),Gv.forEach(o),Sh=r(Vh," Usage for macros authors"),Vh.forEach(o),Vv.forEach(o),Ah=c(A),ro=a(A,"LI",{});var rn=t(ro);lo=a(rn,"A",{href:!0,rel:!0});var Wv=t(lo);Mh=r(Wv,"Zero-config code transformation with babel-plugin-macros"),Wv.forEach(o),Bh=r(rn," by "),io=a(rn,"A",{href:!0,rel:!0});var $v=t(io);Hh=r($v,"Kent C. Dodds"),$v.forEach(o),rn.forEach(o),Rh=c(A),gt=a(A,"LI",{});var Kv=t(gt);co=a(Kv,"A",{href:!0,rel:!0});var Yv=t(co);Fh=r(Yv,"Awesome list for Babel macros"),Yv.forEach(o),Kv.forEach(o),Nh=c(A),Fe=a(A,"LI",{});var Gh=t(Fe);Lh=r(Gh,"The idea of converting type definition to mock generator comes from "),po=a(Gh,"A",{href:!0,rel:!0});var Jv=t(po);qh=r(Jv,"Manta Style, the futuristic API Mock Server for Frontend"),Jv.forEach(o),Gh.forEach(o),A.forEach(o),an.forEach(o),this.h()},h(){l(hs,"href","#motivation"),l(hs,"id","motivation"),l(ko,"href","/creating-custom-javascript-syntax-with-babel"),l(ys,"href","#documentation-and-community-support"),l(ys,"id","documentation-and-community-support"),l(yo,"class","inline"),l(vo,"href","/creating-custom-javascript-syntax-with-babel#overview"),l(vs,"href","#tooling"),l(vs,"id","tooling"),l(ds,"href","#maintainability"),l(ds,"id","maintainability"),l(us,"href","#consistency-of-the-syntax"),l(us,"id","consistency-of-the-syntax"),l(uo,"class","inline"),l(ms,"href","#compile-time-vs-runtime"),l(ms,"id","compile-time-vs-runtime"),l(xs,"href","https://v8.dev/features/optional-chaining"),l(xs,"rel","nofollow"),l(fo,"class","inline"),l(mo,"class","inline"),l(xo,"class","code-section"),l(go,"class","code-section"),l(wo,"href","https://stackoverflow.com/questions/19727905/in-javascript-is-it-expensive-to-use-try-catch-blocks-even-if-an-exception-is-n"),l(bo,"href","https://news.ycombinator.com/item?id=3922963"),l(Eo,"href","https://stackoverflow.com/questions/3217294/javascript-try-catch-performance-vs-error-checking-code"),l(_o,"href","https://twitter.com/lihautan"),l(To,"class","inline"),l(gs,"href","https://github.com/facebookincubator/idx"),l(gs,"rel","nofollow"),l(ws,"href","https://github.com/facebookincubator/idx#babel-plugin"),l(ws,"rel","nofollow"),l(Po,"class","inline"),l(Do,"class","code-section"),l(Co,"class","code-section"),l(Oo,"href","/step-by-step-guide-for-writing-a-babel-transformation"),l(So,"class","inline"),l(Ao,"class","inline"),l(Mo,"class","inline"),l(Bo,"class","inline"),l(Ho,"class","inline"),l(Ro,"class","inline"),l(Fo,"class","inline"),l(No,"class","inline"),l(Ts,"href","https://github.com/kentcdodds/babel-plugin-macros"),l(Ts,"rel","nofollow"),l(Ps,"href","#babel-macros"),l(Ps,"id","babel-macros"),l(Lo,"class","inline"),l(qo,"class","code-section"),l(jo,"class","code-section"),l(Uo,"class","inline"),l(Vo,"class","inline"),l(Go,"class","code-section"),l(Wo,"class","inline"),l($o,"class","inline"),l(Ko,"class","inline"),l(Yo,"class","code-section"),l(Os,"href","#so-what-is-babel-macros-again"),l(Os,"id","so-what-is-babel-macros-again"),l(Jo,"class","inline"),l(Ss,"href","https://github.com/kentcdodds/babel-plugin-macros"),l(Ss,"rel","nofollow"),l(Xo,"class","inline"),l(zo,"class","inline"),l(Qo,"class","inline"),l(Zo,"class","inline"),l(se,"class","inline"),l(As,"href","#how-to-write-babel-macros"),l(As,"id","how-to-write-babel-macros"),l(Ms,"href","http://kentcdodds.com"),l(Ms,"rel","nofollow"),l(Bs,"href","https://github.com/kentcdodds/babel-plugin-macros/blob/master/other/docs/author.md"),l(Bs,"rel","nofollow"),l(Rs,"href","https://www.npmjs.com/package/mock.macro"),l(Rs,"rel","nofollow"),l(Fs,"href","#mock-macro"),l(Fs,"id","mock-macro"),l(oe,"class","code-section"),l(ee,"class","code-section"),l(ae,"class","code-section"),l(Ns,"href","https://babel-blade.netlify.com/docs/declarationdeclaration"),l(Ns,"rel","nofollow"),l(Ls,"href","https://twitter.com/swyx"),l(Ls,"rel","nofollow"),l(qs,"href","https://www.youtube.com/watch?v=1WNT5RCENfo"),l(qs,"rel","nofollow"),l(te,"class","code-section"),l(ne,"class","inline"),l(re,"href","/step-by-step-guide-for-writing-a-babel-transformation"),l(le,"class","inline"),l(ie,"class","code-section"),l(pe,"class","inline"),l(he,"class","code-section"),l(ke,"class","inline"),l(ye,"class","inline"),l(ve,"class","code-section"),l(de,"class","code-section"),l(ue,"class","inline"),l(fe,"class","code-section"),l(me,"class","code-section"),l($s,"href","https://github.com/marak/Faker.js/"),l($s,"rel","nofollow"),l(xe,"class","inline"),l(ge,"class","code-section"),l(we,"class","inline"),l(be,"class","inline"),l(Ee,"class","inline"),l(_e,"class","code-section"),l(Ie,"class","inline"),l(Te,"class","inline"),l(Pe,"class","code-section"),l(De,"class","inline"),l(Ce,"class","code-section"),l(Oe,"class","inline"),l(Se,"class","code-section"),l(zs,"href","https://github.com/tanhauhau/mock.macro"),l(zs,"rel","nofollow"),l(Qs,"href","#summary"),l(Qs,"id","summary"),l(Ae,"class","inline"),l(Me,"class","inline"),l(Be,"class","inline"),l(He,"class","inline"),l(Zs,"href","#further-reading"),l(Zs,"id","further-reading"),l(oo,"href","https://github.com/kentcdodds/babel-plugin-macros"),l(oo,"rel","nofollow"),l(eo,"href","https://twitter.com/kentcdodds/"),l(eo,"rel","nofollow"),l(to,"href","https://www.youtube.com/watch?v=1WNT5RCENfo"),l(to,"rel","nofollow"),l(no,"href","https://twitter.com/swyx"),l(no,"rel","nofollow"),l(Re,"class","inline"),l(ts,"href","https://github.com/kentcdodds/babel-plugin-macros/blob/master/other/docs/author.md"),l(ts,"rel","nofollow"),l(lo,"href","https://babeljs.io/blog/2017/09/11/zero-config-with-babel-macros"),l(lo,"rel","nofollow"),l(io,"href","https://twitter.com/kentcdodds/"),l(io,"rel","nofollow"),l(co,"href","https://github.com/jgierer12/awesome-babel-macros"),l(co,"rel","nofollow"),l(po,"href","https://github.com/Cryrivers/manta-style"),l(po,"rel","nofollow")},m(k,u){od(x,k,u),m(k,M,u),m(k,D,u),s(D,ps),m(k,g,u),m(k,b,u),s(b,X),s(X,hs),s(hs,ln),s(b,cn),s(b,ks),s(ks,pn),s(ks,ko),s(ko,hn),s(ks,kn),s(b,yn),s(b,Xe),s(Xe,vn),m(k,_t,u),m(k,z,u),s(z,ze),s(ze,ys),s(ys,dn),s(z,un),s(z,j),s(j,fn),s(j,yo),s(yo,mn),s(j,xn),s(j,vo),s(vo,gn),s(j,wn),m(k,It,u),m(k,Q,u),s(Q,Qe),s(Qe,vs),s(vs,bn),s(Q,En),s(Q,Ze),s(Ze,_n),m(k,Tt,u),m(k,Z,u),s(Z,sa),s(sa,ds),s(ds,In),s(Z,Tn),s(Z,oa),s(oa,Pn),m(k,Pt,u),m(k,L,u),s(L,ea),s(ea,us),s(us,Dn),s(L,Cn),s(L,aa),s(aa,On),s(L,Sn),s(L,fs),s(fs,An),s(fs,uo),s(uo,Mn),s(fs,Bn),m(k,Dt,u),m(k,y,u),s(y,ta),s(ta,ms),s(ms,Hn),s(y,Rn),s(y,na),s(na,Fn),s(y,Nn),s(y,B),s(B,Ln),s(B,xs),s(xs,qn),s(B,jn),s(B,fo),s(fo,Un),s(B,Vn),s(B,mo),s(mo,Gn),s(B,Wn),s(y,$n),s(y,ra),s(ra,la),s(la,Kn),s(y,Yn),s(y,xo),xo.innerHTML=nd,s(y,Jn),s(y,ia),s(ia,ca),s(ca,Xn),s(y,zn),s(y,go),go.innerHTML=rd,s(y,Qn),s(y,P),s(P,pa),s(pa,Zn),s(P,sr),s(P,wo),s(wo,or),s(P,er),s(P,bo),s(bo,ar),s(P,tr),s(P,Eo),s(Eo,nr),s(P,rr),s(P,_o),s(_o,lr),s(P,ir),s(y,cr),s(y,Io),s(Io,pr),s(Io,ha),s(ha,hr),s(y,kr),s(y,H),s(H,yr),s(H,gs),s(gs,To),s(To,vr),s(H,dr),s(H,ws),s(ws,ur),s(H,fr),s(H,Po),s(Po,mr),s(H,xr),s(y,gr),s(y,Do),Do.innerHTML=ld,s(y,wr),s(y,ka),s(ka,br),s(y,Er),s(y,Co),Co.innerHTML=id,s(y,_r),s(y,ya),s(ya,Ir),s(y,Tr),s(y,va),s(va,Pr),s(y,Dr),s(y,da),s(da,ua),s(ua,Cr),s(y,Or),s(y,bs),s(bs,Sr),s(bs,fa),s(fa,Ar),s(bs,Mr),s(y,Br),s(y,ma),s(ma,Hr),s(y,Rr),s(y,xa),s(xa,ga),s(ga,Fr),s(y,Nr),s(y,Es),s(Es,Lr),s(Es,Oo),s(Oo,qr),s(Es,jr),s(y,Ur),s(y,_s),s(_s,Vr),s(_s,wa),s(wa,Gr),s(_s,Wr),s(y,$r),s(y,U),s(U,Kr),s(U,So),s(So,Yr),s(U,Jr),s(U,ba),s(ba,Xr),s(U,zr),s(y,Qr),s(y,V),s(V,Zr),s(V,Ea),s(Ea,sl),s(V,ol),s(V,_a),s(_a,el),s(V,al),s(y,tl),s(y,Ia),s(Ia,Ta),s(Ta,nl),s(y,rl),s(y,Pa),s(Pa,ll),s(y,il),s(y,w),s(w,cl),s(w,Ao),s(Ao,pl),s(w,hl),s(w,Mo),s(Mo,kl),s(w,yl),s(w,Bo),s(Bo,vl),s(w,dl),s(w,Da),s(Da,ul),s(w,fl),s(w,Ho),s(Ho,ml),s(w,xl),s(w,Ro),s(Ro,gl),s(w,wl),s(w,Fo),s(Fo,bl),s(w,El),s(y,_l),s(y,G),s(G,Il),s(G,No),s(No,Tl),s(G,Pl),s(G,Ca),s(Ca,Dl),s(G,Cl),s(y,Ol),s(y,Sl),s(y,Al),s(y,Oa),s(Oa,Ml),s(y,Bl),s(y,Is),s(Is,Hl),s(Is,Ts),s(Ts,Rl),s(Is,Fl),m(k,Ct,u),m(k,d,u),s(d,Sa),s(Sa,Ps),s(Ps,Nl),s(d,Ll),s(d,Aa),s(Aa,ql),s(d,jl),s(d,Ma),s(Ma,Ds),s(Ds,Ul),s(Ds,Lo),s(Lo,Vl),s(Ds,Gl),s(d,Wl),s(d,Ba),s(Ba,$l),s(d,Kl),s(d,qo),qo.innerHTML=cd,s(d,Yl),s(d,Ha),s(Ha,Ra),s(Ra,Jl),s(d,Xl),s(d,jo),jo.innerHTML=pd,s(d,zl),s(d,W),s(W,Ql),s(W,Uo),s(Uo,Zl),s(W,si),s(W,Vo),s(Vo,oi),s(W,ei),s(d,ai),s(d,Fa),s(Fa,Na),s(Na,ti),s(d,ni),s(d,Go),Go.innerHTML=hd,s(d,ri),s(d,Cs),s(Cs,li),s(Cs,Wo),s(Wo,ii),s(Cs,ci),s(d,pi),s(d,$),s($,hi),s($,$o),s($o,ki),s($,yi),s($,Ko),s(Ko,vi),s($,di),s(d,ui),s(d,La),s(La,fi),s(d,mi),s(d,Yo),Yo.innerHTML=kd,s(d,xi),s(d,qa),s(qa,gi),m(k,Ot,u),m(k,E,u),s(E,ja),s(ja,Os),s(Os,wi),s(E,bi),s(E,ss),s(ss,Ua),s(Ua,Ei),s(ss,_i),s(ss,Ss),s(Ss,Jo),s(Jo,Ii),s(ss,Ti),s(E,Pi),s(E,I),s(I,Di),s(I,Xo),s(Xo,Ci),s(I,Oi),s(I,zo),s(zo,Si),s(I,Ai),s(I,Qo),s(Qo,Mi),s(I,Bi),s(I,Zo),s(Zo,Hi),s(I,Ri),s(I,se),s(se,Fi),s(I,Ni),s(E,Li),s(E,Va),s(Va,qi),s(E,ji),s(E,Ga),s(Ga,Ui),s(E,Vi),s(E,Wa),s(Wa,Gi),m(k,St,u),m(k,C,u),s(C,$a),s($a,As),s(As,Wi),s(C,$i),s(C,os),s(os,Ms),s(Ms,Ki),s(os,Yi),s(os,Bs),s(Bs,Ji),s(os,Xi),s(C,zi),s(C,Ka),s(Ka,Qi),s(C,Zi),s(C,Hs),s(Hs,sc),s(Hs,Rs),s(Rs,oc),s(Hs,ec),m(k,At,u),m(k,p,u),s(p,Ya),s(Ya,Fs),s(Fs,ac),s(p,tc),s(p,Ja),s(Ja,Xa),s(Xa,nc),s(p,rc),s(p,za),s(za,lc),s(p,ic),s(p,oe),oe.innerHTML=yd,s(p,cc),s(p,Qa),s(Qa,pc),s(p,hc),s(p,ee),ee.innerHTML=vd,s(p,kc),s(p,Za),s(Za,yc),s(p,vc),s(p,ae),ae.innerHTML=dd,s(p,dc),s(p,R),s(R,uc),s(R,Ns),s(Ns,fc),s(R,mc),s(R,Ls),s(Ls,xc),s(R,gc),s(R,qs),s(qs,wc),s(R,bc),s(p,Ec),s(p,st),s(st,_c),s(p,Ic),s(p,te),te.innerHTML=ud,s(p,Tc),s(p,js),s(js,Pc),s(js,ne),s(ne,Dc),s(js,Cc),s(p,Oc),s(p,ot),s(ot,et),s(et,Sc),s(p,Ac),s(p,Us),s(Us,Mc),s(Us,re),s(re,Bc),s(Us,Hc),s(p,Rc),s(p,Vs),s(Vs,Fc),s(Vs,le),s(le,Nc),s(Vs,Lc),s(p,qc),s(p,ie),ie.innerHTML=fd,s(p,jc),s(p,ce),s(ce,pe),s(pe,Uc),s(ce,Vc),s(p,Gc),s(p,at),s(at,tt),s(tt,nt),s(nt,Wc),s(p,$c),s(p,rt),s(rt,Kc),s(p,Yc),s(p,lt),s(lt,Jc),s(p,Xc),s(p,he),he.innerHTML=md,s(p,zc),s(p,K),s(K,Qc),s(K,ke),s(ke,Zc),s(K,sp),s(K,ye),s(ye,op),s(K,ep),s(p,ap),s(p,ve),ve.innerHTML=xd,s(p,tp),s(p,it),s(it,np),s(p,rp),s(p,de),de.innerHTML=gd,s(p,lp),s(p,ct),s(ct,pt),s(pt,ht),s(ht,ip),s(p,cp),s(p,kt),s(kt,pp),s(p,hp),s(p,Gs),s(Gs,kp),s(Gs,ue),s(ue,yp),s(Gs,vp),s(p,dp),s(p,fe),fe.innerHTML=wd,s(p,up),s(p,yt),s(yt,fp),s(p,mp),s(p,me),me.innerHTML=bd,s(p,xp),s(p,Ws),s(Ws,gp),s(Ws,$s),s($s,wp),s(Ws,bp),s(p,Ep),s(p,Ks),s(Ks,_p),s(Ks,xe),s(xe,Ip),s(Ks,Tp),s(p,Pp),s(p,ge),ge.innerHTML=Ed,s(p,Dp),s(p,F),s(F,Cp),s(F,we),s(we,Op),s(F,Sp),s(F,be),s(be,Ap),s(F,Mp),s(F,Ee),s(Ee,Bp),s(F,Hp),s(p,Rp),s(p,_e),_e.innerHTML=_d,s(p,Fp),s(p,Y),s(Y,Np),s(Y,Ie),s(Ie,Lp),s(Y,qp),s(Y,Te),s(Te,jp),s(Y,Up),s(p,Vp),s(p,Pe),Pe.innerHTML=Id,s(p,Gp),s(p,vt),s(vt,Wp),s(p,$p),s(p,dt),s(dt,Kp),s(p,Yp),s(p,Ys),s(Ys,Jp),s(Ys,De),s(De,Xp),s(Ys,zp),s(p,Qp),s(p,Ce),Ce.innerHTML=Td,s(p,Zp),s(p,Js),s(Js,sh),s(Js,Oe),s(Oe,oh),s(Js,eh),s(p,ah),s(p,Se),Se.innerHTML=Pd,s(p,th),s(p,ut),s(ut,Xs),s(Xs,nh),s(Xs,zs),s(zs,rh),s(Xs,lh),m(k,Mt,u),m(k,q,u),s(q,ft),s(ft,Qs),s(Qs,ih),s(q,ch),s(q,J),s(J,ph),s(J,Ae),s(Ae,hh),s(J,kh),s(J,Me),s(Me,yh),s(J,vh),s(q,dh),s(q,es),s(es,Be),s(Be,uh),s(es,fh),s(es,He),s(He,mh),s(es,xh),m(k,Bt,u),m(k,as,u),s(as,mt),s(mt,Zs),s(Zs,gh),s(as,wh),s(as,T),s(T,so),s(so,oo),s(oo,bh),s(so,Eh),s(so,eo),s(eo,_h),s(T,Ih),s(T,ao),s(ao,to),s(to,Th),s(ao,Ph),s(ao,no),s(no,Dh),s(T,Ch),s(T,xt),s(xt,ts),s(ts,Re),s(Re,Oh),s(ts,Sh),s(T,Ah),s(T,ro),s(ro,lo),s(lo,Mh),s(ro,Bh),s(ro,io),s(io,Hh),s(T,Rh),s(T,gt),s(gt,co),s(co,Fh),s(T,Nh),s(T,Fe),s(Fe,Lh),s(Fe,po),s(po,qh),Ht=!0},p:eu,i(k){Ht||(ed(x.$$.fragment,k),Ht=!0)},o(k){ad(x.$$.fragment,k),Ht=!1},d(k){td(x,k),k&&o(M),k&&o(D),k&&o(g),k&&o(b),k&&o(_t),k&&o(z),k&&o(It),k&&o(Q),k&&o(Tt),k&&o(Z),k&&o(Pt),k&&o(L),k&&o(Dt),k&&o(y),k&&o(Ct),k&&o(d),k&&o(Ot),k&&o(E),k&&o(St),k&&o(C),k&&o(At),k&&o(p),k&&o(Mt),k&&o(q),k&&o(Bt),k&&o(as)}}}function lu(ho){let x,M;const D=[ho[0],Qv];let ps={$$slots:{default:[ru]},$$scope:{ctx:ho}};for(let g=0;g<D.length;g+=1)ps=Wh(ps,D[g]);return x=new au({props:ps}),{c(){Zv(x.$$.fragment)},l(g){sd(x.$$.fragment,g)},m(g,b){od(x,g,b),M=!0},p(g,[b]){const X=b&1?su(D,[b&1&&Xv(g[0]),b&0&&Xv(Qv)]):{};b&2&&(X.$$scope={dirty:b,ctx:g}),x.$set(X)},i(g){M||(ed(x.$$.fragment,g),M=!0)},o(g){ad(x.$$.fragment,g),M=!1},d(g){td(x,g)}}}const Qv={title:"Babel macros",date:"2019-10-08T08:00:00Z",series:"Intermediate Babel",tags:["JavaScript","babel","AST","transform"],description:"Custom JavaScript syntax is hard to maintain, custom babel transform plugin is no better. That's why we need Babel macros."};function iu(ho,x,M){return ou("blog",{image:nu}),ho.$$set=D=>{M(0,x=Wh(Wh({},x),zv(D)))},x=zv(x),[x]}class du extends zd{constructor(x){super();Qd(this,x,iu,lu,Zd,{})}}export{du as default,Qv as metadata};
