import{S as by,i as Oy,s as Sy,C as qc,w as jv,x as Dv,y as Lv,z as Iy,A as Pv,q as Nv,o as Av,B as Jv,r as Cy,R as Tv,k as p,e as o,t as n,m as c,c as a,a as t,h as r,d as e,b as i,Q as qo,f as F,g as u,F as s,O as Py}from"../../chunks/vendor-ea160616.js";import{B as Ty}from"../../chunks/BlogLayout-1be3dc1e.js";import{T as qy}from"../../chunks/TableOfContent-c4f5cb6e.js";import"../../chunks/stores-7d7fda0c.js";import"../../chunks/WebMentions-d768a574.js";/* empty css                                */var jy="/_app/assets/hero-twitter-57f7bb48.jpg";function Dy(Gs){let m,W,J,ts,g,T,X,Jt,Qa,ns,Mv='<pre class="prism language-"><code><span class="line">fakeParseJSON(&#39;&#123; &quot;data&quot;: &#123; &quot;fish&quot;: &quot;cake&quot;, &quot;array&quot;: [1,2,3], &quot;children&quot;: [ &#123; &quot;something&quot;: &quot;else&quot; &#125;, &#123; &quot;candy&quot;: &quot;cane&quot; &#125;, &#123; &quot;sponge&quot;: &quot;bob&quot; &#125; ] &#125; &#125; &#39;)</span></code></pre>',Xa,Ks,Mt,Za,rs,Uv='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fakeParseJSON</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">parse</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>',st,zs,Ut,et,V,jo,Ys,Wt,Ht,Do,Qs,Vt,Bt,Lo,Xs,Rt,ot,Zs,$t,at,se,Ft,tt,Z,Gt,ls,Kt,zt,nt,ee,Yt,rt,v,No,is,Qt,Xt,ps,Zt,cs,sn,en,on,Ao,oe,hs,an,tn,nn,Jo,ae,jc,rn,Mo,ln,pn,Uo,ss,ks,cn,hn,vs,kn,vn,yn,te,Wv=`<pre class="prism language-"><code><span class="line">json</span>
<span class="line">  element</span>
<span class="line"></span>
<span class="line">value</span>
<span class="line">  object</span>
<span class="line">  array</span>
<span class="line">  string</span>
<span class="line">  number</span>
<span class="line">  &quot;true&quot;</span>
<span class="line">  &quot;false&quot;</span>
<span class="line">  &quot;null&quot;</span>
<span class="line"></span>
<span class="line">object</span>
<span class="line">  &#39;&#123;&#39; ws &#39;&#125;&#39;</span>
<span class="line">  &#39;&#123;&#39; members &#39;&#125;&#39;</span></code></pre>`,dn,Wo,un,fn,Ho,mn,xn,Vo,wn,gn,Bo,En,_n,Ro,ne,Dc,bn,$o,On,Sn,ys,In,Fo,Cn,Pn,Tn,Go,qn,jn,E,Dn,re,Ln,Nn,le,An,Jn,ie,Mn,Un,pe,Wn,Hn,ce,Vn,Bn,he,Rn,$n,ke,Fn,Gn,Ko,Kn,zn,Yn,ds,Qn,ve,Xn,Zn,sr,us,es,ye,er,or,de,ar,tr,nr,I,ue,rr,lr,fe,ir,pr,me,cr,hr,xe,kr,vr,we,yr,dr,ge,ur,fr,mr,zo,xr,wr,fs,ms,gr,Ee,Er,_r,br,G,Or,_e,Sr,Ir,be,Cr,Pr,Tr,Yo,qr,jr,Qo,xs,Dr,Oe,Lr,Nr,Ar,Xo,Jr,lt,h,Zo,ws,Mr,Ur,sa,Wr,Hr,Se,Hv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// TODO</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Vr,H,Br,Ie,Rr,$r,Ce,Fr,Gr,Pe,Kr,zr,Yr,Te,Qr,ea,Xr,Zr,qe,Vv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseObject</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (str[i] </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#123;&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// if it is not &#39;&#125;&#39;,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// we take the path of string -&gt; whitespace -&gt; &#39;:&#39; -&gt; value -&gt; ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">while</span><span style="color: var(--shiki-color-text)"> (str[i] </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#125;&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">key</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseString</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">eatColon</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">value</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseValue</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,sl,gs,el,je,ol,al,tl,S,nl,De,rl,ll,Le,il,pl,Ne,cl,hl,Ae,kl,vl,Je,yl,dl,Me,ul,fl,ml,oa,xl,wl,Ue,Bv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseObject</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (str[i] </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#123;&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> initial </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// if it is not &#39;&#125;&#39;,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// we take the path of string -&gt; whitespace -&gt; &#39;:&#39; -&gt; value -&gt; ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">while</span><span style="color: var(--shiki-color-text)"> (str[i] </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#125;&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">initial) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">eatComma</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">key</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseString</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">eatColon</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">value</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseValue</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        initial </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// move to the next character of &#39;&#125;&#39;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,gl,aa,El,_l,K,Es,bl,We,Ol,Sl,Il,_s,Cl,He,Pl,Tl,ql,bs,jl,Ve,Dl,Ll,Nl,z,Al,Be,Jl,Ml,Re,Ul,Wl,Hl,$e,Rv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">eatComma</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (str[i] </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;,&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Expected &quot;,&quot;.&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">eatColon</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (str[i] </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;:&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Expected &quot;:&quot;.&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Vl,Os,Bl,Fe,Rl,$l,Fl,ta,Gl,Kl,Ge,$v=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseObject</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (str[i] </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#123;&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">result</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;&#125;;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> initial </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// if it is not &#39;&#125;&#39;,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// we take the path of string -&gt; whitespace -&gt; &#39;:&#39; -&gt; value -&gt; ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">while</span><span style="color: var(--shiki-color-text)"> (str[i] </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#125;&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">initial) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">eatComma</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">key</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseString</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">eatColon</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">value</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseValue</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        result[key] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> value;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        initial </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// move to the next character of &#39;&#125;&#39;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> result;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,zl,na,Yl,Ql,ra,Ke,Lc,Xl,la,Zl,si,ze,Fv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseArray</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (str[i] </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;[&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">result</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> initial </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">while</span><span style="color: var(--shiki-color-text)"> (str[i] </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;]&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">initial) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">eatComma</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">value</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseValue</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">result</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(value);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        initial </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// move to the next character of &#39;]&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> result;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ei,ia,oi,ai,pa,Ye,Nc,ti,ca,ni,ri,ha,li,ii,Qe,Gv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseValue</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">value</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">parseString</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">??</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">parseNumber</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">??</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">parseObject</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">??</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">parseArray</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">??</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">parseKeyword</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;true&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">??</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">parseKeyword</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;false&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">??</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">parseKeyword</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;null&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> value;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,pi,f,ci,Xe,hi,ki,Ss,vi,yi,Ze,di,ui,so,fi,mi,eo,xi,wi,oo,gi,Ei,ao,_i,bi,to,Oi,Si,no,Ii,Ci,ro,Pi,Ti,lo,qi,ji,Di,Is,Li,io,Ni,Ai,Ji,po,Kv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseKeyword</span><span style="color: var(--shiki-color-text)">(name</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">str</span><span style="color: var(--shiki-token-function)">.slice</span><span style="color: var(--shiki-color-text)">(i</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">name</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> name) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      i </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">name</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> value;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Mi,Cs,Ui,co,Wi,Hi,Vi,ka,Bi,Ri,q,Ac,$i,Ps,Fi,ho,Gi,Ki,zi,ko,zv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseValue</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Yi,va,Qi,Xi,ya,Zi,it,M,da,Ts,sp,ep,ua,op,ap,fa,tp,np,qs,ma,rp,lp,xa,ip,pt,vo,wa,js,pp,ct,j,ga,Ds,cp,hp,Ls,kp,yo,vp,yp,dp,uo,Yv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseObject</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">while</span><span style="color: var(--shiki-color-text)">(str[i] </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#125;&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span></code></pre>`,up,Ea,fp,mp,fo,Qv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseObject</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">while</span><span style="color: var(--shiki-color-text)"> (i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">str</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> str[i] </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#125;&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">checkUnexpectedEndOfInput</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// move to the next character of &#39;&#125;&#39;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> result;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ht,C,_a,Ns,xp,wp,ba,gp,Ep,Oa,_p,bp,mo,Xv='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">Unexpected token </span><span style="color: var(--shiki-token-string-expression)">&quot;a&quot;</span></span></code></pre>',Op,Sa,Sp,Ip,Ia,Cp,kt,B,Ca,As,Pp,Tp,Pa,qp,jp,xo,Zv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// instead of</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">Unexpected token </span><span style="color: var(--shiki-token-string-expression)">&quot;a&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">Unexpected end </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> input</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// show</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">JSON_ERROR_001</span><span style="color: var(--shiki-color-text)"> Unexpected token </span><span style="color: var(--shiki-token-string-expression)">&quot;a&quot;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">JSON_ERROR_002</span><span style="color: var(--shiki-color-text)"> Unexpected end </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> input</span></span></code></pre>`,vt,D,Ta,Js,Dp,Lp,qa,Np,Ap,wo,sy=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// instead of</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">Unexpected token </span><span style="color: var(--shiki-token-string-expression)">&quot;a&quot;</span><span style="color: var(--shiki-color-text)"> at position </span><span style="color: var(--shiki-token-constant)">5</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// show</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#123; </span><span style="color: var(--shiki-token-string-expression)">&quot;b&quot;</span><span style="color: var(--shiki-color-text)">a</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">^</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">JSON_ERROR_001</span><span style="color: var(--shiki-color-text)"> Unexpected token </span><span style="color: var(--shiki-token-string-expression)">&quot;a&quot;</span></span></code></pre>`,Jp,ja,Mp,Up,go,ey=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">printCodeSnippet</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Math</span><span style="color: var(--shiki-token-function)">.max</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">trimmed</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> from </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">padding</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (trimmed </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> (i </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> from);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">snippet</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      (trimmed </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;...&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">str</span><span style="color: var(--shiki-token-function)">.slice</span><span style="color: var(--shiki-color-text)">(from</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#39; &#39;</span><span style="color: var(--shiki-token-function)">.repeat</span><span style="color: var(--shiki-color-text)">(padding) </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;^&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#39; &#39;</span><span style="color: var(--shiki-token-function)">.repeat</span><span style="color: var(--shiki-color-text)">(padding) </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> message</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    ]</span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#92;n&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(snippet);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,yt,x,Da,Ms,Wp,Hp,La,Vp,Bp,Eo,oy=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// instead of</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">Unexpected token </span><span style="color: var(--shiki-token-string-expression)">&quot;a&quot;</span><span style="color: var(--shiki-color-text)"> at position </span><span style="color: var(--shiki-token-constant)">5</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// show</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#123; </span><span style="color: var(--shiki-token-string-expression)">&quot;b&quot;</span><span style="color: var(--shiki-color-text)">a</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">^</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">JSON_ERROR_001</span><span style="color: var(--shiki-color-text)"> Unexpected token </span><span style="color: var(--shiki-token-string-expression)">&quot;a&quot;</span><span style="color: var(--shiki-color-text)">.</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">Expecting a </span><span style="color: var(--shiki-token-string-expression)">&quot;:&quot;</span><span style="color: var(--shiki-color-text)"> over here</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> eg</span><span style="color: var(--shiki-token-punctuation)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#123; </span><span style="color: var(--shiki-token-string-expression)">&quot;b&quot;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-string-expression)">&quot;bar&quot;</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">^</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">You can learn more about valid </span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-color-text)"> string </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> http</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-token-comment)">//goo.gl/xxxxx</span></span></code></pre>`,Rp,Na,$p,Fp,_o,ay=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&quot;Lorem ipsum&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// instead of</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">Expecting a </span><span style="color: var(--shiki-token-string-expression)">&#96;&quot;&#96;</span><span style="color: var(--shiki-color-text)"> over here</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> eg</span><span style="color: var(--shiki-token-punctuation)">:</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&quot;Foo Bar&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">^</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// show</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">Expecting a </span><span style="color: var(--shiki-token-string-expression)">&#96;&quot;&#96;</span><span style="color: var(--shiki-color-text)"> over here</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> eg</span><span style="color: var(--shiki-token-punctuation)">:</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&quot;Lorem ipsum&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-keyword)">^</span></span></code></pre>`,Gp,Aa,Kp,zp,Ja,Yp,Qp,Y,Ma,Xp,Zp,Ua,sc,ec,Wa,oc,ac,L,Jc,tc,Q,nc,Us,rc,lc,Ws,ic,pc,dt,_,Ha,Hs,cc,hc,Va,kc,vc,Ba,yc,dc,Ra,uc,fc,$a,mc,xc,Fa,wc,gc,Vs,Ga,Bs,Ec,_c,Ka,Rs,bc,Oc,$s,Sc,Fs,Ic,Cc,ut;return m=new qy({props:{data:[{link:"understand-the-grammar",title:"Understand the grammar"},{link:"implementing-the-parser",title:"Implementing the parser"},{link:"handling-the-unexpected-input",title:"Handling the unexpected input",nested:[{link:"unexpected-token",title:"Unexpected token"},{link:"unexpected-end-of-string",title:"Unexpected end of string"}]},{link:"going-the-extra-mile",title:"Going the extra mile",nested:[{link:"error-code-and-standard-error-message",title:"Error code and standard error message"},{link:"a-better-view-of-what-went-wrong",title:"A better view of what went wrong"},{link:"suggestions-for-error-recovery",title:"Suggestions for error recovery"}]},{link:"summary",title:"Summary"}]}}),{c(){jv(m.$$.fragment),W=p(),J=o("p"),ts=n("The interview question of the week for this week on Cassidoo's weekly newsletter is,"),g=p(),T=o("blockquote"),X=o("p"),Jt=n(`Write a function that takes in a string of valid JSON and converts it to an object (or whatever your chosen language uses, dicts, maps, etc).
Example input:`),Qa=p(),ns=o("div"),Xa=p(),Ks=o("p"),Mt=n("At one point, I was tempted to just to write:"),Za=p(),rs=o("div"),st=p(),zs=o("p"),Ut=n("But, I thought, I've written quite a few articles about AST:"),et=p(),V=o("ul"),jo=o("li"),Ys=o("a"),Wt=n("Creating custom JavaScript syntax with Babel"),Ht=p(),Do=o("li"),Qs=o("a"),Vt=n("Step-by-step guide for writing a custom babel transformation"),Bt=p(),Lo=o("li"),Xs=o("a"),Rt=n("Manipulating AST with JavaScript"),ot=p(),Zs=o("p"),$t=n("which covers the overview of the compiler pipeline, as well as how to manipulate AST, but I haven't covered much on how to implement a parser."),at=p(),se=o("p"),Ft=n("That's because, implementing a JavaScript compiler in an article is a task too daunting for me."),tt=p(),Z=o("p"),Gt=n("Well, fret not. JSON is also a language. It has its own grammar, which you can refer from "),ls=o("a"),Kt=n("the specifications"),zt=n(". The knowledge and technique you need to write a JSON parser is transferrable to writing a JS parser."),nt=p(),ee=o("p"),Yt=n("So, let's start writing a JSON parser!"),rt=p(),v=o("section"),No=o("h2"),is=o("a"),Qt=n("Understand the grammar"),Xt=p(),ps=o("p"),Zt=n("If you look at "),cs=o("a"),sn=n("the specification page"),en=n(", there's 2 diagrams:"),on=p(),Ao=o("ul"),oe=o("li"),hs=o("a"),an=n("The syntax diagram (or railroad diagram)"),tn=n(" on the left,"),nn=p(),Jo=o("p"),ae=o("img"),rn=p(),Mo=o("small"),ln=n("Image source: https://www.json.org/img/object.png"),pn=p(),Uo=o("ul"),ss=o("li"),ks=o("a"),cn=n("The McKeeman Form"),hn=n(", a variant of "),vs=o("a"),kn=n("Backus-Naur Form (BNF)"),vn=n(", on the right"),yn=p(),te=o("div"),dn=p(),Wo=o("p"),un=n("Both diagrams are equivalent."),fn=p(),Ho=o("p"),mn=n("One is visual and one is text based. The text based grammar syntax, Backus-Naur Form, is usually fed to another parser that parse this grammar and generate a parser for it. Speaking of parser-ception! \u{1F92F}"),xn=p(),Vo=o("p"),wn=n("In this article, we will focus on the railroad diagram, because it is visual and seemed to be more friendly to me."),gn=p(),Bo=o("p"),En=n("Lets' look at the first railroad diagram:"),_n=p(),Ro=o("p"),ne=o("img"),bn=p(),$o=o("small"),On=n("Image source: https://www.json.org/img/object.png"),Sn=p(),ys=o("p"),In=n("So this is the grammar for "),Fo=o("strong"),Cn=n('"object"'),Pn=n(" in JSON."),Tn=p(),Go=o("p"),qn=n("We start from the left, following the arrow, and then we end at the right."),jn=p(),E=o("p"),Dn=n("The circles, eg "),re=o("code"),Ln=n("{"),Nn=n(", "),le=o("code"),An=n(","),Jn=n(", "),ie=o("code"),Mn=n(":"),Un=n(", "),pe=o("code"),Wn=n("}"),Hn=n(", are the characters, and the boxes eg: "),ce=o("code"),Vn=n("whitespace"),Bn=n(", "),he=o("code"),Rn=n("string"),$n=n(", and "),ke=o("code"),Fn=n("value"),Gn=n(' is a placeholder for another grammar. So to parse the "whitespace", we will need to look at the grammar for '),Ko=o("strong"),Kn=n('"whitepsace"'),zn=n("."),Yn=p(),ds=o("p"),Qn=n("So, starting from the left, for an object, the first character has to be an open curly bracket, "),ve=o("code"),Xn=n("{"),Zn=n(". and then we have 2 options from here:"),sr=p(),us=o("ul"),es=o("li"),ye=o("code"),er=n("whitespace"),or=n(" \u2192 "),de=o("code"),ar=n("}"),tr=n(" \u2192 end, or"),nr=p(),I=o("li"),ue=o("code"),rr=n("whitespace"),lr=n(" \u2192 "),fe=o("code"),ir=n("string"),pr=n(" \u2192 "),me=o("code"),cr=n("whitespace"),hr=n(" \u2192 "),xe=o("code"),kr=n(":"),vr=n(" \u2192 "),we=o("code"),yr=n("value"),dr=n(" \u2192 "),ge=o("code"),ur=n("}"),fr=n(" \u2192 end"),mr=p(),zo=o("p"),xr=n('Of course, when you reach "value", you can choose to go to:'),wr=p(),fs=o("ul"),ms=o("li"),gr=n("\u2192 "),Ee=o("code"),Er=n("}"),_r=n(" \u2192 end, or"),br=p(),G=o("li"),Or=n("\u2192 "),_e=o("code"),Sr=n(","),Ir=n(" \u2192 "),be=o("code"),Cr=n("whitespace"),Pr=n(" \u2192 ... \u2192 value"),Tr=p(),Yo=o("p"),qr=n("and you can keep looping, until you decide to go to:"),jr=p(),Qo=o("ul"),xs=o("li"),Dr=n("\u2192 "),Oe=o("code"),Lr=n("}"),Nr=n(" \u2192 end."),Ar=p(),Xo=o("p"),Jr=n("So, I guess we are now acquainted with the railroad diagram, let's carry on to the next section."),lt=p(),h=o("section"),Zo=o("h2"),ws=o("a"),Mr=n("Implementing the parser"),Ur=p(),sa=o("p"),Wr=n("Let's start with the following structure:"),Hr=p(),Se=o("div"),Vr=p(),H=o("p"),Br=n("We initialise "),Ie=o("code"),Rr=n("i"),$r=n(" as the index for the current character, we will end as soon as "),Ce=o("code"),Fr=n("i"),Gr=n(" reaches the end of the "),Pe=o("code"),Kr=n("str"),zr=n("."),Yr=p(),Te=o("p"),Qr=n("Let's implement the grammar for the "),ea=o("strong"),Xr=n('"object":'),Zr=p(),qe=o("div"),sl=p(),gs=o("p"),el=n("In the "),je=o("code"),ol=n("parseObject"),al=n(', we will call parse of other grammars, like "string" and "whitespace", when we implement them, everything will work \u{1F91E}.'),tl=p(),S=o("p"),nl=n("One thing that I forgot to add is the comma, "),De=o("code"),rl=n(","),ll=n(". The "),Le=o("code"),il=n(","),pl=n(" only appears before we start the second loop of "),Ne=o("code"),cl=n("whitespace"),hl=n(" \u2192 "),Ae=o("code"),kl=n("string"),vl=n(" \u2192 "),Je=o("code"),yl=n("whitespace"),dl=n(" \u2192 "),Me=o("code"),ul=n(":"),fl=n(" \u2192 ..."),ml=p(),oa=o("p"),xl=n("Based on that, we add the following lines:"),wl=p(),Ue=o("div"),gl=p(),aa=o("p"),El=n("Some naming convention:"),_l=p(),K=o("ul"),Es=o("li"),bl=n("We call "),We=o("code"),Ol=n("parseSomething"),Sl=n(", when we parse the code based on grammar and use the return value"),Il=p(),_s=o("li"),Cl=n("We call "),He=o("code"),Pl=n("eatSomething"),Tl=n(", when we expect the character(s) to be there, but we are not using the character(s)"),ql=p(),bs=o("li"),jl=n("We call "),Ve=o("code"),Dl=n("skipSomething"),Ll=n(", when we are okay if the character(s) is not there."),Nl=p(),z=o("p"),Al=n("Let's implement the "),Be=o("code"),Jl=n("eatComma"),Ml=n(" and "),Re=o("code"),Ul=n("eatColon"),Wl=n(":"),Hl=p(),$e=o("div"),Vl=p(),Os=o("p"),Bl=n("So we have finished implemented the "),Fe=o("code"),Rl=n("parseObject"),$l=n(" grammar, but what is the return value from this parse function?"),Fl=p(),ta=o("p"),Gl=n("Well, we need to return a JavaScript object:"),Kl=p(),Ge=o("div"),zl=p(),na=o("p"),Yl=n(`Now that you've seen me implementing the "object" grammar, it's time for you to try out the "array" grammar:`),Ql=p(),ra=o("p"),Ke=o("img"),Xl=p(),la=o("small"),Zl=n("Image source: https://www.json.org/img/array.png"),si=p(),ze=o("div"),ei=p(),ia=o("p"),oi=n('Now, move on to a more interesting grammar, "value":'),ai=p(),pa=o("p"),Ye=o("img"),ti=p(),ca=o("small"),ni=n("Image source: https://www.json.org/img/value.png"),ri=p(),ha=o("p"),li=n('A value starts with "whitespace", then any of the following: "string", "number", "object", "array", "true", "false" or "null", and then end with a "whitespace":'),ii=p(),Qe=o("div"),pi=p(),f=o("p"),ci=n("The "),Xe=o("code"),hi=n("??"),ki=n(" is called the "),Ss=o("a"),vi=n("nullish coalescing operator"),yi=n(", it is like the "),Ze=o("code"),di=n("||"),ui=n(" that we used to use for defaulting a value "),so=o("code"),fi=n("foo || default"),mi=n(", except that "),eo=o("code"),xi=n("||"),wi=n(" will return the "),oo=o("code"),gi=n("default"),Ei=n(" as long as "),ao=o("code"),_i=n("foo"),bi=n(" is falsy, whereas the nullish coalescing operator will only return "),to=o("code"),Oi=n("default"),Si=n(" when "),no=o("code"),Ii=n("foo"),Ci=n(" is either "),ro=o("code"),Pi=n("null"),Ti=n(" or "),lo=o("code"),qi=n("undefined"),ji=n("."),Di=p(),Is=o("p"),Li=n("The parseKeyword will check whether the current "),io=o("code"),Ni=n("str.slice(i)"),Ai=n(" matches the keyword string, if so, it will return the keyword value:"),Ji=p(),po=o("div"),Mi=p(),Cs=o("p"),Ui=n("That's it for "),co=o("code"),Wi=n("parseValue"),Hi=n("!"),Vi=p(),ka=o("p"),Bi=n("We still have 3 more grammars to go, but I will save the length of this article, and implement them in the following CodeSandbox:"),Ri=p(),q=o("iframe"),$i=p(),Ps=o("p"),Fi=n("After we have finished implementing all the grammars, now let's return the value of the json, which is return by the "),ho=o("code"),Gi=n("parseValue"),Ki=n(":"),zi=p(),ko=o("div"),Yi=p(),va=o("p"),Qi=n("That's it!"),Xi=p(),ya=o("p"),Zi=n("Well, not so fast my friend, we've just finished the happy path, what about unhappy path?"),it=p(),M=o("section"),da=o("h2"),Ts=o("a"),sp=n("Handling the unexpected input"),ep=p(),ua=o("p"),op=n("As a good developer, we need to handle the unhappy path gracefully as well. For a parser, that means shouting at the developer with appropriate error message."),ap=p(),fa=o("p"),tp=n("Let's handle the 2 most common error cases:"),np=p(),qs=o("ul"),ma=o("li"),rp=n("Unexpected token"),lp=p(),xa=o("li"),ip=n("Unexpected end of string"),pt=p(),vo=o("section"),wa=o("h3"),js=o("a"),pp=n("Unexpected token"),ct=p(),j=o("section"),ga=o("h3"),Ds=o("a"),cp=n("Unexpected end of string"),hp=p(),Ls=o("p"),kp=n("In all the while loops, for example the while loop in "),yo=o("code"),vp=n("parseObject"),yp=n(":"),dp=p(),uo=o("div"),up=p(),Ea=o("p"),fp=n(`We need to make sure that we don't access the character beyond the length of the string. This happens when the string ended unexpectedly, while we are still waiting for a closing character, "}" in this example:`),mp=p(),fo=o("div"),ht=p(),C=o("section"),_a=o("h2"),Ns=o("a"),xp=n("Going the extra mile"),wp=p(),ba=o("p"),gp=n("Do you remember the time you were a junior developer, every time when you encounter Syntax error with cryptic messages, you are completely clueless of what went wrong?"),Ep=p(),Oa=o("p"),_p=n("Now you are more experienced, it is time to stop this virtuous cycle and stop yelling"),bp=p(),mo=o("div"),Op=p(),Sa=o("p"),Sp=n("and leave the user staring at the screen confounded."),Ip=p(),Ia=o("p"),Cp=n("There's a lot of better ways of handling error messages than yelling, here are some points you can consider adding to your parser:"),kt=p(),B=o("section"),Ca=o("h3"),As=o("a"),Pp=n("Error code and standard error message"),Tp=p(),Pa=o("p"),qp=n("This is useful as a standard keyword for user to Google for help."),jp=p(),xo=o("div"),vt=p(),D=o("section"),Ta=o("h3"),Js=o("a"),Dp=n("A better view of what went wrong"),Lp=p(),qa=o("p"),Np=n("Parser like Babel, will show you a code frame, a snippet of your code with underline, arrow or highlighting of what went wrong"),Ap=p(),wo=o("div"),Jp=p(),ja=o("p"),Mp=n("An example on how you can print out the code snippet:"),Up=p(),go=o("div"),yt=p(),x=o("section"),Da=o("h3"),Ms=o("a"),Wp=n("Suggestions for error recovery"),Hp=p(),La=o("p"),Vp=n("If possible, explain what went wrong and give suggestions on how to fix them"),Bp=p(),Eo=o("div"),Rp=p(),Na=o("p"),$p=n("If possible, provide suggestions based on the context that the parser has collected so far"),Fp=p(),_o=o("div"),Gp=p(),Aa=o("p"),Kp=n("The suggestion that based on the context will feel more relatable and actionable."),zp=p(),Ja=o("p"),Yp=n("With all the suggestions in mind, check out the updated CodeSandbox with"),Qp=p(),Y=o("ul"),Ma=o("li"),Xp=n("Meaningful error message"),Zp=p(),Ua=o("li"),sc=n("Code snippet with error pointing point of failure"),ec=p(),Wa=o("li"),oc=n("Provide suggestions for error recovery"),ac=p(),L=o("iframe"),tc=p(),Q=o("p"),nc=n("Also, read the "),Us=o("a"),rc=n('"Compiler Errors for Humans"'),lc=n(" by "),Ws=o("a"),ic=n("Evan Czaplicki"),pc=n(" for how Elm improves the UX problems of the Elm compiler."),dt=p(),_=o("section"),Ha=o("h2"),Hs=o("a"),cc=n("Summary"),hc=p(),Va=o("p"),kc=n("To implement a parser, you need to start with the grammar."),vc=p(),Ba=o("p"),yc=n("You can formalise the grammar with the railroad diagrams or the Backus-Naur Form. Designing the grammar is the hardest step."),dc=p(),Ra=o("p"),uc=n("Once you've settled with the grammar, you can start implementing the parser based on it."),fc=p(),$a=o("p"),mc=n("Error handling is important, what's more important is to have meaningful error messages, so that the user knows how to fix it."),xc=p(),Fa=o("p"),wc=n("Now you know how a simple parser is implemented, it's time to set eyes on a more complex one:"),gc=p(),Vs=o("ul"),Ga=o("li"),Bs=o("a"),Ec=n("Babel parser"),_c=p(),Ka=o("li"),Rs=o("a"),bc=n("Svelte parser"),Oc=p(),$s=o("p"),Sc=n("Lastly, do follow "),Fs=o("a"),Ic=n("@cassidoo"),Cc=n(", her weekly newsletter is awesome!"),this.h()},l(l){Dv(m.$$.fragment,l),W=c(l),J=a(l,"P",{});var y=t(J);ts=r(y,"The interview question of the week for this week on Cassidoo's weekly newsletter is,"),y.forEach(e),g=c(l),T=a(l,"BLOCKQUOTE",{});var Mc=t(T);X=a(Mc,"P",{});var Uc=t(X);Jt=r(Uc,`Write a function that takes in a string of valid JSON and converts it to an object (or whatever your chosen language uses, dicts, maps, etc).
Example input:`),Uc.forEach(e),Mc.forEach(e),Qa=c(l),ns=a(l,"DIV",{class:!0});var ty=t(ns);ty.forEach(e),Xa=c(l),Ks=a(l,"P",{});var Wc=t(Ks);Mt=r(Wc,"At one point, I was tempted to just to write:"),Wc.forEach(e),Za=c(l),rs=a(l,"DIV",{class:!0});var ny=t(rs);ny.forEach(e),st=c(l),zs=a(l,"P",{});var Hc=t(zs);Ut=r(Hc,"But, I thought, I've written quite a few articles about AST:"),Hc.forEach(e),et=c(l),V=a(l,"UL",{});var bo=t(V);jo=a(bo,"LI",{});var Vc=t(jo);Ys=a(Vc,"A",{href:!0});var Bc=t(Ys);Wt=r(Bc,"Creating custom JavaScript syntax with Babel"),Bc.forEach(e),Vc.forEach(e),Ht=c(bo),Do=a(bo,"LI",{});var Rc=t(Do);Qs=a(Rc,"A",{href:!0});var $c=t(Qs);Vt=r($c,"Step-by-step guide for writing a custom babel transformation"),$c.forEach(e),Rc.forEach(e),Bt=c(bo),Lo=a(bo,"LI",{});var Fc=t(Lo);Xs=a(Fc,"A",{href:!0});var Gc=t(Xs);Rt=r(Gc,"Manipulating AST with JavaScript"),Gc.forEach(e),Fc.forEach(e),bo.forEach(e),ot=c(l),Zs=a(l,"P",{});var Kc=t(Zs);$t=r(Kc,"which covers the overview of the compiler pipeline, as well as how to manipulate AST, but I haven't covered much on how to implement a parser."),Kc.forEach(e),at=c(l),se=a(l,"P",{});var zc=t(se);Ft=r(zc,"That's because, implementing a JavaScript compiler in an article is a task too daunting for me."),zc.forEach(e),tt=c(l),Z=a(l,"P",{});var ft=t(Z);Gt=r(ft,"Well, fret not. JSON is also a language. It has its own grammar, which you can refer from "),ls=a(ft,"A",{href:!0,rel:!0});var Yc=t(ls);Kt=r(Yc,"the specifications"),Yc.forEach(e),zt=r(ft,". The knowledge and technique you need to write a JSON parser is transferrable to writing a JS parser."),ft.forEach(e),nt=c(l),ee=a(l,"P",{});var Qc=t(ee);Yt=r(Qc,"So, let's start writing a JSON parser!"),Qc.forEach(e),rt=c(l),v=a(l,"SECTION",{});var d=t(v);No=a(d,"H2",{});var Xc=t(No);is=a(Xc,"A",{href:!0,id:!0});var Zc=t(is);Qt=r(Zc,"Understand the grammar"),Zc.forEach(e),Xc.forEach(e),Xt=c(d),ps=a(d,"P",{});var mt=t(ps);Zt=r(mt,"If you look at "),cs=a(mt,"A",{href:!0,rel:!0});var sh=t(cs);sn=r(sh,"the specification page"),sh.forEach(e),en=r(mt,", there's 2 diagrams:"),mt.forEach(e),on=c(d),Ao=a(d,"UL",{});var eh=t(Ao);oe=a(eh,"LI",{});var Pc=t(oe);hs=a(Pc,"A",{href:!0,rel:!0});var oh=t(hs);an=r(oh,"The syntax diagram (or railroad diagram)"),oh.forEach(e),tn=r(Pc," on the left,"),Pc.forEach(e),eh.forEach(e),nn=c(d),Jo=a(d,"P",{});var ah=t(Jo);ae=a(ah,"IMG",{src:!0,alt:!0}),ah.forEach(e),rn=c(d),Mo=a(d,"SMALL",{});var th=t(Mo);ln=r(th,"Image source: https://www.json.org/img/object.png"),th.forEach(e),pn=c(d),Uo=a(d,"UL",{});var nh=t(Uo);ss=a(nh,"LI",{});var za=t(ss);ks=a(za,"A",{href:!0,rel:!0});var rh=t(ks);cn=r(rh,"The McKeeman Form"),rh.forEach(e),hn=r(za,", a variant of "),vs=a(za,"A",{href:!0,rel:!0});var lh=t(vs);kn=r(lh,"Backus-Naur Form (BNF)"),lh.forEach(e),vn=r(za,", on the right"),za.forEach(e),nh.forEach(e),yn=c(d),te=a(d,"DIV",{class:!0});var ry=t(te);ry.forEach(e),dn=c(d),Wo=a(d,"P",{});var ih=t(Wo);un=r(ih,"Both diagrams are equivalent."),ih.forEach(e),fn=c(d),Ho=a(d,"P",{});var ph=t(Ho);mn=r(ph,"One is visual and one is text based. The text based grammar syntax, Backus-Naur Form, is usually fed to another parser that parse this grammar and generate a parser for it. Speaking of parser-ception! \u{1F92F}"),ph.forEach(e),xn=c(d),Vo=a(d,"P",{});var ch=t(Vo);wn=r(ch,"In this article, we will focus on the railroad diagram, because it is visual and seemed to be more friendly to me."),ch.forEach(e),gn=c(d),Bo=a(d,"P",{});var hh=t(Bo);En=r(hh,"Lets' look at the first railroad diagram:"),hh.forEach(e),_n=c(d),Ro=a(d,"P",{});var kh=t(Ro);ne=a(kh,"IMG",{src:!0,alt:!0}),kh.forEach(e),bn=c(d),$o=a(d,"SMALL",{});var vh=t($o);On=r(vh,"Image source: https://www.json.org/img/object.png"),vh.forEach(e),Sn=c(d),ys=a(d,"P",{});var xt=t(ys);In=r(xt,"So this is the grammar for "),Fo=a(xt,"STRONG",{});var yh=t(Fo);Cn=r(yh,'"object"'),yh.forEach(e),Pn=r(xt," in JSON."),xt.forEach(e),Tn=c(d),Go=a(d,"P",{});var dh=t(Go);qn=r(dh,"We start from the left, following the arrow, and then we end at the right."),dh.forEach(e),jn=c(d),E=a(d,"P",{});var O=t(E);Dn=r(O,"The circles, eg "),re=a(O,"CODE",{class:!0});var uh=t(re);Ln=r(uh,"{"),uh.forEach(e),Nn=r(O,", "),le=a(O,"CODE",{class:!0});var fh=t(le);An=r(fh,","),fh.forEach(e),Jn=r(O,", "),ie=a(O,"CODE",{class:!0});var mh=t(ie);Mn=r(mh,":"),mh.forEach(e),Un=r(O,", "),pe=a(O,"CODE",{class:!0});var xh=t(pe);Wn=r(xh,"}"),xh.forEach(e),Hn=r(O,", are the characters, and the boxes eg: "),ce=a(O,"CODE",{class:!0});var wh=t(ce);Vn=r(wh,"whitespace"),wh.forEach(e),Bn=r(O,", "),he=a(O,"CODE",{class:!0});var gh=t(he);Rn=r(gh,"string"),gh.forEach(e),$n=r(O,", and "),ke=a(O,"CODE",{class:!0});var Eh=t(ke);Fn=r(Eh,"value"),Eh.forEach(e),Gn=r(O,' is a placeholder for another grammar. So to parse the "whitespace", we will need to look at the grammar for '),Ko=a(O,"STRONG",{});var _h=t(Ko);Kn=r(_h,'"whitepsace"'),_h.forEach(e),zn=r(O,"."),O.forEach(e),Yn=c(d),ds=a(d,"P",{});var wt=t(ds);Qn=r(wt,"So, starting from the left, for an object, the first character has to be an open curly bracket, "),ve=a(wt,"CODE",{class:!0});var bh=t(ve);Xn=r(bh,"{"),bh.forEach(e),Zn=r(wt,". and then we have 2 options from here:"),wt.forEach(e),sr=c(d),us=a(d,"UL",{});var gt=t(us);es=a(gt,"LI",{});var Ya=t(es);ye=a(Ya,"CODE",{class:!0});var Oh=t(ye);er=r(Oh,"whitespace"),Oh.forEach(e),or=r(Ya," \u2192 "),de=a(Ya,"CODE",{class:!0});var Sh=t(de);ar=r(Sh,"}"),Sh.forEach(e),tr=r(Ya," \u2192 end, or"),Ya.forEach(e),nr=c(gt),I=a(gt,"LI",{});var A=t(I);ue=a(A,"CODE",{class:!0});var Ih=t(ue);rr=r(Ih,"whitespace"),Ih.forEach(e),lr=r(A," \u2192 "),fe=a(A,"CODE",{class:!0});var Ch=t(fe);ir=r(Ch,"string"),Ch.forEach(e),pr=r(A," \u2192 "),me=a(A,"CODE",{class:!0});var Ph=t(me);cr=r(Ph,"whitespace"),Ph.forEach(e),hr=r(A," \u2192 "),xe=a(A,"CODE",{class:!0});var Th=t(xe);kr=r(Th,":"),Th.forEach(e),vr=r(A," \u2192 "),we=a(A,"CODE",{class:!0});var qh=t(we);yr=r(qh,"value"),qh.forEach(e),dr=r(A," \u2192 "),ge=a(A,"CODE",{class:!0});var jh=t(ge);ur=r(jh,"}"),jh.forEach(e),fr=r(A," \u2192 end"),A.forEach(e),gt.forEach(e),mr=c(d),zo=a(d,"P",{});var Dh=t(zo);xr=r(Dh,'Of course, when you reach "value", you can choose to go to:'),Dh.forEach(e),wr=c(d),fs=a(d,"UL",{});var Et=t(fs);ms=a(Et,"LI",{});var _t=t(ms);gr=r(_t,"\u2192 "),Ee=a(_t,"CODE",{class:!0});var Lh=t(Ee);Er=r(Lh,"}"),Lh.forEach(e),_r=r(_t," \u2192 end, or"),_t.forEach(e),br=c(Et),G=a(Et,"LI",{});var Oo=t(G);Or=r(Oo,"\u2192 "),_e=a(Oo,"CODE",{class:!0});var Nh=t(_e);Sr=r(Nh,","),Nh.forEach(e),Ir=r(Oo," \u2192 "),be=a(Oo,"CODE",{class:!0});var Ah=t(be);Cr=r(Ah,"whitespace"),Ah.forEach(e),Pr=r(Oo," \u2192 ... \u2192 value"),Oo.forEach(e),Et.forEach(e),Tr=c(d),Yo=a(d,"P",{});var Jh=t(Yo);qr=r(Jh,"and you can keep looping, until you decide to go to:"),Jh.forEach(e),jr=c(d),Qo=a(d,"UL",{});var Mh=t(Qo);xs=a(Mh,"LI",{});var bt=t(xs);Dr=r(bt,"\u2192 "),Oe=a(bt,"CODE",{class:!0});var Uh=t(Oe);Lr=r(Uh,"}"),Uh.forEach(e),Nr=r(bt," \u2192 end."),bt.forEach(e),Mh.forEach(e),Ar=c(d),Xo=a(d,"P",{});var Wh=t(Xo);Jr=r(Wh,"So, I guess we are now acquainted with the railroad diagram, let's carry on to the next section."),Wh.forEach(e),d.forEach(e),lt=c(l),h=a(l,"SECTION",{});var k=t(h);Zo=a(k,"H2",{});var Hh=t(Zo);ws=a(Hh,"A",{href:!0,id:!0});var Vh=t(ws);Mr=r(Vh,"Implementing the parser"),Vh.forEach(e),Hh.forEach(e),Ur=c(k),sa=a(k,"P",{});var Bh=t(sa);Wr=r(Bh,"Let's start with the following structure:"),Bh.forEach(e),Hr=c(k),Se=a(k,"DIV",{class:!0});var ly=t(Se);ly.forEach(e),Vr=c(k),H=a(k,"P",{});var os=t(H);Br=r(os,"We initialise "),Ie=a(os,"CODE",{class:!0});var Rh=t(Ie);Rr=r(Rh,"i"),Rh.forEach(e),$r=r(os," as the index for the current character, we will end as soon as "),Ce=a(os,"CODE",{class:!0});var $h=t(Ce);Fr=r($h,"i"),$h.forEach(e),Gr=r(os," reaches the end of the "),Pe=a(os,"CODE",{class:!0});var Fh=t(Pe);Kr=r(Fh,"str"),Fh.forEach(e),zr=r(os,"."),os.forEach(e),Yr=c(k),Te=a(k,"P",{});var Tc=t(Te);Qr=r(Tc,"Let's implement the grammar for the "),ea=a(Tc,"STRONG",{});var Gh=t(ea);Xr=r(Gh,'"object":'),Gh.forEach(e),Tc.forEach(e),Zr=c(k),qe=a(k,"DIV",{class:!0});var iy=t(qe);iy.forEach(e),sl=c(k),gs=a(k,"P",{});var Ot=t(gs);el=r(Ot,"In the "),je=a(Ot,"CODE",{class:!0});var Kh=t(je);ol=r(Kh,"parseObject"),Kh.forEach(e),al=r(Ot,', we will call parse of other grammars, like "string" and "whitespace", when we implement them, everything will work \u{1F91E}.'),Ot.forEach(e),tl=c(k),S=a(k,"P",{});var N=t(S);nl=r(N,"One thing that I forgot to add is the comma, "),De=a(N,"CODE",{class:!0});var zh=t(De);rl=r(zh,","),zh.forEach(e),ll=r(N,". The "),Le=a(N,"CODE",{class:!0});var Yh=t(Le);il=r(Yh,","),Yh.forEach(e),pl=r(N," only appears before we start the second loop of "),Ne=a(N,"CODE",{class:!0});var Qh=t(Ne);cl=r(Qh,"whitespace"),Qh.forEach(e),hl=r(N," \u2192 "),Ae=a(N,"CODE",{class:!0});var Xh=t(Ae);kl=r(Xh,"string"),Xh.forEach(e),vl=r(N," \u2192 "),Je=a(N,"CODE",{class:!0});var Zh=t(Je);yl=r(Zh,"whitespace"),Zh.forEach(e),dl=r(N," \u2192 "),Me=a(N,"CODE",{class:!0});var sk=t(Me);ul=r(sk,":"),sk.forEach(e),fl=r(N," \u2192 ..."),N.forEach(e),ml=c(k),oa=a(k,"P",{});var ek=t(oa);xl=r(ek,"Based on that, we add the following lines:"),ek.forEach(e),wl=c(k),Ue=a(k,"DIV",{class:!0});var py=t(Ue);py.forEach(e),gl=c(k),aa=a(k,"P",{});var ok=t(aa);El=r(ok,"Some naming convention:"),ok.forEach(e),_l=c(k),K=a(k,"UL",{});var So=t(K);Es=a(So,"LI",{});var St=t(Es);bl=r(St,"We call "),We=a(St,"CODE",{class:!0});var ak=t(We);Ol=r(ak,"parseSomething"),ak.forEach(e),Sl=r(St,", when we parse the code based on grammar and use the return value"),St.forEach(e),Il=c(So),_s=a(So,"LI",{});var It=t(_s);Cl=r(It,"We call "),He=a(It,"CODE",{class:!0});var tk=t(He);Pl=r(tk,"eatSomething"),tk.forEach(e),Tl=r(It,", when we expect the character(s) to be there, but we are not using the character(s)"),It.forEach(e),ql=c(So),bs=a(So,"LI",{});var Ct=t(bs);jl=r(Ct,"We call "),Ve=a(Ct,"CODE",{class:!0});var nk=t(Ve);Dl=r(nk,"skipSomething"),nk.forEach(e),Ll=r(Ct,", when we are okay if the character(s) is not there."),Ct.forEach(e),So.forEach(e),Nl=c(k),z=a(k,"P",{});var Io=t(z);Al=r(Io,"Let's implement the "),Be=a(Io,"CODE",{class:!0});var rk=t(Be);Jl=r(rk,"eatComma"),rk.forEach(e),Ml=r(Io," and "),Re=a(Io,"CODE",{class:!0});var lk=t(Re);Ul=r(lk,"eatColon"),lk.forEach(e),Wl=r(Io,":"),Io.forEach(e),Hl=c(k),$e=a(k,"DIV",{class:!0});var cy=t($e);cy.forEach(e),Vl=c(k),Os=a(k,"P",{});var Pt=t(Os);Bl=r(Pt,"So we have finished implemented the "),Fe=a(Pt,"CODE",{class:!0});var ik=t(Fe);Rl=r(ik,"parseObject"),ik.forEach(e),$l=r(Pt," grammar, but what is the return value from this parse function?"),Pt.forEach(e),Fl=c(k),ta=a(k,"P",{});var pk=t(ta);Gl=r(pk,"Well, we need to return a JavaScript object:"),pk.forEach(e),Kl=c(k),Ge=a(k,"DIV",{class:!0});var hy=t(Ge);hy.forEach(e),zl=c(k),na=a(k,"P",{});var ck=t(na);Yl=r(ck,`Now that you've seen me implementing the "object" grammar, it's time for you to try out the "array" grammar:`),ck.forEach(e),Ql=c(k),ra=a(k,"P",{});var hk=t(ra);Ke=a(hk,"IMG",{src:!0,alt:!0}),hk.forEach(e),Xl=c(k),la=a(k,"SMALL",{});var kk=t(la);Zl=r(kk,"Image source: https://www.json.org/img/array.png"),kk.forEach(e),si=c(k),ze=a(k,"DIV",{class:!0});var ky=t(ze);ky.forEach(e),ei=c(k),ia=a(k,"P",{});var vk=t(ia);oi=r(vk,'Now, move on to a more interesting grammar, "value":'),vk.forEach(e),ai=c(k),pa=a(k,"P",{});var yk=t(pa);Ye=a(yk,"IMG",{src:!0,alt:!0}),yk.forEach(e),ti=c(k),ca=a(k,"SMALL",{});var dk=t(ca);ni=r(dk,"Image source: https://www.json.org/img/value.png"),dk.forEach(e),ri=c(k),ha=a(k,"P",{});var uk=t(ha);li=r(uk,'A value starts with "whitespace", then any of the following: "string", "number", "object", "array", "true", "false" or "null", and then end with a "whitespace":'),uk.forEach(e),ii=c(k),Qe=a(k,"DIV",{class:!0});var vy=t(Qe);vy.forEach(e),pi=c(k),f=a(k,"P",{});var w=t(f);ci=r(w,"The "),Xe=a(w,"CODE",{class:!0});var fk=t(Xe);hi=r(fk,"??"),fk.forEach(e),ki=r(w," is called the "),Ss=a(w,"A",{href:!0,rel:!0});var mk=t(Ss);vi=r(mk,"nullish coalescing operator"),mk.forEach(e),yi=r(w,", it is like the "),Ze=a(w,"CODE",{class:!0});var xk=t(Ze);di=r(xk,"||"),xk.forEach(e),ui=r(w," that we used to use for defaulting a value "),so=a(w,"CODE",{class:!0});var wk=t(so);fi=r(wk,"foo || default"),wk.forEach(e),mi=r(w,", except that "),eo=a(w,"CODE",{class:!0});var gk=t(eo);xi=r(gk,"||"),gk.forEach(e),wi=r(w," will return the "),oo=a(w,"CODE",{class:!0});var Ek=t(oo);gi=r(Ek,"default"),Ek.forEach(e),Ei=r(w," as long as "),ao=a(w,"CODE",{class:!0});var _k=t(ao);_i=r(_k,"foo"),_k.forEach(e),bi=r(w," is falsy, whereas the nullish coalescing operator will only return "),to=a(w,"CODE",{class:!0});var bk=t(to);Oi=r(bk,"default"),bk.forEach(e),Si=r(w," when "),no=a(w,"CODE",{class:!0});var Ok=t(no);Ii=r(Ok,"foo"),Ok.forEach(e),Ci=r(w," is either "),ro=a(w,"CODE",{class:!0});var Sk=t(ro);Pi=r(Sk,"null"),Sk.forEach(e),Ti=r(w," or "),lo=a(w,"CODE",{class:!0});var Ik=t(lo);qi=r(Ik,"undefined"),Ik.forEach(e),ji=r(w,"."),w.forEach(e),Di=c(k),Is=a(k,"P",{});var Tt=t(Is);Li=r(Tt,"The parseKeyword will check whether the current "),io=a(Tt,"CODE",{class:!0});var Ck=t(io);Ni=r(Ck,"str.slice(i)"),Ck.forEach(e),Ai=r(Tt," matches the keyword string, if so, it will return the keyword value:"),Tt.forEach(e),Ji=c(k),po=a(k,"DIV",{class:!0});var yy=t(po);yy.forEach(e),Mi=c(k),Cs=a(k,"P",{});var qt=t(Cs);Ui=r(qt,"That's it for "),co=a(qt,"CODE",{class:!0});var Pk=t(co);Wi=r(Pk,"parseValue"),Pk.forEach(e),Hi=r(qt,"!"),qt.forEach(e),Vi=c(k),ka=a(k,"P",{});var Tk=t(ka);Bi=r(Tk,"We still have 3 more grammars to go, but I will save the length of this article, and implement them in the following CodeSandbox:"),Tk.forEach(e),Ri=c(k),q=a(k,"IFRAME",{src:!0,style:!0,title:!0,allow:!0,sandbox:!0}),t(q).forEach(e),$i=c(k),Ps=a(k,"P",{});var jt=t(Ps);Fi=r(jt,"After we have finished implementing all the grammars, now let's return the value of the json, which is return by the "),ho=a(jt,"CODE",{class:!0});var qk=t(ho);Gi=r(qk,"parseValue"),qk.forEach(e),Ki=r(jt,":"),jt.forEach(e),zi=c(k),ko=a(k,"DIV",{class:!0});var dy=t(ko);dy.forEach(e),Yi=c(k),va=a(k,"P",{});var jk=t(va);Qi=r(jk,"That's it!"),jk.forEach(e),Xi=c(k),ya=a(k,"P",{});var Dk=t(ya);Zi=r(Dk,"Well, not so fast my friend, we've just finished the happy path, what about unhappy path?"),Dk.forEach(e),k.forEach(e),it=c(l),M=a(l,"SECTION",{});var as=t(M);da=a(as,"H2",{});var Lk=t(da);Ts=a(Lk,"A",{href:!0,id:!0});var Nk=t(Ts);sp=r(Nk,"Handling the unexpected input"),Nk.forEach(e),Lk.forEach(e),ep=c(as),ua=a(as,"P",{});var Ak=t(ua);op=r(Ak,"As a good developer, we need to handle the unhappy path gracefully as well. For a parser, that means shouting at the developer with appropriate error message."),Ak.forEach(e),ap=c(as),fa=a(as,"P",{});var Jk=t(fa);tp=r(Jk,"Let's handle the 2 most common error cases:"),Jk.forEach(e),np=c(as),qs=a(as,"UL",{});var Dt=t(qs);ma=a(Dt,"LI",{});var Mk=t(ma);rp=r(Mk,"Unexpected token"),Mk.forEach(e),lp=c(Dt),xa=a(Dt,"LI",{});var Uk=t(xa);ip=r(Uk,"Unexpected end of string"),Uk.forEach(e),Dt.forEach(e),as.forEach(e),pt=c(l),vo=a(l,"SECTION",{});var Wk=t(vo);wa=a(Wk,"H3",{});var Hk=t(wa);js=a(Hk,"A",{href:!0,id:!0});var Vk=t(js);pp=r(Vk,"Unexpected token"),Vk.forEach(e),Hk.forEach(e),Wk.forEach(e),ct=c(l),j=a(l,"SECTION",{});var R=t(j);ga=a(R,"H3",{});var Bk=t(ga);Ds=a(Bk,"A",{href:!0,id:!0});var Rk=t(Ds);cp=r(Rk,"Unexpected end of string"),Rk.forEach(e),Bk.forEach(e),hp=c(R),Ls=a(R,"P",{});var Lt=t(Ls);kp=r(Lt,"In all the while loops, for example the while loop in "),yo=a(Lt,"CODE",{class:!0});var $k=t(yo);vp=r($k,"parseObject"),$k.forEach(e),yp=r(Lt,":"),Lt.forEach(e),dp=c(R),uo=a(R,"DIV",{class:!0});var uy=t(uo);uy.forEach(e),up=c(R),Ea=a(R,"P",{});var Fk=t(Ea);fp=r(Fk,`We need to make sure that we don't access the character beyond the length of the string. This happens when the string ended unexpectedly, while we are still waiting for a closing character, "}" in this example:`),Fk.forEach(e),mp=c(R),fo=a(R,"DIV",{class:!0});var fy=t(fo);fy.forEach(e),R.forEach(e),ht=c(l),C=a(l,"SECTION",{});var U=t(C);_a=a(U,"H2",{});var Gk=t(_a);Ns=a(Gk,"A",{href:!0,id:!0});var Kk=t(Ns);xp=r(Kk,"Going the extra mile"),Kk.forEach(e),Gk.forEach(e),wp=c(U),ba=a(U,"P",{});var zk=t(ba);gp=r(zk,"Do you remember the time you were a junior developer, every time when you encounter Syntax error with cryptic messages, you are completely clueless of what went wrong?"),zk.forEach(e),Ep=c(U),Oa=a(U,"P",{});var Yk=t(Oa);_p=r(Yk,"Now you are more experienced, it is time to stop this virtuous cycle and stop yelling"),Yk.forEach(e),bp=c(U),mo=a(U,"DIV",{class:!0});var my=t(mo);my.forEach(e),Op=c(U),Sa=a(U,"P",{});var Qk=t(Sa);Sp=r(Qk,"and leave the user staring at the screen confounded."),Qk.forEach(e),Ip=c(U),Ia=a(U,"P",{});var Xk=t(Ia);Cp=r(Xk,"There's a lot of better ways of handling error messages than yelling, here are some points you can consider adding to your parser:"),Xk.forEach(e),U.forEach(e),kt=c(l),B=a(l,"SECTION",{});var Co=t(B);Ca=a(Co,"H3",{});var Zk=t(Ca);As=a(Zk,"A",{href:!0,id:!0});var sv=t(As);Pp=r(sv,"Error code and standard error message"),sv.forEach(e),Zk.forEach(e),Tp=c(Co),Pa=a(Co,"P",{});var ev=t(Pa);qp=r(ev,"This is useful as a standard keyword for user to Google for help."),ev.forEach(e),jp=c(Co),xo=a(Co,"DIV",{class:!0});var xy=t(xo);xy.forEach(e),Co.forEach(e),vt=c(l),D=a(l,"SECTION",{});var $=t(D);Ta=a($,"H3",{});var ov=t(Ta);Js=a(ov,"A",{href:!0,id:!0});var av=t(Js);Dp=r(av,"A better view of what went wrong"),av.forEach(e),ov.forEach(e),Lp=c($),qa=a($,"P",{});var tv=t(qa);Np=r(tv,"Parser like Babel, will show you a code frame, a snippet of your code with underline, arrow or highlighting of what went wrong"),tv.forEach(e),Ap=c($),wo=a($,"DIV",{class:!0});var wy=t(wo);wy.forEach(e),Jp=c($),ja=a($,"P",{});var nv=t(ja);Mp=r(nv,"An example on how you can print out the code snippet:"),nv.forEach(e),Up=c($),go=a($,"DIV",{class:!0});var gy=t(go);gy.forEach(e),$.forEach(e),yt=c(l),x=a(l,"SECTION",{});var b=t(x);Da=a(b,"H3",{});var rv=t(Da);Ms=a(rv,"A",{href:!0,id:!0});var lv=t(Ms);Wp=r(lv,"Suggestions for error recovery"),lv.forEach(e),rv.forEach(e),Hp=c(b),La=a(b,"P",{});var iv=t(La);Vp=r(iv,"If possible, explain what went wrong and give suggestions on how to fix them"),iv.forEach(e),Bp=c(b),Eo=a(b,"DIV",{class:!0});var Ey=t(Eo);Ey.forEach(e),Rp=c(b),Na=a(b,"P",{});var pv=t(Na);$p=r(pv,"If possible, provide suggestions based on the context that the parser has collected so far"),pv.forEach(e),Fp=c(b),_o=a(b,"DIV",{class:!0});var _y=t(_o);_y.forEach(e),Gp=c(b),Aa=a(b,"P",{});var cv=t(Aa);Kp=r(cv,"The suggestion that based on the context will feel more relatable and actionable."),cv.forEach(e),zp=c(b),Ja=a(b,"P",{});var hv=t(Ja);Yp=r(hv,"With all the suggestions in mind, check out the updated CodeSandbox with"),hv.forEach(e),Qp=c(b),Y=a(b,"UL",{});var Po=t(Y);Ma=a(Po,"LI",{});var kv=t(Ma);Xp=r(kv,"Meaningful error message"),kv.forEach(e),Zp=c(Po),Ua=a(Po,"LI",{});var vv=t(Ua);sc=r(vv,"Code snippet with error pointing point of failure"),vv.forEach(e),ec=c(Po),Wa=a(Po,"LI",{});var yv=t(Wa);oc=r(yv,"Provide suggestions for error recovery"),yv.forEach(e),Po.forEach(e),ac=c(b),L=a(b,"IFRAME",{src:!0,style:!0,title:!0,allow:!0,sandbox:!0}),t(L).forEach(e),tc=c(b),Q=a(b,"P",{});var To=t(Q);nc=r(To,"Also, read the "),Us=a(To,"A",{href:!0,rel:!0});var dv=t(Us);rc=r(dv,'"Compiler Errors for Humans"'),dv.forEach(e),lc=r(To," by "),Ws=a(To,"A",{href:!0,rel:!0});var uv=t(Ws);ic=r(uv,"Evan Czaplicki"),uv.forEach(e),pc=r(To," for how Elm improves the UX problems of the Elm compiler."),To.forEach(e),b.forEach(e),dt=c(l),_=a(l,"SECTION",{});var P=t(_);Ha=a(P,"H2",{});var fv=t(Ha);Hs=a(fv,"A",{href:!0,id:!0});var mv=t(Hs);cc=r(mv,"Summary"),mv.forEach(e),fv.forEach(e),hc=c(P),Va=a(P,"P",{});var xv=t(Va);kc=r(xv,"To implement a parser, you need to start with the grammar."),xv.forEach(e),vc=c(P),Ba=a(P,"P",{});var wv=t(Ba);yc=r(wv,"You can formalise the grammar with the railroad diagrams or the Backus-Naur Form. Designing the grammar is the hardest step."),wv.forEach(e),dc=c(P),Ra=a(P,"P",{});var gv=t(Ra);uc=r(gv,"Once you've settled with the grammar, you can start implementing the parser based on it."),gv.forEach(e),fc=c(P),$a=a(P,"P",{});var Ev=t($a);mc=r(Ev,"Error handling is important, what's more important is to have meaningful error messages, so that the user knows how to fix it."),Ev.forEach(e),xc=c(P),Fa=a(P,"P",{});var _v=t(Fa);wc=r(_v,"Now you know how a simple parser is implemented, it's time to set eyes on a more complex one:"),_v.forEach(e),gc=c(P),Vs=a(P,"UL",{});var Nt=t(Vs);Ga=a(Nt,"LI",{});var bv=t(Ga);Bs=a(bv,"A",{href:!0,rel:!0});var Ov=t(Bs);Ec=r(Ov,"Babel parser"),Ov.forEach(e),bv.forEach(e),_c=c(Nt),Ka=a(Nt,"LI",{});var Sv=t(Ka);Rs=a(Sv,"A",{href:!0,rel:!0});var Iv=t(Rs);bc=r(Iv,"Svelte parser"),Iv.forEach(e),Sv.forEach(e),Nt.forEach(e),Oc=c(P),$s=a(P,"P",{});var At=t($s);Sc=r(At,"Lastly, do follow "),Fs=a(At,"A",{href:!0,rel:!0});var Cv=t(Fs);Ic=r(Cv,"@cassidoo"),Cv.forEach(e),Cc=r(At,", her weekly newsletter is awesome!"),At.forEach(e),P.forEach(e),this.h()},h(){i(ns,"class","code-section"),i(rs,"class","code-section"),i(Ys,"href","/creating-custom-javascript-syntax-with-babel"),i(Qs,"href","/step-by-step-guide-for-writing-a-babel-transformation"),i(Xs,"href","/manipulating-ast-with-javascript"),i(ls,"href","https://www.json.org/json-en.html"),i(ls,"rel","nofollow"),i(is,"href","#understand-the-grammar"),i(is,"id","understand-the-grammar"),i(cs,"href","https://www.json.org/json-en.html"),i(cs,"rel","nofollow"),i(hs,"href","https://en.wikipedia.org/wiki/Syntax_diagram"),i(hs,"rel","nofollow"),qo(ae.src,jc="https://www.json.org/img/object.png")||i(ae,"src",jc),i(ae,"alt","https://www.json.org/img/object.png"),i(ks,"href","https://www.crockford.com/mckeeman.html"),i(ks,"rel","nofollow"),i(vs,"href","https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form"),i(vs,"rel","nofollow"),i(te,"class","code-section"),qo(ne.src,Dc="https://www.json.org/img/object.png")||i(ne,"src",Dc),i(ne,"alt","https://www.json.org/img/object.png"),i(re,"class","inline"),i(le,"class","inline"),i(ie,"class","inline"),i(pe,"class","inline"),i(ce,"class","inline"),i(he,"class","inline"),i(ke,"class","inline"),i(ve,"class","inline"),i(ye,"class","inline"),i(de,"class","inline"),i(ue,"class","inline"),i(fe,"class","inline"),i(me,"class","inline"),i(xe,"class","inline"),i(we,"class","inline"),i(ge,"class","inline"),i(Ee,"class","inline"),i(_e,"class","inline"),i(be,"class","inline"),i(Oe,"class","inline"),i(ws,"href","#implementing-the-parser"),i(ws,"id","implementing-the-parser"),i(Se,"class","code-section"),i(Ie,"class","inline"),i(Ce,"class","inline"),i(Pe,"class","inline"),i(qe,"class","code-section"),i(je,"class","inline"),i(De,"class","inline"),i(Le,"class","inline"),i(Ne,"class","inline"),i(Ae,"class","inline"),i(Je,"class","inline"),i(Me,"class","inline"),i(Ue,"class","code-section"),i(We,"class","inline"),i(He,"class","inline"),i(Ve,"class","inline"),i(Be,"class","inline"),i(Re,"class","inline"),i($e,"class","code-section"),i(Fe,"class","inline"),i(Ge,"class","code-section"),qo(Ke.src,Lc="https://www.json.org/img/array.png")||i(Ke,"src",Lc),i(Ke,"alt","https://www.json.org/img/array.png"),i(ze,"class","code-section"),qo(Ye.src,Nc="https://www.json.org/img/value.png")||i(Ye,"src",Nc),i(Ye,"alt","https://www.json.org/img/value.png"),i(Qe,"class","code-section"),i(Xe,"class","inline"),i(Ss,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator"),i(Ss,"rel","nofollow"),i(Ze,"class","inline"),i(so,"class","inline"),i(eo,"class","inline"),i(oo,"class","inline"),i(ao,"class","inline"),i(to,"class","inline"),i(no,"class","inline"),i(ro,"class","inline"),i(lo,"class","inline"),i(io,"class","inline"),i(po,"class","code-section"),i(co,"class","inline"),qo(q.src,Ac="https://codesandbox.io/embed/json-parser-k4c3w?expanddevtools=1&fontsize=14&hidenavigation=1&theme=dark&view=editor")||i(q,"src",Ac),F(q,"width","100%"),F(q,"height","500px"),F(q,"border","0"),F(q,"border-radius","4px"),F(q,"overflow","hidden"),i(q,"title","JSON parser"),i(q,"allow","geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb"),i(q,"sandbox","allow-modals allow-forms allow-popups allow-scripts allow-same-origin"),i(ho,"class","inline"),i(ko,"class","code-section"),i(Ts,"href","#handling-the-unexpected-input"),i(Ts,"id","handling-the-unexpected-input"),i(js,"href","#unexpected-token"),i(js,"id","unexpected-token"),i(Ds,"href","#unexpected-end-of-string"),i(Ds,"id","unexpected-end-of-string"),i(yo,"class","inline"),i(uo,"class","code-section"),i(fo,"class","code-section"),i(Ns,"href","#going-the-extra-mile"),i(Ns,"id","going-the-extra-mile"),i(mo,"class","code-section"),i(As,"href","#error-code-and-standard-error-message"),i(As,"id","error-code-and-standard-error-message"),i(xo,"class","code-section"),i(Js,"href","#a-better-view-of-what-went-wrong"),i(Js,"id","a-better-view-of-what-went-wrong"),i(wo,"class","code-section"),i(go,"class","code-section"),i(Ms,"href","#suggestions-for-error-recovery"),i(Ms,"id","suggestions-for-error-recovery"),i(Eo,"class","code-section"),i(_o,"class","code-section"),qo(L.src,Jc="https://codesandbox.io/embed/json-parser-hjwxk?expanddevtools=1&fontsize=14&hidenavigation=1&theme=dark&view=editor")||i(L,"src",Jc),F(L,"width","100%"),F(L,"height","500px"),F(L,"border","0"),F(L,"border-radius","4px"),F(L,"overflow","hidden"),i(L,"title","JSON parser (with error handling)"),i(L,"allow","geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb"),i(L,"sandbox","allow-modals allow-forms allow-popups allow-scripts allow-same-origin"),i(Us,"href","https://elm-lang.org/news/compiler-errors-for-humans"),i(Us,"rel","nofollow"),i(Ws,"href","https://twitter.com/czaplic"),i(Ws,"rel","nofollow"),i(Hs,"href","#summary"),i(Hs,"id","summary"),i(Bs,"href","https://github.com/babel/babel/tree/master/packages/babel-parser"),i(Bs,"rel","nofollow"),i(Rs,"href","https://github.com/sveltejs/svelte/tree/master/src/compiler/parse"),i(Rs,"rel","nofollow"),i(Fs,"href","https://twitter.com/cassidoo"),i(Fs,"rel","nofollow")},m(l,y){Lv(m,l,y),u(l,W,y),u(l,J,y),s(J,ts),u(l,g,y),u(l,T,y),s(T,X),s(X,Jt),u(l,Qa,y),u(l,ns,y),ns.innerHTML=Mv,u(l,Xa,y),u(l,Ks,y),s(Ks,Mt),u(l,Za,y),u(l,rs,y),rs.innerHTML=Uv,u(l,st,y),u(l,zs,y),s(zs,Ut),u(l,et,y),u(l,V,y),s(V,jo),s(jo,Ys),s(Ys,Wt),s(V,Ht),s(V,Do),s(Do,Qs),s(Qs,Vt),s(V,Bt),s(V,Lo),s(Lo,Xs),s(Xs,Rt),u(l,ot,y),u(l,Zs,y),s(Zs,$t),u(l,at,y),u(l,se,y),s(se,Ft),u(l,tt,y),u(l,Z,y),s(Z,Gt),s(Z,ls),s(ls,Kt),s(Z,zt),u(l,nt,y),u(l,ee,y),s(ee,Yt),u(l,rt,y),u(l,v,y),s(v,No),s(No,is),s(is,Qt),s(v,Xt),s(v,ps),s(ps,Zt),s(ps,cs),s(cs,sn),s(ps,en),s(v,on),s(v,Ao),s(Ao,oe),s(oe,hs),s(hs,an),s(oe,tn),s(v,nn),s(v,Jo),s(Jo,ae),s(v,rn),s(v,Mo),s(Mo,ln),s(v,pn),s(v,Uo),s(Uo,ss),s(ss,ks),s(ks,cn),s(ss,hn),s(ss,vs),s(vs,kn),s(ss,vn),s(v,yn),s(v,te),te.innerHTML=Wv,s(v,dn),s(v,Wo),s(Wo,un),s(v,fn),s(v,Ho),s(Ho,mn),s(v,xn),s(v,Vo),s(Vo,wn),s(v,gn),s(v,Bo),s(Bo,En),s(v,_n),s(v,Ro),s(Ro,ne),s(v,bn),s(v,$o),s($o,On),s(v,Sn),s(v,ys),s(ys,In),s(ys,Fo),s(Fo,Cn),s(ys,Pn),s(v,Tn),s(v,Go),s(Go,qn),s(v,jn),s(v,E),s(E,Dn),s(E,re),s(re,Ln),s(E,Nn),s(E,le),s(le,An),s(E,Jn),s(E,ie),s(ie,Mn),s(E,Un),s(E,pe),s(pe,Wn),s(E,Hn),s(E,ce),s(ce,Vn),s(E,Bn),s(E,he),s(he,Rn),s(E,$n),s(E,ke),s(ke,Fn),s(E,Gn),s(E,Ko),s(Ko,Kn),s(E,zn),s(v,Yn),s(v,ds),s(ds,Qn),s(ds,ve),s(ve,Xn),s(ds,Zn),s(v,sr),s(v,us),s(us,es),s(es,ye),s(ye,er),s(es,or),s(es,de),s(de,ar),s(es,tr),s(us,nr),s(us,I),s(I,ue),s(ue,rr),s(I,lr),s(I,fe),s(fe,ir),s(I,pr),s(I,me),s(me,cr),s(I,hr),s(I,xe),s(xe,kr),s(I,vr),s(I,we),s(we,yr),s(I,dr),s(I,ge),s(ge,ur),s(I,fr),s(v,mr),s(v,zo),s(zo,xr),s(v,wr),s(v,fs),s(fs,ms),s(ms,gr),s(ms,Ee),s(Ee,Er),s(ms,_r),s(fs,br),s(fs,G),s(G,Or),s(G,_e),s(_e,Sr),s(G,Ir),s(G,be),s(be,Cr),s(G,Pr),s(v,Tr),s(v,Yo),s(Yo,qr),s(v,jr),s(v,Qo),s(Qo,xs),s(xs,Dr),s(xs,Oe),s(Oe,Lr),s(xs,Nr),s(v,Ar),s(v,Xo),s(Xo,Jr),u(l,lt,y),u(l,h,y),s(h,Zo),s(Zo,ws),s(ws,Mr),s(h,Ur),s(h,sa),s(sa,Wr),s(h,Hr),s(h,Se),Se.innerHTML=Hv,s(h,Vr),s(h,H),s(H,Br),s(H,Ie),s(Ie,Rr),s(H,$r),s(H,Ce),s(Ce,Fr),s(H,Gr),s(H,Pe),s(Pe,Kr),s(H,zr),s(h,Yr),s(h,Te),s(Te,Qr),s(Te,ea),s(ea,Xr),s(h,Zr),s(h,qe),qe.innerHTML=Vv,s(h,sl),s(h,gs),s(gs,el),s(gs,je),s(je,ol),s(gs,al),s(h,tl),s(h,S),s(S,nl),s(S,De),s(De,rl),s(S,ll),s(S,Le),s(Le,il),s(S,pl),s(S,Ne),s(Ne,cl),s(S,hl),s(S,Ae),s(Ae,kl),s(S,vl),s(S,Je),s(Je,yl),s(S,dl),s(S,Me),s(Me,ul),s(S,fl),s(h,ml),s(h,oa),s(oa,xl),s(h,wl),s(h,Ue),Ue.innerHTML=Bv,s(h,gl),s(h,aa),s(aa,El),s(h,_l),s(h,K),s(K,Es),s(Es,bl),s(Es,We),s(We,Ol),s(Es,Sl),s(K,Il),s(K,_s),s(_s,Cl),s(_s,He),s(He,Pl),s(_s,Tl),s(K,ql),s(K,bs),s(bs,jl),s(bs,Ve),s(Ve,Dl),s(bs,Ll),s(h,Nl),s(h,z),s(z,Al),s(z,Be),s(Be,Jl),s(z,Ml),s(z,Re),s(Re,Ul),s(z,Wl),s(h,Hl),s(h,$e),$e.innerHTML=Rv,s(h,Vl),s(h,Os),s(Os,Bl),s(Os,Fe),s(Fe,Rl),s(Os,$l),s(h,Fl),s(h,ta),s(ta,Gl),s(h,Kl),s(h,Ge),Ge.innerHTML=$v,s(h,zl),s(h,na),s(na,Yl),s(h,Ql),s(h,ra),s(ra,Ke),s(h,Xl),s(h,la),s(la,Zl),s(h,si),s(h,ze),ze.innerHTML=Fv,s(h,ei),s(h,ia),s(ia,oi),s(h,ai),s(h,pa),s(pa,Ye),s(h,ti),s(h,ca),s(ca,ni),s(h,ri),s(h,ha),s(ha,li),s(h,ii),s(h,Qe),Qe.innerHTML=Gv,s(h,pi),s(h,f),s(f,ci),s(f,Xe),s(Xe,hi),s(f,ki),s(f,Ss),s(Ss,vi),s(f,yi),s(f,Ze),s(Ze,di),s(f,ui),s(f,so),s(so,fi),s(f,mi),s(f,eo),s(eo,xi),s(f,wi),s(f,oo),s(oo,gi),s(f,Ei),s(f,ao),s(ao,_i),s(f,bi),s(f,to),s(to,Oi),s(f,Si),s(f,no),s(no,Ii),s(f,Ci),s(f,ro),s(ro,Pi),s(f,Ti),s(f,lo),s(lo,qi),s(f,ji),s(h,Di),s(h,Is),s(Is,Li),s(Is,io),s(io,Ni),s(Is,Ai),s(h,Ji),s(h,po),po.innerHTML=Kv,s(h,Mi),s(h,Cs),s(Cs,Ui),s(Cs,co),s(co,Wi),s(Cs,Hi),s(h,Vi),s(h,ka),s(ka,Bi),s(h,Ri),s(h,q),s(h,$i),s(h,Ps),s(Ps,Fi),s(Ps,ho),s(ho,Gi),s(Ps,Ki),s(h,zi),s(h,ko),ko.innerHTML=zv,s(h,Yi),s(h,va),s(va,Qi),s(h,Xi),s(h,ya),s(ya,Zi),u(l,it,y),u(l,M,y),s(M,da),s(da,Ts),s(Ts,sp),s(M,ep),s(M,ua),s(ua,op),s(M,ap),s(M,fa),s(fa,tp),s(M,np),s(M,qs),s(qs,ma),s(ma,rp),s(qs,lp),s(qs,xa),s(xa,ip),u(l,pt,y),u(l,vo,y),s(vo,wa),s(wa,js),s(js,pp),u(l,ct,y),u(l,j,y),s(j,ga),s(ga,Ds),s(Ds,cp),s(j,hp),s(j,Ls),s(Ls,kp),s(Ls,yo),s(yo,vp),s(Ls,yp),s(j,dp),s(j,uo),uo.innerHTML=Yv,s(j,up),s(j,Ea),s(Ea,fp),s(j,mp),s(j,fo),fo.innerHTML=Qv,u(l,ht,y),u(l,C,y),s(C,_a),s(_a,Ns),s(Ns,xp),s(C,wp),s(C,ba),s(ba,gp),s(C,Ep),s(C,Oa),s(Oa,_p),s(C,bp),s(C,mo),mo.innerHTML=Xv,s(C,Op),s(C,Sa),s(Sa,Sp),s(C,Ip),s(C,Ia),s(Ia,Cp),u(l,kt,y),u(l,B,y),s(B,Ca),s(Ca,As),s(As,Pp),s(B,Tp),s(B,Pa),s(Pa,qp),s(B,jp),s(B,xo),xo.innerHTML=Zv,u(l,vt,y),u(l,D,y),s(D,Ta),s(Ta,Js),s(Js,Dp),s(D,Lp),s(D,qa),s(qa,Np),s(D,Ap),s(D,wo),wo.innerHTML=sy,s(D,Jp),s(D,ja),s(ja,Mp),s(D,Up),s(D,go),go.innerHTML=ey,u(l,yt,y),u(l,x,y),s(x,Da),s(Da,Ms),s(Ms,Wp),s(x,Hp),s(x,La),s(La,Vp),s(x,Bp),s(x,Eo),Eo.innerHTML=oy,s(x,Rp),s(x,Na),s(Na,$p),s(x,Fp),s(x,_o),_o.innerHTML=ay,s(x,Gp),s(x,Aa),s(Aa,Kp),s(x,zp),s(x,Ja),s(Ja,Yp),s(x,Qp),s(x,Y),s(Y,Ma),s(Ma,Xp),s(Y,Zp),s(Y,Ua),s(Ua,sc),s(Y,ec),s(Y,Wa),s(Wa,oc),s(x,ac),s(x,L),s(x,tc),s(x,Q),s(Q,nc),s(Q,Us),s(Us,rc),s(Q,lc),s(Q,Ws),s(Ws,ic),s(Q,pc),u(l,dt,y),u(l,_,y),s(_,Ha),s(Ha,Hs),s(Hs,cc),s(_,hc),s(_,Va),s(Va,kc),s(_,vc),s(_,Ba),s(Ba,yc),s(_,dc),s(_,Ra),s(Ra,uc),s(_,fc),s(_,$a),s($a,mc),s(_,xc),s(_,Fa),s(Fa,wc),s(_,gc),s(_,Vs),s(Vs,Ga),s(Ga,Bs),s(Bs,Ec),s(Vs,_c),s(Vs,Ka),s(Ka,Rs),s(Rs,bc),s(_,Oc),s(_,$s),s($s,Sc),s($s,Fs),s(Fs,Ic),s($s,Cc),ut=!0},p:Py,i(l){ut||(Nv(m.$$.fragment,l),ut=!0)},o(l){Av(m.$$.fragment,l),ut=!1},d(l){Jv(m,l),l&&e(W),l&&e(J),l&&e(g),l&&e(T),l&&e(Qa),l&&e(ns),l&&e(Xa),l&&e(Ks),l&&e(Za),l&&e(rs),l&&e(st),l&&e(zs),l&&e(et),l&&e(V),l&&e(ot),l&&e(Zs),l&&e(at),l&&e(se),l&&e(tt),l&&e(Z),l&&e(nt),l&&e(ee),l&&e(rt),l&&e(v),l&&e(lt),l&&e(h),l&&e(it),l&&e(M),l&&e(pt),l&&e(vo),l&&e(ct),l&&e(j),l&&e(ht),l&&e(C),l&&e(kt),l&&e(B),l&&e(vt),l&&e(D),l&&e(yt),l&&e(x),l&&e(dt),l&&e(_)}}}function Ly(Gs){let m,W;const J=[Gs[0],qv];let ts={$$slots:{default:[Dy]},$$scope:{ctx:Gs}};for(let g=0;g<J.length;g+=1)ts=qc(ts,J[g]);return m=new Ty({props:ts}),{c(){jv(m.$$.fragment)},l(g){Dv(m.$$.fragment,g)},m(g,T){Lv(m,g,T),W=!0},p(g,[T]){const X=T&1?Iy(J,[T&1&&Pv(g[0]),T&0&&Pv(qv)]):{};T&2&&(X.$$scope={dirty:T,ctx:g}),m.$set(X)},i(g){W||(Nv(m.$$.fragment,g),W=!0)},o(g){Av(m.$$.fragment,g),W=!1},d(g){Jv(m,g)}}}const qv={title:"JSON Parser with JavaScript",date:"2019-12-12T08:00:00Z",description:"Step-by-step guide on implementing a JSON parser",tags:["JavaScript","AST"],series:"AST",label:"blog"};function Ny(Gs,m,W){return Cy("blog",{image:jy}),Gs.$$set=J=>{W(0,m=qc(qc({},m),Tv(J)))},m=Tv(m),[m]}class Vy extends by{constructor(m){super();Oy(this,m,Ny,Ly,Sy,{})}}export{Vy as default,qv as metadata};
