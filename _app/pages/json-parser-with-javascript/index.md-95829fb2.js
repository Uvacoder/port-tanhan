import{S as dy,i as uy,s as fy,C as Cc,w as my,x as xy,y as wy,z as gy,A as Sv,q as Ey,o as _y,B as by,r as Oy,Y as Iv,e as o,t as n,k as p,c as a,a as t,h as r,d as e,m as c,b as l,X as To,f as K,g as u,H as s,J as Sy}from"../../chunks/vendor-da4388d4.js";import{B as Iy}from"../../chunks/BlogLayout-86707f1c.js";import"../../chunks/stores-1fad7c36.js";import"../../chunks/ldjson-b0805387.js";/* empty css                                */var Cy="/_app/assets/hero-twitter-57f7bb48.jpg";function Py(Ks){let w,H,W,V,g,M,ts,ns,Pv='<pre class="prism language-"><code><span class="line">fakeParseJSON(&#39;&#123; &quot;data&quot;: &#123; &quot;fish&quot;: &quot;cake&quot;, &quot;array&quot;: [1,2,3], &quot;children&quot;: [ &#123; &quot;something&quot;: &quot;else&quot; &#125;, &#123; &quot;candy&quot;: &quot;cane&quot; &#125;, &#123; &quot;sponge&quot;: &quot;bob&quot; &#125; ] &#125; &#125; &#39;)</span></code></pre>',Xa,$s,Nt,Qa,rs,qv='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fakeParseJSON</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">parse</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>',Za,zs,At,st,B,jo,Ys,Jt,Mt,Do,Xs,Ut,Ht,Lo,Qs,Wt,et,Zs,Vt,ot,se,Bt,at,Z,Rt,ls,Ft,Gt,tt,ee,Kt,nt,v,No,is,$t,zt,ps,Yt,cs,Xt,Qt,Zt,Ao,oe,hs,sn,en,on,Jo,ae,Pc,an,Mo,tn,nn,Uo,ss,ks,rn,ln,vs,pn,cn,hn,te,Tv=`<pre class="prism language-"><code><span class="line">json</span>
<span class="line">  element</span>
<span class="line"></span>
<span class="line">value</span>
<span class="line">  object</span>
<span class="line">  array</span>
<span class="line">  string</span>
<span class="line">  number</span>
<span class="line">  &quot;true&quot;</span>
<span class="line">  &quot;false&quot;</span>
<span class="line">  &quot;null&quot;</span>
<span class="line"></span>
<span class="line">object</span>
<span class="line">  &#39;&#123;&#39; ws &#39;&#125;&#39;</span>
<span class="line">  &#39;&#123;&#39; members &#39;&#125;&#39;</span></code></pre>`,kn,Ho,vn,yn,Wo,dn,un,Vo,fn,mn,Bo,xn,wn,Ro,ne,qc,gn,Fo,En,_n,ys,bn,Go,On,Sn,In,Ko,Cn,Pn,E,qn,re,Tn,jn,le,Dn,Ln,ie,Nn,An,pe,Jn,Mn,ce,Un,Hn,he,Wn,Vn,ke,Bn,Rn,$o,Fn,Gn,Kn,ds,$n,ve,zn,Yn,Xn,us,es,ye,Qn,Zn,de,sr,er,or,I,ue,ar,tr,fe,nr,rr,me,lr,ir,xe,pr,cr,we,hr,kr,ge,vr,yr,dr,zo,ur,fr,fs,ms,mr,Ee,xr,wr,gr,$,Er,_e,_r,br,be,Or,Sr,Ir,Yo,Cr,Pr,Xo,xs,qr,Oe,Tr,jr,Dr,Qo,Lr,rt,h,Zo,ws,Nr,Ar,sa,Jr,Mr,Se,jv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// TODO</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ur,U,Hr,Ie,Wr,Vr,Ce,Br,Rr,Pe,Fr,Gr,Kr,qe,$r,ea,zr,Yr,Te,Dv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseObject</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (str[i] </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#123;&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// if it is not &#39;&#125;&#39;,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// we take the path of string -&gt; whitespace -&gt; &#39;:&#39; -&gt; value -&gt; ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">while</span><span style="color: var(--shiki-color-text)"> (str[i] </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#125;&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">key</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseString</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">eatColon</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">value</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseValue</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Xr,gs,Qr,je,Zr,sl,el,S,ol,De,al,tl,Le,nl,rl,Ne,ll,il,Ae,pl,cl,Je,hl,kl,Me,vl,yl,dl,oa,ul,fl,Ue,Lv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseObject</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (str[i] </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#123;&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> initial </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// if it is not &#39;&#125;&#39;,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// we take the path of string -&gt; whitespace -&gt; &#39;:&#39; -&gt; value -&gt; ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">while</span><span style="color: var(--shiki-color-text)"> (str[i] </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#125;&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">initial) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">eatComma</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">key</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseString</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">eatColon</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">value</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseValue</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        initial </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// move to the next character of &#39;&#125;&#39;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ml,aa,xl,wl,z,Es,gl,He,El,_l,bl,_s,Ol,We,Sl,Il,Cl,bs,Pl,Ve,ql,Tl,jl,Y,Dl,Be,Ll,Nl,Re,Al,Jl,Ml,Fe,Nv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">eatComma</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (str[i] </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;,&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Expected &quot;,&quot;.&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">eatColon</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (str[i] </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;:&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Expected &quot;:&quot;.&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ul,Os,Hl,Ge,Wl,Vl,Bl,ta,Rl,Fl,Ke,Av=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseObject</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (str[i] </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#123;&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">result</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;&#125;;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> initial </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// if it is not &#39;&#125;&#39;,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// we take the path of string -&gt; whitespace -&gt; &#39;:&#39; -&gt; value -&gt; ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">while</span><span style="color: var(--shiki-color-text)"> (str[i] </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#125;&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">initial) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">eatComma</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">key</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseString</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">eatColon</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">value</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseValue</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        result[key] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> value;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        initial </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// move to the next character of &#39;&#125;&#39;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> result;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Gl,na,Kl,$l,ra,$e,Tc,zl,la,Yl,Xl,ze,Jv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseArray</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (str[i] </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;[&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">result</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> initial </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">while</span><span style="color: var(--shiki-color-text)"> (str[i] </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;]&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">initial) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">eatComma</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">value</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseValue</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">result</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(value);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        initial </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// move to the next character of &#39;]&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> result;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ql,ia,Zl,si,pa,Ye,jc,ei,ca,oi,ai,ha,ti,ni,Xe,Mv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseValue</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">value</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">parseString</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">??</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">parseNumber</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">??</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">parseObject</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">??</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">parseArray</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">??</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">parseKeyword</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;true&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">??</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">parseKeyword</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;false&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">??</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">parseKeyword</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;null&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">skipWhitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> value;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ri,f,li,Qe,ii,pi,Ss,ci,hi,Ze,ki,vi,so,yi,di,eo,ui,fi,oo,mi,xi,ao,wi,gi,to,Ei,_i,no,bi,Oi,ro,Si,Ii,lo,Ci,Pi,qi,Is,Ti,io,ji,Di,Li,po,Uv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseKeyword</span><span style="color: var(--shiki-color-text)">(name</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">str</span><span style="color: var(--shiki-token-function)">.slice</span><span style="color: var(--shiki-color-text)">(i</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">name</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> name) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      i </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">name</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> value;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ni,Cs,Ai,co,Ji,Mi,Ui,ka,Hi,Wi,q,Dc,Vi,Ps,Bi,ho,Ri,Fi,Gi,ko,Hv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseValue</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ki,va,$i,zi,ya,Yi,lt,A,da,qs,Xi,Qi,ua,Zi,sp,fa,ep,op,Ts,ma,ap,tp,xa,np,it,vo,wa,js,rp,pt,T,ga,Ds,lp,ip,Ls,pp,yo,cp,hp,kp,uo,Wv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseObject</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">while</span><span style="color: var(--shiki-color-text)">(str[i] </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#125;&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span></code></pre>`,vp,Ea,yp,dp,fo,Vv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parseObject</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">while</span><span style="color: var(--shiki-color-text)"> (i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">str</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> str[i] </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#125;&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">checkUnexpectedEndOfInput</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// move to the next character of &#39;&#125;&#39;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> result;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ct,C,_a,Ns,up,fp,ba,mp,xp,Oa,wp,gp,mo,Bv='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">Unexpected token </span><span style="color: var(--shiki-token-string-expression)">&quot;a&quot;</span></span></code></pre>',Ep,Sa,_p,bp,Ia,Op,ht,R,Ca,As,Sp,Ip,Pa,Cp,Pp,xo,Rv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// instead of</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">Unexpected token </span><span style="color: var(--shiki-token-string-expression)">&quot;a&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">Unexpected end </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> input</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// show</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">JSON_ERROR_001</span><span style="color: var(--shiki-color-text)"> Unexpected token </span><span style="color: var(--shiki-token-string-expression)">&quot;a&quot;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">JSON_ERROR_002</span><span style="color: var(--shiki-color-text)"> Unexpected end </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> input</span></span></code></pre>`,kt,j,qa,Js,qp,Tp,Ta,jp,Dp,wo,Fv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// instead of</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">Unexpected token </span><span style="color: var(--shiki-token-string-expression)">&quot;a&quot;</span><span style="color: var(--shiki-color-text)"> at position </span><span style="color: var(--shiki-token-constant)">5</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// show</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#123; </span><span style="color: var(--shiki-token-string-expression)">&quot;b&quot;</span><span style="color: var(--shiki-color-text)">a</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">^</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">JSON_ERROR_001</span><span style="color: var(--shiki-color-text)"> Unexpected token </span><span style="color: var(--shiki-token-string-expression)">&quot;a&quot;</span></span></code></pre>`,Lp,ja,Np,Ap,go,Gv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(str) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">printCodeSnippet</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Math</span><span style="color: var(--shiki-token-function)">.max</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">trimmed</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> from </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">padding</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (trimmed </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> (i </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> from);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">snippet</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      (trimmed </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;...&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">str</span><span style="color: var(--shiki-token-function)">.slice</span><span style="color: var(--shiki-color-text)">(from</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#39; &#39;</span><span style="color: var(--shiki-token-function)">.repeat</span><span style="color: var(--shiki-color-text)">(padding) </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;^&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#39; &#39;</span><span style="color: var(--shiki-token-function)">.repeat</span><span style="color: var(--shiki-color-text)">(padding) </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> message</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    ]</span><span style="color: var(--shiki-token-function)">.join</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#92;n&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(snippet);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,vt,m,Da,Ms,Jp,Mp,La,Up,Hp,Eo,Kv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// instead of</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">Unexpected token </span><span style="color: var(--shiki-token-string-expression)">&quot;a&quot;</span><span style="color: var(--shiki-color-text)"> at position </span><span style="color: var(--shiki-token-constant)">5</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// show</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#123; </span><span style="color: var(--shiki-token-string-expression)">&quot;b&quot;</span><span style="color: var(--shiki-color-text)">a</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">^</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">JSON_ERROR_001</span><span style="color: var(--shiki-color-text)"> Unexpected token </span><span style="color: var(--shiki-token-string-expression)">&quot;a&quot;</span><span style="color: var(--shiki-color-text)">.</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">Expecting a </span><span style="color: var(--shiki-token-string-expression)">&quot;:&quot;</span><span style="color: var(--shiki-color-text)"> over here</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> eg</span><span style="color: var(--shiki-token-punctuation)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#123; </span><span style="color: var(--shiki-token-string-expression)">&quot;b&quot;</span><span style="color: var(--shiki-color-text)">: </span><span style="color: var(--shiki-token-string-expression)">&quot;bar&quot;</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">^</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">You can learn more about valid </span><span style="color: var(--shiki-token-constant)">JSON</span><span style="color: var(--shiki-color-text)"> string </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> http</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-token-comment)">//goo.gl/xxxxx</span></span></code></pre>`,Wp,Na,Vp,Bp,_o,$v=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">fakeParseJSON</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&quot;Lorem ipsum&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// instead of</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">Expecting a </span><span style="color: var(--shiki-token-string-expression)">&#96;&quot;&#96;</span><span style="color: var(--shiki-color-text)"> over here</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> eg</span><span style="color: var(--shiki-token-punctuation)">:</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&quot;Foo Bar&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">^</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// show</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">Expecting a </span><span style="color: var(--shiki-token-string-expression)">&#96;&quot;&#96;</span><span style="color: var(--shiki-color-text)"> over here</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> eg</span><span style="color: var(--shiki-token-punctuation)">:</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&quot;Lorem ipsum&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-keyword)">^</span></span></code></pre>`,Rp,Aa,Fp,Gp,Ja,Kp,$p,X,Ma,zp,Yp,Ua,Xp,Qp,Ha,Zp,sc,D,Lc,ec,Q,oc,Us,ac,tc,Hs,nc,rc,yt,_,Wa,Ws,lc,ic,Va,pc,cc,Ba,hc,kc,Ra,vc,yc,Fa,dc,uc,Ga,fc,mc,Vs,Ka,Bs,xc,wc,$a,Rs,gc,Ec,Fs,_c,Gs,bc,Oc;return{c(){w=o("p"),H=n("The interview question of the week for this week on Cassidoo's weekly newsletter is,"),W=p(),V=o("blockquote"),g=o("p"),M=n(`Write a function that takes in a string of valid JSON and converts it to an object (or whatever your chosen language uses, dicts, maps, etc).
Example input:`),ts=p(),ns=o("div"),Xa=p(),$s=o("p"),Nt=n("At one point, I was tempted to just to write:"),Qa=p(),rs=o("div"),Za=p(),zs=o("p"),At=n("But, I thought, I've written quite a few articles about AST:"),st=p(),B=o("ul"),jo=o("li"),Ys=o("a"),Jt=n("Creating custom JavaScript syntax with Babel"),Mt=p(),Do=o("li"),Xs=o("a"),Ut=n("Step-by-step guide for writing a custom babel transformation"),Ht=p(),Lo=o("li"),Qs=o("a"),Wt=n("Manipulating AST with JavaScript"),et=p(),Zs=o("p"),Vt=n("which covers the overview of the compiler pipeline, as well as how to manipulate AST, but I haven't covered much on how to implement a parser."),ot=p(),se=o("p"),Bt=n("That's because, implementing a JavaScript compiler in an article is a task too daunting for me."),at=p(),Z=o("p"),Rt=n("Well, fret not. JSON is also a language. It has its own grammar, which you can refer from "),ls=o("a"),Ft=n("the specifications"),Gt=n(". The knowledge and technique you need to write a JSON parser is transferrable to writing a JS parser."),tt=p(),ee=o("p"),Kt=n("So, let's start writing a JSON parser!"),nt=p(),v=o("section"),No=o("h2"),is=o("a"),$t=n("Understand the grammar"),zt=p(),ps=o("p"),Yt=n("If you look at "),cs=o("a"),Xt=n("the specification page"),Qt=n(", there's 2 diagrams:"),Zt=p(),Ao=o("ul"),oe=o("li"),hs=o("a"),sn=n("The syntax diagram (or railroad diagram)"),en=n(" on the left,"),on=p(),Jo=o("p"),ae=o("img"),an=p(),Mo=o("small"),tn=n("Image source: https://www.json.org/img/object.png"),nn=p(),Uo=o("ul"),ss=o("li"),ks=o("a"),rn=n("The McKeeman Form"),ln=n(", a variant of "),vs=o("a"),pn=n("Backus-Naur Form (BNF)"),cn=n(", on the right"),hn=p(),te=o("div"),kn=p(),Ho=o("p"),vn=n("Both diagrams are equivalent."),yn=p(),Wo=o("p"),dn=n("One is visual and one is text based. The text based grammar syntax, Backus-Naur Form, is usually fed to another parser that parse this grammar and generate a parser for it. Speaking of parser-ception! \u{1F92F}"),un=p(),Vo=o("p"),fn=n("In this article, we will focus on the railroad diagram, because it is visual and seemed to be more friendly to me."),mn=p(),Bo=o("p"),xn=n("Lets' look at the first railroad diagram:"),wn=p(),Ro=o("p"),ne=o("img"),gn=p(),Fo=o("small"),En=n("Image source: https://www.json.org/img/object.png"),_n=p(),ys=o("p"),bn=n("So this is the grammar for "),Go=o("strong"),On=n('"object"'),Sn=n(" in JSON."),In=p(),Ko=o("p"),Cn=n("We start from the left, following the arrow, and then we end at the right."),Pn=p(),E=o("p"),qn=n("The circles, eg "),re=o("code"),Tn=n("{"),jn=n(", "),le=o("code"),Dn=n(","),Ln=n(", "),ie=o("code"),Nn=n(":"),An=n(", "),pe=o("code"),Jn=n("}"),Mn=n(", are the characters, and the boxes eg: "),ce=o("code"),Un=n("whitespace"),Hn=n(", "),he=o("code"),Wn=n("string"),Vn=n(", and "),ke=o("code"),Bn=n("value"),Rn=n(' is a placeholder for another grammar. So to parse the "whitespace", we will need to look at the grammar for '),$o=o("strong"),Fn=n('"whitepsace"'),Gn=n("."),Kn=p(),ds=o("p"),$n=n("So, starting from the left, for an object, the first character has to be an open curly bracket, "),ve=o("code"),zn=n("{"),Yn=n(". and then we have 2 options from here:"),Xn=p(),us=o("ul"),es=o("li"),ye=o("code"),Qn=n("whitespace"),Zn=n(" \u2192 "),de=o("code"),sr=n("}"),er=n(" \u2192 end, or"),or=p(),I=o("li"),ue=o("code"),ar=n("whitespace"),tr=n(" \u2192 "),fe=o("code"),nr=n("string"),rr=n(" \u2192 "),me=o("code"),lr=n("whitespace"),ir=n(" \u2192 "),xe=o("code"),pr=n(":"),cr=n(" \u2192 "),we=o("code"),hr=n("value"),kr=n(" \u2192 "),ge=o("code"),vr=n("}"),yr=n(" \u2192 end"),dr=p(),zo=o("p"),ur=n('Of course, when you reach "value", you can choose to go to:'),fr=p(),fs=o("ul"),ms=o("li"),mr=n("\u2192 "),Ee=o("code"),xr=n("}"),wr=n(" \u2192 end, or"),gr=p(),$=o("li"),Er=n("\u2192 "),_e=o("code"),_r=n(","),br=n(" \u2192 "),be=o("code"),Or=n("whitespace"),Sr=n(" \u2192 ... \u2192 value"),Ir=p(),Yo=o("p"),Cr=n("and you can keep looping, until you decide to go to:"),Pr=p(),Xo=o("ul"),xs=o("li"),qr=n("\u2192 "),Oe=o("code"),Tr=n("}"),jr=n(" \u2192 end."),Dr=p(),Qo=o("p"),Lr=n("So, I guess we are now acquainted with the railroad diagram, let's carry on to the next section."),rt=p(),h=o("section"),Zo=o("h2"),ws=o("a"),Nr=n("Implementing the parser"),Ar=p(),sa=o("p"),Jr=n("Let's start with the following structure:"),Mr=p(),Se=o("div"),Ur=p(),U=o("p"),Hr=n("We initialise "),Ie=o("code"),Wr=n("i"),Vr=n(" as the index for the current character, we will end as soon as "),Ce=o("code"),Br=n("i"),Rr=n(" reaches the end of the "),Pe=o("code"),Fr=n("str"),Gr=n("."),Kr=p(),qe=o("p"),$r=n("Let's implement the grammar for the "),ea=o("strong"),zr=n('"object":'),Yr=p(),Te=o("div"),Xr=p(),gs=o("p"),Qr=n("In the "),je=o("code"),Zr=n("parseObject"),sl=n(', we will call parse of other grammars, like "string" and "whitespace", when we implement them, everything will work \u{1F91E}.'),el=p(),S=o("p"),ol=n("One thing that I forgot to add is the comma, "),De=o("code"),al=n(","),tl=n(". The "),Le=o("code"),nl=n(","),rl=n(" only appears before we start the second loop of "),Ne=o("code"),ll=n("whitespace"),il=n(" \u2192 "),Ae=o("code"),pl=n("string"),cl=n(" \u2192 "),Je=o("code"),hl=n("whitespace"),kl=n(" \u2192 "),Me=o("code"),vl=n(":"),yl=n(" \u2192 ..."),dl=p(),oa=o("p"),ul=n("Based on that, we add the following lines:"),fl=p(),Ue=o("div"),ml=p(),aa=o("p"),xl=n("Some naming convention:"),wl=p(),z=o("ul"),Es=o("li"),gl=n("We call "),He=o("code"),El=n("parseSomething"),_l=n(", when we parse the code based on grammar and use the return value"),bl=p(),_s=o("li"),Ol=n("We call "),We=o("code"),Sl=n("eatSomething"),Il=n(", when we expect the character(s) to be there, but we are not using the character(s)"),Cl=p(),bs=o("li"),Pl=n("We call "),Ve=o("code"),ql=n("skipSomething"),Tl=n(", when we are okay if the character(s) is not there."),jl=p(),Y=o("p"),Dl=n("Let's implement the "),Be=o("code"),Ll=n("eatComma"),Nl=n(" and "),Re=o("code"),Al=n("eatColon"),Jl=n(":"),Ml=p(),Fe=o("div"),Ul=p(),Os=o("p"),Hl=n("So we have finished implemented the "),Ge=o("code"),Wl=n("parseObject"),Vl=n(" grammar, but what is the return value from this parse function?"),Bl=p(),ta=o("p"),Rl=n("Well, we need to return a JavaScript object:"),Fl=p(),Ke=o("div"),Gl=p(),na=o("p"),Kl=n(`Now that you've seen me implementing the "object" grammar, it's time for you to try out the "array" grammar:`),$l=p(),ra=o("p"),$e=o("img"),zl=p(),la=o("small"),Yl=n("Image source: https://www.json.org/img/array.png"),Xl=p(),ze=o("div"),Ql=p(),ia=o("p"),Zl=n('Now, move on to a more interesting grammar, "value":'),si=p(),pa=o("p"),Ye=o("img"),ei=p(),ca=o("small"),oi=n("Image source: https://www.json.org/img/value.png"),ai=p(),ha=o("p"),ti=n('A value starts with "whitespace", then any of the following: "string", "number", "object", "array", "true", "false" or "null", and then end with a "whitespace":'),ni=p(),Xe=o("div"),ri=p(),f=o("p"),li=n("The "),Qe=o("code"),ii=n("??"),pi=n(" is called the "),Ss=o("a"),ci=n("nullish coalescing operator"),hi=n(", it is like the "),Ze=o("code"),ki=n("||"),vi=n(" that we used to use for defaulting a value "),so=o("code"),yi=n("foo || default"),di=n(", except that "),eo=o("code"),ui=n("||"),fi=n(" will return the "),oo=o("code"),mi=n("default"),xi=n(" as long as "),ao=o("code"),wi=n("foo"),gi=n(" is falsy, whereas the nullish coalescing operator will only return "),to=o("code"),Ei=n("default"),_i=n(" when "),no=o("code"),bi=n("foo"),Oi=n(" is either "),ro=o("code"),Si=n("null"),Ii=n(" or "),lo=o("code"),Ci=n("undefined"),Pi=n("."),qi=p(),Is=o("p"),Ti=n("The parseKeyword will check whether the current "),io=o("code"),ji=n("str.slice(i)"),Di=n(" matches the keyword string, if so, it will return the keyword value:"),Li=p(),po=o("div"),Ni=p(),Cs=o("p"),Ai=n("That's it for "),co=o("code"),Ji=n("parseValue"),Mi=n("!"),Ui=p(),ka=o("p"),Hi=n("We still have 3 more grammars to go, but I will save the length of this article, and implement them in the following CodeSandbox:"),Wi=p(),q=o("iframe"),Vi=p(),Ps=o("p"),Bi=n("After we have finished implementing all the grammars, now let's return the value of the json, which is return by the "),ho=o("code"),Ri=n("parseValue"),Fi=n(":"),Gi=p(),ko=o("div"),Ki=p(),va=o("p"),$i=n("That's it!"),zi=p(),ya=o("p"),Yi=n("Well, not so fast my friend, we've just finished the happy path, what about unhappy path?"),lt=p(),A=o("section"),da=o("h2"),qs=o("a"),Xi=n("Handling the unexpected input"),Qi=p(),ua=o("p"),Zi=n("As a good developer, we need to handle the unhappy path gracefully as well. For a parser, that means shouting at the developer with appropriate error message."),sp=p(),fa=o("p"),ep=n("Let's handle the 2 most common error cases:"),op=p(),Ts=o("ul"),ma=o("li"),ap=n("Unexpected token"),tp=p(),xa=o("li"),np=n("Unexpected end of string"),it=p(),vo=o("section"),wa=o("h3"),js=o("a"),rp=n("Unexpected token"),pt=p(),T=o("section"),ga=o("h3"),Ds=o("a"),lp=n("Unexpected end of string"),ip=p(),Ls=o("p"),pp=n("In all the while loops, for example the while loop in "),yo=o("code"),cp=n("parseObject"),hp=n(":"),kp=p(),uo=o("div"),vp=p(),Ea=o("p"),yp=n(`We need to make sure that we don't access the character beyond the length of the string. This happens when the string ended unexpectedly, while we are still waiting for a closing character, "}" in this example:`),dp=p(),fo=o("div"),ct=p(),C=o("section"),_a=o("h2"),Ns=o("a"),up=n("Going the extra mile"),fp=p(),ba=o("p"),mp=n("Do you remember the time you were a junior developer, every time when you encounter Syntax error with cryptic messages, you are completely clueless of what went wrong?"),xp=p(),Oa=o("p"),wp=n("Now you are more experienced, it is time to stop this virtuous cycle and stop yelling"),gp=p(),mo=o("div"),Ep=p(),Sa=o("p"),_p=n("and leave the user staring at the screen confounded."),bp=p(),Ia=o("p"),Op=n("There's a lot of better ways of handling error messages than yelling, here are some points you can consider adding to your parser:"),ht=p(),R=o("section"),Ca=o("h3"),As=o("a"),Sp=n("Error code and standard error message"),Ip=p(),Pa=o("p"),Cp=n("This is useful as a standard keyword for user to Google for help."),Pp=p(),xo=o("div"),kt=p(),j=o("section"),qa=o("h3"),Js=o("a"),qp=n("A better view of what went wrong"),Tp=p(),Ta=o("p"),jp=n("Parser like Babel, will show you a code frame, a snippet of your code with underline, arrow or highlighting of what went wrong"),Dp=p(),wo=o("div"),Lp=p(),ja=o("p"),Np=n("An example on how you can print out the code snippet:"),Ap=p(),go=o("div"),vt=p(),m=o("section"),Da=o("h3"),Ms=o("a"),Jp=n("Suggestions for error recovery"),Mp=p(),La=o("p"),Up=n("If possible, explain what went wrong and give suggestions on how to fix them"),Hp=p(),Eo=o("div"),Wp=p(),Na=o("p"),Vp=n("If possible, provide suggestions based on the context that the parser has collected so far"),Bp=p(),_o=o("div"),Rp=p(),Aa=o("p"),Fp=n("The suggestion that based on the context will feel more relatable and actionable."),Gp=p(),Ja=o("p"),Kp=n("With all the suggestions in mind, check out the updated CodeSandbox with"),$p=p(),X=o("ul"),Ma=o("li"),zp=n("Meaningful error message"),Yp=p(),Ua=o("li"),Xp=n("Code snippet with error pointing point of failure"),Qp=p(),Ha=o("li"),Zp=n("Provide suggestions for error recovery"),sc=p(),D=o("iframe"),ec=p(),Q=o("p"),oc=n("Also, read the "),Us=o("a"),ac=n('"Compiler Errors for Humans"'),tc=n(" by "),Hs=o("a"),nc=n("Evan Czaplicki"),rc=n(" for how Elm improves the UX problems of the Elm compiler."),yt=p(),_=o("section"),Wa=o("h2"),Ws=o("a"),lc=n("Summary"),ic=p(),Va=o("p"),pc=n("To implement a parser, you need to start with the grammar."),cc=p(),Ba=o("p"),hc=n("You can formalise the grammar with the railroad diagrams or the Backus-Naur Form. Designing the grammar is the hardest step."),kc=p(),Ra=o("p"),vc=n("Once you've settled with the grammar, you can start implementing the parser based on it."),yc=p(),Fa=o("p"),dc=n("Error handling is important, what's more important is to have meaningful error messages, so that the user knows how to fix it."),uc=p(),Ga=o("p"),fc=n("Now you know how a simple parser is implemented, it's time to set eyes on a more complex one:"),mc=p(),Vs=o("ul"),Ka=o("li"),Bs=o("a"),xc=n("Babel parser"),wc=p(),$a=o("li"),Rs=o("a"),gc=n("Svelte parser"),Ec=p(),Fs=o("p"),_c=n("Lastly, do follow "),Gs=o("a"),bc=n("@cassidoo"),Oc=n(", her weekly newsletter is awesome!"),this.h()},l(i){w=a(i,"P",{});var d=t(w);H=r(d,"The interview question of the week for this week on Cassidoo's weekly newsletter is,"),d.forEach(e),W=c(i),V=a(i,"BLOCKQUOTE",{});var Nc=t(V);g=a(Nc,"P",{});var Ac=t(g);M=r(Ac,`Write a function that takes in a string of valid JSON and converts it to an object (or whatever your chosen language uses, dicts, maps, etc).
Example input:`),Ac.forEach(e),Nc.forEach(e),ts=c(i),ns=a(i,"DIV",{class:!0});var zv=t(ns);zv.forEach(e),Xa=c(i),$s=a(i,"P",{});var Jc=t($s);Nt=r(Jc,"At one point, I was tempted to just to write:"),Jc.forEach(e),Qa=c(i),rs=a(i,"DIV",{class:!0});var Yv=t(rs);Yv.forEach(e),Za=c(i),zs=a(i,"P",{});var Mc=t(zs);At=r(Mc,"But, I thought, I've written quite a few articles about AST:"),Mc.forEach(e),st=c(i),B=a(i,"UL",{});var bo=t(B);jo=a(bo,"LI",{});var Uc=t(jo);Ys=a(Uc,"A",{href:!0});var Hc=t(Ys);Jt=r(Hc,"Creating custom JavaScript syntax with Babel"),Hc.forEach(e),Uc.forEach(e),Mt=c(bo),Do=a(bo,"LI",{});var Wc=t(Do);Xs=a(Wc,"A",{href:!0});var Vc=t(Xs);Ut=r(Vc,"Step-by-step guide for writing a custom babel transformation"),Vc.forEach(e),Wc.forEach(e),Ht=c(bo),Lo=a(bo,"LI",{});var Bc=t(Lo);Qs=a(Bc,"A",{href:!0});var Rc=t(Qs);Wt=r(Rc,"Manipulating AST with JavaScript"),Rc.forEach(e),Bc.forEach(e),bo.forEach(e),et=c(i),Zs=a(i,"P",{});var Fc=t(Zs);Vt=r(Fc,"which covers the overview of the compiler pipeline, as well as how to manipulate AST, but I haven't covered much on how to implement a parser."),Fc.forEach(e),ot=c(i),se=a(i,"P",{});var Gc=t(se);Bt=r(Gc,"That's because, implementing a JavaScript compiler in an article is a task too daunting for me."),Gc.forEach(e),at=c(i),Z=a(i,"P",{});var dt=t(Z);Rt=r(dt,"Well, fret not. JSON is also a language. It has its own grammar, which you can refer from "),ls=a(dt,"A",{href:!0,rel:!0});var Kc=t(ls);Ft=r(Kc,"the specifications"),Kc.forEach(e),Gt=r(dt,". The knowledge and technique you need to write a JSON parser is transferrable to writing a JS parser."),dt.forEach(e),tt=c(i),ee=a(i,"P",{});var $c=t(ee);Kt=r($c,"So, let's start writing a JSON parser!"),$c.forEach(e),nt=c(i),v=a(i,"SECTION",{});var y=t(v);No=a(y,"H2",{});var zc=t(No);is=a(zc,"A",{href:!0,id:!0});var Yc=t(is);$t=r(Yc,"Understand the grammar"),Yc.forEach(e),zc.forEach(e),zt=c(y),ps=a(y,"P",{});var ut=t(ps);Yt=r(ut,"If you look at "),cs=a(ut,"A",{href:!0,rel:!0});var Xc=t(cs);Xt=r(Xc,"the specification page"),Xc.forEach(e),Qt=r(ut,", there's 2 diagrams:"),ut.forEach(e),Zt=c(y),Ao=a(y,"UL",{});var Qc=t(Ao);oe=a(Qc,"LI",{});var Sc=t(oe);hs=a(Sc,"A",{href:!0,rel:!0});var Zc=t(hs);sn=r(Zc,"The syntax diagram (or railroad diagram)"),Zc.forEach(e),en=r(Sc," on the left,"),Sc.forEach(e),Qc.forEach(e),on=c(y),Jo=a(y,"P",{});var sh=t(Jo);ae=a(sh,"IMG",{src:!0,alt:!0}),sh.forEach(e),an=c(y),Mo=a(y,"SMALL",{});var eh=t(Mo);tn=r(eh,"Image source: https://www.json.org/img/object.png"),eh.forEach(e),nn=c(y),Uo=a(y,"UL",{});var oh=t(Uo);ss=a(oh,"LI",{});var za=t(ss);ks=a(za,"A",{href:!0,rel:!0});var ah=t(ks);rn=r(ah,"The McKeeman Form"),ah.forEach(e),ln=r(za,", a variant of "),vs=a(za,"A",{href:!0,rel:!0});var th=t(vs);pn=r(th,"Backus-Naur Form (BNF)"),th.forEach(e),cn=r(za,", on the right"),za.forEach(e),oh.forEach(e),hn=c(y),te=a(y,"DIV",{class:!0});var Xv=t(te);Xv.forEach(e),kn=c(y),Ho=a(y,"P",{});var nh=t(Ho);vn=r(nh,"Both diagrams are equivalent."),nh.forEach(e),yn=c(y),Wo=a(y,"P",{});var rh=t(Wo);dn=r(rh,"One is visual and one is text based. The text based grammar syntax, Backus-Naur Form, is usually fed to another parser that parse this grammar and generate a parser for it. Speaking of parser-ception! \u{1F92F}"),rh.forEach(e),un=c(y),Vo=a(y,"P",{});var lh=t(Vo);fn=r(lh,"In this article, we will focus on the railroad diagram, because it is visual and seemed to be more friendly to me."),lh.forEach(e),mn=c(y),Bo=a(y,"P",{});var ih=t(Bo);xn=r(ih,"Lets' look at the first railroad diagram:"),ih.forEach(e),wn=c(y),Ro=a(y,"P",{});var ph=t(Ro);ne=a(ph,"IMG",{src:!0,alt:!0}),ph.forEach(e),gn=c(y),Fo=a(y,"SMALL",{});var ch=t(Fo);En=r(ch,"Image source: https://www.json.org/img/object.png"),ch.forEach(e),_n=c(y),ys=a(y,"P",{});var ft=t(ys);bn=r(ft,"So this is the grammar for "),Go=a(ft,"STRONG",{});var hh=t(Go);On=r(hh,'"object"'),hh.forEach(e),Sn=r(ft," in JSON."),ft.forEach(e),In=c(y),Ko=a(y,"P",{});var kh=t(Ko);Cn=r(kh,"We start from the left, following the arrow, and then we end at the right."),kh.forEach(e),Pn=c(y),E=a(y,"P",{});var O=t(E);qn=r(O,"The circles, eg "),re=a(O,"CODE",{class:!0});var vh=t(re);Tn=r(vh,"{"),vh.forEach(e),jn=r(O,", "),le=a(O,"CODE",{class:!0});var yh=t(le);Dn=r(yh,","),yh.forEach(e),Ln=r(O,", "),ie=a(O,"CODE",{class:!0});var dh=t(ie);Nn=r(dh,":"),dh.forEach(e),An=r(O,", "),pe=a(O,"CODE",{class:!0});var uh=t(pe);Jn=r(uh,"}"),uh.forEach(e),Mn=r(O,", are the characters, and the boxes eg: "),ce=a(O,"CODE",{class:!0});var fh=t(ce);Un=r(fh,"whitespace"),fh.forEach(e),Hn=r(O,", "),he=a(O,"CODE",{class:!0});var mh=t(he);Wn=r(mh,"string"),mh.forEach(e),Vn=r(O,", and "),ke=a(O,"CODE",{class:!0});var xh=t(ke);Bn=r(xh,"value"),xh.forEach(e),Rn=r(O,' is a placeholder for another grammar. So to parse the "whitespace", we will need to look at the grammar for '),$o=a(O,"STRONG",{});var wh=t($o);Fn=r(wh,'"whitepsace"'),wh.forEach(e),Gn=r(O,"."),O.forEach(e),Kn=c(y),ds=a(y,"P",{});var mt=t(ds);$n=r(mt,"So, starting from the left, for an object, the first character has to be an open curly bracket, "),ve=a(mt,"CODE",{class:!0});var gh=t(ve);zn=r(gh,"{"),gh.forEach(e),Yn=r(mt,". and then we have 2 options from here:"),mt.forEach(e),Xn=c(y),us=a(y,"UL",{});var xt=t(us);es=a(xt,"LI",{});var Ya=t(es);ye=a(Ya,"CODE",{class:!0});var Eh=t(ye);Qn=r(Eh,"whitespace"),Eh.forEach(e),Zn=r(Ya," \u2192 "),de=a(Ya,"CODE",{class:!0});var _h=t(de);sr=r(_h,"}"),_h.forEach(e),er=r(Ya," \u2192 end, or"),Ya.forEach(e),or=c(xt),I=a(xt,"LI",{});var N=t(I);ue=a(N,"CODE",{class:!0});var bh=t(ue);ar=r(bh,"whitespace"),bh.forEach(e),tr=r(N," \u2192 "),fe=a(N,"CODE",{class:!0});var Oh=t(fe);nr=r(Oh,"string"),Oh.forEach(e),rr=r(N," \u2192 "),me=a(N,"CODE",{class:!0});var Sh=t(me);lr=r(Sh,"whitespace"),Sh.forEach(e),ir=r(N," \u2192 "),xe=a(N,"CODE",{class:!0});var Ih=t(xe);pr=r(Ih,":"),Ih.forEach(e),cr=r(N," \u2192 "),we=a(N,"CODE",{class:!0});var Ch=t(we);hr=r(Ch,"value"),Ch.forEach(e),kr=r(N," \u2192 "),ge=a(N,"CODE",{class:!0});var Ph=t(ge);vr=r(Ph,"}"),Ph.forEach(e),yr=r(N," \u2192 end"),N.forEach(e),xt.forEach(e),dr=c(y),zo=a(y,"P",{});var qh=t(zo);ur=r(qh,'Of course, when you reach "value", you can choose to go to:'),qh.forEach(e),fr=c(y),fs=a(y,"UL",{});var wt=t(fs);ms=a(wt,"LI",{});var gt=t(ms);mr=r(gt,"\u2192 "),Ee=a(gt,"CODE",{class:!0});var Th=t(Ee);xr=r(Th,"}"),Th.forEach(e),wr=r(gt," \u2192 end, or"),gt.forEach(e),gr=c(wt),$=a(wt,"LI",{});var Oo=t($);Er=r(Oo,"\u2192 "),_e=a(Oo,"CODE",{class:!0});var jh=t(_e);_r=r(jh,","),jh.forEach(e),br=r(Oo," \u2192 "),be=a(Oo,"CODE",{class:!0});var Dh=t(be);Or=r(Dh,"whitespace"),Dh.forEach(e),Sr=r(Oo," \u2192 ... \u2192 value"),Oo.forEach(e),wt.forEach(e),Ir=c(y),Yo=a(y,"P",{});var Lh=t(Yo);Cr=r(Lh,"and you can keep looping, until you decide to go to:"),Lh.forEach(e),Pr=c(y),Xo=a(y,"UL",{});var Nh=t(Xo);xs=a(Nh,"LI",{});var Et=t(xs);qr=r(Et,"\u2192 "),Oe=a(Et,"CODE",{class:!0});var Ah=t(Oe);Tr=r(Ah,"}"),Ah.forEach(e),jr=r(Et," \u2192 end."),Et.forEach(e),Nh.forEach(e),Dr=c(y),Qo=a(y,"P",{});var Jh=t(Qo);Lr=r(Jh,"So, I guess we are now acquainted with the railroad diagram, let's carry on to the next section."),Jh.forEach(e),y.forEach(e),rt=c(i),h=a(i,"SECTION",{});var k=t(h);Zo=a(k,"H2",{});var Mh=t(Zo);ws=a(Mh,"A",{href:!0,id:!0});var Uh=t(ws);Nr=r(Uh,"Implementing the parser"),Uh.forEach(e),Mh.forEach(e),Ar=c(k),sa=a(k,"P",{});var Hh=t(sa);Jr=r(Hh,"Let's start with the following structure:"),Hh.forEach(e),Mr=c(k),Se=a(k,"DIV",{class:!0});var Qv=t(Se);Qv.forEach(e),Ur=c(k),U=a(k,"P",{});var os=t(U);Hr=r(os,"We initialise "),Ie=a(os,"CODE",{class:!0});var Wh=t(Ie);Wr=r(Wh,"i"),Wh.forEach(e),Vr=r(os," as the index for the current character, we will end as soon as "),Ce=a(os,"CODE",{class:!0});var Vh=t(Ce);Br=r(Vh,"i"),Vh.forEach(e),Rr=r(os," reaches the end of the "),Pe=a(os,"CODE",{class:!0});var Bh=t(Pe);Fr=r(Bh,"str"),Bh.forEach(e),Gr=r(os,"."),os.forEach(e),Kr=c(k),qe=a(k,"P",{});var Ic=t(qe);$r=r(Ic,"Let's implement the grammar for the "),ea=a(Ic,"STRONG",{});var Rh=t(ea);zr=r(Rh,'"object":'),Rh.forEach(e),Ic.forEach(e),Yr=c(k),Te=a(k,"DIV",{class:!0});var Zv=t(Te);Zv.forEach(e),Xr=c(k),gs=a(k,"P",{});var _t=t(gs);Qr=r(_t,"In the "),je=a(_t,"CODE",{class:!0});var Fh=t(je);Zr=r(Fh,"parseObject"),Fh.forEach(e),sl=r(_t,', we will call parse of other grammars, like "string" and "whitespace", when we implement them, everything will work \u{1F91E}.'),_t.forEach(e),el=c(k),S=a(k,"P",{});var L=t(S);ol=r(L,"One thing that I forgot to add is the comma, "),De=a(L,"CODE",{class:!0});var Gh=t(De);al=r(Gh,","),Gh.forEach(e),tl=r(L,". The "),Le=a(L,"CODE",{class:!0});var Kh=t(Le);nl=r(Kh,","),Kh.forEach(e),rl=r(L," only appears before we start the second loop of "),Ne=a(L,"CODE",{class:!0});var $h=t(Ne);ll=r($h,"whitespace"),$h.forEach(e),il=r(L," \u2192 "),Ae=a(L,"CODE",{class:!0});var zh=t(Ae);pl=r(zh,"string"),zh.forEach(e),cl=r(L," \u2192 "),Je=a(L,"CODE",{class:!0});var Yh=t(Je);hl=r(Yh,"whitespace"),Yh.forEach(e),kl=r(L," \u2192 "),Me=a(L,"CODE",{class:!0});var Xh=t(Me);vl=r(Xh,":"),Xh.forEach(e),yl=r(L," \u2192 ..."),L.forEach(e),dl=c(k),oa=a(k,"P",{});var Qh=t(oa);ul=r(Qh,"Based on that, we add the following lines:"),Qh.forEach(e),fl=c(k),Ue=a(k,"DIV",{class:!0});var sy=t(Ue);sy.forEach(e),ml=c(k),aa=a(k,"P",{});var Zh=t(aa);xl=r(Zh,"Some naming convention:"),Zh.forEach(e),wl=c(k),z=a(k,"UL",{});var So=t(z);Es=a(So,"LI",{});var bt=t(Es);gl=r(bt,"We call "),He=a(bt,"CODE",{class:!0});var sk=t(He);El=r(sk,"parseSomething"),sk.forEach(e),_l=r(bt,", when we parse the code based on grammar and use the return value"),bt.forEach(e),bl=c(So),_s=a(So,"LI",{});var Ot=t(_s);Ol=r(Ot,"We call "),We=a(Ot,"CODE",{class:!0});var ek=t(We);Sl=r(ek,"eatSomething"),ek.forEach(e),Il=r(Ot,", when we expect the character(s) to be there, but we are not using the character(s)"),Ot.forEach(e),Cl=c(So),bs=a(So,"LI",{});var St=t(bs);Pl=r(St,"We call "),Ve=a(St,"CODE",{class:!0});var ok=t(Ve);ql=r(ok,"skipSomething"),ok.forEach(e),Tl=r(St,", when we are okay if the character(s) is not there."),St.forEach(e),So.forEach(e),jl=c(k),Y=a(k,"P",{});var Io=t(Y);Dl=r(Io,"Let's implement the "),Be=a(Io,"CODE",{class:!0});var ak=t(Be);Ll=r(ak,"eatComma"),ak.forEach(e),Nl=r(Io," and "),Re=a(Io,"CODE",{class:!0});var tk=t(Re);Al=r(tk,"eatColon"),tk.forEach(e),Jl=r(Io,":"),Io.forEach(e),Ml=c(k),Fe=a(k,"DIV",{class:!0});var ey=t(Fe);ey.forEach(e),Ul=c(k),Os=a(k,"P",{});var It=t(Os);Hl=r(It,"So we have finished implemented the "),Ge=a(It,"CODE",{class:!0});var nk=t(Ge);Wl=r(nk,"parseObject"),nk.forEach(e),Vl=r(It," grammar, but what is the return value from this parse function?"),It.forEach(e),Bl=c(k),ta=a(k,"P",{});var rk=t(ta);Rl=r(rk,"Well, we need to return a JavaScript object:"),rk.forEach(e),Fl=c(k),Ke=a(k,"DIV",{class:!0});var oy=t(Ke);oy.forEach(e),Gl=c(k),na=a(k,"P",{});var lk=t(na);Kl=r(lk,`Now that you've seen me implementing the "object" grammar, it's time for you to try out the "array" grammar:`),lk.forEach(e),$l=c(k),ra=a(k,"P",{});var ik=t(ra);$e=a(ik,"IMG",{src:!0,alt:!0}),ik.forEach(e),zl=c(k),la=a(k,"SMALL",{});var pk=t(la);Yl=r(pk,"Image source: https://www.json.org/img/array.png"),pk.forEach(e),Xl=c(k),ze=a(k,"DIV",{class:!0});var ay=t(ze);ay.forEach(e),Ql=c(k),ia=a(k,"P",{});var ck=t(ia);Zl=r(ck,'Now, move on to a more interesting grammar, "value":'),ck.forEach(e),si=c(k),pa=a(k,"P",{});var hk=t(pa);Ye=a(hk,"IMG",{src:!0,alt:!0}),hk.forEach(e),ei=c(k),ca=a(k,"SMALL",{});var kk=t(ca);oi=r(kk,"Image source: https://www.json.org/img/value.png"),kk.forEach(e),ai=c(k),ha=a(k,"P",{});var vk=t(ha);ti=r(vk,'A value starts with "whitespace", then any of the following: "string", "number", "object", "array", "true", "false" or "null", and then end with a "whitespace":'),vk.forEach(e),ni=c(k),Xe=a(k,"DIV",{class:!0});var ty=t(Xe);ty.forEach(e),ri=c(k),f=a(k,"P",{});var x=t(f);li=r(x,"The "),Qe=a(x,"CODE",{class:!0});var yk=t(Qe);ii=r(yk,"??"),yk.forEach(e),pi=r(x," is called the "),Ss=a(x,"A",{href:!0,rel:!0});var dk=t(Ss);ci=r(dk,"nullish coalescing operator"),dk.forEach(e),hi=r(x,", it is like the "),Ze=a(x,"CODE",{class:!0});var uk=t(Ze);ki=r(uk,"||"),uk.forEach(e),vi=r(x," that we used to use for defaulting a value "),so=a(x,"CODE",{class:!0});var fk=t(so);yi=r(fk,"foo || default"),fk.forEach(e),di=r(x,", except that "),eo=a(x,"CODE",{class:!0});var mk=t(eo);ui=r(mk,"||"),mk.forEach(e),fi=r(x," will return the "),oo=a(x,"CODE",{class:!0});var xk=t(oo);mi=r(xk,"default"),xk.forEach(e),xi=r(x," as long as "),ao=a(x,"CODE",{class:!0});var wk=t(ao);wi=r(wk,"foo"),wk.forEach(e),gi=r(x," is falsy, whereas the nullish coalescing operator will only return "),to=a(x,"CODE",{class:!0});var gk=t(to);Ei=r(gk,"default"),gk.forEach(e),_i=r(x," when "),no=a(x,"CODE",{class:!0});var Ek=t(no);bi=r(Ek,"foo"),Ek.forEach(e),Oi=r(x," is either "),ro=a(x,"CODE",{class:!0});var _k=t(ro);Si=r(_k,"null"),_k.forEach(e),Ii=r(x," or "),lo=a(x,"CODE",{class:!0});var bk=t(lo);Ci=r(bk,"undefined"),bk.forEach(e),Pi=r(x,"."),x.forEach(e),qi=c(k),Is=a(k,"P",{});var Ct=t(Is);Ti=r(Ct,"The parseKeyword will check whether the current "),io=a(Ct,"CODE",{class:!0});var Ok=t(io);ji=r(Ok,"str.slice(i)"),Ok.forEach(e),Di=r(Ct," matches the keyword string, if so, it will return the keyword value:"),Ct.forEach(e),Li=c(k),po=a(k,"DIV",{class:!0});var ny=t(po);ny.forEach(e),Ni=c(k),Cs=a(k,"P",{});var Pt=t(Cs);Ai=r(Pt,"That's it for "),co=a(Pt,"CODE",{class:!0});var Sk=t(co);Ji=r(Sk,"parseValue"),Sk.forEach(e),Mi=r(Pt,"!"),Pt.forEach(e),Ui=c(k),ka=a(k,"P",{});var Ik=t(ka);Hi=r(Ik,"We still have 3 more grammars to go, but I will save the length of this article, and implement them in the following CodeSandbox:"),Ik.forEach(e),Wi=c(k),q=a(k,"IFRAME",{src:!0,style:!0,title:!0,allow:!0,sandbox:!0}),t(q).forEach(e),Vi=c(k),Ps=a(k,"P",{});var qt=t(Ps);Bi=r(qt,"After we have finished implementing all the grammars, now let's return the value of the json, which is return by the "),ho=a(qt,"CODE",{class:!0});var Ck=t(ho);Ri=r(Ck,"parseValue"),Ck.forEach(e),Fi=r(qt,":"),qt.forEach(e),Gi=c(k),ko=a(k,"DIV",{class:!0});var ry=t(ko);ry.forEach(e),Ki=c(k),va=a(k,"P",{});var Pk=t(va);$i=r(Pk,"That's it!"),Pk.forEach(e),zi=c(k),ya=a(k,"P",{});var qk=t(ya);Yi=r(qk,"Well, not so fast my friend, we've just finished the happy path, what about unhappy path?"),qk.forEach(e),k.forEach(e),lt=c(i),A=a(i,"SECTION",{});var as=t(A);da=a(as,"H2",{});var Tk=t(da);qs=a(Tk,"A",{href:!0,id:!0});var jk=t(qs);Xi=r(jk,"Handling the unexpected input"),jk.forEach(e),Tk.forEach(e),Qi=c(as),ua=a(as,"P",{});var Dk=t(ua);Zi=r(Dk,"As a good developer, we need to handle the unhappy path gracefully as well. For a parser, that means shouting at the developer with appropriate error message."),Dk.forEach(e),sp=c(as),fa=a(as,"P",{});var Lk=t(fa);ep=r(Lk,"Let's handle the 2 most common error cases:"),Lk.forEach(e),op=c(as),Ts=a(as,"UL",{});var Tt=t(Ts);ma=a(Tt,"LI",{});var Nk=t(ma);ap=r(Nk,"Unexpected token"),Nk.forEach(e),tp=c(Tt),xa=a(Tt,"LI",{});var Ak=t(xa);np=r(Ak,"Unexpected end of string"),Ak.forEach(e),Tt.forEach(e),as.forEach(e),it=c(i),vo=a(i,"SECTION",{});var Jk=t(vo);wa=a(Jk,"H3",{});var Mk=t(wa);js=a(Mk,"A",{href:!0,id:!0});var Uk=t(js);rp=r(Uk,"Unexpected token"),Uk.forEach(e),Mk.forEach(e),Jk.forEach(e),pt=c(i),T=a(i,"SECTION",{});var F=t(T);ga=a(F,"H3",{});var Hk=t(ga);Ds=a(Hk,"A",{href:!0,id:!0});var Wk=t(Ds);lp=r(Wk,"Unexpected end of string"),Wk.forEach(e),Hk.forEach(e),ip=c(F),Ls=a(F,"P",{});var jt=t(Ls);pp=r(jt,"In all the while loops, for example the while loop in "),yo=a(jt,"CODE",{class:!0});var Vk=t(yo);cp=r(Vk,"parseObject"),Vk.forEach(e),hp=r(jt,":"),jt.forEach(e),kp=c(F),uo=a(F,"DIV",{class:!0});var ly=t(uo);ly.forEach(e),vp=c(F),Ea=a(F,"P",{});var Bk=t(Ea);yp=r(Bk,`We need to make sure that we don't access the character beyond the length of the string. This happens when the string ended unexpectedly, while we are still waiting for a closing character, "}" in this example:`),Bk.forEach(e),dp=c(F),fo=a(F,"DIV",{class:!0});var iy=t(fo);iy.forEach(e),F.forEach(e),ct=c(i),C=a(i,"SECTION",{});var J=t(C);_a=a(J,"H2",{});var Rk=t(_a);Ns=a(Rk,"A",{href:!0,id:!0});var Fk=t(Ns);up=r(Fk,"Going the extra mile"),Fk.forEach(e),Rk.forEach(e),fp=c(J),ba=a(J,"P",{});var Gk=t(ba);mp=r(Gk,"Do you remember the time you were a junior developer, every time when you encounter Syntax error with cryptic messages, you are completely clueless of what went wrong?"),Gk.forEach(e),xp=c(J),Oa=a(J,"P",{});var Kk=t(Oa);wp=r(Kk,"Now you are more experienced, it is time to stop this virtuous cycle and stop yelling"),Kk.forEach(e),gp=c(J),mo=a(J,"DIV",{class:!0});var py=t(mo);py.forEach(e),Ep=c(J),Sa=a(J,"P",{});var $k=t(Sa);_p=r($k,"and leave the user staring at the screen confounded."),$k.forEach(e),bp=c(J),Ia=a(J,"P",{});var zk=t(Ia);Op=r(zk,"There's a lot of better ways of handling error messages than yelling, here are some points you can consider adding to your parser:"),zk.forEach(e),J.forEach(e),ht=c(i),R=a(i,"SECTION",{});var Co=t(R);Ca=a(Co,"H3",{});var Yk=t(Ca);As=a(Yk,"A",{href:!0,id:!0});var Xk=t(As);Sp=r(Xk,"Error code and standard error message"),Xk.forEach(e),Yk.forEach(e),Ip=c(Co),Pa=a(Co,"P",{});var Qk=t(Pa);Cp=r(Qk,"This is useful as a standard keyword for user to Google for help."),Qk.forEach(e),Pp=c(Co),xo=a(Co,"DIV",{class:!0});var cy=t(xo);cy.forEach(e),Co.forEach(e),kt=c(i),j=a(i,"SECTION",{});var G=t(j);qa=a(G,"H3",{});var Zk=t(qa);Js=a(Zk,"A",{href:!0,id:!0});var sv=t(Js);qp=r(sv,"A better view of what went wrong"),sv.forEach(e),Zk.forEach(e),Tp=c(G),Ta=a(G,"P",{});var ev=t(Ta);jp=r(ev,"Parser like Babel, will show you a code frame, a snippet of your code with underline, arrow or highlighting of what went wrong"),ev.forEach(e),Dp=c(G),wo=a(G,"DIV",{class:!0});var hy=t(wo);hy.forEach(e),Lp=c(G),ja=a(G,"P",{});var ov=t(ja);Np=r(ov,"An example on how you can print out the code snippet:"),ov.forEach(e),Ap=c(G),go=a(G,"DIV",{class:!0});var ky=t(go);ky.forEach(e),G.forEach(e),vt=c(i),m=a(i,"SECTION",{});var b=t(m);Da=a(b,"H3",{});var av=t(Da);Ms=a(av,"A",{href:!0,id:!0});var tv=t(Ms);Jp=r(tv,"Suggestions for error recovery"),tv.forEach(e),av.forEach(e),Mp=c(b),La=a(b,"P",{});var nv=t(La);Up=r(nv,"If possible, explain what went wrong and give suggestions on how to fix them"),nv.forEach(e),Hp=c(b),Eo=a(b,"DIV",{class:!0});var vy=t(Eo);vy.forEach(e),Wp=c(b),Na=a(b,"P",{});var rv=t(Na);Vp=r(rv,"If possible, provide suggestions based on the context that the parser has collected so far"),rv.forEach(e),Bp=c(b),_o=a(b,"DIV",{class:!0});var yy=t(_o);yy.forEach(e),Rp=c(b),Aa=a(b,"P",{});var lv=t(Aa);Fp=r(lv,"The suggestion that based on the context will feel more relatable and actionable."),lv.forEach(e),Gp=c(b),Ja=a(b,"P",{});var iv=t(Ja);Kp=r(iv,"With all the suggestions in mind, check out the updated CodeSandbox with"),iv.forEach(e),$p=c(b),X=a(b,"UL",{});var Po=t(X);Ma=a(Po,"LI",{});var pv=t(Ma);zp=r(pv,"Meaningful error message"),pv.forEach(e),Yp=c(Po),Ua=a(Po,"LI",{});var cv=t(Ua);Xp=r(cv,"Code snippet with error pointing point of failure"),cv.forEach(e),Qp=c(Po),Ha=a(Po,"LI",{});var hv=t(Ha);Zp=r(hv,"Provide suggestions for error recovery"),hv.forEach(e),Po.forEach(e),sc=c(b),D=a(b,"IFRAME",{src:!0,style:!0,title:!0,allow:!0,sandbox:!0}),t(D).forEach(e),ec=c(b),Q=a(b,"P",{});var qo=t(Q);oc=r(qo,"Also, read the "),Us=a(qo,"A",{href:!0,rel:!0});var kv=t(Us);ac=r(kv,'"Compiler Errors for Humans"'),kv.forEach(e),tc=r(qo," by "),Hs=a(qo,"A",{href:!0,rel:!0});var vv=t(Hs);nc=r(vv,"Evan Czaplicki"),vv.forEach(e),rc=r(qo," for how Elm improves the UX problems of the Elm compiler."),qo.forEach(e),b.forEach(e),yt=c(i),_=a(i,"SECTION",{});var P=t(_);Wa=a(P,"H2",{});var yv=t(Wa);Ws=a(yv,"A",{href:!0,id:!0});var dv=t(Ws);lc=r(dv,"Summary"),dv.forEach(e),yv.forEach(e),ic=c(P),Va=a(P,"P",{});var uv=t(Va);pc=r(uv,"To implement a parser, you need to start with the grammar."),uv.forEach(e),cc=c(P),Ba=a(P,"P",{});var fv=t(Ba);hc=r(fv,"You can formalise the grammar with the railroad diagrams or the Backus-Naur Form. Designing the grammar is the hardest step."),fv.forEach(e),kc=c(P),Ra=a(P,"P",{});var mv=t(Ra);vc=r(mv,"Once you've settled with the grammar, you can start implementing the parser based on it."),mv.forEach(e),yc=c(P),Fa=a(P,"P",{});var xv=t(Fa);dc=r(xv,"Error handling is important, what's more important is to have meaningful error messages, so that the user knows how to fix it."),xv.forEach(e),uc=c(P),Ga=a(P,"P",{});var wv=t(Ga);fc=r(wv,"Now you know how a simple parser is implemented, it's time to set eyes on a more complex one:"),wv.forEach(e),mc=c(P),Vs=a(P,"UL",{});var Dt=t(Vs);Ka=a(Dt,"LI",{});var gv=t(Ka);Bs=a(gv,"A",{href:!0,rel:!0});var Ev=t(Bs);xc=r(Ev,"Babel parser"),Ev.forEach(e),gv.forEach(e),wc=c(Dt),$a=a(Dt,"LI",{});var _v=t($a);Rs=a(_v,"A",{href:!0,rel:!0});var bv=t(Rs);gc=r(bv,"Svelte parser"),bv.forEach(e),_v.forEach(e),Dt.forEach(e),Ec=c(P),Fs=a(P,"P",{});var Lt=t(Fs);_c=r(Lt,"Lastly, do follow "),Gs=a(Lt,"A",{href:!0,rel:!0});var Ov=t(Gs);bc=r(Ov,"@cassidoo"),Ov.forEach(e),Oc=r(Lt,", her weekly newsletter is awesome!"),Lt.forEach(e),P.forEach(e),this.h()},h(){l(ns,"class","code-section"),l(rs,"class","code-section"),l(Ys,"href","/creating-custom-javascript-syntax-with-babel"),l(Xs,"href","/step-by-step-guide-for-writing-a-babel-transformation"),l(Qs,"href","/manipulating-ast-with-javascript"),l(ls,"href","https://www.json.org/json-en.html"),l(ls,"rel","nofollow"),l(is,"href","#understand-the-grammar"),l(is,"id","understand-the-grammar"),l(cs,"href","https://www.json.org/json-en.html"),l(cs,"rel","nofollow"),l(hs,"href","https://en.wikipedia.org/wiki/Syntax_diagram"),l(hs,"rel","nofollow"),To(ae.src,Pc="https://www.json.org/img/object.png")||l(ae,"src",Pc),l(ae,"alt","https://www.json.org/img/object.png"),l(ks,"href","https://www.crockford.com/mckeeman.html"),l(ks,"rel","nofollow"),l(vs,"href","https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form"),l(vs,"rel","nofollow"),l(te,"class","code-section"),To(ne.src,qc="https://www.json.org/img/object.png")||l(ne,"src",qc),l(ne,"alt","https://www.json.org/img/object.png"),l(re,"class","inline"),l(le,"class","inline"),l(ie,"class","inline"),l(pe,"class","inline"),l(ce,"class","inline"),l(he,"class","inline"),l(ke,"class","inline"),l(ve,"class","inline"),l(ye,"class","inline"),l(de,"class","inline"),l(ue,"class","inline"),l(fe,"class","inline"),l(me,"class","inline"),l(xe,"class","inline"),l(we,"class","inline"),l(ge,"class","inline"),l(Ee,"class","inline"),l(_e,"class","inline"),l(be,"class","inline"),l(Oe,"class","inline"),l(ws,"href","#implementing-the-parser"),l(ws,"id","implementing-the-parser"),l(Se,"class","code-section"),l(Ie,"class","inline"),l(Ce,"class","inline"),l(Pe,"class","inline"),l(Te,"class","code-section"),l(je,"class","inline"),l(De,"class","inline"),l(Le,"class","inline"),l(Ne,"class","inline"),l(Ae,"class","inline"),l(Je,"class","inline"),l(Me,"class","inline"),l(Ue,"class","code-section"),l(He,"class","inline"),l(We,"class","inline"),l(Ve,"class","inline"),l(Be,"class","inline"),l(Re,"class","inline"),l(Fe,"class","code-section"),l(Ge,"class","inline"),l(Ke,"class","code-section"),To($e.src,Tc="https://www.json.org/img/array.png")||l($e,"src",Tc),l($e,"alt","https://www.json.org/img/array.png"),l(ze,"class","code-section"),To(Ye.src,jc="https://www.json.org/img/value.png")||l(Ye,"src",jc),l(Ye,"alt","https://www.json.org/img/value.png"),l(Xe,"class","code-section"),l(Qe,"class","inline"),l(Ss,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator"),l(Ss,"rel","nofollow"),l(Ze,"class","inline"),l(so,"class","inline"),l(eo,"class","inline"),l(oo,"class","inline"),l(ao,"class","inline"),l(to,"class","inline"),l(no,"class","inline"),l(ro,"class","inline"),l(lo,"class","inline"),l(io,"class","inline"),l(po,"class","code-section"),l(co,"class","inline"),To(q.src,Dc="https://codesandbox.io/embed/json-parser-k4c3w?expanddevtools=1&fontsize=14&hidenavigation=1&theme=dark&view=editor")||l(q,"src",Dc),K(q,"width","100%"),K(q,"height","500px"),K(q,"border","0"),K(q,"border-radius","4px"),K(q,"overflow","hidden"),l(q,"title","JSON parser"),l(q,"allow","geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb"),l(q,"sandbox","allow-modals allow-forms allow-popups allow-scripts allow-same-origin"),l(ho,"class","inline"),l(ko,"class","code-section"),l(qs,"href","#handling-the-unexpected-input"),l(qs,"id","handling-the-unexpected-input"),l(js,"href","#unexpected-token"),l(js,"id","unexpected-token"),l(Ds,"href","#unexpected-end-of-string"),l(Ds,"id","unexpected-end-of-string"),l(yo,"class","inline"),l(uo,"class","code-section"),l(fo,"class","code-section"),l(Ns,"href","#going-the-extra-mile"),l(Ns,"id","going-the-extra-mile"),l(mo,"class","code-section"),l(As,"href","#error-code-and-standard-error-message"),l(As,"id","error-code-and-standard-error-message"),l(xo,"class","code-section"),l(Js,"href","#a-better-view-of-what-went-wrong"),l(Js,"id","a-better-view-of-what-went-wrong"),l(wo,"class","code-section"),l(go,"class","code-section"),l(Ms,"href","#suggestions-for-error-recovery"),l(Ms,"id","suggestions-for-error-recovery"),l(Eo,"class","code-section"),l(_o,"class","code-section"),To(D.src,Lc="https://codesandbox.io/embed/json-parser-hjwxk?expanddevtools=1&fontsize=14&hidenavigation=1&theme=dark&view=editor")||l(D,"src",Lc),K(D,"width","100%"),K(D,"height","500px"),K(D,"border","0"),K(D,"border-radius","4px"),K(D,"overflow","hidden"),l(D,"title","JSON parser (with error handling)"),l(D,"allow","geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb"),l(D,"sandbox","allow-modals allow-forms allow-popups allow-scripts allow-same-origin"),l(Us,"href","https://elm-lang.org/news/compiler-errors-for-humans"),l(Us,"rel","nofollow"),l(Hs,"href","https://twitter.com/czaplic"),l(Hs,"rel","nofollow"),l(Ws,"href","#summary"),l(Ws,"id","summary"),l(Bs,"href","https://github.com/babel/babel/tree/master/packages/babel-parser"),l(Bs,"rel","nofollow"),l(Rs,"href","https://github.com/sveltejs/svelte/tree/master/src/compiler/parse"),l(Rs,"rel","nofollow"),l(Gs,"href","https://twitter.com/cassidoo"),l(Gs,"rel","nofollow")},m(i,d){u(i,w,d),s(w,H),u(i,W,d),u(i,V,d),s(V,g),s(g,M),u(i,ts,d),u(i,ns,d),ns.innerHTML=Pv,u(i,Xa,d),u(i,$s,d),s($s,Nt),u(i,Qa,d),u(i,rs,d),rs.innerHTML=qv,u(i,Za,d),u(i,zs,d),s(zs,At),u(i,st,d),u(i,B,d),s(B,jo),s(jo,Ys),s(Ys,Jt),s(B,Mt),s(B,Do),s(Do,Xs),s(Xs,Ut),s(B,Ht),s(B,Lo),s(Lo,Qs),s(Qs,Wt),u(i,et,d),u(i,Zs,d),s(Zs,Vt),u(i,ot,d),u(i,se,d),s(se,Bt),u(i,at,d),u(i,Z,d),s(Z,Rt),s(Z,ls),s(ls,Ft),s(Z,Gt),u(i,tt,d),u(i,ee,d),s(ee,Kt),u(i,nt,d),u(i,v,d),s(v,No),s(No,is),s(is,$t),s(v,zt),s(v,ps),s(ps,Yt),s(ps,cs),s(cs,Xt),s(ps,Qt),s(v,Zt),s(v,Ao),s(Ao,oe),s(oe,hs),s(hs,sn),s(oe,en),s(v,on),s(v,Jo),s(Jo,ae),s(v,an),s(v,Mo),s(Mo,tn),s(v,nn),s(v,Uo),s(Uo,ss),s(ss,ks),s(ks,rn),s(ss,ln),s(ss,vs),s(vs,pn),s(ss,cn),s(v,hn),s(v,te),te.innerHTML=Tv,s(v,kn),s(v,Ho),s(Ho,vn),s(v,yn),s(v,Wo),s(Wo,dn),s(v,un),s(v,Vo),s(Vo,fn),s(v,mn),s(v,Bo),s(Bo,xn),s(v,wn),s(v,Ro),s(Ro,ne),s(v,gn),s(v,Fo),s(Fo,En),s(v,_n),s(v,ys),s(ys,bn),s(ys,Go),s(Go,On),s(ys,Sn),s(v,In),s(v,Ko),s(Ko,Cn),s(v,Pn),s(v,E),s(E,qn),s(E,re),s(re,Tn),s(E,jn),s(E,le),s(le,Dn),s(E,Ln),s(E,ie),s(ie,Nn),s(E,An),s(E,pe),s(pe,Jn),s(E,Mn),s(E,ce),s(ce,Un),s(E,Hn),s(E,he),s(he,Wn),s(E,Vn),s(E,ke),s(ke,Bn),s(E,Rn),s(E,$o),s($o,Fn),s(E,Gn),s(v,Kn),s(v,ds),s(ds,$n),s(ds,ve),s(ve,zn),s(ds,Yn),s(v,Xn),s(v,us),s(us,es),s(es,ye),s(ye,Qn),s(es,Zn),s(es,de),s(de,sr),s(es,er),s(us,or),s(us,I),s(I,ue),s(ue,ar),s(I,tr),s(I,fe),s(fe,nr),s(I,rr),s(I,me),s(me,lr),s(I,ir),s(I,xe),s(xe,pr),s(I,cr),s(I,we),s(we,hr),s(I,kr),s(I,ge),s(ge,vr),s(I,yr),s(v,dr),s(v,zo),s(zo,ur),s(v,fr),s(v,fs),s(fs,ms),s(ms,mr),s(ms,Ee),s(Ee,xr),s(ms,wr),s(fs,gr),s(fs,$),s($,Er),s($,_e),s(_e,_r),s($,br),s($,be),s(be,Or),s($,Sr),s(v,Ir),s(v,Yo),s(Yo,Cr),s(v,Pr),s(v,Xo),s(Xo,xs),s(xs,qr),s(xs,Oe),s(Oe,Tr),s(xs,jr),s(v,Dr),s(v,Qo),s(Qo,Lr),u(i,rt,d),u(i,h,d),s(h,Zo),s(Zo,ws),s(ws,Nr),s(h,Ar),s(h,sa),s(sa,Jr),s(h,Mr),s(h,Se),Se.innerHTML=jv,s(h,Ur),s(h,U),s(U,Hr),s(U,Ie),s(Ie,Wr),s(U,Vr),s(U,Ce),s(Ce,Br),s(U,Rr),s(U,Pe),s(Pe,Fr),s(U,Gr),s(h,Kr),s(h,qe),s(qe,$r),s(qe,ea),s(ea,zr),s(h,Yr),s(h,Te),Te.innerHTML=Dv,s(h,Xr),s(h,gs),s(gs,Qr),s(gs,je),s(je,Zr),s(gs,sl),s(h,el),s(h,S),s(S,ol),s(S,De),s(De,al),s(S,tl),s(S,Le),s(Le,nl),s(S,rl),s(S,Ne),s(Ne,ll),s(S,il),s(S,Ae),s(Ae,pl),s(S,cl),s(S,Je),s(Je,hl),s(S,kl),s(S,Me),s(Me,vl),s(S,yl),s(h,dl),s(h,oa),s(oa,ul),s(h,fl),s(h,Ue),Ue.innerHTML=Lv,s(h,ml),s(h,aa),s(aa,xl),s(h,wl),s(h,z),s(z,Es),s(Es,gl),s(Es,He),s(He,El),s(Es,_l),s(z,bl),s(z,_s),s(_s,Ol),s(_s,We),s(We,Sl),s(_s,Il),s(z,Cl),s(z,bs),s(bs,Pl),s(bs,Ve),s(Ve,ql),s(bs,Tl),s(h,jl),s(h,Y),s(Y,Dl),s(Y,Be),s(Be,Ll),s(Y,Nl),s(Y,Re),s(Re,Al),s(Y,Jl),s(h,Ml),s(h,Fe),Fe.innerHTML=Nv,s(h,Ul),s(h,Os),s(Os,Hl),s(Os,Ge),s(Ge,Wl),s(Os,Vl),s(h,Bl),s(h,ta),s(ta,Rl),s(h,Fl),s(h,Ke),Ke.innerHTML=Av,s(h,Gl),s(h,na),s(na,Kl),s(h,$l),s(h,ra),s(ra,$e),s(h,zl),s(h,la),s(la,Yl),s(h,Xl),s(h,ze),ze.innerHTML=Jv,s(h,Ql),s(h,ia),s(ia,Zl),s(h,si),s(h,pa),s(pa,Ye),s(h,ei),s(h,ca),s(ca,oi),s(h,ai),s(h,ha),s(ha,ti),s(h,ni),s(h,Xe),Xe.innerHTML=Mv,s(h,ri),s(h,f),s(f,li),s(f,Qe),s(Qe,ii),s(f,pi),s(f,Ss),s(Ss,ci),s(f,hi),s(f,Ze),s(Ze,ki),s(f,vi),s(f,so),s(so,yi),s(f,di),s(f,eo),s(eo,ui),s(f,fi),s(f,oo),s(oo,mi),s(f,xi),s(f,ao),s(ao,wi),s(f,gi),s(f,to),s(to,Ei),s(f,_i),s(f,no),s(no,bi),s(f,Oi),s(f,ro),s(ro,Si),s(f,Ii),s(f,lo),s(lo,Ci),s(f,Pi),s(h,qi),s(h,Is),s(Is,Ti),s(Is,io),s(io,ji),s(Is,Di),s(h,Li),s(h,po),po.innerHTML=Uv,s(h,Ni),s(h,Cs),s(Cs,Ai),s(Cs,co),s(co,Ji),s(Cs,Mi),s(h,Ui),s(h,ka),s(ka,Hi),s(h,Wi),s(h,q),s(h,Vi),s(h,Ps),s(Ps,Bi),s(Ps,ho),s(ho,Ri),s(Ps,Fi),s(h,Gi),s(h,ko),ko.innerHTML=Hv,s(h,Ki),s(h,va),s(va,$i),s(h,zi),s(h,ya),s(ya,Yi),u(i,lt,d),u(i,A,d),s(A,da),s(da,qs),s(qs,Xi),s(A,Qi),s(A,ua),s(ua,Zi),s(A,sp),s(A,fa),s(fa,ep),s(A,op),s(A,Ts),s(Ts,ma),s(ma,ap),s(Ts,tp),s(Ts,xa),s(xa,np),u(i,it,d),u(i,vo,d),s(vo,wa),s(wa,js),s(js,rp),u(i,pt,d),u(i,T,d),s(T,ga),s(ga,Ds),s(Ds,lp),s(T,ip),s(T,Ls),s(Ls,pp),s(Ls,yo),s(yo,cp),s(Ls,hp),s(T,kp),s(T,uo),uo.innerHTML=Wv,s(T,vp),s(T,Ea),s(Ea,yp),s(T,dp),s(T,fo),fo.innerHTML=Vv,u(i,ct,d),u(i,C,d),s(C,_a),s(_a,Ns),s(Ns,up),s(C,fp),s(C,ba),s(ba,mp),s(C,xp),s(C,Oa),s(Oa,wp),s(C,gp),s(C,mo),mo.innerHTML=Bv,s(C,Ep),s(C,Sa),s(Sa,_p),s(C,bp),s(C,Ia),s(Ia,Op),u(i,ht,d),u(i,R,d),s(R,Ca),s(Ca,As),s(As,Sp),s(R,Ip),s(R,Pa),s(Pa,Cp),s(R,Pp),s(R,xo),xo.innerHTML=Rv,u(i,kt,d),u(i,j,d),s(j,qa),s(qa,Js),s(Js,qp),s(j,Tp),s(j,Ta),s(Ta,jp),s(j,Dp),s(j,wo),wo.innerHTML=Fv,s(j,Lp),s(j,ja),s(ja,Np),s(j,Ap),s(j,go),go.innerHTML=Gv,u(i,vt,d),u(i,m,d),s(m,Da),s(Da,Ms),s(Ms,Jp),s(m,Mp),s(m,La),s(La,Up),s(m,Hp),s(m,Eo),Eo.innerHTML=Kv,s(m,Wp),s(m,Na),s(Na,Vp),s(m,Bp),s(m,_o),_o.innerHTML=$v,s(m,Rp),s(m,Aa),s(Aa,Fp),s(m,Gp),s(m,Ja),s(Ja,Kp),s(m,$p),s(m,X),s(X,Ma),s(Ma,zp),s(X,Yp),s(X,Ua),s(Ua,Xp),s(X,Qp),s(X,Ha),s(Ha,Zp),s(m,sc),s(m,D),s(m,ec),s(m,Q),s(Q,oc),s(Q,Us),s(Us,ac),s(Q,tc),s(Q,Hs),s(Hs,nc),s(Q,rc),u(i,yt,d),u(i,_,d),s(_,Wa),s(Wa,Ws),s(Ws,lc),s(_,ic),s(_,Va),s(Va,pc),s(_,cc),s(_,Ba),s(Ba,hc),s(_,kc),s(_,Ra),s(Ra,vc),s(_,yc),s(_,Fa),s(Fa,dc),s(_,uc),s(_,Ga),s(Ga,fc),s(_,mc),s(_,Vs),s(Vs,Ka),s(Ka,Bs),s(Bs,xc),s(Vs,wc),s(Vs,$a),s($a,Rs),s(Rs,gc),s(_,Ec),s(_,Fs),s(Fs,_c),s(Fs,Gs),s(Gs,bc),s(Fs,Oc)},p:Sy,d(i){i&&e(w),i&&e(W),i&&e(V),i&&e(ts),i&&e(ns),i&&e(Xa),i&&e($s),i&&e(Qa),i&&e(rs),i&&e(Za),i&&e(zs),i&&e(st),i&&e(B),i&&e(et),i&&e(Zs),i&&e(ot),i&&e(se),i&&e(at),i&&e(Z),i&&e(tt),i&&e(ee),i&&e(nt),i&&e(v),i&&e(rt),i&&e(h),i&&e(lt),i&&e(A),i&&e(it),i&&e(vo),i&&e(pt),i&&e(T),i&&e(ct),i&&e(C),i&&e(ht),i&&e(R),i&&e(kt),i&&e(j),i&&e(vt),i&&e(m),i&&e(yt),i&&e(_)}}}function qy(Ks){let w,H;const W=[Ks[0],Cv];let V={$$slots:{default:[Py]},$$scope:{ctx:Ks}};for(let g=0;g<W.length;g+=1)V=Cc(V,W[g]);return w=new Iy({props:V}),{c(){my(w.$$.fragment)},l(g){xy(w.$$.fragment,g)},m(g,M){wy(w,g,M),H=!0},p(g,[M]){const ts=M&1?gy(W,[M&1&&Sv(g[0]),M&0&&Sv(Cv)]):{};M&2&&(ts.$$scope={dirty:M,ctx:g}),w.$set(ts)},i(g){H||(Ey(w.$$.fragment,g),H=!0)},o(g){_y(w.$$.fragment,g),H=!1},d(g){by(w,g)}}}const Cv={title:"JSON Parser with JavaScript",date:"2019-12-12T08:00:00Z",description:"Step-by-step guide on implementing a JSON parser",tags:["JavaScript","AST"],series:"AST",label:"blog",tableOfContents:[{link:"understand-the-grammar",title:"Understand the grammar"},{link:"implementing-the-parser",title:"Implementing the parser"},{link:"handling-the-unexpected-input",title:"Handling the unexpected input",nested:[{link:"unexpected-token",title:"Unexpected token"},{link:"unexpected-end-of-string",title:"Unexpected end of string"}]},{link:"going-the-extra-mile",title:"Going the extra mile",nested:[{link:"error-code-and-standard-error-message",title:"Error code and standard error message"},{link:"a-better-view-of-what-went-wrong",title:"A better view of what went wrong"},{link:"suggestions-for-error-recovery",title:"Suggestions for error recovery"}]},{link:"summary",title:"Summary"}]};function Ty(Ks,w,H){return Oy("blog",{image:Cy}),Ks.$$set=W=>{H(0,w=Cc(Cc({},w),Iv(W)))},w=Iv(w),[w]}class Jy extends dy{constructor(w){super();uy(this,w,Ty,qy,fy,{})}}export{Jy as default,Cv as metadata};
