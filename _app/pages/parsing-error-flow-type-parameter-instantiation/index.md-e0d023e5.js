import{S as Id,i as Ad,s as Cd,C as Ac,w as Pd,x as Td,y as Od,z as Sd,A as td,q as Dd,o as Ld,B as Fd,r as Bd,Y as od,e as a,t,k as i,Z as Md,c as l,a as r,h as o,d as s,m as c,_ as Rd,b as n,g as D,H as e,J as qd}from"../../chunks/vendor-da4388d4.js";import{B as Hd}from"../../chunks/BlogLayout-d479b777.js";import{_ as jd}from"../../chunks/twitter-card-image-a57df29d.js";import"../../chunks/stores-1fad7c36.js";import"../../chunks/ldjson-b0805387.js";/* empty css                                */function Xd(Ze){let k,L,S,pe,w,_,et,tt,$s,Ks,he,Zs,ea,ta,F,ot,oa,sa,st,aa,at,la,ra,lt,na,ia,ko,ca,pa,ha,yo,bo,da,Is,p,mo,de,fa,ua,rt,ad=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">foobar</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">XType</span><span style="color: var(--shiki-color-text)">&gt;(baz);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                       </span><span style="color: var(--shiki-token-keyword)">^</span><span style="color: var(--shiki-color-text)"> ReferenceError</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> XType is not defined</span></span></code></pre>`,va,q,ka,nt,ya,ba,wo,ma,wa,it,ga,Ea,_a,go,xa,Ia,Eo,Aa,Ca,ct,ld='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">foobar</span><span style="color: var(--shiki-color-text)"> &lt; </span><span style="color: var(--shiki-token-function)">XType</span><span style="color: var(--shiki-color-text)"> &gt; </span><span style="color: var(--shiki-token-function)">baz</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>',Pa,fe,Ta,pt,Oa,Sa,Da,ue,La,ht,Fa,Ba,Ma,G,Ra,ve,qa,Ha,dt,ja,Xa,Ga,_o,X,xo,Na,Ua,ft,Wa,Ya,Io,Ja,Va,za,Ao,Qa,$a,ut,rd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">/** </span><span style="color: var(--shiki-token-keyword)">@module</span><span style="color: var(--shiki-token-comment)"> </span><span style="color: var(--shiki-token-function)">foobar</span><span style="color: var(--shiki-token-comment)"> */</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">foobar</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">XType</span><span style="color: var(--shiki-color-text)">&gt;(baz);</span></span></code></pre>`,Ka,N,Za,vt,el,tl,kt,ol,sl,al,Co,ll,rl,ke,U,nl,yt,il,cl,bt,pl,hl,dl,W,fl,mt,ul,vl,wt,kl,yl,bl,Po,ml,wl,To,gl,El,Oo,ye,_l,gt,xl,Il,Al,Y,Cl,Et,Pl,Tl,So,Ol,Sl,Dl,be,Ll,Do,Fl,Bl,Ml,Lo,Fo,Rl,As,B,Bo,me,ql,Hl,Mo,jl,Xl,H,Ro,Gl,Nl,qo,Ul,Wl,Ho,Yl,Jl,jo,Vl,zl,we,Ql,Xo,$l,Kl,Cs,f,Go,ge,Zl,er,j,tr,Ee,or,sr,_e,ar,lr,xe,rr,nr,ir,No,cr,pr,A,hr,_t,dr,fr,Ie,ur,vr,xt,kr,yr,It,br,mr,J,wr,At,gr,Er,_r,xr,Uo,Ir,Ar,Ct,nd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">extract_docblock</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (&#123; maxTokens</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> filename</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> content &#125;) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">file</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">read</span><span style="color: var(--shiki-color-text)">(filename);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> maxTokens; i </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i</span><span style="color: var(--shiki-token-keyword)">--</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">token</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">file</span><span style="color: var(--shiki-token-function)">.nextToken</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">switch</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">token</span><span style="color: var(--shiki-color-text)">.type) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;string&#39;</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;semicolon&#39;</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">continue</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;comment&#39;</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-function)">isFlowComment</span><span style="color: var(--shiki-color-text)">(token)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">flowPragmaType</span><span style="color: var(--shiki-color-text)">(token);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">break</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,Cr,Wo,Pr,Tr,V,Or,Pt,Sr,Dr,Tt,Lr,Fr,Br,Yo,Mr,Rr,Ot,id=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-string-expression)">&#39;use strict&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">foobar</span><span style="color: var(--shiki-color-text)">();</span></span></code></pre>`,qr,Jo,Hr,jr,St,cd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">/** </span><span style="color: var(--shiki-token-keyword)">@module</span><span style="color: var(--shiki-token-comment)"> */</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">foobar</span><span style="color: var(--shiki-color-text)">();</span></span></code></pre>`,Xr,Vo,Gr,Nr,zo,Ur,Wr,Dt,pd='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">foobar</span><span style="color: var(--shiki-color-text)">();</span></span></code></pre>',Yr,Qo,Jr,Vr,Lt,hd='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">foobar</span><span style="color: var(--shiki-color-text)">();</span></span></code></pre>',zr,$o,Qr,Ps,v,Ko,Ae,$r,Kr,Ce,Zr,Ft,en,tn,on,C,sn,Pe,an,ln,Bt,rn,nn,Te,cn,pn,Mt,hn,dn,ae,Rt,fn,un,vn,kn,Oe,yn,z,bn,qt,mn,wn,gn,En,Se,_n,De,xn,In,An,Ht,dd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">addComment</span><span style="color: var(--shiki-color-text)">(comment: </span><span style="color: var(--shiki-token-constant)">N</span><span style="color: var(--shiki-color-text)">.Comment): </span><span style="color: var(--shiki-token-keyword)">void</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.flowPragma </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">undefined</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// Try to parse a flow pragma.</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">matches</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">FLOW_PRAGMA_REGEX</span><span style="color: var(--shiki-token-function)">.exec</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">comment</span><span style="color: var(--shiki-color-text)">.value);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">matches) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.flowPragma </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (matches[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;flow&quot;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.flowPragma </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;flow&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (matches[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;noflow&quot;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.flowPragma </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;noflow&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;Unexpected flow pragma&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">super.addComment</span><span style="color: var(--shiki-color-text)">(comment);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Cn,Zo,Pn,Tn,Le,On,jt,Sn,Dn,Ln,es,Fn,Bn,Xt,fd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">foobar </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> XType </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">foobar</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">XType</span><span style="color: var(--shiki-color-text)">&gt;(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,Mn,Q,Rn,Gt,qn,Hn,Nt,jn,Xn,Gn,Fe,Nn,Ts,ud='<a href="https://lihautan.com/babel-ast-explorer/#?%7B%22babel%22%3A%7B%22jsx%22%3Afalse%2C%22flow%22%3Atrue%2C%22typescript%22%3Afalse%2C%22objectRestSpread%22%3Afalse%2C%22pipelineOperator%22%3Afalse%2C%22throwExpressions%22%3Afalse%2C%22optionalChaining%22%3Afalse%2C%22nullishCoalescingOperator%22%3Afalse%2C%22exportDefaultFrom%22%3Afalse%2C%22dynamicImport%22%3Afalse%7D%2C%22code%22%3A%22foobar%3CXType%3E(1)%3B%5Cn%2F%2F%20%40flow%5Cnfoobar%3CXType%3E(1)%3B%22%7D">my recently build ASTExplorer clone for babel</a>',Os,Un,Ut,ts,Wn,Yn,Jn,$,Vn,Wt,zn,Qn,Yt,$n,Kn,Ss,b,os,Be,Zn,ei,Me,ti,Re,oi,si,ai,K,li,qe,ri,ni,He,ii,ci,pi,ss,hi,di,x,fi,je,ui,vi,as,ki,yi,Jt,bi,mi,Vt,wi,gi,zt,Ei,_i,Qt,xi,Ii,Ai,Z,Ci,Xe,Pi,Ti,ls,Oi,Si,Di,Ge,Li,Ne,Fi,Bi,Mi,rs,Ri,qi,ee,ns,te,$t,Hi,ji,Kt,Xi,Gi,is,le,Ni,Zt,Ui,Wi,cs,oe,Yi,eo,Ji,Vi,Ds,g,ps,Ue,zi,Qi,hs,ds,$i,Ki,fs,us,Zi,ec,We,tc,Ye,oc,sc,ac,vs,ks,lc,rc,ys,nc,ic,I,bs,to,cc,pc,ms,oo,hc,dc,ws,Je,fc,uc,gs,Ve,vc,kc,Es,ze,yc,bc,_s,Qe,mc,wc,xs,$e,gc;return{c(){k=a("section"),L=a("h2"),S=a("a"),pe=t("Background"),w=i(),_=a("p"),et=t("Mentioned in the "),tt=a("a"),$s=t("previous post"),Ks=t(", we have "),he=a("a"),Zs=t("upgraded babel 7"),ea=t(" to support the new Flow syntax."),ta=i(),F=a("p"),ot=a("code"),oa=t("foobar<Type>(x)"),sa=t(" is now "),st=a("em"),aa=t("call foobar with x, and type parameter "),at=a("code"),la=t("Type"),ra=t(" rather than "),lt=a("code"),na=t("(foobar < Type) > x)"),ia=i(),ko=a("em"),ca=t("is the result of foobar smaller than Type, greater than x?"),pa=t("."),ha=i(),yo=a("blockquote"),bo=a("p"),da=t("Everything is great, until a weird runtime error caught us off guard."),Is=i(),p=a("section"),mo=a("h2"),de=a("a"),fa=t("ReferenceError: XType is not defined"),ua=i(),rt=a("div"),va=i(),q=a("p"),ka=t("The first time I saw this error, my first impression was that I forgot to import "),nt=a("code"),ya=t("XType"),ba=t(", so I scrolled to the top of the document. But, alas, I "),wo=a("strong"),ma=t("did import"),wa=i(),it=a("code"),ga=t("XType"),Ea=t("."),_a=i(),go=a("p"),xa=t("So what is going on? \u{1F937}\u200D"),Ia=i(),Eo=a("p"),Aa=t("I clicked into the error,"),Ca=i(),ct=a("div"),Pa=i(),fe=a("p"),Ta=t("looked at me innocently. I knew something was wrong. "),pt=a("code"),Oa=t("XType"),Sa=t(" wasn't stripeed by babel!"),Da=i(),ue=a("p"),La=t("Shameless plug: If you read my "),ht=a("a"),Fa=t("eslint for flow syntax"),Ba=t(", you should be able to come to the same conclusion! \u{1F605}"),Ma=i(),G=a("p"),Ra=t("So I checked the "),ve=a("a"),qa=t("@babel/plugin strip-flow-types"),Ha=t(", I realise there's a "),dt=a("code"),ja=t("all"),Xa=t(" option that I had missed out, basically it says,"),Ga=i(),_o=a("blockquote"),X=a("p"),xo=a("strong"),Na=t("only parse"),Ua=t(" Flow-specific features if a "),ft=a("code"),Wa=t("@flow"),Ya=t(" pragma is "),Io=a("strong"),Ja=t("present atop"),Va=t(" the file"),za=i(),Ao=a("p"),Qa=t("It seems that in my file,"),$a=i(),ut=a("div"),Ka=i(),N=a("p"),Za=t("I had a innocent looking "),vt=a("code"),el=t("/** @module */"),tl=t(" comment above "),kt=a("code"),ol=t("// @flow"),sl=t(" that breaks my babel plugin!"),al=i(),Co=a("p"),ll=t("So the quick fix is to either:"),rl=i(),ke=a("ul"),U=a("li"),nl=t("Move "),yt=a("code"),il=t("// @flow"),cl=t(" comment above "),bt=a("code"),pl=t("/** @module foobar */"),hl=t(", or"),dl=i(),W=a("li"),fl=t("Set "),mt=a("code"),ul=t("all: true"),vl=t(" in "),wt=a("code"),kl=t("@babel/plugin-transform-flow-strip-types"),yl=t("."),bl=i(),Po=a("p"),ml=t("Either way, it solves the issue."),wl=i(),To=a("p"),gl=t("However, one thing bothers me:"),El=i(),Oo=a("blockquote"),ye=a("p"),_l=t("My Flow works perfectly fine with an extra comment on top "),gt=a("code"),xl=t("// @flow"),Il=t(", it still typechecks and provides auto-suggestions."),Al=i(),Y=a("p"),Cl=t("So, the logic for "),Et=a("code"),Pl=t("@babel/plugin-transform-flow-strip-types"),Tl=t(" and Flow to determine whether a file is a Flow file or not "),So=a("strong"),Ol=t("is different"),Sl=t("!"),Dl=i(),be=a("p"),Ll=t("And as a frequent user of Open Source libraries, this is something I think I "),Do=a("del"),Fl=t("can"),Bl=t(" should fix, for the betterment of the JavaScript Open Source world \u{1F605}. I always imagine there's another innocent front-end developer across the world like me stumbled upon a perplexing bug, if only me let the bug go with a workaround/patch."),Ml=i(),Lo=a("blockquote"),Fo=a("p"),Rl=t("There's so much to achieve if we, not just consume the effort of others from the Open Source, but to also contribute into it."),As=i(),B=a("section"),Bo=a("h2"),me=a("a"),ql=t("Game Plan"),Hl=i(),Mo=a("p"),jl=t("So, to fix this bug, one simply has to:"),Xl=i(),H=a("ul"),Ro=a("li"),Gl=t("Read Flow's source code and understand the logic"),Nl=i(),qo=a("li"),Ul=t("Read @babel/plugin-transform-strip-flow-type's source code and understand the logic"),Wl=i(),Ho=a("li"),Yl=t("Make changes to babel code"),Jl=i(),jo=a("li"),Vl=t("Send a MR and brag about it \u{1F60E}"),zl=i(),we=a("p"),Ql=t(`Whether this is achieveable at my current level, that's a different story.
But `),Xo=a("strong"),$l=t("one has nothing to lose to try and fail"),Kl=t("."),Cs=i(),f=a("section"),Go=a("h2"),ge=a("a"),Zl=t("Flow"),er=i(),j=a("p"),tr=t("I've read a bit of Flow source code previously, mainly to "),Ee=a("a"),or=t("fix a bad developer experience I had with flowconfig previously"),sr=t(". I had to learn "),_e=a("a"),ar=t("OCaml"),lr=t(", which was a fad a while ago because of "),xe=a("a"),rr=t("ReasonML"),nr=t(", to understand Flow source code."),ir=i(),No=a("p"),cr=t("So, this time around, I am much more comfortable to dig the code to find out the information I want."),pr=i(),A=a("p"),hr=t("I searched for the term "),_t=a("code"),dr=t('"@flow"'),fr=t(", which ended me up with "),Ie=a("a"),ur=t("this function"),vr=t(", "),xt=a("code"),kr=t("extract_docblock"),yr=t(" which returns me the information of whether "),It=a("code"),br=t("@flow"),mr=t(" is present in the file. And I dug further, I ended up with "),J=a("a"),wr=t("the annonymous function that "),At=a("code"),gr=t("extract_docblck"),Er=t(" returns"),_r=t("."),xr=i(),Uo=a("p"),Ir=t("Allow me to loosely translate the logic into some pseudo JavaScript:"),Ar=i(),Ct=a("div"),Cr=i(),Wo=a("p"),Pr=t("In human language:"),Tr=i(),V=a("p"),Or=t("Flow will read "),Pt=a("code"),Sr=t("maxTokens"),Dr=t(" number of tokens, look for comments that matches "),Tt=a("code"),Lr=t("@flow"),Fr=t(", if it encounters any order tokens, it will bail out early, with the exception of string and semicolon."),Br=i(),Yo=a("p"),Mr=t("So,"),Rr=i(),Ot=a("div"),qr=i(),Jo=a("p"),Hr=t("and"),jr=i(),St=a("div"),Xr=i(),Vo=a("p"),Gr=t("is considered as a valid Flow file."),Nr=i(),zo=a("p"),Ur=t("But"),Wr=i(),Dt=a("div"),Yr=i(),Qo=a("p"),Jr=t("or"),Vr=i(),Lt=a("div"),zr=i(),$o=a("p"),Qr=t("is not."),Ps=i(),v=a("section"),Ko=a("h2"),Ae=a("a"),$r=t("Babel"),Kr=i(),Ce=a("p"),Zr=t("At first, I thought that the logic would be in "),Ft=a("code"),en=t("@babel/transform-strip-flow-types"),tn=t(", but apparently, its not."),on=i(),C=a("p"),sn=t("I discovered that by realising that the "),Pe=a("a"),an=t("source code of @babel/transform-strip-flow-types"),ln=t(" did not include anything about the "),Bt=a("code"),rn=t("all"),nn=t(" options, and "),Te=a("a"),cn=t("this plugin extends the @babel/plugin-syntax-flow"),pn=t(", which I knew fairly well that syntax plugins in babel does nothing but to enable syntax switch of the "),Mt=a("code"),hn=t("@babel/parser"),dn=t(". The bulk of the logic lies within the "),ae=a("a"),Rt=a("code"),fn=t("@babel/parser"),un=t("'s flow plugin"),vn=t("."),kn=i(),Oe=a("p"),yn=t("That was all because "),z=a("a"),bn=t("I contributed to "),qt=a("code"),mn=t("@babel/parser"),wn=t(" before"),gn=t("."),En=i(),Se=a("p"),_n=t("And here we are in babel-parser, and the line that caught my attention is "),De=a("a"),xn=t("this"),In=t(":"),An=i(),Ht=a("div"),Cn=i(),Zo=a("p"),Pn=t("So, the babel's logic of getting a Flow pragma is that as soon as the first comment encountered, we parse the comment and we turn on the Flow syntax switch."),Tn=i(),Le=a("p"),On=t("This is the reason why if we have a comment before "),jt=a("code"),Sn=t("// @flow"),Dn=t(", we will not treat the file as a valid Flow file."),Ln=i(),es=a("p"),Fn=t("Interesting enough, this means that if we write"),Bn=i(),Xt=a("div"),Mn=i(),Q=a("p"),Rn=t("the first half of the code before "),Gt=a("code"),qn=t("// @flow"),Hn=t(" was parsed as a normal JS code, and the second half after "),Nt=a("code"),jn=t("// @flow"),Xn=t(" was parsed as a Flow code."),Gn=i(),Fe=a("p"),Nn=t("You can see this clearly with "),Ts=new Md,Os=t("."),Un=i(),Ut=a("p"),ts=a("em"),Wn=t("(I built it with React + Hooks over a long weekend, which I will share about how did it in the future.)"),Yn=t("."),Jn=i(),$=a("p"),Vn=t("You can see that the first expression is a "),Wt=a("code"),zn=t("BinaryExpression"),Qn=t(" but the second expression is a "),Yt=a("code"),$n=t("CallExpression"),Kn=t(";"),Ss=i(),b=a("section"),os=a("h2"),Be=a("a"),Zn=t("Make changes to the babel code"),ei=i(),Me=a("p"),ti=t("Now step 3, make changes to babel code. So I decided to open an issue and started fixing the code. Surprisingly, someone else "),Re=a("a"),oi=t("had reported the issue a few months ago"),si=t(", and the issue was still opened."),ai=i(),K=a("p"),li=t("So "),qe=a("a"),ri=t("I explained what I had discovered"),ni=t(", and tried to "),He=a("a"),ii=t("propose a solution"),ci=t(". Well, after some struggle, I realised I am still a bit behind from being able to fix this code."),pi=i(),ss=a("p"),hi=t("So how?"),di=i(),x=a("p"),fi=t("I submitted a "),je=a("a"),ui=t("PR"),vi=t(" with a big "),as=a("strong"),ki=t("WIP"),yi=t(", because I didn't know how to look ahead "),Jt=a("code"),bi=t("n"),mi=t(" tokens and determine the "),Vt=a("code"),wi=t("flowPragma"),gi=t(" flag before "),zt=a("code"),Ei=t("babel"),_i=t(" starts parsing the code. I explored around the "),Qt=a("code"),xi=t("babel-parser"),Ii=t(" source code, uncover new concepts that I never knew before. It took me a day to contemplate and fiddle around, until something sparked me."),Ai=i(),Z=a("p"),Ci=t("I realised I do not have to follow exactly Flow's logic in order to achieve similar behaviour. That's when I submitted another "),Xe=a("a"),Pi=t("PR"),Ti=t(" and closed the previous one. "),ls=a("em"),Oi=t("(You can check it out if you are curious about it)"),Si=t("."),Di=i(),Ge=a("p"),Li=t("And finally, the fix has merged into "),Ne=a("a"),Fi=t("babel v7.4.4"),Bi=t("! \u{1F389}\u{1F389}"),Mi=i(),rs=a("p"),Ri=t("And I can't wait to try all the edge cases that I have fixed in babel repl:"),qi=i(),ee=a("ul"),ns=a("li"),te=a("a"),$t=a("code"),Hi=t("'use strict'"),ji=t("; before "),Kt=a("code"),Xi=t("// @flow"),Gi=i(),is=a("li"),le=a("a"),Ni=t("comments before "),Zt=a("code"),Ui=t("//@flow"),Wi=i(),cs=a("li"),oe=a("a"),Yi=t("first comment is "),eo=a("code"),Ji=t("//@flow"),Vi=t(", but in the middle of the file"),Ds=i(),g=a("section"),ps=a("h2"),Ue=a("a"),zi=t("Closing Remark"),Qi=i(),hs=a("p"),ds=a("del"),$i=t("Well, I am sorry that I am going to stop here, because the issue is still opened, but I hoped you enjoy the detective journey along the way of hunting this bug."),Ki=i(),fs=a("p"),us=a("del"),Zi=t("If you encountered similar issues, you can patch it first with the solution I mentioned earlier. And do follow the Github issue, I will do my best to fix this."),ec=i(),We=a("p"),tc=t("If you encountered similar issues, please "),Ye=a("a"),oc=t("upgrade babel to v7.4.4"),sc=t("."),ac=i(),vs=a("blockquote"),ks=a("p"),lc=t("The best thing about open source is that the source code is open. As part of the JS community, we should not just reap the efforts of the community when we are building our next billion dollar idea, we should also contribute back so that the community as a whole can grow and improve together."),rc=i(),ys=a("p"),nc=t("As usual, here are the list of references for this article:"),ic=i(),I=a("ul"),bs=a("li"),to=a("a"),cc=t("Blog: Errors encountered upgrading Flow v0.85"),pc=i(),ms=a("li"),oo=a("a"),hc=t("My eslint doesn\u2019t work with for flow 0.85\u2019s explicit type argument syntax"),dc=i(),ws=a("li"),Je=a("a"),fc=t("Docs: Upgrading Babel v7"),uc=i(),gs=a("li"),Ve=a("a"),vc=t("Docs: @babel/transform-plugin-flow-strip-types"),kc=i(),Es=a("li"),ze=a("a"),yc=t("Docs: ReasonML"),bc=i(),_s=a("li"),Qe=a("a"),mc=t("Code: Flow Parsing Service"),wc=i(),xs=a("li"),$e=a("a"),gc=t("Issue: Parsing error when calling generic functions with type arguments when flow pragma is not first comment"),this.h()},l(d){k=l(d,"SECTION",{});var m=r(k);L=l(m,"H2",{});var Cc=r(L);S=l(Cc,"A",{href:!0,id:!0});var Pc=r(S);pe=o(Pc,"Background"),Pc.forEach(s),Cc.forEach(s),w=c(m),_=l(m,"P",{});var so=r(_);et=o(so,"Mentioned in the "),tt=l(so,"A",{href:!0});var Tc=r(tt);$s=o(Tc,"previous post"),Tc.forEach(s),Ks=o(so,", we have "),he=l(so,"A",{href:!0,rel:!0});var Oc=r(he);Zs=o(Oc,"upgraded babel 7"),Oc.forEach(s),ea=o(so," to support the new Flow syntax."),so.forEach(s),ta=c(m),F=l(m,"P",{});var se=r(F);ot=l(se,"CODE",{class:!0});var Sc=r(ot);oa=o(Sc,"foobar<Type>(x)"),Sc.forEach(s),sa=o(se," is now "),st=l(se,"EM",{});var Ec=r(st);aa=o(Ec,"call foobar with x, and type parameter "),at=l(Ec,"CODE",{class:!0});var Dc=r(at);la=o(Dc,"Type"),Dc.forEach(s),Ec.forEach(s),ra=o(se," rather than "),lt=l(se,"CODE",{class:!0});var Lc=r(lt);na=o(Lc,"(foobar < Type) > x)"),Lc.forEach(s),ia=c(se),ko=l(se,"EM",{});var Fc=r(ko);ca=o(Fc,"is the result of foobar smaller than Type, greater than x?"),Fc.forEach(s),pa=o(se,"."),se.forEach(s),ha=c(m),yo=l(m,"BLOCKQUOTE",{});var Bc=r(yo);bo=l(Bc,"P",{});var Mc=r(bo);da=o(Mc,"Everything is great, until a weird runtime error caught us off guard."),Mc.forEach(s),Bc.forEach(s),m.forEach(s),Is=c(d),p=l(d,"SECTION",{});var h=r(p);mo=l(h,"H2",{});var Rc=r(mo);de=l(Rc,"A",{href:!0,id:!0});var qc=r(de);fa=o(qc,"ReferenceError: XType is not defined"),qc.forEach(s),Rc.forEach(s),ua=c(h),rt=l(h,"DIV",{class:!0});var vd=r(rt);vd.forEach(s),va=c(h),q=l(h,"P",{});var re=r(q);ka=o(re,"The first time I saw this error, my first impression was that I forgot to import "),nt=l(re,"CODE",{class:!0});var Hc=r(nt);ya=o(Hc,"XType"),Hc.forEach(s),ba=o(re,", so I scrolled to the top of the document. But, alas, I "),wo=l(re,"STRONG",{});var jc=r(wo);ma=o(jc,"did import"),jc.forEach(s),wa=c(re),it=l(re,"CODE",{class:!0});var Xc=r(it);ga=o(Xc,"XType"),Xc.forEach(s),Ea=o(re,"."),re.forEach(s),_a=c(h),go=l(h,"P",{});var Gc=r(go);xa=o(Gc,"So what is going on? \u{1F937}\u200D"),Gc.forEach(s),Ia=c(h),Eo=l(h,"P",{});var Nc=r(Eo);Aa=o(Nc,"I clicked into the error,"),Nc.forEach(s),Ca=c(h),ct=l(h,"DIV",{class:!0});var kd=r(ct);kd.forEach(s),Pa=c(h),fe=l(h,"P",{});var Ls=r(fe);Ta=o(Ls,"looked at me innocently. I knew something was wrong. "),pt=l(Ls,"CODE",{class:!0});var Uc=r(pt);Oa=o(Uc,"XType"),Uc.forEach(s),Sa=o(Ls," wasn't stripeed by babel!"),Ls.forEach(s),Da=c(h),ue=l(h,"P",{});var Fs=r(ue);La=o(Fs,"Shameless plug: If you read my "),ht=l(Fs,"A",{href:!0});var Wc=r(ht);Fa=o(Wc,"eslint for flow syntax"),Wc.forEach(s),Ba=o(Fs,", you should be able to come to the same conclusion! \u{1F605}"),Fs.forEach(s),Ma=c(h),G=l(h,"P",{});var ao=r(G);Ra=o(ao,"So I checked the "),ve=l(ao,"A",{href:!0,rel:!0});var Yc=r(ve);qa=o(Yc,"@babel/plugin strip-flow-types"),Yc.forEach(s),Ha=o(ao,", I realise there's a "),dt=l(ao,"CODE",{class:!0});var Jc=r(dt);ja=o(Jc,"all"),Jc.forEach(s),Xa=o(ao," option that I had missed out, basically it says,"),ao.forEach(s),Ga=c(h),_o=l(h,"BLOCKQUOTE",{});var Vc=r(_o);X=l(Vc,"P",{});var Ke=r(X);xo=l(Ke,"STRONG",{});var zc=r(xo);Na=o(zc,"only parse"),zc.forEach(s),Ua=o(Ke," Flow-specific features if a "),ft=l(Ke,"CODE",{class:!0});var Qc=r(ft);Wa=o(Qc,"@flow"),Qc.forEach(s),Ya=o(Ke," pragma is "),Io=l(Ke,"STRONG",{});var $c=r(Io);Ja=o($c,"present atop"),$c.forEach(s),Va=o(Ke," the file"),Ke.forEach(s),Vc.forEach(s),za=c(h),Ao=l(h,"P",{});var Kc=r(Ao);Qa=o(Kc,"It seems that in my file,"),Kc.forEach(s),$a=c(h),ut=l(h,"DIV",{class:!0});var yd=r(ut);yd.forEach(s),Ka=c(h),N=l(h,"P",{});var lo=r(N);Za=o(lo,"I had a innocent looking "),vt=l(lo,"CODE",{class:!0});var Zc=r(vt);el=o(Zc,"/** @module */"),Zc.forEach(s),tl=o(lo," comment above "),kt=l(lo,"CODE",{class:!0});var ep=r(kt);ol=o(ep,"// @flow"),ep.forEach(s),sl=o(lo," that breaks my babel plugin!"),lo.forEach(s),al=c(h),Co=l(h,"P",{});var tp=r(Co);ll=o(tp,"So the quick fix is to either:"),tp.forEach(s),rl=c(h),ke=l(h,"UL",{});var Bs=r(ke);U=l(Bs,"LI",{});var ro=r(U);nl=o(ro,"Move "),yt=l(ro,"CODE",{class:!0});var op=r(yt);il=o(op,"// @flow"),op.forEach(s),cl=o(ro," comment above "),bt=l(ro,"CODE",{class:!0});var sp=r(bt);pl=o(sp,"/** @module foobar */"),sp.forEach(s),hl=o(ro,", or"),ro.forEach(s),dl=c(Bs),W=l(Bs,"LI",{});var no=r(W);fl=o(no,"Set "),mt=l(no,"CODE",{class:!0});var ap=r(mt);ul=o(ap,"all: true"),ap.forEach(s),vl=o(no," in "),wt=l(no,"CODE",{class:!0});var lp=r(wt);kl=o(lp,"@babel/plugin-transform-flow-strip-types"),lp.forEach(s),yl=o(no,"."),no.forEach(s),Bs.forEach(s),bl=c(h),Po=l(h,"P",{});var rp=r(Po);ml=o(rp,"Either way, it solves the issue."),rp.forEach(s),wl=c(h),To=l(h,"P",{});var np=r(To);gl=o(np,"However, one thing bothers me:"),np.forEach(s),El=c(h),Oo=l(h,"BLOCKQUOTE",{});var ip=r(Oo);ye=l(ip,"P",{});var Ms=r(ye);_l=o(Ms,"My Flow works perfectly fine with an extra comment on top "),gt=l(Ms,"CODE",{class:!0});var cp=r(gt);xl=o(cp,"// @flow"),cp.forEach(s),Il=o(Ms,", it still typechecks and provides auto-suggestions."),Ms.forEach(s),ip.forEach(s),Al=c(h),Y=l(h,"P",{});var io=r(Y);Cl=o(io,"So, the logic for "),Et=l(io,"CODE",{class:!0});var pp=r(Et);Pl=o(pp,"@babel/plugin-transform-flow-strip-types"),pp.forEach(s),Tl=o(io," and Flow to determine whether a file is a Flow file or not "),So=l(io,"STRONG",{});var hp=r(So);Ol=o(hp,"is different"),hp.forEach(s),Sl=o(io,"!"),io.forEach(s),Dl=c(h),be=l(h,"P",{});var Rs=r(be);Ll=o(Rs,"And as a frequent user of Open Source libraries, this is something I think I "),Do=l(Rs,"DEL",{});var dp=r(Do);Fl=o(dp,"can"),dp.forEach(s),Bl=o(Rs," should fix, for the betterment of the JavaScript Open Source world \u{1F605}. I always imagine there's another innocent front-end developer across the world like me stumbled upon a perplexing bug, if only me let the bug go with a workaround/patch."),Rs.forEach(s),Ml=c(h),Lo=l(h,"BLOCKQUOTE",{});var fp=r(Lo);Fo=l(fp,"P",{});var up=r(Fo);Rl=o(up,"There's so much to achieve if we, not just consume the effort of others from the Open Source, but to also contribute into it."),up.forEach(s),fp.forEach(s),h.forEach(s),As=c(d),B=l(d,"SECTION",{});var ne=r(B);Bo=l(ne,"H2",{});var vp=r(Bo);me=l(vp,"A",{href:!0,id:!0});var kp=r(me);ql=o(kp,"Game Plan"),kp.forEach(s),vp.forEach(s),Hl=c(ne),Mo=l(ne,"P",{});var yp=r(Mo);jl=o(yp,"So, to fix this bug, one simply has to:"),yp.forEach(s),Xl=c(ne),H=l(ne,"UL",{});var ie=r(H);Ro=l(ie,"LI",{});var bp=r(Ro);Gl=o(bp,"Read Flow's source code and understand the logic"),bp.forEach(s),Nl=c(ie),qo=l(ie,"LI",{});var mp=r(qo);Ul=o(mp,"Read @babel/plugin-transform-strip-flow-type's source code and understand the logic"),mp.forEach(s),Wl=c(ie),Ho=l(ie,"LI",{});var wp=r(Ho);Yl=o(wp,"Make changes to babel code"),wp.forEach(s),Jl=c(ie),jo=l(ie,"LI",{});var gp=r(jo);Vl=o(gp,"Send a MR and brag about it \u{1F60E}"),gp.forEach(s),ie.forEach(s),zl=c(ne),we=l(ne,"P",{});var qs=r(we);Ql=o(qs,`Whether this is achieveable at my current level, that's a different story.
But `),Xo=l(qs,"STRONG",{});var Ep=r(Xo);$l=o(Ep,"one has nothing to lose to try and fail"),Ep.forEach(s),Kl=o(qs,"."),qs.forEach(s),ne.forEach(s),Cs=c(d),f=l(d,"SECTION",{});var u=r(f);Go=l(u,"H2",{});var _p=r(Go);ge=l(_p,"A",{href:!0,id:!0});var xp=r(ge);Zl=o(xp,"Flow"),xp.forEach(s),_p.forEach(s),er=c(u),j=l(u,"P",{});var ce=r(j);tr=o(ce,"I've read a bit of Flow source code previously, mainly to "),Ee=l(ce,"A",{href:!0,rel:!0});var Ip=r(Ee);or=o(Ip,"fix a bad developer experience I had with flowconfig previously"),Ip.forEach(s),sr=o(ce,". I had to learn "),_e=l(ce,"A",{href:!0,rel:!0});var Ap=r(_e);ar=o(Ap,"OCaml"),Ap.forEach(s),lr=o(ce,", which was a fad a while ago because of "),xe=l(ce,"A",{href:!0,rel:!0});var Cp=r(xe);rr=o(Cp,"ReasonML"),Cp.forEach(s),nr=o(ce,", to understand Flow source code."),ce.forEach(s),ir=c(u),No=l(u,"P",{});var Pp=r(No);cr=o(Pp,"So, this time around, I am much more comfortable to dig the code to find out the information I want."),Pp.forEach(s),pr=c(u),A=l(u,"P",{});var M=r(A);hr=o(M,"I searched for the term "),_t=l(M,"CODE",{class:!0});var Tp=r(_t);dr=o(Tp,'"@flow"'),Tp.forEach(s),fr=o(M,", which ended me up with "),Ie=l(M,"A",{href:!0,rel:!0});var Op=r(Ie);ur=o(Op,"this function"),Op.forEach(s),vr=o(M,", "),xt=l(M,"CODE",{class:!0});var Sp=r(xt);kr=o(Sp,"extract_docblock"),Sp.forEach(s),yr=o(M," which returns me the information of whether "),It=l(M,"CODE",{class:!0});var Dp=r(It);br=o(Dp,"@flow"),Dp.forEach(s),mr=o(M," is present in the file. And I dug further, I ended up with "),J=l(M,"A",{href:!0,rel:!0});var Hs=r(J);wr=o(Hs,"the annonymous function that "),At=l(Hs,"CODE",{class:!0});var Lp=r(At);gr=o(Lp,"extract_docblck"),Lp.forEach(s),Er=o(Hs," returns"),Hs.forEach(s),_r=o(M,"."),M.forEach(s),xr=c(u),Uo=l(u,"P",{});var Fp=r(Uo);Ir=o(Fp,"Allow me to loosely translate the logic into some pseudo JavaScript:"),Fp.forEach(s),Ar=c(u),Ct=l(u,"DIV",{class:!0});var bd=r(Ct);bd.forEach(s),Cr=c(u),Wo=l(u,"P",{});var Bp=r(Wo);Pr=o(Bp,"In human language:"),Bp.forEach(s),Tr=c(u),V=l(u,"P",{});var co=r(V);Or=o(co,"Flow will read "),Pt=l(co,"CODE",{class:!0});var Mp=r(Pt);Sr=o(Mp,"maxTokens"),Mp.forEach(s),Dr=o(co," number of tokens, look for comments that matches "),Tt=l(co,"CODE",{class:!0});var Rp=r(Tt);Lr=o(Rp,"@flow"),Rp.forEach(s),Fr=o(co,", if it encounters any order tokens, it will bail out early, with the exception of string and semicolon."),co.forEach(s),Br=c(u),Yo=l(u,"P",{});var qp=r(Yo);Mr=o(qp,"So,"),qp.forEach(s),Rr=c(u),Ot=l(u,"DIV",{class:!0});var md=r(Ot);md.forEach(s),qr=c(u),Jo=l(u,"P",{});var Hp=r(Jo);Hr=o(Hp,"and"),Hp.forEach(s),jr=c(u),St=l(u,"DIV",{class:!0});var wd=r(St);wd.forEach(s),Xr=c(u),Vo=l(u,"P",{});var jp=r(Vo);Gr=o(jp,"is considered as a valid Flow file."),jp.forEach(s),Nr=c(u),zo=l(u,"P",{});var Xp=r(zo);Ur=o(Xp,"But"),Xp.forEach(s),Wr=c(u),Dt=l(u,"DIV",{class:!0});var gd=r(Dt);gd.forEach(s),Yr=c(u),Qo=l(u,"P",{});var Gp=r(Qo);Jr=o(Gp,"or"),Gp.forEach(s),Vr=c(u),Lt=l(u,"DIV",{class:!0});var Ed=r(Lt);Ed.forEach(s),zr=c(u),$o=l(u,"P",{});var Np=r($o);Qr=o(Np,"is not."),Np.forEach(s),u.forEach(s),Ps=c(d),v=l(d,"SECTION",{});var y=r(v);Ko=l(y,"H2",{});var Up=r(Ko);Ae=l(Up,"A",{href:!0,id:!0});var Wp=r(Ae);$r=o(Wp,"Babel"),Wp.forEach(s),Up.forEach(s),Kr=c(y),Ce=l(y,"P",{});var js=r(Ce);Zr=o(js,"At first, I thought that the logic would be in "),Ft=l(js,"CODE",{class:!0});var Yp=r(Ft);en=o(Yp,"@babel/transform-strip-flow-types"),Yp.forEach(s),tn=o(js,", but apparently, its not."),js.forEach(s),on=c(y),C=l(y,"P",{});var R=r(C);sn=o(R,"I discovered that by realising that the "),Pe=l(R,"A",{href:!0,rel:!0});var Jp=r(Pe);an=o(Jp,"source code of @babel/transform-strip-flow-types"),Jp.forEach(s),ln=o(R," did not include anything about the "),Bt=l(R,"CODE",{class:!0});var Vp=r(Bt);rn=o(Vp,"all"),Vp.forEach(s),nn=o(R," options, and "),Te=l(R,"A",{href:!0,rel:!0});var zp=r(Te);cn=o(zp,"this plugin extends the @babel/plugin-syntax-flow"),zp.forEach(s),pn=o(R,", which I knew fairly well that syntax plugins in babel does nothing but to enable syntax switch of the "),Mt=l(R,"CODE",{class:!0});var Qp=r(Mt);hn=o(Qp,"@babel/parser"),Qp.forEach(s),dn=o(R,". The bulk of the logic lies within the "),ae=l(R,"A",{href:!0,rel:!0});var _c=r(ae);Rt=l(_c,"CODE",{class:!0});var $p=r(Rt);fn=o($p,"@babel/parser"),$p.forEach(s),un=o(_c,"'s flow plugin"),_c.forEach(s),vn=o(R,"."),R.forEach(s),kn=c(y),Oe=l(y,"P",{});var Xs=r(Oe);yn=o(Xs,"That was all because "),z=l(Xs,"A",{href:!0,rel:!0});var Gs=r(z);bn=o(Gs,"I contributed to "),qt=l(Gs,"CODE",{class:!0});var Kp=r(qt);mn=o(Kp,"@babel/parser"),Kp.forEach(s),wn=o(Gs," before"),Gs.forEach(s),gn=o(Xs,"."),Xs.forEach(s),En=c(y),Se=l(y,"P",{});var Ns=r(Se);_n=o(Ns,"And here we are in babel-parser, and the line that caught my attention is "),De=l(Ns,"A",{href:!0,rel:!0});var Zp=r(De);xn=o(Zp,"this"),Zp.forEach(s),In=o(Ns,":"),Ns.forEach(s),An=c(y),Ht=l(y,"DIV",{class:!0});var _d=r(Ht);_d.forEach(s),Cn=c(y),Zo=l(y,"P",{});var eh=r(Zo);Pn=o(eh,"So, the babel's logic of getting a Flow pragma is that as soon as the first comment encountered, we parse the comment and we turn on the Flow syntax switch."),eh.forEach(s),Tn=c(y),Le=l(y,"P",{});var Us=r(Le);On=o(Us,"This is the reason why if we have a comment before "),jt=l(Us,"CODE",{class:!0});var th=r(jt);Sn=o(th,"// @flow"),th.forEach(s),Dn=o(Us,", we will not treat the file as a valid Flow file."),Us.forEach(s),Ln=c(y),es=l(y,"P",{});var oh=r(es);Fn=o(oh,"Interesting enough, this means that if we write"),oh.forEach(s),Bn=c(y),Xt=l(y,"DIV",{class:!0});var xd=r(Xt);xd.forEach(s),Mn=c(y),Q=l(y,"P",{});var po=r(Q);Rn=o(po,"the first half of the code before "),Gt=l(po,"CODE",{class:!0});var sh=r(Gt);qn=o(sh,"// @flow"),sh.forEach(s),Hn=o(po," was parsed as a normal JS code, and the second half after "),Nt=l(po,"CODE",{class:!0});var ah=r(Nt);jn=o(ah,"// @flow"),ah.forEach(s),Xn=o(po," was parsed as a Flow code."),po.forEach(s),Gn=c(y),Fe=l(y,"P",{});var Ws=r(Fe);Nn=o(Ws,"You can see this clearly with "),Ts=Rd(Ws),Os=o(Ws,"."),Ws.forEach(s),Un=c(y),Ut=l(y,"P",{});var xc=r(Ut);ts=l(xc,"EM",{});var lh=r(ts);Wn=o(lh,"(I built it with React + Hooks over a long weekend, which I will share about how did it in the future.)"),lh.forEach(s),Yn=o(xc,"."),xc.forEach(s),Jn=c(y),$=l(y,"P",{});var ho=r($);Vn=o(ho,"You can see that the first expression is a "),Wt=l(ho,"CODE",{class:!0});var rh=r(Wt);zn=o(rh,"BinaryExpression"),rh.forEach(s),Qn=o(ho," but the second expression is a "),Yt=l(ho,"CODE",{class:!0});var nh=r(Yt);$n=o(nh,"CallExpression"),nh.forEach(s),Kn=o(ho,";"),ho.forEach(s),y.forEach(s),Ss=c(d),b=l(d,"SECTION",{});var E=r(b);os=l(E,"H2",{});var ih=r(os);Be=l(ih,"A",{href:!0,id:!0});var ch=r(Be);Zn=o(ch,"Make changes to the babel code"),ch.forEach(s),ih.forEach(s),ei=c(E),Me=l(E,"P",{});var Ys=r(Me);ti=o(Ys,"Now step 3, make changes to babel code. So I decided to open an issue and started fixing the code. Surprisingly, someone else "),Re=l(Ys,"A",{href:!0,rel:!0});var ph=r(Re);oi=o(ph,"had reported the issue a few months ago"),ph.forEach(s),si=o(Ys,", and the issue was still opened."),Ys.forEach(s),ai=c(E),K=l(E,"P",{});var fo=r(K);li=o(fo,"So "),qe=l(fo,"A",{href:!0,rel:!0});var hh=r(qe);ri=o(hh,"I explained what I had discovered"),hh.forEach(s),ni=o(fo,", and tried to "),He=l(fo,"A",{href:!0,rel:!0});var dh=r(He);ii=o(dh,"propose a solution"),dh.forEach(s),ci=o(fo,". Well, after some struggle, I realised I am still a bit behind from being able to fix this code."),fo.forEach(s),pi=c(E),ss=l(E,"P",{});var fh=r(ss);hi=o(fh,"So how?"),fh.forEach(s),di=c(E),x=l(E,"P",{});var P=r(x);fi=o(P,"I submitted a "),je=l(P,"A",{href:!0,rel:!0});var uh=r(je);ui=o(uh,"PR"),uh.forEach(s),vi=o(P," with a big "),as=l(P,"STRONG",{});var vh=r(as);ki=o(vh,"WIP"),vh.forEach(s),yi=o(P,", because I didn't know how to look ahead "),Jt=l(P,"CODE",{class:!0});var kh=r(Jt);bi=o(kh,"n"),kh.forEach(s),mi=o(P," tokens and determine the "),Vt=l(P,"CODE",{class:!0});var yh=r(Vt);wi=o(yh,"flowPragma"),yh.forEach(s),gi=o(P," flag before "),zt=l(P,"CODE",{class:!0});var bh=r(zt);Ei=o(bh,"babel"),bh.forEach(s),_i=o(P," starts parsing the code. I explored around the "),Qt=l(P,"CODE",{class:!0});var mh=r(Qt);xi=o(mh,"babel-parser"),mh.forEach(s),Ii=o(P," source code, uncover new concepts that I never knew before. It took me a day to contemplate and fiddle around, until something sparked me."),P.forEach(s),Ai=c(E),Z=l(E,"P",{});var uo=r(Z);Ci=o(uo,"I realised I do not have to follow exactly Flow's logic in order to achieve similar behaviour. That's when I submitted another "),Xe=l(uo,"A",{href:!0,rel:!0});var wh=r(Xe);Pi=o(wh,"PR"),wh.forEach(s),Ti=o(uo," and closed the previous one. "),ls=l(uo,"EM",{});var gh=r(ls);Oi=o(gh,"(You can check it out if you are curious about it)"),gh.forEach(s),Si=o(uo,"."),uo.forEach(s),Di=c(E),Ge=l(E,"P",{});var Js=r(Ge);Li=o(Js,"And finally, the fix has merged into "),Ne=l(Js,"A",{href:!0,rel:!0});var Eh=r(Ne);Fi=o(Eh,"babel v7.4.4"),Eh.forEach(s),Bi=o(Js,"! \u{1F389}\u{1F389}"),Js.forEach(s),Mi=c(E),rs=l(E,"P",{});var _h=r(rs);Ri=o(_h,"And I can't wait to try all the edge cases that I have fixed in babel repl:"),_h.forEach(s),qi=c(E),ee=l(E,"UL",{});var vo=r(ee);ns=l(vo,"LI",{});var xh=r(ns);te=l(xh,"A",{href:!0,rel:!0});var Vs=r(te);$t=l(Vs,"CODE",{class:!0});var Ih=r($t);Hi=o(Ih,"'use strict'"),Ih.forEach(s),ji=o(Vs,"; before "),Kt=l(Vs,"CODE",{class:!0});var Ah=r(Kt);Xi=o(Ah,"// @flow"),Ah.forEach(s),Vs.forEach(s),xh.forEach(s),Gi=c(vo),is=l(vo,"LI",{});var Ch=r(is);le=l(Ch,"A",{href:!0,rel:!0});var Ic=r(le);Ni=o(Ic,"comments before "),Zt=l(Ic,"CODE",{class:!0});var Ph=r(Zt);Ui=o(Ph,"//@flow"),Ph.forEach(s),Ic.forEach(s),Ch.forEach(s),Wi=c(vo),cs=l(vo,"LI",{});var Th=r(cs);oe=l(Th,"A",{href:!0,rel:!0});var zs=r(oe);Yi=o(zs,"first comment is "),eo=l(zs,"CODE",{class:!0});var Oh=r(eo);Ji=o(Oh,"//@flow"),Oh.forEach(s),Vi=o(zs,", but in the middle of the file"),zs.forEach(s),Th.forEach(s),vo.forEach(s),E.forEach(s),Ds=c(d),g=l(d,"SECTION",{});var T=r(g);ps=l(T,"H2",{});var Sh=r(ps);Ue=l(Sh,"A",{href:!0,id:!0});var Dh=r(Ue);zi=o(Dh,"Closing Remark"),Dh.forEach(s),Sh.forEach(s),Qi=c(T),hs=l(T,"P",{});var Lh=r(hs);ds=l(Lh,"DEL",{});var Fh=r(ds);$i=o(Fh,"Well, I am sorry that I am going to stop here, because the issue is still opened, but I hoped you enjoy the detective journey along the way of hunting this bug."),Fh.forEach(s),Lh.forEach(s),Ki=c(T),fs=l(T,"P",{});var Bh=r(fs);us=l(Bh,"DEL",{});var Mh=r(us);Zi=o(Mh,"If you encountered similar issues, you can patch it first with the solution I mentioned earlier. And do follow the Github issue, I will do my best to fix this."),Mh.forEach(s),Bh.forEach(s),ec=c(T),We=l(T,"P",{});var Qs=r(We);tc=o(Qs,"If you encountered similar issues, please "),Ye=l(Qs,"A",{href:!0,rel:!0});var Rh=r(Ye);oc=o(Rh,"upgrade babel to v7.4.4"),Rh.forEach(s),sc=o(Qs,"."),Qs.forEach(s),ac=c(T),vs=l(T,"BLOCKQUOTE",{});var qh=r(vs);ks=l(qh,"P",{});var Hh=r(ks);lc=o(Hh,"The best thing about open source is that the source code is open. As part of the JS community, we should not just reap the efforts of the community when we are building our next billion dollar idea, we should also contribute back so that the community as a whole can grow and improve together."),Hh.forEach(s),qh.forEach(s),rc=c(T),ys=l(T,"P",{});var jh=r(ys);nc=o(jh,"As usual, here are the list of references for this article:"),jh.forEach(s),ic=c(T),I=l(T,"UL",{});var O=r(I);bs=l(O,"LI",{});var Xh=r(bs);to=l(Xh,"A",{href:!0});var Gh=r(to);cc=o(Gh,"Blog: Errors encountered upgrading Flow v0.85"),Gh.forEach(s),Xh.forEach(s),pc=c(O),ms=l(O,"LI",{});var Nh=r(ms);oo=l(Nh,"A",{href:!0});var Uh=r(oo);hc=o(Uh,"My eslint doesn\u2019t work with for flow 0.85\u2019s explicit type argument syntax"),Uh.forEach(s),Nh.forEach(s),dc=c(O),ws=l(O,"LI",{});var Wh=r(ws);Je=l(Wh,"A",{href:!0,rel:!0});var Yh=r(Je);fc=o(Yh,"Docs: Upgrading Babel v7"),Yh.forEach(s),Wh.forEach(s),uc=c(O),gs=l(O,"LI",{});var Jh=r(gs);Ve=l(Jh,"A",{href:!0,rel:!0});var Vh=r(Ve);vc=o(Vh,"Docs: @babel/transform-plugin-flow-strip-types"),Vh.forEach(s),Jh.forEach(s),kc=c(O),Es=l(O,"LI",{});var zh=r(Es);ze=l(zh,"A",{href:!0,rel:!0});var Qh=r(ze);yc=o(Qh,"Docs: ReasonML"),Qh.forEach(s),zh.forEach(s),bc=c(O),_s=l(O,"LI",{});var $h=r(_s);Qe=l($h,"A",{href:!0,rel:!0});var Kh=r(Qe);mc=o(Kh,"Code: Flow Parsing Service"),Kh.forEach(s),$h.forEach(s),wc=c(O),xs=l(O,"LI",{});var Zh=r(xs);$e=l(Zh,"A",{href:!0,rel:!0});var ed=r($e);gc=o(ed,"Issue: Parsing error when calling generic functions with type arguments when flow pragma is not first comment"),ed.forEach(s),Zh.forEach(s),O.forEach(s),T.forEach(s),this.h()},h(){n(S,"href","#background"),n(S,"id","background"),n(tt,"href","/errors-encountered-upgrading-flow-0.85/"),n(he,"href","https://babeljs.io/docs/en/v7-migration"),n(he,"rel","nofollow"),n(ot,"class","inline"),n(at,"class","inline"),n(lt,"class","inline"),n(de,"href","#referenceerror-xtype-is-not-defined"),n(de,"id","referenceerror-xtype-is-not-defined"),n(rt,"class","code-section"),n(nt,"class","inline"),n(it,"class","inline"),n(ct,"class","code-section"),n(pt,"class","inline"),n(ht,"href","/eslint-for-flow-explicit-type-argument-syntax/"),n(ve,"href","https://babeljs.io/docs/en/babel-plugin-transform-flow-strip-types"),n(ve,"rel","nofollow"),n(dt,"class","inline"),n(ft,"class","inline"),n(ut,"class","code-section"),n(vt,"class","inline"),n(kt,"class","inline"),n(yt,"class","inline"),n(bt,"class","inline"),n(mt,"class","inline"),n(wt,"class","inline"),n(gt,"class","inline"),n(Et,"class","inline"),n(me,"href","#game-plan"),n(me,"id","game-plan"),n(ge,"href","#flow"),n(ge,"id","flow"),n(Ee,"href","https://github.com/facebook/flow/pull/7083"),n(Ee,"rel","nofollow"),n(_e,"href","https://ocaml.org/"),n(_e,"rel","nofollow"),n(xe,"href","https://reasonml.github.io/"),n(xe,"rel","nofollow"),n(_t,"class","inline"),n(Ie,"href","https://github.com/facebook/flow/blob/master/src/parsing/parsing_service_js.ml#L143"),n(Ie,"rel","nofollow"),n(xt,"class","inline"),n(It,"class","inline"),n(At,"class","inline"),n(J,"href","https://github.com/facebook/flow/blob/master/src/parsing/parsing_service_js.ml#L275"),n(J,"rel","nofollow"),n(Ct,"class","code-section"),n(Pt,"class","inline"),n(Tt,"class","inline"),n(Ot,"class","code-section"),n(St,"class","code-section"),n(Dt,"class","code-section"),n(Lt,"class","code-section"),n(Ae,"href","#babel"),n(Ae,"id","babel"),n(Ft,"class","inline"),n(Pe,"href","https://github.com/babel/babel/blob/master/packages/babel-plugin-transform-flow-strip-types/src/index.js"),n(Pe,"rel","nofollow"),n(Bt,"class","inline"),n(Te,"href","https://github.com/babel/babel/blob/master/packages/babel-plugin-transform-flow-strip-types/src/index.js#L14"),n(Te,"rel","nofollow"),n(Mt,"class","inline"),n(Rt,"class","inline"),n(ae,"href","https://github.com/babel/babel/blob/master/packages/babel-parser/src/plugins/flow.js"),n(ae,"rel","nofollow"),n(qt,"class","inline"),n(z,"href","https://github.com/babel/babel/pulls?q=is%3Apr+is%3Aclosed+author%3Atanhauhau"),n(z,"rel","nofollow"),n(De,"href","https://github.com/babel/babel/blob/master/packages/babel-parser/src/plugins/flow.js#L98"),n(De,"rel","nofollow"),n(Ht,"class","code-section"),n(jt,"class","inline"),n(Xt,"class","code-section"),n(Gt,"class","inline"),n(Nt,"class","inline"),Ts.a=Os,n(Wt,"class","inline"),n(Yt,"class","inline"),n(Be,"href","#make-changes-to-the-babel-code"),n(Be,"id","make-changes-to-the-babel-code"),n(Re,"href","https://github.com/babel/babel/issues/9240"),n(Re,"rel","nofollow"),n(qe,"href","https://github.com/babel/babel/issues/9240#issuecomment-485370957"),n(qe,"rel","nofollow"),n(He,"href","https://github.com/babel/babel/pull/9885"),n(He,"rel","nofollow"),n(je,"href","https://github.com/babel/babel/pull/9885"),n(je,"rel","nofollow"),n(Jt,"class","inline"),n(Vt,"class","inline"),n(zt,"class","inline"),n(Qt,"class","inline"),n(Xe,"href","https://github.com/babel/babel/pull/9891"),n(Xe,"rel","nofollow"),n(Ne,"href","https://github.com/babel/babel/releases/tag/v7.4.4"),n(Ne,"rel","nofollow"),n($t,"class","inline"),n(Kt,"class","inline"),n(te,"href","https://babeljs.io/repl#?babili=false&browsers=&build=&builtIns=false&spec=false&loose=false&code_lz=OQVwzgpgBGAuBOBLAxrYBuAUAem1AAgGYA2A9gO6aGmkA8AggHwAUARgJRbV1NudA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=false&presets=&prettier=false&targets=&version=7.4.4&externalPlugins=%40babel%2Fplugin-transform-flow-strip-types%407.4.4"),n(te,"rel","nofollow"),n(Zt,"class","inline"),n(le,"href","https://babeljs.io/repl#?babili=false&browsers=&build=&builtIns=false&spec=false&loose=false&code_lz=PQKhAIAEFsHsBMCuAbApgZ3AM1rcJgAoYYKLZWAd0J1gB4BBAPgAoAjASgG4bdHXOXIA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=false&presets=&prettier=false&targets=&version=7.4.4&externalPlugins=%40babel%2Fplugin-transform-flow-strip-types%407.4.4"),n(le,"rel","nofollow"),n(eo,"class","inline"),n(oe,"href","https://babeljs.io/repl#?babili=false&browsers=&build=&builtIns=false&spec=false&loose=false&code_lz=GYexB4EED4AoCMCUBuAUAenQAgALADYgDuqoEMCKQA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=false&presets=&prettier=false&targets=&version=7.4.4&externalPlugins=%40babel%2Fplugin-transform-flow-strip-types%407.4.4"),n(oe,"rel","nofollow"),n(Ue,"href","#closing-remark"),n(Ue,"id","closing-remark"),n(Ye,"href","https://github.com/babel/babel/releases/tag/v7.4.4"),n(Ye,"rel","nofollow"),n(to,"href","/errors-encountered-upgrading-flow-0.85"),n(oo,"href","/eslint-for-flow-explicit-type-argument-syntax/"),n(Je,"href","https://babeljs.io/docs/en/v7-migration"),n(Je,"rel","nofollow"),n(Ve,"href","https://babeljs.io/docs/en/babel-plugin-transform-flow-strip-types"),n(Ve,"rel","nofollow"),n(ze,"href","https://reasonml.github.io/"),n(ze,"rel","nofollow"),n(Qe,"href","https://github.com/facebook/flow/blob/master/src/parsing/parsing_service_js.ml"),n(Qe,"rel","nofollow"),n($e,"href","https://github.com/babel/babel/issues/9240"),n($e,"rel","nofollow")},m(d,m){D(d,k,m),e(k,L),e(L,S),e(S,pe),e(k,w),e(k,_),e(_,et),e(_,tt),e(tt,$s),e(_,Ks),e(_,he),e(he,Zs),e(_,ea),e(k,ta),e(k,F),e(F,ot),e(ot,oa),e(F,sa),e(F,st),e(st,aa),e(st,at),e(at,la),e(F,ra),e(F,lt),e(lt,na),e(F,ia),e(F,ko),e(ko,ca),e(F,pa),e(k,ha),e(k,yo),e(yo,bo),e(bo,da),D(d,Is,m),D(d,p,m),e(p,mo),e(mo,de),e(de,fa),e(p,ua),e(p,rt),rt.innerHTML=ad,e(p,va),e(p,q),e(q,ka),e(q,nt),e(nt,ya),e(q,ba),e(q,wo),e(wo,ma),e(q,wa),e(q,it),e(it,ga),e(q,Ea),e(p,_a),e(p,go),e(go,xa),e(p,Ia),e(p,Eo),e(Eo,Aa),e(p,Ca),e(p,ct),ct.innerHTML=ld,e(p,Pa),e(p,fe),e(fe,Ta),e(fe,pt),e(pt,Oa),e(fe,Sa),e(p,Da),e(p,ue),e(ue,La),e(ue,ht),e(ht,Fa),e(ue,Ba),e(p,Ma),e(p,G),e(G,Ra),e(G,ve),e(ve,qa),e(G,Ha),e(G,dt),e(dt,ja),e(G,Xa),e(p,Ga),e(p,_o),e(_o,X),e(X,xo),e(xo,Na),e(X,Ua),e(X,ft),e(ft,Wa),e(X,Ya),e(X,Io),e(Io,Ja),e(X,Va),e(p,za),e(p,Ao),e(Ao,Qa),e(p,$a),e(p,ut),ut.innerHTML=rd,e(p,Ka),e(p,N),e(N,Za),e(N,vt),e(vt,el),e(N,tl),e(N,kt),e(kt,ol),e(N,sl),e(p,al),e(p,Co),e(Co,ll),e(p,rl),e(p,ke),e(ke,U),e(U,nl),e(U,yt),e(yt,il),e(U,cl),e(U,bt),e(bt,pl),e(U,hl),e(ke,dl),e(ke,W),e(W,fl),e(W,mt),e(mt,ul),e(W,vl),e(W,wt),e(wt,kl),e(W,yl),e(p,bl),e(p,Po),e(Po,ml),e(p,wl),e(p,To),e(To,gl),e(p,El),e(p,Oo),e(Oo,ye),e(ye,_l),e(ye,gt),e(gt,xl),e(ye,Il),e(p,Al),e(p,Y),e(Y,Cl),e(Y,Et),e(Et,Pl),e(Y,Tl),e(Y,So),e(So,Ol),e(Y,Sl),e(p,Dl),e(p,be),e(be,Ll),e(be,Do),e(Do,Fl),e(be,Bl),e(p,Ml),e(p,Lo),e(Lo,Fo),e(Fo,Rl),D(d,As,m),D(d,B,m),e(B,Bo),e(Bo,me),e(me,ql),e(B,Hl),e(B,Mo),e(Mo,jl),e(B,Xl),e(B,H),e(H,Ro),e(Ro,Gl),e(H,Nl),e(H,qo),e(qo,Ul),e(H,Wl),e(H,Ho),e(Ho,Yl),e(H,Jl),e(H,jo),e(jo,Vl),e(B,zl),e(B,we),e(we,Ql),e(we,Xo),e(Xo,$l),e(we,Kl),D(d,Cs,m),D(d,f,m),e(f,Go),e(Go,ge),e(ge,Zl),e(f,er),e(f,j),e(j,tr),e(j,Ee),e(Ee,or),e(j,sr),e(j,_e),e(_e,ar),e(j,lr),e(j,xe),e(xe,rr),e(j,nr),e(f,ir),e(f,No),e(No,cr),e(f,pr),e(f,A),e(A,hr),e(A,_t),e(_t,dr),e(A,fr),e(A,Ie),e(Ie,ur),e(A,vr),e(A,xt),e(xt,kr),e(A,yr),e(A,It),e(It,br),e(A,mr),e(A,J),e(J,wr),e(J,At),e(At,gr),e(J,Er),e(A,_r),e(f,xr),e(f,Uo),e(Uo,Ir),e(f,Ar),e(f,Ct),Ct.innerHTML=nd,e(f,Cr),e(f,Wo),e(Wo,Pr),e(f,Tr),e(f,V),e(V,Or),e(V,Pt),e(Pt,Sr),e(V,Dr),e(V,Tt),e(Tt,Lr),e(V,Fr),e(f,Br),e(f,Yo),e(Yo,Mr),e(f,Rr),e(f,Ot),Ot.innerHTML=id,e(f,qr),e(f,Jo),e(Jo,Hr),e(f,jr),e(f,St),St.innerHTML=cd,e(f,Xr),e(f,Vo),e(Vo,Gr),e(f,Nr),e(f,zo),e(zo,Ur),e(f,Wr),e(f,Dt),Dt.innerHTML=pd,e(f,Yr),e(f,Qo),e(Qo,Jr),e(f,Vr),e(f,Lt),Lt.innerHTML=hd,e(f,zr),e(f,$o),e($o,Qr),D(d,Ps,m),D(d,v,m),e(v,Ko),e(Ko,Ae),e(Ae,$r),e(v,Kr),e(v,Ce),e(Ce,Zr),e(Ce,Ft),e(Ft,en),e(Ce,tn),e(v,on),e(v,C),e(C,sn),e(C,Pe),e(Pe,an),e(C,ln),e(C,Bt),e(Bt,rn),e(C,nn),e(C,Te),e(Te,cn),e(C,pn),e(C,Mt),e(Mt,hn),e(C,dn),e(C,ae),e(ae,Rt),e(Rt,fn),e(ae,un),e(C,vn),e(v,kn),e(v,Oe),e(Oe,yn),e(Oe,z),e(z,bn),e(z,qt),e(qt,mn),e(z,wn),e(Oe,gn),e(v,En),e(v,Se),e(Se,_n),e(Se,De),e(De,xn),e(Se,In),e(v,An),e(v,Ht),Ht.innerHTML=dd,e(v,Cn),e(v,Zo),e(Zo,Pn),e(v,Tn),e(v,Le),e(Le,On),e(Le,jt),e(jt,Sn),e(Le,Dn),e(v,Ln),e(v,es),e(es,Fn),e(v,Bn),e(v,Xt),Xt.innerHTML=fd,e(v,Mn),e(v,Q),e(Q,Rn),e(Q,Gt),e(Gt,qn),e(Q,Hn),e(Q,Nt),e(Nt,jn),e(Q,Xn),e(v,Gn),e(v,Fe),e(Fe,Nn),Ts.m(ud,Fe),e(Fe,Os),e(v,Un),e(v,Ut),e(Ut,ts),e(ts,Wn),e(Ut,Yn),e(v,Jn),e(v,$),e($,Vn),e($,Wt),e(Wt,zn),e($,Qn),e($,Yt),e(Yt,$n),e($,Kn),D(d,Ss,m),D(d,b,m),e(b,os),e(os,Be),e(Be,Zn),e(b,ei),e(b,Me),e(Me,ti),e(Me,Re),e(Re,oi),e(Me,si),e(b,ai),e(b,K),e(K,li),e(K,qe),e(qe,ri),e(K,ni),e(K,He),e(He,ii),e(K,ci),e(b,pi),e(b,ss),e(ss,hi),e(b,di),e(b,x),e(x,fi),e(x,je),e(je,ui),e(x,vi),e(x,as),e(as,ki),e(x,yi),e(x,Jt),e(Jt,bi),e(x,mi),e(x,Vt),e(Vt,wi),e(x,gi),e(x,zt),e(zt,Ei),e(x,_i),e(x,Qt),e(Qt,xi),e(x,Ii),e(b,Ai),e(b,Z),e(Z,Ci),e(Z,Xe),e(Xe,Pi),e(Z,Ti),e(Z,ls),e(ls,Oi),e(Z,Si),e(b,Di),e(b,Ge),e(Ge,Li),e(Ge,Ne),e(Ne,Fi),e(Ge,Bi),e(b,Mi),e(b,rs),e(rs,Ri),e(b,qi),e(b,ee),e(ee,ns),e(ns,te),e(te,$t),e($t,Hi),e(te,ji),e(te,Kt),e(Kt,Xi),e(ee,Gi),e(ee,is),e(is,le),e(le,Ni),e(le,Zt),e(Zt,Ui),e(ee,Wi),e(ee,cs),e(cs,oe),e(oe,Yi),e(oe,eo),e(eo,Ji),e(oe,Vi),D(d,Ds,m),D(d,g,m),e(g,ps),e(ps,Ue),e(Ue,zi),e(g,Qi),e(g,hs),e(hs,ds),e(ds,$i),e(g,Ki),e(g,fs),e(fs,us),e(us,Zi),e(g,ec),e(g,We),e(We,tc),e(We,Ye),e(Ye,oc),e(We,sc),e(g,ac),e(g,vs),e(vs,ks),e(ks,lc),e(g,rc),e(g,ys),e(ys,nc),e(g,ic),e(g,I),e(I,bs),e(bs,to),e(to,cc),e(I,pc),e(I,ms),e(ms,oo),e(oo,hc),e(I,dc),e(I,ws),e(ws,Je),e(Je,fc),e(I,uc),e(I,gs),e(gs,Ve),e(Ve,vc),e(I,kc),e(I,Es),e(Es,ze),e(ze,yc),e(I,bc),e(I,_s),e(_s,Qe),e(Qe,mc),e(I,wc),e(I,xs),e(xs,$e),e($e,gc)},p:qd,d(d){d&&s(k),d&&s(Is),d&&s(p),d&&s(As),d&&s(B),d&&s(Cs),d&&s(f),d&&s(Ps),d&&s(v),d&&s(Ss),d&&s(b),d&&s(Ds),d&&s(g)}}}function Gd(Ze){let k,L;const S=[Ze[0],sd];let pe={$$slots:{default:[Xd]},$$scope:{ctx:Ze}};for(let w=0;w<S.length;w+=1)pe=Ac(pe,S[w]);return k=new Hd({props:pe}),{c(){Pd(k.$$.fragment)},l(w){Td(k.$$.fragment,w)},m(w,_){Od(k,w,_),L=!0},p(w,[_]){const et=_&1?Sd(S,[_&1&&td(w[0]),_&0&&td(sd)]):{};_&2&&(et.$$scope={dirty:_,ctx:w}),k.$set(et)},i(w){L||(Dd(k.$$.fragment,w),L=!0)},o(w){Ld(k.$$.fragment,w),L=!1},d(w){Fd(k,w)}}}const sd={title:"Parsing error when calling generic function with type arguments",date:"2019-04-23T08:00:00Z",lastUpdated:"2019-04-27T08:00:00Z",description:"\u{1F631}",label:"blog",tableOfContents:[{link:"background",title:"Background"},{link:"referenceerror-xtype-is-not-defined",title:"ReferenceError: XType is not defined"},{link:"game-plan",title:"Game Plan"},{link:"flow",title:"Flow"},{link:"babel",title:"Babel"},{link:"make-changes-to-the-babel-code",title:"Make changes to the babel code"},{link:"closing-remark",title:"Closing Remark"}]};function Nd(Ze,k,L){return Bd("blog",{image:jd}),Ze.$$set=S=>{L(0,k=Ac(Ac({},k),od(S)))},k=od(k),[k]}class Qd extends Id{constructor(k){super();Ad(this,k,Nd,Gd,Cd,{})}}export{Qd as default,sd as metadata};
