import{S as Fd,i as Bd,s as Md,C as Pc,w as nd,x as id,y as cd,z as Rd,A as ad,q as pd,o as hd,B as dd,r as qd,R as ld,k as i,e as a,t,W as jd,m as c,c as l,a as r,h as o,d as s,X as Hd,b as n,g as S,F as e,O as Xd}from"../../chunks/vendor-ea160616.js";import{B as Gd}from"../../chunks/BlogLayout-1be3dc1e.js";import{T as Nd}from"../../chunks/TableOfContent-c4f5cb6e.js";import{_ as Ud}from"../../chunks/twitter-card-image-a57df29d.js";import"../../chunks/stores-7d7fda0c.js";import"../../chunks/WebMentions-d768a574.js";/* empty css                                */function $d(et){let y,M,g,G,b,R,tt,N,Zs,ot,ea,ta,de,oa,sa,aa,D,st,la,ra,at,na,lt,ia,ca,rt,pa,ha,yo,da,fa,ua,bo,mo,va,As,h,wo,fe,ka,ya,nt,fd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">foobar</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">XType</span><span style="color: var(--shiki-color-text)">&gt;(baz);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">                       </span><span style="color: var(--shiki-token-keyword)">^</span><span style="color: var(--shiki-color-text)"> ReferenceError</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> XType is not defined</span></span></code></pre>`,ba,q,ma,it,wa,ga,go,Ea,_a,ct,xa,Ia,Aa,Eo,Ca,Ta,_o,Pa,Oa,pt,ud='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">foobar</span><span style="color: var(--shiki-color-text)"> &lt; </span><span style="color: var(--shiki-token-function)">XType</span><span style="color: var(--shiki-color-text)"> &gt; </span><span style="color: var(--shiki-token-function)">baz</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>',Sa,ue,Da,ht,La,Fa,Ba,ve,Ma,dt,Ra,qa,ja,U,Ha,ke,Xa,Ga,ft,Na,Ua,$a,xo,X,Io,Wa,Va,ut,Ya,za,Ao,Ja,Qa,Ka,Co,Za,el,vt,vd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">/** </span><span style="color: var(--shiki-token-keyword)">@module</span><span style="color: var(--shiki-token-comment)"> </span><span style="color: var(--shiki-token-function)">foobar</span><span style="color: var(--shiki-token-comment)"> */</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// @flow</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">foobar</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">XType</span><span style="color: var(--shiki-color-text)">&gt;(baz);</span></span></code></pre>`,tl,$,ol,kt,sl,al,yt,ll,rl,nl,To,il,cl,ye,W,pl,bt,hl,dl,mt,fl,ul,vl,V,kl,wt,yl,bl,gt,ml,wl,gl,Po,El,_l,Oo,xl,Il,So,be,Al,Et,Cl,Tl,Pl,Y,Ol,_t,Sl,Dl,Do,Ll,Fl,Bl,me,Ml,Lo,Rl,ql,jl,Fo,Bo,Hl,Cs,L,Mo,we,Xl,Gl,Ro,Nl,Ul,j,qo,$l,Wl,jo,Vl,Yl,Ho,zl,Jl,Xo,Ql,Kl,ge,Zl,Go,er,tr,Ts,f,No,Ee,or,sr,H,ar,_e,lr,rr,xe,nr,ir,Ie,cr,pr,hr,Uo,dr,fr,A,ur,xt,vr,kr,Ae,yr,br,It,mr,wr,At,gr,Er,z,_r,Ct,xr,Ir,Ar,Cr,$o,Tr,Pr,Tt,kd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">extract_docblock</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (&#123; maxTokens</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> filename</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> content &#125;) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">file</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">read</span><span style="color: var(--shiki-color-text)">(filename);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> maxTokens; i </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i</span><span style="color: var(--shiki-token-keyword)">--</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">token</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">file</span><span style="color: var(--shiki-token-function)">.nextToken</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">switch</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">token</span><span style="color: var(--shiki-color-text)">.type) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;string&#39;</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;semicolon&#39;</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">continue</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;comment&#39;</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-function)">isFlowComment</span><span style="color: var(--shiki-color-text)">(token)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">flowPragmaType</span><span style="color: var(--shiki-color-text)">(token);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">break</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,Or,Wo,Sr,Dr,J,Lr,Pt,Fr,Br,Ot,Mr,Rr,qr,Vo,jr,Hr,St,yd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-string-expression)">&#39;use strict&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// @flow</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">foobar</span><span style="color: var(--shiki-color-text)">();</span></span></code></pre>`,Xr,Yo,Gr,Nr,Dt,bd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">/** </span><span style="color: var(--shiki-token-keyword)">@module</span><span style="color: var(--shiki-token-comment)"> */</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// @flow</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">foobar</span><span style="color: var(--shiki-color-text)">();</span></span></code></pre>`,Ur,zo,$r,Wr,Jo,Vr,Yr,Lt,md=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">foobar</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// @flow</span></span></code></pre>`,zr,Qo,Jr,Qr,Ft,wd='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">foobar</span><span style="color: var(--shiki-color-text)">();</span></span></code></pre>',Kr,Ko,Zr,Ps,v,Zo,Ce,en,tn,Te,on,Bt,sn,an,ln,C,rn,Pe,nn,cn,Mt,pn,hn,Oe,dn,fn,Rt,un,vn,re,qt,kn,yn,bn,mn,Se,wn,Q,gn,jt,En,_n,xn,In,De,An,Le,Cn,Tn,Pn,Ht,gd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">addComment</span><span style="color: var(--shiki-color-text)">(comment: </span><span style="color: var(--shiki-token-constant)">N</span><span style="color: var(--shiki-color-text)">.Comment): </span><span style="color: var(--shiki-token-keyword)">void</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.flowPragma </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">undefined</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// Try to parse a flow pragma.</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">matches</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">FLOW_PRAGMA_REGEX</span><span style="color: var(--shiki-token-function)">.exec</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">comment</span><span style="color: var(--shiki-color-text)">.value);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">matches) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.flowPragma </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (matches[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;flow&quot;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.flowPragma </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;flow&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (matches[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;noflow&quot;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.flowPragma </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;noflow&quot;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;Unexpected flow pragma&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">super.addComment</span><span style="color: var(--shiki-color-text)">(comment);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,On,es,Sn,Dn,Fe,Ln,Xt,Fn,Bn,Mn,ts,Rn,qn,Gt,Ed=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">foobar </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> XType </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// @flow</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">foobar</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">XType</span><span style="color: var(--shiki-color-text)">&gt;(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,jn,K,Hn,Nt,Xn,Gn,Ut,Nn,Un,$n,Be,Wn,Os,_d='<a href="https://lihautan.com/babel-ast-explorer/#?%7B%22babel%22%3A%7B%22jsx%22%3Afalse%2C%22flow%22%3Atrue%2C%22typescript%22%3Afalse%2C%22objectRestSpread%22%3Afalse%2C%22pipelineOperator%22%3Afalse%2C%22throwExpressions%22%3Afalse%2C%22optionalChaining%22%3Afalse%2C%22nullishCoalescingOperator%22%3Afalse%2C%22exportDefaultFrom%22%3Afalse%2C%22dynamicImport%22%3Afalse%7D%2C%22code%22%3A%22foobar%3CXType%3E(1)%3B%5Cn%2F%2F%20%40flow%5Cnfoobar%3CXType%3E(1)%3B%22%7D">my recently build ASTExplorer clone for babel</a>',Ss,Vn,$t,os,Yn,zn,Jn,Z,Qn,Wt,Kn,Zn,Vt,ei,ti,Ds,w,ss,Me,oi,si,Re,ai,qe,li,ri,ni,ee,ii,je,ci,pi,He,hi,di,fi,as,ui,vi,x,ki,Xe,yi,bi,ls,mi,wi,Yt,gi,Ei,zt,_i,xi,Jt,Ii,Ai,Qt,Ci,Ti,Pi,te,Oi,Ge,Si,Di,rs,Li,Fi,Bi,Ne,Mi,Ue,Ri,qi,ji,ns,Hi,Xi,oe,is,se,Kt,Gi,Ni,Zt,Ui,$i,cs,ne,Wi,eo,Vi,Yi,ps,ae,zi,to,Ji,Qi,Ls,E,hs,$e,Ki,Zi,ds,fs,ec,tc,us,vs,oc,sc,We,ac,Ve,lc,rc,nc,ks,ys,ic,cc,bs,pc,hc,I,ms,oo,dc,fc,ws,so,uc,vc,gs,Ye,kc,yc,Es,ze,bc,mc,_s,Je,wc,gc,xs,Qe,Ec,_c,Is,Ke,xc,Fs;return y=new Nd({props:{data:[{link:"background",title:"Background"},{link:"referenceerror-xtype-is-not-defined",title:"ReferenceError: XType is not defined"},{link:"game-plan",title:"Game Plan"},{link:"flow",title:"Flow"},{link:"babel",title:"Babel"},{link:"make-changes-to-the-babel-code",title:"Make changes to the babel code"},{link:"closing-remark",title:"Closing Remark"}]}}),{c(){nd(y.$$.fragment),M=i(),g=a("section"),G=a("h2"),b=a("a"),R=t("Background"),tt=i(),N=a("p"),Zs=t("Mentioned in the "),ot=a("a"),ea=t("previous post"),ta=t(", we have "),de=a("a"),oa=t("upgraded babel 7"),sa=t(" to support the new Flow syntax."),aa=i(),D=a("p"),st=a("code"),la=t("foobar<Type>(x)"),ra=t(" is now "),at=a("em"),na=t("call foobar with x, and type parameter "),lt=a("code"),ia=t("Type"),ca=t(" rather than "),rt=a("code"),pa=t("(foobar < Type) > x)"),ha=i(),yo=a("em"),da=t("is the result of foobar smaller than Type, greater than x?"),fa=t("."),ua=i(),bo=a("blockquote"),mo=a("p"),va=t("Everything is great, until a weird runtime error caught us off guard."),As=i(),h=a("section"),wo=a("h2"),fe=a("a"),ka=t("ReferenceError: XType is not defined"),ya=i(),nt=a("div"),ba=i(),q=a("p"),ma=t("The first time I saw this error, my first impression was that I forgot to import "),it=a("code"),wa=t("XType"),ga=t(", so I scrolled to the top of the document. But, alas, I "),go=a("strong"),Ea=t("did import"),_a=i(),ct=a("code"),xa=t("XType"),Ia=t("."),Aa=i(),Eo=a("p"),Ca=t("So what is going on? \u{1F937}\u200D"),Ta=i(),_o=a("p"),Pa=t("I clicked into the error,"),Oa=i(),pt=a("div"),Sa=i(),ue=a("p"),Da=t("looked at me innocently. I knew something was wrong. "),ht=a("code"),La=t("XType"),Fa=t(" wasn't stripeed by babel!"),Ba=i(),ve=a("p"),Ma=t("Shameless plug: If you read my "),dt=a("a"),Ra=t("eslint for flow syntax"),qa=t(", you should be able to come to the same conclusion! \u{1F605}"),ja=i(),U=a("p"),Ha=t("So I checked the "),ke=a("a"),Xa=t("@babel/plugin strip-flow-types"),Ga=t(", I realise there's a "),ft=a("code"),Na=t("all"),Ua=t(" option that I had missed out, basically it says,"),$a=i(),xo=a("blockquote"),X=a("p"),Io=a("strong"),Wa=t("only parse"),Va=t(" Flow-specific features if a "),ut=a("code"),Ya=t("@flow"),za=t(" pragma is "),Ao=a("strong"),Ja=t("present atop"),Qa=t(" the file"),Ka=i(),Co=a("p"),Za=t("It seems that in my file,"),el=i(),vt=a("div"),tl=i(),$=a("p"),ol=t("I had a innocent looking "),kt=a("code"),sl=t("/** @module */"),al=t(" comment above "),yt=a("code"),ll=t("// @flow"),rl=t(" that breaks my babel plugin!"),nl=i(),To=a("p"),il=t("So the quick fix is to either:"),cl=i(),ye=a("ul"),W=a("li"),pl=t("Move "),bt=a("code"),hl=t("// @flow"),dl=t(" comment above "),mt=a("code"),fl=t("/** @module foobar */"),ul=t(", or"),vl=i(),V=a("li"),kl=t("Set "),wt=a("code"),yl=t("all: true"),bl=t(" in "),gt=a("code"),ml=t("@babel/plugin-transform-flow-strip-types"),wl=t("."),gl=i(),Po=a("p"),El=t("Either way, it solves the issue."),_l=i(),Oo=a("p"),xl=t("However, one thing bothers me:"),Il=i(),So=a("blockquote"),be=a("p"),Al=t("My Flow works perfectly fine with an extra comment on top "),Et=a("code"),Cl=t("// @flow"),Tl=t(", it still typechecks and provides auto-suggestions."),Pl=i(),Y=a("p"),Ol=t("So, the logic for "),_t=a("code"),Sl=t("@babel/plugin-transform-flow-strip-types"),Dl=t(" and Flow to determine whether a file is a Flow file or not "),Do=a("strong"),Ll=t("is different"),Fl=t("!"),Bl=i(),me=a("p"),Ml=t("And as a frequent user of Open Source libraries, this is something I think I "),Lo=a("del"),Rl=t("can"),ql=t(" should fix, for the betterment of the JavaScript Open Source world \u{1F605}. I always imagine there's another innocent front-end developer across the world like me stumbled upon a perplexing bug, if only me let the bug go with a workaround/patch."),jl=i(),Fo=a("blockquote"),Bo=a("p"),Hl=t("There's so much to achieve if we, not just consume the effort of others from the Open Source, but to also contribute into it."),Cs=i(),L=a("section"),Mo=a("h2"),we=a("a"),Xl=t("Game Plan"),Gl=i(),Ro=a("p"),Nl=t("So, to fix this bug, one simply has to:"),Ul=i(),j=a("ul"),qo=a("li"),$l=t("Read Flow's source code and understand the logic"),Wl=i(),jo=a("li"),Vl=t("Read @babel/plugin-transform-strip-flow-type's source code and understand the logic"),Yl=i(),Ho=a("li"),zl=t("Make changes to babel code"),Jl=i(),Xo=a("li"),Ql=t("Send a MR and brag about it \u{1F60E}"),Kl=i(),ge=a("p"),Zl=t(`Whether this is achieveable at my current level, that's a different story.
But `),Go=a("strong"),er=t("one has nothing to lose to try and fail"),tr=t("."),Ts=i(),f=a("section"),No=a("h2"),Ee=a("a"),or=t("Flow"),sr=i(),H=a("p"),ar=t("I've read a bit of Flow source code previously, mainly to "),_e=a("a"),lr=t("fix a bad developer experience I had with flowconfig previously"),rr=t(". I had to learn "),xe=a("a"),nr=t("OCaml"),ir=t(", which was a fad a while ago because of "),Ie=a("a"),cr=t("ReasonML"),pr=t(", to understand Flow source code."),hr=i(),Uo=a("p"),dr=t("So, this time around, I am much more comfortable to dig the code to find out the information I want."),fr=i(),A=a("p"),ur=t("I searched for the term "),xt=a("code"),vr=t('"@flow"'),kr=t(", which ended me up with "),Ae=a("a"),yr=t("this function"),br=t(", "),It=a("code"),mr=t("extract_docblock"),wr=t(" which returns me the information of whether "),At=a("code"),gr=t("@flow"),Er=t(" is present in the file. And I dug further, I ended up with "),z=a("a"),_r=t("the annonymous function that "),Ct=a("code"),xr=t("extract_docblck"),Ir=t(" returns"),Ar=t("."),Cr=i(),$o=a("p"),Tr=t("Allow me to loosely translate the logic into some pseudo JavaScript:"),Pr=i(),Tt=a("div"),Or=i(),Wo=a("p"),Sr=t("In human language:"),Dr=i(),J=a("p"),Lr=t("Flow will read "),Pt=a("code"),Fr=t("maxTokens"),Br=t(" number of tokens, look for comments that matches "),Ot=a("code"),Mr=t("@flow"),Rr=t(", if it encounters any order tokens, it will bail out early, with the exception of string and semicolon."),qr=i(),Vo=a("p"),jr=t("So,"),Hr=i(),St=a("div"),Xr=i(),Yo=a("p"),Gr=t("and"),Nr=i(),Dt=a("div"),Ur=i(),zo=a("p"),$r=t("is considered as a valid Flow file."),Wr=i(),Jo=a("p"),Vr=t("But"),Yr=i(),Lt=a("div"),zr=i(),Qo=a("p"),Jr=t("or"),Qr=i(),Ft=a("div"),Kr=i(),Ko=a("p"),Zr=t("is not."),Ps=i(),v=a("section"),Zo=a("h2"),Ce=a("a"),en=t("Babel"),tn=i(),Te=a("p"),on=t("At first, I thought that the logic would be in "),Bt=a("code"),sn=t("@babel/transform-strip-flow-types"),an=t(", but apparently, its not."),ln=i(),C=a("p"),rn=t("I discovered that by realising that the "),Pe=a("a"),nn=t("source code of @babel/transform-strip-flow-types"),cn=t(" did not include anything about the "),Mt=a("code"),pn=t("all"),hn=t(" options, and "),Oe=a("a"),dn=t("this plugin extends the @babel/plugin-syntax-flow"),fn=t(", which I knew fairly well that syntax plugins in babel does nothing but to enable syntax switch of the "),Rt=a("code"),un=t("@babel/parser"),vn=t(". The bulk of the logic lies within the "),re=a("a"),qt=a("code"),kn=t("@babel/parser"),yn=t("'s flow plugin"),bn=t("."),mn=i(),Se=a("p"),wn=t("That was all because "),Q=a("a"),gn=t("I contributed to "),jt=a("code"),En=t("@babel/parser"),_n=t(" before"),xn=t("."),In=i(),De=a("p"),An=t("And here we are in babel-parser, and the line that caught my attention is "),Le=a("a"),Cn=t("this"),Tn=t(":"),Pn=i(),Ht=a("div"),On=i(),es=a("p"),Sn=t("So, the babel's logic of getting a Flow pragma is that as soon as the first comment encountered, we parse the comment and we turn on the Flow syntax switch."),Dn=i(),Fe=a("p"),Ln=t("This is the reason why if we have a comment before "),Xt=a("code"),Fn=t("// @flow"),Bn=t(", we will not treat the file as a valid Flow file."),Mn=i(),ts=a("p"),Rn=t("Interesting enough, this means that if we write"),qn=i(),Gt=a("div"),jn=i(),K=a("p"),Hn=t("the first half of the code before "),Nt=a("code"),Xn=t("// @flow"),Gn=t(" was parsed as a normal JS code, and the second half after "),Ut=a("code"),Nn=t("// @flow"),Un=t(" was parsed as a Flow code."),$n=i(),Be=a("p"),Wn=t("You can see this clearly with "),Os=new jd,Ss=t("."),Vn=i(),$t=a("p"),os=a("em"),Yn=t("(I built it with React + Hooks over a long weekend, which I will share about how did it in the future.)"),zn=t("."),Jn=i(),Z=a("p"),Qn=t("You can see that the first expression is a "),Wt=a("code"),Kn=t("BinaryExpression"),Zn=t(" but the second expression is a "),Vt=a("code"),ei=t("CallExpression"),ti=t(";"),Ds=i(),w=a("section"),ss=a("h2"),Me=a("a"),oi=t("Make changes to the babel code"),si=i(),Re=a("p"),ai=t("Now step 3, make changes to babel code. So I decided to open an issue and started fixing the code. Surprisingly, someone else "),qe=a("a"),li=t("had reported the issue a few months ago"),ri=t(", and the issue was still opened."),ni=i(),ee=a("p"),ii=t("So "),je=a("a"),ci=t("I explained what I had discovered"),pi=t(", and tried to "),He=a("a"),hi=t("propose a solution"),di=t(". Well, after some struggle, I realised I am still a bit behind from being able to fix this code."),fi=i(),as=a("p"),ui=t("So how?"),vi=i(),x=a("p"),ki=t("I submitted a "),Xe=a("a"),yi=t("PR"),bi=t(" with a big "),ls=a("strong"),mi=t("WIP"),wi=t(", because I didn't know how to look ahead "),Yt=a("code"),gi=t("n"),Ei=t(" tokens and determine the "),zt=a("code"),_i=t("flowPragma"),xi=t(" flag before "),Jt=a("code"),Ii=t("babel"),Ai=t(" starts parsing the code. I explored around the "),Qt=a("code"),Ci=t("babel-parser"),Ti=t(" source code, uncover new concepts that I never knew before. It took me a day to contemplate and fiddle around, until something sparked me."),Pi=i(),te=a("p"),Oi=t("I realised I do not have to follow exactly Flow's logic in order to achieve similar behaviour. That's when I submitted another "),Ge=a("a"),Si=t("PR"),Di=t(" and closed the previous one. "),rs=a("em"),Li=t("(You can check it out if you are curious about it)"),Fi=t("."),Bi=i(),Ne=a("p"),Mi=t("And finally, the fix has merged into "),Ue=a("a"),Ri=t("babel v7.4.4"),qi=t("! \u{1F389}\u{1F389}"),ji=i(),ns=a("p"),Hi=t("And I can't wait to try all the edge cases that I have fixed in babel repl:"),Xi=i(),oe=a("ul"),is=a("li"),se=a("a"),Kt=a("code"),Gi=t("'use strict'"),Ni=t("; before "),Zt=a("code"),Ui=t("// @flow"),$i=i(),cs=a("li"),ne=a("a"),Wi=t("comments before "),eo=a("code"),Vi=t("//@flow"),Yi=i(),ps=a("li"),ae=a("a"),zi=t("first comment is "),to=a("code"),Ji=t("//@flow"),Qi=t(", but in the middle of the file"),Ls=i(),E=a("section"),hs=a("h2"),$e=a("a"),Ki=t("Closing Remark"),Zi=i(),ds=a("p"),fs=a("del"),ec=t("Well, I am sorry that I am going to stop here, because the issue is still opened, but I hoped you enjoy the detective journey along the way of hunting this bug."),tc=i(),us=a("p"),vs=a("del"),oc=t("If you encountered similar issues, you can patch it first with the solution I mentioned earlier. And do follow the Github issue, I will do my best to fix this."),sc=i(),We=a("p"),ac=t("If you encountered similar issues, please "),Ve=a("a"),lc=t("upgrade babel to v7.4.4"),rc=t("."),nc=i(),ks=a("blockquote"),ys=a("p"),ic=t("The best thing about open source is that the source code is open. As part of the JS community, we should not just reap the efforts of the community when we are building our next billion dollar idea, we should also contribute back so that the community as a whole can grow and improve together."),cc=i(),bs=a("p"),pc=t("As usual, here are the list of references for this article:"),hc=i(),I=a("ul"),ms=a("li"),oo=a("a"),dc=t("Blog: Errors encountered upgrading Flow v0.85"),fc=i(),ws=a("li"),so=a("a"),uc=t("My eslint doesn\u2019t work with for flow 0.85\u2019s explicit type argument syntax"),vc=i(),gs=a("li"),Ye=a("a"),kc=t("Docs: Upgrading Babel v7"),yc=i(),Es=a("li"),ze=a("a"),bc=t("Docs: @babel/transform-plugin-flow-strip-types"),mc=i(),_s=a("li"),Je=a("a"),wc=t("Docs: ReasonML"),gc=i(),xs=a("li"),Qe=a("a"),Ec=t("Code: Flow Parsing Service"),_c=i(),Is=a("li"),Ke=a("a"),xc=t("Issue: Parsing error when calling generic functions with type arguments when flow pragma is not first comment"),this.h()},l(p){id(y.$$.fragment,p),M=c(p),g=l(p,"SECTION",{});var m=r(g);G=l(m,"H2",{});var Oc=r(G);b=l(Oc,"A",{href:!0,id:!0});var Sc=r(b);R=o(Sc,"Background"),Sc.forEach(s),Oc.forEach(s),tt=c(m),N=l(m,"P",{});var ao=r(N);Zs=o(ao,"Mentioned in the "),ot=l(ao,"A",{href:!0});var Dc=r(ot);ea=o(Dc,"previous post"),Dc.forEach(s),ta=o(ao,", we have "),de=l(ao,"A",{href:!0,rel:!0});var Lc=r(de);oa=o(Lc,"upgraded babel 7"),Lc.forEach(s),sa=o(ao," to support the new Flow syntax."),ao.forEach(s),aa=c(m),D=l(m,"P",{});var le=r(D);st=l(le,"CODE",{class:!0});var Fc=r(st);la=o(Fc,"foobar<Type>(x)"),Fc.forEach(s),ra=o(le," is now "),at=l(le,"EM",{});var Ic=r(at);na=o(Ic,"call foobar with x, and type parameter "),lt=l(Ic,"CODE",{class:!0});var Bc=r(lt);ia=o(Bc,"Type"),Bc.forEach(s),Ic.forEach(s),ca=o(le," rather than "),rt=l(le,"CODE",{class:!0});var Mc=r(rt);pa=o(Mc,"(foobar < Type) > x)"),Mc.forEach(s),ha=c(le),yo=l(le,"EM",{});var Rc=r(yo);da=o(Rc,"is the result of foobar smaller than Type, greater than x?"),Rc.forEach(s),fa=o(le,"."),le.forEach(s),ua=c(m),bo=l(m,"BLOCKQUOTE",{});var qc=r(bo);mo=l(qc,"P",{});var jc=r(mo);va=o(jc,"Everything is great, until a weird runtime error caught us off guard."),jc.forEach(s),qc.forEach(s),m.forEach(s),As=c(p),h=l(p,"SECTION",{});var d=r(h);wo=l(d,"H2",{});var Hc=r(wo);fe=l(Hc,"A",{href:!0,id:!0});var Xc=r(fe);ka=o(Xc,"ReferenceError: XType is not defined"),Xc.forEach(s),Hc.forEach(s),ya=c(d),nt=l(d,"DIV",{class:!0});var xd=r(nt);xd.forEach(s),ba=c(d),q=l(d,"P",{});var ie=r(q);ma=o(ie,"The first time I saw this error, my first impression was that I forgot to import "),it=l(ie,"CODE",{class:!0});var Gc=r(it);wa=o(Gc,"XType"),Gc.forEach(s),ga=o(ie,", so I scrolled to the top of the document. But, alas, I "),go=l(ie,"STRONG",{});var Nc=r(go);Ea=o(Nc,"did import"),Nc.forEach(s),_a=c(ie),ct=l(ie,"CODE",{class:!0});var Uc=r(ct);xa=o(Uc,"XType"),Uc.forEach(s),Ia=o(ie,"."),ie.forEach(s),Aa=c(d),Eo=l(d,"P",{});var $c=r(Eo);Ca=o($c,"So what is going on? \u{1F937}\u200D"),$c.forEach(s),Ta=c(d),_o=l(d,"P",{});var Wc=r(_o);Pa=o(Wc,"I clicked into the error,"),Wc.forEach(s),Oa=c(d),pt=l(d,"DIV",{class:!0});var Id=r(pt);Id.forEach(s),Sa=c(d),ue=l(d,"P",{});var Bs=r(ue);Da=o(Bs,"looked at me innocently. I knew something was wrong. "),ht=l(Bs,"CODE",{class:!0});var Vc=r(ht);La=o(Vc,"XType"),Vc.forEach(s),Fa=o(Bs," wasn't stripeed by babel!"),Bs.forEach(s),Ba=c(d),ve=l(d,"P",{});var Ms=r(ve);Ma=o(Ms,"Shameless plug: If you read my "),dt=l(Ms,"A",{href:!0});var Yc=r(dt);Ra=o(Yc,"eslint for flow syntax"),Yc.forEach(s),qa=o(Ms,", you should be able to come to the same conclusion! \u{1F605}"),Ms.forEach(s),ja=c(d),U=l(d,"P",{});var lo=r(U);Ha=o(lo,"So I checked the "),ke=l(lo,"A",{href:!0,rel:!0});var zc=r(ke);Xa=o(zc,"@babel/plugin strip-flow-types"),zc.forEach(s),Ga=o(lo,", I realise there's a "),ft=l(lo,"CODE",{class:!0});var Jc=r(ft);Na=o(Jc,"all"),Jc.forEach(s),Ua=o(lo," option that I had missed out, basically it says,"),lo.forEach(s),$a=c(d),xo=l(d,"BLOCKQUOTE",{});var Qc=r(xo);X=l(Qc,"P",{});var Ze=r(X);Io=l(Ze,"STRONG",{});var Kc=r(Io);Wa=o(Kc,"only parse"),Kc.forEach(s),Va=o(Ze," Flow-specific features if a "),ut=l(Ze,"CODE",{class:!0});var Zc=r(ut);Ya=o(Zc,"@flow"),Zc.forEach(s),za=o(Ze," pragma is "),Ao=l(Ze,"STRONG",{});var ep=r(Ao);Ja=o(ep,"present atop"),ep.forEach(s),Qa=o(Ze," the file"),Ze.forEach(s),Qc.forEach(s),Ka=c(d),Co=l(d,"P",{});var tp=r(Co);Za=o(tp,"It seems that in my file,"),tp.forEach(s),el=c(d),vt=l(d,"DIV",{class:!0});var Ad=r(vt);Ad.forEach(s),tl=c(d),$=l(d,"P",{});var ro=r($);ol=o(ro,"I had a innocent looking "),kt=l(ro,"CODE",{class:!0});var op=r(kt);sl=o(op,"/** @module */"),op.forEach(s),al=o(ro," comment above "),yt=l(ro,"CODE",{class:!0});var sp=r(yt);ll=o(sp,"// @flow"),sp.forEach(s),rl=o(ro," that breaks my babel plugin!"),ro.forEach(s),nl=c(d),To=l(d,"P",{});var ap=r(To);il=o(ap,"So the quick fix is to either:"),ap.forEach(s),cl=c(d),ye=l(d,"UL",{});var Rs=r(ye);W=l(Rs,"LI",{});var no=r(W);pl=o(no,"Move "),bt=l(no,"CODE",{class:!0});var lp=r(bt);hl=o(lp,"// @flow"),lp.forEach(s),dl=o(no," comment above "),mt=l(no,"CODE",{class:!0});var rp=r(mt);fl=o(rp,"/** @module foobar */"),rp.forEach(s),ul=o(no,", or"),no.forEach(s),vl=c(Rs),V=l(Rs,"LI",{});var io=r(V);kl=o(io,"Set "),wt=l(io,"CODE",{class:!0});var np=r(wt);yl=o(np,"all: true"),np.forEach(s),bl=o(io," in "),gt=l(io,"CODE",{class:!0});var ip=r(gt);ml=o(ip,"@babel/plugin-transform-flow-strip-types"),ip.forEach(s),wl=o(io,"."),io.forEach(s),Rs.forEach(s),gl=c(d),Po=l(d,"P",{});var cp=r(Po);El=o(cp,"Either way, it solves the issue."),cp.forEach(s),_l=c(d),Oo=l(d,"P",{});var pp=r(Oo);xl=o(pp,"However, one thing bothers me:"),pp.forEach(s),Il=c(d),So=l(d,"BLOCKQUOTE",{});var hp=r(So);be=l(hp,"P",{});var qs=r(be);Al=o(qs,"My Flow works perfectly fine with an extra comment on top "),Et=l(qs,"CODE",{class:!0});var dp=r(Et);Cl=o(dp,"// @flow"),dp.forEach(s),Tl=o(qs,", it still typechecks and provides auto-suggestions."),qs.forEach(s),hp.forEach(s),Pl=c(d),Y=l(d,"P",{});var co=r(Y);Ol=o(co,"So, the logic for "),_t=l(co,"CODE",{class:!0});var fp=r(_t);Sl=o(fp,"@babel/plugin-transform-flow-strip-types"),fp.forEach(s),Dl=o(co," and Flow to determine whether a file is a Flow file or not "),Do=l(co,"STRONG",{});var up=r(Do);Ll=o(up,"is different"),up.forEach(s),Fl=o(co,"!"),co.forEach(s),Bl=c(d),me=l(d,"P",{});var js=r(me);Ml=o(js,"And as a frequent user of Open Source libraries, this is something I think I "),Lo=l(js,"DEL",{});var vp=r(Lo);Rl=o(vp,"can"),vp.forEach(s),ql=o(js," should fix, for the betterment of the JavaScript Open Source world \u{1F605}. I always imagine there's another innocent front-end developer across the world like me stumbled upon a perplexing bug, if only me let the bug go with a workaround/patch."),js.forEach(s),jl=c(d),Fo=l(d,"BLOCKQUOTE",{});var kp=r(Fo);Bo=l(kp,"P",{});var yp=r(Bo);Hl=o(yp,"There's so much to achieve if we, not just consume the effort of others from the Open Source, but to also contribute into it."),yp.forEach(s),kp.forEach(s),d.forEach(s),Cs=c(p),L=l(p,"SECTION",{});var ce=r(L);Mo=l(ce,"H2",{});var bp=r(Mo);we=l(bp,"A",{href:!0,id:!0});var mp=r(we);Xl=o(mp,"Game Plan"),mp.forEach(s),bp.forEach(s),Gl=c(ce),Ro=l(ce,"P",{});var wp=r(Ro);Nl=o(wp,"So, to fix this bug, one simply has to:"),wp.forEach(s),Ul=c(ce),j=l(ce,"UL",{});var pe=r(j);qo=l(pe,"LI",{});var gp=r(qo);$l=o(gp,"Read Flow's source code and understand the logic"),gp.forEach(s),Wl=c(pe),jo=l(pe,"LI",{});var Ep=r(jo);Vl=o(Ep,"Read @babel/plugin-transform-strip-flow-type's source code and understand the logic"),Ep.forEach(s),Yl=c(pe),Ho=l(pe,"LI",{});var _p=r(Ho);zl=o(_p,"Make changes to babel code"),_p.forEach(s),Jl=c(pe),Xo=l(pe,"LI",{});var xp=r(Xo);Ql=o(xp,"Send a MR and brag about it \u{1F60E}"),xp.forEach(s),pe.forEach(s),Kl=c(ce),ge=l(ce,"P",{});var Hs=r(ge);Zl=o(Hs,`Whether this is achieveable at my current level, that's a different story.
But `),Go=l(Hs,"STRONG",{});var Ip=r(Go);er=o(Ip,"one has nothing to lose to try and fail"),Ip.forEach(s),tr=o(Hs,"."),Hs.forEach(s),ce.forEach(s),Ts=c(p),f=l(p,"SECTION",{});var u=r(f);No=l(u,"H2",{});var Ap=r(No);Ee=l(Ap,"A",{href:!0,id:!0});var Cp=r(Ee);or=o(Cp,"Flow"),Cp.forEach(s),Ap.forEach(s),sr=c(u),H=l(u,"P",{});var he=r(H);ar=o(he,"I've read a bit of Flow source code previously, mainly to "),_e=l(he,"A",{href:!0,rel:!0});var Tp=r(_e);lr=o(Tp,"fix a bad developer experience I had with flowconfig previously"),Tp.forEach(s),rr=o(he,". I had to learn "),xe=l(he,"A",{href:!0,rel:!0});var Pp=r(xe);nr=o(Pp,"OCaml"),Pp.forEach(s),ir=o(he,", which was a fad a while ago because of "),Ie=l(he,"A",{href:!0,rel:!0});var Op=r(Ie);cr=o(Op,"ReasonML"),Op.forEach(s),pr=o(he,", to understand Flow source code."),he.forEach(s),hr=c(u),Uo=l(u,"P",{});var Sp=r(Uo);dr=o(Sp,"So, this time around, I am much more comfortable to dig the code to find out the information I want."),Sp.forEach(s),fr=c(u),A=l(u,"P",{});var F=r(A);ur=o(F,"I searched for the term "),xt=l(F,"CODE",{class:!0});var Dp=r(xt);vr=o(Dp,'"@flow"'),Dp.forEach(s),kr=o(F,", which ended me up with "),Ae=l(F,"A",{href:!0,rel:!0});var Lp=r(Ae);yr=o(Lp,"this function"),Lp.forEach(s),br=o(F,", "),It=l(F,"CODE",{class:!0});var Fp=r(It);mr=o(Fp,"extract_docblock"),Fp.forEach(s),wr=o(F," which returns me the information of whether "),At=l(F,"CODE",{class:!0});var Bp=r(At);gr=o(Bp,"@flow"),Bp.forEach(s),Er=o(F," is present in the file. And I dug further, I ended up with "),z=l(F,"A",{href:!0,rel:!0});var Xs=r(z);_r=o(Xs,"the annonymous function that "),Ct=l(Xs,"CODE",{class:!0});var Mp=r(Ct);xr=o(Mp,"extract_docblck"),Mp.forEach(s),Ir=o(Xs," returns"),Xs.forEach(s),Ar=o(F,"."),F.forEach(s),Cr=c(u),$o=l(u,"P",{});var Rp=r($o);Tr=o(Rp,"Allow me to loosely translate the logic into some pseudo JavaScript:"),Rp.forEach(s),Pr=c(u),Tt=l(u,"DIV",{class:!0});var Cd=r(Tt);Cd.forEach(s),Or=c(u),Wo=l(u,"P",{});var qp=r(Wo);Sr=o(qp,"In human language:"),qp.forEach(s),Dr=c(u),J=l(u,"P",{});var po=r(J);Lr=o(po,"Flow will read "),Pt=l(po,"CODE",{class:!0});var jp=r(Pt);Fr=o(jp,"maxTokens"),jp.forEach(s),Br=o(po," number of tokens, look for comments that matches "),Ot=l(po,"CODE",{class:!0});var Hp=r(Ot);Mr=o(Hp,"@flow"),Hp.forEach(s),Rr=o(po,", if it encounters any order tokens, it will bail out early, with the exception of string and semicolon."),po.forEach(s),qr=c(u),Vo=l(u,"P",{});var Xp=r(Vo);jr=o(Xp,"So,"),Xp.forEach(s),Hr=c(u),St=l(u,"DIV",{class:!0});var Td=r(St);Td.forEach(s),Xr=c(u),Yo=l(u,"P",{});var Gp=r(Yo);Gr=o(Gp,"and"),Gp.forEach(s),Nr=c(u),Dt=l(u,"DIV",{class:!0});var Pd=r(Dt);Pd.forEach(s),Ur=c(u),zo=l(u,"P",{});var Np=r(zo);$r=o(Np,"is considered as a valid Flow file."),Np.forEach(s),Wr=c(u),Jo=l(u,"P",{});var Up=r(Jo);Vr=o(Up,"But"),Up.forEach(s),Yr=c(u),Lt=l(u,"DIV",{class:!0});var Od=r(Lt);Od.forEach(s),zr=c(u),Qo=l(u,"P",{});var $p=r(Qo);Jr=o($p,"or"),$p.forEach(s),Qr=c(u),Ft=l(u,"DIV",{class:!0});var Sd=r(Ft);Sd.forEach(s),Kr=c(u),Ko=l(u,"P",{});var Wp=r(Ko);Zr=o(Wp,"is not."),Wp.forEach(s),u.forEach(s),Ps=c(p),v=l(p,"SECTION",{});var k=r(v);Zo=l(k,"H2",{});var Vp=r(Zo);Ce=l(Vp,"A",{href:!0,id:!0});var Yp=r(Ce);en=o(Yp,"Babel"),Yp.forEach(s),Vp.forEach(s),tn=c(k),Te=l(k,"P",{});var Gs=r(Te);on=o(Gs,"At first, I thought that the logic would be in "),Bt=l(Gs,"CODE",{class:!0});var zp=r(Bt);sn=o(zp,"@babel/transform-strip-flow-types"),zp.forEach(s),an=o(Gs,", but apparently, its not."),Gs.forEach(s),ln=c(k),C=l(k,"P",{});var B=r(C);rn=o(B,"I discovered that by realising that the "),Pe=l(B,"A",{href:!0,rel:!0});var Jp=r(Pe);nn=o(Jp,"source code of @babel/transform-strip-flow-types"),Jp.forEach(s),cn=o(B," did not include anything about the "),Mt=l(B,"CODE",{class:!0});var Qp=r(Mt);pn=o(Qp,"all"),Qp.forEach(s),hn=o(B," options, and "),Oe=l(B,"A",{href:!0,rel:!0});var Kp=r(Oe);dn=o(Kp,"this plugin extends the @babel/plugin-syntax-flow"),Kp.forEach(s),fn=o(B,", which I knew fairly well that syntax plugins in babel does nothing but to enable syntax switch of the "),Rt=l(B,"CODE",{class:!0});var Zp=r(Rt);un=o(Zp,"@babel/parser"),Zp.forEach(s),vn=o(B,". The bulk of the logic lies within the "),re=l(B,"A",{href:!0,rel:!0});var Ac=r(re);qt=l(Ac,"CODE",{class:!0});var eh=r(qt);kn=o(eh,"@babel/parser"),eh.forEach(s),yn=o(Ac,"'s flow plugin"),Ac.forEach(s),bn=o(B,"."),B.forEach(s),mn=c(k),Se=l(k,"P",{});var Ns=r(Se);wn=o(Ns,"That was all because "),Q=l(Ns,"A",{href:!0,rel:!0});var Us=r(Q);gn=o(Us,"I contributed to "),jt=l(Us,"CODE",{class:!0});var th=r(jt);En=o(th,"@babel/parser"),th.forEach(s),_n=o(Us," before"),Us.forEach(s),xn=o(Ns,"."),Ns.forEach(s),In=c(k),De=l(k,"P",{});var $s=r(De);An=o($s,"And here we are in babel-parser, and the line that caught my attention is "),Le=l($s,"A",{href:!0,rel:!0});var oh=r(Le);Cn=o(oh,"this"),oh.forEach(s),Tn=o($s,":"),$s.forEach(s),Pn=c(k),Ht=l(k,"DIV",{class:!0});var Dd=r(Ht);Dd.forEach(s),On=c(k),es=l(k,"P",{});var sh=r(es);Sn=o(sh,"So, the babel's logic of getting a Flow pragma is that as soon as the first comment encountered, we parse the comment and we turn on the Flow syntax switch."),sh.forEach(s),Dn=c(k),Fe=l(k,"P",{});var Ws=r(Fe);Ln=o(Ws,"This is the reason why if we have a comment before "),Xt=l(Ws,"CODE",{class:!0});var ah=r(Xt);Fn=o(ah,"// @flow"),ah.forEach(s),Bn=o(Ws,", we will not treat the file as a valid Flow file."),Ws.forEach(s),Mn=c(k),ts=l(k,"P",{});var lh=r(ts);Rn=o(lh,"Interesting enough, this means that if we write"),lh.forEach(s),qn=c(k),Gt=l(k,"DIV",{class:!0});var Ld=r(Gt);Ld.forEach(s),jn=c(k),K=l(k,"P",{});var ho=r(K);Hn=o(ho,"the first half of the code before "),Nt=l(ho,"CODE",{class:!0});var rh=r(Nt);Xn=o(rh,"// @flow"),rh.forEach(s),Gn=o(ho," was parsed as a normal JS code, and the second half after "),Ut=l(ho,"CODE",{class:!0});var nh=r(Ut);Nn=o(nh,"// @flow"),nh.forEach(s),Un=o(ho," was parsed as a Flow code."),ho.forEach(s),$n=c(k),Be=l(k,"P",{});var Vs=r(Be);Wn=o(Vs,"You can see this clearly with "),Os=Hd(Vs),Ss=o(Vs,"."),Vs.forEach(s),Vn=c(k),$t=l(k,"P",{});var Cc=r($t);os=l(Cc,"EM",{});var ih=r(os);Yn=o(ih,"(I built it with React + Hooks over a long weekend, which I will share about how did it in the future.)"),ih.forEach(s),zn=o(Cc,"."),Cc.forEach(s),Jn=c(k),Z=l(k,"P",{});var fo=r(Z);Qn=o(fo,"You can see that the first expression is a "),Wt=l(fo,"CODE",{class:!0});var ch=r(Wt);Kn=o(ch,"BinaryExpression"),ch.forEach(s),Zn=o(fo," but the second expression is a "),Vt=l(fo,"CODE",{class:!0});var ph=r(Vt);ei=o(ph,"CallExpression"),ph.forEach(s),ti=o(fo,";"),fo.forEach(s),k.forEach(s),Ds=c(p),w=l(p,"SECTION",{});var _=r(w);ss=l(_,"H2",{});var hh=r(ss);Me=l(hh,"A",{href:!0,id:!0});var dh=r(Me);oi=o(dh,"Make changes to the babel code"),dh.forEach(s),hh.forEach(s),si=c(_),Re=l(_,"P",{});var Ys=r(Re);ai=o(Ys,"Now step 3, make changes to babel code. So I decided to open an issue and started fixing the code. Surprisingly, someone else "),qe=l(Ys,"A",{href:!0,rel:!0});var fh=r(qe);li=o(fh,"had reported the issue a few months ago"),fh.forEach(s),ri=o(Ys,", and the issue was still opened."),Ys.forEach(s),ni=c(_),ee=l(_,"P",{});var uo=r(ee);ii=o(uo,"So "),je=l(uo,"A",{href:!0,rel:!0});var uh=r(je);ci=o(uh,"I explained what I had discovered"),uh.forEach(s),pi=o(uo,", and tried to "),He=l(uo,"A",{href:!0,rel:!0});var vh=r(He);hi=o(vh,"propose a solution"),vh.forEach(s),di=o(uo,". Well, after some struggle, I realised I am still a bit behind from being able to fix this code."),uo.forEach(s),fi=c(_),as=l(_,"P",{});var kh=r(as);ui=o(kh,"So how?"),kh.forEach(s),vi=c(_),x=l(_,"P",{});var T=r(x);ki=o(T,"I submitted a "),Xe=l(T,"A",{href:!0,rel:!0});var yh=r(Xe);yi=o(yh,"PR"),yh.forEach(s),bi=o(T," with a big "),ls=l(T,"STRONG",{});var bh=r(ls);mi=o(bh,"WIP"),bh.forEach(s),wi=o(T,", because I didn't know how to look ahead "),Yt=l(T,"CODE",{class:!0});var mh=r(Yt);gi=o(mh,"n"),mh.forEach(s),Ei=o(T," tokens and determine the "),zt=l(T,"CODE",{class:!0});var wh=r(zt);_i=o(wh,"flowPragma"),wh.forEach(s),xi=o(T," flag before "),Jt=l(T,"CODE",{class:!0});var gh=r(Jt);Ii=o(gh,"babel"),gh.forEach(s),Ai=o(T," starts parsing the code. I explored around the "),Qt=l(T,"CODE",{class:!0});var Eh=r(Qt);Ci=o(Eh,"babel-parser"),Eh.forEach(s),Ti=o(T," source code, uncover new concepts that I never knew before. It took me a day to contemplate and fiddle around, until something sparked me."),T.forEach(s),Pi=c(_),te=l(_,"P",{});var vo=r(te);Oi=o(vo,"I realised I do not have to follow exactly Flow's logic in order to achieve similar behaviour. That's when I submitted another "),Ge=l(vo,"A",{href:!0,rel:!0});var _h=r(Ge);Si=o(_h,"PR"),_h.forEach(s),Di=o(vo," and closed the previous one. "),rs=l(vo,"EM",{});var xh=r(rs);Li=o(xh,"(You can check it out if you are curious about it)"),xh.forEach(s),Fi=o(vo,"."),vo.forEach(s),Bi=c(_),Ne=l(_,"P",{});var zs=r(Ne);Mi=o(zs,"And finally, the fix has merged into "),Ue=l(zs,"A",{href:!0,rel:!0});var Ih=r(Ue);Ri=o(Ih,"babel v7.4.4"),Ih.forEach(s),qi=o(zs,"! \u{1F389}\u{1F389}"),zs.forEach(s),ji=c(_),ns=l(_,"P",{});var Ah=r(ns);Hi=o(Ah,"And I can't wait to try all the edge cases that I have fixed in babel repl:"),Ah.forEach(s),Xi=c(_),oe=l(_,"UL",{});var ko=r(oe);is=l(ko,"LI",{});var Ch=r(is);se=l(Ch,"A",{href:!0,rel:!0});var Js=r(se);Kt=l(Js,"CODE",{class:!0});var Th=r(Kt);Gi=o(Th,"'use strict'"),Th.forEach(s),Ni=o(Js,"; before "),Zt=l(Js,"CODE",{class:!0});var Ph=r(Zt);Ui=o(Ph,"// @flow"),Ph.forEach(s),Js.forEach(s),Ch.forEach(s),$i=c(ko),cs=l(ko,"LI",{});var Oh=r(cs);ne=l(Oh,"A",{href:!0,rel:!0});var Tc=r(ne);Wi=o(Tc,"comments before "),eo=l(Tc,"CODE",{class:!0});var Sh=r(eo);Vi=o(Sh,"//@flow"),Sh.forEach(s),Tc.forEach(s),Oh.forEach(s),Yi=c(ko),ps=l(ko,"LI",{});var Dh=r(ps);ae=l(Dh,"A",{href:!0,rel:!0});var Qs=r(ae);zi=o(Qs,"first comment is "),to=l(Qs,"CODE",{class:!0});var Lh=r(to);Ji=o(Lh,"//@flow"),Lh.forEach(s),Qi=o(Qs,", but in the middle of the file"),Qs.forEach(s),Dh.forEach(s),ko.forEach(s),_.forEach(s),Ls=c(p),E=l(p,"SECTION",{});var P=r(E);hs=l(P,"H2",{});var Fh=r(hs);$e=l(Fh,"A",{href:!0,id:!0});var Bh=r($e);Ki=o(Bh,"Closing Remark"),Bh.forEach(s),Fh.forEach(s),Zi=c(P),ds=l(P,"P",{});var Mh=r(ds);fs=l(Mh,"DEL",{});var Rh=r(fs);ec=o(Rh,"Well, I am sorry that I am going to stop here, because the issue is still opened, but I hoped you enjoy the detective journey along the way of hunting this bug."),Rh.forEach(s),Mh.forEach(s),tc=c(P),us=l(P,"P",{});var qh=r(us);vs=l(qh,"DEL",{});var jh=r(vs);oc=o(jh,"If you encountered similar issues, you can patch it first with the solution I mentioned earlier. And do follow the Github issue, I will do my best to fix this."),jh.forEach(s),qh.forEach(s),sc=c(P),We=l(P,"P",{});var Ks=r(We);ac=o(Ks,"If you encountered similar issues, please "),Ve=l(Ks,"A",{href:!0,rel:!0});var Hh=r(Ve);lc=o(Hh,"upgrade babel to v7.4.4"),Hh.forEach(s),rc=o(Ks,"."),Ks.forEach(s),nc=c(P),ks=l(P,"BLOCKQUOTE",{});var Xh=r(ks);ys=l(Xh,"P",{});var Gh=r(ys);ic=o(Gh,"The best thing about open source is that the source code is open. As part of the JS community, we should not just reap the efforts of the community when we are building our next billion dollar idea, we should also contribute back so that the community as a whole can grow and improve together."),Gh.forEach(s),Xh.forEach(s),cc=c(P),bs=l(P,"P",{});var Nh=r(bs);pc=o(Nh,"As usual, here are the list of references for this article:"),Nh.forEach(s),hc=c(P),I=l(P,"UL",{});var O=r(I);ms=l(O,"LI",{});var Uh=r(ms);oo=l(Uh,"A",{href:!0});var $h=r(oo);dc=o($h,"Blog: Errors encountered upgrading Flow v0.85"),$h.forEach(s),Uh.forEach(s),fc=c(O),ws=l(O,"LI",{});var Wh=r(ws);so=l(Wh,"A",{href:!0});var Vh=r(so);uc=o(Vh,"My eslint doesn\u2019t work with for flow 0.85\u2019s explicit type argument syntax"),Vh.forEach(s),Wh.forEach(s),vc=c(O),gs=l(O,"LI",{});var Yh=r(gs);Ye=l(Yh,"A",{href:!0,rel:!0});var zh=r(Ye);kc=o(zh,"Docs: Upgrading Babel v7"),zh.forEach(s),Yh.forEach(s),yc=c(O),Es=l(O,"LI",{});var Jh=r(Es);ze=l(Jh,"A",{href:!0,rel:!0});var Qh=r(ze);bc=o(Qh,"Docs: @babel/transform-plugin-flow-strip-types"),Qh.forEach(s),Jh.forEach(s),mc=c(O),_s=l(O,"LI",{});var Kh=r(_s);Je=l(Kh,"A",{href:!0,rel:!0});var Zh=r(Je);wc=o(Zh,"Docs: ReasonML"),Zh.forEach(s),Kh.forEach(s),gc=c(O),xs=l(O,"LI",{});var ed=r(xs);Qe=l(ed,"A",{href:!0,rel:!0});var td=r(Qe);Ec=o(td,"Code: Flow Parsing Service"),td.forEach(s),ed.forEach(s),_c=c(O),Is=l(O,"LI",{});var od=r(Is);Ke=l(od,"A",{href:!0,rel:!0});var sd=r(Ke);xc=o(sd,"Issue: Parsing error when calling generic functions with type arguments when flow pragma is not first comment"),sd.forEach(s),od.forEach(s),O.forEach(s),P.forEach(s),this.h()},h(){n(b,"href","#background"),n(b,"id","background"),n(ot,"href","/errors-encountered-upgrading-flow-0.85/"),n(de,"href","https://babeljs.io/docs/en/v7-migration"),n(de,"rel","nofollow"),n(st,"class","inline"),n(lt,"class","inline"),n(rt,"class","inline"),n(fe,"href","#referenceerror-xtype-is-not-defined"),n(fe,"id","referenceerror-xtype-is-not-defined"),n(nt,"class","code-section"),n(it,"class","inline"),n(ct,"class","inline"),n(pt,"class","code-section"),n(ht,"class","inline"),n(dt,"href","/eslint-for-flow-explicit-type-argument-syntax/"),n(ke,"href","https://babeljs.io/docs/en/babel-plugin-transform-flow-strip-types"),n(ke,"rel","nofollow"),n(ft,"class","inline"),n(ut,"class","inline"),n(vt,"class","code-section"),n(kt,"class","inline"),n(yt,"class","inline"),n(bt,"class","inline"),n(mt,"class","inline"),n(wt,"class","inline"),n(gt,"class","inline"),n(Et,"class","inline"),n(_t,"class","inline"),n(we,"href","#game-plan"),n(we,"id","game-plan"),n(Ee,"href","#flow"),n(Ee,"id","flow"),n(_e,"href","https://github.com/facebook/flow/pull/7083"),n(_e,"rel","nofollow"),n(xe,"href","https://ocaml.org/"),n(xe,"rel","nofollow"),n(Ie,"href","https://reasonml.github.io/"),n(Ie,"rel","nofollow"),n(xt,"class","inline"),n(Ae,"href","https://github.com/facebook/flow/blob/master/src/parsing/parsing_service_js.ml#L143"),n(Ae,"rel","nofollow"),n(It,"class","inline"),n(At,"class","inline"),n(Ct,"class","inline"),n(z,"href","https://github.com/facebook/flow/blob/master/src/parsing/parsing_service_js.ml#L275"),n(z,"rel","nofollow"),n(Tt,"class","code-section"),n(Pt,"class","inline"),n(Ot,"class","inline"),n(St,"class","code-section"),n(Dt,"class","code-section"),n(Lt,"class","code-section"),n(Ft,"class","code-section"),n(Ce,"href","#babel"),n(Ce,"id","babel"),n(Bt,"class","inline"),n(Pe,"href","https://github.com/babel/babel/blob/master/packages/babel-plugin-transform-flow-strip-types/src/index.js"),n(Pe,"rel","nofollow"),n(Mt,"class","inline"),n(Oe,"href","https://github.com/babel/babel/blob/master/packages/babel-plugin-transform-flow-strip-types/src/index.js#L14"),n(Oe,"rel","nofollow"),n(Rt,"class","inline"),n(qt,"class","inline"),n(re,"href","https://github.com/babel/babel/blob/master/packages/babel-parser/src/plugins/flow.js"),n(re,"rel","nofollow"),n(jt,"class","inline"),n(Q,"href","https://github.com/babel/babel/pulls?q=is%3Apr+is%3Aclosed+author%3Atanhauhau"),n(Q,"rel","nofollow"),n(Le,"href","https://github.com/babel/babel/blob/master/packages/babel-parser/src/plugins/flow.js#L98"),n(Le,"rel","nofollow"),n(Ht,"class","code-section"),n(Xt,"class","inline"),n(Gt,"class","code-section"),n(Nt,"class","inline"),n(Ut,"class","inline"),Os.a=Ss,n(Wt,"class","inline"),n(Vt,"class","inline"),n(Me,"href","#make-changes-to-the-babel-code"),n(Me,"id","make-changes-to-the-babel-code"),n(qe,"href","https://github.com/babel/babel/issues/9240"),n(qe,"rel","nofollow"),n(je,"href","https://github.com/babel/babel/issues/9240#issuecomment-485370957"),n(je,"rel","nofollow"),n(He,"href","https://github.com/babel/babel/pull/9885"),n(He,"rel","nofollow"),n(Xe,"href","https://github.com/babel/babel/pull/9885"),n(Xe,"rel","nofollow"),n(Yt,"class","inline"),n(zt,"class","inline"),n(Jt,"class","inline"),n(Qt,"class","inline"),n(Ge,"href","https://github.com/babel/babel/pull/9891"),n(Ge,"rel","nofollow"),n(Ue,"href","https://github.com/babel/babel/releases/tag/v7.4.4"),n(Ue,"rel","nofollow"),n(Kt,"class","inline"),n(Zt,"class","inline"),n(se,"href","https://babeljs.io/repl#?babili=false&browsers=&build=&builtIns=false&spec=false&loose=false&code_lz=OQVwzgpgBGAuBOBLAxrYBuAUAem1AAgGYA2A9gO6aGmkA8AggHwAUARgJRbV1NudA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=false&presets=&prettier=false&targets=&version=7.4.4&externalPlugins=%40babel%2Fplugin-transform-flow-strip-types%407.4.4"),n(se,"rel","nofollow"),n(eo,"class","inline"),n(ne,"href","https://babeljs.io/repl#?babili=false&browsers=&build=&builtIns=false&spec=false&loose=false&code_lz=PQKhAIAEFsHsBMCuAbApgZ3AM1rcJgAoYYKLZWAd0J1gB4BBAPgAoAjASgG4bdHXOXIA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=false&presets=&prettier=false&targets=&version=7.4.4&externalPlugins=%40babel%2Fplugin-transform-flow-strip-types%407.4.4"),n(ne,"rel","nofollow"),n(to,"class","inline"),n(ae,"href","https://babeljs.io/repl#?babili=false&browsers=&build=&builtIns=false&spec=false&loose=false&code_lz=GYexB4EED4AoCMCUBuAUAenQAgALADYgDuqoEMCKQA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=false&presets=&prettier=false&targets=&version=7.4.4&externalPlugins=%40babel%2Fplugin-transform-flow-strip-types%407.4.4"),n(ae,"rel","nofollow"),n($e,"href","#closing-remark"),n($e,"id","closing-remark"),n(Ve,"href","https://github.com/babel/babel/releases/tag/v7.4.4"),n(Ve,"rel","nofollow"),n(oo,"href","/errors-encountered-upgrading-flow-0.85"),n(so,"href","/eslint-for-flow-explicit-type-argument-syntax/"),n(Ye,"href","https://babeljs.io/docs/en/v7-migration"),n(Ye,"rel","nofollow"),n(ze,"href","https://babeljs.io/docs/en/babel-plugin-transform-flow-strip-types"),n(ze,"rel","nofollow"),n(Je,"href","https://reasonml.github.io/"),n(Je,"rel","nofollow"),n(Qe,"href","https://github.com/facebook/flow/blob/master/src/parsing/parsing_service_js.ml"),n(Qe,"rel","nofollow"),n(Ke,"href","https://github.com/babel/babel/issues/9240"),n(Ke,"rel","nofollow")},m(p,m){cd(y,p,m),S(p,M,m),S(p,g,m),e(g,G),e(G,b),e(b,R),e(g,tt),e(g,N),e(N,Zs),e(N,ot),e(ot,ea),e(N,ta),e(N,de),e(de,oa),e(N,sa),e(g,aa),e(g,D),e(D,st),e(st,la),e(D,ra),e(D,at),e(at,na),e(at,lt),e(lt,ia),e(D,ca),e(D,rt),e(rt,pa),e(D,ha),e(D,yo),e(yo,da),e(D,fa),e(g,ua),e(g,bo),e(bo,mo),e(mo,va),S(p,As,m),S(p,h,m),e(h,wo),e(wo,fe),e(fe,ka),e(h,ya),e(h,nt),nt.innerHTML=fd,e(h,ba),e(h,q),e(q,ma),e(q,it),e(it,wa),e(q,ga),e(q,go),e(go,Ea),e(q,_a),e(q,ct),e(ct,xa),e(q,Ia),e(h,Aa),e(h,Eo),e(Eo,Ca),e(h,Ta),e(h,_o),e(_o,Pa),e(h,Oa),e(h,pt),pt.innerHTML=ud,e(h,Sa),e(h,ue),e(ue,Da),e(ue,ht),e(ht,La),e(ue,Fa),e(h,Ba),e(h,ve),e(ve,Ma),e(ve,dt),e(dt,Ra),e(ve,qa),e(h,ja),e(h,U),e(U,Ha),e(U,ke),e(ke,Xa),e(U,Ga),e(U,ft),e(ft,Na),e(U,Ua),e(h,$a),e(h,xo),e(xo,X),e(X,Io),e(Io,Wa),e(X,Va),e(X,ut),e(ut,Ya),e(X,za),e(X,Ao),e(Ao,Ja),e(X,Qa),e(h,Ka),e(h,Co),e(Co,Za),e(h,el),e(h,vt),vt.innerHTML=vd,e(h,tl),e(h,$),e($,ol),e($,kt),e(kt,sl),e($,al),e($,yt),e(yt,ll),e($,rl),e(h,nl),e(h,To),e(To,il),e(h,cl),e(h,ye),e(ye,W),e(W,pl),e(W,bt),e(bt,hl),e(W,dl),e(W,mt),e(mt,fl),e(W,ul),e(ye,vl),e(ye,V),e(V,kl),e(V,wt),e(wt,yl),e(V,bl),e(V,gt),e(gt,ml),e(V,wl),e(h,gl),e(h,Po),e(Po,El),e(h,_l),e(h,Oo),e(Oo,xl),e(h,Il),e(h,So),e(So,be),e(be,Al),e(be,Et),e(Et,Cl),e(be,Tl),e(h,Pl),e(h,Y),e(Y,Ol),e(Y,_t),e(_t,Sl),e(Y,Dl),e(Y,Do),e(Do,Ll),e(Y,Fl),e(h,Bl),e(h,me),e(me,Ml),e(me,Lo),e(Lo,Rl),e(me,ql),e(h,jl),e(h,Fo),e(Fo,Bo),e(Bo,Hl),S(p,Cs,m),S(p,L,m),e(L,Mo),e(Mo,we),e(we,Xl),e(L,Gl),e(L,Ro),e(Ro,Nl),e(L,Ul),e(L,j),e(j,qo),e(qo,$l),e(j,Wl),e(j,jo),e(jo,Vl),e(j,Yl),e(j,Ho),e(Ho,zl),e(j,Jl),e(j,Xo),e(Xo,Ql),e(L,Kl),e(L,ge),e(ge,Zl),e(ge,Go),e(Go,er),e(ge,tr),S(p,Ts,m),S(p,f,m),e(f,No),e(No,Ee),e(Ee,or),e(f,sr),e(f,H),e(H,ar),e(H,_e),e(_e,lr),e(H,rr),e(H,xe),e(xe,nr),e(H,ir),e(H,Ie),e(Ie,cr),e(H,pr),e(f,hr),e(f,Uo),e(Uo,dr),e(f,fr),e(f,A),e(A,ur),e(A,xt),e(xt,vr),e(A,kr),e(A,Ae),e(Ae,yr),e(A,br),e(A,It),e(It,mr),e(A,wr),e(A,At),e(At,gr),e(A,Er),e(A,z),e(z,_r),e(z,Ct),e(Ct,xr),e(z,Ir),e(A,Ar),e(f,Cr),e(f,$o),e($o,Tr),e(f,Pr),e(f,Tt),Tt.innerHTML=kd,e(f,Or),e(f,Wo),e(Wo,Sr),e(f,Dr),e(f,J),e(J,Lr),e(J,Pt),e(Pt,Fr),e(J,Br),e(J,Ot),e(Ot,Mr),e(J,Rr),e(f,qr),e(f,Vo),e(Vo,jr),e(f,Hr),e(f,St),St.innerHTML=yd,e(f,Xr),e(f,Yo),e(Yo,Gr),e(f,Nr),e(f,Dt),Dt.innerHTML=bd,e(f,Ur),e(f,zo),e(zo,$r),e(f,Wr),e(f,Jo),e(Jo,Vr),e(f,Yr),e(f,Lt),Lt.innerHTML=md,e(f,zr),e(f,Qo),e(Qo,Jr),e(f,Qr),e(f,Ft),Ft.innerHTML=wd,e(f,Kr),e(f,Ko),e(Ko,Zr),S(p,Ps,m),S(p,v,m),e(v,Zo),e(Zo,Ce),e(Ce,en),e(v,tn),e(v,Te),e(Te,on),e(Te,Bt),e(Bt,sn),e(Te,an),e(v,ln),e(v,C),e(C,rn),e(C,Pe),e(Pe,nn),e(C,cn),e(C,Mt),e(Mt,pn),e(C,hn),e(C,Oe),e(Oe,dn),e(C,fn),e(C,Rt),e(Rt,un),e(C,vn),e(C,re),e(re,qt),e(qt,kn),e(re,yn),e(C,bn),e(v,mn),e(v,Se),e(Se,wn),e(Se,Q),e(Q,gn),e(Q,jt),e(jt,En),e(Q,_n),e(Se,xn),e(v,In),e(v,De),e(De,An),e(De,Le),e(Le,Cn),e(De,Tn),e(v,Pn),e(v,Ht),Ht.innerHTML=gd,e(v,On),e(v,es),e(es,Sn),e(v,Dn),e(v,Fe),e(Fe,Ln),e(Fe,Xt),e(Xt,Fn),e(Fe,Bn),e(v,Mn),e(v,ts),e(ts,Rn),e(v,qn),e(v,Gt),Gt.innerHTML=Ed,e(v,jn),e(v,K),e(K,Hn),e(K,Nt),e(Nt,Xn),e(K,Gn),e(K,Ut),e(Ut,Nn),e(K,Un),e(v,$n),e(v,Be),e(Be,Wn),Os.m(_d,Be),e(Be,Ss),e(v,Vn),e(v,$t),e($t,os),e(os,Yn),e($t,zn),e(v,Jn),e(v,Z),e(Z,Qn),e(Z,Wt),e(Wt,Kn),e(Z,Zn),e(Z,Vt),e(Vt,ei),e(Z,ti),S(p,Ds,m),S(p,w,m),e(w,ss),e(ss,Me),e(Me,oi),e(w,si),e(w,Re),e(Re,ai),e(Re,qe),e(qe,li),e(Re,ri),e(w,ni),e(w,ee),e(ee,ii),e(ee,je),e(je,ci),e(ee,pi),e(ee,He),e(He,hi),e(ee,di),e(w,fi),e(w,as),e(as,ui),e(w,vi),e(w,x),e(x,ki),e(x,Xe),e(Xe,yi),e(x,bi),e(x,ls),e(ls,mi),e(x,wi),e(x,Yt),e(Yt,gi),e(x,Ei),e(x,zt),e(zt,_i),e(x,xi),e(x,Jt),e(Jt,Ii),e(x,Ai),e(x,Qt),e(Qt,Ci),e(x,Ti),e(w,Pi),e(w,te),e(te,Oi),e(te,Ge),e(Ge,Si),e(te,Di),e(te,rs),e(rs,Li),e(te,Fi),e(w,Bi),e(w,Ne),e(Ne,Mi),e(Ne,Ue),e(Ue,Ri),e(Ne,qi),e(w,ji),e(w,ns),e(ns,Hi),e(w,Xi),e(w,oe),e(oe,is),e(is,se),e(se,Kt),e(Kt,Gi),e(se,Ni),e(se,Zt),e(Zt,Ui),e(oe,$i),e(oe,cs),e(cs,ne),e(ne,Wi),e(ne,eo),e(eo,Vi),e(oe,Yi),e(oe,ps),e(ps,ae),e(ae,zi),e(ae,to),e(to,Ji),e(ae,Qi),S(p,Ls,m),S(p,E,m),e(E,hs),e(hs,$e),e($e,Ki),e(E,Zi),e(E,ds),e(ds,fs),e(fs,ec),e(E,tc),e(E,us),e(us,vs),e(vs,oc),e(E,sc),e(E,We),e(We,ac),e(We,Ve),e(Ve,lc),e(We,rc),e(E,nc),e(E,ks),e(ks,ys),e(ys,ic),e(E,cc),e(E,bs),e(bs,pc),e(E,hc),e(E,I),e(I,ms),e(ms,oo),e(oo,dc),e(I,fc),e(I,ws),e(ws,so),e(so,uc),e(I,vc),e(I,gs),e(gs,Ye),e(Ye,kc),e(I,yc),e(I,Es),e(Es,ze),e(ze,bc),e(I,mc),e(I,_s),e(_s,Je),e(Je,wc),e(I,gc),e(I,xs),e(xs,Qe),e(Qe,Ec),e(I,_c),e(I,Is),e(Is,Ke),e(Ke,xc),Fs=!0},p:Xd,i(p){Fs||(pd(y.$$.fragment,p),Fs=!0)},o(p){hd(y.$$.fragment,p),Fs=!1},d(p){dd(y,p),p&&s(M),p&&s(g),p&&s(As),p&&s(h),p&&s(Cs),p&&s(L),p&&s(Ts),p&&s(f),p&&s(Ps),p&&s(v),p&&s(Ds),p&&s(w),p&&s(Ls),p&&s(E)}}}function Wd(et){let y,M;const g=[et[0],rd];let G={$$slots:{default:[$d]},$$scope:{ctx:et}};for(let b=0;b<g.length;b+=1)G=Pc(G,g[b]);return y=new Gd({props:G}),{c(){nd(y.$$.fragment)},l(b){id(y.$$.fragment,b)},m(b,R){cd(y,b,R),M=!0},p(b,[R]){const tt=R&1?Rd(g,[R&1&&ad(b[0]),R&0&&ad(rd)]):{};R&2&&(tt.$$scope={dirty:R,ctx:b}),y.$set(tt)},i(b){M||(pd(y.$$.fragment,b),M=!0)},o(b){hd(y.$$.fragment,b),M=!1},d(b){dd(y,b)}}}const rd={title:"Parsing error when calling generic function with type arguments",date:"2019-04-23T08:00:00Z",lastUpdated:"2019-04-27T08:00:00Z",description:"\u{1F631}",label:"blog"};function Vd(et,y,M){return qd("blog",{image:Ud}),et.$$set=g=>{M(0,y=Pc(Pc({},y),ld(g)))},y=ld(y),[y]}class tf extends Fd{constructor(y){super();Bd(this,y,Vd,Wd,Md,{})}}export{tf as default,rd as metadata};
