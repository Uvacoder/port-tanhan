import{S as Oa,i as Ma,s as Ra,C as Ns,w as _a,x as wa,y as ba,z as qa,A as ya,q as Ea,o as Sa,B as Ia,r as ja,R as da,k as h,e as t,t as c,m as u,c as e,a as o,h as k,d as a,b as p,Q as fa,f as y,g as ls,F as s,O as Ba}from"../../../chunks/vendor-569a3c5c.js";import{B as Ha}from"../../../chunks/BlogLayout-17b76cb2.js";import{T as Na}from"../../../chunks/TableOfContent-dbc18cb8.js";import{_ as za}from"../../../chunks/twitter-card-image-a57df29d.js";import"../../../chunks/stores-ee936cd4.js";import"../../../chunks/WebMentions-968cc380.js";/* empty css                                   */var Qa="/_app/assets/feturbulence-a2b6a5da.gif",xa="/_app/assets/feturbulence-011259a0.gif",Ja="/_app/assets/final-12c57f3e.gif",ga="/_app/assets/final-aeda1495.gif";function Ka(C){let r,g,d,w,i,m,L,J,b,f,zs,ts,n,K,T,ps,rs,E,is,V,cs,ks,A,vs,hs,us,U,$,ys,ds,W,S,x,Qs,fs,X,xs,gs,Y,ms,_s,G,Fa='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">export</span> <span class="token keyword">let</span> baseFrequency <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">export</span> <span class="token keyword">let</span> scale <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">export</span> <span class="token keyword">let</span> id<span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>id<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div><div class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>feTurbulence</span></div><div class="line">      <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>turbulence<span class="token punctuation">"</span></span> <span class="token attr-name">numOctaves</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span></div><div class="line">      <span class="token language-javascript"><span class="token punctuation">&#123;</span>baseFrequency<span class="token punctuation">&#125;</span></span></div><div class="line">      <span class="token attr-name">result</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>turbulence<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></div><div class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>feDisplacementMap</span></div><div class="line">      <span class="token attr-name">in2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>turbulence<span class="token punctuation">"</span></span> <span class="token attr-name">in</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SourceGraphic<span class="token punctuation">"</span></span></div><div class="line">      <span class="token attr-name">xChannelSelector</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>R<span class="token punctuation">"</span></span> <span class="token attr-name">yChannelSelector</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>G<span class="token punctuation">"</span></span></div><div class="line">      <span class="token language-javascript"><span class="token punctuation">&#123;</span>scale<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span></div></code></pre>',ws,I,bs,O,Es,Ss,M,Is,Fs,R,Ta='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> _idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token comment">// ...</span></div><div class="line">  <span class="token keyword">export</span> <span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">wave-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>_idx<span class="token operator">++</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div></code></pre>',Ts,P,$s,q,Ps,Ds,Cs,j,$a=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> SvgFilter </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./SvgFilter.svelte&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">wavy</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> params </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;&#125;) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> svgFilter;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  		</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-token-function)">.addEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;introstart&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> createIntro);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// create SvgFilter</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createIntro</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    svgFilter </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">SvgFilter</span><span style="color: var(--shiki-color-text)">(&#123; target</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-color-text)">.body &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)">.filter </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;url(#</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">svgFilter</span><span style="color: var(--shiki-color-text)">.id</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">)&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-token-function)">.removeEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;introstart&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> createIntro);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-token-function)">.addEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;introend&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> cleanup);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">cleanup</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">svgFilter</span><span style="color: var(--shiki-token-function)">.$destroy</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-token-function)">.removeEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;introend&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> cleanup);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ls,F,Vs,B,As,Gs,H,Os,Ms,N,Pa=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">wavy</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> params </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;&#125;) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> svgFilter;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">params</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">tick</span><span style="color: var(--shiki-color-text)">(t) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// t     0   -&gt; 1</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// scale 100 -&gt; 0</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (svgFilter) </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">svgFilter</span><span style="color: var(--shiki-token-function)">.$set</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          scale</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> t) </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">100</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          baseFrequency</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0.55</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Rs,Z,qs,js,z,Da=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">wavy</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> params </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;&#125;) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> svgFilter;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">params</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">css</span><span style="color: var(--shiki-color-text)">(t) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// only fade out in the last quarter of the time</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// t       1 -&gt; 0.25 -&gt; 0</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// opactiy 1 -&gt; 1    -&gt; 0</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> t </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0.25</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;opacity: </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">t </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">4</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;opacity: 1&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">tick</span><span style="color: var(--shiki-color-text)">(t) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// t     0   -&gt; 1</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// scale 100 -&gt; 0</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (svgFilter) </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">svgFilter</span><span style="color: var(--shiki-token-function)">.$set</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          scale</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> t) </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">100</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          baseFrequency</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0.55</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Bs,ss,D,Hs,es;return r=new Na({props:{data:[{link:"the-result",title:"The Result"},{link:"break-it-down",title:"Break it down"}]}}),{c(){_a(r.$$.fragment),g=h(),d=t("section"),w=t("h2"),i=t("a"),m=c("The Result"),L=h(),J=t("p"),b=t("span"),f=t("img"),ts=h(),n=t("section"),K=t("h2"),T=t("a"),ps=c("Break it down"),rs=h(),E=t("p"),is=c("I'm using a combination of SVG filters "),V=t("code"),cs=c("<feTurbulence>"),ks=c(", "),A=t("code"),vs=c("<feDisplacementMap>"),hs=c(" to achieve this effect."),us=h(),U=t("p"),$=t("a"),ys=c("Svelte REPL"),ds=h(),W=t("p"),S=t("span"),x=t("img"),fs=h(),X=t("p"),xs=c("To use this SVG filter, I first created a Svelte component for the filter."),gs=h(),Y=t("p"),ms=c("The idea is to add this render this filter whenever I want to transition, and update the scale and frequency during the transition"),_s=h(),G=t("div"),ws=h(),I=t("p"),bs=c("As I'm going to have multiple instance of the SvgFilter, and I don't want the filter id to be conflict with each other, I generated the "),O=t("code"),Es=c("id"),Ss=c(" everytime there's a new instance of "),M=t("code"),Is=c("SvgFilter"),Fs=h(),R=t("div"),Ts=h(),P=t("p"),$s=c("I created the "),q=t("code"),Ps=c("SvgFilter"),Ds=c(" component as the transition starts and remove it as the transition ends"),Cs=h(),j=t("div"),Ls=h(),F=t("p"),Vs=c("And as the transition ticks by, I set the "),B=t("code"),As=c("scale"),Gs=c(" of the SVG filter based on the time, "),H=t("code"),Os=c("t"),Ms=h(),N=t("div"),Rs=h(),Z=t("p"),qs=c("Add some fade out using the opacity"),js=h(),z=t("div"),Bs=h(),ss=t("p"),D=t("a"),Hs=c("Final REPL"),this.h()},l(v){wa(r.$$.fragment,v),g=u(v),d=e(v,"SECTION",{});var _=o(d);w=e(_,"H2",{});var Js=o(w);i=e(Js,"A",{href:!0,id:!0});var Ks=o(i);m=k(Ks,"The Result"),Ks.forEach(a),Js.forEach(a),L=u(_),J=e(_,"P",{});var Us=o(J);b=e(Us,"SPAN",{style:!0});var Ws=o(b);f=e(Ws,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),Ws.forEach(a),Us.forEach(a),_.forEach(a),ts=u(v),n=e(v,"SECTION",{});var l=o(n);K=e(l,"H2",{});var Xs=o(K);T=e(Xs,"A",{href:!0,id:!0});var Ys=o(T);ps=k(Ys,"Break it down"),Ys.forEach(a),Xs.forEach(a),rs=u(l),E=e(l,"P",{});var Q=o(E);is=k(Q,"I'm using a combination of SVG filters "),V=e(Q,"CODE",{class:!0});var Zs=o(V);cs=k(Zs,"<feTurbulence>"),Zs.forEach(a),ks=k(Q,", "),A=e(Q,"CODE",{class:!0});var sa=o(A);vs=k(sa,"<feDisplacementMap>"),sa.forEach(a),hs=k(Q," to achieve this effect."),Q.forEach(a),us=u(l),U=e(l,"P",{});var aa=o(U);$=e(aa,"A",{href:!0,rel:!0});var na=o($);ys=k(na,"Svelte REPL"),na.forEach(a),aa.forEach(a),ds=u(l),W=e(l,"P",{});var ta=o(W);S=e(ta,"SPAN",{style:!0});var ea=o(S);x=e(ea,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),ea.forEach(a),ta.forEach(a),fs=u(l),X=e(l,"P",{});var oa=o(X);xs=k(oa,"To use this SVG filter, I first created a Svelte component for the filter."),oa.forEach(a),gs=u(l),Y=e(l,"P",{});var la=o(Y);ms=k(la,"The idea is to add this render this filter whenever I want to transition, and update the scale and frequency during the transition"),la.forEach(a),_s=u(l),G=e(l,"DIV",{class:!0});var Ca=o(G);Ca.forEach(a),ws=u(l),I=e(l,"P",{});var as=o(I);bs=k(as,"As I'm going to have multiple instance of the SvgFilter, and I don't want the filter id to be conflict with each other, I generated the "),O=e(as,"CODE",{class:!0});var pa=o(O);Es=k(pa,"id"),pa.forEach(a),Ss=k(as," everytime there's a new instance of "),M=e(as,"CODE",{class:!0});var ra=o(M);Is=k(ra,"SvgFilter"),ra.forEach(a),as.forEach(a),Fs=u(l),R=e(l,"DIV",{class:!0});var La=o(R);La.forEach(a),Ts=u(l),P=e(l,"P",{});var os=o(P);$s=k(os,"I created the "),q=e(os,"CODE",{class:!0});var ia=o(q);Ps=k(ia,"SvgFilter"),ia.forEach(a),Ds=k(os," component as the transition starts and remove it as the transition ends"),os.forEach(a),Cs=u(l),j=e(l,"DIV",{class:!0});var Va=o(j);Va.forEach(a),Ls=u(l),F=e(l,"P",{});var ns=o(F);Vs=k(ns,"And as the transition ticks by, I set the "),B=e(ns,"CODE",{class:!0});var ca=o(B);As=k(ca,"scale"),ca.forEach(a),Gs=k(ns," of the SVG filter based on the time, "),H=e(ns,"CODE",{class:!0});var ka=o(H);Os=k(ka,"t"),ka.forEach(a),ns.forEach(a),Ms=u(l),N=e(l,"DIV",{class:!0});var Aa=o(N);Aa.forEach(a),Rs=u(l),Z=e(l,"P",{});var va=o(Z);qs=k(va,"Add some fade out using the opacity"),va.forEach(a),js=u(l),z=e(l,"DIV",{class:!0});var Ga=o(z);Ga.forEach(a),Bs=u(l),ss=e(l,"P",{});var ha=o(ss);D=e(ha,"A",{href:!0,rel:!0});var ua=o(D);Hs=k(ua,"Final REPL"),ua.forEach(a),ha.forEach(a),l.forEach(a),this.h()},h(){p(i,"href","#the-result"),p(i,"id","the-result"),fa(f.src,zs=ga)||p(f,"src",zs),p(f,"srcset",ga+", "+Ja+" 2x"),p(f,"loading","lazy"),y(f,"position","absolute"),y(f,"top","0"),y(f,"width","100%"),y(f,"height","100%"),p(f,"alt","the-result"),y(b,"display","block"),y(b,"position","relative"),y(b,"padding-top","61.571%"),y(b,"width","100%"),p(T,"href","#break-it-down"),p(T,"id","break-it-down"),p(V,"class","inline"),p(A,"class","inline"),p($,"href","https://svelte.dev/repl/fc2c47f30912496eb0b4fe2776345462?version=3.29.4"),p($,"rel","nofollow"),fa(x.src,Qs=xa)||p(x,"src",Qs),p(x,"srcset",xa+", "+Qa+" 2x"),p(x,"loading","lazy"),y(x,"position","absolute"),y(x,"top","0"),y(x,"width","100%"),y(x,"height","100%"),p(x,"alt","feTurbulence"),y(S,"display","block"),y(S,"position","relative"),y(S,"padding-top","65.500%"),y(S,"width","100%"),p(G,"class","code-section"),p(O,"class","inline"),p(M,"class","inline"),p(R,"class","code-section"),p(q,"class","inline"),p(j,"class","code-section"),p(B,"class","inline"),p(H,"class","inline"),p(N,"class","code-section"),p(z,"class","code-section"),p(D,"href","https://svelte.dev/repl/2f3f9b62e1454f2d94729fe242375d43?version=3.29.4"),p(D,"rel","nofollow")},m(v,_){ba(r,v,_),ls(v,g,_),ls(v,d,_),s(d,w),s(w,i),s(i,m),s(d,L),s(d,J),s(J,b),s(b,f),ls(v,ts,_),ls(v,n,_),s(n,K),s(K,T),s(T,ps),s(n,rs),s(n,E),s(E,is),s(E,V),s(V,cs),s(E,ks),s(E,A),s(A,vs),s(E,hs),s(n,us),s(n,U),s(U,$),s($,ys),s(n,ds),s(n,W),s(W,S),s(S,x),s(n,fs),s(n,X),s(X,xs),s(n,gs),s(n,Y),s(Y,ms),s(n,_s),s(n,G),G.innerHTML=Fa,s(n,ws),s(n,I),s(I,bs),s(I,O),s(O,Es),s(I,Ss),s(I,M),s(M,Is),s(n,Fs),s(n,R),R.innerHTML=Ta,s(n,Ts),s(n,P),s(P,$s),s(P,q),s(q,Ps),s(P,Ds),s(n,Cs),s(n,j),j.innerHTML=$a,s(n,Ls),s(n,F),s(F,Vs),s(F,B),s(B,As),s(F,Gs),s(F,H),s(H,Os),s(n,Ms),s(n,N),N.innerHTML=Pa,s(n,Rs),s(n,Z),s(Z,qs),s(n,js),s(n,z),z.innerHTML=Da,s(n,Bs),s(n,ss),s(ss,D),s(D,Hs),es=!0},p:Ba,i(v){es||(Ea(r.$$.fragment,v),es=!0)},o(v){Sa(r.$$.fragment,v),es=!1},d(v){Ia(r,v),v&&a(g),v&&a(d),v&&a(ts),v&&a(n)}}}function Ua(C){let r,g;const d=[C[0],ma];let w={$$slots:{default:[Ka]},$$scope:{ctx:C}};for(let i=0;i<d.length;i+=1)w=Ns(w,d[i]);return r=new Ha({props:w}),{c(){_a(r.$$.fragment)},l(i){wa(r.$$.fragment,i)},m(i,m){ba(r,i,m),g=!0},p(i,[m]){const L=m&1?qa(d,[m&1&&ya(i[0]),m&0&&ya(ma)]):{};m&2&&(L.$$scope={dirty:m,ctx:i}),r.$set(L)},i(i){g||(Ea(r.$$.fragment,i),g=!0)},o(i){Sa(r.$$.fragment,i),g=!1},d(i){Ia(r,i)}}}const ma={title:"SVG filter Svelte Transition",tags:["svelte","transition"],description:"The ResultBreak it downI'm using a combination of SVG filters `&lt;feTurbulence&gt;`, `&lt;feDisplacementMap&gt;` to achieve this effect.Svelte REPLTo use this SVG filter, I first created a Svelte component for the filter...."};function Wa(C,r,g){return ja("blog",{image:za}),C.$$set=d=>{g(0,r=Ns(Ns({},r),da(d)))},r=da(r),[r]}class en extends Oa{constructor(r){super();Ma(this,r,Wa,Ua,Ra,{})}}export{en as default,ma as metadata};
