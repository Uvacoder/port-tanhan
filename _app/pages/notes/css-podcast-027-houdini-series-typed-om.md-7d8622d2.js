import{S as lt,i as rt,s as it,C as _n,w as pt,x as ct,y as kt,z as vt,A as Ie,q as ht,o as yt,B as ut,r as dt,Y as Te,e as a,t as p,k as r,c as n,a as e,h as c,d as o,m as i,b as l,g as h,H as s,J as St}from"../../chunks/vendor-da4388d4.js";import{B as xt}from"../../chunks/BlogLayout-14cfab6f.js";import{_ as ft}from"../../chunks/twitter-card-image-a57df29d.js";import"../../chunks/stores-1fad7c36.js";import"../../chunks/ldjson-b0805387.js";/* empty css                                */function mt(es){let v,x,S,D,y,u,b,zo,jo,qs,Ko,Ro,ts,qe=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;div&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// browser needs to parse the string to understand and use it</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)">.height </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;5px&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// browser understands and use the value as 5px</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)">.height </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,$o,Os,Us,Bo,Jo,ls,Oe=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">attributeStyleMap</span><span style="color: var(--shiki-token-function)">.set</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;color&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-color-text)">))</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// TypeError: Failed to set, invalid type for property</span></span></code></pre>`,Yo,Ps,Hs,Wo,Xo,rs,Ue=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">_5px</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">); </span><span style="color: var(--shiki-token-comment)">// 5px</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">_15px</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">_5px</span><span style="color: var(--shiki-token-function)">.add</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-color-text)">)); </span><span style="color: var(--shiki-token-comment)">// 15px;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;div&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)">.height </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> _15px;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// &lt;div style=&quot;height: 15px;&quot;&gt;&lt;/div&gt;</span></span></code></pre>`,Fo,z,As,Go,Qo,Ns,Zo,sa,is,Pe=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// checking browser support</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-color-text)">.number) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// \u{1F60D} browser supports Typed OM!</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,fo,M,Ds,j,oa,aa,ps,He=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.querySelector</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;#app&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-token-function)">.computedStyleMap</span><span style="color: var(--shiki-color-text)">()</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;font-size&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// Specification: CSSUnitValue &#123; value: 2, unit: &#39;rem&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// Chrome: CSSUnitValue &#123; value: 32, unit: &#39;px&#39; &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-token-function)">.getComputedStyle</span><span style="color: var(--shiki-color-text)">(element).fontSize);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// &quot;32px&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;app&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">style</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;font-size: 2rem;&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,mo,f,zs,K,na,ea,js,Ks,ta,la,cs,Ae=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.querySelector</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;#app&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">inlineStyles</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-color-text)">.attributeStyleMap;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">inlineStyles</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;font-size&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// CSSUnitValue &#123; value: 2, unit: &#39;rem&#39; &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">inlineStyles</span><span style="color: var(--shiki-token-function)">.set</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;height&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// &lt;div id=&quot;app&quot; style=&quot;font-size: 2rem; height: 10px;&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">inlineStyles</span><span style="color: var(--shiki-token-function)">.clear</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// &lt;div id=&quot;app&quot; style=&quot;&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">inlineStyles</span><span style="color: var(--shiki-token-function)">.append</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;background-image&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;linear-gradient(yellow, green)&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">inlineStyles</span><span style="color: var(--shiki-token-function)">.append</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;background-image&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;linear-gradient(to bottom, blue, red)&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// &lt;div id=&quot;app&quot; </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">//   style=&quot;background-image: linear-gradient(yellow, green), </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">//                      linear-gradient(to bottom, blue, red)&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">inlineStyles</span><span style="color: var(--shiki-token-function)">.delete</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;background&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// &lt;div id=&quot;app&quot; style=&quot;&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">inlineStyles</span><span style="color: var(--shiki-token-function)">.has</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;opacity&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// false</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;app&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">style</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;font-size: 2rem;&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,ra,ks,Ne=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// &#96;attributeStyleMap&#96; only gets inline style</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">attributeStyleMap</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;color&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// null</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-token-function)">.computedStyleMap</span><span style="color: var(--shiki-color-text)">()</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;color&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// CSSStyleValue &#123; /* red */ &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;app&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">style</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;font-size: 2rem;&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">style</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">#app</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">red</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">style</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,_o,I,Rs,R,ia,pa,d,$s,ca,ka,Bs,va,ha,Js,ya,ua,Ys,da,Sa,Ws,xa,fa,Xs,ma,Co,T,Fs,$,_a,Ca,vs,De=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">CSSStyleValue</span><span style="color: var(--shiki-token-function)">.parse</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;font-size&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;32px&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// CSSUnitValue &#123; value: 2, unit: &#39;px&#39; &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">CSSStyleValue</span><span style="color: var(--shiki-token-function)">.parse</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;transform&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;translate3d(10px, 20px, 30px) scale(1.5)&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">/* </span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">CSSTransformValue &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">  0: CSSTranslate &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">    is2D: false</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">    x: CSSUnitValue &#123; value: 10, unit: &#39;px&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">    y: CSSUnitValue &#123; value: 20, unit: &#39;px&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">    z: CSSUnitValue &#123; value: 30, unit: &#39;px&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">  1: CSSScale &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">    is2D: true</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">    x: CSSUnitValue &#123; value: 1.5, unit: &#39;number&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">    y: CSSUnitValue &#123; value: 1.5, unit: &#39;number&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">    z: CSSUnitValue &#123; value: 1, unit: &#39;number&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">*/</span></span></code></pre>`,go,L,Gs,B,ga,wa,Qs,hs,Ea,ys,Va,wo,C,Zs,J,ba,Ma,so,q,us,Ia,Ta,ds,La,qa,Oa,Ss,ze=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">CSSStyleValue</span><span style="color: var(--shiki-token-function)">.parse</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;display&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;none&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// CSSKeywordValue &#123; value: &#39;none&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">keywordValue</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CSSKeywordValue</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;flex&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// CSSKeywordValue &#123; value: &#39;flex&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">keywordValue</span><span style="color: var(--shiki-color-text)">.value;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// &#39;flex&#39;</span></span></code></pre>`,Eo,g,oo,Y,Ua,Pa,ao,no,Ha,Aa,xs,je=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// Convert units</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">48</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.to</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;in&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// CSSUnitValue &#123; value: 0.5, unit: &#39;in&#39; &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">48</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.to</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;rem&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Error</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Cannot transform absolute unit to relative unit</span></span></code></pre>`,Vo,w,eo,W,Na,Da,to,lo,za,ja,fs,Ke=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CSSMathSum</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-color-text)">)); </span><span style="color: var(--shiki-token-comment)">// 15px</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">attributeStyleMap</span><span style="color: var(--shiki-token-function)">.set</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;width&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CSSMathMax</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.rem</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">30</span><span style="color: var(--shiki-color-text)">)));</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// &lt;div style=&quot;width: max(10rem, 30px)&quot;&gt;&lt;/div&gt;</span></span></code></pre>`,bo,O,ro,X,Ka,Ra,ms,Re=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">position</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CSSPositionValue</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">20</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">50</span><span style="color: var(--shiki-color-text)">))</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">position</span><span style="color: var(--shiki-color-text)">.x; </span><span style="color: var(--shiki-token-comment)">// CSSUnitValue &#123; value: 20, unit: &#39;px&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">position</span><span style="color: var(--shiki-color-text)">.y; </span><span style="color: var(--shiki-token-comment)">// CSSUnitValue &#123; value: 50, unit: &#39;px&#39; &#125;</span></span></code></pre>`,Mo,E,io,F,$a,Ba,po,co,Ja,Ya,_s,$e=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">transformValue</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSSStyleValue</span><span style="color: var(--shiki-token-function)">.parse</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;transform&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;translate3d(10px, 20px, 30px) scale(1.5)&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// iterate through each transformation</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">transform</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> transformValue) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(transform);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// CSSTranslate &#123; ... &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// CSSScale &#123; ... &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// get DOMMatrix out of the transformValue</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">transformValue</span><span style="color: var(--shiki-token-function)">.toMatrix</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// DOMMatrix\xA0&#123; a: 1.5, b: 0, c: 0, ... &#125;</span></span></code></pre>`,Io,V,ko,G,Wa,Xa,Q,vo,Fa,Ga,ho,Qa,Za,Cs,Be=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.querySelector</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;#app&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">attributeStyleMap</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;--length&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// CSSUnparsedValue &#123; 0: 3px &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;app&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">style</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;--length: 3px;&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,To,U,yo,Z,sn,on,_,gs,an,ss,nn,en,ws,tn,os,ln,rn,P,pn,Es,cn,kn,as,vn,hn,H,yn,Vs,un,dn,ns,Sn;return{c(){v=a("section"),x=a("h2"),S=a("a"),D=p("CSS Typed Object Model (Typed OM)"),y=r(),u=a("ul"),b=a("li"),zo=p("CSS Typed OM API allow manipulating CSS styles through a typed JS representation rather than a simple string."),jo=r(),qs=a("li"),Ko=p("Provide performance win. Browser understands the structured JS representation and no longer needs to parse CSS string from scratch."),Ro=r(),ts=a("div"),$o=r(),Os=a("ul"),Us=a("li"),Bo=p("Built-in error handling. You can't provide invalid value to a type."),Jo=r(),ls=a("div"),Yo=r(),Ps=a("ul"),Hs=a("li"),Wo=p("Rather than manipulating raw string, developer can create / transform CSS in a meaningful object"),Xo=r(),rs=a("div"),Fo=r(),z=a("ul"),As=a("li"),Go=p("API based on functional programming concept"),Qo=r(),Ns=a("li"),Zo=p("To check browser support Typed OM, currently (21 Nov 2020) supported in Safari Tech Preview & Chromium"),sa=r(),is=a("div"),fo=r(),M=a("section"),Ds=a("h2"),j=a("a"),oa=p("computedStyleMap"),aa=r(),ps=a("div"),mo=r(),f=a("section"),zs=a("h2"),K=a("a"),na=p("attributeStyleMap"),ea=r(),js=a("ul"),Ks=a("li"),ta=p("parse, modify inline styles"),la=r(),cs=a("div"),ra=r(),ks=a("div"),_o=r(),I=a("section"),Rs=a("h2"),R=a("a"),ia=p("Types of CSSStyleValue"),pa=r(),d=a("ul"),$s=a("li"),ca=p("CSSImageValue"),ka=r(),Bs=a("li"),va=p("CSSKeywordValue"),ha=r(),Js=a("li"),ya=p("CSSNumericValue"),ua=r(),Ys=a("li"),da=p("CSSPositionValue"),Sa=r(),Ws=a("li"),xa=p("CSSTransformValue"),fa=r(),Xs=a("li"),ma=p("CSSUnparsedValue"),Co=r(),T=a("section"),Fs=a("h3"),$=a("a"),_a=p("create CSSStyleValue"),Ca=r(),vs=a("div"),go=r(),L=a("section"),Gs=a("h3"),B=a("a"),ga=p("CSSImageValue"),wa=r(),Qs=a("ul"),hs=a("li"),Ea=p("does not cover "),ys=a("code"),Va=p("linear-gradient"),wo=r(),C=a("section"),Zs=a("h3"),J=a("a"),ba=p("CSSKeywordValue"),Ma=r(),so=a("ul"),q=a("li"),us=a("code"),Ia=p("display: none"),Ta=p(", "),ds=a("code"),La=p("none"),qa=p(" is a CSSKeywordValue"),Oa=r(),Ss=a("div"),Eo=r(),g=a("section"),oo=a("h3"),Y=a("a"),Ua=p("CSSNumericValue"),Pa=r(),ao=a("ul"),no=a("li"),Ha=p("CSSNumericValue has a few subclasses, eg: CSSUnitValue, CSSMathValue"),Aa=r(),xs=a("div"),Vo=r(),w=a("section"),eo=a("h3"),W=a("a"),Na=p("CSSMathValue"),Da=r(),to=a("ul"),lo=a("li"),za=p("CSSMathNegate, CSSMathMin, CSSMathMax, CSSMathSum, CSSMathProduct, CSSMathInvert"),ja=r(),fs=a("div"),bo=r(),O=a("section"),ro=a("h3"),X=a("a"),Ka=p("CSSPositionValue"),Ra=r(),ms=a("div"),Mo=r(),E=a("section"),io=a("h3"),F=a("a"),$a=p("CSSTransformValue"),Ba=r(),po=a("ul"),co=a("li"),Ja=p("CSSTranslate, CSSScale, CSSRotate, CSSSkew, CSSSkewX, CSSSkewY, CSSPerspective, CSSMatrixComponent"),Ya=r(),_s=a("div"),Io=r(),V=a("section"),ko=a("h3"),G=a("a"),Wa=p("CSSUnparsedValue"),Xa=r(),Q=a("ul"),vo=a("li"),Fa=p("CSSCustomProperty, that is not Houdini Property"),Ga=r(),ho=a("li"),Qa=p("the value is parsed as string"),Za=r(),Cs=a("div"),To=r(),U=a("section"),yo=a("h3"),Z=a("a"),sn=p("References"),on=r(),_=a("ul"),gs=a("li"),an=p("Specifications "),ss=a("a"),nn=p("https://www.w3.org/TR/css-typed-om-1/"),en=r(),ws=a("li"),tn=p("MDN "),os=a("a"),ln=p("https://developer.mozilla.org/en-US/docs/Web/API/CSS_Typed_OM_API"),rn=r(),P=a("li"),pn=p("caniuse "),Es=a("code"),cn=p("attributeStyleMap"),kn=r(),as=a("a"),vn=p("https://caniuse.com/mdn-api_element_attributestylemap"),hn=r(),H=a("li"),yn=p("caniuse "),Vs=a("code"),un=p("computedStyleMap"),dn=r(),ns=a("a"),Sn=p("https://caniuse.com/mdn-api_element_computedstylemap"),this.h()},l(t){v=n(t,"SECTION",{});var k=e(v);x=n(k,"H2",{});var Cn=e(x);S=n(Cn,"A",{href:!0,id:!0});var gn=e(S);D=c(gn,"CSS Typed Object Model (Typed OM)"),gn.forEach(o),Cn.forEach(o),y=i(k),u=n(k,"UL",{});var Lo=e(u);b=n(Lo,"LI",{});var wn=e(b);zo=c(wn,"CSS Typed OM API allow manipulating CSS styles through a typed JS representation rather than a simple string."),wn.forEach(o),jo=i(Lo),qs=n(Lo,"LI",{});var En=e(qs);Ko=c(En,"Provide performance win. Browser understands the structured JS representation and no longer needs to parse CSS string from scratch."),En.forEach(o),Lo.forEach(o),Ro=i(k),ts=n(k,"DIV",{class:!0});var Je=e(ts);Je.forEach(o),$o=i(k),Os=n(k,"UL",{});var Vn=e(Os);Us=n(Vn,"LI",{});var bn=e(Us);Bo=c(bn,"Built-in error handling. You can't provide invalid value to a type."),bn.forEach(o),Vn.forEach(o),Jo=i(k),ls=n(k,"DIV",{class:!0});var Ye=e(ls);Ye.forEach(o),Yo=i(k),Ps=n(k,"UL",{});var Mn=e(Ps);Hs=n(Mn,"LI",{});var In=e(Hs);Wo=c(In,"Rather than manipulating raw string, developer can create / transform CSS in a meaningful object"),In.forEach(o),Mn.forEach(o),Xo=i(k),rs=n(k,"DIV",{class:!0});var We=e(rs);We.forEach(o),Fo=i(k),z=n(k,"UL",{});var qo=e(z);As=n(qo,"LI",{});var Tn=e(As);Go=c(Tn,"API based on functional programming concept"),Tn.forEach(o),Qo=i(qo),Ns=n(qo,"LI",{});var Ln=e(Ns);Zo=c(Ln,"To check browser support Typed OM, currently (21 Nov 2020) supported in Safari Tech Preview & Chromium"),Ln.forEach(o),qo.forEach(o),sa=i(k),is=n(k,"DIV",{class:!0});var Xe=e(is);Xe.forEach(o),k.forEach(o),fo=i(t),M=n(t,"SECTION",{});var Oo=e(M);Ds=n(Oo,"H2",{});var qn=e(Ds);j=n(qn,"A",{href:!0,id:!0});var On=e(j);oa=c(On,"computedStyleMap"),On.forEach(o),qn.forEach(o),aa=i(Oo),ps=n(Oo,"DIV",{class:!0});var Fe=e(ps);Fe.forEach(o),Oo.forEach(o),mo=i(t),f=n(t,"SECTION",{});var A=e(f);zs=n(A,"H2",{});var Un=e(zs);K=n(Un,"A",{href:!0,id:!0});var Pn=e(K);na=c(Pn,"attributeStyleMap"),Pn.forEach(o),Un.forEach(o),ea=i(A),js=n(A,"UL",{});var Hn=e(js);Ks=n(Hn,"LI",{});var An=e(Ks);ta=c(An,"parse, modify inline styles"),An.forEach(o),Hn.forEach(o),la=i(A),cs=n(A,"DIV",{class:!0});var Ge=e(cs);Ge.forEach(o),ra=i(A),ks=n(A,"DIV",{class:!0});var Qe=e(ks);Qe.forEach(o),A.forEach(o),_o=i(t),I=n(t,"SECTION",{});var Uo=e(I);Rs=n(Uo,"H2",{});var Nn=e(Rs);R=n(Nn,"A",{href:!0,id:!0});var Dn=e(R);ia=c(Dn,"Types of CSSStyleValue"),Dn.forEach(o),Nn.forEach(o),pa=i(Uo),d=n(Uo,"UL",{});var m=e(d);$s=n(m,"LI",{});var zn=e($s);ca=c(zn,"CSSImageValue"),zn.forEach(o),ka=i(m),Bs=n(m,"LI",{});var jn=e(Bs);va=c(jn,"CSSKeywordValue"),jn.forEach(o),ha=i(m),Js=n(m,"LI",{});var Kn=e(Js);ya=c(Kn,"CSSNumericValue"),Kn.forEach(o),ua=i(m),Ys=n(m,"LI",{});var Rn=e(Ys);da=c(Rn,"CSSPositionValue"),Rn.forEach(o),Sa=i(m),Ws=n(m,"LI",{});var $n=e(Ws);xa=c($n,"CSSTransformValue"),$n.forEach(o),fa=i(m),Xs=n(m,"LI",{});var Bn=e(Xs);ma=c(Bn,"CSSUnparsedValue"),Bn.forEach(o),m.forEach(o),Uo.forEach(o),Co=i(t),T=n(t,"SECTION",{});var Po=e(T);Fs=n(Po,"H3",{});var Jn=e(Fs);$=n(Jn,"A",{href:!0,id:!0});var Yn=e($);_a=c(Yn,"create CSSStyleValue"),Yn.forEach(o),Jn.forEach(o),Ca=i(Po),vs=n(Po,"DIV",{class:!0});var Ze=e(vs);Ze.forEach(o),Po.forEach(o),go=i(t),L=n(t,"SECTION",{});var Ho=e(L);Gs=n(Ho,"H3",{});var Wn=e(Gs);B=n(Wn,"A",{href:!0,id:!0});var Xn=e(B);ga=c(Xn,"CSSImageValue"),Xn.forEach(o),Wn.forEach(o),wa=i(Ho),Qs=n(Ho,"UL",{});var Fn=e(Qs);hs=n(Fn,"LI",{});var xn=e(hs);Ea=c(xn,"does not cover "),ys=n(xn,"CODE",{class:!0});var Gn=e(ys);Va=c(Gn,"linear-gradient"),Gn.forEach(o),xn.forEach(o),Fn.forEach(o),Ho.forEach(o),wo=i(t),C=n(t,"SECTION",{});var bs=e(C);Zs=n(bs,"H3",{});var Qn=e(Zs);J=n(Qn,"A",{href:!0,id:!0});var Zn=e(J);ba=c(Zn,"CSSKeywordValue"),Zn.forEach(o),Qn.forEach(o),Ma=i(bs),so=n(bs,"UL",{});var se=e(so);q=n(se,"LI",{});var uo=e(q);us=n(uo,"CODE",{class:!0});var oe=e(us);Ia=c(oe,"display: none"),oe.forEach(o),Ta=c(uo,", "),ds=n(uo,"CODE",{class:!0});var ae=e(ds);La=c(ae,"none"),ae.forEach(o),qa=c(uo," is a CSSKeywordValue"),uo.forEach(o),se.forEach(o),Oa=i(bs),Ss=n(bs,"DIV",{class:!0});var st=e(Ss);st.forEach(o),bs.forEach(o),Eo=i(t),g=n(t,"SECTION",{});var Ms=e(g);oo=n(Ms,"H3",{});var ne=e(oo);Y=n(ne,"A",{href:!0,id:!0});var ee=e(Y);Ua=c(ee,"CSSNumericValue"),ee.forEach(o),ne.forEach(o),Pa=i(Ms),ao=n(Ms,"UL",{});var te=e(ao);no=n(te,"LI",{});var le=e(no);Ha=c(le,"CSSNumericValue has a few subclasses, eg: CSSUnitValue, CSSMathValue"),le.forEach(o),te.forEach(o),Aa=i(Ms),xs=n(Ms,"DIV",{class:!0});var ot=e(xs);ot.forEach(o),Ms.forEach(o),Vo=i(t),w=n(t,"SECTION",{});var Is=e(w);eo=n(Is,"H3",{});var re=e(eo);W=n(re,"A",{href:!0,id:!0});var ie=e(W);Na=c(ie,"CSSMathValue"),ie.forEach(o),re.forEach(o),Da=i(Is),to=n(Is,"UL",{});var pe=e(to);lo=n(pe,"LI",{});var ce=e(lo);za=c(ce,"CSSMathNegate, CSSMathMin, CSSMathMax, CSSMathSum, CSSMathProduct, CSSMathInvert"),ce.forEach(o),pe.forEach(o),ja=i(Is),fs=n(Is,"DIV",{class:!0});var at=e(fs);at.forEach(o),Is.forEach(o),bo=i(t),O=n(t,"SECTION",{});var Ao=e(O);ro=n(Ao,"H3",{});var ke=e(ro);X=n(ke,"A",{href:!0,id:!0});var ve=e(X);Ka=c(ve,"CSSPositionValue"),ve.forEach(o),ke.forEach(o),Ra=i(Ao),ms=n(Ao,"DIV",{class:!0});var nt=e(ms);nt.forEach(o),Ao.forEach(o),Mo=i(t),E=n(t,"SECTION",{});var Ts=e(E);io=n(Ts,"H3",{});var he=e(io);F=n(he,"A",{href:!0,id:!0});var ye=e(F);$a=c(ye,"CSSTransformValue"),ye.forEach(o),he.forEach(o),Ba=i(Ts),po=n(Ts,"UL",{});var ue=e(po);co=n(ue,"LI",{});var de=e(co);Ja=c(de,"CSSTranslate, CSSScale, CSSRotate, CSSSkew, CSSSkewX, CSSSkewY, CSSPerspective, CSSMatrixComponent"),de.forEach(o),ue.forEach(o),Ya=i(Ts),_s=n(Ts,"DIV",{class:!0});var et=e(_s);et.forEach(o),Ts.forEach(o),Io=i(t),V=n(t,"SECTION",{});var Ls=e(V);ko=n(Ls,"H3",{});var Se=e(ko);G=n(Se,"A",{href:!0,id:!0});var xe=e(G);Wa=c(xe,"CSSUnparsedValue"),xe.forEach(o),Se.forEach(o),Xa=i(Ls),Q=n(Ls,"UL",{});var No=e(Q);vo=n(No,"LI",{});var fe=e(vo);Fa=c(fe,"CSSCustomProperty, that is not Houdini Property"),fe.forEach(o),Ga=i(No),ho=n(No,"LI",{});var me=e(ho);Qa=c(me,"the value is parsed as string"),me.forEach(o),No.forEach(o),Za=i(Ls),Cs=n(Ls,"DIV",{class:!0});var tt=e(Cs);tt.forEach(o),Ls.forEach(o),To=i(t),U=n(t,"SECTION",{});var Do=e(U);yo=n(Do,"H3",{});var _e=e(yo);Z=n(_e,"A",{href:!0,id:!0});var Ce=e(Z);sn=c(Ce,"References"),Ce.forEach(o),_e.forEach(o),on=i(Do),_=n(Do,"UL",{});var N=e(_);gs=n(N,"LI",{});var fn=e(gs);an=c(fn,"Specifications "),ss=n(fn,"A",{href:!0,rel:!0});var ge=e(ss);nn=c(ge,"https://www.w3.org/TR/css-typed-om-1/"),ge.forEach(o),fn.forEach(o),en=i(N),ws=n(N,"LI",{});var mn=e(ws);tn=c(mn,"MDN "),os=n(mn,"A",{href:!0,rel:!0});var we=e(os);ln=c(we,"https://developer.mozilla.org/en-US/docs/Web/API/CSS_Typed_OM_API"),we.forEach(o),mn.forEach(o),rn=i(N),P=n(N,"LI",{});var So=e(P);pn=c(So,"caniuse "),Es=n(So,"CODE",{class:!0});var Ee=e(Es);cn=c(Ee,"attributeStyleMap"),Ee.forEach(o),kn=i(So),as=n(So,"A",{href:!0,rel:!0});var Ve=e(as);vn=c(Ve,"https://caniuse.com/mdn-api_element_attributestylemap"),Ve.forEach(o),So.forEach(o),hn=i(N),H=n(N,"LI",{});var xo=e(H);yn=c(xo,"caniuse "),Vs=n(xo,"CODE",{class:!0});var be=e(Vs);un=c(be,"computedStyleMap"),be.forEach(o),dn=i(xo),ns=n(xo,"A",{href:!0,rel:!0});var Me=e(ns);Sn=c(Me,"https://caniuse.com/mdn-api_element_computedstylemap"),Me.forEach(o),xo.forEach(o),N.forEach(o),Do.forEach(o),this.h()},h(){l(S,"href","#css-typed-object-model-typed-om"),l(S,"id","css-typed-object-model-typed-om"),l(ts,"class","code-section"),l(ls,"class","code-section"),l(rs,"class","code-section"),l(is,"class","code-section"),l(j,"href","#computedstylemap"),l(j,"id","computedstylemap"),l(ps,"class","code-section"),l(K,"href","#attributestylemap"),l(K,"id","attributestylemap"),l(cs,"class","code-section"),l(ks,"class","code-section"),l(R,"href","#types-of-cssstylevalue"),l(R,"id","types-of-cssstylevalue"),l($,"href","#create-cssstylevalue"),l($,"id","create-cssstylevalue"),l(vs,"class","code-section"),l(B,"href","#cssimagevalue"),l(B,"id","cssimagevalue"),l(ys,"class","inline"),l(J,"href","#csskeywordvalue"),l(J,"id","csskeywordvalue"),l(us,"class","inline"),l(ds,"class","inline"),l(Ss,"class","code-section"),l(Y,"href","#cssnumericvalue"),l(Y,"id","cssnumericvalue"),l(xs,"class","code-section"),l(W,"href","#cssmathvalue"),l(W,"id","cssmathvalue"),l(fs,"class","code-section"),l(X,"href","#csspositionvalue"),l(X,"id","csspositionvalue"),l(ms,"class","code-section"),l(F,"href","#csstransformvalue"),l(F,"id","csstransformvalue"),l(_s,"class","code-section"),l(G,"href","#cssunparsedvalue"),l(G,"id","cssunparsedvalue"),l(Cs,"class","code-section"),l(Z,"href","#references"),l(Z,"id","references"),l(ss,"href","https://www.w3.org/TR/css-typed-om-1/"),l(ss,"rel","nofollow"),l(os,"href","https://developer.mozilla.org/en-US/docs/Web/API/CSS_Typed_OM_API"),l(os,"rel","nofollow"),l(Es,"class","inline"),l(as,"href","https://caniuse.com/mdn-api_element_attributestylemap"),l(as,"rel","nofollow"),l(Vs,"class","inline"),l(ns,"href","https://caniuse.com/mdn-api_element_computedstylemap"),l(ns,"rel","nofollow")},m(t,k){h(t,v,k),s(v,x),s(x,S),s(S,D),s(v,y),s(v,u),s(u,b),s(b,zo),s(u,jo),s(u,qs),s(qs,Ko),s(v,Ro),s(v,ts),ts.innerHTML=qe,s(v,$o),s(v,Os),s(Os,Us),s(Us,Bo),s(v,Jo),s(v,ls),ls.innerHTML=Oe,s(v,Yo),s(v,Ps),s(Ps,Hs),s(Hs,Wo),s(v,Xo),s(v,rs),rs.innerHTML=Ue,s(v,Fo),s(v,z),s(z,As),s(As,Go),s(z,Qo),s(z,Ns),s(Ns,Zo),s(v,sa),s(v,is),is.innerHTML=Pe,h(t,fo,k),h(t,M,k),s(M,Ds),s(Ds,j),s(j,oa),s(M,aa),s(M,ps),ps.innerHTML=He,h(t,mo,k),h(t,f,k),s(f,zs),s(zs,K),s(K,na),s(f,ea),s(f,js),s(js,Ks),s(Ks,ta),s(f,la),s(f,cs),cs.innerHTML=Ae,s(f,ra),s(f,ks),ks.innerHTML=Ne,h(t,_o,k),h(t,I,k),s(I,Rs),s(Rs,R),s(R,ia),s(I,pa),s(I,d),s(d,$s),s($s,ca),s(d,ka),s(d,Bs),s(Bs,va),s(d,ha),s(d,Js),s(Js,ya),s(d,ua),s(d,Ys),s(Ys,da),s(d,Sa),s(d,Ws),s(Ws,xa),s(d,fa),s(d,Xs),s(Xs,ma),h(t,Co,k),h(t,T,k),s(T,Fs),s(Fs,$),s($,_a),s(T,Ca),s(T,vs),vs.innerHTML=De,h(t,go,k),h(t,L,k),s(L,Gs),s(Gs,B),s(B,ga),s(L,wa),s(L,Qs),s(Qs,hs),s(hs,Ea),s(hs,ys),s(ys,Va),h(t,wo,k),h(t,C,k),s(C,Zs),s(Zs,J),s(J,ba),s(C,Ma),s(C,so),s(so,q),s(q,us),s(us,Ia),s(q,Ta),s(q,ds),s(ds,La),s(q,qa),s(C,Oa),s(C,Ss),Ss.innerHTML=ze,h(t,Eo,k),h(t,g,k),s(g,oo),s(oo,Y),s(Y,Ua),s(g,Pa),s(g,ao),s(ao,no),s(no,Ha),s(g,Aa),s(g,xs),xs.innerHTML=je,h(t,Vo,k),h(t,w,k),s(w,eo),s(eo,W),s(W,Na),s(w,Da),s(w,to),s(to,lo),s(lo,za),s(w,ja),s(w,fs),fs.innerHTML=Ke,h(t,bo,k),h(t,O,k),s(O,ro),s(ro,X),s(X,Ka),s(O,Ra),s(O,ms),ms.innerHTML=Re,h(t,Mo,k),h(t,E,k),s(E,io),s(io,F),s(F,$a),s(E,Ba),s(E,po),s(po,co),s(co,Ja),s(E,Ya),s(E,_s),_s.innerHTML=$e,h(t,Io,k),h(t,V,k),s(V,ko),s(ko,G),s(G,Wa),s(V,Xa),s(V,Q),s(Q,vo),s(vo,Fa),s(Q,Ga),s(Q,ho),s(ho,Qa),s(V,Za),s(V,Cs),Cs.innerHTML=Be,h(t,To,k),h(t,U,k),s(U,yo),s(yo,Z),s(Z,sn),s(U,on),s(U,_),s(_,gs),s(gs,an),s(gs,ss),s(ss,nn),s(_,en),s(_,ws),s(ws,tn),s(ws,os),s(os,ln),s(_,rn),s(_,P),s(P,pn),s(P,Es),s(Es,cn),s(P,kn),s(P,as),s(as,vn),s(_,hn),s(_,H),s(H,yn),s(H,Vs),s(Vs,un),s(H,dn),s(H,ns),s(ns,Sn)},p:St,d(t){t&&o(v),t&&o(fo),t&&o(M),t&&o(mo),t&&o(f),t&&o(_o),t&&o(I),t&&o(Co),t&&o(T),t&&o(go),t&&o(L),t&&o(wo),t&&o(C),t&&o(Eo),t&&o(g),t&&o(Vo),t&&o(w),t&&o(bo),t&&o(O),t&&o(Mo),t&&o(E),t&&o(Io),t&&o(V),t&&o(To),t&&o(U)}}}function _t(es){let v,x;const S=[es[0],Le];let D={$$slots:{default:[mt]},$$scope:{ctx:es}};for(let y=0;y<S.length;y+=1)D=_n(D,S[y]);return v=new xt({props:D}),{c(){pt(v.$$.fragment)},l(y){ct(v.$$.fragment,y)},m(y,u){kt(v,y,u),x=!0},p(y,[u]){const b=u&1?vt(S,[u&1&&Ie(y[0]),u&0&&Ie(Le)]):{};u&2&&(b.$$scope={dirty:u,ctx:y}),v.$set(b)},i(y){x||(ht(v.$$.fragment,y),x=!0)},o(y){yt(v.$$.fragment,y),x=!1},d(y){ut(v,y)}}}const Le={title:"The CSS Podcast: 027: Houdini Series: Typed Object Model",tags:["css houdini","The CSS Podcast"],description:"CSS Typed Object Model (Typed OM)CSS Typed OM API allow manipulating CSS styles through a typed JS representation rather than a simple string.Provide performance win. Browser understands the structured JS representation and no longer needs to parse CSS string from scratch....",tableOfContents:[{link:"css-typed-object-model-typed-om",title:"CSS Typed Object Model (Typed OM)"},{link:"computedstylemap",title:"computedStyleMap"},{link:"attributestylemap",title:"attributeStyleMap"},{link:"types-of-cssstylevalue",title:"Types of CSSStyleValue",nested:[{link:"create-cssstylevalue",title:"create CSSStyleValue"},{link:"cssimagevalue",title:"CSSImageValue"},{link:"csskeywordvalue",title:"CSSKeywordValue"},{link:"cssnumericvalue",title:"CSSNumericValue"},{link:"cssmathvalue",title:"CSSMathValue"},{link:"csspositionvalue",title:"CSSPositionValue"},{link:"csstransformvalue",title:"CSSTransformValue"},{link:"cssunparsedvalue",title:"CSSUnparsedValue"},{link:"references",title:"References"}]}]};function Ct(es,v,x){return dt("blog",{image:ft}),es.$$set=S=>{x(0,v=_n(_n({},v),Te(S)))},v=Te(v),[v]}class It extends lt{constructor(v){super();rt(this,v,Ct,_t,it,{})}}export{It as default,Le as metadata};
