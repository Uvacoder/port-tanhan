import{S as Xo,i as st,s as at,C as so,w as ot,x as tt,y as et,z as nt,A as Zo,q as lt,o as rt,B as it,r as pt,Y as zo,e as t,t as l,k as p,c as e,a as n,h as r,d as o,m as c,b as x,g as k,H as s,J as ct}from"../../chunks/vendor-9710682b.js";import{B as kt}from"../../chunks/BlogLayout-9a08402e.js";import{_ as ht}from"../../chunks/twitter-card-image-a57df29d.js";import"../../chunks/stores-f9c97213.js";import"../../chunks/TableOfContent-2fa6a472.js";/* empty css                                */function vt($){let h,m,w,_,y,d,f,as,Js,Ys,os,Fs,Cs,H,Ks,Ss,v,ts,es,Qs,Xs,ns,ls,sa,aa,rs,is,oa,ta,ps,cs,ea,na,ks,hs,la,ra,vs,ys,ia,pa,us,ds,ca,ka,fs,xs,ha,va,ms,ws,ya,js,W,ua,As,M,da,Us,g,Go=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// worklet.js</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// 1\uFE0F\u20E3 define the worklet class</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CheckerboardPainter</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">paint</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> geometry</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> property</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> args) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...    </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// 2\uFE0F\u20E3 register the worklet: registerPaint(name, workletClass)</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">registerPaint</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;checkerboard&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> CheckerboardPaint);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ---------------------</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// main.js</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// 3\uFE0F\u20E3 add worklet</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">paintWorklet</span><span style="color: var(--shiki-token-function)">.addModule</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;worklet.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// main.css</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// 4\uFE0F\u20E3 use the paint worklet</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">li &#123; </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  background</span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">image</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">paint</span><span style="color: var(--shiki-color-text)">(checkerboard);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  border</span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">image</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">paint</span><span style="color: var(--shiki-color-text)">(checkerboard);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ds,q,fa,Ts,E,O,xa,P,V,ma,Z,wa,_a,z,Ea,B,ba,ga,G,Pa,I,_s,Ia,La,L,N,Ca,Sa,R,ja,Aa,J,Ua,C,Es,Da,Ta,bs,$a,$s,S,No=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// worklet.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">SuperUnderlinePainter</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// return an array of input properties</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">static</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">get</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">inputProperties</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&#39;--underlineWidth&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;--underlineColor&#39;</span><span style="color: var(--shiki-color-text)">];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">paint</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> geometry</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> properties) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// get the property value from CSS</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">underlineWidth</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">properties</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;--underlineWidth&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">underlineColor</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">properties</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;--underlineColor&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// use them to paint</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.fillStyle </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> underlineColor;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-token-function)">.fillRect</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> underlineWidth);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// main.css</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">li &#123; </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">--</span><span style="color: var(--shiki-color-text)">underlineWidth</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">--</span><span style="color: var(--shiki-color-text)">underlineColor</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> red;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  background</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">paint</span><span style="color: var(--shiki-color-text)">(super</span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">underline);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Hs,Y,F,Ha,j,gs,Wa,Ma,Ps,qa,Ws,A,Ro=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// worklet.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">SuperUnderlinePainter</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// return an array of input argument types</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">static</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">get</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">inputArguments</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#39;&lt;number&gt;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// underline width</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-string-expression)">&#39;&lt;color&gt;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// underline color</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    ];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">paint</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> geometry</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> properties</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> args) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// get the argument value</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">underlineWidth</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">underlineColor</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> args;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// use them to paint</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.fillStyle </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">underlineColor</span><span style="color: var(--shiki-color-text)">.cssText;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-token-function)">.fillRect</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">underlineWidth</span><span style="color: var(--shiki-color-text)">.value);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// main.css</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">li &#123; </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  background</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">paint</span><span style="color: var(--shiki-color-text)">(super</span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">underline</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> red);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ms,U,Jo=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// worklet.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Painter</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">/* </span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">    define if alphatransparency is allowed</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">  */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">static</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">get</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">contextOptions</span><span style="color: var(--shiki-color-text)">() &#123; </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123; alpha</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> &#125;; </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,qs,b,D,Oa,K,Va,Za,za,Is,Ba,Ga,Ls,T,Na,Os,Q,Ra;return{c(){h=t("p"),m=l("worklet"),w=p(),_=t("p"),y=l("paint worklet"),d=p(),f=t("ul"),as=t("li"),Js=l("a.k.a CSS Paint API"),Ys=p(),os=t("li"),Fs=l("allow developers to define canvas like custom painting functions, that can be used directly in CSS as background, border, ..."),Cs=p(),H=t("p"),Ks=l("worklet"),Ss=p(),v=t("ul"),ts=t("li"),es=t("p"),Qs=l("self-contained, can be run off the main thread"),Xs=p(),ns=t("li"),ls=t("p"),sa=l("all worklets are workers, worklet is more specific workers"),aa=p(),rs=t("li"),is=t("p"),oa=l("worklet have a tight limited contract between the script and the application that created it"),ta=p(),ps=t("li"),cs=t("p"),ea=l("limited in the hopes of doing something powerful"),na=p(),ks=t("li"),hs=t("p"),la=l("worklet scripts are always invoked in their own sandbox, with their allocated computing power, allow them to be created and destroyed very quickly"),ra=p(),vs=t("li"),ys=t("p"),ia=l("secure, served and run from a https server"),pa=p(),us=t("li"),ds=t("p"),ca=l("will run off the main thread"),ka=p(),fs=t("li"),xs=t("p"),ha=l("browser will forward the request found in the CSS for background paint job from a custom houdini worklet, worklet will run in it's own thread, and will return a painted canvas for the browser to use"),va=p(),ms=t("li"),ws=t("p"),ya=l("secure, fast, off-the-main thread"),js=p(),W=t("p"),ua=l("gotcha: if run locally, need to serve from a local server"),As=p(),M=t("p"),da=l("registerPaint(name, workletClass)"),Us=p(),g=t("div"),Ds=p(),q=t("p"),fa=l("paint(ctx, geometry, property, arguments)"),Ts=p(),E=t("ul"),O=t("li"),xa=l("ctx"),P=t("ul"),V=t("li"),ma=l("akin to the canvas context, "),Z=t("code"),wa=l("canvas.getContext('2d')"),_a=p(),z=t("li"),Ea=l("same full API as canvas context, "),B=t("code"),ba=l("ctx.fill()"),ga=p(),G=t("li"),Pa=l("geometry"),I=t("ul"),_s=t("li"),Ia=l("height and width of your element"),La=p(),L=t("li"),N=t("code"),Ca=l("geometry.height"),Sa=l(", "),R=t("code"),ja=l("geometry.width"),Aa=p(),J=t("li"),Ua=l("property"),C=t("ul"),Es=t("li"),Da=l("pull in input properties, custom properties in CSS, and used them as values to customise the worklet"),Ta=p(),bs=t("li"),$a=l("can use together with CSS Properties and Values API"),$s=p(),S=t("div"),Hs=p(),Y=t("ul"),F=t("li"),Ha=l("arguments"),j=t("ul"),gs=t("li"),Wa=l("don't have to share the same property if using the multiple paint worklet on the same element"),Ma=p(),Ps=t("li"),qa=l("can give different argument for each of the paint worklet"),Ws=p(),A=t("div"),Ms=p(),U=t("div"),qs=p(),b=t("ul"),D=t("li"),Oa=l("take note if using "),K=t("code"),Va=l("Math.random()"),Za=l(" within paint() to paint a random background"),za=p(),Is=t("li"),Ba=l("background will change when you are typing, or resizing, because it repaints"),Ga=p(),Ls=t("li"),T=t("a"),Na=l("https://jakearchibald.com/2020/css-paint-predictably-random/"),Os=p(),Q=t("p"),Ra=l("PIZZA NIGHT"),this.h()},l(a){h=e(a,"P",{});var i=n(h);m=r(i,"worklet"),i.forEach(o),w=c(a),_=e(a,"P",{});var ao=n(_);y=r(ao,"paint worklet"),ao.forEach(o),d=c(a),f=e(a,"UL",{});var Vs=n(f);as=e(Vs,"LI",{});var oo=n(as);Js=r(oo,"a.k.a CSS Paint API"),oo.forEach(o),Ys=c(Vs),os=e(Vs,"LI",{});var to=n(os);Fs=r(to,"allow developers to define canvas like custom painting functions, that can be used directly in CSS as background, border, ..."),to.forEach(o),Vs.forEach(o),Cs=c(a),H=e(a,"P",{});var eo=n(H);Ks=r(eo,"worklet"),eo.forEach(o),Ss=c(a),v=e(a,"UL",{});var u=n(v);ts=e(u,"LI",{});var no=n(ts);es=e(no,"P",{});var lo=n(es);Qs=r(lo,"self-contained, can be run off the main thread"),lo.forEach(o),no.forEach(o),Xs=c(u),ns=e(u,"LI",{});var ro=n(ns);ls=e(ro,"P",{});var io=n(ls);sa=r(io,"all worklets are workers, worklet is more specific workers"),io.forEach(o),ro.forEach(o),aa=c(u),rs=e(u,"LI",{});var po=n(rs);is=e(po,"P",{});var co=n(is);oa=r(co,"worklet have a tight limited contract between the script and the application that created it"),co.forEach(o),po.forEach(o),ta=c(u),ps=e(u,"LI",{});var ko=n(ps);cs=e(ko,"P",{});var ho=n(cs);ea=r(ho,"limited in the hopes of doing something powerful"),ho.forEach(o),ko.forEach(o),na=c(u),ks=e(u,"LI",{});var vo=n(ks);hs=e(vo,"P",{});var yo=n(hs);la=r(yo,"worklet scripts are always invoked in their own sandbox, with their allocated computing power, allow them to be created and destroyed very quickly"),yo.forEach(o),vo.forEach(o),ra=c(u),vs=e(u,"LI",{});var uo=n(vs);ys=e(uo,"P",{});var fo=n(ys);ia=r(fo,"secure, served and run from a https server"),fo.forEach(o),uo.forEach(o),pa=c(u),us=e(u,"LI",{});var xo=n(us);ds=e(xo,"P",{});var mo=n(ds);ca=r(mo,"will run off the main thread"),mo.forEach(o),xo.forEach(o),ka=c(u),fs=e(u,"LI",{});var wo=n(fs);xs=e(wo,"P",{});var _o=n(xs);ha=r(_o,"browser will forward the request found in the CSS for background paint job from a custom houdini worklet, worklet will run in it's own thread, and will return a painted canvas for the browser to use"),_o.forEach(o),wo.forEach(o),va=c(u),ms=e(u,"LI",{});var Eo=n(ms);ws=e(Eo,"P",{});var bo=n(ws);ya=r(bo,"secure, fast, off-the-main thread"),bo.forEach(o),Eo.forEach(o),u.forEach(o),js=c(a),W=e(a,"P",{});var go=n(W);ua=r(go,"gotcha: if run locally, need to serve from a local server"),go.forEach(o),As=c(a),M=e(a,"P",{});var Po=n(M);da=r(Po,"registerPaint(name, workletClass)"),Po.forEach(o),Us=c(a),g=e(a,"DIV",{class:!0});var Yo=n(g);Yo.forEach(o),Ds=c(a),q=e(a,"P",{});var Io=n(q);fa=r(Io,"paint(ctx, geometry, property, arguments)"),Io.forEach(o),Ts=c(a),E=e(a,"UL",{});var X=n(E);O=e(X,"LI",{});var Ja=n(O);xa=r(Ja,"ctx"),P=e(Ja,"UL",{});var Zs=n(P);V=e(Zs,"LI",{});var Ya=n(V);ma=r(Ya,"akin to the canvas context, "),Z=e(Ya,"CODE",{class:!0});var Lo=n(Z);wa=r(Lo,"canvas.getContext('2d')"),Lo.forEach(o),Ya.forEach(o),_a=c(Zs),z=e(Zs,"LI",{});var Fa=n(z);Ea=r(Fa,"same full API as canvas context, "),B=e(Fa,"CODE",{class:!0});var Co=n(B);ba=r(Co,"ctx.fill()"),Co.forEach(o),Fa.forEach(o),Zs.forEach(o),Ja.forEach(o),ga=c(X),G=e(X,"LI",{});var Ka=n(G);Pa=r(Ka,"geometry"),I=e(Ka,"UL",{});var zs=n(I);_s=e(zs,"LI",{});var So=n(_s);Ia=r(So,"height and width of your element"),So.forEach(o),La=c(zs),L=e(zs,"LI",{});var Bs=n(L);N=e(Bs,"CODE",{class:!0});var jo=n(N);Ca=r(jo,"geometry.height"),jo.forEach(o),Sa=r(Bs,", "),R=e(Bs,"CODE",{class:!0});var Ao=n(R);ja=r(Ao,"geometry.width"),Ao.forEach(o),Bs.forEach(o),zs.forEach(o),Ka.forEach(o),Aa=c(X),J=e(X,"LI",{});var Qa=n(J);Ua=r(Qa,"property"),C=e(Qa,"UL",{});var Gs=n(C);Es=e(Gs,"LI",{});var Uo=n(Es);Da=r(Uo,"pull in input properties, custom properties in CSS, and used them as values to customise the worklet"),Uo.forEach(o),Ta=c(Gs),bs=e(Gs,"LI",{});var Do=n(bs);$a=r(Do,"can use together with CSS Properties and Values API"),Do.forEach(o),Gs.forEach(o),Qa.forEach(o),X.forEach(o),$s=c(a),S=e(a,"DIV",{class:!0});var Fo=n(S);Fo.forEach(o),Hs=c(a),Y=e(a,"UL",{});var To=n(Y);F=e(To,"LI",{});var Xa=n(F);Ha=r(Xa,"arguments"),j=e(Xa,"UL",{});var Ns=n(j);gs=e(Ns,"LI",{});var $o=n(gs);Wa=r($o,"don't have to share the same property if using the multiple paint worklet on the same element"),$o.forEach(o),Ma=c(Ns),Ps=e(Ns,"LI",{});var Ho=n(Ps);qa=r(Ho,"can give different argument for each of the paint worklet"),Ho.forEach(o),Ns.forEach(o),Xa.forEach(o),To.forEach(o),Ws=c(a),A=e(a,"DIV",{class:!0});var Ko=n(A);Ko.forEach(o),Ms=c(a),U=e(a,"DIV",{class:!0});var Qo=n(U);Qo.forEach(o),qs=c(a),b=e(a,"UL",{});var ss=n(b);D=e(ss,"LI",{});var Rs=n(D);Oa=r(Rs,"take note if using "),K=e(Rs,"CODE",{class:!0});var Wo=n(K);Va=r(Wo,"Math.random()"),Wo.forEach(o),Za=r(Rs," within paint() to paint a random background"),Rs.forEach(o),za=c(ss),Is=e(ss,"LI",{});var Mo=n(Is);Ba=r(Mo,"background will change when you are typing, or resizing, because it repaints"),Mo.forEach(o),Ga=c(ss),Ls=e(ss,"LI",{});var qo=n(Ls);T=e(qo,"A",{href:!0,rel:!0});var Oo=n(T);Na=r(Oo,"https://jakearchibald.com/2020/css-paint-predictably-random/"),Oo.forEach(o),qo.forEach(o),ss.forEach(o),Os=c(a),Q=e(a,"P",{});var Vo=n(Q);Ra=r(Vo,"PIZZA NIGHT"),Vo.forEach(o),this.h()},h(){x(g,"class","code-section"),x(Z,"class","inline"),x(B,"class","inline"),x(N,"class","inline"),x(R,"class","inline"),x(S,"class","code-section"),x(A,"class","code-section"),x(U,"class","code-section"),x(K,"class","inline"),x(T,"href","https://jakearchibald.com/2020/css-paint-predictably-random/"),x(T,"rel","nofollow")},m(a,i){k(a,h,i),s(h,m),k(a,w,i),k(a,_,i),s(_,y),k(a,d,i),k(a,f,i),s(f,as),s(as,Js),s(f,Ys),s(f,os),s(os,Fs),k(a,Cs,i),k(a,H,i),s(H,Ks),k(a,Ss,i),k(a,v,i),s(v,ts),s(ts,es),s(es,Qs),s(v,Xs),s(v,ns),s(ns,ls),s(ls,sa),s(v,aa),s(v,rs),s(rs,is),s(is,oa),s(v,ta),s(v,ps),s(ps,cs),s(cs,ea),s(v,na),s(v,ks),s(ks,hs),s(hs,la),s(v,ra),s(v,vs),s(vs,ys),s(ys,ia),s(v,pa),s(v,us),s(us,ds),s(ds,ca),s(v,ka),s(v,fs),s(fs,xs),s(xs,ha),s(v,va),s(v,ms),s(ms,ws),s(ws,ya),k(a,js,i),k(a,W,i),s(W,ua),k(a,As,i),k(a,M,i),s(M,da),k(a,Us,i),k(a,g,i),g.innerHTML=Go,k(a,Ds,i),k(a,q,i),s(q,fa),k(a,Ts,i),k(a,E,i),s(E,O),s(O,xa),s(O,P),s(P,V),s(V,ma),s(V,Z),s(Z,wa),s(P,_a),s(P,z),s(z,Ea),s(z,B),s(B,ba),s(E,ga),s(E,G),s(G,Pa),s(G,I),s(I,_s),s(_s,Ia),s(I,La),s(I,L),s(L,N),s(N,Ca),s(L,Sa),s(L,R),s(R,ja),s(E,Aa),s(E,J),s(J,Ua),s(J,C),s(C,Es),s(Es,Da),s(C,Ta),s(C,bs),s(bs,$a),k(a,$s,i),k(a,S,i),S.innerHTML=No,k(a,Hs,i),k(a,Y,i),s(Y,F),s(F,Ha),s(F,j),s(j,gs),s(gs,Wa),s(j,Ma),s(j,Ps),s(Ps,qa),k(a,Ws,i),k(a,A,i),A.innerHTML=Ro,k(a,Ms,i),k(a,U,i),U.innerHTML=Jo,k(a,qs,i),k(a,b,i),s(b,D),s(D,Oa),s(D,K),s(K,Va),s(D,Za),s(b,za),s(b,Is),s(Is,Ba),s(b,Ga),s(b,Ls),s(Ls,T),s(T,Na),k(a,Os,i),k(a,Q,i),s(Q,Ra)},p:ct,d(a){a&&o(h),a&&o(w),a&&o(_),a&&o(d),a&&o(f),a&&o(Cs),a&&o(H),a&&o(Ss),a&&o(v),a&&o(js),a&&o(W),a&&o(As),a&&o(M),a&&o(Us),a&&o(g),a&&o(Ds),a&&o(q),a&&o(Ts),a&&o(E),a&&o($s),a&&o(S),a&&o(Hs),a&&o(Y),a&&o(Ws),a&&o(A),a&&o(Ms),a&&o(U),a&&o(qs),a&&o(b),a&&o(Os),a&&o(Q)}}}function yt($){let h,m;const w=[$[0],Bo];let _={$$slots:{default:[vt]},$$scope:{ctx:$}};for(let y=0;y<w.length;y+=1)_=so(_,w[y]);return h=new kt({props:_}),{c(){ot(h.$$.fragment)},l(y){tt(h.$$.fragment,y)},m(y,d){et(h,y,d),m=!0},p(y,[d]){const f=d&1?nt(w,[d&1&&Zo(y[0]),d&0&&Zo(Bo)]):{};d&2&&(f.$$scope={dirty:d,ctx:y}),h.$set(f)},i(y){m||(lt(h.$$.fragment,y),m=!0)},o(y){rt(h.$$.fragment,y),m=!1},d(y){it(h,y)}}}const Bo={title:"The CSS Podcast: 028: Houdini Series: Paint",tags:["css houdini","The CSS Podcast"],description:"workletpaint workleta.k.a CSS Paint APIallow developers to define canvas like custom painting functions, that can be used directly in CSS as background, border, ...workletself-contained, can be run off the main thread..."};function ut($,h,m){return pt("blog",{image:ht}),$.$$set=w=>{m(0,h=so(so({},h),zo(w)))},h=zo(h),[h]}class Et extends Xo{constructor(h){super();st(this,h,ut,yt,at,{})}}export{Et as default,Bo as metadata};
