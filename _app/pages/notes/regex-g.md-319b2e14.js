import{S as Bs,i as Ms,s as Vs,C as hs,w as Ls,x as Os,y as Rs,z as Ws,A as $s,q as Ds,o as Is,B as qs,r as zs,R as Ts,k as d,e as l,t as p,m as x,c as i,a as c,h as k,d as a,b as h,g as V,F as s,O as Fs}from"../../chunks/vendor-569a3c5c.js";import{B as Gs}from"../../chunks/BlogLayout-17b76cb2.js";import{T as Us}from"../../chunks/TableOfContent-dbc18cb8.js";import{_ as Js}from"../../chunks/twitter-card-image-a57df29d.js";import"../../chunks/stores-ee936cd4.js";import"../../chunks/WebMentions-968cc380.js";/* empty css                                */function Ks(E){let n,v,e,g,t,y,f,W,z,_,F,$,G,U,J,u,K,T,Q,X,C,Y,Z,L,Hs=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">sentence</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;car boats car&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)"> /car/</span><span style="color: var(--shiki-token-keyword)">g</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-token-function)">.test</span><span style="color: var(--shiki-color-text)">(sentence); </span><span style="color: var(--shiki-token-comment)">// true</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-token-function)">.test</span><span style="color: var(--shiki-color-text)">(sentence); </span><span style="color: var(--shiki-token-comment)">// true</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-token-function)">.test</span><span style="color: var(--shiki-color-text)">(sentence); </span><span style="color: var(--shiki-token-comment)">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-token-function)">.exec</span><span style="color: var(--shiki-color-text)">(sentence); </span><span style="color: var(--shiki-token-comment)">// [ &#39;car&#39;, index: 0, input: &#39;car boats car&#39; ]</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-token-function)">.exec</span><span style="color: var(--shiki-color-text)">(sentence); </span><span style="color: var(--shiki-token-comment)">// [ &#39;car&#39;, index: 10, input: &#39;car boats car&#39; ]</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-token-function)">.exec</span><span style="color: var(--shiki-color-text)">(sentence); </span><span style="color: var(--shiki-token-comment)">// null</span></span></code></pre>`,ss,I,es,ts,O,Ns=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)"> /car/</span><span style="color: var(--shiki-token-keyword)">g</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> match;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">while</span><span style="color: var(--shiki-color-text)"> ((match </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-token-function)">.exec</span><span style="color: var(--shiki-color-text)">(sentence))) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">match</span><span style="color: var(--shiki-color-text)">.index);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,as,R,q,ns,os,rs,D,Ss=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">sentence</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;car boats car&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)"> /car/</span><span style="color: var(--shiki-token-keyword)">g</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">/car/</span><span style="color: var(--shiki-token-keyword)">g</span><span style="color: var(--shiki-token-function)">.exec</span><span style="color: var(--shiki-color-text)">(sentence); </span><span style="color: var(--shiki-token-comment)">// [ &#39;car&#39;, index: 0, input: &#39;car boats car&#39; ]</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">/car/</span><span style="color: var(--shiki-token-keyword)">g</span><span style="color: var(--shiki-token-function)">.exec</span><span style="color: var(--shiki-color-text)">(sentence); </span><span style="color: var(--shiki-token-comment)">// [ &#39;car&#39;, index: 0, input: &#39;car boats car&#39; ]</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">/car/</span><span style="color: var(--shiki-token-keyword)">g</span><span style="color: var(--shiki-token-function)">.exec</span><span style="color: var(--shiki-color-text)">(sentence); </span><span style="color: var(--shiki-token-comment)">// [ &#39;car&#39;, index: 0, input: &#39;car boats car&#39; ]</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">/car/</span><span style="color: var(--shiki-token-keyword)">g</span><span style="color: var(--shiki-token-function)">.exec</span><span style="color: var(--shiki-color-text)">(sentence); </span><span style="color: var(--shiki-token-comment)">// [ &#39;car&#39;, index: 0, input: &#39;car boats car&#39; ]</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`,A,m,H,w,ls,is,N,S,b,cs,P;return n=new Us({props:{data:[{link:"test-and-exec-with-g",title:"test and exec with  `g`"},{link:"related-links",title:"Related Links"}]}}),{c(){Ls(n.$$.fragment),v=d(),e=l("section"),g=l("h2"),t=l("a"),y=p("test and exec with "),f=l("code"),W=p("g"),z=d(),_=l("p"),F=p("When having a Regex with "),$=l("code"),G=p("g"),U=p(" (global) flag, the regex instance will store some internal state about the last match."),J=d(),u=l("p"),K=p("This happens with "),T=l("code"),Q=p("regex.test()"),X=p(" and "),C=l("code"),Y=p("regex.exec()"),Z=d(),L=l("div"),ss=d(),I=l("p"),es=p("This is useful for the following match + while loop pattern:"),ts=d(),O=l("div"),as=d(),R=l("p"),q=l("strong"),ns=p("Note the state is stored in the regex instance"),os=p(", using a different regex instance will not have this behavior:"),rs=d(),D=l("div"),A=d(),m=l("section"),H=l("h2"),w=l("a"),ls=p("Related Links"),is=d(),N=l("ul"),S=l("li"),b=l("a"),cs=p("https://stackoverflow.com/questions/15276873/is-javascript-test-saving-state-in-the-regex"),this.h()},l(r){Os(n.$$.fragment,r),v=x(r),e=i(r,"SECTION",{});var o=c(e);g=i(o,"H2",{});var vs=c(g);t=i(vs,"A",{href:!0,id:!0});var ps=c(t);y=k(ps,"test and exec with "),f=i(ps,"CODE",{class:!0});var ys=c(f);W=k(ys,"g"),ys.forEach(a),ps.forEach(a),vs.forEach(a),z=x(o),_=i(o,"P",{});var B=c(_);F=k(B,"When having a Regex with "),$=i(B,"CODE",{class:!0});var ds=c($);G=k(ds,"g"),ds.forEach(a),U=k(B," (global) flag, the regex instance will store some internal state about the last match."),B.forEach(a),J=x(o),u=i(o,"P",{});var j=c(u);K=k(j,"This happens with "),T=i(j,"CODE",{class:!0});var xs=c(T);Q=k(xs,"regex.test()"),xs.forEach(a),X=k(j," and "),C=i(j,"CODE",{class:!0});var gs=c(C);Y=k(gs,"regex.exec()"),gs.forEach(a),j.forEach(a),Z=x(o),L=i(o,"DIV",{class:!0});var js=c(L);js.forEach(a),ss=x(o),I=i(o,"P",{});var fs=c(I);es=k(fs,"This is useful for the following match + while loop pattern:"),fs.forEach(a),ts=x(o),O=i(o,"DIV",{class:!0});var As=c(O);As.forEach(a),as=x(o),R=i(o,"P",{});var ks=c(R);q=i(ks,"STRONG",{});var us=c(q);ns=k(us,"Note the state is stored in the regex instance"),us.forEach(a),os=k(ks,", using a different regex instance will not have this behavior:"),ks.forEach(a),rs=x(o),D=i(o,"DIV",{class:!0});var Ps=c(D);Ps.forEach(a),o.forEach(a),A=x(r),m=i(r,"SECTION",{});var M=c(m);H=i(M,"H2",{});var ms=c(H);w=i(ms,"A",{href:!0,id:!0});var _s=c(w);ls=k(_s,"Related Links"),_s.forEach(a),ms.forEach(a),is=x(M),N=i(M,"UL",{});var ws=c(N);S=i(ws,"LI",{});var bs=c(S);b=i(bs,"A",{href:!0,rel:!0});var Es=c(b);cs=k(Es,"https://stackoverflow.com/questions/15276873/is-javascript-test-saving-state-in-the-regex"),Es.forEach(a),bs.forEach(a),ws.forEach(a),M.forEach(a),this.h()},h(){h(f,"class","inline"),h(t,"href","#test-and-exec-with-g"),h(t,"id","test-and-exec-with-g"),h($,"class","inline"),h(T,"class","inline"),h(C,"class","inline"),h(L,"class","code-section"),h(O,"class","code-section"),h(D,"class","code-section"),h(w,"href","#related-links"),h(w,"id","related-links"),h(b,"href","https://stackoverflow.com/questions/15276873/is-javascript-test-saving-state-in-the-regex"),h(b,"rel","nofollow")},m(r,o){Rs(n,r,o),V(r,v,o),V(r,e,o),s(e,g),s(g,t),s(t,y),s(t,f),s(f,W),s(e,z),s(e,_),s(_,F),s(_,$),s($,G),s(_,U),s(e,J),s(e,u),s(u,K),s(u,T),s(T,Q),s(u,X),s(u,C),s(C,Y),s(e,Z),s(e,L),L.innerHTML=Hs,s(e,ss),s(e,I),s(I,es),s(e,ts),s(e,O),O.innerHTML=Ns,s(e,as),s(e,R),s(R,q),s(q,ns),s(R,os),s(e,rs),s(e,D),D.innerHTML=Ss,V(r,A,o),V(r,m,o),s(m,H),s(H,w),s(w,ls),s(m,is),s(m,N),s(N,S),s(S,b),s(b,cs),P=!0},p:Fs,i(r){P||(Ds(n.$$.fragment,r),P=!0)},o(r){Is(n.$$.fragment,r),P=!1},d(r){qs(n,r),r&&a(v),r&&a(e),r&&a(A),r&&a(m)}}}function Qs(E){let n,v;const e=[E[0],Cs];let g={$$slots:{default:[Ks]},$$scope:{ctx:E}};for(let t=0;t<e.length;t+=1)g=hs(g,e[t]);return n=new Gs({props:g}),{c(){Ls(n.$$.fragment)},l(t){Os(n.$$.fragment,t)},m(t,y){Rs(n,t,y),v=!0},p(t,[y]){const f=y&1?Ws(e,[y&1&&$s(t[0]),y&0&&$s(Cs)]):{};y&2&&(f.$$scope={dirty:y,ctx:t}),n.$set(f)},i(t){v||(Ds(n.$$.fragment,t),v=!0)},o(t){Is(n.$$.fragment,t),v=!1},d(t){qs(n,t)}}}const Cs={title:"'g' flag in regex",tags:["regex"],description:"test and exec with `g`When having a Regex with `g` (global) flag, the regex instance will store some internal state about the last match.This happens with `regex.test()` and `regex.exec()`This is useful for the following match + while loop pattern:..."};function Xs(E,n,v){return zs("blog",{image:Js}),E.$$set=e=>{v(0,n=hs(hs({},n),Ts(e)))},n=Ts(n),[n]}class oe extends Bs{constructor(n){super();Ms(this,n,Xs,Qs,Vs,{})}}export{oe as default,Cs as metadata};
