import{S as Ds,i as Hs,s as Is,C as cs,w as qs,x as Ns,y as Ss,z as js,A as ws,q as As,o as Ps,B as Bs,r as Ms,Y as Es,e as n,t as c,k as d,c as o,a as r,h as p,d as a,m as x,b as h,g as is,H as s,J as Vs}from"../../chunks/vendor-da4388d4.js";import{B as Ws}from"../../chunks/BlogLayout-14cfab6f.js";import{_ as zs}from"../../chunks/twitter-card-image-a57df29d.js";import"../../chunks/stores-1fad7c36.js";import"../../chunks/ldjson-b0805387.js";/* empty css                                */function Gs(E){let e,k,i,f,t,v,b,m,M,T,V,W,z,g,G,C,J,U,L,Y,F,$,Ts=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">sentence</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;car boats car&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)"> /car/</span><span style="color: var(--shiki-token-keyword)">g</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-token-function)">.test</span><span style="color: var(--shiki-color-text)">(sentence); </span><span style="color: var(--shiki-token-comment)">// true</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-token-function)">.test</span><span style="color: var(--shiki-color-text)">(sentence); </span><span style="color: var(--shiki-token-comment)">// true</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-token-function)">.test</span><span style="color: var(--shiki-color-text)">(sentence); </span><span style="color: var(--shiki-token-comment)">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-token-function)">.exec</span><span style="color: var(--shiki-color-text)">(sentence); </span><span style="color: var(--shiki-token-comment)">// [ &#39;car&#39;, index: 0, input: &#39;car boats car&#39; ]</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-token-function)">.exec</span><span style="color: var(--shiki-color-text)">(sentence); </span><span style="color: var(--shiki-token-comment)">// [ &#39;car&#39;, index: 10, input: &#39;car boats car&#39; ]</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-token-function)">.exec</span><span style="color: var(--shiki-color-text)">(sentence); </span><span style="color: var(--shiki-token-comment)">// null</span></span></code></pre>`,K,H,Q,X,O,Cs=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)"> /car/</span><span style="color: var(--shiki-token-keyword)">g</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> match;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">while</span><span style="color: var(--shiki-color-text)"> ((match </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-token-function)">.exec</span><span style="color: var(--shiki-color-text)">(sentence))) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">match</span><span style="color: var(--shiki-color-text)">.index);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Z,R,I,ss,es,as,D,Ls=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">sentence</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;car boats car&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">regex</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)"> /car/</span><span style="color: var(--shiki-token-keyword)">g</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">/car/</span><span style="color: var(--shiki-token-keyword)">g</span><span style="color: var(--shiki-token-function)">.exec</span><span style="color: var(--shiki-color-text)">(sentence); </span><span style="color: var(--shiki-token-comment)">// [ &#39;car&#39;, index: 0, input: &#39;car boats car&#39; ]</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">/car/</span><span style="color: var(--shiki-token-keyword)">g</span><span style="color: var(--shiki-token-function)">.exec</span><span style="color: var(--shiki-color-text)">(sentence); </span><span style="color: var(--shiki-token-comment)">// [ &#39;car&#39;, index: 0, input: &#39;car boats car&#39; ]</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">/car/</span><span style="color: var(--shiki-token-keyword)">g</span><span style="color: var(--shiki-token-function)">.exec</span><span style="color: var(--shiki-color-text)">(sentence); </span><span style="color: var(--shiki-token-comment)">// [ &#39;car&#39;, index: 0, input: &#39;car boats car&#39; ]</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">/car/</span><span style="color: var(--shiki-token-keyword)">g</span><span style="color: var(--shiki-token-function)">.exec</span><span style="color: var(--shiki-color-text)">(sentence); </span><span style="color: var(--shiki-token-comment)">// [ &#39;car&#39;, index: 0, input: &#39;car boats car&#39; ]</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`,A,u,q,_,ts,ns,N,S,w,os;return{c(){e=n("section"),k=n("h2"),i=n("a"),f=c("test and exec with "),t=n("code"),v=c("g"),b=d(),m=n("p"),M=c("When having a Regex with "),T=n("code"),V=c("g"),W=c(" (global) flag, the regex instance will store some internal state about the last match."),z=d(),g=n("p"),G=c("This happens with "),C=n("code"),J=c("regex.test()"),U=c(" and "),L=n("code"),Y=c("regex.exec()"),F=d(),$=n("div"),K=d(),H=n("p"),Q=c("This is useful for the following match + while loop pattern:"),X=d(),O=n("div"),Z=d(),R=n("p"),I=n("strong"),ss=c("Note the state is stored in the regex instance"),es=c(", using a different regex instance will not have this behavior:"),as=d(),D=n("div"),A=d(),u=n("section"),q=n("h2"),_=n("a"),ts=c("Related Links"),ns=d(),N=n("ul"),S=n("li"),w=n("a"),os=c("https://stackoverflow.com/questions/15276873/is-javascript-test-saving-state-in-the-regex"),this.h()},l(y){e=o(y,"SECTION",{});var l=r(e);k=o(l,"H2",{});var ps=r(k);i=o(ps,"A",{href:!0,id:!0});var rs=r(i);f=p(rs,"test and exec with "),t=o(rs,"CODE",{class:!0});var hs=r(t);v=p(hs,"g"),hs.forEach(a),rs.forEach(a),ps.forEach(a),b=x(l),m=o(l,"P",{});var P=r(m);M=p(P,"When having a Regex with "),T=o(P,"CODE",{class:!0});var ks=r(T);V=p(ks,"g"),ks.forEach(a),W=p(P," (global) flag, the regex instance will store some internal state about the last match."),P.forEach(a),z=x(l),g=o(l,"P",{});var j=r(g);G=p(j,"This happens with "),C=o(j,"CODE",{class:!0});var vs=r(C);J=p(vs,"regex.test()"),vs.forEach(a),U=p(j," and "),L=o(j,"CODE",{class:!0});var ys=r(L);Y=p(ys,"regex.exec()"),ys.forEach(a),j.forEach(a),F=x(l),$=o(l,"DIV",{class:!0});var $s=r($);$s.forEach(a),K=x(l),H=o(l,"P",{});var ds=r(H);Q=p(ds,"This is useful for the following match + while loop pattern:"),ds.forEach(a),X=x(l),O=o(l,"DIV",{class:!0});var Os=r(O);Os.forEach(a),Z=x(l),R=o(l,"P",{});var ls=r(R);I=o(ls,"STRONG",{});var xs=r(I);ss=p(xs,"Note the state is stored in the regex instance"),xs.forEach(a),es=p(ls,", using a different regex instance will not have this behavior:"),ls.forEach(a),as=x(l),D=o(l,"DIV",{class:!0});var Rs=r(D);Rs.forEach(a),l.forEach(a),A=x(y),u=o(y,"SECTION",{});var B=r(u);q=o(B,"H2",{});var gs=r(q);_=o(gs,"A",{href:!0,id:!0});var us=r(_);ts=p(us,"Related Links"),us.forEach(a),gs.forEach(a),ns=x(B),N=o(B,"UL",{});var fs=r(N);S=o(fs,"LI",{});var ms=r(S);w=o(ms,"A",{href:!0,rel:!0});var _s=r(w);os=p(_s,"https://stackoverflow.com/questions/15276873/is-javascript-test-saving-state-in-the-regex"),_s.forEach(a),ms.forEach(a),fs.forEach(a),B.forEach(a),this.h()},h(){h(t,"class","inline"),h(i,"href","#test-and-exec-with-g"),h(i,"id","test-and-exec-with-g"),h(T,"class","inline"),h(C,"class","inline"),h(L,"class","inline"),h($,"class","code-section"),h(O,"class","code-section"),h(D,"class","code-section"),h(_,"href","#related-links"),h(_,"id","related-links"),h(w,"href","https://stackoverflow.com/questions/15276873/is-javascript-test-saving-state-in-the-regex"),h(w,"rel","nofollow")},m(y,l){is(y,e,l),s(e,k),s(k,i),s(i,f),s(i,t),s(t,v),s(e,b),s(e,m),s(m,M),s(m,T),s(T,V),s(m,W),s(e,z),s(e,g),s(g,G),s(g,C),s(C,J),s(g,U),s(g,L),s(L,Y),s(e,F),s(e,$),$.innerHTML=Ts,s(e,K),s(e,H),s(H,Q),s(e,X),s(e,O),O.innerHTML=Cs,s(e,Z),s(e,R),s(R,I),s(I,ss),s(R,es),s(e,as),s(e,D),D.innerHTML=Ls,is(y,A,l),is(y,u,l),s(u,q),s(q,_),s(_,ts),s(u,ns),s(u,N),s(N,S),s(S,w),s(w,os)},p:Vs,d(y){y&&a(e),y&&a(A),y&&a(u)}}}function Js(E){let e,k;const i=[E[0],bs];let f={$$slots:{default:[Gs]},$$scope:{ctx:E}};for(let t=0;t<i.length;t+=1)f=cs(f,i[t]);return e=new Ws({props:f}),{c(){qs(e.$$.fragment)},l(t){Ns(e.$$.fragment,t)},m(t,v){Ss(e,t,v),k=!0},p(t,[v]){const b=v&1?js(i,[v&1&&ws(t[0]),v&0&&ws(bs)]):{};v&2&&(b.$$scope={dirty:v,ctx:t}),e.$set(b)},i(t){k||(As(e.$$.fragment,t),k=!0)},o(t){Ps(e.$$.fragment,t),k=!1},d(t){Bs(e,t)}}}const bs={title:"'g' flag in regex",tags:["regex"],description:"test and exec with `g`When having a Regex with `g` (global) flag, the regex instance will store some internal state about the last match.This happens with `regex.test()` and `regex.exec()`This is useful for the following match + while loop pattern:...",tableOfContents:[{link:"test-and-exec-with-g",title:"test and exec with  `g`"},{link:"related-links",title:"Related Links"}]};function Us(E,e,k){return Ms("blog",{image:zs}),E.$$set=i=>{k(0,e=cs(cs({},e),Es(i)))},e=Es(e),[e]}class se extends Ds{constructor(e){super();Hs(this,e,Us,Js,Is,{})}}export{se as default,bs as metadata};
