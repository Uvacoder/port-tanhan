import{S as Kh,i as jh,s as Qh,C as Vi,w as ta,x as ra,y as aa,z as Jh,A as oh,q as la,o as na,B as ia,r as Xh,R as th,k as p,e,t as l,m as c,c as o,a,h as n,d as t,b as r,Q as f,g as u,F as s,O as Yh}from"../../../chunks/vendor-ea160616.js";import{B as Zh}from"../../../chunks/BlogLayout-1be3dc1e.js";import{T as sk}from"../../../chunks/TableOfContent-c4f5cb6e.js";import ek from"./components/Morphology.svelte-209d381a.js";import ok from"./components/KnockoutText.svelte-222630e4.js";import"../../../chunks/stores-7d7fda0c.js";import"../../../chunks/WebMentions-d768a574.js";/* empty css                                   */var tk="/_app/assets/morphology-knockout-text-a5f7f5d7.gif",rk="/_app/assets/morphology-text-21a93abe.gif",ak="/_app/assets/morphology-ff570125.gif",lk="/_app/assets/grayscale-0dce859e.webp",rh="/_app/assets/grayscale-d125fa35.png",nk="/_app/assets/darken-17dacf86.webp",ah="/_app/assets/darken-ddd3f49c.png",ik="/_app/assets/lighten-82ea2978.webp",lh="/_app/assets/lighten-33917603.png",pk="/_app/assets/change-color-2044cbfe.webp",nh="/_app/assets/change-color-91e17145.png",ck="/_app/assets/blow-out-channel-bcacf82f.webp",ih="/_app/assets/blow-out-channel-b15030e3.png",hk="/_app/assets/negative-alpha-b06426df.webp",ph="/_app/assets/negative-alpha-2fa31798.png",kk="/_app/assets/yellow-filter-2-9f27d0e4.webp",ch="/_app/assets/yellow-filter-2-9e2d3b59.png",vk="/_app/assets/yellow-filter-191e9d15.webp",hh="/_app/assets/yellow-filter-797aff26.png",uk="/_app/assets/red-filter-2b2b2311.webp",kh="/_app/assets/red-filter-d4781599.png",yk="/_app/assets/colorise-yellow-d49b23ef.webp",vh="/_app/assets/colorise-yellow-649adc59.png",dk="/_app/assets/colorise-red-8acd3f2d.webp",uh="/_app/assets/colorise-red-fdbb65ae.png",fk="/_app/assets/default-0df15f3a.webp",yh="/_app/assets/default-ac6872de.png",gk="/_app/assets/step-4-305b68e8.webp",dh="/_app/assets/step-4-2d732f8a.png",xk="/_app/assets/step-3-8b92aeeb.webp",fh="/_app/assets/step-3-11c50ab0.png",_k="/_app/assets/step-2-550d2c6b.webp",gh="/_app/assets/step-2-c60f5448.png",mk="/_app/assets/step-1-a14663a0.webp",xh="/_app/assets/step-1-cce86919.png",Ek="/_app/assets/hero-twitter-11c7d8fb.jpg";function wk(Ee){let y,O,x,H,d,I,we,ps,pa,cs,ca,ha,ka,B,hs,va,be,ua,ya,da,Ro,fa,ga,$,xa,Mo,_a,ma,Uo,Ea,wa,hr,U,To,ks,ba,qa,L,vs,Ca,qe,Oa,Ia,La,Do,Sa,Ra,T,Ce,Ma,Ua,Oe,Ta,Da,Ie,Pa,Aa,Ga,W,Ha,Le,Ba,$a,Se,Na,za,Re,mh=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">svg</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;my-filter&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">&lt;!-- take in 1 input &#96;in&#96; --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">feGaussianBlur</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;INPUT_NAME&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">&lt;!-- take in 2 inputs &#96;in&#96; and &#96;in2&#96; --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">feComposite</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;INPUT_NAME_1&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in2</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;INPUT_NAME_2&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">&lt;!-- &#96;result&#96; defines the result name, </span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">		which can be passed in as input for the next filter --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">feGaussianBlur</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">result</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;OUTPUT_1&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">feGaussianBlur</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;OUTPUT_1&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">&lt;!-- use the source as input for the filter primitive --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">&lt;!-- apply filter on the source element --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	&lt;</span><span style="color: var(--shiki-token-string-expression)">feGaussianBlur</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;SourceGraphic&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">&lt;!-- apply filter on the alpha channel of the source element,</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">		the silhouette of the source --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	&lt;</span><span style="color: var(--shiki-token-string-expression)">feGaussianBlur</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;SourceAlpha&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;/</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">svg</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,kr,m,Po,us,Fa,Va,N,Ao,Wa,Ka,Go,ja,Qa,Ho,Ja,Xa,Me,Eh=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">&lt;!-- x, y, width, height sets the filter region --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">filter</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">x</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;-10%&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">y</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;-10%&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">width</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;120%&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">height</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;120%&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">filterUnits</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;objectBoundingBox&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">&lt;!-- filter primitives here --&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,Ya,Bo,ys,Za,Ue,sl,el,ol,Te,wh=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">feFlood</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">flood-color</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;#EB0066&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">flood-opacity</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;0.5&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">result</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;flood&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">feFlood</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">feMerge</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">feMergeNode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;SourceGraphic&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">feMergeNode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;flood&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;/</span><span style="color: var(--shiki-token-string-expression)">feMerge</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,vr,k,$o,ds,tl,rl,No,zo,al,ll,De,bh=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;my-filter&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">feGaussianBlur</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;SourceAlpha&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">stdDeviation</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;10&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">result</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;DROP&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,nl,Fo,fs,Vo,Wo,gs,Wi,il,Pe,Ko,pl,cl,jo,Ae,hl,xs,kl,vl,Ge,qh=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;my-filter&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">feGaussianBlur</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;SourceAlpha&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">stdDeviation</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;10&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">result</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;DROP&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">feGaussianBlur</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">feFlood</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">flood-color</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;#EB0066&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">result</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;COLOR&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">feComposite</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;COLOR&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in2</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;DROP&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">operator</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;in&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">result</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;SHADOW&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,ul,Qo,_s,Jo,Xo,ms,Ki,yl,He,Be,dl,$e,fl,gl,Ne,Ch=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;my-filter&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">feGaussianBlur</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;SourceAlpha&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">stdDeviation</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;10&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">result</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;DROP&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">feGaussianBlur</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">feFlood</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">flood-color</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;#EB0066&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">result</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;COLOR&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">feComposite</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;COLOR&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in2</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;DROP&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">operator</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;in&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">result</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;SHADOW&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">feOffset</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;SHADOW&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">dx</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;10&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">dy</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;10&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">result</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;DROPSHADOW&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,xl,Yo,Es,Zo,st,ws,ji,_l,ze,et,ml,El,ot,tt,wl,bl,Fe,Oh=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;my-filter&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">feGaussianBlur</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;SourceAlpha&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">stdDeviation</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;10&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">result</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;DROP&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">feGaussianBlur</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">feFlood</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">flood-color</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;#EB0066&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">result</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;COLOR&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">feComposite</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;COLOR&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in2</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;DROP&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">operator</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;in&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">result</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;SHADOW&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">feOffset</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;SHADOW&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">dx</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;10&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">dy</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;10&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">result</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;DROPSHADOW&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">feMerge</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">feMergeNode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;DROPSHADOW&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">feMergeNode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;SourceGraphic&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;/</span><span style="color: var(--shiki-token-string-expression)">feMerge</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,ql,rt,bs,at,lt,qs,Qi,ur,E,nt,K,Cl,Ve,Ol,Il,Cs,Ll,Os,Sl,Rl,Ml,We,Ih=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;linear&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">feColorMatrix</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">type</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;matrix&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">values</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;R 0 0 0 0</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">            0 G 0 0 0</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">            0 0 B 0 0</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">            0 0 0 A 0 &quot;</span><span style="color: var(--shiki-color-text)">/&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,Ul,Ke,Lh=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">/* R G B A 1 */</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// R = 1*R + 0*G + 0*B + 0*A + 0</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// G = 0*R + 1*G + 0*B + 0*A + 0</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// B = 0*R + 0*G + 1*B + 0*A + 0</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// A = 0*R + 0*G + 0*B + 1*A + 0</span></span></code></pre>`,Tl,it,pt,Is,Dl,yr,D,ct,Ls,Pl,Al,ht,Ss,kt,vt,Rs,Ji,Gl,z,ut,Hl,Bl,je,$l,Ms,yt,dt,Us,Xi,Nl,Qe,zl,Ts,ft,gt,Ds,Yi,dr,q,xt,Ps,Fl,Vl,F,As,_t,Wl,Kl,V,mt,jl,Ql,Et,Jl,Xl,Je,Yl,Gs,wt,bt,Hs,Zi,Zl,qt,Xe,sn,Bs,Ct,Ot,$s,sp,en,It,Ye,on,Ns,Lt,St,zs,ep,tn,Rt,Fs,rn,Vs,Mt,Ut,Ws,op,Tt,Dt,an,ln,Ze,Sh=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">feColorMatrix</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">type</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;matrix&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">values</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;1  0  0  0  0</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">            0  1  0  0  0</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">            0  0  1 -1  0</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">            0  0  0  1  0 &quot;</span><span style="color: var(--shiki-color-text)">/&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">feColorMatrix</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">type</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;matrix&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">values</span><span style="color: var(--shiki-color-text)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;1  0  0  0  0</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">            0  1  0  0  0</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">            0  0  0  0  0</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">            0  0  0  1  0 &quot;</span><span style="color: var(--shiki-color-text)">/&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,fr,j,Pt,Ks,nn,pn,js,At,cn,hn,Q,kn,so,vn,un,Qs,Gt,Ht,Js,tp,gr,J,Bt,Xs,yn,dn,$t,eo,fn,Ys,Nt,zt,Zs,rp,xr,X,Ft,se,gn,xn,Vt,Y,_n,ee,Wt,Kt,oe,ap,mn,te,jt,Qt,re,lp,_r,Z,Jt,ae,En,wn,Xt,oo,bn,le,Yt,Zt,ne,np,mr,g,sr,ss,qn,to,Cn,On,ie,In,pe,Ln,Sn,Rn,S,es,Mn,ro,Un,Tn,ao,Dn,Pn,er,An,Gn,ce,Hn,lo,Bn,$n,Nn,he,zn,no,Fn,Vn,Wn,io,Rh=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">feMorphology</span><span style="color: var(--shiki-color-text)"> </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;..&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">result</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;..&quot;</span><span style="color: var(--shiki-color-text)"> </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">operator</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;dilate || erode&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">radius</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,Kn,or,ke,ip,jn,ve,Qn,po,ue,Jn,Xn,Er,w,tr,os,Yn,co,Zn,si,R,ei,ho,oi,ti,ko,ri,ai,vo,li,ni,ii,uo,Mh=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">h1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">style</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;filter: url(#outline)&quot;</span><span style="color: var(--shiki-color-text)">&gt;Hello World&lt;/</span><span style="color: var(--shiki-token-string-expression)">h1</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">svg</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	&lt;</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;outline&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		&lt;</span><span style="color: var(--shiki-token-string-expression)">feMorphology</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">result</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;THICK&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">operator</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;dilate&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">radius</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;4&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		&lt;</span><span style="color: var(--shiki-token-string-expression)">feFlood</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">flood-color</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;#32DFEC&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">flood-opacity</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;1&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">result</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;COLOR&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		&lt;</span><span style="color: var(--shiki-token-string-expression)">feComposite</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;COLOR&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in2</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;THICK&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">operator</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;in&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">result</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;OUTLINE&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		&lt;</span><span style="color: var(--shiki-token-string-expression)">feMerge</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">			&lt;</span><span style="color: var(--shiki-token-string-expression)">feMergeNode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;OUTLINE&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">			&lt;</span><span style="color: var(--shiki-token-string-expression)">feMergeNode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;SourceGraphic&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		&lt;/</span><span style="color: var(--shiki-token-string-expression)">feMerge</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	&lt;/</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">svg</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,pi,rr,ye,pp,ci,de,fe,hi,ki,yo,vi,wr,_,ar,ts,ui,fo,yi,di,M,fi,go,gi,xi,xo,_i,mi,_o,Ei,wi,bi,mo,Uh=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">h1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">style</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;filter: url(#outline)&quot;</span><span style="color: var(--shiki-color-text)">&gt;Hello World&lt;/</span><span style="color: var(--shiki-token-string-expression)">h1</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">svg</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	&lt;</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;outline&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		&lt;</span><span style="color: var(--shiki-token-string-expression)">feMorphology</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">result</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;THICK&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">operator</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;dilate&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">radius</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;4&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		&lt;</span><span style="color: var(--shiki-token-string-expression)">feComposite</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;THICK&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">in2</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;SourceGraphic&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">operator</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;out&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	&lt;/</span><span style="color: var(--shiki-token-string-expression)">filter</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">svg</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,qi,lr,ge,cp,Ci,xe,Oi,Eo,_e,Ii,Li,br;return y=new sk({props:{data:[{link:"svg-filters-101",title:"SVG Filters 101",nested:[{link:"filter-primitives",title:"filter primitives"},{link:"filter-region",title:"Filter region"},{link:"create-a-drop-shadow",title:"Create a drop shadow"}]},{link:"finessing-fecolormatrix",title:"Finessing  `feColorMatrix`",nested:[{link:"1-colorizing",title:"1. Colorizing"},{link:"2-alpha-values",title:"2. Alpha values"},{link:"3-blowing-out-channels",title:"3. Blowing out channels"},{link:"4-change-color",title:"4. Change color"},{link:"5-lighten-or-darken",title:"5. Lighten or darken"},{link:"6-grayscale",title:"6. Grayscale"}]},{link:"outline-text-with-lt-femorphology-gt",title:"Outline Text with  `&lt;feMorphology&gt;`",nested:[{link:"adding-colored-outline-to-text-with-lt-femorphology-gt",title:"Adding Colored Outline to Text with  `&lt;feMorphology /&gt;`"},{link:"knockout-text-with-lt-femorphology-gt",title:"Knockout text with  `&lt;feMorphology /&gt;`"}]}]}}),ve=new ek({}),xe=new ok({}),{c(){ta(y.$$.fragment),O=p(),x=e("section"),H=e("h2"),d=e("a"),I=l("SVG Filters 101"),we=p(),ps=e("p"),pa=l("[ "),cs=e("a"),ca=l("Source"),ha=l(" ]"),ka=p(),B=e("ul"),hs=e("li"),va=l("defined in "),be=e("code"),ua=l("<filter>"),ya=l(" element"),da=p(),Ro=e("li"),fa=l("define a series of one or more filter primitives"),ga=p(),$=e("li"),xa=l("1 filter primitive performs "),Mo=e("strong"),_a=l("1 single fundamental graphic operation"),ma=l(" on "),Uo=e("strong"),Ea=l("one or more"),wa=l(" inputs"),hr=p(),U=e("section"),To=e("h3"),ks=e("a"),ba=l("filter primitives"),qa=p(),L=e("ul"),vs=e("li"),Ca=l("filter primitives named start with "),qe=e("code"),Oa=l("fe"),Ia=l(', short for "filter effect"'),La=p(),Do=e("li"),Sa=l("filter primitives take 1-2 inputs and output 1 result"),Ra=p(),T=e("li"),Ce=e("code"),Ma=l("in"),Ua=l(" and "),Oe=e("code"),Ta=l("in2"),Da=l(" attribute for input, "),Ie=e("code"),Pa=l("result"),Aa=l(" attribute for output"),Ga=p(),W=e("li"),Ha=l("input takes in result, "),Le=e("code"),Ba=l("SourceGraphic"),$a=l(" and "),Se=e("code"),Na=l("SourceAlpha"),za=p(),Re=e("div"),kr=p(),m=e("section"),Po=e("h3"),us=e("a"),Fa=l("Filter region"),Va=p(),N=e("ul"),Ao=e("li"),Wa=l("filter region is based on the bounding box of the element"),Ka=p(),Go=e("li"),ja=l("filter result beyond filter region will be clipped off"),Qa=p(),Ho=e("li"),Ja=l("default filter region extends 10% the width and height of bounding box in all 4 directions"),Xa=p(),Me=e("div"),Ya=p(),Bo=e("ul"),ys=e("li"),Za=l("use "),Ue=e("code"),sl=l("<feFlood>"),el=l(" to figure out the filter region"),ol=p(),Te=e("div"),vr=p(),k=e("section"),$o=e("h3"),ds=e("a"),tl=l("Create a drop shadow"),rl=p(),No=e("ol"),zo=e("li"),al=l("Blur the silhouette of the layer"),ll=p(),De=e("div"),nl=p(),Fo=e("p"),fs=e("picture"),Vo=e("source"),Wo=e("source"),gs=e("img"),il=p(),Pe=e("ol"),Ko=e("li"),pl=l("Composite the blur layer with a solid color layer to create a colored blur"),cl=p(),jo=e("ul"),Ae=e("li"),hl=l("Learn compositing + blending in "),xs=e("a"),kl=l("https://www.sarasoueidan.com/blog/compositing-and-blending-in-css/"),vl=p(),Ge=e("div"),ul=p(),Qo=e("p"),_s=e("picture"),Jo=e("source"),Xo=e("source"),ms=e("img"),yl=p(),He=e("ol"),Be=e("li"),dl=l("Shift the shadow bottom-right with "),$e=e("code"),fl=l("<feOffset>"),gl=p(),Ne=e("div"),xl=p(),Yo=e("p"),Es=e("picture"),Zo=e("source"),st=e("source"),ws=e("img"),_l=p(),ze=e("ol"),et=e("li"),ml=l("Combine the shadow with the original image"),El=p(),ot=e("ul"),tt=e("li"),wl=l("layer merge in order of declaration, latter layer stacks on top of previous layer"),bl=p(),Fe=e("div"),ql=p(),rt=e("p"),bs=e("picture"),at=e("source"),lt=e("source"),qs=e("img"),ur=p(),E=e("section"),nt=e("h2"),K=e("a"),Cl=l("Finessing "),Ve=e("code"),Ol=l("feColorMatrix"),Il=p(),Cs=e("p"),Ll=l("[ "),Os=e("a"),Sl=l("Source"),Rl=l(" ]"),Ml=p(),We=e("div"),Ul=p(),Ke=e("div"),Tl=p(),it=e("ul"),pt=e("li"),Is=e("a"),Dl=l("color matrix playground"),yr=p(),D=e("section"),ct=e("h3"),Ls=e("a"),Pl=l("1. Colorizing"),Al=p(),ht=e("p"),Ss=e("picture"),kt=e("source"),vt=e("source"),Rs=e("img"),Gl=p(),z=e("ul"),ut=e("li"),Hl=l("Removing other color to colorise image into the remaining color"),Bl=p(),je=e("li"),$l=l(`colorise red -> remove blue & green
`),Ms=e("picture"),yt=e("source"),dt=e("source"),Us=e("img"),Nl=p(),Qe=e("li"),zl=l(`colorise yellow -> remove blue (red + green = yellow)
`),Ts=e("picture"),ft=e("source"),gt=e("source"),Ds=e("img"),dr=p(),q=e("section"),xt=e("h3"),Ps=e("a"),Fl=l("2. Alpha values"),Vl=p(),F=e("ul"),As=e("li"),_t=e("p"),Wl=l("add opacity level to the red channel"),Kl=p(),V=e("ul"),mt=e("li"),jl=l("any red remaining red"),Ql=p(),Et=e("li"),Jl=l("green -> yellow (red + green = yellow)"),Xl=p(),Je=e("li"),Yl=l(`blue -> magenta (red + blue = magenta)
`),Gs=e("picture"),wt=e("source"),bt=e("source"),Hs=e("img"),Zl=p(),qt=e("li"),Xe=e("p"),sn=l(`hard yellow filter
`),Bs=e("picture"),Ct=e("source"),Ot=e("source"),$s=e("img"),en=p(),It=e("li"),Ye=e("p"),on=l(`have a value some where between 0-1 to see the mixture in the shadow
`),Ns=e("picture"),Lt=e("source"),St=e("source"),zs=e("img"),tn=p(),Rt=e("ul"),Fs=e("li"),rn=l(`negative value could offset the channel by the amount of opacity
`),Vs=e("picture"),Mt=e("source"),Ut=e("source"),Ws=e("img"),Tt=e("ul"),Dt=e("li"),an=l("the following 2 color matrix is identical"),ln=p(),Ze=e("div"),fr=p(),j=e("section"),Pt=e("h3"),Ks=e("a"),nn=l("3. Blowing out channels"),pn=p(),js=e("ul"),At=e("li"),cn=l("turn 1 color to white"),hn=p(),Q=e("li"),kn=l("set the alpha channel to "),so=e("code"),vn=l("-2"),un=p(),Qs=e("picture"),Gt=e("source"),Ht=e("source"),Js=e("img"),gr=p(),J=e("section"),Bt=e("h3"),Xs=e("a"),yn=l("4. Change color"),dn=p(),$t=e("ul"),eo=e("li"),fn=l(`No more green, any green looks like magenta now. (luminosity of green is lost)
`),Ys=e("picture"),Nt=e("source"),zt=e("source"),Zs=e("img"),xr=p(),X=e("section"),Ft=e("h3"),se=e("a"),gn=l("5. Lighten or darken"),xn=p(),Vt=e("ul"),Y=e("li"),_n=l(`increase intensity to lighten, decrease to darken
`),ee=e("picture"),Wt=e("source"),Kt=e("source"),oe=e("img"),mn=p(),te=e("picture"),jt=e("source"),Qt=e("source"),re=e("img"),_r=p(),Z=e("section"),Jt=e("h3"),ae=e("a"),En=l("6. Grayscale"),wn=p(),Xt=e("ul"),oo=e("li"),bn=l(`make sure red, green, blue have the same value
`),le=e("picture"),Yt=e("source"),Zt=e("source"),ne=e("img"),mr=p(),g=e("section"),sr=e("h2"),ss=e("a"),qn=l("Outline Text with "),to=e("code"),Cn=l("<feMorphology>"),On=p(),ie=e("p"),In=l("[ "),pe=e("a"),Ln=l("Source"),Sn=l(" ]"),Rn=p(),S=e("ul"),es=e("li"),Mn=l("\u{1F5BC} image size gets smaller when "),ro=e("code"),Un=l("erode"),Tn=l(", larger when "),ao=e("code"),Dn=l("dilate"),Pn=p(),er=e("li"),An=l("\u{1F5BC} image looks like painted with large brush \u{1F58C}"),Gn=p(),ce=e("li"),Hn=l("\u{1F4DD} "),lo=e("code"),Bn=l("erode"),$n=l(" sets each pixel to the darkest / most transparent neighbor"),Nn=p(),he=e("li"),zn=l("\u{1F4DD} "),no=e("code"),Fn=l("dilate"),Vn=l(" sets each pixel to the brightest / least transparent neighbor"),Wn=p(),io=e("div"),Kn=p(),or=e("p"),ke=e("img"),jn=p(),ta(ve.$$.fragment),Qn=p(),po=e("p"),ue=e("a"),Jn=l("REPL"),Xn=l(" to see effect with different radius."),Er=p(),w=e("section"),tr=e("h3"),os=e("a"),Yn=l("Adding Colored Outline to Text with "),co=e("code"),Zn=l("<feMorphology />"),si=p(),R=e("p"),ei=l("1\uFE0F\u20E3 expand the text with "),ho=e("code"),oi=l('<feMorphology operator="dilate" />'),ti=l(`
2\uFE0F\u20E3 colorize via `),ko=e("code"),ri=l("<feFlood>"),ai=l(" with solid color and "),vo=e("code"),li=l("<feComposite />"),ni=l(`
3\uFE0F\u20E3 merge the expanded colored text with the original text`),ii=p(),uo=e("div"),pi=p(),rr=e("p"),ye=e("img"),ci=p(),de=e("p"),fe=e("a"),hi=l("REPL"),ki=l(" to visualise "),yo=e("code"),vi=l("<feMorphology>"),wr=p(),_=e("section"),ar=e("h3"),ts=e("a"),ui=l("Knockout text with "),fo=e("code"),yi=l("<feMorphology />"),di=p(),M=e("p"),fi=l("1\uFE0F\u20E3 expand the text with "),go=e("code"),gi=l('<feMorphology operator="dilate" />'),xi=l(`
2\uFE0F\u20E3 composite with the source with `),xo=e("code"),_i=l("<feComposite />"),mi=l(" using "),_o=e("code"),Ei=l("out"),wi=l(" operator"),bi=p(),mo=e("div"),qi=p(),lr=e("p"),ge=e("img"),Ci=p(),ta(xe.$$.fragment),Oi=p(),Eo=e("p"),_e=e("a"),Ii=l("REPL"),Li=l(" to visualise the build up the knock-out text."),this.h()},l(i){ra(y.$$.fragment,i),O=c(i),x=o(i,"SECTION",{});var h=a(x);H=o(h,"H2",{});var hp=a(H);d=o(hp,"A",{href:!0,id:!0});var kp=a(d);I=n(kp,"SVG Filters 101"),kp.forEach(t),hp.forEach(t),we=c(h),ps=o(h,"P",{});var qr=a(ps);pa=n(qr,"[ "),cs=o(qr,"A",{href:!0,rel:!0});var vp=a(cs);ca=n(vp,"Source"),vp.forEach(t),ha=n(qr," ]"),qr.forEach(t),ka=c(h),B=o(h,"UL",{});var wo=a(B);hs=o(wo,"LI",{});var Cr=a(hs);va=n(Cr,"defined in "),be=o(Cr,"CODE",{class:!0});var up=a(be);ua=n(up,"<filter>"),up.forEach(t),ya=n(Cr," element"),Cr.forEach(t),da=c(wo),Ro=o(wo,"LI",{});var yp=a(Ro);fa=n(yp,"define a series of one or more filter primitives"),yp.forEach(t),ga=c(wo),$=o(wo,"LI",{});var bo=a($);xa=n(bo,"1 filter primitive performs "),Mo=o(bo,"STRONG",{});var dp=a(Mo);_a=n(dp,"1 single fundamental graphic operation"),dp.forEach(t),ma=n(bo," on "),Uo=o(bo,"STRONG",{});var fp=a(Uo);Ea=n(fp,"one or more"),fp.forEach(t),wa=n(bo," inputs"),bo.forEach(t),wo.forEach(t),h.forEach(t),hr=c(i),U=o(i,"SECTION",{});var qo=a(U);To=o(qo,"H3",{});var gp=a(To);ks=o(gp,"A",{href:!0,id:!0});var xp=a(ks);ba=n(xp,"filter primitives"),xp.forEach(t),gp.forEach(t),qa=c(qo),L=o(qo,"UL",{});var rs=a(L);vs=o(rs,"LI",{});var Or=a(vs);Ca=n(Or,"filter primitives named start with "),qe=o(Or,"CODE",{class:!0});var _p=a(qe);Oa=n(_p,"fe"),_p.forEach(t),Ia=n(Or,', short for "filter effect"'),Or.forEach(t),La=c(rs),Do=o(rs,"LI",{});var mp=a(Do);Sa=n(mp,"filter primitives take 1-2 inputs and output 1 result"),mp.forEach(t),Ra=c(rs),T=o(rs,"LI",{});var me=a(T);Ce=o(me,"CODE",{class:!0});var Ep=a(Ce);Ma=n(Ep,"in"),Ep.forEach(t),Ua=n(me," and "),Oe=o(me,"CODE",{class:!0});var wp=a(Oe);Ta=n(wp,"in2"),wp.forEach(t),Da=n(me," attribute for input, "),Ie=o(me,"CODE",{class:!0});var bp=a(Ie);Pa=n(bp,"result"),bp.forEach(t),Aa=n(me," attribute for output"),me.forEach(t),Ga=c(rs),W=o(rs,"LI",{});var nr=a(W);Ha=n(nr,"input takes in result, "),Le=o(nr,"CODE",{class:!0});var qp=a(Le);Ba=n(qp,"SourceGraphic"),qp.forEach(t),$a=n(nr," and "),Se=o(nr,"CODE",{class:!0});var Cp=a(Se);Na=n(Cp,"SourceAlpha"),Cp.forEach(t),nr.forEach(t),rs.forEach(t),za=c(qo),Re=o(qo,"DIV",{class:!0});var Th=a(Re);Th.forEach(t),qo.forEach(t),kr=c(i),m=o(i,"SECTION",{});var P=a(m);Po=o(P,"H3",{});var Op=a(Po);us=o(Op,"A",{href:!0,id:!0});var Ip=a(us);Fa=n(Ip,"Filter region"),Ip.forEach(t),Op.forEach(t),Va=c(P),N=o(P,"UL",{});var Co=a(N);Ao=o(Co,"LI",{});var Lp=a(Ao);Wa=n(Lp,"filter region is based on the bounding box of the element"),Lp.forEach(t),Ka=c(Co),Go=o(Co,"LI",{});var Sp=a(Go);ja=n(Sp,"filter result beyond filter region will be clipped off"),Sp.forEach(t),Qa=c(Co),Ho=o(Co,"LI",{});var Rp=a(Ho);Ja=n(Rp,"default filter region extends 10% the width and height of bounding box in all 4 directions"),Rp.forEach(t),Co.forEach(t),Xa=c(P),Me=o(P,"DIV",{class:!0});var Dh=a(Me);Dh.forEach(t),Ya=c(P),Bo=o(P,"UL",{});var Mp=a(Bo);ys=o(Mp,"LI",{});var Ir=a(ys);Za=n(Ir,"use "),Ue=o(Ir,"CODE",{class:!0});var Up=a(Ue);sl=n(Up,"<feFlood>"),Up.forEach(t),el=n(Ir," to figure out the filter region"),Ir.forEach(t),Mp.forEach(t),ol=c(P),Te=o(P,"DIV",{class:!0});var Ph=a(Te);Ph.forEach(t),P.forEach(t),vr=c(i),k=o(i,"SECTION",{});var v=a(k);$o=o(v,"H3",{});var Tp=a($o);ds=o(Tp,"A",{href:!0,id:!0});var Dp=a(ds);tl=n(Dp,"Create a drop shadow"),Dp.forEach(t),Tp.forEach(t),rl=c(v),No=o(v,"OL",{});var Pp=a(No);zo=o(Pp,"LI",{});var Ap=a(zo);al=n(Ap,"Blur the silhouette of the layer"),Ap.forEach(t),Pp.forEach(t),ll=c(v),De=o(v,"DIV",{class:!0});var Ah=a(De);Ah.forEach(t),nl=c(v),Fo=o(v,"P",{});var Gp=a(Fo);fs=o(Gp,"PICTURE",{});var Lr=a(fs);Vo=o(Lr,"SOURCE",{type:!0,srcset:!0}),Wo=o(Lr,"SOURCE",{type:!0,srcset:!0}),gs=o(Lr,"IMG",{src:!0,loading:!0,alt:!0}),Lr.forEach(t),Gp.forEach(t),il=c(v),Pe=o(v,"OL",{start:!0});var Hp=a(Pe);Ko=o(Hp,"LI",{});var Bp=a(Ko);pl=n(Bp,"Composite the blur layer with a solid color layer to create a colored blur"),Bp.forEach(t),Hp.forEach(t),cl=c(v),jo=o(v,"UL",{});var $p=a(jo);Ae=o($p,"LI",{});var Si=a(Ae);hl=n(Si,"Learn compositing + blending in "),xs=o(Si,"A",{href:!0,rel:!0});var Np=a(xs);kl=n(Np,"https://www.sarasoueidan.com/blog/compositing-and-blending-in-css/"),Np.forEach(t),Si.forEach(t),$p.forEach(t),vl=c(v),Ge=o(v,"DIV",{class:!0});var Gh=a(Ge);Gh.forEach(t),ul=c(v),Qo=o(v,"P",{});var zp=a(Qo);_s=o(zp,"PICTURE",{});var Sr=a(_s);Jo=o(Sr,"SOURCE",{type:!0,srcset:!0}),Xo=o(Sr,"SOURCE",{type:!0,srcset:!0}),ms=o(Sr,"IMG",{src:!0,loading:!0,alt:!0}),Sr.forEach(t),zp.forEach(t),yl=c(v),He=o(v,"OL",{start:!0});var Fp=a(He);Be=o(Fp,"LI",{});var Ri=a(Be);dl=n(Ri,"Shift the shadow bottom-right with "),$e=o(Ri,"CODE",{class:!0});var Vp=a($e);fl=n(Vp,"<feOffset>"),Vp.forEach(t),Ri.forEach(t),Fp.forEach(t),gl=c(v),Ne=o(v,"DIV",{class:!0});var Hh=a(Ne);Hh.forEach(t),xl=c(v),Yo=o(v,"P",{});var Wp=a(Yo);Es=o(Wp,"PICTURE",{});var Rr=a(Es);Zo=o(Rr,"SOURCE",{type:!0,srcset:!0}),st=o(Rr,"SOURCE",{type:!0,srcset:!0}),ws=o(Rr,"IMG",{src:!0,loading:!0,alt:!0}),Rr.forEach(t),Wp.forEach(t),_l=c(v),ze=o(v,"OL",{start:!0});var Kp=a(ze);et=o(Kp,"LI",{});var jp=a(et);ml=n(jp,"Combine the shadow with the original image"),jp.forEach(t),Kp.forEach(t),El=c(v),ot=o(v,"UL",{});var Qp=a(ot);tt=o(Qp,"LI",{});var Jp=a(tt);wl=n(Jp,"layer merge in order of declaration, latter layer stacks on top of previous layer"),Jp.forEach(t),Qp.forEach(t),bl=c(v),Fe=o(v,"DIV",{class:!0});var Bh=a(Fe);Bh.forEach(t),ql=c(v),rt=o(v,"P",{});var Xp=a(rt);bs=o(Xp,"PICTURE",{});var Mr=a(bs);at=o(Mr,"SOURCE",{type:!0,srcset:!0}),lt=o(Mr,"SOURCE",{type:!0,srcset:!0}),qs=o(Mr,"IMG",{src:!0,loading:!0,alt:!0}),Mr.forEach(t),Xp.forEach(t),v.forEach(t),ur=c(i),E=o(i,"SECTION",{});var A=a(E);nt=o(A,"H2",{});var Yp=a(nt);K=o(Yp,"A",{href:!0,id:!0});var Mi=a(K);Cl=n(Mi,"Finessing "),Ve=o(Mi,"CODE",{class:!0});var Zp=a(Ve);Ol=n(Zp,"feColorMatrix"),Zp.forEach(t),Mi.forEach(t),Yp.forEach(t),Il=c(A),Cs=o(A,"P",{});var Ur=a(Cs);Ll=n(Ur,"[ "),Os=o(Ur,"A",{href:!0,rel:!0});var sc=a(Os);Sl=n(sc,"Source"),sc.forEach(t),Rl=n(Ur," ]"),Ur.forEach(t),Ml=c(A),We=o(A,"DIV",{class:!0});var $h=a(We);$h.forEach(t),Ul=c(A),Ke=o(A,"DIV",{class:!0});var Nh=a(Ke);Nh.forEach(t),Tl=c(A),it=o(A,"UL",{});var ec=a(it);pt=o(ec,"LI",{});var oc=a(pt);Is=o(oc,"A",{href:!0,rel:!0});var tc=a(Is);Dl=n(tc,"color matrix playground"),tc.forEach(t),oc.forEach(t),ec.forEach(t),A.forEach(t),yr=c(i),D=o(i,"SECTION",{});var Oo=a(D);ct=o(Oo,"H3",{});var rc=a(ct);Ls=o(rc,"A",{href:!0,id:!0});var ac=a(Ls);Pl=n(ac,"1. Colorizing"),ac.forEach(t),rc.forEach(t),Al=c(Oo),ht=o(Oo,"P",{});var lc=a(ht);Ss=o(lc,"PICTURE",{});var Tr=a(Ss);kt=o(Tr,"SOURCE",{type:!0,srcset:!0}),vt=o(Tr,"SOURCE",{type:!0,srcset:!0}),Rs=o(Tr,"IMG",{src:!0,loading:!0,alt:!0}),Tr.forEach(t),lc.forEach(t),Gl=c(Oo),z=o(Oo,"UL",{});var Io=a(z);ut=o(Io,"LI",{});var nc=a(ut);Hl=n(nc,"Removing other color to colorise image into the remaining color"),nc.forEach(t),Bl=c(Io),je=o(Io,"LI",{});var Ui=a(je);$l=n(Ui,`colorise red -> remove blue & green
`),Ms=o(Ui,"PICTURE",{});var Dr=a(Ms);yt=o(Dr,"SOURCE",{type:!0,srcset:!0}),dt=o(Dr,"SOURCE",{type:!0,srcset:!0}),Us=o(Dr,"IMG",{src:!0,loading:!0,alt:!0}),Dr.forEach(t),Ui.forEach(t),Nl=c(Io),Qe=o(Io,"LI",{});var Ti=a(Qe);zl=n(Ti,`colorise yellow -> remove blue (red + green = yellow)
`),Ts=o(Ti,"PICTURE",{});var Pr=a(Ts);ft=o(Pr,"SOURCE",{type:!0,srcset:!0}),gt=o(Pr,"SOURCE",{type:!0,srcset:!0}),Ds=o(Pr,"IMG",{src:!0,loading:!0,alt:!0}),Pr.forEach(t),Ti.forEach(t),Io.forEach(t),Oo.forEach(t),dr=c(i),q=o(i,"SECTION",{});var as=a(q);xt=o(as,"H3",{});var ic=a(xt);Ps=o(ic,"A",{href:!0,id:!0});var pc=a(Ps);Fl=n(pc,"2. Alpha values"),pc.forEach(t),ic.forEach(t),Vl=c(as),F=o(as,"UL",{});var Lo=a(F);As=o(Lo,"LI",{});var Ar=a(As);_t=o(Ar,"P",{});var cc=a(_t);Wl=n(cc,"add opacity level to the red channel"),cc.forEach(t),Kl=c(Ar),V=o(Ar,"UL",{});var So=a(V);mt=o(So,"LI",{});var hc=a(mt);jl=n(hc,"any red remaining red"),hc.forEach(t),Ql=c(So),Et=o(So,"LI",{});var kc=a(Et);Jl=n(kc,"green -> yellow (red + green = yellow)"),kc.forEach(t),Xl=c(So),Je=o(So,"LI",{});var Di=a(Je);Yl=n(Di,`blue -> magenta (red + blue = magenta)
`),Gs=o(Di,"PICTURE",{});var Gr=a(Gs);wt=o(Gr,"SOURCE",{type:!0,srcset:!0}),bt=o(Gr,"SOURCE",{type:!0,srcset:!0}),Hs=o(Gr,"IMG",{src:!0,loading:!0,alt:!0}),Gr.forEach(t),Di.forEach(t),So.forEach(t),Ar.forEach(t),Zl=c(Lo),qt=o(Lo,"LI",{});var vc=a(qt);Xe=o(vc,"P",{});var Pi=a(Xe);sn=n(Pi,`hard yellow filter
`),Bs=o(Pi,"PICTURE",{});var Hr=a(Bs);Ct=o(Hr,"SOURCE",{type:!0,srcset:!0}),Ot=o(Hr,"SOURCE",{type:!0,srcset:!0}),$s=o(Hr,"IMG",{src:!0,loading:!0,alt:!0}),Hr.forEach(t),Pi.forEach(t),vc.forEach(t),en=c(Lo),It=o(Lo,"LI",{});var uc=a(It);Ye=o(uc,"P",{});var Ai=a(Ye);on=n(Ai,`have a value some where between 0-1 to see the mixture in the shadow
`),Ns=o(Ai,"PICTURE",{});var Br=a(Ns);Lt=o(Br,"SOURCE",{type:!0,srcset:!0}),St=o(Br,"SOURCE",{type:!0,srcset:!0}),zs=o(Br,"IMG",{src:!0,loading:!0,alt:!0}),Br.forEach(t),Ai.forEach(t),uc.forEach(t),Lo.forEach(t),tn=c(as),Rt=o(as,"UL",{});var yc=a(Rt);Fs=o(yc,"LI",{});var $r=a(Fs);rn=n($r,`negative value could offset the channel by the amount of opacity
`),Vs=o($r,"PICTURE",{});var Nr=a(Vs);Mt=o(Nr,"SOURCE",{type:!0,srcset:!0}),Ut=o(Nr,"SOURCE",{type:!0,srcset:!0}),Ws=o(Nr,"IMG",{src:!0,loading:!0,alt:!0}),Nr.forEach(t),Tt=o($r,"UL",{});var dc=a(Tt);Dt=o(dc,"LI",{});var fc=a(Dt);an=n(fc,"the following 2 color matrix is identical"),fc.forEach(t),dc.forEach(t),$r.forEach(t),yc.forEach(t),ln=c(as),Ze=o(as,"DIV",{class:!0});var zh=a(Ze);zh.forEach(t),as.forEach(t),fr=c(i),j=o(i,"SECTION",{});var zr=a(j);Pt=o(zr,"H3",{});var gc=a(Pt);Ks=o(gc,"A",{href:!0,id:!0});var xc=a(Ks);nn=n(xc,"3. Blowing out channels"),xc.forEach(t),gc.forEach(t),pn=c(zr),js=o(zr,"UL",{});var Fr=a(js);At=o(Fr,"LI",{});var _c=a(At);cn=n(_c,"turn 1 color to white"),_c.forEach(t),hn=c(Fr),Q=o(Fr,"LI",{});var ir=a(Q);kn=n(ir,"set the alpha channel to "),so=o(ir,"CODE",{class:!0});var mc=a(so);vn=n(mc,"-2"),mc.forEach(t),un=c(ir),Qs=o(ir,"PICTURE",{});var Vr=a(Qs);Gt=o(Vr,"SOURCE",{type:!0,srcset:!0}),Ht=o(Vr,"SOURCE",{type:!0,srcset:!0}),Js=o(Vr,"IMG",{src:!0,loading:!0,alt:!0}),Vr.forEach(t),ir.forEach(t),Fr.forEach(t),zr.forEach(t),gr=c(i),J=o(i,"SECTION",{});var Wr=a(J);Bt=o(Wr,"H3",{});var Ec=a(Bt);Xs=o(Ec,"A",{href:!0,id:!0});var wc=a(Xs);yn=n(wc,"4. Change color"),wc.forEach(t),Ec.forEach(t),dn=c(Wr),$t=o(Wr,"UL",{});var bc=a($t);eo=o(bc,"LI",{});var Gi=a(eo);fn=n(Gi,`No more green, any green looks like magenta now. (luminosity of green is lost)
`),Ys=o(Gi,"PICTURE",{});var Kr=a(Ys);Nt=o(Kr,"SOURCE",{type:!0,srcset:!0}),zt=o(Kr,"SOURCE",{type:!0,srcset:!0}),Zs=o(Kr,"IMG",{src:!0,loading:!0,alt:!0}),Kr.forEach(t),Gi.forEach(t),bc.forEach(t),Wr.forEach(t),xr=c(i),X=o(i,"SECTION",{});var jr=a(X);Ft=o(jr,"H3",{});var qc=a(Ft);se=o(qc,"A",{href:!0,id:!0});var Cc=a(se);gn=n(Cc,"5. Lighten or darken"),Cc.forEach(t),qc.forEach(t),xn=c(jr),Vt=o(jr,"UL",{});var Oc=a(Vt);Y=o(Oc,"LI",{});var pr=a(Y);_n=n(pr,`increase intensity to lighten, decrease to darken
`),ee=o(pr,"PICTURE",{});var Qr=a(ee);Wt=o(Qr,"SOURCE",{type:!0,srcset:!0}),Kt=o(Qr,"SOURCE",{type:!0,srcset:!0}),oe=o(Qr,"IMG",{src:!0,loading:!0,alt:!0}),Qr.forEach(t),mn=c(pr),te=o(pr,"PICTURE",{});var Jr=a(te);jt=o(Jr,"SOURCE",{type:!0,srcset:!0}),Qt=o(Jr,"SOURCE",{type:!0,srcset:!0}),re=o(Jr,"IMG",{src:!0,loading:!0,alt:!0}),Jr.forEach(t),pr.forEach(t),Oc.forEach(t),jr.forEach(t),_r=c(i),Z=o(i,"SECTION",{});var Xr=a(Z);Jt=o(Xr,"H3",{});var Ic=a(Jt);ae=o(Ic,"A",{href:!0,id:!0});var Lc=a(ae);En=n(Lc,"6. Grayscale"),Lc.forEach(t),Ic.forEach(t),wn=c(Xr),Xt=o(Xr,"UL",{});var Sc=a(Xt);oo=o(Sc,"LI",{});var Hi=a(oo);bn=n(Hi,`make sure red, green, blue have the same value
`),le=o(Hi,"PICTURE",{});var Yr=a(le);Yt=o(Yr,"SOURCE",{type:!0,srcset:!0}),Zt=o(Yr,"SOURCE",{type:!0,srcset:!0}),ne=o(Yr,"IMG",{src:!0,loading:!0,alt:!0}),Yr.forEach(t),Hi.forEach(t),Sc.forEach(t),Xr.forEach(t),mr=c(i),g=o(i,"SECTION",{});var b=a(g);sr=o(b,"H2",{});var Rc=a(sr);ss=o(Rc,"A",{href:!0,id:!0});var Bi=a(ss);qn=n(Bi,"Outline Text with "),to=o(Bi,"CODE",{class:!0});var Mc=a(to);Cn=n(Mc,"<feMorphology>"),Mc.forEach(t),Bi.forEach(t),Rc.forEach(t),On=c(b),ie=o(b,"P",{});var Zr=a(ie);In=n(Zr,"[ "),pe=o(Zr,"A",{href:!0,rel:!0});var Uc=a(pe);Ln=n(Uc,"Source"),Uc.forEach(t),Sn=n(Zr," ]"),Zr.forEach(t),Rn=c(b),S=o(b,"UL",{});var ls=a(S);es=o(ls,"LI",{});var cr=a(es);Mn=n(cr,"\u{1F5BC} image size gets smaller when "),ro=o(cr,"CODE",{class:!0});var Tc=a(ro);Un=n(Tc,"erode"),Tc.forEach(t),Tn=n(cr,", larger when "),ao=o(cr,"CODE",{class:!0});var Dc=a(ao);Dn=n(Dc,"dilate"),Dc.forEach(t),cr.forEach(t),Pn=c(ls),er=o(ls,"LI",{});var Pc=a(er);An=n(Pc,"\u{1F5BC} image looks like painted with large brush \u{1F58C}"),Pc.forEach(t),Gn=c(ls),ce=o(ls,"LI",{});var sa=a(ce);Hn=n(sa,"\u{1F4DD} "),lo=o(sa,"CODE",{class:!0});var Ac=a(lo);Bn=n(Ac,"erode"),Ac.forEach(t),$n=n(sa," sets each pixel to the darkest / most transparent neighbor"),sa.forEach(t),Nn=c(ls),he=o(ls,"LI",{});var ea=a(he);zn=n(ea,"\u{1F4DD} "),no=o(ea,"CODE",{class:!0});var Gc=a(no);Fn=n(Gc,"dilate"),Gc.forEach(t),Vn=n(ea," sets each pixel to the brightest / least transparent neighbor"),ea.forEach(t),ls.forEach(t),Wn=c(b),io=o(b,"DIV",{class:!0});var Fh=a(io);Fh.forEach(t),Kn=c(b),or=o(b,"P",{});var Hc=a(or);ke=o(Hc,"IMG",{src:!0,loading:!0,alt:!0}),Hc.forEach(t),jn=c(b),ra(ve.$$.fragment,b),Qn=c(b),po=o(b,"P",{});var $i=a(po);ue=o($i,"A",{href:!0,rel:!0});var Bc=a(ue);Jn=n(Bc,"REPL"),Bc.forEach(t),Xn=n($i," to see effect with different radius."),$i.forEach(t),b.forEach(t),Er=c(i),w=o(i,"SECTION",{});var G=a(w);tr=o(G,"H3",{});var $c=a(tr);os=o($c,"A",{href:!0,id:!0});var Ni=a(os);Yn=n(Ni,"Adding Colored Outline to Text with "),co=o(Ni,"CODE",{class:!0});var Nc=a(co);Zn=n(Nc,"<feMorphology />"),Nc.forEach(t),Ni.forEach(t),$c.forEach(t),si=c(G),R=o(G,"P",{});var ns=a(R);ei=n(ns,"1\uFE0F\u20E3 expand the text with "),ho=o(ns,"CODE",{class:!0});var zc=a(ho);oi=n(zc,'<feMorphology operator="dilate" />'),zc.forEach(t),ti=n(ns,`
2\uFE0F\u20E3 colorize via `),ko=o(ns,"CODE",{class:!0});var Fc=a(ko);ri=n(Fc,"<feFlood>"),Fc.forEach(t),ai=n(ns," with solid color and "),vo=o(ns,"CODE",{class:!0});var Vc=a(vo);li=n(Vc,"<feComposite />"),Vc.forEach(t),ni=n(ns,`
3\uFE0F\u20E3 merge the expanded colored text with the original text`),ns.forEach(t),ii=c(G),uo=o(G,"DIV",{class:!0});var Vh=a(uo);Vh.forEach(t),pi=c(G),rr=o(G,"P",{});var Wc=a(rr);ye=o(Wc,"IMG",{src:!0,loading:!0,alt:!0}),Wc.forEach(t),ci=c(G),de=o(G,"P",{});var oa=a(de);fe=o(oa,"A",{href:!0,rel:!0});var Kc=a(fe);hi=n(Kc,"REPL"),Kc.forEach(t),ki=n(oa," to visualise "),yo=o(oa,"CODE",{class:!0});var jc=a(yo);vi=n(jc,"<feMorphology>"),jc.forEach(t),oa.forEach(t),G.forEach(t),wr=c(i),_=o(i,"SECTION",{});var C=a(_);ar=o(C,"H3",{});var Qc=a(ar);ts=o(Qc,"A",{href:!0,id:!0});var zi=a(ts);ui=n(zi,"Knockout text with "),fo=o(zi,"CODE",{class:!0});var Jc=a(fo);yi=n(Jc,"<feMorphology />"),Jc.forEach(t),zi.forEach(t),Qc.forEach(t),di=c(C),M=o(C,"P",{});var is=a(M);fi=n(is,"1\uFE0F\u20E3 expand the text with "),go=o(is,"CODE",{class:!0});var Xc=a(go);gi=n(Xc,'<feMorphology operator="dilate" />'),Xc.forEach(t),xi=n(is,`
2\uFE0F\u20E3 composite with the source with `),xo=o(is,"CODE",{class:!0});var Yc=a(xo);_i=n(Yc,"<feComposite />"),Yc.forEach(t),mi=n(is," using "),_o=o(is,"CODE",{class:!0});var Zc=a(_o);Ei=n(Zc,"out"),Zc.forEach(t),wi=n(is," operator"),is.forEach(t),bi=c(C),mo=o(C,"DIV",{class:!0});var Wh=a(mo);Wh.forEach(t),qi=c(C),lr=o(C,"P",{});var sh=a(lr);ge=o(sh,"IMG",{src:!0,loading:!0,alt:!0}),sh.forEach(t),Ci=c(C),ra(xe.$$.fragment,C),Oi=c(C),Eo=o(C,"P",{});var Fi=a(Eo);_e=o(Fi,"A",{href:!0,rel:!0});var eh=a(_e);Ii=n(eh,"REPL"),eh.forEach(t),Li=n(Fi," to visualise the build up the knock-out text."),Fi.forEach(t),C.forEach(t),this.h()},h(){r(d,"href","#svg-filters-101"),r(d,"id","svg-filters-101"),r(cs,"href","https://tympanus.net/codrops/2019/01/15/svg-filters-101/"),r(cs,"rel","nofollow"),r(be,"class","inline"),r(ks,"href","#filter-primitives"),r(ks,"id","filter-primitives"),r(qe,"class","inline"),r(Ce,"class","inline"),r(Oe,"class","inline"),r(Ie,"class","inline"),r(Le,"class","inline"),r(Se,"class","inline"),r(Re,"class","code-section"),r(us,"href","#filter-region"),r(us,"id","filter-region"),r(Me,"class","code-section"),r(Ue,"class","inline"),r(Te,"class","code-section"),r(ds,"href","#create-a-drop-shadow"),r(ds,"id","create-a-drop-shadow"),r(De,"class","code-section"),r(Vo,"type","image/webp"),r(Vo,"srcset",mk),r(Wo,"type","image/png"),r(Wo,"srcset",xh),f(gs.src,Wi=xh)||r(gs,"src",Wi),r(gs,"loading","lazy"),r(gs,"alt","step-1"),r(Pe,"start","2"),r(xs,"href","https://www.sarasoueidan.com/blog/compositing-and-blending-in-css/"),r(xs,"rel","nofollow"),r(Ge,"class","code-section"),r(Jo,"type","image/webp"),r(Jo,"srcset",_k),r(Xo,"type","image/png"),r(Xo,"srcset",gh),f(ms.src,Ki=gh)||r(ms,"src",Ki),r(ms,"loading","lazy"),r(ms,"alt","step-2"),r($e,"class","inline"),r(He,"start","3"),r(Ne,"class","code-section"),r(Zo,"type","image/webp"),r(Zo,"srcset",xk),r(st,"type","image/png"),r(st,"srcset",fh),f(ws.src,ji=fh)||r(ws,"src",ji),r(ws,"loading","lazy"),r(ws,"alt","step-3"),r(ze,"start","4"),r(Fe,"class","code-section"),r(at,"type","image/webp"),r(at,"srcset",gk),r(lt,"type","image/png"),r(lt,"srcset",dh),f(qs.src,Qi=dh)||r(qs,"src",Qi),r(qs,"loading","lazy"),r(qs,"alt","step-4"),r(Ve,"class","inline"),r(K,"href","#finessing-fecolormatrix"),r(K,"id","finessing-fecolormatrix"),r(Os,"href","https://alistapart.com/article/finessing-fecolormatrix/"),r(Os,"rel","nofollow"),r(We,"class","code-section"),r(Ke,"class","code-section"),r(Is,"href","https://svelte.dev/repl/1fa3e758ef2442d1bcc1eba37a2bdd58"),r(Is,"rel","nofollow"),r(Ls,"href","#1-colorizing"),r(Ls,"id","1-colorizing"),r(kt,"type","image/webp"),r(kt,"srcset",fk),r(vt,"type","image/png"),r(vt,"srcset",yh),f(Rs.src,Ji=yh)||r(Rs,"src",Ji),r(Rs,"loading","lazy"),r(Rs,"alt","colorise default"),r(yt,"type","image/webp"),r(yt,"srcset",dk),r(dt,"type","image/png"),r(dt,"srcset",uh),f(Us.src,Xi=uh)||r(Us,"src",Xi),r(Us,"loading","lazy"),r(Us,"alt","colorise red"),r(ft,"type","image/webp"),r(ft,"srcset",yk),r(gt,"type","image/png"),r(gt,"srcset",vh),f(Ds.src,Yi=vh)||r(Ds,"src",Yi),r(Ds,"loading","lazy"),r(Ds,"alt","colorise yellow"),r(Ps,"href","#2-alpha-values"),r(Ps,"id","2-alpha-values"),r(wt,"type","image/webp"),r(wt,"srcset",uk),r(bt,"type","image/png"),r(bt,"srcset",kh),f(Hs.src,Zi=kh)||r(Hs,"src",Zi),r(Hs,"loading","lazy"),r(Hs,"alt","red filter"),r(Ct,"type","image/webp"),r(Ct,"srcset",vk),r(Ot,"type","image/png"),r(Ot,"srcset",hh),f($s.src,sp=hh)||r($s,"src",sp),r($s,"loading","lazy"),r($s,"alt","yellow filter"),r(Lt,"type","image/webp"),r(Lt,"srcset",kk),r(St,"type","image/png"),r(St,"srcset",ch),f(zs.src,ep=ch)||r(zs,"src",ep),r(zs,"loading","lazy"),r(zs,"alt","yellow filter 2"),r(Mt,"type","image/webp"),r(Mt,"srcset",hk),r(Ut,"type","image/png"),r(Ut,"srcset",ph),f(Ws.src,op=ph)||r(Ws,"src",op),r(Ws,"loading","lazy"),r(Ws,"alt","negative alpha"),r(Ze,"class","code-section"),r(Ks,"href","#3-blowing-out-channels"),r(Ks,"id","3-blowing-out-channels"),r(so,"class","inline"),r(Gt,"type","image/webp"),r(Gt,"srcset",ck),r(Ht,"type","image/png"),r(Ht,"srcset",ih),f(Js.src,tp=ih)||r(Js,"src",tp),r(Js,"loading","lazy"),r(Js,"alt","blow-out-green"),r(Xs,"href","#4-change-color"),r(Xs,"id","4-change-color"),r(Nt,"type","image/webp"),r(Nt,"srcset",pk),r(zt,"type","image/png"),r(zt,"srcset",nh),f(Zs.src,rp=nh)||r(Zs,"src",rp),r(Zs,"loading","lazy"),r(Zs,"alt","change-color"),r(se,"href","#5-lighten-or-darken"),r(se,"id","5-lighten-or-darken"),r(Wt,"type","image/webp"),r(Wt,"srcset",ik),r(Kt,"type","image/png"),r(Kt,"srcset",lh),f(oe.src,ap=lh)||r(oe,"src",ap),r(oe,"loading","lazy"),r(oe,"alt","lighten"),r(jt,"type","image/webp"),r(jt,"srcset",nk),r(Qt,"type","image/png"),r(Qt,"srcset",ah),f(re.src,lp=ah)||r(re,"src",lp),r(re,"loading","lazy"),r(re,"alt","darken"),r(ae,"href","#6-grayscale"),r(ae,"id","6-grayscale"),r(Yt,"type","image/webp"),r(Yt,"srcset",lk),r(Zt,"type","image/png"),r(Zt,"srcset",rh),f(ne.src,np=rh)||r(ne,"src",np),r(ne,"loading","lazy"),r(ne,"alt","grayscale"),r(to,"class","inline"),r(ss,"href","#outline-text-with-lt-femorphology-gt"),r(ss,"id","outline-text-with-lt-femorphology-gt"),r(pe,"href","https://tympanus.net/codrops/2019/01/22/svg-filter-effects-outline-text-with-femorphology/"),r(pe,"rel","nofollow"),r(ro,"class","inline"),r(ao,"class","inline"),r(lo,"class","inline"),r(no,"class","inline"),r(io,"class","code-section"),f(ke.src,ip=ak)||r(ke,"src",ip),r(ke,"loading","lazy"),r(ke,"alt","feMorphology"),r(ue,"href","https://svelte.dev/repl/1f0a2c16650541d082beeecc2a046c9f?version=3.29.0"),r(ue,"rel","nofollow"),r(co,"class","inline"),r(os,"href","#adding-colored-outline-to-text-with-lt-femorphology-gt"),r(os,"id","adding-colored-outline-to-text-with-lt-femorphology-gt"),r(ho,"class","inline"),r(ko,"class","inline"),r(vo,"class","inline"),r(uo,"class","code-section"),f(ye.src,pp=rk)||r(ye,"src",pp),r(ye,"loading","lazy"),r(ye,"alt","feMorphology outline text"),r(fe,"href","https://svelte.dev/repl/a1a3aa1cc844476b9ca96fec3f0164ed?version=3.29.0"),r(fe,"rel","nofollow"),r(yo,"class","inline"),r(fo,"class","inline"),r(ts,"href","#knockout-text-with-lt-femorphology-gt"),r(ts,"id","knockout-text-with-lt-femorphology-gt"),r(go,"class","inline"),r(xo,"class","inline"),r(_o,"class","inline"),r(mo,"class","code-section"),f(ge.src,cp=tk)||r(ge,"src",cp),r(ge,"loading","lazy"),r(ge,"alt","feMorphology knockout text"),r(_e,"href","https://svelte.dev/repl/30153d68324d475189d34afa26a3186f?version=3.29.0"),r(_e,"rel","nofollow")},m(i,h){aa(y,i,h),u(i,O,h),u(i,x,h),s(x,H),s(H,d),s(d,I),s(x,we),s(x,ps),s(ps,pa),s(ps,cs),s(cs,ca),s(ps,ha),s(x,ka),s(x,B),s(B,hs),s(hs,va),s(hs,be),s(be,ua),s(hs,ya),s(B,da),s(B,Ro),s(Ro,fa),s(B,ga),s(B,$),s($,xa),s($,Mo),s(Mo,_a),s($,ma),s($,Uo),s(Uo,Ea),s($,wa),u(i,hr,h),u(i,U,h),s(U,To),s(To,ks),s(ks,ba),s(U,qa),s(U,L),s(L,vs),s(vs,Ca),s(vs,qe),s(qe,Oa),s(vs,Ia),s(L,La),s(L,Do),s(Do,Sa),s(L,Ra),s(L,T),s(T,Ce),s(Ce,Ma),s(T,Ua),s(T,Oe),s(Oe,Ta),s(T,Da),s(T,Ie),s(Ie,Pa),s(T,Aa),s(L,Ga),s(L,W),s(W,Ha),s(W,Le),s(Le,Ba),s(W,$a),s(W,Se),s(Se,Na),s(U,za),s(U,Re),Re.innerHTML=mh,u(i,kr,h),u(i,m,h),s(m,Po),s(Po,us),s(us,Fa),s(m,Va),s(m,N),s(N,Ao),s(Ao,Wa),s(N,Ka),s(N,Go),s(Go,ja),s(N,Qa),s(N,Ho),s(Ho,Ja),s(m,Xa),s(m,Me),Me.innerHTML=Eh,s(m,Ya),s(m,Bo),s(Bo,ys),s(ys,Za),s(ys,Ue),s(Ue,sl),s(ys,el),s(m,ol),s(m,Te),Te.innerHTML=wh,u(i,vr,h),u(i,k,h),s(k,$o),s($o,ds),s(ds,tl),s(k,rl),s(k,No),s(No,zo),s(zo,al),s(k,ll),s(k,De),De.innerHTML=bh,s(k,nl),s(k,Fo),s(Fo,fs),s(fs,Vo),s(fs,Wo),s(fs,gs),s(k,il),s(k,Pe),s(Pe,Ko),s(Ko,pl),s(k,cl),s(k,jo),s(jo,Ae),s(Ae,hl),s(Ae,xs),s(xs,kl),s(k,vl),s(k,Ge),Ge.innerHTML=qh,s(k,ul),s(k,Qo),s(Qo,_s),s(_s,Jo),s(_s,Xo),s(_s,ms),s(k,yl),s(k,He),s(He,Be),s(Be,dl),s(Be,$e),s($e,fl),s(k,gl),s(k,Ne),Ne.innerHTML=Ch,s(k,xl),s(k,Yo),s(Yo,Es),s(Es,Zo),s(Es,st),s(Es,ws),s(k,_l),s(k,ze),s(ze,et),s(et,ml),s(k,El),s(k,ot),s(ot,tt),s(tt,wl),s(k,bl),s(k,Fe),Fe.innerHTML=Oh,s(k,ql),s(k,rt),s(rt,bs),s(bs,at),s(bs,lt),s(bs,qs),u(i,ur,h),u(i,E,h),s(E,nt),s(nt,K),s(K,Cl),s(K,Ve),s(Ve,Ol),s(E,Il),s(E,Cs),s(Cs,Ll),s(Cs,Os),s(Os,Sl),s(Cs,Rl),s(E,Ml),s(E,We),We.innerHTML=Ih,s(E,Ul),s(E,Ke),Ke.innerHTML=Lh,s(E,Tl),s(E,it),s(it,pt),s(pt,Is),s(Is,Dl),u(i,yr,h),u(i,D,h),s(D,ct),s(ct,Ls),s(Ls,Pl),s(D,Al),s(D,ht),s(ht,Ss),s(Ss,kt),s(Ss,vt),s(Ss,Rs),s(D,Gl),s(D,z),s(z,ut),s(ut,Hl),s(z,Bl),s(z,je),s(je,$l),s(je,Ms),s(Ms,yt),s(Ms,dt),s(Ms,Us),s(z,Nl),s(z,Qe),s(Qe,zl),s(Qe,Ts),s(Ts,ft),s(Ts,gt),s(Ts,Ds),u(i,dr,h),u(i,q,h),s(q,xt),s(xt,Ps),s(Ps,Fl),s(q,Vl),s(q,F),s(F,As),s(As,_t),s(_t,Wl),s(As,Kl),s(As,V),s(V,mt),s(mt,jl),s(V,Ql),s(V,Et),s(Et,Jl),s(V,Xl),s(V,Je),s(Je,Yl),s(Je,Gs),s(Gs,wt),s(Gs,bt),s(Gs,Hs),s(F,Zl),s(F,qt),s(qt,Xe),s(Xe,sn),s(Xe,Bs),s(Bs,Ct),s(Bs,Ot),s(Bs,$s),s(F,en),s(F,It),s(It,Ye),s(Ye,on),s(Ye,Ns),s(Ns,Lt),s(Ns,St),s(Ns,zs),s(q,tn),s(q,Rt),s(Rt,Fs),s(Fs,rn),s(Fs,Vs),s(Vs,Mt),s(Vs,Ut),s(Vs,Ws),s(Fs,Tt),s(Tt,Dt),s(Dt,an),s(q,ln),s(q,Ze),Ze.innerHTML=Sh,u(i,fr,h),u(i,j,h),s(j,Pt),s(Pt,Ks),s(Ks,nn),s(j,pn),s(j,js),s(js,At),s(At,cn),s(js,hn),s(js,Q),s(Q,kn),s(Q,so),s(so,vn),s(Q,un),s(Q,Qs),s(Qs,Gt),s(Qs,Ht),s(Qs,Js),u(i,gr,h),u(i,J,h),s(J,Bt),s(Bt,Xs),s(Xs,yn),s(J,dn),s(J,$t),s($t,eo),s(eo,fn),s(eo,Ys),s(Ys,Nt),s(Ys,zt),s(Ys,Zs),u(i,xr,h),u(i,X,h),s(X,Ft),s(Ft,se),s(se,gn),s(X,xn),s(X,Vt),s(Vt,Y),s(Y,_n),s(Y,ee),s(ee,Wt),s(ee,Kt),s(ee,oe),s(Y,mn),s(Y,te),s(te,jt),s(te,Qt),s(te,re),u(i,_r,h),u(i,Z,h),s(Z,Jt),s(Jt,ae),s(ae,En),s(Z,wn),s(Z,Xt),s(Xt,oo),s(oo,bn),s(oo,le),s(le,Yt),s(le,Zt),s(le,ne),u(i,mr,h),u(i,g,h),s(g,sr),s(sr,ss),s(ss,qn),s(ss,to),s(to,Cn),s(g,On),s(g,ie),s(ie,In),s(ie,pe),s(pe,Ln),s(ie,Sn),s(g,Rn),s(g,S),s(S,es),s(es,Mn),s(es,ro),s(ro,Un),s(es,Tn),s(es,ao),s(ao,Dn),s(S,Pn),s(S,er),s(er,An),s(S,Gn),s(S,ce),s(ce,Hn),s(ce,lo),s(lo,Bn),s(ce,$n),s(S,Nn),s(S,he),s(he,zn),s(he,no),s(no,Fn),s(he,Vn),s(g,Wn),s(g,io),io.innerHTML=Rh,s(g,Kn),s(g,or),s(or,ke),s(g,jn),aa(ve,g,null),s(g,Qn),s(g,po),s(po,ue),s(ue,Jn),s(po,Xn),u(i,Er,h),u(i,w,h),s(w,tr),s(tr,os),s(os,Yn),s(os,co),s(co,Zn),s(w,si),s(w,R),s(R,ei),s(R,ho),s(ho,oi),s(R,ti),s(R,ko),s(ko,ri),s(R,ai),s(R,vo),s(vo,li),s(R,ni),s(w,ii),s(w,uo),uo.innerHTML=Mh,s(w,pi),s(w,rr),s(rr,ye),s(w,ci),s(w,de),s(de,fe),s(fe,hi),s(de,ki),s(de,yo),s(yo,vi),u(i,wr,h),u(i,_,h),s(_,ar),s(ar,ts),s(ts,ui),s(ts,fo),s(fo,yi),s(_,di),s(_,M),s(M,fi),s(M,go),s(go,gi),s(M,xi),s(M,xo),s(xo,_i),s(M,mi),s(M,_o),s(_o,Ei),s(M,wi),s(_,bi),s(_,mo),mo.innerHTML=Uh,s(_,qi),s(_,lr),s(lr,ge),s(_,Ci),aa(xe,_,null),s(_,Oi),s(_,Eo),s(Eo,_e),s(_e,Ii),s(Eo,Li),br=!0},p:Yh,i(i){br||(la(y.$$.fragment,i),la(ve.$$.fragment,i),la(xe.$$.fragment,i),br=!0)},o(i){na(y.$$.fragment,i),na(ve.$$.fragment,i),na(xe.$$.fragment,i),br=!1},d(i){ia(y,i),i&&t(O),i&&t(x),i&&t(hr),i&&t(U),i&&t(kr),i&&t(m),i&&t(vr),i&&t(k),i&&t(ur),i&&t(E),i&&t(yr),i&&t(D),i&&t(dr),i&&t(q),i&&t(fr),i&&t(j),i&&t(gr),i&&t(J),i&&t(xr),i&&t(X),i&&t(_r),i&&t(Z),i&&t(mr),i&&t(g),ia(ve),i&&t(Er),i&&t(w),i&&t(wr),i&&t(_),ia(xe)}}}function bk(Ee){let y,O;const x=[Ee[0],_h];let H={$$slots:{default:[wk]},$$scope:{ctx:Ee}};for(let d=0;d<x.length;d+=1)H=Vi(H,x[d]);return y=new Zh({props:H}),{c(){ta(y.$$.fragment)},l(d){ra(y.$$.fragment,d)},m(d,I){aa(y,d,I),O=!0},p(d,[I]){const we=I&1?Jh(x,[I&1&&oh(d[0]),I&0&&oh(_h)]):{};I&2&&(we.$$scope={dirty:I,ctx:d}),y.$set(we)},i(d){O||(la(y.$$.fragment,d),O=!0)},o(d){na(y.$$.fragment,d),O=!1},d(d){ia(y,d)}}}const _h={title:"SVG Filters",tags:["svg filters","filters","svg"]};function qk(Ee,y,O){return Xh("blog",{image:Ek}),Ee.$$set=x=>{O(0,y=Vi(Vi({},y),th(x)))},y=th(y),[y]}class Tk extends Kh{constructor(y){super();jh(this,y,qk,bk,Qh,{})}}export{Tk as default,_h as metadata};
