import{S as ks,i as hs,s as ys,C as V,w as ns,x as es,y as ts,z as vs,A as ss,q as ls,o as rs,B as is,r as ds,R as as,k as I,e as l,t as g,m as P,c as r,a as i,h as q,d as e,b as x,g as N,F as n,O as us}from"../../chunks/vendor-6bf294e3.js";import{B as xs}from"../../chunks/BlogLayout-152f599b.js";import{T as fs}from"../../chunks/TableOfContent-1b9e4572.js";import{_ as ms}from"../../chunks/twitter-card-image-a57df29d.js";import"../../chunks/stores-e20b7872.js";import"../../chunks/WebMentions-745413ea.js";/* empty css                                */function _s(f){let s,c,t,y,a,p,m,E,v,d,O,S,$,b,j,T,k,A,u,B,D,L,C,H,U,_,cs=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">chokidar</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;chokidar&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getValueAndDependencies</span><span style="color: var(--shiki-color-text)">(requirePath) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">value</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(requirePath);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">valueMod</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">children</span><span style="color: var(--shiki-token-function)">.find</span><span style="color: var(--shiki-color-text)">(mod </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">mod</span><span style="color: var(--shiki-color-text)">.id </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> requirePath);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">deps</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">stack</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [valueMod];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">while</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">stack</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">stack</span><span style="color: var(--shiki-token-function)">.pop</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">deps</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.id);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">children</span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">(mod </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">stack</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(mod));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123; value</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> deps &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">requireAndWatch</span><span style="color: var(--shiki-color-text)">(requirePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callback) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> dependencies </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> []</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    value;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">watcher</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">chokidar</span><span style="color: var(--shiki-token-function)">.watch</span><span style="color: var(--shiki-color-text)">([]);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">watcher</span><span style="color: var(--shiki-token-function)">.on</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;ready&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">watcher</span><span style="color: var(--shiki-token-function)">.on</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;change&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">startWatch</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">startWatch</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">watcher</span><span style="color: var(--shiki-token-function)">.unwatch</span><span style="color: var(--shiki-color-text)">(dependencies);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">dependencies</span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">(dep </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">delete</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">require</span><span style="color: var(--shiki-color-text)">.cache[dep];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    (&#123; value</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> deps</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> dependencies &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getValueAndDependencies</span><span style="color: var(--shiki-color-text)">(requirePath));</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">watcher</span><span style="color: var(--shiki-token-function)">.add</span><span style="color: var(--shiki-color-text)">(dependencies);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">callback</span><span style="color: var(--shiki-color-text)">(value);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">startWatch</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> requireAndWatch;</span></span></code></pre>`,W;return s=new fs({props:{data:[{link:"module-children",title:"module.children"},{link:"require-and-watch",title:"require and watch"}]}}),{c(){ns(s.$$.fragment),c=I(),t=l("section"),y=l("h2"),a=l("a"),p=g("module.children"),m=I(),E=l("ul"),v=l("li"),d=l("a"),O=g("module.children"),S=g(" can give you a list of modules required by the current module."),$=l("ul"),b=l("li"),j=g("can use the dependency tree of current module"),T=I(),k=l("section"),A=l("h2"),u=l("a"),B=g("require and watch"),D=I(),L=l("ul"),C=l("li"),H=g("requires a file, and pass a callback whenever the module + dependencies changed"),U=I(),_=l("div"),this.h()},l(o){es(s.$$.fragment,o),c=P(o),t=r(o,"SECTION",{});var h=i(t);y=r(h,"H2",{});var z=i(y);a=r(z,"A",{href:!0,id:!0});var F=i(a);p=q(F,"module.children"),F.forEach(e),z.forEach(e),m=P(h),E=r(h,"UL",{});var G=i(E);v=r(G,"LI",{});var M=i(v);d=r(M,"A",{href:!0,rel:!0});var J=i(d);O=q(J,"module.children"),J.forEach(e),S=q(M," can give you a list of modules required by the current module."),$=r(M,"UL",{});var R=i($);b=r(R,"LI",{});var K=i(b);j=q(K,"can use the dependency tree of current module"),K.forEach(e),R.forEach(e),M.forEach(e),G.forEach(e),h.forEach(e),T=P(o),k=r(o,"SECTION",{});var w=i(k);A=r(w,"H2",{});var Q=i(A);u=r(Q,"A",{href:!0,id:!0});var X=i(u);B=q(X,"require and watch"),X.forEach(e),Q.forEach(e),D=P(w),L=r(w,"UL",{});var Y=i(L);C=r(Y,"LI",{});var Z=i(C);H=q(Z,"requires a file, and pass a callback whenever the module + dependencies changed"),Z.forEach(e),Y.forEach(e),U=P(w),_=r(w,"DIV",{class:!0});var ps=i(_);ps.forEach(e),w.forEach(e),this.h()},h(){x(a,"href","#module-children"),x(a,"id","module-children"),x(d,"href","https://nodejs.org/api/modules.html#modules_module_children"),x(d,"rel","nofollow"),x(u,"href","#require-and-watch"),x(u,"id","require-and-watch"),x(_,"class","code-section")},m(o,h){ts(s,o,h),N(o,c,h),N(o,t,h),n(t,y),n(y,a),n(a,p),n(t,m),n(t,E),n(E,v),n(v,d),n(d,O),n(v,S),n(v,$),n($,b),n(b,j),N(o,T,h),N(o,k,h),n(k,A),n(A,u),n(u,B),n(k,D),n(k,L),n(L,C),n(C,H),n(k,U),n(k,_),_.innerHTML=cs,W=!0},p:us,i(o){W||(ls(s.$$.fragment,o),W=!0)},o(o){rs(s.$$.fragment,o),W=!1},d(o){is(s,o),o&&e(c),o&&e(t),o&&e(T),o&&e(k)}}}function ws(f){let s,c;const t=[f[0],os];let y={$$slots:{default:[_s]},$$scope:{ctx:f}};for(let a=0;a<t.length;a+=1)y=V(y,t[a]);return s=new xs({props:y}),{c(){ns(s.$$.fragment)},l(a){es(s.$$.fragment,a)},m(a,p){ts(s,a,p),c=!0},p(a,[p]){const m=p&1?vs(t,[p&1&&ss(a[0]),p&0&&ss(os)]):{};p&2&&(m.$$scope={dirty:p,ctx:a}),s.$set(m)},i(a){c||(ls(s.$$.fragment,a),c=!0)},o(a){rs(s.$$.fragment,a),c=!1},d(a){is(s,a)}}}const os={title:"Getting module dependency from Node.js",tags:["NodeJs"]};function gs(f,s,c){return ds("blog",{image:ms}),f.$$set=t=>{c(0,s=V(V({},s),as(t)))},s=as(s),[s]}class Is extends ks{constructor(s){super();hs(this,s,gs,ws,ys,{})}}export{Is as default,os as metadata};
