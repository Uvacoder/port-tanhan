import{S as os,i as ns,s as es,C as O,w as ts,x as ls,y as rs,z as is,A as R,q as cs,o as ps,B as ks,r as hs,Y as X,e,t as w,k as I,c as t,a as l,h as g,d as n,m as P,b as x,g as D,H as a,J as ys}from"../../chunks/vendor-da4388d4.js";import{B as vs}from"../../chunks/BlogLayout-d479b777.js";import{_ as ds}from"../../chunks/twitter-card-image-a57df29d.js";import"../../chunks/stores-1fad7c36.js";import"../../chunks/ldjson-b0805387.js";/* empty css                                */function us(f){let s,c,r,v,o,i,k,d,W,H,q,E,M,L,h,b,u,N,S,$,A,j,B,m,ss=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">chokidar</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;chokidar&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getValueAndDependencies</span><span style="color: var(--shiki-color-text)">(requirePath) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">value</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(requirePath);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">valueMod</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">children</span><span style="color: var(--shiki-token-function)">.find</span><span style="color: var(--shiki-color-text)">(mod </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">mod</span><span style="color: var(--shiki-color-text)">.id </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> requirePath);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">deps</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">stack</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [valueMod];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">while</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">stack</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">stack</span><span style="color: var(--shiki-token-function)">.pop</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">deps</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.id);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">children</span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">(mod </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">stack</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(mod));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123; value</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> deps &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">requireAndWatch</span><span style="color: var(--shiki-color-text)">(requirePath</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callback) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> dependencies </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> []</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    value;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">watcher</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">chokidar</span><span style="color: var(--shiki-token-function)">.watch</span><span style="color: var(--shiki-color-text)">([]);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">watcher</span><span style="color: var(--shiki-token-function)">.on</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;ready&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">watcher</span><span style="color: var(--shiki-token-function)">.on</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;change&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">startWatch</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">startWatch</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">watcher</span><span style="color: var(--shiki-token-function)">.unwatch</span><span style="color: var(--shiki-color-text)">(dependencies);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">dependencies</span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">(dep </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">delete</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">require</span><span style="color: var(--shiki-color-text)">.cache[dep];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    (&#123; value</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> deps</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> dependencies &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getValueAndDependencies</span><span style="color: var(--shiki-color-text)">(requirePath));</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">watcher</span><span style="color: var(--shiki-token-function)">.add</span><span style="color: var(--shiki-color-text)">(dependencies);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">callback</span><span style="color: var(--shiki-color-text)">(value);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">startWatch</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">module</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> requireAndWatch;</span></span></code></pre>`;return{c(){s=e("section"),c=e("h2"),r=e("a"),v=w("module.children"),o=I(),i=e("ul"),k=e("li"),d=e("a"),W=w("module.children"),H=w(" can give you a list of modules required by the current module."),q=e("ul"),E=e("li"),M=w("can use the dependency tree of current module"),L=I(),h=e("section"),b=e("h2"),u=e("a"),N=w("require and watch"),S=I(),$=e("ul"),A=e("li"),j=w("requires a file, and pass a callback whenever the module + dependencies changed"),B=I(),m=e("div"),this.h()},l(p){s=t(p,"SECTION",{});var y=l(s);c=t(y,"H2",{});var T=l(c);r=t(T,"A",{href:!0,id:!0});var U=l(r);v=g(U,"module.children"),U.forEach(n),T.forEach(n),o=P(y),i=t(y,"UL",{});var V=l(i);k=t(V,"LI",{});var C=l(k);d=t(C,"A",{href:!0,rel:!0});var J=l(d);W=g(J,"module.children"),J.forEach(n),H=g(C," can give you a list of modules required by the current module."),q=t(C,"UL",{});var z=l(q);E=t(z,"LI",{});var G=l(E);M=g(G,"can use the dependency tree of current module"),G.forEach(n),z.forEach(n),C.forEach(n),V.forEach(n),y.forEach(n),L=P(p),h=t(p,"SECTION",{});var _=l(h);b=t(_,"H2",{});var Y=l(b);u=t(Y,"A",{href:!0,id:!0});var F=l(u);N=g(F,"require and watch"),F.forEach(n),Y.forEach(n),S=P(_),$=t(_,"UL",{});var K=l($);A=t(K,"LI",{});var Q=l(A);j=g(Q,"requires a file, and pass a callback whenever the module + dependencies changed"),Q.forEach(n),K.forEach(n),B=P(_),m=t(_,"DIV",{class:!0});var as=l(m);as.forEach(n),_.forEach(n),this.h()},h(){x(r,"href","#module-children"),x(r,"id","module-children"),x(d,"href","https://nodejs.org/api/modules.html#modules_module_children"),x(d,"rel","nofollow"),x(u,"href","#require-and-watch"),x(u,"id","require-and-watch"),x(m,"class","code-section")},m(p,y){D(p,s,y),a(s,c),a(c,r),a(r,v),a(s,o),a(s,i),a(i,k),a(k,d),a(d,W),a(k,H),a(k,q),a(q,E),a(E,M),D(p,L,y),D(p,h,y),a(h,b),a(b,u),a(u,N),a(h,S),a(h,$),a($,A),a(A,j),a(h,B),a(h,m),m.innerHTML=ss},p:ys,d(p){p&&n(s),p&&n(L),p&&n(h)}}}function xs(f){let s,c;const r=[f[0],Z];let v={$$slots:{default:[us]},$$scope:{ctx:f}};for(let o=0;o<r.length;o+=1)v=O(v,r[o]);return s=new vs({props:v}),{c(){ts(s.$$.fragment)},l(o){ls(s.$$.fragment,o)},m(o,i){rs(s,o,i),c=!0},p(o,[i]){const k=i&1?is(r,[i&1&&R(o[0]),i&0&&R(Z)]):{};i&2&&(k.$$scope={dirty:i,ctx:o}),s.$set(k)},i(o){c||(cs(s.$$.fragment,o),c=!0)},o(o){ps(s.$$.fragment,o),c=!1},d(o){ks(s,o)}}}const Z={title:"Getting module dependency from Node.js",tags:["NodeJs"],description:"module.childrenmodule.children can give you a list of modules required by the current module.can use the dependency tree of current modulerequire and watchrequires a file, and pass a callback whenever the module + dependencies changed...",tableOfContents:[{link:"module-children",title:"module.children"},{link:"require-and-watch",title:"require and watch"}]};function fs(f,s,c){return hs("blog",{image:ds}),f.$$set=r=>{c(0,s=O(O({},s),X(r)))},s=X(s),[s]}class bs extends os{constructor(s){super();ns(this,s,fs,xs,es,{})}}export{bs as default,Z as metadata};
