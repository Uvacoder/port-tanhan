import{S as ae,i as oe,s as ne,C as U,w as le,x as re,y as ie,z as ce,A as Y,q as pe,o as ue,B as he,r as de,R as Z,e as r,t as u,k as O,c as i,a as c,h,d as n,m as j,b as f,g,F as o,O as fe}from"../../chunks/vendor-ea160616.js";import{B as _e}from"../../chunks/BlogLayout-1be3dc1e.js";import{_ as ke}from"../../chunks/twitter-card-image-a57df29d.js";import"../../chunks/stores-7d7fda0c.js";import"../../chunks/WebMentions-d768a574.js";/* empty css                                */function me(q){let e,d,l,m,s,a,w,E,B,I,b,P,R,z,S,F,C,v,te=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">sentence</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;a &quot;witch&quot; and her &quot;broom&quot; is one&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">sentence</span><span style="color: var(--shiki-token-function)">.match</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">/&quot;.</span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-token-string-expression)">&quot;/</span><span style="color: var(--shiki-color-text)">); </span><span style="color: var(--shiki-token-comment)">// &#96;&quot;witch&quot; and her &quot;broom&quot;&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// lazy</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">sentence</span><span style="color: var(--shiki-token-function)">.match</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">/&quot;.</span><span style="color: var(--shiki-token-keyword)">+?</span><span style="color: var(--shiki-token-string-expression)">&quot;/</span><span style="color: var(--shiki-color-text)">); </span><span style="color: var(--shiki-token-comment)">// &#96;&quot;witch&quot;&#96;</span></span></code></pre>`,A,_,$,y,H,M,L,x,T;return{c(){e=r("p"),d=u("Lazy quantifier in regex "),l=r("code"),m=u("?"),s=O(),a=r("p"),w=u("Add "),E=r("code"),B=u("?"),I=u(" at the behind "),b=r("code"),P=u("*"),R=u(" or "),z=r("code"),S=u("+"),F=u(" to make them less greedy."),C=O(),v=r("div"),A=O(),_=r("ul"),$=r("li"),y=r("a"),H=u("https://twitter.com/lihautan/status/1177476277277560832"),M=O(),L=r("li"),x=r("a"),T=u("https://javascript.info/regexp-greedy-and-lazy"),this.h()},l(t){e=i(t,"P",{});var p=c(e);d=h(p,"Lazy quantifier in regex "),l=i(p,"CODE",{class:!0});var V=c(l);m=h(V,"?"),V.forEach(n),p.forEach(n),s=j(t),a=i(t,"P",{});var k=c(a);w=h(k,"Add "),E=i(k,"CODE",{class:!0});var G=c(E);B=h(G,"?"),G.forEach(n),I=h(k," at the behind "),b=i(k,"CODE",{class:!0});var J=c(b);P=h(J,"*"),J.forEach(n),R=h(k," or "),z=i(k,"CODE",{class:!0});var K=c(z);S=h(K,"+"),K.forEach(n),F=h(k," to make them less greedy."),k.forEach(n),C=j(t),v=i(t,"DIV",{class:!0});var se=c(v);se.forEach(n),A=j(t),_=i(t,"UL",{});var D=c(_);$=i(D,"LI",{});var N=c($);y=i(N,"A",{href:!0,rel:!0});var Q=c(y);H=h(Q,"https://twitter.com/lihautan/status/1177476277277560832"),Q.forEach(n),N.forEach(n),M=j(D),L=i(D,"LI",{});var W=c(L);x=i(W,"A",{href:!0,rel:!0});var X=c(x);T=h(X,"https://javascript.info/regexp-greedy-and-lazy"),X.forEach(n),W.forEach(n),D.forEach(n),this.h()},h(){f(l,"class","inline"),f(E,"class","inline"),f(b,"class","inline"),f(z,"class","inline"),f(v,"class","code-section"),f(y,"href","https://twitter.com/lihautan/status/1177476277277560832"),f(y,"rel","nofollow"),f(x,"href","https://javascript.info/regexp-greedy-and-lazy"),f(x,"rel","nofollow")},m(t,p){g(t,e,p),o(e,d),o(e,l),o(l,m),g(t,s,p),g(t,a,p),o(a,w),o(a,E),o(E,B),o(a,I),o(a,b),o(b,P),o(a,R),o(a,z),o(z,S),o(a,F),g(t,C,p),g(t,v,p),v.innerHTML=te,g(t,A,p),g(t,_,p),o(_,$),o($,y),o(y,H),o(_,M),o(_,L),o(L,x),o(x,T)},p:fe,d(t){t&&n(e),t&&n(s),t&&n(a),t&&n(C),t&&n(v),t&&n(A),t&&n(_)}}}function ve(q){let e,d;const l=[q[0],ee];let m={$$slots:{default:[me]},$$scope:{ctx:q}};for(let s=0;s<l.length;s+=1)m=U(m,l[s]);return e=new _e({props:m}),{c(){le(e.$$.fragment)},l(s){re(e.$$.fragment,s)},m(s,a){ie(e,s,a),d=!0},p(s,[a]){const w=a&1?ce(l,[a&1&&Y(s[0]),a&0&&Y(ee)]):{};a&2&&(w.$$scope={dirty:a,ctx:s}),e.$set(w)},i(s){d||(pe(e.$$.fragment,s),d=!0)},o(s){ue(e.$$.fragment,s),d=!1},d(s){he(e,s)}}}const ee={title:"Lazy quantifier in regex",tags:["regex"]};function ye(q,e,d){return de("blog",{image:ke}),q.$$set=l=>{d(0,e=U(U({},e),Z(l)))},e=Z(e),[e]}class ze extends ae{constructor(e){super();oe(this,e,ye,ve,ne,{})}}export{ze as default,ee as metadata};
