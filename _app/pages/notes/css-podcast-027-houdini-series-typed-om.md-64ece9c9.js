import{S as ue,i as de,s as xe,C as wn,w as Ht,x as Pt,y as At,z as Se,A as qt,q as Nt,o as Dt,B as $t,r as fe,R as Ot,k as l,e as o,t as p,m as r,c as n,a as t,h as c,d as a,b as i,g as h,F as s,O as me}from"../../chunks/vendor-ea160616.js";import{B as _e}from"../../chunks/BlogLayout-1be3dc1e.js";import{T as Ce}from"../../chunks/TableOfContent-c4f5cb6e.js";import{_ as ge}from"../../chunks/twitter-card-image-a57df29d.js";import"../../chunks/stores-7d7fda0c.js";import"../../chunks/WebMentions-d768a574.js";/* empty css                                */function we(ts){let y,f,v,b,u,m,es,D,Os,Ra,ja,Us,Ka,Ba,ls,zt=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;div&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// browser needs to parse the string to understand and use it</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)">.height </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;5px&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// browser understands and use the value as 5px</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)">.height </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,Ja,Hs,Ps,Ya,Wa,rs,Rt=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">attributeStyleMap</span><span style="color: var(--shiki-token-function)">.set</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;color&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-color-text)">))</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// TypeError: Failed to set, invalid type for property</span></span></code></pre>`,Fa,As,Ns,Xa,Ga,is,jt=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">_5px</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">); </span><span style="color: var(--shiki-token-comment)">// 5px</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">_15px</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">_5px</span><span style="color: var(--shiki-token-function)">.add</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-color-text)">)); </span><span style="color: var(--shiki-token-comment)">// 15px;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;div&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)">.height </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> _15px;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// &lt;div style=&quot;height: 15px;&quot;&gt;&lt;/div&gt;</span></span></code></pre>`,Qa,$,Ds,Za,so,$s,ao,oo,ps,Kt=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// checking browser support</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-color-text)">.number) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// \u{1F60D} browser supports Typed OM!</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ma,M,zs,z,no,to,cs,Bt=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.querySelector</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;#app&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-token-function)">.computedStyleMap</span><span style="color: var(--shiki-color-text)">()</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;font-size&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// Specification: CSSUnitValue &#123; value: 2, unit: &#39;rem&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// Chrome: CSSUnitValue &#123; value: 32, unit: &#39;px&#39; &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-token-function)">.getComputedStyle</span><span style="color: var(--shiki-color-text)">(element).fontSize);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// &quot;32px&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;app&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">style</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;font-size: 2rem;&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,_a,x,Rs,R,eo,lo,js,Ks,ro,io,ks,Jt=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.querySelector</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;#app&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">inlineStyles</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-color-text)">.attributeStyleMap;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">inlineStyles</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;font-size&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// CSSUnitValue &#123; value: 2, unit: &#39;rem&#39; &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">inlineStyles</span><span style="color: var(--shiki-token-function)">.set</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;height&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// &lt;div id=&quot;app&quot; style=&quot;font-size: 2rem; height: 10px;&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">inlineStyles</span><span style="color: var(--shiki-token-function)">.clear</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// &lt;div id=&quot;app&quot; style=&quot;&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">inlineStyles</span><span style="color: var(--shiki-token-function)">.append</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;background-image&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;linear-gradient(yellow, green)&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">inlineStyles</span><span style="color: var(--shiki-token-function)">.append</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;background-image&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;linear-gradient(to bottom, blue, red)&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// &lt;div id=&quot;app&quot; </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">//   style=&quot;background-image: linear-gradient(yellow, green), </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">//                      linear-gradient(to bottom, blue, red)&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">inlineStyles</span><span style="color: var(--shiki-token-function)">.delete</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;background&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// &lt;div id=&quot;app&quot; style=&quot;&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">inlineStyles</span><span style="color: var(--shiki-token-function)">.has</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;opacity&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// false</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;app&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">style</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;font-size: 2rem;&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,po,vs,Yt=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// &#96;attributeStyleMap&#96; only gets inline style</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">attributeStyleMap</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;color&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// null</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-token-function)">.computedStyleMap</span><span style="color: var(--shiki-color-text)">()</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;color&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// CSSStyleValue &#123; /* red */ &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;app&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">style</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;font-size: 2rem;&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">style</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">#app</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">red</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">style</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,Ca,I,Bs,j,co,ko,d,Js,vo,ho,Ys,yo,uo,Ws,xo,So,Fs,fo,mo,Xs,_o,Co,Gs,go,ga,T,Qs,K,wo,Eo,hs,Wt=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">CSSStyleValue</span><span style="color: var(--shiki-token-function)">.parse</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;font-size&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;32px&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// CSSUnitValue &#123; value: 2, unit: &#39;px&#39; &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">CSSStyleValue</span><span style="color: var(--shiki-token-function)">.parse</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;transform&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;translate3d(10px, 20px, 30px) scale(1.5)&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">/* </span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">CSSTransformValue &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">  0: CSSTranslate &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">    is2D: false</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">    x: CSSUnitValue &#123; value: 10, unit: &#39;px&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">    y: CSSUnitValue &#123; value: 20, unit: &#39;px&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">    z: CSSUnitValue &#123; value: 30, unit: &#39;px&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">  1: CSSScale &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">    is2D: true</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">    x: CSSUnitValue &#123; value: 1.5, unit: &#39;number&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">    y: CSSUnitValue &#123; value: 1.5, unit: &#39;number&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">    z: CSSUnitValue &#123; value: 1, unit: &#39;number&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">*/</span></span></code></pre>`,wa,L,Zs,B,Vo,bo,sa,ys,Mo,us,Io,Ea,C,aa,J,To,Lo,oa,q,ds,qo,Oo,xs,Uo,Ho,Po,Ss,Ft=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">CSSStyleValue</span><span style="color: var(--shiki-token-function)">.parse</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;display&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;none&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// CSSKeywordValue &#123; value: &#39;none&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">keywordValue</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CSSKeywordValue</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;flex&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// CSSKeywordValue &#123; value: &#39;flex&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">keywordValue</span><span style="color: var(--shiki-color-text)">.value;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// &#39;flex&#39;</span></span></code></pre>`,Va,g,na,Y,Ao,No,ta,ea,Do,$o,fs,Xt=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// Convert units</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">48</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.to</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;in&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// CSSUnitValue &#123; value: 0.5, unit: &#39;in&#39; &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">48</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.to</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;rem&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Error</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Cannot transform absolute unit to relative unit</span></span></code></pre>`,ba,w,la,W,zo,Ro,ra,ia,jo,Ko,ms,Gt=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CSSMathSum</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-color-text)">)); </span><span style="color: var(--shiki-token-comment)">// 15px</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">attributeStyleMap</span><span style="color: var(--shiki-token-function)">.set</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;width&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CSSMathMax</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.rem</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">30</span><span style="color: var(--shiki-color-text)">)));</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// &lt;div style=&quot;width: max(10rem, 30px)&quot;&gt;&lt;/div&gt;</span></span></code></pre>`,Ma,O,pa,F,Bo,Jo,_s,Qt=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">position</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CSSPositionValue</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">20</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">50</span><span style="color: var(--shiki-color-text)">))</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">position</span><span style="color: var(--shiki-color-text)">.x; </span><span style="color: var(--shiki-token-comment)">// CSSUnitValue &#123; value: 20, unit: &#39;px&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">position</span><span style="color: var(--shiki-color-text)">.y; </span><span style="color: var(--shiki-token-comment)">// CSSUnitValue &#123; value: 50, unit: &#39;px&#39; &#125;</span></span></code></pre>`,Ia,E,ca,X,Yo,Wo,ka,va,Fo,Xo,Cs,Zt=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">transformValue</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSSStyleValue</span><span style="color: var(--shiki-token-function)">.parse</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;transform&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;translate3d(10px, 20px, 30px) scale(1.5)&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// iterate through each transformation</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">transform</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> transformValue) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(transform);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// CSSTranslate &#123; ... &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// CSSScale &#123; ... &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// get DOMMatrix out of the transformValue</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">transformValue</span><span style="color: var(--shiki-token-function)">.toMatrix</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// DOMMatrix\xA0&#123; a: 1.5, b: 0, c: 0, ... &#125;</span></span></code></pre>`,Ta,V,ha,G,Go,Qo,Q,ya,Zo,sn,ua,an,on,gs,se=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.querySelector</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;#app&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">attributeStyleMap</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;--length&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// CSSUnparsedValue &#123; 0: 3px &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;app&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">style</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;--length: 3px;&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,La,U,da,Z,nn,tn,_,ws,en,ss,ln,rn,Es,pn,as,cn,kn,H,vn,Vs,hn,yn,os,un,dn,P,xn,bs,Sn,fn,ns,mn,qa;return y=new Ce({props:{data:[{link:"css-typed-object-model-typed-om",title:"CSS Typed Object Model (Typed OM)"},{link:"computedstylemap",title:"computedStyleMap"},{link:"attributestylemap",title:"attributeStyleMap"},{link:"types-of-cssstylevalue",title:"Types of CSSStyleValue",nested:[{link:"create-cssstylevalue",title:"create CSSStyleValue"},{link:"cssimagevalue",title:"CSSImageValue"},{link:"csskeywordvalue",title:"CSSKeywordValue"},{link:"cssnumericvalue",title:"CSSNumericValue"},{link:"cssmathvalue",title:"CSSMathValue"},{link:"csspositionvalue",title:"CSSPositionValue"},{link:"csstransformvalue",title:"CSSTransformValue"},{link:"cssunparsedvalue",title:"CSSUnparsedValue"},{link:"references",title:"References"}]}]}}),{c(){Ht(y.$$.fragment),f=l(),v=o("section"),b=o("h2"),u=o("a"),m=p("CSS Typed Object Model (Typed OM)"),es=l(),D=o("ul"),Os=o("li"),Ra=p("CSS Typed OM API allow manipulating CSS styles through a typed JS representation rather than a simple string."),ja=l(),Us=o("li"),Ka=p("Provide performance win. Browser understands the structured JS representation and no longer needs to parse CSS string from scratch."),Ba=l(),ls=o("div"),Ja=l(),Hs=o("ul"),Ps=o("li"),Ya=p("Built-in error handling. You can't provide invalid value to a type."),Wa=l(),rs=o("div"),Fa=l(),As=o("ul"),Ns=o("li"),Xa=p("Rather than manipulating raw string, developer can create / transform CSS in a meaningful object"),Ga=l(),is=o("div"),Qa=l(),$=o("ul"),Ds=o("li"),Za=p("API based on functional programming concept"),so=l(),$s=o("li"),ao=p("To check browser support Typed OM, currently (21 Nov 2020) supported in Safari Tech Preview & Chromium"),oo=l(),ps=o("div"),ma=l(),M=o("section"),zs=o("h2"),z=o("a"),no=p("computedStyleMap"),to=l(),cs=o("div"),_a=l(),x=o("section"),Rs=o("h2"),R=o("a"),eo=p("attributeStyleMap"),lo=l(),js=o("ul"),Ks=o("li"),ro=p("parse, modify inline styles"),io=l(),ks=o("div"),po=l(),vs=o("div"),Ca=l(),I=o("section"),Bs=o("h2"),j=o("a"),co=p("Types of CSSStyleValue"),ko=l(),d=o("ul"),Js=o("li"),vo=p("CSSImageValue"),ho=l(),Ys=o("li"),yo=p("CSSKeywordValue"),uo=l(),Ws=o("li"),xo=p("CSSNumericValue"),So=l(),Fs=o("li"),fo=p("CSSPositionValue"),mo=l(),Xs=o("li"),_o=p("CSSTransformValue"),Co=l(),Gs=o("li"),go=p("CSSUnparsedValue"),ga=l(),T=o("section"),Qs=o("h3"),K=o("a"),wo=p("create CSSStyleValue"),Eo=l(),hs=o("div"),wa=l(),L=o("section"),Zs=o("h3"),B=o("a"),Vo=p("CSSImageValue"),bo=l(),sa=o("ul"),ys=o("li"),Mo=p("does not cover "),us=o("code"),Io=p("linear-gradient"),Ea=l(),C=o("section"),aa=o("h3"),J=o("a"),To=p("CSSKeywordValue"),Lo=l(),oa=o("ul"),q=o("li"),ds=o("code"),qo=p("display: none"),Oo=p(", "),xs=o("code"),Uo=p("none"),Ho=p(" is a CSSKeywordValue"),Po=l(),Ss=o("div"),Va=l(),g=o("section"),na=o("h3"),Y=o("a"),Ao=p("CSSNumericValue"),No=l(),ta=o("ul"),ea=o("li"),Do=p("CSSNumericValue has a few subclasses, eg: CSSUnitValue, CSSMathValue"),$o=l(),fs=o("div"),ba=l(),w=o("section"),la=o("h3"),W=o("a"),zo=p("CSSMathValue"),Ro=l(),ra=o("ul"),ia=o("li"),jo=p("CSSMathNegate, CSSMathMin, CSSMathMax, CSSMathSum, CSSMathProduct, CSSMathInvert"),Ko=l(),ms=o("div"),Ma=l(),O=o("section"),pa=o("h3"),F=o("a"),Bo=p("CSSPositionValue"),Jo=l(),_s=o("div"),Ia=l(),E=o("section"),ca=o("h3"),X=o("a"),Yo=p("CSSTransformValue"),Wo=l(),ka=o("ul"),va=o("li"),Fo=p("CSSTranslate, CSSScale, CSSRotate, CSSSkew, CSSSkewX, CSSSkewY, CSSPerspective, CSSMatrixComponent"),Xo=l(),Cs=o("div"),Ta=l(),V=o("section"),ha=o("h3"),G=o("a"),Go=p("CSSUnparsedValue"),Qo=l(),Q=o("ul"),ya=o("li"),Zo=p("CSSCustomProperty, that is not Houdini Property"),sn=l(),ua=o("li"),an=p("the value is parsed as string"),on=l(),gs=o("div"),La=l(),U=o("section"),da=o("h3"),Z=o("a"),nn=p("References"),tn=l(),_=o("ul"),ws=o("li"),en=p("Specifications "),ss=o("a"),ln=p("https://www.w3.org/TR/css-typed-om-1/"),rn=l(),Es=o("li"),pn=p("MDN "),as=o("a"),cn=p("https://developer.mozilla.org/en-US/docs/Web/API/CSS_Typed_OM_API"),kn=l(),H=o("li"),vn=p("caniuse "),Vs=o("code"),hn=p("attributeStyleMap"),yn=l(),os=o("a"),un=p("https://caniuse.com/mdn-api_element_attributestylemap"),dn=l(),P=o("li"),xn=p("caniuse "),bs=o("code"),Sn=p("computedStyleMap"),fn=l(),ns=o("a"),mn=p("https://caniuse.com/mdn-api_element_computedstylemap"),this.h()},l(e){Pt(y.$$.fragment,e),f=r(e),v=n(e,"SECTION",{});var k=t(v);b=n(k,"H2",{});var En=t(b);u=n(En,"A",{href:!0,id:!0});var Vn=t(u);m=c(Vn,"CSS Typed Object Model (Typed OM)"),Vn.forEach(a),En.forEach(a),es=r(k),D=n(k,"UL",{});var Oa=t(D);Os=n(Oa,"LI",{});var bn=t(Os);Ra=c(bn,"CSS Typed OM API allow manipulating CSS styles through a typed JS representation rather than a simple string."),bn.forEach(a),ja=r(Oa),Us=n(Oa,"LI",{});var Mn=t(Us);Ka=c(Mn,"Provide performance win. Browser understands the structured JS representation and no longer needs to parse CSS string from scratch."),Mn.forEach(a),Oa.forEach(a),Ba=r(k),ls=n(k,"DIV",{class:!0});var ae=t(ls);ae.forEach(a),Ja=r(k),Hs=n(k,"UL",{});var In=t(Hs);Ps=n(In,"LI",{});var Tn=t(Ps);Ya=c(Tn,"Built-in error handling. You can't provide invalid value to a type."),Tn.forEach(a),In.forEach(a),Wa=r(k),rs=n(k,"DIV",{class:!0});var oe=t(rs);oe.forEach(a),Fa=r(k),As=n(k,"UL",{});var Ln=t(As);Ns=n(Ln,"LI",{});var qn=t(Ns);Xa=c(qn,"Rather than manipulating raw string, developer can create / transform CSS in a meaningful object"),qn.forEach(a),Ln.forEach(a),Ga=r(k),is=n(k,"DIV",{class:!0});var ne=t(is);ne.forEach(a),Qa=r(k),$=n(k,"UL",{});var Ua=t($);Ds=n(Ua,"LI",{});var On=t(Ds);Za=c(On,"API based on functional programming concept"),On.forEach(a),so=r(Ua),$s=n(Ua,"LI",{});var Un=t($s);ao=c(Un,"To check browser support Typed OM, currently (21 Nov 2020) supported in Safari Tech Preview & Chromium"),Un.forEach(a),Ua.forEach(a),oo=r(k),ps=n(k,"DIV",{class:!0});var te=t(ps);te.forEach(a),k.forEach(a),ma=r(e),M=n(e,"SECTION",{});var Ha=t(M);zs=n(Ha,"H2",{});var Hn=t(zs);z=n(Hn,"A",{href:!0,id:!0});var Pn=t(z);no=c(Pn,"computedStyleMap"),Pn.forEach(a),Hn.forEach(a),to=r(Ha),cs=n(Ha,"DIV",{class:!0});var ee=t(cs);ee.forEach(a),Ha.forEach(a),_a=r(e),x=n(e,"SECTION",{});var A=t(x);Rs=n(A,"H2",{});var An=t(Rs);R=n(An,"A",{href:!0,id:!0});var Nn=t(R);eo=c(Nn,"attributeStyleMap"),Nn.forEach(a),An.forEach(a),lo=r(A),js=n(A,"UL",{});var Dn=t(js);Ks=n(Dn,"LI",{});var $n=t(Ks);ro=c($n,"parse, modify inline styles"),$n.forEach(a),Dn.forEach(a),io=r(A),ks=n(A,"DIV",{class:!0});var le=t(ks);le.forEach(a),po=r(A),vs=n(A,"DIV",{class:!0});var re=t(vs);re.forEach(a),A.forEach(a),Ca=r(e),I=n(e,"SECTION",{});var Pa=t(I);Bs=n(Pa,"H2",{});var zn=t(Bs);j=n(zn,"A",{href:!0,id:!0});var Rn=t(j);co=c(Rn,"Types of CSSStyleValue"),Rn.forEach(a),zn.forEach(a),ko=r(Pa),d=n(Pa,"UL",{});var S=t(d);Js=n(S,"LI",{});var jn=t(Js);vo=c(jn,"CSSImageValue"),jn.forEach(a),ho=r(S),Ys=n(S,"LI",{});var Kn=t(Ys);yo=c(Kn,"CSSKeywordValue"),Kn.forEach(a),uo=r(S),Ws=n(S,"LI",{});var Bn=t(Ws);xo=c(Bn,"CSSNumericValue"),Bn.forEach(a),So=r(S),Fs=n(S,"LI",{});var Jn=t(Fs);fo=c(Jn,"CSSPositionValue"),Jn.forEach(a),mo=r(S),Xs=n(S,"LI",{});var Yn=t(Xs);_o=c(Yn,"CSSTransformValue"),Yn.forEach(a),Co=r(S),Gs=n(S,"LI",{});var Wn=t(Gs);go=c(Wn,"CSSUnparsedValue"),Wn.forEach(a),S.forEach(a),Pa.forEach(a),ga=r(e),T=n(e,"SECTION",{});var Aa=t(T);Qs=n(Aa,"H3",{});var Fn=t(Qs);K=n(Fn,"A",{href:!0,id:!0});var Xn=t(K);wo=c(Xn,"create CSSStyleValue"),Xn.forEach(a),Fn.forEach(a),Eo=r(Aa),hs=n(Aa,"DIV",{class:!0});var ie=t(hs);ie.forEach(a),Aa.forEach(a),wa=r(e),L=n(e,"SECTION",{});var Na=t(L);Zs=n(Na,"H3",{});var Gn=t(Zs);B=n(Gn,"A",{href:!0,id:!0});var Qn=t(B);Vo=c(Qn,"CSSImageValue"),Qn.forEach(a),Gn.forEach(a),bo=r(Na),sa=n(Na,"UL",{});var Zn=t(sa);ys=n(Zn,"LI",{});var _n=t(ys);Mo=c(_n,"does not cover "),us=n(_n,"CODE",{class:!0});var st=t(us);Io=c(st,"linear-gradient"),st.forEach(a),_n.forEach(a),Zn.forEach(a),Na.forEach(a),Ea=r(e),C=n(e,"SECTION",{});var Ms=t(C);aa=n(Ms,"H3",{});var at=t(aa);J=n(at,"A",{href:!0,id:!0});var ot=t(J);To=c(ot,"CSSKeywordValue"),ot.forEach(a),at.forEach(a),Lo=r(Ms),oa=n(Ms,"UL",{});var nt=t(oa);q=n(nt,"LI",{});var xa=t(q);ds=n(xa,"CODE",{class:!0});var tt=t(ds);qo=c(tt,"display: none"),tt.forEach(a),Oo=c(xa,", "),xs=n(xa,"CODE",{class:!0});var et=t(xs);Uo=c(et,"none"),et.forEach(a),Ho=c(xa," is a CSSKeywordValue"),xa.forEach(a),nt.forEach(a),Po=r(Ms),Ss=n(Ms,"DIV",{class:!0});var pe=t(Ss);pe.forEach(a),Ms.forEach(a),Va=r(e),g=n(e,"SECTION",{});var Is=t(g);na=n(Is,"H3",{});var lt=t(na);Y=n(lt,"A",{href:!0,id:!0});var rt=t(Y);Ao=c(rt,"CSSNumericValue"),rt.forEach(a),lt.forEach(a),No=r(Is),ta=n(Is,"UL",{});var it=t(ta);ea=n(it,"LI",{});var pt=t(ea);Do=c(pt,"CSSNumericValue has a few subclasses, eg: CSSUnitValue, CSSMathValue"),pt.forEach(a),it.forEach(a),$o=r(Is),fs=n(Is,"DIV",{class:!0});var ce=t(fs);ce.forEach(a),Is.forEach(a),ba=r(e),w=n(e,"SECTION",{});var Ts=t(w);la=n(Ts,"H3",{});var ct=t(la);W=n(ct,"A",{href:!0,id:!0});var kt=t(W);zo=c(kt,"CSSMathValue"),kt.forEach(a),ct.forEach(a),Ro=r(Ts),ra=n(Ts,"UL",{});var vt=t(ra);ia=n(vt,"LI",{});var ht=t(ia);jo=c(ht,"CSSMathNegate, CSSMathMin, CSSMathMax, CSSMathSum, CSSMathProduct, CSSMathInvert"),ht.forEach(a),vt.forEach(a),Ko=r(Ts),ms=n(Ts,"DIV",{class:!0});var ke=t(ms);ke.forEach(a),Ts.forEach(a),Ma=r(e),O=n(e,"SECTION",{});var Da=t(O);pa=n(Da,"H3",{});var yt=t(pa);F=n(yt,"A",{href:!0,id:!0});var ut=t(F);Bo=c(ut,"CSSPositionValue"),ut.forEach(a),yt.forEach(a),Jo=r(Da),_s=n(Da,"DIV",{class:!0});var ve=t(_s);ve.forEach(a),Da.forEach(a),Ia=r(e),E=n(e,"SECTION",{});var Ls=t(E);ca=n(Ls,"H3",{});var dt=t(ca);X=n(dt,"A",{href:!0,id:!0});var xt=t(X);Yo=c(xt,"CSSTransformValue"),xt.forEach(a),dt.forEach(a),Wo=r(Ls),ka=n(Ls,"UL",{});var St=t(ka);va=n(St,"LI",{});var ft=t(va);Fo=c(ft,"CSSTranslate, CSSScale, CSSRotate, CSSSkew, CSSSkewX, CSSSkewY, CSSPerspective, CSSMatrixComponent"),ft.forEach(a),St.forEach(a),Xo=r(Ls),Cs=n(Ls,"DIV",{class:!0});var he=t(Cs);he.forEach(a),Ls.forEach(a),Ta=r(e),V=n(e,"SECTION",{});var qs=t(V);ha=n(qs,"H3",{});var mt=t(ha);G=n(mt,"A",{href:!0,id:!0});var _t=t(G);Go=c(_t,"CSSUnparsedValue"),_t.forEach(a),mt.forEach(a),Qo=r(qs),Q=n(qs,"UL",{});var $a=t(Q);ya=n($a,"LI",{});var Ct=t(ya);Zo=c(Ct,"CSSCustomProperty, that is not Houdini Property"),Ct.forEach(a),sn=r($a),ua=n($a,"LI",{});var gt=t(ua);an=c(gt,"the value is parsed as string"),gt.forEach(a),$a.forEach(a),on=r(qs),gs=n(qs,"DIV",{class:!0});var ye=t(gs);ye.forEach(a),qs.forEach(a),La=r(e),U=n(e,"SECTION",{});var za=t(U);da=n(za,"H3",{});var wt=t(da);Z=n(wt,"A",{href:!0,id:!0});var Et=t(Z);nn=c(Et,"References"),Et.forEach(a),wt.forEach(a),tn=r(za),_=n(za,"UL",{});var N=t(_);ws=n(N,"LI",{});var Cn=t(ws);en=c(Cn,"Specifications "),ss=n(Cn,"A",{href:!0,rel:!0});var Vt=t(ss);ln=c(Vt,"https://www.w3.org/TR/css-typed-om-1/"),Vt.forEach(a),Cn.forEach(a),rn=r(N),Es=n(N,"LI",{});var gn=t(Es);pn=c(gn,"MDN "),as=n(gn,"A",{href:!0,rel:!0});var bt=t(as);cn=c(bt,"https://developer.mozilla.org/en-US/docs/Web/API/CSS_Typed_OM_API"),bt.forEach(a),gn.forEach(a),kn=r(N),H=n(N,"LI",{});var Sa=t(H);vn=c(Sa,"caniuse "),Vs=n(Sa,"CODE",{class:!0});var Mt=t(Vs);hn=c(Mt,"attributeStyleMap"),Mt.forEach(a),yn=r(Sa),os=n(Sa,"A",{href:!0,rel:!0});var It=t(os);un=c(It,"https://caniuse.com/mdn-api_element_attributestylemap"),It.forEach(a),Sa.forEach(a),dn=r(N),P=n(N,"LI",{});var fa=t(P);xn=c(fa,"caniuse "),bs=n(fa,"CODE",{class:!0});var Tt=t(bs);Sn=c(Tt,"computedStyleMap"),Tt.forEach(a),fn=r(fa),ns=n(fa,"A",{href:!0,rel:!0});var Lt=t(ns);mn=c(Lt,"https://caniuse.com/mdn-api_element_computedstylemap"),Lt.forEach(a),fa.forEach(a),N.forEach(a),za.forEach(a),this.h()},h(){i(u,"href","#css-typed-object-model-typed-om"),i(u,"id","css-typed-object-model-typed-om"),i(ls,"class","code-section"),i(rs,"class","code-section"),i(is,"class","code-section"),i(ps,"class","code-section"),i(z,"href","#computedstylemap"),i(z,"id","computedstylemap"),i(cs,"class","code-section"),i(R,"href","#attributestylemap"),i(R,"id","attributestylemap"),i(ks,"class","code-section"),i(vs,"class","code-section"),i(j,"href","#types-of-cssstylevalue"),i(j,"id","types-of-cssstylevalue"),i(K,"href","#create-cssstylevalue"),i(K,"id","create-cssstylevalue"),i(hs,"class","code-section"),i(B,"href","#cssimagevalue"),i(B,"id","cssimagevalue"),i(us,"class","inline"),i(J,"href","#csskeywordvalue"),i(J,"id","csskeywordvalue"),i(ds,"class","inline"),i(xs,"class","inline"),i(Ss,"class","code-section"),i(Y,"href","#cssnumericvalue"),i(Y,"id","cssnumericvalue"),i(fs,"class","code-section"),i(W,"href","#cssmathvalue"),i(W,"id","cssmathvalue"),i(ms,"class","code-section"),i(F,"href","#csspositionvalue"),i(F,"id","csspositionvalue"),i(_s,"class","code-section"),i(X,"href","#csstransformvalue"),i(X,"id","csstransformvalue"),i(Cs,"class","code-section"),i(G,"href","#cssunparsedvalue"),i(G,"id","cssunparsedvalue"),i(gs,"class","code-section"),i(Z,"href","#references"),i(Z,"id","references"),i(ss,"href","https://www.w3.org/TR/css-typed-om-1/"),i(ss,"rel","nofollow"),i(as,"href","https://developer.mozilla.org/en-US/docs/Web/API/CSS_Typed_OM_API"),i(as,"rel","nofollow"),i(Vs,"class","inline"),i(os,"href","https://caniuse.com/mdn-api_element_attributestylemap"),i(os,"rel","nofollow"),i(bs,"class","inline"),i(ns,"href","https://caniuse.com/mdn-api_element_computedstylemap"),i(ns,"rel","nofollow")},m(e,k){At(y,e,k),h(e,f,k),h(e,v,k),s(v,b),s(b,u),s(u,m),s(v,es),s(v,D),s(D,Os),s(Os,Ra),s(D,ja),s(D,Us),s(Us,Ka),s(v,Ba),s(v,ls),ls.innerHTML=zt,s(v,Ja),s(v,Hs),s(Hs,Ps),s(Ps,Ya),s(v,Wa),s(v,rs),rs.innerHTML=Rt,s(v,Fa),s(v,As),s(As,Ns),s(Ns,Xa),s(v,Ga),s(v,is),is.innerHTML=jt,s(v,Qa),s(v,$),s($,Ds),s(Ds,Za),s($,so),s($,$s),s($s,ao),s(v,oo),s(v,ps),ps.innerHTML=Kt,h(e,ma,k),h(e,M,k),s(M,zs),s(zs,z),s(z,no),s(M,to),s(M,cs),cs.innerHTML=Bt,h(e,_a,k),h(e,x,k),s(x,Rs),s(Rs,R),s(R,eo),s(x,lo),s(x,js),s(js,Ks),s(Ks,ro),s(x,io),s(x,ks),ks.innerHTML=Jt,s(x,po),s(x,vs),vs.innerHTML=Yt,h(e,Ca,k),h(e,I,k),s(I,Bs),s(Bs,j),s(j,co),s(I,ko),s(I,d),s(d,Js),s(Js,vo),s(d,ho),s(d,Ys),s(Ys,yo),s(d,uo),s(d,Ws),s(Ws,xo),s(d,So),s(d,Fs),s(Fs,fo),s(d,mo),s(d,Xs),s(Xs,_o),s(d,Co),s(d,Gs),s(Gs,go),h(e,ga,k),h(e,T,k),s(T,Qs),s(Qs,K),s(K,wo),s(T,Eo),s(T,hs),hs.innerHTML=Wt,h(e,wa,k),h(e,L,k),s(L,Zs),s(Zs,B),s(B,Vo),s(L,bo),s(L,sa),s(sa,ys),s(ys,Mo),s(ys,us),s(us,Io),h(e,Ea,k),h(e,C,k),s(C,aa),s(aa,J),s(J,To),s(C,Lo),s(C,oa),s(oa,q),s(q,ds),s(ds,qo),s(q,Oo),s(q,xs),s(xs,Uo),s(q,Ho),s(C,Po),s(C,Ss),Ss.innerHTML=Ft,h(e,Va,k),h(e,g,k),s(g,na),s(na,Y),s(Y,Ao),s(g,No),s(g,ta),s(ta,ea),s(ea,Do),s(g,$o),s(g,fs),fs.innerHTML=Xt,h(e,ba,k),h(e,w,k),s(w,la),s(la,W),s(W,zo),s(w,Ro),s(w,ra),s(ra,ia),s(ia,jo),s(w,Ko),s(w,ms),ms.innerHTML=Gt,h(e,Ma,k),h(e,O,k),s(O,pa),s(pa,F),s(F,Bo),s(O,Jo),s(O,_s),_s.innerHTML=Qt,h(e,Ia,k),h(e,E,k),s(E,ca),s(ca,X),s(X,Yo),s(E,Wo),s(E,ka),s(ka,va),s(va,Fo),s(E,Xo),s(E,Cs),Cs.innerHTML=Zt,h(e,Ta,k),h(e,V,k),s(V,ha),s(ha,G),s(G,Go),s(V,Qo),s(V,Q),s(Q,ya),s(ya,Zo),s(Q,sn),s(Q,ua),s(ua,an),s(V,on),s(V,gs),gs.innerHTML=se,h(e,La,k),h(e,U,k),s(U,da),s(da,Z),s(Z,nn),s(U,tn),s(U,_),s(_,ws),s(ws,en),s(ws,ss),s(ss,ln),s(_,rn),s(_,Es),s(Es,pn),s(Es,as),s(as,cn),s(_,kn),s(_,H),s(H,vn),s(H,Vs),s(Vs,hn),s(H,yn),s(H,os),s(os,un),s(_,dn),s(_,P),s(P,xn),s(P,bs),s(bs,Sn),s(P,fn),s(P,ns),s(ns,mn),qa=!0},p:me,i(e){qa||(Nt(y.$$.fragment,e),qa=!0)},o(e){Dt(y.$$.fragment,e),qa=!1},d(e){$t(y,e),e&&a(f),e&&a(v),e&&a(ma),e&&a(M),e&&a(_a),e&&a(x),e&&a(Ca),e&&a(I),e&&a(ga),e&&a(T),e&&a(wa),e&&a(L),e&&a(Ea),e&&a(C),e&&a(Va),e&&a(g),e&&a(ba),e&&a(w),e&&a(Ma),e&&a(O),e&&a(Ia),e&&a(E),e&&a(Ta),e&&a(V),e&&a(La),e&&a(U)}}}function Ee(ts){let y,f;const v=[ts[0],Ut];let b={$$slots:{default:[we]},$$scope:{ctx:ts}};for(let u=0;u<v.length;u+=1)b=wn(b,v[u]);return y=new _e({props:b}),{c(){Ht(y.$$.fragment)},l(u){Pt(y.$$.fragment,u)},m(u,m){At(y,u,m),f=!0},p(u,[m]){const es=m&1?Se(v,[m&1&&qt(u[0]),m&0&&qt(Ut)]):{};m&2&&(es.$$scope={dirty:m,ctx:u}),y.$set(es)},i(u){f||(Nt(y.$$.fragment,u),f=!0)},o(u){Dt(y.$$.fragment,u),f=!1},d(u){$t(y,u)}}}const Ut={title:"The CSS Podcast: 027: Houdini Series: Typed Object Model",tags:["css houdini","The CSS Podcast"]};function Ve(ts,y,f){return fe("blog",{image:ge}),ts.$$set=v=>{f(0,y=wn(wn({},y),Ot(v)))},y=Ot(y),[y]}class Ue extends ue{constructor(y){super();de(this,y,Ve,Ee,xe,{})}}export{Ue as default,Ut as metadata};
