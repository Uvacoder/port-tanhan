import{S as as,i as ts,s as es,C as En,w as Bn,x as Vn,y as Jn,z as ps,A as Nn,q as Pn,o as Un,B as Kn,r as os,R as Mn,k as v,e as t,t as r,m,c as e,a as p,h as k,d as s,b as u,g as F,F as n,O as ls}from"../../chunks/vendor-6bf294e3.js";import{B as cs}from"../../chunks/BlogLayout-152f599b.js";import{T as is}from"../../chunks/TableOfContent-1b9e4572.js";import{_ as us}from"../../chunks/twitter-card-image-a57df29d.js";import"../../chunks/stores-e20b7872.js";import"../../chunks/WebMentions-745413ea.js";/* empty css                                */function rs(j){let o,f,c,_,l,y,$,x,Qn='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">	<span class="token keyword">let</span> lazyComponent<span class="token punctuation">;</span></div><div class="line"></div><div class="line">	<span class="token keyword">function</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">		lazyComponent <span class="token operator">=</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">./LazyComponent.svelte</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line">	<span class="token punctuation">&#125;</span></div><div class="line">	<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> lazyComponent<span class="token punctuation">&#125;</span></span></div><div class="line">	<span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">await</span> lazyComponent then <span class="token punctuation">&#123;</span> <span class="token keyword">default</span><span class="token operator">:</span> LazyComponent <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></div><div class="line">		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LazyComponent</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line">	<span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">await</span><span class="token punctuation">&#125;</span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>load<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Load<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> count <span class="token operator">++</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Increment<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div></code></pre>',X,I,Rn='<pre class="prism language-svelte"><code><div class="line"><span class="token comment">&lt;!-- LazyComponent.svelte --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">	<span class="token keyword">export</span> <span class="token keyword">let</span> count<span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span></div></code></pre>',U,w,N,E,Z,nn,M,A,sn,h,Y,an,tn,B,en,pn,V,on,K,i,J,b,ln,cn,L,z,un,T,rn,kn,D,dn,vn,C,mn,S,gn,fn,yn,P,_n,hn,q,Gn=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">	<span class="token keyword">import</span> LazyComponent <span class="token keyword">from</span> <span class="token string">'./LazyComponent.svelte'</span><span class="token punctuation">;</span></div><div class="line">	<span class="token keyword">let</span> load <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LazyComponent</span> </div><div class="line">	<span class="token attr-name">when=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>load<span class="token punctuation">&#125;</span></span></div><div class="line">	<span class="token attr-name">component=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./LoadMeLikeLazy.svelte'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> load <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Load<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div></code></pre>`,wn,O,Wn='<pre class="prism language-svelte"><code><div class="line"><span class="token comment">&lt;!-- filename: LazyComponent.svelte --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">	<span class="token keyword">export</span> <span class="token keyword">let</span> when <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></div><div class="line">	<span class="token keyword">export</span> <span class="token keyword">let</span> component<span class="token punctuation">;</span></div><div class="line"></div><div class="line">	<span class="token keyword">let</span> loading<span class="token punctuation">;</span></div><div class="line"></div><div class="line">	<span class="token literal-property property">$</span><span class="token operator">:</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>when<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">		<span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line">	<span class="token punctuation">&#125;</span></div><div class="line"></div><div class="line">	<span class="token keyword">function</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">		loading <span class="token operator">=</span> <span class="token function">component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line">	<span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> when<span class="token punctuation">&#125;</span></span></div><div class="line">	<span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">await</span> loading then <span class="token punctuation">&#123;</span> <span class="token keyword">default</span><span class="token operator">:</span> Component <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></div><div class="line">		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Component</span> <span class="token punctuation">/></span></span></div><div class="line">	<span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">await</span><span class="token punctuation">&#125;</span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></div></code></pre>',Q;return o=new is({props:{data:[{link:"lazy-loading-svelte-component",title:"Lazy Loading Svelte component",nested:[{link:"notes",title:"Notes"}]},{link:"dynamic-lazy-component",title:"Dynamic Lazy Component"}]}}),{c(){Bn(o.$$.fragment),f=v(),c=t("section"),_=t("h2"),l=t("a"),y=r("Lazy Loading Svelte component"),$=v(),x=t("div"),X=v(),I=t("div"),U=v(),w=t("section"),N=t("h3"),E=t("a"),Z=r("Notes"),nn=v(),M=t("ul"),A=t("li"),sn=r("For rollup users, dynamic imports only supported in the following output formats:"),h=t("ul"),Y=t("li"),an=r("esm"),tn=v(),B=t("li"),en=r("amd"),pn=v(),V=t("li"),on=r("systemjs"),K=v(),i=t("section"),J=t("h2"),b=t("a"),ln=r("Dynamic Lazy Component"),cn=v(),L=t("blockquote"),z=t("p"),un=r("This is great! I tried turning lazy loading into its own component, but got burned by dynamic imports of variables. Any thoughts on how this could work? "),T=t("a"),rn=r("pic.twitter.com/yCDadJYFqf"),kn=r("\u2014 sean mullen (@srmullen) "),D=t("a"),dn=r("August 12, 2020"),vn=v(),C=t("p"),mn=r("You can't use dynamic expressions for "),S=t("code"),gn=r("import()"),fn=r(" in rollup."),yn=v(),P=t("p"),_n=r("A better approach for dynamic lazy component would be passing in a function that will return a dynamic component"),hn=v(),q=t("div"),wn=v(),O=t("div"),this.h()},l(a){Vn(o.$$.fragment,a),f=m(a),c=e(a,"SECTION",{});var d=p(c);_=e(d,"H2",{});var bn=p(_);l=e(bn,"A",{href:!0,id:!0});var Cn=p(l);y=k(Cn,"Lazy Loading Svelte component"),Cn.forEach(s),bn.forEach(s),$=m(d),x=e(d,"DIV",{class:!0});var Xn=p(x);Xn.forEach(s),X=m(d),I=e(d,"DIV",{class:!0});var Zn=p(I);Zn.forEach(s),d.forEach(s),U=m(a),w=e(a,"SECTION",{});var R=p(w);N=e(R,"H3",{});var jn=p(N);E=e(jn,"A",{href:!0,id:!0});var $n=p(E);Z=k($n,"Notes"),$n.forEach(s),jn.forEach(s),nn=m(R),M=e(R,"UL",{});var xn=p(M);A=e(xn,"LI",{});var Ln=p(A);sn=k(Ln,"For rollup users, dynamic imports only supported in the following output formats:"),h=e(Ln,"UL",{});var H=p(h);Y=e(H,"LI",{});var In=p(Y);an=k(In,"esm"),In.forEach(s),tn=m(H),B=e(H,"LI",{});var An=p(B);en=k(An,"amd"),An.forEach(s),pn=m(H),V=e(H,"LI",{});var Tn=p(V);on=k(Tn,"systemjs"),Tn.forEach(s),H.forEach(s),Ln.forEach(s),xn.forEach(s),R.forEach(s),K=m(a),i=e(a,"SECTION",{});var g=p(i);J=e(g,"H2",{});var Dn=p(J);b=e(Dn,"A",{href:!0,id:!0});var Sn=p(b);ln=k(Sn,"Dynamic Lazy Component"),Sn.forEach(s),Dn.forEach(s),cn=m(g),L=e(g,"BLOCKQUOTE",{class:!0});var G=p(L);z=e(G,"P",{lang:!0,dir:!0});var zn=p(z);un=k(zn,"This is great! I tried turning lazy loading into its own component, but got burned by dynamic imports of variables. Any thoughts on how this could work? "),T=e(zn,"A",{href:!0});var qn=p(T);rn=k(qn,"pic.twitter.com/yCDadJYFqf"),qn.forEach(s),zn.forEach(s),kn=k(G,"\u2014 sean mullen (@srmullen) "),D=e(G,"A",{href:!0});var On=p(D);dn=k(On,"August 12, 2020"),On.forEach(s),G.forEach(s),vn=m(g),C=e(g,"P",{});var W=p(C);mn=k(W,"You can't use dynamic expressions for "),S=e(W,"CODE",{class:!0});var Hn=p(S);gn=k(Hn,"import()"),Hn.forEach(s),fn=k(W," in rollup."),W.forEach(s),yn=m(g),P=e(g,"P",{});var Fn=p(P);_n=k(Fn,"A better approach for dynamic lazy component would be passing in a function that will return a dynamic component"),Fn.forEach(s),hn=m(g),q=e(g,"DIV",{class:!0});var ns=p(q);ns.forEach(s),wn=m(g),O=e(g,"DIV",{class:!0});var ss=p(O);ss.forEach(s),g.forEach(s),this.h()},h(){u(l,"href","#lazy-loading-svelte-component"),u(l,"id","lazy-loading-svelte-component"),u(x,"class","code-section"),u(I,"class","code-section"),u(E,"href","#notes"),u(E,"id","notes"),u(b,"href","#dynamic-lazy-component"),u(b,"id","dynamic-lazy-component"),u(T,"href","https://t.co/yCDadJYFqf"),u(z,"lang","en"),u(z,"dir","ltr"),u(D,"href","https://twitter.com/srmullen/status/1293549224676777984?ref_src=twsrc%5Etfw"),u(L,"class","twitter-tweet"),u(S,"class","inline"),u(q,"class","code-section"),u(O,"class","code-section")},m(a,d){Jn(o,a,d),F(a,f,d),F(a,c,d),n(c,_),n(_,l),n(l,y),n(c,$),n(c,x),x.innerHTML=Qn,n(c,X),n(c,I),I.innerHTML=Rn,F(a,U,d),F(a,w,d),n(w,N),n(N,E),n(E,Z),n(w,nn),n(w,M),n(M,A),n(A,sn),n(A,h),n(h,Y),n(Y,an),n(h,tn),n(h,B),n(B,en),n(h,pn),n(h,V),n(V,on),F(a,K,d),F(a,i,d),n(i,J),n(J,b),n(b,ln),n(i,cn),n(i,L),n(L,z),n(z,un),n(z,T),n(T,rn),n(L,kn),n(L,D),n(D,dn),n(i,vn),n(i,C),n(C,mn),n(C,S),n(S,gn),n(C,fn),n(i,yn),n(i,P),n(P,_n),n(i,hn),n(i,q),q.innerHTML=Gn,n(i,wn),n(i,O),O.innerHTML=Wn,Q=!0},p:ls,i(a){Q||(Pn(o.$$.fragment,a),Q=!0)},o(a){Un(o.$$.fragment,a),Q=!1},d(a){Kn(o,a),a&&s(f),a&&s(c),a&&s(U),a&&s(w),a&&s(K),a&&s(i)}}}function ks(j){let o,f;const c=[j[0],Yn];let _={$$slots:{default:[rs]},$$scope:{ctx:j}};for(let l=0;l<c.length;l+=1)_=En(_,c[l]);return o=new cs({props:_}),{c(){Bn(o.$$.fragment)},l(l){Vn(o.$$.fragment,l)},m(l,y){Jn(o,l,y),f=!0},p(l,[y]){const $=y&1?ps(c,[y&1&&Nn(l[0]),y&0&&Nn(Yn)]):{};y&2&&($.$$scope={dirty:y,ctx:l}),o.$set($)},i(l){f||(Pn(o.$$.fragment,l),f=!0)},o(l){Un(o.$$.fragment,l),f=!1},d(l){Kn(o,l)}}}const Yn={title:"Lazy Loading Svelte component",tags:["lazy load","svelte"]};function ds(j,o,f){return os("blog",{image:us}),j.$$set=c=>{f(0,o=En(En({},o),Mn(c)))},o=Mn(o),[o]}class ws extends as{constructor(o){super();ts(this,o,ds,ks,es,{})}}export{ws as default,Yn as metadata};
