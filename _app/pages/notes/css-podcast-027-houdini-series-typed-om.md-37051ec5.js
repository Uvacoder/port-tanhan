import{S as ut,i as dt,s as St,C as wn,w as Pe,x as He,y as Ae,z as xt,A as qe,q as Ne,o as De,B as $e,r as ft,R as Oe,k as l,e as o,t as p,m as r,c as n,a as e,h as c,d as a,b as i,g as h,F as s,O as mt}from"../../chunks/vendor-569a3c5c.js";import{B as _t}from"../../chunks/BlogLayout-17b76cb2.js";import{T as Ct}from"../../chunks/TableOfContent-dbc18cb8.js";import{_ as gt}from"../../chunks/twitter-card-image-a57df29d.js";import"../../chunks/stores-ee936cd4.js";import"../../chunks/WebMentions-968cc380.js";/* empty css                                */function wt(es){let y,f,v,b,u,m,ts,D,Os,ja,Ra,Us,Ka,Ba,ls,ze=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;div&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// browser needs to parse the string to understand and use it</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)">.height </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;5px&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// browser understands and use the value as 5px</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)">.height </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,Ja,Ps,Hs,Ya,Wa,rs,je=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">attributeStyleMap</span><span style="color: var(--shiki-token-function)">.set</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;color&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-color-text)">))</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// TypeError: Failed to set, invalid type for property</span></span></code></pre>`,Fa,As,Ns,Xa,Ga,is,Re=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">_5px</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">); </span><span style="color: var(--shiki-token-comment)">// 5px</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">_15px</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">_5px</span><span style="color: var(--shiki-token-function)">.add</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-color-text)">)); </span><span style="color: var(--shiki-token-comment)">// 15px;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.createElement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;div&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">style</span><span style="color: var(--shiki-color-text)">.height </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> _15px;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// &lt;div style=&quot;height: 15px;&quot;&gt;&lt;/div&gt;</span></span></code></pre>`,Qa,$,Ds,Za,so,$s,ao,oo,ps,Ke=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// checking browser support</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-color-text)">.number) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// \u{1F60D} browser supports Typed OM!</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ma,M,zs,z,no,eo,cs,Be=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.querySelector</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;#app&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-token-function)">.computedStyleMap</span><span style="color: var(--shiki-color-text)">()</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;font-size&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// Specification: CSSUnitValue &#123; value: 2, unit: &#39;rem&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// Chrome: CSSUnitValue &#123; value: 32, unit: &#39;px&#39; &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-token-function)">.getComputedStyle</span><span style="color: var(--shiki-color-text)">(element).fontSize);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// &quot;32px&quot;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;app&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">style</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;font-size: 2rem;&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,_a,S,js,j,to,lo,Rs,Ks,ro,io,ks,Je=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.querySelector</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;#app&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">inlineStyles</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-color-text)">.attributeStyleMap;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">inlineStyles</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;font-size&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// CSSUnitValue &#123; value: 2, unit: &#39;rem&#39; &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">inlineStyles</span><span style="color: var(--shiki-token-function)">.set</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;height&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// &lt;div id=&quot;app&quot; style=&quot;font-size: 2rem; height: 10px;&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">inlineStyles</span><span style="color: var(--shiki-token-function)">.clear</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// &lt;div id=&quot;app&quot; style=&quot;&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">inlineStyles</span><span style="color: var(--shiki-token-function)">.append</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;background-image&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;linear-gradient(yellow, green)&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">inlineStyles</span><span style="color: var(--shiki-token-function)">.append</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;background-image&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;linear-gradient(to bottom, blue, red)&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// &lt;div id=&quot;app&quot; </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">//   style=&quot;background-image: linear-gradient(yellow, green), </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">//                      linear-gradient(to bottom, blue, red)&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">inlineStyles</span><span style="color: var(--shiki-token-function)">.delete</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;background&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// &lt;div id=&quot;app&quot; style=&quot;&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">inlineStyles</span><span style="color: var(--shiki-token-function)">.has</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;opacity&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// false</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;app&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">style</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;font-size: 2rem;&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,po,vs,Ye=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// &#96;attributeStyleMap&#96; only gets inline style</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">attributeStyleMap</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;color&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// null</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-token-function)">.computedStyleMap</span><span style="color: var(--shiki-color-text)">()</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;color&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// CSSStyleValue &#123; /* red */ &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;app&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">style</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;font-size: 2rem;&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">style</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">#app</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">color</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">red</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">style</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,Ca,T,Bs,R,co,ko,d,Js,vo,ho,Ys,yo,uo,Ws,So,xo,Fs,fo,mo,Xs,_o,Co,Gs,go,ga,I,Qs,K,wo,Eo,hs,We=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">CSSStyleValue</span><span style="color: var(--shiki-token-function)">.parse</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;font-size&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;32px&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// CSSUnitValue &#123; value: 2, unit: &#39;px&#39; &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">CSSStyleValue</span><span style="color: var(--shiki-token-function)">.parse</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;transform&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;translate3d(10px, 20px, 30px) scale(1.5)&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">/* </span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">CSSTransformValue &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">  0: CSSTranslate &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">    is2D: false</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">    x: CSSUnitValue &#123; value: 10, unit: &#39;px&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">    y: CSSUnitValue &#123; value: 20, unit: &#39;px&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">    z: CSSUnitValue &#123; value: 30, unit: &#39;px&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">  1: CSSScale &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">    is2D: true</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">    x: CSSUnitValue &#123; value: 1.5, unit: &#39;number&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">    y: CSSUnitValue &#123; value: 1.5, unit: &#39;number&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">    z: CSSUnitValue &#123; value: 1, unit: &#39;number&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">*/</span></span></code></pre>`,wa,L,Zs,B,Vo,bo,sa,ys,Mo,us,To,Ea,C,aa,J,Io,Lo,oa,q,ds,qo,Oo,Ss,Uo,Po,Ho,xs,Fe=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">CSSStyleValue</span><span style="color: var(--shiki-token-function)">.parse</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;display&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;none&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// CSSKeywordValue &#123; value: &#39;none&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">keywordValue</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CSSKeywordValue</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;flex&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// CSSKeywordValue &#123; value: &#39;flex&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">keywordValue</span><span style="color: var(--shiki-color-text)">.value;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// &#39;flex&#39;</span></span></code></pre>`,Va,g,na,Y,Ao,No,ea,ta,Do,$o,fs,Xe=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// Convert units</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">48</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.to</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;in&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// CSSUnitValue &#123; value: 0.5, unit: &#39;in&#39; &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">48</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.to</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;rem&#39;</span><span style="color: var(--shiki-color-text)">)</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Error</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Cannot transform absolute unit to relative unit</span></span></code></pre>`,ba,w,la,W,zo,jo,ra,ia,Ro,Ko,ms,Ge=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CSSMathSum</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-color-text)">)); </span><span style="color: var(--shiki-token-comment)">// 15px</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">attributeStyleMap</span><span style="color: var(--shiki-token-function)">.set</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;width&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CSSMathMax</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.rem</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">10</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">30</span><span style="color: var(--shiki-color-text)">)));</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// &lt;div style=&quot;width: max(10rem, 30px)&quot;&gt;&lt;/div&gt;</span></span></code></pre>`,Ma,O,pa,F,Bo,Jo,_s,Qe=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">position</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CSSPositionValue</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">20</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.px</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">50</span><span style="color: var(--shiki-color-text)">))</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">position</span><span style="color: var(--shiki-color-text)">.x; </span><span style="color: var(--shiki-token-comment)">// CSSUnitValue &#123; value: 20, unit: &#39;px&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">position</span><span style="color: var(--shiki-color-text)">.y; </span><span style="color: var(--shiki-token-comment)">// CSSUnitValue &#123; value: 50, unit: &#39;px&#39; &#125;</span></span></code></pre>`,Ta,E,ca,X,Yo,Wo,ka,va,Fo,Xo,Cs,Ze=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">transformValue</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">CSSStyleValue</span><span style="color: var(--shiki-token-function)">.parse</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;transform&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;translate3d(10px, 20px, 30px) scale(1.5)&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// iterate through each transformation</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">transform</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> transformValue) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(transform);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// CSSTranslate &#123; ... &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// CSSScale &#123; ... &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// get DOMMatrix out of the transformValue</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">transformValue</span><span style="color: var(--shiki-token-function)">.toMatrix</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// DOMMatrix\xA0&#123; a: 1.5, b: 0, c: 0, ... &#125;</span></span></code></pre>`,Ia,V,ha,G,Go,Qo,Q,ya,Zo,sn,ua,an,on,gs,st=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.querySelector</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;#app&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">attributeStyleMap</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;--length&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// CSSUnparsedValue &#123; 0: 3px &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;app&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">style</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;--length: 3px;&quot;</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,La,U,da,Z,nn,en,_,ws,tn,ss,ln,rn,Es,pn,as,cn,kn,P,vn,Vs,hn,yn,os,un,dn,H,Sn,bs,xn,fn,ns,mn,qa;return y=new Ct({props:{data:[{link:"css-typed-object-model-typed-om",title:"CSS Typed Object Model (Typed OM)"},{link:"computedstylemap",title:"computedStyleMap"},{link:"attributestylemap",title:"attributeStyleMap"},{link:"types-of-cssstylevalue",title:"Types of CSSStyleValue",nested:[{link:"create-cssstylevalue",title:"create CSSStyleValue"},{link:"cssimagevalue",title:"CSSImageValue"},{link:"csskeywordvalue",title:"CSSKeywordValue"},{link:"cssnumericvalue",title:"CSSNumericValue"},{link:"cssmathvalue",title:"CSSMathValue"},{link:"csspositionvalue",title:"CSSPositionValue"},{link:"csstransformvalue",title:"CSSTransformValue"},{link:"cssunparsedvalue",title:"CSSUnparsedValue"},{link:"references",title:"References"}]}]}}),{c(){Pe(y.$$.fragment),f=l(),v=o("section"),b=o("h2"),u=o("a"),m=p("CSS Typed Object Model (Typed OM)"),ts=l(),D=o("ul"),Os=o("li"),ja=p("CSS Typed OM API allow manipulating CSS styles through a typed JS representation rather than a simple string."),Ra=l(),Us=o("li"),Ka=p("Provide performance win. Browser understands the structured JS representation and no longer needs to parse CSS string from scratch."),Ba=l(),ls=o("div"),Ja=l(),Ps=o("ul"),Hs=o("li"),Ya=p("Built-in error handling. You can't provide invalid value to a type."),Wa=l(),rs=o("div"),Fa=l(),As=o("ul"),Ns=o("li"),Xa=p("Rather than manipulating raw string, developer can create / transform CSS in a meaningful object"),Ga=l(),is=o("div"),Qa=l(),$=o("ul"),Ds=o("li"),Za=p("API based on functional programming concept"),so=l(),$s=o("li"),ao=p("To check browser support Typed OM, currently (21 Nov 2020) supported in Safari Tech Preview & Chromium"),oo=l(),ps=o("div"),ma=l(),M=o("section"),zs=o("h2"),z=o("a"),no=p("computedStyleMap"),eo=l(),cs=o("div"),_a=l(),S=o("section"),js=o("h2"),j=o("a"),to=p("attributeStyleMap"),lo=l(),Rs=o("ul"),Ks=o("li"),ro=p("parse, modify inline styles"),io=l(),ks=o("div"),po=l(),vs=o("div"),Ca=l(),T=o("section"),Bs=o("h2"),R=o("a"),co=p("Types of CSSStyleValue"),ko=l(),d=o("ul"),Js=o("li"),vo=p("CSSImageValue"),ho=l(),Ys=o("li"),yo=p("CSSKeywordValue"),uo=l(),Ws=o("li"),So=p("CSSNumericValue"),xo=l(),Fs=o("li"),fo=p("CSSPositionValue"),mo=l(),Xs=o("li"),_o=p("CSSTransformValue"),Co=l(),Gs=o("li"),go=p("CSSUnparsedValue"),ga=l(),I=o("section"),Qs=o("h3"),K=o("a"),wo=p("create CSSStyleValue"),Eo=l(),hs=o("div"),wa=l(),L=o("section"),Zs=o("h3"),B=o("a"),Vo=p("CSSImageValue"),bo=l(),sa=o("ul"),ys=o("li"),Mo=p("does not cover "),us=o("code"),To=p("linear-gradient"),Ea=l(),C=o("section"),aa=o("h3"),J=o("a"),Io=p("CSSKeywordValue"),Lo=l(),oa=o("ul"),q=o("li"),ds=o("code"),qo=p("display: none"),Oo=p(", "),Ss=o("code"),Uo=p("none"),Po=p(" is a CSSKeywordValue"),Ho=l(),xs=o("div"),Va=l(),g=o("section"),na=o("h3"),Y=o("a"),Ao=p("CSSNumericValue"),No=l(),ea=o("ul"),ta=o("li"),Do=p("CSSNumericValue has a few subclasses, eg: CSSUnitValue, CSSMathValue"),$o=l(),fs=o("div"),ba=l(),w=o("section"),la=o("h3"),W=o("a"),zo=p("CSSMathValue"),jo=l(),ra=o("ul"),ia=o("li"),Ro=p("CSSMathNegate, CSSMathMin, CSSMathMax, CSSMathSum, CSSMathProduct, CSSMathInvert"),Ko=l(),ms=o("div"),Ma=l(),O=o("section"),pa=o("h3"),F=o("a"),Bo=p("CSSPositionValue"),Jo=l(),_s=o("div"),Ta=l(),E=o("section"),ca=o("h3"),X=o("a"),Yo=p("CSSTransformValue"),Wo=l(),ka=o("ul"),va=o("li"),Fo=p("CSSTranslate, CSSScale, CSSRotate, CSSSkew, CSSSkewX, CSSSkewY, CSSPerspective, CSSMatrixComponent"),Xo=l(),Cs=o("div"),Ia=l(),V=o("section"),ha=o("h3"),G=o("a"),Go=p("CSSUnparsedValue"),Qo=l(),Q=o("ul"),ya=o("li"),Zo=p("CSSCustomProperty, that is not Houdini Property"),sn=l(),ua=o("li"),an=p("the value is parsed as string"),on=l(),gs=o("div"),La=l(),U=o("section"),da=o("h3"),Z=o("a"),nn=p("References"),en=l(),_=o("ul"),ws=o("li"),tn=p("Specifications "),ss=o("a"),ln=p("https://www.w3.org/TR/css-typed-om-1/"),rn=l(),Es=o("li"),pn=p("MDN "),as=o("a"),cn=p("https://developer.mozilla.org/en-US/docs/Web/API/CSS_Typed_OM_API"),kn=l(),P=o("li"),vn=p("caniuse "),Vs=o("code"),hn=p("attributeStyleMap"),yn=l(),os=o("a"),un=p("https://caniuse.com/mdn-api_element_attributestylemap"),dn=l(),H=o("li"),Sn=p("caniuse "),bs=o("code"),xn=p("computedStyleMap"),fn=l(),ns=o("a"),mn=p("https://caniuse.com/mdn-api_element_computedstylemap"),this.h()},l(t){He(y.$$.fragment,t),f=r(t),v=n(t,"SECTION",{});var k=e(v);b=n(k,"H2",{});var En=e(b);u=n(En,"A",{href:!0,id:!0});var Vn=e(u);m=c(Vn,"CSS Typed Object Model (Typed OM)"),Vn.forEach(a),En.forEach(a),ts=r(k),D=n(k,"UL",{});var Oa=e(D);Os=n(Oa,"LI",{});var bn=e(Os);ja=c(bn,"CSS Typed OM API allow manipulating CSS styles through a typed JS representation rather than a simple string."),bn.forEach(a),Ra=r(Oa),Us=n(Oa,"LI",{});var Mn=e(Us);Ka=c(Mn,"Provide performance win. Browser understands the structured JS representation and no longer needs to parse CSS string from scratch."),Mn.forEach(a),Oa.forEach(a),Ba=r(k),ls=n(k,"DIV",{class:!0});var at=e(ls);at.forEach(a),Ja=r(k),Ps=n(k,"UL",{});var Tn=e(Ps);Hs=n(Tn,"LI",{});var In=e(Hs);Ya=c(In,"Built-in error handling. You can't provide invalid value to a type."),In.forEach(a),Tn.forEach(a),Wa=r(k),rs=n(k,"DIV",{class:!0});var ot=e(rs);ot.forEach(a),Fa=r(k),As=n(k,"UL",{});var Ln=e(As);Ns=n(Ln,"LI",{});var qn=e(Ns);Xa=c(qn,"Rather than manipulating raw string, developer can create / transform CSS in a meaningful object"),qn.forEach(a),Ln.forEach(a),Ga=r(k),is=n(k,"DIV",{class:!0});var nt=e(is);nt.forEach(a),Qa=r(k),$=n(k,"UL",{});var Ua=e($);Ds=n(Ua,"LI",{});var On=e(Ds);Za=c(On,"API based on functional programming concept"),On.forEach(a),so=r(Ua),$s=n(Ua,"LI",{});var Un=e($s);ao=c(Un,"To check browser support Typed OM, currently (21 Nov 2020) supported in Safari Tech Preview & Chromium"),Un.forEach(a),Ua.forEach(a),oo=r(k),ps=n(k,"DIV",{class:!0});var et=e(ps);et.forEach(a),k.forEach(a),ma=r(t),M=n(t,"SECTION",{});var Pa=e(M);zs=n(Pa,"H2",{});var Pn=e(zs);z=n(Pn,"A",{href:!0,id:!0});var Hn=e(z);no=c(Hn,"computedStyleMap"),Hn.forEach(a),Pn.forEach(a),eo=r(Pa),cs=n(Pa,"DIV",{class:!0});var tt=e(cs);tt.forEach(a),Pa.forEach(a),_a=r(t),S=n(t,"SECTION",{});var A=e(S);js=n(A,"H2",{});var An=e(js);j=n(An,"A",{href:!0,id:!0});var Nn=e(j);to=c(Nn,"attributeStyleMap"),Nn.forEach(a),An.forEach(a),lo=r(A),Rs=n(A,"UL",{});var Dn=e(Rs);Ks=n(Dn,"LI",{});var $n=e(Ks);ro=c($n,"parse, modify inline styles"),$n.forEach(a),Dn.forEach(a),io=r(A),ks=n(A,"DIV",{class:!0});var lt=e(ks);lt.forEach(a),po=r(A),vs=n(A,"DIV",{class:!0});var rt=e(vs);rt.forEach(a),A.forEach(a),Ca=r(t),T=n(t,"SECTION",{});var Ha=e(T);Bs=n(Ha,"H2",{});var zn=e(Bs);R=n(zn,"A",{href:!0,id:!0});var jn=e(R);co=c(jn,"Types of CSSStyleValue"),jn.forEach(a),zn.forEach(a),ko=r(Ha),d=n(Ha,"UL",{});var x=e(d);Js=n(x,"LI",{});var Rn=e(Js);vo=c(Rn,"CSSImageValue"),Rn.forEach(a),ho=r(x),Ys=n(x,"LI",{});var Kn=e(Ys);yo=c(Kn,"CSSKeywordValue"),Kn.forEach(a),uo=r(x),Ws=n(x,"LI",{});var Bn=e(Ws);So=c(Bn,"CSSNumericValue"),Bn.forEach(a),xo=r(x),Fs=n(x,"LI",{});var Jn=e(Fs);fo=c(Jn,"CSSPositionValue"),Jn.forEach(a),mo=r(x),Xs=n(x,"LI",{});var Yn=e(Xs);_o=c(Yn,"CSSTransformValue"),Yn.forEach(a),Co=r(x),Gs=n(x,"LI",{});var Wn=e(Gs);go=c(Wn,"CSSUnparsedValue"),Wn.forEach(a),x.forEach(a),Ha.forEach(a),ga=r(t),I=n(t,"SECTION",{});var Aa=e(I);Qs=n(Aa,"H3",{});var Fn=e(Qs);K=n(Fn,"A",{href:!0,id:!0});var Xn=e(K);wo=c(Xn,"create CSSStyleValue"),Xn.forEach(a),Fn.forEach(a),Eo=r(Aa),hs=n(Aa,"DIV",{class:!0});var it=e(hs);it.forEach(a),Aa.forEach(a),wa=r(t),L=n(t,"SECTION",{});var Na=e(L);Zs=n(Na,"H3",{});var Gn=e(Zs);B=n(Gn,"A",{href:!0,id:!0});var Qn=e(B);Vo=c(Qn,"CSSImageValue"),Qn.forEach(a),Gn.forEach(a),bo=r(Na),sa=n(Na,"UL",{});var Zn=e(sa);ys=n(Zn,"LI",{});var _n=e(ys);Mo=c(_n,"does not cover "),us=n(_n,"CODE",{class:!0});var se=e(us);To=c(se,"linear-gradient"),se.forEach(a),_n.forEach(a),Zn.forEach(a),Na.forEach(a),Ea=r(t),C=n(t,"SECTION",{});var Ms=e(C);aa=n(Ms,"H3",{});var ae=e(aa);J=n(ae,"A",{href:!0,id:!0});var oe=e(J);Io=c(oe,"CSSKeywordValue"),oe.forEach(a),ae.forEach(a),Lo=r(Ms),oa=n(Ms,"UL",{});var ne=e(oa);q=n(ne,"LI",{});var Sa=e(q);ds=n(Sa,"CODE",{class:!0});var ee=e(ds);qo=c(ee,"display: none"),ee.forEach(a),Oo=c(Sa,", "),Ss=n(Sa,"CODE",{class:!0});var te=e(Ss);Uo=c(te,"none"),te.forEach(a),Po=c(Sa," is a CSSKeywordValue"),Sa.forEach(a),ne.forEach(a),Ho=r(Ms),xs=n(Ms,"DIV",{class:!0});var pt=e(xs);pt.forEach(a),Ms.forEach(a),Va=r(t),g=n(t,"SECTION",{});var Ts=e(g);na=n(Ts,"H3",{});var le=e(na);Y=n(le,"A",{href:!0,id:!0});var re=e(Y);Ao=c(re,"CSSNumericValue"),re.forEach(a),le.forEach(a),No=r(Ts),ea=n(Ts,"UL",{});var ie=e(ea);ta=n(ie,"LI",{});var pe=e(ta);Do=c(pe,"CSSNumericValue has a few subclasses, eg: CSSUnitValue, CSSMathValue"),pe.forEach(a),ie.forEach(a),$o=r(Ts),fs=n(Ts,"DIV",{class:!0});var ct=e(fs);ct.forEach(a),Ts.forEach(a),ba=r(t),w=n(t,"SECTION",{});var Is=e(w);la=n(Is,"H3",{});var ce=e(la);W=n(ce,"A",{href:!0,id:!0});var ke=e(W);zo=c(ke,"CSSMathValue"),ke.forEach(a),ce.forEach(a),jo=r(Is),ra=n(Is,"UL",{});var ve=e(ra);ia=n(ve,"LI",{});var he=e(ia);Ro=c(he,"CSSMathNegate, CSSMathMin, CSSMathMax, CSSMathSum, CSSMathProduct, CSSMathInvert"),he.forEach(a),ve.forEach(a),Ko=r(Is),ms=n(Is,"DIV",{class:!0});var kt=e(ms);kt.forEach(a),Is.forEach(a),Ma=r(t),O=n(t,"SECTION",{});var Da=e(O);pa=n(Da,"H3",{});var ye=e(pa);F=n(ye,"A",{href:!0,id:!0});var ue=e(F);Bo=c(ue,"CSSPositionValue"),ue.forEach(a),ye.forEach(a),Jo=r(Da),_s=n(Da,"DIV",{class:!0});var vt=e(_s);vt.forEach(a),Da.forEach(a),Ta=r(t),E=n(t,"SECTION",{});var Ls=e(E);ca=n(Ls,"H3",{});var de=e(ca);X=n(de,"A",{href:!0,id:!0});var Se=e(X);Yo=c(Se,"CSSTransformValue"),Se.forEach(a),de.forEach(a),Wo=r(Ls),ka=n(Ls,"UL",{});var xe=e(ka);va=n(xe,"LI",{});var fe=e(va);Fo=c(fe,"CSSTranslate, CSSScale, CSSRotate, CSSSkew, CSSSkewX, CSSSkewY, CSSPerspective, CSSMatrixComponent"),fe.forEach(a),xe.forEach(a),Xo=r(Ls),Cs=n(Ls,"DIV",{class:!0});var ht=e(Cs);ht.forEach(a),Ls.forEach(a),Ia=r(t),V=n(t,"SECTION",{});var qs=e(V);ha=n(qs,"H3",{});var me=e(ha);G=n(me,"A",{href:!0,id:!0});var _e=e(G);Go=c(_e,"CSSUnparsedValue"),_e.forEach(a),me.forEach(a),Qo=r(qs),Q=n(qs,"UL",{});var $a=e(Q);ya=n($a,"LI",{});var Ce=e(ya);Zo=c(Ce,"CSSCustomProperty, that is not Houdini Property"),Ce.forEach(a),sn=r($a),ua=n($a,"LI",{});var ge=e(ua);an=c(ge,"the value is parsed as string"),ge.forEach(a),$a.forEach(a),on=r(qs),gs=n(qs,"DIV",{class:!0});var yt=e(gs);yt.forEach(a),qs.forEach(a),La=r(t),U=n(t,"SECTION",{});var za=e(U);da=n(za,"H3",{});var we=e(da);Z=n(we,"A",{href:!0,id:!0});var Ee=e(Z);nn=c(Ee,"References"),Ee.forEach(a),we.forEach(a),en=r(za),_=n(za,"UL",{});var N=e(_);ws=n(N,"LI",{});var Cn=e(ws);tn=c(Cn,"Specifications "),ss=n(Cn,"A",{href:!0,rel:!0});var Ve=e(ss);ln=c(Ve,"https://www.w3.org/TR/css-typed-om-1/"),Ve.forEach(a),Cn.forEach(a),rn=r(N),Es=n(N,"LI",{});var gn=e(Es);pn=c(gn,"MDN "),as=n(gn,"A",{href:!0,rel:!0});var be=e(as);cn=c(be,"https://developer.mozilla.org/en-US/docs/Web/API/CSS_Typed_OM_API"),be.forEach(a),gn.forEach(a),kn=r(N),P=n(N,"LI",{});var xa=e(P);vn=c(xa,"caniuse "),Vs=n(xa,"CODE",{class:!0});var Me=e(Vs);hn=c(Me,"attributeStyleMap"),Me.forEach(a),yn=r(xa),os=n(xa,"A",{href:!0,rel:!0});var Te=e(os);un=c(Te,"https://caniuse.com/mdn-api_element_attributestylemap"),Te.forEach(a),xa.forEach(a),dn=r(N),H=n(N,"LI",{});var fa=e(H);Sn=c(fa,"caniuse "),bs=n(fa,"CODE",{class:!0});var Ie=e(bs);xn=c(Ie,"computedStyleMap"),Ie.forEach(a),fn=r(fa),ns=n(fa,"A",{href:!0,rel:!0});var Le=e(ns);mn=c(Le,"https://caniuse.com/mdn-api_element_computedstylemap"),Le.forEach(a),fa.forEach(a),N.forEach(a),za.forEach(a),this.h()},h(){i(u,"href","#css-typed-object-model-typed-om"),i(u,"id","css-typed-object-model-typed-om"),i(ls,"class","code-section"),i(rs,"class","code-section"),i(is,"class","code-section"),i(ps,"class","code-section"),i(z,"href","#computedstylemap"),i(z,"id","computedstylemap"),i(cs,"class","code-section"),i(j,"href","#attributestylemap"),i(j,"id","attributestylemap"),i(ks,"class","code-section"),i(vs,"class","code-section"),i(R,"href","#types-of-cssstylevalue"),i(R,"id","types-of-cssstylevalue"),i(K,"href","#create-cssstylevalue"),i(K,"id","create-cssstylevalue"),i(hs,"class","code-section"),i(B,"href","#cssimagevalue"),i(B,"id","cssimagevalue"),i(us,"class","inline"),i(J,"href","#csskeywordvalue"),i(J,"id","csskeywordvalue"),i(ds,"class","inline"),i(Ss,"class","inline"),i(xs,"class","code-section"),i(Y,"href","#cssnumericvalue"),i(Y,"id","cssnumericvalue"),i(fs,"class","code-section"),i(W,"href","#cssmathvalue"),i(W,"id","cssmathvalue"),i(ms,"class","code-section"),i(F,"href","#csspositionvalue"),i(F,"id","csspositionvalue"),i(_s,"class","code-section"),i(X,"href","#csstransformvalue"),i(X,"id","csstransformvalue"),i(Cs,"class","code-section"),i(G,"href","#cssunparsedvalue"),i(G,"id","cssunparsedvalue"),i(gs,"class","code-section"),i(Z,"href","#references"),i(Z,"id","references"),i(ss,"href","https://www.w3.org/TR/css-typed-om-1/"),i(ss,"rel","nofollow"),i(as,"href","https://developer.mozilla.org/en-US/docs/Web/API/CSS_Typed_OM_API"),i(as,"rel","nofollow"),i(Vs,"class","inline"),i(os,"href","https://caniuse.com/mdn-api_element_attributestylemap"),i(os,"rel","nofollow"),i(bs,"class","inline"),i(ns,"href","https://caniuse.com/mdn-api_element_computedstylemap"),i(ns,"rel","nofollow")},m(t,k){Ae(y,t,k),h(t,f,k),h(t,v,k),s(v,b),s(b,u),s(u,m),s(v,ts),s(v,D),s(D,Os),s(Os,ja),s(D,Ra),s(D,Us),s(Us,Ka),s(v,Ba),s(v,ls),ls.innerHTML=ze,s(v,Ja),s(v,Ps),s(Ps,Hs),s(Hs,Ya),s(v,Wa),s(v,rs),rs.innerHTML=je,s(v,Fa),s(v,As),s(As,Ns),s(Ns,Xa),s(v,Ga),s(v,is),is.innerHTML=Re,s(v,Qa),s(v,$),s($,Ds),s(Ds,Za),s($,so),s($,$s),s($s,ao),s(v,oo),s(v,ps),ps.innerHTML=Ke,h(t,ma,k),h(t,M,k),s(M,zs),s(zs,z),s(z,no),s(M,eo),s(M,cs),cs.innerHTML=Be,h(t,_a,k),h(t,S,k),s(S,js),s(js,j),s(j,to),s(S,lo),s(S,Rs),s(Rs,Ks),s(Ks,ro),s(S,io),s(S,ks),ks.innerHTML=Je,s(S,po),s(S,vs),vs.innerHTML=Ye,h(t,Ca,k),h(t,T,k),s(T,Bs),s(Bs,R),s(R,co),s(T,ko),s(T,d),s(d,Js),s(Js,vo),s(d,ho),s(d,Ys),s(Ys,yo),s(d,uo),s(d,Ws),s(Ws,So),s(d,xo),s(d,Fs),s(Fs,fo),s(d,mo),s(d,Xs),s(Xs,_o),s(d,Co),s(d,Gs),s(Gs,go),h(t,ga,k),h(t,I,k),s(I,Qs),s(Qs,K),s(K,wo),s(I,Eo),s(I,hs),hs.innerHTML=We,h(t,wa,k),h(t,L,k),s(L,Zs),s(Zs,B),s(B,Vo),s(L,bo),s(L,sa),s(sa,ys),s(ys,Mo),s(ys,us),s(us,To),h(t,Ea,k),h(t,C,k),s(C,aa),s(aa,J),s(J,Io),s(C,Lo),s(C,oa),s(oa,q),s(q,ds),s(ds,qo),s(q,Oo),s(q,Ss),s(Ss,Uo),s(q,Po),s(C,Ho),s(C,xs),xs.innerHTML=Fe,h(t,Va,k),h(t,g,k),s(g,na),s(na,Y),s(Y,Ao),s(g,No),s(g,ea),s(ea,ta),s(ta,Do),s(g,$o),s(g,fs),fs.innerHTML=Xe,h(t,ba,k),h(t,w,k),s(w,la),s(la,W),s(W,zo),s(w,jo),s(w,ra),s(ra,ia),s(ia,Ro),s(w,Ko),s(w,ms),ms.innerHTML=Ge,h(t,Ma,k),h(t,O,k),s(O,pa),s(pa,F),s(F,Bo),s(O,Jo),s(O,_s),_s.innerHTML=Qe,h(t,Ta,k),h(t,E,k),s(E,ca),s(ca,X),s(X,Yo),s(E,Wo),s(E,ka),s(ka,va),s(va,Fo),s(E,Xo),s(E,Cs),Cs.innerHTML=Ze,h(t,Ia,k),h(t,V,k),s(V,ha),s(ha,G),s(G,Go),s(V,Qo),s(V,Q),s(Q,ya),s(ya,Zo),s(Q,sn),s(Q,ua),s(ua,an),s(V,on),s(V,gs),gs.innerHTML=st,h(t,La,k),h(t,U,k),s(U,da),s(da,Z),s(Z,nn),s(U,en),s(U,_),s(_,ws),s(ws,tn),s(ws,ss),s(ss,ln),s(_,rn),s(_,Es),s(Es,pn),s(Es,as),s(as,cn),s(_,kn),s(_,P),s(P,vn),s(P,Vs),s(Vs,hn),s(P,yn),s(P,os),s(os,un),s(_,dn),s(_,H),s(H,Sn),s(H,bs),s(bs,xn),s(H,fn),s(H,ns),s(ns,mn),qa=!0},p:mt,i(t){qa||(Ne(y.$$.fragment,t),qa=!0)},o(t){De(y.$$.fragment,t),qa=!1},d(t){$e(y,t),t&&a(f),t&&a(v),t&&a(ma),t&&a(M),t&&a(_a),t&&a(S),t&&a(Ca),t&&a(T),t&&a(ga),t&&a(I),t&&a(wa),t&&a(L),t&&a(Ea),t&&a(C),t&&a(Va),t&&a(g),t&&a(ba),t&&a(w),t&&a(Ma),t&&a(O),t&&a(Ta),t&&a(E),t&&a(Ia),t&&a(V),t&&a(La),t&&a(U)}}}function Et(es){let y,f;const v=[es[0],Ue];let b={$$slots:{default:[wt]},$$scope:{ctx:es}};for(let u=0;u<v.length;u+=1)b=wn(b,v[u]);return y=new _t({props:b}),{c(){Pe(y.$$.fragment)},l(u){He(y.$$.fragment,u)},m(u,m){Ae(y,u,m),f=!0},p(u,[m]){const ts=m&1?xt(v,[m&1&&qe(u[0]),m&0&&qe(Ue)]):{};m&2&&(ts.$$scope={dirty:m,ctx:u}),y.$set(ts)},i(u){f||(Ne(y.$$.fragment,u),f=!0)},o(u){De(y.$$.fragment,u),f=!1},d(u){$e(y,u)}}}const Ue={title:"The CSS Podcast: 027: Houdini Series: Typed Object Model",tags:["css houdini","The CSS Podcast"],description:"CSS Typed Object Model (Typed OM)CSS Typed OM API allow manipulating CSS styles through a typed JS representation rather than a simple string.Provide performance win. Browser understands the structured JS representation and no longer needs to parse CSS string from scratch...."};function Vt(es,y,f){return ft("blog",{image:gt}),es.$$set=v=>{f(0,y=wn(wn({},y),Oe(v)))},y=Oe(y),[y]}class Ut extends ut{constructor(y){super();dt(this,y,Vt,Et,St,{})}}export{Ut as default,Ue as metadata};
