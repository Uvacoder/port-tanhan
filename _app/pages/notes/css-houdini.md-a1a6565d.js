import{S as N,i as R,s as U,C as $,w as I,x as O,y as A,z as Y,A as q,q as V,o as j,B as z,r as G,R as L,k as g,e as h,t as P,m as w,c as v,a as x,h as T,d as p,b,g as B,F as i,O as J}from"../../chunks/vendor-569a3c5c.js";import{B as K}from"../../chunks/BlogLayout-17b76cb2.js";import{T as Q}from"../../chunks/TableOfContent-dbc18cb8.js";import{_ as W}from"../../chunks/twitter-card-image-a57df29d.js";import"../../chunks/stores-ee936cd4.js";import"../../chunks/WebMentions-968cc380.js";/* empty css                                */function X(c){let s,t,o,l,a,e,k,u,m,f,_,y,D=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">id</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;hero&quot;</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">style</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">#hero</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">display</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">height</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">100</span><span style="color: var(--shiki-token-keyword)">px</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">width</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">100</span><span style="color: var(--shiki-token-keyword)">px</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">background</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">red</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">transform</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">scaleY</span><span style="color: var(--shiki-token-constant)">(</span><span style="color: var(--shiki-token-function)">var</span><span style="color: var(--shiki-token-constant)">(--scale</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-token-constant)"> 1))</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">animation</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">scale 1</span><span style="color: var(--shiki-token-keyword)">s</span><span style="color: var(--shiki-token-constant)"> linear infinite</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">@keyframes</span><span style="color: var(--shiki-color-text)"> scale &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    to &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      --scale</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1.5</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">style</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">CSS</span><span style="color: var(--shiki-token-function)">.registerProperty</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;--scale&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    syntax</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&lt;number&gt;&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    inherits</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    initialValue</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;1&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,d;return s=new Q({props:{data:[{link:"make-custom-property-animatable",title:"Make custom property animatable"}]}}),{c(){I(s.$$.fragment),t=g(),o=h("section"),l=h("h2"),a=h("a"),e=P("Make custom property animatable"),k=g(),u=h("ul"),m=h("li"),f=P("registerProperty"),_=g(),y=h("div"),this.h()},l(n){O(s.$$.fragment,n),t=w(n),o=v(n,"SECTION",{});var r=x(o);l=v(r,"H2",{});var C=x(l);a=v(C,"A",{href:!0,id:!0});var E=x(a);e=T(E,"Make custom property animatable"),E.forEach(p),C.forEach(p),k=w(r),u=v(r,"UL",{});var S=x(u);m=v(S,"LI",{});var M=x(m);f=T(M,"registerProperty"),M.forEach(p),S.forEach(p),_=w(r),y=v(r,"DIV",{class:!0});var F=x(y);F.forEach(p),r.forEach(p),this.h()},h(){b(a,"href","#make-custom-property-animatable"),b(a,"id","make-custom-property-animatable"),b(y,"class","code-section")},m(n,r){A(s,n,r),B(n,t,r),B(n,o,r),i(o,l),i(l,a),i(a,e),i(o,k),i(o,u),i(u,m),i(m,f),i(o,_),i(o,y),y.innerHTML=D,d=!0},p:J,i(n){d||(V(s.$$.fragment,n),d=!0)},o(n){j(s.$$.fragment,n),d=!1},d(n){z(s,n),n&&p(t),n&&p(o)}}}function Z(c){let s,t;const o=[c[0],H];let l={$$slots:{default:[X]},$$scope:{ctx:c}};for(let a=0;a<o.length;a+=1)l=$(l,o[a]);return s=new K({props:l}),{c(){I(s.$$.fragment)},l(a){O(s.$$.fragment,a)},m(a,e){A(s,a,e),t=!0},p(a,[e]){const k=e&1?Y(o,[e&1&&q(a[0]),e&0&&q(H)]):{};e&2&&(k.$$scope={dirty:e,ctx:a}),s.$set(k)},i(a){t||(V(s.$$.fragment,a),t=!0)},o(a){j(s.$$.fragment,a),t=!1},d(a){z(s,a)}}}const H={title:"CSS Houdini",tags:["css houdini"],description:"Make custom property animatableregisterProperty..."};function ss(c,s,t){return G("blog",{image:W}),c.$$set=o=>{t(0,s=$($({},s),L(o)))},s=L(s),[s]}class is extends N{constructor(s){super();R(this,s,ss,Z,U,{})}}export{is as default,H as metadata};
