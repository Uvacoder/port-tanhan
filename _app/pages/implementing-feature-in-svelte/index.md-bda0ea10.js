import{S as rn,i as pn,s as cn,C as ma,w as Va,x as Fa,y as za,z as kn,A as Ha,q as Ga,o as Ua,B as Ja,r as vn,R as Na,k,e as n,t as l,m as v,c as e,a as o,h as r,d as a,b as h,g as b,F as s,O as hn}from"../../chunks/vendor-6bf294e3.js";import{B as yn}from"../../chunks/BlogLayout-152f599b.js";import{T as un}from"../../chunks/TableOfContent-1b9e4572.js";import{_ as dn}from"../../chunks/twitter-card-image-a57df29d.js";import"../../chunks/stores-e20b7872.js";import"../../chunks/WebMentions-745413ea.js";/* empty css                                */function mn(A){let i,g,f,T,y,d,E,ds,is,p,as,j,ms,fs,O,xs,B,gs,_s,ws,ns,Es,bs,I,Ts,L,js,Os,Is,S,Ss,W,$s,Ds,Cs,$,Ps,R,As,Bs,Ls,es,os,Ws,Rs,q,Ka='<pre class="prism language-svelte"><code><div class="line"><span class="token comment">&lt;!-- loop &#96;n&#96; through 1, 2, 3, 4, 5 --></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#range <span class="token number">1.</span><span class="token number">.5</span> <span class="token keyword">as</span> n<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token language-javascript"><span class="token punctuation">&#123;</span>n<span class="token punctuation">&#125;</span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span>range<span class="token punctuation">&#125;</span></span></div></code></pre>',qs,H,Qa='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">let</span> end <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- loop &#96;n&#96; through 1, 2, 3, 4, 5 --></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#range start<span class="token punctuation">.</span><span class="token punctuation">.</span>end <span class="token keyword">as</span> n<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token language-javascript"><span class="token punctuation">&#123;</span>n<span class="token punctuation">&#125;</span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span>range<span class="token punctuation">&#125;</span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>start<span class="token punctuation">&#125;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>end<span class="token punctuation">&#125;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></div></code></pre>',Hs,ts,ls,Ns,Ms,_,Vs,N,Fs,zs,D,Gs,Us,Js,w,M,V,Ks,Qs,Xs,F,Ys,z,Zs,sa,G,aa,U,na,cs,u,rs,C,ea,oa,J,ta,P,la,ra,K,Xa=`<pre class="prism language-"><code><span class="line">ParseError: Expected if, each or await</span>
<span class="line">  at error (compiler.js:6208:16)</span>
<span class="line">  at Parser.error (compiler.js:6336:3)</span>
<span class="line">  at mustache (compiler.js:5911:11)</span>
<span class="line">  at new Parser (compiler.js:6288:12)</span></code></pre>`,pa,Q,Ya=`<pre class="prism language-"><code><span class="line">Error: Not implemented: RangeBlock</span>
<span class="line">  at get_constructor (compiler.js:17451:18)</span>
<span class="line">  at children.map.child (compiler.js:17460:23)</span>
<span class="line">  at Array.map (&lt;anonymous&gt;)</span>
<span class="line">  at map_children (compiler.js:17459:18)</span>
<span class="line">  at new Element$1 (compiler.js:16523:19)</span></code></pre>`,ia,ps,ca,ka,X,Za=`<pre class="prism language-"><code><span class="line">Error: TODO implement RangeBlock</span>
<span class="line">  at new FragmentWrapper (compiler.js:12846:11)</span>
<span class="line">  at new ElementWrapper (compiler.js:10261:19)</span>
<span class="line">  at new FragmentWrapper (compiler.js:12888:21)</span>
<span class="line">  at new Renderer (compiler.js:12983:19)</span>
<span class="line">  at dom (compiler.js:13199:19)</span></code></pre>`,va,Y,sn=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">RangeBlockWrapper</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Wrapper</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	block</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Block</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	node</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">RangeBlock</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	fragment</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">FragmentWrapper</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">	index_name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		renderer</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Renderer</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		block</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Block</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		parent</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Wrapper</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		node</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">RangeBlock</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		strip_whitespace</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">boolean</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		next_sibling</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Wrapper</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-function)">super</span><span style="color: var(--shiki-color-text)">(renderer</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> block</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> node);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.cannot_use_innerhtml</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.not_static_content</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-comment)">// const &#123; dependencies &#125; = node.expression;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-comment)">// block.add_dependencies(dependencies);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-token-function)">.add_to_context</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.index</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.block </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.child</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">			comment</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_debugging_comment</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-color-text)">.component)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">			name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">component</span><span style="color: var(--shiki-token-function)">.get_unique_name</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;create_range_block&quot;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">			type</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;range&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.index_name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123; type</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;Identifier&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.index &#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">blocks</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.block);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.fragment </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">FragmentWrapper</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">			renderer</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">			</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.block</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">			</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.children</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">			</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">			strip_whitespace</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">			next_sibling</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-function)">render</span><span style="color: var(--shiki-color-text)">(block</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Block</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent_node</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent_nodes</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.render</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.block</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">x</span><span style="color: var(--shiki-token-string-expression)">&#96;#nodes&#96;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">as</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ks;return i=new un({props:{data:[{link:"overview",title:"Overview"},{link:"start-implementation",title:"Start implementation"}]}}),{c(){Va(i.$$.fragment),g=k(),f=n("p"),T=l("Anyone who"),y=k(),d=n("ul"),E=n("li"),ds=l("wants to get started in contributing to the Svelte source code"),is=k(),p=n("section"),as=n("h2"),j=n("a"),ms=l("Overview"),fs=k(),O=n("p"),xs=l("Today we are going to dive in and implmeent "),B=n("code"),gs=l("{#range}"),_s=l(" logic block in Svelte."),ws=k(),ns=n("p"),Es=l("We are going to look at how"),bs=k(),I=n("p"),Ts=l("if you are unfamiliar with the Svelte compiler, I recommend you to read "),L=n("a"),js=l('"The Svelte Compiler Handbook"'),Os=l(", which talks about the Svelte compiler at a high level."),Is=k(),S=n("p"),Ss=l("Armed with the overview of the compilation pipeline, let's dive into the detail, by implementing a new logic block, "),W=n("code"),$s=l("{#range}"),Ds=l("."),Cs=k(),$=n("p"),Ps=l("A quick idea of how "),R=n("code"),As=l("{#range}"),Bs=l(" behaves:"),Ls=k(),es=n("p"),os=n("strong"),Ws=l("1. The syntax:"),Rs=k(),q=n("div"),qs=k(),H=n("div"),Hs=k(),ts=n("p"),ls=n("strong"),Ns=l("2. The behavior:"),Ms=k(),_=n("p"),Vs=l("The "),N=n("code"),Fs=l("{#range}"),zs=l(" behaves like "),D=n("a"),Gs=l("Ruby range"),Us=l(":"),Js=k(),w=n("ul"),M=n("li"),V=n("code"),Ks=l("{#range}"),Qs=l(" loops from the start to end inclusively"),Xs=k(),F=n("li"),Ys=l("allow descending range too: "),z=n("code"),Zs=l("{#range 5..1 as n}"),sa=k(),G=n("li"),aa=l("allow ranging through characters: "),U=n("code"),na=l("{#range 'a'..'z' as n}"),cs=k(),u=n("section"),rs=n("h2"),C=n("a"),ea=l("Start implementation"),oa=k(),J=n("p"),ta=l("With an "),P=n("a"),la=l("https://github.com/sveltejs/svelte/issues/2968"),ra=k(),K=n("div"),pa=k(),Q=n("div"),ia=k(),ps=n("p"),ca=l(`TODO: don't add the dependencies yet
NOTE: copy code from EachBlock, since they lookalike`),ka=k(),X=n("div"),va=k(),Y=n("div"),this.h()},l(t){Fa(i.$$.fragment,t),g=v(t),f=e(t,"P",{});var x=o(f);T=r(x,"Anyone who"),x.forEach(a),y=v(t),d=e(t,"UL",{});var fa=o(d);E=e(fa,"LI",{});var xa=o(E);ds=r(xa,"wants to get started in contributing to the Svelte source code"),xa.forEach(a),fa.forEach(a),is=v(t),p=e(t,"SECTION",{});var c=o(p);as=e(c,"H2",{});var ga=o(as);j=e(ga,"A",{href:!0,id:!0});var _a=o(j);ms=r(_a,"Overview"),_a.forEach(a),ga.forEach(a),fs=v(c),O=e(c,"P",{});var vs=o(O);xs=r(vs,"Today we are going to dive in and implmeent "),B=e(vs,"CODE",{class:!0});var wa=o(B);gs=r(wa,"{#range}"),wa.forEach(a),_s=r(vs," logic block in Svelte."),vs.forEach(a),ws=v(c),ns=e(c,"P",{});var Ea=o(ns);Es=r(Ea,"We are going to look at how"),Ea.forEach(a),bs=v(c),I=e(c,"P",{});var hs=o(I);Ts=r(hs,"if you are unfamiliar with the Svelte compiler, I recommend you to read "),L=e(hs,"A",{href:!0});var ba=o(L);js=r(ba,'"The Svelte Compiler Handbook"'),ba.forEach(a),Os=r(hs,", which talks about the Svelte compiler at a high level."),hs.forEach(a),Is=v(c),S=e(c,"P",{});var ys=o(S);Ss=r(ys,"Armed with the overview of the compilation pipeline, let's dive into the detail, by implementing a new logic block, "),W=e(ys,"CODE",{class:!0});var Ta=o(W);$s=r(Ta,"{#range}"),Ta.forEach(a),Ds=r(ys,"."),ys.forEach(a),Cs=v(c),$=e(c,"P",{});var us=o($);Ps=r(us,"A quick idea of how "),R=e(us,"CODE",{class:!0});var ja=o(R);As=r(ja,"{#range}"),ja.forEach(a),Bs=r(us," behaves:"),us.forEach(a),Ls=v(c),es=e(c,"P",{});var Oa=o(es);os=e(Oa,"STRONG",{});var Ia=o(os);Ws=r(Ia,"1. The syntax:"),Ia.forEach(a),Oa.forEach(a),Rs=v(c),q=e(c,"DIV",{class:!0});var an=o(q);an.forEach(a),qs=v(c),H=e(c,"DIV",{class:!0});var nn=o(H);nn.forEach(a),Hs=v(c),ts=e(c,"P",{});var Sa=o(ts);ls=e(Sa,"STRONG",{});var $a=o(ls);Ns=r($a,"2. The behavior:"),$a.forEach(a),Sa.forEach(a),Ms=v(c),_=e(c,"P",{});var Z=o(_);Vs=r(Z,"The "),N=e(Z,"CODE",{class:!0});var Da=o(N);Fs=r(Da,"{#range}"),Da.forEach(a),zs=r(Z," behaves like "),D=e(Z,"A",{href:!0,rel:!0});var Ca=o(D);Gs=r(Ca,"Ruby range"),Ca.forEach(a),Us=r(Z,":"),Z.forEach(a),Js=v(c),w=e(c,"UL",{});var ss=o(w);M=e(ss,"LI",{});var ha=o(M);V=e(ha,"CODE",{class:!0});var Pa=o(V);Ks=r(Pa,"{#range}"),Pa.forEach(a),Qs=r(ha," loops from the start to end inclusively"),ha.forEach(a),Xs=v(ss),F=e(ss,"LI",{});var ya=o(F);Ys=r(ya,"allow descending range too: "),z=e(ya,"CODE",{class:!0});var Aa=o(z);Zs=r(Aa,"{#range 5..1 as n}"),Aa.forEach(a),ya.forEach(a),sa=v(ss),G=e(ss,"LI",{});var ua=o(G);aa=r(ua,"allow ranging through characters: "),U=e(ua,"CODE",{class:!0});var Ba=o(U);na=r(Ba,"{#range 'a'..'z' as n}"),Ba.forEach(a),ua.forEach(a),ss.forEach(a),c.forEach(a),cs=v(t),u=e(t,"SECTION",{});var m=o(u);rs=e(m,"H2",{});var La=o(rs);C=e(La,"A",{href:!0,id:!0});var Wa=o(C);ea=r(Wa,"Start implementation"),Wa.forEach(a),La.forEach(a),oa=v(m),J=e(m,"P",{});var da=o(J);ta=r(da,"With an "),P=e(da,"A",{href:!0,rel:!0});var Ra=o(P);la=r(Ra,"https://github.com/sveltejs/svelte/issues/2968"),Ra.forEach(a),da.forEach(a),ra=v(m),K=e(m,"DIV",{class:!0});var en=o(K);en.forEach(a),pa=v(m),Q=e(m,"DIV",{class:!0});var on=o(Q);on.forEach(a),ia=v(m),ps=e(m,"P",{});var qa=o(ps);ca=r(qa,`TODO: don't add the dependencies yet
NOTE: copy code from EachBlock, since they lookalike`),qa.forEach(a),ka=v(m),X=e(m,"DIV",{class:!0});var tn=o(X);tn.forEach(a),va=v(m),Y=e(m,"DIV",{class:!0});var ln=o(Y);ln.forEach(a),m.forEach(a),this.h()},h(){h(j,"href","#overview"),h(j,"id","overview"),h(B,"class","inline"),h(L,"href","/the-svelte-compiler-handbook"),h(W,"class","inline"),h(R,"class","inline"),h(q,"class","code-section"),h(H,"class","code-section"),h(N,"class","inline"),h(D,"href","https://www.rubyguides.com/2016/06/ruby-ranges-how-do-they-work/"),h(D,"rel","nofollow"),h(V,"class","inline"),h(z,"class","inline"),h(U,"class","inline"),h(C,"href","#start-implementation"),h(C,"id","start-implementation"),h(P,"href","https://github.com/sveltejs/svelte/issues/2968"),h(P,"rel","nofollow"),h(K,"class","code-section"),h(Q,"class","code-section"),h(X,"class","code-section"),h(Y,"class","code-section")},m(t,x){za(i,t,x),b(t,g,x),b(t,f,x),s(f,T),b(t,y,x),b(t,d,x),s(d,E),s(E,ds),b(t,is,x),b(t,p,x),s(p,as),s(as,j),s(j,ms),s(p,fs),s(p,O),s(O,xs),s(O,B),s(B,gs),s(O,_s),s(p,ws),s(p,ns),s(ns,Es),s(p,bs),s(p,I),s(I,Ts),s(I,L),s(L,js),s(I,Os),s(p,Is),s(p,S),s(S,Ss),s(S,W),s(W,$s),s(S,Ds),s(p,Cs),s(p,$),s($,Ps),s($,R),s(R,As),s($,Bs),s(p,Ls),s(p,es),s(es,os),s(os,Ws),s(p,Rs),s(p,q),q.innerHTML=Ka,s(p,qs),s(p,H),H.innerHTML=Qa,s(p,Hs),s(p,ts),s(ts,ls),s(ls,Ns),s(p,Ms),s(p,_),s(_,Vs),s(_,N),s(N,Fs),s(_,zs),s(_,D),s(D,Gs),s(_,Us),s(p,Js),s(p,w),s(w,M),s(M,V),s(V,Ks),s(M,Qs),s(w,Xs),s(w,F),s(F,Ys),s(F,z),s(z,Zs),s(w,sa),s(w,G),s(G,aa),s(G,U),s(U,na),b(t,cs,x),b(t,u,x),s(u,rs),s(rs,C),s(C,ea),s(u,oa),s(u,J),s(J,ta),s(J,P),s(P,la),s(u,ra),s(u,K),K.innerHTML=Xa,s(u,pa),s(u,Q),Q.innerHTML=Ya,s(u,ia),s(u,ps),s(ps,ca),s(u,ka),s(u,X),X.innerHTML=Za,s(u,va),s(u,Y),Y.innerHTML=sn,ks=!0},p:hn,i(t){ks||(Ga(i.$$.fragment,t),ks=!0)},o(t){Ua(i.$$.fragment,t),ks=!1},d(t){Ja(i,t),t&&a(g),t&&a(f),t&&a(y),t&&a(d),t&&a(is),t&&a(p),t&&a(cs),t&&a(u)}}}function fn(A){let i,g;const f=[A[0],Ma];let T={$$slots:{default:[mn]},$$scope:{ctx:A}};for(let y=0;y<f.length;y+=1)T=ma(T,f[y]);return i=new yn({props:T}),{c(){Va(i.$$.fragment)},l(y){Fa(i.$$.fragment,y)},m(y,d){za(i,y,d),g=!0},p(y,[d]){const E=d&1?kn(f,[d&1&&Ha(y[0]),d&0&&Ha(Ma)]):{};d&2&&(E.$$scope={dirty:d,ctx:y}),i.$set(E)},i(y){g||(Ga(i.$$.fragment,y),g=!0)},o(y){Ua(i.$$.fragment,y),g=!1},d(y){Ja(i,y)}}}const Ma={title:"Implementing {#range} in Svelte",wip:!0,label:"blog"};function xn(A,i,g){return vn("blog",{image:dn}),A.$$set=f=>{g(0,i=ma(ma({},i),Na(f)))},i=Na(i),[i]}class On extends rn{constructor(i){super();pn(this,i,xn,fn,cn,{})}}export{On as default,Ma as metadata};
