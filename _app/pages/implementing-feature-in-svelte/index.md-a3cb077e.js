import{S as Xa,i as Za,s as sn,C as ya,w as an,x as nn,y as en,z as on,A as qa,q as tn,o as ln,B as rn,r as pn,Y as Ha,e as n,t,k as v,c as e,a as o,h as l,d as a,m as h,b as y,g as P,H as s,J as cn}from"../../chunks/vendor-da4388d4.js";import{B as kn}from"../../chunks/BlogLayout-d479b777.js";import{_ as vn}from"../../chunks/twitter-card-image-a57df29d.js";import"../../chunks/stores-1fad7c36.js";import"../../chunks/ldjson-b0805387.js";/* empty css                                */function hn(W){let p,g,x,f,k,m,E,r,as,j,ys,us,T,ds,B,ms,gs,xs,ns,fs,_s,O,ws,L,bs,Es,js,S,Ts,q,Os,Ss,Is,I,Ds,H,Cs,As,Ps,es,os,Ws,Bs,R,$a='<pre class="prism language-svelte"><code><div class="line"><span class="token comment">&lt;!-- loop &#96;n&#96; through 1, 2, 3, 4, 5 --></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#range <span class="token number">1.</span><span class="token number">.5</span> <span class="token keyword">as</span> n<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token language-javascript"><span class="token punctuation">&#123;</span>n<span class="token punctuation">&#125;</span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span>range<span class="token punctuation">&#125;</span></span></div></code></pre>',Ls,$,Na='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">let</span> end <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- loop &#96;n&#96; through 1, 2, 3, 4, 5 --></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#range start<span class="token punctuation">.</span><span class="token punctuation">.</span>end <span class="token keyword">as</span> n<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token language-javascript"><span class="token punctuation">&#123;</span>n<span class="token punctuation">&#125;</span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span>range<span class="token punctuation">&#125;</span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>start<span class="token punctuation">&#125;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">bind:</span>value=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>end<span class="token punctuation">&#125;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></div></code></pre>',qs,ts,ls,Hs,Rs,w,$s,N,Ns,Ms,D,Vs,Fs,zs,b,M,V,Gs,Us,Js,F,Ys,z,Ks,Qs,G,Xs,U,Zs,ps,u,rs,C,sa,aa,J,na,A,ea,oa,Y,Ma=`<pre class="prism language-"><code><span class="line">ParseError: Expected if, each or await</span>
<span class="line">  at error (compiler.js:6208:16)</span>
<span class="line">  at Parser.error (compiler.js:6336:3)</span>
<span class="line">  at mustache (compiler.js:5911:11)</span>
<span class="line">  at new Parser (compiler.js:6288:12)</span></code></pre>`,ta,K,Va=`<pre class="prism language-"><code><span class="line">Error: Not implemented: RangeBlock</span>
<span class="line">  at get_constructor (compiler.js:17451:18)</span>
<span class="line">  at children.map.child (compiler.js:17460:23)</span>
<span class="line">  at Array.map (&lt;anonymous&gt;)</span>
<span class="line">  at map_children (compiler.js:17459:18)</span>
<span class="line">  at new Element$1 (compiler.js:16523:19)</span></code></pre>`,la,is,ra,ia,Q,Fa=`<pre class="prism language-"><code><span class="line">Error: TODO implement RangeBlock</span>
<span class="line">  at new FragmentWrapper (compiler.js:12846:11)</span>
<span class="line">  at new ElementWrapper (compiler.js:10261:19)</span>
<span class="line">  at new FragmentWrapper (compiler.js:12888:21)</span>
<span class="line">  at new Renderer (compiler.js:12983:19)</span>
<span class="line">  at dom (compiler.js:13199:19)</span></code></pre>`,pa,X,za=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">RangeBlockWrapper</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Wrapper</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	block</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Block</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	node</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">RangeBlock</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	fragment</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">FragmentWrapper</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">	index_name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		renderer</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Renderer</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		block</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Block</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		parent</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Wrapper</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		node</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">RangeBlock</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		strip_whitespace</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">boolean</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		next_sibling</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Wrapper</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-function)">super</span><span style="color: var(--shiki-color-text)">(renderer</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> block</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> node);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.cannot_use_innerhtml</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.not_static_content</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-comment)">// const &#123; dependencies &#125; = node.expression;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-comment)">// block.add_dependencies(dependencies);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-token-function)">.add_to_context</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.index</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.block </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.child</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">			comment</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_debugging_comment</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-color-text)">.component)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">			name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">component</span><span style="color: var(--shiki-token-function)">.get_unique_name</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;create_range_block&quot;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">			type</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;range&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.index_name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123; type</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;Identifier&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.index &#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">blocks</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.block);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.fragment </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">FragmentWrapper</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">			renderer</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">			</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.block</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">			</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.children</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">			</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">			strip_whitespace</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">			next_sibling</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-function)">render</span><span style="color: var(--shiki-color-text)">(block</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Block</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent_node</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent_nodes</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.render</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.block</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">x</span><span style="color: var(--shiki-token-string-expression)">&#96;#nodes&#96;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">as</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`;return{c(){p=n("p"),g=t("Anyone who"),x=v(),f=n("ul"),k=n("li"),m=t("wants to get started in contributing to the Svelte source code"),E=v(),r=n("section"),as=n("h2"),j=n("a"),ys=t("Overview"),us=v(),T=n("p"),ds=t("Today we are going to dive in and implmeent "),B=n("code"),ms=t("{#range}"),gs=t(" logic block in Svelte."),xs=v(),ns=n("p"),fs=t("We are going to look at how"),_s=v(),O=n("p"),ws=t("if you are unfamiliar with the Svelte compiler, I recommend you to read "),L=n("a"),bs=t('"The Svelte Compiler Handbook"'),Es=t(", which talks about the Svelte compiler at a high level."),js=v(),S=n("p"),Ts=t("Armed with the overview of the compilation pipeline, let's dive into the detail, by implementing a new logic block, "),q=n("code"),Os=t("{#range}"),Ss=t("."),Is=v(),I=n("p"),Ds=t("A quick idea of how "),H=n("code"),Cs=t("{#range}"),As=t(" behaves:"),Ps=v(),es=n("p"),os=n("strong"),Ws=t("1. The syntax:"),Bs=v(),R=n("div"),Ls=v(),$=n("div"),qs=v(),ts=n("p"),ls=n("strong"),Hs=t("2. The behavior:"),Rs=v(),w=n("p"),$s=t("The "),N=n("code"),Ns=t("{#range}"),Ms=t(" behaves like "),D=n("a"),Vs=t("Ruby range"),Fs=t(":"),zs=v(),b=n("ul"),M=n("li"),V=n("code"),Gs=t("{#range}"),Us=t(" loops from the start to end inclusively"),Js=v(),F=n("li"),Ys=t("allow descending range too: "),z=n("code"),Ks=t("{#range 5..1 as n}"),Qs=v(),G=n("li"),Xs=t("allow ranging through characters: "),U=n("code"),Zs=t("{#range 'a'..'z' as n}"),ps=v(),u=n("section"),rs=n("h2"),C=n("a"),sa=t("Start implementation"),aa=v(),J=n("p"),na=t("With an "),A=n("a"),ea=t("https://github.com/sveltejs/svelte/issues/2968"),oa=v(),Y=n("div"),ta=v(),K=n("div"),la=v(),is=n("p"),ra=t(`TODO: don't add the dependencies yet
NOTE: copy code from EachBlock, since they lookalike`),ia=v(),Q=n("div"),pa=v(),X=n("div"),this.h()},l(c){p=e(c,"P",{});var _=o(p);g=l(_,"Anyone who"),_.forEach(a),x=h(c),f=e(c,"UL",{});var ua=o(f);k=e(ua,"LI",{});var da=o(k);m=l(da,"wants to get started in contributing to the Svelte source code"),da.forEach(a),ua.forEach(a),E=h(c),r=e(c,"SECTION",{});var i=o(r);as=e(i,"H2",{});var ma=o(as);j=e(ma,"A",{href:!0,id:!0});var ga=o(j);ys=l(ga,"Overview"),ga.forEach(a),ma.forEach(a),us=h(i),T=e(i,"P",{});var cs=o(T);ds=l(cs,"Today we are going to dive in and implmeent "),B=e(cs,"CODE",{class:!0});var xa=o(B);ms=l(xa,"{#range}"),xa.forEach(a),gs=l(cs," logic block in Svelte."),cs.forEach(a),xs=h(i),ns=e(i,"P",{});var fa=o(ns);fs=l(fa,"We are going to look at how"),fa.forEach(a),_s=h(i),O=e(i,"P",{});var ks=o(O);ws=l(ks,"if you are unfamiliar with the Svelte compiler, I recommend you to read "),L=e(ks,"A",{href:!0});var _a=o(L);bs=l(_a,'"The Svelte Compiler Handbook"'),_a.forEach(a),Es=l(ks,", which talks about the Svelte compiler at a high level."),ks.forEach(a),js=h(i),S=e(i,"P",{});var vs=o(S);Ts=l(vs,"Armed with the overview of the compilation pipeline, let's dive into the detail, by implementing a new logic block, "),q=e(vs,"CODE",{class:!0});var wa=o(q);Os=l(wa,"{#range}"),wa.forEach(a),Ss=l(vs,"."),vs.forEach(a),Is=h(i),I=e(i,"P",{});var hs=o(I);Ds=l(hs,"A quick idea of how "),H=e(hs,"CODE",{class:!0});var ba=o(H);Cs=l(ba,"{#range}"),ba.forEach(a),As=l(hs," behaves:"),hs.forEach(a),Ps=h(i),es=e(i,"P",{});var Ea=o(es);os=e(Ea,"STRONG",{});var ja=o(os);Ws=l(ja,"1. The syntax:"),ja.forEach(a),Ea.forEach(a),Bs=h(i),R=e(i,"DIV",{class:!0});var Ga=o(R);Ga.forEach(a),Ls=h(i),$=e(i,"DIV",{class:!0});var Ua=o($);Ua.forEach(a),qs=h(i),ts=e(i,"P",{});var Ta=o(ts);ls=e(Ta,"STRONG",{});var Oa=o(ls);Hs=l(Oa,"2. The behavior:"),Oa.forEach(a),Ta.forEach(a),Rs=h(i),w=e(i,"P",{});var Z=o(w);$s=l(Z,"The "),N=e(Z,"CODE",{class:!0});var Sa=o(N);Ns=l(Sa,"{#range}"),Sa.forEach(a),Ms=l(Z," behaves like "),D=e(Z,"A",{href:!0,rel:!0});var Ia=o(D);Vs=l(Ia,"Ruby range"),Ia.forEach(a),Fs=l(Z,":"),Z.forEach(a),zs=h(i),b=e(i,"UL",{});var ss=o(b);M=e(ss,"LI",{});var ca=o(M);V=e(ca,"CODE",{class:!0});var Da=o(V);Gs=l(Da,"{#range}"),Da.forEach(a),Us=l(ca," loops from the start to end inclusively"),ca.forEach(a),Js=h(ss),F=e(ss,"LI",{});var ka=o(F);Ys=l(ka,"allow descending range too: "),z=e(ka,"CODE",{class:!0});var Ca=o(z);Ks=l(Ca,"{#range 5..1 as n}"),Ca.forEach(a),ka.forEach(a),Qs=h(ss),G=e(ss,"LI",{});var va=o(G);Xs=l(va,"allow ranging through characters: "),U=e(va,"CODE",{class:!0});var Aa=o(U);Zs=l(Aa,"{#range 'a'..'z' as n}"),Aa.forEach(a),va.forEach(a),ss.forEach(a),i.forEach(a),ps=h(c),u=e(c,"SECTION",{});var d=o(u);rs=e(d,"H2",{});var Pa=o(rs);C=e(Pa,"A",{href:!0,id:!0});var Wa=o(C);sa=l(Wa,"Start implementation"),Wa.forEach(a),Pa.forEach(a),aa=h(d),J=e(d,"P",{});var ha=o(J);na=l(ha,"With an "),A=e(ha,"A",{href:!0,rel:!0});var Ba=o(A);ea=l(Ba,"https://github.com/sveltejs/svelte/issues/2968"),Ba.forEach(a),ha.forEach(a),oa=h(d),Y=e(d,"DIV",{class:!0});var Ja=o(Y);Ja.forEach(a),ta=h(d),K=e(d,"DIV",{class:!0});var Ya=o(K);Ya.forEach(a),la=h(d),is=e(d,"P",{});var La=o(is);ra=l(La,`TODO: don't add the dependencies yet
NOTE: copy code from EachBlock, since they lookalike`),La.forEach(a),ia=h(d),Q=e(d,"DIV",{class:!0});var Ka=o(Q);Ka.forEach(a),pa=h(d),X=e(d,"DIV",{class:!0});var Qa=o(X);Qa.forEach(a),d.forEach(a),this.h()},h(){y(j,"href","#overview"),y(j,"id","overview"),y(B,"class","inline"),y(L,"href","/the-svelte-compiler-handbook"),y(q,"class","inline"),y(H,"class","inline"),y(R,"class","code-section"),y($,"class","code-section"),y(N,"class","inline"),y(D,"href","https://www.rubyguides.com/2016/06/ruby-ranges-how-do-they-work/"),y(D,"rel","nofollow"),y(V,"class","inline"),y(z,"class","inline"),y(U,"class","inline"),y(C,"href","#start-implementation"),y(C,"id","start-implementation"),y(A,"href","https://github.com/sveltejs/svelte/issues/2968"),y(A,"rel","nofollow"),y(Y,"class","code-section"),y(K,"class","code-section"),y(Q,"class","code-section"),y(X,"class","code-section")},m(c,_){P(c,p,_),s(p,g),P(c,x,_),P(c,f,_),s(f,k),s(k,m),P(c,E,_),P(c,r,_),s(r,as),s(as,j),s(j,ys),s(r,us),s(r,T),s(T,ds),s(T,B),s(B,ms),s(T,gs),s(r,xs),s(r,ns),s(ns,fs),s(r,_s),s(r,O),s(O,ws),s(O,L),s(L,bs),s(O,Es),s(r,js),s(r,S),s(S,Ts),s(S,q),s(q,Os),s(S,Ss),s(r,Is),s(r,I),s(I,Ds),s(I,H),s(H,Cs),s(I,As),s(r,Ps),s(r,es),s(es,os),s(os,Ws),s(r,Bs),s(r,R),R.innerHTML=$a,s(r,Ls),s(r,$),$.innerHTML=Na,s(r,qs),s(r,ts),s(ts,ls),s(ls,Hs),s(r,Rs),s(r,w),s(w,$s),s(w,N),s(N,Ns),s(w,Ms),s(w,D),s(D,Vs),s(w,Fs),s(r,zs),s(r,b),s(b,M),s(M,V),s(V,Gs),s(M,Us),s(b,Js),s(b,F),s(F,Ys),s(F,z),s(z,Ks),s(b,Qs),s(b,G),s(G,Xs),s(G,U),s(U,Zs),P(c,ps,_),P(c,u,_),s(u,rs),s(rs,C),s(C,sa),s(u,aa),s(u,J),s(J,na),s(J,A),s(A,ea),s(u,oa),s(u,Y),Y.innerHTML=Ma,s(u,ta),s(u,K),K.innerHTML=Va,s(u,la),s(u,is),s(is,ra),s(u,ia),s(u,Q),Q.innerHTML=Fa,s(u,pa),s(u,X),X.innerHTML=za},p:cn,d(c){c&&a(p),c&&a(x),c&&a(f),c&&a(E),c&&a(r),c&&a(ps),c&&a(u)}}}function yn(W){let p,g;const x=[W[0],Ra];let f={$$slots:{default:[hn]},$$scope:{ctx:W}};for(let k=0;k<x.length;k+=1)f=ya(f,x[k]);return p=new kn({props:f}),{c(){an(p.$$.fragment)},l(k){nn(p.$$.fragment,k)},m(k,m){en(p,k,m),g=!0},p(k,[m]){const E=m&1?on(x,[m&1&&qa(k[0]),m&0&&qa(Ra)]):{};m&2&&(E.$$scope={dirty:m,ctx:k}),p.$set(E)},i(k){g||(tn(p.$$.fragment,k),g=!0)},o(k){ln(p.$$.fragment,k),g=!1},d(k){rn(p,k)}}}const Ra={title:"Implementing {#range} in Svelte",wip:!0,label:"blog",description:"Anyone whowants to get started in contributing to the Svelte source codeOverviewToday we are going to dive in and implmeent `&#123;#range&#125;` logic block in Svelte.We are going to look at how if you are unfamiliar with the Svelte compiler, I recommend you to read ...",tableOfContents:[{link:"overview",title:"Overview"},{link:"start-implementation",title:"Start implementation"}]};function un(W,p,g){return pn("blog",{image:vn}),W.$$set=x=>{g(0,p=ya(ya({},p),Ha(x)))},p=Ha(p),[p]}class wn extends Xa{constructor(p){super();Za(this,p,un,yn,sn,{})}}export{wn as default,Ra as metadata};
