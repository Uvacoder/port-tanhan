import{S as k_,i as u_,s as v_,C as dg,w as l1,x as i1,y as c1,z as y_,A as e1,q as p1,o as h1,B as d1,r as f_,R as s1,k as i,e as a,t as s,m as c,c as n,a as r,h as t,d as o,b as l,Q as $i,f as t1,g as b,F as e,O as m_}from"../../chunks/vendor-ea160616.js";import{B as b_}from"../../chunks/BlogLayout-1be3dc1e.js";import{T as g_}from"../../chunks/TableOfContent-c4f5cb6e.js";import"../../chunks/stores-7d7fda0c.js";import"../../chunks/WebMentions-d768a574.js";/* empty css                                */var x_="/_app/assets/custom-parser-8dacdaf1.gif",w_="/_app/assets/curry-function-8da89c90.webp",o1="/_app/assets/curry-function-40bd348b.png",E_="/_app/assets/generator-function-4f1730da.webp",a1="/_app/assets/generator-function-a2553bf5.png",__="/_app/assets/forking-de059522.webp",n1="/_app/assets/forking-2f29a6a7.png",T_="/_app/assets/hero-twitter-03484d5c.jpg";function I_(so){let I,se,R,cs,O,te,to,Xl,x,lr,ps,Yi,Zi,ir,Qi,Ki,oo,k1=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// &#39;@@&#39; makes the function &#96;foo&#96; curried</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> @@ </span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">(a</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> b</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> c) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> a </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> b </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> c;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">)(</span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">)); </span><span style="color: var(--shiki-token-comment)">// 6</span></span></code></pre>`,ec,L,sc,hs,tc,oc,ao,ac,nc,ds,rc,lc,no,ic,cc,ro,pc,hc,lo,dc,kc,io,uc,vc,yc,oe,fc,ks,mc,bc,co,gc,xc,po,wc,Ec,_c,ho,u1=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">); </span><span style="color: var(--shiki-token-comment)">// 6</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">bar</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">); </span><span style="color: var(--shiki-token-comment)">// (n) =&gt; 1 + 2 + n</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">bar</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">); </span><span style="color: var(--shiki-token-comment)">// 6</span></span></code></pre>`,Tc,cr,j,Ic,ko,Cc,Oc,uo,Dc,Ac,vo,Pc,Sc,yo,Lc,jc,us,Mc,Hc,fo,qc,Nc,Rc,pr,Uc,Fc,vs,hr,Wc,Bc,dr,Vc,zc,kr,Gc,Jc,ur,Xc,$l,C,vr,ys,$c,Yc,fs,Zc,ms,Qc,Kc,ep,yr,bs,fr,mr,Be,kg,sp,br,tp,op,gs,ap,xs,np,rp,lp,mo,v1=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">$ git clone https://github.com/tanhauhau/babel.git</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)"># set up</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$ </span><span style="color: var(--shiki-token-function)">cd</span><span style="color: var(--shiki-color-text)"> babel</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$ make bootstrap</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$ make build</span></span></code></pre>`,ip,gr,cp,pp,V,hp,bo,dp,kp,go,up,vp,xo,yp,fp,wo,mp,bp,gp,Eo,y1='<pre class="prism language-yml"><code><div class="line"><span class="token punctuation">-</span> doc</div><div class="line"><span class="token punctuation">-</span> packages</div><div class="line">  <span class="token punctuation">-</span> babel<span class="token punctuation">-</span>core</div><div class="line">  <span class="token punctuation">-</span> babel<span class="token punctuation">-</span>parser</div><div class="line">  <span class="token punctuation">-</span> babel<span class="token punctuation">-</span>plugin<span class="token punctuation">-</span>transform<span class="token punctuation">-</span>react<span class="token punctuation">-</span>jsx</div><div class="line">  <span class="token punctuation">-</span> <span class="token punctuation">...</span></div><div class="line"><span class="token punctuation">-</span> Gulpfile.js</div><div class="line"><span class="token punctuation">-</span> Makefile</div><div class="line"><span class="token punctuation">-</span> <span class="token punctuation">...</span></div></code></pre>',xp,xr,wr,wp,Yl,M,Er,ws,Ep,_p,Ee,Tp,Es,Ip,Cp,_s,Op,Dp,Ap,_r,Pp,Sp,_e,Ve,Lp,_o,jp,Mp,To,Hp,qp,ve,Np,Tr,Rp,Up,Ir,Fp,Wp,Io,Bp,Vp,Te,zp,Cr,Gp,Jp,Ts,Xp,$p,Yp,Ie,Zp,Is,Qp,Kp,Cs,eh,sh,th,Or,Dr,oh,Zl,h,Ar,Os,ah,nh,Ds,rh,Co,lh,ih,ch,Oo,f1=`<pre class="prism language-"><code><span class="line">- src/</span>
<span class="line">  - tokenizer/</span>
<span class="line">  - parser/</span>
<span class="line">  - plugins/</span>
<span class="line">    - jsx/</span>
<span class="line">    - typescript/</span>
<span class="line">    - flow/</span>
<span class="line">    - ...</span>
<span class="line">- test/</span></code></pre>`,ph,N,hh,Pr,dh,kh,Sr,uh,vh,Do,yh,fh,Ao,mh,bh,Po,gh,xh,wh,As,Eh,Ps,_h,Th,Ih,So,m1=`<div class="filename">packages/babel-parser/test/curry-function.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; parse &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;../lib&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getParser</span><span style="color: var(--shiki-color-text)">(code) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parse</span><span style="color: var(--shiki-color-text)">(code</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; sourceType</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;module&#39;</span><span style="color: var(--shiki-color-text)"> &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">describe</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;curry function syntax&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">it</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;should parse&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">expect</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">getParser</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;function @@ foo() &#123;&#125;&#96;</span><span style="color: var(--shiki-color-text)">)())</span><span style="color: var(--shiki-token-function)">.toMatchSnapshot</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,Ch,Ce,Oh,Lo,Dh,Ah,jo,Ph,Sh,Lh,Mo,b1=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">SyntaxError: Unexpected token (1:9)</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">at Parser.raise (packages/babel-parser/src/parser/location.js:39:63)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">at Parser.raise [as unexpected] (packages/babel-parser/src/parser/util.js:133:16)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">at Parser.unexpected [as parseIdentifierName] (packages/babel-parser/src/parser/expression.js:2090:18)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">at Parser.parseIdentifierName [as parseIdentifier] (packages/babel-parser/src/parser/expression.js:2052:23)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">at Parser.parseIdentifier (packages/babel-parser/src/parser/statement.js:1096:52)</span></span></code></pre>`,jh,Ss,Lr,Mh,Hh,Ho,g1='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">BABEL_ENV=test node_modules/.bin/jest -u packages/babel-parser/test/curry-function.js</span></span></code></pre>',qh,Ls,Nh,qo,Rh,Uh,Fh,js,Wh,No,Bh,Vh,zh,Oe,Gh,Ms,Ro,Jh,Xh,Uo,$h,Yh,Zh,Hs,Qh,Fo,Kh,ed,sd,Wo,x1=`<div class="filename">packages/babel-parser/src/parser/expression.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">parseIdentifierName</span><span style="color: var(--shiki-color-text)">(pos: number</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> liberal</span><span style="color: var(--shiki-token-keyword)">?:</span><span style="color: var(--shiki-color-text)"> boolean): string &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.match</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">tt</span><span style="color: var(--shiki-color-text)">.name)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">state</span><span style="color: var(--shiki-color-text)">.type); </span><span style="color: var(--shiki-token-comment)">// current token</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.lookahead</span><span style="color: var(--shiki-color-text)">().type); </span><span style="color: var(--shiki-token-comment)">// next token</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.unexpected</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,td,qs,od,Bo,ad,nd,rd,Vo,w1=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">TokenType &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  label</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ld,De,id,zo,cd,pd,Go,hd,dd,kd,Ns,ud,Jo,vd,yd,fd,jr,md,bd,ae,Xo,gd,$o,xd,wd,Rs,Ed,Yo,_d,Td,Id,Zo,Cd,Qo,Od,Dd,Ko,Ad,ea,Pd,Sd,Mr,Ld,jd,Ae,Md,sa,Hd,qd,ta,Nd,Rd,Ql,w,Hr,Us,Ud,Fd,Fs,Wd,Ws,Bd,Vd,zd,qr,Gd,Jd,oa,E1=`<div class="filename">packages/babel-parser/src/tokenizer/types.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123; [name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">TokenType</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  at</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">TokenType</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;@&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  atat</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">TokenType</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;@@&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,Xd,$,$d,Nr,Yd,Zd,aa,Qd,Kd,na,ek,sk,Bs,tk,ok,Rr,Ur,ak,nk,z,rk,ra,lk,ik,la,ck,pk,ia,hk,dk,ca,kk,uk,vk,pa,_1=`<div class="filename">packages/babel-parser/src/tokenizer/index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">getTokenFromCode</span><span style="color: var(--shiki-color-text)">(code: number): </span><span style="color: var(--shiki-token-keyword)">void</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">switch</span><span style="color: var(--shiki-color-text)"> (code) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">charCodes</span><span style="color: var(--shiki-color-text)">.atSign:</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// if the next character is a &#96;@&#96;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">input</span><span style="color: var(--shiki-token-function)">.charCodeAt</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">state</span><span style="color: var(--shiki-color-text)">.pos </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">charCodes</span><span style="color: var(--shiki-color-text)">.atSign) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// create &#96;tt.atat&#96; instead</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.finishOp</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">tt</span><span style="color: var(--shiki-color-text)">.atat</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.finishOp</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">tt</span><span style="color: var(--shiki-color-text)">.at</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,yk,Fr,fk,mk,ha,T1=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// current token</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">TokenType &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  label</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@@&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// next token</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">TokenType &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  label</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;name&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,bk,da,gk,Vs,xk,Kl,f,Wr,zs,wk,Ek,Gs,_k,Js,Tk,Ik,Ck,Br,Xs,Vr,zr,ze,ug,Ok,Pe,Dk,ka,Ak,Pk,ua,Sk,Lk,jk,Se,Mk,va,Hk,qk,ya,Nk,Rk,Uk,Gr,$s,Jr,Xr,Ge,vg,Fk,$r,Wk,Bk,G,Vk,Yr,zk,Gk,fa,Jk,Xk,Ys,$k,Yk,ma,Zk,Qk,Kk,ba,I1=`<div class="filename">packages/babel-parser/src/parser/statement.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">StatementParser</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ExpressionParser</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">parseFunction</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">T</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">N</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">NormalFunction</span><span style="color: var(--shiki-color-text)">&gt;(</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    node</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">T</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    statement</span><span style="color: var(--shiki-token-keyword)">?:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">FUNC_NO_FLAGS</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    isAsync</span><span style="color: var(--shiki-token-keyword)">?:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">boolean</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  )</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">T</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.generator </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.eat</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">tt</span><span style="color: var(--shiki-color-text)">.star);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.curry </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.eat</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">tt</span><span style="color: var(--shiki-color-text)">.atat);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,eu,Zr,su,tu,ga,C1=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)"> PASS  packages/babel-parser/test/curry-function.js</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  curry </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">syntax</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    \u2713 should parse (12ms)</span></span></code></pre>`,ou,Qr,au,nu,Kr,ru,ei,y,el,Zs,lu,iu,Qs,cu,sl,pu,hu,du,tl,ku,uu,xa,O1=`<pre class="prism language-"><code><span class="line">...</span>
<span class="line">ExponentiationExpression -&gt; UnaryExpression</span>
<span class="line">                            UpdateExpression ** ExponentiationExpression</span>
<span class="line">MultiplicativeExpression -&gt; ExponentiationExpression</span>
<span class="line">                            MultiplicativeExpression (&quot;*&quot; or &quot;/&quot; or &quot;%&quot;) ExponentiationExpression</span>
<span class="line">AdditiveExpression       -&gt; MultiplicativeExpression</span>
<span class="line">                            AdditiveExpression + MultiplicativeExpression</span>
<span class="line">                            AdditiveExpression - MultiplicativeExpression</span>
<span class="line">...</span></code></pre>`,vu,Ks,yu,wa,fu,mu,bu,Le,et,gu,Ea,xu,wu,Eu,ne,_u,_a,Tu,Iu,Ta,Cu,Ou,Ia,Du,Au,Pu,re,Su,Ca,Lu,ju,Oa,Mu,Hu,Da,qu,Nu,Ru,st,Uu,Aa,Fu,Wu,Bu,Pa,D1='<pre class="prism language-"><code><span class="line">(AdditiveExpression &quot;+&quot; 1 (MultiplicativeExpression &quot;*&quot; 2 3))</span></code></pre>',Vu,ol,zu,Gu,Sa,A1='<pre class="prism language-"><code><span class="line">(MultiplicativeExpression &quot;*&quot; (AdditiveExpression &quot;+&quot; 1 2) 3)</span></code></pre>',Ju,al,Xu,$u,La,P1=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Parser</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">parseAdditiveExpression</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">left</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.parseMultiplicativeExpression</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// if the current token is &#96;+&#96; or &#96;-&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.match</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">tt</span><span style="color: var(--shiki-color-text)">.plus) </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.match</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">tt</span><span style="color: var(--shiki-color-text)">.minus)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">operator</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">state</span><span style="color: var(--shiki-color-text)">.type;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// move on to the next token</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.nextToken</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">right</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.parseMultiplicativeExpression</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// create the node</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.finishNode</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          operator</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          left</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          right</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-string-expression)">&#39;BinaryExpression&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      );</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// return as MultiplicativeExpression</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> left;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Yu,nl,rl,Zu,Qu,J,Ku,ja,ev,sv,Ma,tv,ov,Ha,av,nv,tt,rv,lv,si,m,ll,ot,iv,cv,le,pv,qa,hv,dv,Na,kv,uv,Ra,vv,yv,fv,ie,Je,il,Ua,mv,bv,Fa,gv,xv,wv,Wa,cl,Ba,Ev,_v,Tv,U,pl,Va,Iv,Cv,za,Ov,Dv,Ga,Av,Pv,Ja,Sv,Lv,Xa,jv,hl,Y,$a,Mv,Hv,Ya,qv,Nv,Za,Rv,Uv,Qa,Fv,Wv,Bv,Ka,dl,en,Vv,zv,Gv,kl,Jv,Xv,sn,S1=`<div class="filename">packages/babel-parser/src/parser/statement.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">StatementParser</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ExpressionParser</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">parseStatementContent</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/* ...*/</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// NOTE: we call match to check the current token</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.match</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">tt</span><span style="color: var(--shiki-color-text)">._function)) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.next</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// NOTE: function statement has a higher precendence than a generic statement</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.parseFunction</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">parseFunction</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// NOTE: we call eat to check whether the optional token exists</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.generator </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.eat</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">tt</span><span style="color: var(--shiki-color-text)">.star);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.curry </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.eat</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">tt</span><span style="color: var(--shiki-color-text)">.atat);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.id </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.parseFunctionId</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,$v,ul,Yv,Zv,at,nt,rt,Qv,Kv,lt,ey,sy,tn,it,ty,oy,ay,ny,ry,on,vl,ly,iy,cy,yl,py,hy,je,dy,an,ky,uy,nn,vy,yy,fy,fl,ct,yg,my,by,ti,d,ml,pt,gy,xy,bl,wy,Ey,gl,_y,Ty,rn,Iy,ht,Cy,Oy,ln,L1=`<div class="filename">babel-plugin-transformation-curry-function.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> customParser </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./custom-parser&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ourBabelPlugin</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">parserOverride</span><span style="color: var(--shiki-color-text)">(code</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> opts) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">customParser</span><span style="color: var(--shiki-token-function)">.parse</span><span style="color: var(--shiki-color-text)">(code</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> opts);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Dy,xl,Ay,Py,cn,Sy,wl,Ly,jy,My,Hy,El,qy,Ny,ce,Ry,dt,Uy,Fy,pn,Wy,By,hn,Vy,zy,Gy,_l,kt,Jy,ut,Xy,$y,Yy,Zy,Qy,vt,Ky,dn,ef,sf,tf,kn,j1=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">currying</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">numParamsRequired</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fn</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">curryFactory</span><span style="color: var(--shiki-color-text)">(params) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">args) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newParams</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">params</span><span style="color: var(--shiki-token-function)">.concat</span><span style="color: var(--shiki-color-text)">(args);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">newParams</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&gt;=</span><span style="color: var(--shiki-color-text)"> numParamsRequired) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">newParams);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">curryFactory</span><span style="color: var(--shiki-color-text)">(newParams);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">curryFactory</span><span style="color: var(--shiki-color-text)">([]);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,of,Tl,Xe,af,yt,nf,rf,ft,lf,cf,Il,pf,hf,un,M1=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// from</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> @@ </span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">(a</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> b</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> c) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> a </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> b </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> c;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// to</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">foo</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">currying</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">(a</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> b</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> c) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> a </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> b </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> c;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;)</span></span></code></pre>`,df,Cl,Me,kf,mt,uf,vf,vn,yf,ff,mf,bt,bf,yn,gf,xf,wf,fn,H1=`<div class="filename">babel-plugin-transformation-curry-function.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ourBabelPlugin</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    visitor</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">FunctionDeclaration</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;curry&#39;</span><span style="color: var(--shiki-color-text)">).node) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-comment)">// const foo = curry(function () &#123; ... &#125;);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.curry </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.replaceWith</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.variableDeclaration</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;const&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.variableDeclarator</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.identifier</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;id.name&#39;</span><span style="color: var(--shiki-color-text)">).node)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.callExpression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.identifier</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;currying&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.toExpression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.node)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">                ])</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">              )</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">            ])</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          );</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ef,gt,_f,mn,Tf,If,Cf,Ol,Of,oi,Z,Dl,He,Df,bn,Af,Pf,Sf,Al,Lf,jf,pe,Mf,gn,Hf,qf,Pl,Nf,Rf,xt,Uf,Ff,Wf,qe,Bf,xn,Vf,zf,wn,Gf,Jf,ai,E,Sl,$e,Xf,En,$f,Yf,X,Zf,_n,Qf,Kf,Tn,em,sm,In,tm,om,Cn,am,nm,rm,On,q1=`<div class="filename">package.json</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&quot;resolutions&quot;</span><span style="color: var(--shiki-color-text)">: &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">&quot;@babel/helpers&quot;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;7.6.0--your-custom-forked-version&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,lm,Ll,Ye,jl,im,cm,wt,pm,hm,dm,Et,km,Dn,um,vm,ym,_t,fm,Tt,mm,bm,gm,An,N1=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">helpers</span><span style="color: var(--shiki-color-text)">.currying </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">helper</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;7.6.0&quot;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  export default function currying(fn) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    const numParamsRequired = fn.length;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    function curryFactory(params) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">      return function (...args) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">        const newParams = params.concat(args);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">        if (newParams.length &gt;= numParamsRequired) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">          return fn(...newParams);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">        &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">        return curryFactory(newParams);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    return curryFactory([]);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`,xm,he,wm,Pn,Em,_m,Sn,Tm,Im,Ln,Cm,Om,Dm,It,Am,jn,Pm,Sm,Lm,Mn,R1=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.replaceWith</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.variableDeclaration</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;const&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.variableDeclarator</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.identifier</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;id.name&#39;</span><span style="color: var(--shiki-color-text)">).node)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.callExpression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.addHelper</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;currying&quot;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.toExpression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.node)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      ])</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    )</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ])</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,jm,Ne,Mm,Hn,Hm,qm,qn,Nm,Rm,ni,H,Ml,Ct,Um,Fm,de,Wm,Ot,Bm,Nn,Vm,zm,Gm,Rn,Jm,Xm,Un,$m,Ym,Zm,Dt,Qm,Fn,Km,eb,sb,Re,tb,At,ob,ab,Pt,nb,rb,lb,St,ib,Lt,cb,pb,hb,db,ri,F,Hl,jt,kb,ub,ql,vb,yb,Nl,fb,mb,Mt,bb,Wn,gb,xb,wb,Ht,Eb,qt,_b,Tb,li,W,Rl,Nt,Ib,Cb,Ul,Ob,Db,Ue,Rt,Ut,Ab,Pb,Ft,Sb,Lb,Bn,Wt,jb,Mb,Hb,Bt,Vt,qb,Nb,zt,Rb,Ub,Fl,Fb,Wb,ke,Gt,Jt,Bb,Vb,Xt,zb,Gb,$t,Yt,Jb,Xb,Zt,$b,Yb,Wl,Qt,Zb,Qb,Bl,Kt,Kb,ii;return I=new g_({props:{data:[{link:"overview",title:"Overview"},{link:"fork-the-babel",title:"Fork the babel",nested:[{link:"crash-course-on-parsing-code-to-ast",title:"Crash Course on Parsing Code to AST"}]},{link:"our-custom-babel-parser",title:"Our custom babel parser",nested:[{link:"a-new-token",title:"A new token: '@@'"},{link:"the-new-parser",title:"The new parser"},{link:"how-parsing-works",title:"How parsing works",nested:[{link:"this-eat-this-match-this-next",title:"this.eat, this.match, this.next"}]}]},{link:"our-babel-plugin",title:"Our babel plugin",nested:[{link:"1-assume-currying-has-been-declared-in-the-global-scope",title:"1. Assume  `currying`  has been declared in the global scope."},{link:"2-use-the-babel-helpers",title:"2. Use the  `@babel/helpers`"}]},{link:"closing-note",title:"Closing Note"},{link:"editor-s-note",title:"Editor's Note"},{link:"further-reading",title:"Further Reading"}]}}),{c(){l1(I.$$.fragment),se=i(),R=a("p"),cs=s("Following my previous post on "),O=a("a"),te=s("writing a custom babel transformation"),to=s(", today I am going to show you how you can create a custom JavaScript syntax with Babel."),Xl=i(),x=a("section"),lr=a("h2"),ps=a("a"),Yi=s("Overview"),Zi=i(),ir=a("p"),Qi=s("Let me show you what we will achieve at the end of this article:"),Ki=i(),oo=a("div"),ec=i(),L=a("p"),sc=s("We are going to create a "),hs=a("a"),tc=s("curry function"),oc=s(" syntax "),ao=a("code"),ac=s("@@"),nc=s(". The syntax is like the "),ds=a("a"),rc=s("generator function"),lc=s(", except you place "),no=a("code"),ic=s("@@"),cc=s(" instead of "),ro=a("code"),pc=s("*"),hc=s(" in between the "),lo=a("code"),dc=s("function"),kc=s(" keyword and the function name, eg "),io=a("code"),uc=s("function @@ name(arg1, arg2)"),vc=s("."),yc=i(),oe=a("p"),fc=s("In this example, you can have "),ks=a("a"),mc=s("partial application"),bc=s(" with the function "),co=a("code"),gc=s("foo"),xc=s(". Calling "),po=a("code"),wc=s("foo"),Ec=s(" with the number of parameters less than the arguments required will return a new function of the remaining arguments:"),_c=i(),ho=a("div"),Tc=i(),cr=a("blockquote"),j=a("p"),Ic=s("The reason I choose "),ko=a("code"),Cc=s("@@"),Oc=s(" is that you can't have "),uo=a("code"),Dc=s("@"),Ac=s(" in a variable name, so "),vo=a("code"),Pc=s("function@@foo(){}"),Sc=s(' is still a valid syntax. And the "operator" '),yo=a("code"),Lc=s("@"),jc=s(" is used for "),us=a("a"),Mc=s("decorator functions"),Hc=s(" but I wanted to use something entirely new, thus "),fo=a("code"),qc=s("@@"),Nc=s("."),Rc=i(),pr=a("p"),Uc=s("To achieve this, we are going to:"),Fc=i(),vs=a("ul"),hr=a("li"),Wc=s("Fork the babel parser"),Bc=i(),dr=a("li"),Vc=s("Create a custom babel transformation plugin"),zc=i(),kr=a("p"),Gc=s("Sounds impossible \u{1F628}?"),Jc=i(),ur=a("p"),Xc=s("Don't worry, I will guide you through every step. Hopefully, at the end of this article, you will be the babel master amongst your peers. \u{1F920}"),$l=i(),C=a("section"),vr=a("h2"),ys=a("a"),$c=s("Fork the babel"),Yc=i(),fs=a("p"),Zc=s("Head over to "),ms=a("a"),Qc=s("babel's Github repo"),Kc=s(', click the "Fork" button located at the top left of the page.'),ep=i(),yr=a("p"),bs=a("picture"),fr=a("source"),mr=a("source"),Be=a("img"),sp=i(),br=a("p"),tp=s("If this is your first time forking a popular open-source project, congratulations! \u{1F389}"),op=i(),gs=a("p"),ap=s("Clone your forked babel to your local workspace and "),xs=a("a"),np=s("set it up"),rp=s(":"),lp=i(),mo=a("div"),ip=i(),gr=a("p"),cp=s("Meanwhile, let me briefly walk you through how the babel repository is organised."),pp=i(),V=a("p"),hp=s("Babel uses a monorepo structure, all the packages, eg: "),bo=a("code"),dp=s("@babel/core"),kp=s(", "),go=a("code"),up=s("@babel/parser"),vp=s(", "),xo=a("code"),yp=s("@babel/plugin-transform-react-jsx"),fp=s(", etc are in the "),wo=a("code"),mp=s("packages/"),bp=s(" folder:"),gp=i(),Eo=a("div"),xp=i(),xr=a("blockquote"),wr=a("small"),wp=s("**Trivia:** Babel uses [Makefile](https://opensource.com/article/18/8/what-how-makefile) for automating tasks. For build task, such as `make build`, it will use [Gulp](https://gulpjs.com) as the task runner."),Yl=i(),M=a("section"),Er=a("h3"),ws=a("a"),Ep=s("Crash Course on Parsing Code to AST"),_p=i(),Ee=a("p"),Tp=s("Before we proceed, if you are unfamiliar with parsers and Abstract Syntax Tree (AST), I highly recommend to checkout "),Es=a("a"),Ip=s("Vaidehi Joshi"),Cp=s("'s "),_s=a("a"),Op=s("Leveling Up One\u2019s Parsing Game With ASTs"),Dp=s("."),Ap=i(),_r=a("p"),Pp=s("To summarise, this is what happened when babel is parsing your code:"),Sp=i(),_e=a("ul"),Ve=a("li"),Lp=s("Your code as a "),_o=a("code"),jp=s("string"),Mp=s(" is a long list of characters: "),To=a("code"),Hp=s("f, u, n, c, t, i, o, n, , @, @, f, ..."),qp=i(),ve=a("li"),Np=s("The first step is called "),Tr=a("strong"),Rp=s("tokenization"),Up=s(", where babel scans through each character and creates "),Ir=a("em"),Fp=s("tokens"),Wp=s(", like "),Io=a("code"),Bp=s("function, @@, foo, (, a, ..."),Vp=i(),Te=a("li"),zp=s("The tokens then pass through a parser for "),Cr=a("strong"),Gp=s("Syntax analysis"),Jp=s(", where babel creates an AST based on "),Ts=a("a"),Xp=s("JavaScript language specification"),$p=s("."),Yp=i(),Ie=a("p"),Zp=s("If you want to learn more in-depth on compilers in general, "),Is=a("a"),Qp=s("Robert Nystrom"),Kp=s("'s "),Cs=a("a"),eh=s("Crafting Interpreters"),sh=s(" is a gem."),th=i(),Or=a("blockquote"),Dr=a("small"),oh=s("Don't get scared of by the word **compiler**, it is nothing but parsing your code and generate XXX out of it. XXX could be machine code, which is the compiler most of us have in mind; XXX could be JavaScript compatible with older browsers, which is the case for Babel."),Zl=i(),h=a("section"),Ar=a("h2"),Os=a("a"),ah=s("Our custom babel parser"),nh=i(),Ds=a("p"),rh=s("The folder we are going to work on is "),Co=a("code"),lh=s("packages/babel-parser/"),ih=s(":"),ch=i(),Oo=a("div"),ph=i(),N=a("p"),hh=s("We've talked about "),Pr=a("em"),dh=s("tokenization"),kh=s(" and "),Sr=a("em"),uh=s("parsing"),vh=s(", now it's clear where to find the code for each process. "),Do=a("code"),yh=s("plugins/"),fh=s(" folder contains plugins that extend the base parser and add custom syntaxes, such as "),Ao=a("code"),mh=s("jsx"),bh=s(" and "),Po=a("code"),gh=s("flow"),xh=s("."),wh=i(),As=a("p"),Eh=s("Let's do a "),Ps=a("a"),_h=s("Test-driven development (TDD)"),Th=s('. I find it easier to define the test case then slowly work our way to "fix" it. It is especially true in an unfamiliar codebase, TDD allows you to "easily" point out code places you need to change.'),Ih=i(),So=a("div"),Ch=i(),Ce=a("p"),Oh=s("You can run "),Lo=a("code"),Dh=s('TEST_ONLY=babel-parser TEST_GREP="curry function" make test-only'),Ah=s(" to run tests for "),jo=a("code"),Ph=s("babel-parser"),Sh=s(" and see your failing case:"),Lh=i(),Mo=a("div"),jh=i(),Ss=a("blockquote"),Lr=a("small"),Mh=s("If you find scanning through all the test cases takes time, you can directly call `jest` to run the test:"),Hh=i(),Ho=a("div"),qh=i(),Ls=a("p"),Nh=s("Our parser found 2 seemingly innocent "),qo=a("code"),Rh=s("@"),Uh=s(" tokens at a place where they shouldn't be present."),Fh=i(),js=a("p"),Wh=s("How do I know that? Let's start the watch mode, "),No=a("code"),Bh=s("make watch"),Vh=s(", wear our detective cap \u{1F575}\uFE0F\u200D and start digging!"),zh=i(),Oe=a("p"),Gh=s("Tracing the stack trace, led us to "),Ms=a("a"),Ro=a("code"),Jh=s("packages/babel-parser/src/parser/expression.js"),Xh=s(" where it throws "),Uo=a("code"),$h=s("this.unexpected()"),Yh=s("."),Zh=i(),Hs=a("p"),Qh=s("Let us add some "),Fo=a("code"),Kh=s("console.log"),ed=s(":"),sd=i(),Wo=a("div"),td=i(),qs=a("p"),od=s("As you can see, both tokens are "),Bo=a("code"),ad=s("@"),nd=s(" token:"),rd=i(),Vo=a("div"),ld=i(),De=a("p"),id=s("How do I know "),zo=a("code"),cd=s("this.state.type"),pd=s(" and "),Go=a("code"),hd=s("this.lookahead().type"),dd=s(" will give me the current and the next token?"),kd=i(),Ns=a("p"),ud=s("Well, I'll explained them "),Jo=a("a"),vd=s("later"),yd=s("."),fd=i(),jr=a("p"),md=s("Let's recap what we've done so far before we move on:"),bd=i(),ae=a("ul"),Xo=a("li"),gd=s("We've written a test case for "),$o=a("code"),xd=s("babel-parser"),wd=i(),Rs=a("li"),Ed=s("We ran "),Yo=a("code"),_d=s("make test-only"),Td=s(" to run the test case"),Id=i(),Zo=a("li"),Cd=s("We've started the watch mode via "),Qo=a("code"),Od=s("make watch"),Dd=i(),Ko=a("li"),Ad=s("We've learned about parser state, and console out the current token type, "),ea=a("code"),Pd=s("this.state.type"),Sd=i(),Mr=a("p"),Ld=s("Here's what we are going to do next:"),jd=i(),Ae=a("p"),Md=s("If there's 2 consecutive "),sa=a("code"),Hd=s("@"),qd=s(", it should not be separate tokens, it should be a "),ta=a("code"),Nd=s("@@"),Rd=s(" token, the new token we just defined for our curry function"),Ql=i(),w=a("section"),Hr=a("h3"),Us=a("a"),Ud=s("A new token: '@@'"),Fd=i(),Fs=a("p"),Wd=s("Let's first look at where a token type is defined: "),Ws=a("a"),Bd=s("packages/babel-parser/src/tokenizer/types.js"),Vd=s("."),zd=i(),qr=a("p"),Gd=s("Here you see a list of tokens, so let's add our new token definition in as well:"),Jd=i(),oa=a("div"),Xd=i(),$=a("p"),$d=s("Next, let's find out where the token gets created during "),Nr=a("em"),Yd=s("tokenization"),Zd=s(". A quick search on "),aa=a("code"),Qd=s("tt.at"),Kd=s(" within "),na=a("code"),ek=s("babel-parser/src/tokenizer"),sk=s(" lead us to "),Bs=a("a"),tk=s("packages/babel-parser/src/tokenizer/index.js"),ok=i(),Rr=a("blockquote"),Ur=a("small"),ak=s("Well, token types are import as `tt` throughout the babel-parser."),nk=i(),z=a("p"),rk=s("Let's create the token "),ra=a("code"),lk=s("tt.atat"),ik=s(" instead of "),la=a("code"),ck=s("tt.at"),pk=s(" if there's another "),ia=a("code"),hk=s("@"),dk=s(" succeed the current "),ca=a("code"),kk=s("@"),uk=s(":"),vk=i(),pa=a("div"),yk=i(),Fr=a("p"),fk=s("If you run the test again, you will see that the current token and the next token has changed:"),mk=i(),ha=a("div"),bk=i(),da=a("p"),gk=s("Yeah! It looks good and lets move on. "),Vs=a("span"),xk=s("\u{1F3C3}\u200D"),Kl=i(),f=a("section"),Wr=a("h3"),zs=a("a"),wk=s("The new parser"),Ek=i(),Gs=a("p"),_k=s("Before we move on, let's inspect how "),Js=a("a"),Tk=s("generator functions are represented in AST"),Ik=s(":"),Ck=i(),Br=a("p"),Xs=a("picture"),Vr=a("source"),zr=a("source"),ze=a("img"),Ok=i(),Pe=a("p"),Dk=s("As you can see, a generator function is represented by the "),ka=a("code"),Ak=s("generator: true"),Pk=s(" attribute of a "),ua=a("code"),Sk=s("FunctionDeclaration"),Lk=s("."),jk=i(),Se=a("p"),Mk=s("Similarly, we can add a "),va=a("code"),Hk=s("curry: true"),qk=s(" attribute of the "),ya=a("code"),Nk=s("FunctionDeclaration"),Rk=s(" too if it is a curry function:"),Uk=i(),Gr=a("p"),$s=a("picture"),Jr=a("source"),Xr=a("source"),Ge=a("img"),Fk=i(),$r=a("p"),Wk=s("We have a plan now, let's implement it."),Bk=i(),G=a("p"),Vk=s("A quick search on "),Yr=a("em"),zk=s('"FunctionDeclaration"'),Gk=s(" leads us to a function called "),fa=a("code"),Jk=s("parseFunction"),Xk=s(" in "),Ys=a("a"),$k=s("packages/babel-parser/src/parser/statement.js"),Yk=s(", and here we find a line that sets the "),ma=a("code"),Zk=s("generator"),Qk=s(" attribute, let's add one more line:"),Kk=i(),ba=a("div"),eu=i(),Zr=a("p"),su=s("If you run the test again, you will be amazed that it passed!"),tu=i(),ga=a("div"),ou=i(),Qr=a("p"),au=s("That's it? How did we miraculously fix it?"),nu=i(),Kr=a("p"),ru=s("I am going to briefly explain how parsing works, and in the process hopefully, you understood what that one-liner change did."),ei=i(),y=a("section"),el=a("h3"),Zs=a("a"),lu=s("How parsing works"),iu=i(),Qs=a("p"),cu=s("With the list of tokens from the "),sl=a("em"),pu=s("tokenizer"),hu=s(", the parser consumes the token one by one and constructs the AST. The parser uses the language grammar specification to decide how to use the tokens, which token to expect next."),du=i(),tl=a("p"),ku=s("The grammar specification looks something like this:"),uu=i(),xa=a("div"),vu=i(),Ks=a("p"),yu=s("It explains the precedence of each expressions/statements. For example, an "),wa=a("code"),fu=s("AdditiveExpression"),mu=s(" is made up of either:"),bu=i(),Le=a("ul"),et=a("li"),gu=s("a "),Ea=a("code"),xu=s("MultiplicativeExpression"),wu=s(", or"),Eu=i(),ne=a("li"),_u=s("an "),_a=a("code"),Tu=s("AdditiveExpression"),Iu=s(" followed by "),Ta=a("code"),Cu=s("+"),Ou=s(" operator token followed by "),Ia=a("code"),Du=s("MultiplicativeExpression"),Au=s(", or"),Pu=i(),re=a("li"),Su=s("an "),Ca=a("code"),Lu=s("AdditiveExpression"),ju=s(" followed by "),Oa=a("code"),Mu=s("-"),Hu=s(" operator token followed by "),Da=a("code"),qu=s("MultiplicativeExpression"),Nu=s("."),Ru=i(),st=a("p"),Uu=s("So if you have an expression "),Aa=a("code"),Fu=s("1 + 2 * 3"),Wu=s(", it will be like:"),Bu=i(),Pa=a("div"),Vu=i(),ol=a("p"),zu=s("instead of"),Gu=i(),Sa=a("div"),Ju=i(),al=a("p"),Xu=s("With these rules, we translate them into parser code:"),$u=i(),La=a("div"),Yu=i(),nl=a("p"),rl=a("em"),Zu=s("This is a made-up code that oversimplifies what babel have, but I hope you get the gist of it."),Qu=i(),J=a("p"),Ku=s("As you can see here, the parser is recursively in nature, and it goes from the lowest precedence to the highest precedence expressions/statements. Eg: "),ja=a("code"),ev=s("parseAdditiveExpression"),sv=s(" calls "),Ma=a("code"),tv=s("parseMultiplicativeExpression"),ov=s(", which in turn calls "),Ha=a("code"),av=s("parseExponentiationExpression"),nv=s(", which in turn calls ... . This recursive process is called the "),tt=a("a"),rv=s("Recursive Descent Parsing"),lv=s("."),si=i(),m=a("section"),ll=a("h4"),ot=a("a"),iv=s("this.eat, this.match, this.next"),cv=i(),le=a("p"),pv=s("If you have noticed, in my examples above, I used some utility function, such as "),qa=a("code"),hv=s("this.eat"),dv=s(", "),Na=a("code"),kv=s("this.match"),uv=s(", "),Ra=a("code"),vv=s("this.next"),yv=s(", etc. These are babel parser's internal functions, yet they are quite ubiquitous amongst parsers as well:"),fv=i(),ie=a("ul"),Je=a("li"),il=a("strong"),Ua=a("code"),mv=s("this.match"),bv=s(" returns a "),Fa=a("code"),gv=s("boolean"),xv=s(" indicating whether the current token matches the condition"),wv=i(),Wa=a("li"),cl=a("strong"),Ba=a("code"),Ev=s("this.next"),_v=s(" moves the token list forward to point to the next token"),Tv=i(),U=a("li"),pl=a("strong"),Va=a("code"),Iv=s("this.eat"),Cv=s(" return what "),za=a("code"),Ov=s("this.match"),Dv=s(" returns and if "),Ga=a("code"),Av=s("this.match"),Pv=s(" returns "),Ja=a("code"),Sv=s("true"),Lv=s(", will do "),Xa=a("code"),jv=s("this.next"),hl=a("ul"),Y=a("li"),$a=a("code"),Mv=s("this.eat"),Hv=s(" is commonly used for optional operators, like "),Ya=a("code"),qv=s("*"),Nv=s(" in generator function, "),Za=a("code"),Rv=s(";"),Uv=s(" at the end of statements, and "),Qa=a("code"),Fv=s("?"),Wv=s(" in typescript types."),Bv=i(),Ka=a("li"),dl=a("strong"),en=a("code"),Vv=s("this.lookahead"),zv=s(" get the next token without moving forward to make a decision on the current node"),Gv=i(),kl=a("p"),Jv=s("If you take a look again the parser code we just changed, it's easier to read it in now."),Xv=i(),sn=a("div"),$v=i(),ul=a("p"),Yv=s("I know I didn't do a good job explaining how a parser works. Here are some resources that I learned from, and I highly recommend them:"),Zv=i(),at=a("ul"),nt=a("li"),rt=a("a"),Qv=s("Crafting Interpreters"),Kv=s(" by "),lt=a("a"),ey=s("Robert Nystrom"),sy=i(),tn=a("li"),it=a("a"),ty=s('Free Udacity course: "Compilers: Theory and Practice"'),oy=s(", offered by Georgia Tech"),ay=i(),ny=a("hr"),ry=i(),on=a("p"),vl=a("strong"),ly=s("Side Note"),iy=s(': You might be curious how am I able to visualize the custom syntax in the Babel AST Explorer, where I showed you the new "curry" attribute in the AST.'),cy=i(),yl=a("p"),py=s("That's because I've added a new feature in the Babel AST Explorer where you can upload your custom parser!"),hy=i(),je=a("p"),dy=s("If you go to "),an=a("code"),ky=s("packages/babel-parser/lib"),uy=s(", you would find the compiled version of your parser and the source map. Open the drawer of the Babel AST Explorer, you will see a button to upload a custom parser. Drag the "),nn=a("code"),vy=s("packages/babel-parser/lib/index.js"),yy=s(" in and you will be visualizing the AST generated via your custom parser!"),fy=i(),fl=a("p"),ct=a("img"),my=i(),by=a("hr"),ti=i(),d=a("section"),ml=a("h2"),pt=a("a"),gy=s("Our babel plugin"),xy=i(),bl=a("p"),wy=s("With our custom babel parser done, let's move on to write our babel plugin."),Ey=i(),gl=a("p"),_y=s("But maybe before that, you may have some doubts on how are we going to use our custom babel parser, especially with whatever build stack we are using right now?"),Ty=i(),rn=a("p"),Iy=s("Well, fret not. A babel plugin can provide a custom parser, which is "),ht=a("a"),Cy=s("documented on the babel website"),Oy=i(),ln=a("div"),Dy=i(),xl=a("p"),Ay=s("Since we forked out the babel parser, all existing babel parser options or built-in plugins will still work perfectly."),Py=i(),cn=a("p"),Sy=s("With this doubt out of the way, let see how we can make our curry function curryable? "),wl=a("em"),Ly=s("(not entirely sure there's such word)"),jy=i(),My=a("hr"),Hy=i(),El=a("p"),qy=s("Before we start, if you have eagerly tried to add our plugin into your build system, you would notice that the curry function gets compiled to a normal function."),Ny=i(),ce=a("p"),Ry=s("This is because, after parsing + transformation, babel will use "),dt=a("a"),Uy=s("@babel/generator"),Fy=s(" to generate code from the transformed AST. Since the "),pn=a("code"),Wy=s("@babel/generator"),By=s(" has no idea about the new "),hn=a("code"),Vy=s("curry"),zy=s(" attribute we added, it will be omitted."),Gy=i(),_l=a("blockquote"),kt=a("p"),Jy=s("If one day curry function becomes the new JavaScript syntax, you may want to make a pull request to add one more line "),ut=a("a"),Xy=s("here"),$y=s("!"),Yy=i(),Zy=a("hr"),Qy=i(),vt=a("p"),Ky=s("Ok, to make our function curryable, we can wrap it with a "),dn=a("code"),ef=s("currying"),sf=s(" helper higher-order function:"),tf=i(),kn=a("div"),of=i(),Tl=a("blockquote"),Xe=a("p"),af=s("If you want to learn how to write a currying function, you can read this "),yt=a("a"),nf=s("Currying in JS"),rf=s(" by "),ft=a("a"),lf=s("Shirsh Zibbu"),cf=i(),Il=a("p"),pf=s("So when we transform our curry function, we can transform it into the following:"),hf=i(),un=a("div"),df=i(),Cl=a("blockquote"),Me=a("p"),kf=s("Let's first ignore "),mt=a("a"),uf=s("function hoisting"),vf=s(" in JavaScript, where you can call "),vn=a("code"),yf=s("foo"),ff=s(" before it is defined."),mf=i(),bt=a("p"),bf=s("If you have read my "),yn=a("a"),gf=s("step-by-step guide on babel transformation"),xf=s(", writing this transformation should be manageable:"),wf=i(),fn=a("div"),Ef=i(),gt=a("p"),_f=s("The question is how do we provide the "),mn=a("code"),Tf=s("currying"),If=s(" function?"),Cf=i(),Ol=a("p"),Of=s("There are 2 ways:"),oi=i(),Z=a("section"),Dl=a("h3"),He=a("a"),Df=s("1. Assume "),bn=a("code"),Af=s("currying"),Pf=s(" has been declared in the global scope."),Sf=i(),Al=a("p"),Lf=s("Basically, your job is done here."),jf=i(),pe=a("p"),Mf=s("If "),gn=a("code"),Hf=s("currying"),qf=s(" is not defined, then when executing the compiled code, the runtime will scream out "),Pl=a("em"),Nf=s('"currying is not defined"'),Rf=s(", just like the "),xt=a("a"),Uf=s('"regeneratorRuntime is not defined"'),Ff=s("."),Wf=i(),qe=a("p"),Bf=s("So probably you have to educate the users to install "),xn=a("code"),Vf=s("currying"),zf=s(" polyfills in order to use your "),wn=a("code"),Gf=s("babel-plugin-transformation-curry-function"),Jf=s("."),ai=i(),E=a("section"),Sl=a("h3"),$e=a("a"),Xf=s("2. Use the "),En=a("code"),$f=s("@babel/helpers"),Yf=i(),X=a("p"),Zf=s("You can add a new helper to "),_n=a("code"),Qf=s("@babel/helpers"),Kf=s(", which of course you are unlikely to merge that into the official "),Tn=a("code"),em=s("@babel/helpers"),sm=s(", so you would have to figure a way to make "),In=a("code"),tm=s("@babel/core"),om=s(" to resolve to your "),Cn=a("code"),am=s("@babel/helpers"),nm=s(":"),rm=i(),On=a("div"),lm=i(),Ll=a("p"),Ye=a("em"),jl=a("strong"),im=s("Disclaimer:"),cm=s(" I have not personally tried this, but I believe it will work. If you encountered problems trying this, "),wt=a("a"),pm=s("DM me"),hm=s(", I am very happy to discuss it with you."),dm=i(),Et=a("p"),km=s("Adding a new helper function into "),Dn=a("code"),um=s("@babel/helpers"),vm=s(" is very easy."),ym=i(),_t=a("p"),fm=s("Head over to "),Tt=a("a"),mm=s("packages/babel-helpers/src/helpers.js"),bm=s(" and add a new entry:"),gm=i(),An=a("div"),xm=i(),he=a("p"),wm=s("The helper tag function specifies the "),Pn=a("code"),Em=s("@babel/core"),_m=s(" version required. The trick here is to "),Sn=a("code"),Tm=s("export default"),Im=s(" the "),Ln=a("code"),Cm=s("currying"),Om=s(" function."),Dm=i(),It=a("p"),Am=s("To use the helper, just call the "),jn=a("code"),Pm=s("this.addHelper()"),Sm=s(":"),Lm=i(),Mn=a("div"),jm=i(),Ne=a("p"),Mm=s("The "),Hn=a("code"),Hm=s("this.addHelper"),qm=s(" will inject the helper at the top of the file if needed, and returns an "),qn=a("code"),Nm=s("Identifier"),Rm=s(" to the injected function."),ni=i(),H=a("section"),Ml=a("h2"),Ct=a("a"),Um=s("Closing Note"),Fm=i(),de=a("p"),Wm=s("We've seen how we can modify the babel parser function, write our own babel transform plugin "),Ot=a("em"),Bm=s("(which was brief mainly because I have "),Nn=a("a"),Vm=s("a detailed cover in my previous post"),zm=s(")"),Gm=s(", a brief touch on "),Rn=a("code"),Jm=s("@babel/generator"),Xm=s(" and also how we can add helper functions via "),Un=a("code"),$m=s("@babel/helpers"),Ym=s("."),Zm=i(),Dt=a("p"),Qm=s("Along the way, we had a crash course on how a parser works, which I will provide the links to "),Fn=a("a"),Km=s("further reading"),eb=s(" at the bottom."),sb=i(),Re=a("p"),tb=s("The steps we've gone through above is similar to part of the "),At=a("a"),ob=s("TC39 proposal"),ab=i(),Pt=a("a"),nb=s("process"),rb=s(" when defining a new JavaScript specification. When proposing a new specification, the champion of the proposal usually write polyfills or forked out babel to write proof-of-concept demos. As you've seen, forking a parser or writing polyfills is not the hardest part of the process, but to define the problem space, plan and think through the use cases and edge cases, and gather opinions and suggestions from the community. To this end, I am grateful to the proposal champion, for their effort in pushing the JavaScript language forward."),lb=i(),St=a("p"),ib=s("Finally, if you want to see the code we've done so far in a full picture, you can "),Lt=a("a"),cb=s("check it out from Github"),pb=s("."),hb=i(),db=a("hr"),ri=i(),F=a("section"),Hl=a("h2"),jt=a("a"),kb=s("Editor's Note"),ub=i(),ql=a("p"),vb=s("I've worked on the babel repository for a while, yet I've never added a new syntax to the babel parser before. Most of my contributions were just fixing bugs and specs compliance feature."),yb=i(),Nl=a("p"),fb=s("Yet this idea of creating a new syntax has been in my mind for a while. So I took the chance of writing a blog to try it out. It is an exhilarating experience to see it work as expected."),mb=i(),Mt=a("p"),bb=s("Having the ability to manipulate the syntax of the language you are writing is invigorating. It empowers us the possibility of writing less code or more straightforward code and shifts that complexity to compile time. Just as how "),Wn=a("code"),gb=s("async-await"),xb=s(" solves the callback hell and promise-chaining hell."),wb=i(),Ht=a("p"),Eb=s("If this article inspires you to some great idea, and you wish to discuss it with somebody, you are always more than welcome to reach out to me through "),qt=a("a"),_b=s("Twitter"),Tb=s("."),li=i(),W=a("section"),Rl=a("h2"),Nt=a("a"),Ib=s("Further Reading"),Cb=i(),Ul=a("p"),Ob=s("About compilers:"),Db=i(),Ue=a("ul"),Rt=a("li"),Ut=a("a"),Ab=s("Crafting Interpreters"),Pb=s(" by "),Ft=a("a"),Sb=s("Robert Nystrom"),Lb=i(),Bn=a("li"),Wt=a("a"),jb=s('Free Udacity course: "Compilers: Theory and Practice"'),Mb=s(", offered by Georgia Tech"),Hb=i(),Bt=a("li"),Vt=a("a"),qb=s("Leveling Up One\u2019s Parsing Game With ASTs"),Nb=s(" by "),zt=a("a"),Rb=s("Vaidehi Joshi"),Ub=i(),Fl=a("p"),Fb=s("Misc:"),Wb=i(),ke=a("ul"),Gt=a("li"),Jt=a("a"),Bb=s("Understanding hoisting in JavaScript"),Vb=s(" by "),Xt=a("a"),zb=s("Mabishi Wakio"),Gb=i(),$t=a("li"),Yt=a("a"),Jb=s("Currying in JS"),Xb=s(" by "),Zt=a("a"),$b=s("Shirsh Zibbu"),Yb=i(),Wl=a("li"),Qt=a("a"),Zb=s("TC39 Proposals"),Qb=i(),Bl=a("li"),Kt=a("a"),Kb=s("TC39 Process Document"),this.h()},l(p){i1(I.$$.fragment,p),se=c(p),R=n(p,"P",{});var v=r(R);cs=t(v,"Following my previous post on "),O=n(v,"A",{href:!0});var fg=r(O);te=t(fg,"writing a custom babel transformation"),fg.forEach(o),to=t(v,", today I am going to show you how you can create a custom JavaScript syntax with Babel."),v.forEach(o),Xl=c(p),x=n(p,"SECTION",{});var D=r(x);lr=n(D,"H2",{});var mg=r(lr);ps=n(mg,"A",{href:!0,id:!0});var bg=r(ps);Yi=t(bg,"Overview"),bg.forEach(o),mg.forEach(o),Zi=c(D),ir=n(D,"P",{});var gg=r(ir);Qi=t(gg,"Let me show you what we will achieve at the end of this article:"),gg.forEach(o),Ki=c(D),oo=n(D,"DIV",{class:!0});var U1=r(oo);U1.forEach(o),ec=c(D),L=n(D,"P",{});var q=r(L);sc=t(q,"We are going to create a "),hs=n(q,"A",{href:!0,rel:!0});var xg=r(hs);tc=t(xg,"curry function"),xg.forEach(o),oc=t(q," syntax "),ao=n(q,"CODE",{class:!0});var wg=r(ao);ac=t(wg,"@@"),wg.forEach(o),nc=t(q,". The syntax is like the "),ds=n(q,"A",{href:!0,rel:!0});var Eg=r(ds);rc=t(Eg,"generator function"),Eg.forEach(o),lc=t(q,", except you place "),no=n(q,"CODE",{class:!0});var _g=r(no);ic=t(_g,"@@"),_g.forEach(o),cc=t(q," instead of "),ro=n(q,"CODE",{class:!0});var Tg=r(ro);pc=t(Tg,"*"),Tg.forEach(o),hc=t(q," in between the "),lo=n(q,"CODE",{class:!0});var Ig=r(lo);dc=t(Ig,"function"),Ig.forEach(o),kc=t(q," keyword and the function name, eg "),io=n(q,"CODE",{class:!0});var Cg=r(io);uc=t(Cg,"function @@ name(arg1, arg2)"),Cg.forEach(o),vc=t(q,"."),q.forEach(o),yc=c(D),oe=n(D,"P",{});var Ze=r(oe);fc=t(Ze,"In this example, you can have "),ks=n(Ze,"A",{href:!0,rel:!0});var Og=r(ks);mc=t(Og,"partial application"),Og.forEach(o),bc=t(Ze," with the function "),co=n(Ze,"CODE",{class:!0});var Dg=r(co);gc=t(Dg,"foo"),Dg.forEach(o),xc=t(Ze,". Calling "),po=n(Ze,"CODE",{class:!0});var Ag=r(po);wc=t(Ag,"foo"),Ag.forEach(o),Ec=t(Ze," with the number of parameters less than the arguments required will return a new function of the remaining arguments:"),Ze.forEach(o),_c=c(D),ho=n(D,"DIV",{class:!0});var F1=r(ho);F1.forEach(o),Tc=c(D),cr=n(D,"BLOCKQUOTE",{});var Pg=r(cr);j=n(Pg,"P",{});var B=r(j);Ic=t(B,"The reason I choose "),ko=n(B,"CODE",{class:!0});var Sg=r(ko);Cc=t(Sg,"@@"),Sg.forEach(o),Oc=t(B," is that you can't have "),uo=n(B,"CODE",{class:!0});var Lg=r(uo);Dc=t(Lg,"@"),Lg.forEach(o),Ac=t(B," in a variable name, so "),vo=n(B,"CODE",{class:!0});var jg=r(vo);Pc=t(jg,"function@@foo(){}"),jg.forEach(o),Sc=t(B,' is still a valid syntax. And the "operator" '),yo=n(B,"CODE",{class:!0});var Mg=r(yo);Lc=t(Mg,"@"),Mg.forEach(o),jc=t(B," is used for "),us=n(B,"A",{href:!0,rel:!0});var Hg=r(us);Mc=t(Hg,"decorator functions"),Hg.forEach(o),Hc=t(B," but I wanted to use something entirely new, thus "),fo=n(B,"CODE",{class:!0});var qg=r(fo);qc=t(qg,"@@"),qg.forEach(o),Nc=t(B,"."),B.forEach(o),Pg.forEach(o),Rc=c(D),pr=n(D,"P",{});var Ng=r(pr);Uc=t(Ng,"To achieve this, we are going to:"),Ng.forEach(o),Fc=c(D),vs=n(D,"UL",{});var ci=r(vs);hr=n(ci,"LI",{});var Rg=r(hr);Wc=t(Rg,"Fork the babel parser"),Rg.forEach(o),Bc=c(ci),dr=n(ci,"LI",{});var Ug=r(dr);Vc=t(Ug,"Create a custom babel transformation plugin"),Ug.forEach(o),ci.forEach(o),zc=c(D),kr=n(D,"P",{});var Fg=r(kr);Gc=t(Fg,"Sounds impossible \u{1F628}?"),Fg.forEach(o),Jc=c(D),ur=n(D,"P",{});var Wg=r(ur);Xc=t(Wg,"Don't worry, I will guide you through every step. Hopefully, at the end of this article, you will be the babel master amongst your peers. \u{1F920}"),Wg.forEach(o),D.forEach(o),$l=c(p),C=n(p,"SECTION",{});var S=r(C);vr=n(S,"H2",{});var Bg=r(vr);ys=n(Bg,"A",{href:!0,id:!0});var Vg=r(ys);$c=t(Vg,"Fork the babel"),Vg.forEach(o),Bg.forEach(o),Yc=c(S),fs=n(S,"P",{});var pi=r(fs);Zc=t(pi,"Head over to "),ms=n(pi,"A",{href:!0,rel:!0});var zg=r(ms);Qc=t(zg,"babel's Github repo"),zg.forEach(o),Kc=t(pi,', click the "Fork" button located at the top left of the page.'),pi.forEach(o),ep=c(S),yr=n(S,"P",{});var Gg=r(yr);bs=n(Gg,"PICTURE",{});var hi=r(bs);fr=n(hi,"SOURCE",{type:!0,srcset:!0}),mr=n(hi,"SOURCE",{type:!0,srcset:!0}),Be=n(hi,"IMG",{src:!0,loading:!0,alt:!0,title:!0}),hi.forEach(o),Gg.forEach(o),sp=c(S),br=n(S,"P",{});var Jg=r(br);tp=t(Jg,"If this is your first time forking a popular open-source project, congratulations! \u{1F389}"),Jg.forEach(o),op=c(S),gs=n(S,"P",{});var di=r(gs);ap=t(di,"Clone your forked babel to your local workspace and "),xs=n(di,"A",{href:!0,rel:!0});var Xg=r(xs);np=t(Xg,"set it up"),Xg.forEach(o),rp=t(di,":"),di.forEach(o),lp=c(S),mo=n(S,"DIV",{class:!0});var W1=r(mo);W1.forEach(o),ip=c(S),gr=n(S,"P",{});var $g=r(gr);cp=t($g,"Meanwhile, let me briefly walk you through how the babel repository is organised."),$g.forEach(o),pp=c(S),V=n(S,"P",{});var ye=r(V);hp=t(ye,"Babel uses a monorepo structure, all the packages, eg: "),bo=n(ye,"CODE",{class:!0});var Yg=r(bo);dp=t(Yg,"@babel/core"),Yg.forEach(o),kp=t(ye,", "),go=n(ye,"CODE",{class:!0});var Zg=r(go);up=t(Zg,"@babel/parser"),Zg.forEach(o),vp=t(ye,", "),xo=n(ye,"CODE",{class:!0});var Qg=r(xo);yp=t(Qg,"@babel/plugin-transform-react-jsx"),Qg.forEach(o),fp=t(ye,", etc are in the "),wo=n(ye,"CODE",{class:!0});var Kg=r(wo);mp=t(Kg,"packages/"),Kg.forEach(o),bp=t(ye," folder:"),ye.forEach(o),gp=c(S),Eo=n(S,"DIV",{class:!0});var B1=r(Eo);B1.forEach(o),xp=c(S),xr=n(S,"BLOCKQUOTE",{});var ex=r(xr);wr=n(ex,"SMALL",{});var sx=r(wr);wp=t(sx,"**Trivia:** Babel uses [Makefile](https://opensource.com/article/18/8/what-how-makefile) for automating tasks. For build task, such as `make build`, it will use [Gulp](https://gulpjs.com) as the task runner."),sx.forEach(o),ex.forEach(o),S.forEach(o),Yl=c(p),M=n(p,"SECTION",{});var Q=r(M);Er=n(Q,"H3",{});var tx=r(Er);ws=n(tx,"A",{href:!0,id:!0});var ox=r(ws);Ep=t(ox,"Crash Course on Parsing Code to AST"),ox.forEach(o),tx.forEach(o),_p=c(Q),Ee=n(Q,"P",{});var Vn=r(Ee);Tp=t(Vn,"Before we proceed, if you are unfamiliar with parsers and Abstract Syntax Tree (AST), I highly recommend to checkout "),Es=n(Vn,"A",{href:!0,rel:!0});var ax=r(Es);Ip=t(ax,"Vaidehi Joshi"),ax.forEach(o),Cp=t(Vn,"'s "),_s=n(Vn,"A",{href:!0,rel:!0});var nx=r(_s);Op=t(nx,"Leveling Up One\u2019s Parsing Game With ASTs"),nx.forEach(o),Dp=t(Vn,"."),Vn.forEach(o),Ap=c(Q),_r=n(Q,"P",{});var rx=r(_r);Pp=t(rx,"To summarise, this is what happened when babel is parsing your code:"),rx.forEach(o),Sp=c(Q),_e=n(Q,"UL",{});var zn=r(_e);Ve=n(zn,"LI",{});var Vl=r(Ve);Lp=t(Vl,"Your code as a "),_o=n(Vl,"CODE",{class:!0});var lx=r(_o);jp=t(lx,"string"),lx.forEach(o),Mp=t(Vl," is a long list of characters: "),To=n(Vl,"CODE",{class:!0});var ix=r(To);Hp=t(ix,"f, u, n, c, t, i, o, n, , @, @, f, ..."),ix.forEach(o),Vl.forEach(o),qp=c(zn),ve=n(zn,"LI",{});var eo=r(ve);Np=t(eo,"The first step is called "),Tr=n(eo,"STRONG",{});var cx=r(Tr);Rp=t(cx,"tokenization"),cx.forEach(o),Up=t(eo,", where babel scans through each character and creates "),Ir=n(eo,"EM",{});var px=r(Ir);Fp=t(px,"tokens"),px.forEach(o),Wp=t(eo,", like "),Io=n(eo,"CODE",{class:!0});var hx=r(Io);Bp=t(hx,"function, @@, foo, (, a, ..."),hx.forEach(o),eo.forEach(o),Vp=c(zn),Te=n(zn,"LI",{});var Gn=r(Te);zp=t(Gn,"The tokens then pass through a parser for "),Cr=n(Gn,"STRONG",{});var dx=r(Cr);Gp=t(dx,"Syntax analysis"),dx.forEach(o),Jp=t(Gn,", where babel creates an AST based on "),Ts=n(Gn,"A",{href:!0,rel:!0});var kx=r(Ts);Xp=t(kx,"JavaScript language specification"),kx.forEach(o),$p=t(Gn,"."),Gn.forEach(o),zn.forEach(o),Yp=c(Q),Ie=n(Q,"P",{});var Jn=r(Ie);Zp=t(Jn,"If you want to learn more in-depth on compilers in general, "),Is=n(Jn,"A",{href:!0,rel:!0});var ux=r(Is);Qp=t(ux,"Robert Nystrom"),ux.forEach(o),Kp=t(Jn,"'s "),Cs=n(Jn,"A",{href:!0,rel:!0});var vx=r(Cs);eh=t(vx,"Crafting Interpreters"),vx.forEach(o),sh=t(Jn," is a gem."),Jn.forEach(o),th=c(Q),Or=n(Q,"BLOCKQUOTE",{});var yx=r(Or);Dr=n(yx,"SMALL",{});var fx=r(Dr);oh=t(fx,"Don't get scared of by the word **compiler**, it is nothing but parsing your code and generate XXX out of it. XXX could be machine code, which is the compiler most of us have in mind; XXX could be JavaScript compatible with older browsers, which is the case for Babel."),fx.forEach(o),yx.forEach(o),Q.forEach(o),Zl=c(p),h=n(p,"SECTION",{});var k=r(h);Ar=n(k,"H2",{});var mx=r(Ar);Os=n(mx,"A",{href:!0,id:!0});var bx=r(Os);ah=t(bx,"Our custom babel parser"),bx.forEach(o),mx.forEach(o),nh=c(k),Ds=n(k,"P",{});var ki=r(Ds);rh=t(ki,"The folder we are going to work on is "),Co=n(ki,"CODE",{class:!0});var gx=r(Co);lh=t(gx,"packages/babel-parser/"),gx.forEach(o),ih=t(ki,":"),ki.forEach(o),ch=c(k),Oo=n(k,"DIV",{class:!0});var V1=r(Oo);V1.forEach(o),ph=c(k),N=n(k,"P",{});var K=r(N);hh=t(K,"We've talked about "),Pr=n(K,"EM",{});var xx=r(Pr);dh=t(xx,"tokenization"),xx.forEach(o),kh=t(K," and "),Sr=n(K,"EM",{});var wx=r(Sr);uh=t(wx,"parsing"),wx.forEach(o),vh=t(K,", now it's clear where to find the code for each process. "),Do=n(K,"CODE",{class:!0});var Ex=r(Do);yh=t(Ex,"plugins/"),Ex.forEach(o),fh=t(K," folder contains plugins that extend the base parser and add custom syntaxes, such as "),Ao=n(K,"CODE",{class:!0});var _x=r(Ao);mh=t(_x,"jsx"),_x.forEach(o),bh=t(K," and "),Po=n(K,"CODE",{class:!0});var Tx=r(Po);gh=t(Tx,"flow"),Tx.forEach(o),xh=t(K,"."),K.forEach(o),wh=c(k),As=n(k,"P",{});var ui=r(As);Eh=t(ui,"Let's do a "),Ps=n(ui,"A",{href:!0,rel:!0});var Ix=r(Ps);_h=t(Ix,"Test-driven development (TDD)"),Ix.forEach(o),Th=t(ui,'. I find it easier to define the test case then slowly work our way to "fix" it. It is especially true in an unfamiliar codebase, TDD allows you to "easily" point out code places you need to change.'),ui.forEach(o),Ih=c(k),So=n(k,"DIV",{class:!0});var z1=r(So);z1.forEach(o),Ch=c(k),Ce=n(k,"P",{});var Xn=r(Ce);Oh=t(Xn,"You can run "),Lo=n(Xn,"CODE",{class:!0});var Cx=r(Lo);Dh=t(Cx,'TEST_ONLY=babel-parser TEST_GREP="curry function" make test-only'),Cx.forEach(o),Ah=t(Xn," to run tests for "),jo=n(Xn,"CODE",{class:!0});var Ox=r(jo);Ph=t(Ox,"babel-parser"),Ox.forEach(o),Sh=t(Xn," and see your failing case:"),Xn.forEach(o),Lh=c(k),Mo=n(k,"DIV",{class:!0});var G1=r(Mo);G1.forEach(o),jh=c(k),Ss=n(k,"BLOCKQUOTE",{});var vi=r(Ss);Lr=n(vi,"SMALL",{});var Dx=r(Lr);Mh=t(Dx,"If you find scanning through all the test cases takes time, you can directly call `jest` to run the test:"),Dx.forEach(o),Hh=c(vi),Ho=n(vi,"DIV",{class:!0});var J1=r(Ho);J1.forEach(o),vi.forEach(o),qh=c(k),Ls=n(k,"P",{});var yi=r(Ls);Nh=t(yi,"Our parser found 2 seemingly innocent "),qo=n(yi,"CODE",{class:!0});var Ax=r(qo);Rh=t(Ax,"@"),Ax.forEach(o),Uh=t(yi," tokens at a place where they shouldn't be present."),yi.forEach(o),Fh=c(k),js=n(k,"P",{});var fi=r(js);Wh=t(fi,"How do I know that? Let's start the watch mode, "),No=n(fi,"CODE",{class:!0});var Px=r(No);Bh=t(Px,"make watch"),Px.forEach(o),Vh=t(fi,", wear our detective cap \u{1F575}\uFE0F\u200D and start digging!"),fi.forEach(o),zh=c(k),Oe=n(k,"P",{});var $n=r(Oe);Gh=t($n,"Tracing the stack trace, led us to "),Ms=n($n,"A",{href:!0,rel:!0});var Sx=r(Ms);Ro=n(Sx,"CODE",{class:!0});var Lx=r(Ro);Jh=t(Lx,"packages/babel-parser/src/parser/expression.js"),Lx.forEach(o),Sx.forEach(o),Xh=t($n," where it throws "),Uo=n($n,"CODE",{class:!0});var jx=r(Uo);$h=t(jx,"this.unexpected()"),jx.forEach(o),Yh=t($n,"."),$n.forEach(o),Zh=c(k),Hs=n(k,"P",{});var mi=r(Hs);Qh=t(mi,"Let us add some "),Fo=n(mi,"CODE",{class:!0});var Mx=r(Fo);Kh=t(Mx,"console.log"),Mx.forEach(o),ed=t(mi,":"),mi.forEach(o),sd=c(k),Wo=n(k,"DIV",{class:!0});var X1=r(Wo);X1.forEach(o),td=c(k),qs=n(k,"P",{});var bi=r(qs);od=t(bi,"As you can see, both tokens are "),Bo=n(bi,"CODE",{class:!0});var Hx=r(Bo);ad=t(Hx,"@"),Hx.forEach(o),nd=t(bi," token:"),bi.forEach(o),rd=c(k),Vo=n(k,"DIV",{class:!0});var $1=r(Vo);$1.forEach(o),ld=c(k),De=n(k,"P",{});var Yn=r(De);id=t(Yn,"How do I know "),zo=n(Yn,"CODE",{class:!0});var qx=r(zo);cd=t(qx,"this.state.type"),qx.forEach(o),pd=t(Yn," and "),Go=n(Yn,"CODE",{class:!0});var Nx=r(Go);hd=t(Nx,"this.lookahead().type"),Nx.forEach(o),dd=t(Yn," will give me the current and the next token?"),Yn.forEach(o),kd=c(k),Ns=n(k,"P",{});var gi=r(Ns);ud=t(gi,"Well, I'll explained them "),Jo=n(gi,"A",{href:!0});var Rx=r(Jo);vd=t(Rx,"later"),Rx.forEach(o),yd=t(gi,"."),gi.forEach(o),fd=c(k),jr=n(k,"P",{});var Ux=r(jr);md=t(Ux,"Let's recap what we've done so far before we move on:"),Ux.forEach(o),bd=c(k),ae=n(k,"UL",{});var Qe=r(ae);Xo=n(Qe,"LI",{});var eg=r(Xo);gd=t(eg,"We've written a test case for "),$o=n(eg,"CODE",{class:!0});var Fx=r($o);xd=t(Fx,"babel-parser"),Fx.forEach(o),eg.forEach(o),wd=c(Qe),Rs=n(Qe,"LI",{});var xi=r(Rs);Ed=t(xi,"We ran "),Yo=n(xi,"CODE",{class:!0});var Wx=r(Yo);_d=t(Wx,"make test-only"),Wx.forEach(o),Td=t(xi," to run the test case"),xi.forEach(o),Id=c(Qe),Zo=n(Qe,"LI",{});var sg=r(Zo);Cd=t(sg,"We've started the watch mode via "),Qo=n(sg,"CODE",{class:!0});var Bx=r(Qo);Od=t(Bx,"make watch"),Bx.forEach(o),sg.forEach(o),Dd=c(Qe),Ko=n(Qe,"LI",{});var tg=r(Ko);Ad=t(tg,"We've learned about parser state, and console out the current token type, "),ea=n(tg,"CODE",{class:!0});var Vx=r(ea);Pd=t(Vx,"this.state.type"),Vx.forEach(o),tg.forEach(o),Qe.forEach(o),Sd=c(k),Mr=n(k,"P",{});var zx=r(Mr);Ld=t(zx,"Here's what we are going to do next:"),zx.forEach(o),jd=c(k),Ae=n(k,"P",{});var Zn=r(Ae);Md=t(Zn,"If there's 2 consecutive "),sa=n(Zn,"CODE",{class:!0});var Gx=r(sa);Hd=t(Gx,"@"),Gx.forEach(o),qd=t(Zn,", it should not be separate tokens, it should be a "),ta=n(Zn,"CODE",{class:!0});var Jx=r(ta);Nd=t(Jx,"@@"),Jx.forEach(o),Rd=t(Zn," token, the new token we just defined for our curry function"),Zn.forEach(o),k.forEach(o),Ql=c(p),w=n(p,"SECTION",{});var A=r(w);Hr=n(A,"H3",{});var Xx=r(Hr);Us=n(Xx,"A",{href:!0,id:!0});var $x=r(Us);Ud=t($x,"A new token: '@@'"),$x.forEach(o),Xx.forEach(o),Fd=c(A),Fs=n(A,"P",{});var wi=r(Fs);Wd=t(wi,"Let's first look at where a token type is defined: "),Ws=n(wi,"A",{href:!0,rel:!0});var Yx=r(Ws);Bd=t(Yx,"packages/babel-parser/src/tokenizer/types.js"),Yx.forEach(o),Vd=t(wi,"."),wi.forEach(o),zd=c(A),qr=n(A,"P",{});var Zx=r(qr);Gd=t(Zx,"Here you see a list of tokens, so let's add our new token definition in as well:"),Zx.forEach(o),Jd=c(A),oa=n(A,"DIV",{class:!0});var Y1=r(oa);Y1.forEach(o),Xd=c(A),$=n(A,"P",{});var Fe=r($);$d=t(Fe,"Next, let's find out where the token gets created during "),Nr=n(Fe,"EM",{});var Qx=r(Nr);Yd=t(Qx,"tokenization"),Qx.forEach(o),Zd=t(Fe,". A quick search on "),aa=n(Fe,"CODE",{class:!0});var Kx=r(aa);Qd=t(Kx,"tt.at"),Kx.forEach(o),Kd=t(Fe," within "),na=n(Fe,"CODE",{class:!0});var ew=r(na);ek=t(ew,"babel-parser/src/tokenizer"),ew.forEach(o),sk=t(Fe," lead us to "),Bs=n(Fe,"A",{href:!0,rel:!0});var sw=r(Bs);tk=t(sw,"packages/babel-parser/src/tokenizer/index.js"),sw.forEach(o),Fe.forEach(o),ok=c(A),Rr=n(A,"BLOCKQUOTE",{});var tw=r(Rr);Ur=n(tw,"SMALL",{});var ow=r(Ur);ak=t(ow,"Well, token types are import as `tt` throughout the babel-parser."),ow.forEach(o),tw.forEach(o),nk=c(A),z=n(A,"P",{});var fe=r(z);rk=t(fe,"Let's create the token "),ra=n(fe,"CODE",{class:!0});var aw=r(ra);lk=t(aw,"tt.atat"),aw.forEach(o),ik=t(fe," instead of "),la=n(fe,"CODE",{class:!0});var nw=r(la);ck=t(nw,"tt.at"),nw.forEach(o),pk=t(fe," if there's another "),ia=n(fe,"CODE",{class:!0});var rw=r(ia);hk=t(rw,"@"),rw.forEach(o),dk=t(fe," succeed the current "),ca=n(fe,"CODE",{class:!0});var lw=r(ca);kk=t(lw,"@"),lw.forEach(o),uk=t(fe,":"),fe.forEach(o),vk=c(A),pa=n(A,"DIV",{class:!0});var Z1=r(pa);Z1.forEach(o),yk=c(A),Fr=n(A,"P",{});var iw=r(Fr);fk=t(iw,"If you run the test again, you will see that the current token and the next token has changed:"),iw.forEach(o),mk=c(A),ha=n(A,"DIV",{class:!0});var Q1=r(ha);Q1.forEach(o),bk=c(A),da=n(A,"P",{});var og=r(da);gk=t(og,"Yeah! It looks good and lets move on. "),Vs=n(og,"SPAN",{style:!0});var cw=r(Vs);xk=t(cw,"\u{1F3C3}\u200D"),cw.forEach(o),og.forEach(o),A.forEach(o),Kl=c(p),f=n(p,"SECTION",{});var _=r(f);Wr=n(_,"H3",{});var pw=r(Wr);zs=n(pw,"A",{href:!0,id:!0});var hw=r(zs);wk=t(hw,"The new parser"),hw.forEach(o),pw.forEach(o),Ek=c(_),Gs=n(_,"P",{});var Ei=r(Gs);_k=t(Ei,"Before we move on, let's inspect how "),Js=n(Ei,"A",{href:!0,rel:!0});var dw=r(Js);Tk=t(dw,"generator functions are represented in AST"),dw.forEach(o),Ik=t(Ei,":"),Ei.forEach(o),Ck=c(_),Br=n(_,"P",{});var kw=r(Br);Xs=n(kw,"PICTURE",{});var _i=r(Xs);Vr=n(_i,"SOURCE",{type:!0,srcset:!0}),zr=n(_i,"SOURCE",{type:!0,srcset:!0}),ze=n(_i,"IMG",{src:!0,loading:!0,alt:!0,title:!0}),_i.forEach(o),kw.forEach(o),Ok=c(_),Pe=n(_,"P",{});var Qn=r(Pe);Dk=t(Qn,"As you can see, a generator function is represented by the "),ka=n(Qn,"CODE",{class:!0});var uw=r(ka);Ak=t(uw,"generator: true"),uw.forEach(o),Pk=t(Qn," attribute of a "),ua=n(Qn,"CODE",{class:!0});var vw=r(ua);Sk=t(vw,"FunctionDeclaration"),vw.forEach(o),Lk=t(Qn,"."),Qn.forEach(o),jk=c(_),Se=n(_,"P",{});var Kn=r(Se);Mk=t(Kn,"Similarly, we can add a "),va=n(Kn,"CODE",{class:!0});var yw=r(va);Hk=t(yw,"curry: true"),yw.forEach(o),qk=t(Kn," attribute of the "),ya=n(Kn,"CODE",{class:!0});var fw=r(ya);Nk=t(fw,"FunctionDeclaration"),fw.forEach(o),Rk=t(Kn," too if it is a curry function:"),Kn.forEach(o),Uk=c(_),Gr=n(_,"P",{});var mw=r(Gr);$s=n(mw,"PICTURE",{});var Ti=r($s);Jr=n(Ti,"SOURCE",{type:!0,srcset:!0}),Xr=n(Ti,"SOURCE",{type:!0,srcset:!0}),Ge=n(Ti,"IMG",{src:!0,loading:!0,alt:!0,title:!0}),Ti.forEach(o),mw.forEach(o),Fk=c(_),$r=n(_,"P",{});var bw=r($r);Wk=t(bw,"We have a plan now, let's implement it."),bw.forEach(o),Bk=c(_),G=n(_,"P",{});var me=r(G);Vk=t(me,"A quick search on "),Yr=n(me,"EM",{});var gw=r(Yr);zk=t(gw,'"FunctionDeclaration"'),gw.forEach(o),Gk=t(me," leads us to a function called "),fa=n(me,"CODE",{class:!0});var xw=r(fa);Jk=t(xw,"parseFunction"),xw.forEach(o),Xk=t(me," in "),Ys=n(me,"A",{href:!0,rel:!0});var ww=r(Ys);$k=t(ww,"packages/babel-parser/src/parser/statement.js"),ww.forEach(o),Yk=t(me,", and here we find a line that sets the "),ma=n(me,"CODE",{class:!0});var Ew=r(ma);Zk=t(Ew,"generator"),Ew.forEach(o),Qk=t(me," attribute, let's add one more line:"),me.forEach(o),Kk=c(_),ba=n(_,"DIV",{class:!0});var K1=r(ba);K1.forEach(o),eu=c(_),Zr=n(_,"P",{});var _w=r(Zr);su=t(_w,"If you run the test again, you will be amazed that it passed!"),_w.forEach(o),tu=c(_),ga=n(_,"DIV",{class:!0});var e_=r(ga);e_.forEach(o),ou=c(_),Qr=n(_,"P",{});var Tw=r(Qr);au=t(Tw,"That's it? How did we miraculously fix it?"),Tw.forEach(o),nu=c(_),Kr=n(_,"P",{});var Iw=r(Kr);ru=t(Iw,"I am going to briefly explain how parsing works, and in the process hopefully, you understood what that one-liner change did."),Iw.forEach(o),_.forEach(o),ei=c(p),y=n(p,"SECTION",{});var g=r(y);el=n(g,"H3",{});var Cw=r(el);Zs=n(Cw,"A",{href:!0,id:!0});var Ow=r(Zs);lu=t(Ow,"How parsing works"),Ow.forEach(o),Cw.forEach(o),iu=c(g),Qs=n(g,"P",{});var Ii=r(Qs);cu=t(Ii,"With the list of tokens from the "),sl=n(Ii,"EM",{});var Dw=r(sl);pu=t(Dw,"tokenizer"),Dw.forEach(o),hu=t(Ii,", the parser consumes the token one by one and constructs the AST. The parser uses the language grammar specification to decide how to use the tokens, which token to expect next."),Ii.forEach(o),du=c(g),tl=n(g,"P",{});var Aw=r(tl);ku=t(Aw,"The grammar specification looks something like this:"),Aw.forEach(o),uu=c(g),xa=n(g,"DIV",{class:!0});var s_=r(xa);s_.forEach(o),vu=c(g),Ks=n(g,"P",{});var Ci=r(Ks);yu=t(Ci,"It explains the precedence of each expressions/statements. For example, an "),wa=n(Ci,"CODE",{class:!0});var Pw=r(wa);fu=t(Pw,"AdditiveExpression"),Pw.forEach(o),mu=t(Ci," is made up of either:"),Ci.forEach(o),bu=c(g),Le=n(g,"UL",{});var er=r(Le);et=n(er,"LI",{});var Oi=r(et);gu=t(Oi,"a "),Ea=n(Oi,"CODE",{class:!0});var Sw=r(Ea);xu=t(Sw,"MultiplicativeExpression"),Sw.forEach(o),wu=t(Oi,", or"),Oi.forEach(o),Eu=c(er),ne=n(er,"LI",{});var Ke=r(ne);_u=t(Ke,"an "),_a=n(Ke,"CODE",{class:!0});var Lw=r(_a);Tu=t(Lw,"AdditiveExpression"),Lw.forEach(o),Iu=t(Ke," followed by "),Ta=n(Ke,"CODE",{class:!0});var jw=r(Ta);Cu=t(jw,"+"),jw.forEach(o),Ou=t(Ke," operator token followed by "),Ia=n(Ke,"CODE",{class:!0});var Mw=r(Ia);Du=t(Mw,"MultiplicativeExpression"),Mw.forEach(o),Au=t(Ke,", or"),Ke.forEach(o),Pu=c(er),re=n(er,"LI",{});var es=r(re);Su=t(es,"an "),Ca=n(es,"CODE",{class:!0});var Hw=r(Ca);Lu=t(Hw,"AdditiveExpression"),Hw.forEach(o),ju=t(es," followed by "),Oa=n(es,"CODE",{class:!0});var qw=r(Oa);Mu=t(qw,"-"),qw.forEach(o),Hu=t(es," operator token followed by "),Da=n(es,"CODE",{class:!0});var Nw=r(Da);qu=t(Nw,"MultiplicativeExpression"),Nw.forEach(o),Nu=t(es,"."),es.forEach(o),er.forEach(o),Ru=c(g),st=n(g,"P",{});var Di=r(st);Uu=t(Di,"So if you have an expression "),Aa=n(Di,"CODE",{class:!0});var Rw=r(Aa);Fu=t(Rw,"1 + 2 * 3"),Rw.forEach(o),Wu=t(Di,", it will be like:"),Di.forEach(o),Bu=c(g),Pa=n(g,"DIV",{class:!0});var t_=r(Pa);t_.forEach(o),Vu=c(g),ol=n(g,"P",{});var Uw=r(ol);zu=t(Uw,"instead of"),Uw.forEach(o),Gu=c(g),Sa=n(g,"DIV",{class:!0});var o_=r(Sa);o_.forEach(o),Ju=c(g),al=n(g,"P",{});var Fw=r(al);Xu=t(Fw,"With these rules, we translate them into parser code:"),Fw.forEach(o),$u=c(g),La=n(g,"DIV",{class:!0});var a_=r(La);a_.forEach(o),Yu=c(g),nl=n(g,"P",{});var Ww=r(nl);rl=n(Ww,"EM",{});var Bw=r(rl);Zu=t(Bw,"This is a made-up code that oversimplifies what babel have, but I hope you get the gist of it."),Bw.forEach(o),Ww.forEach(o),Qu=c(g),J=n(g,"P",{});var be=r(J);Ku=t(be,"As you can see here, the parser is recursively in nature, and it goes from the lowest precedence to the highest precedence expressions/statements. Eg: "),ja=n(be,"CODE",{class:!0});var Vw=r(ja);ev=t(Vw,"parseAdditiveExpression"),Vw.forEach(o),sv=t(be," calls "),Ma=n(be,"CODE",{class:!0});var zw=r(Ma);tv=t(zw,"parseMultiplicativeExpression"),zw.forEach(o),ov=t(be,", which in turn calls "),Ha=n(be,"CODE",{class:!0});var Gw=r(Ha);av=t(Gw,"parseExponentiationExpression"),Gw.forEach(o),nv=t(be,", which in turn calls ... . This recursive process is called the "),tt=n(be,"A",{href:!0,rel:!0});var Jw=r(tt);rv=t(Jw,"Recursive Descent Parsing"),Jw.forEach(o),lv=t(be,"."),be.forEach(o),g.forEach(o),si=c(p),m=n(p,"SECTION",{});var T=r(m);ll=n(T,"H4",{});var Xw=r(ll);ot=n(Xw,"A",{href:!0,id:!0});var $w=r(ot);iv=t($w,"this.eat, this.match, this.next"),$w.forEach(o),Xw.forEach(o),cv=c(T),le=n(T,"P",{});var ss=r(le);pv=t(ss,"If you have noticed, in my examples above, I used some utility function, such as "),qa=n(ss,"CODE",{class:!0});var Yw=r(qa);hv=t(Yw,"this.eat"),Yw.forEach(o),dv=t(ss,", "),Na=n(ss,"CODE",{class:!0});var Zw=r(Na);kv=t(Zw,"this.match"),Zw.forEach(o),uv=t(ss,", "),Ra=n(ss,"CODE",{class:!0});var Qw=r(Ra);vv=t(Qw,"this.next"),Qw.forEach(o),yv=t(ss,", etc. These are babel parser's internal functions, yet they are quite ubiquitous amongst parsers as well:"),ss.forEach(o),fv=c(T),ie=n(T,"UL",{});var ts=r(ie);Je=n(ts,"LI",{});var zl=r(Je);il=n(zl,"STRONG",{});var Kw=r(il);Ua=n(Kw,"CODE",{class:!0});var eE=r(Ua);mv=t(eE,"this.match"),eE.forEach(o),Kw.forEach(o),bv=t(zl," returns a "),Fa=n(zl,"CODE",{class:!0});var sE=r(Fa);gv=t(sE,"boolean"),sE.forEach(o),xv=t(zl," indicating whether the current token matches the condition"),zl.forEach(o),wv=c(ts),Wa=n(ts,"LI",{});var ag=r(Wa);cl=n(ag,"STRONG",{});var tE=r(cl);Ba=n(tE,"CODE",{class:!0});var oE=r(Ba);Ev=t(oE,"this.next"),oE.forEach(o),tE.forEach(o),_v=t(ag," moves the token list forward to point to the next token"),ag.forEach(o),Tv=c(ts),U=n(ts,"LI",{});var ue=r(U);pl=n(ue,"STRONG",{});var aE=r(pl);Va=n(aE,"CODE",{class:!0});var nE=r(Va);Iv=t(nE,"this.eat"),nE.forEach(o),aE.forEach(o),Cv=t(ue," return what "),za=n(ue,"CODE",{class:!0});var rE=r(za);Ov=t(rE,"this.match"),rE.forEach(o),Dv=t(ue," returns and if "),Ga=n(ue,"CODE",{class:!0});var lE=r(Ga);Av=t(lE,"this.match"),lE.forEach(o),Pv=t(ue," returns "),Ja=n(ue,"CODE",{class:!0});var iE=r(Ja);Sv=t(iE,"true"),iE.forEach(o),Lv=t(ue,", will do "),Xa=n(ue,"CODE",{class:!0});var cE=r(Xa);jv=t(cE,"this.next"),cE.forEach(o),hl=n(ue,"UL",{});var pE=r(hl);Y=n(pE,"LI",{});var We=r(Y);$a=n(We,"CODE",{class:!0});var hE=r($a);Mv=t(hE,"this.eat"),hE.forEach(o),Hv=t(We," is commonly used for optional operators, like "),Ya=n(We,"CODE",{class:!0});var dE=r(Ya);qv=t(dE,"*"),dE.forEach(o),Nv=t(We," in generator function, "),Za=n(We,"CODE",{class:!0});var kE=r(Za);Rv=t(kE,";"),kE.forEach(o),Uv=t(We," at the end of statements, and "),Qa=n(We,"CODE",{class:!0});var uE=r(Qa);Fv=t(uE,"?"),uE.forEach(o),Wv=t(We," in typescript types."),We.forEach(o),pE.forEach(o),ue.forEach(o),Bv=c(ts),Ka=n(ts,"LI",{});var ng=r(Ka);dl=n(ng,"STRONG",{});var vE=r(dl);en=n(vE,"CODE",{class:!0});var yE=r(en);Vv=t(yE,"this.lookahead"),yE.forEach(o),vE.forEach(o),zv=t(ng," get the next token without moving forward to make a decision on the current node"),ng.forEach(o),ts.forEach(o),Gv=c(T),kl=n(T,"P",{});var fE=r(kl);Jv=t(fE,"If you take a look again the parser code we just changed, it's easier to read it in now."),fE.forEach(o),Xv=c(T),sn=n(T,"DIV",{class:!0});var n_=r(sn);n_.forEach(o),$v=c(T),ul=n(T,"P",{});var mE=r(ul);Yv=t(mE,"I know I didn't do a good job explaining how a parser works. Here are some resources that I learned from, and I highly recommend them:"),mE.forEach(o),Zv=c(T),at=n(T,"UL",{});var Ai=r(at);nt=n(Ai,"LI",{});var Pi=r(nt);rt=n(Pi,"A",{href:!0,rel:!0});var bE=r(rt);Qv=t(bE,"Crafting Interpreters"),bE.forEach(o),Kv=t(Pi," by "),lt=n(Pi,"A",{href:!0,rel:!0});var gE=r(lt);ey=t(gE,"Robert Nystrom"),gE.forEach(o),Pi.forEach(o),sy=c(Ai),tn=n(Ai,"LI",{});var rg=r(tn);it=n(rg,"A",{href:!0,rel:!0});var xE=r(it);ty=t(xE,'Free Udacity course: "Compilers: Theory and Practice"'),xE.forEach(o),oy=t(rg,", offered by Georgia Tech"),rg.forEach(o),Ai.forEach(o),ay=c(T),ny=n(T,"HR",{}),ry=c(T),on=n(T,"P",{});var lg=r(on);vl=n(lg,"STRONG",{});var wE=r(vl);ly=t(wE,"Side Note"),wE.forEach(o),iy=t(lg,': You might be curious how am I able to visualize the custom syntax in the Babel AST Explorer, where I showed you the new "curry" attribute in the AST.'),lg.forEach(o),cy=c(T),yl=n(T,"P",{});var EE=r(yl);py=t(EE,"That's because I've added a new feature in the Babel AST Explorer where you can upload your custom parser!"),EE.forEach(o),hy=c(T),je=n(T,"P",{});var sr=r(je);dy=t(sr,"If you go to "),an=n(sr,"CODE",{class:!0});var _E=r(an);ky=t(_E,"packages/babel-parser/lib"),_E.forEach(o),uy=t(sr,", you would find the compiled version of your parser and the source map. Open the drawer of the Babel AST Explorer, you will see a button to upload a custom parser. Drag the "),nn=n(sr,"CODE",{class:!0});var TE=r(nn);vy=t(TE,"packages/babel-parser/lib/index.js"),TE.forEach(o),yy=t(sr," in and you will be visualizing the AST generated via your custom parser!"),sr.forEach(o),fy=c(T),fl=n(T,"P",{});var IE=r(fl);ct=n(IE,"IMG",{src:!0,loading:!0,alt:!0}),IE.forEach(o),my=c(T),by=n(T,"HR",{}),T.forEach(o),ti=c(p),d=n(p,"SECTION",{});var u=r(d);ml=n(u,"H2",{});var CE=r(ml);pt=n(CE,"A",{href:!0,id:!0});var OE=r(pt);gy=t(OE,"Our babel plugin"),OE.forEach(o),CE.forEach(o),xy=c(u),bl=n(u,"P",{});var DE=r(bl);wy=t(DE,"With our custom babel parser done, let's move on to write our babel plugin."),DE.forEach(o),Ey=c(u),gl=n(u,"P",{});var AE=r(gl);_y=t(AE,"But maybe before that, you may have some doubts on how are we going to use our custom babel parser, especially with whatever build stack we are using right now?"),AE.forEach(o),Ty=c(u),rn=n(u,"P",{});var ig=r(rn);Iy=t(ig,"Well, fret not. A babel plugin can provide a custom parser, which is "),ht=n(ig,"A",{href:!0,rel:!0});var PE=r(ht);Cy=t(PE,"documented on the babel website"),PE.forEach(o),ig.forEach(o),Oy=c(u),ln=n(u,"DIV",{class:!0});var r_=r(ln);r_.forEach(o),Dy=c(u),xl=n(u,"P",{});var SE=r(xl);Ay=t(SE,"Since we forked out the babel parser, all existing babel parser options or built-in plugins will still work perfectly."),SE.forEach(o),Py=c(u),cn=n(u,"P",{});var cg=r(cn);Sy=t(cg,"With this doubt out of the way, let see how we can make our curry function curryable? "),wl=n(cg,"EM",{});var LE=r(wl);Ly=t(LE,"(not entirely sure there's such word)"),LE.forEach(o),cg.forEach(o),jy=c(u),My=n(u,"HR",{}),Hy=c(u),El=n(u,"P",{});var jE=r(El);qy=t(jE,"Before we start, if you have eagerly tried to add our plugin into your build system, you would notice that the curry function gets compiled to a normal function."),jE.forEach(o),Ny=c(u),ce=n(u,"P",{});var os=r(ce);Ry=t(os,"This is because, after parsing + transformation, babel will use "),dt=n(os,"A",{href:!0,rel:!0});var ME=r(dt);Uy=t(ME,"@babel/generator"),ME.forEach(o),Fy=t(os," to generate code from the transformed AST. Since the "),pn=n(os,"CODE",{class:!0});var HE=r(pn);Wy=t(HE,"@babel/generator"),HE.forEach(o),By=t(os," has no idea about the new "),hn=n(os,"CODE",{class:!0});var qE=r(hn);Vy=t(qE,"curry"),qE.forEach(o),zy=t(os," attribute we added, it will be omitted."),os.forEach(o),Gy=c(u),_l=n(u,"BLOCKQUOTE",{});var NE=r(_l);kt=n(NE,"P",{});var Si=r(kt);Jy=t(Si,"If one day curry function becomes the new JavaScript syntax, you may want to make a pull request to add one more line "),ut=n(Si,"A",{href:!0,rel:!0});var RE=r(ut);Xy=t(RE,"here"),RE.forEach(o),$y=t(Si,"!"),Si.forEach(o),NE.forEach(o),Yy=c(u),Zy=n(u,"HR",{}),Qy=c(u),vt=n(u,"P",{});var Li=r(vt);Ky=t(Li,"Ok, to make our function curryable, we can wrap it with a "),dn=n(Li,"CODE",{class:!0});var UE=r(dn);ef=t(UE,"currying"),UE.forEach(o),sf=t(Li," helper higher-order function:"),Li.forEach(o),tf=c(u),kn=n(u,"DIV",{class:!0});var l_=r(kn);l_.forEach(o),of=c(u),Tl=n(u,"BLOCKQUOTE",{});var FE=r(Tl);Xe=n(FE,"P",{});var Gl=r(Xe);af=t(Gl,"If you want to learn how to write a currying function, you can read this "),yt=n(Gl,"A",{href:!0,rel:!0});var WE=r(yt);nf=t(WE,"Currying in JS"),WE.forEach(o),rf=t(Gl," by "),ft=n(Gl,"A",{href:!0,rel:!0});var BE=r(ft);lf=t(BE,"Shirsh Zibbu"),BE.forEach(o),Gl.forEach(o),FE.forEach(o),cf=c(u),Il=n(u,"P",{});var VE=r(Il);pf=t(VE,"So when we transform our curry function, we can transform it into the following:"),VE.forEach(o),hf=c(u),un=n(u,"DIV",{class:!0});var i_=r(un);i_.forEach(o),df=c(u),Cl=n(u,"BLOCKQUOTE",{});var zE=r(Cl);Me=n(zE,"P",{});var tr=r(Me);kf=t(tr,"Let's first ignore "),mt=n(tr,"A",{href:!0,rel:!0});var GE=r(mt);uf=t(GE,"function hoisting"),GE.forEach(o),vf=t(tr," in JavaScript, where you can call "),vn=n(tr,"CODE",{class:!0});var JE=r(vn);yf=t(JE,"foo"),JE.forEach(o),ff=t(tr," before it is defined."),tr.forEach(o),zE.forEach(o),mf=c(u),bt=n(u,"P",{});var ji=r(bt);bf=t(ji,"If you have read my "),yn=n(ji,"A",{href:!0});var XE=r(yn);gf=t(XE,"step-by-step guide on babel transformation"),XE.forEach(o),xf=t(ji,", writing this transformation should be manageable:"),ji.forEach(o),wf=c(u),fn=n(u,"DIV",{class:!0});var c_=r(fn);c_.forEach(o),Ef=c(u),gt=n(u,"P",{});var Mi=r(gt);_f=t(Mi,"The question is how do we provide the "),mn=n(Mi,"CODE",{class:!0});var $E=r(mn);Tf=t($E,"currying"),$E.forEach(o),If=t(Mi," function?"),Mi.forEach(o),Cf=c(u),Ol=n(u,"P",{});var YE=r(Ol);Of=t(YE,"There are 2 ways:"),YE.forEach(o),u.forEach(o),oi=c(p),Z=n(p,"SECTION",{});var as=r(Z);Dl=n(as,"H3",{});var ZE=r(Dl);He=n(ZE,"A",{href:!0,id:!0});var Hi=r(He);Df=t(Hi,"1. Assume "),bn=n(Hi,"CODE",{class:!0});var QE=r(bn);Af=t(QE,"currying"),QE.forEach(o),Pf=t(Hi," has been declared in the global scope."),Hi.forEach(o),ZE.forEach(o),Sf=c(as),Al=n(as,"P",{});var KE=r(Al);Lf=t(KE,"Basically, your job is done here."),KE.forEach(o),jf=c(as),pe=n(as,"P",{});var ns=r(pe);Mf=t(ns,"If "),gn=n(ns,"CODE",{class:!0});var e2=r(gn);Hf=t(e2,"currying"),e2.forEach(o),qf=t(ns," is not defined, then when executing the compiled code, the runtime will scream out "),Pl=n(ns,"EM",{});var s2=r(Pl);Nf=t(s2,'"currying is not defined"'),s2.forEach(o),Rf=t(ns,", just like the "),xt=n(ns,"A",{href:!0,rel:!0});var t2=r(xt);Uf=t(t2,'"regeneratorRuntime is not defined"'),t2.forEach(o),Ff=t(ns,"."),ns.forEach(o),Wf=c(as),qe=n(as,"P",{});var or=r(qe);Bf=t(or,"So probably you have to educate the users to install "),xn=n(or,"CODE",{class:!0});var o2=r(xn);Vf=t(o2,"currying"),o2.forEach(o),zf=t(or," polyfills in order to use your "),wn=n(or,"CODE",{class:!0});var a2=r(wn);Gf=t(a2,"babel-plugin-transformation-curry-function"),a2.forEach(o),Jf=t(or,"."),or.forEach(o),as.forEach(o),ai=c(p),E=n(p,"SECTION",{});var P=r(E);Sl=n(P,"H3",{});var n2=r(Sl);$e=n(n2,"A",{href:!0,id:!0});var pg=r($e);Xf=t(pg,"2. Use the "),En=n(pg,"CODE",{class:!0});var r2=r(En);$f=t(r2,"@babel/helpers"),r2.forEach(o),pg.forEach(o),n2.forEach(o),Yf=c(P),X=n(P,"P",{});var ge=r(X);Zf=t(ge,"You can add a new helper to "),_n=n(ge,"CODE",{class:!0});var l2=r(_n);Qf=t(l2,"@babel/helpers"),l2.forEach(o),Kf=t(ge,", which of course you are unlikely to merge that into the official "),Tn=n(ge,"CODE",{class:!0});var i2=r(Tn);em=t(i2,"@babel/helpers"),i2.forEach(o),sm=t(ge,", so you would have to figure a way to make "),In=n(ge,"CODE",{class:!0});var c2=r(In);tm=t(c2,"@babel/core"),c2.forEach(o),om=t(ge," to resolve to your "),Cn=n(ge,"CODE",{class:!0});var p2=r(Cn);am=t(p2,"@babel/helpers"),p2.forEach(o),nm=t(ge,":"),ge.forEach(o),rm=c(P),On=n(P,"DIV",{class:!0});var p_=r(On);p_.forEach(o),lm=c(P),Ll=n(P,"P",{});var h2=r(Ll);Ye=n(h2,"EM",{});var Jl=r(Ye);jl=n(Jl,"STRONG",{});var d2=r(jl);im=t(d2,"Disclaimer:"),d2.forEach(o),cm=t(Jl," I have not personally tried this, but I believe it will work. If you encountered problems trying this, "),wt=n(Jl,"A",{href:!0,rel:!0});var k2=r(wt);pm=t(k2,"DM me"),k2.forEach(o),hm=t(Jl,", I am very happy to discuss it with you."),Jl.forEach(o),h2.forEach(o),dm=c(P),Et=n(P,"P",{});var qi=r(Et);km=t(qi,"Adding a new helper function into "),Dn=n(qi,"CODE",{class:!0});var u2=r(Dn);um=t(u2,"@babel/helpers"),u2.forEach(o),vm=t(qi," is very easy."),qi.forEach(o),ym=c(P),_t=n(P,"P",{});var Ni=r(_t);fm=t(Ni,"Head over to "),Tt=n(Ni,"A",{href:!0,rel:!0});var v2=r(Tt);mm=t(v2,"packages/babel-helpers/src/helpers.js"),v2.forEach(o),bm=t(Ni," and add a new entry:"),Ni.forEach(o),gm=c(P),An=n(P,"DIV",{class:!0});var h_=r(An);h_.forEach(o),xm=c(P),he=n(P,"P",{});var rs=r(he);wm=t(rs,"The helper tag function specifies the "),Pn=n(rs,"CODE",{class:!0});var y2=r(Pn);Em=t(y2,"@babel/core"),y2.forEach(o),_m=t(rs," version required. The trick here is to "),Sn=n(rs,"CODE",{class:!0});var f2=r(Sn);Tm=t(f2,"export default"),f2.forEach(o),Im=t(rs," the "),Ln=n(rs,"CODE",{class:!0});var m2=r(Ln);Cm=t(m2,"currying"),m2.forEach(o),Om=t(rs," function."),rs.forEach(o),Dm=c(P),It=n(P,"P",{});var Ri=r(It);Am=t(Ri,"To use the helper, just call the "),jn=n(Ri,"CODE",{class:!0});var b2=r(jn);Pm=t(b2,"this.addHelper()"),b2.forEach(o),Sm=t(Ri,":"),Ri.forEach(o),Lm=c(P),Mn=n(P,"DIV",{class:!0});var d_=r(Mn);d_.forEach(o),jm=c(P),Ne=n(P,"P",{});var ar=r(Ne);Mm=t(ar,"The "),Hn=n(ar,"CODE",{class:!0});var g2=r(Hn);Hm=t(g2,"this.addHelper"),g2.forEach(o),qm=t(ar," will inject the helper at the top of the file if needed, and returns an "),qn=n(ar,"CODE",{class:!0});var x2=r(qn);Nm=t(x2,"Identifier"),x2.forEach(o),Rm=t(ar," to the injected function."),ar.forEach(o),P.forEach(o),ni=c(p),H=n(p,"SECTION",{});var ee=r(H);Ml=n(ee,"H2",{});var w2=r(Ml);Ct=n(w2,"A",{href:!0,id:!0});var E2=r(Ct);Um=t(E2,"Closing Note"),E2.forEach(o),w2.forEach(o),Fm=c(ee),de=n(ee,"P",{});var ls=r(de);Wm=t(ls,"We've seen how we can modify the babel parser function, write our own babel transform plugin "),Ot=n(ls,"EM",{});var Ui=r(Ot);Bm=t(Ui,"(which was brief mainly because I have "),Nn=n(Ui,"A",{href:!0});var _2=r(Nn);Vm=t(_2,"a detailed cover in my previous post"),_2.forEach(o),zm=t(Ui,")"),Ui.forEach(o),Gm=t(ls,", a brief touch on "),Rn=n(ls,"CODE",{class:!0});var T2=r(Rn);Jm=t(T2,"@babel/generator"),T2.forEach(o),Xm=t(ls," and also how we can add helper functions via "),Un=n(ls,"CODE",{class:!0});var I2=r(Un);$m=t(I2,"@babel/helpers"),I2.forEach(o),Ym=t(ls,"."),ls.forEach(o),Zm=c(ee),Dt=n(ee,"P",{});var Fi=r(Dt);Qm=t(Fi,"Along the way, we had a crash course on how a parser works, which I will provide the links to "),Fn=n(Fi,"A",{href:!0});var C2=r(Fn);Km=t(C2,"further reading"),C2.forEach(o),eb=t(Fi," at the bottom."),Fi.forEach(o),sb=c(ee),Re=n(ee,"P",{});var nr=r(Re);tb=t(nr,"The steps we've gone through above is similar to part of the "),At=n(nr,"A",{href:!0,rel:!0});var O2=r(At);ob=t(O2,"TC39 proposal"),O2.forEach(o),ab=c(nr),Pt=n(nr,"A",{href:!0,rel:!0});var D2=r(Pt);nb=t(D2,"process"),D2.forEach(o),rb=t(nr," when defining a new JavaScript specification. When proposing a new specification, the champion of the proposal usually write polyfills or forked out babel to write proof-of-concept demos. As you've seen, forking a parser or writing polyfills is not the hardest part of the process, but to define the problem space, plan and think through the use cases and edge cases, and gather opinions and suggestions from the community. To this end, I am grateful to the proposal champion, for their effort in pushing the JavaScript language forward."),nr.forEach(o),lb=c(ee),St=n(ee,"P",{});var Wi=r(St);ib=t(Wi,"Finally, if you want to see the code we've done so far in a full picture, you can "),Lt=n(Wi,"A",{href:!0,rel:!0});var A2=r(Lt);cb=t(A2,"check it out from Github"),A2.forEach(o),pb=t(Wi,"."),Wi.forEach(o),hb=c(ee),db=n(ee,"HR",{}),ee.forEach(o),ri=c(p),F=n(p,"SECTION",{});var xe=r(F);Hl=n(xe,"H2",{});var P2=r(Hl);jt=n(P2,"A",{href:!0,id:!0});var S2=r(jt);kb=t(S2,"Editor's Note"),S2.forEach(o),P2.forEach(o),ub=c(xe),ql=n(xe,"P",{});var L2=r(ql);vb=t(L2,"I've worked on the babel repository for a while, yet I've never added a new syntax to the babel parser before. Most of my contributions were just fixing bugs and specs compliance feature."),L2.forEach(o),yb=c(xe),Nl=n(xe,"P",{});var j2=r(Nl);fb=t(j2,"Yet this idea of creating a new syntax has been in my mind for a while. So I took the chance of writing a blog to try it out. It is an exhilarating experience to see it work as expected."),j2.forEach(o),mb=c(xe),Mt=n(xe,"P",{});var Bi=r(Mt);bb=t(Bi,"Having the ability to manipulate the syntax of the language you are writing is invigorating. It empowers us the possibility of writing less code or more straightforward code and shifts that complexity to compile time. Just as how "),Wn=n(Bi,"CODE",{class:!0});var M2=r(Wn);gb=t(M2,"async-await"),M2.forEach(o),xb=t(Bi," solves the callback hell and promise-chaining hell."),Bi.forEach(o),wb=c(xe),Ht=n(xe,"P",{});var Vi=r(Ht);Eb=t(Vi,"If this article inspires you to some great idea, and you wish to discuss it with somebody, you are always more than welcome to reach out to me through "),qt=n(Vi,"A",{href:!0,rel:!0});var H2=r(qt);_b=t(H2,"Twitter"),H2.forEach(o),Tb=t(Vi,"."),Vi.forEach(o),xe.forEach(o),li=c(p),W=n(p,"SECTION",{});var we=r(W);Rl=n(we,"H2",{});var q2=r(Rl);Nt=n(q2,"A",{href:!0,id:!0});var N2=r(Nt);Ib=t(N2,"Further Reading"),N2.forEach(o),q2.forEach(o),Cb=c(we),Ul=n(we,"P",{});var R2=r(Ul);Ob=t(R2,"About compilers:"),R2.forEach(o),Db=c(we),Ue=n(we,"UL",{});var rr=r(Ue);Rt=n(rr,"LI",{});var zi=r(Rt);Ut=n(zi,"A",{href:!0,rel:!0});var U2=r(Ut);Ab=t(U2,"Crafting Interpreters"),U2.forEach(o),Pb=t(zi," by "),Ft=n(zi,"A",{href:!0,rel:!0});var F2=r(Ft);Sb=t(F2,"Robert Nystrom"),F2.forEach(o),zi.forEach(o),Lb=c(rr),Bn=n(rr,"LI",{});var hg=r(Bn);Wt=n(hg,"A",{href:!0,rel:!0});var W2=r(Wt);jb=t(W2,'Free Udacity course: "Compilers: Theory and Practice"'),W2.forEach(o),Mb=t(hg,", offered by Georgia Tech"),hg.forEach(o),Hb=c(rr),Bt=n(rr,"LI",{});var Gi=r(Bt);Vt=n(Gi,"A",{href:!0,rel:!0});var B2=r(Vt);qb=t(B2,"Leveling Up One\u2019s Parsing Game With ASTs"),B2.forEach(o),Nb=t(Gi," by "),zt=n(Gi,"A",{href:!0,rel:!0});var V2=r(zt);Rb=t(V2,"Vaidehi Joshi"),V2.forEach(o),Gi.forEach(o),rr.forEach(o),Ub=c(we),Fl=n(we,"P",{});var z2=r(Fl);Fb=t(z2,"Misc:"),z2.forEach(o),Wb=c(we),ke=n(we,"UL",{});var is=r(ke);Gt=n(is,"LI",{});var Ji=r(Gt);Jt=n(Ji,"A",{href:!0,rel:!0});var G2=r(Jt);Bb=t(G2,"Understanding hoisting in JavaScript"),G2.forEach(o),Vb=t(Ji," by "),Xt=n(Ji,"A",{href:!0,rel:!0});var J2=r(Xt);zb=t(J2,"Mabishi Wakio"),J2.forEach(o),Ji.forEach(o),Gb=c(is),$t=n(is,"LI",{});var Xi=r($t);Yt=n(Xi,"A",{href:!0,rel:!0});var X2=r(Yt);Jb=t(X2,"Currying in JS"),X2.forEach(o),Xb=t(Xi," by "),Zt=n(Xi,"A",{href:!0,rel:!0});var $2=r(Zt);$b=t($2,"Shirsh Zibbu"),$2.forEach(o),Xi.forEach(o),Yb=c(is),Wl=n(is,"LI",{});var Y2=r(Wl);Qt=n(Y2,"A",{href:!0,rel:!0});var Z2=r(Qt);Zb=t(Z2,"TC39 Proposals"),Z2.forEach(o),Y2.forEach(o),Qb=c(is),Bl=n(is,"LI",{});var Q2=r(Bl);Kt=n(Q2,"A",{href:!0,rel:!0});var K2=r(Kt);Kb=t(K2,"TC39 Process Document"),K2.forEach(o),Q2.forEach(o),is.forEach(o),we.forEach(o),this.h()},h(){l(O,"href","/step-by-step-guide-for-writing-a-babel-transformation"),l(ps,"href","#overview"),l(ps,"id","overview"),l(oo,"class","code-section"),l(hs,"href","https://en.wikipedia.org/wiki/Currying"),l(hs,"rel","nofollow"),l(ao,"class","inline"),l(ds,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*"),l(ds,"rel","nofollow"),l(no,"class","inline"),l(ro,"class","inline"),l(lo,"class","inline"),l(io,"class","inline"),l(ks,"href","https://scotch.io/tutorials/javascript-functional-programming-explained-partial-application-and-currying"),l(ks,"rel","nofollow"),l(co,"class","inline"),l(po,"class","inline"),l(ho,"class","code-section"),l(ko,"class","inline"),l(uo,"class","inline"),l(vo,"class","inline"),l(yo,"class","inline"),l(us,"href","https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841"),l(us,"rel","nofollow"),l(fo,"class","inline"),l(ys,"href","#fork-the-babel"),l(ys,"id","fork-the-babel"),l(ms,"href","https://github.com/babel/babel"),l(ms,"rel","nofollow"),l(fr,"type","image/webp"),l(fr,"srcset",__),l(mr,"type","image/png"),l(mr,"srcset",n1),$i(Be.src,kg=n1)||l(Be,"src",kg),l(Be,"loading","lazy"),l(Be,"alt","forking babel"),l(Be,"title","Forking babel"),l(xs,"href","https://github.com/tanhauhau/babel/blob/master/CONTRIBUTING.md#setup"),l(xs,"rel","nofollow"),l(mo,"class","code-section"),l(bo,"class","inline"),l(go,"class","inline"),l(xo,"class","inline"),l(wo,"class","inline"),l(Eo,"class","code-section"),l(ws,"href","#crash-course-on-parsing-code-to-ast"),l(ws,"id","crash-course-on-parsing-code-to-ast"),l(Es,"href","https://twitter.com/vaidehijoshi"),l(Es,"rel","nofollow"),l(_s,"href","https://medium.com/basecs/leveling-up-ones-parsing-game-with-asts-d7a6fc2400ff"),l(_s,"rel","nofollow"),l(_o,"class","inline"),l(To,"class","inline"),l(Io,"class","inline"),l(Ts,"href","https://www.ecma-international.org/ecma-262/10.0/index.html#Title"),l(Ts,"rel","nofollow"),l(Is,"href","https://twitter.com/munificentbob?lang=en"),l(Is,"rel","nofollow"),l(Cs,"href","https://craftinginterpreters.com/introduction.html"),l(Cs,"rel","nofollow"),l(Os,"href","#our-custom-babel-parser"),l(Os,"id","our-custom-babel-parser"),l(Co,"class","inline"),l(Oo,"class","code-section"),l(Do,"class","inline"),l(Ao,"class","inline"),l(Po,"class","inline"),l(Ps,"href","https://en.wikipedia.org/wiki/Test-driven_development"),l(Ps,"rel","nofollow"),l(So,"class","code-section"),l(Lo,"class","inline"),l(jo,"class","inline"),l(Mo,"class","code-section"),l(Ho,"class","code-section"),l(qo,"class","inline"),l(No,"class","inline"),l(Ro,"class","inline"),l(Ms,"href","https://github.com/tanhauhau/babel/blob/feat/curry-function/packages/babel-parser/src/parser/expression.js#L2092"),l(Ms,"rel","nofollow"),l(Uo,"class","inline"),l(Fo,"class","inline"),l(Wo,"class","code-section"),l(Bo,"class","inline"),l(Vo,"class","code-section"),l(zo,"class","inline"),l(Go,"class","inline"),l(Jo,"href","#thiseat-thismatch-thisnext"),l($o,"class","inline"),l(Yo,"class","inline"),l(Qo,"class","inline"),l(ea,"class","inline"),l(sa,"class","inline"),l(ta,"class","inline"),l(Us,"href","#a-new-token"),l(Us,"id","a-new-token"),l(Ws,"href","https://github.com/tanhauhau/babel/blob/feat/curry-function/packages/babel-parser/src/tokenizer/types.js#L86"),l(Ws,"rel","nofollow"),l(oa,"class","code-section"),l(aa,"class","inline"),l(na,"class","inline"),l(Bs,"href","https://github.com/tanhauhau/babel/blob/da0af5fd99a9b747370a2240df3abf2940b9649c/packages/babel-parser/src/tokenizer/index.js#L790"),l(Bs,"rel","nofollow"),l(ra,"class","inline"),l(la,"class","inline"),l(ia,"class","inline"),l(ca,"class","inline"),l(pa,"class","code-section"),l(ha,"class","code-section"),t1(Vs,"transform","scaleX(-1)"),t1(Vs,"display","inline-block"),l(zs,"href","#the-new-parser"),l(zs,"id","the-new-parser"),l(Js,"href","https://lihautan.com/babel-ast-explorer/#?eyJiYWJlbFNldHRpbmdzIjp7InZlcnNpb24iOiI3LjYuMCJ9LCJ0cmVlU2V0dGluZ3MiOnsiaGlkZUVtcHR5Ijp0cnVlLCJoaWRlTG9jYXRpb24iOnRydWUsImhpZGVUeXBlIjp0cnVlfSwiY29kZSI6ImZ1bmN0aW9uICogZm9vKCkge30ifQ=="),l(Js,"rel","nofollow"),l(Vr,"type","image/webp"),l(Vr,"srcset",E_),l(zr,"type","image/png"),l(zr,"srcset",a1),$i(ze.src,ug=a1)||l(ze,"src",ug),l(ze,"loading","lazy"),l(ze,"alt","AST for generator function"),l(ze,"title","AST for generator function"),l(ka,"class","inline"),l(ua,"class","inline"),l(va,"class","inline"),l(ya,"class","inline"),l(Jr,"type","image/webp"),l(Jr,"srcset",w_),l(Xr,"type","image/png"),l(Xr,"srcset",o1),$i(Ge.src,vg=o1)||l(Ge,"src",vg),l(Ge,"loading","lazy"),l(Ge,"alt","AST for curry function"),l(Ge,"title","AST for curry function"),l(fa,"class","inline"),l(Ys,"href","https://github.com/tanhauhau/babel/blob/da0af5fd99a9b747370a2240df3abf2940b9649c/packages/babel-parser/src/parser/statement.js#L1030"),l(Ys,"rel","nofollow"),l(ma,"class","inline"),l(ba,"class","code-section"),l(ga,"class","code-section"),l(Zs,"href","#how-parsing-works"),l(Zs,"id","how-parsing-works"),l(xa,"class","code-section"),l(wa,"class","inline"),l(Ea,"class","inline"),l(_a,"class","inline"),l(Ta,"class","inline"),l(Ia,"class","inline"),l(Ca,"class","inline"),l(Oa,"class","inline"),l(Da,"class","inline"),l(Aa,"class","inline"),l(Pa,"class","code-section"),l(Sa,"class","code-section"),l(La,"class","code-section"),l(ja,"class","inline"),l(Ma,"class","inline"),l(Ha,"class","inline"),l(tt,"href","https://craftinginterpreters.com/parsing-expressions.html#recursive-descent-parsing"),l(tt,"rel","nofollow"),l(ot,"href","#this-eat-this-match-this-next"),l(ot,"id","this-eat-this-match-this-next"),l(qa,"class","inline"),l(Na,"class","inline"),l(Ra,"class","inline"),l(Ua,"class","inline"),l(Fa,"class","inline"),l(Ba,"class","inline"),l(Va,"class","inline"),l(za,"class","inline"),l(Ga,"class","inline"),l(Ja,"class","inline"),l(Xa,"class","inline"),l($a,"class","inline"),l(Ya,"class","inline"),l(Za,"class","inline"),l(Qa,"class","inline"),l(en,"class","inline"),l(sn,"class","code-section"),l(rt,"href","https://craftinginterpreters.com/introduction.html"),l(rt,"rel","nofollow"),l(lt,"href","https://twitter.com/munificentbob?lang=en"),l(lt,"rel","nofollow"),l(it,"href","https://www.udacity.com/course/compilers-theory-and-practice--ud168"),l(it,"rel","nofollow"),l(an,"class","inline"),l(nn,"class","inline"),$i(ct.src,yg=x_)||l(ct,"src",yg),l(ct,"loading","lazy"),l(ct,"alt","Uploading custom parser"),l(pt,"href","#our-babel-plugin"),l(pt,"id","our-babel-plugin"),l(ht,"href","https://babeljs.io/docs/en/babel-parser#will-the-babel-parser-support-a-plugin-system"),l(ht,"rel","nofollow"),l(ln,"class","code-section"),l(dt,"href","https://babeljs.io/docs/en/babel-generator"),l(dt,"rel","nofollow"),l(pn,"class","inline"),l(hn,"class","inline"),l(ut,"href","https://github.com/tanhauhau/babel/blob/da0af5fd99a9b747370a2240df3abf2940b9649c/packages/babel-generator/src/generators/methods.js#L82"),l(ut,"rel","nofollow"),l(dn,"class","inline"),l(kn,"class","code-section"),l(yt,"href","https://hackernoon.com/currying-in-js-d9ddc64f162e"),l(yt,"rel","nofollow"),l(ft,"href","https://twitter.com/zhirzh"),l(ft,"rel","nofollow"),l(un,"class","code-section"),l(mt,"href","https://scotch.io/tutorials/understanding-hoisting-in-javascript"),l(mt,"rel","nofollow"),l(vn,"class","inline"),l(yn,"href","/step-by-step-guide-for-writing-a-babel-transformation"),l(fn,"class","code-section"),l(mn,"class","inline"),l(bn,"class","inline"),l(He,"href","#1-assume-currying-has-been-declared-in-the-global-scope"),l(He,"id","1-assume-currying-has-been-declared-in-the-global-scope"),l(gn,"class","inline"),l(xt,"href","https://www.google.com/search?q=regeneratorRuntime+is+not+defined"),l(xt,"rel","nofollow"),l(xn,"class","inline"),l(wn,"class","inline"),l(En,"class","inline"),l($e,"href","#2-use-the-babel-helpers"),l($e,"id","2-use-the-babel-helpers"),l(_n,"class","inline"),l(Tn,"class","inline"),l(In,"class","inline"),l(Cn,"class","inline"),l(On,"class","code-section"),l(wt,"href","https://twitter.com/lihautan"),l(wt,"rel","nofollow"),l(Dn,"class","inline"),l(Tt,"href","https://github.com/tanhauhau/babel/blob/feat/curry-function/packages/babel-helpers/src/helpers.js"),l(Tt,"rel","nofollow"),l(An,"class","code-section"),l(Pn,"class","inline"),l(Sn,"class","inline"),l(Ln,"class","inline"),l(jn,"class","inline"),l(Mn,"class","code-section"),l(Hn,"class","inline"),l(qn,"class","inline"),l(Ct,"href","#closing-note"),l(Ct,"id","closing-note"),l(Nn,"href","/step-by-step-guide-for-writing-a-babel-transformation"),l(Rn,"class","inline"),l(Un,"class","inline"),l(Fn,"href","#further-reading"),l(At,"href","https://github.com/tc39/proposals"),l(At,"rel","nofollow"),l(Pt,"href","https://tc39.es/process-document/"),l(Pt,"rel","nofollow"),l(Lt,"href","https://github.com/tanhauhau/babel/compare/3a7b6e1c2...b793efad1"),l(Lt,"rel","nofollow"),l(jt,"href","#editor-s-note"),l(jt,"id","editor-s-note"),l(Wn,"class","inline"),l(qt,"href","https://twitter.com/lihautan"),l(qt,"rel","nofollow"),l(Nt,"href","#further-reading"),l(Nt,"id","further-reading"),l(Ut,"href","https://craftinginterpreters.com/introduction.html"),l(Ut,"rel","nofollow"),l(Ft,"href","https://twitter.com/munificentbob?lang=en"),l(Ft,"rel","nofollow"),l(Wt,"href","https://www.udacity.com/course/compilers-theory-and-practice--ud168"),l(Wt,"rel","nofollow"),l(Vt,"href","https://medium.com/basecs/leveling-up-ones-parsing-game-with-asts-d7a6fc2400ff"),l(Vt,"rel","nofollow"),l(zt,"href","https://twitter.com/vaidehijoshi"),l(zt,"rel","nofollow"),l(Jt,"href","https://scotch.io/tutorials/understanding-hoisting-in-javascript"),l(Jt,"rel","nofollow"),l(Xt,"href","https://twitter.com/emabishi"),l(Xt,"rel","nofollow"),l(Yt,"href","https://hackernoon.com/currying-in-js-d9ddc64f162e"),l(Yt,"rel","nofollow"),l(Zt,"href","https://twitter.com/zhirzh"),l(Zt,"rel","nofollow"),l(Qt,"href","https://github.com/tc39/proposals"),l(Qt,"rel","nofollow"),l(Kt,"href","https://tc39.es/process-document/"),l(Kt,"rel","nofollow")},m(p,v){c1(I,p,v),b(p,se,v),b(p,R,v),e(R,cs),e(R,O),e(O,te),e(R,to),b(p,Xl,v),b(p,x,v),e(x,lr),e(lr,ps),e(ps,Yi),e(x,Zi),e(x,ir),e(ir,Qi),e(x,Ki),e(x,oo),oo.innerHTML=k1,e(x,ec),e(x,L),e(L,sc),e(L,hs),e(hs,tc),e(L,oc),e(L,ao),e(ao,ac),e(L,nc),e(L,ds),e(ds,rc),e(L,lc),e(L,no),e(no,ic),e(L,cc),e(L,ro),e(ro,pc),e(L,hc),e(L,lo),e(lo,dc),e(L,kc),e(L,io),e(io,uc),e(L,vc),e(x,yc),e(x,oe),e(oe,fc),e(oe,ks),e(ks,mc),e(oe,bc),e(oe,co),e(co,gc),e(oe,xc),e(oe,po),e(po,wc),e(oe,Ec),e(x,_c),e(x,ho),ho.innerHTML=u1,e(x,Tc),e(x,cr),e(cr,j),e(j,Ic),e(j,ko),e(ko,Cc),e(j,Oc),e(j,uo),e(uo,Dc),e(j,Ac),e(j,vo),e(vo,Pc),e(j,Sc),e(j,yo),e(yo,Lc),e(j,jc),e(j,us),e(us,Mc),e(j,Hc),e(j,fo),e(fo,qc),e(j,Nc),e(x,Rc),e(x,pr),e(pr,Uc),e(x,Fc),e(x,vs),e(vs,hr),e(hr,Wc),e(vs,Bc),e(vs,dr),e(dr,Vc),e(x,zc),e(x,kr),e(kr,Gc),e(x,Jc),e(x,ur),e(ur,Xc),b(p,$l,v),b(p,C,v),e(C,vr),e(vr,ys),e(ys,$c),e(C,Yc),e(C,fs),e(fs,Zc),e(fs,ms),e(ms,Qc),e(fs,Kc),e(C,ep),e(C,yr),e(yr,bs),e(bs,fr),e(bs,mr),e(bs,Be),e(C,sp),e(C,br),e(br,tp),e(C,op),e(C,gs),e(gs,ap),e(gs,xs),e(xs,np),e(gs,rp),e(C,lp),e(C,mo),mo.innerHTML=v1,e(C,ip),e(C,gr),e(gr,cp),e(C,pp),e(C,V),e(V,hp),e(V,bo),e(bo,dp),e(V,kp),e(V,go),e(go,up),e(V,vp),e(V,xo),e(xo,yp),e(V,fp),e(V,wo),e(wo,mp),e(V,bp),e(C,gp),e(C,Eo),Eo.innerHTML=y1,e(C,xp),e(C,xr),e(xr,wr),e(wr,wp),b(p,Yl,v),b(p,M,v),e(M,Er),e(Er,ws),e(ws,Ep),e(M,_p),e(M,Ee),e(Ee,Tp),e(Ee,Es),e(Es,Ip),e(Ee,Cp),e(Ee,_s),e(_s,Op),e(Ee,Dp),e(M,Ap),e(M,_r),e(_r,Pp),e(M,Sp),e(M,_e),e(_e,Ve),e(Ve,Lp),e(Ve,_o),e(_o,jp),e(Ve,Mp),e(Ve,To),e(To,Hp),e(_e,qp),e(_e,ve),e(ve,Np),e(ve,Tr),e(Tr,Rp),e(ve,Up),e(ve,Ir),e(Ir,Fp),e(ve,Wp),e(ve,Io),e(Io,Bp),e(_e,Vp),e(_e,Te),e(Te,zp),e(Te,Cr),e(Cr,Gp),e(Te,Jp),e(Te,Ts),e(Ts,Xp),e(Te,$p),e(M,Yp),e(M,Ie),e(Ie,Zp),e(Ie,Is),e(Is,Qp),e(Ie,Kp),e(Ie,Cs),e(Cs,eh),e(Ie,sh),e(M,th),e(M,Or),e(Or,Dr),e(Dr,oh),b(p,Zl,v),b(p,h,v),e(h,Ar),e(Ar,Os),e(Os,ah),e(h,nh),e(h,Ds),e(Ds,rh),e(Ds,Co),e(Co,lh),e(Ds,ih),e(h,ch),e(h,Oo),Oo.innerHTML=f1,e(h,ph),e(h,N),e(N,hh),e(N,Pr),e(Pr,dh),e(N,kh),e(N,Sr),e(Sr,uh),e(N,vh),e(N,Do),e(Do,yh),e(N,fh),e(N,Ao),e(Ao,mh),e(N,bh),e(N,Po),e(Po,gh),e(N,xh),e(h,wh),e(h,As),e(As,Eh),e(As,Ps),e(Ps,_h),e(As,Th),e(h,Ih),e(h,So),So.innerHTML=m1,e(h,Ch),e(h,Ce),e(Ce,Oh),e(Ce,Lo),e(Lo,Dh),e(Ce,Ah),e(Ce,jo),e(jo,Ph),e(Ce,Sh),e(h,Lh),e(h,Mo),Mo.innerHTML=b1,e(h,jh),e(h,Ss),e(Ss,Lr),e(Lr,Mh),e(Ss,Hh),e(Ss,Ho),Ho.innerHTML=g1,e(h,qh),e(h,Ls),e(Ls,Nh),e(Ls,qo),e(qo,Rh),e(Ls,Uh),e(h,Fh),e(h,js),e(js,Wh),e(js,No),e(No,Bh),e(js,Vh),e(h,zh),e(h,Oe),e(Oe,Gh),e(Oe,Ms),e(Ms,Ro),e(Ro,Jh),e(Oe,Xh),e(Oe,Uo),e(Uo,$h),e(Oe,Yh),e(h,Zh),e(h,Hs),e(Hs,Qh),e(Hs,Fo),e(Fo,Kh),e(Hs,ed),e(h,sd),e(h,Wo),Wo.innerHTML=x1,e(h,td),e(h,qs),e(qs,od),e(qs,Bo),e(Bo,ad),e(qs,nd),e(h,rd),e(h,Vo),Vo.innerHTML=w1,e(h,ld),e(h,De),e(De,id),e(De,zo),e(zo,cd),e(De,pd),e(De,Go),e(Go,hd),e(De,dd),e(h,kd),e(h,Ns),e(Ns,ud),e(Ns,Jo),e(Jo,vd),e(Ns,yd),e(h,fd),e(h,jr),e(jr,md),e(h,bd),e(h,ae),e(ae,Xo),e(Xo,gd),e(Xo,$o),e($o,xd),e(ae,wd),e(ae,Rs),e(Rs,Ed),e(Rs,Yo),e(Yo,_d),e(Rs,Td),e(ae,Id),e(ae,Zo),e(Zo,Cd),e(Zo,Qo),e(Qo,Od),e(ae,Dd),e(ae,Ko),e(Ko,Ad),e(Ko,ea),e(ea,Pd),e(h,Sd),e(h,Mr),e(Mr,Ld),e(h,jd),e(h,Ae),e(Ae,Md),e(Ae,sa),e(sa,Hd),e(Ae,qd),e(Ae,ta),e(ta,Nd),e(Ae,Rd),b(p,Ql,v),b(p,w,v),e(w,Hr),e(Hr,Us),e(Us,Ud),e(w,Fd),e(w,Fs),e(Fs,Wd),e(Fs,Ws),e(Ws,Bd),e(Fs,Vd),e(w,zd),e(w,qr),e(qr,Gd),e(w,Jd),e(w,oa),oa.innerHTML=E1,e(w,Xd),e(w,$),e($,$d),e($,Nr),e(Nr,Yd),e($,Zd),e($,aa),e(aa,Qd),e($,Kd),e($,na),e(na,ek),e($,sk),e($,Bs),e(Bs,tk),e(w,ok),e(w,Rr),e(Rr,Ur),e(Ur,ak),e(w,nk),e(w,z),e(z,rk),e(z,ra),e(ra,lk),e(z,ik),e(z,la),e(la,ck),e(z,pk),e(z,ia),e(ia,hk),e(z,dk),e(z,ca),e(ca,kk),e(z,uk),e(w,vk),e(w,pa),pa.innerHTML=_1,e(w,yk),e(w,Fr),e(Fr,fk),e(w,mk),e(w,ha),ha.innerHTML=T1,e(w,bk),e(w,da),e(da,gk),e(da,Vs),e(Vs,xk),b(p,Kl,v),b(p,f,v),e(f,Wr),e(Wr,zs),e(zs,wk),e(f,Ek),e(f,Gs),e(Gs,_k),e(Gs,Js),e(Js,Tk),e(Gs,Ik),e(f,Ck),e(f,Br),e(Br,Xs),e(Xs,Vr),e(Xs,zr),e(Xs,ze),e(f,Ok),e(f,Pe),e(Pe,Dk),e(Pe,ka),e(ka,Ak),e(Pe,Pk),e(Pe,ua),e(ua,Sk),e(Pe,Lk),e(f,jk),e(f,Se),e(Se,Mk),e(Se,va),e(va,Hk),e(Se,qk),e(Se,ya),e(ya,Nk),e(Se,Rk),e(f,Uk),e(f,Gr),e(Gr,$s),e($s,Jr),e($s,Xr),e($s,Ge),e(f,Fk),e(f,$r),e($r,Wk),e(f,Bk),e(f,G),e(G,Vk),e(G,Yr),e(Yr,zk),e(G,Gk),e(G,fa),e(fa,Jk),e(G,Xk),e(G,Ys),e(Ys,$k),e(G,Yk),e(G,ma),e(ma,Zk),e(G,Qk),e(f,Kk),e(f,ba),ba.innerHTML=I1,e(f,eu),e(f,Zr),e(Zr,su),e(f,tu),e(f,ga),ga.innerHTML=C1,e(f,ou),e(f,Qr),e(Qr,au),e(f,nu),e(f,Kr),e(Kr,ru),b(p,ei,v),b(p,y,v),e(y,el),e(el,Zs),e(Zs,lu),e(y,iu),e(y,Qs),e(Qs,cu),e(Qs,sl),e(sl,pu),e(Qs,hu),e(y,du),e(y,tl),e(tl,ku),e(y,uu),e(y,xa),xa.innerHTML=O1,e(y,vu),e(y,Ks),e(Ks,yu),e(Ks,wa),e(wa,fu),e(Ks,mu),e(y,bu),e(y,Le),e(Le,et),e(et,gu),e(et,Ea),e(Ea,xu),e(et,wu),e(Le,Eu),e(Le,ne),e(ne,_u),e(ne,_a),e(_a,Tu),e(ne,Iu),e(ne,Ta),e(Ta,Cu),e(ne,Ou),e(ne,Ia),e(Ia,Du),e(ne,Au),e(Le,Pu),e(Le,re),e(re,Su),e(re,Ca),e(Ca,Lu),e(re,ju),e(re,Oa),e(Oa,Mu),e(re,Hu),e(re,Da),e(Da,qu),e(re,Nu),e(y,Ru),e(y,st),e(st,Uu),e(st,Aa),e(Aa,Fu),e(st,Wu),e(y,Bu),e(y,Pa),Pa.innerHTML=D1,e(y,Vu),e(y,ol),e(ol,zu),e(y,Gu),e(y,Sa),Sa.innerHTML=A1,e(y,Ju),e(y,al),e(al,Xu),e(y,$u),e(y,La),La.innerHTML=P1,e(y,Yu),e(y,nl),e(nl,rl),e(rl,Zu),e(y,Qu),e(y,J),e(J,Ku),e(J,ja),e(ja,ev),e(J,sv),e(J,Ma),e(Ma,tv),e(J,ov),e(J,Ha),e(Ha,av),e(J,nv),e(J,tt),e(tt,rv),e(J,lv),b(p,si,v),b(p,m,v),e(m,ll),e(ll,ot),e(ot,iv),e(m,cv),e(m,le),e(le,pv),e(le,qa),e(qa,hv),e(le,dv),e(le,Na),e(Na,kv),e(le,uv),e(le,Ra),e(Ra,vv),e(le,yv),e(m,fv),e(m,ie),e(ie,Je),e(Je,il),e(il,Ua),e(Ua,mv),e(Je,bv),e(Je,Fa),e(Fa,gv),e(Je,xv),e(ie,wv),e(ie,Wa),e(Wa,cl),e(cl,Ba),e(Ba,Ev),e(Wa,_v),e(ie,Tv),e(ie,U),e(U,pl),e(pl,Va),e(Va,Iv),e(U,Cv),e(U,za),e(za,Ov),e(U,Dv),e(U,Ga),e(Ga,Av),e(U,Pv),e(U,Ja),e(Ja,Sv),e(U,Lv),e(U,Xa),e(Xa,jv),e(U,hl),e(hl,Y),e(Y,$a),e($a,Mv),e(Y,Hv),e(Y,Ya),e(Ya,qv),e(Y,Nv),e(Y,Za),e(Za,Rv),e(Y,Uv),e(Y,Qa),e(Qa,Fv),e(Y,Wv),e(ie,Bv),e(ie,Ka),e(Ka,dl),e(dl,en),e(en,Vv),e(Ka,zv),e(m,Gv),e(m,kl),e(kl,Jv),e(m,Xv),e(m,sn),sn.innerHTML=S1,e(m,$v),e(m,ul),e(ul,Yv),e(m,Zv),e(m,at),e(at,nt),e(nt,rt),e(rt,Qv),e(nt,Kv),e(nt,lt),e(lt,ey),e(at,sy),e(at,tn),e(tn,it),e(it,ty),e(tn,oy),e(m,ay),e(m,ny),e(m,ry),e(m,on),e(on,vl),e(vl,ly),e(on,iy),e(m,cy),e(m,yl),e(yl,py),e(m,hy),e(m,je),e(je,dy),e(je,an),e(an,ky),e(je,uy),e(je,nn),e(nn,vy),e(je,yy),e(m,fy),e(m,fl),e(fl,ct),e(m,my),e(m,by),b(p,ti,v),b(p,d,v),e(d,ml),e(ml,pt),e(pt,gy),e(d,xy),e(d,bl),e(bl,wy),e(d,Ey),e(d,gl),e(gl,_y),e(d,Ty),e(d,rn),e(rn,Iy),e(rn,ht),e(ht,Cy),e(d,Oy),e(d,ln),ln.innerHTML=L1,e(d,Dy),e(d,xl),e(xl,Ay),e(d,Py),e(d,cn),e(cn,Sy),e(cn,wl),e(wl,Ly),e(d,jy),e(d,My),e(d,Hy),e(d,El),e(El,qy),e(d,Ny),e(d,ce),e(ce,Ry),e(ce,dt),e(dt,Uy),e(ce,Fy),e(ce,pn),e(pn,Wy),e(ce,By),e(ce,hn),e(hn,Vy),e(ce,zy),e(d,Gy),e(d,_l),e(_l,kt),e(kt,Jy),e(kt,ut),e(ut,Xy),e(kt,$y),e(d,Yy),e(d,Zy),e(d,Qy),e(d,vt),e(vt,Ky),e(vt,dn),e(dn,ef),e(vt,sf),e(d,tf),e(d,kn),kn.innerHTML=j1,e(d,of),e(d,Tl),e(Tl,Xe),e(Xe,af),e(Xe,yt),e(yt,nf),e(Xe,rf),e(Xe,ft),e(ft,lf),e(d,cf),e(d,Il),e(Il,pf),e(d,hf),e(d,un),un.innerHTML=M1,e(d,df),e(d,Cl),e(Cl,Me),e(Me,kf),e(Me,mt),e(mt,uf),e(Me,vf),e(Me,vn),e(vn,yf),e(Me,ff),e(d,mf),e(d,bt),e(bt,bf),e(bt,yn),e(yn,gf),e(bt,xf),e(d,wf),e(d,fn),fn.innerHTML=H1,e(d,Ef),e(d,gt),e(gt,_f),e(gt,mn),e(mn,Tf),e(gt,If),e(d,Cf),e(d,Ol),e(Ol,Of),b(p,oi,v),b(p,Z,v),e(Z,Dl),e(Dl,He),e(He,Df),e(He,bn),e(bn,Af),e(He,Pf),e(Z,Sf),e(Z,Al),e(Al,Lf),e(Z,jf),e(Z,pe),e(pe,Mf),e(pe,gn),e(gn,Hf),e(pe,qf),e(pe,Pl),e(Pl,Nf),e(pe,Rf),e(pe,xt),e(xt,Uf),e(pe,Ff),e(Z,Wf),e(Z,qe),e(qe,Bf),e(qe,xn),e(xn,Vf),e(qe,zf),e(qe,wn),e(wn,Gf),e(qe,Jf),b(p,ai,v),b(p,E,v),e(E,Sl),e(Sl,$e),e($e,Xf),e($e,En),e(En,$f),e(E,Yf),e(E,X),e(X,Zf),e(X,_n),e(_n,Qf),e(X,Kf),e(X,Tn),e(Tn,em),e(X,sm),e(X,In),e(In,tm),e(X,om),e(X,Cn),e(Cn,am),e(X,nm),e(E,rm),e(E,On),On.innerHTML=q1,e(E,lm),e(E,Ll),e(Ll,Ye),e(Ye,jl),e(jl,im),e(Ye,cm),e(Ye,wt),e(wt,pm),e(Ye,hm),e(E,dm),e(E,Et),e(Et,km),e(Et,Dn),e(Dn,um),e(Et,vm),e(E,ym),e(E,_t),e(_t,fm),e(_t,Tt),e(Tt,mm),e(_t,bm),e(E,gm),e(E,An),An.innerHTML=N1,e(E,xm),e(E,he),e(he,wm),e(he,Pn),e(Pn,Em),e(he,_m),e(he,Sn),e(Sn,Tm),e(he,Im),e(he,Ln),e(Ln,Cm),e(he,Om),e(E,Dm),e(E,It),e(It,Am),e(It,jn),e(jn,Pm),e(It,Sm),e(E,Lm),e(E,Mn),Mn.innerHTML=R1,e(E,jm),e(E,Ne),e(Ne,Mm),e(Ne,Hn),e(Hn,Hm),e(Ne,qm),e(Ne,qn),e(qn,Nm),e(Ne,Rm),b(p,ni,v),b(p,H,v),e(H,Ml),e(Ml,Ct),e(Ct,Um),e(H,Fm),e(H,de),e(de,Wm),e(de,Ot),e(Ot,Bm),e(Ot,Nn),e(Nn,Vm),e(Ot,zm),e(de,Gm),e(de,Rn),e(Rn,Jm),e(de,Xm),e(de,Un),e(Un,$m),e(de,Ym),e(H,Zm),e(H,Dt),e(Dt,Qm),e(Dt,Fn),e(Fn,Km),e(Dt,eb),e(H,sb),e(H,Re),e(Re,tb),e(Re,At),e(At,ob),e(Re,ab),e(Re,Pt),e(Pt,nb),e(Re,rb),e(H,lb),e(H,St),e(St,ib),e(St,Lt),e(Lt,cb),e(St,pb),e(H,hb),e(H,db),b(p,ri,v),b(p,F,v),e(F,Hl),e(Hl,jt),e(jt,kb),e(F,ub),e(F,ql),e(ql,vb),e(F,yb),e(F,Nl),e(Nl,fb),e(F,mb),e(F,Mt),e(Mt,bb),e(Mt,Wn),e(Wn,gb),e(Mt,xb),e(F,wb),e(F,Ht),e(Ht,Eb),e(Ht,qt),e(qt,_b),e(Ht,Tb),b(p,li,v),b(p,W,v),e(W,Rl),e(Rl,Nt),e(Nt,Ib),e(W,Cb),e(W,Ul),e(Ul,Ob),e(W,Db),e(W,Ue),e(Ue,Rt),e(Rt,Ut),e(Ut,Ab),e(Rt,Pb),e(Rt,Ft),e(Ft,Sb),e(Ue,Lb),e(Ue,Bn),e(Bn,Wt),e(Wt,jb),e(Bn,Mb),e(Ue,Hb),e(Ue,Bt),e(Bt,Vt),e(Vt,qb),e(Bt,Nb),e(Bt,zt),e(zt,Rb),e(W,Ub),e(W,Fl),e(Fl,Fb),e(W,Wb),e(W,ke),e(ke,Gt),e(Gt,Jt),e(Jt,Bb),e(Gt,Vb),e(Gt,Xt),e(Xt,zb),e(ke,Gb),e(ke,$t),e($t,Yt),e(Yt,Jb),e($t,Xb),e($t,Zt),e(Zt,$b),e(ke,Yb),e(ke,Wl),e(Wl,Qt),e(Qt,Zb),e(ke,Qb),e(ke,Bl),e(Bl,Kt),e(Kt,Kb),ii=!0},p:m_,i(p){ii||(p1(I.$$.fragment,p),ii=!0)},o(p){h1(I.$$.fragment,p),ii=!1},d(p){d1(I,p),p&&o(se),p&&o(R),p&&o(Xl),p&&o(x),p&&o($l),p&&o(C),p&&o(Yl),p&&o(M),p&&o(Zl),p&&o(h),p&&o(Ql),p&&o(w),p&&o(Kl),p&&o(f),p&&o(ei),p&&o(y),p&&o(si),p&&o(m),p&&o(ti),p&&o(d),p&&o(oi),p&&o(Z),p&&o(ai),p&&o(E),p&&o(ni),p&&o(H),p&&o(ri),p&&o(F),p&&o(li),p&&o(W)}}}function C_(so){let I,se;const R=[so[0],r1];let cs={$$slots:{default:[I_]},$$scope:{ctx:so}};for(let O=0;O<R.length;O+=1)cs=dg(cs,R[O]);return I=new b_({props:cs}),{c(){l1(I.$$.fragment)},l(O){i1(I.$$.fragment,O)},m(O,te){c1(I,O,te),se=!0},p(O,[te]){const to=te&1?y_(R,[te&1&&e1(O[0]),te&0&&e1(r1)]):{};te&2&&(to.$$scope={dirty:te,ctx:O}),I.$set(to)},i(O){se||(p1(I.$$.fragment,O),se=!0)},o(O){h1(I.$$.fragment,O),se=!1},d(O){d1(I,O)}}}const r1={title:"Creating custom JavaScript syntax with Babel",date:"2019-09-25T08:00:00Z",description:"Forking babel parser and creating your custom JavaScript syntax isn't as hard as you think.",tags:["JavaScript","babel","AST","transform"],series:"Intermediate Babel",label:"blog"};function O_(so,I,se){return f_("blog",{image:T_}),so.$$set=R=>{se(0,I=dg(dg({},I),s1(R)))},I=s1(I),[I]}class M_ extends k_{constructor(I){super();u_(this,I,O_,C_,v_,{})}}export{M_ as default,r1 as metadata};
