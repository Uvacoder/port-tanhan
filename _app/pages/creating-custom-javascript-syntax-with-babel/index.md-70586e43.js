import{S as m_,i as g_,s as x_,C as ug,w as k1,x as u1,y as v1,z as w_,A as r1,q as y1,o as f1,B as b1,r as E_,R as l1,k as i,e as a,t as s,m as c,c as n,a as r,h as t,d as o,b as l,Q as Xi,f as y,g,F as e,O as __}from"../../chunks/vendor-569a3c5c.js";import{B as T_}from"../../chunks/BlogLayout-17b76cb2.js";import{T as I_}from"../../chunks/TableOfContent-dbc18cb8.js";import"../../chunks/stores-ee936cd4.js";import"../../chunks/WebMentions-968cc380.js";/* empty css                                */var C_="/_app/assets/custom-parser-335207f7.gif",i1="/_app/assets/custom-parser-8dacdaf1.gif",O_="/_app/assets/curry-function-80c5079a.webp",D_="/_app/assets/curry-function-8da89c90.webp",A_="/_app/assets/curry-function-7763bc7d.png",c1="/_app/assets/curry-function-40bd348b.png",P_="/_app/assets/generator-function-2beb2653.webp",S_="/_app/assets/generator-function-4f1730da.webp",L_="/_app/assets/generator-function-9056969f.png",p1="/_app/assets/generator-function-a2553bf5.png",j_="/_app/assets/forking-d6a0339f.webp",M_="/_app/assets/forking-de059522.webp",H_="/_app/assets/forking-8e66bc96.png",h1="/_app/assets/forking-2f29a6a7.png",q_="/_app/assets/hero-twitter-03484d5c.jpg";function N_(oo){let C,re,R,vs,D,le,ao,Yl,w,dr,ys,$i,Yi,kr,Zi,Qi,no,m1=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// &#39;@@&#39; makes the function &#96;foo&#96; curried</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> @@ </span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">(a</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> b</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> c) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> a </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> b </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> c;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">)(</span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">)); </span><span style="color: var(--shiki-token-comment)">// 6</span></span></code></pre>`,Ki,j,ec,fs,sc,tc,ro,oc,ac,bs,nc,rc,lo,lc,ic,io,cc,pc,co,hc,dc,po,kc,uc,vc,ie,yc,ms,fc,bc,ho,mc,gc,ko,xc,wc,Ec,uo,g1=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">); </span><span style="color: var(--shiki-token-comment)">// 6</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">bar</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">); </span><span style="color: var(--shiki-token-comment)">// (n) =&gt; 1 + 2 + n</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">bar</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">); </span><span style="color: var(--shiki-token-comment)">// 6</span></span></code></pre>`,_c,ur,M,Tc,vo,Ic,Cc,yo,Oc,Dc,fo,Ac,Pc,bo,Sc,Lc,gs,jc,Mc,mo,Hc,qc,Nc,vr,Fc,Rc,xs,yr,Uc,Wc,fr,Bc,Vc,br,zc,Gc,mr,Jc,Zl,O,gr,ws,Xc,$c,Es,Yc,_s,Zc,Qc,Kc,xr,Oe,go,wr,z,vg,ep,Er,sp,tp,Ts,op,Is,ap,np,rp,xo,x1=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">$ git clone https://github.com/tanhauhau/babel.git</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)"># set up</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$ </span><span style="color: var(--shiki-token-function)">cd</span><span style="color: var(--shiki-color-text)"> babel</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$ make bootstrap</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$ make build</span></span></code></pre>`,lp,_r,ip,cp,G,pp,wo,hp,dp,Eo,kp,up,_o,vp,yp,To,fp,bp,mp,Io,w1='<pre class="prism language-yml"><code><div class="line"><span class="token punctuation">-</span> doc</div><div class="line"><span class="token punctuation">-</span> packages</div><div class="line">  <span class="token punctuation">-</span> babel<span class="token punctuation">-</span>core</div><div class="line">  <span class="token punctuation">-</span> babel<span class="token punctuation">-</span>parser</div><div class="line">  <span class="token punctuation">-</span> babel<span class="token punctuation">-</span>plugin<span class="token punctuation">-</span>transform<span class="token punctuation">-</span>react<span class="token punctuation">-</span>jsx</div><div class="line">  <span class="token punctuation">-</span> <span class="token punctuation">...</span></div><div class="line"><span class="token punctuation">-</span> Gulpfile.js</div><div class="line"><span class="token punctuation">-</span> Makefile</div><div class="line"><span class="token punctuation">-</span> <span class="token punctuation">...</span></div></code></pre>',gp,Tr,Ir,xp,Ql,H,Cr,Cs,wp,Ep,De,_p,Os,Tp,Ip,Ds,Cp,Op,Dp,Or,Ap,Pp,Ae,Qe,Sp,Co,Lp,jp,Oo,Mp,Hp,ge,qp,Dr,Np,Fp,Ar,Rp,Up,Do,Wp,Bp,Pe,Vp,Pr,zp,Gp,As,Jp,Xp,$p,Se,Yp,Ps,Zp,Qp,Ss,Kp,eh,sh,Sr,Lr,th,Kl,h,jr,Ls,oh,ah,js,nh,Ao,rh,lh,ih,Po,E1=`<pre class="prism language-"><code><span class="line">- src/</span>
<span class="line">  - tokenizer/</span>
<span class="line">  - parser/</span>
<span class="line">  - plugins/</span>
<span class="line">    - jsx/</span>
<span class="line">    - typescript/</span>
<span class="line">    - flow/</span>
<span class="line">    - ...</span>
<span class="line">- test/</span></code></pre>`,ch,F,ph,Mr,hh,dh,Hr,kh,uh,So,vh,yh,Lo,fh,bh,jo,mh,gh,xh,Ms,wh,Hs,Eh,_h,Th,Mo,_1=`<div class="filename">packages/babel-parser/test/curry-function.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; parse &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;../lib&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getParser</span><span style="color: var(--shiki-color-text)">(code) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parse</span><span style="color: var(--shiki-color-text)">(code</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; sourceType</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;module&#39;</span><span style="color: var(--shiki-color-text)"> &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">describe</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;curry function syntax&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">it</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;should parse&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">expect</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">getParser</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;function @@ foo() &#123;&#125;&#96;</span><span style="color: var(--shiki-color-text)">)())</span><span style="color: var(--shiki-token-function)">.toMatchSnapshot</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,Ih,Le,Ch,Ho,Oh,Dh,qo,Ah,Ph,Sh,No,T1=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">SyntaxError: Unexpected token (1:9)</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">at Parser.raise (packages/babel-parser/src/parser/location.js:39:63)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">at Parser.raise [as unexpected] (packages/babel-parser/src/parser/util.js:133:16)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">at Parser.unexpected [as parseIdentifierName] (packages/babel-parser/src/parser/expression.js:2090:18)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">at Parser.parseIdentifierName [as parseIdentifier] (packages/babel-parser/src/parser/expression.js:2052:23)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">at Parser.parseIdentifier (packages/babel-parser/src/parser/statement.js:1096:52)</span></span></code></pre>`,Lh,qs,qr,jh,Mh,Fo,I1='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">BABEL_ENV=test node_modules/.bin/jest -u packages/babel-parser/test/curry-function.js</span></span></code></pre>',Hh,Ns,qh,Ro,Nh,Fh,Rh,Fs,Uh,Uo,Wh,Bh,Vh,je,zh,Rs,Wo,Gh,Jh,Bo,Xh,$h,Yh,Us,Zh,Vo,Qh,Kh,ed,zo,C1=`<div class="filename">packages/babel-parser/src/parser/expression.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">parseIdentifierName</span><span style="color: var(--shiki-color-text)">(pos: number</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> liberal</span><span style="color: var(--shiki-token-keyword)">?:</span><span style="color: var(--shiki-color-text)"> boolean): string &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.match</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">tt</span><span style="color: var(--shiki-color-text)">.name)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">state</span><span style="color: var(--shiki-color-text)">.type); </span><span style="color: var(--shiki-token-comment)">// current token</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.lookahead</span><span style="color: var(--shiki-color-text)">().type); </span><span style="color: var(--shiki-token-comment)">// next token</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.unexpected</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,sd,Ws,td,Go,od,ad,nd,Jo,O1=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">TokenType &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  label</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,rd,Me,ld,Xo,id,cd,$o,pd,hd,dd,Bs,kd,Yo,ud,vd,yd,Nr,fd,bd,ce,Zo,md,Qo,gd,xd,Vs,wd,Ko,Ed,_d,Td,ea,Id,sa,Cd,Od,ta,Dd,oa,Ad,Pd,Fr,Sd,Ld,He,jd,aa,Md,Hd,na,qd,Nd,ei,E,Rr,zs,Fd,Rd,Gs,Ud,Js,Wd,Bd,Vd,Ur,zd,Gd,ra,D1=`<div class="filename">packages/babel-parser/src/tokenizer/types.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">types</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123; [name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">TokenType</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  at</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">TokenType</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;@&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  atat</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">TokenType</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;@@&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,Jd,K,Xd,Wr,$d,Yd,la,Zd,Qd,ia,Kd,ek,Xs,sk,tk,Br,Vr,ok,ak,J,nk,ca,rk,lk,pa,ik,ck,ha,pk,hk,da,dk,kk,uk,ka,A1=`<div class="filename">packages/babel-parser/src/tokenizer/index.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">getTokenFromCode</span><span style="color: var(--shiki-color-text)">(code: number): </span><span style="color: var(--shiki-token-keyword)">void</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">switch</span><span style="color: var(--shiki-color-text)"> (code) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">charCodes</span><span style="color: var(--shiki-color-text)">.atSign:</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// if the next character is a &#96;@&#96;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">input</span><span style="color: var(--shiki-token-function)">.charCodeAt</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">state</span><span style="color: var(--shiki-color-text)">.pos </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">charCodes</span><span style="color: var(--shiki-color-text)">.atSign) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// create &#96;tt.atat&#96; instead</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.finishOp</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">tt</span><span style="color: var(--shiki-color-text)">.atat</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.finishOp</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">tt</span><span style="color: var(--shiki-color-text)">.at</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,vk,zr,yk,fk,ua,P1=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// current token</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">TokenType &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  label</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;@@&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// next token</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">TokenType &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  label</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;name&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,bk,va,mk,$s,gk,si,b,Gr,Ys,xk,wk,Zs,Ek,Qs,_k,Tk,Ik,Jr,qe,ya,Xr,X,yg,Ck,Ne,Ok,fa,Dk,Ak,ba,Pk,Sk,Lk,Fe,jk,ma,Mk,Hk,ga,qk,Nk,Fk,$r,Re,xa,Yr,$,fg,Rk,Zr,Uk,Wk,Y,Bk,Qr,Vk,zk,wa,Gk,Jk,Ks,Xk,$k,Ea,Yk,Zk,Qk,_a,S1=`<div class="filename">packages/babel-parser/src/parser/statement.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">StatementParser</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ExpressionParser</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">parseFunction</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">T</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">N</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">NormalFunction</span><span style="color: var(--shiki-color-text)">&gt;(</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    node</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">T</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    statement</span><span style="color: var(--shiki-token-keyword)">?:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">FUNC_NO_FLAGS</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    isAsync</span><span style="color: var(--shiki-token-keyword)">?:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">boolean</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  )</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">T</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.generator </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.eat</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">tt</span><span style="color: var(--shiki-color-text)">.star);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.curry </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.eat</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">tt</span><span style="color: var(--shiki-color-text)">.atat);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Kk,Kr,eu,su,Ta,L1=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)"> PASS  packages/babel-parser/test/curry-function.js</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  curry </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">syntax</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    \u2713 should parse (12ms)</span></span></code></pre>`,tu,el,ou,au,sl,nu,ti,f,tl,et,ru,lu,st,iu,ol,cu,pu,hu,al,du,ku,Ia,j1=`<pre class="prism language-"><code><span class="line">...</span>
<span class="line">ExponentiationExpression -&gt; UnaryExpression</span>
<span class="line">                            UpdateExpression ** ExponentiationExpression</span>
<span class="line">MultiplicativeExpression -&gt; ExponentiationExpression</span>
<span class="line">                            MultiplicativeExpression (&quot;*&quot; or &quot;/&quot; or &quot;%&quot;) ExponentiationExpression</span>
<span class="line">AdditiveExpression       -&gt; MultiplicativeExpression</span>
<span class="line">                            AdditiveExpression + MultiplicativeExpression</span>
<span class="line">                            AdditiveExpression - MultiplicativeExpression</span>
<span class="line">...</span></code></pre>`,uu,tt,vu,Ca,yu,fu,bu,Ue,ot,mu,Oa,gu,xu,wu,pe,Eu,Da,_u,Tu,Aa,Iu,Cu,Pa,Ou,Du,Au,he,Pu,Sa,Su,Lu,La,ju,Mu,ja,Hu,qu,Nu,at,Fu,Ma,Ru,Uu,Wu,Ha,M1='<pre class="prism language-"><code><span class="line">(AdditiveExpression &quot;+&quot; 1 (MultiplicativeExpression &quot;*&quot; 2 3))</span></code></pre>',Bu,nl,Vu,zu,qa,H1='<pre class="prism language-"><code><span class="line">(MultiplicativeExpression &quot;*&quot; (AdditiveExpression &quot;+&quot; 1 2) 3)</span></code></pre>',Gu,rl,Ju,Xu,Na,q1=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Parser</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">parseAdditiveExpression</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">left</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.parseMultiplicativeExpression</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// if the current token is &#96;+&#96; or &#96;-&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.match</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">tt</span><span style="color: var(--shiki-color-text)">.plus) </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.match</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">tt</span><span style="color: var(--shiki-color-text)">.minus)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">operator</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">state</span><span style="color: var(--shiki-color-text)">.type;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// move on to the next token</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.nextToken</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">right</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.parseMultiplicativeExpression</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// create the node</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.finishNode</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          operator</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          left</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          right</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-string-expression)">&#39;BinaryExpression&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      );</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// return as MultiplicativeExpression</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> left;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,$u,ll,il,Yu,Zu,Z,Qu,Fa,Ku,ev,Ra,sv,tv,Ua,ov,av,nt,nv,rv,oi,m,cl,rt,lv,iv,de,cv,Wa,pv,hv,Ba,dv,kv,Va,uv,vv,yv,ke,Ke,pl,za,fv,bv,Ga,mv,gv,xv,Ja,hl,Xa,wv,Ev,_v,U,dl,$a,Tv,Iv,Ya,Cv,Ov,Za,Dv,Av,Qa,Pv,Sv,Ka,Lv,kl,ee,en,jv,Mv,sn,Hv,qv,tn,Nv,Fv,on,Rv,Uv,Wv,an,ul,nn,Bv,Vv,zv,vl,Gv,Jv,rn,N1=`<div class="filename">packages/babel-parser/src/parser/statement.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">StatementParser</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ExpressionParser</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">parseStatementContent</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/* ...*/</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// NOTE: we call match to check the current token</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.match</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">tt</span><span style="color: var(--shiki-color-text)">._function)) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.next</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// NOTE: function statement has a higher precendence than a generic statement</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.parseFunction</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">parseFunction</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// NOTE: we call eat to check whether the optional token exists</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.generator </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.eat</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">tt</span><span style="color: var(--shiki-color-text)">.star);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.curry </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.eat</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">tt</span><span style="color: var(--shiki-color-text)">.atat);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.id </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.parseFunctionId</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Xv,yl,$v,Yv,lt,it,ct,Zv,Qv,pt,Kv,ey,ln,ht,sy,ty,oy,ay,ny,cn,fl,ry,ly,iy,bl,cy,py,We,hy,pn,dy,ky,hn,uy,vy,yy,ml,Be,se,bg,fy,by,ai,d,gl,dt,my,gy,xl,xy,wy,wl,Ey,_y,dn,Ty,kt,Iy,Cy,kn,F1=`<div class="filename">babel-plugin-transformation-curry-function.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> customParser </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./custom-parser&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ourBabelPlugin</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">parserOverride</span><span style="color: var(--shiki-color-text)">(code</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> opts) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">customParser</span><span style="color: var(--shiki-token-function)">.parse</span><span style="color: var(--shiki-color-text)">(code</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> opts);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Oy,El,Dy,Ay,un,Py,_l,Sy,Ly,jy,My,Tl,Hy,qy,ue,Ny,ut,Fy,Ry,vn,Uy,Wy,yn,By,Vy,zy,Il,vt,Gy,yt,Jy,Xy,$y,Yy,Zy,ft,Qy,fn,Ky,ef,sf,bn,R1=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">currying</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">numParamsRequired</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fn</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">curryFactory</span><span style="color: var(--shiki-color-text)">(params) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">args) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newParams</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">params</span><span style="color: var(--shiki-token-function)">.concat</span><span style="color: var(--shiki-color-text)">(args);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">newParams</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&gt;=</span><span style="color: var(--shiki-color-text)"> numParamsRequired) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">newParams);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">curryFactory</span><span style="color: var(--shiki-color-text)">(newParams);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">curryFactory</span><span style="color: var(--shiki-color-text)">([]);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,tf,Cl,es,of,bt,af,nf,mt,rf,lf,Ol,cf,pf,mn,U1=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// from</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> @@ </span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">(a</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> b</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> c) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> a </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> b </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> c;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// to</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">foo</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">currying</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">(a</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> b</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> c) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> a </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> b </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> c;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;)</span></span></code></pre>`,hf,Dl,Ve,df,gt,kf,uf,gn,vf,yf,ff,xt,bf,xn,mf,gf,xf,wn,W1=`<div class="filename">babel-plugin-transformation-curry-function.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ourBabelPlugin</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    visitor</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">FunctionDeclaration</span><span style="color: var(--shiki-color-text)">(path) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;curry&#39;</span><span style="color: var(--shiki-color-text)">).node) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-comment)">// const foo = curry(function () &#123; ... &#125;);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.curry </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.replaceWith</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.variableDeclaration</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;const&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.variableDeclarator</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.identifier</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;id.name&#39;</span><span style="color: var(--shiki-color-text)">).node)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">                </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.callExpression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.identifier</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;currying&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">                  </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.toExpression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.node)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">                ])</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">              )</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">            ])</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          );</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,wf,wt,Ef,En,_f,Tf,If,Al,Cf,ni,te,Pl,ze,Of,_n,Df,Af,Pf,Sl,Sf,Lf,ve,jf,Tn,Mf,Hf,Ll,qf,Nf,Et,Ff,Rf,Uf,Ge,Wf,In,Bf,Vf,Cn,zf,Gf,ri,_,jl,ss,Jf,On,Xf,$f,Q,Yf,Dn,Zf,Qf,An,Kf,eb,Pn,sb,tb,Sn,ob,ab,nb,Ln,B1=`<div class="filename">package.json</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&quot;resolutions&quot;</span><span style="color: var(--shiki-color-text)">: &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">&quot;@babel/helpers&quot;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;7.6.0--your-custom-forked-version&quot;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,rb,Ml,ts,Hl,lb,ib,_t,cb,pb,hb,Tt,db,jn,kb,ub,vb,It,yb,Ct,fb,bb,mb,Mn,V1=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">helpers</span><span style="color: var(--shiki-color-text)">.currying </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">helper</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;7.6.0&quot;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  export default function currying(fn) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    const numParamsRequired = fn.length;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    function curryFactory(params) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">      return function (...args) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">        const newParams = params.concat(args);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">        if (newParams.length &gt;= numParamsRequired) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">          return fn(...newParams);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">        &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">        return curryFactory(newParams);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    return curryFactory([]);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`,gb,ye,xb,Hn,wb,Eb,qn,_b,Tb,Nn,Ib,Cb,Ob,Ot,Db,Fn,Ab,Pb,Sb,Rn,z1=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.replaceWith</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.variableDeclaration</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;const&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.variableDeclarator</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.identifier</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-token-function)">.get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;id.name&#39;</span><span style="color: var(--shiki-color-text)">).node)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.callExpression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.addHelper</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;currying&quot;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.toExpression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">path</span><span style="color: var(--shiki-color-text)">.node)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      ])</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    )</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ])</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,Lb,Je,jb,Un,Mb,Hb,Wn,qb,Nb,li,q,ql,Dt,Fb,Rb,fe,Ub,At,Wb,Bn,Bb,Vb,zb,Vn,Gb,Jb,zn,Xb,$b,Yb,Pt,Zb,Gn,Qb,Kb,em,Xe,sm,St,tm,om,Lt,am,nm,rm,jt,lm,Mt,im,cm,pm,hm,ii,W,Nl,Ht,dm,km,Fl,um,vm,Rl,ym,fm,qt,bm,Jn,mm,gm,xm,Nt,wm,Ft,Em,_m,ci,B,Ul,Rt,Tm,Im,Wl,Cm,Om,$e,Ut,Wt,Dm,Am,Bt,Pm,Sm,Xn,Vt,Lm,jm,Mm,zt,Gt,Hm,qm,Jt,Nm,Fm,Bl,Rm,Um,be,Xt,$t,Wm,Bm,Yt,Vm,zm,Zt,Qt,Gm,Jm,Kt,Xm,$m,Vl,eo,Ym,Zm,zl,so,Qm,pi;return C=new I_({props:{data:[{link:"overview",title:"Overview"},{link:"fork-the-babel",title:"Fork the babel",nested:[{link:"crash-course-on-parsing-code-to-ast",title:"Crash Course on Parsing Code to AST"}]},{link:"our-custom-babel-parser",title:"Our custom babel parser",nested:[{link:"a-new-token",title:"A new token: '@@'"},{link:"the-new-parser",title:"The new parser"},{link:"how-parsing-works",title:"How parsing works",nested:[{link:"this-eat-this-match-this-next",title:"this.eat, this.match, this.next"}]}]},{link:"our-babel-plugin",title:"Our babel plugin",nested:[{link:"1-assume-currying-has-been-declared-in-the-global-scope",title:"1. Assume  `currying`  has been declared in the global scope."},{link:"2-use-the-babel-helpers",title:"2. Use the  `@babel/helpers`"}]},{link:"closing-note",title:"Closing Note"},{link:"editor-s-note",title:"Editor's Note"},{link:"further-reading",title:"Further Reading"}]}}),{c(){k1(C.$$.fragment),re=i(),R=a("p"),vs=s("Following my previous post on "),D=a("a"),le=s("writing a custom babel transformation"),ao=s(", today I am going to show you how you can create a custom JavaScript syntax with Babel."),Yl=i(),w=a("section"),dr=a("h2"),ys=a("a"),$i=s("Overview"),Yi=i(),kr=a("p"),Zi=s("Let me show you what we will achieve at the end of this article:"),Qi=i(),no=a("div"),Ki=i(),j=a("p"),ec=s("We are going to create a "),fs=a("a"),sc=s("curry function"),tc=s(" syntax "),ro=a("code"),oc=s("@@"),ac=s(". The syntax is like the "),bs=a("a"),nc=s("generator function"),rc=s(", except you place "),lo=a("code"),lc=s("@@"),ic=s(" instead of "),io=a("code"),cc=s("*"),pc=s(" in between the "),co=a("code"),hc=s("function"),dc=s(" keyword and the function name, eg "),po=a("code"),kc=s("function @@ name(arg1, arg2)"),uc=s("."),vc=i(),ie=a("p"),yc=s("In this example, you can have "),ms=a("a"),fc=s("partial application"),bc=s(" with the function "),ho=a("code"),mc=s("foo"),gc=s(". Calling "),ko=a("code"),xc=s("foo"),wc=s(" with the number of parameters less than the arguments required will return a new function of the remaining arguments:"),Ec=i(),uo=a("div"),_c=i(),ur=a("blockquote"),M=a("p"),Tc=s("The reason I choose "),vo=a("code"),Ic=s("@@"),Cc=s(" is that you can't have "),yo=a("code"),Oc=s("@"),Dc=s(" in a variable name, so "),fo=a("code"),Ac=s("function@@foo(){}"),Pc=s(' is still a valid syntax. And the "operator" '),bo=a("code"),Sc=s("@"),Lc=s(" is used for "),gs=a("a"),jc=s("decorator functions"),Mc=s(" but I wanted to use something entirely new, thus "),mo=a("code"),Hc=s("@@"),qc=s("."),Nc=i(),vr=a("p"),Fc=s("To achieve this, we are going to:"),Rc=i(),xs=a("ul"),yr=a("li"),Uc=s("Fork the babel parser"),Wc=i(),fr=a("li"),Bc=s("Create a custom babel transformation plugin"),Vc=i(),br=a("p"),zc=s("Sounds impossible \u{1F628}?"),Gc=i(),mr=a("p"),Jc=s("Don't worry, I will guide you through every step. Hopefully, at the end of this article, you will be the babel master amongst your peers. \u{1F920}"),Zl=i(),O=a("section"),gr=a("h2"),ws=a("a"),Xc=s("Fork the babel"),$c=i(),Es=a("p"),Yc=s("Head over to "),_s=a("a"),Zc=s("babel's Github repo"),Qc=s(', click the "Fork" button located at the top left of the page.'),Kc=i(),xr=a("p"),Oe=a("span"),go=a("picture"),wr=a("source"),z=a("img"),ep=i(),Er=a("p"),sp=s("If this is your first time forking a popular open-source project, congratulations! \u{1F389}"),tp=i(),Ts=a("p"),op=s("Clone your forked babel to your local workspace and "),Is=a("a"),ap=s("set it up"),np=s(":"),rp=i(),xo=a("div"),lp=i(),_r=a("p"),ip=s("Meanwhile, let me briefly walk you through how the babel repository is organised."),cp=i(),G=a("p"),pp=s("Babel uses a monorepo structure, all the packages, eg: "),wo=a("code"),hp=s("@babel/core"),dp=s(", "),Eo=a("code"),kp=s("@babel/parser"),up=s(", "),_o=a("code"),vp=s("@babel/plugin-transform-react-jsx"),yp=s(", etc are in the "),To=a("code"),fp=s("packages/"),bp=s(" folder:"),mp=i(),Io=a("div"),gp=i(),Tr=a("blockquote"),Ir=a("small"),xp=s("**Trivia:** Babel uses [Makefile](https://opensource.com/article/18/8/what-how-makefile) for automating tasks. For build task, such as `make build`, it will use [Gulp](https://gulpjs.com) as the task runner."),Ql=i(),H=a("section"),Cr=a("h3"),Cs=a("a"),wp=s("Crash Course on Parsing Code to AST"),Ep=i(),De=a("p"),_p=s("Before we proceed, if you are unfamiliar with parsers and Abstract Syntax Tree (AST), I highly recommend to checkout "),Os=a("a"),Tp=s("Vaidehi Joshi"),Ip=s("'s "),Ds=a("a"),Cp=s("Leveling Up One\u2019s Parsing Game With ASTs"),Op=s("."),Dp=i(),Or=a("p"),Ap=s("To summarise, this is what happened when babel is parsing your code:"),Pp=i(),Ae=a("ul"),Qe=a("li"),Sp=s("Your code as a "),Co=a("code"),Lp=s("string"),jp=s(" is a long list of characters: "),Oo=a("code"),Mp=s("f, u, n, c, t, i, o, n, , @, @, f, ..."),Hp=i(),ge=a("li"),qp=s("The first step is called "),Dr=a("strong"),Np=s("tokenization"),Fp=s(", where babel scans through each character and creates "),Ar=a("em"),Rp=s("tokens"),Up=s(", like "),Do=a("code"),Wp=s("function, @@, foo, (, a, ..."),Bp=i(),Pe=a("li"),Vp=s("The tokens then pass through a parser for "),Pr=a("strong"),zp=s("Syntax analysis"),Gp=s(", where babel creates an AST based on "),As=a("a"),Jp=s("JavaScript language specification"),Xp=s("."),$p=i(),Se=a("p"),Yp=s("If you want to learn more in-depth on compilers in general, "),Ps=a("a"),Zp=s("Robert Nystrom"),Qp=s("'s "),Ss=a("a"),Kp=s("Crafting Interpreters"),eh=s(" is a gem."),sh=i(),Sr=a("blockquote"),Lr=a("small"),th=s("Don't get scared of by the word **compiler**, it is nothing but parsing your code and generate XXX out of it. XXX could be machine code, which is the compiler most of us have in mind; XXX could be JavaScript compatible with older browsers, which is the case for Babel."),Kl=i(),h=a("section"),jr=a("h2"),Ls=a("a"),oh=s("Our custom babel parser"),ah=i(),js=a("p"),nh=s("The folder we are going to work on is "),Ao=a("code"),rh=s("packages/babel-parser/"),lh=s(":"),ih=i(),Po=a("div"),ch=i(),F=a("p"),ph=s("We've talked about "),Mr=a("em"),hh=s("tokenization"),dh=s(" and "),Hr=a("em"),kh=s("parsing"),uh=s(", now it's clear where to find the code for each process. "),So=a("code"),vh=s("plugins/"),yh=s(" folder contains plugins that extend the base parser and add custom syntaxes, such as "),Lo=a("code"),fh=s("jsx"),bh=s(" and "),jo=a("code"),mh=s("flow"),gh=s("."),xh=i(),Ms=a("p"),wh=s("Let's do a "),Hs=a("a"),Eh=s("Test-driven development (TDD)"),_h=s('. I find it easier to define the test case then slowly work our way to "fix" it. It is especially true in an unfamiliar codebase, TDD allows you to "easily" point out code places you need to change.'),Th=i(),Mo=a("div"),Ih=i(),Le=a("p"),Ch=s("You can run "),Ho=a("code"),Oh=s('TEST_ONLY=babel-parser TEST_GREP="curry function" make test-only'),Dh=s(" to run tests for "),qo=a("code"),Ah=s("babel-parser"),Ph=s(" and see your failing case:"),Sh=i(),No=a("div"),Lh=i(),qs=a("blockquote"),qr=a("small"),jh=s("If you find scanning through all the test cases takes time, you can directly call `jest` to run the test:"),Mh=i(),Fo=a("div"),Hh=i(),Ns=a("p"),qh=s("Our parser found 2 seemingly innocent "),Ro=a("code"),Nh=s("@"),Fh=s(" tokens at a place where they shouldn't be present."),Rh=i(),Fs=a("p"),Uh=s("How do I know that? Let's start the watch mode, "),Uo=a("code"),Wh=s("make watch"),Bh=s(", wear our detective cap \u{1F575}\uFE0F\u200D and start digging!"),Vh=i(),je=a("p"),zh=s("Tracing the stack trace, led us to "),Rs=a("a"),Wo=a("code"),Gh=s("packages/babel-parser/src/parser/expression.js"),Jh=s(" where it throws "),Bo=a("code"),Xh=s("this.unexpected()"),$h=s("."),Yh=i(),Us=a("p"),Zh=s("Let us add some "),Vo=a("code"),Qh=s("console.log"),Kh=s(":"),ed=i(),zo=a("div"),sd=i(),Ws=a("p"),td=s("As you can see, both tokens are "),Go=a("code"),od=s("@"),ad=s(" token:"),nd=i(),Jo=a("div"),rd=i(),Me=a("p"),ld=s("How do I know "),Xo=a("code"),id=s("this.state.type"),cd=s(" and "),$o=a("code"),pd=s("this.lookahead().type"),hd=s(" will give me the current and the next token?"),dd=i(),Bs=a("p"),kd=s("Well, I'll explained them "),Yo=a("a"),ud=s("later"),vd=s("."),yd=i(),Nr=a("p"),fd=s("Let's recap what we've done so far before we move on:"),bd=i(),ce=a("ul"),Zo=a("li"),md=s("We've written a test case for "),Qo=a("code"),gd=s("babel-parser"),xd=i(),Vs=a("li"),wd=s("We ran "),Ko=a("code"),Ed=s("make test-only"),_d=s(" to run the test case"),Td=i(),ea=a("li"),Id=s("We've started the watch mode via "),sa=a("code"),Cd=s("make watch"),Od=i(),ta=a("li"),Dd=s("We've learned about parser state, and console out the current token type, "),oa=a("code"),Ad=s("this.state.type"),Pd=i(),Fr=a("p"),Sd=s("Here's what we are going to do next:"),Ld=i(),He=a("p"),jd=s("If there's 2 consecutive "),aa=a("code"),Md=s("@"),Hd=s(", it should not be separate tokens, it should be a "),na=a("code"),qd=s("@@"),Nd=s(" token, the new token we just defined for our curry function"),ei=i(),E=a("section"),Rr=a("h3"),zs=a("a"),Fd=s("A new token: '@@'"),Rd=i(),Gs=a("p"),Ud=s("Let's first look at where a token type is defined: "),Js=a("a"),Wd=s("packages/babel-parser/src/tokenizer/types.js"),Bd=s("."),Vd=i(),Ur=a("p"),zd=s("Here you see a list of tokens, so let's add our new token definition in as well:"),Gd=i(),ra=a("div"),Jd=i(),K=a("p"),Xd=s("Next, let's find out where the token gets created during "),Wr=a("em"),$d=s("tokenization"),Yd=s(". A quick search on "),la=a("code"),Zd=s("tt.at"),Qd=s(" within "),ia=a("code"),Kd=s("babel-parser/src/tokenizer"),ek=s(" lead us to "),Xs=a("a"),sk=s("packages/babel-parser/src/tokenizer/index.js"),tk=i(),Br=a("blockquote"),Vr=a("small"),ok=s("Well, token types are import as `tt` throughout the babel-parser."),ak=i(),J=a("p"),nk=s("Let's create the token "),ca=a("code"),rk=s("tt.atat"),lk=s(" instead of "),pa=a("code"),ik=s("tt.at"),ck=s(" if there's another "),ha=a("code"),pk=s("@"),hk=s(" succeed the current "),da=a("code"),dk=s("@"),kk=s(":"),uk=i(),ka=a("div"),vk=i(),zr=a("p"),yk=s("If you run the test again, you will see that the current token and the next token has changed:"),fk=i(),ua=a("div"),bk=i(),va=a("p"),mk=s("Yeah! It looks good and lets move on. "),$s=a("span"),gk=s("\u{1F3C3}\u200D"),si=i(),b=a("section"),Gr=a("h3"),Ys=a("a"),xk=s("The new parser"),wk=i(),Zs=a("p"),Ek=s("Before we move on, let's inspect how "),Qs=a("a"),_k=s("generator functions are represented in AST"),Tk=s(":"),Ik=i(),Jr=a("p"),qe=a("span"),ya=a("picture"),Xr=a("source"),X=a("img"),Ck=i(),Ne=a("p"),Ok=s("As you can see, a generator function is represented by the "),fa=a("code"),Dk=s("generator: true"),Ak=s(" attribute of a "),ba=a("code"),Pk=s("FunctionDeclaration"),Sk=s("."),Lk=i(),Fe=a("p"),jk=s("Similarly, we can add a "),ma=a("code"),Mk=s("curry: true"),Hk=s(" attribute of the "),ga=a("code"),qk=s("FunctionDeclaration"),Nk=s(" too if it is a curry function:"),Fk=i(),$r=a("p"),Re=a("span"),xa=a("picture"),Yr=a("source"),$=a("img"),Rk=i(),Zr=a("p"),Uk=s("We have a plan now, let's implement it."),Wk=i(),Y=a("p"),Bk=s("A quick search on "),Qr=a("em"),Vk=s('"FunctionDeclaration"'),zk=s(" leads us to a function called "),wa=a("code"),Gk=s("parseFunction"),Jk=s(" in "),Ks=a("a"),Xk=s("packages/babel-parser/src/parser/statement.js"),$k=s(", and here we find a line that sets the "),Ea=a("code"),Yk=s("generator"),Zk=s(" attribute, let's add one more line:"),Qk=i(),_a=a("div"),Kk=i(),Kr=a("p"),eu=s("If you run the test again, you will be amazed that it passed!"),su=i(),Ta=a("div"),tu=i(),el=a("p"),ou=s("That's it? How did we miraculously fix it?"),au=i(),sl=a("p"),nu=s("I am going to briefly explain how parsing works, and in the process hopefully, you understood what that one-liner change did."),ti=i(),f=a("section"),tl=a("h3"),et=a("a"),ru=s("How parsing works"),lu=i(),st=a("p"),iu=s("With the list of tokens from the "),ol=a("em"),cu=s("tokenizer"),pu=s(", the parser consumes the token one by one and constructs the AST. The parser uses the language grammar specification to decide how to use the tokens, which token to expect next."),hu=i(),al=a("p"),du=s("The grammar specification looks something like this:"),ku=i(),Ia=a("div"),uu=i(),tt=a("p"),vu=s("It explains the precedence of each expressions/statements. For example, an "),Ca=a("code"),yu=s("AdditiveExpression"),fu=s(" is made up of either:"),bu=i(),Ue=a("ul"),ot=a("li"),mu=s("a "),Oa=a("code"),gu=s("MultiplicativeExpression"),xu=s(", or"),wu=i(),pe=a("li"),Eu=s("an "),Da=a("code"),_u=s("AdditiveExpression"),Tu=s(" followed by "),Aa=a("code"),Iu=s("+"),Cu=s(" operator token followed by "),Pa=a("code"),Ou=s("MultiplicativeExpression"),Du=s(", or"),Au=i(),he=a("li"),Pu=s("an "),Sa=a("code"),Su=s("AdditiveExpression"),Lu=s(" followed by "),La=a("code"),ju=s("-"),Mu=s(" operator token followed by "),ja=a("code"),Hu=s("MultiplicativeExpression"),qu=s("."),Nu=i(),at=a("p"),Fu=s("So if you have an expression "),Ma=a("code"),Ru=s("1 + 2 * 3"),Uu=s(", it will be like:"),Wu=i(),Ha=a("div"),Bu=i(),nl=a("p"),Vu=s("instead of"),zu=i(),qa=a("div"),Gu=i(),rl=a("p"),Ju=s("With these rules, we translate them into parser code:"),Xu=i(),Na=a("div"),$u=i(),ll=a("p"),il=a("em"),Yu=s("This is a made-up code that oversimplifies what babel have, but I hope you get the gist of it."),Zu=i(),Z=a("p"),Qu=s("As you can see here, the parser is recursively in nature, and it goes from the lowest precedence to the highest precedence expressions/statements. Eg: "),Fa=a("code"),Ku=s("parseAdditiveExpression"),ev=s(" calls "),Ra=a("code"),sv=s("parseMultiplicativeExpression"),tv=s(", which in turn calls "),Ua=a("code"),ov=s("parseExponentiationExpression"),av=s(", which in turn calls ... . This recursive process is called the "),nt=a("a"),nv=s("Recursive Descent Parsing"),rv=s("."),oi=i(),m=a("section"),cl=a("h4"),rt=a("a"),lv=s("this.eat, this.match, this.next"),iv=i(),de=a("p"),cv=s("If you have noticed, in my examples above, I used some utility function, such as "),Wa=a("code"),pv=s("this.eat"),hv=s(", "),Ba=a("code"),dv=s("this.match"),kv=s(", "),Va=a("code"),uv=s("this.next"),vv=s(", etc. These are babel parser's internal functions, yet they are quite ubiquitous amongst parsers as well:"),yv=i(),ke=a("ul"),Ke=a("li"),pl=a("strong"),za=a("code"),fv=s("this.match"),bv=s(" returns a "),Ga=a("code"),mv=s("boolean"),gv=s(" indicating whether the current token matches the condition"),xv=i(),Ja=a("li"),hl=a("strong"),Xa=a("code"),wv=s("this.next"),Ev=s(" moves the token list forward to point to the next token"),_v=i(),U=a("li"),dl=a("strong"),$a=a("code"),Tv=s("this.eat"),Iv=s(" return what "),Ya=a("code"),Cv=s("this.match"),Ov=s(" returns and if "),Za=a("code"),Dv=s("this.match"),Av=s(" returns "),Qa=a("code"),Pv=s("true"),Sv=s(", will do "),Ka=a("code"),Lv=s("this.next"),kl=a("ul"),ee=a("li"),en=a("code"),jv=s("this.eat"),Mv=s(" is commonly used for optional operators, like "),sn=a("code"),Hv=s("*"),qv=s(" in generator function, "),tn=a("code"),Nv=s(";"),Fv=s(" at the end of statements, and "),on=a("code"),Rv=s("?"),Uv=s(" in typescript types."),Wv=i(),an=a("li"),ul=a("strong"),nn=a("code"),Bv=s("this.lookahead"),Vv=s(" get the next token without moving forward to make a decision on the current node"),zv=i(),vl=a("p"),Gv=s("If you take a look again the parser code we just changed, it's easier to read it in now."),Jv=i(),rn=a("div"),Xv=i(),yl=a("p"),$v=s("I know I didn't do a good job explaining how a parser works. Here are some resources that I learned from, and I highly recommend them:"),Yv=i(),lt=a("ul"),it=a("li"),ct=a("a"),Zv=s("Crafting Interpreters"),Qv=s(" by "),pt=a("a"),Kv=s("Robert Nystrom"),ey=i(),ln=a("li"),ht=a("a"),sy=s('Free Udacity course: "Compilers: Theory and Practice"'),ty=s(", offered by Georgia Tech"),oy=i(),ay=a("hr"),ny=i(),cn=a("p"),fl=a("strong"),ry=s("Side Note"),ly=s(': You might be curious how am I able to visualize the custom syntax in the Babel AST Explorer, where I showed you the new "curry" attribute in the AST.'),iy=i(),bl=a("p"),cy=s("That's because I've added a new feature in the Babel AST Explorer where you can upload your custom parser!"),py=i(),We=a("p"),hy=s("If you go to "),pn=a("code"),dy=s("packages/babel-parser/lib"),ky=s(", you would find the compiled version of your parser and the source map. Open the drawer of the Babel AST Explorer, you will see a button to upload a custom parser. Drag the "),hn=a("code"),uy=s("packages/babel-parser/lib/index.js"),vy=s(" in and you will be visualizing the AST generated via your custom parser!"),yy=i(),ml=a("p"),Be=a("span"),se=a("img"),fy=i(),by=a("hr"),ai=i(),d=a("section"),gl=a("h2"),dt=a("a"),my=s("Our babel plugin"),gy=i(),xl=a("p"),xy=s("With our custom babel parser done, let's move on to write our babel plugin."),wy=i(),wl=a("p"),Ey=s("But maybe before that, you may have some doubts on how are we going to use our custom babel parser, especially with whatever build stack we are using right now?"),_y=i(),dn=a("p"),Ty=s("Well, fret not. A babel plugin can provide a custom parser, which is "),kt=a("a"),Iy=s("documented on the babel website"),Cy=i(),kn=a("div"),Oy=i(),El=a("p"),Dy=s("Since we forked out the babel parser, all existing babel parser options or built-in plugins will still work perfectly."),Ay=i(),un=a("p"),Py=s("With this doubt out of the way, let see how we can make our curry function curryable? "),_l=a("em"),Sy=s("(not entirely sure there's such word)"),Ly=i(),jy=a("hr"),My=i(),Tl=a("p"),Hy=s("Before we start, if you have eagerly tried to add our plugin into your build system, you would notice that the curry function gets compiled to a normal function."),qy=i(),ue=a("p"),Ny=s("This is because, after parsing + transformation, babel will use "),ut=a("a"),Fy=s("@babel/generator"),Ry=s(" to generate code from the transformed AST. Since the "),vn=a("code"),Uy=s("@babel/generator"),Wy=s(" has no idea about the new "),yn=a("code"),By=s("curry"),Vy=s(" attribute we added, it will be omitted."),zy=i(),Il=a("blockquote"),vt=a("p"),Gy=s("If one day curry function becomes the new JavaScript syntax, you may want to make a pull request to add one more line "),yt=a("a"),Jy=s("here"),Xy=s("!"),$y=i(),Yy=a("hr"),Zy=i(),ft=a("p"),Qy=s("Ok, to make our function curryable, we can wrap it with a "),fn=a("code"),Ky=s("currying"),ef=s(" helper higher-order function:"),sf=i(),bn=a("div"),tf=i(),Cl=a("blockquote"),es=a("p"),of=s("If you want to learn how to write a currying function, you can read this "),bt=a("a"),af=s("Currying in JS"),nf=s(" by "),mt=a("a"),rf=s("Shirsh Zibbu"),lf=i(),Ol=a("p"),cf=s("So when we transform our curry function, we can transform it into the following:"),pf=i(),mn=a("div"),hf=i(),Dl=a("blockquote"),Ve=a("p"),df=s("Let's first ignore "),gt=a("a"),kf=s("function hoisting"),uf=s(" in JavaScript, where you can call "),gn=a("code"),vf=s("foo"),yf=s(" before it is defined."),ff=i(),xt=a("p"),bf=s("If you have read my "),xn=a("a"),mf=s("step-by-step guide on babel transformation"),gf=s(", writing this transformation should be manageable:"),xf=i(),wn=a("div"),wf=i(),wt=a("p"),Ef=s("The question is how do we provide the "),En=a("code"),_f=s("currying"),Tf=s(" function?"),If=i(),Al=a("p"),Cf=s("There are 2 ways:"),ni=i(),te=a("section"),Pl=a("h3"),ze=a("a"),Of=s("1. Assume "),_n=a("code"),Df=s("currying"),Af=s(" has been declared in the global scope."),Pf=i(),Sl=a("p"),Sf=s("Basically, your job is done here."),Lf=i(),ve=a("p"),jf=s("If "),Tn=a("code"),Mf=s("currying"),Hf=s(" is not defined, then when executing the compiled code, the runtime will scream out "),Ll=a("em"),qf=s('"currying is not defined"'),Nf=s(", just like the "),Et=a("a"),Ff=s('"regeneratorRuntime is not defined"'),Rf=s("."),Uf=i(),Ge=a("p"),Wf=s("So probably you have to educate the users to install "),In=a("code"),Bf=s("currying"),Vf=s(" polyfills in order to use your "),Cn=a("code"),zf=s("babel-plugin-transformation-curry-function"),Gf=s("."),ri=i(),_=a("section"),jl=a("h3"),ss=a("a"),Jf=s("2. Use the "),On=a("code"),Xf=s("@babel/helpers"),$f=i(),Q=a("p"),Yf=s("You can add a new helper to "),Dn=a("code"),Zf=s("@babel/helpers"),Qf=s(", which of course you are unlikely to merge that into the official "),An=a("code"),Kf=s("@babel/helpers"),eb=s(", so you would have to figure a way to make "),Pn=a("code"),sb=s("@babel/core"),tb=s(" to resolve to your "),Sn=a("code"),ob=s("@babel/helpers"),ab=s(":"),nb=i(),Ln=a("div"),rb=i(),Ml=a("p"),ts=a("em"),Hl=a("strong"),lb=s("Disclaimer:"),ib=s(" I have not personally tried this, but I believe it will work. If you encountered problems trying this, "),_t=a("a"),cb=s("DM me"),pb=s(", I am very happy to discuss it with you."),hb=i(),Tt=a("p"),db=s("Adding a new helper function into "),jn=a("code"),kb=s("@babel/helpers"),ub=s(" is very easy."),vb=i(),It=a("p"),yb=s("Head over to "),Ct=a("a"),fb=s("packages/babel-helpers/src/helpers.js"),bb=s(" and add a new entry:"),mb=i(),Mn=a("div"),gb=i(),ye=a("p"),xb=s("The helper tag function specifies the "),Hn=a("code"),wb=s("@babel/core"),Eb=s(" version required. The trick here is to "),qn=a("code"),_b=s("export default"),Tb=s(" the "),Nn=a("code"),Ib=s("currying"),Cb=s(" function."),Ob=i(),Ot=a("p"),Db=s("To use the helper, just call the "),Fn=a("code"),Ab=s("this.addHelper()"),Pb=s(":"),Sb=i(),Rn=a("div"),Lb=i(),Je=a("p"),jb=s("The "),Un=a("code"),Mb=s("this.addHelper"),Hb=s(" will inject the helper at the top of the file if needed, and returns an "),Wn=a("code"),qb=s("Identifier"),Nb=s(" to the injected function."),li=i(),q=a("section"),ql=a("h2"),Dt=a("a"),Fb=s("Closing Note"),Rb=i(),fe=a("p"),Ub=s("We've seen how we can modify the babel parser function, write our own babel transform plugin "),At=a("em"),Wb=s("(which was brief mainly because I have "),Bn=a("a"),Bb=s("a detailed cover in my previous post"),Vb=s(")"),zb=s(", a brief touch on "),Vn=a("code"),Gb=s("@babel/generator"),Jb=s(" and also how we can add helper functions via "),zn=a("code"),Xb=s("@babel/helpers"),$b=s("."),Yb=i(),Pt=a("p"),Zb=s("Along the way, we had a crash course on how a parser works, which I will provide the links to "),Gn=a("a"),Qb=s("further reading"),Kb=s(" at the bottom."),em=i(),Xe=a("p"),sm=s("The steps we've gone through above is similar to part of the "),St=a("a"),tm=s("TC39 proposal"),om=i(),Lt=a("a"),am=s("process"),nm=s(" when defining a new JavaScript specification. When proposing a new specification, the champion of the proposal usually write polyfills or forked out babel to write proof-of-concept demos. As you've seen, forking a parser or writing polyfills is not the hardest part of the process, but to define the problem space, plan and think through the use cases and edge cases, and gather opinions and suggestions from the community. To this end, I am grateful to the proposal champion, for their effort in pushing the JavaScript language forward."),rm=i(),jt=a("p"),lm=s("Finally, if you want to see the code we've done so far in a full picture, you can "),Mt=a("a"),im=s("check it out from Github"),cm=s("."),pm=i(),hm=a("hr"),ii=i(),W=a("section"),Nl=a("h2"),Ht=a("a"),dm=s("Editor's Note"),km=i(),Fl=a("p"),um=s("I've worked on the babel repository for a while, yet I've never added a new syntax to the babel parser before. Most of my contributions were just fixing bugs and specs compliance feature."),vm=i(),Rl=a("p"),ym=s("Yet this idea of creating a new syntax has been in my mind for a while. So I took the chance of writing a blog to try it out. It is an exhilarating experience to see it work as expected."),fm=i(),qt=a("p"),bm=s("Having the ability to manipulate the syntax of the language you are writing is invigorating. It empowers us the possibility of writing less code or more straightforward code and shifts that complexity to compile time. Just as how "),Jn=a("code"),mm=s("async-await"),gm=s(" solves the callback hell and promise-chaining hell."),xm=i(),Nt=a("p"),wm=s("If this article inspires you to some great idea, and you wish to discuss it with somebody, you are always more than welcome to reach out to me through "),Ft=a("a"),Em=s("Twitter"),_m=s("."),ci=i(),B=a("section"),Ul=a("h2"),Rt=a("a"),Tm=s("Further Reading"),Im=i(),Wl=a("p"),Cm=s("About compilers:"),Om=i(),$e=a("ul"),Ut=a("li"),Wt=a("a"),Dm=s("Crafting Interpreters"),Am=s(" by "),Bt=a("a"),Pm=s("Robert Nystrom"),Sm=i(),Xn=a("li"),Vt=a("a"),Lm=s('Free Udacity course: "Compilers: Theory and Practice"'),jm=s(", offered by Georgia Tech"),Mm=i(),zt=a("li"),Gt=a("a"),Hm=s("Leveling Up One\u2019s Parsing Game With ASTs"),qm=s(" by "),Jt=a("a"),Nm=s("Vaidehi Joshi"),Fm=i(),Bl=a("p"),Rm=s("Misc:"),Um=i(),be=a("ul"),Xt=a("li"),$t=a("a"),Wm=s("Understanding hoisting in JavaScript"),Bm=s(" by "),Yt=a("a"),Vm=s("Mabishi Wakio"),zm=i(),Zt=a("li"),Qt=a("a"),Gm=s("Currying in JS"),Jm=s(" by "),Kt=a("a"),Xm=s("Shirsh Zibbu"),$m=i(),Vl=a("li"),eo=a("a"),Ym=s("TC39 Proposals"),Zm=i(),zl=a("li"),so=a("a"),Qm=s("TC39 Process Document"),this.h()},l(p){u1(C.$$.fragment,p),re=c(p),R=n(p,"P",{});var v=r(R);vs=t(v,"Following my previous post on "),D=n(v,"A",{href:!0});var mg=r(D);le=t(mg,"writing a custom babel transformation"),mg.forEach(o),ao=t(v,", today I am going to show you how you can create a custom JavaScript syntax with Babel."),v.forEach(o),Yl=c(p),w=n(p,"SECTION",{});var A=r(w);dr=n(A,"H2",{});var gg=r(dr);ys=n(gg,"A",{href:!0,id:!0});var xg=r(ys);$i=t(xg,"Overview"),xg.forEach(o),gg.forEach(o),Yi=c(A),kr=n(A,"P",{});var wg=r(kr);Zi=t(wg,"Let me show you what we will achieve at the end of this article:"),wg.forEach(o),Qi=c(A),no=n(A,"DIV",{class:!0});var G1=r(no);G1.forEach(o),Ki=c(A),j=n(A,"P",{});var N=r(j);ec=t(N,"We are going to create a "),fs=n(N,"A",{href:!0,rel:!0});var Eg=r(fs);sc=t(Eg,"curry function"),Eg.forEach(o),tc=t(N," syntax "),ro=n(N,"CODE",{class:!0});var _g=r(ro);oc=t(_g,"@@"),_g.forEach(o),ac=t(N,". The syntax is like the "),bs=n(N,"A",{href:!0,rel:!0});var Tg=r(bs);nc=t(Tg,"generator function"),Tg.forEach(o),rc=t(N,", except you place "),lo=n(N,"CODE",{class:!0});var Ig=r(lo);lc=t(Ig,"@@"),Ig.forEach(o),ic=t(N," instead of "),io=n(N,"CODE",{class:!0});var Cg=r(io);cc=t(Cg,"*"),Cg.forEach(o),pc=t(N," in between the "),co=n(N,"CODE",{class:!0});var Og=r(co);hc=t(Og,"function"),Og.forEach(o),dc=t(N," keyword and the function name, eg "),po=n(N,"CODE",{class:!0});var Dg=r(po);kc=t(Dg,"function @@ name(arg1, arg2)"),Dg.forEach(o),uc=t(N,"."),N.forEach(o),vc=c(A),ie=n(A,"P",{});var os=r(ie);yc=t(os,"In this example, you can have "),ms=n(os,"A",{href:!0,rel:!0});var Ag=r(ms);fc=t(Ag,"partial application"),Ag.forEach(o),bc=t(os," with the function "),ho=n(os,"CODE",{class:!0});var Pg=r(ho);mc=t(Pg,"foo"),Pg.forEach(o),gc=t(os,". Calling "),ko=n(os,"CODE",{class:!0});var Sg=r(ko);xc=t(Sg,"foo"),Sg.forEach(o),wc=t(os," with the number of parameters less than the arguments required will return a new function of the remaining arguments:"),os.forEach(o),Ec=c(A),uo=n(A,"DIV",{class:!0});var J1=r(uo);J1.forEach(o),_c=c(A),ur=n(A,"BLOCKQUOTE",{});var Lg=r(ur);M=n(Lg,"P",{});var V=r(M);Tc=t(V,"The reason I choose "),vo=n(V,"CODE",{class:!0});var jg=r(vo);Ic=t(jg,"@@"),jg.forEach(o),Cc=t(V," is that you can't have "),yo=n(V,"CODE",{class:!0});var Mg=r(yo);Oc=t(Mg,"@"),Mg.forEach(o),Dc=t(V," in a variable name, so "),fo=n(V,"CODE",{class:!0});var Hg=r(fo);Ac=t(Hg,"function@@foo(){}"),Hg.forEach(o),Pc=t(V,' is still a valid syntax. And the "operator" '),bo=n(V,"CODE",{class:!0});var qg=r(bo);Sc=t(qg,"@"),qg.forEach(o),Lc=t(V," is used for "),gs=n(V,"A",{href:!0,rel:!0});var Ng=r(gs);jc=t(Ng,"decorator functions"),Ng.forEach(o),Mc=t(V," but I wanted to use something entirely new, thus "),mo=n(V,"CODE",{class:!0});var Fg=r(mo);Hc=t(Fg,"@@"),Fg.forEach(o),qc=t(V,"."),V.forEach(o),Lg.forEach(o),Nc=c(A),vr=n(A,"P",{});var Rg=r(vr);Fc=t(Rg,"To achieve this, we are going to:"),Rg.forEach(o),Rc=c(A),xs=n(A,"UL",{});var hi=r(xs);yr=n(hi,"LI",{});var Ug=r(yr);Uc=t(Ug,"Fork the babel parser"),Ug.forEach(o),Wc=c(hi),fr=n(hi,"LI",{});var Wg=r(fr);Bc=t(Wg,"Create a custom babel transformation plugin"),Wg.forEach(o),hi.forEach(o),Vc=c(A),br=n(A,"P",{});var Bg=r(br);zc=t(Bg,"Sounds impossible \u{1F628}?"),Bg.forEach(o),Gc=c(A),mr=n(A,"P",{});var Vg=r(mr);Jc=t(Vg,"Don't worry, I will guide you through every step. Hopefully, at the end of this article, you will be the babel master amongst your peers. \u{1F920}"),Vg.forEach(o),A.forEach(o),Zl=c(p),O=n(p,"SECTION",{});var L=r(O);gr=n(L,"H2",{});var zg=r(gr);ws=n(zg,"A",{href:!0,id:!0});var Gg=r(ws);Xc=t(Gg,"Fork the babel"),Gg.forEach(o),zg.forEach(o),$c=c(L),Es=n(L,"P",{});var di=r(Es);Yc=t(di,"Head over to "),_s=n(di,"A",{href:!0,rel:!0});var Jg=r(_s);Zc=t(Jg,"babel's Github repo"),Jg.forEach(o),Qc=t(di,', click the "Fork" button located at the top left of the page.'),di.forEach(o),Kc=c(L),xr=n(L,"P",{});var Xg=r(xr);Oe=n(Xg,"SPAN",{style:!0});var $g=r(Oe);go=n($g,"PICTURE",{});var Km=r(go);wr=n(Km,"SOURCE",{type:!0,srcset:!0}),z=n(Km,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0,title:!0}),Km.forEach(o),$g.forEach(o),Xg.forEach(o),ep=c(L),Er=n(L,"P",{});var Yg=r(Er);sp=t(Yg,"If this is your first time forking a popular open-source project, congratulations! \u{1F389}"),Yg.forEach(o),tp=c(L),Ts=n(L,"P",{});var ki=r(Ts);op=t(ki,"Clone your forked babel to your local workspace and "),Is=n(ki,"A",{href:!0,rel:!0});var Zg=r(Is);ap=t(Zg,"set it up"),Zg.forEach(o),np=t(ki,":"),ki.forEach(o),rp=c(L),xo=n(L,"DIV",{class:!0});var X1=r(xo);X1.forEach(o),lp=c(L),_r=n(L,"P",{});var Qg=r(_r);ip=t(Qg,"Meanwhile, let me briefly walk you through how the babel repository is organised."),Qg.forEach(o),cp=c(L),G=n(L,"P",{});var xe=r(G);pp=t(xe,"Babel uses a monorepo structure, all the packages, eg: "),wo=n(xe,"CODE",{class:!0});var Kg=r(wo);hp=t(Kg,"@babel/core"),Kg.forEach(o),dp=t(xe,", "),Eo=n(xe,"CODE",{class:!0});var ex=r(Eo);kp=t(ex,"@babel/parser"),ex.forEach(o),up=t(xe,", "),_o=n(xe,"CODE",{class:!0});var sx=r(_o);vp=t(sx,"@babel/plugin-transform-react-jsx"),sx.forEach(o),yp=t(xe,", etc are in the "),To=n(xe,"CODE",{class:!0});var tx=r(To);fp=t(tx,"packages/"),tx.forEach(o),bp=t(xe," folder:"),xe.forEach(o),mp=c(L),Io=n(L,"DIV",{class:!0});var $1=r(Io);$1.forEach(o),gp=c(L),Tr=n(L,"BLOCKQUOTE",{});var ox=r(Tr);Ir=n(ox,"SMALL",{});var ax=r(Ir);xp=t(ax,"**Trivia:** Babel uses [Makefile](https://opensource.com/article/18/8/what-how-makefile) for automating tasks. For build task, such as `make build`, it will use [Gulp](https://gulpjs.com) as the task runner."),ax.forEach(o),ox.forEach(o),L.forEach(o),Ql=c(p),H=n(p,"SECTION",{});var oe=r(H);Cr=n(oe,"H3",{});var nx=r(Cr);Cs=n(nx,"A",{href:!0,id:!0});var rx=r(Cs);wp=t(rx,"Crash Course on Parsing Code to AST"),rx.forEach(o),nx.forEach(o),Ep=c(oe),De=n(oe,"P",{});var $n=r(De);_p=t($n,"Before we proceed, if you are unfamiliar with parsers and Abstract Syntax Tree (AST), I highly recommend to checkout "),Os=n($n,"A",{href:!0,rel:!0});var lx=r(Os);Tp=t(lx,"Vaidehi Joshi"),lx.forEach(o),Ip=t($n,"'s "),Ds=n($n,"A",{href:!0,rel:!0});var ix=r(Ds);Cp=t(ix,"Leveling Up One\u2019s Parsing Game With ASTs"),ix.forEach(o),Op=t($n,"."),$n.forEach(o),Dp=c(oe),Or=n(oe,"P",{});var cx=r(Or);Ap=t(cx,"To summarise, this is what happened when babel is parsing your code:"),cx.forEach(o),Pp=c(oe),Ae=n(oe,"UL",{});var Yn=r(Ae);Qe=n(Yn,"LI",{});var Gl=r(Qe);Sp=t(Gl,"Your code as a "),Co=n(Gl,"CODE",{class:!0});var px=r(Co);Lp=t(px,"string"),px.forEach(o),jp=t(Gl," is a long list of characters: "),Oo=n(Gl,"CODE",{class:!0});var hx=r(Oo);Mp=t(hx,"f, u, n, c, t, i, o, n, , @, @, f, ..."),hx.forEach(o),Gl.forEach(o),Hp=c(Yn),ge=n(Yn,"LI",{});var to=r(ge);qp=t(to,"The first step is called "),Dr=n(to,"STRONG",{});var dx=r(Dr);Np=t(dx,"tokenization"),dx.forEach(o),Fp=t(to,", where babel scans through each character and creates "),Ar=n(to,"EM",{});var kx=r(Ar);Rp=t(kx,"tokens"),kx.forEach(o),Up=t(to,", like "),Do=n(to,"CODE",{class:!0});var ux=r(Do);Wp=t(ux,"function, @@, foo, (, a, ..."),ux.forEach(o),to.forEach(o),Bp=c(Yn),Pe=n(Yn,"LI",{});var Zn=r(Pe);Vp=t(Zn,"The tokens then pass through a parser for "),Pr=n(Zn,"STRONG",{});var vx=r(Pr);zp=t(vx,"Syntax analysis"),vx.forEach(o),Gp=t(Zn,", where babel creates an AST based on "),As=n(Zn,"A",{href:!0,rel:!0});var yx=r(As);Jp=t(yx,"JavaScript language specification"),yx.forEach(o),Xp=t(Zn,"."),Zn.forEach(o),Yn.forEach(o),$p=c(oe),Se=n(oe,"P",{});var Qn=r(Se);Yp=t(Qn,"If you want to learn more in-depth on compilers in general, "),Ps=n(Qn,"A",{href:!0,rel:!0});var fx=r(Ps);Zp=t(fx,"Robert Nystrom"),fx.forEach(o),Qp=t(Qn,"'s "),Ss=n(Qn,"A",{href:!0,rel:!0});var bx=r(Ss);Kp=t(bx,"Crafting Interpreters"),bx.forEach(o),eh=t(Qn," is a gem."),Qn.forEach(o),sh=c(oe),Sr=n(oe,"BLOCKQUOTE",{});var mx=r(Sr);Lr=n(mx,"SMALL",{});var gx=r(Lr);th=t(gx,"Don't get scared of by the word **compiler**, it is nothing but parsing your code and generate XXX out of it. XXX could be machine code, which is the compiler most of us have in mind; XXX could be JavaScript compatible with older browsers, which is the case for Babel."),gx.forEach(o),mx.forEach(o),oe.forEach(o),Kl=c(p),h=n(p,"SECTION",{});var k=r(h);jr=n(k,"H2",{});var xx=r(jr);Ls=n(xx,"A",{href:!0,id:!0});var wx=r(Ls);oh=t(wx,"Our custom babel parser"),wx.forEach(o),xx.forEach(o),ah=c(k),js=n(k,"P",{});var ui=r(js);nh=t(ui,"The folder we are going to work on is "),Ao=n(ui,"CODE",{class:!0});var Ex=r(Ao);rh=t(Ex,"packages/babel-parser/"),Ex.forEach(o),lh=t(ui,":"),ui.forEach(o),ih=c(k),Po=n(k,"DIV",{class:!0});var Y1=r(Po);Y1.forEach(o),ch=c(k),F=n(k,"P",{});var ae=r(F);ph=t(ae,"We've talked about "),Mr=n(ae,"EM",{});var _x=r(Mr);hh=t(_x,"tokenization"),_x.forEach(o),dh=t(ae," and "),Hr=n(ae,"EM",{});var Tx=r(Hr);kh=t(Tx,"parsing"),Tx.forEach(o),uh=t(ae,", now it's clear where to find the code for each process. "),So=n(ae,"CODE",{class:!0});var Ix=r(So);vh=t(Ix,"plugins/"),Ix.forEach(o),yh=t(ae," folder contains plugins that extend the base parser and add custom syntaxes, such as "),Lo=n(ae,"CODE",{class:!0});var Cx=r(Lo);fh=t(Cx,"jsx"),Cx.forEach(o),bh=t(ae," and "),jo=n(ae,"CODE",{class:!0});var Ox=r(jo);mh=t(Ox,"flow"),Ox.forEach(o),gh=t(ae,"."),ae.forEach(o),xh=c(k),Ms=n(k,"P",{});var vi=r(Ms);wh=t(vi,"Let's do a "),Hs=n(vi,"A",{href:!0,rel:!0});var Dx=r(Hs);Eh=t(Dx,"Test-driven development (TDD)"),Dx.forEach(o),_h=t(vi,'. I find it easier to define the test case then slowly work our way to "fix" it. It is especially true in an unfamiliar codebase, TDD allows you to "easily" point out code places you need to change.'),vi.forEach(o),Th=c(k),Mo=n(k,"DIV",{class:!0});var Z1=r(Mo);Z1.forEach(o),Ih=c(k),Le=n(k,"P",{});var Kn=r(Le);Ch=t(Kn,"You can run "),Ho=n(Kn,"CODE",{class:!0});var Ax=r(Ho);Oh=t(Ax,'TEST_ONLY=babel-parser TEST_GREP="curry function" make test-only'),Ax.forEach(o),Dh=t(Kn," to run tests for "),qo=n(Kn,"CODE",{class:!0});var Px=r(qo);Ah=t(Px,"babel-parser"),Px.forEach(o),Ph=t(Kn," and see your failing case:"),Kn.forEach(o),Sh=c(k),No=n(k,"DIV",{class:!0});var Q1=r(No);Q1.forEach(o),Lh=c(k),qs=n(k,"BLOCKQUOTE",{});var yi=r(qs);qr=n(yi,"SMALL",{});var Sx=r(qr);jh=t(Sx,"If you find scanning through all the test cases takes time, you can directly call `jest` to run the test:"),Sx.forEach(o),Mh=c(yi),Fo=n(yi,"DIV",{class:!0});var K1=r(Fo);K1.forEach(o),yi.forEach(o),Hh=c(k),Ns=n(k,"P",{});var fi=r(Ns);qh=t(fi,"Our parser found 2 seemingly innocent "),Ro=n(fi,"CODE",{class:!0});var Lx=r(Ro);Nh=t(Lx,"@"),Lx.forEach(o),Fh=t(fi," tokens at a place where they shouldn't be present."),fi.forEach(o),Rh=c(k),Fs=n(k,"P",{});var bi=r(Fs);Uh=t(bi,"How do I know that? Let's start the watch mode, "),Uo=n(bi,"CODE",{class:!0});var jx=r(Uo);Wh=t(jx,"make watch"),jx.forEach(o),Bh=t(bi,", wear our detective cap \u{1F575}\uFE0F\u200D and start digging!"),bi.forEach(o),Vh=c(k),je=n(k,"P",{});var er=r(je);zh=t(er,"Tracing the stack trace, led us to "),Rs=n(er,"A",{href:!0,rel:!0});var Mx=r(Rs);Wo=n(Mx,"CODE",{class:!0});var Hx=r(Wo);Gh=t(Hx,"packages/babel-parser/src/parser/expression.js"),Hx.forEach(o),Mx.forEach(o),Jh=t(er," where it throws "),Bo=n(er,"CODE",{class:!0});var qx=r(Bo);Xh=t(qx,"this.unexpected()"),qx.forEach(o),$h=t(er,"."),er.forEach(o),Yh=c(k),Us=n(k,"P",{});var mi=r(Us);Zh=t(mi,"Let us add some "),Vo=n(mi,"CODE",{class:!0});var Nx=r(Vo);Qh=t(Nx,"console.log"),Nx.forEach(o),Kh=t(mi,":"),mi.forEach(o),ed=c(k),zo=n(k,"DIV",{class:!0});var e_=r(zo);e_.forEach(o),sd=c(k),Ws=n(k,"P",{});var gi=r(Ws);td=t(gi,"As you can see, both tokens are "),Go=n(gi,"CODE",{class:!0});var Fx=r(Go);od=t(Fx,"@"),Fx.forEach(o),ad=t(gi," token:"),gi.forEach(o),nd=c(k),Jo=n(k,"DIV",{class:!0});var s_=r(Jo);s_.forEach(o),rd=c(k),Me=n(k,"P",{});var sr=r(Me);ld=t(sr,"How do I know "),Xo=n(sr,"CODE",{class:!0});var Rx=r(Xo);id=t(Rx,"this.state.type"),Rx.forEach(o),cd=t(sr," and "),$o=n(sr,"CODE",{class:!0});var Ux=r($o);pd=t(Ux,"this.lookahead().type"),Ux.forEach(o),hd=t(sr," will give me the current and the next token?"),sr.forEach(o),dd=c(k),Bs=n(k,"P",{});var xi=r(Bs);kd=t(xi,"Well, I'll explained them "),Yo=n(xi,"A",{href:!0});var Wx=r(Yo);ud=t(Wx,"later"),Wx.forEach(o),vd=t(xi,"."),xi.forEach(o),yd=c(k),Nr=n(k,"P",{});var Bx=r(Nr);fd=t(Bx,"Let's recap what we've done so far before we move on:"),Bx.forEach(o),bd=c(k),ce=n(k,"UL",{});var as=r(ce);Zo=n(as,"LI",{});var eg=r(Zo);md=t(eg,"We've written a test case for "),Qo=n(eg,"CODE",{class:!0});var Vx=r(Qo);gd=t(Vx,"babel-parser"),Vx.forEach(o),eg.forEach(o),xd=c(as),Vs=n(as,"LI",{});var wi=r(Vs);wd=t(wi,"We ran "),Ko=n(wi,"CODE",{class:!0});var zx=r(Ko);Ed=t(zx,"make test-only"),zx.forEach(o),_d=t(wi," to run the test case"),wi.forEach(o),Td=c(as),ea=n(as,"LI",{});var sg=r(ea);Id=t(sg,"We've started the watch mode via "),sa=n(sg,"CODE",{class:!0});var Gx=r(sa);Cd=t(Gx,"make watch"),Gx.forEach(o),sg.forEach(o),Od=c(as),ta=n(as,"LI",{});var tg=r(ta);Dd=t(tg,"We've learned about parser state, and console out the current token type, "),oa=n(tg,"CODE",{class:!0});var Jx=r(oa);Ad=t(Jx,"this.state.type"),Jx.forEach(o),tg.forEach(o),as.forEach(o),Pd=c(k),Fr=n(k,"P",{});var Xx=r(Fr);Sd=t(Xx,"Here's what we are going to do next:"),Xx.forEach(o),Ld=c(k),He=n(k,"P",{});var tr=r(He);jd=t(tr,"If there's 2 consecutive "),aa=n(tr,"CODE",{class:!0});var $x=r(aa);Md=t($x,"@"),$x.forEach(o),Hd=t(tr,", it should not be separate tokens, it should be a "),na=n(tr,"CODE",{class:!0});var Yx=r(na);qd=t(Yx,"@@"),Yx.forEach(o),Nd=t(tr," token, the new token we just defined for our curry function"),tr.forEach(o),k.forEach(o),ei=c(p),E=n(p,"SECTION",{});var P=r(E);Rr=n(P,"H3",{});var Zx=r(Rr);zs=n(Zx,"A",{href:!0,id:!0});var Qx=r(zs);Fd=t(Qx,"A new token: '@@'"),Qx.forEach(o),Zx.forEach(o),Rd=c(P),Gs=n(P,"P",{});var Ei=r(Gs);Ud=t(Ei,"Let's first look at where a token type is defined: "),Js=n(Ei,"A",{href:!0,rel:!0});var Kx=r(Js);Wd=t(Kx,"packages/babel-parser/src/tokenizer/types.js"),Kx.forEach(o),Bd=t(Ei,"."),Ei.forEach(o),Vd=c(P),Ur=n(P,"P",{});var ew=r(Ur);zd=t(ew,"Here you see a list of tokens, so let's add our new token definition in as well:"),ew.forEach(o),Gd=c(P),ra=n(P,"DIV",{class:!0});var t_=r(ra);t_.forEach(o),Jd=c(P),K=n(P,"P",{});var Ye=r(K);Xd=t(Ye,"Next, let's find out where the token gets created during "),Wr=n(Ye,"EM",{});var sw=r(Wr);$d=t(sw,"tokenization"),sw.forEach(o),Yd=t(Ye,". A quick search on "),la=n(Ye,"CODE",{class:!0});var tw=r(la);Zd=t(tw,"tt.at"),tw.forEach(o),Qd=t(Ye," within "),ia=n(Ye,"CODE",{class:!0});var ow=r(ia);Kd=t(ow,"babel-parser/src/tokenizer"),ow.forEach(o),ek=t(Ye," lead us to "),Xs=n(Ye,"A",{href:!0,rel:!0});var aw=r(Xs);sk=t(aw,"packages/babel-parser/src/tokenizer/index.js"),aw.forEach(o),Ye.forEach(o),tk=c(P),Br=n(P,"BLOCKQUOTE",{});var nw=r(Br);Vr=n(nw,"SMALL",{});var rw=r(Vr);ok=t(rw,"Well, token types are import as `tt` throughout the babel-parser."),rw.forEach(o),nw.forEach(o),ak=c(P),J=n(P,"P",{});var we=r(J);nk=t(we,"Let's create the token "),ca=n(we,"CODE",{class:!0});var lw=r(ca);rk=t(lw,"tt.atat"),lw.forEach(o),lk=t(we," instead of "),pa=n(we,"CODE",{class:!0});var iw=r(pa);ik=t(iw,"tt.at"),iw.forEach(o),ck=t(we," if there's another "),ha=n(we,"CODE",{class:!0});var cw=r(ha);pk=t(cw,"@"),cw.forEach(o),hk=t(we," succeed the current "),da=n(we,"CODE",{class:!0});var pw=r(da);dk=t(pw,"@"),pw.forEach(o),kk=t(we,":"),we.forEach(o),uk=c(P),ka=n(P,"DIV",{class:!0});var o_=r(ka);o_.forEach(o),vk=c(P),zr=n(P,"P",{});var hw=r(zr);yk=t(hw,"If you run the test again, you will see that the current token and the next token has changed:"),hw.forEach(o),fk=c(P),ua=n(P,"DIV",{class:!0});var a_=r(ua);a_.forEach(o),bk=c(P),va=n(P,"P",{});var og=r(va);mk=t(og,"Yeah! It looks good and lets move on. "),$s=n(og,"SPAN",{style:!0});var dw=r($s);gk=t(dw,"\u{1F3C3}\u200D"),dw.forEach(o),og.forEach(o),P.forEach(o),si=c(p),b=n(p,"SECTION",{});var T=r(b);Gr=n(T,"H3",{});var kw=r(Gr);Ys=n(kw,"A",{href:!0,id:!0});var uw=r(Ys);xk=t(uw,"The new parser"),uw.forEach(o),kw.forEach(o),wk=c(T),Zs=n(T,"P",{});var _i=r(Zs);Ek=t(_i,"Before we move on, let's inspect how "),Qs=n(_i,"A",{href:!0,rel:!0});var vw=r(Qs);_k=t(vw,"generator functions are represented in AST"),vw.forEach(o),Tk=t(_i,":"),_i.forEach(o),Ik=c(T),Jr=n(T,"P",{});var yw=r(Jr);qe=n(yw,"SPAN",{style:!0});var fw=r(qe);ya=n(fw,"PICTURE",{});var ag=r(ya);Xr=n(ag,"SOURCE",{type:!0,srcset:!0}),X=n(ag,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0,title:!0}),ag.forEach(o),fw.forEach(o),yw.forEach(o),Ck=c(T),Ne=n(T,"P",{});var or=r(Ne);Ok=t(or,"As you can see, a generator function is represented by the "),fa=n(or,"CODE",{class:!0});var bw=r(fa);Dk=t(bw,"generator: true"),bw.forEach(o),Ak=t(or," attribute of a "),ba=n(or,"CODE",{class:!0});var mw=r(ba);Pk=t(mw,"FunctionDeclaration"),mw.forEach(o),Sk=t(or,"."),or.forEach(o),Lk=c(T),Fe=n(T,"P",{});var ar=r(Fe);jk=t(ar,"Similarly, we can add a "),ma=n(ar,"CODE",{class:!0});var gw=r(ma);Mk=t(gw,"curry: true"),gw.forEach(o),Hk=t(ar," attribute of the "),ga=n(ar,"CODE",{class:!0});var xw=r(ga);qk=t(xw,"FunctionDeclaration"),xw.forEach(o),Nk=t(ar," too if it is a curry function:"),ar.forEach(o),Fk=c(T),$r=n(T,"P",{});var ww=r($r);Re=n(ww,"SPAN",{style:!0});var Ew=r(Re);xa=n(Ew,"PICTURE",{});var ng=r(xa);Yr=n(ng,"SOURCE",{type:!0,srcset:!0}),$=n(ng,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0,title:!0}),ng.forEach(o),Ew.forEach(o),ww.forEach(o),Rk=c(T),Zr=n(T,"P",{});var _w=r(Zr);Uk=t(_w,"We have a plan now, let's implement it."),_w.forEach(o),Wk=c(T),Y=n(T,"P",{});var Ee=r(Y);Bk=t(Ee,"A quick search on "),Qr=n(Ee,"EM",{});var Tw=r(Qr);Vk=t(Tw,'"FunctionDeclaration"'),Tw.forEach(o),zk=t(Ee," leads us to a function called "),wa=n(Ee,"CODE",{class:!0});var Iw=r(wa);Gk=t(Iw,"parseFunction"),Iw.forEach(o),Jk=t(Ee," in "),Ks=n(Ee,"A",{href:!0,rel:!0});var Cw=r(Ks);Xk=t(Cw,"packages/babel-parser/src/parser/statement.js"),Cw.forEach(o),$k=t(Ee,", and here we find a line that sets the "),Ea=n(Ee,"CODE",{class:!0});var Ow=r(Ea);Yk=t(Ow,"generator"),Ow.forEach(o),Zk=t(Ee," attribute, let's add one more line:"),Ee.forEach(o),Qk=c(T),_a=n(T,"DIV",{class:!0});var n_=r(_a);n_.forEach(o),Kk=c(T),Kr=n(T,"P",{});var Dw=r(Kr);eu=t(Dw,"If you run the test again, you will be amazed that it passed!"),Dw.forEach(o),su=c(T),Ta=n(T,"DIV",{class:!0});var r_=r(Ta);r_.forEach(o),tu=c(T),el=n(T,"P",{});var Aw=r(el);ou=t(Aw,"That's it? How did we miraculously fix it?"),Aw.forEach(o),au=c(T),sl=n(T,"P",{});var Pw=r(sl);nu=t(Pw,"I am going to briefly explain how parsing works, and in the process hopefully, you understood what that one-liner change did."),Pw.forEach(o),T.forEach(o),ti=c(p),f=n(p,"SECTION",{});var x=r(f);tl=n(x,"H3",{});var Sw=r(tl);et=n(Sw,"A",{href:!0,id:!0});var Lw=r(et);ru=t(Lw,"How parsing works"),Lw.forEach(o),Sw.forEach(o),lu=c(x),st=n(x,"P",{});var Ti=r(st);iu=t(Ti,"With the list of tokens from the "),ol=n(Ti,"EM",{});var jw=r(ol);cu=t(jw,"tokenizer"),jw.forEach(o),pu=t(Ti,", the parser consumes the token one by one and constructs the AST. The parser uses the language grammar specification to decide how to use the tokens, which token to expect next."),Ti.forEach(o),hu=c(x),al=n(x,"P",{});var Mw=r(al);du=t(Mw,"The grammar specification looks something like this:"),Mw.forEach(o),ku=c(x),Ia=n(x,"DIV",{class:!0});var l_=r(Ia);l_.forEach(o),uu=c(x),tt=n(x,"P",{});var Ii=r(tt);vu=t(Ii,"It explains the precedence of each expressions/statements. For example, an "),Ca=n(Ii,"CODE",{class:!0});var Hw=r(Ca);yu=t(Hw,"AdditiveExpression"),Hw.forEach(o),fu=t(Ii," is made up of either:"),Ii.forEach(o),bu=c(x),Ue=n(x,"UL",{});var nr=r(Ue);ot=n(nr,"LI",{});var Ci=r(ot);mu=t(Ci,"a "),Oa=n(Ci,"CODE",{class:!0});var qw=r(Oa);gu=t(qw,"MultiplicativeExpression"),qw.forEach(o),xu=t(Ci,", or"),Ci.forEach(o),wu=c(nr),pe=n(nr,"LI",{});var ns=r(pe);Eu=t(ns,"an "),Da=n(ns,"CODE",{class:!0});var Nw=r(Da);_u=t(Nw,"AdditiveExpression"),Nw.forEach(o),Tu=t(ns," followed by "),Aa=n(ns,"CODE",{class:!0});var Fw=r(Aa);Iu=t(Fw,"+"),Fw.forEach(o),Cu=t(ns," operator token followed by "),Pa=n(ns,"CODE",{class:!0});var Rw=r(Pa);Ou=t(Rw,"MultiplicativeExpression"),Rw.forEach(o),Du=t(ns,", or"),ns.forEach(o),Au=c(nr),he=n(nr,"LI",{});var rs=r(he);Pu=t(rs,"an "),Sa=n(rs,"CODE",{class:!0});var Uw=r(Sa);Su=t(Uw,"AdditiveExpression"),Uw.forEach(o),Lu=t(rs," followed by "),La=n(rs,"CODE",{class:!0});var Ww=r(La);ju=t(Ww,"-"),Ww.forEach(o),Mu=t(rs," operator token followed by "),ja=n(rs,"CODE",{class:!0});var Bw=r(ja);Hu=t(Bw,"MultiplicativeExpression"),Bw.forEach(o),qu=t(rs,"."),rs.forEach(o),nr.forEach(o),Nu=c(x),at=n(x,"P",{});var Oi=r(at);Fu=t(Oi,"So if you have an expression "),Ma=n(Oi,"CODE",{class:!0});var Vw=r(Ma);Ru=t(Vw,"1 + 2 * 3"),Vw.forEach(o),Uu=t(Oi,", it will be like:"),Oi.forEach(o),Wu=c(x),Ha=n(x,"DIV",{class:!0});var i_=r(Ha);i_.forEach(o),Bu=c(x),nl=n(x,"P",{});var zw=r(nl);Vu=t(zw,"instead of"),zw.forEach(o),zu=c(x),qa=n(x,"DIV",{class:!0});var c_=r(qa);c_.forEach(o),Gu=c(x),rl=n(x,"P",{});var Gw=r(rl);Ju=t(Gw,"With these rules, we translate them into parser code:"),Gw.forEach(o),Xu=c(x),Na=n(x,"DIV",{class:!0});var p_=r(Na);p_.forEach(o),$u=c(x),ll=n(x,"P",{});var Jw=r(ll);il=n(Jw,"EM",{});var Xw=r(il);Yu=t(Xw,"This is a made-up code that oversimplifies what babel have, but I hope you get the gist of it."),Xw.forEach(o),Jw.forEach(o),Zu=c(x),Z=n(x,"P",{});var _e=r(Z);Qu=t(_e,"As you can see here, the parser is recursively in nature, and it goes from the lowest precedence to the highest precedence expressions/statements. Eg: "),Fa=n(_e,"CODE",{class:!0});var $w=r(Fa);Ku=t($w,"parseAdditiveExpression"),$w.forEach(o),ev=t(_e," calls "),Ra=n(_e,"CODE",{class:!0});var Yw=r(Ra);sv=t(Yw,"parseMultiplicativeExpression"),Yw.forEach(o),tv=t(_e,", which in turn calls "),Ua=n(_e,"CODE",{class:!0});var Zw=r(Ua);ov=t(Zw,"parseExponentiationExpression"),Zw.forEach(o),av=t(_e,", which in turn calls ... . This recursive process is called the "),nt=n(_e,"A",{href:!0,rel:!0});var Qw=r(nt);nv=t(Qw,"Recursive Descent Parsing"),Qw.forEach(o),rv=t(_e,"."),_e.forEach(o),x.forEach(o),oi=c(p),m=n(p,"SECTION",{});var I=r(m);cl=n(I,"H4",{});var Kw=r(cl);rt=n(Kw,"A",{href:!0,id:!0});var e2=r(rt);lv=t(e2,"this.eat, this.match, this.next"),e2.forEach(o),Kw.forEach(o),iv=c(I),de=n(I,"P",{});var ls=r(de);cv=t(ls,"If you have noticed, in my examples above, I used some utility function, such as "),Wa=n(ls,"CODE",{class:!0});var s2=r(Wa);pv=t(s2,"this.eat"),s2.forEach(o),hv=t(ls,", "),Ba=n(ls,"CODE",{class:!0});var t2=r(Ba);dv=t(t2,"this.match"),t2.forEach(o),kv=t(ls,", "),Va=n(ls,"CODE",{class:!0});var o2=r(Va);uv=t(o2,"this.next"),o2.forEach(o),vv=t(ls,", etc. These are babel parser's internal functions, yet they are quite ubiquitous amongst parsers as well:"),ls.forEach(o),yv=c(I),ke=n(I,"UL",{});var is=r(ke);Ke=n(is,"LI",{});var Jl=r(Ke);pl=n(Jl,"STRONG",{});var a2=r(pl);za=n(a2,"CODE",{class:!0});var n2=r(za);fv=t(n2,"this.match"),n2.forEach(o),a2.forEach(o),bv=t(Jl," returns a "),Ga=n(Jl,"CODE",{class:!0});var r2=r(Ga);mv=t(r2,"boolean"),r2.forEach(o),gv=t(Jl," indicating whether the current token matches the condition"),Jl.forEach(o),xv=c(is),Ja=n(is,"LI",{});var rg=r(Ja);hl=n(rg,"STRONG",{});var l2=r(hl);Xa=n(l2,"CODE",{class:!0});var i2=r(Xa);wv=t(i2,"this.next"),i2.forEach(o),l2.forEach(o),Ev=t(rg," moves the token list forward to point to the next token"),rg.forEach(o),_v=c(is),U=n(is,"LI",{});var me=r(U);dl=n(me,"STRONG",{});var c2=r(dl);$a=n(c2,"CODE",{class:!0});var p2=r($a);Tv=t(p2,"this.eat"),p2.forEach(o),c2.forEach(o),Iv=t(me," return what "),Ya=n(me,"CODE",{class:!0});var h2=r(Ya);Cv=t(h2,"this.match"),h2.forEach(o),Ov=t(me," returns and if "),Za=n(me,"CODE",{class:!0});var d2=r(Za);Dv=t(d2,"this.match"),d2.forEach(o),Av=t(me," returns "),Qa=n(me,"CODE",{class:!0});var k2=r(Qa);Pv=t(k2,"true"),k2.forEach(o),Sv=t(me,", will do "),Ka=n(me,"CODE",{class:!0});var u2=r(Ka);Lv=t(u2,"this.next"),u2.forEach(o),kl=n(me,"UL",{});var v2=r(kl);ee=n(v2,"LI",{});var Ze=r(ee);en=n(Ze,"CODE",{class:!0});var y2=r(en);jv=t(y2,"this.eat"),y2.forEach(o),Mv=t(Ze," is commonly used for optional operators, like "),sn=n(Ze,"CODE",{class:!0});var f2=r(sn);Hv=t(f2,"*"),f2.forEach(o),qv=t(Ze," in generator function, "),tn=n(Ze,"CODE",{class:!0});var b2=r(tn);Nv=t(b2,";"),b2.forEach(o),Fv=t(Ze," at the end of statements, and "),on=n(Ze,"CODE",{class:!0});var m2=r(on);Rv=t(m2,"?"),m2.forEach(o),Uv=t(Ze," in typescript types."),Ze.forEach(o),v2.forEach(o),me.forEach(o),Wv=c(is),an=n(is,"LI",{});var lg=r(an);ul=n(lg,"STRONG",{});var g2=r(ul);nn=n(g2,"CODE",{class:!0});var x2=r(nn);Bv=t(x2,"this.lookahead"),x2.forEach(o),g2.forEach(o),Vv=t(lg," get the next token without moving forward to make a decision on the current node"),lg.forEach(o),is.forEach(o),zv=c(I),vl=n(I,"P",{});var w2=r(vl);Gv=t(w2,"If you take a look again the parser code we just changed, it's easier to read it in now."),w2.forEach(o),Jv=c(I),rn=n(I,"DIV",{class:!0});var h_=r(rn);h_.forEach(o),Xv=c(I),yl=n(I,"P",{});var E2=r(yl);$v=t(E2,"I know I didn't do a good job explaining how a parser works. Here are some resources that I learned from, and I highly recommend them:"),E2.forEach(o),Yv=c(I),lt=n(I,"UL",{});var Di=r(lt);it=n(Di,"LI",{});var Ai=r(it);ct=n(Ai,"A",{href:!0,rel:!0});var _2=r(ct);Zv=t(_2,"Crafting Interpreters"),_2.forEach(o),Qv=t(Ai," by "),pt=n(Ai,"A",{href:!0,rel:!0});var T2=r(pt);Kv=t(T2,"Robert Nystrom"),T2.forEach(o),Ai.forEach(o),ey=c(Di),ln=n(Di,"LI",{});var ig=r(ln);ht=n(ig,"A",{href:!0,rel:!0});var I2=r(ht);sy=t(I2,'Free Udacity course: "Compilers: Theory and Practice"'),I2.forEach(o),ty=t(ig,", offered by Georgia Tech"),ig.forEach(o),Di.forEach(o),oy=c(I),ay=n(I,"HR",{}),ny=c(I),cn=n(I,"P",{});var cg=r(cn);fl=n(cg,"STRONG",{});var C2=r(fl);ry=t(C2,"Side Note"),C2.forEach(o),ly=t(cg,': You might be curious how am I able to visualize the custom syntax in the Babel AST Explorer, where I showed you the new "curry" attribute in the AST.'),cg.forEach(o),iy=c(I),bl=n(I,"P",{});var O2=r(bl);cy=t(O2,"That's because I've added a new feature in the Babel AST Explorer where you can upload your custom parser!"),O2.forEach(o),py=c(I),We=n(I,"P",{});var rr=r(We);hy=t(rr,"If you go to "),pn=n(rr,"CODE",{class:!0});var D2=r(pn);dy=t(D2,"packages/babel-parser/lib"),D2.forEach(o),ky=t(rr,", you would find the compiled version of your parser and the source map. Open the drawer of the Babel AST Explorer, you will see a button to upload a custom parser. Drag the "),hn=n(rr,"CODE",{class:!0});var A2=r(hn);uy=t(A2,"packages/babel-parser/lib/index.js"),A2.forEach(o),vy=t(rr," in and you will be visualizing the AST generated via your custom parser!"),rr.forEach(o),yy=c(I),ml=n(I,"P",{});var P2=r(ml);Be=n(P2,"SPAN",{style:!0});var S2=r(Be);se=n(S2,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),S2.forEach(o),P2.forEach(o),fy=c(I),by=n(I,"HR",{}),I.forEach(o),ai=c(p),d=n(p,"SECTION",{});var u=r(d);gl=n(u,"H2",{});var L2=r(gl);dt=n(L2,"A",{href:!0,id:!0});var j2=r(dt);my=t(j2,"Our babel plugin"),j2.forEach(o),L2.forEach(o),gy=c(u),xl=n(u,"P",{});var M2=r(xl);xy=t(M2,"With our custom babel parser done, let's move on to write our babel plugin."),M2.forEach(o),wy=c(u),wl=n(u,"P",{});var H2=r(wl);Ey=t(H2,"But maybe before that, you may have some doubts on how are we going to use our custom babel parser, especially with whatever build stack we are using right now?"),H2.forEach(o),_y=c(u),dn=n(u,"P",{});var pg=r(dn);Ty=t(pg,"Well, fret not. A babel plugin can provide a custom parser, which is "),kt=n(pg,"A",{href:!0,rel:!0});var q2=r(kt);Iy=t(q2,"documented on the babel website"),q2.forEach(o),pg.forEach(o),Cy=c(u),kn=n(u,"DIV",{class:!0});var d_=r(kn);d_.forEach(o),Oy=c(u),El=n(u,"P",{});var N2=r(El);Dy=t(N2,"Since we forked out the babel parser, all existing babel parser options or built-in plugins will still work perfectly."),N2.forEach(o),Ay=c(u),un=n(u,"P",{});var hg=r(un);Py=t(hg,"With this doubt out of the way, let see how we can make our curry function curryable? "),_l=n(hg,"EM",{});var F2=r(_l);Sy=t(F2,"(not entirely sure there's such word)"),F2.forEach(o),hg.forEach(o),Ly=c(u),jy=n(u,"HR",{}),My=c(u),Tl=n(u,"P",{});var R2=r(Tl);Hy=t(R2,"Before we start, if you have eagerly tried to add our plugin into your build system, you would notice that the curry function gets compiled to a normal function."),R2.forEach(o),qy=c(u),ue=n(u,"P",{});var cs=r(ue);Ny=t(cs,"This is because, after parsing + transformation, babel will use "),ut=n(cs,"A",{href:!0,rel:!0});var U2=r(ut);Fy=t(U2,"@babel/generator"),U2.forEach(o),Ry=t(cs," to generate code from the transformed AST. Since the "),vn=n(cs,"CODE",{class:!0});var W2=r(vn);Uy=t(W2,"@babel/generator"),W2.forEach(o),Wy=t(cs," has no idea about the new "),yn=n(cs,"CODE",{class:!0});var B2=r(yn);By=t(B2,"curry"),B2.forEach(o),Vy=t(cs," attribute we added, it will be omitted."),cs.forEach(o),zy=c(u),Il=n(u,"BLOCKQUOTE",{});var V2=r(Il);vt=n(V2,"P",{});var Pi=r(vt);Gy=t(Pi,"If one day curry function becomes the new JavaScript syntax, you may want to make a pull request to add one more line "),yt=n(Pi,"A",{href:!0,rel:!0});var z2=r(yt);Jy=t(z2,"here"),z2.forEach(o),Xy=t(Pi,"!"),Pi.forEach(o),V2.forEach(o),$y=c(u),Yy=n(u,"HR",{}),Zy=c(u),ft=n(u,"P",{});var Si=r(ft);Qy=t(Si,"Ok, to make our function curryable, we can wrap it with a "),fn=n(Si,"CODE",{class:!0});var G2=r(fn);Ky=t(G2,"currying"),G2.forEach(o),ef=t(Si," helper higher-order function:"),Si.forEach(o),sf=c(u),bn=n(u,"DIV",{class:!0});var k_=r(bn);k_.forEach(o),tf=c(u),Cl=n(u,"BLOCKQUOTE",{});var J2=r(Cl);es=n(J2,"P",{});var Xl=r(es);of=t(Xl,"If you want to learn how to write a currying function, you can read this "),bt=n(Xl,"A",{href:!0,rel:!0});var X2=r(bt);af=t(X2,"Currying in JS"),X2.forEach(o),nf=t(Xl," by "),mt=n(Xl,"A",{href:!0,rel:!0});var $2=r(mt);rf=t($2,"Shirsh Zibbu"),$2.forEach(o),Xl.forEach(o),J2.forEach(o),lf=c(u),Ol=n(u,"P",{});var Y2=r(Ol);cf=t(Y2,"So when we transform our curry function, we can transform it into the following:"),Y2.forEach(o),pf=c(u),mn=n(u,"DIV",{class:!0});var u_=r(mn);u_.forEach(o),hf=c(u),Dl=n(u,"BLOCKQUOTE",{});var Z2=r(Dl);Ve=n(Z2,"P",{});var lr=r(Ve);df=t(lr,"Let's first ignore "),gt=n(lr,"A",{href:!0,rel:!0});var Q2=r(gt);kf=t(Q2,"function hoisting"),Q2.forEach(o),uf=t(lr," in JavaScript, where you can call "),gn=n(lr,"CODE",{class:!0});var K2=r(gn);vf=t(K2,"foo"),K2.forEach(o),yf=t(lr," before it is defined."),lr.forEach(o),Z2.forEach(o),ff=c(u),xt=n(u,"P",{});var Li=r(xt);bf=t(Li,"If you have read my "),xn=n(Li,"A",{href:!0});var eE=r(xn);mf=t(eE,"step-by-step guide on babel transformation"),eE.forEach(o),gf=t(Li,", writing this transformation should be manageable:"),Li.forEach(o),xf=c(u),wn=n(u,"DIV",{class:!0});var v_=r(wn);v_.forEach(o),wf=c(u),wt=n(u,"P",{});var ji=r(wt);Ef=t(ji,"The question is how do we provide the "),En=n(ji,"CODE",{class:!0});var sE=r(En);_f=t(sE,"currying"),sE.forEach(o),Tf=t(ji," function?"),ji.forEach(o),If=c(u),Al=n(u,"P",{});var tE=r(Al);Cf=t(tE,"There are 2 ways:"),tE.forEach(o),u.forEach(o),ni=c(p),te=n(p,"SECTION",{});var ps=r(te);Pl=n(ps,"H3",{});var oE=r(Pl);ze=n(oE,"A",{href:!0,id:!0});var Mi=r(ze);Of=t(Mi,"1. Assume "),_n=n(Mi,"CODE",{class:!0});var aE=r(_n);Df=t(aE,"currying"),aE.forEach(o),Af=t(Mi," has been declared in the global scope."),Mi.forEach(o),oE.forEach(o),Pf=c(ps),Sl=n(ps,"P",{});var nE=r(Sl);Sf=t(nE,"Basically, your job is done here."),nE.forEach(o),Lf=c(ps),ve=n(ps,"P",{});var hs=r(ve);jf=t(hs,"If "),Tn=n(hs,"CODE",{class:!0});var rE=r(Tn);Mf=t(rE,"currying"),rE.forEach(o),Hf=t(hs," is not defined, then when executing the compiled code, the runtime will scream out "),Ll=n(hs,"EM",{});var lE=r(Ll);qf=t(lE,'"currying is not defined"'),lE.forEach(o),Nf=t(hs,", just like the "),Et=n(hs,"A",{href:!0,rel:!0});var iE=r(Et);Ff=t(iE,'"regeneratorRuntime is not defined"'),iE.forEach(o),Rf=t(hs,"."),hs.forEach(o),Uf=c(ps),Ge=n(ps,"P",{});var ir=r(Ge);Wf=t(ir,"So probably you have to educate the users to install "),In=n(ir,"CODE",{class:!0});var cE=r(In);Bf=t(cE,"currying"),cE.forEach(o),Vf=t(ir," polyfills in order to use your "),Cn=n(ir,"CODE",{class:!0});var pE=r(Cn);zf=t(pE,"babel-plugin-transformation-curry-function"),pE.forEach(o),Gf=t(ir,"."),ir.forEach(o),ps.forEach(o),ri=c(p),_=n(p,"SECTION",{});var S=r(_);jl=n(S,"H3",{});var hE=r(jl);ss=n(hE,"A",{href:!0,id:!0});var dg=r(ss);Jf=t(dg,"2. Use the "),On=n(dg,"CODE",{class:!0});var dE=r(On);Xf=t(dE,"@babel/helpers"),dE.forEach(o),dg.forEach(o),hE.forEach(o),$f=c(S),Q=n(S,"P",{});var Te=r(Q);Yf=t(Te,"You can add a new helper to "),Dn=n(Te,"CODE",{class:!0});var kE=r(Dn);Zf=t(kE,"@babel/helpers"),kE.forEach(o),Qf=t(Te,", which of course you are unlikely to merge that into the official "),An=n(Te,"CODE",{class:!0});var uE=r(An);Kf=t(uE,"@babel/helpers"),uE.forEach(o),eb=t(Te,", so you would have to figure a way to make "),Pn=n(Te,"CODE",{class:!0});var vE=r(Pn);sb=t(vE,"@babel/core"),vE.forEach(o),tb=t(Te," to resolve to your "),Sn=n(Te,"CODE",{class:!0});var yE=r(Sn);ob=t(yE,"@babel/helpers"),yE.forEach(o),ab=t(Te,":"),Te.forEach(o),nb=c(S),Ln=n(S,"DIV",{class:!0});var y_=r(Ln);y_.forEach(o),rb=c(S),Ml=n(S,"P",{});var fE=r(Ml);ts=n(fE,"EM",{});var $l=r(ts);Hl=n($l,"STRONG",{});var bE=r(Hl);lb=t(bE,"Disclaimer:"),bE.forEach(o),ib=t($l," I have not personally tried this, but I believe it will work. If you encountered problems trying this, "),_t=n($l,"A",{href:!0,rel:!0});var mE=r(_t);cb=t(mE,"DM me"),mE.forEach(o),pb=t($l,", I am very happy to discuss it with you."),$l.forEach(o),fE.forEach(o),hb=c(S),Tt=n(S,"P",{});var Hi=r(Tt);db=t(Hi,"Adding a new helper function into "),jn=n(Hi,"CODE",{class:!0});var gE=r(jn);kb=t(gE,"@babel/helpers"),gE.forEach(o),ub=t(Hi," is very easy."),Hi.forEach(o),vb=c(S),It=n(S,"P",{});var qi=r(It);yb=t(qi,"Head over to "),Ct=n(qi,"A",{href:!0,rel:!0});var xE=r(Ct);fb=t(xE,"packages/babel-helpers/src/helpers.js"),xE.forEach(o),bb=t(qi," and add a new entry:"),qi.forEach(o),mb=c(S),Mn=n(S,"DIV",{class:!0});var f_=r(Mn);f_.forEach(o),gb=c(S),ye=n(S,"P",{});var ds=r(ye);xb=t(ds,"The helper tag function specifies the "),Hn=n(ds,"CODE",{class:!0});var wE=r(Hn);wb=t(wE,"@babel/core"),wE.forEach(o),Eb=t(ds," version required. The trick here is to "),qn=n(ds,"CODE",{class:!0});var EE=r(qn);_b=t(EE,"export default"),EE.forEach(o),Tb=t(ds," the "),Nn=n(ds,"CODE",{class:!0});var _E=r(Nn);Ib=t(_E,"currying"),_E.forEach(o),Cb=t(ds," function."),ds.forEach(o),Ob=c(S),Ot=n(S,"P",{});var Ni=r(Ot);Db=t(Ni,"To use the helper, just call the "),Fn=n(Ni,"CODE",{class:!0});var TE=r(Fn);Ab=t(TE,"this.addHelper()"),TE.forEach(o),Pb=t(Ni,":"),Ni.forEach(o),Sb=c(S),Rn=n(S,"DIV",{class:!0});var b_=r(Rn);b_.forEach(o),Lb=c(S),Je=n(S,"P",{});var cr=r(Je);jb=t(cr,"The "),Un=n(cr,"CODE",{class:!0});var IE=r(Un);Mb=t(IE,"this.addHelper"),IE.forEach(o),Hb=t(cr," will inject the helper at the top of the file if needed, and returns an "),Wn=n(cr,"CODE",{class:!0});var CE=r(Wn);qb=t(CE,"Identifier"),CE.forEach(o),Nb=t(cr," to the injected function."),cr.forEach(o),S.forEach(o),li=c(p),q=n(p,"SECTION",{});var ne=r(q);ql=n(ne,"H2",{});var OE=r(ql);Dt=n(OE,"A",{href:!0,id:!0});var DE=r(Dt);Fb=t(DE,"Closing Note"),DE.forEach(o),OE.forEach(o),Rb=c(ne),fe=n(ne,"P",{});var ks=r(fe);Ub=t(ks,"We've seen how we can modify the babel parser function, write our own babel transform plugin "),At=n(ks,"EM",{});var Fi=r(At);Wb=t(Fi,"(which was brief mainly because I have "),Bn=n(Fi,"A",{href:!0});var AE=r(Bn);Bb=t(AE,"a detailed cover in my previous post"),AE.forEach(o),Vb=t(Fi,")"),Fi.forEach(o),zb=t(ks,", a brief touch on "),Vn=n(ks,"CODE",{class:!0});var PE=r(Vn);Gb=t(PE,"@babel/generator"),PE.forEach(o),Jb=t(ks," and also how we can add helper functions via "),zn=n(ks,"CODE",{class:!0});var SE=r(zn);Xb=t(SE,"@babel/helpers"),SE.forEach(o),$b=t(ks,"."),ks.forEach(o),Yb=c(ne),Pt=n(ne,"P",{});var Ri=r(Pt);Zb=t(Ri,"Along the way, we had a crash course on how a parser works, which I will provide the links to "),Gn=n(Ri,"A",{href:!0});var LE=r(Gn);Qb=t(LE,"further reading"),LE.forEach(o),Kb=t(Ri," at the bottom."),Ri.forEach(o),em=c(ne),Xe=n(ne,"P",{});var pr=r(Xe);sm=t(pr,"The steps we've gone through above is similar to part of the "),St=n(pr,"A",{href:!0,rel:!0});var jE=r(St);tm=t(jE,"TC39 proposal"),jE.forEach(o),om=c(pr),Lt=n(pr,"A",{href:!0,rel:!0});var ME=r(Lt);am=t(ME,"process"),ME.forEach(o),nm=t(pr," when defining a new JavaScript specification. When proposing a new specification, the champion of the proposal usually write polyfills or forked out babel to write proof-of-concept demos. As you've seen, forking a parser or writing polyfills is not the hardest part of the process, but to define the problem space, plan and think through the use cases and edge cases, and gather opinions and suggestions from the community. To this end, I am grateful to the proposal champion, for their effort in pushing the JavaScript language forward."),pr.forEach(o),rm=c(ne),jt=n(ne,"P",{});var Ui=r(jt);lm=t(Ui,"Finally, if you want to see the code we've done so far in a full picture, you can "),Mt=n(Ui,"A",{href:!0,rel:!0});var HE=r(Mt);im=t(HE,"check it out from Github"),HE.forEach(o),cm=t(Ui,"."),Ui.forEach(o),pm=c(ne),hm=n(ne,"HR",{}),ne.forEach(o),ii=c(p),W=n(p,"SECTION",{});var Ie=r(W);Nl=n(Ie,"H2",{});var qE=r(Nl);Ht=n(qE,"A",{href:!0,id:!0});var NE=r(Ht);dm=t(NE,"Editor's Note"),NE.forEach(o),qE.forEach(o),km=c(Ie),Fl=n(Ie,"P",{});var FE=r(Fl);um=t(FE,"I've worked on the babel repository for a while, yet I've never added a new syntax to the babel parser before. Most of my contributions were just fixing bugs and specs compliance feature."),FE.forEach(o),vm=c(Ie),Rl=n(Ie,"P",{});var RE=r(Rl);ym=t(RE,"Yet this idea of creating a new syntax has been in my mind for a while. So I took the chance of writing a blog to try it out. It is an exhilarating experience to see it work as expected."),RE.forEach(o),fm=c(Ie),qt=n(Ie,"P",{});var Wi=r(qt);bm=t(Wi,"Having the ability to manipulate the syntax of the language you are writing is invigorating. It empowers us the possibility of writing less code or more straightforward code and shifts that complexity to compile time. Just as how "),Jn=n(Wi,"CODE",{class:!0});var UE=r(Jn);mm=t(UE,"async-await"),UE.forEach(o),gm=t(Wi," solves the callback hell and promise-chaining hell."),Wi.forEach(o),xm=c(Ie),Nt=n(Ie,"P",{});var Bi=r(Nt);wm=t(Bi,"If this article inspires you to some great idea, and you wish to discuss it with somebody, you are always more than welcome to reach out to me through "),Ft=n(Bi,"A",{href:!0,rel:!0});var WE=r(Ft);Em=t(WE,"Twitter"),WE.forEach(o),_m=t(Bi,"."),Bi.forEach(o),Ie.forEach(o),ci=c(p),B=n(p,"SECTION",{});var Ce=r(B);Ul=n(Ce,"H2",{});var BE=r(Ul);Rt=n(BE,"A",{href:!0,id:!0});var VE=r(Rt);Tm=t(VE,"Further Reading"),VE.forEach(o),BE.forEach(o),Im=c(Ce),Wl=n(Ce,"P",{});var zE=r(Wl);Cm=t(zE,"About compilers:"),zE.forEach(o),Om=c(Ce),$e=n(Ce,"UL",{});var hr=r($e);Ut=n(hr,"LI",{});var Vi=r(Ut);Wt=n(Vi,"A",{href:!0,rel:!0});var GE=r(Wt);Dm=t(GE,"Crafting Interpreters"),GE.forEach(o),Am=t(Vi," by "),Bt=n(Vi,"A",{href:!0,rel:!0});var JE=r(Bt);Pm=t(JE,"Robert Nystrom"),JE.forEach(o),Vi.forEach(o),Sm=c(hr),Xn=n(hr,"LI",{});var kg=r(Xn);Vt=n(kg,"A",{href:!0,rel:!0});var XE=r(Vt);Lm=t(XE,'Free Udacity course: "Compilers: Theory and Practice"'),XE.forEach(o),jm=t(kg,", offered by Georgia Tech"),kg.forEach(o),Mm=c(hr),zt=n(hr,"LI",{});var zi=r(zt);Gt=n(zi,"A",{href:!0,rel:!0});var $E=r(Gt);Hm=t($E,"Leveling Up One\u2019s Parsing Game With ASTs"),$E.forEach(o),qm=t(zi," by "),Jt=n(zi,"A",{href:!0,rel:!0});var YE=r(Jt);Nm=t(YE,"Vaidehi Joshi"),YE.forEach(o),zi.forEach(o),hr.forEach(o),Fm=c(Ce),Bl=n(Ce,"P",{});var ZE=r(Bl);Rm=t(ZE,"Misc:"),ZE.forEach(o),Um=c(Ce),be=n(Ce,"UL",{});var us=r(be);Xt=n(us,"LI",{});var Gi=r(Xt);$t=n(Gi,"A",{href:!0,rel:!0});var QE=r($t);Wm=t(QE,"Understanding hoisting in JavaScript"),QE.forEach(o),Bm=t(Gi," by "),Yt=n(Gi,"A",{href:!0,rel:!0});var KE=r(Yt);Vm=t(KE,"Mabishi Wakio"),KE.forEach(o),Gi.forEach(o),zm=c(us),Zt=n(us,"LI",{});var Ji=r(Zt);Qt=n(Ji,"A",{href:!0,rel:!0});var e1=r(Qt);Gm=t(e1,"Currying in JS"),e1.forEach(o),Jm=t(Ji," by "),Kt=n(Ji,"A",{href:!0,rel:!0});var s1=r(Kt);Xm=t(s1,"Shirsh Zibbu"),s1.forEach(o),Ji.forEach(o),$m=c(us),Vl=n(us,"LI",{});var t1=r(Vl);eo=n(t1,"A",{href:!0,rel:!0});var o1=r(eo);Ym=t(o1,"TC39 Proposals"),o1.forEach(o),t1.forEach(o),Zm=c(us),zl=n(us,"LI",{});var a1=r(zl);so=n(a1,"A",{href:!0,rel:!0});var n1=r(so);Qm=t(n1,"TC39 Process Document"),n1.forEach(o),a1.forEach(o),us.forEach(o),Ce.forEach(o),this.h()},h(){l(D,"href","/step-by-step-guide-for-writing-a-babel-transformation"),l(ys,"href","#overview"),l(ys,"id","overview"),l(no,"class","code-section"),l(fs,"href","https://en.wikipedia.org/wiki/Currying"),l(fs,"rel","nofollow"),l(ro,"class","inline"),l(bs,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*"),l(bs,"rel","nofollow"),l(lo,"class","inline"),l(io,"class","inline"),l(co,"class","inline"),l(po,"class","inline"),l(ms,"href","https://scotch.io/tutorials/javascript-functional-programming-explained-partial-application-and-currying"),l(ms,"rel","nofollow"),l(ho,"class","inline"),l(ko,"class","inline"),l(uo,"class","code-section"),l(vo,"class","inline"),l(yo,"class","inline"),l(fo,"class","inline"),l(bo,"class","inline"),l(gs,"href","https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841"),l(gs,"rel","nofollow"),l(mo,"class","inline"),l(ws,"href","#fork-the-babel"),l(ws,"id","fork-the-babel"),l(_s,"href","https://github.com/babel/babel"),l(_s,"rel","nofollow"),l(wr,"type","image/webp"),l(wr,"srcset",M_+", "+j_+" 2x"),Xi(z.src,vg=h1)||l(z,"src",vg),l(z,"srcset",h1+", "+H_+" 2x"),l(z,"loading","lazy"),y(z,"position","absolute"),y(z,"top","0"),y(z,"width","100%"),y(z,"height","100%"),l(z,"alt","forking babel"),l(z,"title","Forking babel"),y(Oe,"display","block"),y(Oe,"position","relative"),y(Oe,"padding-top","54.570%"),y(Oe,"width","100%"),l(Is,"href","https://github.com/tanhauhau/babel/blob/master/CONTRIBUTING.md#setup"),l(Is,"rel","nofollow"),l(xo,"class","code-section"),l(wo,"class","inline"),l(Eo,"class","inline"),l(_o,"class","inline"),l(To,"class","inline"),l(Io,"class","code-section"),l(Cs,"href","#crash-course-on-parsing-code-to-ast"),l(Cs,"id","crash-course-on-parsing-code-to-ast"),l(Os,"href","https://twitter.com/vaidehijoshi"),l(Os,"rel","nofollow"),l(Ds,"href","https://medium.com/basecs/leveling-up-ones-parsing-game-with-asts-d7a6fc2400ff"),l(Ds,"rel","nofollow"),l(Co,"class","inline"),l(Oo,"class","inline"),l(Do,"class","inline"),l(As,"href","https://www.ecma-international.org/ecma-262/10.0/index.html#Title"),l(As,"rel","nofollow"),l(Ps,"href","https://twitter.com/munificentbob?lang=en"),l(Ps,"rel","nofollow"),l(Ss,"href","https://craftinginterpreters.com/introduction.html"),l(Ss,"rel","nofollow"),l(Ls,"href","#our-custom-babel-parser"),l(Ls,"id","our-custom-babel-parser"),l(Ao,"class","inline"),l(Po,"class","code-section"),l(So,"class","inline"),l(Lo,"class","inline"),l(jo,"class","inline"),l(Hs,"href","https://en.wikipedia.org/wiki/Test-driven_development"),l(Hs,"rel","nofollow"),l(Mo,"class","code-section"),l(Ho,"class","inline"),l(qo,"class","inline"),l(No,"class","code-section"),l(Fo,"class","code-section"),l(Ro,"class","inline"),l(Uo,"class","inline"),l(Wo,"class","inline"),l(Rs,"href","https://github.com/tanhauhau/babel/blob/feat/curry-function/packages/babel-parser/src/parser/expression.js#L2092"),l(Rs,"rel","nofollow"),l(Bo,"class","inline"),l(Vo,"class","inline"),l(zo,"class","code-section"),l(Go,"class","inline"),l(Jo,"class","code-section"),l(Xo,"class","inline"),l($o,"class","inline"),l(Yo,"href","#thiseat-thismatch-thisnext"),l(Qo,"class","inline"),l(Ko,"class","inline"),l(sa,"class","inline"),l(oa,"class","inline"),l(aa,"class","inline"),l(na,"class","inline"),l(zs,"href","#a-new-token"),l(zs,"id","a-new-token"),l(Js,"href","https://github.com/tanhauhau/babel/blob/feat/curry-function/packages/babel-parser/src/tokenizer/types.js#L86"),l(Js,"rel","nofollow"),l(ra,"class","code-section"),l(la,"class","inline"),l(ia,"class","inline"),l(Xs,"href","https://github.com/tanhauhau/babel/blob/da0af5fd99a9b747370a2240df3abf2940b9649c/packages/babel-parser/src/tokenizer/index.js#L790"),l(Xs,"rel","nofollow"),l(ca,"class","inline"),l(pa,"class","inline"),l(ha,"class","inline"),l(da,"class","inline"),l(ka,"class","code-section"),l(ua,"class","code-section"),y($s,"transform","scaleX(-1)"),y($s,"display","inline-block"),l(Ys,"href","#the-new-parser"),l(Ys,"id","the-new-parser"),l(Qs,"href","https://lihautan.com/babel-ast-explorer/#?eyJiYWJlbFNldHRpbmdzIjp7InZlcnNpb24iOiI3LjYuMCJ9LCJ0cmVlU2V0dGluZ3MiOnsiaGlkZUVtcHR5Ijp0cnVlLCJoaWRlTG9jYXRpb24iOnRydWUsImhpZGVUeXBlIjp0cnVlfSwiY29kZSI6ImZ1bmN0aW9uICogZm9vKCkge30ifQ=="),l(Qs,"rel","nofollow"),l(Xr,"type","image/webp"),l(Xr,"srcset",S_+", "+P_+" 2x"),Xi(X.src,yg=p1)||l(X,"src",yg),l(X,"srcset",p1+", "+L_+" 2x"),l(X,"loading","lazy"),y(X,"position","absolute"),y(X,"top","0"),y(X,"width","100%"),y(X,"height","100%"),l(X,"alt","AST for generator function"),l(X,"title","AST for generator function"),y(qe,"display","block"),y(qe,"position","relative"),y(qe,"padding-top","37.422%"),y(qe,"width","100%"),l(fa,"class","inline"),l(ba,"class","inline"),l(ma,"class","inline"),l(ga,"class","inline"),l(Yr,"type","image/webp"),l(Yr,"srcset",D_+", "+O_+" 2x"),Xi($.src,fg=c1)||l($,"src",fg),l($,"srcset",c1+", "+A_+" 2x"),l($,"loading","lazy"),y($,"position","absolute"),y($,"top","0"),y($,"width","100%"),y($,"height","100%"),l($,"alt","AST for curry function"),l($,"title","AST for curry function"),y(Re,"display","block"),y(Re,"position","relative"),y(Re,"padding-top","39.297%"),y(Re,"width","100%"),l(wa,"class","inline"),l(Ks,"href","https://github.com/tanhauhau/babel/blob/da0af5fd99a9b747370a2240df3abf2940b9649c/packages/babel-parser/src/parser/statement.js#L1030"),l(Ks,"rel","nofollow"),l(Ea,"class","inline"),l(_a,"class","code-section"),l(Ta,"class","code-section"),l(et,"href","#how-parsing-works"),l(et,"id","how-parsing-works"),l(Ia,"class","code-section"),l(Ca,"class","inline"),l(Oa,"class","inline"),l(Da,"class","inline"),l(Aa,"class","inline"),l(Pa,"class","inline"),l(Sa,"class","inline"),l(La,"class","inline"),l(ja,"class","inline"),l(Ma,"class","inline"),l(Ha,"class","code-section"),l(qa,"class","code-section"),l(Na,"class","code-section"),l(Fa,"class","inline"),l(Ra,"class","inline"),l(Ua,"class","inline"),l(nt,"href","https://craftinginterpreters.com/parsing-expressions.html#recursive-descent-parsing"),l(nt,"rel","nofollow"),l(rt,"href","#this-eat-this-match-this-next"),l(rt,"id","this-eat-this-match-this-next"),l(Wa,"class","inline"),l(Ba,"class","inline"),l(Va,"class","inline"),l(za,"class","inline"),l(Ga,"class","inline"),l(Xa,"class","inline"),l($a,"class","inline"),l(Ya,"class","inline"),l(Za,"class","inline"),l(Qa,"class","inline"),l(Ka,"class","inline"),l(en,"class","inline"),l(sn,"class","inline"),l(tn,"class","inline"),l(on,"class","inline"),l(nn,"class","inline"),l(rn,"class","code-section"),l(ct,"href","https://craftinginterpreters.com/introduction.html"),l(ct,"rel","nofollow"),l(pt,"href","https://twitter.com/munificentbob?lang=en"),l(pt,"rel","nofollow"),l(ht,"href","https://www.udacity.com/course/compilers-theory-and-practice--ud168"),l(ht,"rel","nofollow"),l(pn,"class","inline"),l(hn,"class","inline"),Xi(se.src,bg=i1)||l(se,"src",bg),l(se,"srcset",i1+", "+C_+" 2x"),l(se,"loading","lazy"),y(se,"position","absolute"),y(se,"top","0"),y(se,"width","100%"),y(se,"height","100%"),l(se,"alt","Uploading custom parser"),y(Be,"display","block"),y(Be,"position","relative"),y(Be,"padding-top","54.000%"),y(Be,"width","100%"),l(dt,"href","#our-babel-plugin"),l(dt,"id","our-babel-plugin"),l(kt,"href","https://babeljs.io/docs/en/babel-parser#will-the-babel-parser-support-a-plugin-system"),l(kt,"rel","nofollow"),l(kn,"class","code-section"),l(ut,"href","https://babeljs.io/docs/en/babel-generator"),l(ut,"rel","nofollow"),l(vn,"class","inline"),l(yn,"class","inline"),l(yt,"href","https://github.com/tanhauhau/babel/blob/da0af5fd99a9b747370a2240df3abf2940b9649c/packages/babel-generator/src/generators/methods.js#L82"),l(yt,"rel","nofollow"),l(fn,"class","inline"),l(bn,"class","code-section"),l(bt,"href","https://hackernoon.com/currying-in-js-d9ddc64f162e"),l(bt,"rel","nofollow"),l(mt,"href","https://twitter.com/zhirzh"),l(mt,"rel","nofollow"),l(mn,"class","code-section"),l(gt,"href","https://scotch.io/tutorials/understanding-hoisting-in-javascript"),l(gt,"rel","nofollow"),l(gn,"class","inline"),l(xn,"href","/step-by-step-guide-for-writing-a-babel-transformation"),l(wn,"class","code-section"),l(En,"class","inline"),l(_n,"class","inline"),l(ze,"href","#1-assume-currying-has-been-declared-in-the-global-scope"),l(ze,"id","1-assume-currying-has-been-declared-in-the-global-scope"),l(Tn,"class","inline"),l(Et,"href","https://www.google.com/search?q=regeneratorRuntime+is+not+defined"),l(Et,"rel","nofollow"),l(In,"class","inline"),l(Cn,"class","inline"),l(On,"class","inline"),l(ss,"href","#2-use-the-babel-helpers"),l(ss,"id","2-use-the-babel-helpers"),l(Dn,"class","inline"),l(An,"class","inline"),l(Pn,"class","inline"),l(Sn,"class","inline"),l(Ln,"class","code-section"),l(_t,"href","https://twitter.com/lihautan"),l(_t,"rel","nofollow"),l(jn,"class","inline"),l(Ct,"href","https://github.com/tanhauhau/babel/blob/feat/curry-function/packages/babel-helpers/src/helpers.js"),l(Ct,"rel","nofollow"),l(Mn,"class","code-section"),l(Hn,"class","inline"),l(qn,"class","inline"),l(Nn,"class","inline"),l(Fn,"class","inline"),l(Rn,"class","code-section"),l(Un,"class","inline"),l(Wn,"class","inline"),l(Dt,"href","#closing-note"),l(Dt,"id","closing-note"),l(Bn,"href","/step-by-step-guide-for-writing-a-babel-transformation"),l(Vn,"class","inline"),l(zn,"class","inline"),l(Gn,"href","#further-reading"),l(St,"href","https://github.com/tc39/proposals"),l(St,"rel","nofollow"),l(Lt,"href","https://tc39.es/process-document/"),l(Lt,"rel","nofollow"),l(Mt,"href","https://github.com/tanhauhau/babel/compare/3a7b6e1c2...b793efad1"),l(Mt,"rel","nofollow"),l(Ht,"href","#editor-s-note"),l(Ht,"id","editor-s-note"),l(Jn,"class","inline"),l(Ft,"href","https://twitter.com/lihautan"),l(Ft,"rel","nofollow"),l(Rt,"href","#further-reading"),l(Rt,"id","further-reading"),l(Wt,"href","https://craftinginterpreters.com/introduction.html"),l(Wt,"rel","nofollow"),l(Bt,"href","https://twitter.com/munificentbob?lang=en"),l(Bt,"rel","nofollow"),l(Vt,"href","https://www.udacity.com/course/compilers-theory-and-practice--ud168"),l(Vt,"rel","nofollow"),l(Gt,"href","https://medium.com/basecs/leveling-up-ones-parsing-game-with-asts-d7a6fc2400ff"),l(Gt,"rel","nofollow"),l(Jt,"href","https://twitter.com/vaidehijoshi"),l(Jt,"rel","nofollow"),l($t,"href","https://scotch.io/tutorials/understanding-hoisting-in-javascript"),l($t,"rel","nofollow"),l(Yt,"href","https://twitter.com/emabishi"),l(Yt,"rel","nofollow"),l(Qt,"href","https://hackernoon.com/currying-in-js-d9ddc64f162e"),l(Qt,"rel","nofollow"),l(Kt,"href","https://twitter.com/zhirzh"),l(Kt,"rel","nofollow"),l(eo,"href","https://github.com/tc39/proposals"),l(eo,"rel","nofollow"),l(so,"href","https://tc39.es/process-document/"),l(so,"rel","nofollow")},m(p,v){v1(C,p,v),g(p,re,v),g(p,R,v),e(R,vs),e(R,D),e(D,le),e(R,ao),g(p,Yl,v),g(p,w,v),e(w,dr),e(dr,ys),e(ys,$i),e(w,Yi),e(w,kr),e(kr,Zi),e(w,Qi),e(w,no),no.innerHTML=m1,e(w,Ki),e(w,j),e(j,ec),e(j,fs),e(fs,sc),e(j,tc),e(j,ro),e(ro,oc),e(j,ac),e(j,bs),e(bs,nc),e(j,rc),e(j,lo),e(lo,lc),e(j,ic),e(j,io),e(io,cc),e(j,pc),e(j,co),e(co,hc),e(j,dc),e(j,po),e(po,kc),e(j,uc),e(w,vc),e(w,ie),e(ie,yc),e(ie,ms),e(ms,fc),e(ie,bc),e(ie,ho),e(ho,mc),e(ie,gc),e(ie,ko),e(ko,xc),e(ie,wc),e(w,Ec),e(w,uo),uo.innerHTML=g1,e(w,_c),e(w,ur),e(ur,M),e(M,Tc),e(M,vo),e(vo,Ic),e(M,Cc),e(M,yo),e(yo,Oc),e(M,Dc),e(M,fo),e(fo,Ac),e(M,Pc),e(M,bo),e(bo,Sc),e(M,Lc),e(M,gs),e(gs,jc),e(M,Mc),e(M,mo),e(mo,Hc),e(M,qc),e(w,Nc),e(w,vr),e(vr,Fc),e(w,Rc),e(w,xs),e(xs,yr),e(yr,Uc),e(xs,Wc),e(xs,fr),e(fr,Bc),e(w,Vc),e(w,br),e(br,zc),e(w,Gc),e(w,mr),e(mr,Jc),g(p,Zl,v),g(p,O,v),e(O,gr),e(gr,ws),e(ws,Xc),e(O,$c),e(O,Es),e(Es,Yc),e(Es,_s),e(_s,Zc),e(Es,Qc),e(O,Kc),e(O,xr),e(xr,Oe),e(Oe,go),e(go,wr),e(go,z),e(O,ep),e(O,Er),e(Er,sp),e(O,tp),e(O,Ts),e(Ts,op),e(Ts,Is),e(Is,ap),e(Ts,np),e(O,rp),e(O,xo),xo.innerHTML=x1,e(O,lp),e(O,_r),e(_r,ip),e(O,cp),e(O,G),e(G,pp),e(G,wo),e(wo,hp),e(G,dp),e(G,Eo),e(Eo,kp),e(G,up),e(G,_o),e(_o,vp),e(G,yp),e(G,To),e(To,fp),e(G,bp),e(O,mp),e(O,Io),Io.innerHTML=w1,e(O,gp),e(O,Tr),e(Tr,Ir),e(Ir,xp),g(p,Ql,v),g(p,H,v),e(H,Cr),e(Cr,Cs),e(Cs,wp),e(H,Ep),e(H,De),e(De,_p),e(De,Os),e(Os,Tp),e(De,Ip),e(De,Ds),e(Ds,Cp),e(De,Op),e(H,Dp),e(H,Or),e(Or,Ap),e(H,Pp),e(H,Ae),e(Ae,Qe),e(Qe,Sp),e(Qe,Co),e(Co,Lp),e(Qe,jp),e(Qe,Oo),e(Oo,Mp),e(Ae,Hp),e(Ae,ge),e(ge,qp),e(ge,Dr),e(Dr,Np),e(ge,Fp),e(ge,Ar),e(Ar,Rp),e(ge,Up),e(ge,Do),e(Do,Wp),e(Ae,Bp),e(Ae,Pe),e(Pe,Vp),e(Pe,Pr),e(Pr,zp),e(Pe,Gp),e(Pe,As),e(As,Jp),e(Pe,Xp),e(H,$p),e(H,Se),e(Se,Yp),e(Se,Ps),e(Ps,Zp),e(Se,Qp),e(Se,Ss),e(Ss,Kp),e(Se,eh),e(H,sh),e(H,Sr),e(Sr,Lr),e(Lr,th),g(p,Kl,v),g(p,h,v),e(h,jr),e(jr,Ls),e(Ls,oh),e(h,ah),e(h,js),e(js,nh),e(js,Ao),e(Ao,rh),e(js,lh),e(h,ih),e(h,Po),Po.innerHTML=E1,e(h,ch),e(h,F),e(F,ph),e(F,Mr),e(Mr,hh),e(F,dh),e(F,Hr),e(Hr,kh),e(F,uh),e(F,So),e(So,vh),e(F,yh),e(F,Lo),e(Lo,fh),e(F,bh),e(F,jo),e(jo,mh),e(F,gh),e(h,xh),e(h,Ms),e(Ms,wh),e(Ms,Hs),e(Hs,Eh),e(Ms,_h),e(h,Th),e(h,Mo),Mo.innerHTML=_1,e(h,Ih),e(h,Le),e(Le,Ch),e(Le,Ho),e(Ho,Oh),e(Le,Dh),e(Le,qo),e(qo,Ah),e(Le,Ph),e(h,Sh),e(h,No),No.innerHTML=T1,e(h,Lh),e(h,qs),e(qs,qr),e(qr,jh),e(qs,Mh),e(qs,Fo),Fo.innerHTML=I1,e(h,Hh),e(h,Ns),e(Ns,qh),e(Ns,Ro),e(Ro,Nh),e(Ns,Fh),e(h,Rh),e(h,Fs),e(Fs,Uh),e(Fs,Uo),e(Uo,Wh),e(Fs,Bh),e(h,Vh),e(h,je),e(je,zh),e(je,Rs),e(Rs,Wo),e(Wo,Gh),e(je,Jh),e(je,Bo),e(Bo,Xh),e(je,$h),e(h,Yh),e(h,Us),e(Us,Zh),e(Us,Vo),e(Vo,Qh),e(Us,Kh),e(h,ed),e(h,zo),zo.innerHTML=C1,e(h,sd),e(h,Ws),e(Ws,td),e(Ws,Go),e(Go,od),e(Ws,ad),e(h,nd),e(h,Jo),Jo.innerHTML=O1,e(h,rd),e(h,Me),e(Me,ld),e(Me,Xo),e(Xo,id),e(Me,cd),e(Me,$o),e($o,pd),e(Me,hd),e(h,dd),e(h,Bs),e(Bs,kd),e(Bs,Yo),e(Yo,ud),e(Bs,vd),e(h,yd),e(h,Nr),e(Nr,fd),e(h,bd),e(h,ce),e(ce,Zo),e(Zo,md),e(Zo,Qo),e(Qo,gd),e(ce,xd),e(ce,Vs),e(Vs,wd),e(Vs,Ko),e(Ko,Ed),e(Vs,_d),e(ce,Td),e(ce,ea),e(ea,Id),e(ea,sa),e(sa,Cd),e(ce,Od),e(ce,ta),e(ta,Dd),e(ta,oa),e(oa,Ad),e(h,Pd),e(h,Fr),e(Fr,Sd),e(h,Ld),e(h,He),e(He,jd),e(He,aa),e(aa,Md),e(He,Hd),e(He,na),e(na,qd),e(He,Nd),g(p,ei,v),g(p,E,v),e(E,Rr),e(Rr,zs),e(zs,Fd),e(E,Rd),e(E,Gs),e(Gs,Ud),e(Gs,Js),e(Js,Wd),e(Gs,Bd),e(E,Vd),e(E,Ur),e(Ur,zd),e(E,Gd),e(E,ra),ra.innerHTML=D1,e(E,Jd),e(E,K),e(K,Xd),e(K,Wr),e(Wr,$d),e(K,Yd),e(K,la),e(la,Zd),e(K,Qd),e(K,ia),e(ia,Kd),e(K,ek),e(K,Xs),e(Xs,sk),e(E,tk),e(E,Br),e(Br,Vr),e(Vr,ok),e(E,ak),e(E,J),e(J,nk),e(J,ca),e(ca,rk),e(J,lk),e(J,pa),e(pa,ik),e(J,ck),e(J,ha),e(ha,pk),e(J,hk),e(J,da),e(da,dk),e(J,kk),e(E,uk),e(E,ka),ka.innerHTML=A1,e(E,vk),e(E,zr),e(zr,yk),e(E,fk),e(E,ua),ua.innerHTML=P1,e(E,bk),e(E,va),e(va,mk),e(va,$s),e($s,gk),g(p,si,v),g(p,b,v),e(b,Gr),e(Gr,Ys),e(Ys,xk),e(b,wk),e(b,Zs),e(Zs,Ek),e(Zs,Qs),e(Qs,_k),e(Zs,Tk),e(b,Ik),e(b,Jr),e(Jr,qe),e(qe,ya),e(ya,Xr),e(ya,X),e(b,Ck),e(b,Ne),e(Ne,Ok),e(Ne,fa),e(fa,Dk),e(Ne,Ak),e(Ne,ba),e(ba,Pk),e(Ne,Sk),e(b,Lk),e(b,Fe),e(Fe,jk),e(Fe,ma),e(ma,Mk),e(Fe,Hk),e(Fe,ga),e(ga,qk),e(Fe,Nk),e(b,Fk),e(b,$r),e($r,Re),e(Re,xa),e(xa,Yr),e(xa,$),e(b,Rk),e(b,Zr),e(Zr,Uk),e(b,Wk),e(b,Y),e(Y,Bk),e(Y,Qr),e(Qr,Vk),e(Y,zk),e(Y,wa),e(wa,Gk),e(Y,Jk),e(Y,Ks),e(Ks,Xk),e(Y,$k),e(Y,Ea),e(Ea,Yk),e(Y,Zk),e(b,Qk),e(b,_a),_a.innerHTML=S1,e(b,Kk),e(b,Kr),e(Kr,eu),e(b,su),e(b,Ta),Ta.innerHTML=L1,e(b,tu),e(b,el),e(el,ou),e(b,au),e(b,sl),e(sl,nu),g(p,ti,v),g(p,f,v),e(f,tl),e(tl,et),e(et,ru),e(f,lu),e(f,st),e(st,iu),e(st,ol),e(ol,cu),e(st,pu),e(f,hu),e(f,al),e(al,du),e(f,ku),e(f,Ia),Ia.innerHTML=j1,e(f,uu),e(f,tt),e(tt,vu),e(tt,Ca),e(Ca,yu),e(tt,fu),e(f,bu),e(f,Ue),e(Ue,ot),e(ot,mu),e(ot,Oa),e(Oa,gu),e(ot,xu),e(Ue,wu),e(Ue,pe),e(pe,Eu),e(pe,Da),e(Da,_u),e(pe,Tu),e(pe,Aa),e(Aa,Iu),e(pe,Cu),e(pe,Pa),e(Pa,Ou),e(pe,Du),e(Ue,Au),e(Ue,he),e(he,Pu),e(he,Sa),e(Sa,Su),e(he,Lu),e(he,La),e(La,ju),e(he,Mu),e(he,ja),e(ja,Hu),e(he,qu),e(f,Nu),e(f,at),e(at,Fu),e(at,Ma),e(Ma,Ru),e(at,Uu),e(f,Wu),e(f,Ha),Ha.innerHTML=M1,e(f,Bu),e(f,nl),e(nl,Vu),e(f,zu),e(f,qa),qa.innerHTML=H1,e(f,Gu),e(f,rl),e(rl,Ju),e(f,Xu),e(f,Na),Na.innerHTML=q1,e(f,$u),e(f,ll),e(ll,il),e(il,Yu),e(f,Zu),e(f,Z),e(Z,Qu),e(Z,Fa),e(Fa,Ku),e(Z,ev),e(Z,Ra),e(Ra,sv),e(Z,tv),e(Z,Ua),e(Ua,ov),e(Z,av),e(Z,nt),e(nt,nv),e(Z,rv),g(p,oi,v),g(p,m,v),e(m,cl),e(cl,rt),e(rt,lv),e(m,iv),e(m,de),e(de,cv),e(de,Wa),e(Wa,pv),e(de,hv),e(de,Ba),e(Ba,dv),e(de,kv),e(de,Va),e(Va,uv),e(de,vv),e(m,yv),e(m,ke),e(ke,Ke),e(Ke,pl),e(pl,za),e(za,fv),e(Ke,bv),e(Ke,Ga),e(Ga,mv),e(Ke,gv),e(ke,xv),e(ke,Ja),e(Ja,hl),e(hl,Xa),e(Xa,wv),e(Ja,Ev),e(ke,_v),e(ke,U),e(U,dl),e(dl,$a),e($a,Tv),e(U,Iv),e(U,Ya),e(Ya,Cv),e(U,Ov),e(U,Za),e(Za,Dv),e(U,Av),e(U,Qa),e(Qa,Pv),e(U,Sv),e(U,Ka),e(Ka,Lv),e(U,kl),e(kl,ee),e(ee,en),e(en,jv),e(ee,Mv),e(ee,sn),e(sn,Hv),e(ee,qv),e(ee,tn),e(tn,Nv),e(ee,Fv),e(ee,on),e(on,Rv),e(ee,Uv),e(ke,Wv),e(ke,an),e(an,ul),e(ul,nn),e(nn,Bv),e(an,Vv),e(m,zv),e(m,vl),e(vl,Gv),e(m,Jv),e(m,rn),rn.innerHTML=N1,e(m,Xv),e(m,yl),e(yl,$v),e(m,Yv),e(m,lt),e(lt,it),e(it,ct),e(ct,Zv),e(it,Qv),e(it,pt),e(pt,Kv),e(lt,ey),e(lt,ln),e(ln,ht),e(ht,sy),e(ln,ty),e(m,oy),e(m,ay),e(m,ny),e(m,cn),e(cn,fl),e(fl,ry),e(cn,ly),e(m,iy),e(m,bl),e(bl,cy),e(m,py),e(m,We),e(We,hy),e(We,pn),e(pn,dy),e(We,ky),e(We,hn),e(hn,uy),e(We,vy),e(m,yy),e(m,ml),e(ml,Be),e(Be,se),e(m,fy),e(m,by),g(p,ai,v),g(p,d,v),e(d,gl),e(gl,dt),e(dt,my),e(d,gy),e(d,xl),e(xl,xy),e(d,wy),e(d,wl),e(wl,Ey),e(d,_y),e(d,dn),e(dn,Ty),e(dn,kt),e(kt,Iy),e(d,Cy),e(d,kn),kn.innerHTML=F1,e(d,Oy),e(d,El),e(El,Dy),e(d,Ay),e(d,un),e(un,Py),e(un,_l),e(_l,Sy),e(d,Ly),e(d,jy),e(d,My),e(d,Tl),e(Tl,Hy),e(d,qy),e(d,ue),e(ue,Ny),e(ue,ut),e(ut,Fy),e(ue,Ry),e(ue,vn),e(vn,Uy),e(ue,Wy),e(ue,yn),e(yn,By),e(ue,Vy),e(d,zy),e(d,Il),e(Il,vt),e(vt,Gy),e(vt,yt),e(yt,Jy),e(vt,Xy),e(d,$y),e(d,Yy),e(d,Zy),e(d,ft),e(ft,Qy),e(ft,fn),e(fn,Ky),e(ft,ef),e(d,sf),e(d,bn),bn.innerHTML=R1,e(d,tf),e(d,Cl),e(Cl,es),e(es,of),e(es,bt),e(bt,af),e(es,nf),e(es,mt),e(mt,rf),e(d,lf),e(d,Ol),e(Ol,cf),e(d,pf),e(d,mn),mn.innerHTML=U1,e(d,hf),e(d,Dl),e(Dl,Ve),e(Ve,df),e(Ve,gt),e(gt,kf),e(Ve,uf),e(Ve,gn),e(gn,vf),e(Ve,yf),e(d,ff),e(d,xt),e(xt,bf),e(xt,xn),e(xn,mf),e(xt,gf),e(d,xf),e(d,wn),wn.innerHTML=W1,e(d,wf),e(d,wt),e(wt,Ef),e(wt,En),e(En,_f),e(wt,Tf),e(d,If),e(d,Al),e(Al,Cf),g(p,ni,v),g(p,te,v),e(te,Pl),e(Pl,ze),e(ze,Of),e(ze,_n),e(_n,Df),e(ze,Af),e(te,Pf),e(te,Sl),e(Sl,Sf),e(te,Lf),e(te,ve),e(ve,jf),e(ve,Tn),e(Tn,Mf),e(ve,Hf),e(ve,Ll),e(Ll,qf),e(ve,Nf),e(ve,Et),e(Et,Ff),e(ve,Rf),e(te,Uf),e(te,Ge),e(Ge,Wf),e(Ge,In),e(In,Bf),e(Ge,Vf),e(Ge,Cn),e(Cn,zf),e(Ge,Gf),g(p,ri,v),g(p,_,v),e(_,jl),e(jl,ss),e(ss,Jf),e(ss,On),e(On,Xf),e(_,$f),e(_,Q),e(Q,Yf),e(Q,Dn),e(Dn,Zf),e(Q,Qf),e(Q,An),e(An,Kf),e(Q,eb),e(Q,Pn),e(Pn,sb),e(Q,tb),e(Q,Sn),e(Sn,ob),e(Q,ab),e(_,nb),e(_,Ln),Ln.innerHTML=B1,e(_,rb),e(_,Ml),e(Ml,ts),e(ts,Hl),e(Hl,lb),e(ts,ib),e(ts,_t),e(_t,cb),e(ts,pb),e(_,hb),e(_,Tt),e(Tt,db),e(Tt,jn),e(jn,kb),e(Tt,ub),e(_,vb),e(_,It),e(It,yb),e(It,Ct),e(Ct,fb),e(It,bb),e(_,mb),e(_,Mn),Mn.innerHTML=V1,e(_,gb),e(_,ye),e(ye,xb),e(ye,Hn),e(Hn,wb),e(ye,Eb),e(ye,qn),e(qn,_b),e(ye,Tb),e(ye,Nn),e(Nn,Ib),e(ye,Cb),e(_,Ob),e(_,Ot),e(Ot,Db),e(Ot,Fn),e(Fn,Ab),e(Ot,Pb),e(_,Sb),e(_,Rn),Rn.innerHTML=z1,e(_,Lb),e(_,Je),e(Je,jb),e(Je,Un),e(Un,Mb),e(Je,Hb),e(Je,Wn),e(Wn,qb),e(Je,Nb),g(p,li,v),g(p,q,v),e(q,ql),e(ql,Dt),e(Dt,Fb),e(q,Rb),e(q,fe),e(fe,Ub),e(fe,At),e(At,Wb),e(At,Bn),e(Bn,Bb),e(At,Vb),e(fe,zb),e(fe,Vn),e(Vn,Gb),e(fe,Jb),e(fe,zn),e(zn,Xb),e(fe,$b),e(q,Yb),e(q,Pt),e(Pt,Zb),e(Pt,Gn),e(Gn,Qb),e(Pt,Kb),e(q,em),e(q,Xe),e(Xe,sm),e(Xe,St),e(St,tm),e(Xe,om),e(Xe,Lt),e(Lt,am),e(Xe,nm),e(q,rm),e(q,jt),e(jt,lm),e(jt,Mt),e(Mt,im),e(jt,cm),e(q,pm),e(q,hm),g(p,ii,v),g(p,W,v),e(W,Nl),e(Nl,Ht),e(Ht,dm),e(W,km),e(W,Fl),e(Fl,um),e(W,vm),e(W,Rl),e(Rl,ym),e(W,fm),e(W,qt),e(qt,bm),e(qt,Jn),e(Jn,mm),e(qt,gm),e(W,xm),e(W,Nt),e(Nt,wm),e(Nt,Ft),e(Ft,Em),e(Nt,_m),g(p,ci,v),g(p,B,v),e(B,Ul),e(Ul,Rt),e(Rt,Tm),e(B,Im),e(B,Wl),e(Wl,Cm),e(B,Om),e(B,$e),e($e,Ut),e(Ut,Wt),e(Wt,Dm),e(Ut,Am),e(Ut,Bt),e(Bt,Pm),e($e,Sm),e($e,Xn),e(Xn,Vt),e(Vt,Lm),e(Xn,jm),e($e,Mm),e($e,zt),e(zt,Gt),e(Gt,Hm),e(zt,qm),e(zt,Jt),e(Jt,Nm),e(B,Fm),e(B,Bl),e(Bl,Rm),e(B,Um),e(B,be),e(be,Xt),e(Xt,$t),e($t,Wm),e(Xt,Bm),e(Xt,Yt),e(Yt,Vm),e(be,zm),e(be,Zt),e(Zt,Qt),e(Qt,Gm),e(Zt,Jm),e(Zt,Kt),e(Kt,Xm),e(be,$m),e(be,Vl),e(Vl,eo),e(eo,Ym),e(be,Zm),e(be,zl),e(zl,so),e(so,Qm),pi=!0},p:__,i(p){pi||(y1(C.$$.fragment,p),pi=!0)},o(p){f1(C.$$.fragment,p),pi=!1},d(p){b1(C,p),p&&o(re),p&&o(R),p&&o(Yl),p&&o(w),p&&o(Zl),p&&o(O),p&&o(Ql),p&&o(H),p&&o(Kl),p&&o(h),p&&o(ei),p&&o(E),p&&o(si),p&&o(b),p&&o(ti),p&&o(f),p&&o(oi),p&&o(m),p&&o(ai),p&&o(d),p&&o(ni),p&&o(te),p&&o(ri),p&&o(_),p&&o(li),p&&o(q),p&&o(ii),p&&o(W),p&&o(ci),p&&o(B)}}}function F_(oo){let C,re;const R=[oo[0],d1];let vs={$$slots:{default:[N_]},$$scope:{ctx:oo}};for(let D=0;D<R.length;D+=1)vs=ug(vs,R[D]);return C=new T_({props:vs}),{c(){k1(C.$$.fragment)},l(D){u1(C.$$.fragment,D)},m(D,le){v1(C,D,le),re=!0},p(D,[le]){const ao=le&1?w_(R,[le&1&&r1(D[0]),le&0&&r1(d1)]):{};le&2&&(ao.$$scope={dirty:le,ctx:D}),C.$set(ao)},i(D){re||(y1(C.$$.fragment,D),re=!0)},o(D){f1(C.$$.fragment,D),re=!1},d(D){b1(C,D)}}}const d1={title:"Creating custom JavaScript syntax with Babel",date:"2019-09-25T08:00:00Z",description:"Forking babel parser and creating your custom JavaScript syntax isn't as hard as you think.",tags:["JavaScript","babel","AST","transform"],series:"Intermediate Babel",label:"blog"};function R_(oo,C,re){return E_("blog",{image:q_}),oo.$$set=R=>{re(0,C=ug(ug({},C),l1(R)))},C=l1(C),[C]}class J_ extends m_{constructor(C){super();g_(this,C,R_,F_,x_,{})}}export{J_ as default,d1 as metadata};
