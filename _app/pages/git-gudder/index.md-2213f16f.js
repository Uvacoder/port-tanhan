import{S as j2,i as K2,s as Q2,C as __,w as C2,x as O2,y as D2,z as J2,A as d2,q as I2,o as P2,B as T2,r as X2,R as h2,k as n,e as a,t as o,m as d,c as s,a as r,h as l,d as t,b as i,Q as b,g as u,F as e,O as Z2}from"../../chunks/vendor-6bf294e3.js";import{T as e3}from"../../chunks/TalkLayout-d182c6b1.js";import{T as t3}from"../../chunks/TableOfContent-1b9e4572.js";import{_ as a3}from"../../chunks/twitter-card-image-a57df29d.js";import"../../chunks/stores-e20b7872.js";import"../../chunks/WebMentions-745413ea.js";/* empty css                                */var s3="/_app/assets/git-rebase-w-5-72f577bd.webp",u2="/_app/assets/git-rebase-w-5-5a2d55ac.png",r3="/_app/assets/git-rebase-w-4-4ed80686.webp",p2="/_app/assets/git-rebase-w-4-2584a942.png",o3="/_app/assets/git-rebase-w-3-ec2827ca.webp",f2="/_app/assets/git-rebase-w-3-ffc13e9b.png",l3="/_app/assets/git-rebase-w-2-b2000a8d.webp",m2="/_app/assets/git-rebase-w-2-b8b283d7.png",i3="/_app/assets/git-rebase-w-77da260b.webp",g2="/_app/assets/git-rebase-w-11db8095.png",c3="/_app/assets/git-pull-rebase-108e4a1b.gif",n3="/_app/assets/git-rebase-i-edit-8b5613d8.webp",_2="/_app/assets/git-rebase-i-edit-ab47c210.png",d3="/_app/assets/git-rebase-i-edit-8b5613d8.webp",v2="/_app/assets/git-rebase-i-edit-ab47c210.png",h3="/_app/assets/git-rebase-i-squash-9abb4d89.webp",E2="/_app/assets/git-rebase-i-squash-02b80129.png",u3="/_app/assets/git-rebase-i-drop-c37640da.webp",b2="/_app/assets/git-rebase-i-drop-5f9056bc.png",y2="/_app/assets/git-rebase-i-pick-604dbb33.webp",Ac="/_app/assets/git-rebase-i-pick-32a4e89d.png",p3="/_app/assets/git-rebase-b5c1eb8b.webp",w2="/_app/assets/git-rebase-256acea2.jpeg",f3="/_app/assets/git-rebase-2-d5365d9e.gif",m3="/_app/assets/git-rebase-369d0d6d.gif",g3="/_app/assets/git-revert-4-75e51dd4.gif",_3="/_app/assets/git-revert-3-23bca0eb.gif",v3="/_app/assets/git-revert-2-67d081e4.gif",E3="/_app/assets/git-revert-1eb721eb.gif",b3="/_app/assets/git-cherry-pick-8b54a570.gif",y3="/_app/assets/git-reset-c28aebc3.gif",w3="/_app/assets/git-pull-f9956a6f.gif",k3="/_app/assets/git-merge-non-ff-65850ed3.gif",C3="/_app/assets/git-merge-ff-a4be79f5.gif";function O3(xa){let E,se,z,ut,w,C,Ra,Go,Mc,Uc,xo,Lc,qc,Gi,Ha,Ro,zc,xi,He,Ho,pt,Vc,$c,ft,Yc,mt,Fc,Wc,Ri,Ne,No,gt,Bc,jc,re,Kc,Na,Qc,Jc,Ao,Xc,Zc,Mo,en,tn,Hi,V,Uo,_t,an,sn,we,rn,Aa,on,ln,Ma,cn,nn,dn,Lo,vt,v_,hn,Ua,un,Ni,R,qo,Et,pn,fn,ke,mn,La,gn,_n,qa,vn,En,bn,zo,bt,E_,yn,za,wn,kn,Vo,Cn,Ai,$,$o,yt,On,Dn,oe,In,Va,Pn,Tn,$a,Sn,Gn,Ya,xn,Rn,Hn,Yo,wt,b_,Nn,Fa,An,Mi,H,Fo,kt,Mn,Un,Wa,Ba,Ln,qn,zn,fe,ja,Vn,$n,Ka,Yn,Fn,Qa,Wn,Bn,jn,Wo,Ct,y_,Kn,Ja,Qn,Ui,N,Bo,Ot,Jn,Xn,jo,Zn,ed,Ae,Xa,td,ad,Za,sd,rd,od,Ko,Dt,w_,ld,es,id,Li,f,Qo,It,cd,nd,ts,as,dd,hd,ud,M,pd,ss,fd,md,rs,gd,_d,os,vd,Ed,ls,bd,yd,wd,Jo,Pt,k_,kd,is,Cd,Od,Tt,Dd,cs,Id,Pd,Td,Xo,St,C_,Sd,ns,Gd,xd,le,Rd,ds,Hd,Nd,hs,Ad,Md,us,Ud,Ld,qd,ps,fs,zd,Vd,$d,Zo,Gt,O_,Yd,ms,Fd,Wd,S,Bd,gs,jd,Kd,_s,Qd,Jd,vs,Xd,Zd,Es,eh,th,bs,ah,sh,rh,el,xt,D_,oh,ys,lh,qi,p,tl,Rt,ih,ch,ws,ks,nh,dh,hh,D,uh,Cs,ph,fh,Os,mh,gh,Ds,_h,vh,Is,Eh,bh,Ps,yh,wh,Ts,kh,Ch,Oh,Me,Ss,Dh,Ih,Gs,Ph,Th,Sh,al,Ht,I_,Gh,xs,xh,Rh,Rs,Hs,Hh,Nh,Ah,Ue,Ns,Mh,Uh,As,Lh,qh,zh,sl,Nt,P_,Vh,Ms,$h,Yh,rl,Fh,Wh,Ce,ol,Us,Bh,jh,ll,Ls,Kh,Qh,il,qs,Jh,Xh,cl,At,nl,dl,Mt,T_,Zh,zs,eu,tu,hl,au,su,U,Y,Vs,ru,ou,$s,lu,iu,Ys,cu,nu,Fs,du,hu,uu,G,pu,Ws,fu,mu,Bs,gu,_u,js,vu,Eu,Ks,bu,yu,Qs,wu,ku,Cu,Oe,Ou,Js,Du,Iu,Xs,Pu,Tu,Su,L,Gu,Zs,xu,Ru,er,Hu,Nu,tr,Au,Mu,ar,Uu,Lu,qu,ie,zu,sr,Vu,$u,rr,Yu,Fu,or,Wu,Bu,zi,I,ul,Ut,ju,Ku,lr,ir,Qu,Ju,Xu,pl,Lt,fl,ml,qt,S_,Zu,cr,ep,tp,zt,ap,nr,sp,rp,op,dr,S2=`<pre class="prism language-"><code><span class="line">pick #2 commit msg 2</span>
<span class="line">pick #3 commit msg 3</span>
<span class="line">pick #4 commit msg 4</span>
<span class="line">pick #5 commit msg 5</span>
<span class="line">pick #6 commit msg 6</span>
<span class="line"></span>
<span class="line"># Rebase #1..#6 onto #1 (5 commands)</span>
<span class="line">#</span>
<span class="line"># Commands:</span>
<span class="line"># p, pick = use commit</span>
<span class="line"># r, reword = use commit, but edit the commit message</span>
<span class="line"># e, edit = use commit, but stop for amending</span>
<span class="line">...</span></code></pre>`,Vi,F,gl,Vt,lp,ip,_l,cp,np,vl,$t,El,bl,Yt,G_,dp,hr,G2=`<pre class="prism language-"><code><span class="line">pick #2 commit msg 2</span>
<span class="line">pick #3 commit msg 3</span>
<span class="line">pick #4 commit msg 4</span>
<span class="line">pick #5 commit msg 5</span>
<span class="line">pick #6 commit msg 6</span></code></pre>`,$i,W,yl,Ft,hp,up,wl,pp,fp,kl,Wt,Cl,Ol,Bt,x_,mp,ur,x2=`<pre class="prism language-"><code><span class="line">pick #2 commit msg 2</span>
<span class="line">drop #3 commit msg 3</span>
<span class="line">pick #4 commit msg 4</span>
<span class="line">pick #5 commit msg 5</span>
<span class="line">pick #6 commit msg 6</span></code></pre>`,Yi,B,Dl,jt,gp,_p,ce,vp,pr,Ep,bp,fr,yp,wp,mr,kp,Cp,Op,Il,Kt,Pl,Tl,Qt,R_,Dp,gr,R2=`<pre class="prism language-"><code><span class="line">pick   #2 commit msg 2</span>
<span class="line">squash #3 commit msg 3</span>
<span class="line">pick   #4 commit msg 4</span>
<span class="line">fixup  #5 commit msg 5</span>
<span class="line">pick   #6 commit msg 6</span></code></pre>`,Fi,j,Sl,Jt,Ip,Pp,Xt,Tp,_r,Sp,Gp,xp,Gl,Zt,xl,Rl,ea,H_,Rp,vr,H2=`<pre class="prism language-"><code><span class="line">pick   #2 commit msg 2</span>
<span class="line">pick   #3 commit msg 3</span>
<span class="line">break</span>
<span class="line">pick   #4 commit msg 4</span>
<span class="line">pick   #5 commit msg 5</span>
<span class="line">pick   #6 commit msg 6</span></code></pre>`,Wi,K,Hl,ta,Hp,Np,Nl,Ap,Mp,Al,aa,Ml,Ul,sa,N_,Up,Er,N2=`<pre class="prism language-"><code><span class="line">pick   #2 commit msg 2</span>
<span class="line">edit   #3 commit msg 3</span>
<span class="line">pick   #4 commit msg 4</span>
<span class="line">pick   #5 commit msg 5</span>
<span class="line">pick   #6 commit msg 6</span></code></pre>`,Bi,Q,Ll,ra,Lp,qp,De,zp,br,Vp,$p,yr,Yp,Fp,Wp,ql,oa,A_,Bp,wr,jp,ji,m,zl,la,Kp,Qp,ne,Jp,kr,Xp,Zp,Cr,ef,tf,Or,af,sf,rf,Vl,ia,$l,Yl,ca,M_,of,Le,Dr,lf,cf,Ir,nf,df,hf,Fl,na,Wl,Bl,da,U_,uf,Ie,pf,Pr,ff,mf,Tr,gf,_f,vf,jl,ha,Kl,Ql,ua,L_,Ef,de,bf,Sr,yf,wf,Jl,kf,Cf,Gr,Of,Df,If,he,Pf,xr,Tf,Sf,Rr,Gf,xf,Hr,Rf,Hf,Nf,Xl,pa,Zl,ei,fa,q_,Af,Pe,Mf,Nr,Uf,Lf,Ar,qf,zf,Vf,ue,$f,Mr,Yf,Ff,Ur,Wf,Bf,Lr,jf,Kf,Qf,ti,ma,ai,si,ga,z_,Jf,q,Xf,qr,Zf,em,zr,tm,am,Vr,sm,rm,$r,om,lm,im,Te,cm,Yr,nm,dm,Fr,hm,um,Ki,qe,ri,_a,pm,fm,oi,mm,Qi,ze,li,va,gm,_m,ii,vm,Ji,Ve,ci,Ea,Em,bm,ni,ym,Xi,$e,di,ba,wm,km,Wr,Cm,Br,Om,Zi,Ye,hi,ya,Dm,Im,J,jr,Pm,Tm,Kr,Sm,Gm,Qr,xm,Rm,Jr,Hm,Nm,ec,Fe,ui,wa,Am,Mm,Se,Um,Xr,Lm,qm,Zr,zm,Vm,tc,We,pi,ka,$m,Ym,Ca,Fm,eo,Wm,Bm,ac,Be,fi,Oa,jm,Km,pe,Qm,to,Jm,Xm,ao,Zm,eg,so,tg,ag,sc,y,mi,Da,sg,rg,gi,og,lg,Ia,ig,ro,cg,ng,dg,oo,A2=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">$ git bisect start </span><span style="color: var(--shiki-token-comment)"># starts the bisect session</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$ git bisect bad v2.5.1 </span><span style="color: var(--shiki-token-comment)"># specify the commit you know is bad</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$ git bisect good v2.6.13 </span><span style="color: var(--shiki-token-comment)"># specify the commit you knew were good</span></span></code></pre>`,hg,x,ug,lo,pg,fg,io,mg,gg,co,_g,vg,no,Eg,bg,ho,yg,wg,kg,uo,M2='<pre class="prism language-"><code><span class="line">Bisecting: 675 revisions left to test after this (roughly 10 steps)</span></code></pre>',Cg,Ge,Og,po,Dg,Ig,fo,Pg,Tg,Sg,mo,U2=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)"># if it is a good commit</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$ git bisect good</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)"># if it is a bad commit</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$ git bisect bad</span></span></code></pre>`,Gg,Pa,xg,go,Rg,Hg,rc,P,_i,Ta,Ng,Ag,vi,Mg,Ug,k,Ei,Lg,qg,bi,zg,Vg,yi,$g,Yg,wi,Fg,Wg,ki,Bg,jg,Ci,Kg,Qg,Oi,Jg,Xg,Di,Zg,e_,Sa,t_,_o,a_,s_,r_,o_,l_,vo,i_,Eo,c_,oc;return E=new t3({props:{data:[{link:"disclaimer",title:"Disclaimer"},{link:"git-merge",title:"git merge",nested:[{link:"fast-forward-merge",title:"Fast-forward merge"},{link:"non-fast-forward-merge",title:"Non Fast-forward merge"},{link:"git-pull",title:"git pull"}]},{link:"git-reset",title:"git reset"},{link:"git-cherry-pick",title:"git cherry-pick"},{link:"git-revert",title:"git revert"},{link:"git-rebase",title:"git rebase",nested:[{link:"git-rebase-interactive",title:"git rebase --interactive",nested:[{link:"pick",title:"pick"},{link:"drop",title:"drop"},{link:"squash-fixup",title:"squash & fixup"},{link:"break",title:"break"},{link:"edit",title:"edit"}]},{link:"git-pull-rebase",title:"git pull --rebase"},{link:"git-rebase-a-shared-branch",title:"git rebase a shared branch"}]},{link:"git-log",title:"git log",nested:[{link:"since-after-until-before",title:"--since, --after, --until, --before"},{link:"grep",title:"--grep"},{link:"invert-grep",title:"--invert-grep"},{link:"all-match",title:"--all-match"},{link:"min-parents-max-parents-merges-no-merges",title:"--min-parents, --max-parents, --merges, --no-merges"},{link:"first-parent",title:"--first-parent"}]},{link:"git-reflog",title:"git reflog"},{link:"git-bisect",title:"git bisect"},{link:"summary",title:"Summary"}]}}),{c(){C2(E.$$.fragment),se=n(),z=a("p"),ut=o("This week in React Knowledgeable, I did a sharing on Git commands."),w=n(),C=a("p"),Ra=o("The title of the talk was called "),Go=a("strong"),Mc=o('"Git Gudder"'),Uc=o(', because almost a year ago I did a lightning sharing on "Git Gud", '),xo=a("em"),Lc=o("(Get Good)"),qc=o(', this follow up sharing used the comparative of "Git Gud", therefore, "Git Gudder".'),Gi=n(),Ha=a("blockquote"),Ro=a("p"),zc=o('Will there be a "Git Guddest"? \u{1F914}'),xi=n(),He=a("section"),Ho=a("h2"),pt=a("a"),Vc=o("Disclaimer"),$c=n(),ft=a("p"),Yc=o("I am by no means a Git master or anywhere near mastering Git. I do google or "),mt=a("a"),Fc=o("refer to the docs"),Wc=o(" whenever I am unsure of the commands. In this talk, I listed out all the common history manipulation commands Git provides. I hoped that, with it, we are aware of what is available in our toolbox. So, we can look for it whenever we need it."),Ri=n(),Ne=a("section"),No=a("h2"),gt=a("a"),Bc=o("git merge"),jc=n(),re=a("p"),Kc=o("There's 2 kind of "),Na=a("code"),Qc=o("git merge"),Jc=o(", the "),Ao=a("strong"),Xc=o("fast-forward"),Zc=o(" and "),Mo=a("strong"),en=o("non fast-forward"),tn=o("."),Hi=n(),V=a("section"),Uo=a("h3"),_t=a("a"),an=o("Fast-forward merge"),sn=n(),we=a("p"),rn=o("Merging "),Aa=a("code"),on=o("master"),ln=o(" into "),Ma=a("code"),cn=o("branch A"),nn=o(":"),dn=n(),Lo=a("p"),vt=a("img"),hn=n(),Ua=a("div"),un=o("Fast-forward merge"),Ni=n(),R=a("section"),qo=a("h3"),Et=a("a"),pn=o("Non Fast-forward merge"),fn=n(),ke=a("p"),mn=o("Merging "),La=a("code"),gn=o("master"),_n=o(" into "),qa=a("code"),vn=o("branch A"),En=o(":"),bn=n(),zo=a("p"),bt=a("img"),yn=n(),za=a("div"),wn=o("Non fast-forward merge"),kn=n(),Vo=a("p"),Cn=o("Non fast-forward merge will create an extra commit that merges 2 branches."),Ai=n(),$=a("section"),$o=a("h3"),yt=a("a"),On=o("git pull"),Dn=n(),oe=a("p"),In=o("By default, "),Va=a("code"),Pn=o("git pull"),Tn=o(" is "),$a=a("code"),Sn=o("git fetch origin branch"),Gn=o(" + "),Ya=a("code"),xn=o("git merge origin/branch"),Rn=o("."),Hn=n(),Yo=a("p"),wt=a("img"),Nn=n(),Fa=a("div"),An=o("git pull"),Mi=n(),H=a("section"),Fo=a("h2"),kt=a("a"),Mn=o("git reset"),Un=n(),Wa=a("p"),Ba=a("code"),Ln=o("git reset --hard"),qn=o(" allows you to change the reference of where your branch is pointing at."),zn=n(),fe=a("p"),ja=a("code"),Vn=o("git checkout branch-b"),$n=o(", "),Ka=a("code"),Yn=o("git reset --hard branch-a"),Fn=o(", "),Qa=a("code"),Wn=o("git reset --hard #d"),Bn=o(":"),jn=n(),Wo=a("p"),Ct=a("img"),Kn=n(),Ja=a("div"),Qn=o("git reset"),Ui=n(),N=a("section"),Bo=a("h2"),Ot=a("a"),Jn=o("git cherry-pick"),Xn=n(),jo=a("p"),Zn=o("cherry-pick allows you to pick commits from some other branches, tags, or refs."),ed=n(),Ae=a("p"),Xa=a("code"),td=o("git checkout branch-b"),ad=o(", "),Za=a("code"),sd=o("git cherry-pick branch-a"),rd=o(":"),od=n(),Ko=a("p"),Dt=a("img"),ld=n(),es=a("div"),id=o("git cherry-pick"),Li=n(),f=a("section"),Qo=a("h2"),It=a("a"),cd=o("git revert"),nd=n(),ts=a("p"),as=a("code"),dd=o("git revert"),hd=o(" creates a new commit that reverses the change of the commit that you are reverting."),ud=n(),M=a("p"),pd=o("For example, if you accidentally merged "),ss=a("code"),fd=o("feat/a"),md=o(" into "),rs=a("code"),gd=o("master"),_d=o(" branch, you can "),os=a("code"),vd=o("git checkout master"),Ed=o(", "),ls=a("code"),bd=o("git revert #1"),yd=o(":"),wd=n(),Jo=a("p"),Pt=a("img"),kd=n(),is=a("div"),Cd=o("git revert"),Od=n(),Tt=a("p"),Dd=o("If you know merge master into your "),cs=a("code"),Id=o("feat/a"),Pd=o(" branch, you would noticed that all the changes in the branch is gone, because the merge is a fast-forward merge, that includes the revert commit made in the branch:"),Td=n(),Xo=a("p"),St=a("img"),Sd=n(),ns=a("div"),Gd=o("Merging `master` into `feat/a`"),xd=n(),le=a("p"),Rd=o("If you want to recover the changes made in "),ds=a("code"),Hd=o("feat/a"),Nd=o(", you can "),hs=a("code"),Ad=o("revert"),Md=o(" the "),us=a("code"),Ud=o("revert"),Ld=o(":"),qd=n(),ps=a("p"),fs=a("code"),zd=o("git revert ~#1"),Vd=o(":"),$d=n(),Zo=a("p"),Gt=a("img"),Yd=n(),ms=a("div"),Fd=o("git revert the revert"),Wd=n(),S=a("p"),Bd=o("Now, when you are ready to merge your "),gs=a("code"),jd=o("feat/a"),Kd=o(" branch into "),_s=a("code"),Qd=o("master"),Jd=o(", you get the all the changes in "),vs=a("code"),Xd=o("feat/a"),Zd=o(", a commit that revert all that, and a commit that reverts the revert commit, which meant, you still have all the changes in "),Es=a("code"),eh=o("feat/a"),th=o(" in "),bs=a("code"),ah=o("master"),sh=o(":"),rh=n(),el=a("p"),xt=a("img"),oh=n(),ys=a("div"),lh=o("Merging changes back to master"),qi=n(),p=a("section"),tl=a("h2"),Rt=a("a"),ih=o("git rebase"),ch=n(),ws=a("p"),ks=a("code"),nh=o("git rebase"),dh=o(' allows you to "move" commits to a different "base".'),hh=n(),D=a("p"),uh=o("For example, you branched out "),Cs=a("code"),ph=o("branch-a"),fh=o(" from "),Os=a("code"),mh=o("master"),gh=o(" a while ago, and "),Ds=a("code"),_h=o("master"),vh=o(" has made a few more commits. But if you merge your branch into master now, it would be a non fast-forward merge, creating an extra commit to the history. If you want a clean, one-line history, you can do a "),Is=a("code"),Eh=o("rebase"),bh=o(", replaying commits that you have made in "),Ps=a("code"),yh=o("branch-a"),wh=o(" on top of the latest "),Ts=a("code"),kh=o("master"),Ch=o("."),Oh=n(),Me=a("p"),Ss=a("code"),Dh=o("git checkout branch-a"),Ih=o(", "),Gs=a("code"),Ph=o("git rebase master"),Th=o(":"),Sh=n(),al=a("p"),Ht=a("img"),Gh=n(),xs=a("div"),xh=o("git rebase"),Rh=n(),Rs=a("p"),Hs=a("code"),Hh=o("git rebase"),Nh=o(" does not have to be on top of the branch that you branched out, you can rebase to anywhere:"),Ah=n(),Ue=a("p"),Ns=a("code"),Mh=o("git checkout branch-a"),Uh=o(", "),As=a("code"),Lh=o("git rebase --onto branch-b master branch-a"),qh=o(":"),zh=n(),sl=a("p"),Nt=a("img"),Vh=n(),Ms=a("div"),$h=o("git rebase"),Yh=n(),rl=a("p"),Fh=o("There's 3 reference point you should know when doing a git rebase:"),Wh=n(),Ce=a("ul"),ol=a("li"),Us=a("code"),Bh=o("<new base>"),jh=n(),ll=a("li"),Ls=a("code"),Kh=o("<upstream>"),Qh=n(),il=a("li"),qs=a("code"),Jh=o("<branch>"),Xh=n(),cl=a("p"),At=a("picture"),nl=a("source"),dl=a("source"),Mt=a("img"),Zh=n(),zs=a("div"),eu=o("git rebase"),tu=n(),hl=a("p"),au=o("Here are a few things you should know:"),su=n(),U=a("ul"),Y=a("li"),Vs=a("code"),ru=o("git rebase"),ou=o(" will replay the commits from "),$s=a("code"),lu=o("<upstream>"),iu=o(" to "),Ys=a("code"),cu=o("<branch>"),nu=o(" onto "),Fs=a("code"),du=o("<new base>"),hu=o("."),uu=n(),G=a("li"),pu=o("If you specify "),Ws=a("code"),fu=o("<upstream>"),mu=o(" as a branch name, "),Bs=a("code"),gu=o("git rebase"),_u=o(" will replay commits from the common ancestor of "),js=a("code"),vu=o("<upstream>"),Eu=o(" and "),Ks=a("code"),bu=o("<branch>"),yu=o(" to "),Qs=a("code"),wu=o("<branch>"),ku=o("."),Cu=n(),Oe=a("li"),Ou=o("If you do not specify "),Js=a("code"),Du=o("<branch>"),Iu=o(", the default is the "),Xs=a("code"),Pu=o("HEAD"),Tu=o(", current commit you are at now."),Su=n(),L=a("li"),Gu=o("If you do not specify "),Zs=a("code"),xu=o("--onto <new base>"),Ru=o(", the new base will be default to "),er=a("code"),Hu=o("<upsttream>"),Nu=o(", that's why "),tr=a("code"),Au=o("git rebase master"),Mu=o(" is equivalent to "),ar=a("code"),Uu=o("git rebase --onto master master"),Lu=o("."),qu=n(),ie=a("li"),zu=o("If you do not specify "),sr=a("code"),Vu=o("<upstream>"),$u=o(", it will be the upstream of the current branch. So "),rr=a("code"),Yu=o("git rebase"),Fu=o(" is equivalent to "),or=a("code"),Wu=o("git rebase <origin/current-branch>"),Bu=o("."),zi=n(),I=a("section"),ul=a("h3"),Ut=a("a"),ju=o("git rebase --interactive"),Ku=n(),lr=a("p"),ir=a("code"),Qu=o("git rebase"),Ju=o(" has an interactive mode, which allows you to specify instructions while replaying commits during a rebase."),Xu=n(),pl=a("p"),Lt=a("picture"),fl=a("source"),ml=a("source"),qt=a("img"),Zu=n(),cr=a("div"),ep=o("git rebase interactive"),tp=n(),zt=a("p"),ap=o("When you run "),nr=a("code"),sp=o("git rebase --interactive"),rp=o(", git will prompt you with an editor to edit the instructions. In it, you will see a list of commits that will be replayed:"),op=n(),dr=a("div"),Vi=n(),F=a("section"),gl=a("h4"),Vt=a("a"),lp=o("pick"),ip=n(),_l=a("p"),cp=o("The default instruction. Will just use the commit while replaying:"),np=n(),vl=a("p"),$t=a("picture"),El=a("source"),bl=a("source"),Yt=a("img"),dp=n(),hr=a("div"),$i=n(),W=a("section"),yl=a("h4"),Ft=a("a"),hp=o("drop"),up=n(),wl=a("p"),pp=o("Drop will omit the commit:"),fp=n(),kl=a("p"),Wt=a("picture"),Cl=a("source"),Ol=a("source"),Bt=a("img"),mp=n(),ur=a("div"),Yi=n(),B=a("section"),Dl=a("h4"),jt=a("a"),gp=o("squash & fixup"),_p=n(),ce=a("p"),vp=o("Squash & Fixup will combine your commit with the previous commit, the only difference is that with "),pr=a("code"),Ep=o("squash"),bp=o(", git will prompt you to edit the commit message of the combined commit, while "),fr=a("code"),yp=o("fixup"),wp=o(" will drop the commit of the "),mr=a("code"),kp=o("fixup"),Cp=o("ed commit."),Op=n(),Il=a("p"),Kt=a("picture"),Pl=a("source"),Tl=a("source"),Qt=a("img"),Dp=n(),gr=a("div"),Fi=n(),j=a("section"),Sl=a("h4"),Jt=a("a"),Ip=o("break"),Pp=n(),Xt=a("p"),Tp=o("Pause the rebase. You can do add more commits here if you want. When you are done, make sure that your workspace and stage is clean, run "),_r=a("code"),Sp=o("git rebase --continue"),Gp=o(" to continue."),xp=n(),Gl=a("p"),Zt=a("picture"),xl=a("source"),Rl=a("source"),ea=a("img"),Rp=n(),vr=a("div"),Wi=n(),K=a("section"),Hl=a("h4"),ta=a("a"),Hp=o("edit"),Np=n(),Nl=a("p"),Ap=o("Pause the rebase at the commit that you are editing, before the commit has been commited. You can add, remove or ammend your files before continue the rebase process."),Mp=n(),Al=a("p"),aa=a("picture"),Ml=a("source"),Ul=a("source"),sa=a("img"),Up=n(),Er=a("div"),Bi=n(),Q=a("section"),Ll=a("h3"),ra=a("a"),Lp=o("git pull --rebase"),qp=n(),De=a("p"),zp=o("There's a rebase mode for git pull, where it will be "),br=a("code"),Vp=o("git fetch origin branch"),$p=o(" + "),yr=a("code"),Yp=o("git rebase origin/branch"),Fp=o("."),Wp=n(),ql=a("p"),oa=a("img"),Bp=n(),wr=a("div"),jp=o("git pull --rebase"),ji=n(),m=a("section"),zl=a("h3"),la=a("a"),Kp=o("git rebase a shared branch"),Qp=n(),ne=a("p"),Jp=o("Say "),kr=a("code"),Xp=o("x"),Zp=o(" and "),Cr=a("code"),ef=o("y"),tf=o(" are working on the "),Or=a("code"),af=o("feat/a"),sf=o(" branch."),rf=n(),Vl=a("p"),ia=a("picture"),$l=a("source"),Yl=a("source"),ca=a("img"),of=n(),Le=a("p"),Dr=a("code"),lf=o("x"),cf=o(" decided to rebase the "),Ir=a("code"),nf=o("feat/a"),df=o(" branch to squash and drop some commits:"),hf=n(),Fl=a("p"),na=a("picture"),Wl=a("source"),Bl=a("source"),da=a("img"),uf=n(),Ie=a("p"),pf=o("While "),Pr=a("code"),ff=o("x"),mf=o(" had done that, that was just a part of the whole picture. Because the "),Tr=a("code"),gf=o("rebase"),_f=o(" on his local machine changed the git history on his local copy only."),vf=n(),jl=a("p"),ha=a("picture"),Kl=a("source"),Ql=a("source"),ua=a("img"),Ef=n(),de=a("p"),bf=o("To make the change on the remote server as well, "),Sr=a("code"),yf=o("x"),wf=o(" forced push his branch to the remote server. ("),Jl=a("strong"),kf=o("Note:"),Cf=o(" You can push without "),Gr=a("code"),Of=o("--force"),Df=o(" if the origin branch cannot fast-forward merge your local branch)"),If=n(),he=a("p"),Pf=o("While "),xr=a("code"),Tf=o("y"),Sf=o(" on the other hand, did not know about the "),Rr=a("code"),Gf=o("rebase"),xf=o(", so when "),Hr=a("code"),Rf=o("y"),Hf=o(" pulled the code, it ended up with a messed up merged of a messed up git history:"),Nf=n(),Xl=a("p"),pa=a("picture"),Zl=a("source"),ei=a("source"),fa=a("img"),Af=n(),Pe=a("p"),Mf=o("In most cases, there would be a merge conflict, because "),Nr=a("code"),Uf=o("x"),Lf=o(" and "),Ar=a("code"),qf=o("y"),zf=o("'s branch would have made changes on the same file."),Vf=n(),ue=a("p"),$f=o("So, the correct way, if the rebase is necessary, is to notify "),Mr=a("code"),Yf=o("y"),Ff=o(" about the rebase, so that "),Ur=a("code"),Wf=o("y"),Bf=o(" can "),Lr=a("code"),jf=o("git reset --hard"),Kf=o(" his branch to the remote branch."),Qf=n(),ti=a("p"),ma=a("picture"),ai=a("source"),si=a("source"),ga=a("img"),Jf=n(),q=a("p"),Xf=o("If unfortunately, at the same time, "),qr=a("code"),Zf=o("y"),em=o(" has made more commits to his local branch, he would have to "),zr=a("code"),tm=o("git rebase"),am=o(" the new changes onto the remote branch, or "),Vr=a("code"),sm=o("git cherry-pick"),rm=o(" the new changes after the "),$r=a("code"),om=o("git reset --hard"),lm=o("."),im=n(),Te=a("p"),cm=o("In the companies that I have worked with, forbidden a "),Yr=a("code"),nm=o("rebase"),dm=o(" on a common branch, especially the "),Fr=a("code"),hm=o("master"),um=o(" branch."),Ki=n(),qe=a("section"),ri=a("h2"),_a=a("a"),pm=o("git log"),fm=n(),oi=a("p"),mm=o("The go-to command to look at your git history. There's a few options that is worth mentioning, that allow us to search through the sea of commits:"),Qi=n(),ze=a("section"),li=a("h3"),va=a("a"),gm=o("--since, --after, --until, --before"),_m=n(),ii=a("p"),vm=o("You can filter out commits within a specific timeframe"),Ji=n(),Ve=a("section"),ci=a("h3"),Ea=a("a"),Em=o("--grep"),bm=n(),ni=a("p"),ym=o("You can filter out commits based on commit message"),Xi=n(),$e=a("section"),di=a("h3"),ba=a("a"),wm=o("--invert-grep"),km=n(),Wr=a("p"),Cm=o("You can filter out commits that does not match the "),Br=a("code"),Om=o("--grep"),Zi=n(),Ye=a("section"),hi=a("h3"),ya=a("a"),Dm=o("--all-match"),Im=n(),J=a("p"),jr=a("code"),Pm=o("--grep"),Tm=o(" is a "),Kr=a("code"),Sm=o("OR"),Gm=o(" filter, "),Qr=a("code"),xm=o("--all-match"),Rm=o(" make it a "),Jr=a("code"),Hm=o("AND"),Nm=o(" filter"),ec=n(),Fe=a("section"),ui=a("h3"),wa=a("a"),Am=o("--min-parents, --max-parents, --merges, --no-merges"),Mm=n(),Se=a("p"),Um=o("You can specify commits with the number of parents. A simple merge commit has 2 parent, so "),Xr=a("code"),Lm=o("--merge"),qm=o(" is equivalent to "),Zr=a("code"),zm=o("--min-parents=2"),Vm=o("."),tc=n(),We=a("section"),pi=a("h3"),ka=a("a"),$m=o("--first-parent"),Ym=n(),Ca=a("p"),Fm=o("You can follow only the first parent commit upon seeing a merge commit. This is especially useful when you have merged of branches in, "),eo=a("code"),Wm=o("--first-parent"),Bm=o(" allow you to filter out only the merge commit and the commit you have made on the current branch."),ac=n(),Be=a("section"),fi=a("h2"),Oa=a("a"),jm=o("git reflog"),Km=n(),pe=a("p"),Qm=o("The reference log shows you all the "),to=a("code"),Jm=o("HEAD"),Xm=o(" position you have been to. This is especially useful when you have "),ao=a("code"),Zm=o("reset --hard"),eg=o(" or "),so=a("code"),tg=o("rebase"),ag=o(", you can still find back the commit reference that you were at previously, so you can recover them."),sc=n(),y=a("section"),mi=a("h2"),Da=a("a"),sg=o("git bisect"),rg=n(),gi=a("p"),og=o("This is a useful command that I am looking forward to use it."),lg=n(),Ia=a("p"),ig=o("Often times when you noticed something has changed / break / less optimised, yet you do not know when this change was introduced into your repository. "),ro=a("code"),cg=o("git bisect"),ng=o(" allows you to do binary search on the history, so that you can quickly pin down the commit where the change was introduced."),dg=n(),oo=a("div"),hg=n(),x=a("p"),ug=o("Once you've specified at least one "),lo=a("code"),pg=o("bad"),fg=o(" and one "),io=a("code"),mg=o("good"),gg=o(" commit, "),co=a("code"),_g=o("git bisect"),vg=o(" will find and checkout to a commit in the middle of that range between "),no=a("code"),Eg=o("bad"),bg=o(" and "),ho=a("code"),yg=o("good"),wg=o(" and greets you with:"),kg=n(),uo=a("div"),Cg=n(),Ge=a("p"),Og=o("You can know test / verify / profile your code, and specify whether the current commit is a "),po=a("code"),Dg=o("good"),Ig=o(" commit or a "),fo=a("code"),Pg=o("bad"),Tg=o(" commit:"),Sg=n(),mo=a("div"),Gg=n(),Pa=a("p"),xg=o("Continue doing it until eventually there's no more commit to inspect. "),go=a("code"),Rg=o("git bisect"),Hg=o(" will print out the description of the first bad commit."),rc=n(),P=a("section"),_i=a("h2"),Ta=a("a"),Ng=o("Summary"),Ag=n(),vi=a("p"),Mg=o("We've gone through the following git commands:"),Ug=n(),k=a("ul"),Ei=a("li"),Lg=o("git merge"),qg=n(),bi=a("li"),zg=o("git reset"),Vg=n(),yi=a("li"),$g=o("git cherry-pick"),Yg=n(),wi=a("li"),Fg=o("git revert"),Wg=n(),ki=a("li"),Bg=o("git rebase"),jg=n(),Ci=a("li"),Kg=o("git log"),Qg=n(),Oi=a("li"),Jg=o("git reflog"),Xg=n(),Di=a("li"),Zg=o("git bisect"),e_=n(),Sa=a("p"),t_=o("Hopefully we are now "),_o=a("code"),a_=o("git gudder"),s_=o(" than before!"),r_=n(),o_=a("hr"),l_=n(),vo=a("p"),i_=o("Related topic: "),Eo=a("a"),c_=o("Git commits went missing after a rebase"),this.h()},l(c){O2(E.$$.fragment,c),se=d(c),z=s(c,"P",{});var h=r(z);ut=l(h,"This week in React Knowledgeable, I did a sharing on Git commands."),h.forEach(t),w=d(c),C=s(c,"P",{});var bo=r(C);Ra=l(bo,"The title of the talk was called "),Go=s(bo,"STRONG",{});var V_=r(Go);Mc=l(V_,'"Git Gudder"'),V_.forEach(t),Uc=l(bo,', because almost a year ago I did a lightning sharing on "Git Gud", '),xo=s(bo,"EM",{});var $_=r(xo);Lc=l($_,"(Get Good)"),$_.forEach(t),qc=l(bo,', this follow up sharing used the comparative of "Git Gud", therefore, "Git Gudder".'),bo.forEach(t),Gi=d(c),Ha=s(c,"BLOCKQUOTE",{});var Y_=r(Ha);Ro=s(Y_,"P",{});var F_=r(Ro);zc=l(F_,'Will there be a "Git Guddest"? \u{1F914}'),F_.forEach(t),Y_.forEach(t),xi=d(c),He=s(c,"SECTION",{});var lc=r(He);Ho=s(lc,"H2",{});var W_=r(Ho);pt=s(W_,"A",{href:!0,id:!0});var B_=r(pt);Vc=l(B_,"Disclaimer"),B_.forEach(t),W_.forEach(t),$c=d(lc),ft=s(lc,"P",{});var ic=r(ft);Yc=l(ic,"I am by no means a Git master or anywhere near mastering Git. I do google or "),mt=s(ic,"A",{href:!0,rel:!0});var j_=r(mt);Fc=l(j_,"refer to the docs"),j_.forEach(t),Wc=l(ic," whenever I am unsure of the commands. In this talk, I listed out all the common history manipulation commands Git provides. I hoped that, with it, we are aware of what is available in our toolbox. So, we can look for it whenever we need it."),ic.forEach(t),lc.forEach(t),Ri=d(c),Ne=s(c,"SECTION",{});var cc=r(Ne);No=s(cc,"H2",{});var K_=r(No);gt=s(K_,"A",{href:!0,id:!0});var Q_=r(gt);Bc=l(Q_,"git merge"),Q_.forEach(t),K_.forEach(t),jc=d(cc),re=s(cc,"P",{});var je=r(re);Kc=l(je,"There's 2 kind of "),Na=s(je,"CODE",{class:!0});var J_=r(Na);Qc=l(J_,"git merge"),J_.forEach(t),Jc=l(je,", the "),Ao=s(je,"STRONG",{});var X_=r(Ao);Xc=l(X_,"fast-forward"),X_.forEach(t),Zc=l(je," and "),Mo=s(je,"STRONG",{});var Z_=r(Mo);en=l(Z_,"non fast-forward"),Z_.forEach(t),tn=l(je,"."),je.forEach(t),cc.forEach(t),Hi=d(c),V=s(c,"SECTION",{});var Ke=r(V);Uo=s(Ke,"H3",{});var ev=r(Uo);_t=s(ev,"A",{href:!0,id:!0});var tv=r(_t);an=l(tv,"Fast-forward merge"),tv.forEach(t),ev.forEach(t),sn=d(Ke),we=s(Ke,"P",{});var yo=r(we);rn=l(yo,"Merging "),Aa=s(yo,"CODE",{class:!0});var av=r(Aa);on=l(av,"master"),av.forEach(t),ln=l(yo," into "),Ma=s(yo,"CODE",{class:!0});var sv=r(Ma);cn=l(sv,"branch A"),sv.forEach(t),nn=l(yo,":"),yo.forEach(t),dn=d(Ke),Lo=s(Ke,"P",{});var rv=r(Lo);vt=s(rv,"IMG",{src:!0,loading:!0,alt:!0}),rv.forEach(t),hn=d(Ke),Ua=s(Ke,"DIV",{class:!0});var ov=r(Ua);un=l(ov,"Fast-forward merge"),ov.forEach(t),Ke.forEach(t),Ni=d(c),R=s(c,"SECTION",{});var me=r(R);qo=s(me,"H3",{});var lv=r(qo);Et=s(lv,"A",{href:!0,id:!0});var iv=r(Et);pn=l(iv,"Non Fast-forward merge"),iv.forEach(t),lv.forEach(t),fn=d(me),ke=s(me,"P",{});var wo=r(ke);mn=l(wo,"Merging "),La=s(wo,"CODE",{class:!0});var cv=r(La);gn=l(cv,"master"),cv.forEach(t),_n=l(wo," into "),qa=s(wo,"CODE",{class:!0});var nv=r(qa);vn=l(nv,"branch A"),nv.forEach(t),En=l(wo,":"),wo.forEach(t),bn=d(me),zo=s(me,"P",{});var dv=r(zo);bt=s(dv,"IMG",{src:!0,loading:!0,alt:!0}),dv.forEach(t),yn=d(me),za=s(me,"DIV",{class:!0});var hv=r(za);wn=l(hv,"Non fast-forward merge"),hv.forEach(t),kn=d(me),Vo=s(me,"P",{});var uv=r(Vo);Cn=l(uv,"Non fast-forward merge will create an extra commit that merges 2 branches."),uv.forEach(t),me.forEach(t),Ai=d(c),$=s(c,"SECTION",{});var Qe=r($);$o=s(Qe,"H3",{});var pv=r($o);yt=s(pv,"A",{href:!0,id:!0});var fv=r(yt);On=l(fv,"git pull"),fv.forEach(t),pv.forEach(t),Dn=d(Qe),oe=s(Qe,"P",{});var Je=r(oe);In=l(Je,"By default, "),Va=s(Je,"CODE",{class:!0});var mv=r(Va);Pn=l(mv,"git pull"),mv.forEach(t),Tn=l(Je," is "),$a=s(Je,"CODE",{class:!0});var gv=r($a);Sn=l(gv,"git fetch origin branch"),gv.forEach(t),Gn=l(Je," + "),Ya=s(Je,"CODE",{class:!0});var _v=r(Ya);xn=l(_v,"git merge origin/branch"),_v.forEach(t),Rn=l(Je,"."),Je.forEach(t),Hn=d(Qe),Yo=s(Qe,"P",{});var vv=r(Yo);wt=s(vv,"IMG",{src:!0,loading:!0,alt:!0}),vv.forEach(t),Nn=d(Qe),Fa=s(Qe,"DIV",{class:!0});var Ev=r(Fa);An=l(Ev,"git pull"),Ev.forEach(t),Qe.forEach(t),Mi=d(c),H=s(c,"SECTION",{});var ge=r(H);Fo=s(ge,"H2",{});var bv=r(Fo);kt=s(bv,"A",{href:!0,id:!0});var yv=r(kt);Mn=l(yv,"git reset"),yv.forEach(t),bv.forEach(t),Un=d(ge),Wa=s(ge,"P",{});var n_=r(Wa);Ba=s(n_,"CODE",{class:!0});var wv=r(Ba);Ln=l(wv,"git reset --hard"),wv.forEach(t),qn=l(n_," allows you to change the reference of where your branch is pointing at."),n_.forEach(t),zn=d(ge),fe=s(ge,"P",{});var Ga=r(fe);ja=s(Ga,"CODE",{class:!0});var kv=r(ja);Vn=l(kv,"git checkout branch-b"),kv.forEach(t),$n=l(Ga,", "),Ka=s(Ga,"CODE",{class:!0});var Cv=r(Ka);Yn=l(Cv,"git reset --hard branch-a"),Cv.forEach(t),Fn=l(Ga,", "),Qa=s(Ga,"CODE",{class:!0});var Ov=r(Qa);Wn=l(Ov,"git reset --hard #d"),Ov.forEach(t),Bn=l(Ga,":"),Ga.forEach(t),jn=d(ge),Wo=s(ge,"P",{});var Dv=r(Wo);Ct=s(Dv,"IMG",{src:!0,loading:!0,alt:!0}),Dv.forEach(t),Kn=d(ge),Ja=s(ge,"DIV",{class:!0});var Iv=r(Ja);Qn=l(Iv,"git reset"),Iv.forEach(t),ge.forEach(t),Ui=d(c),N=s(c,"SECTION",{});var _e=r(N);Bo=s(_e,"H2",{});var Pv=r(Bo);Ot=s(Pv,"A",{href:!0,id:!0});var Tv=r(Ot);Jn=l(Tv,"git cherry-pick"),Tv.forEach(t),Pv.forEach(t),Xn=d(_e),jo=s(_e,"P",{});var Sv=r(jo);Zn=l(Sv,"cherry-pick allows you to pick commits from some other branches, tags, or refs."),Sv.forEach(t),ed=d(_e),Ae=s(_e,"P",{});var Ii=r(Ae);Xa=s(Ii,"CODE",{class:!0});var Gv=r(Xa);td=l(Gv,"git checkout branch-b"),Gv.forEach(t),ad=l(Ii,", "),Za=s(Ii,"CODE",{class:!0});var xv=r(Za);sd=l(xv,"git cherry-pick branch-a"),xv.forEach(t),rd=l(Ii,":"),Ii.forEach(t),od=d(_e),Ko=s(_e,"P",{});var Rv=r(Ko);Dt=s(Rv,"IMG",{src:!0,loading:!0,alt:!0}),Rv.forEach(t),ld=d(_e),es=s(_e,"DIV",{class:!0});var Hv=r(es);id=l(Hv,"git cherry-pick"),Hv.forEach(t),_e.forEach(t),Li=d(c),f=s(c,"SECTION",{});var _=r(f);Qo=s(_,"H2",{});var Nv=r(Qo);It=s(Nv,"A",{href:!0,id:!0});var Av=r(It);cd=l(Av,"git revert"),Av.forEach(t),Nv.forEach(t),nd=d(_),ts=s(_,"P",{});var d_=r(ts);as=s(d_,"CODE",{class:!0});var Mv=r(as);dd=l(Mv,"git revert"),Mv.forEach(t),hd=l(d_," creates a new commit that reverses the change of the commit that you are reverting."),d_.forEach(t),ud=d(_),M=s(_,"P",{});var ve=r(M);pd=l(ve,"For example, if you accidentally merged "),ss=s(ve,"CODE",{class:!0});var Uv=r(ss);fd=l(Uv,"feat/a"),Uv.forEach(t),md=l(ve," into "),rs=s(ve,"CODE",{class:!0});var Lv=r(rs);gd=l(Lv,"master"),Lv.forEach(t),_d=l(ve," branch, you can "),os=s(ve,"CODE",{class:!0});var qv=r(os);vd=l(qv,"git checkout master"),qv.forEach(t),Ed=l(ve,", "),ls=s(ve,"CODE",{class:!0});var zv=r(ls);bd=l(zv,"git revert #1"),zv.forEach(t),yd=l(ve,":"),ve.forEach(t),wd=d(_),Jo=s(_,"P",{});var Vv=r(Jo);Pt=s(Vv,"IMG",{src:!0,loading:!0,alt:!0}),Vv.forEach(t),kd=d(_),is=s(_,"DIV",{class:!0});var $v=r(is);Cd=l($v,"git revert"),$v.forEach(t),Od=d(_),Tt=s(_,"P",{});var nc=r(Tt);Dd=l(nc,"If you know merge master into your "),cs=s(nc,"CODE",{class:!0});var Yv=r(cs);Id=l(Yv,"feat/a"),Yv.forEach(t),Pd=l(nc," branch, you would noticed that all the changes in the branch is gone, because the merge is a fast-forward merge, that includes the revert commit made in the branch:"),nc.forEach(t),Td=d(_),Xo=s(_,"P",{});var Fv=r(Xo);St=s(Fv,"IMG",{src:!0,loading:!0,alt:!0}),Fv.forEach(t),Sd=d(_),ns=s(_,"DIV",{class:!0});var Wv=r(ns);Gd=l(Wv,"Merging `master` into `feat/a`"),Wv.forEach(t),xd=d(_),le=s(_,"P",{});var Xe=r(le);Rd=l(Xe,"If you want to recover the changes made in "),ds=s(Xe,"CODE",{class:!0});var Bv=r(ds);Hd=l(Bv,"feat/a"),Bv.forEach(t),Nd=l(Xe,", you can "),hs=s(Xe,"CODE",{class:!0});var jv=r(hs);Ad=l(jv,"revert"),jv.forEach(t),Md=l(Xe," the "),us=s(Xe,"CODE",{class:!0});var Kv=r(us);Ud=l(Kv,"revert"),Kv.forEach(t),Ld=l(Xe,":"),Xe.forEach(t),qd=d(_),ps=s(_,"P",{});var h_=r(ps);fs=s(h_,"CODE",{class:!0});var Qv=r(fs);zd=l(Qv,"git revert ~#1"),Qv.forEach(t),Vd=l(h_,":"),h_.forEach(t),$d=d(_),Zo=s(_,"P",{});var Jv=r(Zo);Gt=s(Jv,"IMG",{src:!0,loading:!0,alt:!0}),Jv.forEach(t),Yd=d(_),ms=s(_,"DIV",{class:!0});var Xv=r(ms);Fd=l(Xv,"git revert the revert"),Xv.forEach(t),Wd=d(_),S=s(_,"P",{});var X=r(S);Bd=l(X,"Now, when you are ready to merge your "),gs=s(X,"CODE",{class:!0});var Zv=r(gs);jd=l(Zv,"feat/a"),Zv.forEach(t),Kd=l(X," branch into "),_s=s(X,"CODE",{class:!0});var e1=r(_s);Qd=l(e1,"master"),e1.forEach(t),Jd=l(X,", you get the all the changes in "),vs=s(X,"CODE",{class:!0});var t1=r(vs);Xd=l(t1,"feat/a"),t1.forEach(t),Zd=l(X,", a commit that revert all that, and a commit that reverts the revert commit, which meant, you still have all the changes in "),Es=s(X,"CODE",{class:!0});var a1=r(Es);eh=l(a1,"feat/a"),a1.forEach(t),th=l(X," in "),bs=s(X,"CODE",{class:!0});var s1=r(bs);ah=l(s1,"master"),s1.forEach(t),sh=l(X,":"),X.forEach(t),rh=d(_),el=s(_,"P",{});var r1=r(el);xt=s(r1,"IMG",{src:!0,loading:!0,alt:!0}),r1.forEach(t),oh=d(_),ys=s(_,"DIV",{class:!0});var o1=r(ys);lh=l(o1,"Merging changes back to master"),o1.forEach(t),_.forEach(t),qi=d(c),p=s(c,"SECTION",{});var g=r(p);tl=s(g,"H2",{});var l1=r(tl);Rt=s(l1,"A",{href:!0,id:!0});var i1=r(Rt);ih=l(i1,"git rebase"),i1.forEach(t),l1.forEach(t),ch=d(g),ws=s(g,"P",{});var u_=r(ws);ks=s(u_,"CODE",{class:!0});var c1=r(ks);nh=l(c1,"git rebase"),c1.forEach(t),dh=l(u_,' allows you to "move" commits to a different "base".'),u_.forEach(t),hh=d(g),D=s(g,"P",{});var A=r(D);uh=l(A,"For example, you branched out "),Cs=s(A,"CODE",{class:!0});var n1=r(Cs);ph=l(n1,"branch-a"),n1.forEach(t),fh=l(A," from "),Os=s(A,"CODE",{class:!0});var d1=r(Os);mh=l(d1,"master"),d1.forEach(t),gh=l(A," a while ago, and "),Ds=s(A,"CODE",{class:!0});var h1=r(Ds);_h=l(h1,"master"),h1.forEach(t),vh=l(A," has made a few more commits. But if you merge your branch into master now, it would be a non fast-forward merge, creating an extra commit to the history. If you want a clean, one-line history, you can do a "),Is=s(A,"CODE",{class:!0});var u1=r(Is);Eh=l(u1,"rebase"),u1.forEach(t),bh=l(A,", replaying commits that you have made in "),Ps=s(A,"CODE",{class:!0});var p1=r(Ps);yh=l(p1,"branch-a"),p1.forEach(t),wh=l(A," on top of the latest "),Ts=s(A,"CODE",{class:!0});var f1=r(Ts);kh=l(f1,"master"),f1.forEach(t),Ch=l(A,"."),A.forEach(t),Oh=d(g),Me=s(g,"P",{});var Pi=r(Me);Ss=s(Pi,"CODE",{class:!0});var m1=r(Ss);Dh=l(m1,"git checkout branch-a"),m1.forEach(t),Ih=l(Pi,", "),Gs=s(Pi,"CODE",{class:!0});var g1=r(Gs);Ph=l(g1,"git rebase master"),g1.forEach(t),Th=l(Pi,":"),Pi.forEach(t),Sh=d(g),al=s(g,"P",{});var _1=r(al);Ht=s(_1,"IMG",{src:!0,loading:!0,alt:!0}),_1.forEach(t),Gh=d(g),xs=s(g,"DIV",{class:!0});var v1=r(xs);xh=l(v1,"git rebase"),v1.forEach(t),Rh=d(g),Rs=s(g,"P",{});var p_=r(Rs);Hs=s(p_,"CODE",{class:!0});var E1=r(Hs);Hh=l(E1,"git rebase"),E1.forEach(t),Nh=l(p_," does not have to be on top of the branch that you branched out, you can rebase to anywhere:"),p_.forEach(t),Ah=d(g),Ue=s(g,"P",{});var Ti=r(Ue);Ns=s(Ti,"CODE",{class:!0});var b1=r(Ns);Mh=l(b1,"git checkout branch-a"),b1.forEach(t),Uh=l(Ti,", "),As=s(Ti,"CODE",{class:!0});var y1=r(As);Lh=l(y1,"git rebase --onto branch-b master branch-a"),y1.forEach(t),qh=l(Ti,":"),Ti.forEach(t),zh=d(g),sl=s(g,"P",{});var w1=r(sl);Nt=s(w1,"IMG",{src:!0,loading:!0,alt:!0}),w1.forEach(t),Vh=d(g),Ms=s(g,"DIV",{class:!0});var k1=r(Ms);$h=l(k1,"git rebase"),k1.forEach(t),Yh=d(g),rl=s(g,"P",{});var C1=r(rl);Fh=l(C1,"There's 3 reference point you should know when doing a git rebase:"),C1.forEach(t),Wh=d(g),Ce=s(g,"UL",{});var ko=r(Ce);ol=s(ko,"LI",{});var O1=r(ol);Us=s(O1,"CODE",{class:!0});var D1=r(Us);Bh=l(D1,"<new base>"),D1.forEach(t),O1.forEach(t),jh=d(ko),ll=s(ko,"LI",{});var I1=r(ll);Ls=s(I1,"CODE",{class:!0});var P1=r(Ls);Kh=l(P1,"<upstream>"),P1.forEach(t),I1.forEach(t),Qh=d(ko),il=s(ko,"LI",{});var T1=r(il);qs=s(T1,"CODE",{class:!0});var S1=r(qs);Jh=l(S1,"<branch>"),S1.forEach(t),T1.forEach(t),ko.forEach(t),Xh=d(g),cl=s(g,"P",{});var G1=r(cl);At=s(G1,"PICTURE",{});var dc=r(At);nl=s(dc,"SOURCE",{type:!0,srcset:!0}),dl=s(dc,"SOURCE",{type:!0,srcset:!0}),Mt=s(dc,"IMG",{src:!0,loading:!0,alt:!0}),dc.forEach(t),G1.forEach(t),Zh=d(g),zs=s(g,"DIV",{class:!0});var x1=r(zs);eu=l(x1,"git rebase"),x1.forEach(t),tu=d(g),hl=s(g,"P",{});var R1=r(hl);au=l(R1,"Here are a few things you should know:"),R1.forEach(t),su=d(g),U=s(g,"UL",{});var Ee=r(U);Y=s(Ee,"LI",{});var xe=r(Y);Vs=s(xe,"CODE",{class:!0});var H1=r(Vs);ru=l(H1,"git rebase"),H1.forEach(t),ou=l(xe," will replay the commits from "),$s=s(xe,"CODE",{class:!0});var N1=r($s);lu=l(N1,"<upstream>"),N1.forEach(t),iu=l(xe," to "),Ys=s(xe,"CODE",{class:!0});var A1=r(Ys);cu=l(A1,"<branch>"),A1.forEach(t),nu=l(xe," onto "),Fs=s(xe,"CODE",{class:!0});var M1=r(Fs);du=l(M1,"<new base>"),M1.forEach(t),hu=l(xe,"."),xe.forEach(t),uu=d(Ee),G=s(Ee,"LI",{});var Z=r(G);pu=l(Z,"If you specify "),Ws=s(Z,"CODE",{class:!0});var U1=r(Ws);fu=l(U1,"<upstream>"),U1.forEach(t),mu=l(Z," as a branch name, "),Bs=s(Z,"CODE",{class:!0});var L1=r(Bs);gu=l(L1,"git rebase"),L1.forEach(t),_u=l(Z," will replay commits from the common ancestor of "),js=s(Z,"CODE",{class:!0});var q1=r(js);vu=l(q1,"<upstream>"),q1.forEach(t),Eu=l(Z," and "),Ks=s(Z,"CODE",{class:!0});var z1=r(Ks);bu=l(z1,"<branch>"),z1.forEach(t),yu=l(Z," to "),Qs=s(Z,"CODE",{class:!0});var V1=r(Qs);wu=l(V1,"<branch>"),V1.forEach(t),ku=l(Z,"."),Z.forEach(t),Cu=d(Ee),Oe=s(Ee,"LI",{});var Co=r(Oe);Ou=l(Co,"If you do not specify "),Js=s(Co,"CODE",{class:!0});var $1=r(Js);Du=l($1,"<branch>"),$1.forEach(t),Iu=l(Co,", the default is the "),Xs=s(Co,"CODE",{class:!0});var Y1=r(Xs);Pu=l(Y1,"HEAD"),Y1.forEach(t),Tu=l(Co,", current commit you are at now."),Co.forEach(t),Su=d(Ee),L=s(Ee,"LI",{});var be=r(L);Gu=l(be,"If you do not specify "),Zs=s(be,"CODE",{class:!0});var F1=r(Zs);xu=l(F1,"--onto <new base>"),F1.forEach(t),Ru=l(be,", the new base will be default to "),er=s(be,"CODE",{class:!0});var W1=r(er);Hu=l(W1,"<upsttream>"),W1.forEach(t),Nu=l(be,", that's why "),tr=s(be,"CODE",{class:!0});var B1=r(tr);Au=l(B1,"git rebase master"),B1.forEach(t),Mu=l(be," is equivalent to "),ar=s(be,"CODE",{class:!0});var j1=r(ar);Uu=l(j1,"git rebase --onto master master"),j1.forEach(t),Lu=l(be,"."),be.forEach(t),qu=d(Ee),ie=s(Ee,"LI",{});var Ze=r(ie);zu=l(Ze,"If you do not specify "),sr=s(Ze,"CODE",{class:!0});var K1=r(sr);Vu=l(K1,"<upstream>"),K1.forEach(t),$u=l(Ze,", it will be the upstream of the current branch. So "),rr=s(Ze,"CODE",{class:!0});var Q1=r(rr);Yu=l(Q1,"git rebase"),Q1.forEach(t),Fu=l(Ze," is equivalent to "),or=s(Ze,"CODE",{class:!0});var J1=r(or);Wu=l(J1,"git rebase <origin/current-branch>"),J1.forEach(t),Bu=l(Ze,"."),Ze.forEach(t),Ee.forEach(t),g.forEach(t),zi=d(c),I=s(c,"SECTION",{});var ee=r(I);ul=s(ee,"H3",{});var X1=r(ul);Ut=s(X1,"A",{href:!0,id:!0});var Z1=r(Ut);ju=l(Z1,"git rebase --interactive"),Z1.forEach(t),X1.forEach(t),Ku=d(ee),lr=s(ee,"P",{});var f_=r(lr);ir=s(f_,"CODE",{class:!0});var eE=r(ir);Qu=l(eE,"git rebase"),eE.forEach(t),Ju=l(f_," has an interactive mode, which allows you to specify instructions while replaying commits during a rebase."),f_.forEach(t),Xu=d(ee),pl=s(ee,"P",{});var tE=r(pl);Lt=s(tE,"PICTURE",{});var hc=r(Lt);fl=s(hc,"SOURCE",{type:!0,srcset:!0}),ml=s(hc,"SOURCE",{type:!0,srcset:!0}),qt=s(hc,"IMG",{src:!0,loading:!0,alt:!0}),hc.forEach(t),tE.forEach(t),Zu=d(ee),cr=s(ee,"DIV",{class:!0});var aE=r(cr);ep=l(aE,"git rebase interactive"),aE.forEach(t),tp=d(ee),zt=s(ee,"P",{});var uc=r(zt);ap=l(uc,"When you run "),nr=s(uc,"CODE",{class:!0});var sE=r(nr);sp=l(sE,"git rebase --interactive"),sE.forEach(t),rp=l(uc,", git will prompt you with an editor to edit the instructions. In it, you will see a list of commits that will be replayed:"),uc.forEach(t),op=d(ee),dr=s(ee,"DIV",{class:!0});var L2=r(dr);L2.forEach(t),ee.forEach(t),Vi=d(c),F=s(c,"SECTION",{});var et=r(F);gl=s(et,"H4",{});var rE=r(gl);Vt=s(rE,"A",{href:!0,id:!0});var oE=r(Vt);lp=l(oE,"pick"),oE.forEach(t),rE.forEach(t),ip=d(et),_l=s(et,"P",{});var lE=r(_l);cp=l(lE,"The default instruction. Will just use the commit while replaying:"),lE.forEach(t),np=d(et),vl=s(et,"P",{});var iE=r(vl);$t=s(iE,"PICTURE",{});var pc=r($t);El=s(pc,"SOURCE",{type:!0,srcset:!0}),bl=s(pc,"SOURCE",{type:!0,srcset:!0}),Yt=s(pc,"IMG",{src:!0,loading:!0,alt:!0}),pc.forEach(t),iE.forEach(t),dp=d(et),hr=s(et,"DIV",{class:!0});var q2=r(hr);q2.forEach(t),et.forEach(t),$i=d(c),W=s(c,"SECTION",{});var tt=r(W);yl=s(tt,"H4",{});var cE=r(yl);Ft=s(cE,"A",{href:!0,id:!0});var nE=r(Ft);hp=l(nE,"drop"),nE.forEach(t),cE.forEach(t),up=d(tt),wl=s(tt,"P",{});var dE=r(wl);pp=l(dE,"Drop will omit the commit:"),dE.forEach(t),fp=d(tt),kl=s(tt,"P",{});var hE=r(kl);Wt=s(hE,"PICTURE",{});var fc=r(Wt);Cl=s(fc,"SOURCE",{type:!0,srcset:!0}),Ol=s(fc,"SOURCE",{type:!0,srcset:!0}),Bt=s(fc,"IMG",{src:!0,loading:!0,alt:!0}),fc.forEach(t),hE.forEach(t),mp=d(tt),ur=s(tt,"DIV",{class:!0});var z2=r(ur);z2.forEach(t),tt.forEach(t),Yi=d(c),B=s(c,"SECTION",{});var at=r(B);Dl=s(at,"H4",{});var uE=r(Dl);jt=s(uE,"A",{href:!0,id:!0});var pE=r(jt);gp=l(pE,"squash & fixup"),pE.forEach(t),uE.forEach(t),_p=d(at),ce=s(at,"P",{});var st=r(ce);vp=l(st,"Squash & Fixup will combine your commit with the previous commit, the only difference is that with "),pr=s(st,"CODE",{class:!0});var fE=r(pr);Ep=l(fE,"squash"),fE.forEach(t),bp=l(st,", git will prompt you to edit the commit message of the combined commit, while "),fr=s(st,"CODE",{class:!0});var mE=r(fr);yp=l(mE,"fixup"),mE.forEach(t),wp=l(st," will drop the commit of the "),mr=s(st,"CODE",{class:!0});var gE=r(mr);kp=l(gE,"fixup"),gE.forEach(t),Cp=l(st,"ed commit."),st.forEach(t),Op=d(at),Il=s(at,"P",{});var _E=r(Il);Kt=s(_E,"PICTURE",{});var mc=r(Kt);Pl=s(mc,"SOURCE",{type:!0,srcset:!0}),Tl=s(mc,"SOURCE",{type:!0,srcset:!0}),Qt=s(mc,"IMG",{src:!0,loading:!0,alt:!0}),mc.forEach(t),_E.forEach(t),Dp=d(at),gr=s(at,"DIV",{class:!0});var V2=r(gr);V2.forEach(t),at.forEach(t),Fi=d(c),j=s(c,"SECTION",{});var rt=r(j);Sl=s(rt,"H4",{});var vE=r(Sl);Jt=s(vE,"A",{href:!0,id:!0});var EE=r(Jt);Ip=l(EE,"break"),EE.forEach(t),vE.forEach(t),Pp=d(rt),Xt=s(rt,"P",{});var gc=r(Xt);Tp=l(gc,"Pause the rebase. You can do add more commits here if you want. When you are done, make sure that your workspace and stage is clean, run "),_r=s(gc,"CODE",{class:!0});var bE=r(_r);Sp=l(bE,"git rebase --continue"),bE.forEach(t),Gp=l(gc," to continue."),gc.forEach(t),xp=d(rt),Gl=s(rt,"P",{});var yE=r(Gl);Zt=s(yE,"PICTURE",{});var _c=r(Zt);xl=s(_c,"SOURCE",{type:!0,srcset:!0}),Rl=s(_c,"SOURCE",{type:!0,srcset:!0}),ea=s(_c,"IMG",{src:!0,loading:!0,alt:!0}),_c.forEach(t),yE.forEach(t),Rp=d(rt),vr=s(rt,"DIV",{class:!0});var $2=r(vr);$2.forEach(t),rt.forEach(t),Wi=d(c),K=s(c,"SECTION",{});var ot=r(K);Hl=s(ot,"H4",{});var wE=r(Hl);ta=s(wE,"A",{href:!0,id:!0});var kE=r(ta);Hp=l(kE,"edit"),kE.forEach(t),wE.forEach(t),Np=d(ot),Nl=s(ot,"P",{});var CE=r(Nl);Ap=l(CE,"Pause the rebase at the commit that you are editing, before the commit has been commited. You can add, remove or ammend your files before continue the rebase process."),CE.forEach(t),Mp=d(ot),Al=s(ot,"P",{});var OE=r(Al);aa=s(OE,"PICTURE",{});var vc=r(aa);Ml=s(vc,"SOURCE",{type:!0,srcset:!0}),Ul=s(vc,"SOURCE",{type:!0,srcset:!0}),sa=s(vc,"IMG",{src:!0,loading:!0,alt:!0}),vc.forEach(t),OE.forEach(t),Up=d(ot),Er=s(ot,"DIV",{class:!0});var Y2=r(Er);Y2.forEach(t),ot.forEach(t),Bi=d(c),Q=s(c,"SECTION",{});var lt=r(Q);Ll=s(lt,"H3",{});var DE=r(Ll);ra=s(DE,"A",{href:!0,id:!0});var IE=r(ra);Lp=l(IE,"git pull --rebase"),IE.forEach(t),DE.forEach(t),qp=d(lt),De=s(lt,"P",{});var Oo=r(De);zp=l(Oo,"There's a rebase mode for git pull, where it will be "),br=s(Oo,"CODE",{class:!0});var PE=r(br);Vp=l(PE,"git fetch origin branch"),PE.forEach(t),$p=l(Oo," + "),yr=s(Oo,"CODE",{class:!0});var TE=r(yr);Yp=l(TE,"git rebase origin/branch"),TE.forEach(t),Fp=l(Oo,"."),Oo.forEach(t),Wp=d(lt),ql=s(lt,"P",{});var SE=r(ql);oa=s(SE,"IMG",{src:!0,loading:!0,alt:!0}),SE.forEach(t),Bp=d(lt),wr=s(lt,"DIV",{class:!0});var GE=r(wr);jp=l(GE,"git pull --rebase"),GE.forEach(t),lt.forEach(t),ji=d(c),m=s(c,"SECTION",{});var v=r(m);zl=s(v,"H3",{});var xE=r(zl);la=s(xE,"A",{href:!0,id:!0});var RE=r(la);Kp=l(RE,"git rebase a shared branch"),RE.forEach(t),xE.forEach(t),Qp=d(v),ne=s(v,"P",{});var it=r(ne);Jp=l(it,"Say "),kr=s(it,"CODE",{class:!0});var HE=r(kr);Xp=l(HE,"x"),HE.forEach(t),Zp=l(it," and "),Cr=s(it,"CODE",{class:!0});var NE=r(Cr);ef=l(NE,"y"),NE.forEach(t),tf=l(it," are working on the "),Or=s(it,"CODE",{class:!0});var AE=r(Or);af=l(AE,"feat/a"),AE.forEach(t),sf=l(it," branch."),it.forEach(t),rf=d(v),Vl=s(v,"P",{});var ME=r(Vl);ia=s(ME,"PICTURE",{});var Ec=r(ia);$l=s(Ec,"SOURCE",{type:!0,srcset:!0}),Yl=s(Ec,"SOURCE",{type:!0,srcset:!0}),ca=s(Ec,"IMG",{src:!0,loading:!0,alt:!0}),Ec.forEach(t),ME.forEach(t),of=d(v),Le=s(v,"P",{});var Si=r(Le);Dr=s(Si,"CODE",{class:!0});var UE=r(Dr);lf=l(UE,"x"),UE.forEach(t),cf=l(Si," decided to rebase the "),Ir=s(Si,"CODE",{class:!0});var LE=r(Ir);nf=l(LE,"feat/a"),LE.forEach(t),df=l(Si," branch to squash and drop some commits:"),Si.forEach(t),hf=d(v),Fl=s(v,"P",{});var qE=r(Fl);na=s(qE,"PICTURE",{});var bc=r(na);Wl=s(bc,"SOURCE",{type:!0,srcset:!0}),Bl=s(bc,"SOURCE",{type:!0,srcset:!0}),da=s(bc,"IMG",{src:!0,loading:!0,alt:!0}),bc.forEach(t),qE.forEach(t),uf=d(v),Ie=s(v,"P",{});var Do=r(Ie);pf=l(Do,"While "),Pr=s(Do,"CODE",{class:!0});var zE=r(Pr);ff=l(zE,"x"),zE.forEach(t),mf=l(Do," had done that, that was just a part of the whole picture. Because the "),Tr=s(Do,"CODE",{class:!0});var VE=r(Tr);gf=l(VE,"rebase"),VE.forEach(t),_f=l(Do," on his local machine changed the git history on his local copy only."),Do.forEach(t),vf=d(v),jl=s(v,"P",{});var $E=r(jl);ha=s($E,"PICTURE",{});var yc=r(ha);Kl=s(yc,"SOURCE",{type:!0,srcset:!0}),Ql=s(yc,"SOURCE",{type:!0,srcset:!0}),ua=s(yc,"IMG",{src:!0,loading:!0,alt:!0}),yc.forEach(t),$E.forEach(t),Ef=d(v),de=s(v,"P",{});var ct=r(de);bf=l(ct,"To make the change on the remote server as well, "),Sr=s(ct,"CODE",{class:!0});var YE=r(Sr);yf=l(YE,"x"),YE.forEach(t),wf=l(ct," forced push his branch to the remote server. ("),Jl=s(ct,"STRONG",{});var FE=r(Jl);kf=l(FE,"Note:"),FE.forEach(t),Cf=l(ct," You can push without "),Gr=s(ct,"CODE",{class:!0});var WE=r(Gr);Of=l(WE,"--force"),WE.forEach(t),Df=l(ct," if the origin branch cannot fast-forward merge your local branch)"),ct.forEach(t),If=d(v),he=s(v,"P",{});var nt=r(he);Pf=l(nt,"While "),xr=s(nt,"CODE",{class:!0});var BE=r(xr);Tf=l(BE,"y"),BE.forEach(t),Sf=l(nt," on the other hand, did not know about the "),Rr=s(nt,"CODE",{class:!0});var jE=r(Rr);Gf=l(jE,"rebase"),jE.forEach(t),xf=l(nt,", so when "),Hr=s(nt,"CODE",{class:!0});var KE=r(Hr);Rf=l(KE,"y"),KE.forEach(t),Hf=l(nt," pulled the code, it ended up with a messed up merged of a messed up git history:"),nt.forEach(t),Nf=d(v),Xl=s(v,"P",{});var QE=r(Xl);pa=s(QE,"PICTURE",{});var wc=r(pa);Zl=s(wc,"SOURCE",{type:!0,srcset:!0}),ei=s(wc,"SOURCE",{type:!0,srcset:!0}),fa=s(wc,"IMG",{src:!0,loading:!0,alt:!0}),wc.forEach(t),QE.forEach(t),Af=d(v),Pe=s(v,"P",{});var Io=r(Pe);Mf=l(Io,"In most cases, there would be a merge conflict, because "),Nr=s(Io,"CODE",{class:!0});var JE=r(Nr);Uf=l(JE,"x"),JE.forEach(t),Lf=l(Io," and "),Ar=s(Io,"CODE",{class:!0});var XE=r(Ar);qf=l(XE,"y"),XE.forEach(t),zf=l(Io,"'s branch would have made changes on the same file."),Io.forEach(t),Vf=d(v),ue=s(v,"P",{});var dt=r(ue);$f=l(dt,"So, the correct way, if the rebase is necessary, is to notify "),Mr=s(dt,"CODE",{class:!0});var ZE=r(Mr);Yf=l(ZE,"y"),ZE.forEach(t),Ff=l(dt," about the rebase, so that "),Ur=s(dt,"CODE",{class:!0});var eb=r(Ur);Wf=l(eb,"y"),eb.forEach(t),Bf=l(dt," can "),Lr=s(dt,"CODE",{class:!0});var tb=r(Lr);jf=l(tb,"git reset --hard"),tb.forEach(t),Kf=l(dt," his branch to the remote branch."),dt.forEach(t),Qf=d(v),ti=s(v,"P",{});var ab=r(ti);ma=s(ab,"PICTURE",{});var kc=r(ma);ai=s(kc,"SOURCE",{type:!0,srcset:!0}),si=s(kc,"SOURCE",{type:!0,srcset:!0}),ga=s(kc,"IMG",{src:!0,loading:!0,alt:!0}),kc.forEach(t),ab.forEach(t),Jf=d(v),q=s(v,"P",{});var ye=r(q);Xf=l(ye,"If unfortunately, at the same time, "),qr=s(ye,"CODE",{class:!0});var sb=r(qr);Zf=l(sb,"y"),sb.forEach(t),em=l(ye," has made more commits to his local branch, he would have to "),zr=s(ye,"CODE",{class:!0});var rb=r(zr);tm=l(rb,"git rebase"),rb.forEach(t),am=l(ye," the new changes onto the remote branch, or "),Vr=s(ye,"CODE",{class:!0});var ob=r(Vr);sm=l(ob,"git cherry-pick"),ob.forEach(t),rm=l(ye," the new changes after the "),$r=s(ye,"CODE",{class:!0});var lb=r($r);om=l(lb,"git reset --hard"),lb.forEach(t),lm=l(ye,"."),ye.forEach(t),im=d(v),Te=s(v,"P",{});var Po=r(Te);cm=l(Po,"In the companies that I have worked with, forbidden a "),Yr=s(Po,"CODE",{class:!0});var ib=r(Yr);nm=l(ib,"rebase"),ib.forEach(t),dm=l(Po," on a common branch, especially the "),Fr=s(Po,"CODE",{class:!0});var cb=r(Fr);hm=l(cb,"master"),cb.forEach(t),um=l(Po," branch."),Po.forEach(t),v.forEach(t),Ki=d(c),qe=s(c,"SECTION",{});var Cc=r(qe);ri=s(Cc,"H2",{});var nb=r(ri);_a=s(nb,"A",{href:!0,id:!0});var db=r(_a);pm=l(db,"git log"),db.forEach(t),nb.forEach(t),fm=d(Cc),oi=s(Cc,"P",{});var hb=r(oi);mm=l(hb,"The go-to command to look at your git history. There's a few options that is worth mentioning, that allow us to search through the sea of commits:"),hb.forEach(t),Cc.forEach(t),Qi=d(c),ze=s(c,"SECTION",{});var Oc=r(ze);li=s(Oc,"H3",{});var ub=r(li);va=s(ub,"A",{href:!0,id:!0});var pb=r(va);gm=l(pb,"--since, --after, --until, --before"),pb.forEach(t),ub.forEach(t),_m=d(Oc),ii=s(Oc,"P",{});var fb=r(ii);vm=l(fb,"You can filter out commits within a specific timeframe"),fb.forEach(t),Oc.forEach(t),Ji=d(c),Ve=s(c,"SECTION",{});var Dc=r(Ve);ci=s(Dc,"H3",{});var mb=r(ci);Ea=s(mb,"A",{href:!0,id:!0});var gb=r(Ea);Em=l(gb,"--grep"),gb.forEach(t),mb.forEach(t),bm=d(Dc),ni=s(Dc,"P",{});var _b=r(ni);ym=l(_b,"You can filter out commits based on commit message"),_b.forEach(t),Dc.forEach(t),Xi=d(c),$e=s(c,"SECTION",{});var Ic=r($e);di=s(Ic,"H3",{});var vb=r(di);ba=s(vb,"A",{href:!0,id:!0});var Eb=r(ba);wm=l(Eb,"--invert-grep"),Eb.forEach(t),vb.forEach(t),km=d(Ic),Wr=s(Ic,"P",{});var m_=r(Wr);Cm=l(m_,"You can filter out commits that does not match the "),Br=s(m_,"CODE",{class:!0});var bb=r(Br);Om=l(bb,"--grep"),bb.forEach(t),m_.forEach(t),Ic.forEach(t),Zi=d(c),Ye=s(c,"SECTION",{});var Pc=r(Ye);hi=s(Pc,"H3",{});var yb=r(hi);ya=s(yb,"A",{href:!0,id:!0});var wb=r(ya);Dm=l(wb,"--all-match"),wb.forEach(t),yb.forEach(t),Im=d(Pc),J=s(Pc,"P",{});var Re=r(J);jr=s(Re,"CODE",{class:!0});var kb=r(jr);Pm=l(kb,"--grep"),kb.forEach(t),Tm=l(Re," is a "),Kr=s(Re,"CODE",{class:!0});var Cb=r(Kr);Sm=l(Cb,"OR"),Cb.forEach(t),Gm=l(Re," filter, "),Qr=s(Re,"CODE",{class:!0});var Ob=r(Qr);xm=l(Ob,"--all-match"),Ob.forEach(t),Rm=l(Re," make it a "),Jr=s(Re,"CODE",{class:!0});var Db=r(Jr);Hm=l(Db,"AND"),Db.forEach(t),Nm=l(Re," filter"),Re.forEach(t),Pc.forEach(t),ec=d(c),Fe=s(c,"SECTION",{});var Tc=r(Fe);ui=s(Tc,"H3",{});var Ib=r(ui);wa=s(Ib,"A",{href:!0,id:!0});var Pb=r(wa);Am=l(Pb,"--min-parents, --max-parents, --merges, --no-merges"),Pb.forEach(t),Ib.forEach(t),Mm=d(Tc),Se=s(Tc,"P",{});var To=r(Se);Um=l(To,"You can specify commits with the number of parents. A simple merge commit has 2 parent, so "),Xr=s(To,"CODE",{class:!0});var Tb=r(Xr);Lm=l(Tb,"--merge"),Tb.forEach(t),qm=l(To," is equivalent to "),Zr=s(To,"CODE",{class:!0});var Sb=r(Zr);zm=l(Sb,"--min-parents=2"),Sb.forEach(t),Vm=l(To,"."),To.forEach(t),Tc.forEach(t),tc=d(c),We=s(c,"SECTION",{});var Sc=r(We);pi=s(Sc,"H3",{});var Gb=r(pi);ka=s(Gb,"A",{href:!0,id:!0});var xb=r(ka);$m=l(xb,"--first-parent"),xb.forEach(t),Gb.forEach(t),Ym=d(Sc),Ca=s(Sc,"P",{});var Gc=r(Ca);Fm=l(Gc,"You can follow only the first parent commit upon seeing a merge commit. This is especially useful when you have merged of branches in, "),eo=s(Gc,"CODE",{class:!0});var Rb=r(eo);Wm=l(Rb,"--first-parent"),Rb.forEach(t),Bm=l(Gc," allow you to filter out only the merge commit and the commit you have made on the current branch."),Gc.forEach(t),Sc.forEach(t),ac=d(c),Be=s(c,"SECTION",{});var xc=r(Be);fi=s(xc,"H2",{});var Hb=r(fi);Oa=s(Hb,"A",{href:!0,id:!0});var Nb=r(Oa);jm=l(Nb,"git reflog"),Nb.forEach(t),Hb.forEach(t),Km=d(xc),pe=s(xc,"P",{});var ht=r(pe);Qm=l(ht,"The reference log shows you all the "),to=s(ht,"CODE",{class:!0});var Ab=r(to);Jm=l(Ab,"HEAD"),Ab.forEach(t),Xm=l(ht," position you have been to. This is especially useful when you have "),ao=s(ht,"CODE",{class:!0});var Mb=r(ao);Zm=l(Mb,"reset --hard"),Mb.forEach(t),eg=l(ht," or "),so=s(ht,"CODE",{class:!0});var Ub=r(so);tg=l(Ub,"rebase"),Ub.forEach(t),ag=l(ht,", you can still find back the commit reference that you were at previously, so you can recover them."),ht.forEach(t),xc.forEach(t),sc=d(c),y=s(c,"SECTION",{});var O=r(y);mi=s(O,"H2",{});var Lb=r(mi);Da=s(Lb,"A",{href:!0,id:!0});var qb=r(Da);sg=l(qb,"git bisect"),qb.forEach(t),Lb.forEach(t),rg=d(O),gi=s(O,"P",{});var zb=r(gi);og=l(zb,"This is a useful command that I am looking forward to use it."),zb.forEach(t),lg=d(O),Ia=s(O,"P",{});var Rc=r(Ia);ig=l(Rc,"Often times when you noticed something has changed / break / less optimised, yet you do not know when this change was introduced into your repository. "),ro=s(Rc,"CODE",{class:!0});var Vb=r(ro);cg=l(Vb,"git bisect"),Vb.forEach(t),ng=l(Rc," allows you to do binary search on the history, so that you can quickly pin down the commit where the change was introduced."),Rc.forEach(t),dg=d(O),oo=s(O,"DIV",{class:!0});var F2=r(oo);F2.forEach(t),hg=d(O),x=s(O,"P",{});var te=r(x);ug=l(te,"Once you've specified at least one "),lo=s(te,"CODE",{class:!0});var $b=r(lo);pg=l($b,"bad"),$b.forEach(t),fg=l(te," and one "),io=s(te,"CODE",{class:!0});var Yb=r(io);mg=l(Yb,"good"),Yb.forEach(t),gg=l(te," commit, "),co=s(te,"CODE",{class:!0});var Fb=r(co);_g=l(Fb,"git bisect"),Fb.forEach(t),vg=l(te," will find and checkout to a commit in the middle of that range between "),no=s(te,"CODE",{class:!0});var Wb=r(no);Eg=l(Wb,"bad"),Wb.forEach(t),bg=l(te," and "),ho=s(te,"CODE",{class:!0});var Bb=r(ho);yg=l(Bb,"good"),Bb.forEach(t),wg=l(te," and greets you with:"),te.forEach(t),kg=d(O),uo=s(O,"DIV",{class:!0});var W2=r(uo);W2.forEach(t),Cg=d(O),Ge=s(O,"P",{});var So=r(Ge);Og=l(So,"You can know test / verify / profile your code, and specify whether the current commit is a "),po=s(So,"CODE",{class:!0});var jb=r(po);Dg=l(jb,"good"),jb.forEach(t),Ig=l(So," commit or a "),fo=s(So,"CODE",{class:!0});var Kb=r(fo);Pg=l(Kb,"bad"),Kb.forEach(t),Tg=l(So," commit:"),So.forEach(t),Sg=d(O),mo=s(O,"DIV",{class:!0});var B2=r(mo);B2.forEach(t),Gg=d(O),Pa=s(O,"P",{});var Hc=r(Pa);xg=l(Hc,"Continue doing it until eventually there's no more commit to inspect. "),go=s(Hc,"CODE",{class:!0});var Qb=r(go);Rg=l(Qb,"git bisect"),Qb.forEach(t),Hg=l(Hc," will print out the description of the first bad commit."),Hc.forEach(t),O.forEach(t),rc=d(c),P=s(c,"SECTION",{});var ae=r(P);_i=s(ae,"H2",{});var Jb=r(_i);Ta=s(Jb,"A",{href:!0,id:!0});var Xb=r(Ta);Ng=l(Xb,"Summary"),Xb.forEach(t),Jb.forEach(t),Ag=d(ae),vi=s(ae,"P",{});var Zb=r(vi);Mg=l(Zb,"We've gone through the following git commands:"),Zb.forEach(t),Ug=d(ae),k=s(ae,"UL",{});var T=r(k);Ei=s(T,"LI",{});var e2=r(Ei);Lg=l(e2,"git merge"),e2.forEach(t),qg=d(T),bi=s(T,"LI",{});var t2=r(bi);zg=l(t2,"git reset"),t2.forEach(t),Vg=d(T),yi=s(T,"LI",{});var a2=r(yi);$g=l(a2,"git cherry-pick"),a2.forEach(t),Yg=d(T),wi=s(T,"LI",{});var s2=r(wi);Fg=l(s2,"git revert"),s2.forEach(t),Wg=d(T),ki=s(T,"LI",{});var r2=r(ki);Bg=l(r2,"git rebase"),r2.forEach(t),jg=d(T),Ci=s(T,"LI",{});var o2=r(Ci);Kg=l(o2,"git log"),o2.forEach(t),Qg=d(T),Oi=s(T,"LI",{});var l2=r(Oi);Jg=l(l2,"git reflog"),l2.forEach(t),Xg=d(T),Di=s(T,"LI",{});var i2=r(Di);Zg=l(i2,"git bisect"),i2.forEach(t),T.forEach(t),e_=d(ae),Sa=s(ae,"P",{});var Nc=r(Sa);t_=l(Nc,"Hopefully we are now "),_o=s(Nc,"CODE",{class:!0});var c2=r(_o);a_=l(c2,"git gudder"),c2.forEach(t),s_=l(Nc," than before!"),Nc.forEach(t),r_=d(ae),o_=s(ae,"HR",{}),l_=d(ae),vo=s(ae,"P",{});var g_=r(vo);i_=l(g_,"Related topic: "),Eo=s(g_,"A",{href:!0});var n2=r(Eo);c_=l(n2,"Git commits went missing after a rebase"),n2.forEach(t),g_.forEach(t),ae.forEach(t),this.h()},h(){i(pt,"href","#disclaimer"),i(pt,"id","disclaimer"),i(mt,"href","https://git-scm.com"),i(mt,"rel","nofollow"),i(gt,"href","#git-merge"),i(gt,"id","git-merge"),i(Na,"class","inline"),i(_t,"href","#fast-forward-merge"),i(_t,"id","fast-forward-merge"),i(Aa,"class","inline"),i(Ma,"class","inline"),b(vt.src,v_=C3)||i(vt,"src",v_),i(vt,"loading","lazy"),i(vt,"alt","git-merge-ff"),i(Ua,"class","caption svelte-koydfe"),i(Et,"href","#non-fast-forward-merge"),i(Et,"id","non-fast-forward-merge"),i(La,"class","inline"),i(qa,"class","inline"),b(bt.src,E_=k3)||i(bt,"src",E_),i(bt,"loading","lazy"),i(bt,"alt","git-merge-non-ff"),i(za,"class","caption svelte-koydfe"),i(yt,"href","#git-pull"),i(yt,"id","git-pull"),i(Va,"class","inline"),i($a,"class","inline"),i(Ya,"class","inline"),b(wt.src,b_=w3)||i(wt,"src",b_),i(wt,"loading","lazy"),i(wt,"alt","git-pull"),i(Fa,"class","caption svelte-koydfe"),i(kt,"href","#git-reset"),i(kt,"id","git-reset"),i(Ba,"class","inline"),i(ja,"class","inline"),i(Ka,"class","inline"),i(Qa,"class","inline"),b(Ct.src,y_=y3)||i(Ct,"src",y_),i(Ct,"loading","lazy"),i(Ct,"alt","git-reset"),i(Ja,"class","caption svelte-koydfe"),i(Ot,"href","#git-cherry-pick"),i(Ot,"id","git-cherry-pick"),i(Xa,"class","inline"),i(Za,"class","inline"),b(Dt.src,w_=b3)||i(Dt,"src",w_),i(Dt,"loading","lazy"),i(Dt,"alt","git-cherry-pick"),i(es,"class","caption svelte-koydfe"),i(It,"href","#git-revert"),i(It,"id","git-revert"),i(as,"class","inline"),i(ss,"class","inline"),i(rs,"class","inline"),i(os,"class","inline"),i(ls,"class","inline"),b(Pt.src,k_=E3)||i(Pt,"src",k_),i(Pt,"loading","lazy"),i(Pt,"alt","git-revert"),i(is,"class","caption svelte-koydfe"),i(cs,"class","inline"),b(St.src,C_=v3)||i(St,"src",C_),i(St,"loading","lazy"),i(St,"alt","git-revert-2"),i(ns,"class","caption svelte-koydfe"),i(ds,"class","inline"),i(hs,"class","inline"),i(us,"class","inline"),i(fs,"class","inline"),b(Gt.src,O_=_3)||i(Gt,"src",O_),i(Gt,"loading","lazy"),i(Gt,"alt","git-revert-3"),i(ms,"class","caption svelte-koydfe"),i(gs,"class","inline"),i(_s,"class","inline"),i(vs,"class","inline"),i(Es,"class","inline"),i(bs,"class","inline"),b(xt.src,D_=g3)||i(xt,"src",D_),i(xt,"loading","lazy"),i(xt,"alt","git-revert-4"),i(ys,"class","caption svelte-koydfe"),i(Rt,"href","#git-rebase"),i(Rt,"id","git-rebase"),i(ks,"class","inline"),i(Cs,"class","inline"),i(Os,"class","inline"),i(Ds,"class","inline"),i(Is,"class","inline"),i(Ps,"class","inline"),i(Ts,"class","inline"),i(Ss,"class","inline"),i(Gs,"class","inline"),b(Ht.src,I_=m3)||i(Ht,"src",I_),i(Ht,"loading","lazy"),i(Ht,"alt","git-rebase"),i(xs,"class","caption svelte-koydfe"),i(Hs,"class","inline"),i(Ns,"class","inline"),i(As,"class","inline"),b(Nt.src,P_=f3)||i(Nt,"src",P_),i(Nt,"loading","lazy"),i(Nt,"alt","git-rebase-2"),i(Ms,"class","caption svelte-koydfe"),i(Us,"class","inline"),i(Ls,"class","inline"),i(qs,"class","inline"),i(nl,"type","image/webp"),i(nl,"srcset",p3),i(dl,"type","image/jpeg"),i(dl,"srcset",w2),b(Mt.src,T_=w2)||i(Mt,"src",T_),i(Mt,"loading","lazy"),i(Mt,"alt","git-rebase"),i(zs,"class","caption svelte-koydfe"),i(Vs,"class","inline"),i($s,"class","inline"),i(Ys,"class","inline"),i(Fs,"class","inline"),i(Ws,"class","inline"),i(Bs,"class","inline"),i(js,"class","inline"),i(Ks,"class","inline"),i(Qs,"class","inline"),i(Js,"class","inline"),i(Xs,"class","inline"),i(Zs,"class","inline"),i(er,"class","inline"),i(tr,"class","inline"),i(ar,"class","inline"),i(sr,"class","inline"),i(rr,"class","inline"),i(or,"class","inline"),i(Ut,"href","#git-rebase-interactive"),i(Ut,"id","git-rebase-interactive"),i(ir,"class","inline"),i(fl,"type","image/webp"),i(fl,"srcset",y2),i(ml,"type","image/png"),i(ml,"srcset",Ac),b(qt.src,S_=Ac)||i(qt,"src",S_),i(qt,"loading","lazy"),i(qt,"alt","git-rebase-i-pick"),i(cr,"class","caption svelte-koydfe"),i(nr,"class","inline"),i(dr,"class","code-section"),i(Vt,"href","#pick"),i(Vt,"id","pick"),i(El,"type","image/webp"),i(El,"srcset",y2),i(bl,"type","image/png"),i(bl,"srcset",Ac),b(Yt.src,G_=Ac)||i(Yt,"src",G_),i(Yt,"loading","lazy"),i(Yt,"alt","git-rebase-i-pick"),i(hr,"class","code-section"),i(Ft,"href","#drop"),i(Ft,"id","drop"),i(Cl,"type","image/webp"),i(Cl,"srcset",u3),i(Ol,"type","image/png"),i(Ol,"srcset",b2),b(Bt.src,x_=b2)||i(Bt,"src",x_),i(Bt,"loading","lazy"),i(Bt,"alt","git-rebase-i-drop"),i(ur,"class","code-section"),i(jt,"href","#squash-fixup"),i(jt,"id","squash-fixup"),i(pr,"class","inline"),i(fr,"class","inline"),i(mr,"class","inline"),i(Pl,"type","image/webp"),i(Pl,"srcset",h3),i(Tl,"type","image/png"),i(Tl,"srcset",E2),b(Qt.src,R_=E2)||i(Qt,"src",R_),i(Qt,"loading","lazy"),i(Qt,"alt","git-rebase-i-squash"),i(gr,"class","code-section"),i(Jt,"href","#break"),i(Jt,"id","break"),i(_r,"class","inline"),i(xl,"type","image/webp"),i(xl,"srcset",d3),i(Rl,"type","image/png"),i(Rl,"srcset",v2),b(ea.src,H_=v2)||i(ea,"src",H_),i(ea,"loading","lazy"),i(ea,"alt","git-rebase-i-break"),i(vr,"class","code-section"),i(ta,"href","#edit"),i(ta,"id","edit"),i(Ml,"type","image/webp"),i(Ml,"srcset",n3),i(Ul,"type","image/png"),i(Ul,"srcset",_2),b(sa.src,N_=_2)||i(sa,"src",N_),i(sa,"loading","lazy"),i(sa,"alt","git-rebase-i-edit"),i(Er,"class","code-section"),i(ra,"href","#git-pull-rebase"),i(ra,"id","git-pull-rebase"),i(br,"class","inline"),i(yr,"class","inline"),b(oa.src,A_=c3)||i(oa,"src",A_),i(oa,"loading","lazy"),i(oa,"alt","git-pull-rebase"),i(wr,"class","caption svelte-koydfe"),i(la,"href","#git-rebase-a-shared-branch"),i(la,"id","git-rebase-a-shared-branch"),i(kr,"class","inline"),i(Cr,"class","inline"),i(Or,"class","inline"),i($l,"type","image/webp"),i($l,"srcset",i3),i(Yl,"type","image/png"),i(Yl,"srcset",g2),b(ca.src,M_=g2)||i(ca,"src",M_),i(ca,"loading","lazy"),i(ca,"alt","git-rebase-w"),i(Dr,"class","inline"),i(Ir,"class","inline"),i(Wl,"type","image/webp"),i(Wl,"srcset",l3),i(Bl,"type","image/png"),i(Bl,"srcset",m2),b(da.src,U_=m2)||i(da,"src",U_),i(da,"loading","lazy"),i(da,"alt","git-rebase-w-2"),i(Pr,"class","inline"),i(Tr,"class","inline"),i(Kl,"type","image/webp"),i(Kl,"srcset",o3),i(Ql,"type","image/png"),i(Ql,"srcset",f2),b(ua.src,L_=f2)||i(ua,"src",L_),i(ua,"loading","lazy"),i(ua,"alt","git-rebase-w-3"),i(Sr,"class","inline"),i(Gr,"class","inline"),i(xr,"class","inline"),i(Rr,"class","inline"),i(Hr,"class","inline"),i(Zl,"type","image/webp"),i(Zl,"srcset",r3),i(ei,"type","image/png"),i(ei,"srcset",p2),b(fa.src,q_=p2)||i(fa,"src",q_),i(fa,"loading","lazy"),i(fa,"alt","git-rebase-w-4"),i(Nr,"class","inline"),i(Ar,"class","inline"),i(Mr,"class","inline"),i(Ur,"class","inline"),i(Lr,"class","inline"),i(ai,"type","image/webp"),i(ai,"srcset",s3),i(si,"type","image/png"),i(si,"srcset",u2),b(ga.src,z_=u2)||i(ga,"src",z_),i(ga,"loading","lazy"),i(ga,"alt","git-rebase-w-5"),i(qr,"class","inline"),i(zr,"class","inline"),i(Vr,"class","inline"),i($r,"class","inline"),i(Yr,"class","inline"),i(Fr,"class","inline"),i(_a,"href","#git-log"),i(_a,"id","git-log"),i(va,"href","#since-after-until-before"),i(va,"id","since-after-until-before"),i(Ea,"href","#grep"),i(Ea,"id","grep"),i(ba,"href","#invert-grep"),i(ba,"id","invert-grep"),i(Br,"class","inline"),i(ya,"href","#all-match"),i(ya,"id","all-match"),i(jr,"class","inline"),i(Kr,"class","inline"),i(Qr,"class","inline"),i(Jr,"class","inline"),i(wa,"href","#min-parents-max-parents-merges-no-merges"),i(wa,"id","min-parents-max-parents-merges-no-merges"),i(Xr,"class","inline"),i(Zr,"class","inline"),i(ka,"href","#first-parent"),i(ka,"id","first-parent"),i(eo,"class","inline"),i(Oa,"href","#git-reflog"),i(Oa,"id","git-reflog"),i(to,"class","inline"),i(ao,"class","inline"),i(so,"class","inline"),i(Da,"href","#git-bisect"),i(Da,"id","git-bisect"),i(ro,"class","inline"),i(oo,"class","code-section"),i(lo,"class","inline"),i(io,"class","inline"),i(co,"class","inline"),i(no,"class","inline"),i(ho,"class","inline"),i(uo,"class","code-section"),i(po,"class","inline"),i(fo,"class","inline"),i(mo,"class","code-section"),i(go,"class","inline"),i(Ta,"href","#summary"),i(Ta,"id","summary"),i(_o,"class","inline"),i(Eo,"href","/commit-went-missing-after-rebase/")},m(c,h){D2(E,c,h),u(c,se,h),u(c,z,h),e(z,ut),u(c,w,h),u(c,C,h),e(C,Ra),e(C,Go),e(Go,Mc),e(C,Uc),e(C,xo),e(xo,Lc),e(C,qc),u(c,Gi,h),u(c,Ha,h),e(Ha,Ro),e(Ro,zc),u(c,xi,h),u(c,He,h),e(He,Ho),e(Ho,pt),e(pt,Vc),e(He,$c),e(He,ft),e(ft,Yc),e(ft,mt),e(mt,Fc),e(ft,Wc),u(c,Ri,h),u(c,Ne,h),e(Ne,No),e(No,gt),e(gt,Bc),e(Ne,jc),e(Ne,re),e(re,Kc),e(re,Na),e(Na,Qc),e(re,Jc),e(re,Ao),e(Ao,Xc),e(re,Zc),e(re,Mo),e(Mo,en),e(re,tn),u(c,Hi,h),u(c,V,h),e(V,Uo),e(Uo,_t),e(_t,an),e(V,sn),e(V,we),e(we,rn),e(we,Aa),e(Aa,on),e(we,ln),e(we,Ma),e(Ma,cn),e(we,nn),e(V,dn),e(V,Lo),e(Lo,vt),e(V,hn),e(V,Ua),e(Ua,un),u(c,Ni,h),u(c,R,h),e(R,qo),e(qo,Et),e(Et,pn),e(R,fn),e(R,ke),e(ke,mn),e(ke,La),e(La,gn),e(ke,_n),e(ke,qa),e(qa,vn),e(ke,En),e(R,bn),e(R,zo),e(zo,bt),e(R,yn),e(R,za),e(za,wn),e(R,kn),e(R,Vo),e(Vo,Cn),u(c,Ai,h),u(c,$,h),e($,$o),e($o,yt),e(yt,On),e($,Dn),e($,oe),e(oe,In),e(oe,Va),e(Va,Pn),e(oe,Tn),e(oe,$a),e($a,Sn),e(oe,Gn),e(oe,Ya),e(Ya,xn),e(oe,Rn),e($,Hn),e($,Yo),e(Yo,wt),e($,Nn),e($,Fa),e(Fa,An),u(c,Mi,h),u(c,H,h),e(H,Fo),e(Fo,kt),e(kt,Mn),e(H,Un),e(H,Wa),e(Wa,Ba),e(Ba,Ln),e(Wa,qn),e(H,zn),e(H,fe),e(fe,ja),e(ja,Vn),e(fe,$n),e(fe,Ka),e(Ka,Yn),e(fe,Fn),e(fe,Qa),e(Qa,Wn),e(fe,Bn),e(H,jn),e(H,Wo),e(Wo,Ct),e(H,Kn),e(H,Ja),e(Ja,Qn),u(c,Ui,h),u(c,N,h),e(N,Bo),e(Bo,Ot),e(Ot,Jn),e(N,Xn),e(N,jo),e(jo,Zn),e(N,ed),e(N,Ae),e(Ae,Xa),e(Xa,td),e(Ae,ad),e(Ae,Za),e(Za,sd),e(Ae,rd),e(N,od),e(N,Ko),e(Ko,Dt),e(N,ld),e(N,es),e(es,id),u(c,Li,h),u(c,f,h),e(f,Qo),e(Qo,It),e(It,cd),e(f,nd),e(f,ts),e(ts,as),e(as,dd),e(ts,hd),e(f,ud),e(f,M),e(M,pd),e(M,ss),e(ss,fd),e(M,md),e(M,rs),e(rs,gd),e(M,_d),e(M,os),e(os,vd),e(M,Ed),e(M,ls),e(ls,bd),e(M,yd),e(f,wd),e(f,Jo),e(Jo,Pt),e(f,kd),e(f,is),e(is,Cd),e(f,Od),e(f,Tt),e(Tt,Dd),e(Tt,cs),e(cs,Id),e(Tt,Pd),e(f,Td),e(f,Xo),e(Xo,St),e(f,Sd),e(f,ns),e(ns,Gd),e(f,xd),e(f,le),e(le,Rd),e(le,ds),e(ds,Hd),e(le,Nd),e(le,hs),e(hs,Ad),e(le,Md),e(le,us),e(us,Ud),e(le,Ld),e(f,qd),e(f,ps),e(ps,fs),e(fs,zd),e(ps,Vd),e(f,$d),e(f,Zo),e(Zo,Gt),e(f,Yd),e(f,ms),e(ms,Fd),e(f,Wd),e(f,S),e(S,Bd),e(S,gs),e(gs,jd),e(S,Kd),e(S,_s),e(_s,Qd),e(S,Jd),e(S,vs),e(vs,Xd),e(S,Zd),e(S,Es),e(Es,eh),e(S,th),e(S,bs),e(bs,ah),e(S,sh),e(f,rh),e(f,el),e(el,xt),e(f,oh),e(f,ys),e(ys,lh),u(c,qi,h),u(c,p,h),e(p,tl),e(tl,Rt),e(Rt,ih),e(p,ch),e(p,ws),e(ws,ks),e(ks,nh),e(ws,dh),e(p,hh),e(p,D),e(D,uh),e(D,Cs),e(Cs,ph),e(D,fh),e(D,Os),e(Os,mh),e(D,gh),e(D,Ds),e(Ds,_h),e(D,vh),e(D,Is),e(Is,Eh),e(D,bh),e(D,Ps),e(Ps,yh),e(D,wh),e(D,Ts),e(Ts,kh),e(D,Ch),e(p,Oh),e(p,Me),e(Me,Ss),e(Ss,Dh),e(Me,Ih),e(Me,Gs),e(Gs,Ph),e(Me,Th),e(p,Sh),e(p,al),e(al,Ht),e(p,Gh),e(p,xs),e(xs,xh),e(p,Rh),e(p,Rs),e(Rs,Hs),e(Hs,Hh),e(Rs,Nh),e(p,Ah),e(p,Ue),e(Ue,Ns),e(Ns,Mh),e(Ue,Uh),e(Ue,As),e(As,Lh),e(Ue,qh),e(p,zh),e(p,sl),e(sl,Nt),e(p,Vh),e(p,Ms),e(Ms,$h),e(p,Yh),e(p,rl),e(rl,Fh),e(p,Wh),e(p,Ce),e(Ce,ol),e(ol,Us),e(Us,Bh),e(Ce,jh),e(Ce,ll),e(ll,Ls),e(Ls,Kh),e(Ce,Qh),e(Ce,il),e(il,qs),e(qs,Jh),e(p,Xh),e(p,cl),e(cl,At),e(At,nl),e(At,dl),e(At,Mt),e(p,Zh),e(p,zs),e(zs,eu),e(p,tu),e(p,hl),e(hl,au),e(p,su),e(p,U),e(U,Y),e(Y,Vs),e(Vs,ru),e(Y,ou),e(Y,$s),e($s,lu),e(Y,iu),e(Y,Ys),e(Ys,cu),e(Y,nu),e(Y,Fs),e(Fs,du),e(Y,hu),e(U,uu),e(U,G),e(G,pu),e(G,Ws),e(Ws,fu),e(G,mu),e(G,Bs),e(Bs,gu),e(G,_u),e(G,js),e(js,vu),e(G,Eu),e(G,Ks),e(Ks,bu),e(G,yu),e(G,Qs),e(Qs,wu),e(G,ku),e(U,Cu),e(U,Oe),e(Oe,Ou),e(Oe,Js),e(Js,Du),e(Oe,Iu),e(Oe,Xs),e(Xs,Pu),e(Oe,Tu),e(U,Su),e(U,L),e(L,Gu),e(L,Zs),e(Zs,xu),e(L,Ru),e(L,er),e(er,Hu),e(L,Nu),e(L,tr),e(tr,Au),e(L,Mu),e(L,ar),e(ar,Uu),e(L,Lu),e(U,qu),e(U,ie),e(ie,zu),e(ie,sr),e(sr,Vu),e(ie,$u),e(ie,rr),e(rr,Yu),e(ie,Fu),e(ie,or),e(or,Wu),e(ie,Bu),u(c,zi,h),u(c,I,h),e(I,ul),e(ul,Ut),e(Ut,ju),e(I,Ku),e(I,lr),e(lr,ir),e(ir,Qu),e(lr,Ju),e(I,Xu),e(I,pl),e(pl,Lt),e(Lt,fl),e(Lt,ml),e(Lt,qt),e(I,Zu),e(I,cr),e(cr,ep),e(I,tp),e(I,zt),e(zt,ap),e(zt,nr),e(nr,sp),e(zt,rp),e(I,op),e(I,dr),dr.innerHTML=S2,u(c,Vi,h),u(c,F,h),e(F,gl),e(gl,Vt),e(Vt,lp),e(F,ip),e(F,_l),e(_l,cp),e(F,np),e(F,vl),e(vl,$t),e($t,El),e($t,bl),e($t,Yt),e(F,dp),e(F,hr),hr.innerHTML=G2,u(c,$i,h),u(c,W,h),e(W,yl),e(yl,Ft),e(Ft,hp),e(W,up),e(W,wl),e(wl,pp),e(W,fp),e(W,kl),e(kl,Wt),e(Wt,Cl),e(Wt,Ol),e(Wt,Bt),e(W,mp),e(W,ur),ur.innerHTML=x2,u(c,Yi,h),u(c,B,h),e(B,Dl),e(Dl,jt),e(jt,gp),e(B,_p),e(B,ce),e(ce,vp),e(ce,pr),e(pr,Ep),e(ce,bp),e(ce,fr),e(fr,yp),e(ce,wp),e(ce,mr),e(mr,kp),e(ce,Cp),e(B,Op),e(B,Il),e(Il,Kt),e(Kt,Pl),e(Kt,Tl),e(Kt,Qt),e(B,Dp),e(B,gr),gr.innerHTML=R2,u(c,Fi,h),u(c,j,h),e(j,Sl),e(Sl,Jt),e(Jt,Ip),e(j,Pp),e(j,Xt),e(Xt,Tp),e(Xt,_r),e(_r,Sp),e(Xt,Gp),e(j,xp),e(j,Gl),e(Gl,Zt),e(Zt,xl),e(Zt,Rl),e(Zt,ea),e(j,Rp),e(j,vr),vr.innerHTML=H2,u(c,Wi,h),u(c,K,h),e(K,Hl),e(Hl,ta),e(ta,Hp),e(K,Np),e(K,Nl),e(Nl,Ap),e(K,Mp),e(K,Al),e(Al,aa),e(aa,Ml),e(aa,Ul),e(aa,sa),e(K,Up),e(K,Er),Er.innerHTML=N2,u(c,Bi,h),u(c,Q,h),e(Q,Ll),e(Ll,ra),e(ra,Lp),e(Q,qp),e(Q,De),e(De,zp),e(De,br),e(br,Vp),e(De,$p),e(De,yr),e(yr,Yp),e(De,Fp),e(Q,Wp),e(Q,ql),e(ql,oa),e(Q,Bp),e(Q,wr),e(wr,jp),u(c,ji,h),u(c,m,h),e(m,zl),e(zl,la),e(la,Kp),e(m,Qp),e(m,ne),e(ne,Jp),e(ne,kr),e(kr,Xp),e(ne,Zp),e(ne,Cr),e(Cr,ef),e(ne,tf),e(ne,Or),e(Or,af),e(ne,sf),e(m,rf),e(m,Vl),e(Vl,ia),e(ia,$l),e(ia,Yl),e(ia,ca),e(m,of),e(m,Le),e(Le,Dr),e(Dr,lf),e(Le,cf),e(Le,Ir),e(Ir,nf),e(Le,df),e(m,hf),e(m,Fl),e(Fl,na),e(na,Wl),e(na,Bl),e(na,da),e(m,uf),e(m,Ie),e(Ie,pf),e(Ie,Pr),e(Pr,ff),e(Ie,mf),e(Ie,Tr),e(Tr,gf),e(Ie,_f),e(m,vf),e(m,jl),e(jl,ha),e(ha,Kl),e(ha,Ql),e(ha,ua),e(m,Ef),e(m,de),e(de,bf),e(de,Sr),e(Sr,yf),e(de,wf),e(de,Jl),e(Jl,kf),e(de,Cf),e(de,Gr),e(Gr,Of),e(de,Df),e(m,If),e(m,he),e(he,Pf),e(he,xr),e(xr,Tf),e(he,Sf),e(he,Rr),e(Rr,Gf),e(he,xf),e(he,Hr),e(Hr,Rf),e(he,Hf),e(m,Nf),e(m,Xl),e(Xl,pa),e(pa,Zl),e(pa,ei),e(pa,fa),e(m,Af),e(m,Pe),e(Pe,Mf),e(Pe,Nr),e(Nr,Uf),e(Pe,Lf),e(Pe,Ar),e(Ar,qf),e(Pe,zf),e(m,Vf),e(m,ue),e(ue,$f),e(ue,Mr),e(Mr,Yf),e(ue,Ff),e(ue,Ur),e(Ur,Wf),e(ue,Bf),e(ue,Lr),e(Lr,jf),e(ue,Kf),e(m,Qf),e(m,ti),e(ti,ma),e(ma,ai),e(ma,si),e(ma,ga),e(m,Jf),e(m,q),e(q,Xf),e(q,qr),e(qr,Zf),e(q,em),e(q,zr),e(zr,tm),e(q,am),e(q,Vr),e(Vr,sm),e(q,rm),e(q,$r),e($r,om),e(q,lm),e(m,im),e(m,Te),e(Te,cm),e(Te,Yr),e(Yr,nm),e(Te,dm),e(Te,Fr),e(Fr,hm),e(Te,um),u(c,Ki,h),u(c,qe,h),e(qe,ri),e(ri,_a),e(_a,pm),e(qe,fm),e(qe,oi),e(oi,mm),u(c,Qi,h),u(c,ze,h),e(ze,li),e(li,va),e(va,gm),e(ze,_m),e(ze,ii),e(ii,vm),u(c,Ji,h),u(c,Ve,h),e(Ve,ci),e(ci,Ea),e(Ea,Em),e(Ve,bm),e(Ve,ni),e(ni,ym),u(c,Xi,h),u(c,$e,h),e($e,di),e(di,ba),e(ba,wm),e($e,km),e($e,Wr),e(Wr,Cm),e(Wr,Br),e(Br,Om),u(c,Zi,h),u(c,Ye,h),e(Ye,hi),e(hi,ya),e(ya,Dm),e(Ye,Im),e(Ye,J),e(J,jr),e(jr,Pm),e(J,Tm),e(J,Kr),e(Kr,Sm),e(J,Gm),e(J,Qr),e(Qr,xm),e(J,Rm),e(J,Jr),e(Jr,Hm),e(J,Nm),u(c,ec,h),u(c,Fe,h),e(Fe,ui),e(ui,wa),e(wa,Am),e(Fe,Mm),e(Fe,Se),e(Se,Um),e(Se,Xr),e(Xr,Lm),e(Se,qm),e(Se,Zr),e(Zr,zm),e(Se,Vm),u(c,tc,h),u(c,We,h),e(We,pi),e(pi,ka),e(ka,$m),e(We,Ym),e(We,Ca),e(Ca,Fm),e(Ca,eo),e(eo,Wm),e(Ca,Bm),u(c,ac,h),u(c,Be,h),e(Be,fi),e(fi,Oa),e(Oa,jm),e(Be,Km),e(Be,pe),e(pe,Qm),e(pe,to),e(to,Jm),e(pe,Xm),e(pe,ao),e(ao,Zm),e(pe,eg),e(pe,so),e(so,tg),e(pe,ag),u(c,sc,h),u(c,y,h),e(y,mi),e(mi,Da),e(Da,sg),e(y,rg),e(y,gi),e(gi,og),e(y,lg),e(y,Ia),e(Ia,ig),e(Ia,ro),e(ro,cg),e(Ia,ng),e(y,dg),e(y,oo),oo.innerHTML=A2,e(y,hg),e(y,x),e(x,ug),e(x,lo),e(lo,pg),e(x,fg),e(x,io),e(io,mg),e(x,gg),e(x,co),e(co,_g),e(x,vg),e(x,no),e(no,Eg),e(x,bg),e(x,ho),e(ho,yg),e(x,wg),e(y,kg),e(y,uo),uo.innerHTML=M2,e(y,Cg),e(y,Ge),e(Ge,Og),e(Ge,po),e(po,Dg),e(Ge,Ig),e(Ge,fo),e(fo,Pg),e(Ge,Tg),e(y,Sg),e(y,mo),mo.innerHTML=U2,e(y,Gg),e(y,Pa),e(Pa,xg),e(Pa,go),e(go,Rg),e(Pa,Hg),u(c,rc,h),u(c,P,h),e(P,_i),e(_i,Ta),e(Ta,Ng),e(P,Ag),e(P,vi),e(vi,Mg),e(P,Ug),e(P,k),e(k,Ei),e(Ei,Lg),e(k,qg),e(k,bi),e(bi,zg),e(k,Vg),e(k,yi),e(yi,$g),e(k,Yg),e(k,wi),e(wi,Fg),e(k,Wg),e(k,ki),e(ki,Bg),e(k,jg),e(k,Ci),e(Ci,Kg),e(k,Qg),e(k,Oi),e(Oi,Jg),e(k,Xg),e(k,Di),e(Di,Zg),e(P,e_),e(P,Sa),e(Sa,t_),e(Sa,_o),e(_o,a_),e(Sa,s_),e(P,r_),e(P,o_),e(P,l_),e(P,vo),e(vo,i_),e(vo,Eo),e(Eo,c_),oc=!0},p:Z2,i(c){oc||(I2(E.$$.fragment,c),oc=!0)},o(c){P2(E.$$.fragment,c),oc=!1},d(c){T2(E,c),c&&t(se),c&&t(z),c&&t(w),c&&t(C),c&&t(Gi),c&&t(Ha),c&&t(xi),c&&t(He),c&&t(Ri),c&&t(Ne),c&&t(Hi),c&&t(V),c&&t(Ni),c&&t(R),c&&t(Ai),c&&t($),c&&t(Mi),c&&t(H),c&&t(Ui),c&&t(N),c&&t(Li),c&&t(f),c&&t(qi),c&&t(p),c&&t(zi),c&&t(I),c&&t(Vi),c&&t(F),c&&t($i),c&&t(W),c&&t(Yi),c&&t(B),c&&t(Fi),c&&t(j),c&&t(Wi),c&&t(K),c&&t(Bi),c&&t(Q),c&&t(ji),c&&t(m),c&&t(Ki),c&&t(qe),c&&t(Qi),c&&t(ze),c&&t(Ji),c&&t(Ve),c&&t(Xi),c&&t($e),c&&t(Zi),c&&t(Ye),c&&t(ec),c&&t(Fe),c&&t(tc),c&&t(We),c&&t(ac),c&&t(Be),c&&t(sc),c&&t(y),c&&t(rc),c&&t(P)}}}function D3(xa){let E,se;const z=[xa[0],k2];let ut={$$slots:{default:[O3]},$$scope:{ctx:xa}};for(let w=0;w<z.length;w+=1)ut=__(ut,z[w]);return E=new e3({props:ut}),{c(){C2(E.$$.fragment)},l(w){O2(E.$$.fragment,w)},m(w,C){D2(E,w,C),se=!0},p(w,[C]){const Ra=C&1?J2(z,[C&1&&d2(w[0]),C&0&&d2(k2)]):{};C&2&&(Ra.$$scope={dirty:C,ctx:w}),E.$set(Ra)},i(w){se||(I2(E.$$.fragment,w),se=!0)},o(w){P2(E.$$.fragment,w),se=!1},d(w){T2(E,w)}}}const k2={title:"Git Gudder",venue:"Shopee SG",venueLink:"https://www.google.com.sg/maps/place/Shopee+Building/@1.2923933,103.7860786,19z/data=!3m1!4b1!4m5!3m4!1s0x31da1b803e3bae77:0x154e17d66760912b!8m2!3d1.2923933!4d103.7866258",occasion:"React Knowledgeable Week 41",occasionLink:"https://github.com/Shopee/shopee-react-knowledgeable/issues/129",slides:"https://slides.com/tanhauhau/git-gudder",date:"2019-08-30",label:"talk",layout:"talk"};function I3(xa,E,se){return X2("blog",{image:a3}),xa.$$set=z=>{se(0,E=__(__({},E),h2(z)))},E=h2(E),[E]}class N3 extends j2{constructor(E){super();K2(this,E,I3,D3,Q2,{})}}export{N3 as default,k2 as metadata};
