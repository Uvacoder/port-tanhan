import{S as M3,i as R3,s as q3,C as Ig,w as L3,x as U3,y as z3,z as V3,A as WE,q as Y3,o as W3,B as F3,r as $3,Y as FE,e as a,t as o,k as d,c as s,a as r,h as i,d as t,m as p,b as l,X as E,f as c,g as u,H as e,J as B3}from"../../chunks/vendor-da4388d4.js";import{T as j3}from"../../chunks/TalkLayout-d81f0c42.js";import{_ as K3}from"../../chunks/twitter-card-image-a57df29d.js";import"../../chunks/stores-1fad7c36.js";import"../../chunks/ldjson-b0805387.js";/* empty css                                */var J3="/_app/assets/git-rebase-w-5-40f84cef.webp",Q3="/_app/assets/git-rebase-w-5-72f577bd.webp",X3="/_app/assets/git-rebase-w-5-cab542e0.png",$E="/_app/assets/git-rebase-w-5-5a2d55ac.png",Z3="/_app/assets/git-rebase-w-4-78b4f72b.webp",e0="/_app/assets/git-rebase-w-4-4ed80686.webp",t0="/_app/assets/git-rebase-w-4-d5db6125.png",BE="/_app/assets/git-rebase-w-4-2584a942.png",a0="/_app/assets/git-rebase-w-3-c05740e5.webp",s0="/_app/assets/git-rebase-w-3-ec2827ca.webp",r0="/_app/assets/git-rebase-w-3-6b3fcc11.png",jE="/_app/assets/git-rebase-w-3-ffc13e9b.png",o0="/_app/assets/git-rebase-w-2-0417cc74.webp",i0="/_app/assets/git-rebase-w-2-b2000a8d.webp",l0="/_app/assets/git-rebase-w-2-9523a2a9.png",KE="/_app/assets/git-rebase-w-2-b8b283d7.png",c0="/_app/assets/git-rebase-w-23535fd9.webp",n0="/_app/assets/git-rebase-w-77da260b.webp",d0="/_app/assets/git-rebase-w-052503fb.png",JE="/_app/assets/git-rebase-w-11db8095.png",p0="/_app/assets/git-pull-rebase-e96cea4d.gif",QE="/_app/assets/git-pull-rebase-108e4a1b.gif",h0="/_app/assets/git-rebase-i-edit-659d16af.webp",u0="/_app/assets/git-rebase-i-edit-8b5613d8.webp",_0="/_app/assets/git-rebase-i-edit-f9cd0321.png",XE="/_app/assets/git-rebase-i-edit-ab47c210.png",f0="/_app/assets/git-rebase-i-edit-659d16af.webp",m0="/_app/assets/git-rebase-i-edit-8b5613d8.webp",g0="/_app/assets/git-rebase-i-edit-f9cd0321.png",ZE="/_app/assets/git-rebase-i-edit-ab47c210.png",v0="/_app/assets/git-rebase-i-squash-8a020892.webp",b0="/_app/assets/git-rebase-i-squash-9abb4d89.webp",E0="/_app/assets/git-rebase-i-squash-c3b29d41.png",e3="/_app/assets/git-rebase-i-squash-02b80129.png",y0="/_app/assets/git-rebase-i-drop-934580e2.webp",w0="/_app/assets/git-rebase-i-drop-c37640da.webp",k0="/_app/assets/git-rebase-i-drop-4702c3bb.png",t3="/_app/assets/git-rebase-i-drop-5f9056bc.png",a3="/_app/assets/git-rebase-i-pick-7274ae2b.webp",s3="/_app/assets/git-rebase-i-pick-604dbb33.webp",r3="/_app/assets/git-rebase-i-pick-49c122b1.png",Hc="/_app/assets/git-rebase-i-pick-32a4e89d.png",C0="/_app/assets/git-rebase-2b43108c.webp",O0="/_app/assets/git-rebase-967e11ec.webp",D0="/_app/assets/git-rebase-a4eff047.jpeg",o3="/_app/assets/git-rebase-dab4f768.jpeg",I0="/_app/assets/git-rebase-2-2b7025c5.gif",i3="/_app/assets/git-rebase-2-33228692.gif",x0="/_app/assets/git-rebase-1900225e.gif",l3="/_app/assets/git-rebase-369d0d6d.gif",P0="/_app/assets/git-revert-4-3edfe3dc.gif",c3="/_app/assets/git-revert-4-75e51dd4.gif",S0="/_app/assets/git-revert-3-8a0ba457.gif",n3="/_app/assets/git-revert-3-23bca0eb.gif",T0="/_app/assets/git-revert-2-dc29e568.gif",d3="/_app/assets/git-revert-2-67d081e4.gif",G0="/_app/assets/git-revert-7d3a118f.gif",p3="/_app/assets/git-revert-1eb721eb.gif",N0="/_app/assets/git-cherry-pick-b67643f3.gif",h3="/_app/assets/git-cherry-pick-3c698ca3.gif",A0="/_app/assets/git-reset-438d1bc4.gif",u3="/_app/assets/git-reset-c28aebc3.gif",H0="/_app/assets/git-pull-b6dc00cb.gif",_3="/_app/assets/git-pull-f9956a6f.gif",M0="/_app/assets/git-merge-non-ff-a3864a1c.gif",f3="/_app/assets/git-merge-non-ff-65850ed3.gif",R0="/_app/assets/git-merge-ff-dcf4441f.gif",m3="/_app/assets/git-merge-ff-a4be79f5.gif";function q0(Fa){let y,qe,Le,N,k,q,$a,Mc,ai,Rc,qc,Yl,Ba,si,Lc,Wl,St,ri,ca,Uc,zc,na,Vc,da,Yc,Wc,Fl,Tt,oi,pa,Fc,$c,xe,Bc,ja,jc,Kc,ii,Jc,Qc,li,Xc,Zc,$l,Y,ci,ha,en,tn,je,an,Ka,sn,rn,Ja,on,ln,cn,ni,Ke,W,xg,nn,Qa,dn,Bl,A,di,ua,pn,hn,Je,un,Xa,_n,fn,Za,mn,gn,vn,pi,Qe,F,Pg,bn,es,En,yn,hi,wn,jl,$,ui,_a,kn,Cn,Pe,On,ts,Dn,In,as,xn,Pn,ss,Sn,Tn,Gn,_i,Xe,B,Sg,Nn,rs,An,Kl,H,fi,fa,Hn,Mn,os,is,Rn,qn,Ln,Ue,ls,Un,zn,cs,Vn,Yn,ns,Wn,Fn,$n,mi,Ze,j,Tg,Bn,ds,jn,Jl,M,gi,ma,Kn,Jn,vi,Qn,Xn,Gt,ps,Zn,ed,hs,td,ad,sd,bi,et,K,Gg,rd,us,od,Ql,f,Ei,ga,id,ld,_s,fs,cd,nd,dd,L,pd,ms,hd,ud,gs,_d,fd,vs,md,gd,bs,vd,bd,Ed,yi,tt,J,Ng,yd,Es,wd,kd,va,Cd,ys,Od,Dd,Id,wi,at,Q,Ag,xd,ws,Pd,Sd,Se,Td,ks,Gd,Nd,Cs,Ad,Hd,Os,Md,Rd,qd,Ds,Is,Ld,Ud,zd,ki,st,X,Hg,Vd,xs,Yd,Wd,S,Fd,Ps,$d,Bd,Ss,jd,Kd,Ts,Jd,Qd,Gs,Xd,Zd,Ns,ep,tp,ap,Ci,rt,Z,Mg,sp,As,rp,Xl,_,Oi,ba,op,ip,Hs,Ms,lp,cp,np,D,dp,Rs,pp,hp,qs,up,_p,Ls,fp,mp,Us,gp,vp,zs,bp,Ep,Vs,yp,wp,kp,Nt,Ys,Cp,Op,Ws,Dp,Ip,xp,Di,ot,ee,Rg,Pp,Fs,Sp,Tp,$s,Bs,Gp,Np,Ap,At,js,Hp,Mp,Ks,Rp,qp,Lp,Ii,it,te,qg,Up,Js,zp,Vp,xi,Yp,Wp,lt,Pi,Qs,Fp,$p,Si,Xs,Bp,jp,Ti,Zs,Kp,Jp,Gi,ct,er,Ni,ae,Lg,Qp,tr,Xp,Zp,Ai,eh,th,U,se,ar,ah,sh,sr,rh,oh,rr,ih,lh,or,ch,nh,dh,T,ph,ir,hh,uh,lr,_h,fh,cr,mh,gh,nr,vh,bh,dr,Eh,yh,wh,nt,kh,pr,Ch,Oh,hr,Dh,Ih,xh,z,Ph,ur,Sh,Th,_r,Gh,Nh,fr,Ah,Hh,mr,Mh,Rh,qh,Te,Lh,gr,Uh,zh,vr,Vh,Yh,br,Wh,Fh,Zl,I,Hi,Ea,$h,Bh,Er,yr,jh,Kh,Jh,Mi,dt,wr,Ri,re,Ug,Qh,kr,Xh,Zh,ya,eu,Cr,tu,au,su,Or,v3=`<pre class="prism language-"><code><span class="line">pick #2 commit msg 2</span>
<span class="line">pick #3 commit msg 3</span>
<span class="line">pick #4 commit msg 4</span>
<span class="line">pick #5 commit msg 5</span>
<span class="line">pick #6 commit msg 6</span>
<span class="line"></span>
<span class="line"># Rebase #1..#6 onto #1 (5 commands)</span>
<span class="line">#</span>
<span class="line"># Commands:</span>
<span class="line"># p, pick = use commit</span>
<span class="line"># r, reword = use commit, but edit the commit message</span>
<span class="line"># e, edit = use commit, but stop for amending</span>
<span class="line">...</span></code></pre>`,ec,oe,qi,wa,ru,ou,Li,iu,lu,Ui,pt,Dr,zi,ie,zg,cu,Ir,b3=`<pre class="prism language-"><code><span class="line">pick #2 commit msg 2</span>
<span class="line">pick #3 commit msg 3</span>
<span class="line">pick #4 commit msg 4</span>
<span class="line">pick #5 commit msg 5</span>
<span class="line">pick #6 commit msg 6</span></code></pre>`,tc,le,Vi,ka,nu,du,Yi,pu,hu,Wi,ht,xr,Fi,ce,Vg,uu,Pr,E3=`<pre class="prism language-"><code><span class="line">pick #2 commit msg 2</span>
<span class="line">drop #3 commit msg 3</span>
<span class="line">pick #4 commit msg 4</span>
<span class="line">pick #5 commit msg 5</span>
<span class="line">pick #6 commit msg 6</span></code></pre>`,ac,ne,$i,Ca,_u,fu,Ge,mu,Sr,gu,vu,Tr,bu,Eu,Gr,yu,wu,ku,Bi,ut,Nr,ji,de,Yg,Cu,Ar,y3=`<pre class="prism language-"><code><span class="line">pick   #2 commit msg 2</span>
<span class="line">squash #3 commit msg 3</span>
<span class="line">pick   #4 commit msg 4</span>
<span class="line">fixup  #5 commit msg 5</span>
<span class="line">pick   #6 commit msg 6</span></code></pre>`,sc,pe,Ki,Oa,Ou,Du,Da,Iu,Hr,xu,Pu,Su,Ji,_t,Mr,Qi,he,Wg,Tu,Rr,w3=`<pre class="prism language-"><code><span class="line">pick   #2 commit msg 2</span>
<span class="line">pick   #3 commit msg 3</span>
<span class="line">break</span>
<span class="line">pick   #4 commit msg 4</span>
<span class="line">pick   #5 commit msg 5</span>
<span class="line">pick   #6 commit msg 6</span></code></pre>`,rc,ue,Xi,Ia,Gu,Nu,Zi,Au,Hu,el,ft,qr,tl,_e,Fg,Mu,Lr,k3=`<pre class="prism language-"><code><span class="line">pick   #2 commit msg 2</span>
<span class="line">edit   #3 commit msg 3</span>
<span class="line">pick   #4 commit msg 4</span>
<span class="line">pick   #5 commit msg 5</span>
<span class="line">pick   #6 commit msg 6</span></code></pre>`,oc,fe,al,xa,Ru,qu,mt,Lu,Ur,Uu,zu,zr,Vu,Yu,Wu,sl,gt,me,$g,Fu,Vr,$u,ic,m,rl,Pa,Bu,ju,Ne,Ku,Yr,Ju,Qu,Wr,Xu,Zu,Fr,e_,t_,a_,ol,vt,$r,il,ge,Bg,s_,Ht,Br,r_,o_,jr,i_,l_,c_,ll,bt,Kr,cl,ve,jg,n_,Et,d_,Jr,p_,h_,Qr,u_,__,f_,nl,yt,Xr,dl,be,Kg,m_,Ae,g_,Zr,v_,b_,pl,E_,y_,eo,w_,k_,C_,He,O_,to,D_,I_,ao,x_,P_,so,S_,T_,G_,hl,wt,ro,ul,Ee,Jg,N_,kt,A_,oo,H_,M_,io,R_,q_,L_,Me,U_,lo,z_,V_,co,Y_,W_,no,F_,$_,B_,_l,Ct,po,fl,ye,Qg,j_,V,K_,ho,J_,Q_,uo,X_,Z_,_o,ef,tf,fo,af,sf,rf,Ot,of,mo,lf,cf,go,nf,df,lc,Mt,ml,Sa,pf,hf,gl,uf,cc,Rt,vl,Ta,_f,ff,bl,mf,nc,qt,El,Ga,gf,vf,yl,bf,dc,Lt,wl,Na,Ef,yf,vo,wf,bo,kf,pc,Ut,kl,Aa,Cf,Of,we,Eo,Df,If,yo,xf,Pf,wo,Sf,Tf,ko,Gf,Nf,hc,zt,Cl,Ha,Af,Hf,Dt,Mf,Co,Rf,qf,Oo,Lf,Uf,uc,Vt,Ol,Ma,zf,Vf,Ra,Yf,Do,Wf,Ff,_c,Yt,Dl,qa,$f,Bf,Re,jf,Io,Kf,Jf,xo,Qf,Xf,Po,Zf,em,fc,w,Il,La,tm,am,xl,sm,rm,Ua,om,So,im,lm,cm,To,C3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">$ git bisect start </span><span style="color: var(--shiki-token-comment)"># starts the bisect session</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$ git bisect bad v2.5.1 </span><span style="color: var(--shiki-token-comment)"># specify the commit you know is bad</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$ git bisect good v2.6.13 </span><span style="color: var(--shiki-token-comment)"># specify the commit you knew were good</span></span></code></pre>`,nm,G,dm,Go,pm,hm,No,um,_m,Ao,fm,mm,Ho,gm,vm,Mo,bm,Em,ym,Ro,O3='<pre class="prism language-"><code><span class="line">Bisecting: 675 revisions left to test after this (roughly 10 steps)</span></code></pre>',wm,It,km,qo,Cm,Om,Lo,Dm,Im,xm,Uo,D3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)"># if it is a good commit</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$ git bisect good</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)"># if it is a bad commit</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$ git bisect bad</span></span></code></pre>`,Pm,za,Sm,zo,Tm,Gm,mc,x,Pl,Va,Nm,Am,Sl,Hm,Mm,C,Tl,Rm,qm,Gl,Lm,Um,Nl,zm,Vm,Al,Ym,Wm,Hl,Fm,$m,Ml,Bm,jm,Rl,Km,Jm,ql,Qm,Xm,Ya,Zm,Vo,eg,tg,ag,sg,rg,Yo,og,Wo,ig;return{c(){y=a("p"),qe=o("This week in React Knowledgeable, I did a sharing on Git commands."),Le=d(),N=a("p"),k=o("The title of the talk was called "),q=a("strong"),$a=o('"Git Gudder"'),Mc=o(', because almost a year ago I did a lightning sharing on "Git Gud", '),ai=a("em"),Rc=o("(Get Good)"),qc=o(', this follow up sharing used the comparative of "Git Gud", therefore, "Git Gudder".'),Yl=d(),Ba=a("blockquote"),si=a("p"),Lc=o('Will there be a "Git Guddest"? \u{1F914}'),Wl=d(),St=a("section"),ri=a("h2"),ca=a("a"),Uc=o("Disclaimer"),zc=d(),na=a("p"),Vc=o("I am by no means a Git master or anywhere near mastering Git. I do google or "),da=a("a"),Yc=o("refer to the docs"),Wc=o(" whenever I am unsure of the commands. In this talk, I listed out all the common history manipulation commands Git provides. I hoped that, with it, we are aware of what is available in our toolbox. So, we can look for it whenever we need it."),Fl=d(),Tt=a("section"),oi=a("h2"),pa=a("a"),Fc=o("git merge"),$c=d(),xe=a("p"),Bc=o("There's 2 kind of "),ja=a("code"),jc=o("git merge"),Kc=o(", the "),ii=a("strong"),Jc=o("fast-forward"),Qc=o(" and "),li=a("strong"),Xc=o("non fast-forward"),Zc=o("."),$l=d(),Y=a("section"),ci=a("h3"),ha=a("a"),en=o("Fast-forward merge"),tn=d(),je=a("p"),an=o("Merging "),Ka=a("code"),sn=o("master"),rn=o(" into "),Ja=a("code"),on=o("branch A"),ln=o(":"),cn=d(),ni=a("p"),Ke=a("span"),W=a("img"),nn=d(),Qa=a("div"),dn=o("Fast-forward merge"),Bl=d(),A=a("section"),di=a("h3"),ua=a("a"),pn=o("Non Fast-forward merge"),hn=d(),Je=a("p"),un=o("Merging "),Xa=a("code"),_n=o("master"),fn=o(" into "),Za=a("code"),mn=o("branch A"),gn=o(":"),vn=d(),pi=a("p"),Qe=a("span"),F=a("img"),bn=d(),es=a("div"),En=o("Non fast-forward merge"),yn=d(),hi=a("p"),wn=o("Non fast-forward merge will create an extra commit that merges 2 branches."),jl=d(),$=a("section"),ui=a("h3"),_a=a("a"),kn=o("git pull"),Cn=d(),Pe=a("p"),On=o("By default, "),ts=a("code"),Dn=o("git pull"),In=o(" is "),as=a("code"),xn=o("git fetch origin branch"),Pn=o(" + "),ss=a("code"),Sn=o("git merge origin/branch"),Tn=o("."),Gn=d(),_i=a("p"),Xe=a("span"),B=a("img"),Nn=d(),rs=a("div"),An=o("git pull"),Kl=d(),H=a("section"),fi=a("h2"),fa=a("a"),Hn=o("git reset"),Mn=d(),os=a("p"),is=a("code"),Rn=o("git reset --hard"),qn=o(" allows you to change the reference of where your branch is pointing at."),Ln=d(),Ue=a("p"),ls=a("code"),Un=o("git checkout branch-b"),zn=o(", "),cs=a("code"),Vn=o("git reset --hard branch-a"),Yn=o(", "),ns=a("code"),Wn=o("git reset --hard #d"),Fn=o(":"),$n=d(),mi=a("p"),Ze=a("span"),j=a("img"),Bn=d(),ds=a("div"),jn=o("git reset"),Jl=d(),M=a("section"),gi=a("h2"),ma=a("a"),Kn=o("git cherry-pick"),Jn=d(),vi=a("p"),Qn=o("cherry-pick allows you to pick commits from some other branches, tags, or refs."),Xn=d(),Gt=a("p"),ps=a("code"),Zn=o("git checkout branch-b"),ed=o(", "),hs=a("code"),td=o("git cherry-pick branch-a"),ad=o(":"),sd=d(),bi=a("p"),et=a("span"),K=a("img"),rd=d(),us=a("div"),od=o("git cherry-pick"),Ql=d(),f=a("section"),Ei=a("h2"),ga=a("a"),id=o("git revert"),ld=d(),_s=a("p"),fs=a("code"),cd=o("git revert"),nd=o(" creates a new commit that reverses the change of the commit that you are reverting."),dd=d(),L=a("p"),pd=o("For example, if you accidentally merged "),ms=a("code"),hd=o("feat/a"),ud=o(" into "),gs=a("code"),_d=o("master"),fd=o(" branch, you can "),vs=a("code"),md=o("git checkout master"),gd=o(", "),bs=a("code"),vd=o("git revert #1"),bd=o(":"),Ed=d(),yi=a("p"),tt=a("span"),J=a("img"),yd=d(),Es=a("div"),wd=o("git revert"),kd=d(),va=a("p"),Cd=o("If you know merge master into your "),ys=a("code"),Od=o("feat/a"),Dd=o(" branch, you would noticed that all the changes in the branch is gone, because the merge is a fast-forward merge, that includes the revert commit made in the branch:"),Id=d(),wi=a("p"),at=a("span"),Q=a("img"),xd=d(),ws=a("div"),Pd=o("Merging `master` into `feat/a`"),Sd=d(),Se=a("p"),Td=o("If you want to recover the changes made in "),ks=a("code"),Gd=o("feat/a"),Nd=o(", you can "),Cs=a("code"),Ad=o("revert"),Hd=o(" the "),Os=a("code"),Md=o("revert"),Rd=o(":"),qd=d(),Ds=a("p"),Is=a("code"),Ld=o("git revert ~#1"),Ud=o(":"),zd=d(),ki=a("p"),st=a("span"),X=a("img"),Vd=d(),xs=a("div"),Yd=o("git revert the revert"),Wd=d(),S=a("p"),Fd=o("Now, when you are ready to merge your "),Ps=a("code"),$d=o("feat/a"),Bd=o(" branch into "),Ss=a("code"),jd=o("master"),Kd=o(", you get the all the changes in "),Ts=a("code"),Jd=o("feat/a"),Qd=o(", a commit that revert all that, and a commit that reverts the revert commit, which meant, you still have all the changes in "),Gs=a("code"),Xd=o("feat/a"),Zd=o(" in "),Ns=a("code"),ep=o("master"),tp=o(":"),ap=d(),Ci=a("p"),rt=a("span"),Z=a("img"),sp=d(),As=a("div"),rp=o("Merging changes back to master"),Xl=d(),_=a("section"),Oi=a("h2"),ba=a("a"),op=o("git rebase"),ip=d(),Hs=a("p"),Ms=a("code"),lp=o("git rebase"),cp=o(' allows you to "move" commits to a different "base".'),np=d(),D=a("p"),dp=o("For example, you branched out "),Rs=a("code"),pp=o("branch-a"),hp=o(" from "),qs=a("code"),up=o("master"),_p=o(" a while ago, and "),Ls=a("code"),fp=o("master"),mp=o(" has made a few more commits. But if you merge your branch into master now, it would be a non fast-forward merge, creating an extra commit to the history. If you want a clean, one-line history, you can do a "),Us=a("code"),gp=o("rebase"),vp=o(", replaying commits that you have made in "),zs=a("code"),bp=o("branch-a"),Ep=o(" on top of the latest "),Vs=a("code"),yp=o("master"),wp=o("."),kp=d(),Nt=a("p"),Ys=a("code"),Cp=o("git checkout branch-a"),Op=o(", "),Ws=a("code"),Dp=o("git rebase master"),Ip=o(":"),xp=d(),Di=a("p"),ot=a("span"),ee=a("img"),Pp=d(),Fs=a("div"),Sp=o("git rebase"),Tp=d(),$s=a("p"),Bs=a("code"),Gp=o("git rebase"),Np=o(" does not have to be on top of the branch that you branched out, you can rebase to anywhere:"),Ap=d(),At=a("p"),js=a("code"),Hp=o("git checkout branch-a"),Mp=o(", "),Ks=a("code"),Rp=o("git rebase --onto branch-b master branch-a"),qp=o(":"),Lp=d(),Ii=a("p"),it=a("span"),te=a("img"),Up=d(),Js=a("div"),zp=o("git rebase"),Vp=d(),xi=a("p"),Yp=o("There's 3 reference point you should know when doing a git rebase:"),Wp=d(),lt=a("ul"),Pi=a("li"),Qs=a("code"),Fp=o("<new base>"),$p=d(),Si=a("li"),Xs=a("code"),Bp=o("<upstream>"),jp=d(),Ti=a("li"),Zs=a("code"),Kp=o("<branch>"),Jp=d(),Gi=a("p"),ct=a("span"),er=a("picture"),Ni=a("source"),ae=a("img"),Qp=d(),tr=a("div"),Xp=o("git rebase"),Zp=d(),Ai=a("p"),eh=o("Here are a few things you should know:"),th=d(),U=a("ul"),se=a("li"),ar=a("code"),ah=o("git rebase"),sh=o(" will replay the commits from "),sr=a("code"),rh=o("<upstream>"),oh=o(" to "),rr=a("code"),ih=o("<branch>"),lh=o(" onto "),or=a("code"),ch=o("<new base>"),nh=o("."),dh=d(),T=a("li"),ph=o("If you specify "),ir=a("code"),hh=o("<upstream>"),uh=o(" as a branch name, "),lr=a("code"),_h=o("git rebase"),fh=o(" will replay commits from the common ancestor of "),cr=a("code"),mh=o("<upstream>"),gh=o(" and "),nr=a("code"),vh=o("<branch>"),bh=o(" to "),dr=a("code"),Eh=o("<branch>"),yh=o("."),wh=d(),nt=a("li"),kh=o("If you do not specify "),pr=a("code"),Ch=o("<branch>"),Oh=o(", the default is the "),hr=a("code"),Dh=o("HEAD"),Ih=o(", current commit you are at now."),xh=d(),z=a("li"),Ph=o("If you do not specify "),ur=a("code"),Sh=o("--onto <new base>"),Th=o(", the new base will be default to "),_r=a("code"),Gh=o("<upsttream>"),Nh=o(", that's why "),fr=a("code"),Ah=o("git rebase master"),Hh=o(" is equivalent to "),mr=a("code"),Mh=o("git rebase --onto master master"),Rh=o("."),qh=d(),Te=a("li"),Lh=o("If you do not specify "),gr=a("code"),Uh=o("<upstream>"),zh=o(", it will be the upstream of the current branch. So "),vr=a("code"),Vh=o("git rebase"),Yh=o(" is equivalent to "),br=a("code"),Wh=o("git rebase <origin/current-branch>"),Fh=o("."),Zl=d(),I=a("section"),Hi=a("h3"),Ea=a("a"),$h=o("git rebase --interactive"),Bh=d(),Er=a("p"),yr=a("code"),jh=o("git rebase"),Kh=o(" has an interactive mode, which allows you to specify instructions while replaying commits during a rebase."),Jh=d(),Mi=a("p"),dt=a("span"),wr=a("picture"),Ri=a("source"),re=a("img"),Qh=d(),kr=a("div"),Xh=o("git rebase interactive"),Zh=d(),ya=a("p"),eu=o("When you run "),Cr=a("code"),tu=o("git rebase --interactive"),au=o(", git will prompt you with an editor to edit the instructions. In it, you will see a list of commits that will be replayed:"),su=d(),Or=a("div"),ec=d(),oe=a("section"),qi=a("h4"),wa=a("a"),ru=o("pick"),ou=d(),Li=a("p"),iu=o("The default instruction. Will just use the commit while replaying:"),lu=d(),Ui=a("p"),pt=a("span"),Dr=a("picture"),zi=a("source"),ie=a("img"),cu=d(),Ir=a("div"),tc=d(),le=a("section"),Vi=a("h4"),ka=a("a"),nu=o("drop"),du=d(),Yi=a("p"),pu=o("Drop will omit the commit:"),hu=d(),Wi=a("p"),ht=a("span"),xr=a("picture"),Fi=a("source"),ce=a("img"),uu=d(),Pr=a("div"),ac=d(),ne=a("section"),$i=a("h4"),Ca=a("a"),_u=o("squash & fixup"),fu=d(),Ge=a("p"),mu=o("Squash & Fixup will combine your commit with the previous commit, the only difference is that with "),Sr=a("code"),gu=o("squash"),vu=o(", git will prompt you to edit the commit message of the combined commit, while "),Tr=a("code"),bu=o("fixup"),Eu=o(" will drop the commit of the "),Gr=a("code"),yu=o("fixup"),wu=o("ed commit."),ku=d(),Bi=a("p"),ut=a("span"),Nr=a("picture"),ji=a("source"),de=a("img"),Cu=d(),Ar=a("div"),sc=d(),pe=a("section"),Ki=a("h4"),Oa=a("a"),Ou=o("break"),Du=d(),Da=a("p"),Iu=o("Pause the rebase. You can do add more commits here if you want. When you are done, make sure that your workspace and stage is clean, run "),Hr=a("code"),xu=o("git rebase --continue"),Pu=o(" to continue."),Su=d(),Ji=a("p"),_t=a("span"),Mr=a("picture"),Qi=a("source"),he=a("img"),Tu=d(),Rr=a("div"),rc=d(),ue=a("section"),Xi=a("h4"),Ia=a("a"),Gu=o("edit"),Nu=d(),Zi=a("p"),Au=o("Pause the rebase at the commit that you are editing, before the commit has been commited. You can add, remove or ammend your files before continue the rebase process."),Hu=d(),el=a("p"),ft=a("span"),qr=a("picture"),tl=a("source"),_e=a("img"),Mu=d(),Lr=a("div"),oc=d(),fe=a("section"),al=a("h3"),xa=a("a"),Ru=o("git pull --rebase"),qu=d(),mt=a("p"),Lu=o("There's a rebase mode for git pull, where it will be "),Ur=a("code"),Uu=o("git fetch origin branch"),zu=o(" + "),zr=a("code"),Vu=o("git rebase origin/branch"),Yu=o("."),Wu=d(),sl=a("p"),gt=a("span"),me=a("img"),Fu=d(),Vr=a("div"),$u=o("git pull --rebase"),ic=d(),m=a("section"),rl=a("h3"),Pa=a("a"),Bu=o("git rebase a shared branch"),ju=d(),Ne=a("p"),Ku=o("Say "),Yr=a("code"),Ju=o("x"),Qu=o(" and "),Wr=a("code"),Xu=o("y"),Zu=o(" are working on the "),Fr=a("code"),e_=o("feat/a"),t_=o(" branch."),a_=d(),ol=a("p"),vt=a("span"),$r=a("picture"),il=a("source"),ge=a("img"),s_=d(),Ht=a("p"),Br=a("code"),r_=o("x"),o_=o(" decided to rebase the "),jr=a("code"),i_=o("feat/a"),l_=o(" branch to squash and drop some commits:"),c_=d(),ll=a("p"),bt=a("span"),Kr=a("picture"),cl=a("source"),ve=a("img"),n_=d(),Et=a("p"),d_=o("While "),Jr=a("code"),p_=o("x"),h_=o(" had done that, that was just a part of the whole picture. Because the "),Qr=a("code"),u_=o("rebase"),__=o(" on his local machine changed the git history on his local copy only."),f_=d(),nl=a("p"),yt=a("span"),Xr=a("picture"),dl=a("source"),be=a("img"),m_=d(),Ae=a("p"),g_=o("To make the change on the remote server as well, "),Zr=a("code"),v_=o("x"),b_=o(" forced push his branch to the remote server. ("),pl=a("strong"),E_=o("Note:"),y_=o(" You can push without "),eo=a("code"),w_=o("--force"),k_=o(" if the origin branch cannot fast-forward merge your local branch)"),C_=d(),He=a("p"),O_=o("While "),to=a("code"),D_=o("y"),I_=o(" on the other hand, did not know about the "),ao=a("code"),x_=o("rebase"),P_=o(", so when "),so=a("code"),S_=o("y"),T_=o(" pulled the code, it ended up with a messed up merged of a messed up git history:"),G_=d(),hl=a("p"),wt=a("span"),ro=a("picture"),ul=a("source"),Ee=a("img"),N_=d(),kt=a("p"),A_=o("In most cases, there would be a merge conflict, because "),oo=a("code"),H_=o("x"),M_=o(" and "),io=a("code"),R_=o("y"),q_=o("'s branch would have made changes on the same file."),L_=d(),Me=a("p"),U_=o("So, the correct way, if the rebase is necessary, is to notify "),lo=a("code"),z_=o("y"),V_=o(" about the rebase, so that "),co=a("code"),Y_=o("y"),W_=o(" can "),no=a("code"),F_=o("git reset --hard"),$_=o(" his branch to the remote branch."),B_=d(),_l=a("p"),Ct=a("span"),po=a("picture"),fl=a("source"),ye=a("img"),j_=d(),V=a("p"),K_=o("If unfortunately, at the same time, "),ho=a("code"),J_=o("y"),Q_=o(" has made more commits to his local branch, he would have to "),uo=a("code"),X_=o("git rebase"),Z_=o(" the new changes onto the remote branch, or "),_o=a("code"),ef=o("git cherry-pick"),tf=o(" the new changes after the "),fo=a("code"),af=o("git reset --hard"),sf=o("."),rf=d(),Ot=a("p"),of=o("In the companies that I have worked with, forbidden a "),mo=a("code"),lf=o("rebase"),cf=o(" on a common branch, especially the "),go=a("code"),nf=o("master"),df=o(" branch."),lc=d(),Mt=a("section"),ml=a("h2"),Sa=a("a"),pf=o("git log"),hf=d(),gl=a("p"),uf=o("The go-to command to look at your git history. There's a few options that is worth mentioning, that allow us to search through the sea of commits:"),cc=d(),Rt=a("section"),vl=a("h3"),Ta=a("a"),_f=o("--since, --after, --until, --before"),ff=d(),bl=a("p"),mf=o("You can filter out commits within a specific timeframe"),nc=d(),qt=a("section"),El=a("h3"),Ga=a("a"),gf=o("--grep"),vf=d(),yl=a("p"),bf=o("You can filter out commits based on commit message"),dc=d(),Lt=a("section"),wl=a("h3"),Na=a("a"),Ef=o("--invert-grep"),yf=d(),vo=a("p"),wf=o("You can filter out commits that does not match the "),bo=a("code"),kf=o("--grep"),pc=d(),Ut=a("section"),kl=a("h3"),Aa=a("a"),Cf=o("--all-match"),Of=d(),we=a("p"),Eo=a("code"),Df=o("--grep"),If=o(" is a "),yo=a("code"),xf=o("OR"),Pf=o(" filter, "),wo=a("code"),Sf=o("--all-match"),Tf=o(" make it a "),ko=a("code"),Gf=o("AND"),Nf=o(" filter"),hc=d(),zt=a("section"),Cl=a("h3"),Ha=a("a"),Af=o("--min-parents, --max-parents, --merges, --no-merges"),Hf=d(),Dt=a("p"),Mf=o("You can specify commits with the number of parents. A simple merge commit has 2 parent, so "),Co=a("code"),Rf=o("--merge"),qf=o(" is equivalent to "),Oo=a("code"),Lf=o("--min-parents=2"),Uf=o("."),uc=d(),Vt=a("section"),Ol=a("h3"),Ma=a("a"),zf=o("--first-parent"),Vf=d(),Ra=a("p"),Yf=o("You can follow only the first parent commit upon seeing a merge commit. This is especially useful when you have merged of branches in, "),Do=a("code"),Wf=o("--first-parent"),Ff=o(" allow you to filter out only the merge commit and the commit you have made on the current branch."),_c=d(),Yt=a("section"),Dl=a("h2"),qa=a("a"),$f=o("git reflog"),Bf=d(),Re=a("p"),jf=o("The reference log shows you all the "),Io=a("code"),Kf=o("HEAD"),Jf=o(" position you have been to. This is especially useful when you have "),xo=a("code"),Qf=o("reset --hard"),Xf=o(" or "),Po=a("code"),Zf=o("rebase"),em=o(", you can still find back the commit reference that you were at previously, so you can recover them."),fc=d(),w=a("section"),Il=a("h2"),La=a("a"),tm=o("git bisect"),am=d(),xl=a("p"),sm=o("This is a useful command that I am looking forward to use it."),rm=d(),Ua=a("p"),om=o("Often times when you noticed something has changed / break / less optimised, yet you do not know when this change was introduced into your repository. "),So=a("code"),im=o("git bisect"),lm=o(" allows you to do binary search on the history, so that you can quickly pin down the commit where the change was introduced."),cm=d(),To=a("div"),nm=d(),G=a("p"),dm=o("Once you've specified at least one "),Go=a("code"),pm=o("bad"),hm=o(" and one "),No=a("code"),um=o("good"),_m=o(" commit, "),Ao=a("code"),fm=o("git bisect"),mm=o(" will find and checkout to a commit in the middle of that range between "),Ho=a("code"),gm=o("bad"),vm=o(" and "),Mo=a("code"),bm=o("good"),Em=o(" and greets you with:"),ym=d(),Ro=a("div"),wm=d(),It=a("p"),km=o("You can know test / verify / profile your code, and specify whether the current commit is a "),qo=a("code"),Cm=o("good"),Om=o(" commit or a "),Lo=a("code"),Dm=o("bad"),Im=o(" commit:"),xm=d(),Uo=a("div"),Pm=d(),za=a("p"),Sm=o("Continue doing it until eventually there's no more commit to inspect. "),zo=a("code"),Tm=o("git bisect"),Gm=o(" will print out the description of the first bad commit."),mc=d(),x=a("section"),Pl=a("h2"),Va=a("a"),Nm=o("Summary"),Am=d(),Sl=a("p"),Hm=o("We've gone through the following git commands:"),Mm=d(),C=a("ul"),Tl=a("li"),Rm=o("git merge"),qm=d(),Gl=a("li"),Lm=o("git reset"),Um=d(),Nl=a("li"),zm=o("git cherry-pick"),Vm=d(),Al=a("li"),Ym=o("git revert"),Wm=d(),Hl=a("li"),Fm=o("git rebase"),$m=d(),Ml=a("li"),Bm=o("git log"),jm=d(),Rl=a("li"),Km=o("git reflog"),Jm=d(),ql=a("li"),Qm=o("git bisect"),Xm=d(),Ya=a("p"),Zm=o("Hopefully we are now "),Vo=a("code"),eg=o("git gudder"),tg=o(" than before!"),ag=d(),sg=a("hr"),rg=d(),Yo=a("p"),og=o("Related topic: "),Wo=a("a"),ig=o("Git commits went missing after a rebase"),this.h()},l(n){y=s(n,"P",{});var h=r(y);qe=i(h,"This week in React Knowledgeable, I did a sharing on Git commands."),h.forEach(t),Le=p(n),N=s(n,"P",{});var Fo=r(N);k=i(Fo,"The title of the talk was called "),q=s(Fo,"STRONG",{});var Xg=r(q);$a=i(Xg,'"Git Gudder"'),Xg.forEach(t),Mc=i(Fo,', because almost a year ago I did a lightning sharing on "Git Gud", '),ai=s(Fo,"EM",{});var Zg=r(ai);Rc=i(Zg,"(Get Good)"),Zg.forEach(t),qc=i(Fo,', this follow up sharing used the comparative of "Git Gud", therefore, "Git Gudder".'),Fo.forEach(t),Yl=p(n),Ba=s(n,"BLOCKQUOTE",{});var ev=r(Ba);si=s(ev,"P",{});var tv=r(si);Lc=i(tv,'Will there be a "Git Guddest"? \u{1F914}'),tv.forEach(t),ev.forEach(t),Wl=p(n),St=s(n,"SECTION",{});var gc=r(St);ri=s(gc,"H2",{});var av=r(ri);ca=s(av,"A",{href:!0,id:!0});var sv=r(ca);Uc=i(sv,"Disclaimer"),sv.forEach(t),av.forEach(t),zc=p(gc),na=s(gc,"P",{});var vc=r(na);Vc=i(vc,"I am by no means a Git master or anywhere near mastering Git. I do google or "),da=s(vc,"A",{href:!0,rel:!0});var rv=r(da);Yc=i(rv,"refer to the docs"),rv.forEach(t),Wc=i(vc," whenever I am unsure of the commands. In this talk, I listed out all the common history manipulation commands Git provides. I hoped that, with it, we are aware of what is available in our toolbox. So, we can look for it whenever we need it."),vc.forEach(t),gc.forEach(t),Fl=p(n),Tt=s(n,"SECTION",{});var bc=r(Tt);oi=s(bc,"H2",{});var ov=r(oi);pa=s(ov,"A",{href:!0,id:!0});var iv=r(pa);Fc=i(iv,"git merge"),iv.forEach(t),ov.forEach(t),$c=p(bc),xe=s(bc,"P",{});var Wt=r(xe);Bc=i(Wt,"There's 2 kind of "),ja=s(Wt,"CODE",{class:!0});var lv=r(ja);jc=i(lv,"git merge"),lv.forEach(t),Kc=i(Wt,", the "),ii=s(Wt,"STRONG",{});var cv=r(ii);Jc=i(cv,"fast-forward"),cv.forEach(t),Qc=i(Wt," and "),li=s(Wt,"STRONG",{});var nv=r(li);Xc=i(nv,"non fast-forward"),nv.forEach(t),Zc=i(Wt,"."),Wt.forEach(t),bc.forEach(t),$l=p(n),Y=s(n,"SECTION",{});var Ft=r(Y);ci=s(Ft,"H3",{});var dv=r(ci);ha=s(dv,"A",{href:!0,id:!0});var pv=r(ha);en=i(pv,"Fast-forward merge"),pv.forEach(t),dv.forEach(t),tn=p(Ft),je=s(Ft,"P",{});var $o=r(je);an=i($o,"Merging "),Ka=s($o,"CODE",{class:!0});var hv=r(Ka);sn=i(hv,"master"),hv.forEach(t),rn=i($o," into "),Ja=s($o,"CODE",{class:!0});var uv=r(Ja);on=i(uv,"branch A"),uv.forEach(t),ln=i($o,":"),$o.forEach(t),cn=p(Ft),ni=s(Ft,"P",{});var _v=r(ni);Ke=s(_v,"SPAN",{style:!0});var fv=r(Ke);W=s(fv,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),fv.forEach(t),_v.forEach(t),nn=p(Ft),Qa=s(Ft,"DIV",{class:!0});var mv=r(Qa);dn=i(mv,"Fast-forward merge"),mv.forEach(t),Ft.forEach(t),Bl=p(n),A=s(n,"SECTION",{});var ze=r(A);di=s(ze,"H3",{});var gv=r(di);ua=s(gv,"A",{href:!0,id:!0});var vv=r(ua);pn=i(vv,"Non Fast-forward merge"),vv.forEach(t),gv.forEach(t),hn=p(ze),Je=s(ze,"P",{});var Bo=r(Je);un=i(Bo,"Merging "),Xa=s(Bo,"CODE",{class:!0});var bv=r(Xa);_n=i(bv,"master"),bv.forEach(t),fn=i(Bo," into "),Za=s(Bo,"CODE",{class:!0});var Ev=r(Za);mn=i(Ev,"branch A"),Ev.forEach(t),gn=i(Bo,":"),Bo.forEach(t),vn=p(ze),pi=s(ze,"P",{});var yv=r(pi);Qe=s(yv,"SPAN",{style:!0});var wv=r(Qe);F=s(wv,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),wv.forEach(t),yv.forEach(t),bn=p(ze),es=s(ze,"DIV",{class:!0});var kv=r(es);En=i(kv,"Non fast-forward merge"),kv.forEach(t),yn=p(ze),hi=s(ze,"P",{});var Cv=r(hi);wn=i(Cv,"Non fast-forward merge will create an extra commit that merges 2 branches."),Cv.forEach(t),ze.forEach(t),jl=p(n),$=s(n,"SECTION",{});var $t=r($);ui=s($t,"H3",{});var Ov=r(ui);_a=s(Ov,"A",{href:!0,id:!0});var Dv=r(_a);kn=i(Dv,"git pull"),Dv.forEach(t),Ov.forEach(t),Cn=p($t),Pe=s($t,"P",{});var Bt=r(Pe);On=i(Bt,"By default, "),ts=s(Bt,"CODE",{class:!0});var Iv=r(ts);Dn=i(Iv,"git pull"),Iv.forEach(t),In=i(Bt," is "),as=s(Bt,"CODE",{class:!0});var xv=r(as);xn=i(xv,"git fetch origin branch"),xv.forEach(t),Pn=i(Bt," + "),ss=s(Bt,"CODE",{class:!0});var Pv=r(ss);Sn=i(Pv,"git merge origin/branch"),Pv.forEach(t),Tn=i(Bt,"."),Bt.forEach(t),Gn=p($t),_i=s($t,"P",{});var Sv=r(_i);Xe=s(Sv,"SPAN",{style:!0});var Tv=r(Xe);B=s(Tv,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),Tv.forEach(t),Sv.forEach(t),Nn=p($t),rs=s($t,"DIV",{class:!0});var Gv=r(rs);An=i(Gv,"git pull"),Gv.forEach(t),$t.forEach(t),Kl=p(n),H=s(n,"SECTION",{});var Ve=r(H);fi=s(Ve,"H2",{});var Nv=r(fi);fa=s(Nv,"A",{href:!0,id:!0});var Av=r(fa);Hn=i(Av,"git reset"),Av.forEach(t),Nv.forEach(t),Mn=p(Ve),os=s(Ve,"P",{});var lg=r(os);is=s(lg,"CODE",{class:!0});var Hv=r(is);Rn=i(Hv,"git reset --hard"),Hv.forEach(t),qn=i(lg," allows you to change the reference of where your branch is pointing at."),lg.forEach(t),Ln=p(Ve),Ue=s(Ve,"P",{});var Wa=r(Ue);ls=s(Wa,"CODE",{class:!0});var Mv=r(ls);Un=i(Mv,"git checkout branch-b"),Mv.forEach(t),zn=i(Wa,", "),cs=s(Wa,"CODE",{class:!0});var Rv=r(cs);Vn=i(Rv,"git reset --hard branch-a"),Rv.forEach(t),Yn=i(Wa,", "),ns=s(Wa,"CODE",{class:!0});var qv=r(ns);Wn=i(qv,"git reset --hard #d"),qv.forEach(t),Fn=i(Wa,":"),Wa.forEach(t),$n=p(Ve),mi=s(Ve,"P",{});var Lv=r(mi);Ze=s(Lv,"SPAN",{style:!0});var Uv=r(Ze);j=s(Uv,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),Uv.forEach(t),Lv.forEach(t),Bn=p(Ve),ds=s(Ve,"DIV",{class:!0});var zv=r(ds);jn=i(zv,"git reset"),zv.forEach(t),Ve.forEach(t),Jl=p(n),M=s(n,"SECTION",{});var Ye=r(M);gi=s(Ye,"H2",{});var Vv=r(gi);ma=s(Vv,"A",{href:!0,id:!0});var Yv=r(ma);Kn=i(Yv,"git cherry-pick"),Yv.forEach(t),Vv.forEach(t),Jn=p(Ye),vi=s(Ye,"P",{});var Wv=r(vi);Qn=i(Wv,"cherry-pick allows you to pick commits from some other branches, tags, or refs."),Wv.forEach(t),Xn=p(Ye),Gt=s(Ye,"P",{});var Ll=r(Gt);ps=s(Ll,"CODE",{class:!0});var Fv=r(ps);Zn=i(Fv,"git checkout branch-b"),Fv.forEach(t),ed=i(Ll,", "),hs=s(Ll,"CODE",{class:!0});var $v=r(hs);td=i($v,"git cherry-pick branch-a"),$v.forEach(t),ad=i(Ll,":"),Ll.forEach(t),sd=p(Ye),bi=s(Ye,"P",{});var Bv=r(bi);et=s(Bv,"SPAN",{style:!0});var jv=r(et);K=s(jv,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),jv.forEach(t),Bv.forEach(t),rd=p(Ye),us=s(Ye,"DIV",{class:!0});var Kv=r(us);od=i(Kv,"git cherry-pick"),Kv.forEach(t),Ye.forEach(t),Ql=p(n),f=s(n,"SECTION",{});var v=r(f);Ei=s(v,"H2",{});var Jv=r(Ei);ga=s(Jv,"A",{href:!0,id:!0});var Qv=r(ga);id=i(Qv,"git revert"),Qv.forEach(t),Jv.forEach(t),ld=p(v),_s=s(v,"P",{});var cg=r(_s);fs=s(cg,"CODE",{class:!0});var Xv=r(fs);cd=i(Xv,"git revert"),Xv.forEach(t),nd=i(cg," creates a new commit that reverses the change of the commit that you are reverting."),cg.forEach(t),dd=p(v),L=s(v,"P",{});var We=r(L);pd=i(We,"For example, if you accidentally merged "),ms=s(We,"CODE",{class:!0});var Zv=r(ms);hd=i(Zv,"feat/a"),Zv.forEach(t),ud=i(We," into "),gs=s(We,"CODE",{class:!0});var e1=r(gs);_d=i(e1,"master"),e1.forEach(t),fd=i(We," branch, you can "),vs=s(We,"CODE",{class:!0});var t1=r(vs);md=i(t1,"git checkout master"),t1.forEach(t),gd=i(We,", "),bs=s(We,"CODE",{class:!0});var a1=r(bs);vd=i(a1,"git revert #1"),a1.forEach(t),bd=i(We,":"),We.forEach(t),Ed=p(v),yi=s(v,"P",{});var s1=r(yi);tt=s(s1,"SPAN",{style:!0});var r1=r(tt);J=s(r1,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),r1.forEach(t),s1.forEach(t),yd=p(v),Es=s(v,"DIV",{class:!0});var o1=r(Es);wd=i(o1,"git revert"),o1.forEach(t),kd=p(v),va=s(v,"P",{});var Ec=r(va);Cd=i(Ec,"If you know merge master into your "),ys=s(Ec,"CODE",{class:!0});var i1=r(ys);Od=i(i1,"feat/a"),i1.forEach(t),Dd=i(Ec," branch, you would noticed that all the changes in the branch is gone, because the merge is a fast-forward merge, that includes the revert commit made in the branch:"),Ec.forEach(t),Id=p(v),wi=s(v,"P",{});var l1=r(wi);at=s(l1,"SPAN",{style:!0});var c1=r(at);Q=s(c1,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),c1.forEach(t),l1.forEach(t),xd=p(v),ws=s(v,"DIV",{class:!0});var n1=r(ws);Pd=i(n1,"Merging `master` into `feat/a`"),n1.forEach(t),Sd=p(v),Se=s(v,"P",{});var jt=r(Se);Td=i(jt,"If you want to recover the changes made in "),ks=s(jt,"CODE",{class:!0});var d1=r(ks);Gd=i(d1,"feat/a"),d1.forEach(t),Nd=i(jt,", you can "),Cs=s(jt,"CODE",{class:!0});var p1=r(Cs);Ad=i(p1,"revert"),p1.forEach(t),Hd=i(jt," the "),Os=s(jt,"CODE",{class:!0});var h1=r(Os);Md=i(h1,"revert"),h1.forEach(t),Rd=i(jt,":"),jt.forEach(t),qd=p(v),Ds=s(v,"P",{});var ng=r(Ds);Is=s(ng,"CODE",{class:!0});var u1=r(Is);Ld=i(u1,"git revert ~#1"),u1.forEach(t),Ud=i(ng,":"),ng.forEach(t),zd=p(v),ki=s(v,"P",{});var _1=r(ki);st=s(_1,"SPAN",{style:!0});var f1=r(st);X=s(f1,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),f1.forEach(t),_1.forEach(t),Vd=p(v),xs=s(v,"DIV",{class:!0});var m1=r(xs);Yd=i(m1,"git revert the revert"),m1.forEach(t),Wd=p(v),S=s(v,"P",{});var ke=r(S);Fd=i(ke,"Now, when you are ready to merge your "),Ps=s(ke,"CODE",{class:!0});var g1=r(Ps);$d=i(g1,"feat/a"),g1.forEach(t),Bd=i(ke," branch into "),Ss=s(ke,"CODE",{class:!0});var v1=r(Ss);jd=i(v1,"master"),v1.forEach(t),Kd=i(ke,", you get the all the changes in "),Ts=s(ke,"CODE",{class:!0});var b1=r(Ts);Jd=i(b1,"feat/a"),b1.forEach(t),Qd=i(ke,", a commit that revert all that, and a commit that reverts the revert commit, which meant, you still have all the changes in "),Gs=s(ke,"CODE",{class:!0});var E1=r(Gs);Xd=i(E1,"feat/a"),E1.forEach(t),Zd=i(ke," in "),Ns=s(ke,"CODE",{class:!0});var y1=r(Ns);ep=i(y1,"master"),y1.forEach(t),tp=i(ke,":"),ke.forEach(t),ap=p(v),Ci=s(v,"P",{});var w1=r(Ci);rt=s(w1,"SPAN",{style:!0});var k1=r(rt);Z=s(k1,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),k1.forEach(t),w1.forEach(t),sp=p(v),As=s(v,"DIV",{class:!0});var C1=r(As);rp=i(C1,"Merging changes back to master"),C1.forEach(t),v.forEach(t),Xl=p(n),_=s(n,"SECTION",{});var g=r(_);Oi=s(g,"H2",{});var O1=r(Oi);ba=s(O1,"A",{href:!0,id:!0});var D1=r(ba);op=i(D1,"git rebase"),D1.forEach(t),O1.forEach(t),ip=p(g),Hs=s(g,"P",{});var dg=r(Hs);Ms=s(dg,"CODE",{class:!0});var I1=r(Ms);lp=i(I1,"git rebase"),I1.forEach(t),cp=i(dg,' allows you to "move" commits to a different "base".'),dg.forEach(t),np=p(g),D=s(g,"P",{});var R=r(D);dp=i(R,"For example, you branched out "),Rs=s(R,"CODE",{class:!0});var x1=r(Rs);pp=i(x1,"branch-a"),x1.forEach(t),hp=i(R," from "),qs=s(R,"CODE",{class:!0});var P1=r(qs);up=i(P1,"master"),P1.forEach(t),_p=i(R," a while ago, and "),Ls=s(R,"CODE",{class:!0});var S1=r(Ls);fp=i(S1,"master"),S1.forEach(t),mp=i(R," has made a few more commits. But if you merge your branch into master now, it would be a non fast-forward merge, creating an extra commit to the history. If you want a clean, one-line history, you can do a "),Us=s(R,"CODE",{class:!0});var T1=r(Us);gp=i(T1,"rebase"),T1.forEach(t),vp=i(R,", replaying commits that you have made in "),zs=s(R,"CODE",{class:!0});var G1=r(zs);bp=i(G1,"branch-a"),G1.forEach(t),Ep=i(R," on top of the latest "),Vs=s(R,"CODE",{class:!0});var N1=r(Vs);yp=i(N1,"master"),N1.forEach(t),wp=i(R,"."),R.forEach(t),kp=p(g),Nt=s(g,"P",{});var Ul=r(Nt);Ys=s(Ul,"CODE",{class:!0});var A1=r(Ys);Cp=i(A1,"git checkout branch-a"),A1.forEach(t),Op=i(Ul,", "),Ws=s(Ul,"CODE",{class:!0});var H1=r(Ws);Dp=i(H1,"git rebase master"),H1.forEach(t),Ip=i(Ul,":"),Ul.forEach(t),xp=p(g),Di=s(g,"P",{});var M1=r(Di);ot=s(M1,"SPAN",{style:!0});var R1=r(ot);ee=s(R1,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),R1.forEach(t),M1.forEach(t),Pp=p(g),Fs=s(g,"DIV",{class:!0});var q1=r(Fs);Sp=i(q1,"git rebase"),q1.forEach(t),Tp=p(g),$s=s(g,"P",{});var pg=r($s);Bs=s(pg,"CODE",{class:!0});var L1=r(Bs);Gp=i(L1,"git rebase"),L1.forEach(t),Np=i(pg," does not have to be on top of the branch that you branched out, you can rebase to anywhere:"),pg.forEach(t),Ap=p(g),At=s(g,"P",{});var zl=r(At);js=s(zl,"CODE",{class:!0});var U1=r(js);Hp=i(U1,"git checkout branch-a"),U1.forEach(t),Mp=i(zl,", "),Ks=s(zl,"CODE",{class:!0});var z1=r(Ks);Rp=i(z1,"git rebase --onto branch-b master branch-a"),z1.forEach(t),qp=i(zl,":"),zl.forEach(t),Lp=p(g),Ii=s(g,"P",{});var V1=r(Ii);it=s(V1,"SPAN",{style:!0});var Y1=r(it);te=s(Y1,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),Y1.forEach(t),V1.forEach(t),Up=p(g),Js=s(g,"DIV",{class:!0});var W1=r(Js);zp=i(W1,"git rebase"),W1.forEach(t),Vp=p(g),xi=s(g,"P",{});var F1=r(xi);Yp=i(F1,"There's 3 reference point you should know when doing a git rebase:"),F1.forEach(t),Wp=p(g),lt=s(g,"UL",{});var jo=r(lt);Pi=s(jo,"LI",{});var $1=r(Pi);Qs=s($1,"CODE",{class:!0});var B1=r(Qs);Fp=i(B1,"<new base>"),B1.forEach(t),$1.forEach(t),$p=p(jo),Si=s(jo,"LI",{});var j1=r(Si);Xs=s(j1,"CODE",{class:!0});var K1=r(Xs);Bp=i(K1,"<upstream>"),K1.forEach(t),j1.forEach(t),jp=p(jo),Ti=s(jo,"LI",{});var J1=r(Ti);Zs=s(J1,"CODE",{class:!0});var Q1=r(Zs);Kp=i(Q1,"<branch>"),Q1.forEach(t),J1.forEach(t),jo.forEach(t),Jp=p(g),Gi=s(g,"P",{});var X1=r(Gi);ct=s(X1,"SPAN",{style:!0});var Z1=r(ct);er=s(Z1,"PICTURE",{});var hg=r(er);Ni=s(hg,"SOURCE",{type:!0,srcset:!0}),ae=s(hg,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),hg.forEach(t),Z1.forEach(t),X1.forEach(t),Qp=p(g),tr=s(g,"DIV",{class:!0});var eb=r(tr);Xp=i(eb,"git rebase"),eb.forEach(t),Zp=p(g),Ai=s(g,"P",{});var tb=r(Ai);eh=i(tb,"Here are a few things you should know:"),tb.forEach(t),th=p(g),U=s(g,"UL",{});var Fe=r(U);se=s(Fe,"LI",{});var xt=r(se);ar=s(xt,"CODE",{class:!0});var ab=r(ar);ah=i(ab,"git rebase"),ab.forEach(t),sh=i(xt," will replay the commits from "),sr=s(xt,"CODE",{class:!0});var sb=r(sr);rh=i(sb,"<upstream>"),sb.forEach(t),oh=i(xt," to "),rr=s(xt,"CODE",{class:!0});var rb=r(rr);ih=i(rb,"<branch>"),rb.forEach(t),lh=i(xt," onto "),or=s(xt,"CODE",{class:!0});var ob=r(or);ch=i(ob,"<new base>"),ob.forEach(t),nh=i(xt,"."),xt.forEach(t),dh=p(Fe),T=s(Fe,"LI",{});var Ce=r(T);ph=i(Ce,"If you specify "),ir=s(Ce,"CODE",{class:!0});var ib=r(ir);hh=i(ib,"<upstream>"),ib.forEach(t),uh=i(Ce," as a branch name, "),lr=s(Ce,"CODE",{class:!0});var lb=r(lr);_h=i(lb,"git rebase"),lb.forEach(t),fh=i(Ce," will replay commits from the common ancestor of "),cr=s(Ce,"CODE",{class:!0});var cb=r(cr);mh=i(cb,"<upstream>"),cb.forEach(t),gh=i(Ce," and "),nr=s(Ce,"CODE",{class:!0});var nb=r(nr);vh=i(nb,"<branch>"),nb.forEach(t),bh=i(Ce," to "),dr=s(Ce,"CODE",{class:!0});var db=r(dr);Eh=i(db,"<branch>"),db.forEach(t),yh=i(Ce,"."),Ce.forEach(t),wh=p(Fe),nt=s(Fe,"LI",{});var Ko=r(nt);kh=i(Ko,"If you do not specify "),pr=s(Ko,"CODE",{class:!0});var pb=r(pr);Ch=i(pb,"<branch>"),pb.forEach(t),Oh=i(Ko,", the default is the "),hr=s(Ko,"CODE",{class:!0});var hb=r(hr);Dh=i(hb,"HEAD"),hb.forEach(t),Ih=i(Ko,", current commit you are at now."),Ko.forEach(t),xh=p(Fe),z=s(Fe,"LI",{});var $e=r(z);Ph=i($e,"If you do not specify "),ur=s($e,"CODE",{class:!0});var ub=r(ur);Sh=i(ub,"--onto <new base>"),ub.forEach(t),Th=i($e,", the new base will be default to "),_r=s($e,"CODE",{class:!0});var _b=r(_r);Gh=i(_b,"<upsttream>"),_b.forEach(t),Nh=i($e,", that's why "),fr=s($e,"CODE",{class:!0});var fb=r(fr);Ah=i(fb,"git rebase master"),fb.forEach(t),Hh=i($e," is equivalent to "),mr=s($e,"CODE",{class:!0});var mb=r(mr);Mh=i(mb,"git rebase --onto master master"),mb.forEach(t),Rh=i($e,"."),$e.forEach(t),qh=p(Fe),Te=s(Fe,"LI",{});var Kt=r(Te);Lh=i(Kt,"If you do not specify "),gr=s(Kt,"CODE",{class:!0});var gb=r(gr);Uh=i(gb,"<upstream>"),gb.forEach(t),zh=i(Kt,", it will be the upstream of the current branch. So "),vr=s(Kt,"CODE",{class:!0});var vb=r(vr);Vh=i(vb,"git rebase"),vb.forEach(t),Yh=i(Kt," is equivalent to "),br=s(Kt,"CODE",{class:!0});var bb=r(br);Wh=i(bb,"git rebase <origin/current-branch>"),bb.forEach(t),Fh=i(Kt,"."),Kt.forEach(t),Fe.forEach(t),g.forEach(t),Zl=p(n),I=s(n,"SECTION",{});var Oe=r(I);Hi=s(Oe,"H3",{});var Eb=r(Hi);Ea=s(Eb,"A",{href:!0,id:!0});var yb=r(Ea);$h=i(yb,"git rebase --interactive"),yb.forEach(t),Eb.forEach(t),Bh=p(Oe),Er=s(Oe,"P",{});var ug=r(Er);yr=s(ug,"CODE",{class:!0});var wb=r(yr);jh=i(wb,"git rebase"),wb.forEach(t),Kh=i(ug," has an interactive mode, which allows you to specify instructions while replaying commits during a rebase."),ug.forEach(t),Jh=p(Oe),Mi=s(Oe,"P",{});var kb=r(Mi);dt=s(kb,"SPAN",{style:!0});var Cb=r(dt);wr=s(Cb,"PICTURE",{});var _g=r(wr);Ri=s(_g,"SOURCE",{type:!0,srcset:!0}),re=s(_g,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),_g.forEach(t),Cb.forEach(t),kb.forEach(t),Qh=p(Oe),kr=s(Oe,"DIV",{class:!0});var Ob=r(kr);Xh=i(Ob,"git rebase interactive"),Ob.forEach(t),Zh=p(Oe),ya=s(Oe,"P",{});var yc=r(ya);eu=i(yc,"When you run "),Cr=s(yc,"CODE",{class:!0});var Db=r(Cr);tu=i(Db,"git rebase --interactive"),Db.forEach(t),au=i(yc,", git will prompt you with an editor to edit the instructions. In it, you will see a list of commits that will be replayed:"),yc.forEach(t),su=p(Oe),Or=s(Oe,"DIV",{class:!0});var I3=r(Or);I3.forEach(t),Oe.forEach(t),ec=p(n),oe=s(n,"SECTION",{});var Jt=r(oe);qi=s(Jt,"H4",{});var Ib=r(qi);wa=s(Ib,"A",{href:!0,id:!0});var xb=r(wa);ru=i(xb,"pick"),xb.forEach(t),Ib.forEach(t),ou=p(Jt),Li=s(Jt,"P",{});var Pb=r(Li);iu=i(Pb,"The default instruction. Will just use the commit while replaying:"),Pb.forEach(t),lu=p(Jt),Ui=s(Jt,"P",{});var Sb=r(Ui);pt=s(Sb,"SPAN",{style:!0});var Tb=r(pt);Dr=s(Tb,"PICTURE",{});var fg=r(Dr);zi=s(fg,"SOURCE",{type:!0,srcset:!0}),ie=s(fg,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),fg.forEach(t),Tb.forEach(t),Sb.forEach(t),cu=p(Jt),Ir=s(Jt,"DIV",{class:!0});var x3=r(Ir);x3.forEach(t),Jt.forEach(t),tc=p(n),le=s(n,"SECTION",{});var Qt=r(le);Vi=s(Qt,"H4",{});var Gb=r(Vi);ka=s(Gb,"A",{href:!0,id:!0});var Nb=r(ka);nu=i(Nb,"drop"),Nb.forEach(t),Gb.forEach(t),du=p(Qt),Yi=s(Qt,"P",{});var Ab=r(Yi);pu=i(Ab,"Drop will omit the commit:"),Ab.forEach(t),hu=p(Qt),Wi=s(Qt,"P",{});var Hb=r(Wi);ht=s(Hb,"SPAN",{style:!0});var Mb=r(ht);xr=s(Mb,"PICTURE",{});var mg=r(xr);Fi=s(mg,"SOURCE",{type:!0,srcset:!0}),ce=s(mg,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),mg.forEach(t),Mb.forEach(t),Hb.forEach(t),uu=p(Qt),Pr=s(Qt,"DIV",{class:!0});var P3=r(Pr);P3.forEach(t),Qt.forEach(t),ac=p(n),ne=s(n,"SECTION",{});var Xt=r(ne);$i=s(Xt,"H4",{});var Rb=r($i);Ca=s(Rb,"A",{href:!0,id:!0});var qb=r(Ca);_u=i(qb,"squash & fixup"),qb.forEach(t),Rb.forEach(t),fu=p(Xt),Ge=s(Xt,"P",{});var Zt=r(Ge);mu=i(Zt,"Squash & Fixup will combine your commit with the previous commit, the only difference is that with "),Sr=s(Zt,"CODE",{class:!0});var Lb=r(Sr);gu=i(Lb,"squash"),Lb.forEach(t),vu=i(Zt,", git will prompt you to edit the commit message of the combined commit, while "),Tr=s(Zt,"CODE",{class:!0});var Ub=r(Tr);bu=i(Ub,"fixup"),Ub.forEach(t),Eu=i(Zt," will drop the commit of the "),Gr=s(Zt,"CODE",{class:!0});var zb=r(Gr);yu=i(zb,"fixup"),zb.forEach(t),wu=i(Zt,"ed commit."),Zt.forEach(t),ku=p(Xt),Bi=s(Xt,"P",{});var Vb=r(Bi);ut=s(Vb,"SPAN",{style:!0});var Yb=r(ut);Nr=s(Yb,"PICTURE",{});var gg=r(Nr);ji=s(gg,"SOURCE",{type:!0,srcset:!0}),de=s(gg,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),gg.forEach(t),Yb.forEach(t),Vb.forEach(t),Cu=p(Xt),Ar=s(Xt,"DIV",{class:!0});var S3=r(Ar);S3.forEach(t),Xt.forEach(t),sc=p(n),pe=s(n,"SECTION",{});var ea=r(pe);Ki=s(ea,"H4",{});var Wb=r(Ki);Oa=s(Wb,"A",{href:!0,id:!0});var Fb=r(Oa);Ou=i(Fb,"break"),Fb.forEach(t),Wb.forEach(t),Du=p(ea),Da=s(ea,"P",{});var wc=r(Da);Iu=i(wc,"Pause the rebase. You can do add more commits here if you want. When you are done, make sure that your workspace and stage is clean, run "),Hr=s(wc,"CODE",{class:!0});var $b=r(Hr);xu=i($b,"git rebase --continue"),$b.forEach(t),Pu=i(wc," to continue."),wc.forEach(t),Su=p(ea),Ji=s(ea,"P",{});var Bb=r(Ji);_t=s(Bb,"SPAN",{style:!0});var jb=r(_t);Mr=s(jb,"PICTURE",{});var vg=r(Mr);Qi=s(vg,"SOURCE",{type:!0,srcset:!0}),he=s(vg,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),vg.forEach(t),jb.forEach(t),Bb.forEach(t),Tu=p(ea),Rr=s(ea,"DIV",{class:!0});var T3=r(Rr);T3.forEach(t),ea.forEach(t),rc=p(n),ue=s(n,"SECTION",{});var ta=r(ue);Xi=s(ta,"H4",{});var Kb=r(Xi);Ia=s(Kb,"A",{href:!0,id:!0});var Jb=r(Ia);Gu=i(Jb,"edit"),Jb.forEach(t),Kb.forEach(t),Nu=p(ta),Zi=s(ta,"P",{});var Qb=r(Zi);Au=i(Qb,"Pause the rebase at the commit that you are editing, before the commit has been commited. You can add, remove or ammend your files before continue the rebase process."),Qb.forEach(t),Hu=p(ta),el=s(ta,"P",{});var Xb=r(el);ft=s(Xb,"SPAN",{style:!0});var Zb=r(ft);qr=s(Zb,"PICTURE",{});var bg=r(qr);tl=s(bg,"SOURCE",{type:!0,srcset:!0}),_e=s(bg,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),bg.forEach(t),Zb.forEach(t),Xb.forEach(t),Mu=p(ta),Lr=s(ta,"DIV",{class:!0});var G3=r(Lr);G3.forEach(t),ta.forEach(t),oc=p(n),fe=s(n,"SECTION",{});var aa=r(fe);al=s(aa,"H3",{});var e2=r(al);xa=s(e2,"A",{href:!0,id:!0});var t2=r(xa);Ru=i(t2,"git pull --rebase"),t2.forEach(t),e2.forEach(t),qu=p(aa),mt=s(aa,"P",{});var Jo=r(mt);Lu=i(Jo,"There's a rebase mode for git pull, where it will be "),Ur=s(Jo,"CODE",{class:!0});var a2=r(Ur);Uu=i(a2,"git fetch origin branch"),a2.forEach(t),zu=i(Jo," + "),zr=s(Jo,"CODE",{class:!0});var s2=r(zr);Vu=i(s2,"git rebase origin/branch"),s2.forEach(t),Yu=i(Jo,"."),Jo.forEach(t),Wu=p(aa),sl=s(aa,"P",{});var r2=r(sl);gt=s(r2,"SPAN",{style:!0});var o2=r(gt);me=s(o2,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),o2.forEach(t),r2.forEach(t),Fu=p(aa),Vr=s(aa,"DIV",{class:!0});var i2=r(Vr);$u=i(i2,"git pull --rebase"),i2.forEach(t),aa.forEach(t),ic=p(n),m=s(n,"SECTION",{});var b=r(m);rl=s(b,"H3",{});var l2=r(rl);Pa=s(l2,"A",{href:!0,id:!0});var c2=r(Pa);Bu=i(c2,"git rebase a shared branch"),c2.forEach(t),l2.forEach(t),ju=p(b),Ne=s(b,"P",{});var sa=r(Ne);Ku=i(sa,"Say "),Yr=s(sa,"CODE",{class:!0});var n2=r(Yr);Ju=i(n2,"x"),n2.forEach(t),Qu=i(sa," and "),Wr=s(sa,"CODE",{class:!0});var d2=r(Wr);Xu=i(d2,"y"),d2.forEach(t),Zu=i(sa," are working on the "),Fr=s(sa,"CODE",{class:!0});var p2=r(Fr);e_=i(p2,"feat/a"),p2.forEach(t),t_=i(sa," branch."),sa.forEach(t),a_=p(b),ol=s(b,"P",{});var h2=r(ol);vt=s(h2,"SPAN",{style:!0});var u2=r(vt);$r=s(u2,"PICTURE",{});var Eg=r($r);il=s(Eg,"SOURCE",{type:!0,srcset:!0}),ge=s(Eg,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),Eg.forEach(t),u2.forEach(t),h2.forEach(t),s_=p(b),Ht=s(b,"P",{});var Vl=r(Ht);Br=s(Vl,"CODE",{class:!0});var _2=r(Br);r_=i(_2,"x"),_2.forEach(t),o_=i(Vl," decided to rebase the "),jr=s(Vl,"CODE",{class:!0});var f2=r(jr);i_=i(f2,"feat/a"),f2.forEach(t),l_=i(Vl," branch to squash and drop some commits:"),Vl.forEach(t),c_=p(b),ll=s(b,"P",{});var m2=r(ll);bt=s(m2,"SPAN",{style:!0});var g2=r(bt);Kr=s(g2,"PICTURE",{});var yg=r(Kr);cl=s(yg,"SOURCE",{type:!0,srcset:!0}),ve=s(yg,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),yg.forEach(t),g2.forEach(t),m2.forEach(t),n_=p(b),Et=s(b,"P",{});var Qo=r(Et);d_=i(Qo,"While "),Jr=s(Qo,"CODE",{class:!0});var v2=r(Jr);p_=i(v2,"x"),v2.forEach(t),h_=i(Qo," had done that, that was just a part of the whole picture. Because the "),Qr=s(Qo,"CODE",{class:!0});var b2=r(Qr);u_=i(b2,"rebase"),b2.forEach(t),__=i(Qo," on his local machine changed the git history on his local copy only."),Qo.forEach(t),f_=p(b),nl=s(b,"P",{});var E2=r(nl);yt=s(E2,"SPAN",{style:!0});var y2=r(yt);Xr=s(y2,"PICTURE",{});var wg=r(Xr);dl=s(wg,"SOURCE",{type:!0,srcset:!0}),be=s(wg,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),wg.forEach(t),y2.forEach(t),E2.forEach(t),m_=p(b),Ae=s(b,"P",{});var ra=r(Ae);g_=i(ra,"To make the change on the remote server as well, "),Zr=s(ra,"CODE",{class:!0});var w2=r(Zr);v_=i(w2,"x"),w2.forEach(t),b_=i(ra," forced push his branch to the remote server. ("),pl=s(ra,"STRONG",{});var k2=r(pl);E_=i(k2,"Note:"),k2.forEach(t),y_=i(ra," You can push without "),eo=s(ra,"CODE",{class:!0});var C2=r(eo);w_=i(C2,"--force"),C2.forEach(t),k_=i(ra," if the origin branch cannot fast-forward merge your local branch)"),ra.forEach(t),C_=p(b),He=s(b,"P",{});var oa=r(He);O_=i(oa,"While "),to=s(oa,"CODE",{class:!0});var O2=r(to);D_=i(O2,"y"),O2.forEach(t),I_=i(oa," on the other hand, did not know about the "),ao=s(oa,"CODE",{class:!0});var D2=r(ao);x_=i(D2,"rebase"),D2.forEach(t),P_=i(oa,", so when "),so=s(oa,"CODE",{class:!0});var I2=r(so);S_=i(I2,"y"),I2.forEach(t),T_=i(oa," pulled the code, it ended up with a messed up merged of a messed up git history:"),oa.forEach(t),G_=p(b),hl=s(b,"P",{});var x2=r(hl);wt=s(x2,"SPAN",{style:!0});var P2=r(wt);ro=s(P2,"PICTURE",{});var kg=r(ro);ul=s(kg,"SOURCE",{type:!0,srcset:!0}),Ee=s(kg,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),kg.forEach(t),P2.forEach(t),x2.forEach(t),N_=p(b),kt=s(b,"P",{});var Xo=r(kt);A_=i(Xo,"In most cases, there would be a merge conflict, because "),oo=s(Xo,"CODE",{class:!0});var S2=r(oo);H_=i(S2,"x"),S2.forEach(t),M_=i(Xo," and "),io=s(Xo,"CODE",{class:!0});var T2=r(io);R_=i(T2,"y"),T2.forEach(t),q_=i(Xo,"'s branch would have made changes on the same file."),Xo.forEach(t),L_=p(b),Me=s(b,"P",{});var ia=r(Me);U_=i(ia,"So, the correct way, if the rebase is necessary, is to notify "),lo=s(ia,"CODE",{class:!0});var G2=r(lo);z_=i(G2,"y"),G2.forEach(t),V_=i(ia," about the rebase, so that "),co=s(ia,"CODE",{class:!0});var N2=r(co);Y_=i(N2,"y"),N2.forEach(t),W_=i(ia," can "),no=s(ia,"CODE",{class:!0});var A2=r(no);F_=i(A2,"git reset --hard"),A2.forEach(t),$_=i(ia," his branch to the remote branch."),ia.forEach(t),B_=p(b),_l=s(b,"P",{});var H2=r(_l);Ct=s(H2,"SPAN",{style:!0});var M2=r(Ct);po=s(M2,"PICTURE",{});var Cg=r(po);fl=s(Cg,"SOURCE",{type:!0,srcset:!0}),ye=s(Cg,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),Cg.forEach(t),M2.forEach(t),H2.forEach(t),j_=p(b),V=s(b,"P",{});var Be=r(V);K_=i(Be,"If unfortunately, at the same time, "),ho=s(Be,"CODE",{class:!0});var R2=r(ho);J_=i(R2,"y"),R2.forEach(t),Q_=i(Be," has made more commits to his local branch, he would have to "),uo=s(Be,"CODE",{class:!0});var q2=r(uo);X_=i(q2,"git rebase"),q2.forEach(t),Z_=i(Be," the new changes onto the remote branch, or "),_o=s(Be,"CODE",{class:!0});var L2=r(_o);ef=i(L2,"git cherry-pick"),L2.forEach(t),tf=i(Be," the new changes after the "),fo=s(Be,"CODE",{class:!0});var U2=r(fo);af=i(U2,"git reset --hard"),U2.forEach(t),sf=i(Be,"."),Be.forEach(t),rf=p(b),Ot=s(b,"P",{});var Zo=r(Ot);of=i(Zo,"In the companies that I have worked with, forbidden a "),mo=s(Zo,"CODE",{class:!0});var z2=r(mo);lf=i(z2,"rebase"),z2.forEach(t),cf=i(Zo," on a common branch, especially the "),go=s(Zo,"CODE",{class:!0});var V2=r(go);nf=i(V2,"master"),V2.forEach(t),df=i(Zo," branch."),Zo.forEach(t),b.forEach(t),lc=p(n),Mt=s(n,"SECTION",{});var kc=r(Mt);ml=s(kc,"H2",{});var Y2=r(ml);Sa=s(Y2,"A",{href:!0,id:!0});var W2=r(Sa);pf=i(W2,"git log"),W2.forEach(t),Y2.forEach(t),hf=p(kc),gl=s(kc,"P",{});var F2=r(gl);uf=i(F2,"The go-to command to look at your git history. There's a few options that is worth mentioning, that allow us to search through the sea of commits:"),F2.forEach(t),kc.forEach(t),cc=p(n),Rt=s(n,"SECTION",{});var Cc=r(Rt);vl=s(Cc,"H3",{});var $2=r(vl);Ta=s($2,"A",{href:!0,id:!0});var B2=r(Ta);_f=i(B2,"--since, --after, --until, --before"),B2.forEach(t),$2.forEach(t),ff=p(Cc),bl=s(Cc,"P",{});var j2=r(bl);mf=i(j2,"You can filter out commits within a specific timeframe"),j2.forEach(t),Cc.forEach(t),nc=p(n),qt=s(n,"SECTION",{});var Oc=r(qt);El=s(Oc,"H3",{});var K2=r(El);Ga=s(K2,"A",{href:!0,id:!0});var J2=r(Ga);gf=i(J2,"--grep"),J2.forEach(t),K2.forEach(t),vf=p(Oc),yl=s(Oc,"P",{});var Q2=r(yl);bf=i(Q2,"You can filter out commits based on commit message"),Q2.forEach(t),Oc.forEach(t),dc=p(n),Lt=s(n,"SECTION",{});var Dc=r(Lt);wl=s(Dc,"H3",{});var X2=r(wl);Na=s(X2,"A",{href:!0,id:!0});var Z2=r(Na);Ef=i(Z2,"--invert-grep"),Z2.forEach(t),X2.forEach(t),yf=p(Dc),vo=s(Dc,"P",{});var Og=r(vo);wf=i(Og,"You can filter out commits that does not match the "),bo=s(Og,"CODE",{class:!0});var eE=r(bo);kf=i(eE,"--grep"),eE.forEach(t),Og.forEach(t),Dc.forEach(t),pc=p(n),Ut=s(n,"SECTION",{});var Ic=r(Ut);kl=s(Ic,"H3",{});var tE=r(kl);Aa=s(tE,"A",{href:!0,id:!0});var aE=r(Aa);Cf=i(aE,"--all-match"),aE.forEach(t),tE.forEach(t),Of=p(Ic),we=s(Ic,"P",{});var Pt=r(we);Eo=s(Pt,"CODE",{class:!0});var sE=r(Eo);Df=i(sE,"--grep"),sE.forEach(t),If=i(Pt," is a "),yo=s(Pt,"CODE",{class:!0});var rE=r(yo);xf=i(rE,"OR"),rE.forEach(t),Pf=i(Pt," filter, "),wo=s(Pt,"CODE",{class:!0});var oE=r(wo);Sf=i(oE,"--all-match"),oE.forEach(t),Tf=i(Pt," make it a "),ko=s(Pt,"CODE",{class:!0});var iE=r(ko);Gf=i(iE,"AND"),iE.forEach(t),Nf=i(Pt," filter"),Pt.forEach(t),Ic.forEach(t),hc=p(n),zt=s(n,"SECTION",{});var xc=r(zt);Cl=s(xc,"H3",{});var lE=r(Cl);Ha=s(lE,"A",{href:!0,id:!0});var cE=r(Ha);Af=i(cE,"--min-parents, --max-parents, --merges, --no-merges"),cE.forEach(t),lE.forEach(t),Hf=p(xc),Dt=s(xc,"P",{});var ei=r(Dt);Mf=i(ei,"You can specify commits with the number of parents. A simple merge commit has 2 parent, so "),Co=s(ei,"CODE",{class:!0});var nE=r(Co);Rf=i(nE,"--merge"),nE.forEach(t),qf=i(ei," is equivalent to "),Oo=s(ei,"CODE",{class:!0});var dE=r(Oo);Lf=i(dE,"--min-parents=2"),dE.forEach(t),Uf=i(ei,"."),ei.forEach(t),xc.forEach(t),uc=p(n),Vt=s(n,"SECTION",{});var Pc=r(Vt);Ol=s(Pc,"H3",{});var pE=r(Ol);Ma=s(pE,"A",{href:!0,id:!0});var hE=r(Ma);zf=i(hE,"--first-parent"),hE.forEach(t),pE.forEach(t),Vf=p(Pc),Ra=s(Pc,"P",{});var Sc=r(Ra);Yf=i(Sc,"You can follow only the first parent commit upon seeing a merge commit. This is especially useful when you have merged of branches in, "),Do=s(Sc,"CODE",{class:!0});var uE=r(Do);Wf=i(uE,"--first-parent"),uE.forEach(t),Ff=i(Sc," allow you to filter out only the merge commit and the commit you have made on the current branch."),Sc.forEach(t),Pc.forEach(t),_c=p(n),Yt=s(n,"SECTION",{});var Tc=r(Yt);Dl=s(Tc,"H2",{});var _E=r(Dl);qa=s(_E,"A",{href:!0,id:!0});var fE=r(qa);$f=i(fE,"git reflog"),fE.forEach(t),_E.forEach(t),Bf=p(Tc),Re=s(Tc,"P",{});var la=r(Re);jf=i(la,"The reference log shows you all the "),Io=s(la,"CODE",{class:!0});var mE=r(Io);Kf=i(mE,"HEAD"),mE.forEach(t),Jf=i(la," position you have been to. This is especially useful when you have "),xo=s(la,"CODE",{class:!0});var gE=r(xo);Qf=i(gE,"reset --hard"),gE.forEach(t),Xf=i(la," or "),Po=s(la,"CODE",{class:!0});var vE=r(Po);Zf=i(vE,"rebase"),vE.forEach(t),em=i(la,", you can still find back the commit reference that you were at previously, so you can recover them."),la.forEach(t),Tc.forEach(t),fc=p(n),w=s(n,"SECTION",{});var O=r(w);Il=s(O,"H2",{});var bE=r(Il);La=s(bE,"A",{href:!0,id:!0});var EE=r(La);tm=i(EE,"git bisect"),EE.forEach(t),bE.forEach(t),am=p(O),xl=s(O,"P",{});var yE=r(xl);sm=i(yE,"This is a useful command that I am looking forward to use it."),yE.forEach(t),rm=p(O),Ua=s(O,"P",{});var Gc=r(Ua);om=i(Gc,"Often times when you noticed something has changed / break / less optimised, yet you do not know when this change was introduced into your repository. "),So=s(Gc,"CODE",{class:!0});var wE=r(So);im=i(wE,"git bisect"),wE.forEach(t),lm=i(Gc," allows you to do binary search on the history, so that you can quickly pin down the commit where the change was introduced."),Gc.forEach(t),cm=p(O),To=s(O,"DIV",{class:!0});var N3=r(To);N3.forEach(t),nm=p(O),G=s(O,"P",{});var De=r(G);dm=i(De,"Once you've specified at least one "),Go=s(De,"CODE",{class:!0});var kE=r(Go);pm=i(kE,"bad"),kE.forEach(t),hm=i(De," and one "),No=s(De,"CODE",{class:!0});var CE=r(No);um=i(CE,"good"),CE.forEach(t),_m=i(De," commit, "),Ao=s(De,"CODE",{class:!0});var OE=r(Ao);fm=i(OE,"git bisect"),OE.forEach(t),mm=i(De," will find and checkout to a commit in the middle of that range between "),Ho=s(De,"CODE",{class:!0});var DE=r(Ho);gm=i(DE,"bad"),DE.forEach(t),vm=i(De," and "),Mo=s(De,"CODE",{class:!0});var IE=r(Mo);bm=i(IE,"good"),IE.forEach(t),Em=i(De," and greets you with:"),De.forEach(t),ym=p(O),Ro=s(O,"DIV",{class:!0});var A3=r(Ro);A3.forEach(t),wm=p(O),It=s(O,"P",{});var ti=r(It);km=i(ti,"You can know test / verify / profile your code, and specify whether the current commit is a "),qo=s(ti,"CODE",{class:!0});var xE=r(qo);Cm=i(xE,"good"),xE.forEach(t),Om=i(ti," commit or a "),Lo=s(ti,"CODE",{class:!0});var PE=r(Lo);Dm=i(PE,"bad"),PE.forEach(t),Im=i(ti," commit:"),ti.forEach(t),xm=p(O),Uo=s(O,"DIV",{class:!0});var H3=r(Uo);H3.forEach(t),Pm=p(O),za=s(O,"P",{});var Nc=r(za);Sm=i(Nc,"Continue doing it until eventually there's no more commit to inspect. "),zo=s(Nc,"CODE",{class:!0});var SE=r(zo);Tm=i(SE,"git bisect"),SE.forEach(t),Gm=i(Nc," will print out the description of the first bad commit."),Nc.forEach(t),O.forEach(t),mc=p(n),x=s(n,"SECTION",{});var Ie=r(x);Pl=s(Ie,"H2",{});var TE=r(Pl);Va=s(TE,"A",{href:!0,id:!0});var GE=r(Va);Nm=i(GE,"Summary"),GE.forEach(t),TE.forEach(t),Am=p(Ie),Sl=s(Ie,"P",{});var NE=r(Sl);Hm=i(NE,"We've gone through the following git commands:"),NE.forEach(t),Mm=p(Ie),C=s(Ie,"UL",{});var P=r(C);Tl=s(P,"LI",{});var AE=r(Tl);Rm=i(AE,"git merge"),AE.forEach(t),qm=p(P),Gl=s(P,"LI",{});var HE=r(Gl);Lm=i(HE,"git reset"),HE.forEach(t),Um=p(P),Nl=s(P,"LI",{});var ME=r(Nl);zm=i(ME,"git cherry-pick"),ME.forEach(t),Vm=p(P),Al=s(P,"LI",{});var RE=r(Al);Ym=i(RE,"git revert"),RE.forEach(t),Wm=p(P),Hl=s(P,"LI",{});var qE=r(Hl);Fm=i(qE,"git rebase"),qE.forEach(t),$m=p(P),Ml=s(P,"LI",{});var LE=r(Ml);Bm=i(LE,"git log"),LE.forEach(t),jm=p(P),Rl=s(P,"LI",{});var UE=r(Rl);Km=i(UE,"git reflog"),UE.forEach(t),Jm=p(P),ql=s(P,"LI",{});var zE=r(ql);Qm=i(zE,"git bisect"),zE.forEach(t),P.forEach(t),Xm=p(Ie),Ya=s(Ie,"P",{});var Ac=r(Ya);Zm=i(Ac,"Hopefully we are now "),Vo=s(Ac,"CODE",{class:!0});var VE=r(Vo);eg=i(VE,"git gudder"),VE.forEach(t),tg=i(Ac," than before!"),Ac.forEach(t),ag=p(Ie),sg=s(Ie,"HR",{}),rg=p(Ie),Yo=s(Ie,"P",{});var Dg=r(Yo);og=i(Dg,"Related topic: "),Wo=s(Dg,"A",{href:!0});var YE=r(Wo);ig=i(YE,"Git commits went missing after a rebase"),YE.forEach(t),Dg.forEach(t),Ie.forEach(t),this.h()},h(){l(ca,"href","#disclaimer"),l(ca,"id","disclaimer"),l(da,"href","https://git-scm.com"),l(da,"rel","nofollow"),l(pa,"href","#git-merge"),l(pa,"id","git-merge"),l(ja,"class","inline"),l(ha,"href","#fast-forward-merge"),l(ha,"id","fast-forward-merge"),l(Ka,"class","inline"),l(Ja,"class","inline"),E(W.src,xg=m3)||l(W,"src",xg),l(W,"srcset",m3+", "+R0+" 2x"),l(W,"loading","lazy"),c(W,"position","absolute"),c(W,"top","0"),c(W,"width","100%"),c(W,"height","100%"),l(W,"alt","git-merge-ff"),c(Ke,"display","block"),c(Ke,"position","relative"),c(Ke,"padding-top","56.566%"),c(Ke,"width","100%"),l(Qa,"class","caption svelte-koydfe"),l(ua,"href","#non-fast-forward-merge"),l(ua,"id","non-fast-forward-merge"),l(Xa,"class","inline"),l(Za,"class","inline"),E(F.src,Pg=f3)||l(F,"src",Pg),l(F,"srcset",f3+", "+M0+" 2x"),l(F,"loading","lazy"),c(F,"position","absolute"),c(F,"top","0"),c(F,"width","100%"),c(F,"height","100%"),l(F,"alt","git-merge-non-ff"),c(Qe,"display","block"),c(Qe,"position","relative"),c(Qe,"padding-top","58.779%"),c(Qe,"width","100%"),l(es,"class","caption svelte-koydfe"),l(_a,"href","#git-pull"),l(_a,"id","git-pull"),l(ts,"class","inline"),l(as,"class","inline"),l(ss,"class","inline"),E(B.src,Sg=_3)||l(B,"src",Sg),l(B,"srcset",_3+", "+H0+" 2x"),l(B,"loading","lazy"),c(B,"position","absolute"),c(B,"top","0"),c(B,"width","100%"),c(B,"height","100%"),l(B,"alt","git-pull"),c(Xe,"display","block"),c(Xe,"position","relative"),c(Xe,"padding-top","59.695%"),c(Xe,"width","100%"),l(rs,"class","caption svelte-koydfe"),l(fa,"href","#git-reset"),l(fa,"id","git-reset"),l(is,"class","inline"),l(ls,"class","inline"),l(cs,"class","inline"),l(ns,"class","inline"),E(j.src,Tg=u3)||l(j,"src",Tg),l(j,"srcset",u3+", "+A0+" 2x"),l(j,"loading","lazy"),c(j,"position","absolute"),c(j,"top","0"),c(j,"width","100%"),c(j,"height","100%"),l(j,"alt","git-reset"),c(Ze,"display","block"),c(Ze,"position","relative"),c(Ze,"padding-top","89.167%"),c(Ze,"width","100%"),l(ds,"class","caption svelte-koydfe"),l(ma,"href","#git-cherry-pick"),l(ma,"id","git-cherry-pick"),l(ps,"class","inline"),l(hs,"class","inline"),E(K.src,Gg=h3)||l(K,"src",Gg),l(K,"srcset",h3+", "+N0+" 2x"),l(K,"loading","lazy"),c(K,"position","absolute"),c(K,"top","0"),c(K,"width","100%"),c(K,"height","100%"),l(K,"alt","git-cherry-pick"),c(et,"display","block"),c(et,"position","relative"),c(et,"padding-top","87.500%"),c(et,"width","100%"),l(us,"class","caption svelte-koydfe"),l(ga,"href","#git-revert"),l(ga,"id","git-revert"),l(fs,"class","inline"),l(ms,"class","inline"),l(gs,"class","inline"),l(vs,"class","inline"),l(bs,"class","inline"),E(J.src,Ng=p3)||l(J,"src",Ng),l(J,"srcset",p3+", "+G0+" 2x"),l(J,"loading","lazy"),c(J,"position","absolute"),c(J,"top","0"),c(J,"width","100%"),c(J,"height","100%"),l(J,"alt","git-revert"),c(tt,"display","block"),c(tt,"position","relative"),c(tt,"padding-top","69.231%"),c(tt,"width","100%"),l(Es,"class","caption svelte-koydfe"),l(ys,"class","inline"),E(Q.src,Ag=d3)||l(Q,"src",Ag),l(Q,"srcset",d3+", "+T0+" 2x"),l(Q,"loading","lazy"),c(Q,"position","absolute"),c(Q,"top","0"),c(Q,"width","100%"),c(Q,"height","100%"),l(Q,"alt","git-revert-2"),c(at,"display","block"),c(at,"position","relative"),c(at,"padding-top","69.231%"),c(at,"width","100%"),l(ws,"class","caption svelte-koydfe"),l(ks,"class","inline"),l(Cs,"class","inline"),l(Os,"class","inline"),l(Is,"class","inline"),E(X.src,Hg=n3)||l(X,"src",Hg),l(X,"srcset",n3+", "+S0+" 2x"),l(X,"loading","lazy"),c(X,"position","absolute"),c(X,"top","0"),c(X,"width","100%"),c(X,"height","100%"),l(X,"alt","git-revert-3"),c(st,"display","block"),c(st,"position","relative"),c(st,"padding-top","54.783%"),c(st,"width","100%"),l(xs,"class","caption svelte-koydfe"),l(Ps,"class","inline"),l(Ss,"class","inline"),l(Ts,"class","inline"),l(Gs,"class","inline"),l(Ns,"class","inline"),E(Z.src,Mg=c3)||l(Z,"src",Mg),l(Z,"srcset",c3+", "+P0+" 2x"),l(Z,"loading","lazy"),c(Z,"position","absolute"),c(Z,"top","0"),c(Z,"width","100%"),c(Z,"height","100%"),l(Z,"alt","git-revert-4"),c(rt,"display","block"),c(rt,"position","relative"),c(rt,"padding-top","54.783%"),c(rt,"width","100%"),l(As,"class","caption svelte-koydfe"),l(ba,"href","#git-rebase"),l(ba,"id","git-rebase"),l(Ms,"class","inline"),l(Rs,"class","inline"),l(qs,"class","inline"),l(Ls,"class","inline"),l(Us,"class","inline"),l(zs,"class","inline"),l(Vs,"class","inline"),l(Ys,"class","inline"),l(Ws,"class","inline"),E(ee.src,Rg=l3)||l(ee,"src",Rg),l(ee,"srcset",l3+", "+x0+" 2x"),l(ee,"loading","lazy"),c(ee,"position","absolute"),c(ee,"top","0"),c(ee,"width","100%"),c(ee,"height","100%"),l(ee,"alt","git-rebase"),c(ot,"display","block"),c(ot,"position","relative"),c(ot,"padding-top","49.613%"),c(ot,"width","100%"),l(Fs,"class","caption svelte-koydfe"),l(Bs,"class","inline"),l(js,"class","inline"),l(Ks,"class","inline"),E(te.src,qg=i3)||l(te,"src",qg),l(te,"srcset",i3+", "+I0+" 2x"),l(te,"loading","lazy"),c(te,"position","absolute"),c(te,"top","0"),c(te,"width","100%"),c(te,"height","100%"),l(te,"alt","git-rebase-2"),c(it,"display","block"),c(it,"position","relative"),c(it,"padding-top","77.510%"),c(it,"width","100%"),l(Js,"class","caption svelte-koydfe"),l(Qs,"class","inline"),l(Xs,"class","inline"),l(Zs,"class","inline"),l(Ni,"type","image/webp"),l(Ni,"srcset",O0+", "+C0+" 2x"),E(ae.src,Lg=o3)||l(ae,"src",Lg),l(ae,"srcset",o3+", "+D0+" 2x"),l(ae,"loading","lazy"),c(ae,"position","absolute"),c(ae,"top","0"),c(ae,"width","100%"),c(ae,"height","100%"),l(ae,"alt","git-rebase"),c(ct,"display","block"),c(ct,"position","relative"),c(ct,"padding-top","77.510%"),c(ct,"width","100%"),l(tr,"class","caption svelte-koydfe"),l(ar,"class","inline"),l(sr,"class","inline"),l(rr,"class","inline"),l(or,"class","inline"),l(ir,"class","inline"),l(lr,"class","inline"),l(cr,"class","inline"),l(nr,"class","inline"),l(dr,"class","inline"),l(pr,"class","inline"),l(hr,"class","inline"),l(ur,"class","inline"),l(_r,"class","inline"),l(fr,"class","inline"),l(mr,"class","inline"),l(gr,"class","inline"),l(vr,"class","inline"),l(br,"class","inline"),l(Ea,"href","#git-rebase-interactive"),l(Ea,"id","git-rebase-interactive"),l(yr,"class","inline"),l(Ri,"type","image/webp"),l(Ri,"srcset",s3+", "+a3+" 2x"),E(re.src,Ug=Hc)||l(re,"src",Ug),l(re,"srcset",Hc+", "+r3+" 2x"),l(re,"loading","lazy"),c(re,"position","absolute"),c(re,"top","0"),c(re,"width","100%"),c(re,"height","100%"),l(re,"alt","git-rebase-i-pick"),c(dt,"display","block"),c(dt,"position","relative"),c(dt,"padding-top","24.476%"),c(dt,"width","100%"),l(kr,"class","caption svelte-koydfe"),l(Cr,"class","inline"),l(Or,"class","code-section"),l(wa,"href","#pick"),l(wa,"id","pick"),l(zi,"type","image/webp"),l(zi,"srcset",s3+", "+a3+" 2x"),E(ie.src,zg=Hc)||l(ie,"src",zg),l(ie,"srcset",Hc+", "+r3+" 2x"),l(ie,"loading","lazy"),c(ie,"position","absolute"),c(ie,"top","0"),c(ie,"width","100%"),c(ie,"height","100%"),l(ie,"alt","git-rebase-i-pick"),c(pt,"display","block"),c(pt,"position","relative"),c(pt,"padding-top","24.476%"),c(pt,"width","100%"),l(Ir,"class","code-section"),l(ka,"href","#drop"),l(ka,"id","drop"),l(Fi,"type","image/webp"),l(Fi,"srcset",w0+", "+y0+" 2x"),E(ce.src,Vg=t3)||l(ce,"src",Vg),l(ce,"srcset",t3+", "+k0+" 2x"),l(ce,"loading","lazy"),c(ce,"position","absolute"),c(ce,"top","0"),c(ce,"width","100%"),c(ce,"height","100%"),l(ce,"alt","git-rebase-i-drop"),c(ht,"display","block"),c(ht,"position","relative"),c(ht,"padding-top","24.476%"),c(ht,"width","100%"),l(Pr,"class","code-section"),l(Ca,"href","#squash-fixup"),l(Ca,"id","squash-fixup"),l(Sr,"class","inline"),l(Tr,"class","inline"),l(Gr,"class","inline"),l(ji,"type","image/webp"),l(ji,"srcset",b0+", "+v0+" 2x"),E(de.src,Yg=e3)||l(de,"src",Yg),l(de,"srcset",e3+", "+E0+" 2x"),l(de,"loading","lazy"),c(de,"position","absolute"),c(de,"top","0"),c(de,"width","100%"),c(de,"height","100%"),l(de,"alt","git-rebase-i-squash"),c(ut,"display","block"),c(ut,"position","relative"),c(ut,"padding-top","24.615%"),c(ut,"width","100%"),l(Ar,"class","code-section"),l(Oa,"href","#break"),l(Oa,"id","break"),l(Hr,"class","inline"),l(Qi,"type","image/webp"),l(Qi,"srcset",m0+", "+f0+" 2x"),E(he.src,Wg=ZE)||l(he,"src",Wg),l(he,"srcset",ZE+", "+g0+" 2x"),l(he,"loading","lazy"),c(he,"position","absolute"),c(he,"top","0"),c(he,"width","100%"),c(he,"height","100%"),l(he,"alt","git-rebase-i-break"),c(_t,"display","block"),c(_t,"position","relative"),c(_t,"padding-top","26.434%"),c(_t,"width","100%"),l(Rr,"class","code-section"),l(Ia,"href","#edit"),l(Ia,"id","edit"),l(tl,"type","image/webp"),l(tl,"srcset",u0+", "+h0+" 2x"),E(_e.src,Fg=XE)||l(_e,"src",Fg),l(_e,"srcset",XE+", "+_0+" 2x"),l(_e,"loading","lazy"),c(_e,"position","absolute"),c(_e,"top","0"),c(_e,"width","100%"),c(_e,"height","100%"),l(_e,"alt","git-rebase-i-edit"),c(ft,"display","block"),c(ft,"position","relative"),c(ft,"padding-top","26.434%"),c(ft,"width","100%"),l(Lr,"class","code-section"),l(xa,"href","#git-pull-rebase"),l(xa,"id","git-pull-rebase"),l(Ur,"class","inline"),l(zr,"class","inline"),E(me.src,$g=QE)||l(me,"src",$g),l(me,"srcset",QE+", "+p0+" 2x"),l(me,"loading","lazy"),c(me,"position","absolute"),c(me,"top","0"),c(me,"width","100%"),c(me,"height","100%"),l(me,"alt","git-pull-rebase"),c(gt,"display","block"),c(gt,"position","relative"),c(gt,"padding-top","66.066%"),c(gt,"width","100%"),l(Vr,"class","caption svelte-koydfe"),l(Pa,"href","#git-rebase-a-shared-branch"),l(Pa,"id","git-rebase-a-shared-branch"),l(Yr,"class","inline"),l(Wr,"class","inline"),l(Fr,"class","inline"),l(il,"type","image/webp"),l(il,"srcset",n0+", "+c0+" 2x"),E(ge.src,Bg=JE)||l(ge,"src",Bg),l(ge,"srcset",JE+", "+d0+" 2x"),l(ge,"loading","lazy"),c(ge,"position","absolute"),c(ge,"top","0"),c(ge,"width","100%"),c(ge,"height","100%"),l(ge,"alt","git-rebase-w"),c(vt,"display","block"),c(vt,"position","relative"),c(vt,"padding-top","34.266%"),c(vt,"width","100%"),l(Br,"class","inline"),l(jr,"class","inline"),l(cl,"type","image/webp"),l(cl,"srcset",i0+", "+o0+" 2x"),E(ve.src,jg=KE)||l(ve,"src",jg),l(ve,"srcset",KE+", "+l0+" 2x"),l(ve,"loading","lazy"),c(ve,"position","absolute"),c(ve,"top","0"),c(ve,"width","100%"),c(ve,"height","100%"),l(ve,"alt","git-rebase-w-2"),c(bt,"display","block"),c(bt,"position","relative"),c(bt,"padding-top","52.448%"),c(bt,"width","100%"),l(Jr,"class","inline"),l(Qr,"class","inline"),l(dl,"type","image/webp"),l(dl,"srcset",s0+", "+a0+" 2x"),E(be.src,Kg=jE)||l(be,"src",Kg),l(be,"srcset",jE+", "+r0+" 2x"),l(be,"loading","lazy"),c(be,"position","absolute"),c(be,"top","0"),c(be,"width","100%"),c(be,"height","100%"),l(be,"alt","git-rebase-w-3"),c(yt,"display","block"),c(yt,"position","relative"),c(yt,"padding-top","52.448%"),c(yt,"width","100%"),l(Zr,"class","inline"),l(eo,"class","inline"),l(to,"class","inline"),l(ao,"class","inline"),l(so,"class","inline"),l(ul,"type","image/webp"),l(ul,"srcset",e0+", "+Z3+" 2x"),E(Ee.src,Jg=BE)||l(Ee,"src",Jg),l(Ee,"srcset",BE+", "+t0+" 2x"),l(Ee,"loading","lazy"),c(Ee,"position","absolute"),c(Ee,"top","0"),c(Ee,"width","100%"),c(Ee,"height","100%"),l(Ee,"alt","git-rebase-w-4"),c(wt,"display","block"),c(wt,"position","relative"),c(wt,"padding-top","44.643%"),c(wt,"width","100%"),l(oo,"class","inline"),l(io,"class","inline"),l(lo,"class","inline"),l(co,"class","inline"),l(no,"class","inline"),l(fl,"type","image/webp"),l(fl,"srcset",Q3+", "+J3+" 2x"),E(ye.src,Qg=$E)||l(ye,"src",Qg),l(ye,"srcset",$E+", "+X3+" 2x"),l(ye,"loading","lazy"),c(ye,"position","absolute"),c(ye,"top","0"),c(ye,"width","100%"),c(ye,"height","100%"),l(ye,"alt","git-rebase-w-5"),c(Ct,"display","block"),c(Ct,"position","relative"),c(Ct,"padding-top","48.319%"),c(Ct,"width","100%"),l(ho,"class","inline"),l(uo,"class","inline"),l(_o,"class","inline"),l(fo,"class","inline"),l(mo,"class","inline"),l(go,"class","inline"),l(Sa,"href","#git-log"),l(Sa,"id","git-log"),l(Ta,"href","#since-after-until-before"),l(Ta,"id","since-after-until-before"),l(Ga,"href","#grep"),l(Ga,"id","grep"),l(Na,"href","#invert-grep"),l(Na,"id","invert-grep"),l(bo,"class","inline"),l(Aa,"href","#all-match"),l(Aa,"id","all-match"),l(Eo,"class","inline"),l(yo,"class","inline"),l(wo,"class","inline"),l(ko,"class","inline"),l(Ha,"href","#min-parents-max-parents-merges-no-merges"),l(Ha,"id","min-parents-max-parents-merges-no-merges"),l(Co,"class","inline"),l(Oo,"class","inline"),l(Ma,"href","#first-parent"),l(Ma,"id","first-parent"),l(Do,"class","inline"),l(qa,"href","#git-reflog"),l(qa,"id","git-reflog"),l(Io,"class","inline"),l(xo,"class","inline"),l(Po,"class","inline"),l(La,"href","#git-bisect"),l(La,"id","git-bisect"),l(So,"class","inline"),l(To,"class","code-section"),l(Go,"class","inline"),l(No,"class","inline"),l(Ao,"class","inline"),l(Ho,"class","inline"),l(Mo,"class","inline"),l(Ro,"class","code-section"),l(qo,"class","inline"),l(Lo,"class","inline"),l(Uo,"class","code-section"),l(zo,"class","inline"),l(Va,"href","#summary"),l(Va,"id","summary"),l(Vo,"class","inline"),l(Wo,"href","/commit-went-missing-after-rebase/")},m(n,h){u(n,y,h),e(y,qe),u(n,Le,h),u(n,N,h),e(N,k),e(N,q),e(q,$a),e(N,Mc),e(N,ai),e(ai,Rc),e(N,qc),u(n,Yl,h),u(n,Ba,h),e(Ba,si),e(si,Lc),u(n,Wl,h),u(n,St,h),e(St,ri),e(ri,ca),e(ca,Uc),e(St,zc),e(St,na),e(na,Vc),e(na,da),e(da,Yc),e(na,Wc),u(n,Fl,h),u(n,Tt,h),e(Tt,oi),e(oi,pa),e(pa,Fc),e(Tt,$c),e(Tt,xe),e(xe,Bc),e(xe,ja),e(ja,jc),e(xe,Kc),e(xe,ii),e(ii,Jc),e(xe,Qc),e(xe,li),e(li,Xc),e(xe,Zc),u(n,$l,h),u(n,Y,h),e(Y,ci),e(ci,ha),e(ha,en),e(Y,tn),e(Y,je),e(je,an),e(je,Ka),e(Ka,sn),e(je,rn),e(je,Ja),e(Ja,on),e(je,ln),e(Y,cn),e(Y,ni),e(ni,Ke),e(Ke,W),e(Y,nn),e(Y,Qa),e(Qa,dn),u(n,Bl,h),u(n,A,h),e(A,di),e(di,ua),e(ua,pn),e(A,hn),e(A,Je),e(Je,un),e(Je,Xa),e(Xa,_n),e(Je,fn),e(Je,Za),e(Za,mn),e(Je,gn),e(A,vn),e(A,pi),e(pi,Qe),e(Qe,F),e(A,bn),e(A,es),e(es,En),e(A,yn),e(A,hi),e(hi,wn),u(n,jl,h),u(n,$,h),e($,ui),e(ui,_a),e(_a,kn),e($,Cn),e($,Pe),e(Pe,On),e(Pe,ts),e(ts,Dn),e(Pe,In),e(Pe,as),e(as,xn),e(Pe,Pn),e(Pe,ss),e(ss,Sn),e(Pe,Tn),e($,Gn),e($,_i),e(_i,Xe),e(Xe,B),e($,Nn),e($,rs),e(rs,An),u(n,Kl,h),u(n,H,h),e(H,fi),e(fi,fa),e(fa,Hn),e(H,Mn),e(H,os),e(os,is),e(is,Rn),e(os,qn),e(H,Ln),e(H,Ue),e(Ue,ls),e(ls,Un),e(Ue,zn),e(Ue,cs),e(cs,Vn),e(Ue,Yn),e(Ue,ns),e(ns,Wn),e(Ue,Fn),e(H,$n),e(H,mi),e(mi,Ze),e(Ze,j),e(H,Bn),e(H,ds),e(ds,jn),u(n,Jl,h),u(n,M,h),e(M,gi),e(gi,ma),e(ma,Kn),e(M,Jn),e(M,vi),e(vi,Qn),e(M,Xn),e(M,Gt),e(Gt,ps),e(ps,Zn),e(Gt,ed),e(Gt,hs),e(hs,td),e(Gt,ad),e(M,sd),e(M,bi),e(bi,et),e(et,K),e(M,rd),e(M,us),e(us,od),u(n,Ql,h),u(n,f,h),e(f,Ei),e(Ei,ga),e(ga,id),e(f,ld),e(f,_s),e(_s,fs),e(fs,cd),e(_s,nd),e(f,dd),e(f,L),e(L,pd),e(L,ms),e(ms,hd),e(L,ud),e(L,gs),e(gs,_d),e(L,fd),e(L,vs),e(vs,md),e(L,gd),e(L,bs),e(bs,vd),e(L,bd),e(f,Ed),e(f,yi),e(yi,tt),e(tt,J),e(f,yd),e(f,Es),e(Es,wd),e(f,kd),e(f,va),e(va,Cd),e(va,ys),e(ys,Od),e(va,Dd),e(f,Id),e(f,wi),e(wi,at),e(at,Q),e(f,xd),e(f,ws),e(ws,Pd),e(f,Sd),e(f,Se),e(Se,Td),e(Se,ks),e(ks,Gd),e(Se,Nd),e(Se,Cs),e(Cs,Ad),e(Se,Hd),e(Se,Os),e(Os,Md),e(Se,Rd),e(f,qd),e(f,Ds),e(Ds,Is),e(Is,Ld),e(Ds,Ud),e(f,zd),e(f,ki),e(ki,st),e(st,X),e(f,Vd),e(f,xs),e(xs,Yd),e(f,Wd),e(f,S),e(S,Fd),e(S,Ps),e(Ps,$d),e(S,Bd),e(S,Ss),e(Ss,jd),e(S,Kd),e(S,Ts),e(Ts,Jd),e(S,Qd),e(S,Gs),e(Gs,Xd),e(S,Zd),e(S,Ns),e(Ns,ep),e(S,tp),e(f,ap),e(f,Ci),e(Ci,rt),e(rt,Z),e(f,sp),e(f,As),e(As,rp),u(n,Xl,h),u(n,_,h),e(_,Oi),e(Oi,ba),e(ba,op),e(_,ip),e(_,Hs),e(Hs,Ms),e(Ms,lp),e(Hs,cp),e(_,np),e(_,D),e(D,dp),e(D,Rs),e(Rs,pp),e(D,hp),e(D,qs),e(qs,up),e(D,_p),e(D,Ls),e(Ls,fp),e(D,mp),e(D,Us),e(Us,gp),e(D,vp),e(D,zs),e(zs,bp),e(D,Ep),e(D,Vs),e(Vs,yp),e(D,wp),e(_,kp),e(_,Nt),e(Nt,Ys),e(Ys,Cp),e(Nt,Op),e(Nt,Ws),e(Ws,Dp),e(Nt,Ip),e(_,xp),e(_,Di),e(Di,ot),e(ot,ee),e(_,Pp),e(_,Fs),e(Fs,Sp),e(_,Tp),e(_,$s),e($s,Bs),e(Bs,Gp),e($s,Np),e(_,Ap),e(_,At),e(At,js),e(js,Hp),e(At,Mp),e(At,Ks),e(Ks,Rp),e(At,qp),e(_,Lp),e(_,Ii),e(Ii,it),e(it,te),e(_,Up),e(_,Js),e(Js,zp),e(_,Vp),e(_,xi),e(xi,Yp),e(_,Wp),e(_,lt),e(lt,Pi),e(Pi,Qs),e(Qs,Fp),e(lt,$p),e(lt,Si),e(Si,Xs),e(Xs,Bp),e(lt,jp),e(lt,Ti),e(Ti,Zs),e(Zs,Kp),e(_,Jp),e(_,Gi),e(Gi,ct),e(ct,er),e(er,Ni),e(er,ae),e(_,Qp),e(_,tr),e(tr,Xp),e(_,Zp),e(_,Ai),e(Ai,eh),e(_,th),e(_,U),e(U,se),e(se,ar),e(ar,ah),e(se,sh),e(se,sr),e(sr,rh),e(se,oh),e(se,rr),e(rr,ih),e(se,lh),e(se,or),e(or,ch),e(se,nh),e(U,dh),e(U,T),e(T,ph),e(T,ir),e(ir,hh),e(T,uh),e(T,lr),e(lr,_h),e(T,fh),e(T,cr),e(cr,mh),e(T,gh),e(T,nr),e(nr,vh),e(T,bh),e(T,dr),e(dr,Eh),e(T,yh),e(U,wh),e(U,nt),e(nt,kh),e(nt,pr),e(pr,Ch),e(nt,Oh),e(nt,hr),e(hr,Dh),e(nt,Ih),e(U,xh),e(U,z),e(z,Ph),e(z,ur),e(ur,Sh),e(z,Th),e(z,_r),e(_r,Gh),e(z,Nh),e(z,fr),e(fr,Ah),e(z,Hh),e(z,mr),e(mr,Mh),e(z,Rh),e(U,qh),e(U,Te),e(Te,Lh),e(Te,gr),e(gr,Uh),e(Te,zh),e(Te,vr),e(vr,Vh),e(Te,Yh),e(Te,br),e(br,Wh),e(Te,Fh),u(n,Zl,h),u(n,I,h),e(I,Hi),e(Hi,Ea),e(Ea,$h),e(I,Bh),e(I,Er),e(Er,yr),e(yr,jh),e(Er,Kh),e(I,Jh),e(I,Mi),e(Mi,dt),e(dt,wr),e(wr,Ri),e(wr,re),e(I,Qh),e(I,kr),e(kr,Xh),e(I,Zh),e(I,ya),e(ya,eu),e(ya,Cr),e(Cr,tu),e(ya,au),e(I,su),e(I,Or),Or.innerHTML=v3,u(n,ec,h),u(n,oe,h),e(oe,qi),e(qi,wa),e(wa,ru),e(oe,ou),e(oe,Li),e(Li,iu),e(oe,lu),e(oe,Ui),e(Ui,pt),e(pt,Dr),e(Dr,zi),e(Dr,ie),e(oe,cu),e(oe,Ir),Ir.innerHTML=b3,u(n,tc,h),u(n,le,h),e(le,Vi),e(Vi,ka),e(ka,nu),e(le,du),e(le,Yi),e(Yi,pu),e(le,hu),e(le,Wi),e(Wi,ht),e(ht,xr),e(xr,Fi),e(xr,ce),e(le,uu),e(le,Pr),Pr.innerHTML=E3,u(n,ac,h),u(n,ne,h),e(ne,$i),e($i,Ca),e(Ca,_u),e(ne,fu),e(ne,Ge),e(Ge,mu),e(Ge,Sr),e(Sr,gu),e(Ge,vu),e(Ge,Tr),e(Tr,bu),e(Ge,Eu),e(Ge,Gr),e(Gr,yu),e(Ge,wu),e(ne,ku),e(ne,Bi),e(Bi,ut),e(ut,Nr),e(Nr,ji),e(Nr,de),e(ne,Cu),e(ne,Ar),Ar.innerHTML=y3,u(n,sc,h),u(n,pe,h),e(pe,Ki),e(Ki,Oa),e(Oa,Ou),e(pe,Du),e(pe,Da),e(Da,Iu),e(Da,Hr),e(Hr,xu),e(Da,Pu),e(pe,Su),e(pe,Ji),e(Ji,_t),e(_t,Mr),e(Mr,Qi),e(Mr,he),e(pe,Tu),e(pe,Rr),Rr.innerHTML=w3,u(n,rc,h),u(n,ue,h),e(ue,Xi),e(Xi,Ia),e(Ia,Gu),e(ue,Nu),e(ue,Zi),e(Zi,Au),e(ue,Hu),e(ue,el),e(el,ft),e(ft,qr),e(qr,tl),e(qr,_e),e(ue,Mu),e(ue,Lr),Lr.innerHTML=k3,u(n,oc,h),u(n,fe,h),e(fe,al),e(al,xa),e(xa,Ru),e(fe,qu),e(fe,mt),e(mt,Lu),e(mt,Ur),e(Ur,Uu),e(mt,zu),e(mt,zr),e(zr,Vu),e(mt,Yu),e(fe,Wu),e(fe,sl),e(sl,gt),e(gt,me),e(fe,Fu),e(fe,Vr),e(Vr,$u),u(n,ic,h),u(n,m,h),e(m,rl),e(rl,Pa),e(Pa,Bu),e(m,ju),e(m,Ne),e(Ne,Ku),e(Ne,Yr),e(Yr,Ju),e(Ne,Qu),e(Ne,Wr),e(Wr,Xu),e(Ne,Zu),e(Ne,Fr),e(Fr,e_),e(Ne,t_),e(m,a_),e(m,ol),e(ol,vt),e(vt,$r),e($r,il),e($r,ge),e(m,s_),e(m,Ht),e(Ht,Br),e(Br,r_),e(Ht,o_),e(Ht,jr),e(jr,i_),e(Ht,l_),e(m,c_),e(m,ll),e(ll,bt),e(bt,Kr),e(Kr,cl),e(Kr,ve),e(m,n_),e(m,Et),e(Et,d_),e(Et,Jr),e(Jr,p_),e(Et,h_),e(Et,Qr),e(Qr,u_),e(Et,__),e(m,f_),e(m,nl),e(nl,yt),e(yt,Xr),e(Xr,dl),e(Xr,be),e(m,m_),e(m,Ae),e(Ae,g_),e(Ae,Zr),e(Zr,v_),e(Ae,b_),e(Ae,pl),e(pl,E_),e(Ae,y_),e(Ae,eo),e(eo,w_),e(Ae,k_),e(m,C_),e(m,He),e(He,O_),e(He,to),e(to,D_),e(He,I_),e(He,ao),e(ao,x_),e(He,P_),e(He,so),e(so,S_),e(He,T_),e(m,G_),e(m,hl),e(hl,wt),e(wt,ro),e(ro,ul),e(ro,Ee),e(m,N_),e(m,kt),e(kt,A_),e(kt,oo),e(oo,H_),e(kt,M_),e(kt,io),e(io,R_),e(kt,q_),e(m,L_),e(m,Me),e(Me,U_),e(Me,lo),e(lo,z_),e(Me,V_),e(Me,co),e(co,Y_),e(Me,W_),e(Me,no),e(no,F_),e(Me,$_),e(m,B_),e(m,_l),e(_l,Ct),e(Ct,po),e(po,fl),e(po,ye),e(m,j_),e(m,V),e(V,K_),e(V,ho),e(ho,J_),e(V,Q_),e(V,uo),e(uo,X_),e(V,Z_),e(V,_o),e(_o,ef),e(V,tf),e(V,fo),e(fo,af),e(V,sf),e(m,rf),e(m,Ot),e(Ot,of),e(Ot,mo),e(mo,lf),e(Ot,cf),e(Ot,go),e(go,nf),e(Ot,df),u(n,lc,h),u(n,Mt,h),e(Mt,ml),e(ml,Sa),e(Sa,pf),e(Mt,hf),e(Mt,gl),e(gl,uf),u(n,cc,h),u(n,Rt,h),e(Rt,vl),e(vl,Ta),e(Ta,_f),e(Rt,ff),e(Rt,bl),e(bl,mf),u(n,nc,h),u(n,qt,h),e(qt,El),e(El,Ga),e(Ga,gf),e(qt,vf),e(qt,yl),e(yl,bf),u(n,dc,h),u(n,Lt,h),e(Lt,wl),e(wl,Na),e(Na,Ef),e(Lt,yf),e(Lt,vo),e(vo,wf),e(vo,bo),e(bo,kf),u(n,pc,h),u(n,Ut,h),e(Ut,kl),e(kl,Aa),e(Aa,Cf),e(Ut,Of),e(Ut,we),e(we,Eo),e(Eo,Df),e(we,If),e(we,yo),e(yo,xf),e(we,Pf),e(we,wo),e(wo,Sf),e(we,Tf),e(we,ko),e(ko,Gf),e(we,Nf),u(n,hc,h),u(n,zt,h),e(zt,Cl),e(Cl,Ha),e(Ha,Af),e(zt,Hf),e(zt,Dt),e(Dt,Mf),e(Dt,Co),e(Co,Rf),e(Dt,qf),e(Dt,Oo),e(Oo,Lf),e(Dt,Uf),u(n,uc,h),u(n,Vt,h),e(Vt,Ol),e(Ol,Ma),e(Ma,zf),e(Vt,Vf),e(Vt,Ra),e(Ra,Yf),e(Ra,Do),e(Do,Wf),e(Ra,Ff),u(n,_c,h),u(n,Yt,h),e(Yt,Dl),e(Dl,qa),e(qa,$f),e(Yt,Bf),e(Yt,Re),e(Re,jf),e(Re,Io),e(Io,Kf),e(Re,Jf),e(Re,xo),e(xo,Qf),e(Re,Xf),e(Re,Po),e(Po,Zf),e(Re,em),u(n,fc,h),u(n,w,h),e(w,Il),e(Il,La),e(La,tm),e(w,am),e(w,xl),e(xl,sm),e(w,rm),e(w,Ua),e(Ua,om),e(Ua,So),e(So,im),e(Ua,lm),e(w,cm),e(w,To),To.innerHTML=C3,e(w,nm),e(w,G),e(G,dm),e(G,Go),e(Go,pm),e(G,hm),e(G,No),e(No,um),e(G,_m),e(G,Ao),e(Ao,fm),e(G,mm),e(G,Ho),e(Ho,gm),e(G,vm),e(G,Mo),e(Mo,bm),e(G,Em),e(w,ym),e(w,Ro),Ro.innerHTML=O3,e(w,wm),e(w,It),e(It,km),e(It,qo),e(qo,Cm),e(It,Om),e(It,Lo),e(Lo,Dm),e(It,Im),e(w,xm),e(w,Uo),Uo.innerHTML=D3,e(w,Pm),e(w,za),e(za,Sm),e(za,zo),e(zo,Tm),e(za,Gm),u(n,mc,h),u(n,x,h),e(x,Pl),e(Pl,Va),e(Va,Nm),e(x,Am),e(x,Sl),e(Sl,Hm),e(x,Mm),e(x,C),e(C,Tl),e(Tl,Rm),e(C,qm),e(C,Gl),e(Gl,Lm),e(C,Um),e(C,Nl),e(Nl,zm),e(C,Vm),e(C,Al),e(Al,Ym),e(C,Wm),e(C,Hl),e(Hl,Fm),e(C,$m),e(C,Ml),e(Ml,Bm),e(C,jm),e(C,Rl),e(Rl,Km),e(C,Jm),e(C,ql),e(ql,Qm),e(x,Xm),e(x,Ya),e(Ya,Zm),e(Ya,Vo),e(Vo,eg),e(Ya,tg),e(x,ag),e(x,sg),e(x,rg),e(x,Yo),e(Yo,og),e(Yo,Wo),e(Wo,ig)},p:B3,d(n){n&&t(y),n&&t(Le),n&&t(N),n&&t(Yl),n&&t(Ba),n&&t(Wl),n&&t(St),n&&t(Fl),n&&t(Tt),n&&t($l),n&&t(Y),n&&t(Bl),n&&t(A),n&&t(jl),n&&t($),n&&t(Kl),n&&t(H),n&&t(Jl),n&&t(M),n&&t(Ql),n&&t(f),n&&t(Xl),n&&t(_),n&&t(Zl),n&&t(I),n&&t(ec),n&&t(oe),n&&t(tc),n&&t(le),n&&t(ac),n&&t(ne),n&&t(sc),n&&t(pe),n&&t(rc),n&&t(ue),n&&t(oc),n&&t(fe),n&&t(ic),n&&t(m),n&&t(lc),n&&t(Mt),n&&t(cc),n&&t(Rt),n&&t(nc),n&&t(qt),n&&t(dc),n&&t(Lt),n&&t(pc),n&&t(Ut),n&&t(hc),n&&t(zt),n&&t(uc),n&&t(Vt),n&&t(_c),n&&t(Yt),n&&t(fc),n&&t(w),n&&t(mc),n&&t(x)}}}function L0(Fa){let y,qe;const Le=[Fa[0],g3];let N={$$slots:{default:[q0]},$$scope:{ctx:Fa}};for(let k=0;k<Le.length;k+=1)N=Ig(N,Le[k]);return y=new j3({props:N}),{c(){L3(y.$$.fragment)},l(k){U3(y.$$.fragment,k)},m(k,q){z3(y,k,q),qe=!0},p(k,[q]){const $a=q&1?V3(Le,[q&1&&WE(k[0]),q&0&&WE(g3)]):{};q&2&&($a.$$scope={dirty:q,ctx:k}),y.$set($a)},i(k){qe||(Y3(y.$$.fragment,k),qe=!0)},o(k){W3(y.$$.fragment,k),qe=!1},d(k){F3(y,k)}}}const g3={title:"Git Gudder",venue:"Shopee SG",venueLink:"https://www.google.com.sg/maps/place/Shopee+Building/@1.2923933,103.7860786,19z/data=!3m1!4b1!4m5!3m4!1s0x31da1b803e3bae77:0x154e17d66760912b!8m2!3d1.2923933!4d103.7866258",occasion:"React Knowledgeable Week 41",occasionLink:"https://github.com/Shopee/shopee-react-knowledgeable/issues/129",slides:"https://slides.com/tanhauhau/git-gudder",date:"2019-08-30",label:"talk",layout:"talk",description:'This week in React Knowledgeable, I did a sharing on Git commands.The title of the talk was called "Git Gudder", because almost a year ago I did a lightning sharing on "Git Gud", (Get Good), this follow up sharing used the comparative of "Git Gud", therefore, "Git Gudder"....',tableOfContents:[{link:"disclaimer",title:"Disclaimer"},{link:"git-merge",title:"git merge",nested:[{link:"fast-forward-merge",title:"Fast-forward merge"},{link:"non-fast-forward-merge",title:"Non Fast-forward merge"},{link:"git-pull",title:"git pull"}]},{link:"git-reset",title:"git reset"},{link:"git-cherry-pick",title:"git cherry-pick"},{link:"git-revert",title:"git revert"},{link:"git-rebase",title:"git rebase",nested:[{link:"git-rebase-interactive",title:"git rebase --interactive",nested:[{link:"pick",title:"pick"},{link:"drop",title:"drop"},{link:"squash-fixup",title:"squash & fixup"},{link:"break",title:"break"},{link:"edit",title:"edit"}]},{link:"git-pull-rebase",title:"git pull --rebase"},{link:"git-rebase-a-shared-branch",title:"git rebase a shared branch"}]},{link:"git-log",title:"git log",nested:[{link:"since-after-until-before",title:"--since, --after, --until, --before"},{link:"grep",title:"--grep"},{link:"invert-grep",title:"--invert-grep"},{link:"all-match",title:"--all-match"},{link:"min-parents-max-parents-merges-no-merges",title:"--min-parents, --max-parents, --merges, --no-merges"},{link:"first-parent",title:"--first-parent"}]},{link:"git-reflog",title:"git reflog"},{link:"git-bisect",title:"git bisect"},{link:"summary",title:"Summary"}]};function U0(Fa,y,qe){return $3("blog",{image:K3}),Fa.$$set=Le=>{qe(0,y=Ig(Ig({},y),FE(Le)))},y=FE(y),[y]}class B0 extends M3{constructor(y){super();R3(this,y,U0,L0,q3,{})}}export{B0 as default,g3 as metadata};
