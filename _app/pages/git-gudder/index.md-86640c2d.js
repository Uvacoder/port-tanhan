import{S as F3,i as W3,s as B3,C as Sg,w as y3,x as w3,y as k3,z as j3,A as BE,q as C3,o as O3,B as D3,r as K3,R as jE,k as d,e as a,t as o,m as p,c as s,a as r,h as i,d as t,b as l,Q as y,f as c,g as u,F as e,O as Q3}from"../../chunks/vendor-569a3c5c.js";import{T as J3}from"../../chunks/TalkLayout-cd724f5b.js";import{T as X3}from"../../chunks/TableOfContent-dbc18cb8.js";import{_ as Z3}from"../../chunks/twitter-card-image-a57df29d.js";import"../../chunks/stores-ee936cd4.js";import"../../chunks/WebMentions-968cc380.js";/* empty css                                */var e0="/_app/assets/git-rebase-w-5-40f84cef.webp",t0="/_app/assets/git-rebase-w-5-72f577bd.webp",a0="/_app/assets/git-rebase-w-5-cab542e0.png",KE="/_app/assets/git-rebase-w-5-5a2d55ac.png",s0="/_app/assets/git-rebase-w-4-78b4f72b.webp",r0="/_app/assets/git-rebase-w-4-4ed80686.webp",o0="/_app/assets/git-rebase-w-4-d5db6125.png",QE="/_app/assets/git-rebase-w-4-2584a942.png",i0="/_app/assets/git-rebase-w-3-c05740e5.webp",l0="/_app/assets/git-rebase-w-3-ec2827ca.webp",c0="/_app/assets/git-rebase-w-3-6b3fcc11.png",JE="/_app/assets/git-rebase-w-3-ffc13e9b.png",n0="/_app/assets/git-rebase-w-2-0417cc74.webp",d0="/_app/assets/git-rebase-w-2-b2000a8d.webp",p0="/_app/assets/git-rebase-w-2-9523a2a9.png",XE="/_app/assets/git-rebase-w-2-b8b283d7.png",h0="/_app/assets/git-rebase-w-23535fd9.webp",u0="/_app/assets/git-rebase-w-77da260b.webp",f0="/_app/assets/git-rebase-w-052503fb.png",ZE="/_app/assets/git-rebase-w-11db8095.png",_0="/_app/assets/git-pull-rebase-e96cea4d.gif",e3="/_app/assets/git-pull-rebase-108e4a1b.gif",m0="/_app/assets/git-rebase-i-edit-659d16af.webp",g0="/_app/assets/git-rebase-i-edit-8b5613d8.webp",v0="/_app/assets/git-rebase-i-edit-f9cd0321.png",t3="/_app/assets/git-rebase-i-edit-ab47c210.png",b0="/_app/assets/git-rebase-i-edit-659d16af.webp",E0="/_app/assets/git-rebase-i-edit-8b5613d8.webp",y0="/_app/assets/git-rebase-i-edit-f9cd0321.png",a3="/_app/assets/git-rebase-i-edit-ab47c210.png",w0="/_app/assets/git-rebase-i-squash-8a020892.webp",k0="/_app/assets/git-rebase-i-squash-9abb4d89.webp",C0="/_app/assets/git-rebase-i-squash-c3b29d41.png",s3="/_app/assets/git-rebase-i-squash-02b80129.png",O0="/_app/assets/git-rebase-i-drop-934580e2.webp",D0="/_app/assets/git-rebase-i-drop-c37640da.webp",I0="/_app/assets/git-rebase-i-drop-4702c3bb.png",r3="/_app/assets/git-rebase-i-drop-5f9056bc.png",o3="/_app/assets/git-rebase-i-pick-7274ae2b.webp",i3="/_app/assets/git-rebase-i-pick-604dbb33.webp",l3="/_app/assets/git-rebase-i-pick-49c122b1.png",Rc="/_app/assets/git-rebase-i-pick-32a4e89d.png",x0="/_app/assets/git-rebase-2b43108c.webp",P0="/_app/assets/git-rebase-967e11ec.webp",S0="/_app/assets/git-rebase-a4eff047.jpeg",c3="/_app/assets/git-rebase-dab4f768.jpeg",T0="/_app/assets/git-rebase-2-2b7025c5.gif",n3="/_app/assets/git-rebase-2-33228692.gif",G0="/_app/assets/git-rebase-1900225e.gif",d3="/_app/assets/git-rebase-369d0d6d.gif",N0="/_app/assets/git-revert-4-3edfe3dc.gif",p3="/_app/assets/git-revert-4-75e51dd4.gif",A0="/_app/assets/git-revert-3-8a0ba457.gif",h3="/_app/assets/git-revert-3-23bca0eb.gif",H0="/_app/assets/git-revert-2-dc29e568.gif",u3="/_app/assets/git-revert-2-67d081e4.gif",M0="/_app/assets/git-revert-7d3a118f.gif",f3="/_app/assets/git-revert-1eb721eb.gif",R0="/_app/assets/git-cherry-pick-b67643f3.gif",_3="/_app/assets/git-cherry-pick-3c698ca3.gif",q0="/_app/assets/git-reset-438d1bc4.gif",m3="/_app/assets/git-reset-c28aebc3.gif",L0="/_app/assets/git-pull-b6dc00cb.gif",g3="/_app/assets/git-pull-f9956a6f.gif",U0="/_app/assets/git-merge-non-ff-a3864a1c.gif",v3="/_app/assets/git-merge-non-ff-65850ed3.gif",z0="/_app/assets/git-merge-ff-dcf4441f.gif",b3="/_app/assets/git-merge-ff-a4be79f5.gif";function V0(Fa){let E,xe,V,la,k,O,Wa,ai,qc,Lc,si,Uc,zc,Yl,Ba,ri,Vc,Fl,Pt,oi,ca,$c,Yc,na,Fc,da,Wc,Bc,Wl,St,ii,pa,jc,Kc,Pe,Qc,ja,Jc,Xc,li,Zc,en,ci,tn,an,Bl,$,ni,ha,sn,rn,Be,on,Ka,ln,cn,Qa,nn,dn,pn,di,je,Y,Tg,hn,Ja,un,jl,A,pi,ua,fn,_n,Ke,mn,Xa,gn,vn,Za,bn,En,yn,hi,Qe,F,Gg,wn,es,kn,Cn,ui,On,Kl,W,fi,fa,Dn,In,Se,xn,ts,Pn,Sn,as,Tn,Gn,ss,Nn,An,Hn,_i,Je,B,Ng,Mn,rs,Rn,Ql,H,mi,_a,qn,Ln,os,is,Un,zn,Vn,Le,ls,$n,Yn,cs,Fn,Wn,ns,Bn,jn,Kn,gi,Xe,j,Ag,Qn,ds,Jn,Jl,M,vi,ma,Xn,Zn,bi,ed,td,Tt,ps,ad,sd,hs,rd,od,id,Ei,Ze,K,Hg,ld,us,cd,Xl,_,yi,ga,nd,dd,fs,_s,pd,hd,ud,q,fd,ms,_d,md,gs,gd,vd,vs,bd,Ed,bs,yd,wd,kd,wi,et,Q,Mg,Cd,Es,Od,Dd,va,Id,ys,xd,Pd,Sd,ki,tt,J,Rg,Td,ws,Gd,Nd,Te,Ad,ks,Hd,Md,Cs,Rd,qd,Os,Ld,Ud,zd,Ds,Is,Vd,$d,Yd,Ci,at,X,qg,Fd,xs,Wd,Bd,T,jd,Ps,Kd,Qd,Ss,Jd,Xd,Ts,Zd,ep,Gs,tp,ap,Ns,sp,rp,op,Oi,st,Z,Lg,ip,As,lp,Zl,f,Di,ba,cp,np,Hs,Ms,dp,pp,hp,I,up,Rs,fp,_p,qs,mp,gp,Ls,vp,bp,Us,Ep,yp,zs,wp,kp,Vs,Cp,Op,Dp,Gt,$s,Ip,xp,Ys,Pp,Sp,Tp,Ii,rt,ee,Ug,Gp,Fs,Np,Ap,Ws,Bs,Hp,Mp,Rp,Nt,js,qp,Lp,Ks,Up,zp,Vp,xi,ot,te,zg,$p,Qs,Yp,Fp,Pi,Wp,Bp,it,Si,Js,jp,Kp,Ti,Xs,Qp,Jp,Gi,Zs,Xp,Zp,Ni,lt,er,Ai,ae,Vg,eh,tr,th,ah,Hi,sh,rh,L,se,ar,oh,ih,sr,lh,ch,rr,nh,dh,or,ph,hh,uh,G,fh,ir,_h,mh,lr,gh,vh,cr,bh,Eh,nr,yh,wh,dr,kh,Ch,Oh,ct,Dh,pr,Ih,xh,hr,Ph,Sh,Th,U,Gh,ur,Nh,Ah,fr,Hh,Mh,_r,Rh,qh,mr,Lh,Uh,zh,Ge,Vh,gr,$h,Yh,vr,Fh,Wh,br,Bh,jh,ec,x,Mi,Ea,Kh,Qh,Er,yr,Jh,Xh,Zh,Ri,nt,wr,qi,re,$g,eu,kr,tu,au,ya,su,Cr,ru,ou,iu,Or,I3=`<pre class="prism language-"><code><span class="line">pick #2 commit msg 2</span>
<span class="line">pick #3 commit msg 3</span>
<span class="line">pick #4 commit msg 4</span>
<span class="line">pick #5 commit msg 5</span>
<span class="line">pick #6 commit msg 6</span>
<span class="line"></span>
<span class="line"># Rebase #1..#6 onto #1 (5 commands)</span>
<span class="line">#</span>
<span class="line"># Commands:</span>
<span class="line"># p, pick = use commit</span>
<span class="line"># r, reword = use commit, but edit the commit message</span>
<span class="line"># e, edit = use commit, but stop for amending</span>
<span class="line">...</span></code></pre>`,tc,oe,Li,wa,lu,cu,Ui,nu,du,zi,dt,Dr,Vi,ie,Yg,pu,Ir,x3=`<pre class="prism language-"><code><span class="line">pick #2 commit msg 2</span>
<span class="line">pick #3 commit msg 3</span>
<span class="line">pick #4 commit msg 4</span>
<span class="line">pick #5 commit msg 5</span>
<span class="line">pick #6 commit msg 6</span></code></pre>`,ac,le,$i,ka,hu,uu,Yi,fu,_u,Fi,pt,xr,Wi,ce,Fg,mu,Pr,P3=`<pre class="prism language-"><code><span class="line">pick #2 commit msg 2</span>
<span class="line">drop #3 commit msg 3</span>
<span class="line">pick #4 commit msg 4</span>
<span class="line">pick #5 commit msg 5</span>
<span class="line">pick #6 commit msg 6</span></code></pre>`,sc,ne,Bi,Ca,gu,vu,Ne,bu,Sr,Eu,yu,Tr,wu,ku,Gr,Cu,Ou,Du,ji,ht,Nr,Ki,de,Wg,Iu,Ar,S3=`<pre class="prism language-"><code><span class="line">pick   #2 commit msg 2</span>
<span class="line">squash #3 commit msg 3</span>
<span class="line">pick   #4 commit msg 4</span>
<span class="line">fixup  #5 commit msg 5</span>
<span class="line">pick   #6 commit msg 6</span></code></pre>`,rc,pe,Qi,Oa,xu,Pu,Da,Su,Hr,Tu,Gu,Nu,Ji,ut,Mr,Xi,he,Bg,Au,Rr,T3=`<pre class="prism language-"><code><span class="line">pick   #2 commit msg 2</span>
<span class="line">pick   #3 commit msg 3</span>
<span class="line">break</span>
<span class="line">pick   #4 commit msg 4</span>
<span class="line">pick   #5 commit msg 5</span>
<span class="line">pick   #6 commit msg 6</span></code></pre>`,oc,ue,Zi,Ia,Hu,Mu,el,Ru,qu,tl,ft,qr,al,fe,jg,Lu,Lr,G3=`<pre class="prism language-"><code><span class="line">pick   #2 commit msg 2</span>
<span class="line">edit   #3 commit msg 3</span>
<span class="line">pick   #4 commit msg 4</span>
<span class="line">pick   #5 commit msg 5</span>
<span class="line">pick   #6 commit msg 6</span></code></pre>`,ic,_e,sl,xa,Uu,zu,_t,Vu,Ur,$u,Yu,zr,Fu,Wu,Bu,rl,mt,me,Kg,ju,Vr,Ku,lc,m,ol,Pa,Qu,Ju,Ae,Xu,$r,Zu,ef,Yr,tf,af,Fr,sf,rf,of,il,gt,Wr,ll,ge,Qg,lf,At,Br,cf,nf,jr,df,pf,hf,cl,vt,Kr,nl,ve,Jg,uf,bt,ff,Qr,_f,mf,Jr,gf,vf,bf,dl,Et,Xr,pl,be,Xg,Ef,He,yf,Zr,wf,kf,hl,Cf,Of,eo,Df,If,xf,Me,Pf,to,Sf,Tf,ao,Gf,Nf,so,Af,Hf,Mf,ul,yt,ro,fl,Ee,Zg,Rf,wt,qf,oo,Lf,Uf,io,zf,Vf,$f,Re,Yf,lo,Ff,Wf,co,Bf,jf,no,Kf,Qf,Jf,_l,kt,po,ml,ye,ev,Xf,z,Zf,ho,e_,t_,uo,a_,s_,fo,r_,o_,_o,i_,l_,c_,Ct,n_,mo,d_,p_,go,h_,u_,cc,Ht,gl,Sa,f_,__,vl,m_,nc,Mt,bl,Ta,g_,v_,El,b_,dc,Rt,yl,Ga,E_,y_,wl,w_,pc,qt,kl,Na,k_,C_,vo,O_,bo,D_,hc,Lt,Cl,Aa,I_,x_,we,Eo,P_,S_,yo,T_,G_,wo,N_,A_,ko,H_,M_,uc,Ut,Ol,Ha,R_,q_,Ot,L_,Co,U_,z_,Oo,V_,$_,fc,zt,Dl,Ma,Y_,F_,Ra,W_,Do,B_,j_,_c,Vt,Il,qa,K_,Q_,qe,J_,Io,X_,Z_,xo,em,tm,Po,am,sm,mc,w,xl,La,rm,om,Pl,im,lm,Ua,cm,So,nm,dm,pm,To,N3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">$ git bisect start </span><span style="color: var(--shiki-token-comment)"># starts the bisect session</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$ git bisect bad v2.5.1 </span><span style="color: var(--shiki-token-comment)"># specify the commit you know is bad</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$ git bisect good v2.6.13 </span><span style="color: var(--shiki-token-comment)"># specify the commit you knew were good</span></span></code></pre>`,hm,N,um,Go,fm,_m,No,mm,gm,Ao,vm,bm,Ho,Em,ym,Mo,wm,km,Cm,Ro,A3='<pre class="prism language-"><code><span class="line">Bisecting: 675 revisions left to test after this (roughly 10 steps)</span></code></pre>',Om,Dt,Dm,qo,Im,xm,Lo,Pm,Sm,Tm,Uo,H3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)"># if it is a good commit</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$ git bisect good</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)"># if it is a bad commit</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$ git bisect bad</span></span></code></pre>`,Gm,za,Nm,zo,Am,Hm,gc,P,Sl,Va,Mm,Rm,Tl,qm,Lm,C,Gl,Um,zm,Nl,Vm,$m,Al,Ym,Fm,Hl,Wm,Bm,Ml,jm,Km,Rl,Qm,Jm,ql,Xm,Zm,Ll,eg,tg,$a,ag,Vo,sg,rg,og,ig,lg,$o,cg,Yo,ng,vc;return E=new X3({props:{data:[{link:"disclaimer",title:"Disclaimer"},{link:"git-merge",title:"git merge",nested:[{link:"fast-forward-merge",title:"Fast-forward merge"},{link:"non-fast-forward-merge",title:"Non Fast-forward merge"},{link:"git-pull",title:"git pull"}]},{link:"git-reset",title:"git reset"},{link:"git-cherry-pick",title:"git cherry-pick"},{link:"git-revert",title:"git revert"},{link:"git-rebase",title:"git rebase",nested:[{link:"git-rebase-interactive",title:"git rebase --interactive",nested:[{link:"pick",title:"pick"},{link:"drop",title:"drop"},{link:"squash-fixup",title:"squash & fixup"},{link:"break",title:"break"},{link:"edit",title:"edit"}]},{link:"git-pull-rebase",title:"git pull --rebase"},{link:"git-rebase-a-shared-branch",title:"git rebase a shared branch"}]},{link:"git-log",title:"git log",nested:[{link:"since-after-until-before",title:"--since, --after, --until, --before"},{link:"grep",title:"--grep"},{link:"invert-grep",title:"--invert-grep"},{link:"all-match",title:"--all-match"},{link:"min-parents-max-parents-merges-no-merges",title:"--min-parents, --max-parents, --merges, --no-merges"},{link:"first-parent",title:"--first-parent"}]},{link:"git-reflog",title:"git reflog"},{link:"git-bisect",title:"git bisect"},{link:"summary",title:"Summary"}]}}),{c(){y3(E.$$.fragment),xe=d(),V=a("p"),la=o("This week in React Knowledgeable, I did a sharing on Git commands."),k=d(),O=a("p"),Wa=o("The title of the talk was called "),ai=a("strong"),qc=o('"Git Gudder"'),Lc=o(', because almost a year ago I did a lightning sharing on "Git Gud", '),si=a("em"),Uc=o("(Get Good)"),zc=o(', this follow up sharing used the comparative of "Git Gud", therefore, "Git Gudder".'),Yl=d(),Ba=a("blockquote"),ri=a("p"),Vc=o('Will there be a "Git Guddest"? \u{1F914}'),Fl=d(),Pt=a("section"),oi=a("h2"),ca=a("a"),$c=o("Disclaimer"),Yc=d(),na=a("p"),Fc=o("I am by no means a Git master or anywhere near mastering Git. I do google or "),da=a("a"),Wc=o("refer to the docs"),Bc=o(" whenever I am unsure of the commands. In this talk, I listed out all the common history manipulation commands Git provides. I hoped that, with it, we are aware of what is available in our toolbox. So, we can look for it whenever we need it."),Wl=d(),St=a("section"),ii=a("h2"),pa=a("a"),jc=o("git merge"),Kc=d(),Pe=a("p"),Qc=o("There's 2 kind of "),ja=a("code"),Jc=o("git merge"),Xc=o(", the "),li=a("strong"),Zc=o("fast-forward"),en=o(" and "),ci=a("strong"),tn=o("non fast-forward"),an=o("."),Bl=d(),$=a("section"),ni=a("h3"),ha=a("a"),sn=o("Fast-forward merge"),rn=d(),Be=a("p"),on=o("Merging "),Ka=a("code"),ln=o("master"),cn=o(" into "),Qa=a("code"),nn=o("branch A"),dn=o(":"),pn=d(),di=a("p"),je=a("span"),Y=a("img"),hn=d(),Ja=a("div"),un=o("Fast-forward merge"),jl=d(),A=a("section"),pi=a("h3"),ua=a("a"),fn=o("Non Fast-forward merge"),_n=d(),Ke=a("p"),mn=o("Merging "),Xa=a("code"),gn=o("master"),vn=o(" into "),Za=a("code"),bn=o("branch A"),En=o(":"),yn=d(),hi=a("p"),Qe=a("span"),F=a("img"),wn=d(),es=a("div"),kn=o("Non fast-forward merge"),Cn=d(),ui=a("p"),On=o("Non fast-forward merge will create an extra commit that merges 2 branches."),Kl=d(),W=a("section"),fi=a("h3"),fa=a("a"),Dn=o("git pull"),In=d(),Se=a("p"),xn=o("By default, "),ts=a("code"),Pn=o("git pull"),Sn=o(" is "),as=a("code"),Tn=o("git fetch origin branch"),Gn=o(" + "),ss=a("code"),Nn=o("git merge origin/branch"),An=o("."),Hn=d(),_i=a("p"),Je=a("span"),B=a("img"),Mn=d(),rs=a("div"),Rn=o("git pull"),Ql=d(),H=a("section"),mi=a("h2"),_a=a("a"),qn=o("git reset"),Ln=d(),os=a("p"),is=a("code"),Un=o("git reset --hard"),zn=o(" allows you to change the reference of where your branch is pointing at."),Vn=d(),Le=a("p"),ls=a("code"),$n=o("git checkout branch-b"),Yn=o(", "),cs=a("code"),Fn=o("git reset --hard branch-a"),Wn=o(", "),ns=a("code"),Bn=o("git reset --hard #d"),jn=o(":"),Kn=d(),gi=a("p"),Xe=a("span"),j=a("img"),Qn=d(),ds=a("div"),Jn=o("git reset"),Jl=d(),M=a("section"),vi=a("h2"),ma=a("a"),Xn=o("git cherry-pick"),Zn=d(),bi=a("p"),ed=o("cherry-pick allows you to pick commits from some other branches, tags, or refs."),td=d(),Tt=a("p"),ps=a("code"),ad=o("git checkout branch-b"),sd=o(", "),hs=a("code"),rd=o("git cherry-pick branch-a"),od=o(":"),id=d(),Ei=a("p"),Ze=a("span"),K=a("img"),ld=d(),us=a("div"),cd=o("git cherry-pick"),Xl=d(),_=a("section"),yi=a("h2"),ga=a("a"),nd=o("git revert"),dd=d(),fs=a("p"),_s=a("code"),pd=o("git revert"),hd=o(" creates a new commit that reverses the change of the commit that you are reverting."),ud=d(),q=a("p"),fd=o("For example, if you accidentally merged "),ms=a("code"),_d=o("feat/a"),md=o(" into "),gs=a("code"),gd=o("master"),vd=o(" branch, you can "),vs=a("code"),bd=o("git checkout master"),Ed=o(", "),bs=a("code"),yd=o("git revert #1"),wd=o(":"),kd=d(),wi=a("p"),et=a("span"),Q=a("img"),Cd=d(),Es=a("div"),Od=o("git revert"),Dd=d(),va=a("p"),Id=o("If you know merge master into your "),ys=a("code"),xd=o("feat/a"),Pd=o(" branch, you would noticed that all the changes in the branch is gone, because the merge is a fast-forward merge, that includes the revert commit made in the branch:"),Sd=d(),ki=a("p"),tt=a("span"),J=a("img"),Td=d(),ws=a("div"),Gd=o("Merging `master` into `feat/a`"),Nd=d(),Te=a("p"),Ad=o("If you want to recover the changes made in "),ks=a("code"),Hd=o("feat/a"),Md=o(", you can "),Cs=a("code"),Rd=o("revert"),qd=o(" the "),Os=a("code"),Ld=o("revert"),Ud=o(":"),zd=d(),Ds=a("p"),Is=a("code"),Vd=o("git revert ~#1"),$d=o(":"),Yd=d(),Ci=a("p"),at=a("span"),X=a("img"),Fd=d(),xs=a("div"),Wd=o("git revert the revert"),Bd=d(),T=a("p"),jd=o("Now, when you are ready to merge your "),Ps=a("code"),Kd=o("feat/a"),Qd=o(" branch into "),Ss=a("code"),Jd=o("master"),Xd=o(", you get the all the changes in "),Ts=a("code"),Zd=o("feat/a"),ep=o(", a commit that revert all that, and a commit that reverts the revert commit, which meant, you still have all the changes in "),Gs=a("code"),tp=o("feat/a"),ap=o(" in "),Ns=a("code"),sp=o("master"),rp=o(":"),op=d(),Oi=a("p"),st=a("span"),Z=a("img"),ip=d(),As=a("div"),lp=o("Merging changes back to master"),Zl=d(),f=a("section"),Di=a("h2"),ba=a("a"),cp=o("git rebase"),np=d(),Hs=a("p"),Ms=a("code"),dp=o("git rebase"),pp=o(' allows you to "move" commits to a different "base".'),hp=d(),I=a("p"),up=o("For example, you branched out "),Rs=a("code"),fp=o("branch-a"),_p=o(" from "),qs=a("code"),mp=o("master"),gp=o(" a while ago, and "),Ls=a("code"),vp=o("master"),bp=o(" has made a few more commits. But if you merge your branch into master now, it would be a non fast-forward merge, creating an extra commit to the history. If you want a clean, one-line history, you can do a "),Us=a("code"),Ep=o("rebase"),yp=o(", replaying commits that you have made in "),zs=a("code"),wp=o("branch-a"),kp=o(" on top of the latest "),Vs=a("code"),Cp=o("master"),Op=o("."),Dp=d(),Gt=a("p"),$s=a("code"),Ip=o("git checkout branch-a"),xp=o(", "),Ys=a("code"),Pp=o("git rebase master"),Sp=o(":"),Tp=d(),Ii=a("p"),rt=a("span"),ee=a("img"),Gp=d(),Fs=a("div"),Np=o("git rebase"),Ap=d(),Ws=a("p"),Bs=a("code"),Hp=o("git rebase"),Mp=o(" does not have to be on top of the branch that you branched out, you can rebase to anywhere:"),Rp=d(),Nt=a("p"),js=a("code"),qp=o("git checkout branch-a"),Lp=o(", "),Ks=a("code"),Up=o("git rebase --onto branch-b master branch-a"),zp=o(":"),Vp=d(),xi=a("p"),ot=a("span"),te=a("img"),$p=d(),Qs=a("div"),Yp=o("git rebase"),Fp=d(),Pi=a("p"),Wp=o("There's 3 reference point you should know when doing a git rebase:"),Bp=d(),it=a("ul"),Si=a("li"),Js=a("code"),jp=o("<new base>"),Kp=d(),Ti=a("li"),Xs=a("code"),Qp=o("<upstream>"),Jp=d(),Gi=a("li"),Zs=a("code"),Xp=o("<branch>"),Zp=d(),Ni=a("p"),lt=a("span"),er=a("picture"),Ai=a("source"),ae=a("img"),eh=d(),tr=a("div"),th=o("git rebase"),ah=d(),Hi=a("p"),sh=o("Here are a few things you should know:"),rh=d(),L=a("ul"),se=a("li"),ar=a("code"),oh=o("git rebase"),ih=o(" will replay the commits from "),sr=a("code"),lh=o("<upstream>"),ch=o(" to "),rr=a("code"),nh=o("<branch>"),dh=o(" onto "),or=a("code"),ph=o("<new base>"),hh=o("."),uh=d(),G=a("li"),fh=o("If you specify "),ir=a("code"),_h=o("<upstream>"),mh=o(" as a branch name, "),lr=a("code"),gh=o("git rebase"),vh=o(" will replay commits from the common ancestor of "),cr=a("code"),bh=o("<upstream>"),Eh=o(" and "),nr=a("code"),yh=o("<branch>"),wh=o(" to "),dr=a("code"),kh=o("<branch>"),Ch=o("."),Oh=d(),ct=a("li"),Dh=o("If you do not specify "),pr=a("code"),Ih=o("<branch>"),xh=o(", the default is the "),hr=a("code"),Ph=o("HEAD"),Sh=o(", current commit you are at now."),Th=d(),U=a("li"),Gh=o("If you do not specify "),ur=a("code"),Nh=o("--onto <new base>"),Ah=o(", the new base will be default to "),fr=a("code"),Hh=o("<upsttream>"),Mh=o(", that's why "),_r=a("code"),Rh=o("git rebase master"),qh=o(" is equivalent to "),mr=a("code"),Lh=o("git rebase --onto master master"),Uh=o("."),zh=d(),Ge=a("li"),Vh=o("If you do not specify "),gr=a("code"),$h=o("<upstream>"),Yh=o(", it will be the upstream of the current branch. So "),vr=a("code"),Fh=o("git rebase"),Wh=o(" is equivalent to "),br=a("code"),Bh=o("git rebase <origin/current-branch>"),jh=o("."),ec=d(),x=a("section"),Mi=a("h3"),Ea=a("a"),Kh=o("git rebase --interactive"),Qh=d(),Er=a("p"),yr=a("code"),Jh=o("git rebase"),Xh=o(" has an interactive mode, which allows you to specify instructions while replaying commits during a rebase."),Zh=d(),Ri=a("p"),nt=a("span"),wr=a("picture"),qi=a("source"),re=a("img"),eu=d(),kr=a("div"),tu=o("git rebase interactive"),au=d(),ya=a("p"),su=o("When you run "),Cr=a("code"),ru=o("git rebase --interactive"),ou=o(", git will prompt you with an editor to edit the instructions. In it, you will see a list of commits that will be replayed:"),iu=d(),Or=a("div"),tc=d(),oe=a("section"),Li=a("h4"),wa=a("a"),lu=o("pick"),cu=d(),Ui=a("p"),nu=o("The default instruction. Will just use the commit while replaying:"),du=d(),zi=a("p"),dt=a("span"),Dr=a("picture"),Vi=a("source"),ie=a("img"),pu=d(),Ir=a("div"),ac=d(),le=a("section"),$i=a("h4"),ka=a("a"),hu=o("drop"),uu=d(),Yi=a("p"),fu=o("Drop will omit the commit:"),_u=d(),Fi=a("p"),pt=a("span"),xr=a("picture"),Wi=a("source"),ce=a("img"),mu=d(),Pr=a("div"),sc=d(),ne=a("section"),Bi=a("h4"),Ca=a("a"),gu=o("squash & fixup"),vu=d(),Ne=a("p"),bu=o("Squash & Fixup will combine your commit with the previous commit, the only difference is that with "),Sr=a("code"),Eu=o("squash"),yu=o(", git will prompt you to edit the commit message of the combined commit, while "),Tr=a("code"),wu=o("fixup"),ku=o(" will drop the commit of the "),Gr=a("code"),Cu=o("fixup"),Ou=o("ed commit."),Du=d(),ji=a("p"),ht=a("span"),Nr=a("picture"),Ki=a("source"),de=a("img"),Iu=d(),Ar=a("div"),rc=d(),pe=a("section"),Qi=a("h4"),Oa=a("a"),xu=o("break"),Pu=d(),Da=a("p"),Su=o("Pause the rebase. You can do add more commits here if you want. When you are done, make sure that your workspace and stage is clean, run "),Hr=a("code"),Tu=o("git rebase --continue"),Gu=o(" to continue."),Nu=d(),Ji=a("p"),ut=a("span"),Mr=a("picture"),Xi=a("source"),he=a("img"),Au=d(),Rr=a("div"),oc=d(),ue=a("section"),Zi=a("h4"),Ia=a("a"),Hu=o("edit"),Mu=d(),el=a("p"),Ru=o("Pause the rebase at the commit that you are editing, before the commit has been commited. You can add, remove or ammend your files before continue the rebase process."),qu=d(),tl=a("p"),ft=a("span"),qr=a("picture"),al=a("source"),fe=a("img"),Lu=d(),Lr=a("div"),ic=d(),_e=a("section"),sl=a("h3"),xa=a("a"),Uu=o("git pull --rebase"),zu=d(),_t=a("p"),Vu=o("There's a rebase mode for git pull, where it will be "),Ur=a("code"),$u=o("git fetch origin branch"),Yu=o(" + "),zr=a("code"),Fu=o("git rebase origin/branch"),Wu=o("."),Bu=d(),rl=a("p"),mt=a("span"),me=a("img"),ju=d(),Vr=a("div"),Ku=o("git pull --rebase"),lc=d(),m=a("section"),ol=a("h3"),Pa=a("a"),Qu=o("git rebase a shared branch"),Ju=d(),Ae=a("p"),Xu=o("Say "),$r=a("code"),Zu=o("x"),ef=o(" and "),Yr=a("code"),tf=o("y"),af=o(" are working on the "),Fr=a("code"),sf=o("feat/a"),rf=o(" branch."),of=d(),il=a("p"),gt=a("span"),Wr=a("picture"),ll=a("source"),ge=a("img"),lf=d(),At=a("p"),Br=a("code"),cf=o("x"),nf=o(" decided to rebase the "),jr=a("code"),df=o("feat/a"),pf=o(" branch to squash and drop some commits:"),hf=d(),cl=a("p"),vt=a("span"),Kr=a("picture"),nl=a("source"),ve=a("img"),uf=d(),bt=a("p"),ff=o("While "),Qr=a("code"),_f=o("x"),mf=o(" had done that, that was just a part of the whole picture. Because the "),Jr=a("code"),gf=o("rebase"),vf=o(" on his local machine changed the git history on his local copy only."),bf=d(),dl=a("p"),Et=a("span"),Xr=a("picture"),pl=a("source"),be=a("img"),Ef=d(),He=a("p"),yf=o("To make the change on the remote server as well, "),Zr=a("code"),wf=o("x"),kf=o(" forced push his branch to the remote server. ("),hl=a("strong"),Cf=o("Note:"),Of=o(" You can push without "),eo=a("code"),Df=o("--force"),If=o(" if the origin branch cannot fast-forward merge your local branch)"),xf=d(),Me=a("p"),Pf=o("While "),to=a("code"),Sf=o("y"),Tf=o(" on the other hand, did not know about the "),ao=a("code"),Gf=o("rebase"),Nf=o(", so when "),so=a("code"),Af=o("y"),Hf=o(" pulled the code, it ended up with a messed up merged of a messed up git history:"),Mf=d(),ul=a("p"),yt=a("span"),ro=a("picture"),fl=a("source"),Ee=a("img"),Rf=d(),wt=a("p"),qf=o("In most cases, there would be a merge conflict, because "),oo=a("code"),Lf=o("x"),Uf=o(" and "),io=a("code"),zf=o("y"),Vf=o("'s branch would have made changes on the same file."),$f=d(),Re=a("p"),Yf=o("So, the correct way, if the rebase is necessary, is to notify "),lo=a("code"),Ff=o("y"),Wf=o(" about the rebase, so that "),co=a("code"),Bf=o("y"),jf=o(" can "),no=a("code"),Kf=o("git reset --hard"),Qf=o(" his branch to the remote branch."),Jf=d(),_l=a("p"),kt=a("span"),po=a("picture"),ml=a("source"),ye=a("img"),Xf=d(),z=a("p"),Zf=o("If unfortunately, at the same time, "),ho=a("code"),e_=o("y"),t_=o(" has made more commits to his local branch, he would have to "),uo=a("code"),a_=o("git rebase"),s_=o(" the new changes onto the remote branch, or "),fo=a("code"),r_=o("git cherry-pick"),o_=o(" the new changes after the "),_o=a("code"),i_=o("git reset --hard"),l_=o("."),c_=d(),Ct=a("p"),n_=o("In the companies that I have worked with, forbidden a "),mo=a("code"),d_=o("rebase"),p_=o(" on a common branch, especially the "),go=a("code"),h_=o("master"),u_=o(" branch."),cc=d(),Ht=a("section"),gl=a("h2"),Sa=a("a"),f_=o("git log"),__=d(),vl=a("p"),m_=o("The go-to command to look at your git history. There's a few options that is worth mentioning, that allow us to search through the sea of commits:"),nc=d(),Mt=a("section"),bl=a("h3"),Ta=a("a"),g_=o("--since, --after, --until, --before"),v_=d(),El=a("p"),b_=o("You can filter out commits within a specific timeframe"),dc=d(),Rt=a("section"),yl=a("h3"),Ga=a("a"),E_=o("--grep"),y_=d(),wl=a("p"),w_=o("You can filter out commits based on commit message"),pc=d(),qt=a("section"),kl=a("h3"),Na=a("a"),k_=o("--invert-grep"),C_=d(),vo=a("p"),O_=o("You can filter out commits that does not match the "),bo=a("code"),D_=o("--grep"),hc=d(),Lt=a("section"),Cl=a("h3"),Aa=a("a"),I_=o("--all-match"),x_=d(),we=a("p"),Eo=a("code"),P_=o("--grep"),S_=o(" is a "),yo=a("code"),T_=o("OR"),G_=o(" filter, "),wo=a("code"),N_=o("--all-match"),A_=o(" make it a "),ko=a("code"),H_=o("AND"),M_=o(" filter"),uc=d(),Ut=a("section"),Ol=a("h3"),Ha=a("a"),R_=o("--min-parents, --max-parents, --merges, --no-merges"),q_=d(),Ot=a("p"),L_=o("You can specify commits with the number of parents. A simple merge commit has 2 parent, so "),Co=a("code"),U_=o("--merge"),z_=o(" is equivalent to "),Oo=a("code"),V_=o("--min-parents=2"),$_=o("."),fc=d(),zt=a("section"),Dl=a("h3"),Ma=a("a"),Y_=o("--first-parent"),F_=d(),Ra=a("p"),W_=o("You can follow only the first parent commit upon seeing a merge commit. This is especially useful when you have merged of branches in, "),Do=a("code"),B_=o("--first-parent"),j_=o(" allow you to filter out only the merge commit and the commit you have made on the current branch."),_c=d(),Vt=a("section"),Il=a("h2"),qa=a("a"),K_=o("git reflog"),Q_=d(),qe=a("p"),J_=o("The reference log shows you all the "),Io=a("code"),X_=o("HEAD"),Z_=o(" position you have been to. This is especially useful when you have "),xo=a("code"),em=o("reset --hard"),tm=o(" or "),Po=a("code"),am=o("rebase"),sm=o(", you can still find back the commit reference that you were at previously, so you can recover them."),mc=d(),w=a("section"),xl=a("h2"),La=a("a"),rm=o("git bisect"),om=d(),Pl=a("p"),im=o("This is a useful command that I am looking forward to use it."),lm=d(),Ua=a("p"),cm=o("Often times when you noticed something has changed / break / less optimised, yet you do not know when this change was introduced into your repository. "),So=a("code"),nm=o("git bisect"),dm=o(" allows you to do binary search on the history, so that you can quickly pin down the commit where the change was introduced."),pm=d(),To=a("div"),hm=d(),N=a("p"),um=o("Once you've specified at least one "),Go=a("code"),fm=o("bad"),_m=o(" and one "),No=a("code"),mm=o("good"),gm=o(" commit, "),Ao=a("code"),vm=o("git bisect"),bm=o(" will find and checkout to a commit in the middle of that range between "),Ho=a("code"),Em=o("bad"),ym=o(" and "),Mo=a("code"),wm=o("good"),km=o(" and greets you with:"),Cm=d(),Ro=a("div"),Om=d(),Dt=a("p"),Dm=o("You can know test / verify / profile your code, and specify whether the current commit is a "),qo=a("code"),Im=o("good"),xm=o(" commit or a "),Lo=a("code"),Pm=o("bad"),Sm=o(" commit:"),Tm=d(),Uo=a("div"),Gm=d(),za=a("p"),Nm=o("Continue doing it until eventually there's no more commit to inspect. "),zo=a("code"),Am=o("git bisect"),Hm=o(" will print out the description of the first bad commit."),gc=d(),P=a("section"),Sl=a("h2"),Va=a("a"),Mm=o("Summary"),Rm=d(),Tl=a("p"),qm=o("We've gone through the following git commands:"),Lm=d(),C=a("ul"),Gl=a("li"),Um=o("git merge"),zm=d(),Nl=a("li"),Vm=o("git reset"),$m=d(),Al=a("li"),Ym=o("git cherry-pick"),Fm=d(),Hl=a("li"),Wm=o("git revert"),Bm=d(),Ml=a("li"),jm=o("git rebase"),Km=d(),Rl=a("li"),Qm=o("git log"),Jm=d(),ql=a("li"),Xm=o("git reflog"),Zm=d(),Ll=a("li"),eg=o("git bisect"),tg=d(),$a=a("p"),ag=o("Hopefully we are now "),Vo=a("code"),sg=o("git gudder"),rg=o(" than before!"),og=d(),ig=a("hr"),lg=d(),$o=a("p"),cg=o("Related topic: "),Yo=a("a"),ng=o("Git commits went missing after a rebase"),this.h()},l(n){w3(E.$$.fragment,n),xe=p(n),V=s(n,"P",{});var h=r(V);la=i(h,"This week in React Knowledgeable, I did a sharing on Git commands."),h.forEach(t),k=p(n),O=s(n,"P",{});var Fo=r(O);Wa=i(Fo,"The title of the talk was called "),ai=s(Fo,"STRONG",{});var tv=r(ai);qc=i(tv,'"Git Gudder"'),tv.forEach(t),Lc=i(Fo,', because almost a year ago I did a lightning sharing on "Git Gud", '),si=s(Fo,"EM",{});var av=r(si);Uc=i(av,"(Get Good)"),av.forEach(t),zc=i(Fo,', this follow up sharing used the comparative of "Git Gud", therefore, "Git Gudder".'),Fo.forEach(t),Yl=p(n),Ba=s(n,"BLOCKQUOTE",{});var sv=r(Ba);ri=s(sv,"P",{});var rv=r(ri);Vc=i(rv,'Will there be a "Git Guddest"? \u{1F914}'),rv.forEach(t),sv.forEach(t),Fl=p(n),Pt=s(n,"SECTION",{});var bc=r(Pt);oi=s(bc,"H2",{});var ov=r(oi);ca=s(ov,"A",{href:!0,id:!0});var iv=r(ca);$c=i(iv,"Disclaimer"),iv.forEach(t),ov.forEach(t),Yc=p(bc),na=s(bc,"P",{});var Ec=r(na);Fc=i(Ec,"I am by no means a Git master or anywhere near mastering Git. I do google or "),da=s(Ec,"A",{href:!0,rel:!0});var lv=r(da);Wc=i(lv,"refer to the docs"),lv.forEach(t),Bc=i(Ec," whenever I am unsure of the commands. In this talk, I listed out all the common history manipulation commands Git provides. I hoped that, with it, we are aware of what is available in our toolbox. So, we can look for it whenever we need it."),Ec.forEach(t),bc.forEach(t),Wl=p(n),St=s(n,"SECTION",{});var yc=r(St);ii=s(yc,"H2",{});var cv=r(ii);pa=s(cv,"A",{href:!0,id:!0});var nv=r(pa);jc=i(nv,"git merge"),nv.forEach(t),cv.forEach(t),Kc=p(yc),Pe=s(yc,"P",{});var $t=r(Pe);Qc=i($t,"There's 2 kind of "),ja=s($t,"CODE",{class:!0});var dv=r(ja);Jc=i(dv,"git merge"),dv.forEach(t),Xc=i($t,", the "),li=s($t,"STRONG",{});var pv=r(li);Zc=i(pv,"fast-forward"),pv.forEach(t),en=i($t," and "),ci=s($t,"STRONG",{});var hv=r(ci);tn=i(hv,"non fast-forward"),hv.forEach(t),an=i($t,"."),$t.forEach(t),yc.forEach(t),Bl=p(n),$=s(n,"SECTION",{});var Yt=r($);ni=s(Yt,"H3",{});var uv=r(ni);ha=s(uv,"A",{href:!0,id:!0});var fv=r(ha);sn=i(fv,"Fast-forward merge"),fv.forEach(t),uv.forEach(t),rn=p(Yt),Be=s(Yt,"P",{});var Wo=r(Be);on=i(Wo,"Merging "),Ka=s(Wo,"CODE",{class:!0});var _v=r(Ka);ln=i(_v,"master"),_v.forEach(t),cn=i(Wo," into "),Qa=s(Wo,"CODE",{class:!0});var mv=r(Qa);nn=i(mv,"branch A"),mv.forEach(t),dn=i(Wo,":"),Wo.forEach(t),pn=p(Yt),di=s(Yt,"P",{});var gv=r(di);je=s(gv,"SPAN",{style:!0});var vv=r(je);Y=s(vv,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),vv.forEach(t),gv.forEach(t),hn=p(Yt),Ja=s(Yt,"DIV",{class:!0});var bv=r(Ja);un=i(bv,"Fast-forward merge"),bv.forEach(t),Yt.forEach(t),jl=p(n),A=s(n,"SECTION",{});var Ue=r(A);pi=s(Ue,"H3",{});var Ev=r(pi);ua=s(Ev,"A",{href:!0,id:!0});var yv=r(ua);fn=i(yv,"Non Fast-forward merge"),yv.forEach(t),Ev.forEach(t),_n=p(Ue),Ke=s(Ue,"P",{});var Bo=r(Ke);mn=i(Bo,"Merging "),Xa=s(Bo,"CODE",{class:!0});var wv=r(Xa);gn=i(wv,"master"),wv.forEach(t),vn=i(Bo," into "),Za=s(Bo,"CODE",{class:!0});var kv=r(Za);bn=i(kv,"branch A"),kv.forEach(t),En=i(Bo,":"),Bo.forEach(t),yn=p(Ue),hi=s(Ue,"P",{});var Cv=r(hi);Qe=s(Cv,"SPAN",{style:!0});var Ov=r(Qe);F=s(Ov,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),Ov.forEach(t),Cv.forEach(t),wn=p(Ue),es=s(Ue,"DIV",{class:!0});var Dv=r(es);kn=i(Dv,"Non fast-forward merge"),Dv.forEach(t),Cn=p(Ue),ui=s(Ue,"P",{});var Iv=r(ui);On=i(Iv,"Non fast-forward merge will create an extra commit that merges 2 branches."),Iv.forEach(t),Ue.forEach(t),Kl=p(n),W=s(n,"SECTION",{});var Ft=r(W);fi=s(Ft,"H3",{});var xv=r(fi);fa=s(xv,"A",{href:!0,id:!0});var Pv=r(fa);Dn=i(Pv,"git pull"),Pv.forEach(t),xv.forEach(t),In=p(Ft),Se=s(Ft,"P",{});var Wt=r(Se);xn=i(Wt,"By default, "),ts=s(Wt,"CODE",{class:!0});var Sv=r(ts);Pn=i(Sv,"git pull"),Sv.forEach(t),Sn=i(Wt," is "),as=s(Wt,"CODE",{class:!0});var Tv=r(as);Tn=i(Tv,"git fetch origin branch"),Tv.forEach(t),Gn=i(Wt," + "),ss=s(Wt,"CODE",{class:!0});var Gv=r(ss);Nn=i(Gv,"git merge origin/branch"),Gv.forEach(t),An=i(Wt,"."),Wt.forEach(t),Hn=p(Ft),_i=s(Ft,"P",{});var Nv=r(_i);Je=s(Nv,"SPAN",{style:!0});var Av=r(Je);B=s(Av,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),Av.forEach(t),Nv.forEach(t),Mn=p(Ft),rs=s(Ft,"DIV",{class:!0});var Hv=r(rs);Rn=i(Hv,"git pull"),Hv.forEach(t),Ft.forEach(t),Ql=p(n),H=s(n,"SECTION",{});var ze=r(H);mi=s(ze,"H2",{});var Mv=r(mi);_a=s(Mv,"A",{href:!0,id:!0});var Rv=r(_a);qn=i(Rv,"git reset"),Rv.forEach(t),Mv.forEach(t),Ln=p(ze),os=s(ze,"P",{});var dg=r(os);is=s(dg,"CODE",{class:!0});var qv=r(is);Un=i(qv,"git reset --hard"),qv.forEach(t),zn=i(dg," allows you to change the reference of where your branch is pointing at."),dg.forEach(t),Vn=p(ze),Le=s(ze,"P",{});var Ya=r(Le);ls=s(Ya,"CODE",{class:!0});var Lv=r(ls);$n=i(Lv,"git checkout branch-b"),Lv.forEach(t),Yn=i(Ya,", "),cs=s(Ya,"CODE",{class:!0});var Uv=r(cs);Fn=i(Uv,"git reset --hard branch-a"),Uv.forEach(t),Wn=i(Ya,", "),ns=s(Ya,"CODE",{class:!0});var zv=r(ns);Bn=i(zv,"git reset --hard #d"),zv.forEach(t),jn=i(Ya,":"),Ya.forEach(t),Kn=p(ze),gi=s(ze,"P",{});var Vv=r(gi);Xe=s(Vv,"SPAN",{style:!0});var $v=r(Xe);j=s($v,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),$v.forEach(t),Vv.forEach(t),Qn=p(ze),ds=s(ze,"DIV",{class:!0});var Yv=r(ds);Jn=i(Yv,"git reset"),Yv.forEach(t),ze.forEach(t),Jl=p(n),M=s(n,"SECTION",{});var Ve=r(M);vi=s(Ve,"H2",{});var Fv=r(vi);ma=s(Fv,"A",{href:!0,id:!0});var Wv=r(ma);Xn=i(Wv,"git cherry-pick"),Wv.forEach(t),Fv.forEach(t),Zn=p(Ve),bi=s(Ve,"P",{});var Bv=r(bi);ed=i(Bv,"cherry-pick allows you to pick commits from some other branches, tags, or refs."),Bv.forEach(t),td=p(Ve),Tt=s(Ve,"P",{});var Ul=r(Tt);ps=s(Ul,"CODE",{class:!0});var jv=r(ps);ad=i(jv,"git checkout branch-b"),jv.forEach(t),sd=i(Ul,", "),hs=s(Ul,"CODE",{class:!0});var Kv=r(hs);rd=i(Kv,"git cherry-pick branch-a"),Kv.forEach(t),od=i(Ul,":"),Ul.forEach(t),id=p(Ve),Ei=s(Ve,"P",{});var Qv=r(Ei);Ze=s(Qv,"SPAN",{style:!0});var Jv=r(Ze);K=s(Jv,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),Jv.forEach(t),Qv.forEach(t),ld=p(Ve),us=s(Ve,"DIV",{class:!0});var Xv=r(us);cd=i(Xv,"git cherry-pick"),Xv.forEach(t),Ve.forEach(t),Xl=p(n),_=s(n,"SECTION",{});var v=r(_);yi=s(v,"H2",{});var Zv=r(yi);ga=s(Zv,"A",{href:!0,id:!0});var e1=r(ga);nd=i(e1,"git revert"),e1.forEach(t),Zv.forEach(t),dd=p(v),fs=s(v,"P",{});var pg=r(fs);_s=s(pg,"CODE",{class:!0});var t1=r(_s);pd=i(t1,"git revert"),t1.forEach(t),hd=i(pg," creates a new commit that reverses the change of the commit that you are reverting."),pg.forEach(t),ud=p(v),q=s(v,"P",{});var $e=r(q);fd=i($e,"For example, if you accidentally merged "),ms=s($e,"CODE",{class:!0});var a1=r(ms);_d=i(a1,"feat/a"),a1.forEach(t),md=i($e," into "),gs=s($e,"CODE",{class:!0});var s1=r(gs);gd=i(s1,"master"),s1.forEach(t),vd=i($e," branch, you can "),vs=s($e,"CODE",{class:!0});var r1=r(vs);bd=i(r1,"git checkout master"),r1.forEach(t),Ed=i($e,", "),bs=s($e,"CODE",{class:!0});var o1=r(bs);yd=i(o1,"git revert #1"),o1.forEach(t),wd=i($e,":"),$e.forEach(t),kd=p(v),wi=s(v,"P",{});var i1=r(wi);et=s(i1,"SPAN",{style:!0});var l1=r(et);Q=s(l1,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),l1.forEach(t),i1.forEach(t),Cd=p(v),Es=s(v,"DIV",{class:!0});var c1=r(Es);Od=i(c1,"git revert"),c1.forEach(t),Dd=p(v),va=s(v,"P",{});var wc=r(va);Id=i(wc,"If you know merge master into your "),ys=s(wc,"CODE",{class:!0});var n1=r(ys);xd=i(n1,"feat/a"),n1.forEach(t),Pd=i(wc," branch, you would noticed that all the changes in the branch is gone, because the merge is a fast-forward merge, that includes the revert commit made in the branch:"),wc.forEach(t),Sd=p(v),ki=s(v,"P",{});var d1=r(ki);tt=s(d1,"SPAN",{style:!0});var p1=r(tt);J=s(p1,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),p1.forEach(t),d1.forEach(t),Td=p(v),ws=s(v,"DIV",{class:!0});var h1=r(ws);Gd=i(h1,"Merging `master` into `feat/a`"),h1.forEach(t),Nd=p(v),Te=s(v,"P",{});var Bt=r(Te);Ad=i(Bt,"If you want to recover the changes made in "),ks=s(Bt,"CODE",{class:!0});var u1=r(ks);Hd=i(u1,"feat/a"),u1.forEach(t),Md=i(Bt,", you can "),Cs=s(Bt,"CODE",{class:!0});var f1=r(Cs);Rd=i(f1,"revert"),f1.forEach(t),qd=i(Bt," the "),Os=s(Bt,"CODE",{class:!0});var _1=r(Os);Ld=i(_1,"revert"),_1.forEach(t),Ud=i(Bt,":"),Bt.forEach(t),zd=p(v),Ds=s(v,"P",{});var hg=r(Ds);Is=s(hg,"CODE",{class:!0});var m1=r(Is);Vd=i(m1,"git revert ~#1"),m1.forEach(t),$d=i(hg,":"),hg.forEach(t),Yd=p(v),Ci=s(v,"P",{});var g1=r(Ci);at=s(g1,"SPAN",{style:!0});var v1=r(at);X=s(v1,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),v1.forEach(t),g1.forEach(t),Fd=p(v),xs=s(v,"DIV",{class:!0});var b1=r(xs);Wd=i(b1,"git revert the revert"),b1.forEach(t),Bd=p(v),T=s(v,"P",{});var ke=r(T);jd=i(ke,"Now, when you are ready to merge your "),Ps=s(ke,"CODE",{class:!0});var E1=r(Ps);Kd=i(E1,"feat/a"),E1.forEach(t),Qd=i(ke," branch into "),Ss=s(ke,"CODE",{class:!0});var y1=r(Ss);Jd=i(y1,"master"),y1.forEach(t),Xd=i(ke,", you get the all the changes in "),Ts=s(ke,"CODE",{class:!0});var w1=r(Ts);Zd=i(w1,"feat/a"),w1.forEach(t),ep=i(ke,", a commit that revert all that, and a commit that reverts the revert commit, which meant, you still have all the changes in "),Gs=s(ke,"CODE",{class:!0});var k1=r(Gs);tp=i(k1,"feat/a"),k1.forEach(t),ap=i(ke," in "),Ns=s(ke,"CODE",{class:!0});var C1=r(Ns);sp=i(C1,"master"),C1.forEach(t),rp=i(ke,":"),ke.forEach(t),op=p(v),Oi=s(v,"P",{});var O1=r(Oi);st=s(O1,"SPAN",{style:!0});var D1=r(st);Z=s(D1,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),D1.forEach(t),O1.forEach(t),ip=p(v),As=s(v,"DIV",{class:!0});var I1=r(As);lp=i(I1,"Merging changes back to master"),I1.forEach(t),v.forEach(t),Zl=p(n),f=s(n,"SECTION",{});var g=r(f);Di=s(g,"H2",{});var x1=r(Di);ba=s(x1,"A",{href:!0,id:!0});var P1=r(ba);cp=i(P1,"git rebase"),P1.forEach(t),x1.forEach(t),np=p(g),Hs=s(g,"P",{});var ug=r(Hs);Ms=s(ug,"CODE",{class:!0});var S1=r(Ms);dp=i(S1,"git rebase"),S1.forEach(t),pp=i(ug,' allows you to "move" commits to a different "base".'),ug.forEach(t),hp=p(g),I=s(g,"P",{});var R=r(I);up=i(R,"For example, you branched out "),Rs=s(R,"CODE",{class:!0});var T1=r(Rs);fp=i(T1,"branch-a"),T1.forEach(t),_p=i(R," from "),qs=s(R,"CODE",{class:!0});var G1=r(qs);mp=i(G1,"master"),G1.forEach(t),gp=i(R," a while ago, and "),Ls=s(R,"CODE",{class:!0});var N1=r(Ls);vp=i(N1,"master"),N1.forEach(t),bp=i(R," has made a few more commits. But if you merge your branch into master now, it would be a non fast-forward merge, creating an extra commit to the history. If you want a clean, one-line history, you can do a "),Us=s(R,"CODE",{class:!0});var A1=r(Us);Ep=i(A1,"rebase"),A1.forEach(t),yp=i(R,", replaying commits that you have made in "),zs=s(R,"CODE",{class:!0});var H1=r(zs);wp=i(H1,"branch-a"),H1.forEach(t),kp=i(R," on top of the latest "),Vs=s(R,"CODE",{class:!0});var M1=r(Vs);Cp=i(M1,"master"),M1.forEach(t),Op=i(R,"."),R.forEach(t),Dp=p(g),Gt=s(g,"P",{});var zl=r(Gt);$s=s(zl,"CODE",{class:!0});var R1=r($s);Ip=i(R1,"git checkout branch-a"),R1.forEach(t),xp=i(zl,", "),Ys=s(zl,"CODE",{class:!0});var q1=r(Ys);Pp=i(q1,"git rebase master"),q1.forEach(t),Sp=i(zl,":"),zl.forEach(t),Tp=p(g),Ii=s(g,"P",{});var L1=r(Ii);rt=s(L1,"SPAN",{style:!0});var U1=r(rt);ee=s(U1,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),U1.forEach(t),L1.forEach(t),Gp=p(g),Fs=s(g,"DIV",{class:!0});var z1=r(Fs);Np=i(z1,"git rebase"),z1.forEach(t),Ap=p(g),Ws=s(g,"P",{});var fg=r(Ws);Bs=s(fg,"CODE",{class:!0});var V1=r(Bs);Hp=i(V1,"git rebase"),V1.forEach(t),Mp=i(fg," does not have to be on top of the branch that you branched out, you can rebase to anywhere:"),fg.forEach(t),Rp=p(g),Nt=s(g,"P",{});var Vl=r(Nt);js=s(Vl,"CODE",{class:!0});var $1=r(js);qp=i($1,"git checkout branch-a"),$1.forEach(t),Lp=i(Vl,", "),Ks=s(Vl,"CODE",{class:!0});var Y1=r(Ks);Up=i(Y1,"git rebase --onto branch-b master branch-a"),Y1.forEach(t),zp=i(Vl,":"),Vl.forEach(t),Vp=p(g),xi=s(g,"P",{});var F1=r(xi);ot=s(F1,"SPAN",{style:!0});var W1=r(ot);te=s(W1,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),W1.forEach(t),F1.forEach(t),$p=p(g),Qs=s(g,"DIV",{class:!0});var B1=r(Qs);Yp=i(B1,"git rebase"),B1.forEach(t),Fp=p(g),Pi=s(g,"P",{});var j1=r(Pi);Wp=i(j1,"There's 3 reference point you should know when doing a git rebase:"),j1.forEach(t),Bp=p(g),it=s(g,"UL",{});var jo=r(it);Si=s(jo,"LI",{});var K1=r(Si);Js=s(K1,"CODE",{class:!0});var Q1=r(Js);jp=i(Q1,"<new base>"),Q1.forEach(t),K1.forEach(t),Kp=p(jo),Ti=s(jo,"LI",{});var J1=r(Ti);Xs=s(J1,"CODE",{class:!0});var X1=r(Xs);Qp=i(X1,"<upstream>"),X1.forEach(t),J1.forEach(t),Jp=p(jo),Gi=s(jo,"LI",{});var Z1=r(Gi);Zs=s(Z1,"CODE",{class:!0});var eb=r(Zs);Xp=i(eb,"<branch>"),eb.forEach(t),Z1.forEach(t),jo.forEach(t),Zp=p(g),Ni=s(g,"P",{});var tb=r(Ni);lt=s(tb,"SPAN",{style:!0});var ab=r(lt);er=s(ab,"PICTURE",{});var _g=r(er);Ai=s(_g,"SOURCE",{type:!0,srcset:!0}),ae=s(_g,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),_g.forEach(t),ab.forEach(t),tb.forEach(t),eh=p(g),tr=s(g,"DIV",{class:!0});var sb=r(tr);th=i(sb,"git rebase"),sb.forEach(t),ah=p(g),Hi=s(g,"P",{});var rb=r(Hi);sh=i(rb,"Here are a few things you should know:"),rb.forEach(t),rh=p(g),L=s(g,"UL",{});var Ye=r(L);se=s(Ye,"LI",{});var It=r(se);ar=s(It,"CODE",{class:!0});var ob=r(ar);oh=i(ob,"git rebase"),ob.forEach(t),ih=i(It," will replay the commits from "),sr=s(It,"CODE",{class:!0});var ib=r(sr);lh=i(ib,"<upstream>"),ib.forEach(t),ch=i(It," to "),rr=s(It,"CODE",{class:!0});var lb=r(rr);nh=i(lb,"<branch>"),lb.forEach(t),dh=i(It," onto "),or=s(It,"CODE",{class:!0});var cb=r(or);ph=i(cb,"<new base>"),cb.forEach(t),hh=i(It,"."),It.forEach(t),uh=p(Ye),G=s(Ye,"LI",{});var Ce=r(G);fh=i(Ce,"If you specify "),ir=s(Ce,"CODE",{class:!0});var nb=r(ir);_h=i(nb,"<upstream>"),nb.forEach(t),mh=i(Ce," as a branch name, "),lr=s(Ce,"CODE",{class:!0});var db=r(lr);gh=i(db,"git rebase"),db.forEach(t),vh=i(Ce," will replay commits from the common ancestor of "),cr=s(Ce,"CODE",{class:!0});var pb=r(cr);bh=i(pb,"<upstream>"),pb.forEach(t),Eh=i(Ce," and "),nr=s(Ce,"CODE",{class:!0});var hb=r(nr);yh=i(hb,"<branch>"),hb.forEach(t),wh=i(Ce," to "),dr=s(Ce,"CODE",{class:!0});var ub=r(dr);kh=i(ub,"<branch>"),ub.forEach(t),Ch=i(Ce,"."),Ce.forEach(t),Oh=p(Ye),ct=s(Ye,"LI",{});var Ko=r(ct);Dh=i(Ko,"If you do not specify "),pr=s(Ko,"CODE",{class:!0});var fb=r(pr);Ih=i(fb,"<branch>"),fb.forEach(t),xh=i(Ko,", the default is the "),hr=s(Ko,"CODE",{class:!0});var _b=r(hr);Ph=i(_b,"HEAD"),_b.forEach(t),Sh=i(Ko,", current commit you are at now."),Ko.forEach(t),Th=p(Ye),U=s(Ye,"LI",{});var Fe=r(U);Gh=i(Fe,"If you do not specify "),ur=s(Fe,"CODE",{class:!0});var mb=r(ur);Nh=i(mb,"--onto <new base>"),mb.forEach(t),Ah=i(Fe,", the new base will be default to "),fr=s(Fe,"CODE",{class:!0});var gb=r(fr);Hh=i(gb,"<upsttream>"),gb.forEach(t),Mh=i(Fe,", that's why "),_r=s(Fe,"CODE",{class:!0});var vb=r(_r);Rh=i(vb,"git rebase master"),vb.forEach(t),qh=i(Fe," is equivalent to "),mr=s(Fe,"CODE",{class:!0});var bb=r(mr);Lh=i(bb,"git rebase --onto master master"),bb.forEach(t),Uh=i(Fe,"."),Fe.forEach(t),zh=p(Ye),Ge=s(Ye,"LI",{});var jt=r(Ge);Vh=i(jt,"If you do not specify "),gr=s(jt,"CODE",{class:!0});var Eb=r(gr);$h=i(Eb,"<upstream>"),Eb.forEach(t),Yh=i(jt,", it will be the upstream of the current branch. So "),vr=s(jt,"CODE",{class:!0});var yb=r(vr);Fh=i(yb,"git rebase"),yb.forEach(t),Wh=i(jt," is equivalent to "),br=s(jt,"CODE",{class:!0});var wb=r(br);Bh=i(wb,"git rebase <origin/current-branch>"),wb.forEach(t),jh=i(jt,"."),jt.forEach(t),Ye.forEach(t),g.forEach(t),ec=p(n),x=s(n,"SECTION",{});var Oe=r(x);Mi=s(Oe,"H3",{});var kb=r(Mi);Ea=s(kb,"A",{href:!0,id:!0});var Cb=r(Ea);Kh=i(Cb,"git rebase --interactive"),Cb.forEach(t),kb.forEach(t),Qh=p(Oe),Er=s(Oe,"P",{});var mg=r(Er);yr=s(mg,"CODE",{class:!0});var Ob=r(yr);Jh=i(Ob,"git rebase"),Ob.forEach(t),Xh=i(mg," has an interactive mode, which allows you to specify instructions while replaying commits during a rebase."),mg.forEach(t),Zh=p(Oe),Ri=s(Oe,"P",{});var Db=r(Ri);nt=s(Db,"SPAN",{style:!0});var Ib=r(nt);wr=s(Ib,"PICTURE",{});var gg=r(wr);qi=s(gg,"SOURCE",{type:!0,srcset:!0}),re=s(gg,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),gg.forEach(t),Ib.forEach(t),Db.forEach(t),eu=p(Oe),kr=s(Oe,"DIV",{class:!0});var xb=r(kr);tu=i(xb,"git rebase interactive"),xb.forEach(t),au=p(Oe),ya=s(Oe,"P",{});var kc=r(ya);su=i(kc,"When you run "),Cr=s(kc,"CODE",{class:!0});var Pb=r(Cr);ru=i(Pb,"git rebase --interactive"),Pb.forEach(t),ou=i(kc,", git will prompt you with an editor to edit the instructions. In it, you will see a list of commits that will be replayed:"),kc.forEach(t),iu=p(Oe),Or=s(Oe,"DIV",{class:!0});var M3=r(Or);M3.forEach(t),Oe.forEach(t),tc=p(n),oe=s(n,"SECTION",{});var Kt=r(oe);Li=s(Kt,"H4",{});var Sb=r(Li);wa=s(Sb,"A",{href:!0,id:!0});var Tb=r(wa);lu=i(Tb,"pick"),Tb.forEach(t),Sb.forEach(t),cu=p(Kt),Ui=s(Kt,"P",{});var Gb=r(Ui);nu=i(Gb,"The default instruction. Will just use the commit while replaying:"),Gb.forEach(t),du=p(Kt),zi=s(Kt,"P",{});var Nb=r(zi);dt=s(Nb,"SPAN",{style:!0});var Ab=r(dt);Dr=s(Ab,"PICTURE",{});var vg=r(Dr);Vi=s(vg,"SOURCE",{type:!0,srcset:!0}),ie=s(vg,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),vg.forEach(t),Ab.forEach(t),Nb.forEach(t),pu=p(Kt),Ir=s(Kt,"DIV",{class:!0});var R3=r(Ir);R3.forEach(t),Kt.forEach(t),ac=p(n),le=s(n,"SECTION",{});var Qt=r(le);$i=s(Qt,"H4",{});var Hb=r($i);ka=s(Hb,"A",{href:!0,id:!0});var Mb=r(ka);hu=i(Mb,"drop"),Mb.forEach(t),Hb.forEach(t),uu=p(Qt),Yi=s(Qt,"P",{});var Rb=r(Yi);fu=i(Rb,"Drop will omit the commit:"),Rb.forEach(t),_u=p(Qt),Fi=s(Qt,"P",{});var qb=r(Fi);pt=s(qb,"SPAN",{style:!0});var Lb=r(pt);xr=s(Lb,"PICTURE",{});var bg=r(xr);Wi=s(bg,"SOURCE",{type:!0,srcset:!0}),ce=s(bg,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),bg.forEach(t),Lb.forEach(t),qb.forEach(t),mu=p(Qt),Pr=s(Qt,"DIV",{class:!0});var q3=r(Pr);q3.forEach(t),Qt.forEach(t),sc=p(n),ne=s(n,"SECTION",{});var Jt=r(ne);Bi=s(Jt,"H4",{});var Ub=r(Bi);Ca=s(Ub,"A",{href:!0,id:!0});var zb=r(Ca);gu=i(zb,"squash & fixup"),zb.forEach(t),Ub.forEach(t),vu=p(Jt),Ne=s(Jt,"P",{});var Xt=r(Ne);bu=i(Xt,"Squash & Fixup will combine your commit with the previous commit, the only difference is that with "),Sr=s(Xt,"CODE",{class:!0});var Vb=r(Sr);Eu=i(Vb,"squash"),Vb.forEach(t),yu=i(Xt,", git will prompt you to edit the commit message of the combined commit, while "),Tr=s(Xt,"CODE",{class:!0});var $b=r(Tr);wu=i($b,"fixup"),$b.forEach(t),ku=i(Xt," will drop the commit of the "),Gr=s(Xt,"CODE",{class:!0});var Yb=r(Gr);Cu=i(Yb,"fixup"),Yb.forEach(t),Ou=i(Xt,"ed commit."),Xt.forEach(t),Du=p(Jt),ji=s(Jt,"P",{});var Fb=r(ji);ht=s(Fb,"SPAN",{style:!0});var Wb=r(ht);Nr=s(Wb,"PICTURE",{});var Eg=r(Nr);Ki=s(Eg,"SOURCE",{type:!0,srcset:!0}),de=s(Eg,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),Eg.forEach(t),Wb.forEach(t),Fb.forEach(t),Iu=p(Jt),Ar=s(Jt,"DIV",{class:!0});var L3=r(Ar);L3.forEach(t),Jt.forEach(t),rc=p(n),pe=s(n,"SECTION",{});var Zt=r(pe);Qi=s(Zt,"H4",{});var Bb=r(Qi);Oa=s(Bb,"A",{href:!0,id:!0});var jb=r(Oa);xu=i(jb,"break"),jb.forEach(t),Bb.forEach(t),Pu=p(Zt),Da=s(Zt,"P",{});var Cc=r(Da);Su=i(Cc,"Pause the rebase. You can do add more commits here if you want. When you are done, make sure that your workspace and stage is clean, run "),Hr=s(Cc,"CODE",{class:!0});var Kb=r(Hr);Tu=i(Kb,"git rebase --continue"),Kb.forEach(t),Gu=i(Cc," to continue."),Cc.forEach(t),Nu=p(Zt),Ji=s(Zt,"P",{});var Qb=r(Ji);ut=s(Qb,"SPAN",{style:!0});var Jb=r(ut);Mr=s(Jb,"PICTURE",{});var yg=r(Mr);Xi=s(yg,"SOURCE",{type:!0,srcset:!0}),he=s(yg,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),yg.forEach(t),Jb.forEach(t),Qb.forEach(t),Au=p(Zt),Rr=s(Zt,"DIV",{class:!0});var U3=r(Rr);U3.forEach(t),Zt.forEach(t),oc=p(n),ue=s(n,"SECTION",{});var ea=r(ue);Zi=s(ea,"H4",{});var Xb=r(Zi);Ia=s(Xb,"A",{href:!0,id:!0});var Zb=r(Ia);Hu=i(Zb,"edit"),Zb.forEach(t),Xb.forEach(t),Mu=p(ea),el=s(ea,"P",{});var e2=r(el);Ru=i(e2,"Pause the rebase at the commit that you are editing, before the commit has been commited. You can add, remove or ammend your files before continue the rebase process."),e2.forEach(t),qu=p(ea),tl=s(ea,"P",{});var t2=r(tl);ft=s(t2,"SPAN",{style:!0});var a2=r(ft);qr=s(a2,"PICTURE",{});var wg=r(qr);al=s(wg,"SOURCE",{type:!0,srcset:!0}),fe=s(wg,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),wg.forEach(t),a2.forEach(t),t2.forEach(t),Lu=p(ea),Lr=s(ea,"DIV",{class:!0});var z3=r(Lr);z3.forEach(t),ea.forEach(t),ic=p(n),_e=s(n,"SECTION",{});var ta=r(_e);sl=s(ta,"H3",{});var s2=r(sl);xa=s(s2,"A",{href:!0,id:!0});var r2=r(xa);Uu=i(r2,"git pull --rebase"),r2.forEach(t),s2.forEach(t),zu=p(ta),_t=s(ta,"P",{});var Qo=r(_t);Vu=i(Qo,"There's a rebase mode for git pull, where it will be "),Ur=s(Qo,"CODE",{class:!0});var o2=r(Ur);$u=i(o2,"git fetch origin branch"),o2.forEach(t),Yu=i(Qo," + "),zr=s(Qo,"CODE",{class:!0});var i2=r(zr);Fu=i(i2,"git rebase origin/branch"),i2.forEach(t),Wu=i(Qo,"."),Qo.forEach(t),Bu=p(ta),rl=s(ta,"P",{});var l2=r(rl);mt=s(l2,"SPAN",{style:!0});var c2=r(mt);me=s(c2,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),c2.forEach(t),l2.forEach(t),ju=p(ta),Vr=s(ta,"DIV",{class:!0});var n2=r(Vr);Ku=i(n2,"git pull --rebase"),n2.forEach(t),ta.forEach(t),lc=p(n),m=s(n,"SECTION",{});var b=r(m);ol=s(b,"H3",{});var d2=r(ol);Pa=s(d2,"A",{href:!0,id:!0});var p2=r(Pa);Qu=i(p2,"git rebase a shared branch"),p2.forEach(t),d2.forEach(t),Ju=p(b),Ae=s(b,"P",{});var aa=r(Ae);Xu=i(aa,"Say "),$r=s(aa,"CODE",{class:!0});var h2=r($r);Zu=i(h2,"x"),h2.forEach(t),ef=i(aa," and "),Yr=s(aa,"CODE",{class:!0});var u2=r(Yr);tf=i(u2,"y"),u2.forEach(t),af=i(aa," are working on the "),Fr=s(aa,"CODE",{class:!0});var f2=r(Fr);sf=i(f2,"feat/a"),f2.forEach(t),rf=i(aa," branch."),aa.forEach(t),of=p(b),il=s(b,"P",{});var _2=r(il);gt=s(_2,"SPAN",{style:!0});var m2=r(gt);Wr=s(m2,"PICTURE",{});var kg=r(Wr);ll=s(kg,"SOURCE",{type:!0,srcset:!0}),ge=s(kg,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),kg.forEach(t),m2.forEach(t),_2.forEach(t),lf=p(b),At=s(b,"P",{});var $l=r(At);Br=s($l,"CODE",{class:!0});var g2=r(Br);cf=i(g2,"x"),g2.forEach(t),nf=i($l," decided to rebase the "),jr=s($l,"CODE",{class:!0});var v2=r(jr);df=i(v2,"feat/a"),v2.forEach(t),pf=i($l," branch to squash and drop some commits:"),$l.forEach(t),hf=p(b),cl=s(b,"P",{});var b2=r(cl);vt=s(b2,"SPAN",{style:!0});var E2=r(vt);Kr=s(E2,"PICTURE",{});var Cg=r(Kr);nl=s(Cg,"SOURCE",{type:!0,srcset:!0}),ve=s(Cg,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),Cg.forEach(t),E2.forEach(t),b2.forEach(t),uf=p(b),bt=s(b,"P",{});var Jo=r(bt);ff=i(Jo,"While "),Qr=s(Jo,"CODE",{class:!0});var y2=r(Qr);_f=i(y2,"x"),y2.forEach(t),mf=i(Jo," had done that, that was just a part of the whole picture. Because the "),Jr=s(Jo,"CODE",{class:!0});var w2=r(Jr);gf=i(w2,"rebase"),w2.forEach(t),vf=i(Jo," on his local machine changed the git history on his local copy only."),Jo.forEach(t),bf=p(b),dl=s(b,"P",{});var k2=r(dl);Et=s(k2,"SPAN",{style:!0});var C2=r(Et);Xr=s(C2,"PICTURE",{});var Og=r(Xr);pl=s(Og,"SOURCE",{type:!0,srcset:!0}),be=s(Og,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),Og.forEach(t),C2.forEach(t),k2.forEach(t),Ef=p(b),He=s(b,"P",{});var sa=r(He);yf=i(sa,"To make the change on the remote server as well, "),Zr=s(sa,"CODE",{class:!0});var O2=r(Zr);wf=i(O2,"x"),O2.forEach(t),kf=i(sa," forced push his branch to the remote server. ("),hl=s(sa,"STRONG",{});var D2=r(hl);Cf=i(D2,"Note:"),D2.forEach(t),Of=i(sa," You can push without "),eo=s(sa,"CODE",{class:!0});var I2=r(eo);Df=i(I2,"--force"),I2.forEach(t),If=i(sa," if the origin branch cannot fast-forward merge your local branch)"),sa.forEach(t),xf=p(b),Me=s(b,"P",{});var ra=r(Me);Pf=i(ra,"While "),to=s(ra,"CODE",{class:!0});var x2=r(to);Sf=i(x2,"y"),x2.forEach(t),Tf=i(ra," on the other hand, did not know about the "),ao=s(ra,"CODE",{class:!0});var P2=r(ao);Gf=i(P2,"rebase"),P2.forEach(t),Nf=i(ra,", so when "),so=s(ra,"CODE",{class:!0});var S2=r(so);Af=i(S2,"y"),S2.forEach(t),Hf=i(ra," pulled the code, it ended up with a messed up merged of a messed up git history:"),ra.forEach(t),Mf=p(b),ul=s(b,"P",{});var T2=r(ul);yt=s(T2,"SPAN",{style:!0});var G2=r(yt);ro=s(G2,"PICTURE",{});var Dg=r(ro);fl=s(Dg,"SOURCE",{type:!0,srcset:!0}),Ee=s(Dg,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),Dg.forEach(t),G2.forEach(t),T2.forEach(t),Rf=p(b),wt=s(b,"P",{});var Xo=r(wt);qf=i(Xo,"In most cases, there would be a merge conflict, because "),oo=s(Xo,"CODE",{class:!0});var N2=r(oo);Lf=i(N2,"x"),N2.forEach(t),Uf=i(Xo," and "),io=s(Xo,"CODE",{class:!0});var A2=r(io);zf=i(A2,"y"),A2.forEach(t),Vf=i(Xo,"'s branch would have made changes on the same file."),Xo.forEach(t),$f=p(b),Re=s(b,"P",{});var oa=r(Re);Yf=i(oa,"So, the correct way, if the rebase is necessary, is to notify "),lo=s(oa,"CODE",{class:!0});var H2=r(lo);Ff=i(H2,"y"),H2.forEach(t),Wf=i(oa," about the rebase, so that "),co=s(oa,"CODE",{class:!0});var M2=r(co);Bf=i(M2,"y"),M2.forEach(t),jf=i(oa," can "),no=s(oa,"CODE",{class:!0});var R2=r(no);Kf=i(R2,"git reset --hard"),R2.forEach(t),Qf=i(oa," his branch to the remote branch."),oa.forEach(t),Jf=p(b),_l=s(b,"P",{});var q2=r(_l);kt=s(q2,"SPAN",{style:!0});var L2=r(kt);po=s(L2,"PICTURE",{});var Ig=r(po);ml=s(Ig,"SOURCE",{type:!0,srcset:!0}),ye=s(Ig,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),Ig.forEach(t),L2.forEach(t),q2.forEach(t),Xf=p(b),z=s(b,"P",{});var We=r(z);Zf=i(We,"If unfortunately, at the same time, "),ho=s(We,"CODE",{class:!0});var U2=r(ho);e_=i(U2,"y"),U2.forEach(t),t_=i(We," has made more commits to his local branch, he would have to "),uo=s(We,"CODE",{class:!0});var z2=r(uo);a_=i(z2,"git rebase"),z2.forEach(t),s_=i(We," the new changes onto the remote branch, or "),fo=s(We,"CODE",{class:!0});var V2=r(fo);r_=i(V2,"git cherry-pick"),V2.forEach(t),o_=i(We," the new changes after the "),_o=s(We,"CODE",{class:!0});var $2=r(_o);i_=i($2,"git reset --hard"),$2.forEach(t),l_=i(We,"."),We.forEach(t),c_=p(b),Ct=s(b,"P",{});var Zo=r(Ct);n_=i(Zo,"In the companies that I have worked with, forbidden a "),mo=s(Zo,"CODE",{class:!0});var Y2=r(mo);d_=i(Y2,"rebase"),Y2.forEach(t),p_=i(Zo," on a common branch, especially the "),go=s(Zo,"CODE",{class:!0});var F2=r(go);h_=i(F2,"master"),F2.forEach(t),u_=i(Zo," branch."),Zo.forEach(t),b.forEach(t),cc=p(n),Ht=s(n,"SECTION",{});var Oc=r(Ht);gl=s(Oc,"H2",{});var W2=r(gl);Sa=s(W2,"A",{href:!0,id:!0});var B2=r(Sa);f_=i(B2,"git log"),B2.forEach(t),W2.forEach(t),__=p(Oc),vl=s(Oc,"P",{});var j2=r(vl);m_=i(j2,"The go-to command to look at your git history. There's a few options that is worth mentioning, that allow us to search through the sea of commits:"),j2.forEach(t),Oc.forEach(t),nc=p(n),Mt=s(n,"SECTION",{});var Dc=r(Mt);bl=s(Dc,"H3",{});var K2=r(bl);Ta=s(K2,"A",{href:!0,id:!0});var Q2=r(Ta);g_=i(Q2,"--since, --after, --until, --before"),Q2.forEach(t),K2.forEach(t),v_=p(Dc),El=s(Dc,"P",{});var J2=r(El);b_=i(J2,"You can filter out commits within a specific timeframe"),J2.forEach(t),Dc.forEach(t),dc=p(n),Rt=s(n,"SECTION",{});var Ic=r(Rt);yl=s(Ic,"H3",{});var X2=r(yl);Ga=s(X2,"A",{href:!0,id:!0});var Z2=r(Ga);E_=i(Z2,"--grep"),Z2.forEach(t),X2.forEach(t),y_=p(Ic),wl=s(Ic,"P",{});var eE=r(wl);w_=i(eE,"You can filter out commits based on commit message"),eE.forEach(t),Ic.forEach(t),pc=p(n),qt=s(n,"SECTION",{});var xc=r(qt);kl=s(xc,"H3",{});var tE=r(kl);Na=s(tE,"A",{href:!0,id:!0});var aE=r(Na);k_=i(aE,"--invert-grep"),aE.forEach(t),tE.forEach(t),C_=p(xc),vo=s(xc,"P",{});var xg=r(vo);O_=i(xg,"You can filter out commits that does not match the "),bo=s(xg,"CODE",{class:!0});var sE=r(bo);D_=i(sE,"--grep"),sE.forEach(t),xg.forEach(t),xc.forEach(t),hc=p(n),Lt=s(n,"SECTION",{});var Pc=r(Lt);Cl=s(Pc,"H3",{});var rE=r(Cl);Aa=s(rE,"A",{href:!0,id:!0});var oE=r(Aa);I_=i(oE,"--all-match"),oE.forEach(t),rE.forEach(t),x_=p(Pc),we=s(Pc,"P",{});var xt=r(we);Eo=s(xt,"CODE",{class:!0});var iE=r(Eo);P_=i(iE,"--grep"),iE.forEach(t),S_=i(xt," is a "),yo=s(xt,"CODE",{class:!0});var lE=r(yo);T_=i(lE,"OR"),lE.forEach(t),G_=i(xt," filter, "),wo=s(xt,"CODE",{class:!0});var cE=r(wo);N_=i(cE,"--all-match"),cE.forEach(t),A_=i(xt," make it a "),ko=s(xt,"CODE",{class:!0});var nE=r(ko);H_=i(nE,"AND"),nE.forEach(t),M_=i(xt," filter"),xt.forEach(t),Pc.forEach(t),uc=p(n),Ut=s(n,"SECTION",{});var Sc=r(Ut);Ol=s(Sc,"H3",{});var dE=r(Ol);Ha=s(dE,"A",{href:!0,id:!0});var pE=r(Ha);R_=i(pE,"--min-parents, --max-parents, --merges, --no-merges"),pE.forEach(t),dE.forEach(t),q_=p(Sc),Ot=s(Sc,"P",{});var ei=r(Ot);L_=i(ei,"You can specify commits with the number of parents. A simple merge commit has 2 parent, so "),Co=s(ei,"CODE",{class:!0});var hE=r(Co);U_=i(hE,"--merge"),hE.forEach(t),z_=i(ei," is equivalent to "),Oo=s(ei,"CODE",{class:!0});var uE=r(Oo);V_=i(uE,"--min-parents=2"),uE.forEach(t),$_=i(ei,"."),ei.forEach(t),Sc.forEach(t),fc=p(n),zt=s(n,"SECTION",{});var Tc=r(zt);Dl=s(Tc,"H3",{});var fE=r(Dl);Ma=s(fE,"A",{href:!0,id:!0});var _E=r(Ma);Y_=i(_E,"--first-parent"),_E.forEach(t),fE.forEach(t),F_=p(Tc),Ra=s(Tc,"P",{});var Gc=r(Ra);W_=i(Gc,"You can follow only the first parent commit upon seeing a merge commit. This is especially useful when you have merged of branches in, "),Do=s(Gc,"CODE",{class:!0});var mE=r(Do);B_=i(mE,"--first-parent"),mE.forEach(t),j_=i(Gc," allow you to filter out only the merge commit and the commit you have made on the current branch."),Gc.forEach(t),Tc.forEach(t),_c=p(n),Vt=s(n,"SECTION",{});var Nc=r(Vt);Il=s(Nc,"H2",{});var gE=r(Il);qa=s(gE,"A",{href:!0,id:!0});var vE=r(qa);K_=i(vE,"git reflog"),vE.forEach(t),gE.forEach(t),Q_=p(Nc),qe=s(Nc,"P",{});var ia=r(qe);J_=i(ia,"The reference log shows you all the "),Io=s(ia,"CODE",{class:!0});var bE=r(Io);X_=i(bE,"HEAD"),bE.forEach(t),Z_=i(ia," position you have been to. This is especially useful when you have "),xo=s(ia,"CODE",{class:!0});var EE=r(xo);em=i(EE,"reset --hard"),EE.forEach(t),tm=i(ia," or "),Po=s(ia,"CODE",{class:!0});var yE=r(Po);am=i(yE,"rebase"),yE.forEach(t),sm=i(ia,", you can still find back the commit reference that you were at previously, so you can recover them."),ia.forEach(t),Nc.forEach(t),mc=p(n),w=s(n,"SECTION",{});var D=r(w);xl=s(D,"H2",{});var wE=r(xl);La=s(wE,"A",{href:!0,id:!0});var kE=r(La);rm=i(kE,"git bisect"),kE.forEach(t),wE.forEach(t),om=p(D),Pl=s(D,"P",{});var CE=r(Pl);im=i(CE,"This is a useful command that I am looking forward to use it."),CE.forEach(t),lm=p(D),Ua=s(D,"P",{});var Ac=r(Ua);cm=i(Ac,"Often times when you noticed something has changed / break / less optimised, yet you do not know when this change was introduced into your repository. "),So=s(Ac,"CODE",{class:!0});var OE=r(So);nm=i(OE,"git bisect"),OE.forEach(t),dm=i(Ac," allows you to do binary search on the history, so that you can quickly pin down the commit where the change was introduced."),Ac.forEach(t),pm=p(D),To=s(D,"DIV",{class:!0});var V3=r(To);V3.forEach(t),hm=p(D),N=s(D,"P",{});var De=r(N);um=i(De,"Once you've specified at least one "),Go=s(De,"CODE",{class:!0});var DE=r(Go);fm=i(DE,"bad"),DE.forEach(t),_m=i(De," and one "),No=s(De,"CODE",{class:!0});var IE=r(No);mm=i(IE,"good"),IE.forEach(t),gm=i(De," commit, "),Ao=s(De,"CODE",{class:!0});var xE=r(Ao);vm=i(xE,"git bisect"),xE.forEach(t),bm=i(De," will find and checkout to a commit in the middle of that range between "),Ho=s(De,"CODE",{class:!0});var PE=r(Ho);Em=i(PE,"bad"),PE.forEach(t),ym=i(De," and "),Mo=s(De,"CODE",{class:!0});var SE=r(Mo);wm=i(SE,"good"),SE.forEach(t),km=i(De," and greets you with:"),De.forEach(t),Cm=p(D),Ro=s(D,"DIV",{class:!0});var $3=r(Ro);$3.forEach(t),Om=p(D),Dt=s(D,"P",{});var ti=r(Dt);Dm=i(ti,"You can know test / verify / profile your code, and specify whether the current commit is a "),qo=s(ti,"CODE",{class:!0});var TE=r(qo);Im=i(TE,"good"),TE.forEach(t),xm=i(ti," commit or a "),Lo=s(ti,"CODE",{class:!0});var GE=r(Lo);Pm=i(GE,"bad"),GE.forEach(t),Sm=i(ti," commit:"),ti.forEach(t),Tm=p(D),Uo=s(D,"DIV",{class:!0});var Y3=r(Uo);Y3.forEach(t),Gm=p(D),za=s(D,"P",{});var Hc=r(za);Nm=i(Hc,"Continue doing it until eventually there's no more commit to inspect. "),zo=s(Hc,"CODE",{class:!0});var NE=r(zo);Am=i(NE,"git bisect"),NE.forEach(t),Hm=i(Hc," will print out the description of the first bad commit."),Hc.forEach(t),D.forEach(t),gc=p(n),P=s(n,"SECTION",{});var Ie=r(P);Sl=s(Ie,"H2",{});var AE=r(Sl);Va=s(AE,"A",{href:!0,id:!0});var HE=r(Va);Mm=i(HE,"Summary"),HE.forEach(t),AE.forEach(t),Rm=p(Ie),Tl=s(Ie,"P",{});var ME=r(Tl);qm=i(ME,"We've gone through the following git commands:"),ME.forEach(t),Lm=p(Ie),C=s(Ie,"UL",{});var S=r(C);Gl=s(S,"LI",{});var RE=r(Gl);Um=i(RE,"git merge"),RE.forEach(t),zm=p(S),Nl=s(S,"LI",{});var qE=r(Nl);Vm=i(qE,"git reset"),qE.forEach(t),$m=p(S),Al=s(S,"LI",{});var LE=r(Al);Ym=i(LE,"git cherry-pick"),LE.forEach(t),Fm=p(S),Hl=s(S,"LI",{});var UE=r(Hl);Wm=i(UE,"git revert"),UE.forEach(t),Bm=p(S),Ml=s(S,"LI",{});var zE=r(Ml);jm=i(zE,"git rebase"),zE.forEach(t),Km=p(S),Rl=s(S,"LI",{});var VE=r(Rl);Qm=i(VE,"git log"),VE.forEach(t),Jm=p(S),ql=s(S,"LI",{});var $E=r(ql);Xm=i($E,"git reflog"),$E.forEach(t),Zm=p(S),Ll=s(S,"LI",{});var YE=r(Ll);eg=i(YE,"git bisect"),YE.forEach(t),S.forEach(t),tg=p(Ie),$a=s(Ie,"P",{});var Mc=r($a);ag=i(Mc,"Hopefully we are now "),Vo=s(Mc,"CODE",{class:!0});var FE=r(Vo);sg=i(FE,"git gudder"),FE.forEach(t),rg=i(Mc," than before!"),Mc.forEach(t),og=p(Ie),ig=s(Ie,"HR",{}),lg=p(Ie),$o=s(Ie,"P",{});var Pg=r($o);cg=i(Pg,"Related topic: "),Yo=s(Pg,"A",{href:!0});var WE=r(Yo);ng=i(WE,"Git commits went missing after a rebase"),WE.forEach(t),Pg.forEach(t),Ie.forEach(t),this.h()},h(){l(ca,"href","#disclaimer"),l(ca,"id","disclaimer"),l(da,"href","https://git-scm.com"),l(da,"rel","nofollow"),l(pa,"href","#git-merge"),l(pa,"id","git-merge"),l(ja,"class","inline"),l(ha,"href","#fast-forward-merge"),l(ha,"id","fast-forward-merge"),l(Ka,"class","inline"),l(Qa,"class","inline"),y(Y.src,Tg=b3)||l(Y,"src",Tg),l(Y,"srcset",b3+", "+z0+" 2x"),l(Y,"loading","lazy"),c(Y,"position","absolute"),c(Y,"top","0"),c(Y,"width","100%"),c(Y,"height","100%"),l(Y,"alt","git-merge-ff"),c(je,"display","block"),c(je,"position","relative"),c(je,"padding-top","56.566%"),c(je,"width","100%"),l(Ja,"class","caption svelte-koydfe"),l(ua,"href","#non-fast-forward-merge"),l(ua,"id","non-fast-forward-merge"),l(Xa,"class","inline"),l(Za,"class","inline"),y(F.src,Gg=v3)||l(F,"src",Gg),l(F,"srcset",v3+", "+U0+" 2x"),l(F,"loading","lazy"),c(F,"position","absolute"),c(F,"top","0"),c(F,"width","100%"),c(F,"height","100%"),l(F,"alt","git-merge-non-ff"),c(Qe,"display","block"),c(Qe,"position","relative"),c(Qe,"padding-top","58.779%"),c(Qe,"width","100%"),l(es,"class","caption svelte-koydfe"),l(fa,"href","#git-pull"),l(fa,"id","git-pull"),l(ts,"class","inline"),l(as,"class","inline"),l(ss,"class","inline"),y(B.src,Ng=g3)||l(B,"src",Ng),l(B,"srcset",g3+", "+L0+" 2x"),l(B,"loading","lazy"),c(B,"position","absolute"),c(B,"top","0"),c(B,"width","100%"),c(B,"height","100%"),l(B,"alt","git-pull"),c(Je,"display","block"),c(Je,"position","relative"),c(Je,"padding-top","59.695%"),c(Je,"width","100%"),l(rs,"class","caption svelte-koydfe"),l(_a,"href","#git-reset"),l(_a,"id","git-reset"),l(is,"class","inline"),l(ls,"class","inline"),l(cs,"class","inline"),l(ns,"class","inline"),y(j.src,Ag=m3)||l(j,"src",Ag),l(j,"srcset",m3+", "+q0+" 2x"),l(j,"loading","lazy"),c(j,"position","absolute"),c(j,"top","0"),c(j,"width","100%"),c(j,"height","100%"),l(j,"alt","git-reset"),c(Xe,"display","block"),c(Xe,"position","relative"),c(Xe,"padding-top","89.167%"),c(Xe,"width","100%"),l(ds,"class","caption svelte-koydfe"),l(ma,"href","#git-cherry-pick"),l(ma,"id","git-cherry-pick"),l(ps,"class","inline"),l(hs,"class","inline"),y(K.src,Hg=_3)||l(K,"src",Hg),l(K,"srcset",_3+", "+R0+" 2x"),l(K,"loading","lazy"),c(K,"position","absolute"),c(K,"top","0"),c(K,"width","100%"),c(K,"height","100%"),l(K,"alt","git-cherry-pick"),c(Ze,"display","block"),c(Ze,"position","relative"),c(Ze,"padding-top","87.500%"),c(Ze,"width","100%"),l(us,"class","caption svelte-koydfe"),l(ga,"href","#git-revert"),l(ga,"id","git-revert"),l(_s,"class","inline"),l(ms,"class","inline"),l(gs,"class","inline"),l(vs,"class","inline"),l(bs,"class","inline"),y(Q.src,Mg=f3)||l(Q,"src",Mg),l(Q,"srcset",f3+", "+M0+" 2x"),l(Q,"loading","lazy"),c(Q,"position","absolute"),c(Q,"top","0"),c(Q,"width","100%"),c(Q,"height","100%"),l(Q,"alt","git-revert"),c(et,"display","block"),c(et,"position","relative"),c(et,"padding-top","69.231%"),c(et,"width","100%"),l(Es,"class","caption svelte-koydfe"),l(ys,"class","inline"),y(J.src,Rg=u3)||l(J,"src",Rg),l(J,"srcset",u3+", "+H0+" 2x"),l(J,"loading","lazy"),c(J,"position","absolute"),c(J,"top","0"),c(J,"width","100%"),c(J,"height","100%"),l(J,"alt","git-revert-2"),c(tt,"display","block"),c(tt,"position","relative"),c(tt,"padding-top","69.231%"),c(tt,"width","100%"),l(ws,"class","caption svelte-koydfe"),l(ks,"class","inline"),l(Cs,"class","inline"),l(Os,"class","inline"),l(Is,"class","inline"),y(X.src,qg=h3)||l(X,"src",qg),l(X,"srcset",h3+", "+A0+" 2x"),l(X,"loading","lazy"),c(X,"position","absolute"),c(X,"top","0"),c(X,"width","100%"),c(X,"height","100%"),l(X,"alt","git-revert-3"),c(at,"display","block"),c(at,"position","relative"),c(at,"padding-top","54.783%"),c(at,"width","100%"),l(xs,"class","caption svelte-koydfe"),l(Ps,"class","inline"),l(Ss,"class","inline"),l(Ts,"class","inline"),l(Gs,"class","inline"),l(Ns,"class","inline"),y(Z.src,Lg=p3)||l(Z,"src",Lg),l(Z,"srcset",p3+", "+N0+" 2x"),l(Z,"loading","lazy"),c(Z,"position","absolute"),c(Z,"top","0"),c(Z,"width","100%"),c(Z,"height","100%"),l(Z,"alt","git-revert-4"),c(st,"display","block"),c(st,"position","relative"),c(st,"padding-top","54.783%"),c(st,"width","100%"),l(As,"class","caption svelte-koydfe"),l(ba,"href","#git-rebase"),l(ba,"id","git-rebase"),l(Ms,"class","inline"),l(Rs,"class","inline"),l(qs,"class","inline"),l(Ls,"class","inline"),l(Us,"class","inline"),l(zs,"class","inline"),l(Vs,"class","inline"),l($s,"class","inline"),l(Ys,"class","inline"),y(ee.src,Ug=d3)||l(ee,"src",Ug),l(ee,"srcset",d3+", "+G0+" 2x"),l(ee,"loading","lazy"),c(ee,"position","absolute"),c(ee,"top","0"),c(ee,"width","100%"),c(ee,"height","100%"),l(ee,"alt","git-rebase"),c(rt,"display","block"),c(rt,"position","relative"),c(rt,"padding-top","49.613%"),c(rt,"width","100%"),l(Fs,"class","caption svelte-koydfe"),l(Bs,"class","inline"),l(js,"class","inline"),l(Ks,"class","inline"),y(te.src,zg=n3)||l(te,"src",zg),l(te,"srcset",n3+", "+T0+" 2x"),l(te,"loading","lazy"),c(te,"position","absolute"),c(te,"top","0"),c(te,"width","100%"),c(te,"height","100%"),l(te,"alt","git-rebase-2"),c(ot,"display","block"),c(ot,"position","relative"),c(ot,"padding-top","77.510%"),c(ot,"width","100%"),l(Qs,"class","caption svelte-koydfe"),l(Js,"class","inline"),l(Xs,"class","inline"),l(Zs,"class","inline"),l(Ai,"type","image/webp"),l(Ai,"srcset",P0+", "+x0+" 2x"),y(ae.src,Vg=c3)||l(ae,"src",Vg),l(ae,"srcset",c3+", "+S0+" 2x"),l(ae,"loading","lazy"),c(ae,"position","absolute"),c(ae,"top","0"),c(ae,"width","100%"),c(ae,"height","100%"),l(ae,"alt","git-rebase"),c(lt,"display","block"),c(lt,"position","relative"),c(lt,"padding-top","77.510%"),c(lt,"width","100%"),l(tr,"class","caption svelte-koydfe"),l(ar,"class","inline"),l(sr,"class","inline"),l(rr,"class","inline"),l(or,"class","inline"),l(ir,"class","inline"),l(lr,"class","inline"),l(cr,"class","inline"),l(nr,"class","inline"),l(dr,"class","inline"),l(pr,"class","inline"),l(hr,"class","inline"),l(ur,"class","inline"),l(fr,"class","inline"),l(_r,"class","inline"),l(mr,"class","inline"),l(gr,"class","inline"),l(vr,"class","inline"),l(br,"class","inline"),l(Ea,"href","#git-rebase-interactive"),l(Ea,"id","git-rebase-interactive"),l(yr,"class","inline"),l(qi,"type","image/webp"),l(qi,"srcset",i3+", "+o3+" 2x"),y(re.src,$g=Rc)||l(re,"src",$g),l(re,"srcset",Rc+", "+l3+" 2x"),l(re,"loading","lazy"),c(re,"position","absolute"),c(re,"top","0"),c(re,"width","100%"),c(re,"height","100%"),l(re,"alt","git-rebase-i-pick"),c(nt,"display","block"),c(nt,"position","relative"),c(nt,"padding-top","24.476%"),c(nt,"width","100%"),l(kr,"class","caption svelte-koydfe"),l(Cr,"class","inline"),l(Or,"class","code-section"),l(wa,"href","#pick"),l(wa,"id","pick"),l(Vi,"type","image/webp"),l(Vi,"srcset",i3+", "+o3+" 2x"),y(ie.src,Yg=Rc)||l(ie,"src",Yg),l(ie,"srcset",Rc+", "+l3+" 2x"),l(ie,"loading","lazy"),c(ie,"position","absolute"),c(ie,"top","0"),c(ie,"width","100%"),c(ie,"height","100%"),l(ie,"alt","git-rebase-i-pick"),c(dt,"display","block"),c(dt,"position","relative"),c(dt,"padding-top","24.476%"),c(dt,"width","100%"),l(Ir,"class","code-section"),l(ka,"href","#drop"),l(ka,"id","drop"),l(Wi,"type","image/webp"),l(Wi,"srcset",D0+", "+O0+" 2x"),y(ce.src,Fg=r3)||l(ce,"src",Fg),l(ce,"srcset",r3+", "+I0+" 2x"),l(ce,"loading","lazy"),c(ce,"position","absolute"),c(ce,"top","0"),c(ce,"width","100%"),c(ce,"height","100%"),l(ce,"alt","git-rebase-i-drop"),c(pt,"display","block"),c(pt,"position","relative"),c(pt,"padding-top","24.476%"),c(pt,"width","100%"),l(Pr,"class","code-section"),l(Ca,"href","#squash-fixup"),l(Ca,"id","squash-fixup"),l(Sr,"class","inline"),l(Tr,"class","inline"),l(Gr,"class","inline"),l(Ki,"type","image/webp"),l(Ki,"srcset",k0+", "+w0+" 2x"),y(de.src,Wg=s3)||l(de,"src",Wg),l(de,"srcset",s3+", "+C0+" 2x"),l(de,"loading","lazy"),c(de,"position","absolute"),c(de,"top","0"),c(de,"width","100%"),c(de,"height","100%"),l(de,"alt","git-rebase-i-squash"),c(ht,"display","block"),c(ht,"position","relative"),c(ht,"padding-top","24.615%"),c(ht,"width","100%"),l(Ar,"class","code-section"),l(Oa,"href","#break"),l(Oa,"id","break"),l(Hr,"class","inline"),l(Xi,"type","image/webp"),l(Xi,"srcset",E0+", "+b0+" 2x"),y(he.src,Bg=a3)||l(he,"src",Bg),l(he,"srcset",a3+", "+y0+" 2x"),l(he,"loading","lazy"),c(he,"position","absolute"),c(he,"top","0"),c(he,"width","100%"),c(he,"height","100%"),l(he,"alt","git-rebase-i-break"),c(ut,"display","block"),c(ut,"position","relative"),c(ut,"padding-top","26.434%"),c(ut,"width","100%"),l(Rr,"class","code-section"),l(Ia,"href","#edit"),l(Ia,"id","edit"),l(al,"type","image/webp"),l(al,"srcset",g0+", "+m0+" 2x"),y(fe.src,jg=t3)||l(fe,"src",jg),l(fe,"srcset",t3+", "+v0+" 2x"),l(fe,"loading","lazy"),c(fe,"position","absolute"),c(fe,"top","0"),c(fe,"width","100%"),c(fe,"height","100%"),l(fe,"alt","git-rebase-i-edit"),c(ft,"display","block"),c(ft,"position","relative"),c(ft,"padding-top","26.434%"),c(ft,"width","100%"),l(Lr,"class","code-section"),l(xa,"href","#git-pull-rebase"),l(xa,"id","git-pull-rebase"),l(Ur,"class","inline"),l(zr,"class","inline"),y(me.src,Kg=e3)||l(me,"src",Kg),l(me,"srcset",e3+", "+_0+" 2x"),l(me,"loading","lazy"),c(me,"position","absolute"),c(me,"top","0"),c(me,"width","100%"),c(me,"height","100%"),l(me,"alt","git-pull-rebase"),c(mt,"display","block"),c(mt,"position","relative"),c(mt,"padding-top","66.066%"),c(mt,"width","100%"),l(Vr,"class","caption svelte-koydfe"),l(Pa,"href","#git-rebase-a-shared-branch"),l(Pa,"id","git-rebase-a-shared-branch"),l($r,"class","inline"),l(Yr,"class","inline"),l(Fr,"class","inline"),l(ll,"type","image/webp"),l(ll,"srcset",u0+", "+h0+" 2x"),y(ge.src,Qg=ZE)||l(ge,"src",Qg),l(ge,"srcset",ZE+", "+f0+" 2x"),l(ge,"loading","lazy"),c(ge,"position","absolute"),c(ge,"top","0"),c(ge,"width","100%"),c(ge,"height","100%"),l(ge,"alt","git-rebase-w"),c(gt,"display","block"),c(gt,"position","relative"),c(gt,"padding-top","34.266%"),c(gt,"width","100%"),l(Br,"class","inline"),l(jr,"class","inline"),l(nl,"type","image/webp"),l(nl,"srcset",d0+", "+n0+" 2x"),y(ve.src,Jg=XE)||l(ve,"src",Jg),l(ve,"srcset",XE+", "+p0+" 2x"),l(ve,"loading","lazy"),c(ve,"position","absolute"),c(ve,"top","0"),c(ve,"width","100%"),c(ve,"height","100%"),l(ve,"alt","git-rebase-w-2"),c(vt,"display","block"),c(vt,"position","relative"),c(vt,"padding-top","52.448%"),c(vt,"width","100%"),l(Qr,"class","inline"),l(Jr,"class","inline"),l(pl,"type","image/webp"),l(pl,"srcset",l0+", "+i0+" 2x"),y(be.src,Xg=JE)||l(be,"src",Xg),l(be,"srcset",JE+", "+c0+" 2x"),l(be,"loading","lazy"),c(be,"position","absolute"),c(be,"top","0"),c(be,"width","100%"),c(be,"height","100%"),l(be,"alt","git-rebase-w-3"),c(Et,"display","block"),c(Et,"position","relative"),c(Et,"padding-top","52.448%"),c(Et,"width","100%"),l(Zr,"class","inline"),l(eo,"class","inline"),l(to,"class","inline"),l(ao,"class","inline"),l(so,"class","inline"),l(fl,"type","image/webp"),l(fl,"srcset",r0+", "+s0+" 2x"),y(Ee.src,Zg=QE)||l(Ee,"src",Zg),l(Ee,"srcset",QE+", "+o0+" 2x"),l(Ee,"loading","lazy"),c(Ee,"position","absolute"),c(Ee,"top","0"),c(Ee,"width","100%"),c(Ee,"height","100%"),l(Ee,"alt","git-rebase-w-4"),c(yt,"display","block"),c(yt,"position","relative"),c(yt,"padding-top","44.643%"),c(yt,"width","100%"),l(oo,"class","inline"),l(io,"class","inline"),l(lo,"class","inline"),l(co,"class","inline"),l(no,"class","inline"),l(ml,"type","image/webp"),l(ml,"srcset",t0+", "+e0+" 2x"),y(ye.src,ev=KE)||l(ye,"src",ev),l(ye,"srcset",KE+", "+a0+" 2x"),l(ye,"loading","lazy"),c(ye,"position","absolute"),c(ye,"top","0"),c(ye,"width","100%"),c(ye,"height","100%"),l(ye,"alt","git-rebase-w-5"),c(kt,"display","block"),c(kt,"position","relative"),c(kt,"padding-top","48.319%"),c(kt,"width","100%"),l(ho,"class","inline"),l(uo,"class","inline"),l(fo,"class","inline"),l(_o,"class","inline"),l(mo,"class","inline"),l(go,"class","inline"),l(Sa,"href","#git-log"),l(Sa,"id","git-log"),l(Ta,"href","#since-after-until-before"),l(Ta,"id","since-after-until-before"),l(Ga,"href","#grep"),l(Ga,"id","grep"),l(Na,"href","#invert-grep"),l(Na,"id","invert-grep"),l(bo,"class","inline"),l(Aa,"href","#all-match"),l(Aa,"id","all-match"),l(Eo,"class","inline"),l(yo,"class","inline"),l(wo,"class","inline"),l(ko,"class","inline"),l(Ha,"href","#min-parents-max-parents-merges-no-merges"),l(Ha,"id","min-parents-max-parents-merges-no-merges"),l(Co,"class","inline"),l(Oo,"class","inline"),l(Ma,"href","#first-parent"),l(Ma,"id","first-parent"),l(Do,"class","inline"),l(qa,"href","#git-reflog"),l(qa,"id","git-reflog"),l(Io,"class","inline"),l(xo,"class","inline"),l(Po,"class","inline"),l(La,"href","#git-bisect"),l(La,"id","git-bisect"),l(So,"class","inline"),l(To,"class","code-section"),l(Go,"class","inline"),l(No,"class","inline"),l(Ao,"class","inline"),l(Ho,"class","inline"),l(Mo,"class","inline"),l(Ro,"class","code-section"),l(qo,"class","inline"),l(Lo,"class","inline"),l(Uo,"class","code-section"),l(zo,"class","inline"),l(Va,"href","#summary"),l(Va,"id","summary"),l(Vo,"class","inline"),l(Yo,"href","/commit-went-missing-after-rebase/")},m(n,h){k3(E,n,h),u(n,xe,h),u(n,V,h),e(V,la),u(n,k,h),u(n,O,h),e(O,Wa),e(O,ai),e(ai,qc),e(O,Lc),e(O,si),e(si,Uc),e(O,zc),u(n,Yl,h),u(n,Ba,h),e(Ba,ri),e(ri,Vc),u(n,Fl,h),u(n,Pt,h),e(Pt,oi),e(oi,ca),e(ca,$c),e(Pt,Yc),e(Pt,na),e(na,Fc),e(na,da),e(da,Wc),e(na,Bc),u(n,Wl,h),u(n,St,h),e(St,ii),e(ii,pa),e(pa,jc),e(St,Kc),e(St,Pe),e(Pe,Qc),e(Pe,ja),e(ja,Jc),e(Pe,Xc),e(Pe,li),e(li,Zc),e(Pe,en),e(Pe,ci),e(ci,tn),e(Pe,an),u(n,Bl,h),u(n,$,h),e($,ni),e(ni,ha),e(ha,sn),e($,rn),e($,Be),e(Be,on),e(Be,Ka),e(Ka,ln),e(Be,cn),e(Be,Qa),e(Qa,nn),e(Be,dn),e($,pn),e($,di),e(di,je),e(je,Y),e($,hn),e($,Ja),e(Ja,un),u(n,jl,h),u(n,A,h),e(A,pi),e(pi,ua),e(ua,fn),e(A,_n),e(A,Ke),e(Ke,mn),e(Ke,Xa),e(Xa,gn),e(Ke,vn),e(Ke,Za),e(Za,bn),e(Ke,En),e(A,yn),e(A,hi),e(hi,Qe),e(Qe,F),e(A,wn),e(A,es),e(es,kn),e(A,Cn),e(A,ui),e(ui,On),u(n,Kl,h),u(n,W,h),e(W,fi),e(fi,fa),e(fa,Dn),e(W,In),e(W,Se),e(Se,xn),e(Se,ts),e(ts,Pn),e(Se,Sn),e(Se,as),e(as,Tn),e(Se,Gn),e(Se,ss),e(ss,Nn),e(Se,An),e(W,Hn),e(W,_i),e(_i,Je),e(Je,B),e(W,Mn),e(W,rs),e(rs,Rn),u(n,Ql,h),u(n,H,h),e(H,mi),e(mi,_a),e(_a,qn),e(H,Ln),e(H,os),e(os,is),e(is,Un),e(os,zn),e(H,Vn),e(H,Le),e(Le,ls),e(ls,$n),e(Le,Yn),e(Le,cs),e(cs,Fn),e(Le,Wn),e(Le,ns),e(ns,Bn),e(Le,jn),e(H,Kn),e(H,gi),e(gi,Xe),e(Xe,j),e(H,Qn),e(H,ds),e(ds,Jn),u(n,Jl,h),u(n,M,h),e(M,vi),e(vi,ma),e(ma,Xn),e(M,Zn),e(M,bi),e(bi,ed),e(M,td),e(M,Tt),e(Tt,ps),e(ps,ad),e(Tt,sd),e(Tt,hs),e(hs,rd),e(Tt,od),e(M,id),e(M,Ei),e(Ei,Ze),e(Ze,K),e(M,ld),e(M,us),e(us,cd),u(n,Xl,h),u(n,_,h),e(_,yi),e(yi,ga),e(ga,nd),e(_,dd),e(_,fs),e(fs,_s),e(_s,pd),e(fs,hd),e(_,ud),e(_,q),e(q,fd),e(q,ms),e(ms,_d),e(q,md),e(q,gs),e(gs,gd),e(q,vd),e(q,vs),e(vs,bd),e(q,Ed),e(q,bs),e(bs,yd),e(q,wd),e(_,kd),e(_,wi),e(wi,et),e(et,Q),e(_,Cd),e(_,Es),e(Es,Od),e(_,Dd),e(_,va),e(va,Id),e(va,ys),e(ys,xd),e(va,Pd),e(_,Sd),e(_,ki),e(ki,tt),e(tt,J),e(_,Td),e(_,ws),e(ws,Gd),e(_,Nd),e(_,Te),e(Te,Ad),e(Te,ks),e(ks,Hd),e(Te,Md),e(Te,Cs),e(Cs,Rd),e(Te,qd),e(Te,Os),e(Os,Ld),e(Te,Ud),e(_,zd),e(_,Ds),e(Ds,Is),e(Is,Vd),e(Ds,$d),e(_,Yd),e(_,Ci),e(Ci,at),e(at,X),e(_,Fd),e(_,xs),e(xs,Wd),e(_,Bd),e(_,T),e(T,jd),e(T,Ps),e(Ps,Kd),e(T,Qd),e(T,Ss),e(Ss,Jd),e(T,Xd),e(T,Ts),e(Ts,Zd),e(T,ep),e(T,Gs),e(Gs,tp),e(T,ap),e(T,Ns),e(Ns,sp),e(T,rp),e(_,op),e(_,Oi),e(Oi,st),e(st,Z),e(_,ip),e(_,As),e(As,lp),u(n,Zl,h),u(n,f,h),e(f,Di),e(Di,ba),e(ba,cp),e(f,np),e(f,Hs),e(Hs,Ms),e(Ms,dp),e(Hs,pp),e(f,hp),e(f,I),e(I,up),e(I,Rs),e(Rs,fp),e(I,_p),e(I,qs),e(qs,mp),e(I,gp),e(I,Ls),e(Ls,vp),e(I,bp),e(I,Us),e(Us,Ep),e(I,yp),e(I,zs),e(zs,wp),e(I,kp),e(I,Vs),e(Vs,Cp),e(I,Op),e(f,Dp),e(f,Gt),e(Gt,$s),e($s,Ip),e(Gt,xp),e(Gt,Ys),e(Ys,Pp),e(Gt,Sp),e(f,Tp),e(f,Ii),e(Ii,rt),e(rt,ee),e(f,Gp),e(f,Fs),e(Fs,Np),e(f,Ap),e(f,Ws),e(Ws,Bs),e(Bs,Hp),e(Ws,Mp),e(f,Rp),e(f,Nt),e(Nt,js),e(js,qp),e(Nt,Lp),e(Nt,Ks),e(Ks,Up),e(Nt,zp),e(f,Vp),e(f,xi),e(xi,ot),e(ot,te),e(f,$p),e(f,Qs),e(Qs,Yp),e(f,Fp),e(f,Pi),e(Pi,Wp),e(f,Bp),e(f,it),e(it,Si),e(Si,Js),e(Js,jp),e(it,Kp),e(it,Ti),e(Ti,Xs),e(Xs,Qp),e(it,Jp),e(it,Gi),e(Gi,Zs),e(Zs,Xp),e(f,Zp),e(f,Ni),e(Ni,lt),e(lt,er),e(er,Ai),e(er,ae),e(f,eh),e(f,tr),e(tr,th),e(f,ah),e(f,Hi),e(Hi,sh),e(f,rh),e(f,L),e(L,se),e(se,ar),e(ar,oh),e(se,ih),e(se,sr),e(sr,lh),e(se,ch),e(se,rr),e(rr,nh),e(se,dh),e(se,or),e(or,ph),e(se,hh),e(L,uh),e(L,G),e(G,fh),e(G,ir),e(ir,_h),e(G,mh),e(G,lr),e(lr,gh),e(G,vh),e(G,cr),e(cr,bh),e(G,Eh),e(G,nr),e(nr,yh),e(G,wh),e(G,dr),e(dr,kh),e(G,Ch),e(L,Oh),e(L,ct),e(ct,Dh),e(ct,pr),e(pr,Ih),e(ct,xh),e(ct,hr),e(hr,Ph),e(ct,Sh),e(L,Th),e(L,U),e(U,Gh),e(U,ur),e(ur,Nh),e(U,Ah),e(U,fr),e(fr,Hh),e(U,Mh),e(U,_r),e(_r,Rh),e(U,qh),e(U,mr),e(mr,Lh),e(U,Uh),e(L,zh),e(L,Ge),e(Ge,Vh),e(Ge,gr),e(gr,$h),e(Ge,Yh),e(Ge,vr),e(vr,Fh),e(Ge,Wh),e(Ge,br),e(br,Bh),e(Ge,jh),u(n,ec,h),u(n,x,h),e(x,Mi),e(Mi,Ea),e(Ea,Kh),e(x,Qh),e(x,Er),e(Er,yr),e(yr,Jh),e(Er,Xh),e(x,Zh),e(x,Ri),e(Ri,nt),e(nt,wr),e(wr,qi),e(wr,re),e(x,eu),e(x,kr),e(kr,tu),e(x,au),e(x,ya),e(ya,su),e(ya,Cr),e(Cr,ru),e(ya,ou),e(x,iu),e(x,Or),Or.innerHTML=I3,u(n,tc,h),u(n,oe,h),e(oe,Li),e(Li,wa),e(wa,lu),e(oe,cu),e(oe,Ui),e(Ui,nu),e(oe,du),e(oe,zi),e(zi,dt),e(dt,Dr),e(Dr,Vi),e(Dr,ie),e(oe,pu),e(oe,Ir),Ir.innerHTML=x3,u(n,ac,h),u(n,le,h),e(le,$i),e($i,ka),e(ka,hu),e(le,uu),e(le,Yi),e(Yi,fu),e(le,_u),e(le,Fi),e(Fi,pt),e(pt,xr),e(xr,Wi),e(xr,ce),e(le,mu),e(le,Pr),Pr.innerHTML=P3,u(n,sc,h),u(n,ne,h),e(ne,Bi),e(Bi,Ca),e(Ca,gu),e(ne,vu),e(ne,Ne),e(Ne,bu),e(Ne,Sr),e(Sr,Eu),e(Ne,yu),e(Ne,Tr),e(Tr,wu),e(Ne,ku),e(Ne,Gr),e(Gr,Cu),e(Ne,Ou),e(ne,Du),e(ne,ji),e(ji,ht),e(ht,Nr),e(Nr,Ki),e(Nr,de),e(ne,Iu),e(ne,Ar),Ar.innerHTML=S3,u(n,rc,h),u(n,pe,h),e(pe,Qi),e(Qi,Oa),e(Oa,xu),e(pe,Pu),e(pe,Da),e(Da,Su),e(Da,Hr),e(Hr,Tu),e(Da,Gu),e(pe,Nu),e(pe,Ji),e(Ji,ut),e(ut,Mr),e(Mr,Xi),e(Mr,he),e(pe,Au),e(pe,Rr),Rr.innerHTML=T3,u(n,oc,h),u(n,ue,h),e(ue,Zi),e(Zi,Ia),e(Ia,Hu),e(ue,Mu),e(ue,el),e(el,Ru),e(ue,qu),e(ue,tl),e(tl,ft),e(ft,qr),e(qr,al),e(qr,fe),e(ue,Lu),e(ue,Lr),Lr.innerHTML=G3,u(n,ic,h),u(n,_e,h),e(_e,sl),e(sl,xa),e(xa,Uu),e(_e,zu),e(_e,_t),e(_t,Vu),e(_t,Ur),e(Ur,$u),e(_t,Yu),e(_t,zr),e(zr,Fu),e(_t,Wu),e(_e,Bu),e(_e,rl),e(rl,mt),e(mt,me),e(_e,ju),e(_e,Vr),e(Vr,Ku),u(n,lc,h),u(n,m,h),e(m,ol),e(ol,Pa),e(Pa,Qu),e(m,Ju),e(m,Ae),e(Ae,Xu),e(Ae,$r),e($r,Zu),e(Ae,ef),e(Ae,Yr),e(Yr,tf),e(Ae,af),e(Ae,Fr),e(Fr,sf),e(Ae,rf),e(m,of),e(m,il),e(il,gt),e(gt,Wr),e(Wr,ll),e(Wr,ge),e(m,lf),e(m,At),e(At,Br),e(Br,cf),e(At,nf),e(At,jr),e(jr,df),e(At,pf),e(m,hf),e(m,cl),e(cl,vt),e(vt,Kr),e(Kr,nl),e(Kr,ve),e(m,uf),e(m,bt),e(bt,ff),e(bt,Qr),e(Qr,_f),e(bt,mf),e(bt,Jr),e(Jr,gf),e(bt,vf),e(m,bf),e(m,dl),e(dl,Et),e(Et,Xr),e(Xr,pl),e(Xr,be),e(m,Ef),e(m,He),e(He,yf),e(He,Zr),e(Zr,wf),e(He,kf),e(He,hl),e(hl,Cf),e(He,Of),e(He,eo),e(eo,Df),e(He,If),e(m,xf),e(m,Me),e(Me,Pf),e(Me,to),e(to,Sf),e(Me,Tf),e(Me,ao),e(ao,Gf),e(Me,Nf),e(Me,so),e(so,Af),e(Me,Hf),e(m,Mf),e(m,ul),e(ul,yt),e(yt,ro),e(ro,fl),e(ro,Ee),e(m,Rf),e(m,wt),e(wt,qf),e(wt,oo),e(oo,Lf),e(wt,Uf),e(wt,io),e(io,zf),e(wt,Vf),e(m,$f),e(m,Re),e(Re,Yf),e(Re,lo),e(lo,Ff),e(Re,Wf),e(Re,co),e(co,Bf),e(Re,jf),e(Re,no),e(no,Kf),e(Re,Qf),e(m,Jf),e(m,_l),e(_l,kt),e(kt,po),e(po,ml),e(po,ye),e(m,Xf),e(m,z),e(z,Zf),e(z,ho),e(ho,e_),e(z,t_),e(z,uo),e(uo,a_),e(z,s_),e(z,fo),e(fo,r_),e(z,o_),e(z,_o),e(_o,i_),e(z,l_),e(m,c_),e(m,Ct),e(Ct,n_),e(Ct,mo),e(mo,d_),e(Ct,p_),e(Ct,go),e(go,h_),e(Ct,u_),u(n,cc,h),u(n,Ht,h),e(Ht,gl),e(gl,Sa),e(Sa,f_),e(Ht,__),e(Ht,vl),e(vl,m_),u(n,nc,h),u(n,Mt,h),e(Mt,bl),e(bl,Ta),e(Ta,g_),e(Mt,v_),e(Mt,El),e(El,b_),u(n,dc,h),u(n,Rt,h),e(Rt,yl),e(yl,Ga),e(Ga,E_),e(Rt,y_),e(Rt,wl),e(wl,w_),u(n,pc,h),u(n,qt,h),e(qt,kl),e(kl,Na),e(Na,k_),e(qt,C_),e(qt,vo),e(vo,O_),e(vo,bo),e(bo,D_),u(n,hc,h),u(n,Lt,h),e(Lt,Cl),e(Cl,Aa),e(Aa,I_),e(Lt,x_),e(Lt,we),e(we,Eo),e(Eo,P_),e(we,S_),e(we,yo),e(yo,T_),e(we,G_),e(we,wo),e(wo,N_),e(we,A_),e(we,ko),e(ko,H_),e(we,M_),u(n,uc,h),u(n,Ut,h),e(Ut,Ol),e(Ol,Ha),e(Ha,R_),e(Ut,q_),e(Ut,Ot),e(Ot,L_),e(Ot,Co),e(Co,U_),e(Ot,z_),e(Ot,Oo),e(Oo,V_),e(Ot,$_),u(n,fc,h),u(n,zt,h),e(zt,Dl),e(Dl,Ma),e(Ma,Y_),e(zt,F_),e(zt,Ra),e(Ra,W_),e(Ra,Do),e(Do,B_),e(Ra,j_),u(n,_c,h),u(n,Vt,h),e(Vt,Il),e(Il,qa),e(qa,K_),e(Vt,Q_),e(Vt,qe),e(qe,J_),e(qe,Io),e(Io,X_),e(qe,Z_),e(qe,xo),e(xo,em),e(qe,tm),e(qe,Po),e(Po,am),e(qe,sm),u(n,mc,h),u(n,w,h),e(w,xl),e(xl,La),e(La,rm),e(w,om),e(w,Pl),e(Pl,im),e(w,lm),e(w,Ua),e(Ua,cm),e(Ua,So),e(So,nm),e(Ua,dm),e(w,pm),e(w,To),To.innerHTML=N3,e(w,hm),e(w,N),e(N,um),e(N,Go),e(Go,fm),e(N,_m),e(N,No),e(No,mm),e(N,gm),e(N,Ao),e(Ao,vm),e(N,bm),e(N,Ho),e(Ho,Em),e(N,ym),e(N,Mo),e(Mo,wm),e(N,km),e(w,Cm),e(w,Ro),Ro.innerHTML=A3,e(w,Om),e(w,Dt),e(Dt,Dm),e(Dt,qo),e(qo,Im),e(Dt,xm),e(Dt,Lo),e(Lo,Pm),e(Dt,Sm),e(w,Tm),e(w,Uo),Uo.innerHTML=H3,e(w,Gm),e(w,za),e(za,Nm),e(za,zo),e(zo,Am),e(za,Hm),u(n,gc,h),u(n,P,h),e(P,Sl),e(Sl,Va),e(Va,Mm),e(P,Rm),e(P,Tl),e(Tl,qm),e(P,Lm),e(P,C),e(C,Gl),e(Gl,Um),e(C,zm),e(C,Nl),e(Nl,Vm),e(C,$m),e(C,Al),e(Al,Ym),e(C,Fm),e(C,Hl),e(Hl,Wm),e(C,Bm),e(C,Ml),e(Ml,jm),e(C,Km),e(C,Rl),e(Rl,Qm),e(C,Jm),e(C,ql),e(ql,Xm),e(C,Zm),e(C,Ll),e(Ll,eg),e(P,tg),e(P,$a),e($a,ag),e($a,Vo),e(Vo,sg),e($a,rg),e(P,og),e(P,ig),e(P,lg),e(P,$o),e($o,cg),e($o,Yo),e(Yo,ng),vc=!0},p:Q3,i(n){vc||(C3(E.$$.fragment,n),vc=!0)},o(n){O3(E.$$.fragment,n),vc=!1},d(n){D3(E,n),n&&t(xe),n&&t(V),n&&t(k),n&&t(O),n&&t(Yl),n&&t(Ba),n&&t(Fl),n&&t(Pt),n&&t(Wl),n&&t(St),n&&t(Bl),n&&t($),n&&t(jl),n&&t(A),n&&t(Kl),n&&t(W),n&&t(Ql),n&&t(H),n&&t(Jl),n&&t(M),n&&t(Xl),n&&t(_),n&&t(Zl),n&&t(f),n&&t(ec),n&&t(x),n&&t(tc),n&&t(oe),n&&t(ac),n&&t(le),n&&t(sc),n&&t(ne),n&&t(rc),n&&t(pe),n&&t(oc),n&&t(ue),n&&t(ic),n&&t(_e),n&&t(lc),n&&t(m),n&&t(cc),n&&t(Ht),n&&t(nc),n&&t(Mt),n&&t(dc),n&&t(Rt),n&&t(pc),n&&t(qt),n&&t(hc),n&&t(Lt),n&&t(uc),n&&t(Ut),n&&t(fc),n&&t(zt),n&&t(_c),n&&t(Vt),n&&t(mc),n&&t(w),n&&t(gc),n&&t(P)}}}function $0(Fa){let E,xe;const V=[Fa[0],E3];let la={$$slots:{default:[V0]},$$scope:{ctx:Fa}};for(let k=0;k<V.length;k+=1)la=Sg(la,V[k]);return E=new J3({props:la}),{c(){y3(E.$$.fragment)},l(k){w3(E.$$.fragment,k)},m(k,O){k3(E,k,O),xe=!0},p(k,[O]){const Wa=O&1?j3(V,[O&1&&BE(k[0]),O&0&&BE(E3)]):{};O&2&&(Wa.$$scope={dirty:O,ctx:k}),E.$set(Wa)},i(k){xe||(C3(E.$$.fragment,k),xe=!0)},o(k){O3(E.$$.fragment,k),xe=!1},d(k){D3(E,k)}}}const E3={title:"Git Gudder",venue:"Shopee SG",venueLink:"https://www.google.com.sg/maps/place/Shopee+Building/@1.2923933,103.7860786,19z/data=!3m1!4b1!4m5!3m4!1s0x31da1b803e3bae77:0x154e17d66760912b!8m2!3d1.2923933!4d103.7866258",occasion:"React Knowledgeable Week 41",occasionLink:"https://github.com/Shopee/shopee-react-knowledgeable/issues/129",slides:"https://slides.com/tanhauhau/git-gudder",date:"2019-08-30",label:"talk",layout:"talk",description:'This week in React Knowledgeable, I did a sharing on Git commands.The title of the talk was called "Git Gudder", because almost a year ago I did a lightning sharing on "Git Gud", (Get Good), this follow up sharing used the comparative of "Git Gud", therefore, "Git Gudder"....'};function Y0(Fa,E,xe){return K3("blog",{image:Z3}),Fa.$$set=V=>{xe(0,E=Sg(Sg({},E),jE(V)))},E=jE(E),[E]}class X0 extends F3{constructor(E){super();W3(this,E,Y0,$0,B3,{})}}export{X0 as default,E3 as metadata};
