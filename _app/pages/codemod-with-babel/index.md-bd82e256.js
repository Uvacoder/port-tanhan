import{S as M,i as V,s as G,C as B,w as J,x as K,y as N,z as Q,A as R,q as W,o as X,B as Y,r as ss,R as Z,e as x,t as v,k as $,c as d,a as m,h as u,d as n,m as C,b as j,g as k,F as p,O as as}from"../../chunks/vendor-569a3c5c.js";import{B as os}from"../../chunks/BlogLayout-17b76cb2.js";import{_ as ns}from"../../chunks/twitter-card-image-a57df29d.js";import"../../chunks/stores-ee936cd4.js";import"../../chunks/WebMentions-968cc380.js";/* empty css                                */function ts(f){let a,r,i,l,o=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;@babel/core&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">promisify</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;util&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">writeFile</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">promisify</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;fs&#39;</span><span style="color: var(--shiki-color-text)">).writeFile);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">code</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.transformFileAsync</span><span style="color: var(--shiki-color-text)">(filename</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    plugins</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">manipulateOptions</span><span style="color: var(--shiki-color-text)">(opts</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parserOpts) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-comment)">/*</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">             add to parserOpts.plugins to enable the syntax</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">             eg: </span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">              jsx, flow, typescript, objectRestSpread, pipelineOperator, </span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">              throwExpressions, optionalChaining, nullishCoalescingOperator, </span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">              exportDefaultFrom, dynamicImport, ...</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">            */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-constant)">parserOpts</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">plugins</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-string-expression)">&#39;classProperties&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-string-expression)">&#39;classPrivateProperties&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            );</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          visitor</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-comment)">// fill in a transformer here</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    ]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">writeFile</span><span style="color: var(--shiki-color-text)">(filename</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> code</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;utf-8&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;)();</span></span></code></pre>`,t,c,I,b,h,P,_,A,F,g,y,q,w,S,T;return{c(){a=x("p"),r=v("A general template that I used:"),i=$(),l=x("div"),t=$(),c=x("p"),I=v("[Updated on 2019-09-13]"),b=$(),h=x("p"),P=v("I have written a "),_=x("a"),A=v("step-by-step guide"),F=v(" on how to write a babel transformation plugin."),g=$(),y=x("p"),q=v("The only difference in this template than the guide is that there's this "),w=x("code"),S=v("manipulateOptions"),T=v(" where you can add additional parser options to enable ES2015+ syntax."),this.h()},l(s){a=d(s,"P",{});var e=m(a);r=u(e,"A general template that I used:"),e.forEach(n),i=C(s),l=d(s,"DIV",{class:!0});var H=m(l);H.forEach(n),t=C(s),c=d(s,"P",{});var D=m(c);I=u(D,"[Updated on 2019-09-13]"),D.forEach(n),b=C(s),h=d(s,"P",{});var E=m(h);P=u(E,"I have written a "),_=d(E,"A",{href:!0});var U=m(_);A=u(U,"step-by-step guide"),U.forEach(n),F=u(E," on how to write a babel transformation plugin."),E.forEach(n),g=C(s),y=d(s,"P",{});var O=m(y);q=u(O,"The only difference in this template than the guide is that there's this "),w=d(O,"CODE",{class:!0});var L=m(w);S=u(L,"manipulateOptions"),L.forEach(n),T=u(O," where you can add additional parser options to enable ES2015+ syntax."),O.forEach(n),this.h()},h(){j(l,"class","code-section"),j(_,"href","/step-by-step-guide-for-writing-a-babel-transformation"),j(w,"class","inline")},m(s,e){k(s,a,e),p(a,r),k(s,i,e),k(s,l,e),l.innerHTML=o,k(s,t,e),k(s,c,e),p(c,I),k(s,b,e),k(s,h,e),p(h,P),p(h,_),p(_,A),p(h,F),k(s,g,e),k(s,y,e),p(y,q),p(y,w),p(w,S),p(y,T)},p:as,d(s){s&&n(a),s&&n(i),s&&n(l),s&&n(t),s&&n(c),s&&n(b),s&&n(h),s&&n(g),s&&n(y)}}}function es(f){let a,r;const i=[f[0],z];let l={$$slots:{default:[ts]},$$scope:{ctx:f}};for(let o=0;o<i.length;o+=1)l=B(l,i[o]);return a=new os({props:l}),{c(){J(a.$$.fragment)},l(o){K(a.$$.fragment,o)},m(o,t){N(a,o,t),r=!0},p(o,[t]){const c=t&1?Q(i,[t&1&&R(o[0]),t&0&&R(z)]):{};t&2&&(c.$$scope={dirty:t,ctx:o}),a.$set(c)},i(o){r||(W(a.$$.fragment,o),r=!0)},o(o){X(a.$$.fragment,o),r=!1},d(o){Y(a,o)}}}const z={title:"Codemod with babel",date:"2019-03-13T08:00:00Z",lastUpdated:"2019-09-13T08:00:00Z",description:"A template which I used",label:"blog"};function ls(f,a,r){return ss("blog",{image:ns}),f.$$set=i=>{r(0,a=B(B({},a),Z(i)))},a=Z(a),[a]}class ys extends M{constructor(a){super();V(this,a,ls,es,G,{})}}export{ys as default,z as metadata};
