import{S as dd,i as ud,s as fd,C as Ah,w as xd,x as wd,y as md,z as gd,A as Iv,q as bd,o as Ed,B as _d,r as Td,Y as jv,e,t,k as l,c as n,a as r,h as a,d as o,m as i,b as p,g as I,H as s,J as Sd}from"../../chunks/vendor-9710682b.js";import{B as Pd}from"../../chunks/BlogLayout-9a08402e.js";import{_ as Id}from"../../chunks/twitter-card-image-a57df29d.js";import"../../chunks/stores-f9c97213.js";import"../../chunks/TableOfContent-2fa6a472.js";/* empty css                                */function jd(so){let h,W,D,cs,_,H,oo,qe,Dt,Ve,Be,Ht,$e,Je,Lt,Ye,Ge,to,Cv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">root</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">document</span><span style="color: var(--shiki-token-function)">.getElementById</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;app&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">root</span><span style="color: var(--shiki-color-text)">.innerHTML </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  &lt;button&gt;-&lt;/button&gt;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  &lt;span&gt;0&lt;/span&gt;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  &lt;button&gt;+&lt;/button&gt;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">decrementBtn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">incrementBtn</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">root</span><span style="color: var(--shiki-token-function)">.querySelectorAll</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;button&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">span</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">root</span><span style="color: var(--shiki-token-function)">.querySelector</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;span&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">decrementBtn</span><span style="color: var(--shiki-token-function)">.addEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;click&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  count</span><span style="color: var(--shiki-token-keyword)">--</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">span</span><span style="color: var(--shiki-color-text)">.innerText </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> count;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">incrementBtn</span><span style="color: var(--shiki-token-function)">.addEventListener</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;click&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  count</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">span</span><span style="color: var(--shiki-color-text)">.innerText </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> count;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,Ke,Ut,Fe,Qe,ao,Av=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">v-on:click</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;counter -= 1&quot;</span><span style="color: var(--shiki-color-text)">&gt;-&lt;/</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">span</span><span style="color: var(--shiki-color-text)">&gt;&#123;&#123; counter &#125;&#125;&lt;/</span><span style="color: var(--shiki-token-string-expression)">span</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">v-on:click</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;counter += 1&quot;</span><span style="color: var(--shiki-color-text)">&gt;+&lt;/</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">data</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        counter</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">script</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,ze,Nt,Ze,Xe,eo,Dv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">App</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">counter</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">setCounter</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">React</span><span style="color: var(--shiki-token-function)">.useState</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &lt;</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">onClick</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">&#123;() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">setCounter</span><span style="color: var(--shiki-color-text)">(counter </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> counter </span><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">)&#125;&gt;-&lt;/</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &lt;</span><span style="color: var(--shiki-token-string-expression)">span</span><span style="color: var(--shiki-color-text)">&gt;&#123;counter&#125;&lt;/</span><span style="color: var(--shiki-token-string-expression)">span</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &lt;</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">onClick</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">&#123;() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">setCounter</span><span style="color: var(--shiki-color-text)">(counter </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> counter </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">)&#125;&gt;+&lt;/</span><span style="color: var(--shiki-token-string-expression)">button</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;/&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  );</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,sn,K,on,Wt,Mt,tn,an,Rt,qt,en,nn,rn,F,ln,no,pn,cn,ro,hn,kn,yn,Vt,vn,dn,Bt,un,fn,$t,Jt,xn,ke,A,Yt,hs,wn,mn,Gt,gn,bn,ks,Kt,En,_n,Ft,Tn,Sn,ns,Qt,Pn,In,zt,jn,On,Cn,L,An,Zt,Dn,Hn,Xt,Ln,Un,sa,Nn,Wn,oa,Mn,Rn,ye,T,ta,ys,qn,Vn,aa,Bn,$n,U,Jn,lo,Yn,Gn,io,Kn,Fn,po,Qn,zn,vs,Zn,Xn,sr,ea,or,tr,co,Hv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Todos</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">todos</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">setTodos</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">useState</span><span style="color: var(--shiki-color-text)">([]);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">totalTodos</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">setTotalTodos</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">useState</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">onAddTodo</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> todo </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">setTodos</span><span style="color: var(--shiki-color-text)">(todos </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">todos</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> todo]);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">setTotalTodos</span><span style="color: var(--shiki-color-text)">(totalTodos </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> totalTodos </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ar,ho,er,na,nr,rr,ra,V,lr,ko,ir,pr,yo,cr,hr,ds,kr,yr,la,vr,ve,u,ia,us,dr,ur,pa,fr,xr,ca,wr,mr,ha,gr,br,ka,Er,_r,vo,Lv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> data </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">render</span><span style="color: var(--shiki-color-text)">(data);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// changes to the data will not be propagated into the render function</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">data </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">render</span><span style="color: var(--shiki-color-text)">(data) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// data is a value</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// however it is changed in the outside world</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// got nothing to do with me</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">setInterval</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(data); </span><span style="color: var(--shiki-token-comment)">// will always console out &#96;1&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1000</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Tr,ya,Sr,Pr,uo,Uv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> data </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123; foo</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)"> &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">render</span><span style="color: var(--shiki-color-text)">(data);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// mutate data some time later</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">setTimeout</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">data</span><span style="color: var(--shiki-color-text)">.foo </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1000</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">render</span><span style="color: var(--shiki-color-text)">(data) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// data is referenced to the same object</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// changes to data.foo can be observed here</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">setInterval</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">data</span><span style="color: var(--shiki-color-text)">.foo); </span><span style="color: var(--shiki-token-comment)">// initially &#96;1&#96;, after mutation, its &#96;2&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1000</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ir,R,jr,fo,Or,Cr,xo,Ar,Dr,wo,Hr,Lr,Ur,va,Nr,Wr,da,Mr,Rr,mo,Q,qr,go,Vr,Br,bo,$r,Jr,Yr,Gr,ua,Kr,de,d,fa,fs,Fr,Qr,xa,zr,Zr,Eo,Nv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getTrackableObject</span><span style="color: var(--shiki-color-text)">(obj) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (obj[</span><span style="color: var(--shiki-token-constant)">Symbol</span><span style="color: var(--shiki-token-function)">.for</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;isTracked&#39;</span><span style="color: var(--shiki-color-text)">)]) </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> obj;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">tracked</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Array</span><span style="color: var(--shiki-token-function)">.isArray</span><span style="color: var(--shiki-color-text)">(obj) </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> [] </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;&#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">key</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> obj) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">Object</span><span style="color: var(--shiki-token-function)">.defineProperty</span><span style="color: var(--shiki-color-text)">(tracked</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      configurable</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      enumerable</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">get</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> obj[key];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">set</span><span style="color: var(--shiki-color-text)">(value) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">typeof</span><span style="color: var(--shiki-color-text)"> value </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;object&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getTrackableObject</span><span style="color: var(--shiki-color-text)">(value);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        obj[key] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> value;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;&#39;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">key</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#39; has changed.&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// marked as &#39;tracked&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">Object</span><span style="color: var(--shiki-token-function)">.defineProperty</span><span style="color: var(--shiki-color-text)">(tracked</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Symbol</span><span style="color: var(--shiki-token-function)">.for</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;isTracked&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    configurable</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    enumerable</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    value</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> tracked;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// track app state</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">appState</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getTrackableObject</span><span style="color: var(--shiki-color-text)">(&#123; foo</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)"> &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">appState</span><span style="color: var(--shiki-color-text)">.foo </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// log &#96;&#39;foo&#39; has changed.&#96;</span></span></code></pre>`,Xr,xs,sl,ws,ol,tl,al,wa,el,nl,z,rl,ms,_o,ll,il,To,pl,cl,hl,P,kl,So,yl,vl,Po,dl,ul,Io,fl,xl,jo,wl,ml,Oo,gl,bl,Co,El,_l,Ao,Tl,Sl,Pl,ma,Il,jl,Do,Wv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">TrackableArrayProto</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Object</span><span style="color: var(--shiki-token-function)">.create</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">Array</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">prototype</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">method</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;push&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;pop&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;splice&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;unshift&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;shift&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;sort&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;reverse&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">]) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">original</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Array</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">prototype</span><span style="color: var(--shiki-color-text)">[method];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  TrackableArrayProto[method] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">result</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">original</span><span style="color: var(--shiki-token-function)">.apply</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> arguments);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;&#39;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">method</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#39; was called&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (method </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;push&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> method </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;unshift&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> method </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;splice&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// TODO track newly added item too!</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> result;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getTrackableArray</span><span style="color: var(--shiki-color-text)">(arr) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">trackedArray</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getTrackableObject</span><span style="color: var(--shiki-color-text)">(arr);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// set the prototype to the patched prototype</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">trackedArray</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">__proto__</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> TrackableArrayProto;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> trackedArray;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// track app state</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">appState</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getTrackableArray</span><span style="color: var(--shiki-color-text)">([</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">appState</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">4</span><span style="color: var(--shiki-color-text)">); </span><span style="color: var(--shiki-token-comment)">// log &#96;&#39;push&#39; was called.&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">appState[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// log &#96;&#39;0&#39; has changed.</span></span></code></pre>`,Ol,gs,Cl,bs,Al,Dl,Hl,ga,Ho,Ll,Es,Ul,Nl,ba,Wl,Ml,Ea,Rl,ql,_s,Vl,Ts,Bl,$l,ue,f,_a,Ss,Jl,Yl,Z,Gl,Lo,Kl,Fl,Uo,Ql,zl,Zl,No,Mv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getTrackableObject</span><span style="color: var(--shiki-color-text)">(obj) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">key</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> obj) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">typeof</span><span style="color: var(--shiki-color-text)"> obj[key] </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;object&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      obj[key] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getTrackableObject</span><span style="color: var(--shiki-color-text)">(obj[key]);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Proxy</span><span style="color: var(--shiki-color-text)">(obj</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">set</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;&#39;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">key</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#39; has changed&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">typeof</span><span style="color: var(--shiki-color-text)"> value </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;object&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getTrackableObject</span><span style="color: var(--shiki-color-text)">(value);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> (target[key] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> value);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">deleteProperty</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;&#39;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">key</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#39; was deleted&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">delete</span><span style="color: var(--shiki-color-text)"> target[key];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">appState</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getTrackableObject</span><span style="color: var(--shiki-color-text)">(&#123; foo</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> bar</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">] &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">appState</span><span style="color: var(--shiki-color-text)">.foo </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// log &#96;&#39;foo&#39; has changed.&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">appState</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">bar</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">4</span><span style="color: var(--shiki-color-text)">); </span><span style="color: var(--shiki-token-comment)">// log &#96;&#39;2&#39; has changed.&#96;, &#96;&#39;length&#39; has changed&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">appState</span><span style="color: var(--shiki-color-text)">.bar[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// log &#96;&#39;0&#39; has changed.</span></span></code></pre>`,Xl,Ta,Sa,si,oi,Ps,ti,Wo,ai,ei,ni,Mo,Rv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">appState</span><span style="color: var(--shiki-color-text)">.foo </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">appState</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">bar</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">4</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">appState</span><span style="color: var(--shiki-color-text)">.bar[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`,ri,Pa,li,ii,X,Ia,pi,ci,ja,hi,ki,Oa,yi,vi,Ro,qv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// track a property of the component</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Component</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(initialState) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.state </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getTrackableObject</span><span style="color: var(--shiki-color-text)">(initialState);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">UserComponent</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Component</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">super</span><span style="color: var(--shiki-color-text)">(&#123; foo</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)"> &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">someHandler</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">state</span><span style="color: var(--shiki-color-text)">.foo </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// Log &#96;&#39;foo&#39; has changed&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">other</span><span style="color: var(--shiki-color-text)">.foo </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// Does not track this</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// track the component instance itself</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Component</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getTrackableObject</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">UserComponent</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Component</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">super</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">someHandler</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.foo </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// Log &#96;&#39;foo&#39; has changed&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,di,ss,ui,qo,fi,xi,Vo,wi,mi,gi,Is,bi,js,Ei,_i,Ti,Ca,Si,fe,k,Aa,rs,Pi,Bo,Ii,ji,Da,Oi,Ci,Os,Ai,$o,Di,Hi,Li,Jo,Vv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// instead of</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">appState</span><span style="color: var(--shiki-color-text)">.one </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;1&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">scheduleUpdate</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// you have to use the frameworks API</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.setAppState</span><span style="color: var(--shiki-color-text)">(&#123; one</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;1&#39;</span><span style="color: var(--shiki-color-text)"> &#125;);</span></span></code></pre>`,Ui,Ha,Ni,Wi,Yo,Bv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Component</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">setAppState</span><span style="color: var(--shiki-color-text)">(appState) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.appState </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> appState;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">scheduleUpdate</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Mi,Cs,Ri,ls,qi,Go,Vi,Bi,$i,La,Ji,Yi,Ko,$v=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">MyComponent</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Component</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">someHandler</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// if setting the state directly, instead of calling &#96;setAppState&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// this will not schedule an update, and thus no reactivity</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">appState</span><span style="color: var(--shiki-color-text)">.one </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;1&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Gi,Ua,Ki,Fi,Fo,Jv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">MyComponent</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Component</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">someHandler</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// this will not schedule update</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">appState</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">list</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;one&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// you need to call setAppState after the .push()</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.setAppState</span><span style="color: var(--shiki-color-text)">(&#123; list</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">appState</span><span style="color: var(--shiki-color-text)">.list &#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// or instead, for a one-liner</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.setAppState</span><span style="color: var(--shiki-color-text)">(&#123; list</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">appState</span><span style="color: var(--shiki-color-text)">.list</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;one&#39;</span><span style="color: var(--shiki-color-text)">] &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Qi,As,zi,Qo,Zi,Xi,sp,q,Na,op,tp,os,ap,zo,ep,np,Zo,rp,lp,ip,Wa,pp,cp,Ma,hp,kp,Ds,yp,Xo,vp,dp,up,st,Yv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">timeout</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> delay) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">setTimeout</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">scheduleUpdate</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> delay);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// user code</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; $timeout &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;my-custom-framework&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">UserComponent</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Component</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">someHandler</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// will schedule update after the callback fires.</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">$timeout</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">appState</span><span style="color: var(--shiki-color-text)">.one </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;1&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1000</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">setTimeout</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// this will not schedule update</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">appState</span><span style="color: var(--shiki-color-text)">.two </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;2&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1000</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,fp,ot,xp,Hs,wp,mp,Ls,gp,tt,bp,Ep,_p,at,Tp,Us,Sp,Pp,N,Ip,et,jp,Op,nt,Cp,Ap,Ra,Dp,Hp,qa,Lp,Up,Np,Va,Wp,Mp,Ns,Ba,Rp,qp,$a,Vp,Bp,ts,$p,rt,Jp,Yp,Ja,Gp,Kp,Fp,Ya,Qp,xe,x,Ga,Ws,zp,Zp,Ka,Xp,sc,lt,Gv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">UserComponent</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">someHandler</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">appState</span><span style="color: var(--shiki-color-text)">.one </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;1&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,oc,Fa,tc,ac,it,Kv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">UserComponent</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">someHandler</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">appState</span><span style="color: var(--shiki-color-text)">.one </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;1&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">scheduleUpdate</span><span style="color: var(--shiki-color-text)">(); </span><span style="color: var(--shiki-token-comment)">// &lt;-- insert this during compilation</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ec,Qa,nc,rc,Ms,lc,pt,ic,pc,cc,ct,Fv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">UserComponent</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">someHandler</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">appState</span><span style="color: var(--shiki-color-text)">.one </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;1&#39;</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// &lt;-- \u2705changes to application state</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.foo </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;bar&#39;</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// &lt;-- \u26D4\uFE0F not changing application state</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">foo</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.appState;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">foo</span><span style="color: var(--shiki-color-text)">.one </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;1&#39;</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// \u{1F937}\u200D\u2642\uFE0Fdo we know that this is changing application state?</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">doSomethingMutable</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.appState);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">doSomethingMutable</span><span style="color: var(--shiki-color-text)">(foo) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">foo</span><span style="color: var(--shiki-color-text)">.one </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;1&#39;</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// \u{1F937}\u200D\u2642\uFE0Fdo we know that this is changing application state?</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">appState</span><span style="color: var(--shiki-color-text)">.obj </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      data</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">increment</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.data </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.data </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// \u{1F937}\u200D\u2642\uFE0Fdo we know that this is changing application state?</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">appState</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">obj</span><span style="color: var(--shiki-token-function)">.increment</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">appState</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">data</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;1&#39;</span><span style="color: var(--shiki-color-text)">); </span><span style="color: var(--shiki-token-comment)">// \u{1F937}\u200D\u2642\uFE0Fis push mutable?</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">appState</span><span style="color: var(--shiki-color-text)">.list </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">push</span><span style="color: var(--shiki-color-text)">(item) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;nothing change&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">appState</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">list</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;1&#39;</span><span style="color: var(--shiki-color-text)">); </span><span style="color: var(--shiki-token-comment)">// \u{1F937}\u200D\u2642\uFE0Fis this push mutable?</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,hc,za,kc,yc,Rs,B,vc,ht,dc,uc,kt,fc,xc,yt,wc,mc,qs,gc,vt,bc,Ec,_c,C,Tc,Vs,Sc,Pc,dt,Ic,jc,ut,Oc,Cc,ft,Ac,Dc,xt,Hc,Lc,Uc,Bs,Nc,$s,Wc,Mc,we,g,Za,Js,Rc,qc,Xa,Vc,Bc,as,se,$c,Jc,wt,Yc,mt,Gc,Kc,oe,Fc,Qc,te,zc,Zc,Ys,ae,Gs,Xc,gt,sh,oh,th,es,ee,ah,eh,ne,nh,rh,Ks,re,lh,ih,le,ph,ch,ie,hh,kh,pe,yh,vh,Fs,dh,ce,uh,fh,xh,wh,mh,Qs,gh,zs,bh,Eh;return{c(){h=e("section"),W=e("h1"),D=e("a"),cs=t("What is Reactivity?"),_=l(),H=e("p"),oo=t("Reactivity is the ability of a web framework to update your view whenever the application state has changed."),qe=l(),Dt=e("p"),Ve=t("It is the core of any modern web framework."),Be=l(),Ht=e("p"),$e=t("To understand what reactivity is, let\u2019s look at an example counter app."),Je=l(),Lt=e("p"),Ye=t("This is how you would write in plain JavaScript:"),Ge=l(),to=e("div"),Ke=l(),Ut=e("p"),Fe=t("This is how you would do it in Vue:"),Qe=l(),ao=e("div"),ze=l(),Nt=e("p"),Ze=t("\u2026 and this in React:"),Xe=l(),eo=e("div"),sn=l(),K=e("p"),on=t("Notice that with a web framework, your code focus more on "),Wt=e("em"),Mt=e("u"),tn=t("updating the application state based on business requirements"),an=t(" and "),Rt=e("em"),qt=e("u"),en=t("describing how our view looks like using templating language or JSX expression"),nn=t(`.
The framework will bridge the application state and the view, updating the view whenever the application state changes.`),rn=l(),F=e("p"),ln=t("No more pesky DOM manipulation statements ("),no=e("code"),pn=t("span.innerText = counter"),cn=t(") sprinkled alongside with state update statements ("),ro=e("code"),hn=t("counter ++;"),kn=t("). No more elusive bugs of unsynchronized view and application state, when one forgets to update the view when updating the application state."),yn=l(),Vt=e("p"),vn=t("All these problems are now past tense when web frameworks now ship in reactivity by default, always making sure that the view is up to date of the application state changes."),dn=l(),Bt=e("p"),un=t("So the main idea we are going to discuss next is,"),fn=l(),$t=e("blockquote"),Jt=e("p"),xn=t("How do web frameworks achieve reactivity?"),ke=l(),A=e("section"),Yt=e("h1"),hs=e("a"),wn=t("The WHEN and the WHAT"),mn=l(),Gt=e("p"),gn=t("To achieve reactivity, the framework has to answer 2 questions"),bn=l(),ks=e("ul"),Kt=e("li"),En=t("When does the application state change?"),_n=l(),Ft=e("li"),Tn=t("What has the application state changed?"),Sn=l(),ns=e("p"),Qt=e("strong"),Pn=t("The WHEN"),In=t(" answers when the framework needs to start to do its job on updating the view. Knowing "),zt=e("strong"),jn=t("the WHAT"),On=t(", allows the framework to optimise it's work, only update part of the view that has changed."),Cn=l(),L=e("p"),An=t("We are going to discuss different strategies to determine "),Zt=e("strong"),Dn=t("the WHEN"),Hn=t(" and "),Xt=e("strong"),Ln=t("the WHAT"),Un=t(", along with code snippets for each strategy. You could combine different strategies to determine "),sa=e("strong"),Nn=t("the WHEN"),Wn=t(" and "),oa=e("strong"),Mn=t("the WHAT"),Rn=t(", yet certain combinations may remind you of some of the popular web frameworks."),ye=l(),T=e("section"),ta=e("h2"),ys=e("a"),qn=t("the WHEN"),Vn=l(),aa=e("p"),Bn=t("The WHEN notifies the framework that the application state has changed, so that the framework knows that it needs to do its job to update the view."),$n=l(),U=e("p"),Jn=t("Different frameworks employ different strategies to detect when the application state has changed, but in essence, it usually boils down to calling a "),lo=e("code"),Yn=t("scheduleUpdate()"),Gn=t(` in the framework.
`),io=e("code"),Kn=t("scheduleUpdate"),Fn=t(" is usually a debounced "),po=e("code"),Qn=t("update"),zn=t(" function of the framework. Because changes in the application state may cause derived state changes, or the framework user may change different parts of the application state consecutively. If the framework updates the view on every state change, it may change the view too frequent, which may be inefficient, or it may have an inconsistent view ("),vs=e("a"),Zn=t("may result in tearing"),Xn=t(")."),sr=l(),ea=e("p"),or=t("Imagine this contrived React example:"),tr=l(),co=e("div"),ar=l(),ho=e("p"),er=t("If the framework synchronously updates the todos in the view then updates the total todos count, it may have a split second where the todos and the count go out of sync. "),na=e("em"),nr=t("(Although it may seem impossible even in this contrived example, but you get the point. )"),rr=l(),ra=e("blockquote"),V=e("p"),lr=t("By the way, you should not set "),ko=e("code"),ir=t("totalTodos"),pr=t(" this way, you should derived it from "),yo=e("code"),cr=t("todos.length"),hr=t(", see "),ds=e("a"),kr=t(`"Don't Sync State. Derive it!" by Kent C. Dodds.`),yr=l(),la=e("p"),vr=t("So how do you know when the application state has changed?"),ve=l(),u=e("section"),ia=e("h2"),us=e("a"),dr=t("Mutation Tracking"),ur=l(),pa=e("p"),fr=t("So we want to know when the application state has changed? Let\u2019s track it!"),xr=l(),ca=e("p"),wr=t("First of all, why is it called mutation tracking? That\u2019s because we can only track mutation."),mr=l(),ha=e("p"),gr=t("By the word mutation, it infers that our application state has to be an object, because you can\u2019t mutate a primitive."),br=l(),ka=e("p"),Er=t("Primitives like numbers, string, boolean, are passed by value into a function. So, if you reassign the primitive to another value, the reassignment will never be able to be observed within the function:"),_r=l(),vo=e("div"),Tr=l(),ya=e("p"),Sr=t("Object on the other hand, is passed by reference. So any changes to the same object can be observed from within:"),Pr=l(),uo=e("div"),Ir=l(),R=e("p"),jr=t("This is also why most frameworks\u2019 application state is accessed via "),fo=e("code"),Or=t("this"),Cr=t(", because "),xo=e("code"),Ar=t("this"),Dr=t(" is an object, changes to "),wo=e("code"),Hr=t("this.appState"),Lr=t(" can be observed / tracked by the framework."),Ur=l(),va=e("p"),Nr=t("Now we understand why is it called mutation tracking, let\u2019s take a look at how mutation tracking is implemented."),Wr=l(),da=e("p"),Mr=t("We are going to look at the two common types of object in JavaScript, the plain object and the array."),Rr=l(),mo=e("p"),Q=e("em"),qr=t("(Though if you "),go=e("code"),Vr=t("typeof"),Br=t(" for both object or array, they are both "),bo=e("code"),$r=t('"object"'),Jr=t(")"),Yr=t("."),Gr=l(),ua=e("p"),Kr=t("With the introduction of ES6 Proxy, the mutation tracking method has become much straightforward. But still, let\u2019s take a look at how you can implement a mutation tracking with / without ES6 Proxy."),de=l(),d=e("section"),fa=e("h3"),fs=e("a"),Fr=t("Prior Proxy"),Qr=l(),xa=e("p"),zr=t("To track mutation without proxy, we can define a custom getters and setters for all the property of the object. So whenever the framework user changes the value of a property, the custom setter will be called, and we will know that something has changed:"),Zr=l(),Eo=e("div"),Xr=l(),xs=e("p"),sl=t("Inspired by "),ws=e("a"),ol=t("Vue.js 2.0\u2019s observer"),tl=t("."),al=l(),wa=e("p"),el=t("However, you may notice that if we are defining getters and setters on the existing properties of the object, we may miss out changes via adding or deleting property from the object."),nl=l(),z=e("p"),rl=t("This is something you can\u2019t fix without a better JavaScript API, so a probable workaround for this caveat is to provide a helper function instead. For example, in Vue, you need to use the helper function "),ms=e("a"),_o=e("code"),ll=t("Vue.set(object, propertyName, value)"),il=t(" instead of "),To=e("code"),pl=t("object[propertyName] = value"),cl=t("."),hl=l(),P=e("p"),kl=t("Tracking mutation of an array is similar to mutation tracking for an object. However, besides being able to change the array item through assignment, it is possible to mutate an array through its mutating method, eg: "),So=e("code"),yl=t("push"),vl=t(", "),Po=e("code"),dl=t("pop"),ul=t(", "),Io=e("code"),fl=t("splice"),xl=t(", "),jo=e("code"),wl=t("unshift"),ml=t(", "),Oo=e("code"),gl=t("shift"),bl=t(", "),Co=e("code"),El=t("sort"),_l=t(" and "),Ao=e("code"),Tl=t("reverse"),Sl=t("."),Pl=l(),ma=e("p"),Il=t("To track changes made by these methods, you have to patch them:"),jl=l(),Do=e("div"),Ol=l(),gs=e("p"),Cl=t("Inspired by "),bs=e("a"),Al=t("Vue.js 2.0\u2019s array observer"),Dl=t("."),Hl=l(),ga=e("blockquote"),Ho=e("p"),Ll=t("CodeSandbox for "),Es=e("a"),Ul=t("mutation tracking of object and array"),Nl=l(),ba=e("p"),Wl=t("In summary, to track mutation on an object or array without Proxy, you need to define custom getters/setters for all properties, so that you can capture when the property is being set. Besides that, you need to patch all the mutating methods as well, because that will mutate your object without triggering the custom setter."),Ml=l(),Ea=e("p"),Rl=t("Yet, there\u2019s still edge cases that cannot be covered, such as adding new property or deleting property."),ql=l(),_s=e("p"),Vl=t("There\u2019s where "),Ts=e("a"),Bl=t("ES6 Proxy"),$l=t(" comes to help."),ue=l(),f=e("section"),_a=e("h3"),Ss=e("a"),Jl=t("With Proxy"),Yl=l(),Z=e("p"),Gl=t("Proxy allow us to define custom behaviours on fundamental operations on the target object. This is great for mutation tracking, because Proxy allow us to intercept setting and deleting property, irrelevant to whether we uses index assignment, "),Lo=e("code"),Kl=t("obj[key] = value"),Fl=t(" or mutating methods, "),Uo=e("code"),Ql=t("obj.push(value)"),zl=t(":"),Zl=l(),No=e("div"),Xl=l(),Ta=e("p"),Sa=e("strong"),si=t("So how do we use mutation tracking?"),oi=l(),Ps=e("p"),ti=t("The good thing about mutation tracking is that, if you noticed in the example above, the framework user is unaware of the tracking and treats "),Wo=e("code"),ai=t("appState"),ei=t(" as a normal object:"),ni=l(),Mo=e("div"),ri=l(),Pa=e("p"),li=t("We can set up the tracking during the initialisation of the component, either:"),ii=l(),X=e("ul"),Ia=e("li"),pi=t("track a property of the component,"),ci=l(),ja=e("li"),hi=t("track the component instance itself,"),ki=l(),Oa=e("li"),yi=t("or something in between the above"),vi=l(),Ro=e("div"),di=l(),ss=e("p"),ui=t("Once you\u2019ve able to track application state changes, the next thing to do is to call "),qo=e("code"),fi=t("scheduleUpdate"),xi=t(" instead of "),Vo=e("code"),wi=t("console.log"),mi=t("."),gi=l(),Is=e("p"),bi=t("You may concern whether all these complexities is worth the effort. Or you may be worried that "),js=e("a"),Ei=t("Proxy is not supported to older browsers"),_i=t("."),Ti=l(),Ca=e("p"),Si=t("Your concern is not entirely baseless. Not all frameworks use mutation tracking."),fe=l(),k=e("section"),Aa=e("h3"),rs=e("a"),Pi=t("Just call "),Bo=e("code"),Ii=t("scheduleUpdate"),ji=l(),Da=e("p"),Oi=t("Some frameworks design their API in the way such that it \u201Ctricks\u201D the framework user to tell the framework that the application state has changed."),Ci=l(),Os=e("p"),Ai=t("Instead of remembering to call "),$o=e("code"),Di=t("scheduleUpdate"),Hi=t(" whenever you change the application state, the framework forces you to use their API to change application state:"),Li=l(),Jo=e("div"),Ui=l(),Ha=e("p"),Ni=t("This gives us a much simpler design and less edge case to handle:"),Wi=l(),Yo=e("div"),Mi=l(),Cs=e("p"),Ri=t("Inspired by "),ls=e("a"),qi=t("React\u2019s "),Go=e("code"),Vi=t("setState"),Bi=t("."),$i=l(),La=e("p"),Ji=t("However, this may trip new developers into the framework:"),Yi=l(),Ko=e("div"),Gi=l(),Ua=e("p"),Ki=t("... and it maybe a bit clumsy when adding / removing items from an array:"),Fi=l(),Fo=e("div"),Qi=l(),As=e("p"),zi=t("A different approach that may have the best of both world is to insert "),Qo=e("code"),Zi=t("scheduleUpdate"),Xi=t(" in scenarios that you think that changes may most likely happen:"),sp=l(),q=e("ul"),Na=e("li"),op=t("Event handlers"),tp=l(),os=e("li"),ap=t("Timeout (eg: "),zo=e("code"),ep=t("setTimeout"),np=t(", "),Zo=e("code"),rp=t("setInterval"),lp=t(", ...)"),ip=l(),Wa=e("li"),pp=t("API handling, promises handling"),cp=l(),Ma=e("li"),hp=t("..."),kp=l(),Ds=e("p"),yp=t("So, instead of enforcing framework users to use "),Xo=e("code"),vp=t("setAppState()"),dp=t(`, framework users should use the
custom timeouts, api handlers, ...:`),up=l(),st=e("div"),fp=l(),ot=e("p"),xp=t("Inspired by "),Hs=e("a"),wp=t("AngularJS\u2019s \\$timeout"),mp=l(),Ls=e("p"),gp=t("Your framework user can now be free to change the application state the way he wants, as long as the changes are done within your custom handlers. Because at the end of the handler, you will call "),tt=e("code"),bp=t("scheduleUpdate()"),Ep=t("."),_p=l(),at=e("p"),Tp=t("Similarly, this may trip new developers into the framework too! Try search "),Us=e("a"),Sp=t('"AngularJS $timeout vs window.setTimeout"'),Pp=l(),N=e("p"),Ip=t("You may think, what if there are no state changes in the handler function, wouldn\u2019t calling an extra "),et=e("code"),jp=t("scheduleUpdate()"),Op=t(" be inefficient? Well so far, we haven\u2019t discussed what\u2019s happening in "),nt=e("code"),Cp=t("scheduleUpdate()"),Ap=t(", we can check "),Ra=e("strong"),Dp=t("what has changed"),Hp=t(" (which will be covered in the next section)"),qa=e("strong"),Lp=t(","),Up=t(" and if there\u2019s nothing change, we can skip the subsequent steps."),Np=l(),Va=e("p"),Wp=t("If you look at the strategies that we have tried so far, you may have noticed a common struggle:"),Mp=l(),Ns=e("ul"),Ba=e("li"),Rp=t("allow framework user to change the application state in any way he wants"),qp=l(),$a=e("li"),Vp=t("achieve reactivity without much runtime complexity."),Bp=l(),ts=e("p"),$p=t("At this point, you got to agree that enforcing framework developers to call "),rt=e("code"),Jp=t("setAppState"),Yp=t(" whenever they want to change the application state, requires "),Ja=e("strong"),Gp=t("less runtime complexity"),Kp=t(" from the framework, and it\u2019s unlikely to have any corner cases or caveats that need to handle."),Fp=l(),Ya=e("p"),Qp=t("If the dilemma is between developer expressiveness versus runtime complexity, probably we could get the best of both worlds by shifting the complexity from runtime to build time?"),xe=l(),x=e("section"),Ga=e("h3"),Ws=e("a"),zp=t("Static analysis"),Zp=l(),Ka=e("p"),Xp=t("If we have a compiler that allow framework users to write:"),sc=l(),lt=e("div"),oc=l(),Fa=e("p"),tc=t("and compiles it to:"),ac=l(),it=e("div"),ec=l(),Qa=e("p"),nc=t("Then, we would really have best of both worlds! \u{1F60E}"),rc=l(),Ms=e("p"),lc=t("Let\u2019s look at different scenarios that the framework user would write, and see whether we know when to insert the "),pt=e("code"),ic=t("scheduleUpdate()"),pc=t(":"),cc=l(),ct=e("div"),hc=l(),za=e("p"),kc=t("Allow me to summarise some complexities faced in the example above:"),yc=l(),Rs=e("ul"),B=e("li"),vc=t("It is easy to track direct changes to the application state, but it is extremely difficult to track changes made indirectly, eg: "),ht=e("code"),dc=t("foo.one"),uc=t(", "),kt=e("code"),fc=t("doSomethingMutable(this.appState)"),xc=t(" or "),yt=e("code"),wc=t("this.appState.obj.increment()"),mc=l(),qs=e("li"),gc=t("It is easy to track changes through assignment statements, but extremely difficult to track changes made through mutating methods, eg: "),vt=e("code"),bc=t("this.appState.list.push('1')"),Ec=t(", I mean how do you know the method is mutating?"),_c=l(),C=e("p"),Tc=t("So, for "),Vs=e("a"),Sc=t("Svelte"),Pc=t(", one of the frameworks that use static analysis to achieve reactivity, it only ensures reactivity through assignment operators (eg: "),dt=e("code"),Ic=t("="),jc=t(", "),ut=e("code"),Oc=t("+="),Cc=t(", \u2026) and unary arithmetic operators (eg: "),ft=e("code"),Ac=t("++"),Dc=t(" and "),xt=e("code"),Hc=t("--"),Lc=t(")."),Uc=l(),Bs=e("p"),Nc=t("I believe that there\u2019s room yet to be explored in this space, especially at the "),$s=e("a"),Wc=t("rise of TypeScript"),Mc=t(", we may be able to understand our application state better through static types."),we=l(),g=e("section"),Za=e("h2"),Js=e("a"),Rc=t("Summary"),qc=l(),Xa=e("p"),Vc=t("We\u2019ve gone through different strategies of knowing when the application state has changed:"),Bc=l(),as=e("ul"),se=e("li"),$c=t("mutation tracking"),Jc=l(),wt=e("li"),Yc=t("just call "),mt=e("code"),Gc=t("scheduleUpdate"),Kc=l(),oe=e("li"),Fc=t("static analysis"),Qc=l(),te=e("p"),zc=t("Different strategies manifests itself in terms of the API of the framework:"),Zc=l(),Ys=e("ul"),ae=e("li"),Gs=e("p"),Xc=t("Is the framework user going to change the application state with simple object manipulation? or have to use API like "),gt=e("code"),sh=t("setAppState()"),oh=t("?"),th=l(),es=e("li"),ee=e("p"),ah=t("Is there caveats that the framework user needs to be aware of?"),eh=l(),ne=e("p"),nh=t("For example:"),rh=l(),Ks=e("ul"),re=e("li"),lh=t("Can only use assignment statement to achieve reactivity?"),ih=l(),le=e("li"),ph=t("Does framework user need to use a helper function for adding new reactive property to the application state?"),ch=l(),ie=e("p"),hh=t("Knowing when an application state has changed, allow frameworks to know when to update our view. Yet, to optimise the updates, frameworks need to know what has changed in the application state."),kh=l(),pe=e("p"),yh=t("Are we going to remove and recreate every DOM element in the view? Do we know that which part of the view is going to change based on what has changed in the application state?"),vh=l(),Fs=e("p"),dh=t("That is, if we know "),ce=e("strong"),uh=t("the WHAT"),fh=t("."),xh=l(),wh=e("hr"),mh=l(),Qs=e("p"),gh=t("I\u2019d like to thank "),zs=e("a"),bh=t("Rich Harris"),Eh=t(" for pointing out some inaccuracies in the previous version of this article and providing valuable feedbacks. All the remaining errors are mine.."),this.h()},l(c){h=n(c,"SECTION",{});var y=r(h);W=n(y,"H1",{});var Dh=r(W);D=n(Dh,"A",{href:!0,id:!0});var Hh=r(D);cs=a(Hh,"What is Reactivity?"),Hh.forEach(o),Dh.forEach(o),_=i(y),H=n(y,"P",{});var Lh=r(H);oo=a(Lh,"Reactivity is the ability of a web framework to update your view whenever the application state has changed."),Lh.forEach(o),qe=i(y),Dt=n(y,"P",{});var Uh=r(Dt);Ve=a(Uh,"It is the core of any modern web framework."),Uh.forEach(o),Be=i(y),Ht=n(y,"P",{});var Nh=r(Ht);$e=a(Nh,"To understand what reactivity is, let\u2019s look at an example counter app."),Nh.forEach(o),Je=i(y),Lt=n(y,"P",{});var Wh=r(Lt);Ye=a(Wh,"This is how you would write in plain JavaScript:"),Wh.forEach(o),Ge=i(y),to=n(y,"DIV",{class:!0});var Qv=r(to);Qv.forEach(o),Ke=i(y),Ut=n(y,"P",{});var Mh=r(Ut);Fe=a(Mh,"This is how you would do it in Vue:"),Mh.forEach(o),Qe=i(y),ao=n(y,"DIV",{class:!0});var zv=r(ao);zv.forEach(o),ze=i(y),Nt=n(y,"P",{});var Rh=r(Nt);Ze=a(Rh,"\u2026 and this in React:"),Rh.forEach(o),Xe=i(y),eo=n(y,"DIV",{class:!0});var Zv=r(eo);Zv.forEach(o),sn=i(y),K=n(y,"P",{});var bt=r(K);on=a(bt,"Notice that with a web framework, your code focus more on "),Wt=n(bt,"EM",{});var qh=r(Wt);Mt=n(qh,"U",{});var Vh=r(Mt);tn=a(Vh,"updating the application state based on business requirements"),Vh.forEach(o),qh.forEach(o),an=a(bt," and "),Rt=n(bt,"EM",{});var Bh=r(Rt);qt=n(Bh,"U",{});var $h=r(qt);en=a($h,"describing how our view looks like using templating language or JSX expression"),$h.forEach(o),Bh.forEach(o),nn=a(bt,`.
The framework will bridge the application state and the view, updating the view whenever the application state changes.`),bt.forEach(o),rn=i(y),F=n(y,"P",{});var Et=r(F);ln=a(Et,"No more pesky DOM manipulation statements ("),no=n(Et,"CODE",{class:!0});var Jh=r(no);pn=a(Jh,"span.innerText = counter"),Jh.forEach(o),cn=a(Et,") sprinkled alongside with state update statements ("),ro=n(Et,"CODE",{class:!0});var Yh=r(ro);hn=a(Yh,"counter ++;"),Yh.forEach(o),kn=a(Et,"). No more elusive bugs of unsynchronized view and application state, when one forgets to update the view when updating the application state."),Et.forEach(o),yn=i(y),Vt=n(y,"P",{});var Gh=r(Vt);vn=a(Gh,"All these problems are now past tense when web frameworks now ship in reactivity by default, always making sure that the view is up to date of the application state changes."),Gh.forEach(o),dn=i(y),Bt=n(y,"P",{});var Kh=r(Bt);un=a(Kh,"So the main idea we are going to discuss next is,"),Kh.forEach(o),fn=i(y),$t=n(y,"BLOCKQUOTE",{});var Fh=r($t);Jt=n(Fh,"P",{});var Qh=r(Jt);xn=a(Qh,"How do web frameworks achieve reactivity?"),Qh.forEach(o),Fh.forEach(o),y.forEach(o),ke=i(c),A=n(c,"SECTION",{});var $=r(A);Yt=n($,"H1",{});var zh=r(Yt);hs=n(zh,"A",{href:!0,id:!0});var Zh=r(hs);wn=a(Zh,"The WHEN and the WHAT"),Zh.forEach(o),zh.forEach(o),mn=i($),Gt=n($,"P",{});var Xh=r(Gt);gn=a(Xh,"To achieve reactivity, the framework has to answer 2 questions"),Xh.forEach(o),bn=i($),ks=n($,"UL",{});var me=r(ks);Kt=n(me,"LI",{});var sk=r(Kt);En=a(sk,"When does the application state change?"),sk.forEach(o),_n=i(me),Ft=n(me,"LI",{});var ok=r(Ft);Tn=a(ok,"What has the application state changed?"),ok.forEach(o),me.forEach(o),Sn=i($),ns=n($,"P",{});var he=r(ns);Qt=n(he,"STRONG",{});var tk=r(Qt);Pn=a(tk,"The WHEN"),tk.forEach(o),In=a(he," answers when the framework needs to start to do its job on updating the view. Knowing "),zt=n(he,"STRONG",{});var ak=r(zt);jn=a(ak,"the WHAT"),ak.forEach(o),On=a(he,", allows the framework to optimise it's work, only update part of the view that has changed."),he.forEach(o),Cn=i($),L=n($,"P",{});var J=r(L);An=a(J,"We are going to discuss different strategies to determine "),Zt=n(J,"STRONG",{});var ek=r(Zt);Dn=a(ek,"the WHEN"),ek.forEach(o),Hn=a(J," and "),Xt=n(J,"STRONG",{});var nk=r(Xt);Ln=a(nk,"the WHAT"),nk.forEach(o),Un=a(J,", along with code snippets for each strategy. You could combine different strategies to determine "),sa=n(J,"STRONG",{});var rk=r(sa);Nn=a(rk,"the WHEN"),rk.forEach(o),Wn=a(J," and "),oa=n(J,"STRONG",{});var lk=r(oa);Mn=a(lk,"the WHAT"),lk.forEach(o),Rn=a(J,", yet certain combinations may remind you of some of the popular web frameworks."),J.forEach(o),$.forEach(o),ye=i(c),T=n(c,"SECTION",{});var j=r(T);ta=n(j,"H2",{});var ik=r(ta);ys=n(ik,"A",{href:!0,id:!0});var pk=r(ys);qn=a(pk,"the WHEN"),pk.forEach(o),ik.forEach(o),Vn=i(j),aa=n(j,"P",{});var ck=r(aa);Bn=a(ck,"The WHEN notifies the framework that the application state has changed, so that the framework knows that it needs to do its job to update the view."),ck.forEach(o),$n=i(j),U=n(j,"P",{});var Y=r(U);Jn=a(Y,"Different frameworks employ different strategies to detect when the application state has changed, but in essence, it usually boils down to calling a "),lo=n(Y,"CODE",{class:!0});var hk=r(lo);Yn=a(hk,"scheduleUpdate()"),hk.forEach(o),Gn=a(Y,` in the framework.
`),io=n(Y,"CODE",{class:!0});var kk=r(io);Kn=a(kk,"scheduleUpdate"),kk.forEach(o),Fn=a(Y," is usually a debounced "),po=n(Y,"CODE",{class:!0});var yk=r(po);Qn=a(yk,"update"),yk.forEach(o),zn=a(Y," function of the framework. Because changes in the application state may cause derived state changes, or the framework user may change different parts of the application state consecutively. If the framework updates the view on every state change, it may change the view too frequent, which may be inefficient, or it may have an inconsistent view ("),vs=n(Y,"A",{href:!0,rel:!0});var vk=r(vs);Zn=a(vk,"may result in tearing"),vk.forEach(o),Xn=a(Y,")."),Y.forEach(o),sr=i(j),ea=n(j,"P",{});var dk=r(ea);or=a(dk,"Imagine this contrived React example:"),dk.forEach(o),tr=i(j),co=n(j,"DIV",{class:!0});var Xv=r(co);Xv.forEach(o),ar=i(j),ho=n(j,"P",{});var _h=r(ho);er=a(_h,"If the framework synchronously updates the todos in the view then updates the total todos count, it may have a split second where the todos and the count go out of sync. "),na=n(_h,"EM",{});var uk=r(na);nr=a(uk,"(Although it may seem impossible even in this contrived example, but you get the point. )"),uk.forEach(o),_h.forEach(o),rr=i(j),ra=n(j,"BLOCKQUOTE",{});var fk=r(ra);V=n(fk,"P",{});var Zs=r(V);lr=a(Zs,"By the way, you should not set "),ko=n(Zs,"CODE",{class:!0});var xk=r(ko);ir=a(xk,"totalTodos"),xk.forEach(o),pr=a(Zs," this way, you should derived it from "),yo=n(Zs,"CODE",{class:!0});var wk=r(yo);cr=a(wk,"todos.length"),wk.forEach(o),hr=a(Zs,", see "),ds=n(Zs,"A",{href:!0,rel:!0});var mk=r(ds);kr=a(mk,`"Don't Sync State. Derive it!" by Kent C. Dodds.`),mk.forEach(o),Zs.forEach(o),fk.forEach(o),yr=i(j),la=n(j,"P",{});var gk=r(la);vr=a(gk,"So how do you know when the application state has changed?"),gk.forEach(o),j.forEach(o),ve=i(c),u=n(c,"SECTION",{});var m=r(u);ia=n(m,"H2",{});var bk=r(ia);us=n(bk,"A",{href:!0,id:!0});var Ek=r(us);dr=a(Ek,"Mutation Tracking"),Ek.forEach(o),bk.forEach(o),ur=i(m),pa=n(m,"P",{});var _k=r(pa);fr=a(_k,"So we want to know when the application state has changed? Let\u2019s track it!"),_k.forEach(o),xr=i(m),ca=n(m,"P",{});var Tk=r(ca);wr=a(Tk,"First of all, why is it called mutation tracking? That\u2019s because we can only track mutation."),Tk.forEach(o),mr=i(m),ha=n(m,"P",{});var Sk=r(ha);gr=a(Sk,"By the word mutation, it infers that our application state has to be an object, because you can\u2019t mutate a primitive."),Sk.forEach(o),br=i(m),ka=n(m,"P",{});var Pk=r(ka);Er=a(Pk,"Primitives like numbers, string, boolean, are passed by value into a function. So, if you reassign the primitive to another value, the reassignment will never be able to be observed within the function:"),Pk.forEach(o),_r=i(m),vo=n(m,"DIV",{class:!0});var sd=r(vo);sd.forEach(o),Tr=i(m),ya=n(m,"P",{});var Ik=r(ya);Sr=a(Ik,"Object on the other hand, is passed by reference. So any changes to the same object can be observed from within:"),Ik.forEach(o),Pr=i(m),uo=n(m,"DIV",{class:!0});var od=r(uo);od.forEach(o),Ir=i(m),R=n(m,"P",{});var is=r(R);jr=a(is,"This is also why most frameworks\u2019 application state is accessed via "),fo=n(is,"CODE",{class:!0});var jk=r(fo);Or=a(jk,"this"),jk.forEach(o),Cr=a(is,", because "),xo=n(is,"CODE",{class:!0});var Ok=r(xo);Ar=a(Ok,"this"),Ok.forEach(o),Dr=a(is," is an object, changes to "),wo=n(is,"CODE",{class:!0});var Ck=r(wo);Hr=a(Ck,"this.appState"),Ck.forEach(o),Lr=a(is," can be observed / tracked by the framework."),is.forEach(o),Ur=i(m),va=n(m,"P",{});var Ak=r(va);Nr=a(Ak,"Now we understand why is it called mutation tracking, let\u2019s take a look at how mutation tracking is implemented."),Ak.forEach(o),Wr=i(m),da=n(m,"P",{});var Dk=r(da);Mr=a(Dk,"We are going to look at the two common types of object in JavaScript, the plain object and the array."),Dk.forEach(o),Rr=i(m),mo=n(m,"P",{});var Th=r(mo);Q=n(Th,"EM",{});var _t=r(Q);qr=a(_t,"(Though if you "),go=n(_t,"CODE",{class:!0});var Hk=r(go);Vr=a(Hk,"typeof"),Hk.forEach(o),Br=a(_t," for both object or array, they are both "),bo=n(_t,"CODE",{class:!0});var Lk=r(bo);$r=a(Lk,'"object"'),Lk.forEach(o),Jr=a(_t,")"),_t.forEach(o),Yr=a(Th,"."),Th.forEach(o),Gr=i(m),ua=n(m,"P",{});var Uk=r(ua);Kr=a(Uk,"With the introduction of ES6 Proxy, the mutation tracking method has become much straightforward. But still, let\u2019s take a look at how you can implement a mutation tracking with / without ES6 Proxy."),Uk.forEach(o),m.forEach(o),de=i(c),d=n(c,"SECTION",{});var w=r(d);fa=n(w,"H3",{});var Nk=r(fa);fs=n(Nk,"A",{href:!0,id:!0});var Wk=r(fs);Fr=a(Wk,"Prior Proxy"),Wk.forEach(o),Nk.forEach(o),Qr=i(w),xa=n(w,"P",{});var Mk=r(xa);zr=a(Mk,"To track mutation without proxy, we can define a custom getters and setters for all the property of the object. So whenever the framework user changes the value of a property, the custom setter will be called, and we will know that something has changed:"),Mk.forEach(o),Zr=i(w),Eo=n(w,"DIV",{class:!0});var td=r(Eo);td.forEach(o),Xr=i(w),xs=n(w,"P",{});var ge=r(xs);sl=a(ge,"Inspired by "),ws=n(ge,"A",{href:!0,rel:!0});var Rk=r(ws);ol=a(Rk,"Vue.js 2.0\u2019s observer"),Rk.forEach(o),tl=a(ge,"."),ge.forEach(o),al=i(w),wa=n(w,"P",{});var qk=r(wa);el=a(qk,"However, you may notice that if we are defining getters and setters on the existing properties of the object, we may miss out changes via adding or deleting property from the object."),qk.forEach(o),nl=i(w),z=n(w,"P",{});var Tt=r(z);rl=a(Tt,"This is something you can\u2019t fix without a better JavaScript API, so a probable workaround for this caveat is to provide a helper function instead. For example, in Vue, you need to use the helper function "),ms=n(Tt,"A",{href:!0,rel:!0});var Vk=r(ms);_o=n(Vk,"CODE",{class:!0});var Bk=r(_o);ll=a(Bk,"Vue.set(object, propertyName, value)"),Bk.forEach(o),Vk.forEach(o),il=a(Tt," instead of "),To=n(Tt,"CODE",{class:!0});var $k=r(To);pl=a($k,"object[propertyName] = value"),$k.forEach(o),cl=a(Tt,"."),Tt.forEach(o),hl=i(w),P=n(w,"P",{});var O=r(P);kl=a(O,"Tracking mutation of an array is similar to mutation tracking for an object. However, besides being able to change the array item through assignment, it is possible to mutate an array through its mutating method, eg: "),So=n(O,"CODE",{class:!0});var Jk=r(So);yl=a(Jk,"push"),Jk.forEach(o),vl=a(O,", "),Po=n(O,"CODE",{class:!0});var Yk=r(Po);dl=a(Yk,"pop"),Yk.forEach(o),ul=a(O,", "),Io=n(O,"CODE",{class:!0});var Gk=r(Io);fl=a(Gk,"splice"),Gk.forEach(o),xl=a(O,", "),jo=n(O,"CODE",{class:!0});var Kk=r(jo);wl=a(Kk,"unshift"),Kk.forEach(o),ml=a(O,", "),Oo=n(O,"CODE",{class:!0});var Fk=r(Oo);gl=a(Fk,"shift"),Fk.forEach(o),bl=a(O,", "),Co=n(O,"CODE",{class:!0});var Qk=r(Co);El=a(Qk,"sort"),Qk.forEach(o),_l=a(O," and "),Ao=n(O,"CODE",{class:!0});var zk=r(Ao);Tl=a(zk,"reverse"),zk.forEach(o),Sl=a(O,"."),O.forEach(o),Pl=i(w),ma=n(w,"P",{});var Zk=r(ma);Il=a(Zk,"To track changes made by these methods, you have to patch them:"),Zk.forEach(o),jl=i(w),Do=n(w,"DIV",{class:!0});var ad=r(Do);ad.forEach(o),Ol=i(w),gs=n(w,"P",{});var be=r(gs);Cl=a(be,"Inspired by "),bs=n(be,"A",{href:!0,rel:!0});var Xk=r(bs);Al=a(Xk,"Vue.js 2.0\u2019s array observer"),Xk.forEach(o),Dl=a(be,"."),be.forEach(o),Hl=i(w),ga=n(w,"BLOCKQUOTE",{});var sy=r(ga);Ho=n(sy,"P",{});var Sh=r(Ho);Ll=a(Sh,"CodeSandbox for "),Es=n(Sh,"A",{href:!0,rel:!0});var oy=r(Es);Ul=a(oy,"mutation tracking of object and array"),oy.forEach(o),Sh.forEach(o),sy.forEach(o),Nl=i(w),ba=n(w,"P",{});var ty=r(ba);Wl=a(ty,"In summary, to track mutation on an object or array without Proxy, you need to define custom getters/setters for all properties, so that you can capture when the property is being set. Besides that, you need to patch all the mutating methods as well, because that will mutate your object without triggering the custom setter."),ty.forEach(o),Ml=i(w),Ea=n(w,"P",{});var ay=r(Ea);Rl=a(ay,"Yet, there\u2019s still edge cases that cannot be covered, such as adding new property or deleting property."),ay.forEach(o),ql=i(w),_s=n(w,"P",{});var Ee=r(_s);Vl=a(Ee,"There\u2019s where "),Ts=n(Ee,"A",{href:!0,rel:!0});var ey=r(Ts);Bl=a(ey,"ES6 Proxy"),ey.forEach(o),$l=a(Ee," comes to help."),Ee.forEach(o),w.forEach(o),ue=i(c),f=n(c,"SECTION",{});var b=r(f);_a=n(b,"H3",{});var ny=r(_a);Ss=n(ny,"A",{href:!0,id:!0});var ry=r(Ss);Jl=a(ry,"With Proxy"),ry.forEach(o),ny.forEach(o),Yl=i(b),Z=n(b,"P",{});var St=r(Z);Gl=a(St,"Proxy allow us to define custom behaviours on fundamental operations on the target object. This is great for mutation tracking, because Proxy allow us to intercept setting and deleting property, irrelevant to whether we uses index assignment, "),Lo=n(St,"CODE",{class:!0});var ly=r(Lo);Kl=a(ly,"obj[key] = value"),ly.forEach(o),Fl=a(St," or mutating methods, "),Uo=n(St,"CODE",{class:!0});var iy=r(Uo);Ql=a(iy,"obj.push(value)"),iy.forEach(o),zl=a(St,":"),St.forEach(o),Zl=i(b),No=n(b,"DIV",{class:!0});var ed=r(No);ed.forEach(o),Xl=i(b),Ta=n(b,"P",{});var py=r(Ta);Sa=n(py,"STRONG",{});var cy=r(Sa);si=a(cy,"So how do we use mutation tracking?"),cy.forEach(o),py.forEach(o),oi=i(b),Ps=n(b,"P",{});var _e=r(Ps);ti=a(_e,"The good thing about mutation tracking is that, if you noticed in the example above, the framework user is unaware of the tracking and treats "),Wo=n(_e,"CODE",{class:!0});var hy=r(Wo);ai=a(hy,"appState"),hy.forEach(o),ei=a(_e," as a normal object:"),_e.forEach(o),ni=i(b),Mo=n(b,"DIV",{class:!0});var nd=r(Mo);nd.forEach(o),ri=i(b),Pa=n(b,"P",{});var ky=r(Pa);li=a(ky,"We can set up the tracking during the initialisation of the component, either:"),ky.forEach(o),ii=i(b),X=n(b,"UL",{});var Pt=r(X);Ia=n(Pt,"LI",{});var yy=r(Ia);pi=a(yy,"track a property of the component,"),yy.forEach(o),ci=i(Pt),ja=n(Pt,"LI",{});var vy=r(ja);hi=a(vy,"track the component instance itself,"),vy.forEach(o),ki=i(Pt),Oa=n(Pt,"LI",{});var dy=r(Oa);yi=a(dy,"or something in between the above"),dy.forEach(o),Pt.forEach(o),vi=i(b),Ro=n(b,"DIV",{class:!0});var rd=r(Ro);rd.forEach(o),di=i(b),ss=n(b,"P",{});var It=r(ss);ui=a(It,"Once you\u2019ve able to track application state changes, the next thing to do is to call "),qo=n(It,"CODE",{class:!0});var uy=r(qo);fi=a(uy,"scheduleUpdate"),uy.forEach(o),xi=a(It," instead of "),Vo=n(It,"CODE",{class:!0});var fy=r(Vo);wi=a(fy,"console.log"),fy.forEach(o),mi=a(It,"."),It.forEach(o),gi=i(b),Is=n(b,"P",{});var Te=r(Is);bi=a(Te,"You may concern whether all these complexities is worth the effort. Or you may be worried that "),js=n(Te,"A",{href:!0,rel:!0});var xy=r(js);Ei=a(xy,"Proxy is not supported to older browsers"),xy.forEach(o),_i=a(Te,"."),Te.forEach(o),Ti=i(b),Ca=n(b,"P",{});var wy=r(Ca);Si=a(wy,"Your concern is not entirely baseless. Not all frameworks use mutation tracking."),wy.forEach(o),b.forEach(o),fe=i(c),k=n(c,"SECTION",{});var v=r(k);Aa=n(v,"H3",{});var my=r(Aa);rs=n(my,"A",{href:!0,id:!0});var Ph=r(rs);Pi=a(Ph,"Just call "),Bo=n(Ph,"CODE",{class:!0});var gy=r(Bo);Ii=a(gy,"scheduleUpdate"),gy.forEach(o),Ph.forEach(o),my.forEach(o),ji=i(v),Da=n(v,"P",{});var by=r(Da);Oi=a(by,"Some frameworks design their API in the way such that it \u201Ctricks\u201D the framework user to tell the framework that the application state has changed."),by.forEach(o),Ci=i(v),Os=n(v,"P",{});var Se=r(Os);Ai=a(Se,"Instead of remembering to call "),$o=n(Se,"CODE",{class:!0});var Ey=r($o);Di=a(Ey,"scheduleUpdate"),Ey.forEach(o),Hi=a(Se," whenever you change the application state, the framework forces you to use their API to change application state:"),Se.forEach(o),Li=i(v),Jo=n(v,"DIV",{class:!0});var ld=r(Jo);ld.forEach(o),Ui=i(v),Ha=n(v,"P",{});var _y=r(Ha);Ni=a(_y,"This gives us a much simpler design and less edge case to handle:"),_y.forEach(o),Wi=i(v),Yo=n(v,"DIV",{class:!0});var id=r(Yo);id.forEach(o),Mi=i(v),Cs=n(v,"P",{});var Pe=r(Cs);Ri=a(Pe,"Inspired by "),ls=n(Pe,"A",{href:!0,rel:!0});var Ih=r(ls);qi=a(Ih,"React\u2019s "),Go=n(Ih,"CODE",{class:!0});var Ty=r(Go);Vi=a(Ty,"setState"),Ty.forEach(o),Ih.forEach(o),Bi=a(Pe,"."),Pe.forEach(o),$i=i(v),La=n(v,"P",{});var Sy=r(La);Ji=a(Sy,"However, this may trip new developers into the framework:"),Sy.forEach(o),Yi=i(v),Ko=n(v,"DIV",{class:!0});var pd=r(Ko);pd.forEach(o),Gi=i(v),Ua=n(v,"P",{});var Py=r(Ua);Ki=a(Py,"... and it maybe a bit clumsy when adding / removing items from an array:"),Py.forEach(o),Fi=i(v),Fo=n(v,"DIV",{class:!0});var cd=r(Fo);cd.forEach(o),Qi=i(v),As=n(v,"P",{});var Ie=r(As);zi=a(Ie,"A different approach that may have the best of both world is to insert "),Qo=n(Ie,"CODE",{class:!0});var Iy=r(Qo);Zi=a(Iy,"scheduleUpdate"),Iy.forEach(o),Xi=a(Ie," in scenarios that you think that changes may most likely happen:"),Ie.forEach(o),sp=i(v),q=n(v,"UL",{});var ps=r(q);Na=n(ps,"LI",{});var jy=r(Na);op=a(jy,"Event handlers"),jy.forEach(o),tp=i(ps),os=n(ps,"LI",{});var jt=r(os);ap=a(jt,"Timeout (eg: "),zo=n(jt,"CODE",{class:!0});var Oy=r(zo);ep=a(Oy,"setTimeout"),Oy.forEach(o),np=a(jt,", "),Zo=n(jt,"CODE",{class:!0});var Cy=r(Zo);rp=a(Cy,"setInterval"),Cy.forEach(o),lp=a(jt,", ...)"),jt.forEach(o),ip=i(ps),Wa=n(ps,"LI",{});var Ay=r(Wa);pp=a(Ay,"API handling, promises handling"),Ay.forEach(o),cp=i(ps),Ma=n(ps,"LI",{});var Dy=r(Ma);hp=a(Dy,"..."),Dy.forEach(o),ps.forEach(o),kp=i(v),Ds=n(v,"P",{});var je=r(Ds);yp=a(je,"So, instead of enforcing framework users to use "),Xo=n(je,"CODE",{class:!0});var Hy=r(Xo);vp=a(Hy,"setAppState()"),Hy.forEach(o),dp=a(je,`, framework users should use the
custom timeouts, api handlers, ...:`),je.forEach(o),up=i(v),st=n(v,"DIV",{class:!0});var hd=r(st);hd.forEach(o),fp=i(v),ot=n(v,"P",{});var jh=r(ot);xp=a(jh,"Inspired by "),Hs=n(jh,"A",{href:!0,rel:!0});var Ly=r(Hs);wp=a(Ly,"AngularJS\u2019s \\$timeout"),Ly.forEach(o),jh.forEach(o),mp=i(v),Ls=n(v,"P",{});var Oe=r(Ls);gp=a(Oe,"Your framework user can now be free to change the application state the way he wants, as long as the changes are done within your custom handlers. Because at the end of the handler, you will call "),tt=n(Oe,"CODE",{class:!0});var Uy=r(tt);bp=a(Uy,"scheduleUpdate()"),Uy.forEach(o),Ep=a(Oe,"."),Oe.forEach(o),_p=i(v),at=n(v,"P",{});var Oh=r(at);Tp=a(Oh,"Similarly, this may trip new developers into the framework too! Try search "),Us=n(Oh,"A",{href:!0,rel:!0});var Ny=r(Us);Sp=a(Ny,'"AngularJS $timeout vs window.setTimeout"'),Ny.forEach(o),Oh.forEach(o),Pp=i(v),N=n(v,"P",{});var G=r(N);Ip=a(G,"You may think, what if there are no state changes in the handler function, wouldn\u2019t calling an extra "),et=n(G,"CODE",{class:!0});var Wy=r(et);jp=a(Wy,"scheduleUpdate()"),Wy.forEach(o),Op=a(G," be inefficient? Well so far, we haven\u2019t discussed what\u2019s happening in "),nt=n(G,"CODE",{class:!0});var My=r(nt);Cp=a(My,"scheduleUpdate()"),My.forEach(o),Ap=a(G,", we can check "),Ra=n(G,"STRONG",{});var Ry=r(Ra);Dp=a(Ry,"what has changed"),Ry.forEach(o),Hp=a(G," (which will be covered in the next section)"),qa=n(G,"STRONG",{});var qy=r(qa);Lp=a(qy,","),qy.forEach(o),Up=a(G," and if there\u2019s nothing change, we can skip the subsequent steps."),G.forEach(o),Np=i(v),Va=n(v,"P",{});var Vy=r(Va);Wp=a(Vy,"If you look at the strategies that we have tried so far, you may have noticed a common struggle:"),Vy.forEach(o),Mp=i(v),Ns=n(v,"UL",{});var Ce=r(Ns);Ba=n(Ce,"LI",{});var By=r(Ba);Rp=a(By,"allow framework user to change the application state in any way he wants"),By.forEach(o),qp=i(Ce),$a=n(Ce,"LI",{});var $y=r($a);Vp=a($y,"achieve reactivity without much runtime complexity."),$y.forEach(o),Ce.forEach(o),Bp=i(v),ts=n(v,"P",{});var Ot=r(ts);$p=a(Ot,"At this point, you got to agree that enforcing framework developers to call "),rt=n(Ot,"CODE",{class:!0});var Jy=r(rt);Jp=a(Jy,"setAppState"),Jy.forEach(o),Yp=a(Ot," whenever they want to change the application state, requires "),Ja=n(Ot,"STRONG",{});var Yy=r(Ja);Gp=a(Yy,"less runtime complexity"),Yy.forEach(o),Kp=a(Ot," from the framework, and it\u2019s unlikely to have any corner cases or caveats that need to handle."),Ot.forEach(o),Fp=i(v),Ya=n(v,"P",{});var Gy=r(Ya);Qp=a(Gy,"If the dilemma is between developer expressiveness versus runtime complexity, probably we could get the best of both worlds by shifting the complexity from runtime to build time?"),Gy.forEach(o),v.forEach(o),xe=i(c),x=n(c,"SECTION",{});var E=r(x);Ga=n(E,"H3",{});var Ky=r(Ga);Ws=n(Ky,"A",{href:!0,id:!0});var Fy=r(Ws);zp=a(Fy,"Static analysis"),Fy.forEach(o),Ky.forEach(o),Zp=i(E),Ka=n(E,"P",{});var Qy=r(Ka);Xp=a(Qy,"If we have a compiler that allow framework users to write:"),Qy.forEach(o),sc=i(E),lt=n(E,"DIV",{class:!0});var kd=r(lt);kd.forEach(o),oc=i(E),Fa=n(E,"P",{});var zy=r(Fa);tc=a(zy,"and compiles it to:"),zy.forEach(o),ac=i(E),it=n(E,"DIV",{class:!0});var yd=r(it);yd.forEach(o),ec=i(E),Qa=n(E,"P",{});var Zy=r(Qa);nc=a(Zy,"Then, we would really have best of both worlds! \u{1F60E}"),Zy.forEach(o),rc=i(E),Ms=n(E,"P",{});var Ae=r(Ms);lc=a(Ae,"Let\u2019s look at different scenarios that the framework user would write, and see whether we know when to insert the "),pt=n(Ae,"CODE",{class:!0});var Xy=r(pt);ic=a(Xy,"scheduleUpdate()"),Xy.forEach(o),pc=a(Ae,":"),Ae.forEach(o),cc=i(E),ct=n(E,"DIV",{class:!0});var vd=r(ct);vd.forEach(o),hc=i(E),za=n(E,"P",{});var sv=r(za);kc=a(sv,"Allow me to summarise some complexities faced in the example above:"),sv.forEach(o),yc=i(E),Rs=n(E,"UL",{});var De=r(Rs);B=n(De,"LI",{});var Xs=r(B);vc=a(Xs,"It is easy to track direct changes to the application state, but it is extremely difficult to track changes made indirectly, eg: "),ht=n(Xs,"CODE",{class:!0});var ov=r(ht);dc=a(ov,"foo.one"),ov.forEach(o),uc=a(Xs,", "),kt=n(Xs,"CODE",{class:!0});var tv=r(kt);fc=a(tv,"doSomethingMutable(this.appState)"),tv.forEach(o),xc=a(Xs," or "),yt=n(Xs,"CODE",{class:!0});var av=r(yt);wc=a(av,"this.appState.obj.increment()"),av.forEach(o),Xs.forEach(o),mc=i(De),qs=n(De,"LI",{});var He=r(qs);gc=a(He,"It is easy to track changes through assignment statements, but extremely difficult to track changes made through mutating methods, eg: "),vt=n(He,"CODE",{class:!0});var ev=r(vt);bc=a(ev,"this.appState.list.push('1')"),ev.forEach(o),Ec=a(He,", I mean how do you know the method is mutating?"),He.forEach(o),De.forEach(o),_c=i(E),C=n(E,"P",{});var M=r(C);Tc=a(M,"So, for "),Vs=n(M,"A",{href:!0,rel:!0});var nv=r(Vs);Sc=a(nv,"Svelte"),nv.forEach(o),Pc=a(M,", one of the frameworks that use static analysis to achieve reactivity, it only ensures reactivity through assignment operators (eg: "),dt=n(M,"CODE",{class:!0});var rv=r(dt);Ic=a(rv,"="),rv.forEach(o),jc=a(M,", "),ut=n(M,"CODE",{class:!0});var lv=r(ut);Oc=a(lv,"+="),lv.forEach(o),Cc=a(M,", \u2026) and unary arithmetic operators (eg: "),ft=n(M,"CODE",{class:!0});var iv=r(ft);Ac=a(iv,"++"),iv.forEach(o),Dc=a(M," and "),xt=n(M,"CODE",{class:!0});var pv=r(xt);Hc=a(pv,"--"),pv.forEach(o),Lc=a(M,")."),M.forEach(o),Uc=i(E),Bs=n(E,"P",{});var Le=r(Bs);Nc=a(Le,"I believe that there\u2019s room yet to be explored in this space, especially at the "),$s=n(Le,"A",{href:!0,rel:!0});var cv=r($s);Wc=a(cv,"rise of TypeScript"),cv.forEach(o),Mc=a(Le,", we may be able to understand our application state better through static types."),Le.forEach(o),E.forEach(o),we=i(c),g=n(c,"SECTION",{});var S=r(g);Za=n(S,"H2",{});var hv=r(Za);Js=n(hv,"A",{href:!0,id:!0});var kv=r(Js);Rc=a(kv,"Summary"),kv.forEach(o),hv.forEach(o),qc=i(S),Xa=n(S,"P",{});var yv=r(Xa);Vc=a(yv,"We\u2019ve gone through different strategies of knowing when the application state has changed:"),yv.forEach(o),Bc=i(S),as=n(S,"UL",{});var Ct=r(as);se=n(Ct,"LI",{});var vv=r(se);$c=a(vv,"mutation tracking"),vv.forEach(o),Jc=i(Ct),wt=n(Ct,"LI",{});var Ch=r(wt);Yc=a(Ch,"just call "),mt=n(Ch,"CODE",{class:!0});var dv=r(mt);Gc=a(dv,"scheduleUpdate"),dv.forEach(o),Ch.forEach(o),Kc=i(Ct),oe=n(Ct,"LI",{});var uv=r(oe);Fc=a(uv,"static analysis"),uv.forEach(o),Ct.forEach(o),Qc=i(S),te=n(S,"P",{});var fv=r(te);zc=a(fv,"Different strategies manifests itself in terms of the API of the framework:"),fv.forEach(o),Zc=i(S),Ys=n(S,"UL",{});var Ue=r(Ys);ae=n(Ue,"LI",{});var xv=r(ae);Gs=n(xv,"P",{});var Ne=r(Gs);Xc=a(Ne,"Is the framework user going to change the application state with simple object manipulation? or have to use API like "),gt=n(Ne,"CODE",{class:!0});var wv=r(gt);sh=a(wv,"setAppState()"),wv.forEach(o),oh=a(Ne,"?"),Ne.forEach(o),xv.forEach(o),th=i(Ue),es=n(Ue,"LI",{});var At=r(es);ee=n(At,"P",{});var mv=r(ee);ah=a(mv,"Is there caveats that the framework user needs to be aware of?"),mv.forEach(o),eh=i(At),ne=n(At,"P",{});var gv=r(ne);nh=a(gv,"For example:"),gv.forEach(o),rh=i(At),Ks=n(At,"UL",{});var We=r(Ks);re=n(We,"LI",{});var bv=r(re);lh=a(bv,"Can only use assignment statement to achieve reactivity?"),bv.forEach(o),ih=i(We),le=n(We,"LI",{});var Ev=r(le);ph=a(Ev,"Does framework user need to use a helper function for adding new reactive property to the application state?"),Ev.forEach(o),We.forEach(o),At.forEach(o),Ue.forEach(o),ch=i(S),ie=n(S,"P",{});var _v=r(ie);hh=a(_v,"Knowing when an application state has changed, allow frameworks to know when to update our view. Yet, to optimise the updates, frameworks need to know what has changed in the application state."),_v.forEach(o),kh=i(S),pe=n(S,"P",{});var Tv=r(pe);yh=a(Tv,"Are we going to remove and recreate every DOM element in the view? Do we know that which part of the view is going to change based on what has changed in the application state?"),Tv.forEach(o),vh=i(S),Fs=n(S,"P",{});var Me=r(Fs);dh=a(Me,"That is, if we know "),ce=n(Me,"STRONG",{});var Sv=r(ce);uh=a(Sv,"the WHAT"),Sv.forEach(o),fh=a(Me,"."),Me.forEach(o),xh=i(S),wh=n(S,"HR",{}),mh=i(S),Qs=n(S,"P",{});var Re=r(Qs);gh=a(Re,"I\u2019d like to thank "),zs=n(Re,"A",{href:!0,rel:!0});var Pv=r(zs);bh=a(Pv,"Rich Harris"),Pv.forEach(o),Eh=a(Re," for pointing out some inaccuracies in the previous version of this article and providing valuable feedbacks. All the remaining errors are mine.."),Re.forEach(o),S.forEach(o),this.h()},h(){p(D,"href","#what-is-reactivity"),p(D,"id","what-is-reactivity"),p(to,"class","code-section"),p(ao,"class","code-section"),p(eo,"class","code-section"),p(no,"class","inline"),p(ro,"class","inline"),p(hs,"href","#the-when-and-the-what"),p(hs,"id","the-when-and-the-what"),p(ys,"href","#the-when"),p(ys,"id","the-when"),p(lo,"class","inline"),p(io,"class","inline"),p(po,"class","inline"),p(vs,"href","https://techterms.com/definition/screen_tearing"),p(vs,"rel","nofollow"),p(co,"class","code-section"),p(ko,"class","inline"),p(yo,"class","inline"),p(ds,"href","https://kentcdodds.com/blog/dont-sync-state-derive-it"),p(ds,"rel","nofollow"),p(us,"href","#mutation-tracking"),p(us,"id","mutation-tracking"),p(vo,"class","code-section"),p(uo,"class","code-section"),p(fo,"class","inline"),p(xo,"class","inline"),p(wo,"class","inline"),p(go,"class","inline"),p(bo,"class","inline"),p(fs,"href","#prior-proxy"),p(fs,"id","prior-proxy"),p(Eo,"class","code-section"),p(ws,"href","https://paper.dropbox.com/doc/Reactivity-in-Web-Frameworks--Aroey0wh9iZRE8dm9lC4Ulo0AQ-D6CkkTTpH1AqGvBlKcQ85"),p(ws,"rel","nofollow"),p(_o,"class","inline"),p(ms,"href","https://vuejs.org/v2/guide/reactivity.html#Change-Detection-Caveats"),p(ms,"rel","nofollow"),p(To,"class","inline"),p(So,"class","inline"),p(Po,"class","inline"),p(Io,"class","inline"),p(jo,"class","inline"),p(Oo,"class","inline"),p(Co,"class","inline"),p(Ao,"class","inline"),p(Do,"class","code-section"),p(bs,"href","https://github.com/vuejs/vue/blob/22790b250cd5239a8379b4ec8cc3a9b570dac4bc/src/core/observer/array.js"),p(bs,"rel","nofollow"),p(Es,"href","https://codesandbox.io/s/mutation-tracking-getterssetters-44ono"),p(Es,"rel","nofollow"),p(Ts,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy"),p(Ts,"rel","nofollow"),p(Ss,"href","#with-proxy"),p(Ss,"id","with-proxy"),p(Lo,"class","inline"),p(Uo,"class","inline"),p(No,"class","code-section"),p(Wo,"class","inline"),p(Mo,"class","code-section"),p(Ro,"class","code-section"),p(qo,"class","inline"),p(Vo,"class","inline"),p(js,"href","https://caniuse.com/#feat=proxy"),p(js,"rel","nofollow"),p(Bo,"class","inline"),p(rs,"href","#just-call-scheduleupdate"),p(rs,"id","just-call-scheduleupdate"),p($o,"class","inline"),p(Jo,"class","code-section"),p(Yo,"class","code-section"),p(Go,"class","inline"),p(ls,"href","https://github.com/facebook/react/blob/0cf22a56a18790ef34c71bef14f64695c0498619/packages/react/src/ReactBaseClasses.js#L57"),p(ls,"rel","nofollow"),p(Ko,"class","code-section"),p(Fo,"class","code-section"),p(Qo,"class","inline"),p(zo,"class","inline"),p(Zo,"class","inline"),p(Xo,"class","inline"),p(st,"class","code-section"),p(Hs,"href","https://github.com/angular/angular.js/blob/master/src/ng/timeout.js#L13"),p(Hs,"rel","nofollow"),p(tt,"class","inline"),p(Us,"href","https://www.google.com/search?q=angularjs%20$timeout%20vs%20window.setTimeout"),p(Us,"rel","nofollow"),p(et,"class","inline"),p(nt,"class","inline"),p(rt,"class","inline"),p(Ws,"href","#static-analysis"),p(Ws,"id","static-analysis"),p(lt,"class","code-section"),p(it,"class","code-section"),p(pt,"class","inline"),p(ct,"class","code-section"),p(ht,"class","inline"),p(kt,"class","inline"),p(yt,"class","inline"),p(vt,"class","inline"),p(Vs,"href","http://github.com/sveltejs/svelte"),p(Vs,"rel","nofollow"),p(dt,"class","inline"),p(ut,"class","inline"),p(ft,"class","inline"),p(xt,"class","inline"),p($s,"href","https://2019.stateofjs.com/javascript-flavors/typescript/"),p($s,"rel","nofollow"),p(Js,"href","#summary"),p(Js,"id","summary"),p(mt,"class","inline"),p(gt,"class","inline"),p(zs,"href","https://twitter.com/Rich_Harris"),p(zs,"rel","nofollow")},m(c,y){I(c,h,y),s(h,W),s(W,D),s(D,cs),s(h,_),s(h,H),s(H,oo),s(h,qe),s(h,Dt),s(Dt,Ve),s(h,Be),s(h,Ht),s(Ht,$e),s(h,Je),s(h,Lt),s(Lt,Ye),s(h,Ge),s(h,to),to.innerHTML=Cv,s(h,Ke),s(h,Ut),s(Ut,Fe),s(h,Qe),s(h,ao),ao.innerHTML=Av,s(h,ze),s(h,Nt),s(Nt,Ze),s(h,Xe),s(h,eo),eo.innerHTML=Dv,s(h,sn),s(h,K),s(K,on),s(K,Wt),s(Wt,Mt),s(Mt,tn),s(K,an),s(K,Rt),s(Rt,qt),s(qt,en),s(K,nn),s(h,rn),s(h,F),s(F,ln),s(F,no),s(no,pn),s(F,cn),s(F,ro),s(ro,hn),s(F,kn),s(h,yn),s(h,Vt),s(Vt,vn),s(h,dn),s(h,Bt),s(Bt,un),s(h,fn),s(h,$t),s($t,Jt),s(Jt,xn),I(c,ke,y),I(c,A,y),s(A,Yt),s(Yt,hs),s(hs,wn),s(A,mn),s(A,Gt),s(Gt,gn),s(A,bn),s(A,ks),s(ks,Kt),s(Kt,En),s(ks,_n),s(ks,Ft),s(Ft,Tn),s(A,Sn),s(A,ns),s(ns,Qt),s(Qt,Pn),s(ns,In),s(ns,zt),s(zt,jn),s(ns,On),s(A,Cn),s(A,L),s(L,An),s(L,Zt),s(Zt,Dn),s(L,Hn),s(L,Xt),s(Xt,Ln),s(L,Un),s(L,sa),s(sa,Nn),s(L,Wn),s(L,oa),s(oa,Mn),s(L,Rn),I(c,ye,y),I(c,T,y),s(T,ta),s(ta,ys),s(ys,qn),s(T,Vn),s(T,aa),s(aa,Bn),s(T,$n),s(T,U),s(U,Jn),s(U,lo),s(lo,Yn),s(U,Gn),s(U,io),s(io,Kn),s(U,Fn),s(U,po),s(po,Qn),s(U,zn),s(U,vs),s(vs,Zn),s(U,Xn),s(T,sr),s(T,ea),s(ea,or),s(T,tr),s(T,co),co.innerHTML=Hv,s(T,ar),s(T,ho),s(ho,er),s(ho,na),s(na,nr),s(T,rr),s(T,ra),s(ra,V),s(V,lr),s(V,ko),s(ko,ir),s(V,pr),s(V,yo),s(yo,cr),s(V,hr),s(V,ds),s(ds,kr),s(T,yr),s(T,la),s(la,vr),I(c,ve,y),I(c,u,y),s(u,ia),s(ia,us),s(us,dr),s(u,ur),s(u,pa),s(pa,fr),s(u,xr),s(u,ca),s(ca,wr),s(u,mr),s(u,ha),s(ha,gr),s(u,br),s(u,ka),s(ka,Er),s(u,_r),s(u,vo),vo.innerHTML=Lv,s(u,Tr),s(u,ya),s(ya,Sr),s(u,Pr),s(u,uo),uo.innerHTML=Uv,s(u,Ir),s(u,R),s(R,jr),s(R,fo),s(fo,Or),s(R,Cr),s(R,xo),s(xo,Ar),s(R,Dr),s(R,wo),s(wo,Hr),s(R,Lr),s(u,Ur),s(u,va),s(va,Nr),s(u,Wr),s(u,da),s(da,Mr),s(u,Rr),s(u,mo),s(mo,Q),s(Q,qr),s(Q,go),s(go,Vr),s(Q,Br),s(Q,bo),s(bo,$r),s(Q,Jr),s(mo,Yr),s(u,Gr),s(u,ua),s(ua,Kr),I(c,de,y),I(c,d,y),s(d,fa),s(fa,fs),s(fs,Fr),s(d,Qr),s(d,xa),s(xa,zr),s(d,Zr),s(d,Eo),Eo.innerHTML=Nv,s(d,Xr),s(d,xs),s(xs,sl),s(xs,ws),s(ws,ol),s(xs,tl),s(d,al),s(d,wa),s(wa,el),s(d,nl),s(d,z),s(z,rl),s(z,ms),s(ms,_o),s(_o,ll),s(z,il),s(z,To),s(To,pl),s(z,cl),s(d,hl),s(d,P),s(P,kl),s(P,So),s(So,yl),s(P,vl),s(P,Po),s(Po,dl),s(P,ul),s(P,Io),s(Io,fl),s(P,xl),s(P,jo),s(jo,wl),s(P,ml),s(P,Oo),s(Oo,gl),s(P,bl),s(P,Co),s(Co,El),s(P,_l),s(P,Ao),s(Ao,Tl),s(P,Sl),s(d,Pl),s(d,ma),s(ma,Il),s(d,jl),s(d,Do),Do.innerHTML=Wv,s(d,Ol),s(d,gs),s(gs,Cl),s(gs,bs),s(bs,Al),s(gs,Dl),s(d,Hl),s(d,ga),s(ga,Ho),s(Ho,Ll),s(Ho,Es),s(Es,Ul),s(d,Nl),s(d,ba),s(ba,Wl),s(d,Ml),s(d,Ea),s(Ea,Rl),s(d,ql),s(d,_s),s(_s,Vl),s(_s,Ts),s(Ts,Bl),s(_s,$l),I(c,ue,y),I(c,f,y),s(f,_a),s(_a,Ss),s(Ss,Jl),s(f,Yl),s(f,Z),s(Z,Gl),s(Z,Lo),s(Lo,Kl),s(Z,Fl),s(Z,Uo),s(Uo,Ql),s(Z,zl),s(f,Zl),s(f,No),No.innerHTML=Mv,s(f,Xl),s(f,Ta),s(Ta,Sa),s(Sa,si),s(f,oi),s(f,Ps),s(Ps,ti),s(Ps,Wo),s(Wo,ai),s(Ps,ei),s(f,ni),s(f,Mo),Mo.innerHTML=Rv,s(f,ri),s(f,Pa),s(Pa,li),s(f,ii),s(f,X),s(X,Ia),s(Ia,pi),s(X,ci),s(X,ja),s(ja,hi),s(X,ki),s(X,Oa),s(Oa,yi),s(f,vi),s(f,Ro),Ro.innerHTML=qv,s(f,di),s(f,ss),s(ss,ui),s(ss,qo),s(qo,fi),s(ss,xi),s(ss,Vo),s(Vo,wi),s(ss,mi),s(f,gi),s(f,Is),s(Is,bi),s(Is,js),s(js,Ei),s(Is,_i),s(f,Ti),s(f,Ca),s(Ca,Si),I(c,fe,y),I(c,k,y),s(k,Aa),s(Aa,rs),s(rs,Pi),s(rs,Bo),s(Bo,Ii),s(k,ji),s(k,Da),s(Da,Oi),s(k,Ci),s(k,Os),s(Os,Ai),s(Os,$o),s($o,Di),s(Os,Hi),s(k,Li),s(k,Jo),Jo.innerHTML=Vv,s(k,Ui),s(k,Ha),s(Ha,Ni),s(k,Wi),s(k,Yo),Yo.innerHTML=Bv,s(k,Mi),s(k,Cs),s(Cs,Ri),s(Cs,ls),s(ls,qi),s(ls,Go),s(Go,Vi),s(Cs,Bi),s(k,$i),s(k,La),s(La,Ji),s(k,Yi),s(k,Ko),Ko.innerHTML=$v,s(k,Gi),s(k,Ua),s(Ua,Ki),s(k,Fi),s(k,Fo),Fo.innerHTML=Jv,s(k,Qi),s(k,As),s(As,zi),s(As,Qo),s(Qo,Zi),s(As,Xi),s(k,sp),s(k,q),s(q,Na),s(Na,op),s(q,tp),s(q,os),s(os,ap),s(os,zo),s(zo,ep),s(os,np),s(os,Zo),s(Zo,rp),s(os,lp),s(q,ip),s(q,Wa),s(Wa,pp),s(q,cp),s(q,Ma),s(Ma,hp),s(k,kp),s(k,Ds),s(Ds,yp),s(Ds,Xo),s(Xo,vp),s(Ds,dp),s(k,up),s(k,st),st.innerHTML=Yv,s(k,fp),s(k,ot),s(ot,xp),s(ot,Hs),s(Hs,wp),s(k,mp),s(k,Ls),s(Ls,gp),s(Ls,tt),s(tt,bp),s(Ls,Ep),s(k,_p),s(k,at),s(at,Tp),s(at,Us),s(Us,Sp),s(k,Pp),s(k,N),s(N,Ip),s(N,et),s(et,jp),s(N,Op),s(N,nt),s(nt,Cp),s(N,Ap),s(N,Ra),s(Ra,Dp),s(N,Hp),s(N,qa),s(qa,Lp),s(N,Up),s(k,Np),s(k,Va),s(Va,Wp),s(k,Mp),s(k,Ns),s(Ns,Ba),s(Ba,Rp),s(Ns,qp),s(Ns,$a),s($a,Vp),s(k,Bp),s(k,ts),s(ts,$p),s(ts,rt),s(rt,Jp),s(ts,Yp),s(ts,Ja),s(Ja,Gp),s(ts,Kp),s(k,Fp),s(k,Ya),s(Ya,Qp),I(c,xe,y),I(c,x,y),s(x,Ga),s(Ga,Ws),s(Ws,zp),s(x,Zp),s(x,Ka),s(Ka,Xp),s(x,sc),s(x,lt),lt.innerHTML=Gv,s(x,oc),s(x,Fa),s(Fa,tc),s(x,ac),s(x,it),it.innerHTML=Kv,s(x,ec),s(x,Qa),s(Qa,nc),s(x,rc),s(x,Ms),s(Ms,lc),s(Ms,pt),s(pt,ic),s(Ms,pc),s(x,cc),s(x,ct),ct.innerHTML=Fv,s(x,hc),s(x,za),s(za,kc),s(x,yc),s(x,Rs),s(Rs,B),s(B,vc),s(B,ht),s(ht,dc),s(B,uc),s(B,kt),s(kt,fc),s(B,xc),s(B,yt),s(yt,wc),s(Rs,mc),s(Rs,qs),s(qs,gc),s(qs,vt),s(vt,bc),s(qs,Ec),s(x,_c),s(x,C),s(C,Tc),s(C,Vs),s(Vs,Sc),s(C,Pc),s(C,dt),s(dt,Ic),s(C,jc),s(C,ut),s(ut,Oc),s(C,Cc),s(C,ft),s(ft,Ac),s(C,Dc),s(C,xt),s(xt,Hc),s(C,Lc),s(x,Uc),s(x,Bs),s(Bs,Nc),s(Bs,$s),s($s,Wc),s(Bs,Mc),I(c,we,y),I(c,g,y),s(g,Za),s(Za,Js),s(Js,Rc),s(g,qc),s(g,Xa),s(Xa,Vc),s(g,Bc),s(g,as),s(as,se),s(se,$c),s(as,Jc),s(as,wt),s(wt,Yc),s(wt,mt),s(mt,Gc),s(as,Kc),s(as,oe),s(oe,Fc),s(g,Qc),s(g,te),s(te,zc),s(g,Zc),s(g,Ys),s(Ys,ae),s(ae,Gs),s(Gs,Xc),s(Gs,gt),s(gt,sh),s(Gs,oh),s(Ys,th),s(Ys,es),s(es,ee),s(ee,ah),s(es,eh),s(es,ne),s(ne,nh),s(es,rh),s(es,Ks),s(Ks,re),s(re,lh),s(Ks,ih),s(Ks,le),s(le,ph),s(g,ch),s(g,ie),s(ie,hh),s(g,kh),s(g,pe),s(pe,yh),s(g,vh),s(g,Fs),s(Fs,dh),s(Fs,ce),s(ce,uh),s(Fs,fh),s(g,xh),s(g,wh),s(g,mh),s(g,Qs),s(Qs,gh),s(Qs,zs),s(zs,bh),s(Qs,Eh)},p:Sd,d(c){c&&o(h),c&&o(ke),c&&o(A),c&&o(ye),c&&o(T),c&&o(ve),c&&o(u),c&&o(de),c&&o(d),c&&o(ue),c&&o(f),c&&o(fe),c&&o(k),c&&o(xe),c&&o(x),c&&o(we),c&&o(g)}}}function Od(so){let h,W;const D=[so[0],Ov];let cs={$$slots:{default:[jd]},$$scope:{ctx:so}};for(let _=0;_<D.length;_+=1)cs=Ah(cs,D[_]);return h=new Pd({props:cs}),{c(){xd(h.$$.fragment)},l(_){wd(h.$$.fragment,_)},m(_,H){md(h,_,H),W=!0},p(_,[H]){const oo=H&1?gd(D,[H&1&&Iv(_[0]),H&0&&Iv(Ov)]):{};H&2&&(oo.$$scope={dirty:H,ctx:_}),h.$set(oo)},i(_){W||(bd(h.$$.fragment,_),W=!0)},o(_){Ed(h.$$.fragment,_),W=!1},d(_){_d(h,_)}}}const Ov={title:"Reactivity in Web Frameworks (Part 1)",date:"2020-01-05T08:00:00Z",lastUpdated:"2020-01-08T08:00:00Z",description:"Reactivity is the ability of a web framework to update your view whenever the application state has changed. How do web frameworks achieve reactivity?",label:"blog",tableOfContents:[{link:"the-when",title:"the WHEN"},{link:"mutation-tracking",title:"Mutation Tracking",nested:[{link:"prior-proxy",title:"Prior Proxy"},{link:"with-proxy",title:"With Proxy"},{link:"just-call-scheduleupdate",title:"Just call  `scheduleUpdate`"},{link:"static-analysis",title:"Static analysis"}]},{link:"summary",title:"Summary"}]};function Cd(so,h,W){return Td("blog",{image:Id}),so.$$set=D=>{W(0,h=Ah(Ah({},h),jv(D)))},h=jv(h),[h]}class Wd extends dd{constructor(h){super();ud(this,h,Cd,Od,fd,{})}}export{Wd as default,Ov as metadata};
