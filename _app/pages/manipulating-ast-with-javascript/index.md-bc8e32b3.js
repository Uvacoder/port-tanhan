import{S as Nf,i as Lf,s as jf,C as jk,w as Pu,x as Ou,y as Mu,z as Hf,A as Tu,q as Nu,o as Lu,B as ju,r as Rf,R as Au,k as i,e as a,t as n,m as p,c as t,a as e,h as r,d as o,b as l,Q as Su,f as A,g,F as s,O as Bf}from"../../chunks/vendor-569a3c5c.js";import{B as Ff}from"../../chunks/BlogLayout-17b76cb2.js";import{T as Vf}from"../../chunks/TableOfContent-dbc18cb8.js";import"../../chunks/stores-ee936cd4.js";import"../../chunks/WebMentions-968cc380.js";/* empty css                                */var zf="/_app/assets/ast-html-a25befbf.webp",Jf="/_app/assets/ast-html-8602ae18.webp",$f="/_app/assets/ast-html-4ae02060.png",Iu="/_app/assets/ast-html-c202466b.png",Wf="/_app/assets/ast-explorer-74f1e65a.gif",Du="/_app/assets/ast-explorer-304f50a2.gif",qf="/_app/assets/hero-twitter-07ce19e8.jpg";function Gf(Ho){let m,J,E,Os,w,$,Ro,Ms,Zn,Xn,Bo,sr,or,bn,Fo,ar,En,xs,S,tr,Ns,er,nr,Ls,rr,lr,js,ir,pr,Hs,cr,hr,Rs,kr,vr,Bs,yr,dr,ur,Et,fr,Tn,u,Tt,Fs,xr,gr,At,mr,wr,Vs,_r,zs,br,Er,Tr,St,is,H,Hk,Ar,L,Sr,It,Ir,Dr,Js,Cr,Pr,$s,Or,Mr,Ws,Nr,Lr,jr,Dt,ps,Vo,Ct,R,Rk,Hr,cs,Rr,zo,Br,Fr,Jo,Vr,zr,Jr,qs,Gs,Pt,W,Ot,$r,Wr,Mt,qr,Gr,Nt,$o,Ur,Yr,Lt,Wo,Kr,Qr,D,q,jt,Zr,Xr,Ht,qo,sl,ol,Rt,Go,Uo,al,tl,Bt,Yo,Ko,el,nl,G,Ft,rl,ll,Vt,Qo,il,pl,zt,Zo,Xo,cl,hl,Jt,sa,oa,kl,vl,U,$t,yl,dl,Wt,aa,ul,fl,qt,ta,ea,xl,gl,Gt,na,ra,ml,wl,Y,Ut,_l,bl,Yt,la,El,Tl,Kt,ia,pa,Al,Sl,Qt,ca,ha,Il,Dl,K,Zt,Cl,Pl,Xt,ka,Ol,Ml,se,va,ya,Nl,Ll,oe,da,ua,jl,Hl,Q,ae,Rl,Bl,te,fa,Fl,Vl,ee,xa,ga,zl,Jl,ne,ma,wa,$l,Wl,re,ql,Gl,le,Ul,Yl,_a,Hu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">code</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.readFileSync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/file/to/code&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ast</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parserMethod</span><span style="color: var(--shiki-color-text)">(code);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// the magical transform function</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// usually not a pure function</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">transform</span><span style="color: var(--shiki-color-text)">(ast);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">output</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">generatorMethod</span><span style="color: var(--shiki-color-text)">(ast);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.writeFileSync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/file/to/output&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> output</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;utf8&#39;</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,Kl,ie,Ql,Zl,ba,Ru=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">lang1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.readFileSync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/file/to/code&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ast</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parserMethodLang1</span><span style="color: var(--shiki-color-text)">(lang1);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// the magical transform function</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// usually not a pure function</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">transformLang1ToLang2</span><span style="color: var(--shiki-color-text)">(ast);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">lang2</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">generatorMethodLang2</span><span style="color: var(--shiki-color-text)">(ast);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.writeFileSync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/file/to/output&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> lang2</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;utf8&#39;</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,Xl,hs,si,pe,oi,ai,ce,ti,ei,An,k,he,Us,ni,ri,ks,li,ke,ii,pi,ve,ci,hi,ki,as,Ys,vi,yi,Ks,di,ui,Qs,fi,xi,gi,ye,mi,wi,Ea,Bu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(ast) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// TODO: do something with this node</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">keys</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Object</span><span style="color: var(--shiki-token-function)">.keys</span><span style="color: var(--shiki-color-text)">(ast);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">keys</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> ast[key];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// could be an array of nodes or just a node</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">Array</span><span style="color: var(--shiki-token-function)">.isArray</span><span style="color: var(--shiki-color-text)">(child)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> j </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; j </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; j</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(child[j]);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-function)">isNode</span><span style="color: var(--shiki-color-text)">(child)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(child);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">isNode</span><span style="color: var(--shiki-color-text)">(node) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// probably need more check,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// for example,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// if the node contains certain properties</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">typeof</span><span style="color: var(--shiki-color-text)"> node </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;object&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,_i,Zs,bi,Ta,Ei,Ti,Ai,vs,Si,de,Ii,Di,ue,Ci,Pi,Oi,Aa,Fu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line highlight"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callback) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">callback</span><span style="color: var(--shiki-color-text)">(ast);</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">keys</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Object</span><span style="color: var(--shiki-token-function)">.keys</span><span style="color: var(--shiki-color-text)">(ast);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">keys</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> ast[key];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">Array</span><span style="color: var(--shiki-token-function)">.isArray</span><span style="color: var(--shiki-color-text)">(child)) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> j </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; j </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; j</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(child[j]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callback);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-function)">isNode</span><span style="color: var(--shiki-color-text)">(child)) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(child</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callback);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">isNode</span><span style="color: var(--shiki-color-text)">(node) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// probably need more check,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// for example,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// if the node contains certain properties</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">typeof</span><span style="color: var(--shiki-color-text)"> node </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;object&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Mi,Xs,Ni,Sa,Li,ji,Hi,Ia,Vu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(htmlAst</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> htmlAstNode </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">/*...*/</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(cssAst</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> cssAstNode </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">/*...*/</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,Ri,fe,Bi,Fi,Da,zu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callback) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_visit</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">callback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index);</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">keys</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Object</span><span style="color: var(--shiki-token-function)">.keys</span><span style="color: var(--shiki-color-text)">(node);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">keys</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> node[key];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">Array</span><span style="color: var(--shiki-token-function)">.isArray</span><span style="color: var(--shiki-color-text)">(child)) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> j </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; j </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; j</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">_visit</span><span style="color: var(--shiki-color-text)">(child[j]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> j);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-function)">isNode</span><span style="color: var(--shiki-color-text)">(child)) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">_visit</span><span style="color: var(--shiki-color-text)">(child</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">_visit</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Vi,so,zi,Ca,Ji,$i,Wi,Pa,Ju=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callback) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_visit</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-function)">someCondition</span><span style="color: var(--shiki-color-text)">(node)) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">callback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">...</span></span></code></pre>`,qi,Oa,Gi,oo,Ui,Ma,Yi,Ki,Qi,xe,Zi,Xi,Na,$u=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callbackMap) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_visit</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">nodeType</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getNodeType</span><span style="color: var(--shiki-color-text)">(node);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (nodeType </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> callbackMap) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      callbackMap[nodeType](node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// do something</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;)</span></span></code></pre>`,sp,ao,op,ge,ap,tp,ep,me,np,Sn,ts,we,to,rp,lp,_e,ip,pp,ys,be,cp,hp,Ee,kp,vp,Te,yp,In,T,Ae,eo,dp,up,Se,fp,xp,La,Wu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visitCallback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.foo </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createNewNode</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,gp,Ie,mp,wp,ja,qu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visitCallback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">foo</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">createNewNode</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,_p,De,bp,Ep,Ha,Gu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visitCallback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// add as first sibling</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  parent[key]</span><span style="color: var(--shiki-token-function)">.unshift</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">createNewNode</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// add as last sibling</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  parent[key]</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">createNewNode</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// add as next sibling</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  parent[key]</span><span style="color: var(--shiki-token-function)">.splice</span><span style="color: var(--shiki-color-text)">(index </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createNewNode</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// add as prev sibling</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  parent[key]</span><span style="color: var(--shiki-token-function)">.splice</span><span style="color: var(--shiki-color-text)">(index</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createNewNode</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Dn,O,Ce,no,Tp,Ap,Pe,Sp,Ip,Ra,Uu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visitCallback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  parent[key] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">updatedNode</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Dp,Oe,Cp,Pp,Ba,Yu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visitCallback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  parent[key][index] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">updatedNode</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Cn,h,Me,ro,Op,Mp,Ne,Np,Lp,Fa,Ku=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visitCallback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">delete</span><span style="color: var(--shiki-color-text)"> parent[key];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,jp,Le,Hp,Rp,Va,Qu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visitCallback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  parent[key]</span><span style="color: var(--shiki-token-function)">.splice</span><span style="color: var(--shiki-color-text)">(index</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Bp,je,Z,Fp,He,Vp,zp,Re,Jp,$p,Be,Wp,qp,Gp,lo,Up,Fe,Yp,Kp,Qp,ds,Zp,Ve,Xp,sc,ze,oc,ac,tc,Je,ec,nc,za,Zu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callbackMap) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_visit</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">Array</span><span style="color: var(--shiki-token-function)">.isArray</span><span style="color: var(--shiki-color-text)">(child)) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> j </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; j </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; j</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">_visit</span><span style="color: var(--shiki-color-text)">(child[j]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> j);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-function)">hasRemoved</span><span style="color: var(--shiki-color-text)">()) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-comment)">// offset the index</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          j</span><span style="color: var(--shiki-token-keyword)">--</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,rc,$e,lc,ic,io,pc,Ja,cc,hc,kc,po,vc,$a,yc,dc,uc,Wa,Xu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line highlight"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> _hasRemoved </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">remove</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  _hasRemoved </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// proceed to remove current node</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">hasRemoved</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> result </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> _hasRemoved;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// reset back</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  _hasRemoved </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> result;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// function _visit(...) &#123; ...</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> j </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; j </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; j</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">_visit</span><span style="color: var(--shiki-color-text)">(child[j]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> j);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-function)">hasRemoved</span><span style="color: var(--shiki-color-text)">()) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...somewhere in your visitCallback</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visitCallback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">remove</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,fc,j,xc,qa,gc,mc,Ga,wc,_c,Ua,bc,Ec,Ya,Tc,Ac,Sc,Ka,sf=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callbackMap) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_visit</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> _hasRemoved </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">_this</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// don&#39;t need to take in &#96;node&#96; and &#96;parent&#96;,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// because it know exactly what they are</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">remove</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        _hasRemoved </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// proceed to remove current node</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (nodeType </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> callbackMap) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      callbackMap[nodeType]</span><span style="color: var(--shiki-token-function)">.call</span><span style="color: var(--shiki-color-text)">(_this</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...somewhere in your visitCallback</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visitCallback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.remove</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ic,We,Dc,Cc,X,Pc,Qa,Oc,Mc,co,Nc,Lc,ho,jc,Hc,Rc,qe,Bc,Fc,ko,Za,Ge,Vc,zc,Jc,Xa,Ue,$c,Wc,qc,Ye,Gc,Pn,b,Ke,vo,Uc,Yc,yo,Kc,st,Qc,Zc,Xc,C,sh,ot,oh,ah,at,th,eh,tt,nh,rh,et,lh,ih,uo,ph,ch,hh,nt,of=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">figure</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">img</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">class</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;foo&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">figcaption</span><span style="color: var(--shiki-color-text)">&gt;lorem ipsum&lt;/</span><span style="color: var(--shiki-token-string-expression)">figcaption</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">figure</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,kh,Qe,vh,yh,rt,af=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(node) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">/* 1. is node &lt;figure&gt; */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;tag&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;figure&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">/* 2. is node contain class &#96;foo&#96; */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">attribs</span><span style="color: var(--shiki-color-text)">.class </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">/* 3. is node children contain &lt;img&gt; */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">children</span><span style="color: var(--shiki-token-function)">.find</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      child </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;tag&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;img&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    ) </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">undefined</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">/* 4. is node children contain &lt;figcaption&gt; */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">children</span><span style="color: var(--shiki-token-function)">.find</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      child </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;tag&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;figcaption&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    ) </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">undefined</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// do something</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,dh,Ze,uh,fh,lt,tf=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">isTag</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> name) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;tag&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> name;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">hasAttr</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.attribs[key] </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> value;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">hasChild</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> fn) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">children</span><span style="color: var(--shiki-token-function)">.find</span><span style="color: var(--shiki-color-text)">(fn) </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">undefined</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(node) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">/* 1. is node &lt;figure&gt; */</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">isTag</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;figure&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">/* 2. is node contain class &#96;foo&#96; */</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">hasAttr</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;class&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">/* 3. is node children contain &lt;img&gt; */</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">hasChild</span><span style="color: var(--shiki-color-text)">(child </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">isTag</span><span style="color: var(--shiki-color-text)">(child</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;img&#39;</span><span style="color: var(--shiki-color-text)">)) </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">/* 4. is node children contain &lt;figcaption&gt; */</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">hasChild</span><span style="color: var(--shiki-color-text)">(child </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">isTag</span><span style="color: var(--shiki-color-text)">(child</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;figcaption&#39;</span><span style="color: var(--shiki-color-text)">))</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  ) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// do something</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,On,x,Xe,fo,xh,gh,sn,mh,wh,xo,_h,on,bh,Eh,Th,it,ef=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newNode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  type</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Identifier&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,Ah,go,Sh,mo,Ih,Dh,Ch,pt,nf=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newNode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.identifier</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newNode2</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.functionDeclaration</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;bar&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  [</span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.identifier</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">)]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.expressionStatement</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.callExpression</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.memberExpression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.identifier</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;console&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.identifier</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;log&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        [</span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.identifier</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">)]</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      )</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    )</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.returnStatement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.identifier</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ]</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,Ph,an,Oh,Mh,us,Nh,ct,Lh,jh,ht,Hh,Rh,Bh,kt,rf=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newNode2</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babelParser</span><span style="color: var(--shiki-token-function)">.parse</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  function bar(foo) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    console.log(foo);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    return foo;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">).</span><span style="color: var(--shiki-token-constant)">program</span><span style="color: var(--shiki-color-text)">.body[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">];</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newNode3</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">cssTree</span><span style="color: var(--shiki-token-function)">.parse</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  .foo &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    color: red;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#123; context</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;rule&#39;</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,Fh,fs,Vh,wo,zh,Jh,_o,$h,Wh,qh,vt,lf=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newNode4</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">template</span><span style="color: var(--shiki-token-string-expression)">.</span><span style="color: var(--shiki-token-function)">statement</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  console.log(foo);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// placeholder can be an AST node or string</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newNode5</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">template</span><span style="color: var(--shiki-token-string-expression)">.</span><span style="color: var(--shiki-token-function)">statement</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  function bar(foo) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">newNode4</span><span style="color: var(--shiki-token-keyword)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    alert(&quot;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-string-expression)">&#39;hello world&#39;</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&quot;)</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    return foo;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`,Mn,B,tn,bo,Gh,Uh,en,Yh,Kh,ss,nn,Qh,Zh,rn,Xh,sk,ln,ok,ak,pn,tk,ek,os,cn,hn,nk,rk,Eo,lk,To,ik,pk,ck,kn,hk,kk,vn,yn,Ao,vk,Nn,es,dn,So,yk,dk,gs,Io,uk,fk,Do,xk,gk,mk,P,un,Co,wk,_k,fn,Po,bk,Ek,xn,Oo,Tk,Ak,gn,Mo,Sk,Ik,mn,No,Dk,Ck,wn,Lo,Pk,Ln;return m=new Vf({props:{data:[{link:"the-parsers",title:"The parsers"},{link:"traversing-an-ast",title:"Traversing an AST"},{link:"manipulating-ast",title:"Manipulating AST",nested:[{link:"adding-a-node",title:"Adding a node"},{link:"replacing-a-node",title:"Replacing a node"},{link:"removing-a-node",title:"Removing a node"}]},{link:"targeting-a-node",title:"Targeting a node"},{link:"creating-a-node",title:"Creating a node"},{link:"summary",title:"Summary"},{link:"further-readings",title:"Further Readings"}]}}),{c(){Pu(m.$$.fragment),J=i(),E=a("p"),Os=n("Previously, I've talked about "),w=a("a"),$=n("how to write a babel transformation"),Ro=n(", and I went one step deeper into "),Ms=a("a"),Zn=n("Babel"),Xn=n(", by "),Bo=a("a"),sr=n("showing how you can create a custom JavaScript syntax"),or=n(", I demonstrated how Babel parses your code into AST, transforms it and generates back into code."),bn=i(),Fo=a("p"),ar=n("Armed with the knowledge and experience of playing the JavaScript AST with Babel, let's take a look at how we can generalize this knowledge into other languages as well."),En=i(),xs=a("blockquote"),S=a("p"),tr=n('When I refer to "other languages", I am actually referring to popular frontend languages, for example: '),Ns=a("a"),er=n("JavaScript"),nr=n(", "),Ls=a("a"),rr=n("TypeScript"),lr=n(", "),js=a("a"),ir=n("Sass"),pr=n(", "),Hs=a("a"),cr=n("CSS"),hr=n(", "),Rs=a("a"),kr=n("HTML"),vr=n(", "),Bs=a("a"),yr=n("markdown"),dr=n("..."),ur=i(),Et=a("p"),fr=n("Of course, it does not limit to just frontend languages. It's just that it's easier to find a parser for these languages written in JavaScript than other languages, say C++ or Java."),Tn=i(),u=a("section"),Tt=a("h2"),Fs=a("a"),xr=n("The parsers"),gr=i(),At=a("p"),mr=n("Like how we use Babel to do parsing and generating JavaScript, there are other libraries out there to help us with parsing and generating our language."),wr=i(),Vs=a("p"),_r=n("One easy trick to find these libraries is through "),zs=a("a"),br=n("https://astexplorer.net/"),Er=n("."),Tr=i(),St=a("p"),is=a("span"),H=a("img"),Ar=i(),L=a("p"),Sr=n("After you choose a language, you would see a list of parsers you can use to parse your language. For example, if you choose "),It=a("strong"),Ir=n("HTML"),Dr=n(", there's "),Js=a("a"),Cr=n("htmlparser2"),Pr=n(", "),$s=a("a"),Or=n("hyntax"),Mr=n(", "),Ws=a("a"),Nr=n("parse5"),Lr=n("... And when you choose one of the parsers, you can immediately see how the AST looks like on the right panel and the Github link to the parser on the top right."),jr=i(),Dt=a("p"),ps=a("span"),Vo=a("picture"),Ct=a("source"),R=a("img"),Hr=i(),cs=a("p"),Rr=n("Here is a un-exhaustive list of parsers, and it's "),zo=a("code"),Br=n("parse"),Fr=n(" and "),Jo=a("code"),Vr=n("generate"),zr=n(" methods:"),Jr=i(),qs=a("div"),Gs=a("table"),Pt=a("thead"),W=a("tr"),Ot=a("th"),$r=n("Language"),Wr=i(),Mt=a("th"),qr=n("Parser"),Gr=i(),Nt=a("th"),$o=a("code"),Ur=n("parse"),Yr=i(),Lt=a("th"),Wo=a("code"),Kr=n("generate"),Qr=i(),D=a("tbody"),q=a("tr"),jt=a("td"),Zr=n("HTML"),Xr=i(),Ht=a("td"),qo=a("a"),sl=n("parse5"),ol=i(),Rt=a("td"),Go=a("a"),Uo=a("code"),al=n("parse5.parse(str)"),tl=i(),Bt=a("td"),Yo=a("a"),Ko=a("code"),el=n("parse5.serialize(ast)"),nl=i(),G=a("tr"),Ft=a("td"),rl=n("Markdown"),ll=i(),Vt=a("td"),Qo=a("a"),il=n("remark"),pl=i(),zt=a("td"),Zo=a("a"),Xo=a("code"),cl=n("unified().use(remarkParse)"),hl=i(),Jt=a("td"),sa=a("a"),oa=a("code"),kl=n("unified().use(remarkStringify)"),vl=i(),U=a("tr"),$t=a("td"),yl=n("CSS"),dl=i(),Wt=a("td"),aa=a("a"),ul=n("css-tree"),fl=i(),qt=a("td"),ta=a("a"),ea=a("code"),xl=n("csstree.parse(str)"),gl=i(),Gt=a("td"),na=a("a"),ra=a("code"),ml=n("csstree.generate(ast)"),wl=i(),Y=a("tr"),Ut=a("td"),_l=n("Sass"),bl=i(),Yt=a("td"),la=a("a"),El=n("sast"),Tl=i(),Kt=a("td"),ia=a("a"),pa=a("code"),Al=n("sast.parse(str)"),Sl=i(),Qt=a("td"),ca=a("a"),ha=a("code"),Il=n("sast.stringify(ast)"),Dl=i(),K=a("tr"),Zt=a("td"),Cl=n("JavaScript"),Pl=i(),Xt=a("td"),ka=a("a"),Ol=n("babel"),Ml=i(),se=a("td"),va=a("a"),ya=a("code"),Nl=n("babel.parse(str)"),Ll=i(),oe=a("td"),da=a("a"),ua=a("code"),jl=n("babel.generate(ast)"),Hl=i(),Q=a("tr"),ae=a("td"),Rl=n("TypeScript"),Bl=i(),te=a("td"),fa=a("a"),Fl=n("TypeScript"),Vl=i(),ee=a("td"),xa=a("a"),ga=a("code"),zl=n("ts.createSourceFile(str)"),Jl=i(),ne=a("td"),ma=a("a"),wa=a("code"),$l=n("ts.createPrinter().printFile(ast)"),Wl=i(),re=a("p"),ql=n("As you can see most parsers provide both parsing and generating methods."),Gl=i(),le=a("p"),Ul=n("So in general, you can have the following as a template to write your code transformation code:"),Yl=i(),_a=a("div"),Kl=i(),ie=a("p"),Ql=n("You can, of course, transforming AST of one language to AST of another language, for example: Sass \u27A1\uFE0F CSS, Markdown \u27A1\uFE0F HTML, and use the generator of another language to generate out the code."),Zl=i(),ba=a("div"),Xl=i(),hs=a("p"),si=n("Now armed with this template, let's talk about the more "),pe=a("em"),oi=n("magical"),ai=n(" stuff, "),ce=a("em"),ti=n("the transform function"),ei=n("."),An=i(),k=a("section"),he=a("h2"),Us=a("a"),ni=n("Traversing an AST"),ri=i(),ks=a("p"),li=n("As the name AST suggests, AST uses a tree data structure. To hone the skills of manipulating AST, we need to recall our long distant memory of "),ke=a("em"),ii=n('"Algorithm 101"'),pi=n(", the "),ve=a("strong"),ci=n("depth-first search (DFS)"),hi=n(" tree traversal algorithm."),ki=i(),as=a("p"),Ys=a("a"),vi=n("Vaidehi Joshi"),yi=n(" wrote an amazing article on "),Ks=a("a"),di=n("demystifying Depth-First Search"),ui=n(", I don't think I can explain any better, so if you want to recap on depth-first search, please go and read "),Qs=a("a"),fi=n("her article"),xi=n(" before we continue."),gi=i(),ye=a("p"),mi=n("Now you have a clearer idea of how depth-first search works, a depth-first search on an AST would look something like this:"),wi=i(),Ea=a("div"),_i=i(),Zs=a("p"),bi=n("We can then fill up the "),Ta=a("code"),Ei=n("TODO"),Ti=n(" with our manipulation code."),Ai=i(),vs=a("p"),Si=n("If we find ourselves needing to do multiple traversals, with different AST manipulation, we would soon realize that mixing AST manipulation code with the traversal code is "),de=a("em"),Ii=n("not clean enough"),Di=n(". Naturally, you would realize "),ue=a("em"),Ci=n("it is cleaner"),Pi=n(" to pass in a callback function that gets called every time we visit a node:"),Oi=i(),Aa=a("div"),Mi=i(),Xs=a("p"),Ni=n("The "),Sa=a("code"),Li=n("visit"),ji=n(" function is now generic enough that you can use it for any AST:"),Hi=i(),Ia=a("div"),Ri=i(),fe=a("p"),Bi=n("Naturally, you would think that having the information of the parent node, and the key / index of the current node would be useful to have in the callback function:"),Fi=i(),Da=a("div"),Vi=i(),so=a("p"),zi=n("Now, we might think to ourselves, I dont want to get callback for every node visited, I just need callback for a certain node. You might be tempted to add a condition in the "),Ca=a("code"),Ji=n("visit"),$i=n(" function:"),Wi=i(),Pa=a("div"),qi=i(),Oa=a("p"),Gi=n("But you think twice: "),oo=a("em"),Ui=n("what if someone else wants to use "),Ma=a("code"),Yi=n("visit"),Ki=n(" but with a different condition for callback?"),Qi=i(),xe=a("p"),Zi=n("For most of the time, you want to callback only to a certain types of node. In that case, instead of passing in a callback function, you can pass in a map of node type to their respective callback functions:"),Xi=i(),Na=a("div"),sp=i(),ao=a("p"),op=n("At this point, you maybe realize, "),ge=a("em"),ap=n("hey, this looks so much like one of those AST traversing libraries!"),tp=n(" And yes, this is how they get implemented."),ep=i(),me=a("p"),np=n("Now we can traverse the AST, and find the node that we are interested in, so the next step is to manipulate them."),Sn=i(),ts=a("section"),we=a("h2"),to=a("a"),rp=n("Manipulating AST"),lp=i(),_e=a("p"),ip=n("Manipulating the AST can be categorized into 3 different operations:"),pp=i(),ys=a("ul"),be=a("li"),cp=n("Adding a node"),hp=i(),Ee=a("li"),kp=n("Replacing a node"),vp=i(),Te=a("li"),yp=n("Removing a node"),In=i(),T=a("section"),Ae=a("h3"),eo=a("a"),dp=n("Adding a node"),up=i(),Se=a("p"),fp=n("To add a node, you can assign it to a keyed property of your node:"),xp=i(),La=a("div"),gp=i(),Ie=a("p"),mp=n("or push the new node, if the keyed property is an array:"),wp=i(),ja=a("div"),_p=i(),De=a("p"),bp=n("To add a node as a sibling, you may need to access the node's parent:"),Ep=i(),Ha=a("div"),Dn=i(),O=a("section"),Ce=a("h3"),no=a("a"),Tp=n("Replacing a node"),Ap=i(),Pe=a("p"),Sp=n("To replace the current node to another node, update the key property of the current node's parent:"),Ip=i(),Ra=a("div"),Dp=i(),Oe=a("p"),Cp=n("If the key property of the parent is an array:"),Pp=i(),Ba=a("div"),Cn=i(),h=a("section"),Me=a("h3"),ro=a("a"),Op=n("Removing a node"),Mp=i(),Ne=a("p"),Np=n("To remove the current node, delete the key property of the current node's parent:"),Lp=i(),Fa=a("div"),jp=i(),Le=a("p"),Hp=n("If the key property of the parent is an array:"),Rp=i(),Va=a("div"),Bp=i(),je=a("blockquote"),Z=a("p"),Fp=n("The operations of "),He=a("strong"),Vp=n("adding"),zp=n(", "),Re=a("strong"),Jp=n("replacing"),$p=n(", and "),Be=a("strong"),Wp=n("removing"),qp=n(" nodes are so common that, they are usually implemented as a util function."),Gp=i(),lo=a("p"),Up=n("However, there's "),Fe=a("strong"),Yp=n("one important step"),Kp=n(" that I did not cover: after you mutate the node, you need to make sure that the traversal still works fine."),Qp=i(),ds=a("p"),Zp=n("For a node that is a property of a key of its parent, adding, replacing and removing them are usually fine. Except for the replace operation, you might need to revisit the "),Ve=a("em"),Xp=n('"current node"'),sc=n(", which is the "),ze=a("em"),oc=n("new replacing node"),ac=n("."),tc=i(),Je=a("p"),ec=n("However, for node that are in an array, you need to take special care to update the array index of the loop:"),nc=i(),za=a("div"),rc=i(),$e=a("p"),lc=n("But how do you know that the current node was removed?"),ic=i(),io=a("p"),pc=n("Well, knowing when a node got removed is sometimes a secret that lies within the "),Ja=a("code"),cc=n("remove"),hc=n(" util function from the tree traversal library."),kc=i(),po=a("p"),vc=n("It could be as simple as setting a flag when you call "),$a=a("code"),yc=n("remove"),dc=n(":"),uc=i(),Wa=a("div"),fc=i(),j=a("p"),xc=n("But sometimes, instead of having to import the "),qa=a("code"),gc=n("remove"),mc=n(" util from the tree traversal library, the "),Ga=a("code"),wc=n("remove"),_c=n(" function is available in "),Ua=a("code"),bc=n("this"),Ec=n(" of the "),Ya=a("code"),Tc=n("visitCallback"),Ac=n(":"),Sc=i(),Ka=a("div"),Ic=i(),We=a("p"),Dc=n("Now you learned the 3 basic operations of manipulating the AST, you maybe wonder how exactly is to use these basic operations to write a codemod or an AST transform plugin?"),Cc=i(),X=a("p"),Pc=n("Well, in my "),Qa=a("a"),Oc=n("step-by-step guide"),Mc=n(", I've explained that, you can use AST explorer like "),co=a("a"),Nc=n("http://astexplorer.net/"),Lc=n(" or "),ho=a("a"),jc=n("Babel AST Explorer"),Hc=n(" to help you."),Rc=i(),qe=a("p"),Bc=n("You need to:"),Fc=i(),ko=a("ul"),Za=a("li"),Ge=a("strong"),Vc=n("Know how the part of the code you want to change look like in the AST"),zc=n(", so you can target the specific type of the node, and"),Jc=i(),Xa=a("li"),Ue=a("strong"),$c=n("Know how does the final output you wish to see look like in the AST"),Wc=n(", so you know what nodes to create, update or remove."),qc=i(),Ye=a("p"),Gc=n("So we are going to elaborate more on these 2 steps specifically."),Pn=i(),b=a("section"),Ke=a("h2"),vo=a("a"),Uc=n("Targeting a node"),Yc=i(),yo=a("p"),Kc=n("Node targeting, most of the times, is just a lot of "),st=a("code"),Qc=n("==="),Zc=n("."),Xc=i(),C=a("p"),sh=n("For example, if you want to target a "),ot=a("code"),oh=n("<figure>"),ah=n(" with a class "),at=a("code"),th=n("foo"),eh=n(" that contains an "),tt=a("code"),nh=n("<img>"),rh=n(" and a "),et=a("code"),lh=n("<figcaption>"),ih=n(" in "),uo=a("a"),ph=n("htmlparser2"),ch=n(":"),hh=i(),nt=a("div"),kh=i(),Qe=a("p"),vh=n("You need to check:"),yh=i(),rt=a("div"),dh=i(),Ze=a("p"),uh=n("To make it less verbose, we can refactor each check into reusable functions:"),fh=i(),lt=a("div"),On=i(),x=a("section"),Xe=a("h2"),fo=a("a"),xh=n("Creating a node"),gh=i(),sn=a("p"),mh=n("There are a few ways you can create an AST node."),wh=i(),xo=a("p"),_h=n("The simplest and crudest way is to "),on=a("strong"),bh=n("manually create the node object"),Eh=n(". Most of the time, the node object is a JavaScript object. So you can just create them manually:"),Th=i(),it=a("div"),Ah=i(),go=a("p"),Sh=n("It may become unwieldy when creating large, complex AST nodes, so sometimes library decides to provide builder functions, like "),mo=a("a"),Ih=n("@babel/types"),Dh=n(" to simplify node creation and provide default values:"),Ch=i(),pt=a("div"),Ph=i(),an=a("p"),Oh=n("It looked more concise and tidier, but it is hard to comprehend and grasp what node it is creating."),Mh=i(),us=a("p"),Nh=n("So, a better way of creating complex AST node, is to use the "),ct=a("code"),Lh=n("parse"),jh=n(" function + "),ht=a("code"),Hh=n("string"),Rh=n(":"),Bh=i(),kt=a("div"),Fh=i(),fs=a("p"),Vh=n("For Babel, there's an amazing util called "),wo=a("a"),zh=n("@babel/template"),Jh=n(", where you can use "),_o=a("a"),$h=n("template literals"),Wh=n(" to create AST node:"),qh=i(),vt=a("div"),Mn=i(),B=a("section"),tn=a("h2"),bo=a("a"),Gh=n("Summary"),Uh=i(),en=a("p"),Yh=n("We've gone through:"),Kh=i(),ss=a("ul"),nn=a("li"),Qh=n("How to traverse an AST, using depth-first search algorithm,"),Zh=i(),rn=a("li"),Xh=n("The 3 basic AST manipulations, addition, replacement, and removal,"),sk=i(),ln=a("li"),ok=n("How to target a node in AST, and"),ak=i(),pn=a("li"),tk=n("How to create an AST node"),ek=i(),os=a("blockquote"),cn=a("p"),hn=a("strong"),nk=n("Manipulating AST with JavaScript using Babel"),rk=i(),Eo=a("p"),lk=n("If you like what you've read so far, and want to learn how you could do it with Babel. I've created a "),To=a("a"),ik=n("video course"),pk=n(", showing you step-by-step, how to write a babel plugin and codemod."),ck=i(),kn=a("p"),hk=n("In the video course, I detailed tips and tricks, such as how to handle scope, how to use state, and also nested traversals."),kk=i(),vn=a("p"),yn=a("strong"),Ao=a("a"),vk=n("Sounds interesting, let's take a look at the video course"),Nn=i(),es=a("section"),dn=a("h2"),So=a("a"),yk=n("Further Readings"),dk=i(),gs=a("p"),Io=a("a"),uk=n("Dinesh (@flexdinesh)"),fk=i(),Do=a("a"),xk=n("tweeted"),gk=n(" his pocket collection of AST resources:"),mk=i(),P=a("ul"),un=a("li"),Co=a("a"),wk=n("Code Transformation and Linting with ASTs"),_k=i(),fn=a("li"),Po=a("a"),bk=n("Write your own code transform for fun and profit"),Ek=i(),xn=a("li"),Oo=a("a"),Tk=n("Understanding ASTs by Building Your Own Babel Plugin"),Ak=i(),gn=a("li"),Mo=a("a"),Sk=n("Writing your first Babel Plugin"),Ik=i(),mn=a("li"),No=a("a"),Dk=n("This is how I build Babel plug-ins"),Ck=i(),wn=a("li"),Lo=a("a"),Pk=n("Writing My First Babel Plugin"),this.h()},l(c){Ou(m.$$.fragment,c),J=p(c),E=t(c,"P",{});var d=e(E);Os=r(d,"Previously, I've talked about "),w=t(d,"A",{href:!0});var Bk=e(w);$=r(Bk,"how to write a babel transformation"),Bk.forEach(o),Ro=r(d,", and I went one step deeper into "),Ms=t(d,"A",{href:!0,rel:!0});var Fk=e(Ms);Zn=r(Fk,"Babel"),Fk.forEach(o),Xn=r(d,", by "),Bo=t(d,"A",{href:!0});var Vk=e(Bo);sr=r(Vk,"showing how you can create a custom JavaScript syntax"),Vk.forEach(o),or=r(d,", I demonstrated how Babel parses your code into AST, transforms it and generates back into code."),d.forEach(o),bn=p(c),Fo=t(c,"P",{});var zk=e(Fo);ar=r(zk,"Armed with the knowledge and experience of playing the JavaScript AST with Babel, let's take a look at how we can generalize this knowledge into other languages as well."),zk.forEach(o),En=p(c),xs=t(c,"BLOCKQUOTE",{});var jn=e(xs);S=t(jn,"P",{});var M=e(S);tr=r(M,'When I refer to "other languages", I am actually referring to popular frontend languages, for example: '),Ns=t(M,"A",{href:!0,rel:!0});var Jk=e(Ns);er=r(Jk,"JavaScript"),Jk.forEach(o),nr=r(M,", "),Ls=t(M,"A",{href:!0,rel:!0});var $k=e(Ls);rr=r($k,"TypeScript"),$k.forEach(o),lr=r(M,", "),js=t(M,"A",{href:!0,rel:!0});var Wk=e(js);ir=r(Wk,"Sass"),Wk.forEach(o),pr=r(M,", "),Hs=t(M,"A",{href:!0,rel:!0});var qk=e(Hs);cr=r(qk,"CSS"),qk.forEach(o),hr=r(M,", "),Rs=t(M,"A",{href:!0,rel:!0});var Gk=e(Rs);kr=r(Gk,"HTML"),Gk.forEach(o),vr=r(M,", "),Bs=t(M,"A",{href:!0,rel:!0});var Uk=e(Bs);yr=r(Uk,"markdown"),Uk.forEach(o),dr=r(M,"..."),M.forEach(o),ur=p(jn),Et=t(jn,"P",{});var Yk=e(Et);fr=r(Yk,"Of course, it does not limit to just frontend languages. It's just that it's easier to find a parser for these languages written in JavaScript than other languages, say C++ or Java."),Yk.forEach(o),jn.forEach(o),Tn=p(c),u=t(c,"SECTION",{});var f=e(u);Tt=t(f,"H2",{});var Kk=e(Tt);Fs=t(Kk,"A",{href:!0,id:!0});var Qk=e(Fs);xr=r(Qk,"The parsers"),Qk.forEach(o),Kk.forEach(o),gr=p(f),At=t(f,"P",{});var Zk=e(At);mr=r(Zk,"Like how we use Babel to do parsing and generating JavaScript, there are other libraries out there to help us with parsing and generating our language."),Zk.forEach(o),wr=p(f),Vs=t(f,"P",{});var Hn=e(Vs);_r=r(Hn,"One easy trick to find these libraries is through "),zs=t(Hn,"A",{href:!0,rel:!0});var Xk=e(zs);br=r(Xk,"https://astexplorer.net/"),Xk.forEach(o),Er=r(Hn,"."),Hn.forEach(o),Tr=p(f),St=t(f,"P",{});var sv=e(St);is=t(sv,"SPAN",{style:!0});var ov=e(is);H=t(ov,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),ov.forEach(o),sv.forEach(o),Ar=p(f),L=t(f,"P",{});var ns=e(L);Sr=r(ns,"After you choose a language, you would see a list of parsers you can use to parse your language. For example, if you choose "),It=t(ns,"STRONG",{});var av=e(It);Ir=r(av,"HTML"),av.forEach(o),Dr=r(ns,", there's "),Js=t(ns,"A",{href:!0,rel:!0});var tv=e(Js);Cr=r(tv,"htmlparser2"),tv.forEach(o),Pr=r(ns,", "),$s=t(ns,"A",{href:!0,rel:!0});var ev=e($s);Or=r(ev,"hyntax"),ev.forEach(o),Mr=r(ns,", "),Ws=t(ns,"A",{href:!0,rel:!0});var nv=e(Ws);Nr=r(nv,"parse5"),nv.forEach(o),Lr=r(ns,"... And when you choose one of the parsers, you can immediately see how the AST looks like on the right panel and the Github link to the parser on the top right."),ns.forEach(o),jr=p(f),Dt=t(f,"P",{});var rv=e(Dt);ps=t(rv,"SPAN",{style:!0});var lv=e(ps);Vo=t(lv,"PICTURE",{});var Ok=e(Vo);Ct=t(Ok,"SOURCE",{type:!0,srcset:!0}),R=t(Ok,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),Ok.forEach(o),lv.forEach(o),rv.forEach(o),Hr=p(f),cs=t(f,"P",{});var yt=e(cs);Rr=r(yt,"Here is a un-exhaustive list of parsers, and it's "),zo=t(yt,"CODE",{class:!0});var iv=e(zo);Br=r(iv,"parse"),iv.forEach(o),Fr=r(yt," and "),Jo=t(yt,"CODE",{class:!0});var pv=e(Jo);Vr=r(pv,"generate"),pv.forEach(o),zr=r(yt," methods:"),yt.forEach(o),Jr=p(f),qs=t(f,"DIV",{style:!0});var cv=e(qs);Gs=t(cv,"TABLE",{});var Rn=e(Gs);Pt=t(Rn,"THEAD",{});var hv=e(Pt);W=t(hv,"TR",{});var ms=e(W);Ot=t(ms,"TH",{});var kv=e(Ot);$r=r(kv,"Language"),kv.forEach(o),Wr=p(ms),Mt=t(ms,"TH",{});var vv=e(Mt);qr=r(vv,"Parser"),vv.forEach(o),Gr=p(ms),Nt=t(ms,"TH",{});var yv=e(Nt);$o=t(yv,"CODE",{class:!0});var dv=e($o);Ur=r(dv,"parse"),dv.forEach(o),yv.forEach(o),Yr=p(ms),Lt=t(ms,"TH",{});var uv=e(Lt);Wo=t(uv,"CODE",{class:!0});var fv=e(Wo);Kr=r(fv,"generate"),fv.forEach(o),uv.forEach(o),ms.forEach(o),hv.forEach(o),Qr=p(Rn),D=t(Rn,"TBODY",{});var F=e(D);q=t(F,"TR",{});var ws=e(q);jt=t(ws,"TD",{});var xv=e(jt);Zr=r(xv,"HTML"),xv.forEach(o),Xr=p(ws),Ht=t(ws,"TD",{});var gv=e(Ht);qo=t(gv,"A",{href:!0});var mv=e(qo);sl=r(mv,"parse5"),mv.forEach(o),gv.forEach(o),ol=p(ws),Rt=t(ws,"TD",{});var wv=e(Rt);Go=t(wv,"A",{href:!0});var _v=e(Go);Uo=t(_v,"CODE",{class:!0});var bv=e(Uo);al=r(bv,"parse5.parse(str)"),bv.forEach(o),_v.forEach(o),wv.forEach(o),tl=p(ws),Bt=t(ws,"TD",{});var Ev=e(Bt);Yo=t(Ev,"A",{href:!0});var Tv=e(Yo);Ko=t(Tv,"CODE",{class:!0});var Av=e(Ko);el=r(Av,"parse5.serialize(ast)"),Av.forEach(o),Tv.forEach(o),Ev.forEach(o),ws.forEach(o),nl=p(F),G=t(F,"TR",{});var _s=e(G);Ft=t(_s,"TD",{});var Sv=e(Ft);rl=r(Sv,"Markdown"),Sv.forEach(o),ll=p(_s),Vt=t(_s,"TD",{});var Iv=e(Vt);Qo=t(Iv,"A",{href:!0});var Dv=e(Qo);il=r(Dv,"remark"),Dv.forEach(o),Iv.forEach(o),pl=p(_s),zt=t(_s,"TD",{});var Cv=e(zt);Zo=t(Cv,"A",{href:!0});var Pv=e(Zo);Xo=t(Pv,"CODE",{class:!0});var Ov=e(Xo);cl=r(Ov,"unified().use(remarkParse)"),Ov.forEach(o),Pv.forEach(o),Cv.forEach(o),hl=p(_s),Jt=t(_s,"TD",{});var Mv=e(Jt);sa=t(Mv,"A",{href:!0});var Nv=e(sa);oa=t(Nv,"CODE",{class:!0});var Lv=e(oa);kl=r(Lv,"unified().use(remarkStringify)"),Lv.forEach(o),Nv.forEach(o),Mv.forEach(o),_s.forEach(o),vl=p(F),U=t(F,"TR",{});var bs=e(U);$t=t(bs,"TD",{});var jv=e($t);yl=r(jv,"CSS"),jv.forEach(o),dl=p(bs),Wt=t(bs,"TD",{});var Hv=e(Wt);aa=t(Hv,"A",{href:!0});var Rv=e(aa);ul=r(Rv,"css-tree"),Rv.forEach(o),Hv.forEach(o),fl=p(bs),qt=t(bs,"TD",{});var Bv=e(qt);ta=t(Bv,"A",{href:!0});var Fv=e(ta);ea=t(Fv,"CODE",{class:!0});var Vv=e(ea);xl=r(Vv,"csstree.parse(str)"),Vv.forEach(o),Fv.forEach(o),Bv.forEach(o),gl=p(bs),Gt=t(bs,"TD",{});var zv=e(Gt);na=t(zv,"A",{href:!0});var Jv=e(na);ra=t(Jv,"CODE",{class:!0});var $v=e(ra);ml=r($v,"csstree.generate(ast)"),$v.forEach(o),Jv.forEach(o),zv.forEach(o),bs.forEach(o),wl=p(F),Y=t(F,"TR",{});var Es=e(Y);Ut=t(Es,"TD",{});var Wv=e(Ut);_l=r(Wv,"Sass"),Wv.forEach(o),bl=p(Es),Yt=t(Es,"TD",{});var qv=e(Yt);la=t(qv,"A",{href:!0});var Gv=e(la);El=r(Gv,"sast"),Gv.forEach(o),qv.forEach(o),Tl=p(Es),Kt=t(Es,"TD",{});var Uv=e(Kt);ia=t(Uv,"A",{href:!0});var Yv=e(ia);pa=t(Yv,"CODE",{class:!0});var Kv=e(pa);Al=r(Kv,"sast.parse(str)"),Kv.forEach(o),Yv.forEach(o),Uv.forEach(o),Sl=p(Es),Qt=t(Es,"TD",{});var Qv=e(Qt);ca=t(Qv,"A",{href:!0});var Zv=e(ca);ha=t(Zv,"CODE",{class:!0});var Xv=e(ha);Il=r(Xv,"sast.stringify(ast)"),Xv.forEach(o),Zv.forEach(o),Qv.forEach(o),Es.forEach(o),Dl=p(F),K=t(F,"TR",{});var Ts=e(K);Zt=t(Ts,"TD",{});var sy=e(Zt);Cl=r(sy,"JavaScript"),sy.forEach(o),Pl=p(Ts),Xt=t(Ts,"TD",{});var oy=e(Xt);ka=t(oy,"A",{href:!0});var ay=e(ka);Ol=r(ay,"babel"),ay.forEach(o),oy.forEach(o),Ml=p(Ts),se=t(Ts,"TD",{});var ty=e(se);va=t(ty,"A",{href:!0});var ey=e(va);ya=t(ey,"CODE",{class:!0});var ny=e(ya);Nl=r(ny,"babel.parse(str)"),ny.forEach(o),ey.forEach(o),ty.forEach(o),Ll=p(Ts),oe=t(Ts,"TD",{});var ry=e(oe);da=t(ry,"A",{href:!0});var ly=e(da);ua=t(ly,"CODE",{class:!0});var iy=e(ua);jl=r(iy,"babel.generate(ast)"),iy.forEach(o),ly.forEach(o),ry.forEach(o),Ts.forEach(o),Hl=p(F),Q=t(F,"TR",{});var As=e(Q);ae=t(As,"TD",{});var py=e(ae);Rl=r(py,"TypeScript"),py.forEach(o),Bl=p(As),te=t(As,"TD",{});var cy=e(te);fa=t(cy,"A",{href:!0});var hy=e(fa);Fl=r(hy,"TypeScript"),hy.forEach(o),cy.forEach(o),Vl=p(As),ee=t(As,"TD",{});var ky=e(ee);xa=t(ky,"A",{href:!0});var vy=e(xa);ga=t(vy,"CODE",{class:!0});var yy=e(ga);zl=r(yy,"ts.createSourceFile(str)"),yy.forEach(o),vy.forEach(o),ky.forEach(o),Jl=p(As),ne=t(As,"TD",{});var dy=e(ne);ma=t(dy,"A",{href:!0});var uy=e(ma);wa=t(uy,"CODE",{class:!0});var fy=e(wa);$l=r(fy,"ts.createPrinter().printFile(ast)"),fy.forEach(o),uy.forEach(o),dy.forEach(o),As.forEach(o),F.forEach(o),Rn.forEach(o),cv.forEach(o),Wl=p(f),re=t(f,"P",{});var xy=e(re);ql=r(xy,"As you can see most parsers provide both parsing and generating methods."),xy.forEach(o),Gl=p(f),le=t(f,"P",{});var gy=e(le);Ul=r(gy,"So in general, you can have the following as a template to write your code transformation code:"),gy.forEach(o),Yl=p(f),_a=t(f,"DIV",{class:!0});var pf=e(_a);pf.forEach(o),Kl=p(f),ie=t(f,"P",{});var my=e(ie);Ql=r(my,"You can, of course, transforming AST of one language to AST of another language, for example: Sass \u27A1\uFE0F CSS, Markdown \u27A1\uFE0F HTML, and use the generator of another language to generate out the code."),my.forEach(o),Zl=p(f),ba=t(f,"DIV",{class:!0});var cf=e(ba);cf.forEach(o),Xl=p(f),hs=t(f,"P",{});var dt=e(hs);si=r(dt,"Now armed with this template, let's talk about the more "),pe=t(dt,"EM",{});var wy=e(pe);oi=r(wy,"magical"),wy.forEach(o),ai=r(dt," stuff, "),ce=t(dt,"EM",{});var _y=e(ce);ti=r(_y,"the transform function"),_y.forEach(o),ei=r(dt,"."),dt.forEach(o),f.forEach(o),An=p(c),k=t(c,"SECTION",{});var y=e(k);he=t(y,"H2",{});var by=e(he);Us=t(by,"A",{href:!0,id:!0});var Ey=e(Us);ni=r(Ey,"Traversing an AST"),Ey.forEach(o),by.forEach(o),ri=p(y),ks=t(y,"P",{});var ut=e(ks);li=r(ut,"As the name AST suggests, AST uses a tree data structure. To hone the skills of manipulating AST, we need to recall our long distant memory of "),ke=t(ut,"EM",{});var Ty=e(ke);ii=r(Ty,'"Algorithm 101"'),Ty.forEach(o),pi=r(ut,", the "),ve=t(ut,"STRONG",{});var Ay=e(ve);ci=r(Ay,"depth-first search (DFS)"),Ay.forEach(o),hi=r(ut," tree traversal algorithm."),ut.forEach(o),ki=p(y),as=t(y,"P",{});var jo=e(as);Ys=t(jo,"A",{href:!0,rel:!0});var Sy=e(Ys);vi=r(Sy,"Vaidehi Joshi"),Sy.forEach(o),yi=r(jo," wrote an amazing article on "),Ks=t(jo,"A",{href:!0,rel:!0});var Iy=e(Ks);di=r(Iy,"demystifying Depth-First Search"),Iy.forEach(o),ui=r(jo,", I don't think I can explain any better, so if you want to recap on depth-first search, please go and read "),Qs=t(jo,"A",{href:!0,rel:!0});var Dy=e(Qs);fi=r(Dy,"her article"),Dy.forEach(o),xi=r(jo," before we continue."),jo.forEach(o),gi=p(y),ye=t(y,"P",{});var Cy=e(ye);mi=r(Cy,"Now you have a clearer idea of how depth-first search works, a depth-first search on an AST would look something like this:"),Cy.forEach(o),wi=p(y),Ea=t(y,"DIV",{class:!0});var hf=e(Ea);hf.forEach(o),_i=p(y),Zs=t(y,"P",{});var Bn=e(Zs);bi=r(Bn,"We can then fill up the "),Ta=t(Bn,"CODE",{class:!0});var Py=e(Ta);Ei=r(Py,"TODO"),Py.forEach(o),Ti=r(Bn," with our manipulation code."),Bn.forEach(o),Ai=p(y),vs=t(y,"P",{});var ft=e(vs);Si=r(ft,"If we find ourselves needing to do multiple traversals, with different AST manipulation, we would soon realize that mixing AST manipulation code with the traversal code is "),de=t(ft,"EM",{});var Oy=e(de);Ii=r(Oy,"not clean enough"),Oy.forEach(o),Di=r(ft,". Naturally, you would realize "),ue=t(ft,"EM",{});var My=e(ue);Ci=r(My,"it is cleaner"),My.forEach(o),Pi=r(ft," to pass in a callback function that gets called every time we visit a node:"),ft.forEach(o),Oi=p(y),Aa=t(y,"DIV",{class:!0});var kf=e(Aa);kf.forEach(o),Mi=p(y),Xs=t(y,"P",{});var Fn=e(Xs);Ni=r(Fn,"The "),Sa=t(Fn,"CODE",{class:!0});var Ny=e(Sa);Li=r(Ny,"visit"),Ny.forEach(o),ji=r(Fn," function is now generic enough that you can use it for any AST:"),Fn.forEach(o),Hi=p(y),Ia=t(y,"DIV",{class:!0});var vf=e(Ia);vf.forEach(o),Ri=p(y),fe=t(y,"P",{});var Ly=e(fe);Bi=r(Ly,"Naturally, you would think that having the information of the parent node, and the key / index of the current node would be useful to have in the callback function:"),Ly.forEach(o),Fi=p(y),Da=t(y,"DIV",{class:!0});var yf=e(Da);yf.forEach(o),Vi=p(y),so=t(y,"P",{});var Vn=e(so);zi=r(Vn,"Now, we might think to ourselves, I dont want to get callback for every node visited, I just need callback for a certain node. You might be tempted to add a condition in the "),Ca=t(Vn,"CODE",{class:!0});var jy=e(Ca);Ji=r(jy,"visit"),jy.forEach(o),$i=r(Vn," function:"),Vn.forEach(o),Wi=p(y),Pa=t(y,"DIV",{class:!0});var df=e(Pa);df.forEach(o),qi=p(y),Oa=t(y,"P",{});var Mk=e(Oa);Gi=r(Mk,"But you think twice: "),oo=t(Mk,"EM",{});var zn=e(oo);Ui=r(zn,"what if someone else wants to use "),Ma=t(zn,"CODE",{class:!0});var Hy=e(Ma);Yi=r(Hy,"visit"),Hy.forEach(o),Ki=r(zn," but with a different condition for callback?"),zn.forEach(o),Mk.forEach(o),Qi=p(y),xe=t(y,"P",{});var Ry=e(xe);Zi=r(Ry,"For most of the time, you want to callback only to a certain types of node. In that case, instead of passing in a callback function, you can pass in a map of node type to their respective callback functions:"),Ry.forEach(o),Xi=p(y),Na=t(y,"DIV",{class:!0});var uf=e(Na);uf.forEach(o),sp=p(y),ao=t(y,"P",{});var Jn=e(ao);op=r(Jn,"At this point, you maybe realize, "),ge=t(Jn,"EM",{});var By=e(ge);ap=r(By,"hey, this looks so much like one of those AST traversing libraries!"),By.forEach(o),tp=r(Jn," And yes, this is how they get implemented."),Jn.forEach(o),ep=p(y),me=t(y,"P",{});var Fy=e(me);np=r(Fy,"Now we can traverse the AST, and find the node that we are interested in, so the next step is to manipulate them."),Fy.forEach(o),y.forEach(o),Sn=p(c),ts=t(c,"SECTION",{});var xt=e(ts);we=t(xt,"H2",{});var Vy=e(we);to=t(Vy,"A",{href:!0,id:!0});var zy=e(to);rp=r(zy,"Manipulating AST"),zy.forEach(o),Vy.forEach(o),lp=p(xt),_e=t(xt,"P",{});var Jy=e(_e);ip=r(Jy,"Manipulating the AST can be categorized into 3 different operations:"),Jy.forEach(o),pp=p(xt),ys=t(xt,"UL",{});var gt=e(ys);be=t(gt,"LI",{});var $y=e(be);cp=r($y,"Adding a node"),$y.forEach(o),hp=p(gt),Ee=t(gt,"LI",{});var Wy=e(Ee);kp=r(Wy,"Replacing a node"),Wy.forEach(o),vp=p(gt),Te=t(gt,"LI",{});var qy=e(Te);yp=r(qy,"Removing a node"),qy.forEach(o),gt.forEach(o),xt.forEach(o),In=p(c),T=t(c,"SECTION",{});var N=e(T);Ae=t(N,"H3",{});var Gy=e(Ae);eo=t(Gy,"A",{href:!0,id:!0});var Uy=e(eo);dp=r(Uy,"Adding a node"),Uy.forEach(o),Gy.forEach(o),up=p(N),Se=t(N,"P",{});var Yy=e(Se);fp=r(Yy,"To add a node, you can assign it to a keyed property of your node:"),Yy.forEach(o),xp=p(N),La=t(N,"DIV",{class:!0});var ff=e(La);ff.forEach(o),gp=p(N),Ie=t(N,"P",{});var Ky=e(Ie);mp=r(Ky,"or push the new node, if the keyed property is an array:"),Ky.forEach(o),wp=p(N),ja=t(N,"DIV",{class:!0});var xf=e(ja);xf.forEach(o),_p=p(N),De=t(N,"P",{});var Qy=e(De);bp=r(Qy,"To add a node as a sibling, you may need to access the node's parent:"),Qy.forEach(o),Ep=p(N),Ha=t(N,"DIV",{class:!0});var gf=e(Ha);gf.forEach(o),N.forEach(o),Dn=p(c),O=t(c,"SECTION",{});var rs=e(O);Ce=t(rs,"H3",{});var Zy=e(Ce);no=t(Zy,"A",{href:!0,id:!0});var Xy=e(no);Tp=r(Xy,"Replacing a node"),Xy.forEach(o),Zy.forEach(o),Ap=p(rs),Pe=t(rs,"P",{});var sd=e(Pe);Sp=r(sd,"To replace the current node to another node, update the key property of the current node's parent:"),sd.forEach(o),Ip=p(rs),Ra=t(rs,"DIV",{class:!0});var mf=e(Ra);mf.forEach(o),Dp=p(rs),Oe=t(rs,"P",{});var od=e(Oe);Cp=r(od,"If the key property of the parent is an array:"),od.forEach(o),Pp=p(rs),Ba=t(rs,"DIV",{class:!0});var wf=e(Ba);wf.forEach(o),rs.forEach(o),Cn=p(c),h=t(c,"SECTION",{});var v=e(h);Me=t(v,"H3",{});var ad=e(Me);ro=t(ad,"A",{href:!0,id:!0});var td=e(ro);Op=r(td,"Removing a node"),td.forEach(o),ad.forEach(o),Mp=p(v),Ne=t(v,"P",{});var ed=e(Ne);Np=r(ed,"To remove the current node, delete the key property of the current node's parent:"),ed.forEach(o),Lp=p(v),Fa=t(v,"DIV",{class:!0});var _f=e(Fa);_f.forEach(o),jp=p(v),Le=t(v,"P",{});var nd=e(Le);Hp=r(nd,"If the key property of the parent is an array:"),nd.forEach(o),Rp=p(v),Va=t(v,"DIV",{class:!0});var bf=e(Va);bf.forEach(o),Bp=p(v),je=t(v,"BLOCKQUOTE",{});var rd=e(je);Z=t(rd,"P",{});var Ss=e(Z);Fp=r(Ss,"The operations of "),He=t(Ss,"STRONG",{});var ld=e(He);Vp=r(ld,"adding"),ld.forEach(o),zp=r(Ss,", "),Re=t(Ss,"STRONG",{});var id=e(Re);Jp=r(id,"replacing"),id.forEach(o),$p=r(Ss,", and "),Be=t(Ss,"STRONG",{});var pd=e(Be);Wp=r(pd,"removing"),pd.forEach(o),qp=r(Ss," nodes are so common that, they are usually implemented as a util function."),Ss.forEach(o),rd.forEach(o),Gp=p(v),lo=t(v,"P",{});var $n=e(lo);Up=r($n,"However, there's "),Fe=t($n,"STRONG",{});var cd=e(Fe);Yp=r(cd,"one important step"),cd.forEach(o),Kp=r($n," that I did not cover: after you mutate the node, you need to make sure that the traversal still works fine."),$n.forEach(o),Qp=p(v),ds=t(v,"P",{});var mt=e(ds);Zp=r(mt,"For a node that is a property of a key of its parent, adding, replacing and removing them are usually fine. Except for the replace operation, you might need to revisit the "),Ve=t(mt,"EM",{});var hd=e(Ve);Xp=r(hd,'"current node"'),hd.forEach(o),sc=r(mt,", which is the "),ze=t(mt,"EM",{});var kd=e(ze);oc=r(kd,"new replacing node"),kd.forEach(o),ac=r(mt,"."),mt.forEach(o),tc=p(v),Je=t(v,"P",{});var vd=e(Je);ec=r(vd,"However, for node that are in an array, you need to take special care to update the array index of the loop:"),vd.forEach(o),nc=p(v),za=t(v,"DIV",{class:!0});var Ef=e(za);Ef.forEach(o),rc=p(v),$e=t(v,"P",{});var yd=e($e);lc=r(yd,"But how do you know that the current node was removed?"),yd.forEach(o),ic=p(v),io=t(v,"P",{});var Wn=e(io);pc=r(Wn,"Well, knowing when a node got removed is sometimes a secret that lies within the "),Ja=t(Wn,"CODE",{class:!0});var dd=e(Ja);cc=r(dd,"remove"),dd.forEach(o),hc=r(Wn," util function from the tree traversal library."),Wn.forEach(o),kc=p(v),po=t(v,"P",{});var qn=e(po);vc=r(qn,"It could be as simple as setting a flag when you call "),$a=t(qn,"CODE",{class:!0});var ud=e($a);yc=r(ud,"remove"),ud.forEach(o),dc=r(qn,":"),qn.forEach(o),uc=p(v),Wa=t(v,"DIV",{class:!0});var Tf=e(Wa);Tf.forEach(o),fc=p(v),j=t(v,"P",{});var ls=e(j);xc=r(ls,"But sometimes, instead of having to import the "),qa=t(ls,"CODE",{class:!0});var fd=e(qa);gc=r(fd,"remove"),fd.forEach(o),mc=r(ls," util from the tree traversal library, the "),Ga=t(ls,"CODE",{class:!0});var xd=e(Ga);wc=r(xd,"remove"),xd.forEach(o),_c=r(ls," function is available in "),Ua=t(ls,"CODE",{class:!0});var gd=e(Ua);bc=r(gd,"this"),gd.forEach(o),Ec=r(ls," of the "),Ya=t(ls,"CODE",{class:!0});var md=e(Ya);Tc=r(md,"visitCallback"),md.forEach(o),Ac=r(ls,":"),ls.forEach(o),Sc=p(v),Ka=t(v,"DIV",{class:!0});var Af=e(Ka);Af.forEach(o),Ic=p(v),We=t(v,"P",{});var wd=e(We);Dc=r(wd,"Now you learned the 3 basic operations of manipulating the AST, you maybe wonder how exactly is to use these basic operations to write a codemod or an AST transform plugin?"),wd.forEach(o),Cc=p(v),X=t(v,"P",{});var Is=e(X);Pc=r(Is,"Well, in my "),Qa=t(Is,"A",{href:!0});var _d=e(Qa);Oc=r(_d,"step-by-step guide"),_d.forEach(o),Mc=r(Is,", I've explained that, you can use AST explorer like "),co=t(Is,"A",{href:!0,rel:!0});var bd=e(co);Nc=r(bd,"http://astexplorer.net/"),bd.forEach(o),Lc=r(Is," or "),ho=t(Is,"A",{href:!0,rel:!0});var Ed=e(ho);jc=r(Ed,"Babel AST Explorer"),Ed.forEach(o),Hc=r(Is," to help you."),Is.forEach(o),Rc=p(v),qe=t(v,"P",{});var Td=e(qe);Bc=r(Td,"You need to:"),Td.forEach(o),Fc=p(v),ko=t(v,"UL",{});var Gn=e(ko);Za=t(Gn,"LI",{});var Nk=e(Za);Ge=t(Nk,"STRONG",{});var Ad=e(Ge);Vc=r(Ad,"Know how the part of the code you want to change look like in the AST"),Ad.forEach(o),zc=r(Nk,", so you can target the specific type of the node, and"),Nk.forEach(o),Jc=p(Gn),Xa=t(Gn,"LI",{});var Lk=e(Xa);Ue=t(Lk,"STRONG",{});var Sd=e(Ue);$c=r(Sd,"Know how does the final output you wish to see look like in the AST"),Sd.forEach(o),Wc=r(Lk,", so you know what nodes to create, update or remove."),Lk.forEach(o),Gn.forEach(o),qc=p(v),Ye=t(v,"P",{});var Id=e(Ye);Gc=r(Id,"So we are going to elaborate more on these 2 steps specifically."),Id.forEach(o),v.forEach(o),Pn=p(c),b=t(c,"SECTION",{});var I=e(b);Ke=t(I,"H2",{});var Dd=e(Ke);vo=t(Dd,"A",{href:!0,id:!0});var Cd=e(vo);Uc=r(Cd,"Targeting a node"),Cd.forEach(o),Dd.forEach(o),Yc=p(I),yo=t(I,"P",{});var Un=e(yo);Kc=r(Un,"Node targeting, most of the times, is just a lot of "),st=t(Un,"CODE",{class:!0});var Pd=e(st);Qc=r(Pd,"==="),Pd.forEach(o),Zc=r(Un,"."),Un.forEach(o),Xc=p(I),C=t(I,"P",{});var V=e(C);sh=r(V,"For example, if you want to target a "),ot=t(V,"CODE",{class:!0});var Od=e(ot);oh=r(Od,"<figure>"),Od.forEach(o),ah=r(V," with a class "),at=t(V,"CODE",{class:!0});var Md=e(at);th=r(Md,"foo"),Md.forEach(o),eh=r(V," that contains an "),tt=t(V,"CODE",{class:!0});var Nd=e(tt);nh=r(Nd,"<img>"),Nd.forEach(o),rh=r(V," and a "),et=t(V,"CODE",{class:!0});var Ld=e(et);lh=r(Ld,"<figcaption>"),Ld.forEach(o),ih=r(V," in "),uo=t(V,"A",{href:!0,rel:!0});var jd=e(uo);ph=r(jd,"htmlparser2"),jd.forEach(o),ch=r(V,":"),V.forEach(o),hh=p(I),nt=t(I,"DIV",{class:!0});var Sf=e(nt);Sf.forEach(o),kh=p(I),Qe=t(I,"P",{});var Hd=e(Qe);vh=r(Hd,"You need to check:"),Hd.forEach(o),yh=p(I),rt=t(I,"DIV",{class:!0});var If=e(rt);If.forEach(o),dh=p(I),Ze=t(I,"P",{});var Rd=e(Ze);uh=r(Rd,"To make it less verbose, we can refactor each check into reusable functions:"),Rd.forEach(o),fh=p(I),lt=t(I,"DIV",{class:!0});var Df=e(lt);Df.forEach(o),I.forEach(o),On=p(c),x=t(c,"SECTION",{});var _=e(x);Xe=t(_,"H2",{});var Bd=e(Xe);fo=t(Bd,"A",{href:!0,id:!0});var Fd=e(fo);xh=r(Fd,"Creating a node"),Fd.forEach(o),Bd.forEach(o),gh=p(_),sn=t(_,"P",{});var Vd=e(sn);mh=r(Vd,"There are a few ways you can create an AST node."),Vd.forEach(o),wh=p(_),xo=t(_,"P",{});var Yn=e(xo);_h=r(Yn,"The simplest and crudest way is to "),on=t(Yn,"STRONG",{});var zd=e(on);bh=r(zd,"manually create the node object"),zd.forEach(o),Eh=r(Yn,". Most of the time, the node object is a JavaScript object. So you can just create them manually:"),Yn.forEach(o),Th=p(_),it=t(_,"DIV",{class:!0});var Cf=e(it);Cf.forEach(o),Ah=p(_),go=t(_,"P",{});var Kn=e(go);Sh=r(Kn,"It may become unwieldy when creating large, complex AST nodes, so sometimes library decides to provide builder functions, like "),mo=t(Kn,"A",{href:!0,rel:!0});var Jd=e(mo);Ih=r(Jd,"@babel/types"),Jd.forEach(o),Dh=r(Kn," to simplify node creation and provide default values:"),Kn.forEach(o),Ch=p(_),pt=t(_,"DIV",{class:!0});var Pf=e(pt);Pf.forEach(o),Ph=p(_),an=t(_,"P",{});var $d=e(an);Oh=r($d,"It looked more concise and tidier, but it is hard to comprehend and grasp what node it is creating."),$d.forEach(o),Mh=p(_),us=t(_,"P",{});var wt=e(us);Nh=r(wt,"So, a better way of creating complex AST node, is to use the "),ct=t(wt,"CODE",{class:!0});var Wd=e(ct);Lh=r(Wd,"parse"),Wd.forEach(o),jh=r(wt," function + "),ht=t(wt,"CODE",{class:!0});var qd=e(ht);Hh=r(qd,"string"),qd.forEach(o),Rh=r(wt,":"),wt.forEach(o),Bh=p(_),kt=t(_,"DIV",{class:!0});var Of=e(kt);Of.forEach(o),Fh=p(_),fs=t(_,"P",{});var _t=e(fs);Vh=r(_t,"For Babel, there's an amazing util called "),wo=t(_t,"A",{href:!0,rel:!0});var Gd=e(wo);zh=r(Gd,"@babel/template"),Gd.forEach(o),Jh=r(_t,", where you can use "),_o=t(_t,"A",{href:!0,rel:!0});var Ud=e(_o);$h=r(Ud,"template literals"),Ud.forEach(o),Wh=r(_t," to create AST node:"),_t.forEach(o),qh=p(_),vt=t(_,"DIV",{class:!0});var Mf=e(vt);Mf.forEach(o),_.forEach(o),Mn=p(c),B=t(c,"SECTION",{});var Ds=e(B);tn=t(Ds,"H2",{});var Yd=e(tn);bo=t(Yd,"A",{href:!0,id:!0});var Kd=e(bo);Gh=r(Kd,"Summary"),Kd.forEach(o),Yd.forEach(o),Uh=p(Ds),en=t(Ds,"P",{});var Qd=e(en);Yh=r(Qd,"We've gone through:"),Qd.forEach(o),Kh=p(Ds),ss=t(Ds,"UL",{});var Cs=e(ss);nn=t(Cs,"LI",{});var Zd=e(nn);Qh=r(Zd,"How to traverse an AST, using depth-first search algorithm,"),Zd.forEach(o),Zh=p(Cs),rn=t(Cs,"LI",{});var Xd=e(rn);Xh=r(Xd,"The 3 basic AST manipulations, addition, replacement, and removal,"),Xd.forEach(o),sk=p(Cs),ln=t(Cs,"LI",{});var su=e(ln);ok=r(su,"How to target a node in AST, and"),su.forEach(o),ak=p(Cs),pn=t(Cs,"LI",{});var ou=e(pn);tk=r(ou,"How to create an AST node"),ou.forEach(o),Cs.forEach(o),ek=p(Ds),os=t(Ds,"BLOCKQUOTE",{});var Ps=e(os);cn=t(Ps,"P",{});var au=e(cn);hn=t(au,"STRONG",{});var tu=e(hn);nk=r(tu,"Manipulating AST with JavaScript using Babel"),tu.forEach(o),au.forEach(o),rk=p(Ps),Eo=t(Ps,"P",{});var Qn=e(Eo);lk=r(Qn,"If you like what you've read so far, and want to learn how you could do it with Babel. I've created a "),To=t(Qn,"A",{href:!0,rel:!0});var eu=e(To);ik=r(eu,"video course"),eu.forEach(o),pk=r(Qn,", showing you step-by-step, how to write a babel plugin and codemod."),Qn.forEach(o),ck=p(Ps),kn=t(Ps,"P",{});var nu=e(kn);hk=r(nu,"In the video course, I detailed tips and tricks, such as how to handle scope, how to use state, and also nested traversals."),nu.forEach(o),kk=p(Ps),vn=t(Ps,"P",{});var ru=e(vn);yn=t(ru,"STRONG",{});var lu=e(yn);Ao=t(lu,"A",{href:!0,rel:!0});var iu=e(Ao);vk=r(iu,"Sounds interesting, let's take a look at the video course"),iu.forEach(o),lu.forEach(o),ru.forEach(o),Ps.forEach(o),Ds.forEach(o),Nn=p(c),es=t(c,"SECTION",{});var bt=e(es);dn=t(bt,"H2",{});var pu=e(dn);So=t(pu,"A",{href:!0,id:!0});var cu=e(So);yk=r(cu,"Further Readings"),cu.forEach(o),pu.forEach(o),dk=p(bt),gs=t(bt,"P",{});var _n=e(gs);Io=t(_n,"A",{href:!0,rel:!0});var hu=e(Io);uk=r(hu,"Dinesh (@flexdinesh)"),hu.forEach(o),fk=p(_n),Do=t(_n,"A",{href:!0,rel:!0});var ku=e(Do);xk=r(ku,"tweeted"),ku.forEach(o),gk=r(_n," his pocket collection of AST resources:"),_n.forEach(o),mk=p(bt),P=t(bt,"UL",{});var z=e(P);un=t(z,"LI",{});var vu=e(un);Co=t(vu,"A",{href:!0,rel:!0});var yu=e(Co);wk=r(yu,"Code Transformation and Linting with ASTs"),yu.forEach(o),vu.forEach(o),_k=p(z),fn=t(z,"LI",{});var du=e(fn);Po=t(du,"A",{href:!0,rel:!0});var uu=e(Po);bk=r(uu,"Write your own code transform for fun and profit"),uu.forEach(o),du.forEach(o),Ek=p(z),xn=t(z,"LI",{});var fu=e(xn);Oo=t(fu,"A",{href:!0,rel:!0});var xu=e(Oo);Tk=r(xu,"Understanding ASTs by Building Your Own Babel Plugin"),xu.forEach(o),fu.forEach(o),Ak=p(z),gn=t(z,"LI",{});var gu=e(gn);Mo=t(gu,"A",{href:!0,rel:!0});var mu=e(Mo);Sk=r(mu,"Writing your first Babel Plugin"),mu.forEach(o),gu.forEach(o),Ik=p(z),mn=t(z,"LI",{});var wu=e(mn);No=t(wu,"A",{href:!0,rel:!0});var _u=e(No);Dk=r(_u,"This is how I build Babel plug-ins"),_u.forEach(o),wu.forEach(o),Ck=p(z),wn=t(z,"LI",{});var bu=e(wn);Lo=t(bu,"A",{href:!0,rel:!0});var Eu=e(Lo);Pk=r(Eu,"Writing My First Babel Plugin"),Eu.forEach(o),bu.forEach(o),z.forEach(o),bt.forEach(o),this.h()},h(){l(w,"href","/step-by-step-guide-for-writing-a-babel-transformation"),l(Ms,"href","https://babeljs.io/"),l(Ms,"rel","nofollow"),l(Bo,"href","/creating-custom-javascript-syntax-with-babel"),l(Ns,"href","https://www.ecma-international.org/publications/standards/Ecma-262.htm"),l(Ns,"rel","nofollow"),l(Ls,"href","http://typescriptlang.org/"),l(Ls,"rel","nofollow"),l(js,"href","https://sass-lang.com/"),l(js,"rel","nofollow"),l(Hs,"href","https://www.w3.org/Style/CSS/"),l(Hs,"rel","nofollow"),l(Rs,"href","https://www.w3.org/html/"),l(Rs,"rel","nofollow"),l(Bs,"href","https://en.wikipedia.org/wiki/Markdown"),l(Bs,"rel","nofollow"),l(Fs,"href","#the-parsers"),l(Fs,"id","the-parsers"),l(zs,"href","https://astexplorer.net/"),l(zs,"rel","nofollow"),Su(H.src,Hk=Du)||l(H,"src",Hk),l(H,"srcset",Du+", "+Wf+" 2x"),l(H,"loading","lazy"),A(H,"position","absolute"),A(H,"top","0"),A(H,"width","100%"),A(H,"height","100%"),l(H,"alt","ast explorer"),A(is,"display","block"),A(is,"position","relative"),A(is,"padding-top","54.000%"),A(is,"width","100%"),l(Js,"href","https://github.com/fb55/htmlparser2"),l(Js,"rel","nofollow"),l($s,"href","https://github.com/nik-garmash/hyntax"),l($s,"rel","nofollow"),l(Ws,"href","https://github.com/inikulin/parse5"),l(Ws,"rel","nofollow"),l(Ct,"type","image/webp"),l(Ct,"srcset",Jf+", "+zf+" 2x"),Su(R.src,Rk=Iu)||l(R,"src",Rk),l(R,"srcset",Iu+", "+$f+" 2x"),l(R,"loading","lazy"),A(R,"position","absolute"),A(R,"top","0"),A(R,"width","100%"),A(R,"height","100%"),l(R,"alt","ast explorer"),A(ps,"display","block"),A(ps,"position","relative"),A(ps,"padding-top","39.844%"),A(ps,"width","100%"),l(zo,"class","inline"),l(Jo,"class","inline"),l($o,"class","language-text"),l(Wo,"class","language-text"),l(qo,"href","https://github.com/inikulin/parse5/tree/master/packages/parse5"),l(Uo,"class","language-text"),l(Go,"href","https://github.com/inikulin/parse5/blob/master/packages/parse5/docs/index.md#parse"),l(Ko,"class","language-text"),l(Yo,"href","https://github.com/inikulin/parse5/blob/master/packages/parse5/docs/index.md#serialize"),l(Qo,"href","https://github.com/remarkjs/remark"),l(Xo,"class","language-text"),l(Zo,"href","https://github.com/remarkjs/remark/tree/master/packages/remark-parse"),l(oa,"class","language-text"),l(sa,"href","https://github.com/remarkjs/remark/tree/master/packages/remark-stringify"),l(aa,"href","https://github.com/csstree/csstree"),l(ea,"class","language-text"),l(ta,"href","https://github.com/csstree/csstree/blob/master/docs/parsing.md"),l(ra,"class","language-text"),l(na,"href","https://github.com/csstree/csstree/blob/master/docs/generate.md"),l(la,"href","https://github.com/shawnbot/sast"),l(pa,"class","language-text"),l(ia,"href","https://github.com/shawnbot/sast#sastparsesource--options-"),l(ha,"class","language-text"),l(ca,"href","https://github.com/shawnbot/sast#saststringifynode-"),l(ka,"href","https://babeljs.io/"),l(ya,"class","language-text"),l(va,"href","https://babeljs.io/docs/en/babel-parser#babelparserparsecode-options"),l(ua,"class","language-text"),l(da,"href","https://babeljs.io/docs/en/babel-generator"),l(fa,"href","http://typescriptlang.org/"),l(ga,"class","language-text"),l(xa,"href","https://github.com/microsoft/TypeScript/wiki/Using-the-Compiler-API#creating-and-printing-a-typescript-ast"),l(wa,"class","language-text"),l(ma,"href","https://github.com/microsoft/TypeScript/wiki/Using-the-Compiler-API#creating-and-printing-a-typescript-ast"),A(qs,"overflow","auto"),A(qs,"margin-bottom","2em"),l(_a,"class","code-section"),l(ba,"class","code-section"),l(Us,"href","#traversing-an-ast"),l(Us,"id","traversing-an-ast"),l(Ys,"href","https://twitter.com/vaidehijoshi"),l(Ys,"rel","nofollow"),l(Ks,"href","https://medium.com/basecs/demystifying-depth-first-search-a7c14cccf056"),l(Ks,"rel","nofollow"),l(Qs,"href","https://medium.com/basecs/demystifying-depth-first-search-a7c14cccf056"),l(Qs,"rel","nofollow"),l(Ea,"class","code-section"),l(Ta,"class","inline"),l(Aa,"class","code-section"),l(Sa,"class","inline"),l(Ia,"class","code-section"),l(Da,"class","code-section"),l(Ca,"class","inline"),l(Pa,"class","code-section"),l(Ma,"class","inline"),l(Na,"class","code-section"),l(to,"href","#manipulating-ast"),l(to,"id","manipulating-ast"),l(eo,"href","#adding-a-node"),l(eo,"id","adding-a-node"),l(La,"class","code-section"),l(ja,"class","code-section"),l(Ha,"class","code-section"),l(no,"href","#replacing-a-node"),l(no,"id","replacing-a-node"),l(Ra,"class","code-section"),l(Ba,"class","code-section"),l(ro,"href","#removing-a-node"),l(ro,"id","removing-a-node"),l(Fa,"class","code-section"),l(Va,"class","code-section"),l(za,"class","code-section"),l(Ja,"class","inline"),l($a,"class","inline"),l(Wa,"class","code-section"),l(qa,"class","inline"),l(Ga,"class","inline"),l(Ua,"class","inline"),l(Ya,"class","inline"),l(Ka,"class","code-section"),l(Qa,"href","/step-by-step-guide-for-writing-a-babel-transformation"),l(co,"href","http://astexplorer.net/"),l(co,"rel","nofollow"),l(ho,"href","https://lihautan.com/babel-ast-explorer"),l(ho,"rel","nofollow"),l(vo,"href","#targeting-a-node"),l(vo,"id","targeting-a-node"),l(st,"class","inline"),l(ot,"class","inline"),l(at,"class","inline"),l(tt,"class","inline"),l(et,"class","inline"),l(uo,"href","https://github.com/fb55/htmlparser2"),l(uo,"rel","nofollow"),l(nt,"class","code-section"),l(rt,"class","code-section"),l(lt,"class","code-section"),l(fo,"href","#creating-a-node"),l(fo,"id","creating-a-node"),l(it,"class","code-section"),l(mo,"href","https://babeljs.io/docs/en/babel-types"),l(mo,"rel","nofollow"),l(pt,"class","code-section"),l(ct,"class","inline"),l(ht,"class","inline"),l(kt,"class","code-section"),l(wo,"href","https://babeljs.io/docs/en/babel-template"),l(wo,"rel","nofollow"),l(_o,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"),l(_o,"rel","nofollow"),l(vt,"class","code-section"),l(bo,"href","#summary"),l(bo,"id","summary"),l(To,"href","https://gum.co/manipulating-ast-with-javascript"),l(To,"rel","nofollow"),l(Ao,"href","https://gum.co/manipulating-ast-with-javascript"),l(Ao,"rel","nofollow"),l(So,"href","#further-readings"),l(So,"id","further-readings"),l(Io,"href","https://twitter.com/flexdinesh"),l(Io,"rel","nofollow"),l(Do,"href","https://twitter.com/flexdinesh/status/1196680010343432192"),l(Do,"rel","nofollow"),l(Co,"href","https://frontendmasters.com/courses/linting-asts/"),l(Co,"rel","nofollow"),l(Po,"href","https://kentcdodds.com/blog/write-your-own-code-transform/"),l(Po,"rel","nofollow"),l(Oo,"href","https://www.sitepoint.com/understanding-asts-building-babel-plugin/"),l(Oo,"rel","nofollow"),l(Mo,"href","https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#toc-writing-your-first-babel-plugin"),l(Mo,"rel","nofollow"),l(No,"href","https://medium.com/the-guild/this-is-how-i-build-babel-plug-ins-b0a13dcd0352"),l(No,"rel","nofollow"),l(Lo,"href","https://varunzxzx.github.io/blog/writing-babel-plugin"),l(Lo,"rel","nofollow")},m(c,d){Mu(m,c,d),g(c,J,d),g(c,E,d),s(E,Os),s(E,w),s(w,$),s(E,Ro),s(E,Ms),s(Ms,Zn),s(E,Xn),s(E,Bo),s(Bo,sr),s(E,or),g(c,bn,d),g(c,Fo,d),s(Fo,ar),g(c,En,d),g(c,xs,d),s(xs,S),s(S,tr),s(S,Ns),s(Ns,er),s(S,nr),s(S,Ls),s(Ls,rr),s(S,lr),s(S,js),s(js,ir),s(S,pr),s(S,Hs),s(Hs,cr),s(S,hr),s(S,Rs),s(Rs,kr),s(S,vr),s(S,Bs),s(Bs,yr),s(S,dr),s(xs,ur),s(xs,Et),s(Et,fr),g(c,Tn,d),g(c,u,d),s(u,Tt),s(Tt,Fs),s(Fs,xr),s(u,gr),s(u,At),s(At,mr),s(u,wr),s(u,Vs),s(Vs,_r),s(Vs,zs),s(zs,br),s(Vs,Er),s(u,Tr),s(u,St),s(St,is),s(is,H),s(u,Ar),s(u,L),s(L,Sr),s(L,It),s(It,Ir),s(L,Dr),s(L,Js),s(Js,Cr),s(L,Pr),s(L,$s),s($s,Or),s(L,Mr),s(L,Ws),s(Ws,Nr),s(L,Lr),s(u,jr),s(u,Dt),s(Dt,ps),s(ps,Vo),s(Vo,Ct),s(Vo,R),s(u,Hr),s(u,cs),s(cs,Rr),s(cs,zo),s(zo,Br),s(cs,Fr),s(cs,Jo),s(Jo,Vr),s(cs,zr),s(u,Jr),s(u,qs),s(qs,Gs),s(Gs,Pt),s(Pt,W),s(W,Ot),s(Ot,$r),s(W,Wr),s(W,Mt),s(Mt,qr),s(W,Gr),s(W,Nt),s(Nt,$o),s($o,Ur),s(W,Yr),s(W,Lt),s(Lt,Wo),s(Wo,Kr),s(Gs,Qr),s(Gs,D),s(D,q),s(q,jt),s(jt,Zr),s(q,Xr),s(q,Ht),s(Ht,qo),s(qo,sl),s(q,ol),s(q,Rt),s(Rt,Go),s(Go,Uo),s(Uo,al),s(q,tl),s(q,Bt),s(Bt,Yo),s(Yo,Ko),s(Ko,el),s(D,nl),s(D,G),s(G,Ft),s(Ft,rl),s(G,ll),s(G,Vt),s(Vt,Qo),s(Qo,il),s(G,pl),s(G,zt),s(zt,Zo),s(Zo,Xo),s(Xo,cl),s(G,hl),s(G,Jt),s(Jt,sa),s(sa,oa),s(oa,kl),s(D,vl),s(D,U),s(U,$t),s($t,yl),s(U,dl),s(U,Wt),s(Wt,aa),s(aa,ul),s(U,fl),s(U,qt),s(qt,ta),s(ta,ea),s(ea,xl),s(U,gl),s(U,Gt),s(Gt,na),s(na,ra),s(ra,ml),s(D,wl),s(D,Y),s(Y,Ut),s(Ut,_l),s(Y,bl),s(Y,Yt),s(Yt,la),s(la,El),s(Y,Tl),s(Y,Kt),s(Kt,ia),s(ia,pa),s(pa,Al),s(Y,Sl),s(Y,Qt),s(Qt,ca),s(ca,ha),s(ha,Il),s(D,Dl),s(D,K),s(K,Zt),s(Zt,Cl),s(K,Pl),s(K,Xt),s(Xt,ka),s(ka,Ol),s(K,Ml),s(K,se),s(se,va),s(va,ya),s(ya,Nl),s(K,Ll),s(K,oe),s(oe,da),s(da,ua),s(ua,jl),s(D,Hl),s(D,Q),s(Q,ae),s(ae,Rl),s(Q,Bl),s(Q,te),s(te,fa),s(fa,Fl),s(Q,Vl),s(Q,ee),s(ee,xa),s(xa,ga),s(ga,zl),s(Q,Jl),s(Q,ne),s(ne,ma),s(ma,wa),s(wa,$l),s(u,Wl),s(u,re),s(re,ql),s(u,Gl),s(u,le),s(le,Ul),s(u,Yl),s(u,_a),_a.innerHTML=Hu,s(u,Kl),s(u,ie),s(ie,Ql),s(u,Zl),s(u,ba),ba.innerHTML=Ru,s(u,Xl),s(u,hs),s(hs,si),s(hs,pe),s(pe,oi),s(hs,ai),s(hs,ce),s(ce,ti),s(hs,ei),g(c,An,d),g(c,k,d),s(k,he),s(he,Us),s(Us,ni),s(k,ri),s(k,ks),s(ks,li),s(ks,ke),s(ke,ii),s(ks,pi),s(ks,ve),s(ve,ci),s(ks,hi),s(k,ki),s(k,as),s(as,Ys),s(Ys,vi),s(as,yi),s(as,Ks),s(Ks,di),s(as,ui),s(as,Qs),s(Qs,fi),s(as,xi),s(k,gi),s(k,ye),s(ye,mi),s(k,wi),s(k,Ea),Ea.innerHTML=Bu,s(k,_i),s(k,Zs),s(Zs,bi),s(Zs,Ta),s(Ta,Ei),s(Zs,Ti),s(k,Ai),s(k,vs),s(vs,Si),s(vs,de),s(de,Ii),s(vs,Di),s(vs,ue),s(ue,Ci),s(vs,Pi),s(k,Oi),s(k,Aa),Aa.innerHTML=Fu,s(k,Mi),s(k,Xs),s(Xs,Ni),s(Xs,Sa),s(Sa,Li),s(Xs,ji),s(k,Hi),s(k,Ia),Ia.innerHTML=Vu,s(k,Ri),s(k,fe),s(fe,Bi),s(k,Fi),s(k,Da),Da.innerHTML=zu,s(k,Vi),s(k,so),s(so,zi),s(so,Ca),s(Ca,Ji),s(so,$i),s(k,Wi),s(k,Pa),Pa.innerHTML=Ju,s(k,qi),s(k,Oa),s(Oa,Gi),s(Oa,oo),s(oo,Ui),s(oo,Ma),s(Ma,Yi),s(oo,Ki),s(k,Qi),s(k,xe),s(xe,Zi),s(k,Xi),s(k,Na),Na.innerHTML=$u,s(k,sp),s(k,ao),s(ao,op),s(ao,ge),s(ge,ap),s(ao,tp),s(k,ep),s(k,me),s(me,np),g(c,Sn,d),g(c,ts,d),s(ts,we),s(we,to),s(to,rp),s(ts,lp),s(ts,_e),s(_e,ip),s(ts,pp),s(ts,ys),s(ys,be),s(be,cp),s(ys,hp),s(ys,Ee),s(Ee,kp),s(ys,vp),s(ys,Te),s(Te,yp),g(c,In,d),g(c,T,d),s(T,Ae),s(Ae,eo),s(eo,dp),s(T,up),s(T,Se),s(Se,fp),s(T,xp),s(T,La),La.innerHTML=Wu,s(T,gp),s(T,Ie),s(Ie,mp),s(T,wp),s(T,ja),ja.innerHTML=qu,s(T,_p),s(T,De),s(De,bp),s(T,Ep),s(T,Ha),Ha.innerHTML=Gu,g(c,Dn,d),g(c,O,d),s(O,Ce),s(Ce,no),s(no,Tp),s(O,Ap),s(O,Pe),s(Pe,Sp),s(O,Ip),s(O,Ra),Ra.innerHTML=Uu,s(O,Dp),s(O,Oe),s(Oe,Cp),s(O,Pp),s(O,Ba),Ba.innerHTML=Yu,g(c,Cn,d),g(c,h,d),s(h,Me),s(Me,ro),s(ro,Op),s(h,Mp),s(h,Ne),s(Ne,Np),s(h,Lp),s(h,Fa),Fa.innerHTML=Ku,s(h,jp),s(h,Le),s(Le,Hp),s(h,Rp),s(h,Va),Va.innerHTML=Qu,s(h,Bp),s(h,je),s(je,Z),s(Z,Fp),s(Z,He),s(He,Vp),s(Z,zp),s(Z,Re),s(Re,Jp),s(Z,$p),s(Z,Be),s(Be,Wp),s(Z,qp),s(h,Gp),s(h,lo),s(lo,Up),s(lo,Fe),s(Fe,Yp),s(lo,Kp),s(h,Qp),s(h,ds),s(ds,Zp),s(ds,Ve),s(Ve,Xp),s(ds,sc),s(ds,ze),s(ze,oc),s(ds,ac),s(h,tc),s(h,Je),s(Je,ec),s(h,nc),s(h,za),za.innerHTML=Zu,s(h,rc),s(h,$e),s($e,lc),s(h,ic),s(h,io),s(io,pc),s(io,Ja),s(Ja,cc),s(io,hc),s(h,kc),s(h,po),s(po,vc),s(po,$a),s($a,yc),s(po,dc),s(h,uc),s(h,Wa),Wa.innerHTML=Xu,s(h,fc),s(h,j),s(j,xc),s(j,qa),s(qa,gc),s(j,mc),s(j,Ga),s(Ga,wc),s(j,_c),s(j,Ua),s(Ua,bc),s(j,Ec),s(j,Ya),s(Ya,Tc),s(j,Ac),s(h,Sc),s(h,Ka),Ka.innerHTML=sf,s(h,Ic),s(h,We),s(We,Dc),s(h,Cc),s(h,X),s(X,Pc),s(X,Qa),s(Qa,Oc),s(X,Mc),s(X,co),s(co,Nc),s(X,Lc),s(X,ho),s(ho,jc),s(X,Hc),s(h,Rc),s(h,qe),s(qe,Bc),s(h,Fc),s(h,ko),s(ko,Za),s(Za,Ge),s(Ge,Vc),s(Za,zc),s(ko,Jc),s(ko,Xa),s(Xa,Ue),s(Ue,$c),s(Xa,Wc),s(h,qc),s(h,Ye),s(Ye,Gc),g(c,Pn,d),g(c,b,d),s(b,Ke),s(Ke,vo),s(vo,Uc),s(b,Yc),s(b,yo),s(yo,Kc),s(yo,st),s(st,Qc),s(yo,Zc),s(b,Xc),s(b,C),s(C,sh),s(C,ot),s(ot,oh),s(C,ah),s(C,at),s(at,th),s(C,eh),s(C,tt),s(tt,nh),s(C,rh),s(C,et),s(et,lh),s(C,ih),s(C,uo),s(uo,ph),s(C,ch),s(b,hh),s(b,nt),nt.innerHTML=of,s(b,kh),s(b,Qe),s(Qe,vh),s(b,yh),s(b,rt),rt.innerHTML=af,s(b,dh),s(b,Ze),s(Ze,uh),s(b,fh),s(b,lt),lt.innerHTML=tf,g(c,On,d),g(c,x,d),s(x,Xe),s(Xe,fo),s(fo,xh),s(x,gh),s(x,sn),s(sn,mh),s(x,wh),s(x,xo),s(xo,_h),s(xo,on),s(on,bh),s(xo,Eh),s(x,Th),s(x,it),it.innerHTML=ef,s(x,Ah),s(x,go),s(go,Sh),s(go,mo),s(mo,Ih),s(go,Dh),s(x,Ch),s(x,pt),pt.innerHTML=nf,s(x,Ph),s(x,an),s(an,Oh),s(x,Mh),s(x,us),s(us,Nh),s(us,ct),s(ct,Lh),s(us,jh),s(us,ht),s(ht,Hh),s(us,Rh),s(x,Bh),s(x,kt),kt.innerHTML=rf,s(x,Fh),s(x,fs),s(fs,Vh),s(fs,wo),s(wo,zh),s(fs,Jh),s(fs,_o),s(_o,$h),s(fs,Wh),s(x,qh),s(x,vt),vt.innerHTML=lf,g(c,Mn,d),g(c,B,d),s(B,tn),s(tn,bo),s(bo,Gh),s(B,Uh),s(B,en),s(en,Yh),s(B,Kh),s(B,ss),s(ss,nn),s(nn,Qh),s(ss,Zh),s(ss,rn),s(rn,Xh),s(ss,sk),s(ss,ln),s(ln,ok),s(ss,ak),s(ss,pn),s(pn,tk),s(B,ek),s(B,os),s(os,cn),s(cn,hn),s(hn,nk),s(os,rk),s(os,Eo),s(Eo,lk),s(Eo,To),s(To,ik),s(Eo,pk),s(os,ck),s(os,kn),s(kn,hk),s(os,kk),s(os,vn),s(vn,yn),s(yn,Ao),s(Ao,vk),g(c,Nn,d),g(c,es,d),s(es,dn),s(dn,So),s(So,yk),s(es,dk),s(es,gs),s(gs,Io),s(Io,uk),s(gs,fk),s(gs,Do),s(Do,xk),s(gs,gk),s(es,mk),s(es,P),s(P,un),s(un,Co),s(Co,wk),s(P,_k),s(P,fn),s(fn,Po),s(Po,bk),s(P,Ek),s(P,xn),s(xn,Oo),s(Oo,Tk),s(P,Ak),s(P,gn),s(gn,Mo),s(Mo,Sk),s(P,Ik),s(P,mn),s(mn,No),s(No,Dk),s(P,Ck),s(P,wn),s(wn,Lo),s(Lo,Pk),Ln=!0},p:Bf,i(c){Ln||(Nu(m.$$.fragment,c),Ln=!0)},o(c){Lu(m.$$.fragment,c),Ln=!1},d(c){ju(m,c),c&&o(J),c&&o(E),c&&o(bn),c&&o(Fo),c&&o(En),c&&o(xs),c&&o(Tn),c&&o(u),c&&o(An),c&&o(k),c&&o(Sn),c&&o(ts),c&&o(In),c&&o(T),c&&o(Dn),c&&o(O),c&&o(Cn),c&&o(h),c&&o(Pn),c&&o(b),c&&o(On),c&&o(x),c&&o(Mn),c&&o(B),c&&o(Nn),c&&o(es)}}}function Uf(Ho){let m,J;const E=[Ho[0],Cu];let Os={$$slots:{default:[Gf]},$$scope:{ctx:Ho}};for(let w=0;w<E.length;w+=1)Os=jk(Os,E[w]);return m=new Ff({props:Os}),{c(){Pu(m.$$.fragment)},l(w){Ou(m.$$.fragment,w)},m(w,$){Mu(m,w,$),J=!0},p(w,[$]){const Ro=$&1?Hf(E,[$&1&&Tu(w[0]),$&0&&Tu(Cu)]):{};$&2&&(Ro.$$scope={dirty:$,ctx:w}),m.$set(Ro)},i(w){J||(Nu(m.$$.fragment,w),J=!0)},o(w){Lu(m.$$.fragment,w),J=!1},d(w){ju(m,w)}}}const Cu={title:"Manipulating AST with JavaScript",date:"2019-11-22T08:00:00Z",description:"Manipulating AST is not that hard anyway",tags:["JavaScript","AST","transform","depth-first-search"],series:"AST",label:"blog"};function Yf(Ho,m,J){return Rf("blog",{image:qf}),Ho.$$set=E=>{J(0,m=jk(jk({},m),Au(E)))},m=Au(m),[m]}class ax extends Nf{constructor(m){super();Lf(this,m,Yf,Uf,jf,{})}}export{ax as default,Cu as metadata};
