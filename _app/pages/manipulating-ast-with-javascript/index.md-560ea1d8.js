import{S as Cf,i as Of,s as Pf,C as Lk,w as Su,x as Iu,y as Du,z as Mf,A as wu,q as Cu,o as Ou,B as Pu,r as Lf,R as _u,k as i,e as a,t as n,m as p,c as t,a as e,h as r,d as o,b as l,Q as bu,f as Eu,g,F as s,O as Nf}from"../../chunks/vendor-ea160616.js";import{B as jf}from"../../chunks/BlogLayout-1be3dc1e.js";import{T as Hf}from"../../chunks/TableOfContent-c4f5cb6e.js";import"../../chunks/stores-7d7fda0c.js";import"../../chunks/WebMentions-d768a574.js";/* empty css                                */var Rf="/_app/assets/ast-html-8602ae18.webp",Tu="/_app/assets/ast-html-c202466b.png",Bf="/_app/assets/ast-explorer-83dba005.gif",Ff="/_app/assets/hero-twitter-07ce19e8.jpg";function Vf(No){let m,F,E,Ss,w,V,jo,Is,Qn,Zn,Ho,Xn,sr,wn,Ro,or,_n,vs,A,ar,Ds,tr,er,Cs,nr,rr,Os,lr,ir,Ps,pr,cr,Ms,hr,kr,Ls,vr,yr,dr,wt,ur,bn,u,_t,Ns,fr,xr,bt,gr,mr,js,wr,Hs,_r,br,Er,Et,Rs,Nk,Tr,L,Ar,Tt,Sr,Ir,Bs,Dr,Cr,Fs,Or,Pr,Vs,Mr,Lr,Nr,At,zs,St,It,Js,jk,jr,ns,Hr,Bo,Rr,Br,Fo,Fr,Vr,zr,$s,Ws,Dt,z,Ct,Jr,$r,Ot,Wr,qr,Pt,Vo,Gr,Ur,Mt,zo,Yr,Kr,I,J,Lt,Qr,Zr,Nt,Jo,Xr,sl,jt,$o,Wo,ol,al,Ht,qo,Go,tl,el,$,Rt,nl,rl,Bt,Uo,ll,il,Ft,Yo,Ko,pl,cl,Vt,Qo,Zo,hl,kl,W,zt,vl,yl,Jt,Xo,dl,ul,$t,sa,oa,fl,xl,Wt,aa,ta,gl,ml,q,qt,wl,_l,Gt,ea,bl,El,Ut,na,ra,Tl,Al,Yt,la,ia,Sl,Il,G,Kt,Dl,Cl,Qt,pa,Ol,Pl,Zt,ca,ha,Ml,Ll,Xt,ka,va,Nl,jl,U,se,Hl,Rl,oe,ya,Bl,Fl,ae,da,ua,Vl,zl,te,fa,xa,Jl,$l,ee,Wl,ql,ne,Gl,Ul,ga,Mu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">code</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.readFileSync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/file/to/code&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ast</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parserMethod</span><span style="color: var(--shiki-color-text)">(code);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// the magical transform function</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// usually not a pure function</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">transform</span><span style="color: var(--shiki-color-text)">(ast);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">output</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">generatorMethod</span><span style="color: var(--shiki-color-text)">(ast);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.writeFileSync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/file/to/output&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> output</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;utf8&#39;</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,Yl,re,Kl,Ql,ma,Lu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">lang1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.readFileSync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/file/to/code&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ast</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parserMethodLang1</span><span style="color: var(--shiki-color-text)">(lang1);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// the magical transform function</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// usually not a pure function</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">transformLang1ToLang2</span><span style="color: var(--shiki-color-text)">(ast);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">lang2</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">generatorMethodLang2</span><span style="color: var(--shiki-color-text)">(ast);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">fs</span><span style="color: var(--shiki-token-function)">.writeFileSync</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/file/to/output&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> lang2</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;utf8&#39;</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,Zl,rs,Xl,le,si,oi,ie,ai,ti,En,k,pe,qs,ei,ni,ls,ri,ce,li,ii,he,pi,ci,hi,X,Gs,ki,vi,Us,yi,di,Ys,ui,fi,xi,ke,gi,mi,wa,Nu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(ast) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// TODO: do something with this node</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">keys</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Object</span><span style="color: var(--shiki-token-function)">.keys</span><span style="color: var(--shiki-color-text)">(ast);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">keys</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> ast[key];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// could be an array of nodes or just a node</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">Array</span><span style="color: var(--shiki-token-function)">.isArray</span><span style="color: var(--shiki-color-text)">(child)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> j </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; j </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; j</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(child[j]);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-function)">isNode</span><span style="color: var(--shiki-color-text)">(child)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(child);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">isNode</span><span style="color: var(--shiki-color-text)">(node) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// probably need more check,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// for example,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// if the node contains certain properties</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">typeof</span><span style="color: var(--shiki-color-text)"> node </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;object&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,wi,Ks,_i,_a,bi,Ei,Ti,is,Ai,ve,Si,Ii,ye,Di,Ci,Oi,ba,ju=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line highlight"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callback) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">callback</span><span style="color: var(--shiki-color-text)">(ast);</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">keys</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Object</span><span style="color: var(--shiki-token-function)">.keys</span><span style="color: var(--shiki-color-text)">(ast);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">keys</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> ast[key];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">Array</span><span style="color: var(--shiki-token-function)">.isArray</span><span style="color: var(--shiki-color-text)">(child)) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> j </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; j </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; j</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(child[j]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callback);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-function)">isNode</span><span style="color: var(--shiki-color-text)">(child)) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(child</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callback);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">isNode</span><span style="color: var(--shiki-color-text)">(node) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// probably need more check,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// for example,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// if the node contains certain properties</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">typeof</span><span style="color: var(--shiki-color-text)"> node </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;object&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Pi,Qs,Mi,Ea,Li,Ni,ji,Ta,Hu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(htmlAst</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> htmlAstNode </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">/*...*/</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(cssAst</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> cssAstNode </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">/*...*/</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,Hi,de,Ri,Bi,Aa,Ru=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callback) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_visit</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">callback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index);</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">keys</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Object</span><span style="color: var(--shiki-token-function)">.keys</span><span style="color: var(--shiki-color-text)">(node);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">keys</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> node[key];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">Array</span><span style="color: var(--shiki-token-function)">.isArray</span><span style="color: var(--shiki-color-text)">(child)) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> j </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; j </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; j</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">_visit</span><span style="color: var(--shiki-color-text)">(child[j]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> j);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-function)">isNode</span><span style="color: var(--shiki-color-text)">(child)) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">_visit</span><span style="color: var(--shiki-color-text)">(child</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">_visit</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Fi,Zs,Vi,Sa,zi,Ji,$i,Ia,Bu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callback) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_visit</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-function)">someCondition</span><span style="color: var(--shiki-color-text)">(node)) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">callback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">...</span></span></code></pre>`,Wi,Da,qi,Xs,Gi,Ca,Ui,Yi,Ki,ue,Qi,Zi,Oa,Fu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callbackMap) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_visit</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">nodeType</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">getNodeType</span><span style="color: var(--shiki-color-text)">(node);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (nodeType </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> callbackMap) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      callbackMap[nodeType](node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// do something</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;)</span></span></code></pre>`,Xi,so,sp,fe,op,ap,tp,xe,ep,Tn,ss,ge,oo,np,rp,me,lp,ip,ps,we,pp,cp,_e,hp,kp,be,vp,An,T,Ee,ao,yp,dp,Te,up,fp,Pa,Vu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visitCallback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.foo </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createNewNode</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,xp,Ae,gp,mp,Ma,zu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visitCallback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">foo</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">createNewNode</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,wp,Se,_p,bp,La,Ju=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visitCallback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// add as first sibling</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  parent[key]</span><span style="color: var(--shiki-token-function)">.unshift</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">createNewNode</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// add as last sibling</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  parent[key]</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">createNewNode</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// add as next sibling</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  parent[key]</span><span style="color: var(--shiki-token-function)">.splice</span><span style="color: var(--shiki-color-text)">(index </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createNewNode</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// add as prev sibling</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  parent[key]</span><span style="color: var(--shiki-token-function)">.splice</span><span style="color: var(--shiki-color-text)">(index</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createNewNode</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Sn,O,Ie,to,Ep,Tp,De,Ap,Sp,Na,$u=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visitCallback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  parent[key] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">updatedNode</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ip,Ce,Dp,Cp,ja,Wu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visitCallback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  parent[key][index] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">updatedNode</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,In,h,Oe,eo,Op,Pp,Pe,Mp,Lp,Ha,qu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visitCallback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">delete</span><span style="color: var(--shiki-color-text)"> parent[key];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Np,Me,jp,Hp,Ra,Gu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visitCallback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  parent[key]</span><span style="color: var(--shiki-token-function)">.splice</span><span style="color: var(--shiki-color-text)">(index</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Rp,Le,Y,Bp,Ne,Fp,Vp,je,zp,Jp,He,$p,Wp,qp,no,Gp,Re,Up,Yp,Kp,cs,Qp,Be,Zp,Xp,Fe,sc,oc,ac,Ve,tc,ec,Ba,Uu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callbackMap) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_visit</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">Array</span><span style="color: var(--shiki-token-function)">.isArray</span><span style="color: var(--shiki-color-text)">(child)) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> j </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; j </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; j</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">_visit</span><span style="color: var(--shiki-color-text)">(child[j]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> j);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-function)">hasRemoved</span><span style="color: var(--shiki-color-text)">()) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-comment)">// offset the index</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          j</span><span style="color: var(--shiki-token-keyword)">--</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,nc,ze,rc,lc,ro,ic,Fa,pc,cc,hc,lo,kc,Va,vc,yc,dc,za,Yu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line highlight"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> _hasRemoved </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">remove</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  _hasRemoved </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// proceed to remove current node</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">hasRemoved</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> result </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> _hasRemoved;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// reset back</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  _hasRemoved </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> result;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// function _visit(...) &#123; ...</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> j </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; j </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; j</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">_visit</span><span style="color: var(--shiki-color-text)">(child[j]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> j);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-function)">hasRemoved</span><span style="color: var(--shiki-color-text)">()) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...somewhere in your visitCallback</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visitCallback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">remove</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,uc,N,fc,Ja,xc,gc,$a,mc,wc,Wa,_c,bc,qa,Ec,Tc,Ac,Ga,Ku=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callbackMap) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_visit</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> _hasRemoved </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">_this</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// don&#39;t need to take in &#96;node&#96; and &#96;parent&#96;,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// because it know exactly what they are</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">remove</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        _hasRemoved </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// proceed to remove current node</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (nodeType </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> callbackMap) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      callbackMap[nodeType]</span><span style="color: var(--shiki-token-function)">.call</span><span style="color: var(--shiki-color-text)">(_this</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...somewhere in your visitCallback</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visitCallback</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> index) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.remove</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Sc,Je,Ic,Dc,K,Cc,Ua,Oc,Pc,io,Mc,Lc,po,Nc,jc,Hc,$e,Rc,Bc,co,Ya,We,Fc,Vc,zc,Ka,qe,Jc,$c,Wc,Ge,qc,Dn,b,Ue,ho,Gc,Uc,ko,Yc,Qa,Kc,Qc,Zc,D,Xc,Za,sh,oh,Xa,ah,th,st,eh,nh,ot,rh,lh,vo,ih,ph,ch,at,Qu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">figure</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">img</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">class</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">&quot;foo&quot;</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">figcaption</span><span style="color: var(--shiki-color-text)">&gt;lorem ipsum&lt;/</span><span style="color: var(--shiki-token-string-expression)">figcaption</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">figure</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,hh,Ye,kh,vh,tt,Zu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(node) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">/* 1. is node &lt;figure&gt; */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;tag&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;figure&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">/* 2. is node contain class &#96;foo&#96; */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">attribs</span><span style="color: var(--shiki-color-text)">.class </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">/* 3. is node children contain &lt;img&gt; */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">children</span><span style="color: var(--shiki-token-function)">.find</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      child </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;tag&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;img&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    ) </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">undefined</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">/* 4. is node children contain &lt;figcaption&gt; */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">children</span><span style="color: var(--shiki-token-function)">.find</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      child </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;tag&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">child</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;figcaption&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    ) </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">undefined</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// do something</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,yh,Ke,dh,uh,et,Xu=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">isTag</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> name) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;tag&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> name;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">hasAttr</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.attribs[key] </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> value;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">hasChild</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> fn) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">children</span><span style="color: var(--shiki-token-function)">.find</span><span style="color: var(--shiki-color-text)">(fn) </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">undefined</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">visit</span><span style="color: var(--shiki-color-text)">(node) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">/* 1. is node &lt;figure&gt; */</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">isTag</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;figure&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">/* 2. is node contain class &#96;foo&#96; */</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">hasAttr</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;class&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">/* 3. is node children contain &lt;img&gt; */</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">hasChild</span><span style="color: var(--shiki-color-text)">(child </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">isTag</span><span style="color: var(--shiki-color-text)">(child</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;img&#39;</span><span style="color: var(--shiki-color-text)">)) </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">/* 4. is node children contain &lt;figcaption&gt; */</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">hasChild</span><span style="color: var(--shiki-color-text)">(child </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">isTag</span><span style="color: var(--shiki-color-text)">(child</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;figcaption&#39;</span><span style="color: var(--shiki-color-text)">))</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  ) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// do something</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Cn,x,Qe,yo,fh,xh,Ze,gh,mh,uo,wh,Xe,_h,bh,Eh,nt,sf=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newNode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  type</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Identifier&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,Th,fo,Ah,xo,Sh,Ih,Dh,rt,of=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newNode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.identifier</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newNode2</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.functionDeclaration</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;bar&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  [</span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.identifier</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">)]</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  [</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.expressionStatement</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.callExpression</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.memberExpression</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.identifier</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;console&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.identifier</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;log&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        [</span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.identifier</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">)]</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      )</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    )</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.returnStatement</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">t</span><span style="color: var(--shiki-token-function)">.identifier</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)">))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ]</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,Ch,sn,Oh,Ph,hs,Mh,lt,Lh,Nh,it,jh,Hh,Rh,pt,af=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newNode2</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babelParser</span><span style="color: var(--shiki-token-function)">.parse</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  function bar(foo) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    console.log(foo);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    return foo;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">).</span><span style="color: var(--shiki-token-constant)">program</span><span style="color: var(--shiki-color-text)">.body[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">];</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newNode3</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">cssTree</span><span style="color: var(--shiki-token-function)">.parse</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  .foo &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    color: red;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#123; context</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;rule&#39;</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,Bh,ks,Fh,go,Vh,zh,mo,Jh,$h,Wh,ct,tf=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newNode4</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">template</span><span style="color: var(--shiki-token-string-expression)">.</span><span style="color: var(--shiki-token-function)">statement</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  console.log(foo);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// placeholder can be an AST node or string</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">newNode5</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">template</span><span style="color: var(--shiki-token-string-expression)">.</span><span style="color: var(--shiki-token-function)">statement</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  function bar(foo) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">newNode4</span><span style="color: var(--shiki-token-keyword)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    alert(&quot;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-string-expression)">&#39;hello world&#39;</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&quot;)</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    return foo;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`,On,j,on,wo,qh,Gh,an,Uh,Yh,Q,tn,Kh,Qh,en,Zh,Xh,nn,sk,ok,rn,ak,tk,Z,ln,pn,ek,nk,_o,rk,bo,lk,ik,pk,cn,ck,hk,hn,kn,Eo,kk,Pn,os,vn,To,vk,yk,ys,Ao,dk,uk,So,fk,xk,gk,C,yn,Io,mk,wk,dn,Do,_k,bk,un,Co,Ek,Tk,fn,Oo,Ak,Sk,xn,Po,Ik,Dk,gn,Mo,Ck,Mn;return m=new Hf({props:{data:[{link:"the-parsers",title:"The parsers"},{link:"traversing-an-ast",title:"Traversing an AST"},{link:"manipulating-ast",title:"Manipulating AST",nested:[{link:"adding-a-node",title:"Adding a node"},{link:"replacing-a-node",title:"Replacing a node"},{link:"removing-a-node",title:"Removing a node"}]},{link:"targeting-a-node",title:"Targeting a node"},{link:"creating-a-node",title:"Creating a node"},{link:"summary",title:"Summary"},{link:"further-readings",title:"Further Readings"}]}}),{c(){Su(m.$$.fragment),F=i(),E=a("p"),Ss=n("Previously, I've talked about "),w=a("a"),V=n("how to write a babel transformation"),jo=n(", and I went one step deeper into "),Is=a("a"),Qn=n("Babel"),Zn=n(", by "),Ho=a("a"),Xn=n("showing how you can create a custom JavaScript syntax"),sr=n(", I demonstrated how Babel parses your code into AST, transforms it and generates back into code."),wn=i(),Ro=a("p"),or=n("Armed with the knowledge and experience of playing the JavaScript AST with Babel, let's take a look at how we can generalize this knowledge into other languages as well."),_n=i(),vs=a("blockquote"),A=a("p"),ar=n('When I refer to "other languages", I am actually referring to popular frontend languages, for example: '),Ds=a("a"),tr=n("JavaScript"),er=n(", "),Cs=a("a"),nr=n("TypeScript"),rr=n(", "),Os=a("a"),lr=n("Sass"),ir=n(", "),Ps=a("a"),pr=n("CSS"),cr=n(", "),Ms=a("a"),hr=n("HTML"),kr=n(", "),Ls=a("a"),vr=n("markdown"),yr=n("..."),dr=i(),wt=a("p"),ur=n("Of course, it does not limit to just frontend languages. It's just that it's easier to find a parser for these languages written in JavaScript than other languages, say C++ or Java."),bn=i(),u=a("section"),_t=a("h2"),Ns=a("a"),fr=n("The parsers"),xr=i(),bt=a("p"),gr=n("Like how we use Babel to do parsing and generating JavaScript, there are other libraries out there to help us with parsing and generating our language."),mr=i(),js=a("p"),wr=n("One easy trick to find these libraries is through "),Hs=a("a"),_r=n("https://astexplorer.net/"),br=n("."),Er=i(),Et=a("p"),Rs=a("img"),Tr=i(),L=a("p"),Ar=n("After you choose a language, you would see a list of parsers you can use to parse your language. For example, if you choose "),Tt=a("strong"),Sr=n("HTML"),Ir=n(", there's "),Bs=a("a"),Dr=n("htmlparser2"),Cr=n(", "),Fs=a("a"),Or=n("hyntax"),Pr=n(", "),Vs=a("a"),Mr=n("parse5"),Lr=n("... And when you choose one of the parsers, you can immediately see how the AST looks like on the right panel and the Github link to the parser on the top right."),Nr=i(),At=a("p"),zs=a("picture"),St=a("source"),It=a("source"),Js=a("img"),jr=i(),ns=a("p"),Hr=n("Here is a un-exhaustive list of parsers, and it's "),Bo=a("code"),Rr=n("parse"),Br=n(" and "),Fo=a("code"),Fr=n("generate"),Vr=n(" methods:"),zr=i(),$s=a("div"),Ws=a("table"),Dt=a("thead"),z=a("tr"),Ct=a("th"),Jr=n("Language"),$r=i(),Ot=a("th"),Wr=n("Parser"),qr=i(),Pt=a("th"),Vo=a("code"),Gr=n("parse"),Ur=i(),Mt=a("th"),zo=a("code"),Yr=n("generate"),Kr=i(),I=a("tbody"),J=a("tr"),Lt=a("td"),Qr=n("HTML"),Zr=i(),Nt=a("td"),Jo=a("a"),Xr=n("parse5"),sl=i(),jt=a("td"),$o=a("a"),Wo=a("code"),ol=n("parse5.parse(str)"),al=i(),Ht=a("td"),qo=a("a"),Go=a("code"),tl=n("parse5.serialize(ast)"),el=i(),$=a("tr"),Rt=a("td"),nl=n("Markdown"),rl=i(),Bt=a("td"),Uo=a("a"),ll=n("remark"),il=i(),Ft=a("td"),Yo=a("a"),Ko=a("code"),pl=n("unified().use(remarkParse)"),cl=i(),Vt=a("td"),Qo=a("a"),Zo=a("code"),hl=n("unified().use(remarkStringify)"),kl=i(),W=a("tr"),zt=a("td"),vl=n("CSS"),yl=i(),Jt=a("td"),Xo=a("a"),dl=n("css-tree"),ul=i(),$t=a("td"),sa=a("a"),oa=a("code"),fl=n("csstree.parse(str)"),xl=i(),Wt=a("td"),aa=a("a"),ta=a("code"),gl=n("csstree.generate(ast)"),ml=i(),q=a("tr"),qt=a("td"),wl=n("Sass"),_l=i(),Gt=a("td"),ea=a("a"),bl=n("sast"),El=i(),Ut=a("td"),na=a("a"),ra=a("code"),Tl=n("sast.parse(str)"),Al=i(),Yt=a("td"),la=a("a"),ia=a("code"),Sl=n("sast.stringify(ast)"),Il=i(),G=a("tr"),Kt=a("td"),Dl=n("JavaScript"),Cl=i(),Qt=a("td"),pa=a("a"),Ol=n("babel"),Pl=i(),Zt=a("td"),ca=a("a"),ha=a("code"),Ml=n("babel.parse(str)"),Ll=i(),Xt=a("td"),ka=a("a"),va=a("code"),Nl=n("babel.generate(ast)"),jl=i(),U=a("tr"),se=a("td"),Hl=n("TypeScript"),Rl=i(),oe=a("td"),ya=a("a"),Bl=n("TypeScript"),Fl=i(),ae=a("td"),da=a("a"),ua=a("code"),Vl=n("ts.createSourceFile(str)"),zl=i(),te=a("td"),fa=a("a"),xa=a("code"),Jl=n("ts.createPrinter().printFile(ast)"),$l=i(),ee=a("p"),Wl=n("As you can see most parsers provide both parsing and generating methods."),ql=i(),ne=a("p"),Gl=n("So in general, you can have the following as a template to write your code transformation code:"),Ul=i(),ga=a("div"),Yl=i(),re=a("p"),Kl=n("You can, of course, transforming AST of one language to AST of another language, for example: Sass \u27A1\uFE0F CSS, Markdown \u27A1\uFE0F HTML, and use the generator of another language to generate out the code."),Ql=i(),ma=a("div"),Zl=i(),rs=a("p"),Xl=n("Now armed with this template, let's talk about the more "),le=a("em"),si=n("magical"),oi=n(" stuff, "),ie=a("em"),ai=n("the transform function"),ti=n("."),En=i(),k=a("section"),pe=a("h2"),qs=a("a"),ei=n("Traversing an AST"),ni=i(),ls=a("p"),ri=n("As the name AST suggests, AST uses a tree data structure. To hone the skills of manipulating AST, we need to recall our long distant memory of "),ce=a("em"),li=n('"Algorithm 101"'),ii=n(", the "),he=a("strong"),pi=n("depth-first search (DFS)"),ci=n(" tree traversal algorithm."),hi=i(),X=a("p"),Gs=a("a"),ki=n("Vaidehi Joshi"),vi=n(" wrote an amazing article on "),Us=a("a"),yi=n("demystifying Depth-First Search"),di=n(", I don't think I can explain any better, so if you want to recap on depth-first search, please go and read "),Ys=a("a"),ui=n("her article"),fi=n(" before we continue."),xi=i(),ke=a("p"),gi=n("Now you have a clearer idea of how depth-first search works, a depth-first search on an AST would look something like this:"),mi=i(),wa=a("div"),wi=i(),Ks=a("p"),_i=n("We can then fill up the "),_a=a("code"),bi=n("TODO"),Ei=n(" with our manipulation code."),Ti=i(),is=a("p"),Ai=n("If we find ourselves needing to do multiple traversals, with different AST manipulation, we would soon realize that mixing AST manipulation code with the traversal code is "),ve=a("em"),Si=n("not clean enough"),Ii=n(". Naturally, you would realize "),ye=a("em"),Di=n("it is cleaner"),Ci=n(" to pass in a callback function that gets called every time we visit a node:"),Oi=i(),ba=a("div"),Pi=i(),Qs=a("p"),Mi=n("The "),Ea=a("code"),Li=n("visit"),Ni=n(" function is now generic enough that you can use it for any AST:"),ji=i(),Ta=a("div"),Hi=i(),de=a("p"),Ri=n("Naturally, you would think that having the information of the parent node, and the key / index of the current node would be useful to have in the callback function:"),Bi=i(),Aa=a("div"),Fi=i(),Zs=a("p"),Vi=n("Now, we might think to ourselves, I dont want to get callback for every node visited, I just need callback for a certain node. You might be tempted to add a condition in the "),Sa=a("code"),zi=n("visit"),Ji=n(" function:"),$i=i(),Ia=a("div"),Wi=i(),Da=a("p"),qi=n("But you think twice: "),Xs=a("em"),Gi=n("what if someone else wants to use "),Ca=a("code"),Ui=n("visit"),Yi=n(" but with a different condition for callback?"),Ki=i(),ue=a("p"),Qi=n("For most of the time, you want to callback only to a certain types of node. In that case, instead of passing in a callback function, you can pass in a map of node type to their respective callback functions:"),Zi=i(),Oa=a("div"),Xi=i(),so=a("p"),sp=n("At this point, you maybe realize, "),fe=a("em"),op=n("hey, this looks so much like one of those AST traversing libraries!"),ap=n(" And yes, this is how they get implemented."),tp=i(),xe=a("p"),ep=n("Now we can traverse the AST, and find the node that we are interested in, so the next step is to manipulate them."),Tn=i(),ss=a("section"),ge=a("h2"),oo=a("a"),np=n("Manipulating AST"),rp=i(),me=a("p"),lp=n("Manipulating the AST can be categorized into 3 different operations:"),ip=i(),ps=a("ul"),we=a("li"),pp=n("Adding a node"),cp=i(),_e=a("li"),hp=n("Replacing a node"),kp=i(),be=a("li"),vp=n("Removing a node"),An=i(),T=a("section"),Ee=a("h3"),ao=a("a"),yp=n("Adding a node"),dp=i(),Te=a("p"),up=n("To add a node, you can assign it to a keyed property of your node:"),fp=i(),Pa=a("div"),xp=i(),Ae=a("p"),gp=n("or push the new node, if the keyed property is an array:"),mp=i(),Ma=a("div"),wp=i(),Se=a("p"),_p=n("To add a node as a sibling, you may need to access the node's parent:"),bp=i(),La=a("div"),Sn=i(),O=a("section"),Ie=a("h3"),to=a("a"),Ep=n("Replacing a node"),Tp=i(),De=a("p"),Ap=n("To replace the current node to another node, update the key property of the current node's parent:"),Sp=i(),Na=a("div"),Ip=i(),Ce=a("p"),Dp=n("If the key property of the parent is an array:"),Cp=i(),ja=a("div"),In=i(),h=a("section"),Oe=a("h3"),eo=a("a"),Op=n("Removing a node"),Pp=i(),Pe=a("p"),Mp=n("To remove the current node, delete the key property of the current node's parent:"),Lp=i(),Ha=a("div"),Np=i(),Me=a("p"),jp=n("If the key property of the parent is an array:"),Hp=i(),Ra=a("div"),Rp=i(),Le=a("blockquote"),Y=a("p"),Bp=n("The operations of "),Ne=a("strong"),Fp=n("adding"),Vp=n(", "),je=a("strong"),zp=n("replacing"),Jp=n(", and "),He=a("strong"),$p=n("removing"),Wp=n(" nodes are so common that, they are usually implemented as a util function."),qp=i(),no=a("p"),Gp=n("However, there's "),Re=a("strong"),Up=n("one important step"),Yp=n(" that I did not cover: after you mutate the node, you need to make sure that the traversal still works fine."),Kp=i(),cs=a("p"),Qp=n("For a node that is a property of a key of its parent, adding, replacing and removing them are usually fine. Except for the replace operation, you might need to revisit the "),Be=a("em"),Zp=n('"current node"'),Xp=n(", which is the "),Fe=a("em"),sc=n("new replacing node"),oc=n("."),ac=i(),Ve=a("p"),tc=n("However, for node that are in an array, you need to take special care to update the array index of the loop:"),ec=i(),Ba=a("div"),nc=i(),ze=a("p"),rc=n("But how do you know that the current node was removed?"),lc=i(),ro=a("p"),ic=n("Well, knowing when a node got removed is sometimes a secret that lies within the "),Fa=a("code"),pc=n("remove"),cc=n(" util function from the tree traversal library."),hc=i(),lo=a("p"),kc=n("It could be as simple as setting a flag when you call "),Va=a("code"),vc=n("remove"),yc=n(":"),dc=i(),za=a("div"),uc=i(),N=a("p"),fc=n("But sometimes, instead of having to import the "),Ja=a("code"),xc=n("remove"),gc=n(" util from the tree traversal library, the "),$a=a("code"),mc=n("remove"),wc=n(" function is available in "),Wa=a("code"),_c=n("this"),bc=n(" of the "),qa=a("code"),Ec=n("visitCallback"),Tc=n(":"),Ac=i(),Ga=a("div"),Sc=i(),Je=a("p"),Ic=n("Now you learned the 3 basic operations of manipulating the AST, you maybe wonder how exactly is to use these basic operations to write a codemod or an AST transform plugin?"),Dc=i(),K=a("p"),Cc=n("Well, in my "),Ua=a("a"),Oc=n("step-by-step guide"),Pc=n(", I've explained that, you can use AST explorer like "),io=a("a"),Mc=n("http://astexplorer.net/"),Lc=n(" or "),po=a("a"),Nc=n("Babel AST Explorer"),jc=n(" to help you."),Hc=i(),$e=a("p"),Rc=n("You need to:"),Bc=i(),co=a("ul"),Ya=a("li"),We=a("strong"),Fc=n("Know how the part of the code you want to change look like in the AST"),Vc=n(", so you can target the specific type of the node, and"),zc=i(),Ka=a("li"),qe=a("strong"),Jc=n("Know how does the final output you wish to see look like in the AST"),$c=n(", so you know what nodes to create, update or remove."),Wc=i(),Ge=a("p"),qc=n("So we are going to elaborate more on these 2 steps specifically."),Dn=i(),b=a("section"),Ue=a("h2"),ho=a("a"),Gc=n("Targeting a node"),Uc=i(),ko=a("p"),Yc=n("Node targeting, most of the times, is just a lot of "),Qa=a("code"),Kc=n("==="),Qc=n("."),Zc=i(),D=a("p"),Xc=n("For example, if you want to target a "),Za=a("code"),sh=n("<figure>"),oh=n(" with a class "),Xa=a("code"),ah=n("foo"),th=n(" that contains an "),st=a("code"),eh=n("<img>"),nh=n(" and a "),ot=a("code"),rh=n("<figcaption>"),lh=n(" in "),vo=a("a"),ih=n("htmlparser2"),ph=n(":"),ch=i(),at=a("div"),hh=i(),Ye=a("p"),kh=n("You need to check:"),vh=i(),tt=a("div"),yh=i(),Ke=a("p"),dh=n("To make it less verbose, we can refactor each check into reusable functions:"),uh=i(),et=a("div"),Cn=i(),x=a("section"),Qe=a("h2"),yo=a("a"),fh=n("Creating a node"),xh=i(),Ze=a("p"),gh=n("There are a few ways you can create an AST node."),mh=i(),uo=a("p"),wh=n("The simplest and crudest way is to "),Xe=a("strong"),_h=n("manually create the node object"),bh=n(". Most of the time, the node object is a JavaScript object. So you can just create them manually:"),Eh=i(),nt=a("div"),Th=i(),fo=a("p"),Ah=n("It may become unwieldy when creating large, complex AST nodes, so sometimes library decides to provide builder functions, like "),xo=a("a"),Sh=n("@babel/types"),Ih=n(" to simplify node creation and provide default values:"),Dh=i(),rt=a("div"),Ch=i(),sn=a("p"),Oh=n("It looked more concise and tidier, but it is hard to comprehend and grasp what node it is creating."),Ph=i(),hs=a("p"),Mh=n("So, a better way of creating complex AST node, is to use the "),lt=a("code"),Lh=n("parse"),Nh=n(" function + "),it=a("code"),jh=n("string"),Hh=n(":"),Rh=i(),pt=a("div"),Bh=i(),ks=a("p"),Fh=n("For Babel, there's an amazing util called "),go=a("a"),Vh=n("@babel/template"),zh=n(", where you can use "),mo=a("a"),Jh=n("template literals"),$h=n(" to create AST node:"),Wh=i(),ct=a("div"),On=i(),j=a("section"),on=a("h2"),wo=a("a"),qh=n("Summary"),Gh=i(),an=a("p"),Uh=n("We've gone through:"),Yh=i(),Q=a("ul"),tn=a("li"),Kh=n("How to traverse an AST, using depth-first search algorithm,"),Qh=i(),en=a("li"),Zh=n("The 3 basic AST manipulations, addition, replacement, and removal,"),Xh=i(),nn=a("li"),sk=n("How to target a node in AST, and"),ok=i(),rn=a("li"),ak=n("How to create an AST node"),tk=i(),Z=a("blockquote"),ln=a("p"),pn=a("strong"),ek=n("Manipulating AST with JavaScript using Babel"),nk=i(),_o=a("p"),rk=n("If you like what you've read so far, and want to learn how you could do it with Babel. I've created a "),bo=a("a"),lk=n("video course"),ik=n(", showing you step-by-step, how to write a babel plugin and codemod."),pk=i(),cn=a("p"),ck=n("In the video course, I detailed tips and tricks, such as how to handle scope, how to use state, and also nested traversals."),hk=i(),hn=a("p"),kn=a("strong"),Eo=a("a"),kk=n("Sounds interesting, let's take a look at the video course"),Pn=i(),os=a("section"),vn=a("h2"),To=a("a"),vk=n("Further Readings"),yk=i(),ys=a("p"),Ao=a("a"),dk=n("Dinesh (@flexdinesh)"),uk=i(),So=a("a"),fk=n("tweeted"),xk=n(" his pocket collection of AST resources:"),gk=i(),C=a("ul"),yn=a("li"),Io=a("a"),mk=n("Code Transformation and Linting with ASTs"),wk=i(),dn=a("li"),Do=a("a"),_k=n("Write your own code transform for fun and profit"),bk=i(),un=a("li"),Co=a("a"),Ek=n("Understanding ASTs by Building Your Own Babel Plugin"),Tk=i(),fn=a("li"),Oo=a("a"),Ak=n("Writing your first Babel Plugin"),Sk=i(),xn=a("li"),Po=a("a"),Ik=n("This is how I build Babel plug-ins"),Dk=i(),gn=a("li"),Mo=a("a"),Ck=n("Writing My First Babel Plugin"),this.h()},l(c){Iu(m.$$.fragment,c),F=p(c),E=t(c,"P",{});var d=e(E);Ss=r(d,"Previously, I've talked about "),w=t(d,"A",{href:!0});var Hk=e(w);V=r(Hk,"how to write a babel transformation"),Hk.forEach(o),jo=r(d,", and I went one step deeper into "),Is=t(d,"A",{href:!0,rel:!0});var Rk=e(Is);Qn=r(Rk,"Babel"),Rk.forEach(o),Zn=r(d,", by "),Ho=t(d,"A",{href:!0});var Bk=e(Ho);Xn=r(Bk,"showing how you can create a custom JavaScript syntax"),Bk.forEach(o),sr=r(d,", I demonstrated how Babel parses your code into AST, transforms it and generates back into code."),d.forEach(o),wn=p(c),Ro=t(c,"P",{});var Fk=e(Ro);or=r(Fk,"Armed with the knowledge and experience of playing the JavaScript AST with Babel, let's take a look at how we can generalize this knowledge into other languages as well."),Fk.forEach(o),_n=p(c),vs=t(c,"BLOCKQUOTE",{});var Ln=e(vs);A=t(Ln,"P",{});var P=e(A);ar=r(P,'When I refer to "other languages", I am actually referring to popular frontend languages, for example: '),Ds=t(P,"A",{href:!0,rel:!0});var Vk=e(Ds);tr=r(Vk,"JavaScript"),Vk.forEach(o),er=r(P,", "),Cs=t(P,"A",{href:!0,rel:!0});var zk=e(Cs);nr=r(zk,"TypeScript"),zk.forEach(o),rr=r(P,", "),Os=t(P,"A",{href:!0,rel:!0});var Jk=e(Os);lr=r(Jk,"Sass"),Jk.forEach(o),ir=r(P,", "),Ps=t(P,"A",{href:!0,rel:!0});var $k=e(Ps);pr=r($k,"CSS"),$k.forEach(o),cr=r(P,", "),Ms=t(P,"A",{href:!0,rel:!0});var Wk=e(Ms);hr=r(Wk,"HTML"),Wk.forEach(o),kr=r(P,", "),Ls=t(P,"A",{href:!0,rel:!0});var qk=e(Ls);vr=r(qk,"markdown"),qk.forEach(o),yr=r(P,"..."),P.forEach(o),dr=p(Ln),wt=t(Ln,"P",{});var Gk=e(wt);ur=r(Gk,"Of course, it does not limit to just frontend languages. It's just that it's easier to find a parser for these languages written in JavaScript than other languages, say C++ or Java."),Gk.forEach(o),Ln.forEach(o),bn=p(c),u=t(c,"SECTION",{});var f=e(u);_t=t(f,"H2",{});var Uk=e(_t);Ns=t(Uk,"A",{href:!0,id:!0});var Yk=e(Ns);fr=r(Yk,"The parsers"),Yk.forEach(o),Uk.forEach(o),xr=p(f),bt=t(f,"P",{});var Kk=e(bt);gr=r(Kk,"Like how we use Babel to do parsing and generating JavaScript, there are other libraries out there to help us with parsing and generating our language."),Kk.forEach(o),mr=p(f),js=t(f,"P",{});var Nn=e(js);wr=r(Nn,"One easy trick to find these libraries is through "),Hs=t(Nn,"A",{href:!0,rel:!0});var Qk=e(Hs);_r=r(Qk,"https://astexplorer.net/"),Qk.forEach(o),br=r(Nn,"."),Nn.forEach(o),Er=p(f),Et=t(f,"P",{});var Zk=e(Et);Rs=t(Zk,"IMG",{src:!0,loading:!0,alt:!0}),Zk.forEach(o),Tr=p(f),L=t(f,"P",{});var as=e(L);Ar=r(as,"After you choose a language, you would see a list of parsers you can use to parse your language. For example, if you choose "),Tt=t(as,"STRONG",{});var Xk=e(Tt);Sr=r(Xk,"HTML"),Xk.forEach(o),Ir=r(as,", there's "),Bs=t(as,"A",{href:!0,rel:!0});var sv=e(Bs);Dr=r(sv,"htmlparser2"),sv.forEach(o),Cr=r(as,", "),Fs=t(as,"A",{href:!0,rel:!0});var ov=e(Fs);Or=r(ov,"hyntax"),ov.forEach(o),Pr=r(as,", "),Vs=t(as,"A",{href:!0,rel:!0});var av=e(Vs);Mr=r(av,"parse5"),av.forEach(o),Lr=r(as,"... And when you choose one of the parsers, you can immediately see how the AST looks like on the right panel and the Github link to the parser on the top right."),as.forEach(o),Nr=p(f),At=t(f,"P",{});var tv=e(At);zs=t(tv,"PICTURE",{});var jn=e(zs);St=t(jn,"SOURCE",{type:!0,srcset:!0}),It=t(jn,"SOURCE",{type:!0,srcset:!0}),Js=t(jn,"IMG",{src:!0,loading:!0,alt:!0}),jn.forEach(o),tv.forEach(o),jr=p(f),ns=t(f,"P",{});var ht=e(ns);Hr=r(ht,"Here is a un-exhaustive list of parsers, and it's "),Bo=t(ht,"CODE",{class:!0});var ev=e(Bo);Rr=r(ev,"parse"),ev.forEach(o),Br=r(ht," and "),Fo=t(ht,"CODE",{class:!0});var nv=e(Fo);Fr=r(nv,"generate"),nv.forEach(o),Vr=r(ht," methods:"),ht.forEach(o),zr=p(f),$s=t(f,"DIV",{style:!0});var rv=e($s);Ws=t(rv,"TABLE",{});var Hn=e(Ws);Dt=t(Hn,"THEAD",{});var lv=e(Dt);z=t(lv,"TR",{});var ds=e(z);Ct=t(ds,"TH",{});var iv=e(Ct);Jr=r(iv,"Language"),iv.forEach(o),$r=p(ds),Ot=t(ds,"TH",{});var pv=e(Ot);Wr=r(pv,"Parser"),pv.forEach(o),qr=p(ds),Pt=t(ds,"TH",{});var cv=e(Pt);Vo=t(cv,"CODE",{class:!0});var hv=e(Vo);Gr=r(hv,"parse"),hv.forEach(o),cv.forEach(o),Ur=p(ds),Mt=t(ds,"TH",{});var kv=e(Mt);zo=t(kv,"CODE",{class:!0});var vv=e(zo);Yr=r(vv,"generate"),vv.forEach(o),kv.forEach(o),ds.forEach(o),lv.forEach(o),Kr=p(Hn),I=t(Hn,"TBODY",{});var H=e(I);J=t(H,"TR",{});var us=e(J);Lt=t(us,"TD",{});var yv=e(Lt);Qr=r(yv,"HTML"),yv.forEach(o),Zr=p(us),Nt=t(us,"TD",{});var dv=e(Nt);Jo=t(dv,"A",{href:!0});var uv=e(Jo);Xr=r(uv,"parse5"),uv.forEach(o),dv.forEach(o),sl=p(us),jt=t(us,"TD",{});var fv=e(jt);$o=t(fv,"A",{href:!0});var xv=e($o);Wo=t(xv,"CODE",{class:!0});var gv=e(Wo);ol=r(gv,"parse5.parse(str)"),gv.forEach(o),xv.forEach(o),fv.forEach(o),al=p(us),Ht=t(us,"TD",{});var mv=e(Ht);qo=t(mv,"A",{href:!0});var wv=e(qo);Go=t(wv,"CODE",{class:!0});var _v=e(Go);tl=r(_v,"parse5.serialize(ast)"),_v.forEach(o),wv.forEach(o),mv.forEach(o),us.forEach(o),el=p(H),$=t(H,"TR",{});var fs=e($);Rt=t(fs,"TD",{});var bv=e(Rt);nl=r(bv,"Markdown"),bv.forEach(o),rl=p(fs),Bt=t(fs,"TD",{});var Ev=e(Bt);Uo=t(Ev,"A",{href:!0});var Tv=e(Uo);ll=r(Tv,"remark"),Tv.forEach(o),Ev.forEach(o),il=p(fs),Ft=t(fs,"TD",{});var Av=e(Ft);Yo=t(Av,"A",{href:!0});var Sv=e(Yo);Ko=t(Sv,"CODE",{class:!0});var Iv=e(Ko);pl=r(Iv,"unified().use(remarkParse)"),Iv.forEach(o),Sv.forEach(o),Av.forEach(o),cl=p(fs),Vt=t(fs,"TD",{});var Dv=e(Vt);Qo=t(Dv,"A",{href:!0});var Cv=e(Qo);Zo=t(Cv,"CODE",{class:!0});var Ov=e(Zo);hl=r(Ov,"unified().use(remarkStringify)"),Ov.forEach(o),Cv.forEach(o),Dv.forEach(o),fs.forEach(o),kl=p(H),W=t(H,"TR",{});var xs=e(W);zt=t(xs,"TD",{});var Pv=e(zt);vl=r(Pv,"CSS"),Pv.forEach(o),yl=p(xs),Jt=t(xs,"TD",{});var Mv=e(Jt);Xo=t(Mv,"A",{href:!0});var Lv=e(Xo);dl=r(Lv,"css-tree"),Lv.forEach(o),Mv.forEach(o),ul=p(xs),$t=t(xs,"TD",{});var Nv=e($t);sa=t(Nv,"A",{href:!0});var jv=e(sa);oa=t(jv,"CODE",{class:!0});var Hv=e(oa);fl=r(Hv,"csstree.parse(str)"),Hv.forEach(o),jv.forEach(o),Nv.forEach(o),xl=p(xs),Wt=t(xs,"TD",{});var Rv=e(Wt);aa=t(Rv,"A",{href:!0});var Bv=e(aa);ta=t(Bv,"CODE",{class:!0});var Fv=e(ta);gl=r(Fv,"csstree.generate(ast)"),Fv.forEach(o),Bv.forEach(o),Rv.forEach(o),xs.forEach(o),ml=p(H),q=t(H,"TR",{});var gs=e(q);qt=t(gs,"TD",{});var Vv=e(qt);wl=r(Vv,"Sass"),Vv.forEach(o),_l=p(gs),Gt=t(gs,"TD",{});var zv=e(Gt);ea=t(zv,"A",{href:!0});var Jv=e(ea);bl=r(Jv,"sast"),Jv.forEach(o),zv.forEach(o),El=p(gs),Ut=t(gs,"TD",{});var $v=e(Ut);na=t($v,"A",{href:!0});var Wv=e(na);ra=t(Wv,"CODE",{class:!0});var qv=e(ra);Tl=r(qv,"sast.parse(str)"),qv.forEach(o),Wv.forEach(o),$v.forEach(o),Al=p(gs),Yt=t(gs,"TD",{});var Gv=e(Yt);la=t(Gv,"A",{href:!0});var Uv=e(la);ia=t(Uv,"CODE",{class:!0});var Yv=e(ia);Sl=r(Yv,"sast.stringify(ast)"),Yv.forEach(o),Uv.forEach(o),Gv.forEach(o),gs.forEach(o),Il=p(H),G=t(H,"TR",{});var ms=e(G);Kt=t(ms,"TD",{});var Kv=e(Kt);Dl=r(Kv,"JavaScript"),Kv.forEach(o),Cl=p(ms),Qt=t(ms,"TD",{});var Qv=e(Qt);pa=t(Qv,"A",{href:!0});var Zv=e(pa);Ol=r(Zv,"babel"),Zv.forEach(o),Qv.forEach(o),Pl=p(ms),Zt=t(ms,"TD",{});var Xv=e(Zt);ca=t(Xv,"A",{href:!0});var sy=e(ca);ha=t(sy,"CODE",{class:!0});var oy=e(ha);Ml=r(oy,"babel.parse(str)"),oy.forEach(o),sy.forEach(o),Xv.forEach(o),Ll=p(ms),Xt=t(ms,"TD",{});var ay=e(Xt);ka=t(ay,"A",{href:!0});var ty=e(ka);va=t(ty,"CODE",{class:!0});var ey=e(va);Nl=r(ey,"babel.generate(ast)"),ey.forEach(o),ty.forEach(o),ay.forEach(o),ms.forEach(o),jl=p(H),U=t(H,"TR",{});var ws=e(U);se=t(ws,"TD",{});var ny=e(se);Hl=r(ny,"TypeScript"),ny.forEach(o),Rl=p(ws),oe=t(ws,"TD",{});var ry=e(oe);ya=t(ry,"A",{href:!0});var ly=e(ya);Bl=r(ly,"TypeScript"),ly.forEach(o),ry.forEach(o),Fl=p(ws),ae=t(ws,"TD",{});var iy=e(ae);da=t(iy,"A",{href:!0});var py=e(da);ua=t(py,"CODE",{class:!0});var cy=e(ua);Vl=r(cy,"ts.createSourceFile(str)"),cy.forEach(o),py.forEach(o),iy.forEach(o),zl=p(ws),te=t(ws,"TD",{});var hy=e(te);fa=t(hy,"A",{href:!0});var ky=e(fa);xa=t(ky,"CODE",{class:!0});var vy=e(xa);Jl=r(vy,"ts.createPrinter().printFile(ast)"),vy.forEach(o),ky.forEach(o),hy.forEach(o),ws.forEach(o),H.forEach(o),Hn.forEach(o),rv.forEach(o),$l=p(f),ee=t(f,"P",{});var yy=e(ee);Wl=r(yy,"As you can see most parsers provide both parsing and generating methods."),yy.forEach(o),ql=p(f),ne=t(f,"P",{});var dy=e(ne);Gl=r(dy,"So in general, you can have the following as a template to write your code transformation code:"),dy.forEach(o),Ul=p(f),ga=t(f,"DIV",{class:!0});var ef=e(ga);ef.forEach(o),Yl=p(f),re=t(f,"P",{});var uy=e(re);Kl=r(uy,"You can, of course, transforming AST of one language to AST of another language, for example: Sass \u27A1\uFE0F CSS, Markdown \u27A1\uFE0F HTML, and use the generator of another language to generate out the code."),uy.forEach(o),Ql=p(f),ma=t(f,"DIV",{class:!0});var nf=e(ma);nf.forEach(o),Zl=p(f),rs=t(f,"P",{});var kt=e(rs);Xl=r(kt,"Now armed with this template, let's talk about the more "),le=t(kt,"EM",{});var fy=e(le);si=r(fy,"magical"),fy.forEach(o),oi=r(kt," stuff, "),ie=t(kt,"EM",{});var xy=e(ie);ai=r(xy,"the transform function"),xy.forEach(o),ti=r(kt,"."),kt.forEach(o),f.forEach(o),En=p(c),k=t(c,"SECTION",{});var y=e(k);pe=t(y,"H2",{});var gy=e(pe);qs=t(gy,"A",{href:!0,id:!0});var my=e(qs);ei=r(my,"Traversing an AST"),my.forEach(o),gy.forEach(o),ni=p(y),ls=t(y,"P",{});var vt=e(ls);ri=r(vt,"As the name AST suggests, AST uses a tree data structure. To hone the skills of manipulating AST, we need to recall our long distant memory of "),ce=t(vt,"EM",{});var wy=e(ce);li=r(wy,'"Algorithm 101"'),wy.forEach(o),ii=r(vt,", the "),he=t(vt,"STRONG",{});var _y=e(he);pi=r(_y,"depth-first search (DFS)"),_y.forEach(o),ci=r(vt," tree traversal algorithm."),vt.forEach(o),hi=p(y),X=t(y,"P",{});var Lo=e(X);Gs=t(Lo,"A",{href:!0,rel:!0});var by=e(Gs);ki=r(by,"Vaidehi Joshi"),by.forEach(o),vi=r(Lo," wrote an amazing article on "),Us=t(Lo,"A",{href:!0,rel:!0});var Ey=e(Us);yi=r(Ey,"demystifying Depth-First Search"),Ey.forEach(o),di=r(Lo,", I don't think I can explain any better, so if you want to recap on depth-first search, please go and read "),Ys=t(Lo,"A",{href:!0,rel:!0});var Ty=e(Ys);ui=r(Ty,"her article"),Ty.forEach(o),fi=r(Lo," before we continue."),Lo.forEach(o),xi=p(y),ke=t(y,"P",{});var Ay=e(ke);gi=r(Ay,"Now you have a clearer idea of how depth-first search works, a depth-first search on an AST would look something like this:"),Ay.forEach(o),mi=p(y),wa=t(y,"DIV",{class:!0});var rf=e(wa);rf.forEach(o),wi=p(y),Ks=t(y,"P",{});var Rn=e(Ks);_i=r(Rn,"We can then fill up the "),_a=t(Rn,"CODE",{class:!0});var Sy=e(_a);bi=r(Sy,"TODO"),Sy.forEach(o),Ei=r(Rn," with our manipulation code."),Rn.forEach(o),Ti=p(y),is=t(y,"P",{});var yt=e(is);Ai=r(yt,"If we find ourselves needing to do multiple traversals, with different AST manipulation, we would soon realize that mixing AST manipulation code with the traversal code is "),ve=t(yt,"EM",{});var Iy=e(ve);Si=r(Iy,"not clean enough"),Iy.forEach(o),Ii=r(yt,". Naturally, you would realize "),ye=t(yt,"EM",{});var Dy=e(ye);Di=r(Dy,"it is cleaner"),Dy.forEach(o),Ci=r(yt," to pass in a callback function that gets called every time we visit a node:"),yt.forEach(o),Oi=p(y),ba=t(y,"DIV",{class:!0});var lf=e(ba);lf.forEach(o),Pi=p(y),Qs=t(y,"P",{});var Bn=e(Qs);Mi=r(Bn,"The "),Ea=t(Bn,"CODE",{class:!0});var Cy=e(Ea);Li=r(Cy,"visit"),Cy.forEach(o),Ni=r(Bn," function is now generic enough that you can use it for any AST:"),Bn.forEach(o),ji=p(y),Ta=t(y,"DIV",{class:!0});var pf=e(Ta);pf.forEach(o),Hi=p(y),de=t(y,"P",{});var Oy=e(de);Ri=r(Oy,"Naturally, you would think that having the information of the parent node, and the key / index of the current node would be useful to have in the callback function:"),Oy.forEach(o),Bi=p(y),Aa=t(y,"DIV",{class:!0});var cf=e(Aa);cf.forEach(o),Fi=p(y),Zs=t(y,"P",{});var Fn=e(Zs);Vi=r(Fn,"Now, we might think to ourselves, I dont want to get callback for every node visited, I just need callback for a certain node. You might be tempted to add a condition in the "),Sa=t(Fn,"CODE",{class:!0});var Py=e(Sa);zi=r(Py,"visit"),Py.forEach(o),Ji=r(Fn," function:"),Fn.forEach(o),$i=p(y),Ia=t(y,"DIV",{class:!0});var hf=e(Ia);hf.forEach(o),Wi=p(y),Da=t(y,"P",{});var Ok=e(Da);qi=r(Ok,"But you think twice: "),Xs=t(Ok,"EM",{});var Vn=e(Xs);Gi=r(Vn,"what if someone else wants to use "),Ca=t(Vn,"CODE",{class:!0});var My=e(Ca);Ui=r(My,"visit"),My.forEach(o),Yi=r(Vn," but with a different condition for callback?"),Vn.forEach(o),Ok.forEach(o),Ki=p(y),ue=t(y,"P",{});var Ly=e(ue);Qi=r(Ly,"For most of the time, you want to callback only to a certain types of node. In that case, instead of passing in a callback function, you can pass in a map of node type to their respective callback functions:"),Ly.forEach(o),Zi=p(y),Oa=t(y,"DIV",{class:!0});var kf=e(Oa);kf.forEach(o),Xi=p(y),so=t(y,"P",{});var zn=e(so);sp=r(zn,"At this point, you maybe realize, "),fe=t(zn,"EM",{});var Ny=e(fe);op=r(Ny,"hey, this looks so much like one of those AST traversing libraries!"),Ny.forEach(o),ap=r(zn," And yes, this is how they get implemented."),zn.forEach(o),tp=p(y),xe=t(y,"P",{});var jy=e(xe);ep=r(jy,"Now we can traverse the AST, and find the node that we are interested in, so the next step is to manipulate them."),jy.forEach(o),y.forEach(o),Tn=p(c),ss=t(c,"SECTION",{});var dt=e(ss);ge=t(dt,"H2",{});var Hy=e(ge);oo=t(Hy,"A",{href:!0,id:!0});var Ry=e(oo);np=r(Ry,"Manipulating AST"),Ry.forEach(o),Hy.forEach(o),rp=p(dt),me=t(dt,"P",{});var By=e(me);lp=r(By,"Manipulating the AST can be categorized into 3 different operations:"),By.forEach(o),ip=p(dt),ps=t(dt,"UL",{});var ut=e(ps);we=t(ut,"LI",{});var Fy=e(we);pp=r(Fy,"Adding a node"),Fy.forEach(o),cp=p(ut),_e=t(ut,"LI",{});var Vy=e(_e);hp=r(Vy,"Replacing a node"),Vy.forEach(o),kp=p(ut),be=t(ut,"LI",{});var zy=e(be);vp=r(zy,"Removing a node"),zy.forEach(o),ut.forEach(o),dt.forEach(o),An=p(c),T=t(c,"SECTION",{});var M=e(T);Ee=t(M,"H3",{});var Jy=e(Ee);ao=t(Jy,"A",{href:!0,id:!0});var $y=e(ao);yp=r($y,"Adding a node"),$y.forEach(o),Jy.forEach(o),dp=p(M),Te=t(M,"P",{});var Wy=e(Te);up=r(Wy,"To add a node, you can assign it to a keyed property of your node:"),Wy.forEach(o),fp=p(M),Pa=t(M,"DIV",{class:!0});var vf=e(Pa);vf.forEach(o),xp=p(M),Ae=t(M,"P",{});var qy=e(Ae);gp=r(qy,"or push the new node, if the keyed property is an array:"),qy.forEach(o),mp=p(M),Ma=t(M,"DIV",{class:!0});var yf=e(Ma);yf.forEach(o),wp=p(M),Se=t(M,"P",{});var Gy=e(Se);_p=r(Gy,"To add a node as a sibling, you may need to access the node's parent:"),Gy.forEach(o),bp=p(M),La=t(M,"DIV",{class:!0});var df=e(La);df.forEach(o),M.forEach(o),Sn=p(c),O=t(c,"SECTION",{});var ts=e(O);Ie=t(ts,"H3",{});var Uy=e(Ie);to=t(Uy,"A",{href:!0,id:!0});var Yy=e(to);Ep=r(Yy,"Replacing a node"),Yy.forEach(o),Uy.forEach(o),Tp=p(ts),De=t(ts,"P",{});var Ky=e(De);Ap=r(Ky,"To replace the current node to another node, update the key property of the current node's parent:"),Ky.forEach(o),Sp=p(ts),Na=t(ts,"DIV",{class:!0});var uf=e(Na);uf.forEach(o),Ip=p(ts),Ce=t(ts,"P",{});var Qy=e(Ce);Dp=r(Qy,"If the key property of the parent is an array:"),Qy.forEach(o),Cp=p(ts),ja=t(ts,"DIV",{class:!0});var ff=e(ja);ff.forEach(o),ts.forEach(o),In=p(c),h=t(c,"SECTION",{});var v=e(h);Oe=t(v,"H3",{});var Zy=e(Oe);eo=t(Zy,"A",{href:!0,id:!0});var Xy=e(eo);Op=r(Xy,"Removing a node"),Xy.forEach(o),Zy.forEach(o),Pp=p(v),Pe=t(v,"P",{});var sd=e(Pe);Mp=r(sd,"To remove the current node, delete the key property of the current node's parent:"),sd.forEach(o),Lp=p(v),Ha=t(v,"DIV",{class:!0});var xf=e(Ha);xf.forEach(o),Np=p(v),Me=t(v,"P",{});var od=e(Me);jp=r(od,"If the key property of the parent is an array:"),od.forEach(o),Hp=p(v),Ra=t(v,"DIV",{class:!0});var gf=e(Ra);gf.forEach(o),Rp=p(v),Le=t(v,"BLOCKQUOTE",{});var ad=e(Le);Y=t(ad,"P",{});var _s=e(Y);Bp=r(_s,"The operations of "),Ne=t(_s,"STRONG",{});var td=e(Ne);Fp=r(td,"adding"),td.forEach(o),Vp=r(_s,", "),je=t(_s,"STRONG",{});var ed=e(je);zp=r(ed,"replacing"),ed.forEach(o),Jp=r(_s,", and "),He=t(_s,"STRONG",{});var nd=e(He);$p=r(nd,"removing"),nd.forEach(o),Wp=r(_s," nodes are so common that, they are usually implemented as a util function."),_s.forEach(o),ad.forEach(o),qp=p(v),no=t(v,"P",{});var Jn=e(no);Gp=r(Jn,"However, there's "),Re=t(Jn,"STRONG",{});var rd=e(Re);Up=r(rd,"one important step"),rd.forEach(o),Yp=r(Jn," that I did not cover: after you mutate the node, you need to make sure that the traversal still works fine."),Jn.forEach(o),Kp=p(v),cs=t(v,"P",{});var ft=e(cs);Qp=r(ft,"For a node that is a property of a key of its parent, adding, replacing and removing them are usually fine. Except for the replace operation, you might need to revisit the "),Be=t(ft,"EM",{});var ld=e(Be);Zp=r(ld,'"current node"'),ld.forEach(o),Xp=r(ft,", which is the "),Fe=t(ft,"EM",{});var id=e(Fe);sc=r(id,"new replacing node"),id.forEach(o),oc=r(ft,"."),ft.forEach(o),ac=p(v),Ve=t(v,"P",{});var pd=e(Ve);tc=r(pd,"However, for node that are in an array, you need to take special care to update the array index of the loop:"),pd.forEach(o),ec=p(v),Ba=t(v,"DIV",{class:!0});var mf=e(Ba);mf.forEach(o),nc=p(v),ze=t(v,"P",{});var cd=e(ze);rc=r(cd,"But how do you know that the current node was removed?"),cd.forEach(o),lc=p(v),ro=t(v,"P",{});var $n=e(ro);ic=r($n,"Well, knowing when a node got removed is sometimes a secret that lies within the "),Fa=t($n,"CODE",{class:!0});var hd=e(Fa);pc=r(hd,"remove"),hd.forEach(o),cc=r($n," util function from the tree traversal library."),$n.forEach(o),hc=p(v),lo=t(v,"P",{});var Wn=e(lo);kc=r(Wn,"It could be as simple as setting a flag when you call "),Va=t(Wn,"CODE",{class:!0});var kd=e(Va);vc=r(kd,"remove"),kd.forEach(o),yc=r(Wn,":"),Wn.forEach(o),dc=p(v),za=t(v,"DIV",{class:!0});var wf=e(za);wf.forEach(o),uc=p(v),N=t(v,"P",{});var es=e(N);fc=r(es,"But sometimes, instead of having to import the "),Ja=t(es,"CODE",{class:!0});var vd=e(Ja);xc=r(vd,"remove"),vd.forEach(o),gc=r(es," util from the tree traversal library, the "),$a=t(es,"CODE",{class:!0});var yd=e($a);mc=r(yd,"remove"),yd.forEach(o),wc=r(es," function is available in "),Wa=t(es,"CODE",{class:!0});var dd=e(Wa);_c=r(dd,"this"),dd.forEach(o),bc=r(es," of the "),qa=t(es,"CODE",{class:!0});var ud=e(qa);Ec=r(ud,"visitCallback"),ud.forEach(o),Tc=r(es,":"),es.forEach(o),Ac=p(v),Ga=t(v,"DIV",{class:!0});var _f=e(Ga);_f.forEach(o),Sc=p(v),Je=t(v,"P",{});var fd=e(Je);Ic=r(fd,"Now you learned the 3 basic operations of manipulating the AST, you maybe wonder how exactly is to use these basic operations to write a codemod or an AST transform plugin?"),fd.forEach(o),Dc=p(v),K=t(v,"P",{});var bs=e(K);Cc=r(bs,"Well, in my "),Ua=t(bs,"A",{href:!0});var xd=e(Ua);Oc=r(xd,"step-by-step guide"),xd.forEach(o),Pc=r(bs,", I've explained that, you can use AST explorer like "),io=t(bs,"A",{href:!0,rel:!0});var gd=e(io);Mc=r(gd,"http://astexplorer.net/"),gd.forEach(o),Lc=r(bs," or "),po=t(bs,"A",{href:!0,rel:!0});var md=e(po);Nc=r(md,"Babel AST Explorer"),md.forEach(o),jc=r(bs," to help you."),bs.forEach(o),Hc=p(v),$e=t(v,"P",{});var wd=e($e);Rc=r(wd,"You need to:"),wd.forEach(o),Bc=p(v),co=t(v,"UL",{});var qn=e(co);Ya=t(qn,"LI",{});var Pk=e(Ya);We=t(Pk,"STRONG",{});var _d=e(We);Fc=r(_d,"Know how the part of the code you want to change look like in the AST"),_d.forEach(o),Vc=r(Pk,", so you can target the specific type of the node, and"),Pk.forEach(o),zc=p(qn),Ka=t(qn,"LI",{});var Mk=e(Ka);qe=t(Mk,"STRONG",{});var bd=e(qe);Jc=r(bd,"Know how does the final output you wish to see look like in the AST"),bd.forEach(o),$c=r(Mk,", so you know what nodes to create, update or remove."),Mk.forEach(o),qn.forEach(o),Wc=p(v),Ge=t(v,"P",{});var Ed=e(Ge);qc=r(Ed,"So we are going to elaborate more on these 2 steps specifically."),Ed.forEach(o),v.forEach(o),Dn=p(c),b=t(c,"SECTION",{});var S=e(b);Ue=t(S,"H2",{});var Td=e(Ue);ho=t(Td,"A",{href:!0,id:!0});var Ad=e(ho);Gc=r(Ad,"Targeting a node"),Ad.forEach(o),Td.forEach(o),Uc=p(S),ko=t(S,"P",{});var Gn=e(ko);Yc=r(Gn,"Node targeting, most of the times, is just a lot of "),Qa=t(Gn,"CODE",{class:!0});var Sd=e(Qa);Kc=r(Sd,"==="),Sd.forEach(o),Qc=r(Gn,"."),Gn.forEach(o),Zc=p(S),D=t(S,"P",{});var R=e(D);Xc=r(R,"For example, if you want to target a "),Za=t(R,"CODE",{class:!0});var Id=e(Za);sh=r(Id,"<figure>"),Id.forEach(o),oh=r(R," with a class "),Xa=t(R,"CODE",{class:!0});var Dd=e(Xa);ah=r(Dd,"foo"),Dd.forEach(o),th=r(R," that contains an "),st=t(R,"CODE",{class:!0});var Cd=e(st);eh=r(Cd,"<img>"),Cd.forEach(o),nh=r(R," and a "),ot=t(R,"CODE",{class:!0});var Od=e(ot);rh=r(Od,"<figcaption>"),Od.forEach(o),lh=r(R," in "),vo=t(R,"A",{href:!0,rel:!0});var Pd=e(vo);ih=r(Pd,"htmlparser2"),Pd.forEach(o),ph=r(R,":"),R.forEach(o),ch=p(S),at=t(S,"DIV",{class:!0});var bf=e(at);bf.forEach(o),hh=p(S),Ye=t(S,"P",{});var Md=e(Ye);kh=r(Md,"You need to check:"),Md.forEach(o),vh=p(S),tt=t(S,"DIV",{class:!0});var Ef=e(tt);Ef.forEach(o),yh=p(S),Ke=t(S,"P",{});var Ld=e(Ke);dh=r(Ld,"To make it less verbose, we can refactor each check into reusable functions:"),Ld.forEach(o),uh=p(S),et=t(S,"DIV",{class:!0});var Tf=e(et);Tf.forEach(o),S.forEach(o),Cn=p(c),x=t(c,"SECTION",{});var _=e(x);Qe=t(_,"H2",{});var Nd=e(Qe);yo=t(Nd,"A",{href:!0,id:!0});var jd=e(yo);fh=r(jd,"Creating a node"),jd.forEach(o),Nd.forEach(o),xh=p(_),Ze=t(_,"P",{});var Hd=e(Ze);gh=r(Hd,"There are a few ways you can create an AST node."),Hd.forEach(o),mh=p(_),uo=t(_,"P",{});var Un=e(uo);wh=r(Un,"The simplest and crudest way is to "),Xe=t(Un,"STRONG",{});var Rd=e(Xe);_h=r(Rd,"manually create the node object"),Rd.forEach(o),bh=r(Un,". Most of the time, the node object is a JavaScript object. So you can just create them manually:"),Un.forEach(o),Eh=p(_),nt=t(_,"DIV",{class:!0});var Af=e(nt);Af.forEach(o),Th=p(_),fo=t(_,"P",{});var Yn=e(fo);Ah=r(Yn,"It may become unwieldy when creating large, complex AST nodes, so sometimes library decides to provide builder functions, like "),xo=t(Yn,"A",{href:!0,rel:!0});var Bd=e(xo);Sh=r(Bd,"@babel/types"),Bd.forEach(o),Ih=r(Yn," to simplify node creation and provide default values:"),Yn.forEach(o),Dh=p(_),rt=t(_,"DIV",{class:!0});var Sf=e(rt);Sf.forEach(o),Ch=p(_),sn=t(_,"P",{});var Fd=e(sn);Oh=r(Fd,"It looked more concise and tidier, but it is hard to comprehend and grasp what node it is creating."),Fd.forEach(o),Ph=p(_),hs=t(_,"P",{});var xt=e(hs);Mh=r(xt,"So, a better way of creating complex AST node, is to use the "),lt=t(xt,"CODE",{class:!0});var Vd=e(lt);Lh=r(Vd,"parse"),Vd.forEach(o),Nh=r(xt," function + "),it=t(xt,"CODE",{class:!0});var zd=e(it);jh=r(zd,"string"),zd.forEach(o),Hh=r(xt,":"),xt.forEach(o),Rh=p(_),pt=t(_,"DIV",{class:!0});var If=e(pt);If.forEach(o),Bh=p(_),ks=t(_,"P",{});var gt=e(ks);Fh=r(gt,"For Babel, there's an amazing util called "),go=t(gt,"A",{href:!0,rel:!0});var Jd=e(go);Vh=r(Jd,"@babel/template"),Jd.forEach(o),zh=r(gt,", where you can use "),mo=t(gt,"A",{href:!0,rel:!0});var $d=e(mo);Jh=r($d,"template literals"),$d.forEach(o),$h=r(gt," to create AST node:"),gt.forEach(o),Wh=p(_),ct=t(_,"DIV",{class:!0});var Df=e(ct);Df.forEach(o),_.forEach(o),On=p(c),j=t(c,"SECTION",{});var Es=e(j);on=t(Es,"H2",{});var Wd=e(on);wo=t(Wd,"A",{href:!0,id:!0});var qd=e(wo);qh=r(qd,"Summary"),qd.forEach(o),Wd.forEach(o),Gh=p(Es),an=t(Es,"P",{});var Gd=e(an);Uh=r(Gd,"We've gone through:"),Gd.forEach(o),Yh=p(Es),Q=t(Es,"UL",{});var Ts=e(Q);tn=t(Ts,"LI",{});var Ud=e(tn);Kh=r(Ud,"How to traverse an AST, using depth-first search algorithm,"),Ud.forEach(o),Qh=p(Ts),en=t(Ts,"LI",{});var Yd=e(en);Zh=r(Yd,"The 3 basic AST manipulations, addition, replacement, and removal,"),Yd.forEach(o),Xh=p(Ts),nn=t(Ts,"LI",{});var Kd=e(nn);sk=r(Kd,"How to target a node in AST, and"),Kd.forEach(o),ok=p(Ts),rn=t(Ts,"LI",{});var Qd=e(rn);ak=r(Qd,"How to create an AST node"),Qd.forEach(o),Ts.forEach(o),tk=p(Es),Z=t(Es,"BLOCKQUOTE",{});var As=e(Z);ln=t(As,"P",{});var Zd=e(ln);pn=t(Zd,"STRONG",{});var Xd=e(pn);ek=r(Xd,"Manipulating AST with JavaScript using Babel"),Xd.forEach(o),Zd.forEach(o),nk=p(As),_o=t(As,"P",{});var Kn=e(_o);rk=r(Kn,"If you like what you've read so far, and want to learn how you could do it with Babel. I've created a "),bo=t(Kn,"A",{href:!0,rel:!0});var su=e(bo);lk=r(su,"video course"),su.forEach(o),ik=r(Kn,", showing you step-by-step, how to write a babel plugin and codemod."),Kn.forEach(o),pk=p(As),cn=t(As,"P",{});var ou=e(cn);ck=r(ou,"In the video course, I detailed tips and tricks, such as how to handle scope, how to use state, and also nested traversals."),ou.forEach(o),hk=p(As),hn=t(As,"P",{});var au=e(hn);kn=t(au,"STRONG",{});var tu=e(kn);Eo=t(tu,"A",{href:!0,rel:!0});var eu=e(Eo);kk=r(eu,"Sounds interesting, let's take a look at the video course"),eu.forEach(o),tu.forEach(o),au.forEach(o),As.forEach(o),Es.forEach(o),Pn=p(c),os=t(c,"SECTION",{});var mt=e(os);vn=t(mt,"H2",{});var nu=e(vn);To=t(nu,"A",{href:!0,id:!0});var ru=e(To);vk=r(ru,"Further Readings"),ru.forEach(o),nu.forEach(o),yk=p(mt),ys=t(mt,"P",{});var mn=e(ys);Ao=t(mn,"A",{href:!0,rel:!0});var lu=e(Ao);dk=r(lu,"Dinesh (@flexdinesh)"),lu.forEach(o),uk=p(mn),So=t(mn,"A",{href:!0,rel:!0});var iu=e(So);fk=r(iu,"tweeted"),iu.forEach(o),xk=r(mn," his pocket collection of AST resources:"),mn.forEach(o),gk=p(mt),C=t(mt,"UL",{});var B=e(C);yn=t(B,"LI",{});var pu=e(yn);Io=t(pu,"A",{href:!0,rel:!0});var cu=e(Io);mk=r(cu,"Code Transformation and Linting with ASTs"),cu.forEach(o),pu.forEach(o),wk=p(B),dn=t(B,"LI",{});var hu=e(dn);Do=t(hu,"A",{href:!0,rel:!0});var ku=e(Do);_k=r(ku,"Write your own code transform for fun and profit"),ku.forEach(o),hu.forEach(o),bk=p(B),un=t(B,"LI",{});var vu=e(un);Co=t(vu,"A",{href:!0,rel:!0});var yu=e(Co);Ek=r(yu,"Understanding ASTs by Building Your Own Babel Plugin"),yu.forEach(o),vu.forEach(o),Tk=p(B),fn=t(B,"LI",{});var du=e(fn);Oo=t(du,"A",{href:!0,rel:!0});var uu=e(Oo);Ak=r(uu,"Writing your first Babel Plugin"),uu.forEach(o),du.forEach(o),Sk=p(B),xn=t(B,"LI",{});var fu=e(xn);Po=t(fu,"A",{href:!0,rel:!0});var xu=e(Po);Ik=r(xu,"This is how I build Babel plug-ins"),xu.forEach(o),fu.forEach(o),Dk=p(B),gn=t(B,"LI",{});var gu=e(gn);Mo=t(gu,"A",{href:!0,rel:!0});var mu=e(Mo);Ck=r(mu,"Writing My First Babel Plugin"),mu.forEach(o),gu.forEach(o),B.forEach(o),mt.forEach(o),this.h()},h(){l(w,"href","/step-by-step-guide-for-writing-a-babel-transformation"),l(Is,"href","https://babeljs.io/"),l(Is,"rel","nofollow"),l(Ho,"href","/creating-custom-javascript-syntax-with-babel"),l(Ds,"href","https://www.ecma-international.org/publications/standards/Ecma-262.htm"),l(Ds,"rel","nofollow"),l(Cs,"href","http://typescriptlang.org/"),l(Cs,"rel","nofollow"),l(Os,"href","https://sass-lang.com/"),l(Os,"rel","nofollow"),l(Ps,"href","https://www.w3.org/Style/CSS/"),l(Ps,"rel","nofollow"),l(Ms,"href","https://www.w3.org/html/"),l(Ms,"rel","nofollow"),l(Ls,"href","https://en.wikipedia.org/wiki/Markdown"),l(Ls,"rel","nofollow"),l(Ns,"href","#the-parsers"),l(Ns,"id","the-parsers"),l(Hs,"href","https://astexplorer.net/"),l(Hs,"rel","nofollow"),bu(Rs.src,Nk=Bf)||l(Rs,"src",Nk),l(Rs,"loading","lazy"),l(Rs,"alt","ast explorer"),l(Bs,"href","https://github.com/fb55/htmlparser2"),l(Bs,"rel","nofollow"),l(Fs,"href","https://github.com/nik-garmash/hyntax"),l(Fs,"rel","nofollow"),l(Vs,"href","https://github.com/inikulin/parse5"),l(Vs,"rel","nofollow"),l(St,"type","image/webp"),l(St,"srcset",Rf),l(It,"type","image/png"),l(It,"srcset",Tu),bu(Js.src,jk=Tu)||l(Js,"src",jk),l(Js,"loading","lazy"),l(Js,"alt","ast explorer"),l(Bo,"class","inline"),l(Fo,"class","inline"),l(Vo,"class","language-text"),l(zo,"class","language-text"),l(Jo,"href","https://github.com/inikulin/parse5/tree/master/packages/parse5"),l(Wo,"class","language-text"),l($o,"href","https://github.com/inikulin/parse5/blob/master/packages/parse5/docs/index.md#parse"),l(Go,"class","language-text"),l(qo,"href","https://github.com/inikulin/parse5/blob/master/packages/parse5/docs/index.md#serialize"),l(Uo,"href","https://github.com/remarkjs/remark"),l(Ko,"class","language-text"),l(Yo,"href","https://github.com/remarkjs/remark/tree/master/packages/remark-parse"),l(Zo,"class","language-text"),l(Qo,"href","https://github.com/remarkjs/remark/tree/master/packages/remark-stringify"),l(Xo,"href","https://github.com/csstree/csstree"),l(oa,"class","language-text"),l(sa,"href","https://github.com/csstree/csstree/blob/master/docs/parsing.md"),l(ta,"class","language-text"),l(aa,"href","https://github.com/csstree/csstree/blob/master/docs/generate.md"),l(ea,"href","https://github.com/shawnbot/sast"),l(ra,"class","language-text"),l(na,"href","https://github.com/shawnbot/sast#sastparsesource--options-"),l(ia,"class","language-text"),l(la,"href","https://github.com/shawnbot/sast#saststringifynode-"),l(pa,"href","https://babeljs.io/"),l(ha,"class","language-text"),l(ca,"href","https://babeljs.io/docs/en/babel-parser#babelparserparsecode-options"),l(va,"class","language-text"),l(ka,"href","https://babeljs.io/docs/en/babel-generator"),l(ya,"href","http://typescriptlang.org/"),l(ua,"class","language-text"),l(da,"href","https://github.com/microsoft/TypeScript/wiki/Using-the-Compiler-API#creating-and-printing-a-typescript-ast"),l(xa,"class","language-text"),l(fa,"href","https://github.com/microsoft/TypeScript/wiki/Using-the-Compiler-API#creating-and-printing-a-typescript-ast"),Eu($s,"overflow","auto"),Eu($s,"margin-bottom","2em"),l(ga,"class","code-section"),l(ma,"class","code-section"),l(qs,"href","#traversing-an-ast"),l(qs,"id","traversing-an-ast"),l(Gs,"href","https://twitter.com/vaidehijoshi"),l(Gs,"rel","nofollow"),l(Us,"href","https://medium.com/basecs/demystifying-depth-first-search-a7c14cccf056"),l(Us,"rel","nofollow"),l(Ys,"href","https://medium.com/basecs/demystifying-depth-first-search-a7c14cccf056"),l(Ys,"rel","nofollow"),l(wa,"class","code-section"),l(_a,"class","inline"),l(ba,"class","code-section"),l(Ea,"class","inline"),l(Ta,"class","code-section"),l(Aa,"class","code-section"),l(Sa,"class","inline"),l(Ia,"class","code-section"),l(Ca,"class","inline"),l(Oa,"class","code-section"),l(oo,"href","#manipulating-ast"),l(oo,"id","manipulating-ast"),l(ao,"href","#adding-a-node"),l(ao,"id","adding-a-node"),l(Pa,"class","code-section"),l(Ma,"class","code-section"),l(La,"class","code-section"),l(to,"href","#replacing-a-node"),l(to,"id","replacing-a-node"),l(Na,"class","code-section"),l(ja,"class","code-section"),l(eo,"href","#removing-a-node"),l(eo,"id","removing-a-node"),l(Ha,"class","code-section"),l(Ra,"class","code-section"),l(Ba,"class","code-section"),l(Fa,"class","inline"),l(Va,"class","inline"),l(za,"class","code-section"),l(Ja,"class","inline"),l($a,"class","inline"),l(Wa,"class","inline"),l(qa,"class","inline"),l(Ga,"class","code-section"),l(Ua,"href","/step-by-step-guide-for-writing-a-babel-transformation"),l(io,"href","http://astexplorer.net/"),l(io,"rel","nofollow"),l(po,"href","https://lihautan.com/babel-ast-explorer"),l(po,"rel","nofollow"),l(ho,"href","#targeting-a-node"),l(ho,"id","targeting-a-node"),l(Qa,"class","inline"),l(Za,"class","inline"),l(Xa,"class","inline"),l(st,"class","inline"),l(ot,"class","inline"),l(vo,"href","https://github.com/fb55/htmlparser2"),l(vo,"rel","nofollow"),l(at,"class","code-section"),l(tt,"class","code-section"),l(et,"class","code-section"),l(yo,"href","#creating-a-node"),l(yo,"id","creating-a-node"),l(nt,"class","code-section"),l(xo,"href","https://babeljs.io/docs/en/babel-types"),l(xo,"rel","nofollow"),l(rt,"class","code-section"),l(lt,"class","inline"),l(it,"class","inline"),l(pt,"class","code-section"),l(go,"href","https://babeljs.io/docs/en/babel-template"),l(go,"rel","nofollow"),l(mo,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"),l(mo,"rel","nofollow"),l(ct,"class","code-section"),l(wo,"href","#summary"),l(wo,"id","summary"),l(bo,"href","https://gum.co/manipulating-ast-with-javascript"),l(bo,"rel","nofollow"),l(Eo,"href","https://gum.co/manipulating-ast-with-javascript"),l(Eo,"rel","nofollow"),l(To,"href","#further-readings"),l(To,"id","further-readings"),l(Ao,"href","https://twitter.com/flexdinesh"),l(Ao,"rel","nofollow"),l(So,"href","https://twitter.com/flexdinesh/status/1196680010343432192"),l(So,"rel","nofollow"),l(Io,"href","https://frontendmasters.com/courses/linting-asts/"),l(Io,"rel","nofollow"),l(Do,"href","https://kentcdodds.com/blog/write-your-own-code-transform/"),l(Do,"rel","nofollow"),l(Co,"href","https://www.sitepoint.com/understanding-asts-building-babel-plugin/"),l(Co,"rel","nofollow"),l(Oo,"href","https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#toc-writing-your-first-babel-plugin"),l(Oo,"rel","nofollow"),l(Po,"href","https://medium.com/the-guild/this-is-how-i-build-babel-plug-ins-b0a13dcd0352"),l(Po,"rel","nofollow"),l(Mo,"href","https://varunzxzx.github.io/blog/writing-babel-plugin"),l(Mo,"rel","nofollow")},m(c,d){Du(m,c,d),g(c,F,d),g(c,E,d),s(E,Ss),s(E,w),s(w,V),s(E,jo),s(E,Is),s(Is,Qn),s(E,Zn),s(E,Ho),s(Ho,Xn),s(E,sr),g(c,wn,d),g(c,Ro,d),s(Ro,or),g(c,_n,d),g(c,vs,d),s(vs,A),s(A,ar),s(A,Ds),s(Ds,tr),s(A,er),s(A,Cs),s(Cs,nr),s(A,rr),s(A,Os),s(Os,lr),s(A,ir),s(A,Ps),s(Ps,pr),s(A,cr),s(A,Ms),s(Ms,hr),s(A,kr),s(A,Ls),s(Ls,vr),s(A,yr),s(vs,dr),s(vs,wt),s(wt,ur),g(c,bn,d),g(c,u,d),s(u,_t),s(_t,Ns),s(Ns,fr),s(u,xr),s(u,bt),s(bt,gr),s(u,mr),s(u,js),s(js,wr),s(js,Hs),s(Hs,_r),s(js,br),s(u,Er),s(u,Et),s(Et,Rs),s(u,Tr),s(u,L),s(L,Ar),s(L,Tt),s(Tt,Sr),s(L,Ir),s(L,Bs),s(Bs,Dr),s(L,Cr),s(L,Fs),s(Fs,Or),s(L,Pr),s(L,Vs),s(Vs,Mr),s(L,Lr),s(u,Nr),s(u,At),s(At,zs),s(zs,St),s(zs,It),s(zs,Js),s(u,jr),s(u,ns),s(ns,Hr),s(ns,Bo),s(Bo,Rr),s(ns,Br),s(ns,Fo),s(Fo,Fr),s(ns,Vr),s(u,zr),s(u,$s),s($s,Ws),s(Ws,Dt),s(Dt,z),s(z,Ct),s(Ct,Jr),s(z,$r),s(z,Ot),s(Ot,Wr),s(z,qr),s(z,Pt),s(Pt,Vo),s(Vo,Gr),s(z,Ur),s(z,Mt),s(Mt,zo),s(zo,Yr),s(Ws,Kr),s(Ws,I),s(I,J),s(J,Lt),s(Lt,Qr),s(J,Zr),s(J,Nt),s(Nt,Jo),s(Jo,Xr),s(J,sl),s(J,jt),s(jt,$o),s($o,Wo),s(Wo,ol),s(J,al),s(J,Ht),s(Ht,qo),s(qo,Go),s(Go,tl),s(I,el),s(I,$),s($,Rt),s(Rt,nl),s($,rl),s($,Bt),s(Bt,Uo),s(Uo,ll),s($,il),s($,Ft),s(Ft,Yo),s(Yo,Ko),s(Ko,pl),s($,cl),s($,Vt),s(Vt,Qo),s(Qo,Zo),s(Zo,hl),s(I,kl),s(I,W),s(W,zt),s(zt,vl),s(W,yl),s(W,Jt),s(Jt,Xo),s(Xo,dl),s(W,ul),s(W,$t),s($t,sa),s(sa,oa),s(oa,fl),s(W,xl),s(W,Wt),s(Wt,aa),s(aa,ta),s(ta,gl),s(I,ml),s(I,q),s(q,qt),s(qt,wl),s(q,_l),s(q,Gt),s(Gt,ea),s(ea,bl),s(q,El),s(q,Ut),s(Ut,na),s(na,ra),s(ra,Tl),s(q,Al),s(q,Yt),s(Yt,la),s(la,ia),s(ia,Sl),s(I,Il),s(I,G),s(G,Kt),s(Kt,Dl),s(G,Cl),s(G,Qt),s(Qt,pa),s(pa,Ol),s(G,Pl),s(G,Zt),s(Zt,ca),s(ca,ha),s(ha,Ml),s(G,Ll),s(G,Xt),s(Xt,ka),s(ka,va),s(va,Nl),s(I,jl),s(I,U),s(U,se),s(se,Hl),s(U,Rl),s(U,oe),s(oe,ya),s(ya,Bl),s(U,Fl),s(U,ae),s(ae,da),s(da,ua),s(ua,Vl),s(U,zl),s(U,te),s(te,fa),s(fa,xa),s(xa,Jl),s(u,$l),s(u,ee),s(ee,Wl),s(u,ql),s(u,ne),s(ne,Gl),s(u,Ul),s(u,ga),ga.innerHTML=Mu,s(u,Yl),s(u,re),s(re,Kl),s(u,Ql),s(u,ma),ma.innerHTML=Lu,s(u,Zl),s(u,rs),s(rs,Xl),s(rs,le),s(le,si),s(rs,oi),s(rs,ie),s(ie,ai),s(rs,ti),g(c,En,d),g(c,k,d),s(k,pe),s(pe,qs),s(qs,ei),s(k,ni),s(k,ls),s(ls,ri),s(ls,ce),s(ce,li),s(ls,ii),s(ls,he),s(he,pi),s(ls,ci),s(k,hi),s(k,X),s(X,Gs),s(Gs,ki),s(X,vi),s(X,Us),s(Us,yi),s(X,di),s(X,Ys),s(Ys,ui),s(X,fi),s(k,xi),s(k,ke),s(ke,gi),s(k,mi),s(k,wa),wa.innerHTML=Nu,s(k,wi),s(k,Ks),s(Ks,_i),s(Ks,_a),s(_a,bi),s(Ks,Ei),s(k,Ti),s(k,is),s(is,Ai),s(is,ve),s(ve,Si),s(is,Ii),s(is,ye),s(ye,Di),s(is,Ci),s(k,Oi),s(k,ba),ba.innerHTML=ju,s(k,Pi),s(k,Qs),s(Qs,Mi),s(Qs,Ea),s(Ea,Li),s(Qs,Ni),s(k,ji),s(k,Ta),Ta.innerHTML=Hu,s(k,Hi),s(k,de),s(de,Ri),s(k,Bi),s(k,Aa),Aa.innerHTML=Ru,s(k,Fi),s(k,Zs),s(Zs,Vi),s(Zs,Sa),s(Sa,zi),s(Zs,Ji),s(k,$i),s(k,Ia),Ia.innerHTML=Bu,s(k,Wi),s(k,Da),s(Da,qi),s(Da,Xs),s(Xs,Gi),s(Xs,Ca),s(Ca,Ui),s(Xs,Yi),s(k,Ki),s(k,ue),s(ue,Qi),s(k,Zi),s(k,Oa),Oa.innerHTML=Fu,s(k,Xi),s(k,so),s(so,sp),s(so,fe),s(fe,op),s(so,ap),s(k,tp),s(k,xe),s(xe,ep),g(c,Tn,d),g(c,ss,d),s(ss,ge),s(ge,oo),s(oo,np),s(ss,rp),s(ss,me),s(me,lp),s(ss,ip),s(ss,ps),s(ps,we),s(we,pp),s(ps,cp),s(ps,_e),s(_e,hp),s(ps,kp),s(ps,be),s(be,vp),g(c,An,d),g(c,T,d),s(T,Ee),s(Ee,ao),s(ao,yp),s(T,dp),s(T,Te),s(Te,up),s(T,fp),s(T,Pa),Pa.innerHTML=Vu,s(T,xp),s(T,Ae),s(Ae,gp),s(T,mp),s(T,Ma),Ma.innerHTML=zu,s(T,wp),s(T,Se),s(Se,_p),s(T,bp),s(T,La),La.innerHTML=Ju,g(c,Sn,d),g(c,O,d),s(O,Ie),s(Ie,to),s(to,Ep),s(O,Tp),s(O,De),s(De,Ap),s(O,Sp),s(O,Na),Na.innerHTML=$u,s(O,Ip),s(O,Ce),s(Ce,Dp),s(O,Cp),s(O,ja),ja.innerHTML=Wu,g(c,In,d),g(c,h,d),s(h,Oe),s(Oe,eo),s(eo,Op),s(h,Pp),s(h,Pe),s(Pe,Mp),s(h,Lp),s(h,Ha),Ha.innerHTML=qu,s(h,Np),s(h,Me),s(Me,jp),s(h,Hp),s(h,Ra),Ra.innerHTML=Gu,s(h,Rp),s(h,Le),s(Le,Y),s(Y,Bp),s(Y,Ne),s(Ne,Fp),s(Y,Vp),s(Y,je),s(je,zp),s(Y,Jp),s(Y,He),s(He,$p),s(Y,Wp),s(h,qp),s(h,no),s(no,Gp),s(no,Re),s(Re,Up),s(no,Yp),s(h,Kp),s(h,cs),s(cs,Qp),s(cs,Be),s(Be,Zp),s(cs,Xp),s(cs,Fe),s(Fe,sc),s(cs,oc),s(h,ac),s(h,Ve),s(Ve,tc),s(h,ec),s(h,Ba),Ba.innerHTML=Uu,s(h,nc),s(h,ze),s(ze,rc),s(h,lc),s(h,ro),s(ro,ic),s(ro,Fa),s(Fa,pc),s(ro,cc),s(h,hc),s(h,lo),s(lo,kc),s(lo,Va),s(Va,vc),s(lo,yc),s(h,dc),s(h,za),za.innerHTML=Yu,s(h,uc),s(h,N),s(N,fc),s(N,Ja),s(Ja,xc),s(N,gc),s(N,$a),s($a,mc),s(N,wc),s(N,Wa),s(Wa,_c),s(N,bc),s(N,qa),s(qa,Ec),s(N,Tc),s(h,Ac),s(h,Ga),Ga.innerHTML=Ku,s(h,Sc),s(h,Je),s(Je,Ic),s(h,Dc),s(h,K),s(K,Cc),s(K,Ua),s(Ua,Oc),s(K,Pc),s(K,io),s(io,Mc),s(K,Lc),s(K,po),s(po,Nc),s(K,jc),s(h,Hc),s(h,$e),s($e,Rc),s(h,Bc),s(h,co),s(co,Ya),s(Ya,We),s(We,Fc),s(Ya,Vc),s(co,zc),s(co,Ka),s(Ka,qe),s(qe,Jc),s(Ka,$c),s(h,Wc),s(h,Ge),s(Ge,qc),g(c,Dn,d),g(c,b,d),s(b,Ue),s(Ue,ho),s(ho,Gc),s(b,Uc),s(b,ko),s(ko,Yc),s(ko,Qa),s(Qa,Kc),s(ko,Qc),s(b,Zc),s(b,D),s(D,Xc),s(D,Za),s(Za,sh),s(D,oh),s(D,Xa),s(Xa,ah),s(D,th),s(D,st),s(st,eh),s(D,nh),s(D,ot),s(ot,rh),s(D,lh),s(D,vo),s(vo,ih),s(D,ph),s(b,ch),s(b,at),at.innerHTML=Qu,s(b,hh),s(b,Ye),s(Ye,kh),s(b,vh),s(b,tt),tt.innerHTML=Zu,s(b,yh),s(b,Ke),s(Ke,dh),s(b,uh),s(b,et),et.innerHTML=Xu,g(c,Cn,d),g(c,x,d),s(x,Qe),s(Qe,yo),s(yo,fh),s(x,xh),s(x,Ze),s(Ze,gh),s(x,mh),s(x,uo),s(uo,wh),s(uo,Xe),s(Xe,_h),s(uo,bh),s(x,Eh),s(x,nt),nt.innerHTML=sf,s(x,Th),s(x,fo),s(fo,Ah),s(fo,xo),s(xo,Sh),s(fo,Ih),s(x,Dh),s(x,rt),rt.innerHTML=of,s(x,Ch),s(x,sn),s(sn,Oh),s(x,Ph),s(x,hs),s(hs,Mh),s(hs,lt),s(lt,Lh),s(hs,Nh),s(hs,it),s(it,jh),s(hs,Hh),s(x,Rh),s(x,pt),pt.innerHTML=af,s(x,Bh),s(x,ks),s(ks,Fh),s(ks,go),s(go,Vh),s(ks,zh),s(ks,mo),s(mo,Jh),s(ks,$h),s(x,Wh),s(x,ct),ct.innerHTML=tf,g(c,On,d),g(c,j,d),s(j,on),s(on,wo),s(wo,qh),s(j,Gh),s(j,an),s(an,Uh),s(j,Yh),s(j,Q),s(Q,tn),s(tn,Kh),s(Q,Qh),s(Q,en),s(en,Zh),s(Q,Xh),s(Q,nn),s(nn,sk),s(Q,ok),s(Q,rn),s(rn,ak),s(j,tk),s(j,Z),s(Z,ln),s(ln,pn),s(pn,ek),s(Z,nk),s(Z,_o),s(_o,rk),s(_o,bo),s(bo,lk),s(_o,ik),s(Z,pk),s(Z,cn),s(cn,ck),s(Z,hk),s(Z,hn),s(hn,kn),s(kn,Eo),s(Eo,kk),g(c,Pn,d),g(c,os,d),s(os,vn),s(vn,To),s(To,vk),s(os,yk),s(os,ys),s(ys,Ao),s(Ao,dk),s(ys,uk),s(ys,So),s(So,fk),s(ys,xk),s(os,gk),s(os,C),s(C,yn),s(yn,Io),s(Io,mk),s(C,wk),s(C,dn),s(dn,Do),s(Do,_k),s(C,bk),s(C,un),s(un,Co),s(Co,Ek),s(C,Tk),s(C,fn),s(fn,Oo),s(Oo,Ak),s(C,Sk),s(C,xn),s(xn,Po),s(Po,Ik),s(C,Dk),s(C,gn),s(gn,Mo),s(Mo,Ck),Mn=!0},p:Nf,i(c){Mn||(Cu(m.$$.fragment,c),Mn=!0)},o(c){Ou(m.$$.fragment,c),Mn=!1},d(c){Pu(m,c),c&&o(F),c&&o(E),c&&o(wn),c&&o(Ro),c&&o(_n),c&&o(vs),c&&o(bn),c&&o(u),c&&o(En),c&&o(k),c&&o(Tn),c&&o(ss),c&&o(An),c&&o(T),c&&o(Sn),c&&o(O),c&&o(In),c&&o(h),c&&o(Dn),c&&o(b),c&&o(Cn),c&&o(x),c&&o(On),c&&o(j),c&&o(Pn),c&&o(os)}}}function zf(No){let m,F;const E=[No[0],Au];let Ss={$$slots:{default:[Vf]},$$scope:{ctx:No}};for(let w=0;w<E.length;w+=1)Ss=Lk(Ss,E[w]);return m=new jf({props:Ss}),{c(){Su(m.$$.fragment)},l(w){Iu(m.$$.fragment,w)},m(w,V){Du(m,w,V),F=!0},p(w,[V]){const jo=V&1?Mf(E,[V&1&&wu(w[0]),V&0&&wu(Au)]):{};V&2&&(jo.$$scope={dirty:V,ctx:w}),m.$set(jo)},i(w){F||(Cu(m.$$.fragment,w),F=!0)},o(w){Ou(m.$$.fragment,w),F=!1},d(w){Pu(m,w)}}}const Au={title:"Manipulating AST with JavaScript",date:"2019-11-22T08:00:00Z",description:"Manipulating AST is not that hard anyway",tags:["JavaScript","AST","transform","depth-first-search"],series:"AST",label:"blog"};function Jf(No,m,F){return Lf("blog",{image:Ff}),No.$$set=E=>{F(0,m=Lk(Lk({},m),_u(E)))},m=_u(m),[m]}class Kf extends Cf{constructor(m){super();Of(this,m,Jf,zf,Pf,{})}}export{Kf as default,Au as metadata};
