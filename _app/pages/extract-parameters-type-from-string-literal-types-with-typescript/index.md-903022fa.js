import{S as Jg,i as Ug,s as Qg,C as Yu,w as Yg,x as Zg,y as sP,z as aP,A as G1,q as tP,o as eP,B as oP,r as rP,Y as X1,e as t,t as r,k as i,c as e,a as o,h as n,d as a,m as p,b as l,g as m,H as s,J as nP}from"../../chunks/vendor-da4388d4.js";import{B as lP}from"../../chunks/BlogLayout-d479b777.js";import{_ as iP}from"../../chunks/twitter-card-image-a57df29d.js";import"../../chunks/stores-1fad7c36.js";import"../../chunks/ldjson-b0805387.js";/* empty css                                */function pP(it){let y,G,L,Rs,I,R,pt,Cl,Ms,Vl,ct,$l,Ol,Hl,kt,q1=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts" cutLines="1"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const app: &#123;&#10;    get&lt;Path extends string>(path: Path, fn: (req: &#123;&#10;        params: &#123; [Key in PathSegments&lt;Path> as Strip&lt;Key>]: Value&lt;Key>; &#125;;&#10;    &#125;) => void): void;&#10;&#125;' >app</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) get&lt;"/purchase/[shopid]/[itemid]/args/[...args]">(path: "/purchase/[shopid]/[itemid]/args/[...args]", fn: (req: &#123;&#10;    params: &#123;&#10;        shopid: number;&#10;        itemid: number;&#10;        args: string[];&#10;    &#125;;&#10;&#125;) => void): void' >get</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;/purchase/[shopid]/[itemid]/args/[...args]&apos;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (<data-lsp lsp='(parameter) req: &#123;&#10;    params: &#123;&#10;        shopid: number;&#10;        itemid: number;&#10;        args: string[];&#10;    &#125;;&#10;&#125;' >req</data-lsp>) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const params: &#123;&#10;    shopid: number;&#10;    itemid: number;&#10;    args: string[];&#10;&#125;' style='border-bottom: solid 2px lightgrey;'>params</data-lsp></span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) req: &#123;&#10;    params: &#123;&#10;        shopid: number;&#10;        itemid: number;&#10;        args: string[];&#10;    &#125;;&#10;&#125;' >req</data-lsp>;</span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>const params: &#123;
    shopid: number;
    itemid: number;
    args: string[];
&#125;</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;);</span></div><div class='line'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const app: &#123;&#10;    get&lt;Path extends string>(path: Path, fn: (req: &#123;&#10;        params: &#123; [Key in PathSegments&lt;Path> as Strip&lt;Key>]: Value&lt;Key>; &#125;;&#10;    &#125;) => void): void;&#10;&#125;' >app</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) get&lt;"/docs/[chapter]/[section]">(path: "/docs/[chapter]/[section]", fn: (req: &#123;&#10;    params: &#123;&#10;        chapter: number;&#10;        section: number;&#10;    &#125;;&#10;&#125;) => void): void' >get</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;/docs/[chapter]/[section]&apos;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (<data-lsp lsp='(parameter) req: &#123;&#10;    params: &#123;&#10;        chapter: number;&#10;        section: number;&#10;    &#125;;&#10;&#125;' >req</data-lsp>) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const params: &#123;&#10;    chapter: number;&#10;    section: number;&#10;&#125;' style='border-bottom: solid 2px lightgrey;'>params</data-lsp></span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) req: &#123;&#10;    params: &#123;&#10;        chapter: number;&#10;        section: number;&#10;    &#125;;&#10;&#125;' >req</data-lsp>;</span></div><div class='meta-line'><span class='popover-prefix'>           </span><span class='popover'><div class='arrow'></div>const params: &#123;
    chapter: number;
    section: number;
&#125;</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;);</span></div></code></div></pre>`,Fl,br,Er,Ll,Rl,yt,Ns,Ml,ht,Nl,jl,Gl,Xl,js,zl,dt,ql,Wl,Jl,ks,Ul,vt,Ql,Yl,ut,Zl,si,ai,_r,ti,ei,xt,W1=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts" cutLines="1"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const app: &#123;&#10;    get&lt;Path extends string>(path: Path, fn: (req: &#123;&#10;        params: &#123; [Key in PathSegments&lt;Path> as Strip&lt;Key>]: Value&lt;Key>; &#125;;&#10;    &#125;) => void): void;&#10;&#125;' >app</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) get&lt;"/purchase/[shopid]/[itemid]/args/[...args]">(path: "/purchase/[shopid]/[itemid]/args/[...args]", fn: (req: &#123;&#10;    params: &#123;&#10;        shopid: number;&#10;        itemid: number;&#10;        args: string[];&#10;    &#125;;&#10;&#125;) => void): void' >get</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;/purchase/[shopid]/[itemid]/args/[...args]&apos;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (<data-lsp lsp='(parameter) req: &#123;&#10;    params: &#123;&#10;        shopid: number;&#10;        itemid: number;&#10;        args: string[];&#10;    &#125;;&#10;&#125;' >req</data-lsp>) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)"><data-err><data-lsp lsp='const foo: any' >foo</data-lsp></data-err></span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(parameter) req: &#123;&#10;    params: &#123;&#10;        shopid: number;&#10;        itemid: number;&#10;        args: string[];&#10;    &#125;;&#10;&#125;' >req</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) params: &#123;&#10;    shopid: number;&#10;    itemid: number;&#10;    args: string[];&#10;&#125;' >params</data-lsp>;</span></div><span class="error"><span>Property 'foo' does not exist on type '&#123; shopid: number; itemid: number; args: string[]; &#125;'.</span><span class="code">2339</span></span><span class="error-behind">Property 'foo' does not exist on type '&#123; shopid: number; itemid: number; args: string[]; &#125;'.</span><div class='line'><span style="color: var(--shiki-color-text)">&#125;);</span></div></code></div></pre>`,oi,M,ri,Gs,ni,li,mt,ii,pi,Xs,ci,ki,ft,yi,hi,di,gt,J1=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="tsx" cutLines="10"><div class="language-id">tsx</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='function Route&lt;"/user/:username">(&#123;&#125;: &#123;&#10;    path: "/user/:username";&#10;    render: (routeProps: &#123;&#10;        match: &#123;&#10;            params: &#123;&#10;                username: string;&#10;            &#125;;&#10;        &#125;;&#10;    &#125;) => void;&#10;&#125;): JSX.Element' >Route</data-lsp></span></div><div class='line'><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(JSX attribute) path: "/user/:username"' >path</data-lsp></span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">"/user/:username"</span></div><div class='line'><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(JSX attribute) render: (routeProps: &#123;&#10;    match: &#123;&#10;        params: &#123;&#10;            username: string;&#10;        &#125;;&#10;    &#125;;&#10;&#125;) => void' >render</data-lsp></span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">&#123;(<data-lsp lsp='(parameter) routeProps: &#123;&#10;    match: &#123;&#10;        params: &#123;&#10;            username: string;&#10;        &#125;;&#10;    &#125;;&#10;&#125;' >routeProps</data-lsp>) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const params: &#123;&#10;    username: string;&#10;&#125;' style='border-bottom: solid 2px lightgrey;'>params</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(parameter) routeProps: &#123;&#10;    match: &#123;&#10;        params: &#123;&#10;            username: string;&#10;        &#125;;&#10;    &#125;;&#10;&#125;' >routeProps</data-lsp></span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) match: &#123;&#10;    params: &#123;&#10;        username: string;&#10;    &#125;;&#10;&#125;' >match</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) params: &#123;&#10;    username: string;&#10;&#125;' >params</data-lsp>;</span></div><div class='meta-line'><span class='popover-prefix'>          </span><span class='popover'><div class='arrow'></div>const params: &#123;
    username: string;
&#125;</span></div><div class='line'><span style="color: var(--shiki-color-text)">	&#125;&#125;</span></div><div class='line'><span style="color: var(--shiki-color-text)">/&gt;;</span></div></code></div></pre>`,vi,Ar,ui,Ln,bs,Ir,zs,xi,mi,Tr,fi,Rn,u,Sr,qs,gi,Pi,Ws,wi,Pt,bi,Ei,_i,wt,U1=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='let str: string' >str</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;abc&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-color-text)"><data-lsp lsp='let str: string' >str</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;def&apos;</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// no errors, string type can have any value</span></div></code></div></pre>`,Ai,Js,Ii,Us,Ti,Si,Ki,bt,Q1=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='let str: "abc"' >str</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;abc&apos;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;abc&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-color-text)"><data-err><data-lsp lsp='let str: "abc"' >str</data-lsp></data-err> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;def&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><span class="error"><span>Type '"def"' is not assignable to type '"abc"'.</span><span class="code">2322</span></span><span class="error-behind">Type '"def"' is not assignable to type '"abc"'.</span></code></div></pre>`,Bi,Qs,Di,Ys,Ci,Vi,$i,Et,Y1=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function eatSomething(food: &apos;sushi&apos; | &apos;ramen&apos;): void' >eatSomething</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) food: "sushi" | "ramen"' >food</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;sushi&apos;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;ramen&apos;</span><span style="color: var(--shiki-color-text)">) &#123;&#125;</span></div><div class='line'><span style="color: var(--shiki-token-function)"><data-lsp lsp='function eatSomething(food: &apos;sushi&apos; | &apos;ramen&apos;): void' >eatSomething</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;sushi&apos;</span><span style="color: var(--shiki-color-text)">);</span></div><div class='line'><span style="color: var(--shiki-token-function)"><data-lsp lsp='function eatSomething(food: &apos;sushi&apos; | &apos;ramen&apos;): void' >eatSomething</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;ramen&apos;</span><span style="color: var(--shiki-color-text)">);</span></div><div class='line'><span style="color: var(--shiki-token-function)"><data-lsp lsp='function eatSomething(food: &apos;sushi&apos; | &apos;ramen&apos;): void' >eatSomething</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)"><data-err>&apos;pencil&apos;</data-err></span><span style="color: var(--shiki-color-text)">);</span></div><span class="error"><span>Argument of type '"pencil"' is not assignable to parameter of type '"sushi" | "ramen"'.</span><span class="code">2345</span></span><span class="error-behind">Argument of type '"pencil"' is not assignable to parameter of type '"sushi" | "ramen"'.</span><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='let food: ("sushi" | "ramen")[]' >food</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='interface Array&lt;T>' >Array</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;sushi&apos;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;ramen&apos;</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&apos;sushi&apos;</span><span style="color: var(--shiki-color-text)">];</span></div><div class='line'><span style="color: var(--shiki-token-constant)"><data-lsp lsp='let food: ("sushi" | "ramen")[]' >food</data-lsp></span><span style="color: var(--shiki-token-function)">.<data-lsp lsp='(method) Array&lt;"sushi" | "ramen">.push(...items: ("sushi" | "ramen")[]): number' >push</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)"><data-err>&apos;pencil&apos;</data-err></span><span style="color: var(--shiki-color-text)">);</span></div><span class="error"><span>Argument of type '"pencil"' is not assignable to parameter of type '"sushi" | "ramen"'.</span><span class="code">2345</span></span><span class="error-behind">Argument of type '"pencil"' is not assignable to parameter of type '"sushi" | "ramen"'.</span><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='let object: &#123;&#10;    food: &apos;sushi&apos; | &apos;ramen&apos;;&#10;&#125;' >object</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123; <data-lsp lsp='(property) food: "sushi" | "ramen"' >food</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;sushi&apos;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;ramen&apos;</span><span style="color: var(--shiki-color-text)"> &#125;;</span></div><div class='line'><span style="color: var(--shiki-color-text)"><data-lsp lsp='let object: &#123;&#10;    food: &apos;sushi&apos; | &apos;ramen&apos;;&#10;&#125;' >object</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123; <data-lsp lsp='(property) food: "sushi" | "ramen"' >food</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;sushi&apos;</span><span style="color: var(--shiki-color-text)"> &#125;;</span></div><div class='line'><span style="color: var(--shiki-color-text)"><data-lsp lsp='let object: &#123;&#10;    food: &apos;sushi&apos; | &apos;ramen&apos;;&#10;&#125;' >object</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123; <data-err><data-lsp lsp='(property) food: "sushi" | "ramen"' >food</data-lsp></data-err></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;pencil&apos;</span><span style="color: var(--shiki-color-text)"> &#125;;</span></div><span class="error"><span>Type '"pencil"' is not assignable to type '"sushi" | "ramen"'.</span><span class="code">2322</span></span><span class="error-behind">Type '"pencil"' is not assignable to type '"sushi" | "ramen"'.</span></code></div></pre>`,Oi,Kr,Hi,Fi,ys,Li,_t,Ri,Mi,At,Ni,ji,Gi,It,Z1=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const food: "sushi"' style='border-bottom: solid 2px lightgrey;'>food</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;sushi&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>const food: "sushi"</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='let drinks: string' style='border-bottom: solid 2px lightgrey;'>drinks</data-lsp> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;beer&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>let drinks: string</span></div></code></div></pre>`,Xi,Br,zi,qi,Tt,s2=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const object: &#123;&#10;    food: string;&#10;&#125;' style='border-bottom: solid 2px lightgrey;'>object</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123; <data-lsp lsp='(property) food: string' >food</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;sushi&apos;</span><span style="color: var(--shiki-color-text)"> &#125;;</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>const object: &#123;
    food: string;
&#125;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const array: string[]' style='border-bottom: solid 2px lightgrey;'>array</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&apos;sushi&apos;</span><span style="color: var(--shiki-color-text)">];</span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>const array: string[]</span></div></code></div></pre>`,Wi,St,Ji,Es,Kt,Ui,Qi,Yi,Bt,a2=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const object: &#123;&#10;    readonly food: "sushi";&#10;&#125;' style='border-bottom: solid 2px lightgrey;'>object</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123; <data-lsp lsp='(property) food: "sushi"' >food</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;sushi&apos;</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">as</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)"><data-lsp lsp='type const = /*unresolved*/ any' >const</data-lsp></span><span style="color: var(--shiki-color-text)">;</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>const object: &#123;
    readonly food: "sushi";
&#125;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const array: readonly ["sushi"]' style='border-bottom: solid 2px lightgrey;'>array</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&apos;sushi&apos;</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">as</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)"><data-lsp lsp='type const = /*unresolved*/ any' >const</data-lsp></span><span style="color: var(--shiki-color-text)">;</span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>const array: readonly ["sushi"]</span></div></code></div></pre>`,Zi,U,sp,Dt,ap,tp,Ct,ep,op,Vt,rp,np,lp,Dr,ip,Mn,es,Cr,Zs,pp,cp,hs,kp,sa,yp,hp,aa,dp,vp,up,$t,t2=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const a: "a"' >a</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;a&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const b: "b"' >b</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;b&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-token-comment)">// In JavaScript, you can build a new string</span></div><div class='line'><span style="color: var(--shiki-token-comment)">// with template literals</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const c: string' >c</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)"><data-lsp lsp='const a: "a"' >a</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)"><data-lsp lsp='const b: "b"' >b</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// &apos;a b&apos;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type A = "a"' >A</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;a&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type B = "b"' >B</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;b&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-token-comment)">// In TypeScript, you can build a new string literal type</span></div><div class='line'><span style="color: var(--shiki-token-comment)">// with template literals too!</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type C = "a b"' style='border-bottom: solid 2px lightgrey;'>C</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type A = "a"' >A</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type B = "b"' >B</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='meta-line'><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>type C = "a b"</span></div></code></div></pre>`,Nn,B,Vr,ta,xp,mp,O,ea,fp,gp,Ot,Pp,wp,Ht,bp,Ep,Ft,_p,Ap,Lt,Ip,Tp,Sp,Rt,e2=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Collection&lt;X> = X extends "arr" ? number[] : Set&lt;number>' >Collection</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) X in type Collection&lt;X>' >X</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) X in type Collection&lt;X>' >X</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;arr&apos;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">[] </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='interface Set&lt;T>' >Set</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type A = number[]' style='border-bottom: solid 2px lightgrey;'>A</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Collection&lt;X> = X extends "arr" ? number[] : Set&lt;number>' >Collection</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;arr&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>type A = number[]</span></div><div class='line'><span style="color: var(--shiki-token-comment)">// If you pass in something other than &apos;arr&apos;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type B = Set&lt;number>' style='border-bottom: solid 2px lightgrey;'>B</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Collection&lt;X> = X extends "arr" ? number[] : Set&lt;number>' >Collection</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;foo&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>type B = Set&lt;number&gt;</span></div></code></div></pre>`,Kp,N,Bp,Mt,Dp,Cp,Nt,Vp,$p,jt,Op,Hp,Gt,Fp,Lp,Rp,oa,Mp,Xt,Np,jp,Gp,zt,o2=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-comment)">// Here you are testing whether X extends &#96;() =&gt; ???&#96;</span></div><div class='line'><span style="color: var(--shiki-token-comment)">// and let TypeScript to infer the &#96;???&#96; part</span></div><div class='line'><span style="color: var(--shiki-token-comment)">// TypeScript will define a new type called</span></div><div class='line'><span style="color: var(--shiki-token-comment)">// &#96;Value&#96; for the inferred type</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type GetReturnValue&lt;X> = X extends () => infer Value ? Value : never' >GetReturnValue</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) X in type GetReturnValue&lt;X>' >X</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) X in type GetReturnValue&lt;X>' >X</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Value' >Value</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Value' >Value</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">never</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-comment)">// Here we inferred that &#96;Value&#96; is type &#96;string&#96;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type A = string' style='border-bottom: solid 2px lightgrey;'>A</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type GetReturnValue&lt;X> = X extends () => infer Value ? Value : never' >GetReturnValue</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>type A = string</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-comment)">// Here we inferred that &#96;Value&#96; is type &#96;number&#96;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type B = number' style='border-bottom: solid 2px lightgrey;'>B</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type GetReturnValue&lt;X> = X extends () => infer Value ? Value : never' >GetReturnValue</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>type B = number</span></div></code></div></pre>`,jn,h,$r,ra,Xp,zp,ds,qp,na,Wp,Jp,la,Up,Qp,Yp,Or,Zp,sc,Hr,ac,tc,qt,r2=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts" cutLines="2"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function firstElement&lt;Type>(arr: Type[]): Type | undefined' >firstElement</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) arr: any' >arr</data-lsp>) &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) arr: any' >arr</data-lsp>[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">];</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const string: string | undefined' >string</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function firstElement&lt;string>(arr: string[]): string | undefined' >firstElement</data-lsp></span><span style="color: var(--shiki-color-text)">([</span><span style="color: var(--shiki-token-string-expression)">&apos;a&apos;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;b&apos;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;c&apos;</span><span style="color: var(--shiki-color-text)">]);</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const number: number | undefined' >number</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function firstElement&lt;number>(arr: number[]): number | undefined' >firstElement</data-lsp></span><span style="color: var(--shiki-color-text)">([</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">]);</span></div></code></div></pre>`,ec,Fr,oc,rc,Wt,n2=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts" cutLines="7"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function calculate&lt;Op extends string>(operation: Op, data: Data&lt;Op>): number | undefined' >calculate</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) operation: any' >operation</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) data: any' >data</data-lsp>) &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (<data-lsp lsp='(parameter) operation: any' >operation</data-lsp> </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;add&apos;</span><span style="color: var(--shiki-color-text)">) &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(parameter) data: any' >data</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='any' >addend_1</data-lsp> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(parameter) data: any' >data</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='any' >addend_2</data-lsp>;</span></div><div class='line'><span style="color: var(--shiki-color-text)">	&#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (<data-lsp lsp='(parameter) operation: any' >operation</data-lsp> </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;divide&apos;</span><span style="color: var(--shiki-color-text)">) &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(parameter) data: any' >data</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='any' >dividend</data-lsp> </span><span style="color: var(--shiki-token-keyword)">/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(parameter) data: any' >data</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='any' >divisor</data-lsp>;</span></div><div class='line'><span style="color: var(--shiki-color-text)">	&#125;</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-function)"><data-lsp lsp='function calculate&lt;"add">(operation: "add", data: &#123;&#10;    addend_1: number;&#10;    addend_2: number;&#10;&#125;): number | undefined' >calculate</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;add&apos;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; <data-lsp lsp='(property) addend_1: number' >addend_1</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(property) addend_2: number' >addend_2</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)"> &#125;);</span></div><div class='line'><span style="color: var(--shiki-token-function)"><data-lsp lsp='function calculate&lt;"divide">(operation: "divide", data: &#123;&#10;    dividend: number;&#10;    divisor: number;&#10;&#125;): number | undefined' >calculate</data-lsp></span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&apos;divide&apos;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; <data-lsp lsp='(property) dividend: number' >dividend</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">42</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(property) divisor: number' >divisor</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">7</span><span style="color: var(--shiki-color-text)"> &#125;);</span></div></code></div></pre>`,nc,Lr,lc,ic,Rr,pc,cc,Jt,l2=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function firstElement(arr: string[] | number[]): string | number' >firstElement</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) arr: string[] | number[]' >arr</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">[] </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">[])</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) arr: string[] | number[]' >arr</data-lsp>[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">];</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;</span></div></code></div></pre>`,kc,$,yc,Ut,hc,dc,Qt,vc,uc,Yt,xc,mc,Zt,fc,gc,se,Pc,wc,bc,ia,Ec,pa,_c,Ac,Ic,ae,i2=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-comment)">// return string when passed string[]</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function firstElement(arr: string[]): string (+1 overload)' >firstElement</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) arr: string[]' >arr</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">[])</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-token-comment)">// return number when passed number[]</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function firstElement(arr: number[]): number (+1 overload)' >firstElement</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) arr: number[]' >arr</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">[])</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-token-comment)">// then the actual implementation</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function firstElement(arr: string[]): string (+1 overload)' >firstElement</data-lsp></span><span style="color: var(--shiki-color-text)">(<data-lsp lsp='(parameter) arr: any' >arr</data-lsp>) &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) arr: any' >arr</data-lsp>[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">];</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const string: string' style='border-bottom: solid 2px lightgrey;'>string</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function firstElement(arr: string[]): string (+1 overload)' >firstElement</data-lsp></span><span style="color: var(--shiki-color-text)">([</span><span style="color: var(--shiki-token-string-expression)">&apos;a&apos;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;b&apos;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;c&apos;</span><span style="color: var(--shiki-color-text)">]);</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>const string: string</span></div></code></div></pre>`,Tc,Q,Sc,ca,Kc,Bc,Mr,Dc,Cc,Nr,Vc,$c,Oc,te,p2=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-comment)">// Define type parameter &#96;Item&#96; and describe argument and return type in terms of &#96;Item&#96;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function firstElement&lt;Item>(arr: Item[]): Item | undefined' >firstElement</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Item in firstElement&lt;Item>(arr: Item[]): Item | undefined' >Item</data-lsp></span><span style="color: var(--shiki-color-text)">>(<data-lsp lsp='(parameter) arr: Item[]' >arr</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Item in firstElement&lt;Item>(arr: Item[]): Item | undefined' >Item</data-lsp></span><span style="color: var(--shiki-color-text)">[])</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Item in firstElement&lt;Item>(arr: Item[]): Item | undefined' >Item</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">undefined</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) arr: Item[]' >arr</data-lsp>[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">];</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;</span></div></code></div></pre>`,Hc,Y,Fc,ee,Lc,Rc,oe,Mc,Nc,re,jc,Gc,Xc,ne,c2=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts" cutLines="4"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const obj: &#123;&#10;    a: number;&#10;&#125; | undefined' style='border-bottom: solid 2px lightgrey;'>obj</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function firstElement&lt;&#123;&#10;    a: number;&#10;&#125;>(arr: &#123;&#10;    a: number;&#10;&#125;[]): &#123;&#10;    a: number;&#10;&#125; | undefined' >firstElement</data-lsp></span><span style="color: var(--shiki-color-text)">([&#123; <data-lsp lsp='(property) a: number' >a</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; <data-lsp lsp='(property) a: number' >a</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; <data-lsp lsp='(property) a: number' >a</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)"> &#125;]);</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>const obj: &#123;
    a: number;
&#125; | undefined</span></div></code></div></pre>`,zc,jr,qc,Wc,Z,Jc,le,Uc,Qc,ie,Yc,Zc,pe,sk,ak,tk,vs,ek,ce,ok,rk,ke,nk,lk,ik,ye,k2=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-comment)">// &#96;Item&#96; can only be of &#96;string&#96; or &#96;number&#96;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function firstElement&lt;Item extends string | number>(arr: Item[]): Item | undefined' >firstElement</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Item in firstElement&lt;Item extends string | number>(arr: Item[]): Item | undefined' >Item</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">>(<data-lsp lsp='(parameter) arr: Item[]' >arr</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Item in firstElement&lt;Item extends string | number>(arr: Item[]): Item | undefined' >Item</data-lsp></span><span style="color: var(--shiki-color-text)">[])</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Item in firstElement&lt;Item extends string | number>(arr: Item[]): Item | undefined' >Item</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">undefined</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) arr: Item[]' >arr</data-lsp>[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">];</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const number: 1 | 3 | 5 | undefined' >number</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function firstElement&lt;1 | 3 | 5>(arr: (1 | 3 | 5)[]): 1 | 3 | 5 | undefined' >firstElement</data-lsp></span><span style="color: var(--shiki-color-text)">([</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">]);</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const obj: string | number | undefined' >obj</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function firstElement&lt;string | number>(arr: (string | number)[]): string | number | undefined' >firstElement</data-lsp></span><span style="color: var(--shiki-color-text)">([&#123; <data-lsp lsp='(property) a: number' >a</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; <data-lsp lsp='(property) a: number' >a</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; <data-lsp lsp='(property) a: number' >a</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)"> &#125;]);</span></div><span class="error"><span>Type '&#123; a: number; &#125;' is not assignable to type 'string | number'.
  Type '&#123; a: number; &#125;' is not assignable to type 'number'.</br>Type '&#123; a: number; &#125;' is not assignable to type 'string | number'.
  Type '&#123; a: number; &#125;' is not assignable to type 'number'.</br>Type '&#123; a: number; &#125;' is not assignable to type 'string | number'.
  Type '&#123; a: number; &#125;' is not assignable to type 'number'.</span><span class="code">2322<br/>2322<br/>2322</span></span><span class="error-behind">Type '&#123; a: number; &#125;' is not assignable to type 'string | number'.
  Type '&#123; a: number; &#125;' is not assignable to type 'number'.</br>Type '&#123; a: number; &#125;' is not assignable to type 'string | number'.
  Type '&#123; a: number; &#125;' is not assignable to type 'number'.</br>Type '&#123; a: number; &#125;' is not assignable to type 'string | number'.
  Type '&#123; a: number; &#125;' is not assignable to type 'number'.</span></code></div></pre>`,Gn,X,Gr,ka,pk,ck,ya,kk,he,yk,hk,dk,de,y2=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">get</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">Path</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">&gt;(path</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Path</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> callback</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CallbackFn</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">Path</span><span style="color: var(--shiki-color-text)">&gt;)</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">void</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-comment)">// impplementation</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">get</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/docs/[chapter]/[section]/args/[...args]&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (req) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">params</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> req;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,vk,K,uk,ve,xk,mk,ue,fk,gk,xe,Pk,wk,me,bk,Ek,fe,_k,Ak,ge,Ik,Tk,Xn,v,Xr,ha,Sk,Kk,zr,Bk,Dk,Pe,us,Ck,we,Vk,$k,be,Ok,Hk,Fk,Ee,h2='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Path</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;/purchase/[shopid]/[itemid]/args/[...args]&#39;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>',Lk,qr,_e,Rk,da,Mk,Ae,Nk,jk,Gk,Ie,d2='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Parts</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">Path</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;purchase&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;[shopid]&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;[itemid]&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;args&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;[...args]&#39;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>',Xk,Te,Se,zk,va,qk,Ke,Wk,Jk,Uk,Be,v2='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">FilteredParts</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">Path</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;[shopid]&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;[itemid]&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;[...args]&#39;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>',Qk,De,Ce,Yk,ua,Zk,Ve,sy,ay,ty,$e,u2='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">FilteredParts</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">Path</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;shopid&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;itemid&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;...args&#39;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>',ey,Oe,_s,oy,xa,ry,ny,ma,ly,He,iy,py,cy,Fe,x2=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Params</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">Path</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	shopid</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">any</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	itemid</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">any</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-string-expression)">&#39;...args&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">any</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,ky,Le,As,yy,fa,hy,dy,ga,vy,Re,uy,xy,my,Me,m2=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Params</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">Path</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	shopid</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	itemid</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-string-expression)">&#39;...args&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">[];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,fy,Ne,os,gy,je,Py,wy,Ge,by,Ey,Pa,_y,Xe,Ay,Iy,Ty,ze,f2=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Params</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">Path</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	shopid</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	itemid</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	args</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">[];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,Sy,qe,Wr,Ky,By,We,g2='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CallbackFn</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">Path</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (req</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123; params</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Params</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)">Path</span><span style="color: var(--shiki-color-text)">&gt; &#125;) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">void</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>',zn,f,Jr,wa,Dy,Cy,ba,Vy,Je,$y,Oy,Hy,Ue,P2=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Parts&lt;Path> = Path extends "a/b" ? "a" | "b" : never' >Parts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type Parts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type Parts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;a/b&#96;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;a&apos;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;b&apos;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">never</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type AB = "a" | "b"' style='border-bottom: solid 2px lightgrey;'>AB</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Parts&lt;Path> = Path extends "a/b" ? "a" | "b" : never' >Parts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;a/b&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type AB = "a" | "b"</span></div></code></div></pre>`,Fy,Ur,Ly,Ry,Qe,w2=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CD</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Parts</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&#39;c/d&#39;</span><span style="color: var(--shiki-color-text)">&gt;;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">EF</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Parts</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&#39;e/f&#39;</span><span style="color: var(--shiki-color-text)">&gt;;</span></span></code></pre>`,My,Ea,Ny,Ye,jy,Gy,Xy,Ze,b2=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Parts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? PartA | PartB : never' >Parts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type Parts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type Parts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartA' >PartA</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">/</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartB' >PartB</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartA' >PartA</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartB' >PartB</data-lsp></span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">never</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type AB = "a" | "b"' style='border-bottom: solid 2px lightgrey;'>AB</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Parts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? PartA | PartB : never' >Parts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;a/b&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type AB = "a" | "b"</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type CD = "c" | "d"' style='border-bottom: solid 2px lightgrey;'>CD</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Parts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? PartA | PartB : never' >Parts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;c/d&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type CD = "c" | "d"</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type EFGH = "ef" | "gh"' style='border-bottom: solid 2px lightgrey;'>EFGH</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Parts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? PartA | PartB : never' >Parts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;ef/gh&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>type EFGH = "ef" | "gh"</span></div></code></div></pre>`,zy,xs,qy,so,Wy,Jy,ao,Uy,Qy,Yy,to,E2=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Parts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? PartA | PartB : Path' >Parts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type Parts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type Parts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartA' >PartA</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">/</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartB' >PartB</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartA' >PartA</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartB' >PartB</data-lsp></span></div><div class='line highlight'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type Parts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">;</span></div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type A = "a"' style='border-bottom: solid 2px lightgrey;'>A</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Parts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? PartA | PartB : Path' >Parts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;a&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>type A = "a"</span></div></code></div></pre>`,Zy,ms,sh,eo,ah,th,oo,eh,oh,rh,ro,_2=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts" cutLines="2"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ABCD = "a" | "b/c/d"' style='border-bottom: solid 2px lightgrey;'>ABCD</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Parts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? PartA | PartB : Path' >Parts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;a/b/c/d&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>type ABCD = "a" | "b/c/d"</span></div><div class='line'><span style="color: var(--shiki-token-comment)">// type PartA = &apos;a&apos;;</span></div><div class='line'><span style="color: var(--shiki-token-comment)">// type PartB = &apos;b/c/d&apos;;</span></div></code></div></pre>`,nh,ss,lh,no,ih,ph,lo,ch,kh,io,yh,hh,dh,po,A2=`<div class="filename">Step 1: Parts&lt;Path&gt;</div><div class="copy" data-copy="type Parts&lt;Path&gt; = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96;
  ? PartA | Parts&lt;PartB&gt;
  : Path;

type ABCD = Parts&lt;&#39;a/b/c/d&#39;&gt;;"><svg viewBox="64 64 896 896" focusable="false" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"></path></svg></div><pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts" filename="Step 1: Parts<Path>" copy="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Parts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? PartA | Parts&lt;PartB> : Path' >Parts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type Parts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type Parts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartA' >PartA</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">/</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartB' >PartB</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></div><div class='line highlight'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartA' >PartA</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Parts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? PartA | Parts&lt;PartB> : Path' >Parts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartB' >PartB</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type Parts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">;</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ABCD = "a" | "b" | "c" | "d"' style='border-bottom: solid 2px lightgrey;'>ABCD</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Parts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? PartA | Parts&lt;PartB> : Path' >Parts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;a/b/c/d&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>type ABCD = "a" | "b" | "c" | "d"</span></div></code></div></pre>`,vh,Qr,uh,xh,co,I2=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Parts</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&#39;a/b/c/d&#39;</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;a&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Parts</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&#39;b/c/d&#39;</span><span style="color: var(--shiki-color-text)">&gt;;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Parts</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&#39;a/b/c/d&#39;</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;a&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;b&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Parts</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&#39;c/d&#39;</span><span style="color: var(--shiki-color-text)">&gt;;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Parts</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&#39;a/b/c/d&#39;</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;a&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;b&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;c&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Parts</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&#39;d&#39;</span><span style="color: var(--shiki-color-text)">&gt;;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Parts</span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&#39;a/b/c/d&#39;</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;a&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;b&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;c&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;d&#39;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`,qn,g,Yr,_a,mh,fh,Aa,gh,fs,Ph,Ia,wh,bh,ko,Eh,_h,Ah,Ih,yo,T2=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type A = "a"' style='border-bottom: solid 2px lightgrey;'>A</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;a&apos;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">never</span><span style="color: var(--shiki-color-text)">;</span></div><div class='meta-line'><span class='popover-prefix'>    </span><span class='popover'><div class='arrow'></div>type A = "a"</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Obj = &#123;&#10;    a: 1;&#10;&#125;' style='border-bottom: solid 2px lightgrey;'>Obj</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123; <data-lsp lsp='(property) a: 1' >a</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">never</span><span style="color: var(--shiki-color-text)">;</span></div><div class='meta-line'><span class='popover-prefix'>     </span><span class='popover'><div class='arrow'></div>type Obj = &#123;
    a: 1;
&#125;</span></div></code></div></pre>`,Th,Zr,Sh,Kh,ho,S2='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-string-expression)">&#39;purchase&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;[shopid]&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;[itemid]&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;args&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;[...args]&#39;</span></span></code></pre>',Bh,sn,Dh,Ch,vo,K2='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">never </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;[shopid]&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;[itemid]&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> never </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;[...args]&#39;</span></span></code></pre>',Vh,an,$h,Oh,uo,B2='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-string-expression)">&#39;[shopid]&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;[itemid]&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;[...args]&#39;</span></span></code></pre>',Hh,tn,Fh,Lh,j,Rh,xo,Mh,Nh,mo,jh,Gh,fo,Xh,zh,go,qh,Wh,Jh,Po,D2=`<div class="filename">IsParameter&lt;Part&gt;</div><div class="copy" data-copy="type IsParameter&lt;Part&gt; = Part extends &#96;[$&#123;infer Anything&#125;]&#96; ? Part : never;
type Purchase = IsParameter&lt;&#39;purchase&#39;&gt;;
type ShopId = IsParameter&lt;&#39;[shopid]&#39;&gt;;
type ItemId = IsParameter&lt;&#39;[itemid]&#39;&gt;;
type Args = IsParameter&lt;&#39;args&#39;&gt;;
type Args2 = IsParameter&lt;&#39;[...args]&#39;&gt;;"><svg viewBox="64 64 896 896" focusable="false" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"></path></svg></div><pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts" copy="true" filename="IsParameter<Part>"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer Anything&#125;]&#96; ? Part : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Part in type IsParameter&lt;Part>' >Part</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Part in type IsParameter&lt;Part>' >Part</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;[</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Anything' >Anything</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">]&#96;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Part in type IsParameter&lt;Part>' >Part</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">never</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Purchase = never' style='border-bottom: solid 2px lightgrey;'>Purchase</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer Anything&#125;]&#96; ? Part : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;purchase&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>type Purchase = never</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ShopId = "[shopid]"' style='border-bottom: solid 2px lightgrey;'>ShopId</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer Anything&#125;]&#96; ? Part : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;[shopid]&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>type ShopId = "[shopid]"</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ItemId = "[itemid]"' style='border-bottom: solid 2px lightgrey;'>ItemId</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer Anything&#125;]&#96; ? Part : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;[itemid]&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>type ItemId = "[itemid]"</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Args = never' style='border-bottom: solid 2px lightgrey;'>Args</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer Anything&#125;]&#96; ? Part : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;args&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>type Args = never</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Args2 = "[...args]"' style='border-bottom: solid 2px lightgrey;'>Args2</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer Anything&#125;]&#96; ? Part : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;[...args]&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>type Args2 = "[...args]"</span></div></code></div></pre>`,Uh,Ta,Qh,wo,Yh,Zh,sd,en,ad,td,bo,C2=`<div class="filename">Step 2: FilteredParts&lt;Path&gt;</div><div class="copy" data-copy="type IsParameter&lt;Part&gt; = Part extends &#96;[$&#123;infer Anything&#125;]&#96; ? Part : never;
type FilteredParts&lt;Path&gt; = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96;
  ? IsParameter&lt;PartA&gt; | FilteredParts&lt;PartB&gt;
  : IsParameter&lt;Path&gt;;

type Params = FilteredParts&lt;&#39;/purchase/[shopid]/[itemid]/args/[...args]&#39;&gt;;"><svg viewBox="64 64 896 896" focusable="false" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"></path></svg></div><pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts" filename="Step 2: FilteredParts<Path>" copy="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line highlight'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer Anything&#125;]&#96; ? Part : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Part in type IsParameter&lt;Part>' >Part</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Part in type IsParameter&lt;Part>' >Part</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;[</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Anything' >Anything</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">]&#96;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Part in type IsParameter&lt;Part>' >Part</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">never</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type FilteredParts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? IsParameter&lt;PartA> | FilteredParts&lt;PartB> : IsParameter&lt;Path>' >FilteredParts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type FilteredParts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type FilteredParts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartA' >PartA</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">/</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartB' >PartB</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></div><div class='line highlight'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer Anything&#125;]&#96; ? Part : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartA' >PartA</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type FilteredParts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? IsParameter&lt;PartA> | FilteredParts&lt;PartB> : IsParameter&lt;Path>' >FilteredParts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartB' >PartB</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;</span></div><div class='line highlight'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer Anything&#125;]&#96; ? Part : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type FilteredParts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Params = "[shopid]" | "[itemid]" | "[...args]"' style='border-bottom: solid 2px lightgrey;'>Params</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type FilteredParts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? IsParameter&lt;PartA> | FilteredParts&lt;PartB> : IsParameter&lt;Path>' >FilteredParts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;/purchase/[shopid]/[itemid]/args/[...args]&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>type Params = "[shopid]" | "[itemid]" | "[...args]"</span></div></code></div></pre>`,Wn,H,on,Sa,ed,od,rn,rd,nd,Is,ld,Ka,id,pd,nn,cd,kd,Ts,yd,Eo,hd,dd,_o,vd,ud,Ao,V2=`<div class="filename">Step 3: ParamsWithoutBracket</div><div class="copy" data-copy="type IsParameter&lt;Part&gt; = Part extends &#96;[$&#123;infer ParamName&#125;]&#96; ? ParamName : never;
type FilteredParts&lt;Path&gt; = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96;
  ? IsParameter&lt;PartA&gt; | FilteredParts&lt;PartB&gt;
  : IsParameter&lt;Path&gt;;

type ParamsWithoutBracket = FilteredParts&lt;&#39;/purchase/[shopid]/[itemid]/args/[...args]&#39;&gt;;"><svg viewBox="64 64 896 896" focusable="false" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"></path></svg></div><pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts" filename="Step 3: ParamsWithoutBracket" copy="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line highlight'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer ParamName&#125;]&#96; ? ParamName : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Part in type IsParameter&lt;Part>' >Part</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Part in type IsParameter&lt;Part>' >Part</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;[</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) ParamName' >ParamName</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">]&#96;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) ParamName' >ParamName</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">never</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type FilteredParts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? IsParameter&lt;PartA> | FilteredParts&lt;PartB> : IsParameter&lt;Path>' >FilteredParts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type FilteredParts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type FilteredParts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartA' >PartA</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">/</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartB' >PartB</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer ParamName&#125;]&#96; ? ParamName : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartA' >PartA</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type FilteredParts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? IsParameter&lt;PartA> | FilteredParts&lt;PartB> : IsParameter&lt;Path>' >FilteredParts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartB' >PartB</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer ParamName&#125;]&#96; ? ParamName : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type FilteredParts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamsWithoutBracket = "shopid" | "itemid" | "...args"' >ParamsWithoutBracket</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type FilteredParts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? IsParameter&lt;PartA> | FilteredParts&lt;PartB> : IsParameter&lt;Path>' >FilteredParts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;/purchase/[shopid]/[itemid]/args/[...args]&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div></code></div></pre>`,Jn,A,ln,Ba,xd,md,Da,fd,Ca,gd,Pd,wd,pn,bd,Ed,Io,$2=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Params = &#123;&#10;    shopid: any;&#10;    itemid: any;&#10;    &apos;...args&apos;: any;&#10;&#125;' >Params</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  <data-lsp lsp='(property) shopid: any' >shopid</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">any</span><span style="color: var(--shiki-token-punctuation)">,</span></div><div class='line'><span style="color: var(--shiki-color-text)">  <data-lsp lsp='(property) itemid: any' >itemid</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">any</span><span style="color: var(--shiki-token-punctuation)">,</span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&apos;...args&apos;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">any</span><span style="color: var(--shiki-token-punctuation)">,</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;;</span></div></code></div></pre>`,_d,Va,Ad,$a,Id,Td,Sd,To,O2=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Params = &#123;&#10;    [key: string]: any;&#10;&#125;' >Params</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  [<data-lsp lsp='(parameter) key: string' >key</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">any</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const params: Params' >params</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Params = &#123;&#10;    [key: string]: any;&#10;&#125;' >Params</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123; <data-lsp lsp='(property) a: number' >a</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(property) b: number' >b</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(property) shopid: number' >shopid</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)"> &#125;;</span></div></code></div></pre>`,Kd,Oa,Bd,Ha,Dd,Cd,Vd,So,H2=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Params&lt;Keys extends string> = &#123; [Key in Keys]: any; &#125;' >Params</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Keys in type Params&lt;Keys extends string>' >Keys</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  [</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key' >Key</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Keys in type Params&lt;Keys extends string>' >Keys</data-lsp></span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">any</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const params: Params&lt;"shopid" | "itemid" | "...args">' >params</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Params&lt;Keys extends string> = &#123; [Key in Keys]: any; &#125;' >Params</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;shopid&apos;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;itemid&apos;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;...args&apos;</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  <data-lsp lsp='(property) shopid: any' >shopid</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-token-punctuation)">,</span></div><div class='line'><span style="color: var(--shiki-color-text)">  <data-lsp lsp='(property) itemid: any' >itemid</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&apos;...args&apos;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">4</span><span style="color: var(--shiki-token-punctuation)">,</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const incorrect_keys: Params&lt;"shopid" | "itemid" | "...args">' >incorrect_keys</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Params&lt;Keys extends string> = &#123; [Key in Keys]: any; &#125;' >Params</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;shopid&apos;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;itemid&apos;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;...args&apos;</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  <data-lsp lsp='(property) a: number' >a</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span></div><span class="error"><span>Type '&#123; a: number; b: number; shopid: number; &#125;' is not assignable to type 'Params&lt;"shopid" | "itemid" | "...args"&gt;'.
  Object literal may only specify known properties, and 'a' does not exist in type 'Params&lt;"shopid" | "itemid" | "...args"&gt;'.</span><span class="code">2322</span></span><span class="error-behind">Type '&#123; a: number; b: number; shopid: number; &#125;' is not assignable to type 'Params&lt;"shopid" | "itemid" | "...args"&gt;'.
  Object literal may only specify known properties, and 'a' does not exist in type 'Params&lt;"shopid" | "itemid" | "...args"&gt;'.</span><div class='line'><span style="color: var(--shiki-color-text)">  <data-lsp lsp='(property) b: number' >b</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-token-punctuation)">,</span></div><div class='line'><span style="color: var(--shiki-color-text)">  <data-lsp lsp='(property) shopid: any' >shopid</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-token-punctuation)">,</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;;</span></div></code></div></pre>`,$d,cn,Od,Hd,Ko,F2=`<div class="filename">Step 4: Params&lt;Path&gt;</div><div class="copy" data-copy="type IsParameter&lt;Part&gt; = Part extends &#96;[$&#123;infer ParamName&#125;]&#96; ? ParamName : never;
type FilteredParts&lt;Path&gt; = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96;
  ? IsParameter&lt;PartA&gt; | FilteredParts&lt;PartB&gt;
  : IsParameter&lt;Path&gt;;
type Params&lt;Path&gt; = &#123;
  [Key in FilteredParts&lt;Path&gt;]: any;
&#125;;

type ParamObject = Params&lt;&#39;/purchase/[shopid]/[itemid]/args/[...args]&#39;&gt;;"><svg viewBox="64 64 896 896" focusable="false" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"></path></svg></div><pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts" filename="Step 4: Params<Path>" copy="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer ParamName&#125;]&#96; ? ParamName : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Part in type IsParameter&lt;Part>' >Part</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Part in type IsParameter&lt;Part>' >Part</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;[</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) ParamName' >ParamName</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">]&#96;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) ParamName' >ParamName</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">never</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type FilteredParts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? IsParameter&lt;PartA> | FilteredParts&lt;PartB> : IsParameter&lt;Path>' >FilteredParts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type FilteredParts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type FilteredParts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartA' >PartA</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">/</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartB' >PartB</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer ParamName&#125;]&#96; ? ParamName : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartA' >PartA</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type FilteredParts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? IsParameter&lt;PartA> | FilteredParts&lt;PartB> : IsParameter&lt;Path>' >FilteredParts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartB' >PartB</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer ParamName&#125;]&#96; ? ParamName : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type FilteredParts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='line highlight'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Params&lt;Path> = &#123; [Key in FilteredParts&lt;Path>]: any; &#125;' >Params</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type Params&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line highlight'><span style="color: var(--shiki-color-text)">  [</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key' >Key</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type FilteredParts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? IsParameter&lt;PartA> | FilteredParts&lt;PartB> : IsParameter&lt;Path>' >FilteredParts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type Params&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;]</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">any</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line highlight'><span style="color: var(--shiki-color-text)">&#125;;</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamObject = &#123;&#10;    shopid: any;&#10;    itemid: any;&#10;    "...args": any;&#10;&#125;' style='border-bottom: solid 2px lightgrey;'>ParamObject</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Params&lt;Path> = &#123; [Key in FilteredParts&lt;Path>]: any; &#125;' >Params</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;/purchase/[shopid]/[itemid]/args/[...args]&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>         </span><span class='popover'><div class='arrow'></div>type ParamObject = &#123;
    shopid: any;
    itemid: any;
    "...args": any;
&#125;</span></div></code></div></pre>`,Un,P,kn,Fa,Fd,Ld,yn,Rd,Md,La,Ss,Nd,Bo,jd,Gd,Do,Xd,Co,zd,qd,Vo,Wd,$o,Jd,Oo,Ud,Qd,Ra,Yd,Ho,Zd,sv,av,hn,tv,ev,Fo,L2=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamValue&lt;Key> = Key extends &#96;...$&#123;infer Anything&#125;&#96; ? string[] : number' >ParamValue</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key in type ParamValue&lt;Key>' >Key</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key in type ParamValue&lt;Key>' >Key</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;...</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Anything' >Anything</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">[] </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ShopIdValue = number' style='border-bottom: solid 2px lightgrey;'>ShopIdValue</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamValue&lt;Key> = Key extends &#96;...$&#123;infer Anything&#125;&#96; ? string[] : number' >ParamValue</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;shopid&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>         </span><span class='popover'><div class='arrow'></div>type ShopIdValue = number</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ArgValue = string[]' style='border-bottom: solid 2px lightgrey;'>ArgValue</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamValue&lt;Key> = Key extends &#96;...$&#123;infer Anything&#125;&#96; ? string[] : number' >ParamValue</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;...args&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>        </span><span class='popover'><div class='arrow'></div>type ArgValue = string[]</span></div></code></div></pre>`,ov,Ma,rv,Lo,nv,lv,iv,gs,pv,Ro,cv,kv,Mo,yv,hv,dv,dn,vv,uv,No,R2=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts" cutLines="2"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Params&lt;Parts extends string> = &#123; [Key in Parts]: ParamValue&lt;Key>; &#125;' >Params</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Parts in type Params&lt;Parts extends string>' >Parts</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  [</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key' >Key</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Parts in type Params&lt;Parts extends string>' >Parts</data-lsp></span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamValue&lt;Key> = Key extends &#96;...$&#123;infer Anything&#125;&#96; ? string[] : number' >ParamValue</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key' >Key</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamObject = &#123;&#10;    shopid: number;&#10;    itemid: number;&#10;    "...args": string[];&#10;&#125;' >ParamObject</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Params&lt;Parts extends string> = &#123; [Key in Parts]: ParamValue&lt;Key>; &#125;' >Params</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;shopid&apos;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;itemid&apos;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;...args&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div></code></div></pre>`,xv,vn,mv,fv,jo,M2=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts" cutLines="2"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Params = &#123;&#10;    shopid: ParamValue&lt;&apos;shopid&apos;>;&#10;    itemid: ParamValue&lt;&apos;itemid&apos;>;&#10;    &apos;...args&apos;: ParamValue&lt;&apos;...args&apos;>;&#10;&#125;' >Params</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&apos;shopid&apos;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamValue&lt;Key> = Key extends &#96;...$&#123;infer Anything&#125;&#96; ? string[] : number' >ParamValue</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;shopid&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&apos;itemid&apos;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamValue&lt;Key> = Key extends &#96;...$&#123;infer Anything&#125;&#96; ? string[] : number' >ParamValue</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;itemid&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&apos;...args&apos;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamValue&lt;Key> = Key extends &#96;...$&#123;infer Anything&#125;&#96; ? string[] : number' >ParamValue</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;...args&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;;</span></div></code></div></pre>`,gv,un,Pv,wv,Go,N2=`<div class="filename">Step 5: Params&lt;Path&gt;</div><div class="copy" data-copy="type IsParameter&lt;Part&gt; = Part extends &#96;[$&#123;infer ParamName&#125;]&#96; ? ParamName : never;
type FilteredParts&lt;Path&gt; = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96;
  ? IsParameter&lt;PartA&gt; | FilteredParts&lt;PartB&gt;
  : IsParameter&lt;Path&gt;;
type ParamValue&lt;Key&gt; = Key extends &#96;...$&#123;infer Anything&#125;&#96; ? string[] : number;
type Params&lt;Path&gt; = &#123;
  [Key in FilteredParts&lt;Path&gt;]: ParamValue&lt;Key&gt;;
&#125;;

type ParamObject = Params&lt;&#39;/purchase/[shopid]/[itemid]/args/[...args]&#39;&gt;;"><svg viewBox="64 64 896 896" focusable="false" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"></path></svg></div><pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts" filename="Step 5: Params<Path>" copy="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer ParamName&#125;]&#96; ? ParamName : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Part in type IsParameter&lt;Part>' >Part</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Part in type IsParameter&lt;Part>' >Part</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;[</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) ParamName' >ParamName</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">]&#96;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) ParamName' >ParamName</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">never</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type FilteredParts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? IsParameter&lt;PartA> | FilteredParts&lt;PartB> : IsParameter&lt;Path>' >FilteredParts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type FilteredParts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type FilteredParts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartA' >PartA</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">/</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartB' >PartB</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer ParamName&#125;]&#96; ? ParamName : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartA' >PartA</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type FilteredParts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? IsParameter&lt;PartA> | FilteredParts&lt;PartB> : IsParameter&lt;Path>' >FilteredParts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartB' >PartB</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer ParamName&#125;]&#96; ? ParamName : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type FilteredParts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='line highlight'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamValue&lt;Key> = Key extends &#96;...$&#123;infer Anything&#125;&#96; ? string[] : number' >ParamValue</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key in type ParamValue&lt;Key>' >Key</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key in type ParamValue&lt;Key>' >Key</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;...</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Anything' >Anything</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">[] </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Params&lt;Path> = &#123; [Key in FilteredParts&lt;Path>]: ParamValue&lt;Key>; &#125;' >Params</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type Params&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line highlight'><span style="color: var(--shiki-color-text)">  [</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key' >Key</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type FilteredParts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? IsParameter&lt;PartA> | FilteredParts&lt;PartB> : IsParameter&lt;Path>' >FilteredParts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type Params&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;]</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamValue&lt;Key> = Key extends &#96;...$&#123;infer Anything&#125;&#96; ? string[] : number' >ParamValue</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key' >Key</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">&#125;;</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamObject = &#123;&#10;    shopid: number;&#10;    itemid: number;&#10;    "...args": string[];&#10;&#125;' style='border-bottom: solid 2px lightgrey;'>ParamObject</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Params&lt;Path> = &#123; [Key in FilteredParts&lt;Path>]: ParamValue&lt;Key>; &#125;' >Params</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;/purchase/[shopid]/[itemid]/args/[...args]&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>         </span><span class='popover'><div class='arrow'></div>type ParamObject = &#123;
    shopid: number;
    itemid: number;
    "...args": string[];
&#125;</span></div></code></div></pre>`,Qn,D,xn,Ks,bv,Xo,Ev,_v,as,Av,zo,Iv,Tv,qo,Sv,Kv,Wo,Bv,Dv,Cv,Jo,j2=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type RemovePrefixDots&lt;Key> = Key extends &#96;...$&#123;infer Name&#125;&#96; ? Name : Key' >RemovePrefixDots</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key in type RemovePrefixDots&lt;Key>' >Key</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key in type RemovePrefixDots&lt;Key>' >Key</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;...</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Name' >Name</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Name' >Name</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key in type RemovePrefixDots&lt;Key>' >Key</data-lsp></span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Args = "args"' style='border-bottom: solid 2px lightgrey;'>Args</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type RemovePrefixDots&lt;Key> = Key extends &#96;...$&#123;infer Name&#125;&#96; ? Name : Key' >RemovePrefixDots</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;...args&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>      </span><span class='popover'><div class='arrow'></div>type Args = "args"</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ShopId = "shopid"' style='border-bottom: solid 2px lightgrey;'>ShopId</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type RemovePrefixDots&lt;Key> = Key extends &#96;...$&#123;infer Name&#125;&#96; ? Name : Key' >RemovePrefixDots</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;shopid&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>       </span><span class='popover'><div class='arrow'></div>type ShopId = "shopid"</span></div></code></div></pre>`,Vv,Na,$v,Bs,Ov,Uo,Hv,Fv,Lv,Qo,G2=`<div class="filename">Step 7: Params&lt;Path&gt;</div><div class="copy" data-copy="type IsParameter&lt;Part&gt; = Part extends &#96;[$&#123;infer ParamName&#125;]&#96; ? ParamName : never;
type FilteredParts&lt;Path&gt; = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96;
  ? IsParameter&lt;PartA&gt; | FilteredParts&lt;PartB&gt;
  : IsParameter&lt;Path&gt;;
type ParamValue&lt;Key&gt; = Key extends &#96;...$&#123;infer Anything&#125;&#96; ? string[] : number;
type RemovePrefixDots&lt;Key&gt; = Key extends &#96;...$&#123;infer Name&#125;&#96; ? Name : Key;
type Params&lt;Path&gt; = &#123;
  [Key in FilteredParts&lt;Path&gt; as RemovePrefixDots&lt;Key&gt;]: ParamValue&lt;Key&gt;;
&#125;;

type ParamObject = Params&lt;&#39;/purchase/[shopid]/[itemid]/args/[...args]&#39;&gt;;"><svg viewBox="64 64 896 896" focusable="false" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"></path></svg></div><pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts" filename="Step 7: Params<Path>" copy="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer ParamName&#125;]&#96; ? ParamName : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Part in type IsParameter&lt;Part>' >Part</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Part in type IsParameter&lt;Part>' >Part</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;[</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) ParamName' >ParamName</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">]&#96;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) ParamName' >ParamName</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">never</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type FilteredParts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? IsParameter&lt;PartA> | FilteredParts&lt;PartB> : IsParameter&lt;Path>' >FilteredParts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type FilteredParts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type FilteredParts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartA' >PartA</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">/</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartB' >PartB</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer ParamName&#125;]&#96; ? ParamName : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartA' >PartA</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type FilteredParts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? IsParameter&lt;PartA> | FilteredParts&lt;PartB> : IsParameter&lt;Path>' >FilteredParts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartB' >PartB</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer ParamName&#125;]&#96; ? ParamName : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type FilteredParts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamValue&lt;Key> = Key extends &#96;...$&#123;infer Anything&#125;&#96; ? string[] : number' >ParamValue</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key in type ParamValue&lt;Key>' >Key</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key in type ParamValue&lt;Key>' >Key</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;...</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Anything' >Anything</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">[] </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type RemovePrefixDots&lt;Key> = Key extends &#96;...$&#123;infer Name&#125;&#96; ? Name : Key' >RemovePrefixDots</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key in type RemovePrefixDots&lt;Key>' >Key</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key in type RemovePrefixDots&lt;Key>' >Key</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;...</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Name' >Name</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Name' >Name</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key in type RemovePrefixDots&lt;Key>' >Key</data-lsp></span><span style="color: var(--shiki-color-text)">;</span></div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Params&lt;Path> = &#123; [Key in FilteredParts&lt;Path> as RemovePrefixDots&lt;Key>]: ParamValue&lt;Key>; &#125;' >Params</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type Params&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line highlight'><span style="color: var(--shiki-color-text)">  [</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key' >Key</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type FilteredParts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? IsParameter&lt;PartA> | FilteredParts&lt;PartB> : IsParameter&lt;Path>' >FilteredParts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type Params&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">as</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type RemovePrefixDots&lt;Key> = Key extends &#96;...$&#123;infer Name&#125;&#96; ? Name : Key' >RemovePrefixDots</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key' >Key</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;]</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamValue&lt;Key> = Key extends &#96;...$&#123;infer Anything&#125;&#96; ? string[] : number' >ParamValue</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key' >Key</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">&#125;;</span></div><div class='line dim'>&nbsp;</div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamObject = &#123;&#10;    shopid: number;&#10;    itemid: number;&#10;    args: string[];&#10;&#125;' style='border-bottom: solid 2px lightgrey;'>ParamObject</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Params&lt;Path> = &#123; [Key in FilteredParts&lt;Path> as RemovePrefixDots&lt;Key>]: ParamValue&lt;Key>; &#125;' >Params</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;/purchase/[shopid]/[itemid]/args/[...args]&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>         </span><span class='popover'><div class='arrow'></div>type ParamObject = &#123;
    shopid: number;
    itemid: number;
    args: string[];
&#125;</span></div></code></div></pre>`,Rv,mn,Mv,Yn,rs,fn,ja,Nv,jv,Ga,Gv,Yo,Xv,zv,qv,Zo,X2=`<div class="filename">Solution</div><div class="copy" data-copy="type IsParameter&lt;Part&gt; = Part extends &#96;[$&#123;infer ParamName&#125;]&#96; ? ParamName : never;
type FilteredParts&lt;Path&gt; = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96;
  ? IsParameter&lt;PartA&gt; | FilteredParts&lt;PartB&gt;
  : IsParameter&lt;Path&gt;;
type ParamValue&lt;Key&gt; = Key extends &#96;...$&#123;infer Anything&#125;&#96; ? string[] : number;
type RemovePrefixDots&lt;Key&gt; = Key extends &#96;...$&#123;infer Name&#125;&#96; ? Name : Key;
type Params&lt;Path&gt; = &#123;
  [Key in FilteredParts&lt;Path&gt; as RemovePrefixDots&lt;Key&gt;]: ParamValue&lt;Key&gt;;
&#125;;
type CallbackFn&lt;Path&gt; = (req: &#123; params: Params&lt;Path&gt; &#125;) =&gt; void;

function get&lt;Path extends string&gt;(path: Path, callback: CallbackFn&lt;Path&gt;) &#123;
	// TODO: implement
&#125;"><svg viewBox="64 64 896 896" focusable="false" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"></path></svg></div><pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts" filename="Solution" copy="true"><div class="language-id">ts</div><div class='code-container'><code><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer ParamName&#125;]&#96; ? ParamName : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Part in type IsParameter&lt;Part>' >Part</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Part in type IsParameter&lt;Part>' >Part</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;[</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) ParamName' >ParamName</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">]&#96;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) ParamName' >ParamName</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">never</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type FilteredParts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? IsParameter&lt;PartA> | FilteredParts&lt;PartB> : IsParameter&lt;Path>' >FilteredParts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type FilteredParts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type FilteredParts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartA' >PartA</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">/</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartB' >PartB</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer ParamName&#125;]&#96; ? ParamName : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartA' >PartA</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type FilteredParts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? IsParameter&lt;PartA> | FilteredParts&lt;PartB> : IsParameter&lt;Path>' >FilteredParts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) PartB' >PartB</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type IsParameter&lt;Part> = Part extends &#96;[$&#123;infer ParamName&#125;]&#96; ? ParamName : never' >IsParameter</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type FilteredParts&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamValue&lt;Key> = Key extends &#96;...$&#123;infer Anything&#125;&#96; ? string[] : number' >ParamValue</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key in type ParamValue&lt;Key>' >Key</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key in type ParamValue&lt;Key>' >Key</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;...</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Anything' >Anything</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">[] </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">number</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type RemovePrefixDots&lt;Key> = Key extends &#96;...$&#123;infer Name&#125;&#96; ? Name : Key' >RemovePrefixDots</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key in type RemovePrefixDots&lt;Key>' >Key</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key in type RemovePrefixDots&lt;Key>' >Key</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;...</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Name' >Name</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Name' >Name</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key in type RemovePrefixDots&lt;Key>' >Key</data-lsp></span><span style="color: var(--shiki-color-text)">;</span></div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Params&lt;Path> = &#123; [Key in FilteredParts&lt;Path> as RemovePrefixDots&lt;Key>]: ParamValue&lt;Key>; &#125;' >Params</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type Params&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">  [</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key' >Key</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type FilteredParts&lt;Path> = Path extends &#96;$&#123;infer PartA&#125;/$&#123;infer PartB&#125;&#96; ? IsParameter&lt;PartA> | FilteredParts&lt;PartB> : IsParameter&lt;Path>' >FilteredParts</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type Params&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">as</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type RemovePrefixDots&lt;Key> = Key extends &#96;...$&#123;infer Name&#125;&#96; ? Name : Key' >RemovePrefixDots</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key' >Key</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;]</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamValue&lt;Key> = Key extends &#96;...$&#123;infer Anything&#125;&#96; ? string[] : number' >ParamValue</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key' >Key</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='line dim'><span style="color: var(--shiki-color-text)">&#125;;</span></div><div class='line dim'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type CallbackFn&lt;Path> = (req: &#123;&#10;    params: Params&lt;Path>;&#10;&#125;) => void' >CallbackFn</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type CallbackFn&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (<data-lsp lsp='(parameter) req: &#123;&#10;    params: Params&lt;Path>;&#10;&#125;' >req</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123; <data-lsp lsp='(property) params: Params&lt;Path>' >params</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Params&lt;Path> = &#123; [Key in FilteredParts&lt;Path> as RemovePrefixDots&lt;Key>]: ParamValue&lt;Key>; &#125;' >Params</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type CallbackFn&lt;Path>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; &#125;) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">void</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line dim'>&nbsp;</div><div class='line highlight'><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function get&lt;Path extends string>(path: Path, callback: CallbackFn&lt;Path>): void' >get</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in get&lt;Path extends string>(path: Path, callback: CallbackFn&lt;Path>): void' >Path</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">>(<data-lsp lsp='(parameter) path: Path extends string' >path</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in get&lt;Path extends string>(path: Path, callback: CallbackFn&lt;Path>): void' >Path</data-lsp></span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(parameter) callback: CallbackFn&lt;Path>' >callback</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type CallbackFn&lt;Path> = (req: &#123;&#10;    params: Params&lt;Path>;&#10;&#125;) => void' >CallbackFn</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in get&lt;Path extends string>(path: Path, callback: CallbackFn&lt;Path>): void' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;) &#123;</span></div><div class='line highlight'><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-comment)">// TODO: implement</span></div><div class='line highlight'><span style="color: var(--shiki-color-text)">&#125;</span></div></code></div></pre>`,Zn,C,gn,Xa,Wv,Jv,Pn,Uv,Qv,Ps,Yv,sr,Zv,su,ar,au,tu,eu,za,ou,tr,ru,nu,lu,er,z2=`<pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="ts" cutLines="38"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-comment)">// &#96;Parse&#96; parses string into a nested string array of infinite level deep</span></div><div class='line'><span style="color: var(--shiki-token-comment)">// type Parse&lt;Str extends string&gt; = ?;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type EmptyArray = []' style='border-bottom: solid 2px lightgrey;'>EmptyArray</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Parse&lt;Str extends string> = ParseStringArray&lt;Str, []> extends [infer Remaining, infer Result] ? Remaining extends "" ? Result : never : never' >Parse</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;[]&apos;</span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='meta-line'><span class='popover-prefix'>         </span><span class='popover'><div class='arrow'></div>type EmptyArray = []</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type StringArray = ["hello", "world"]' style='border-bottom: solid 2px lightgrey;'>StringArray</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Parse&lt;Str extends string> = ParseStringArray&lt;Str, []> extends [infer Remaining, infer Result] ? Remaining extends "" ? Result : never : never' >Parse</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;["hello", "world"]&apos;</span><span style="color: var(--shiki-color-text)">&gt;</span></div><div class='meta-line'><span class='popover-prefix'>         </span><span class='popover'><div class='arrow'></div>type StringArray = ["hello", "world"]</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type NestedArray = ["hello", ["world", "ts", ["!"]], ["try this"]]' style='border-bottom: solid 2px lightgrey;'>NestedArray</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type Parse&lt;Str extends string> = ParseStringArray&lt;Str, []> extends [infer Remaining, infer Result] ? Remaining extends "" ? Result : never : never' >Parse</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">&apos;["hello", ["world", "ts", ["!"]], ["try this"]]&apos;</span><span style="color: var(--shiki-color-text)">&gt;</span></div><div class='meta-line'><span class='popover-prefix'>         </span><span class='popover'><div class='arrow'></div>type NestedArray = ["hello", ["world", "ts", ["!"]], ["try this"]]</span></div></code></div></pre>`,iu,or,pu,qa,cu,sl,ns,wn,Wa,ku,yu,Ja,hu,rr,du,vu,uu,nr,q2=`<div class="filename">Route component</div><div class="copy" data-copy="import React from &#39;react&#39;;

type PathSegments&lt;Path extends string&gt; = Path extends &#96;$&#123;infer SegmentA&#125;/$&#123;infer SegmentB&#125;&#96;
  ? ParamOnly&lt;SegmentA&gt; | PathSegments&lt;SegmentB&gt;
  : ParamOnly&lt;Path&gt;;
type ParamOnly&lt;Segment extends string&gt; = Segment extends &#96;:$&#123;infer Param&#125;&#96;
  ? Param
  : never;
type RouteParams&lt;Path extends string&gt; = &#123;
  [Key in PathSegments&lt;Path&gt;]: string;
&#125;;

function Route&lt;Path extends string&gt;(&#123;&#125;: &#123;
  path: Path;
  render: (routeProps: &#123;
    match: &#123; params: RouteParams&lt;Path&gt; &#125;;
  &#125;) =&gt; void;
&#125;) &#123;
  return &lt;div /&gt;;
&#125;

&lt;Route
  path=&quot;/user/:username&quot;
  render=&#123;(routeProps) =&gt; &#123;
    const params = routeProps.match.params;
  &#125;&#125;
/&gt;;"><svg viewBox="64 64 896 896" focusable="false" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"></path></svg></div><pre class="shiki twoslash lsp" style="background-color: var(--shiki-color-background); color: var(--shiki-color-text)" lang="tsx" filename="Route component" copy="true"><div class="language-id">tsx</div><div class='code-container'><code><div class='line'><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> <data-lsp lsp='(alias) namespace React&#10;import React' >React</data-lsp> </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&apos;react&apos;</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type PathSegments&lt;Path extends string> = Path extends &#96;$&#123;infer SegmentA&#125;/$&#123;infer SegmentB&#125;&#96; ? ParamOnly&lt;SegmentA> | PathSegments&lt;SegmentB> : ParamOnly&lt;Path>' >PathSegments</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type PathSegments&lt;Path extends string>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type PathSegments&lt;Path extends string>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) SegmentA' >SegmentA</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">/</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) SegmentB' >SegmentB</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamOnly&lt;Segment extends string> = Segment extends &#96;:$&#123;infer Param&#125;&#96; ? Param : never' >ParamOnly</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) SegmentA' >SegmentA</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type PathSegments&lt;Path extends string> = Path extends &#96;$&#123;infer SegmentA&#125;/$&#123;infer SegmentB&#125;&#96; ? ParamOnly&lt;SegmentA> | PathSegments&lt;SegmentB> : ParamOnly&lt;Path>' >PathSegments</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) SegmentB' >SegmentB</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamOnly&lt;Segment extends string> = Segment extends &#96;:$&#123;infer Param&#125;&#96; ? Param : never' >ParamOnly</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type PathSegments&lt;Path extends string>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type ParamOnly&lt;Segment extends string> = Segment extends &#96;:$&#123;infer Param&#125;&#96; ? Param : never' >ParamOnly</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Segment in type ParamOnly&lt;Segment extends string>' >Segment</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Segment in type ParamOnly&lt;Segment extends string>' >Segment</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;:</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-keyword)">infer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Param' >Param</data-lsp></span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Param' >Param</data-lsp></span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">never</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type RouteParams&lt;Path extends string> = &#123; [Key in PathSegments&lt;Path>]: string; &#125;' >RouteParams</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type RouteParams&lt;Path extends string>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">&gt; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  [</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Key' >Key</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type PathSegments&lt;Path extends string> = Path extends &#96;$&#123;infer SegmentA&#125;/$&#123;infer SegmentB&#125;&#96; ? ParamOnly&lt;SegmentA> | PathSegments&lt;SegmentB> : ParamOnly&lt;Path>' >PathSegments</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in type RouteParams&lt;Path extends string>' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt;]</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='function Route&lt;Path extends string>(&#123;&#125;: &#123;&#10;    path: Path;&#10;    render: (routeProps: &#123;&#10;        match: &#123;&#10;            params: RouteParams&lt;Path>;&#10;        &#125;;&#10;    &#125;) => void;&#10;&#125;): JSX.Element' >Route</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in Route&lt;Path extends string>(&#123;&#125;: &#123;&#10;    path: Path;&#10;    render: (routeProps: &#123;&#10;        match: &#123;&#10;            params: RouteParams&lt;Path>;&#10;        &#125;;&#10;    &#125;) => void;&#10;&#125;): JSX.Element' >Path</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">string</span><span style="color: var(--shiki-color-text)">&gt;(&#123;&#125;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  <data-lsp lsp='(property) path: Path extends string' >path</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in Route&lt;Path extends string>(&#123;&#125;: &#123;&#10;    path: Path;&#10;    render: (routeProps: &#123;&#10;        match: &#123;&#10;            params: RouteParams&lt;Path>;&#10;        &#125;;&#10;    &#125;) => void;&#10;&#125;): JSX.Element' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(property) render: (routeProps: &#123;&#10;    match: &#123;&#10;        params: RouteParams&lt;Path>;&#10;    &#125;;&#10;&#125;) => void' >render</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> (<data-lsp lsp='(parameter) routeProps: &#123;&#10;    match: &#123;&#10;        params: RouteParams&lt;Path>;&#10;    &#125;;&#10;&#125;' >routeProps</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">    <data-lsp lsp='(property) match: &#123;&#10;    params: RouteParams&lt;Path>;&#10;&#125;' >match</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123; <data-lsp lsp='(property) params: RouteParams&lt;Path>' >params</data-lsp></span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='type RouteParams&lt;Path extends string> = &#123; [Key in PathSegments&lt;Path>]: string; &#125;' >RouteParams</data-lsp></span><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(type parameter) Path in Route&lt;Path extends string>(&#123;&#125;: &#123;&#10;    path: Path;&#10;    render: (routeProps: &#123;&#10;        match: &#123;&#10;            params: RouteParams&lt;Path>;&#10;        &#125;;&#10;    &#125;) => void;&#10;&#125;): JSX.Element' >Path</data-lsp></span><span style="color: var(--shiki-color-text)">&gt; &#125;;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  &#125;) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">void</span><span style="color: var(--shiki-color-text)">;</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;) &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &lt;</span><span style="color: var(--shiki-token-string-expression)"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: var(--shiki-color-text)"> /&gt;;</span></div><div class='line'><span style="color: var(--shiki-color-text)">&#125;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='function Route&lt;"/user/:username">(&#123;&#125;: &#123;&#10;    path: "/user/:username";&#10;    render: (routeProps: &#123;&#10;        match: &#123;&#10;            params: RouteParams&lt;"/user/:username">;&#10;        &#125;;&#10;    &#125;) => void;&#10;&#125;): JSX.Element' >Route</data-lsp></span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(JSX attribute) path: "/user/:username"' >path</data-lsp></span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-string-expression)">"/user/:username"</span></div><div class='line'><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)"><data-lsp lsp='(JSX attribute) render: (routeProps: &#123;&#10;    match: &#123;&#10;        params: RouteParams&lt;"/user/:username">;&#10;    &#125;;&#10;&#125;) => void' >render</data-lsp></span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">&#123;(<data-lsp lsp='(parameter) routeProps: &#123;&#10;    match: &#123;&#10;        params: RouteParams&lt;"/user/:username">;&#10;    &#125;;&#10;&#125;' >routeProps</data-lsp>) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></div><div class='line'><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='const params: RouteParams&lt;"/user/:username">' >params</data-lsp></span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(parameter) routeProps: &#123;&#10;    match: &#123;&#10;        params: RouteParams&lt;"/user/:username">;&#10;    &#125;;&#10;&#125;' >routeProps</data-lsp></span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)"><data-lsp lsp='(property) match: &#123;&#10;    params: RouteParams&lt;"/user/:username">;&#10;&#125;' >match</data-lsp></span><span style="color: var(--shiki-color-text)">.<data-lsp lsp='(property) params: RouteParams&lt;"/user/:username">' >params</data-lsp>;</span></div><div class='line'><span style="color: var(--shiki-color-text)">  &#125;&#125;</span></div><div class='line'><span style="color: var(--shiki-color-text)">/&gt;;</span></div></code></div></pre>`,al,Ds,bn,Ua,xu,mu,ws,lr,fu,S,En,Qa,gu,Pu,_n,Ya,wu,bu,An,Za,Eu,_u,In,st,Au,Iu,Tn,at,Tu,Su,Sn,tt,Ku,Bu,Kn,et,Du,Cu,Bn,ot,Vu,$u,Dn,rt,Ou,Hu,Cn,nt,Fu;return{c(){y=t("section"),G=t("h2"),L=t("a"),Rs=r("The Challenge"),I=i(),R=t("p"),pt=r("First of all, here's a TypeScript challenge for you:"),Cl=i(),Ms=t("p"),Vl=r("Can you figure how to define the TypeScript type for the "),ct=t("code"),$l=r("app.get"),Ol=r(" method below?"),Hl=i(),kt=t("div"),Fl=i(),br=t("p"),Er=t("em"),Ll=r("Try and hover the variables to look at their types."),Rl=i(),yt=t("p"),Ns=t("em"),Ml=r("Notice that "),ht=t("code"),Nl=r("...args"),jl=r(" is a string array instead of number"),Gl=r(" \u{1F92F}"),Xl=i(),js=t("p"),zl=r("The "),dt=t("code"),ql=r("req.params"),Wl=r(" is derived from the string passed in as the 1st parameter."),Jl=i(),ks=t("p"),Ul=r("This is useful when you want to define types for a routing-like function, where you can pass in a route with path pattern that you can define dynamic segments with custom syntax (eg: "),vt=t("code"),Ql=r("[shopid]"),Yl=r(" or "),ut=t("code"),Zl=r(":shopid"),si=r("), and a callback function, where the argument type is derived from the route that you just passed in."),ai=i(),_r=t("p"),ti=r("So if you try to access parameter that is not defined, you get an error!"),ei=i(),xt=t("div"),oi=i(),M=t("p"),ri=r("A real-world use-case for this, if you are more familiar with "),Gs=t("a"),ni=r("React Router"),li=r(", is to derive the type for "),mt=t("code"),ii=r("routeProps"),pi=r(" in the "),Xs=t("a"),ci=r("render"),ki=r(" function from the "),ft=t("code"),yi=r("path"),hi=r(" props:"),di=i(),gt=t("div"),vi=i(),Ar=t("p"),ui=r("In this article, we are going to explore how to define such a type, through various TypeScript techniques, extracting types from a string literal type."),Ln=i(),bs=t("section"),Ir=t("h2"),zs=t("a"),xi=r("Things you need to know"),mi=i(),Tr=t("p"),fi=r("First thing first, let's talk through some basic knowledges required before we go on and tackle the problem."),Rn=i(),u=t("section"),Sr=t("h3"),qs=t("a"),gi=r("String Literal Type"),Pi=i(),Ws=t("p"),wi=r("Type "),Pt=t("code"),bi=r("string"),Ei=r(" in TypeScript is a string that can have any value:"),_i=i(),wt=t("div"),Ai=i(),Js=t("p"),Ii=r("However, a "),Us=t("a"),Ti=r("string literal type"),Si=r(", is a string type with a specific value:"),Ki=i(),bt=t("div"),Bi=i(),Qs=t("p"),Di=r("Most of the time, we use this alongside with "),Ys=t("a"),Ci=r("Union Types"),Vi=r(" to determine a list of string values you can pass to a function / array / object:"),$i=i(),Et=t("div"),Oi=i(),Kr=t("p"),Hi=r("So how do you create a string literal type?"),Fi=i(),ys=t("p"),Li=r("When you define a string variable with "),_t=t("code"),Ri=r("const"),Mi=r(", it is of type string literal. However if you defined it with "),At=t("code"),Ni=r("let"),ji=r(", TypeScript sees that the value of the variable could change, so it assigns the variable to a more generic type:"),Gi=i(),It=t("div"),Xi=i(),Br=t("p"),zi=r("The same reasoning applies to objects and arrays, as you can mutate the object / array value afterwards, so TypeScript assigns a more generic type:"),qi=i(),Tt=t("div"),Wi=i(),St=t("p"),Ji=r("However, you can hint TypeScript that you would only read the value from the object / array and not mutate it, by using the "),Es=t("a"),Kt=t("code"),Ui=r("const"),Qi=r(" assertions"),Yi=i(),Bt=t("div"),Zi=i(),U=t("p"),sp=r("Hover over to the "),Dt=t("code"),ap=r("object.food"),tp=r(" property and you'll see that now the type is a string literal "),Ct=t("code"),ep=r("'sushi'"),op=r(" rather than "),Vt=t("code"),rp=r("string"),np=r("!"),lp=i(),Dr=t("p"),ip=r("Differentiating a string literal type vs a string type allows TypeScript to know not just the type, as well the value of a string."),Mn=i(),es=t("section"),Cr=t("h4"),Zs=t("a"),pp=r("Template Literal and String Literal Types"),cp=i(),hs=t("p"),kp=r("Since "),sa=t("a"),yp=r("TypeScript 4.1"),hp=r(", TypeScript supports a new way to define a new string literal types, which is to use the familiar syntax of "),aa=t("a"),dp=r("Template literals"),vp=r(":"),up=i(),$t=t("div"),Nn=i(),B=t("section"),Vr=t("h3"),ta=t("a"),xp=r("Conditional Type"),mp=i(),O=t("p"),ea=t("a"),fp=r("Conditional Types"),gp=r(" allow you to define a type based on another type. In this example, "),Ot=t("code"),Pp=r("Collection<X>"),wp=r(" can be either "),Ht=t("code"),bp=r("number[]"),Ep=r(" or "),Ft=t("code"),_p=r("Set<number>"),Ap=r(" depending on the type of "),Lt=t("code"),Ip=r("X"),Tp=r(":"),Sp=i(),Rt=t("div"),Kp=i(),N=t("p"),Bp=r("You use the "),Mt=t("code"),Dp=r("extends"),Cp=r(" keyword to test if the type "),Nt=t("code"),Vp=r("X"),$p=r(" can be assigned to the type "),jt=t("code"),Op=r("'arr'"),Hp=r(", and conditional operator ("),Gt=t("code"),Fp=r("condition ? a : b"),Lp=r(") to determine the type if it test holds true or otherwise."),Rp=i(),oa=t("p"),Mp=r("If you try to test a more complex type, you can infer parts of the type using the "),Xt=t("code"),Np=r("infer"),jp=r(" keyword, and define a new type based on the inferred part:"),Gp=i(),zt=t("div"),jn=i(),h=t("section"),$r=t("h3"),ra=t("a"),Xp=r("Function Overloads and Generic Functions"),zp=i(),ds=t("p"),qp=r("Whenever you want to define the type of a function in TypeScript, where the argument types and the return type depends on each other, you'll probably will reach out for either "),na=t("a"),Wp=r("Function Overloads"),Jp=r(" or "),la=t("a"),Up=r("Generic Functions"),Qp=r("."),Yp=i(),Or=t("p"),Zp=r("What do I meant by having the argument types and return types depending on each other?"),sc=i(),Hr=t("p"),ac=r("Here's an example where the return type is based on the argument type:"),tc=i(),qt=t("div"),ec=i(),Fr=t("p"),oc=r("... and here's another example where the 2nd argument type is based on the 1st argument type (argument types depending on each other):"),rc=i(),Wt=t("div"),nc=i(),Lr=t("p"),lc=r("So, how do you define a function like this?"),ic=i(),Rr=t("p"),pc=r("If you define"),cc=i(),Jt=t("div"),kc=i(),$=t("p"),yc=r("then whatever returned is type "),Ut=t("code"),hc=r("string | number"),dc=r(". This doesnt capture the essence of the function, which should return "),Qt=t("code"),vc=r("string"),uc=r(" if called the function with "),Yt=t("code"),xc=r("string[]"),mc=r(" and return "),Zt=t("code"),fc=r("number"),gc=r(" if you called with "),se=t("code"),Pc=r("number[]"),wc=r("."),bc=i(),ia=t("p"),Ec=r("Instead, you can define the function via "),pa=t("a"),_c=r("function overloads"),Ac=r(", which is to define multiple function signatures, followed by the implementation:"),Ic=i(),ae=t("div"),Tc=i(),Q=t("p"),Sc=r("Alternatively, you can define a "),ca=t("a"),Kc=r("generic function"),Bc=r(", which declares a "),Mr=t("em"),Dc=r("type parameter"),Cc=r(", and describe the argument type and return type in terms of the "),Nr=t("em"),Vc=r("type parameter"),$c=r(":"),Oc=i(),te=t("div"),Hc=i(),Y=t("p"),Fc=r("A plus point for generics is that the "),ee=t("code"),Lc=r("Item"),Rc=r(" type can be any types, and TypeScript can infer what the "),oe=t("code"),Mc=r("Item"),Nc=r(" type represents from the arguments you called the function with, and dictates what the return type should be based on the "),re=t("code"),jc=r("Item"),Gc=r(" type"),Xc=i(),ne=t("div"),zc=i(),jr=t("p"),qc=r("If you do it with function overload, on the other hand, you'll probably have to define each and every possible function signatures."),Wc=i(),Z=t("p"),Jc=r("But maybe you just want to pass in "),le=t("code"),Uc=r("string[]"),Qc=r(" or "),ie=t("code"),Yc=r("number[]"),Zc=r(" to "),pe=t("code"),sk=r("firstElement(...)"),ak=r(" only, so it's not a problem for function overloads."),tk=i(),vs=t("p"),ek=r("Also, you can provide a constraint for the generic function, limiting that the "),ce=t("code"),ok=r("Item"),rk=r(" type parameter can only be a certain type, by using the "),ke=t("code"),nk=r("extends"),lk=r(" keyword:"),ik=i(),ye=t("div"),Gn=i(),X=t("section"),Gr=t("h2"),ka=t("a"),pk=r("Working on the problem"),ck=i(),ya=t("p"),kk=r("Knowing "),he=t("a"),yk=r("generic functions"),hk=r(", our solution to the problem will probably take the form:"),dk=i(),de=t("div"),vk=i(),K=t("p"),uk=r("We use a type parameter "),ve=t("code"),xk=r("Path"),mk=r(", which has to be a "),ue=t("code"),fk=r("string"),gk=r(". The "),xe=t("code"),Pk=r("path"),wk=r(" argument is of type "),me=t("code"),bk=r("Path"),Ek=r(" and the callback will be "),fe=t("code"),_k=r("CallbackFn<Path>"),Ak=r(", and the crux of the challenge is to figure out "),ge=t("code"),Ik=r("CallbackFn<Path>"),Tk=r("."),Xn=i(),v=t("section"),Xr=t("h3"),ha=t("a"),Sk=r("The Game Plan"),Kk=i(),zr=t("p"),Bk=r("So here's the plan:"),Dk=i(),Pe=t("ol"),us=t("li"),Ck=r("Given the type of the path as "),we=t("code"),Vk=r("Path"),$k=r(", which is a "),be=t("a"),Ok=r("string literal type"),Hk=r(","),Fk=i(),Ee=t("div"),Lk=i(),qr=t("ol"),_e=t("li"),Rk=r("We derive a new type which has the string break into it's parts "),da=t("em"),Mk=r("["),Ae=t("a"),Nk=r("jump here"),jk=r("]"),Gk=i(),Ie=t("div"),Xk=i(),Te=t("ol"),Se=t("li"),zk=r("Filter out the parts to contain only the params "),va=t("em"),qk=r("["),Ke=t("a"),Wk=r("jump here"),Jk=r("]"),Uk=i(),Be=t("div"),Qk=i(),De=t("ol"),Ce=t("li"),Yk=r("Remove the brackets "),ua=t("em"),Zk=r("["),Ve=t("a"),sy=r("jump here"),ay=r("]"),ty=i(),$e=t("div"),ey=i(),Oe=t("ol"),_s=t("li"),oy=r("Map the parts into an "),xa=t("a"),ry=r("object type"),ny=i(),ma=t("em"),ly=r("["),He=t("a"),iy=r("jump here"),py=r("]"),cy=i(),Fe=t("div"),ky=i(),Le=t("ol"),As=t("li"),yy=r("Using "),fa=t("a"),hy=r("Conditional Types"),dy=r(" to define the map value "),ga=t("em"),vy=r("["),Re=t("a"),uy=r("jump here"),xy=r("]"),my=i(),Me=t("div"),fy=i(),Ne=t("ol"),os=t("li"),gy=r("Remap keys to remove "),je=t("code"),Py=r("'...'"),wy=r(" in "),Ge=t("code"),by=r("...args"),Ey=i(),Pa=t("em"),_y=r("["),Xe=t("a"),Ay=r("jump here"),Iy=r("]"),Ty=i(),ze=t("div"),Sy=i(),qe=t("ol"),Wr=t("li"),Ky=r("Finally"),By=i(),We=t("div"),zn=i(),f=t("section"),Jr=t("h3"),wa=t("a"),Dy=r("Splitting a String Literal Type"),Cy=i(),ba=t("p"),Vy=r("To split a string literal type, we can use a "),Je=t("a"),$y=r("conditional type"),Oy=r(" to check the value of the string literal:"),Hy=i(),Ue=t("div"),Fy=i(),Ur=t("p"),Ly=r("but to take in any string literal, that we have no idea of the value ahead of time,"),Ry=i(),Qe=t("div"),My=i(),Ea=t("p"),Ny=r("we will have to "),Ye=t("code"),jy=r("infer"),Gy=r(" the value in the conditional tests, and use the inferred value type:"),Xy=i(),Ze=t("div"),zy=i(),xs=t("p"),qy=r(`And if you pass in a string literal that does not match the pattern, we want to return the same string literal type passed in.
So, we return the `),so=t("code"),Wy=r("Path"),Jy=r(" type in the "),ao=t("code"),Uy=r("false"),Qy=r(" condition branch:"),Yy=i(),to=t("div"),Zy=i(),ms=t("p"),sh=r("At this point, you noticed that "),eo=t("code"),ah=r("PartA"),th=r(' will infer "non-greedily", ie: it will try to infer as much as possible, but do not contain a '),oo=t("code"),eh=r('"/"'),oh=r(" character:"),rh=i(),ro=t("div"),nh=i(),ss=t("p"),lh=r("So, to split the "),no=t("code"),ih=r("Path"),ph=r(" string literal recursively, we can return the type "),lo=t("code"),ch=r("Parts<PathB>"),kh=r(" instead of "),io=t("code"),yh=r("PathB"),hh=r(":"),dh=i(),po=t("div"),vh=i(),Qr=t("p"),uh=r("Here's the breakdown of what happened:"),xh=i(),co=t("div"),qn=i(),g=t("section"),Yr=t("h3"),_a=t("a"),mh=r("Filter out only the parts containing the param syntax"),fh=i(),Aa=t("p"),gh=r("The key to this step is the observation that "),fs=t("strong"),Ph=r("any type "),Ia=t("a"),wh=r("unions"),bh=r(" with "),ko=t("code"),Eh=r("never"),_h=r(" yields the type itself"),Ah=r("."),Ih=i(),yo=t("div"),Th=i(),Zr=t("p"),Sh=r("If we can transform"),Kh=i(),ho=t("div"),Bh=i(),sn=t("p"),Dh=r("into"),Ch=i(),vo=t("div"),Vh=i(),an=t("p"),$h=r("then we will have"),Oh=i(),uo=t("div"),Hh=i(),tn=t("p"),Fh=r("So, how, you asked?"),Lh=i(),j=t("p"),Rh=r("Well, we'll have to reach out to "),xo=t("a"),Mh=r("conditional types"),Nh=r(" again for help, we can have a conditional type that returns the string literal itself if it starts with "),mo=t("code"),jh=r("["),Gh=r(" and ends with "),fo=t("code"),Xh=r("]"),zh=r(", and "),go=t("code"),qh=r("never"),Wh=r(" if otherwise:"),Jh=i(),Po=t("div"),Uh=i(),Ta=t("p"),Qh=r("Although we have no idea what the string content is in between "),wo=t("code"),Yh=r("[]"),Zh=r(", but we can infer it in the conditional type, and we do not have to use the inferred type."),sd=i(),en=t("p"),ad=r("Combining this with the previous step, we have:"),td=i(),bo=t("div"),Wn=i(),H=t("section"),on=t("h3"),Sa=t("a"),ed=r("Removing the brackets"),od=i(),rn=t("p"),rd=r("If you've been following along until this point, you probably have a clearer idea on how we can achieve this step."),nd=i(),Is=t("p"),ld=r("So, why not take a pause and "),Ka=t("a"),id=r("try it out in the TypeScript Playground"),pd=r("? "),nn=t("em"),cd=r("(I've added the boilerplate code in the link)"),kd=i(),Ts=t("p"),yd=r("To remove the bracket, we can modify the conditional type in the last step, and instead of returning the "),Eo=t("code"),hd=r("Part"),dd=r(", we return the inferred type between the "),_o=t("code"),vd=r("[]"),ud=i(),Ao=t("div"),Jn=i(),A=t("section"),ln=t("h3"),Ba=t("a"),xd=r("Map the parts into an Object Type"),md=i(),Da=t("p"),fd=r("In this step, we are going to create an "),Ca=t("a"),gd=r("Object Types"),Pd=r(" using the result of the previous step as the key."),wd=i(),pn=t("p"),bd=r("If you know the key type beforehand, you can create an object type via a type alias:"),Ed=i(),Io=t("div"),_d=i(),Va=t("p"),Ad=r("If the key type is totally unknown, you can use the "),$a=t("a"),Id=r("Index Signature"),Td=r(":"),Sd=i(),To=t("div"),Kd=i(),Oa=t("p"),Bd=r("However, in our case, the key type is not totally unknown, but it is dynamic. We use "),Ha=t("a"),Dd=r("Mapped Types"),Cd=r(" which has a similar syntax as the index signature:"),Vd=i(),So=t("div"),$d=i(),cn=t("p"),Od=r("Building this on top of the previous step, we have:"),Hd=i(),Ko=t("div"),Un=i(),P=t("section"),kn=t("h3"),Fa=t("a"),Fd=r("Defining the map value"),Ld=i(),yn=t("p"),Rd=r("Now if I ask you to come up with a type that is depending on the key value:"),Md=i(),La=t("ul"),Ss=t("li"),Nd=r("if it is a string literal type that starts with "),Bo=t("code"),jd=r("..."),Gd=r(", "),Do=t("strong"),Xd=r("return a type "),Co=t("code"),zd=r("string[]"),qd=i(),Vo=t("li"),Wd=r("else, "),$o=t("strong"),Jd=r("return a type "),Oo=t("code"),Ud=r("number"),Qd=i(),Ra=t("p"),Yd=r("I hope that your inner voice is shouting "),Ho=t("a"),Zd=r("Conditional Types"),sv=r("!"),av=i(),hn=t("p"),tv=r("And yes, we are going to use a Conditional Type:"),ev=i(),Fo=t("div"),ov=i(),Ma=t("p"),rv=r("But how do we get the "),Lo=t("code"),nv=r("Key"),lv=r(" type?"),iv=i(),gs=t("p"),pv=r("Well, in Mapped Types, when you write "),Ro=t("code"),cv=r("{ [Key in ???]: any }"),kv=r(", the "),Mo=t("code"),yv=r("Key"),hv=r(" is the type alias of the key, which you can map it in the value type."),dv=i(),dn=t("p"),vv=r("So writing this:"),uv=i(),No=t("div"),xv=i(),vn=t("p"),mv=r("is the same as doing"),fv=i(),jo=t("div"),gv=i(),un=t("p"),Pv=r("So, adding this on top of the previous step:"),wv=i(),Go=t("div"),Qn=i(),D=t("section"),xn=t("h3"),Ks=t("a"),bv=r("Remap keys to remove "),Xo=t("code"),Ev=r("'...'"),_v=i(),as=t("p"),Av=r("Now the final step. We are going to remove "),zo=t("code"),Iv=r("'...'"),Tv=r(" from the "),qo=t("code"),Sv=r("'...args'"),Kv=r(" key, and I hope you can now proudly come up with the "),Wo=t("a"),Bv=r("Conditional Types"),Dv=r(" for it:"),Cv=i(),Jo=t("div"),Vv=i(),Na=t("p"),$v=r("But to apply this onto our Mapped Type, you can do a "),Bs=t("a"),Ov=r("Key Remapping via "),Uo=t("code"),Hv=r("as"),Fv=r(", which is available from TypeScript 4.1"),Lv=i(),Qo=t("div"),Rv=i(),mn=t("p"),Mv=r("And there you go!"),Yn=i(),rs=t("section"),fn=t("h3"),ja=t("a"),Nv=r("The Solution"),jv=i(),Ga=t("p"),Gv=r("Here's the final solution to "),Yo=t("a"),Xv=r("the challenge"),zv=r(":"),qv=i(),Zo=t("div"),Zn=i(),C=t("section"),gn=t("h2"),Xa=t("a"),Wv=r("Conclusion"),Jv=i(),Pn=t("p"),Uv=r("I hope this is a fun challenge for you."),Qv=i(),Ps=t("p"),Yv=r("As you can see, there's endless possibilities with "),sr=t("a"),Zv=r("Conditional Types"),su=r(" and "),ar=t("a"),au=r("Template Literal Types"),tu=r(", allowing you to parse and derive types from a string literal type."),eu=i(),za=t("p"),ou=r("Before you go, here's another challenge, see if you can come up with the type for "),tr=t("code"),ru=r("Parse<Str>"),nu=r(":"),lu=i(),er=t("div"),iu=i(),or=t("p"),pu=r("And you just wanna see the answer, "),qa=t("a"),cu=r("here's the link to it"),sl=i(),ns=t("section"),wn=t("h2"),Wa=t("a"),ku=r("Extra"),yu=i(),Ja=t("p"),hu=r("Here's the type I defined for the "),rr=t("code"),du=r("Route"),vu=r(" component in the example above"),uu=i(),nr=t("div"),al=i(),Ds=t("section"),bn=t("h2"),Ua=t("a"),xu=r("References"),mu=i(),ws=t("ul"),lr=t("li"),fu=r("TypeScript Docs"),S=t("ul"),En=t("li"),Qa=t("a"),gu=r("Literal Types"),Pu=i(),_n=t("li"),Ya=t("a"),wu=r("Union Types"),bu=i(),An=t("li"),Za=t("a"),Eu=r("Conditional Types"),_u=i(),In=t("li"),st=t("a"),Au=r("Function Overloads"),Iu=i(),Tn=t("li"),at=t("a"),Tu=r("Generic Functions"),Su=i(),Sn=t("li"),tt=t("a"),Ku=r("Objects"),Bu=i(),Kn=t("li"),et=t("a"),Du=r("Mapped Types"),Cu=i(),Bn=t("li"),ot=t("a"),Vu=r("Template Literal Types"),$u=i(),Dn=t("li"),rt=t("a"),Ou=r("String Literal Types in TypeScript"),Hu=i(),Cn=t("li"),nt=t("a"),Fu=r("Index Signatures in TypeScript"),this.h()},l(c){y=e(c,"SECTION",{});var k=o(y);G=e(k,"H2",{});var Zu=o(G);L=e(Zu,"A",{href:!0,id:!0});var sx=o(L);Rs=n(sx,"The Challenge"),sx.forEach(a),Zu.forEach(a),I=p(k),R=e(k,"P",{});var ax=o(R);pt=n(ax,"First of all, here's a TypeScript challenge for you:"),ax.forEach(a),Cl=p(k),Ms=e(k,"P",{});var tl=o(Ms);Vl=n(tl,"Can you figure how to define the TypeScript type for the "),ct=e(tl,"CODE",{class:!0});var tx=o(ct);$l=n(tx,"app.get"),tx.forEach(a),Ol=n(tl," method below?"),tl.forEach(a),Hl=p(k),kt=e(k,"DIV",{class:!0});var W2=o(kt);W2.forEach(a),Fl=p(k),br=e(k,"P",{});var ex=o(br);Er=e(ex,"EM",{});var ox=o(Er);Ll=n(ox,"Try and hover the variables to look at their types."),ox.forEach(a),ex.forEach(a),Rl=p(k),yt=e(k,"P",{});var Lu=o(yt);Ns=e(Lu,"EM",{});var el=o(Ns);Ml=n(el,"Notice that "),ht=e(el,"CODE",{class:!0});var rx=o(ht);Nl=n(rx,"...args"),rx.forEach(a),jl=n(el," is a string array instead of number"),el.forEach(a),Gl=n(Lu," \u{1F92F}"),Lu.forEach(a),Xl=p(k),js=e(k,"P",{});var ol=o(js);zl=n(ol,"The "),dt=e(ol,"CODE",{class:!0});var nx=o(dt);ql=n(nx,"req.params"),nx.forEach(a),Wl=n(ol," is derived from the string passed in as the 1st parameter."),ol.forEach(a),Jl=p(k),ks=e(k,"P",{});var ir=o(ks);Ul=n(ir,"This is useful when you want to define types for a routing-like function, where you can pass in a route with path pattern that you can define dynamic segments with custom syntax (eg: "),vt=e(ir,"CODE",{class:!0});var lx=o(vt);Ql=n(lx,"[shopid]"),lx.forEach(a),Yl=n(ir," or "),ut=e(ir,"CODE",{class:!0});var ix=o(ut);Zl=n(ix,":shopid"),ix.forEach(a),si=n(ir,"), and a callback function, where the argument type is derived from the route that you just passed in."),ir.forEach(a),ai=p(k),_r=e(k,"P",{});var px=o(_r);ti=n(px,"So if you try to access parameter that is not defined, you get an error!"),px.forEach(a),ei=p(k),xt=e(k,"DIV",{class:!0});var J2=o(xt);J2.forEach(a),oi=p(k),M=e(k,"P",{});var ls=o(M);ri=n(ls,"A real-world use-case for this, if you are more familiar with "),Gs=e(ls,"A",{href:!0,rel:!0});var cx=o(Gs);ni=n(cx,"React Router"),cx.forEach(a),li=n(ls,", is to derive the type for "),mt=e(ls,"CODE",{class:!0});var kx=o(mt);ii=n(kx,"routeProps"),kx.forEach(a),pi=n(ls," in the "),Xs=e(ls,"A",{href:!0,rel:!0});var yx=o(Xs);ci=n(yx,"render"),yx.forEach(a),ki=n(ls," function from the "),ft=e(ls,"CODE",{class:!0});var hx=o(ft);yi=n(hx,"path"),hx.forEach(a),hi=n(ls," props:"),ls.forEach(a),di=p(k),gt=e(k,"DIV",{class:!0});var U2=o(gt);U2.forEach(a),vi=p(k),Ar=e(k,"P",{});var dx=o(Ar);ui=n(dx,"In this article, we are going to explore how to define such a type, through various TypeScript techniques, extracting types from a string literal type."),dx.forEach(a),k.forEach(a),Ln=p(c),bs=e(c,"SECTION",{});var rl=o(bs);Ir=e(rl,"H2",{});var vx=o(Ir);zs=e(vx,"A",{href:!0,id:!0});var ux=o(zs);xi=n(ux,"Things you need to know"),ux.forEach(a),vx.forEach(a),mi=p(rl),Tr=e(rl,"P",{});var xx=o(Tr);fi=n(xx,"First thing first, let's talk through some basic knowledges required before we go on and tackle the problem."),xx.forEach(a),rl.forEach(a),Rn=p(c),u=e(c,"SECTION",{});var w=o(u);Sr=e(w,"H3",{});var mx=o(Sr);qs=e(mx,"A",{href:!0,id:!0});var fx=o(qs);gi=n(fx,"String Literal Type"),fx.forEach(a),mx.forEach(a),Pi=p(w),Ws=e(w,"P",{});var nl=o(Ws);wi=n(nl,"Type "),Pt=e(nl,"CODE",{class:!0});var gx=o(Pt);bi=n(gx,"string"),gx.forEach(a),Ei=n(nl," in TypeScript is a string that can have any value:"),nl.forEach(a),_i=p(w),wt=e(w,"DIV",{class:!0});var Q2=o(wt);Q2.forEach(a),Ai=p(w),Js=e(w,"P",{});var ll=o(Js);Ii=n(ll,"However, a "),Us=e(ll,"A",{href:!0,rel:!0});var Px=o(Us);Ti=n(Px,"string literal type"),Px.forEach(a),Si=n(ll,", is a string type with a specific value:"),ll.forEach(a),Ki=p(w),bt=e(w,"DIV",{class:!0});var Y2=o(bt);Y2.forEach(a),Bi=p(w),Qs=e(w,"P",{});var il=o(Qs);Di=n(il,"Most of the time, we use this alongside with "),Ys=e(il,"A",{href:!0,rel:!0});var wx=o(Ys);Ci=n(wx,"Union Types"),wx.forEach(a),Vi=n(il," to determine a list of string values you can pass to a function / array / object:"),il.forEach(a),$i=p(w),Et=e(w,"DIV",{class:!0});var Z2=o(Et);Z2.forEach(a),Oi=p(w),Kr=e(w,"P",{});var bx=o(Kr);Hi=n(bx,"So how do you create a string literal type?"),bx.forEach(a),Fi=p(w),ys=e(w,"P",{});var pr=o(ys);Li=n(pr,"When you define a string variable with "),_t=e(pr,"CODE",{class:!0});var Ex=o(_t);Ri=n(Ex,"const"),Ex.forEach(a),Mi=n(pr,", it is of type string literal. However if you defined it with "),At=e(pr,"CODE",{class:!0});var _x=o(At);Ni=n(_x,"let"),_x.forEach(a),ji=n(pr,", TypeScript sees that the value of the variable could change, so it assigns the variable to a more generic type:"),pr.forEach(a),Gi=p(w),It=e(w,"DIV",{class:!0});var sg=o(It);sg.forEach(a),Xi=p(w),Br=e(w,"P",{});var Ax=o(Br);zi=n(Ax,"The same reasoning applies to objects and arrays, as you can mutate the object / array value afterwards, so TypeScript assigns a more generic type:"),Ax.forEach(a),qi=p(w),Tt=e(w,"DIV",{class:!0});var ag=o(Tt);ag.forEach(a),Wi=p(w),St=e(w,"P",{});var Ru=o(St);Ji=n(Ru,"However, you can hint TypeScript that you would only read the value from the object / array and not mutate it, by using the "),Es=e(Ru,"A",{href:!0,rel:!0});var Mu=o(Es);Kt=e(Mu,"CODE",{class:!0});var Ix=o(Kt);Ui=n(Ix,"const"),Ix.forEach(a),Qi=n(Mu," assertions"),Mu.forEach(a),Ru.forEach(a),Yi=p(w),Bt=e(w,"DIV",{class:!0});var tg=o(Bt);tg.forEach(a),Zi=p(w),U=e(w,"P",{});var Cs=o(U);sp=n(Cs,"Hover over to the "),Dt=e(Cs,"CODE",{class:!0});var Tx=o(Dt);ap=n(Tx,"object.food"),Tx.forEach(a),tp=n(Cs," property and you'll see that now the type is a string literal "),Ct=e(Cs,"CODE",{class:!0});var Sx=o(Ct);ep=n(Sx,"'sushi'"),Sx.forEach(a),op=n(Cs," rather than "),Vt=e(Cs,"CODE",{class:!0});var Kx=o(Vt);rp=n(Kx,"string"),Kx.forEach(a),np=n(Cs,"!"),Cs.forEach(a),lp=p(w),Dr=e(w,"P",{});var Bx=o(Dr);ip=n(Bx,"Differentiating a string literal type vs a string type allows TypeScript to know not just the type, as well the value of a string."),Bx.forEach(a),w.forEach(a),Mn=p(c),es=e(c,"SECTION",{});var cr=o(es);Cr=e(cr,"H4",{});var Dx=o(Cr);Zs=e(Dx,"A",{href:!0,id:!0});var Cx=o(Zs);pp=n(Cx,"Template Literal and String Literal Types"),Cx.forEach(a),Dx.forEach(a),cp=p(cr),hs=e(cr,"P",{});var kr=o(hs);kp=n(kr,"Since "),sa=e(kr,"A",{href:!0,rel:!0});var Vx=o(sa);yp=n(Vx,"TypeScript 4.1"),Vx.forEach(a),hp=n(kr,", TypeScript supports a new way to define a new string literal types, which is to use the familiar syntax of "),aa=e(kr,"A",{href:!0,rel:!0});var $x=o(aa);dp=n($x,"Template literals"),$x.forEach(a),vp=n(kr,":"),kr.forEach(a),up=p(cr),$t=e(cr,"DIV",{class:!0});var eg=o($t);eg.forEach(a),cr.forEach(a),Nn=p(c),B=e(c,"SECTION",{});var z=o(B);Vr=e(z,"H3",{});var Ox=o(Vr);ta=e(Ox,"A",{href:!0,id:!0});var Hx=o(ta);xp=n(Hx,"Conditional Type"),Hx.forEach(a),Ox.forEach(a),mp=p(z),O=e(z,"P",{});var ts=o(O);ea=e(ts,"A",{href:!0,rel:!0});var Fx=o(ea);fp=n(Fx,"Conditional Types"),Fx.forEach(a),gp=n(ts," allow you to define a type based on another type. In this example, "),Ot=e(ts,"CODE",{class:!0});var Lx=o(Ot);Pp=n(Lx,"Collection<X>"),Lx.forEach(a),wp=n(ts," can be either "),Ht=e(ts,"CODE",{class:!0});var Rx=o(Ht);bp=n(Rx,"number[]"),Rx.forEach(a),Ep=n(ts," or "),Ft=e(ts,"CODE",{class:!0});var Mx=o(Ft);_p=n(Mx,"Set<number>"),Mx.forEach(a),Ap=n(ts," depending on the type of "),Lt=e(ts,"CODE",{class:!0});var Nx=o(Lt);Ip=n(Nx,"X"),Nx.forEach(a),Tp=n(ts,":"),ts.forEach(a),Sp=p(z),Rt=e(z,"DIV",{class:!0});var og=o(Rt);og.forEach(a),Kp=p(z),N=e(z,"P",{});var is=o(N);Bp=n(is,"You use the "),Mt=e(is,"CODE",{class:!0});var jx=o(Mt);Dp=n(jx,"extends"),jx.forEach(a),Cp=n(is," keyword to test if the type "),Nt=e(is,"CODE",{class:!0});var Gx=o(Nt);Vp=n(Gx,"X"),Gx.forEach(a),$p=n(is," can be assigned to the type "),jt=e(is,"CODE",{class:!0});var Xx=o(jt);Op=n(Xx,"'arr'"),Xx.forEach(a),Hp=n(is,", and conditional operator ("),Gt=e(is,"CODE",{class:!0});var zx=o(Gt);Fp=n(zx,"condition ? a : b"),zx.forEach(a),Lp=n(is,") to determine the type if it test holds true or otherwise."),is.forEach(a),Rp=p(z),oa=e(z,"P",{});var pl=o(oa);Mp=n(pl,"If you try to test a more complex type, you can infer parts of the type using the "),Xt=e(pl,"CODE",{class:!0});var qx=o(Xt);Np=n(qx,"infer"),qx.forEach(a),jp=n(pl," keyword, and define a new type based on the inferred part:"),pl.forEach(a),Gp=p(z),zt=e(z,"DIV",{class:!0});var rg=o(zt);rg.forEach(a),z.forEach(a),jn=p(c),h=e(c,"SECTION",{});var d=o(h);$r=e(d,"H3",{});var Wx=o($r);ra=e(Wx,"A",{href:!0,id:!0});var Jx=o(ra);Xp=n(Jx,"Function Overloads and Generic Functions"),Jx.forEach(a),Wx.forEach(a),zp=p(d),ds=e(d,"P",{});var yr=o(ds);qp=n(yr,"Whenever you want to define the type of a function in TypeScript, where the argument types and the return type depends on each other, you'll probably will reach out for either "),na=e(yr,"A",{href:!0,rel:!0});var Ux=o(na);Wp=n(Ux,"Function Overloads"),Ux.forEach(a),Jp=n(yr," or "),la=e(yr,"A",{href:!0,rel:!0});var Qx=o(la);Up=n(Qx,"Generic Functions"),Qx.forEach(a),Qp=n(yr,"."),yr.forEach(a),Yp=p(d),Or=e(d,"P",{});var Yx=o(Or);Zp=n(Yx,"What do I meant by having the argument types and return types depending on each other?"),Yx.forEach(a),sc=p(d),Hr=e(d,"P",{});var Zx=o(Hr);ac=n(Zx,"Here's an example where the return type is based on the argument type:"),Zx.forEach(a),tc=p(d),qt=e(d,"DIV",{class:!0});var ng=o(qt);ng.forEach(a),ec=p(d),Fr=e(d,"P",{});var sm=o(Fr);oc=n(sm,"... and here's another example where the 2nd argument type is based on the 1st argument type (argument types depending on each other):"),sm.forEach(a),rc=p(d),Wt=e(d,"DIV",{class:!0});var lg=o(Wt);lg.forEach(a),nc=p(d),Lr=e(d,"P",{});var am=o(Lr);lc=n(am,"So, how do you define a function like this?"),am.forEach(a),ic=p(d),Rr=e(d,"P",{});var tm=o(Rr);pc=n(tm,"If you define"),tm.forEach(a),cc=p(d),Jt=e(d,"DIV",{class:!0});var ig=o(Jt);ig.forEach(a),kc=p(d),$=e(d,"P",{});var q=o($);yc=n(q,"then whatever returned is type "),Ut=e(q,"CODE",{class:!0});var em=o(Ut);hc=n(em,"string | number"),em.forEach(a),dc=n(q,". This doesnt capture the essence of the function, which should return "),Qt=e(q,"CODE",{class:!0});var om=o(Qt);vc=n(om,"string"),om.forEach(a),uc=n(q," if called the function with "),Yt=e(q,"CODE",{class:!0});var rm=o(Yt);xc=n(rm,"string[]"),rm.forEach(a),mc=n(q," and return "),Zt=e(q,"CODE",{class:!0});var nm=o(Zt);fc=n(nm,"number"),nm.forEach(a),gc=n(q," if you called with "),se=e(q,"CODE",{class:!0});var lm=o(se);Pc=n(lm,"number[]"),lm.forEach(a),wc=n(q,"."),q.forEach(a),bc=p(d),ia=e(d,"P",{});var cl=o(ia);Ec=n(cl,"Instead, you can define the function via "),pa=e(cl,"A",{href:!0,rel:!0});var im=o(pa);_c=n(im,"function overloads"),im.forEach(a),Ac=n(cl,", which is to define multiple function signatures, followed by the implementation:"),cl.forEach(a),Ic=p(d),ae=e(d,"DIV",{class:!0});var pg=o(ae);pg.forEach(a),Tc=p(d),Q=e(d,"P",{});var Vs=o(Q);Sc=n(Vs,"Alternatively, you can define a "),ca=e(Vs,"A",{href:!0,rel:!0});var pm=o(ca);Kc=n(pm,"generic function"),pm.forEach(a),Bc=n(Vs,", which declares a "),Mr=e(Vs,"EM",{});var cm=o(Mr);Dc=n(cm,"type parameter"),cm.forEach(a),Cc=n(Vs,", and describe the argument type and return type in terms of the "),Nr=e(Vs,"EM",{});var km=o(Nr);Vc=n(km,"type parameter"),km.forEach(a),$c=n(Vs,":"),Vs.forEach(a),Oc=p(d),te=e(d,"DIV",{class:!0});var cg=o(te);cg.forEach(a),Hc=p(d),Y=e(d,"P",{});var $s=o(Y);Fc=n($s,"A plus point for generics is that the "),ee=e($s,"CODE",{class:!0});var ym=o(ee);Lc=n(ym,"Item"),ym.forEach(a),Rc=n($s," type can be any types, and TypeScript can infer what the "),oe=e($s,"CODE",{class:!0});var hm=o(oe);Mc=n(hm,"Item"),hm.forEach(a),Nc=n($s," type represents from the arguments you called the function with, and dictates what the return type should be based on the "),re=e($s,"CODE",{class:!0});var dm=o(re);jc=n(dm,"Item"),dm.forEach(a),Gc=n($s," type"),$s.forEach(a),Xc=p(d),ne=e(d,"DIV",{class:!0});var kg=o(ne);kg.forEach(a),zc=p(d),jr=e(d,"P",{});var vm=o(jr);qc=n(vm,"If you do it with function overload, on the other hand, you'll probably have to define each and every possible function signatures."),vm.forEach(a),Wc=p(d),Z=e(d,"P",{});var Os=o(Z);Jc=n(Os,"But maybe you just want to pass in "),le=e(Os,"CODE",{class:!0});var um=o(le);Uc=n(um,"string[]"),um.forEach(a),Qc=n(Os," or "),ie=e(Os,"CODE",{class:!0});var xm=o(ie);Yc=n(xm,"number[]"),xm.forEach(a),Zc=n(Os," to "),pe=e(Os,"CODE",{class:!0});var mm=o(pe);sk=n(mm,"firstElement(...)"),mm.forEach(a),ak=n(Os," only, so it's not a problem for function overloads."),Os.forEach(a),tk=p(d),vs=e(d,"P",{});var hr=o(vs);ek=n(hr,"Also, you can provide a constraint for the generic function, limiting that the "),ce=e(hr,"CODE",{class:!0});var fm=o(ce);ok=n(fm,"Item"),fm.forEach(a),rk=n(hr," type parameter can only be a certain type, by using the "),ke=e(hr,"CODE",{class:!0});var gm=o(ke);nk=n(gm,"extends"),gm.forEach(a),lk=n(hr," keyword:"),hr.forEach(a),ik=p(d),ye=e(d,"DIV",{class:!0});var yg=o(ye);yg.forEach(a),d.forEach(a),Gn=p(c),X=e(c,"SECTION",{});var Hs=o(X);Gr=e(Hs,"H2",{});var Pm=o(Gr);ka=e(Pm,"A",{href:!0,id:!0});var wm=o(ka);pk=n(wm,"Working on the problem"),wm.forEach(a),Pm.forEach(a),ck=p(Hs),ya=e(Hs,"P",{});var kl=o(ya);kk=n(kl,"Knowing "),he=e(kl,"A",{href:!0});var bm=o(he);yk=n(bm,"generic functions"),bm.forEach(a),hk=n(kl,", our solution to the problem will probably take the form:"),kl.forEach(a),dk=p(Hs),de=e(Hs,"DIV",{class:!0});var hg=o(de);hg.forEach(a),vk=p(Hs),K=e(Hs,"P",{});var F=o(K);uk=n(F,"We use a type parameter "),ve=e(F,"CODE",{class:!0});var Em=o(ve);xk=n(Em,"Path"),Em.forEach(a),mk=n(F,", which has to be a "),ue=e(F,"CODE",{class:!0});var _m=o(ue);fk=n(_m,"string"),_m.forEach(a),gk=n(F,". The "),xe=e(F,"CODE",{class:!0});var Am=o(xe);Pk=n(Am,"path"),Am.forEach(a),wk=n(F," argument is of type "),me=e(F,"CODE",{class:!0});var Im=o(me);bk=n(Im,"Path"),Im.forEach(a),Ek=n(F," and the callback will be "),fe=e(F,"CODE",{class:!0});var Tm=o(fe);_k=n(Tm,"CallbackFn<Path>"),Tm.forEach(a),Ak=n(F,", and the crux of the challenge is to figure out "),ge=e(F,"CODE",{class:!0});var Sm=o(ge);Ik=n(Sm,"CallbackFn<Path>"),Sm.forEach(a),Tk=n(F,"."),F.forEach(a),Hs.forEach(a),Xn=p(c),v=e(c,"SECTION",{});var x=o(v);Xr=e(x,"H3",{});var Km=o(Xr);ha=e(Km,"A",{href:!0,id:!0});var Bm=o(ha);Sk=n(Bm,"The Game Plan"),Bm.forEach(a),Km.forEach(a),Kk=p(x),zr=e(x,"P",{});var Dm=o(zr);Bk=n(Dm,"So here's the plan:"),Dm.forEach(a),Dk=p(x),Pe=e(x,"OL",{start:!0});var Cm=o(Pe);us=e(Cm,"LI",{});var dr=o(us);Ck=n(dr,"Given the type of the path as "),we=e(dr,"CODE",{class:!0});var Vm=o(we);Vk=n(Vm,"Path"),Vm.forEach(a),$k=n(dr,", which is a "),be=e(dr,"A",{href:!0});var $m=o(be);Ok=n($m,"string literal type"),$m.forEach(a),Hk=n(dr,","),dr.forEach(a),Cm.forEach(a),Fk=p(x),Ee=e(x,"DIV",{class:!0});var dg=o(Ee);dg.forEach(a),Lk=p(x),qr=e(x,"OL",{});var Om=o(qr);_e=e(Om,"LI",{});var Nu=o(_e);Rk=n(Nu,"We derive a new type which has the string break into it's parts "),da=e(Nu,"EM",{});var yl=o(da);Mk=n(yl,"["),Ae=e(yl,"A",{href:!0});var Hm=o(Ae);Nk=n(Hm,"jump here"),Hm.forEach(a),jk=n(yl,"]"),yl.forEach(a),Nu.forEach(a),Om.forEach(a),Gk=p(x),Ie=e(x,"DIV",{class:!0});var vg=o(Ie);vg.forEach(a),Xk=p(x),Te=e(x,"OL",{start:!0});var Fm=o(Te);Se=e(Fm,"LI",{});var ju=o(Se);zk=n(ju,"Filter out the parts to contain only the params "),va=e(ju,"EM",{});var hl=o(va);qk=n(hl,"["),Ke=e(hl,"A",{href:!0});var Lm=o(Ke);Wk=n(Lm,"jump here"),Lm.forEach(a),Jk=n(hl,"]"),hl.forEach(a),ju.forEach(a),Fm.forEach(a),Uk=p(x),Be=e(x,"DIV",{class:!0});var ug=o(Be);ug.forEach(a),Qk=p(x),De=e(x,"OL",{start:!0});var Rm=o(De);Ce=e(Rm,"LI",{});var Gu=o(Ce);Yk=n(Gu,"Remove the brackets "),ua=e(Gu,"EM",{});var dl=o(ua);Zk=n(dl,"["),Ve=e(dl,"A",{href:!0});var Mm=o(Ve);sy=n(Mm,"jump here"),Mm.forEach(a),ay=n(dl,"]"),dl.forEach(a),Gu.forEach(a),Rm.forEach(a),ty=p(x),$e=e(x,"DIV",{class:!0});var xg=o($e);xg.forEach(a),ey=p(x),Oe=e(x,"OL",{start:!0});var Nm=o(Oe);_s=e(Nm,"LI",{});var Vn=o(_s);oy=n(Vn,"Map the parts into an "),xa=e(Vn,"A",{href:!0,rel:!0});var jm=o(xa);ry=n(jm,"object type"),jm.forEach(a),ny=p(Vn),ma=e(Vn,"EM",{});var vl=o(ma);ly=n(vl,"["),He=e(vl,"A",{href:!0});var Gm=o(He);iy=n(Gm,"jump here"),Gm.forEach(a),py=n(vl,"]"),vl.forEach(a),Vn.forEach(a),Nm.forEach(a),cy=p(x),Fe=e(x,"DIV",{class:!0});var mg=o(Fe);mg.forEach(a),ky=p(x),Le=e(x,"OL",{start:!0});var Xm=o(Le);As=e(Xm,"LI",{});var $n=o(As);yy=n($n,"Using "),fa=e($n,"A",{href:!0,rel:!0});var zm=o(fa);hy=n(zm,"Conditional Types"),zm.forEach(a),dy=n($n," to define the map value "),ga=e($n,"EM",{});var ul=o(ga);vy=n(ul,"["),Re=e(ul,"A",{href:!0});var qm=o(Re);uy=n(qm,"jump here"),qm.forEach(a),xy=n(ul,"]"),ul.forEach(a),$n.forEach(a),Xm.forEach(a),my=p(x),Me=e(x,"DIV",{class:!0});var fg=o(Me);fg.forEach(a),fy=p(x),Ne=e(x,"OL",{start:!0});var Wm=o(Ne);os=e(Wm,"LI",{});var lt=o(os);gy=n(lt,"Remap keys to remove "),je=e(lt,"CODE",{class:!0});var Jm=o(je);Py=n(Jm,"'...'"),Jm.forEach(a),wy=n(lt," in "),Ge=e(lt,"CODE",{class:!0});var Um=o(Ge);by=n(Um,"...args"),Um.forEach(a),Ey=p(lt),Pa=e(lt,"EM",{});var xl=o(Pa);_y=n(xl,"["),Xe=e(xl,"A",{href:!0});var Qm=o(Xe);Ay=n(Qm,"jump here"),Qm.forEach(a),Iy=n(xl,"]"),xl.forEach(a),lt.forEach(a),Wm.forEach(a),Ty=p(x),ze=e(x,"DIV",{class:!0});var gg=o(ze);gg.forEach(a),Sy=p(x),qe=e(x,"OL",{start:!0});var Ym=o(qe);Wr=e(Ym,"LI",{});var Zm=o(Wr);Ky=n(Zm,"Finally"),Zm.forEach(a),Ym.forEach(a),By=p(x),We=e(x,"DIV",{class:!0});var Pg=o(We);Pg.forEach(a),x.forEach(a),zn=p(c),f=e(c,"SECTION",{});var b=o(f);Jr=e(b,"H3",{});var sf=o(Jr);wa=e(sf,"A",{href:!0,id:!0});var af=o(wa);Dy=n(af,"Splitting a String Literal Type"),af.forEach(a),sf.forEach(a),Cy=p(b),ba=e(b,"P",{});var ml=o(ba);Vy=n(ml,"To split a string literal type, we can use a "),Je=e(ml,"A",{href:!0});var tf=o(Je);$y=n(tf,"conditional type"),tf.forEach(a),Oy=n(ml," to check the value of the string literal:"),ml.forEach(a),Hy=p(b),Ue=e(b,"DIV",{class:!0});var wg=o(Ue);wg.forEach(a),Fy=p(b),Ur=e(b,"P",{});var ef=o(Ur);Ly=n(ef,"but to take in any string literal, that we have no idea of the value ahead of time,"),ef.forEach(a),Ry=p(b),Qe=e(b,"DIV",{class:!0});var bg=o(Qe);bg.forEach(a),My=p(b),Ea=e(b,"P",{});var fl=o(Ea);Ny=n(fl,"we will have to "),Ye=e(fl,"CODE",{class:!0});var of=o(Ye);jy=n(of,"infer"),of.forEach(a),Gy=n(fl," the value in the conditional tests, and use the inferred value type:"),fl.forEach(a),Xy=p(b),Ze=e(b,"DIV",{class:!0});var Eg=o(Ze);Eg.forEach(a),zy=p(b),xs=e(b,"P",{});var vr=o(xs);qy=n(vr,`And if you pass in a string literal that does not match the pattern, we want to return the same string literal type passed in.
So, we return the `),so=e(vr,"CODE",{class:!0});var rf=o(so);Wy=n(rf,"Path"),rf.forEach(a),Jy=n(vr," type in the "),ao=e(vr,"CODE",{class:!0});var nf=o(ao);Uy=n(nf,"false"),nf.forEach(a),Qy=n(vr," condition branch:"),vr.forEach(a),Yy=p(b),to=e(b,"DIV",{class:!0});var _g=o(to);_g.forEach(a),Zy=p(b),ms=e(b,"P",{});var ur=o(ms);sh=n(ur,"At this point, you noticed that "),eo=e(ur,"CODE",{class:!0});var lf=o(eo);ah=n(lf,"PartA"),lf.forEach(a),th=n(ur,' will infer "non-greedily", ie: it will try to infer as much as possible, but do not contain a '),oo=e(ur,"CODE",{class:!0});var pf=o(oo);eh=n(pf,'"/"'),pf.forEach(a),oh=n(ur," character:"),ur.forEach(a),rh=p(b),ro=e(b,"DIV",{class:!0});var Ag=o(ro);Ag.forEach(a),nh=p(b),ss=e(b,"P",{});var Fs=o(ss);lh=n(Fs,"So, to split the "),no=e(Fs,"CODE",{class:!0});var cf=o(no);ih=n(cf,"Path"),cf.forEach(a),ph=n(Fs," string literal recursively, we can return the type "),lo=e(Fs,"CODE",{class:!0});var kf=o(lo);ch=n(kf,"Parts<PathB>"),kf.forEach(a),kh=n(Fs," instead of "),io=e(Fs,"CODE",{class:!0});var yf=o(io);yh=n(yf,"PathB"),yf.forEach(a),hh=n(Fs,":"),Fs.forEach(a),dh=p(b),po=e(b,"DIV",{class:!0});var Ig=o(po);Ig.forEach(a),vh=p(b),Qr=e(b,"P",{});var hf=o(Qr);uh=n(hf,"Here's the breakdown of what happened:"),hf.forEach(a),xh=p(b),co=e(b,"DIV",{class:!0});var Tg=o(co);Tg.forEach(a),b.forEach(a),qn=p(c),g=e(c,"SECTION",{});var E=o(g);Yr=e(E,"H3",{});var df=o(Yr);_a=e(df,"A",{href:!0,id:!0});var vf=o(_a);mh=n(vf,"Filter out only the parts containing the param syntax"),vf.forEach(a),df.forEach(a),fh=p(E),Aa=e(E,"P",{});var gl=o(Aa);gh=n(gl,"The key to this step is the observation that "),fs=e(gl,"STRONG",{});var xr=o(fs);Ph=n(xr,"any type "),Ia=e(xr,"A",{href:!0,rel:!0});var uf=o(Ia);wh=n(uf,"unions"),uf.forEach(a),bh=n(xr," with "),ko=e(xr,"CODE",{class:!0});var xf=o(ko);Eh=n(xf,"never"),xf.forEach(a),_h=n(xr," yields the type itself"),xr.forEach(a),Ah=n(gl,"."),gl.forEach(a),Ih=p(E),yo=e(E,"DIV",{class:!0});var Sg=o(yo);Sg.forEach(a),Th=p(E),Zr=e(E,"P",{});var mf=o(Zr);Sh=n(mf,"If we can transform"),mf.forEach(a),Kh=p(E),ho=e(E,"DIV",{class:!0});var Kg=o(ho);Kg.forEach(a),Bh=p(E),sn=e(E,"P",{});var ff=o(sn);Dh=n(ff,"into"),ff.forEach(a),Ch=p(E),vo=e(E,"DIV",{class:!0});var Bg=o(vo);Bg.forEach(a),Vh=p(E),an=e(E,"P",{});var gf=o(an);$h=n(gf,"then we will have"),gf.forEach(a),Oh=p(E),uo=e(E,"DIV",{class:!0});var Dg=o(uo);Dg.forEach(a),Hh=p(E),tn=e(E,"P",{});var Pf=o(tn);Fh=n(Pf,"So, how, you asked?"),Pf.forEach(a),Lh=p(E),j=e(E,"P",{});var ps=o(j);Rh=n(ps,"Well, we'll have to reach out to "),xo=e(ps,"A",{href:!0});var wf=o(xo);Mh=n(wf,"conditional types"),wf.forEach(a),Nh=n(ps," again for help, we can have a conditional type that returns the string literal itself if it starts with "),mo=e(ps,"CODE",{class:!0});var bf=o(mo);jh=n(bf,"["),bf.forEach(a),Gh=n(ps," and ends with "),fo=e(ps,"CODE",{class:!0});var Ef=o(fo);Xh=n(Ef,"]"),Ef.forEach(a),zh=n(ps,", and "),go=e(ps,"CODE",{class:!0});var _f=o(go);qh=n(_f,"never"),_f.forEach(a),Wh=n(ps," if otherwise:"),ps.forEach(a),Jh=p(E),Po=e(E,"DIV",{class:!0});var Cg=o(Po);Cg.forEach(a),Uh=p(E),Ta=e(E,"P",{});var Pl=o(Ta);Qh=n(Pl,"Although we have no idea what the string content is in between "),wo=e(Pl,"CODE",{class:!0});var Af=o(wo);Yh=n(Af,"[]"),Af.forEach(a),Zh=n(Pl,", but we can infer it in the conditional type, and we do not have to use the inferred type."),Pl.forEach(a),sd=p(E),en=e(E,"P",{});var If=o(en);ad=n(If,"Combining this with the previous step, we have:"),If.forEach(a),td=p(E),bo=e(E,"DIV",{class:!0});var Vg=o(bo);Vg.forEach(a),E.forEach(a),Wn=p(c),H=e(c,"SECTION",{});var cs=o(H);on=e(cs,"H3",{});var Tf=o(on);Sa=e(Tf,"A",{href:!0,id:!0});var Sf=o(Sa);ed=n(Sf,"Removing the brackets"),Sf.forEach(a),Tf.forEach(a),od=p(cs),rn=e(cs,"P",{});var Kf=o(rn);rd=n(Kf,"If you've been following along until this point, you probably have a clearer idea on how we can achieve this step."),Kf.forEach(a),nd=p(cs),Is=e(cs,"P",{});var On=o(Is);ld=n(On,"So, why not take a pause and "),Ka=e(On,"A",{href:!0,rel:!0});var Bf=o(Ka);id=n(Bf,"try it out in the TypeScript Playground"),Bf.forEach(a),pd=n(On,"? "),nn=e(On,"EM",{});var Df=o(nn);cd=n(Df,"(I've added the boilerplate code in the link)"),Df.forEach(a),On.forEach(a),kd=p(cs),Ts=e(cs,"P",{});var Hn=o(Ts);yd=n(Hn,"To remove the bracket, we can modify the conditional type in the last step, and instead of returning the "),Eo=e(Hn,"CODE",{class:!0});var Cf=o(Eo);hd=n(Cf,"Part"),Cf.forEach(a),dd=n(Hn,", we return the inferred type between the "),_o=e(Hn,"CODE",{class:!0});var Vf=o(_o);vd=n(Vf,"[]"),Vf.forEach(a),Hn.forEach(a),ud=p(cs),Ao=e(cs,"DIV",{class:!0});var $g=o(Ao);$g.forEach(a),cs.forEach(a),Jn=p(c),A=e(c,"SECTION",{});var T=o(A);ln=e(T,"H3",{});var $f=o(ln);Ba=e($f,"A",{href:!0,id:!0});var Of=o(Ba);xd=n(Of,"Map the parts into an Object Type"),Of.forEach(a),$f.forEach(a),md=p(T),Da=e(T,"P",{});var wl=o(Da);fd=n(wl,"In this step, we are going to create an "),Ca=e(wl,"A",{href:!0,rel:!0});var Hf=o(Ca);gd=n(Hf,"Object Types"),Hf.forEach(a),Pd=n(wl," using the result of the previous step as the key."),wl.forEach(a),wd=p(T),pn=e(T,"P",{});var Ff=o(pn);bd=n(Ff,"If you know the key type beforehand, you can create an object type via a type alias:"),Ff.forEach(a),Ed=p(T),Io=e(T,"DIV",{class:!0});var Og=o(Io);Og.forEach(a),_d=p(T),Va=e(T,"P",{});var bl=o(Va);Ad=n(bl,"If the key type is totally unknown, you can use the "),$a=e(bl,"A",{href:!0,rel:!0});var Lf=o($a);Id=n(Lf,"Index Signature"),Lf.forEach(a),Td=n(bl,":"),bl.forEach(a),Sd=p(T),To=e(T,"DIV",{class:!0});var Hg=o(To);Hg.forEach(a),Kd=p(T),Oa=e(T,"P",{});var El=o(Oa);Bd=n(El,"However, in our case, the key type is not totally unknown, but it is dynamic. We use "),Ha=e(El,"A",{href:!0,rel:!0});var Rf=o(Ha);Dd=n(Rf,"Mapped Types"),Rf.forEach(a),Cd=n(El," which has a similar syntax as the index signature:"),El.forEach(a),Vd=p(T),So=e(T,"DIV",{class:!0});var Fg=o(So);Fg.forEach(a),$d=p(T),cn=e(T,"P",{});var Mf=o(cn);Od=n(Mf,"Building this on top of the previous step, we have:"),Mf.forEach(a),Hd=p(T),Ko=e(T,"DIV",{class:!0});var Lg=o(Ko);Lg.forEach(a),T.forEach(a),Un=p(c),P=e(c,"SECTION",{});var _=o(P);kn=e(_,"H3",{});var Nf=o(kn);Fa=e(Nf,"A",{href:!0,id:!0});var jf=o(Fa);Fd=n(jf,"Defining the map value"),jf.forEach(a),Nf.forEach(a),Ld=p(_),yn=e(_,"P",{});var Gf=o(yn);Rd=n(Gf,"Now if I ask you to come up with a type that is depending on the key value:"),Gf.forEach(a),Md=p(_),La=e(_,"UL",{});var _l=o(La);Ss=e(_l,"LI",{});var Fn=o(Ss);Nd=n(Fn,"if it is a string literal type that starts with "),Bo=e(Fn,"CODE",{class:!0});var Xf=o(Bo);jd=n(Xf,"..."),Xf.forEach(a),Gd=n(Fn,", "),Do=e(Fn,"STRONG",{});var Xu=o(Do);Xd=n(Xu,"return a type "),Co=e(Xu,"CODE",{class:!0});var zf=o(Co);zd=n(zf,"string[]"),zf.forEach(a),Xu.forEach(a),Fn.forEach(a),qd=p(_l),Vo=e(_l,"LI",{});var zu=o(Vo);Wd=n(zu,"else, "),$o=e(zu,"STRONG",{});var qu=o($o);Jd=n(qu,"return a type "),Oo=e(qu,"CODE",{class:!0});var qf=o(Oo);Ud=n(qf,"number"),qf.forEach(a),qu.forEach(a),zu.forEach(a),_l.forEach(a),Qd=p(_),Ra=e(_,"P",{});var Al=o(Ra);Yd=n(Al,"I hope that your inner voice is shouting "),Ho=e(Al,"A",{href:!0});var Wf=o(Ho);Zd=n(Wf,"Conditional Types"),Wf.forEach(a),sv=n(Al,"!"),Al.forEach(a),av=p(_),hn=e(_,"P",{});var Jf=o(hn);tv=n(Jf,"And yes, we are going to use a Conditional Type:"),Jf.forEach(a),ev=p(_),Fo=e(_,"DIV",{class:!0});var Rg=o(Fo);Rg.forEach(a),ov=p(_),Ma=e(_,"P",{});var Il=o(Ma);rv=n(Il,"But how do we get the "),Lo=e(Il,"CODE",{class:!0});var Uf=o(Lo);nv=n(Uf,"Key"),Uf.forEach(a),lv=n(Il," type?"),Il.forEach(a),iv=p(_),gs=e(_,"P",{});var mr=o(gs);pv=n(mr,"Well, in Mapped Types, when you write "),Ro=e(mr,"CODE",{class:!0});var Qf=o(Ro);cv=n(Qf,"{ [Key in ???]: any }"),Qf.forEach(a),kv=n(mr,", the "),Mo=e(mr,"CODE",{class:!0});var Yf=o(Mo);yv=n(Yf,"Key"),Yf.forEach(a),hv=n(mr," is the type alias of the key, which you can map it in the value type."),mr.forEach(a),dv=p(_),dn=e(_,"P",{});var Zf=o(dn);vv=n(Zf,"So writing this:"),Zf.forEach(a),uv=p(_),No=e(_,"DIV",{class:!0});var Mg=o(No);Mg.forEach(a),xv=p(_),vn=e(_,"P",{});var s1=o(vn);mv=n(s1,"is the same as doing"),s1.forEach(a),fv=p(_),jo=e(_,"DIV",{class:!0});var Ng=o(jo);Ng.forEach(a),gv=p(_),un=e(_,"P",{});var a1=o(un);Pv=n(a1,"So, adding this on top of the previous step:"),a1.forEach(a),wv=p(_),Go=e(_,"DIV",{class:!0});var jg=o(Go);jg.forEach(a),_.forEach(a),Qn=p(c),D=e(c,"SECTION",{});var W=o(D);xn=e(W,"H3",{});var t1=o(xn);Ks=e(t1,"A",{href:!0,id:!0});var Wu=o(Ks);bv=n(Wu,"Remap keys to remove "),Xo=e(Wu,"CODE",{class:!0});var e1=o(Xo);Ev=n(e1,"'...'"),e1.forEach(a),Wu.forEach(a),t1.forEach(a),_v=p(W),as=e(W,"P",{});var Ls=o(as);Av=n(Ls,"Now the final step. We are going to remove "),zo=e(Ls,"CODE",{class:!0});var o1=o(zo);Iv=n(o1,"'...'"),o1.forEach(a),Tv=n(Ls," from the "),qo=e(Ls,"CODE",{class:!0});var r1=o(qo);Sv=n(r1,"'...args'"),r1.forEach(a),Kv=n(Ls," key, and I hope you can now proudly come up with the "),Wo=e(Ls,"A",{href:!0});var n1=o(Wo);Bv=n(n1,"Conditional Types"),n1.forEach(a),Dv=n(Ls," for it:"),Ls.forEach(a),Cv=p(W),Jo=e(W,"DIV",{class:!0});var Gg=o(Jo);Gg.forEach(a),Vv=p(W),Na=e(W,"P",{});var Tl=o(Na);$v=n(Tl,"But to apply this onto our Mapped Type, you can do a "),Bs=e(Tl,"A",{href:!0,rel:!0});var Ju=o(Bs);Ov=n(Ju,"Key Remapping via "),Uo=e(Ju,"CODE",{class:!0});var l1=o(Uo);Hv=n(l1,"as"),l1.forEach(a),Ju.forEach(a),Fv=n(Tl,", which is available from TypeScript 4.1"),Tl.forEach(a),Lv=p(W),Qo=e(W,"DIV",{class:!0});var Xg=o(Qo);Xg.forEach(a),Rv=p(W),mn=e(W,"P",{});var i1=o(mn);Mv=n(i1,"And there you go!"),i1.forEach(a),W.forEach(a),Yn=p(c),rs=e(c,"SECTION",{});var fr=o(rs);fn=e(fr,"H3",{});var p1=o(fn);ja=e(p1,"A",{href:!0,id:!0});var c1=o(ja);Nv=n(c1,"The Solution"),c1.forEach(a),p1.forEach(a),jv=p(fr),Ga=e(fr,"P",{});var Sl=o(Ga);Gv=n(Sl,"Here's the final solution to "),Yo=e(Sl,"A",{href:!0});var k1=o(Yo);Xv=n(k1,"the challenge"),k1.forEach(a),zv=n(Sl,":"),Sl.forEach(a),qv=p(fr),Zo=e(fr,"DIV",{class:!0});var zg=o(Zo);zg.forEach(a),fr.forEach(a),Zn=p(c),C=e(c,"SECTION",{});var J=o(C);gn=e(J,"H2",{});var y1=o(gn);Xa=e(y1,"A",{href:!0,id:!0});var h1=o(Xa);Wv=n(h1,"Conclusion"),h1.forEach(a),y1.forEach(a),Jv=p(J),Pn=e(J,"P",{});var d1=o(Pn);Uv=n(d1,"I hope this is a fun challenge for you."),d1.forEach(a),Qv=p(J),Ps=e(J,"P",{});var gr=o(Ps);Yv=n(gr,"As you can see, there's endless possibilities with "),sr=e(gr,"A",{href:!0});var v1=o(sr);Zv=n(v1,"Conditional Types"),v1.forEach(a),su=n(gr," and "),ar=e(gr,"A",{href:!0});var u1=o(ar);au=n(u1,"Template Literal Types"),u1.forEach(a),tu=n(gr,", allowing you to parse and derive types from a string literal type."),gr.forEach(a),eu=p(J),za=e(J,"P",{});var Kl=o(za);ou=n(Kl,"Before you go, here's another challenge, see if you can come up with the type for "),tr=e(Kl,"CODE",{class:!0});var x1=o(tr);ru=n(x1,"Parse<Str>"),x1.forEach(a),nu=n(Kl,":"),Kl.forEach(a),lu=p(J),er=e(J,"DIV",{class:!0});var qg=o(er);qg.forEach(a),iu=p(J),or=e(J,"P",{});var Uu=o(or);pu=n(Uu,"And you just wanna see the answer, "),qa=e(Uu,"A",{href:!0,rel:!0});var m1=o(qa);cu=n(m1,"here's the link to it"),m1.forEach(a),Uu.forEach(a),J.forEach(a),sl=p(c),ns=e(c,"SECTION",{});var Pr=o(ns);wn=e(Pr,"H2",{});var f1=o(wn);Wa=e(f1,"A",{href:!0,id:!0});var g1=o(Wa);ku=n(g1,"Extra"),g1.forEach(a),f1.forEach(a),yu=p(Pr),Ja=e(Pr,"P",{});var Bl=o(Ja);hu=n(Bl,"Here's the type I defined for the "),rr=e(Bl,"CODE",{class:!0});var P1=o(rr);du=n(P1,"Route"),P1.forEach(a),vu=n(Bl," component in the example above"),Bl.forEach(a),uu=p(Pr),nr=e(Pr,"DIV",{class:!0});var Wg=o(nr);Wg.forEach(a),Pr.forEach(a),al=p(c),Ds=e(c,"SECTION",{});var Dl=o(Ds);bn=e(Dl,"H2",{});var w1=o(bn);Ua=e(w1,"A",{href:!0,id:!0});var b1=o(Ua);xu=n(b1,"References"),b1.forEach(a),w1.forEach(a),mu=p(Dl),ws=e(Dl,"UL",{});var wr=o(ws);lr=e(wr,"LI",{});var Qu=o(lr);fu=n(Qu,"TypeScript Docs"),S=e(Qu,"UL",{});var V=o(S);En=e(V,"LI",{});var E1=o(En);Qa=e(E1,"A",{href:!0,rel:!0});var _1=o(Qa);gu=n(_1,"Literal Types"),_1.forEach(a),E1.forEach(a),Pu=p(V),_n=e(V,"LI",{});var A1=o(_n);Ya=e(A1,"A",{href:!0,rel:!0});var I1=o(Ya);wu=n(I1,"Union Types"),I1.forEach(a),A1.forEach(a),bu=p(V),An=e(V,"LI",{});var T1=o(An);Za=e(T1,"A",{href:!0,rel:!0});var S1=o(Za);Eu=n(S1,"Conditional Types"),S1.forEach(a),T1.forEach(a),_u=p(V),In=e(V,"LI",{});var K1=o(In);st=e(K1,"A",{href:!0,rel:!0});var B1=o(st);Au=n(B1,"Function Overloads"),B1.forEach(a),K1.forEach(a),Iu=p(V),Tn=e(V,"LI",{});var D1=o(Tn);at=e(D1,"A",{href:!0,rel:!0});var C1=o(at);Tu=n(C1,"Generic Functions"),C1.forEach(a),D1.forEach(a),Su=p(V),Sn=e(V,"LI",{});var V1=o(Sn);tt=e(V1,"A",{href:!0,rel:!0});var $1=o(tt);Ku=n($1,"Objects"),$1.forEach(a),V1.forEach(a),Bu=p(V),Kn=e(V,"LI",{});var O1=o(Kn);et=e(O1,"A",{href:!0,rel:!0});var H1=o(et);Du=n(H1,"Mapped Types"),H1.forEach(a),O1.forEach(a),Cu=p(V),Bn=e(V,"LI",{});var F1=o(Bn);ot=e(F1,"A",{href:!0,rel:!0});var L1=o(ot);Vu=n(L1,"Template Literal Types"),L1.forEach(a),F1.forEach(a),V.forEach(a),Qu.forEach(a),$u=p(wr),Dn=e(wr,"LI",{});var R1=o(Dn);rt=e(R1,"A",{href:!0,rel:!0});var M1=o(rt);Ou=n(M1,"String Literal Types in TypeScript"),M1.forEach(a),R1.forEach(a),Hu=p(wr),Cn=e(wr,"LI",{});var N1=o(Cn);nt=e(N1,"A",{href:!0,rel:!0});var j1=o(nt);Fu=n(j1,"Index Signatures in TypeScript"),j1.forEach(a),N1.forEach(a),wr.forEach(a),Dl.forEach(a),this.h()},h(){l(L,"href","#the-challenge"),l(L,"id","the-challenge"),l(ct,"class","inline"),l(kt,"class","code-section"),l(ht,"class","inline"),l(dt,"class","inline"),l(vt,"class","inline"),l(ut,"class","inline"),l(xt,"class","code-section"),l(Gs,"href","https://v5.reactrouter.com/"),l(Gs,"rel","nofollow"),l(mt,"class","inline"),l(Xs,"href","https://v5.reactrouter.com/web/api/Route/render-func"),l(Xs,"rel","nofollow"),l(ft,"class","inline"),l(gt,"class","code-section"),l(zs,"href","#things-you-need-to-know"),l(zs,"id","things-you-need-to-know"),l(qs,"href","#string-literal-type"),l(qs,"id","string-literal-type"),l(Pt,"class","inline"),l(wt,"class","code-section"),l(Us,"href","https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#literal-types"),l(Us,"rel","nofollow"),l(bt,"class","code-section"),l(Ys,"href","https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types"),l(Ys,"rel","nofollow"),l(Et,"class","code-section"),l(_t,"class","inline"),l(At,"class","inline"),l(It,"class","code-section"),l(Tt,"class","code-section"),l(Kt,"class","inline"),l(Es,"href","https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#const-assertions"),l(Es,"rel","nofollow"),l(Bt,"class","code-section"),l(Dt,"class","inline"),l(Ct,"class","inline"),l(Vt,"class","inline"),l(Zs,"href","#template-literal-and-string-literal-types"),l(Zs,"id","template-literal-and-string-literal-types"),l(sa,"href","https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-1.html#template-literal-types"),l(sa,"rel","nofollow"),l(aa,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"),l(aa,"rel","nofollow"),l($t,"class","code-section"),l(ta,"href","#conditional-type"),l(ta,"id","conditional-type"),l(ea,"href","https://www.typescriptlang.org/docs/handbook/2/conditional-types.html"),l(ea,"rel","nofollow"),l(Ot,"class","inline"),l(Ht,"class","inline"),l(Ft,"class","inline"),l(Lt,"class","inline"),l(Rt,"class","code-section"),l(Mt,"class","inline"),l(Nt,"class","inline"),l(jt,"class","inline"),l(Gt,"class","inline"),l(Xt,"class","inline"),l(zt,"class","code-section"),l(ra,"href","#function-overloads-and-generic-functions"),l(ra,"id","function-overloads-and-generic-functions"),l(na,"href","https://www.typescriptlang.org/docs/handbook/2/functions.html#function-overloads"),l(na,"rel","nofollow"),l(la,"href","https://www.typescriptlang.org/docs/handbook/2/functions.html#generic-functions"),l(la,"rel","nofollow"),l(qt,"class","code-section"),l(Wt,"class","code-section"),l(Jt,"class","code-section"),l(Ut,"class","inline"),l(Qt,"class","inline"),l(Yt,"class","inline"),l(Zt,"class","inline"),l(se,"class","inline"),l(pa,"href","https://www.typescriptlang.org/docs/handbook/2/functions.html#function-overloads"),l(pa,"rel","nofollow"),l(ae,"class","code-section"),l(ca,"href","https://www.typescriptlang.org/docs/handbook/2/functions.html#generic-functions"),l(ca,"rel","nofollow"),l(te,"class","code-section"),l(ee,"class","inline"),l(oe,"class","inline"),l(re,"class","inline"),l(ne,"class","code-section"),l(le,"class","inline"),l(ie,"class","inline"),l(pe,"class","inline"),l(ce,"class","inline"),l(ke,"class","inline"),l(ye,"class","code-section"),l(ka,"href","#working-on-the-problem"),l(ka,"id","working-on-the-problem"),l(he,"href","#function-overloads-and-generic-functions"),l(de,"class","code-section"),l(ve,"class","inline"),l(ue,"class","inline"),l(xe,"class","inline"),l(me,"class","inline"),l(fe,"class","inline"),l(ge,"class","inline"),l(ha,"href","#the-game-plan"),l(ha,"id","the-game-plan"),l(we,"class","inline"),l(be,"href","#string-literal-type"),l(Pe,"start","0"),l(Ee,"class","code-section"),l(Ae,"href","#splitting-a-string-literal-type"),l(Ie,"class","code-section"),l(Ke,"href","#filter-out-only-the-parts-containing-the-param-syntax"),l(Te,"start","2"),l(Be,"class","code-section"),l(Ve,"href","#removing-the-brackets"),l(De,"start","3"),l($e,"class","code-section"),l(xa,"href","https://www.typescriptlang.org/docs/handbook/2/objects.html"),l(xa,"rel","nofollow"),l(He,"href","#map-the-parts-into-an-object-type"),l(Oe,"start","4"),l(Fe,"class","code-section"),l(fa,"href","https://www.typescriptlang.org/docs/handbook/2/conditional-types.html"),l(fa,"rel","nofollow"),l(Re,"href","#defining-the-map-value"),l(Le,"start","5"),l(Me,"class","code-section"),l(je,"class","inline"),l(Ge,"class","inline"),l(Xe,"href","#remap-keys-to-remove"),l(Ne,"start","6"),l(ze,"class","code-section"),l(qe,"start","7"),l(We,"class","code-section"),l(wa,"href","#splitting-a-string-literal-type"),l(wa,"id","splitting-a-string-literal-type"),l(Je,"href","#conditional-type"),l(Ue,"class","code-section"),l(Qe,"class","code-section"),l(Ye,"class","inline"),l(Ze,"class","code-section"),l(so,"class","inline"),l(ao,"class","inline"),l(to,"class","code-section"),l(eo,"class","inline"),l(oo,"class","inline"),l(ro,"class","code-section"),l(no,"class","inline"),l(lo,"class","inline"),l(io,"class","inline"),l(po,"class","code-section"),l(co,"class","code-section"),l(_a,"href","#filter-out-only-the-parts-containing-the-param-syntax"),l(_a,"id","filter-out-only-the-parts-containing-the-param-syntax"),l(Ia,"href","https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types"),l(Ia,"rel","nofollow"),l(ko,"class","inline"),l(yo,"class","code-section"),l(ho,"class","code-section"),l(vo,"class","code-section"),l(uo,"class","code-section"),l(xo,"href","#conditional-type"),l(mo,"class","inline"),l(fo,"class","inline"),l(go,"class","inline"),l(Po,"class","code-section"),l(wo,"class","inline"),l(bo,"class","code-section"),l(Sa,"href","#removing-the-brackets"),l(Sa,"id","removing-the-brackets"),l(Ka,"href","https://www.typescriptlang.org/play?#code/C4TwDgpgBAkgzgBQIYCckFsLAigPMlYAPigF4oDgoIAPbAOwBM4oADAbQBIBvAS3oBmOKAEF6IYAAt+AcwC+AXVZQA-BVRUAXFHoQAbjgDcAWABQoSFABivADbYUERpTj4kUkuWRTqdCExZWHn4hFHVCETkAemDBYUoAITlWMyhVWERUDCwcNwiSAB9rOwcnFzzgBKJUqG14AmyHNw8TUzMLaAb0OAB1XikAewBXSrQAYwBrLDJi+xwyjVcAciiwIZQxySQ4CCj2OEkBsF5GBT3+iHQTs9QZOD2AOifbuAUlokMgA"),l(Ka,"rel","nofollow"),l(Eo,"class","inline"),l(_o,"class","inline"),l(Ao,"class","code-section"),l(Ba,"href","#map-the-parts-into-an-object-type"),l(Ba,"id","map-the-parts-into-an-object-type"),l(Ca,"href","https://www.typescriptlang.org/docs/handbook/2/objects.html"),l(Ca,"rel","nofollow"),l(Io,"class","code-section"),l($a,"href","https://dmitripavlutin.com/typescript-index-signatures/"),l($a,"rel","nofollow"),l(To,"class","code-section"),l(Ha,"href","https://www.typescriptlang.org/docs/handbook/2/mapped-types.html"),l(Ha,"rel","nofollow"),l(So,"class","code-section"),l(Ko,"class","code-section"),l(Fa,"href","#defining-the-map-value"),l(Fa,"id","defining-the-map-value"),l(Bo,"class","inline"),l(Co,"class","inline"),l(Oo,"class","inline"),l(Ho,"href","#conditional-type"),l(Fo,"class","code-section"),l(Lo,"class","inline"),l(Ro,"class","inline"),l(Mo,"class","inline"),l(No,"class","code-section"),l(jo,"class","code-section"),l(Go,"class","code-section"),l(Xo,"class","inline"),l(Ks,"href","#remap-keys-to-remove"),l(Ks,"id","remap-keys-to-remove"),l(zo,"class","inline"),l(qo,"class","inline"),l(Wo,"href","#conditional-type"),l(Jo,"class","code-section"),l(Uo,"class","inline"),l(Bs,"href","https://www.typescriptlang.org/docs/handbook/2/mapped-types.html#key-remapping-via-as"),l(Bs,"rel","nofollow"),l(Qo,"class","code-section"),l(ja,"href","#the-solution"),l(ja,"id","the-solution"),l(Yo,"href","#the-challenge"),l(Zo,"class","code-section"),l(Xa,"href","#conclusion"),l(Xa,"id","conclusion"),l(sr,"href","#conditional-type"),l(ar,"href","#template-literal-and-string-literal-types"),l(tr,"class","inline"),l(er,"class","code-section"),l(qa,"href","https://www.typescriptlang.org/play?#code/C4TwDgpgBAchDOwIBMDKwBOBLAdgcwEEMMBDEKAXiiNJAB5Ft8oAfWBJNTXQ4sgPgDcAWABQoSFFQBrLGFRgSAYwh10GKBAAeSHMnhRGPfpSmZNOiHoMADKABIA3rgBmEDeoC+dgPxTZ8ooqapgmAFxmGCKiYhLQAAokGPAQ6iEa2rr6htz4JlRiUJEWWbYARE6u7lAAaiQANgCuEJ4VzjhuGgBKEAC2JLg83oVFUH4A2jJyCsqqPf2DeQA0tQ3NALojRRGTmCuNehAuuCjr0bHgCUkpAJJIveklVtlGeZQjicmpmOkmmc8GcZVbp9AY4HgrYGrJoQTaiUZjaHNJ7WHJMPBbUYTeZgiFI2GY7ZQT4pdQ8GhkX4o7JAjrVHGLPCQukaOowuEIhF+NnI-6ouCIFBk-AUkCEznY0GMlY8gnwzkInYM8H4faHY44U7ionjZV4g7II4nZAc0Y7dRqw0a07ncSXYnXCB3PrwR58l65JlQHrwRr1YDUgwCzjC3i0fIfR3Oh7qP6WVG0zreqUqr1Q2WmorctbQd1BjhCz2i8YABkzWOTC1TgagNiWlRZldx+GG8oVfhJTvurqmgVmdD1yyg4wAdGOfX7gDKc+t+NqoEqU3jR+OEJPp+zyzrB16J-7y+a9lADUbNSaxBdJJ3Q6K3fGPeiVnuA3n2IKuOjRaZxrPTCN1DWNjjA2SZeDYmIdlG3ZqAEMzBLGT5rv6calMOUI7sySbPluiI7oB6wgfSS4tuBbYSsOGHJr6+7zouVb6uqxo4YeGCWqeWpkSxbHWia0RxA6Xx3qhrx4PkUCRl8N58PQsY1omRH0aqUDoUhwDln4eGvgA5Fp4oaap4oRJqABu7iYkZECmVEF52pIACivRgKAX5UJ2dBaT+WlCGIAD0PmjAAej4l7QFJtCmG5HllAAFhA9T1AA9mUKxlAA7glGD1MgZTrF5vn+UUQUhW+nAuQJKTueMMVxYlyXDmlGVZXVZTAPAdVVQAhDl6wrFVmDkMA0VYG16y5XOoh+YFPhAA"),l(qa,"rel","nofollow"),l(Wa,"href","#extra"),l(Wa,"id","extra"),l(rr,"class","inline"),l(nr,"class","code-section"),l(Ua,"href","#references"),l(Ua,"id","references"),l(Qa,"href","https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#literal-types"),l(Qa,"rel","nofollow"),l(Ya,"href","https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types"),l(Ya,"rel","nofollow"),l(Za,"href","https://www.typescriptlang.org/docs/handbook/2/conditional-types.html"),l(Za,"rel","nofollow"),l(st,"href","https://www.typescriptlang.org/docs/handbook/2/functions.html#function-overloads"),l(st,"rel","nofollow"),l(at,"href","https://www.typescriptlang.org/docs/handbook/2/functions.html#generic-functions"),l(at,"rel","nofollow"),l(tt,"href","https://www.typescriptlang.org/docs/handbook/2/objects.html"),l(tt,"rel","nofollow"),l(et,"href","https://www.typescriptlang.org/docs/handbook/2/mapped-types.html"),l(et,"rel","nofollow"),l(ot,"href","https://www.typescriptlang.org/docs/handbook/2/template-literal-types.html"),l(ot,"rel","nofollow"),l(rt,"href","https://mariusschulz.com/blog/string-literal-types-in-typescript"),l(rt,"rel","nofollow"),l(nt,"href","https://dmitripavlutin.com/typescript-index-signatures/"),l(nt,"rel","nofollow")},m(c,k){m(c,y,k),s(y,G),s(G,L),s(L,Rs),s(y,I),s(y,R),s(R,pt),s(y,Cl),s(y,Ms),s(Ms,Vl),s(Ms,ct),s(ct,$l),s(Ms,Ol),s(y,Hl),s(y,kt),kt.innerHTML=q1,s(y,Fl),s(y,br),s(br,Er),s(Er,Ll),s(y,Rl),s(y,yt),s(yt,Ns),s(Ns,Ml),s(Ns,ht),s(ht,Nl),s(Ns,jl),s(yt,Gl),s(y,Xl),s(y,js),s(js,zl),s(js,dt),s(dt,ql),s(js,Wl),s(y,Jl),s(y,ks),s(ks,Ul),s(ks,vt),s(vt,Ql),s(ks,Yl),s(ks,ut),s(ut,Zl),s(ks,si),s(y,ai),s(y,_r),s(_r,ti),s(y,ei),s(y,xt),xt.innerHTML=W1,s(y,oi),s(y,M),s(M,ri),s(M,Gs),s(Gs,ni),s(M,li),s(M,mt),s(mt,ii),s(M,pi),s(M,Xs),s(Xs,ci),s(M,ki),s(M,ft),s(ft,yi),s(M,hi),s(y,di),s(y,gt),gt.innerHTML=J1,s(y,vi),s(y,Ar),s(Ar,ui),m(c,Ln,k),m(c,bs,k),s(bs,Ir),s(Ir,zs),s(zs,xi),s(bs,mi),s(bs,Tr),s(Tr,fi),m(c,Rn,k),m(c,u,k),s(u,Sr),s(Sr,qs),s(qs,gi),s(u,Pi),s(u,Ws),s(Ws,wi),s(Ws,Pt),s(Pt,bi),s(Ws,Ei),s(u,_i),s(u,wt),wt.innerHTML=U1,s(u,Ai),s(u,Js),s(Js,Ii),s(Js,Us),s(Us,Ti),s(Js,Si),s(u,Ki),s(u,bt),bt.innerHTML=Q1,s(u,Bi),s(u,Qs),s(Qs,Di),s(Qs,Ys),s(Ys,Ci),s(Qs,Vi),s(u,$i),s(u,Et),Et.innerHTML=Y1,s(u,Oi),s(u,Kr),s(Kr,Hi),s(u,Fi),s(u,ys),s(ys,Li),s(ys,_t),s(_t,Ri),s(ys,Mi),s(ys,At),s(At,Ni),s(ys,ji),s(u,Gi),s(u,It),It.innerHTML=Z1,s(u,Xi),s(u,Br),s(Br,zi),s(u,qi),s(u,Tt),Tt.innerHTML=s2,s(u,Wi),s(u,St),s(St,Ji),s(St,Es),s(Es,Kt),s(Kt,Ui),s(Es,Qi),s(u,Yi),s(u,Bt),Bt.innerHTML=a2,s(u,Zi),s(u,U),s(U,sp),s(U,Dt),s(Dt,ap),s(U,tp),s(U,Ct),s(Ct,ep),s(U,op),s(U,Vt),s(Vt,rp),s(U,np),s(u,lp),s(u,Dr),s(Dr,ip),m(c,Mn,k),m(c,es,k),s(es,Cr),s(Cr,Zs),s(Zs,pp),s(es,cp),s(es,hs),s(hs,kp),s(hs,sa),s(sa,yp),s(hs,hp),s(hs,aa),s(aa,dp),s(hs,vp),s(es,up),s(es,$t),$t.innerHTML=t2,m(c,Nn,k),m(c,B,k),s(B,Vr),s(Vr,ta),s(ta,xp),s(B,mp),s(B,O),s(O,ea),s(ea,fp),s(O,gp),s(O,Ot),s(Ot,Pp),s(O,wp),s(O,Ht),s(Ht,bp),s(O,Ep),s(O,Ft),s(Ft,_p),s(O,Ap),s(O,Lt),s(Lt,Ip),s(O,Tp),s(B,Sp),s(B,Rt),Rt.innerHTML=e2,s(B,Kp),s(B,N),s(N,Bp),s(N,Mt),s(Mt,Dp),s(N,Cp),s(N,Nt),s(Nt,Vp),s(N,$p),s(N,jt),s(jt,Op),s(N,Hp),s(N,Gt),s(Gt,Fp),s(N,Lp),s(B,Rp),s(B,oa),s(oa,Mp),s(oa,Xt),s(Xt,Np),s(oa,jp),s(B,Gp),s(B,zt),zt.innerHTML=o2,m(c,jn,k),m(c,h,k),s(h,$r),s($r,ra),s(ra,Xp),s(h,zp),s(h,ds),s(ds,qp),s(ds,na),s(na,Wp),s(ds,Jp),s(ds,la),s(la,Up),s(ds,Qp),s(h,Yp),s(h,Or),s(Or,Zp),s(h,sc),s(h,Hr),s(Hr,ac),s(h,tc),s(h,qt),qt.innerHTML=r2,s(h,ec),s(h,Fr),s(Fr,oc),s(h,rc),s(h,Wt),Wt.innerHTML=n2,s(h,nc),s(h,Lr),s(Lr,lc),s(h,ic),s(h,Rr),s(Rr,pc),s(h,cc),s(h,Jt),Jt.innerHTML=l2,s(h,kc),s(h,$),s($,yc),s($,Ut),s(Ut,hc),s($,dc),s($,Qt),s(Qt,vc),s($,uc),s($,Yt),s(Yt,xc),s($,mc),s($,Zt),s(Zt,fc),s($,gc),s($,se),s(se,Pc),s($,wc),s(h,bc),s(h,ia),s(ia,Ec),s(ia,pa),s(pa,_c),s(ia,Ac),s(h,Ic),s(h,ae),ae.innerHTML=i2,s(h,Tc),s(h,Q),s(Q,Sc),s(Q,ca),s(ca,Kc),s(Q,Bc),s(Q,Mr),s(Mr,Dc),s(Q,Cc),s(Q,Nr),s(Nr,Vc),s(Q,$c),s(h,Oc),s(h,te),te.innerHTML=p2,s(h,Hc),s(h,Y),s(Y,Fc),s(Y,ee),s(ee,Lc),s(Y,Rc),s(Y,oe),s(oe,Mc),s(Y,Nc),s(Y,re),s(re,jc),s(Y,Gc),s(h,Xc),s(h,ne),ne.innerHTML=c2,s(h,zc),s(h,jr),s(jr,qc),s(h,Wc),s(h,Z),s(Z,Jc),s(Z,le),s(le,Uc),s(Z,Qc),s(Z,ie),s(ie,Yc),s(Z,Zc),s(Z,pe),s(pe,sk),s(Z,ak),s(h,tk),s(h,vs),s(vs,ek),s(vs,ce),s(ce,ok),s(vs,rk),s(vs,ke),s(ke,nk),s(vs,lk),s(h,ik),s(h,ye),ye.innerHTML=k2,m(c,Gn,k),m(c,X,k),s(X,Gr),s(Gr,ka),s(ka,pk),s(X,ck),s(X,ya),s(ya,kk),s(ya,he),s(he,yk),s(ya,hk),s(X,dk),s(X,de),de.innerHTML=y2,s(X,vk),s(X,K),s(K,uk),s(K,ve),s(ve,xk),s(K,mk),s(K,ue),s(ue,fk),s(K,gk),s(K,xe),s(xe,Pk),s(K,wk),s(K,me),s(me,bk),s(K,Ek),s(K,fe),s(fe,_k),s(K,Ak),s(K,ge),s(ge,Ik),s(K,Tk),m(c,Xn,k),m(c,v,k),s(v,Xr),s(Xr,ha),s(ha,Sk),s(v,Kk),s(v,zr),s(zr,Bk),s(v,Dk),s(v,Pe),s(Pe,us),s(us,Ck),s(us,we),s(we,Vk),s(us,$k),s(us,be),s(be,Ok),s(us,Hk),s(v,Fk),s(v,Ee),Ee.innerHTML=h2,s(v,Lk),s(v,qr),s(qr,_e),s(_e,Rk),s(_e,da),s(da,Mk),s(da,Ae),s(Ae,Nk),s(da,jk),s(v,Gk),s(v,Ie),Ie.innerHTML=d2,s(v,Xk),s(v,Te),s(Te,Se),s(Se,zk),s(Se,va),s(va,qk),s(va,Ke),s(Ke,Wk),s(va,Jk),s(v,Uk),s(v,Be),Be.innerHTML=v2,s(v,Qk),s(v,De),s(De,Ce),s(Ce,Yk),s(Ce,ua),s(ua,Zk),s(ua,Ve),s(Ve,sy),s(ua,ay),s(v,ty),s(v,$e),$e.innerHTML=u2,s(v,ey),s(v,Oe),s(Oe,_s),s(_s,oy),s(_s,xa),s(xa,ry),s(_s,ny),s(_s,ma),s(ma,ly),s(ma,He),s(He,iy),s(ma,py),s(v,cy),s(v,Fe),Fe.innerHTML=x2,s(v,ky),s(v,Le),s(Le,As),s(As,yy),s(As,fa),s(fa,hy),s(As,dy),s(As,ga),s(ga,vy),s(ga,Re),s(Re,uy),s(ga,xy),s(v,my),s(v,Me),Me.innerHTML=m2,s(v,fy),s(v,Ne),s(Ne,os),s(os,gy),s(os,je),s(je,Py),s(os,wy),s(os,Ge),s(Ge,by),s(os,Ey),s(os,Pa),s(Pa,_y),s(Pa,Xe),s(Xe,Ay),s(Pa,Iy),s(v,Ty),s(v,ze),ze.innerHTML=f2,s(v,Sy),s(v,qe),s(qe,Wr),s(Wr,Ky),s(v,By),s(v,We),We.innerHTML=g2,m(c,zn,k),m(c,f,k),s(f,Jr),s(Jr,wa),s(wa,Dy),s(f,Cy),s(f,ba),s(ba,Vy),s(ba,Je),s(Je,$y),s(ba,Oy),s(f,Hy),s(f,Ue),Ue.innerHTML=P2,s(f,Fy),s(f,Ur),s(Ur,Ly),s(f,Ry),s(f,Qe),Qe.innerHTML=w2,s(f,My),s(f,Ea),s(Ea,Ny),s(Ea,Ye),s(Ye,jy),s(Ea,Gy),s(f,Xy),s(f,Ze),Ze.innerHTML=b2,s(f,zy),s(f,xs),s(xs,qy),s(xs,so),s(so,Wy),s(xs,Jy),s(xs,ao),s(ao,Uy),s(xs,Qy),s(f,Yy),s(f,to),to.innerHTML=E2,s(f,Zy),s(f,ms),s(ms,sh),s(ms,eo),s(eo,ah),s(ms,th),s(ms,oo),s(oo,eh),s(ms,oh),s(f,rh),s(f,ro),ro.innerHTML=_2,s(f,nh),s(f,ss),s(ss,lh),s(ss,no),s(no,ih),s(ss,ph),s(ss,lo),s(lo,ch),s(ss,kh),s(ss,io),s(io,yh),s(ss,hh),s(f,dh),s(f,po),po.innerHTML=A2,s(f,vh),s(f,Qr),s(Qr,uh),s(f,xh),s(f,co),co.innerHTML=I2,m(c,qn,k),m(c,g,k),s(g,Yr),s(Yr,_a),s(_a,mh),s(g,fh),s(g,Aa),s(Aa,gh),s(Aa,fs),s(fs,Ph),s(fs,Ia),s(Ia,wh),s(fs,bh),s(fs,ko),s(ko,Eh),s(fs,_h),s(Aa,Ah),s(g,Ih),s(g,yo),yo.innerHTML=T2,s(g,Th),s(g,Zr),s(Zr,Sh),s(g,Kh),s(g,ho),ho.innerHTML=S2,s(g,Bh),s(g,sn),s(sn,Dh),s(g,Ch),s(g,vo),vo.innerHTML=K2,s(g,Vh),s(g,an),s(an,$h),s(g,Oh),s(g,uo),uo.innerHTML=B2,s(g,Hh),s(g,tn),s(tn,Fh),s(g,Lh),s(g,j),s(j,Rh),s(j,xo),s(xo,Mh),s(j,Nh),s(j,mo),s(mo,jh),s(j,Gh),s(j,fo),s(fo,Xh),s(j,zh),s(j,go),s(go,qh),s(j,Wh),s(g,Jh),s(g,Po),Po.innerHTML=D2,s(g,Uh),s(g,Ta),s(Ta,Qh),s(Ta,wo),s(wo,Yh),s(Ta,Zh),s(g,sd),s(g,en),s(en,ad),s(g,td),s(g,bo),bo.innerHTML=C2,m(c,Wn,k),m(c,H,k),s(H,on),s(on,Sa),s(Sa,ed),s(H,od),s(H,rn),s(rn,rd),s(H,nd),s(H,Is),s(Is,ld),s(Is,Ka),s(Ka,id),s(Is,pd),s(Is,nn),s(nn,cd),s(H,kd),s(H,Ts),s(Ts,yd),s(Ts,Eo),s(Eo,hd),s(Ts,dd),s(Ts,_o),s(_o,vd),s(H,ud),s(H,Ao),Ao.innerHTML=V2,m(c,Jn,k),m(c,A,k),s(A,ln),s(ln,Ba),s(Ba,xd),s(A,md),s(A,Da),s(Da,fd),s(Da,Ca),s(Ca,gd),s(Da,Pd),s(A,wd),s(A,pn),s(pn,bd),s(A,Ed),s(A,Io),Io.innerHTML=$2,s(A,_d),s(A,Va),s(Va,Ad),s(Va,$a),s($a,Id),s(Va,Td),s(A,Sd),s(A,To),To.innerHTML=O2,s(A,Kd),s(A,Oa),s(Oa,Bd),s(Oa,Ha),s(Ha,Dd),s(Oa,Cd),s(A,Vd),s(A,So),So.innerHTML=H2,s(A,$d),s(A,cn),s(cn,Od),s(A,Hd),s(A,Ko),Ko.innerHTML=F2,m(c,Un,k),m(c,P,k),s(P,kn),s(kn,Fa),s(Fa,Fd),s(P,Ld),s(P,yn),s(yn,Rd),s(P,Md),s(P,La),s(La,Ss),s(Ss,Nd),s(Ss,Bo),s(Bo,jd),s(Ss,Gd),s(Ss,Do),s(Do,Xd),s(Do,Co),s(Co,zd),s(La,qd),s(La,Vo),s(Vo,Wd),s(Vo,$o),s($o,Jd),s($o,Oo),s(Oo,Ud),s(P,Qd),s(P,Ra),s(Ra,Yd),s(Ra,Ho),s(Ho,Zd),s(Ra,sv),s(P,av),s(P,hn),s(hn,tv),s(P,ev),s(P,Fo),Fo.innerHTML=L2,s(P,ov),s(P,Ma),s(Ma,rv),s(Ma,Lo),s(Lo,nv),s(Ma,lv),s(P,iv),s(P,gs),s(gs,pv),s(gs,Ro),s(Ro,cv),s(gs,kv),s(gs,Mo),s(Mo,yv),s(gs,hv),s(P,dv),s(P,dn),s(dn,vv),s(P,uv),s(P,No),No.innerHTML=R2,s(P,xv),s(P,vn),s(vn,mv),s(P,fv),s(P,jo),jo.innerHTML=M2,s(P,gv),s(P,un),s(un,Pv),s(P,wv),s(P,Go),Go.innerHTML=N2,m(c,Qn,k),m(c,D,k),s(D,xn),s(xn,Ks),s(Ks,bv),s(Ks,Xo),s(Xo,Ev),s(D,_v),s(D,as),s(as,Av),s(as,zo),s(zo,Iv),s(as,Tv),s(as,qo),s(qo,Sv),s(as,Kv),s(as,Wo),s(Wo,Bv),s(as,Dv),s(D,Cv),s(D,Jo),Jo.innerHTML=j2,s(D,Vv),s(D,Na),s(Na,$v),s(Na,Bs),s(Bs,Ov),s(Bs,Uo),s(Uo,Hv),s(Na,Fv),s(D,Lv),s(D,Qo),Qo.innerHTML=G2,s(D,Rv),s(D,mn),s(mn,Mv),m(c,Yn,k),m(c,rs,k),s(rs,fn),s(fn,ja),s(ja,Nv),s(rs,jv),s(rs,Ga),s(Ga,Gv),s(Ga,Yo),s(Yo,Xv),s(Ga,zv),s(rs,qv),s(rs,Zo),Zo.innerHTML=X2,m(c,Zn,k),m(c,C,k),s(C,gn),s(gn,Xa),s(Xa,Wv),s(C,Jv),s(C,Pn),s(Pn,Uv),s(C,Qv),s(C,Ps),s(Ps,Yv),s(Ps,sr),s(sr,Zv),s(Ps,su),s(Ps,ar),s(ar,au),s(Ps,tu),s(C,eu),s(C,za),s(za,ou),s(za,tr),s(tr,ru),s(za,nu),s(C,lu),s(C,er),er.innerHTML=z2,s(C,iu),s(C,or),s(or,pu),s(or,qa),s(qa,cu),m(c,sl,k),m(c,ns,k),s(ns,wn),s(wn,Wa),s(Wa,ku),s(ns,yu),s(ns,Ja),s(Ja,hu),s(Ja,rr),s(rr,du),s(Ja,vu),s(ns,uu),s(ns,nr),nr.innerHTML=q2,m(c,al,k),m(c,Ds,k),s(Ds,bn),s(bn,Ua),s(Ua,xu),s(Ds,mu),s(Ds,ws),s(ws,lr),s(lr,fu),s(lr,S),s(S,En),s(En,Qa),s(Qa,gu),s(S,Pu),s(S,_n),s(_n,Ya),s(Ya,wu),s(S,bu),s(S,An),s(An,Za),s(Za,Eu),s(S,_u),s(S,In),s(In,st),s(st,Au),s(S,Iu),s(S,Tn),s(Tn,at),s(at,Tu),s(S,Su),s(S,Sn),s(Sn,tt),s(tt,Ku),s(S,Bu),s(S,Kn),s(Kn,et),s(et,Du),s(S,Cu),s(S,Bn),s(Bn,ot),s(ot,Vu),s(ws,$u),s(ws,Dn),s(Dn,rt),s(rt,Ou),s(ws,Hu),s(ws,Cn),s(Cn,nt),s(nt,Fu)},p:nP,d(c){c&&a(y),c&&a(Ln),c&&a(bs),c&&a(Rn),c&&a(u),c&&a(Mn),c&&a(es),c&&a(Nn),c&&a(B),c&&a(jn),c&&a(h),c&&a(Gn),c&&a(X),c&&a(Xn),c&&a(v),c&&a(zn),c&&a(f),c&&a(qn),c&&a(g),c&&a(Wn),c&&a(H),c&&a(Jn),c&&a(A),c&&a(Un),c&&a(P),c&&a(Qn),c&&a(D),c&&a(Yn),c&&a(rs),c&&a(Zn),c&&a(C),c&&a(sl),c&&a(ns),c&&a(al),c&&a(Ds)}}}function cP(it){let y,G;const L=[it[0],z1];let Rs={$$slots:{default:[pP]},$$scope:{ctx:it}};for(let I=0;I<L.length;I+=1)Rs=Yu(Rs,L[I]);return y=new lP({props:Rs}),{c(){Yg(y.$$.fragment)},l(I){Zg(y.$$.fragment,I)},m(I,R){sP(y,I,R),G=!0},p(I,[R]){const pt=R&1?aP(L,[R&1&&G1(I[0]),R&0&&G1(z1)]):{};R&2&&(pt.$$scope={dirty:R,ctx:I}),y.$set(pt)},i(I){G||(tP(y.$$.fragment,I),G=!0)},o(I){eP(y.$$.fragment,I),G=!1},d(I){oP(y,I)}}}const z1={title:"Extract parameter types from string literal types with TypeScript",description:"Parse and derive types from string literal types in TypeScript using the Template Literal Types, turning `'/purchase/[shopid]/[itemid]/args/[...args]'` into `{ shopid: number, itemid: number, args: string[] }`",date:"2022-03-27T08:00:00Z",tags:["typescript","template literal type","conditional type"],series:"Compile Svelte in your head",label:"blog",tableOfContents:[{link:"the-challenge",title:"The Challenge"},{link:"things-you-need-to-know",title:"Things you need to know",nested:[{link:"string-literal-type",title:"String Literal Type",nested:[{link:"template-literal-and-string-literal-types",title:"Template Literal and String Literal Types"}]},{link:"conditional-type",title:"Conditional Type"},{link:"function-overloads-and-generic-functions",title:"Function Overloads and Generic Functions"}]},{link:"working-on-the-problem",title:"Working on the problem",nested:[{link:"the-game-plan",title:"The Game Plan"},{link:"splitting-a-string-literal-type",title:"Splitting a String Literal Type"},{link:"filter-out-only-the-parts-containing-the-param-syntax",title:"Filter out only the parts containing the param syntax"},{link:"removing-the-brackets",title:"Removing the brackets"},{link:"map-the-parts-into-an-object-type",title:"Map the parts into an Object Type"},{link:"defining-the-map-value",title:"Defining the map value"},{link:"remap-keys-to-remove",title:"Remap keys to remove  `'...'`"},{link:"the-solution",title:"The Solution"}]},{link:"conclusion",title:"Conclusion"},{link:"extra",title:"Extra"},{link:"references",title:"References"}]};function kP(it,y,G){return rP("blog",{image:iP}),it.$$set=L=>{G(0,y=Yu(Yu({},y),X1(L)))},y=X1(y),[y]}class mP extends Jg{constructor(y){super();Ug(this,y,kP,cP,Qg,{})}}export{mP as default,z1 as metadata};
