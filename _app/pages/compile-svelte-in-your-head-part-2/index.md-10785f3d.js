import{S as G4,i as V4,s as q4,C as EE,w as h6,x as v6,y as d6,z as U4,A as c6,q as u6,o as y6,B as f6,r as B4,R as p6,k as i,e as n,t as e,m as c,c as o,a as l,h as t,d as a,b as r,g as h,F as s,O as J4}from"../../chunks/vendor-569a3c5c.js";import{B as W4}from"../../chunks/BlogLayout-17b76cb2.js";import{T as z4}from"../../chunks/TableOfContent-dbc18cb8.js";import"../../chunks/stores-ee936cd4.js";import"../../chunks/WebMentions-968cc380.js";/* empty css                                */var F4="/_app/assets/hero-twitter-672e3383.jpg";function Y4($t){let S,ts,Y,ns,C,q,Ot,ok,Gc,os,Dt,lk,rk,St,ik,ck,Tt,pk,kk,Vc,Da,m6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// conceptually...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*...*/</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// to track which variable has changed</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">dirty</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Set</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (variable</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> newValue) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// update ctx</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ctx[variable] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> newValue;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// mark variable as dirty</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">dirty</span><span style="color: var(--shiki-token-function)">.add</span><span style="color: var(--shiki-color-text)">(variable);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// schedules update for the component</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">scheduleUpdate</span><span style="color: var(--shiki-color-text)">(component);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// gets called when update is scheduled</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">flushUpdate</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// update the fragment</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// clear the dirty</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">dirty</span><span style="color: var(--shiki-token-function)">.clear</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,qc,gs,hk,Nt,vk,dk,Ct,uk,yk,Uc,Ys,fk,Sa,mk,xk,Bc,Es,$r,Ta,gk,Ek,W,_k,It,bk,wk,Na,$k,Ok,Ca,Dk,Sk,Lt,Tk,Nk,Ck,Ia,Ik,Pt,Lk,Pk,Jc,w,Or,La,Ak,Hk,Pa,jk,Dr,Mk,Rk,Gk,Aa,Vk,At,qk,Uk,Bk,Ss,Ha,Jk,Ht,Wk,zk,Fk,Sr,Yk,Zk,Tr,Kk,Qk,Nr,Xk,sh,Cr,ah,eh,Ts,th,jt,nh,oh,Mt,lh,rh,ih,Ns,ch,Rt,ph,kh,Gt,hh,vh,dh,Vt,x6=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'world'</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    name <span class="token operator">=</span> <span class="token string">'Svelte'</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>update<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div></code></pre>`,uh,Ir,ja,yh,fh,qt,g6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;world&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;name&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Svelte&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123; name</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> update &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...some where in &#96;create_fragment&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-token-function)">.update</span><span style="color: var(--shiki-color-text)">(); </span><span style="color: var(--shiki-token-comment)">// logs &#96;world&#96; scoped in the &#96;instance&#96; closure</span></span></code></pre>`,mh,Cs,xh,Ut,gh,Eh,Bt,_h,bh,Wc,g,Lr,Ma,wh,$h,Jt,Wt,Oh,Dh,Sh,Pr,Th,Nh,zt,E6='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> agility <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">let</span> power <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">incrementAgility</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    agility <span class="token operator">++</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">incrementPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    power <span class="token operator">++</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">levelUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    agility <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span></div><div class="line">    power <span class="token operator">+=</span> <span class="token number">7</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line">Agility: <span class="token language-javascript"><span class="token punctuation">&#123;</span>agility<span class="token punctuation">&#125;</span></span></div><div class="line">Power: <span class="token language-javascript"><span class="token punctuation">&#123;</span>power<span class="token punctuation">&#125;</span></span></div><div class="line">Stats: <span class="token language-javascript"><span class="token punctuation">&#123;</span>agility <span class="token operator">*</span> power<span class="token punctuation">&#125;</span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>incrementAgility<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>+ Agility<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>incrementPower<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>+ Power<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>levelUp<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Level Up<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div></code></pre>',Ch,Ar,Ra,Ih,Lh,ls,Ph,Ft,Ah,Hh,Yt,jh,Mh,Ga,Rh,Gh,Vh,Is,qh,Hr,Uh,Bh,Zt,Jh,Wh,zh,Kt,_6='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123; agility</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">; &#125;</span></span></code></pre>',Fh,Ls,Yh,jr,Zh,Kh,Qt,Qh,Xh,sv,Xt,b6='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123; agility</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> power</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> &#125;</span></span></code></pre>',av,sn,an,ev,tv,nv,Ps,ov,Mr,lv,rv,en,iv,cv,pv,tn,w6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// NOTE: $$.dirty is passed into the &#96;p&#96; function as &#96;changed&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">(changed</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> ctx) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// checked if agility has changed before update the agility text</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">changed</span><span style="color: var(--shiki-color-text)">.agility) </span><span style="color: var(--shiki-token-function)">set_data</span><span style="color: var(--shiki-color-text)">(t1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.agility);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">changed</span><span style="color: var(--shiki-color-text)">.power) </span><span style="color: var(--shiki-token-function)">set_data</span><span style="color: var(--shiki-color-text)">(t3</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.power);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// if either agility or power has changed, update the stats text</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> ((</span><span style="color: var(--shiki-token-constant)">changed</span><span style="color: var(--shiki-color-text)">.agility </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">changed</span><span style="color: var(--shiki-color-text)">.power) </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> t5_value </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> (t5_value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.agility </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.power </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-color-text)">)) </span><span style="color: var(--shiki-token-function)">set_data</span><span style="color: var(--shiki-color-text)">(t5</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> t5_value);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,kv,As,hv,nn,vv,dv,on,uv,yv,zc,u,Rr,Va,fv,mv,ln,rn,xv,gv,Ev,Gr,_v,bv,qa,cn,wv,pn,$v,Ov,kn,Dv,hn,Sv,Tv,Ua,Nv,vn,Cv,Iv,Lv,dn,$6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Svelte&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">count</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">foo</span><span style="color: var(--shiki-color-text)">.a </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">bar </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> baz </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// compiled into</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;name&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Svelte&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;count&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> count</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> count);</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">foo</span><span style="color: var(--shiki-color-text)">.a </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> foo);</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;bar&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (bar </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;baz&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (baz </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">))));</span></span></code></pre>`,Pv,Ba,Av,un,Hv,jv,Mv,rs,yn,Rv,fn,Gv,Vv,mn,qv,xn,Uv,Bv,Vr,Jv,Wv,qr,zv,Fv,gn,O6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// src/runtime/internal/Component.ts</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> ret</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> ret) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.ctx </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">not_equal</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.ctx[key]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 1. update the variable in $$.ctx</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.ctx[key] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> value;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 2a. mark the variable in $$.dirty</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">make_dirty</span><span style="color: var(--shiki-color-text)">(component</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// 4. return the value of the assignment or update expression</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> ret;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// src/runtime/internal/Component.ts</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">make_dirty</span><span style="color: var(--shiki-color-text)">(component</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-token-constant)">component</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">dirty_components</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(component);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 3. schedule an update</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">schedule_update</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// initialise $$.dirty</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">component</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">blank_object</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// 2b. mark the variable in $$.dirty</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">component</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty[key] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Yv,Ur,Ja,Zv,Kv,Wa,Qv,En,Xv,sd,ad,za,ed,_n,td,nd,od,bn,D6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">obj </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  b</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> (foo </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> bar</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">obj</span><span style="color: var(--shiki-color-text)">.c </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;hello&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">(&#123; a</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> c </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> d</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> b &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> baz </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> obj);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// assuming all variables are referenced in the template</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// the above compiles into</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;obj&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  (obj </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    b</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (foo </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;bar&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> bar</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> bar)))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;obj&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">obj</span><span style="color: var(--shiki-color-text)">.c </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;hello&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> obj);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;c&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  (&#123; a</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> c </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;d&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> d</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> d)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> b &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;baz&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (baz </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> obj)))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  c</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;b&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> b)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,ld,Br,rd,id,Hs,cd,wn,pd,kd,$n,hd,vd,dd,Fa,ud,On,yd,fd,md,Dn,S6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">obj</span><span style="color: var(--shiki-color-text)">.c </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;hello&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// compiles into</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;obj&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">obj</span><span style="color: var(--shiki-color-text)">.c </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;hello&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> obj);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// - it invalidates &#96;obj&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// - it returns the evaluated value of the expression &#96;obj.c = &#39;hello&#39;&#96;, which is &#39;hello&#39;</span></span></code></pre>`,xd,is,gd,Sn,Ed,_d,Tn,bd,wd,Nn,$d,Od,Fc,_,Jr,Ya,Dd,Sd,Cn,In,Td,Nd,Cd,cs,Id,Za,Ld,Pd,Ka,Ad,Hd,Ln,jd,Md,Rd,Wr,Gd,Vd,Pn,T6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// src/runtime/internal/scheduler.ts</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">schedule_update</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">update_scheduled) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    update_scheduled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// NOTE: &#96;flush&#96; will do the DOM update</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// we push it into the microtask queue</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">resolved_promise</span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(flush);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,qd,Qa,Ud,An,Bd,Jd,Wd,Hn,N6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// src/runtime/internal/scheduler.ts</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">flush</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// for each componnet in &#96;dirty_components&#96;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">component</span><span style="color: var(--shiki-color-text)">.$$);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// src/runtime/internal/scheduler.ts</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)">($$) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.fragment </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// NOTE: this will be important later</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-token-function)">.update</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">run_all</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.before_update);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// calls the &#96;p&#96; function</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.fragment </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.p</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.ctx);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// resets &#96;$$.dirty&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">after_update</span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">(add_render_callback);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,zd,zr,Xa,Fd,Yd,Fr,Zd,Kd,jn,C6=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> givenName<span class="token punctuation">,</span> familyName<span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    givenName <span class="token operator">=</span> <span class="token string">'Li Hau'</span><span class="token punctuation">;</span></div><div class="line">    familyName <span class="token operator">=</span> <span class="token string">'Tan'</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line">Name: <span class="token language-javascript"><span class="token punctuation">&#123;</span>familyName<span class="token punctuation">&#125;</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>givenName<span class="token punctuation">&#125;</span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>update<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Update<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div></code></pre>`,Qd,Yr,se,Xd,su,js,au,Mn,eu,tu,Rn,nu,ou,lu,y,Ms,ru,Zr,iu,cu,Gn,pu,ku,hu,Kr,Vn,vu,du,Zs,uu,qn,yu,fu,Un,mu,xu,Bn,gu,Jn,Eu,_u,ae,bu,Wn,wu,$u,Ou,Qr,zn,Du,Su,Ks,Tu,Fn,Nu,Cu,Yn,Iu,Lu,Zn,Pu,Kn,Au,Hu,ee,ju,Qn,Mu,Ru,Gu,Xr,si,Vu,qu,ai,ei,Uu,Bu,Qs,Xn,Ju,Wu,so,zu,Fu,Yu,Xs,Zu,ao,Ku,Qu,te,ne,eo,Xu,sy,to,ay,ey,oe,no,ty,ny,oo,oy,ly,sa,ry,lo,iy,cy,le,aa,py,ro,ky,hy,io,vy,dy,ea,uy,co,yy,fy,po,my,xy,ta,gy,ko,Ey,_y,ho,by,wy,ti,$y,Oy,ni,oi,Dy,Yc,na,li,re,Sy,Ty,ps,ks,Ny,vo,Cy,Iy,uo,Ly,Py,yo,Ay,Hy,jy,ri,My,Ry,ie,Gy,fo,Vy,qy,Uy,Rs,By,mo,Jy,Wy,xo,zy,Fy,Zc,N,ii,ce,Yy,Zy,Gs,Ky,pe,Qy,Xy,ci,sf,af,ef,pi,tf,nf,go,I6='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.diry </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123; givenName</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> familyName</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> &#125;;</span></span></code></pre>',of,ki,lf,rf,Eo,L6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">givenName </span><span style="color: var(--shiki-token-keyword)">-&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">familyName </span><span style="color: var(--shiki-token-keyword)">-&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span></span></code></pre>`,cf,ke,pf,he,kf,hf,vf,_o,P6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">0b0000_0011</span><span style="color: var(--shiki-color-text)">];</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// the 0th and 1st bit marked true</span></span></code></pre>`,df,hi,uf,Kc,b,vi,ve,yf,ff,di,mf,xf,Vs,gf,de,Ef,_f,ue,bf,wf,$f,A,Of,bo,Df,Sf,wo,Tf,Nf,$o,Cf,If,Oo,Lf,Pf,Do,Af,Hf,So,jf,Mf,Rf,qs,Gf,ui,Vf,qf,To,Uf,Bf,Jf,R,Wf,yi,zf,Ff,No,Yf,Zf,Co,Kf,Qf,ye,Xf,sm,fe,am,em,tm,fi,mi,nm,om,xi,lm,rm,Us,im,me,cm,pm,xe,km,hm,vm,ge,dm,Ee,um,ym,fm,Io,A6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// set 1st boolean to true</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">0b0101</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0b0010</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0b0111</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// set 2nd boolean to false</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">0b0101</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0b1011</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0b0001</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// is 2nd boolean true?</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">((</span><span style="color: var(--shiki-token-constant)">0b0101</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0b0100</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// NOTE: You can test multiple boolean values at once</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// is 2nd and 3rd boolean true?</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">((</span><span style="color: var(--shiki-token-constant)">0b0101</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0b1100</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`,mm,_e,xm,be,gm,Em,_m,we,bm,gi,wm,$m,Qc,f,Ei,$e,Om,Dm,_i,Sm,Tm,Lo,H6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">givenName </span><span style="color: var(--shiki-token-keyword)">-&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">firstName </span><span style="color: var(--shiki-token-keyword)">-&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span></span></code></pre>`,Nm,bi,Cm,Im,Po,j6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// Previous</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123; givenName</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> familyName &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// Now</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [givenName</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> familyName];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Lm,hs,Pm,wi,Am,Hm,Ao,jm,Mm,$i,Rm,Gm,Vm,Ho,M6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// Previous</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.givenName </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.familyName;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Now</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">];</span></span></code></pre>`,qm,vs,Um,jo,Bm,Jm,Oi,Wm,zm,Di,Fm,Ym,Zm,Mo,R6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// Previous</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;givenName&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (givenName </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Li Hau&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Now</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (givenName </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Li Hau&#39;</span><span style="color: var(--shiki-color-text)">));</span></span></code></pre>`,Km,Ro,Go,Qm,Xm,s1,Si,a1,e1,Vo,G6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// Previous</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty[</span><span style="color: var(--shiki-token-string-expression)">&#39;givenName&#39;</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Now</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">|=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&lt;&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`,t1,Ti,n1,o1,qo,V6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// Previous</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$dirty</span><span style="color: var(--shiki-color-text)">.givenName) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$dirty</span><span style="color: var(--shiki-color-text)">.givenName </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">$dirty</span><span style="color: var(--shiki-color-text)">.familyName) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Now</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> ($dirty[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> ($dirty[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span></code></pre>`,l1,ds,r1,Uo,i1,c1,Bo,p1,k1,Jo,h1,v1,d1,Z,Ni,u1,y1,Wo,f1,m1,zo,x1,g1,Fo,E1,_1,Xc,_s,Ci,oa,b1,Ii,w1,$1,us,O1,Yo,D1,S1,Li,T1,N1,Zo,C1,I1,L1,Ko,q6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// If less than 32 variables,</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Instead of having &#96;dirty[0]&#96; all the time,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">p</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> (ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Svelte optimises the compiled code by </span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// destruct the array in the arguments</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">p</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> (ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [dirty]) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// If more than or equal to 32 variables</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">p</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> (ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,sp,la,Pi,Oe,P1,A1,De,Bs,H1,Qo,j1,M1,Xo,R1,G1,V1,Ai,q1,ap,v,Hi,Se,U1,B1,ra,J1,Te,W1,z1,sl,F1,Y1,al,U6='<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line dim">  <span class="token keyword">export</span> <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token comment">// &#96;doubled&#96;, &#96;tripled&#96;, &#96;quadrupled&#96; are reactive</span></div><div class="line highlight">  <span class="token literal-property property">$</span><span class="token operator">:</span> doubled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></div><div class="line highlight">  <span class="token literal-property property">$</span><span class="token operator">:</span> tripled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span></div><div class="line highlight">  <span class="token literal-property property">$</span><span class="token operator">:</span> quadrupled <span class="token operator">=</span> doubled <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></div><div class="line dim"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line dim"></div><div class="line dim"><span class="token language-javascript"><span class="token punctuation">&#123;</span>doubled<span class="token punctuation">&#125;</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>tripled<span class="token punctuation">&#125;</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>quadrupled<span class="token punctuation">&#125;</span></span></div></code></pre>',Z1,ji,Ne,K1,Q1,Ce,X1,Ie,el,sx,ax,ex,tx,tl,B6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*count*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">8</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">			$</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> doubled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		&#125;</span></span>
<span class="line highlight"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*count*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">8</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">			$</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> tripled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		&#125;</span></span>
<span class="line highlight"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*doubled*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">			$</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> quadrupled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> doubled </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		&#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [doubled</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> tripled</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> quadrupled</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> count];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,nx,Mi,ox,lx,nl,J6='<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line dim">  <span class="token keyword">export</span> <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token comment">// NOTE: move &#96;quadrupled&#96; before &#96;doubled&#96;</span></div><div class="line highlight">  <span class="token literal-property property">$</span><span class="token operator">:</span> quadrupled <span class="token operator">=</span> doubled <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></div><div class="line highlight">  <span class="token literal-property property">$</span><span class="token operator">:</span> doubled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token literal-property property">$</span><span class="token operator">:</span> tripled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span></div><div class="line dim"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div></code></pre>',rx,Ri,Le,ix,cx,ol,W6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-comment)">// NOTE: &#96;quadrupled&#96; invalidates after &#96;doubled&#96;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*count*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">8</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">			$</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (doubled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		&#125;</span></span>
<span class="line highlight"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*doubled*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">			$</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (quadrupled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> doubled </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*count*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">8</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">			$</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (tripled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">		&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	&#125;;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [doubled</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> tripled</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> quadrupled</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> count];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,px,Gi,kx,hx,ys,ia,vx,ll,dx,ux,Vi,bs,rl,yx,fx,Pe,mx,xx,Ae,gx,Ex,_x,He,bx,il,wx,$x,Ox,cl,Dx,qi,U,pl,Sx,Tx,kl,Nx,Cx,hl,Ix,Lx,vl,Px,Ax,dl,Hx,jx,Mx,je,Rx,ul,Gx,Vx,qx,Me,Ux,yl,Bx,Jx,Wx,Ui,zx,Fx,fl,z6='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line"><span class="token comment">// NOTE: use &#96;count&#96; in a reactive declaration before &#96;count&#96; is declared</span></div><div class="line"><span class="token literal-property property">$</span><span class="token operator">:</span> doubled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></div><div class="line"><span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span></span> * 2 = <span class="token language-javascript"><span class="token punctuation">&#123;</span>doubled<span class="token punctuation">&#125;</span></span></div></code></pre>',Yx,Bi,Re,Zx,Kx,Ji,Ge,Qx,ml,Xx,s2,a2,Js,e2,xl,t2,n2,gl,o2,l2,r2,Ve,i2,El,c2,p2,k2,_l,F6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// src/runtime/internal/scheduler.ts</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)">($$) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.fragment </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// NOTE: this is important now!</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-token-function)">.update</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">run_all</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.before_update);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// calls the &#96;p&#96; function</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.fragment </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.p</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.ctx);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,h2,fs,v2,bl,d2,u2,Wi,y2,f2,wl,m2,x2,g2,zi,E2,ep,I,Fi,qe,_2,b2,Yi,w2,$2,$l,Y6=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> givenName <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> familyName <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    givenName <span class="token operator">=</span> <span class="token string">'Li Hau'</span><span class="token punctuation">;</span></div><div class="line">    familyName <span class="token operator">=</span> <span class="token string">'Tan'</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line">  <span class="token literal-property property">$</span><span class="token operator">:</span> name <span class="token operator">=</span> givenName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> familyName<span class="token punctuation">;</span></div><div class="line">  <span class="token literal-property property">$</span><span class="token operator">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div></code></pre>`,O2,Zi,Ue,D2,S2,Be,T2,Ol,N2,C2,I2,G,z,L2,Dl,P2,A2,Sl,H2,j2,Ki,M2,R2,Qi,G2,V2,q2,Xi,sc,U2,B2,ac,ec,J2,W2,ca,Tl,z2,F2,Nl,Y2,Z2,K2,Je,Q2,Cl,X2,We,K,s3,tc,a3,e3,nc,t3,n3,Il,o3,l3,oc,r3,i3,pa,c3,lc,p3,k3,Ll,h3,v3,ze,d3,Pl,u3,y3,f3,V,m3,Al,x3,g3,Hl,E3,_3,jl,b3,w3,Ml,$3,O3,rc,D3,S3,T3,Rl,Z6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// Instead of</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// #1 &#96;givenName = &#39;Li Hau&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Li Hau&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39; &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Li Hau &#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// #2 &#96;familyName = &#39;Tan&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Li Hau&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39; &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Tan&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Li Hau Tan&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Reactive declarations and statements are batched</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// #1 &#96;givenName = &#39;Li Hau&#39;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// #2 &#96;familyName = &#39;Tan&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Li Hau&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39; &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Tan&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Li Hau Tan&#39;</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,tp,H,ic,Fe,N3,C3,cc,I3,L3,Gl,K6=`<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line dim">  <span class="token keyword">let</span> givenName <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> familyName <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line dim">    givenName <span class="token operator">=</span> <span class="token string">'Li Hau'</span><span class="token punctuation">;</span></div><div class="line dim">    familyName <span class="token operator">=</span> <span class="token string">'Tan'</span><span class="token punctuation">;</span></div><div class="line highlight">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Logs ''</span></div><div class="line dim">  <span class="token punctuation">&#125;</span></div><div class="line dim">  <span class="token literal-property property">$</span><span class="token operator">:</span> name <span class="token operator">=</span> givenName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> familyName<span class="token punctuation">;</span></div><div class="line dim"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div></code></pre>`,P3,pc,Ye,A3,H3,Ze,j3,kc,M3,R3,G3,Vl,Q6=`<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line dim">  <span class="token keyword">let</span> givenName <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> familyName <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line dim">    givenName <span class="token operator">=</span> <span class="token string">'Li Hau'</span><span class="token punctuation">;</span></div><div class="line dim">    familyName <span class="token operator">=</span> <span class="token string">'Tan'</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token punctuation">&#125;</span></div><div class="line dim">  <span class="token literal-property property">$</span><span class="token operator">:</span> name <span class="token operator">=</span> givenName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> familyName<span class="token punctuation">;</span></div><div class="line highlight">  <span class="token literal-property property">$</span><span class="token operator">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Logs 'Li Hau Tan'</span></div><div class="line dim"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div></code></pre>`,np,Q,hc,Ke,V3,q3,vc,U3,B3,Qe,J3,dc,W3,z3,F3,ql,X6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// NOTE: refers to &#96;doubled&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> quadrupled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> doubled </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// NOTE: defined &#96;doubled&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> doubled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// compiles into:</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  $</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/* doubled */</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> doubled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  $</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/* quadrupled */</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> quadrupled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> doubled </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,op,L,uc,Xe,Y3,Z3,st,K3,Ul,Q3,X3,sg,at,ag,Bl,eg,tg,ng,yc,og,lg,Jl,s4='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line">  <span class="token literal-property property">$</span><span class="token operator">:</span> doubled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span> count <span class="token punctuation">&#125;</span></span> x 2 = <span class="token language-javascript"><span class="token punctuation">&#123;</span>doubled<span class="token punctuation">&#125;</span></span></div></code></pre>',rg,fc,et,ig,cg,Ws,pg,Wl,kg,hg,zl,vg,dg,ug,Fl,a4=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> doubled;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  $</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (doubled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [doubled];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,lp,Yl,mc,tt,yg,rp,Zl,xc,nt,fg,ip,Kl,gc,ot,mg,cp,Ql,Ec,lt,xg,pp,B,_c,rt,gg,Eg,it,_g,ct,bg,wg,$g,ms,Og,pt,Dg,Sg,kt,Tg,Ng,ht,Cg,Ig,Lg,bc,vt,Pg,Xl,Ag,Hg,jg,wc,dt,Mg,sr,Rg,Gg,kp,ka,$c,ut,Vg,qg,F,yt,Ug,ft,Bg,Jg,Wg,ha,zg,mt,Fg,Yg,xt,Zg,Kg,ar,gt,Qg,Xg,sE,er,Et,aE,eE,tE,Oc,_t,nE,hp;return S=new z4({props:{data:[{link:"pre-v3-16-0",title:"Pre v3.16.0",nested:[{link:"ctx",title:"$$.ctx"},{link:"dirty",title:"$$.dirty"},{link:"invalidate",title:"$$invalidate"},{link:"schedule-update",title:"schedule_update",nested:[{link:"tl-dr",title:"tl/dr:"}]}]},{link:"v3-16-0",title:"v3.16.0",nested:[{link:"bitmask",title:"Bitmask"},{link:"bitmask-in-svelte",title:"Bitmask in Svelte",nested:[{link:"destructuring-dirty",title:"Destructuring  $$.dirty"},{link:"tl-dr-1",title:"tl/dr:"}]}]},{link:"reactive-declaration",title:"Reactive Declaration",nested:[{link:"1-execution-of-all-reactive-declarations-and-statements-are-batched",title:"1. Execution of all reactive declarations and statements are batched"},{link:"2-the-value-of-reactive-variable-outside-of-reactive-declarations-and-statements-may-not-be-up-to-date",title:"2. The value of reactive variable outside of reactive declarations and statements may not be up to date"},{link:"sorting-of-reactive-declarations-and-statements",title:"Sorting of reactive declarations and statements"},{link:"reactive-variable-that-is-not-reactive",title:"Reactive variable that is not reactive"}]},{link:"summary",title:"Summary",nested:[{link:"1-svelte-keeps-track-of-which-variables-are-dirty-and-batched-the-dom-updates",title:"1. Svelte keeps track of which variables are dirty and batched the DOM updates."},{link:"2-using-bitmask-svelte-able-to-generate-a-more-compact-compiled-code",title:"2. Using bitmask, Svelte able to generate a more compact compiled code."},{link:"3-reactive-declarations-and-statements-are-executed-in-batch-just-like-dom-updates",title:"3. Reactive declarations and statements are executed in batch, just like DOM updates"}]},{link:"closing-note",title:"Closing Note"},{link:"further-resources",title:"Further Resources"}]}}),{c(){h6(S.$$.fragment),ts=i(),Y=n("p"),ns=n("strong"),C=e("\u2B05 \u2B05  Previously in "),q=n("a"),Ot=e("Part 1"),ok=e("."),Gc=i(),os=n("p"),Dt=n("a"),lk=e("Previously"),rk=e(", when I mentioned the "),St=n("code"),ik=e("$$invalidate"),ck=e(" function, I explained that the "),Tt=n("code"),pk=e("$$invalidate"),kk=e(" function works conceptually like the following:"),Vc=i(),Da=n("div"),qc=i(),gs=n("p"),hk=e("but that's not the exact implementation of the "),Nt=n("code"),vk=e("$$invaldiate"),dk=e(" function. So in this article, we are going to look at how "),Ct=n("code"),uk=e("$$invalidate"),yk=e(" is implemented in Svelte."),Uc=i(),Ys=n("p"),fk=e("At the point of writing, Svelte is at "),Sa=n("a"),mk=e("v3.20.1"),xk=e("."),Bc=i(),Es=n("section"),$r=n("h2"),Ta=n("a"),gk=e("Pre v3.16.0"),Ek=i(),W=n("p"),_k=e("There's a big optimisation that changes the underlying implementation of the "),It=n("code"),bk=e("$$invalidate"),wk=e(" function in "),Na=n("a"),$k=e("v3.16.0"),Ok=e(", namely in "),Ca=n("a"),Dk=e("#3945"),Sk=e(". The underlying concept doesn't change, but it'll be much easier to understand about "),Lt=n("code"),Tk=e("$$invalidate"),Nk=e(" prior the change and learn about the optimisation change separately."),Ck=i(),Ia=n("p"),Ik=e("Let's explain some of the variables that you are going to see, some of which was introduced in "),Pt=n("a"),Lk=e("Part 1"),Pk=e(":"),Jc=i(),w=n("section"),Or=n("h3"),La=n("a"),Ak=e("$$.ctx"),Hk=i(),Pa=n("p"),jk=e("There's no official name for it. You can call it "),Dr=n("strong"),Mk=e("context"),Rk=e(" as it is the context which the template is based on to render onto the DOM."),Gk=i(),Aa=n("p"),Vk=e("I called it "),At=n("a"),qk=e("instance variables"),Uk=e(". As it is a JavaScript Object that contains all the variables that you:"),Bk=i(),Ss=n("ul"),Ha=n("li"),Jk=e("declared in the "),Ht=n("code"),Wk=e("<script>"),zk=e(" tag"),Fk=i(),Sr=n("li"),Yk=e("mutated or reassigned"),Zk=i(),Tr=n("li"),Kk=e("referenced in the template"),Qk=i(),Nr=n("p"),Xk=e("that belongs to a component instance."),sh=i(),Cr=n("p"),ah=e("The instance variables themselves can be of a primitive value, object, array or function."),eh=i(),Ts=n("p"),th=e("The "),jt=n("code"),nh=e("instance"),oh=e(" function creates and returns the "),Mt=n("code"),lh=e("ctx"),rh=e(" object."),ih=i(),Ns=n("p"),ch=e("Functions declared in the "),Rt=n("code"),ph=e("<script>"),kh=e(" tag will refer to the instance variable that is scoped withn the "),Gt=n("code"),hh=e("instance"),vh=e(" function closure:"),dh=i(),Vt=n("div"),uh=i(),Ir=n("p"),ja=n("a"),yh=e("Svelte REPL"),fh=i(),qt=n("div"),mh=i(),Cs=n("p"),xh=e("Whenever a new instance of a component is created, the "),Ut=n("code"),gh=e("instance"),Eh=e(" function is called and the "),Bt=n("code"),_h=e("ctx"),bh=e(" object is created and captured within a new closure scope."),Wc=i(),g=n("section"),Lr=n("h3"),Ma=n("a"),wh=e("$$.dirty"),$h=i(),Jt=n("p"),Wt=n("code"),Oh=e("$$.dirty"),Dh=e(" is a object that is used to track which instance variable had just changed and needs to be updated onto the DOM."),Sh=i(),Pr=n("p"),Th=e("For example, in the following Svelte component:"),Nh=i(),zt=n("div"),Ch=i(),Ar=n("p"),Ra=n("a"),Ih=e("Svelte REPL"),Lh=i(),ls=n("p"),Ph=e("The initial "),Ft=n("code"),Ah=e("$$.dirty"),Hh=e(" is "),Yt=n("code"),jh=e("null"),Mh=e(" ("),Ga=n("a"),Rh=e("source code"),Gh=e(")."),Vh=i(),Is=n("p"),qh=e("If you clicked on the "),Hr=n("strong"),Uh=e('"+ Agility"'),Bh=e(" button, "),Zt=n("code"),Jh=e("$$.dirty"),Wh=e(" will turn into:"),zh=i(),Kt=n("div"),Fh=i(),Ls=n("p"),Yh=e("If you clicked on the "),jr=n("strong"),Zh=e('"Level Up"'),Kh=e(" button, "),Qt=n("code"),Qh=e("$$.dirty"),Xh=e(" will turn into:"),sv=i(),Xt=n("div"),av=i(),sn=n("p"),an=n("code"),ev=e("$$.dirty"),tv=e(" is useful for Svelte, so that it doesn't update the DOM unnecessarily."),nv=i(),Ps=n("p"),ov=e("If you looked at the "),Mr=n("strong"),lv=e("p (u_p_date)"),rv=e(" function of the compiled code, you will see Svelte checks whether a variable is marked in "),en=n("code"),iv=e("$$.dirty"),cv=e(", before updating the DOM."),pv=i(),tn=n("div"),kv=i(),As=n("p"),hv=e("After Svelte updates the DOM, the "),nn=n("code"),vv=e("$$.dirty"),dv=e(" is set back to "),on=n("code"),uv=e("null"),yv=e(" to indicate all changes has been applied onto the DOM."),zc=i(),u=n("section"),Rr=n("h3"),Va=n("a"),fv=e("$$invalidate"),mv=i(),ln=n("p"),rn=n("code"),xv=e("$$invalidate"),gv=e(" is the secret behind reactivity in Svelte."),Ev=i(),Gr=n("p"),_v=e("Whenever a variable is"),bv=i(),qa=n("ul"),cn=n("li"),wv=e("reassigned "),pn=n("code"),$v=e("(foo = 1)"),Ov=i(),kn=n("li"),Dv=e("mutated "),hn=n("code"),Sv=e("(foo.bar = 1)"),Tv=i(),Ua=n("p"),Nv=e("Svelte will wrap the assignment or update around with the "),vn=n("code"),Cv=e("$$invalidate"),Iv=e(" function:"),Lv=i(),dn=n("div"),Pv=i(),Ba=n("p"),Av=e("the "),un=n("code"),Hv=e("$$invalidate"),jv=e(" function will:"),Mv=i(),rs=n("ol"),yn=n("li"),Rv=e("update the variable in "),fn=n("code"),Gv=e("$$.ctx"),Vv=i(),mn=n("li"),qv=e("mark the variable in "),xn=n("code"),Uv=e("$$.dirty"),Bv=i(),Vr=n("li"),Jv=e("schedule an update"),Wv=i(),qr=n("li"),zv=e("return the value of the assignment or update expression"),Fv=i(),gn=n("div"),Yv=i(),Ur=n("p"),Ja=n("a"),Zv=e("Source code"),Kv=i(),Wa=n("p"),Qv=e("One interesting note about the function "),En=n("code"),Xv=e("$$invalidate"),sd=e(" is that, it wraps around the assignment or update expression and returns what the expression evaluates to."),ad=i(),za=n("p"),ed=e("This makes "),_n=n("code"),td=e("$$invalidate"),nd=e(" chainable:"),od=i(),bn=n("div"),ld=i(),Br=n("p"),rd=e("It seemed complex when there's a lot of assignment or update expressions in 1 statement! \u{1F648}"),id=i(),Hs=n("p"),cd=e("The 2nd argument of "),wn=n("code"),pd=e("$$invalidate"),kd=e(" is the assignment or update expressions verbatim. But if it contains any assignment or update sub-expressions, we recursively wrap it with "),$n=n("code"),hd=e("$$invalidate"),vd=e("."),dd=i(),Fa=n("p"),ud=e("In case where the assignment expression changes a property of an object, we pass the object in as a 3rd argument of the "),On=n("code"),yd=e("$$invalidate"),fd=e(" function, eg:"),md=i(),Dn=n("div"),xd=i(),is=n("p"),gd=e("So that, we update the "),Sn=n("code"),Ed=e('"obj"'),_d=e(" variable to "),Tn=n("code"),bd=e("obj"),wd=e(" instead of the value of the 2nd argument, "),Nn=n("code"),$d=e('"hello"'),Od=e("."),Fc=i(),_=n("section"),Jr=n("h3"),Ya=n("a"),Dd=e("schedule_update"),Sd=i(),Cn=n("p"),In=n("code"),Td=e("schedule_update"),Nd=e(" schedules Svelte to update the DOM with the changes made thus far."),Cd=i(),cs=n("p"),Id=e("Svelte, at the point of writing ("),Za=n("a"),Ld=e("v3.20.1"),Pd=e("), uses "),Ka=n("a"),Ad=e("microtask queue"),Hd=e(" to batch change updates. The actual DOM update happens in the next microtask, so that any synchronous "),Ln=n("code"),jd=e("$$invalidate"),Md=e(" operations that happen within the same task get batched into the next DOM update."),Rd=i(),Wr=n("p"),Gd=e("To schedule a next microtask, Svelte uses the Promise callback."),Vd=i(),Pn=n("div"),qd=i(),Qa=n("p"),Ud=e("In "),An=n("code"),Bd=e("flush"),Jd=e(", we call update for each component marked dirty:"),Wd=i(),Hn=n("div"),zd=i(),zr=n("p"),Xa=n("a"),Fd=e("Source code"),Yd=i(),Fr=n("p"),Zd=e("So, if you write a Svelte component like this:"),Kd=i(),jn=n("div"),Qd=i(),Yr=n("p"),se=n("a"),Xd=e("Svelte REPL"),su=i(),js=n("p"),au=e("The DOM update for the "),Mn=n("code"),eu=e("givenName"),tu=e(" and "),Rn=n("code"),nu=e("familyName"),ou=e(" happens in the same microtask:"),lu=i(),y=n("ol"),Ms=n("li"),ru=e("Click on the "),Zr=n("strong"),iu=e('"Update"'),cu=e(" to call the "),Gn=n("code"),pu=e("update"),ku=e(" function"),hu=i(),Kr=n("li"),Vn=n("code"),vu=e("$$invalidate('givenName', givenName = 'Li Hau')"),du=i(),Zs=n("li"),uu=e("Mark the variable "),qn=n("code"),yu=e("givenName"),fu=e(" dirty, "),Un=n("code"),mu=e("$$.dirty['givenName'] = true"),xu=i(),Bn=n("li"),gu=e("Schedule an update, "),Jn=n("code"),Eu=e("schedule_update()"),_u=i(),ae=n("li"),bu=e("Since it's the first update in the call stack, push the "),Wn=n("code"),wu=e("flush"),$u=e(" function into the microtask queue"),Ou=i(),Qr=n("li"),zn=n("code"),Du=e("$$invalidate('familyName', familyName = 'Tan')"),Su=i(),Ks=n("li"),Tu=e("Mark the variable "),Fn=n("code"),Nu=e("familyName"),Cu=e(" dirty, "),Yn=n("code"),Iu=e("$$.dirty['familyName'] = true"),Lu=i(),Zn=n("li"),Pu=e("Schedule an update, "),Kn=n("code"),Au=e("schedule_update()"),Hu=i(),ee=n("li"),ju=e("Since "),Qn=n("code"),Mu=e("update_scheduled = true"),Ru=e(", do nothing."),Gu=i(),Xr=n("li"),si=n("strong"),Vu=e("-- End of task --"),qu=i(),ai=n("li"),ei=n("strong"),Uu=e("-- Start of microtask--"),Bu=i(),Qs=n("li"),Xn=n("code"),Ju=e("flush()"),Wu=e(" calls "),so=n("code"),zu=e("update()"),Fu=e(" for each component marked dirty"),Yu=i(),Xs=n("li"),Zu=e("Calls "),ao=n("code"),Ku=e("$$.fragment.p($$.dirty, $$.ctx)"),Qu=e("."),te=n("ul"),ne=n("li"),eo=n("code"),Xu=e("$$.dirty"),sy=e(" is now "),to=n("code"),ay=e("{ givenName: true, familyName: true }"),ey=i(),oe=n("li"),no=n("code"),ty=e("$$.ctx"),ny=e(" is now "),oo=n("code"),oy=e("{ givenName: 'Li Hau', familyName: 'Tan' }"),ly=i(),sa=n("li"),ry=e("In "),lo=n("code"),iy=e("function p(dirty, ctx)"),cy=e(","),le=n("ul"),aa=n("li"),py=e("Update the 1st text node to "),ro=n("code"),ky=e("$$.ctx['givenName']"),hy=e(" if "),io=n("code"),vy=e("$$.dirty['givenName'] === true"),dy=i(),ea=n("li"),uy=e("Update the 2nd text node to "),co=n("code"),yy=e("$$.ctx['familyName']"),fy=e(" if "),po=n("code"),my=e("$$.dirty['familyName'] === true"),xy=i(),ta=n("li"),gy=e("Resets the "),ko=n("code"),Ey=e("$$.dirty"),_y=e(" to "),ho=n("code"),by=e("null"),wy=i(),ti=n("li"),$y=e("..."),Oy=i(),ni=n("li"),oi=n("strong"),Dy=e("-- End of microtask--"),Yc=i(),na=n("section"),li=n("h4"),re=n("a"),Sy=e("tl/dr:"),Ty=i(),ps=n("ul"),ks=n("li"),Ny=e("For each assignment or update, Svelte calls "),vo=n("code"),Cy=e("$$invalidate"),Iy=e(" to update the variable in "),uo=n("code"),Ly=e("$$.ctx"),Py=e(" and mark the variable dirty in "),yo=n("code"),Ay=e("$$.dirty"),Hy=e("."),jy=i(),ri=n("li"),My=e("The acutal DOM update is batched into the next microtask queue."),Ry=i(),ie=n("li"),Gy=e("To update the DOM for each component, the component "),fo=n("code"),Vy=e("$$.fragment.p($$.diry, $$.ctx)"),qy=e(" is called."),Uy=i(),Rs=n("li"),By=e("After the DOM update, the "),mo=n("code"),Jy=e("$$.dirty"),Wy=e(" is reset to "),xo=n("code"),zy=e("null"),Fy=e("."),Zc=i(),N=n("section"),ii=n("h2"),ce=n("a"),Yy=e("v3.16.0"),Zy=i(),Gs=n("p"),Ky=e("One big change in v3.16.0 is the PR "),pe=n("a"),Qy=e("#3945"),Xy=e(", namely "),ci=n("strong"),sf=e("bitmask-based change tracking"),af=e("."),ef=i(),pi=n("p"),tf=e("Instead of marking the variable dirty using an object:"),nf=i(),go=n("div"),of=i(),ki=n("p"),lf=e("Svelte assign each variable an index:"),rf=i(),Eo=n("div"),cf=i(),ke=n("p"),pf=e("and uses "),he=n("a"),kf=e("bitmask"),hf=e(" to store the dirty information:"),vf=i(),_o=n("div"),df=i(),hi=n("p"),uf=e("which is far more compact than the previous compiled code."),Kc=i(),b=n("section"),vi=n("h3"),ve=n("a"),yf=e("Bitmask"),ff=i(),di=n("p"),mf=e("For those who don't understand, allow me to quickly explain what it is."),xf=i(),Vs=n("p"),gf=e("Of course, if you want to learn more about it, feel free to read a more detailed explanation, like "),de=n("a"),Ef=e("this"),_f=e(" and "),ue=n("a"),bf=e("this"),wf=e("."),$f=i(),A=n("p"),Of=e("The most compact way of representing a group of "),bo=n("code"),Df=e("true"),Sf=e(" or "),wo=n("code"),Tf=e("false"),Nf=e(" is to use bits. If the bit is "),$o=n("code"),Cf=e("1"),If=e(" it is "),Oo=n("code"),Lf=e("true"),Pf=e(" and if it is "),Do=n("code"),Af=e("0"),Hf=e(" it is "),So=n("code"),jf=e("false"),Mf=e("."),Rf=i(),qs=n("p"),Gf=e("A number can be represented in binary, "),ui=n("strong"),Vf=e("5"),qf=e(" is "),To=n("code"),Uf=e("0b0101"),Bf=e(" in binary."),Jf=i(),R=n("p"),Wf=e("If "),yi=n("strong"),zf=e("5"),Ff=e(" is represented in a 4-bit binary, then it can store 4 boolean values, with the 0th and 2nd bit as "),No=n("code"),Yf=e("true"),Zf=e(" and 1st and 3rd bit as "),Co=n("code"),Kf=e("false"),Qf=e(", (reading from the right to left, from "),ye=n("a"),Xf=e("least significant bit"),sm=e(" to the "),fe=n("a"),am=e("most significant bit"),em=e(")."),tm=i(),fi=n("p"),mi=n("strong"),nm=e("How many boolean values can a number store?"),om=i(),xi=n("p"),lm=e("That depends on the language, a 16-bit integer in Java can store 16 boolean values."),rm=i(),Us=n("p"),im=e("In JavaScript, numbers can are "),me=n("a"),cm=e("represented in 64 bits"),pm=e(". However, when using "),xe=n("a"),km=e("bitwise operations"),hm=e(" on the number, JavaScript will treat the number as 32 bits."),vm=i(),ge=n("p"),dm=e("To inspect or modify the boolean value stored in a number, we use "),Ee=n("a"),um=e("bitwise operations"),ym=e("."),fm=i(),Io=n("div"),mm=i(),_e=n("p"),xm=e("The 2nd operand we use in the bitwise operation, is like a "),be=n("a"),gm=e("mask"),Em=e(" that allow us to target a specific bit in the 1st number, that stores our boolean values."),_m=i(),we=n("p"),bm=e("We call the mask, "),gi=n("strong"),wm=e("bitmask"),$m=e("."),Qc=i(),f=n("section"),Ei=n("h3"),$e=n("a"),Om=e("Bitmask in Svelte"),Dm=i(),_i=n("p"),Sm=e("As mentioned earlier, we assign each variable an index:"),Tm=i(),Lo=n("div"),Nm=i(),bi=n("p"),Cm=e("So instead of returning the instance variable as an JavaScript Object, we now return it as an JavaScript Array:"),Im=i(),Po=n("div"),Lm=i(),hs=n("p"),Pm=e("The variable is accessed via "),wi=n("strong"),Am=e("index"),Hm=e(", "),Ao=n("code"),jm=e("$$.ctx[index]"),Mm=e(", instead of "),$i=n("strong"),Rm=e("variable name"),Gm=e(":"),Vm=i(),Ho=n("div"),qm=i(),vs=n("p"),Um=e("The "),jo=n("code"),Bm=e("$$invalidate"),Jm=e(" function works the same, except it takes in "),Oi=n("strong"),Wm=e("index"),zm=e(" instead of "),Di=n("strong"),Fm=e("variable name"),Ym=e(":"),Zm=i(),Mo=n("div"),Km=i(),Ro=n("p"),Go=n("code"),Qm=e("$$.dirty"),Xm=e(" now stores a list of numbers. Each number carries 31 boolean values, each boolean value indicates whether the variable of that index is dirty or not."),s1=i(),Si=n("p"),a1=e("To set a variable as dirty, we use bitwise operation:"),e1=i(),Vo=n("div"),t1=i(),Ti=n("p"),n1=e("And to verify whether a variable is dirty, we use bitwise operation too!"),o1=i(),qo=n("div"),l1=i(),ds=n("p"),r1=e("With using bitmask, "),Uo=n("code"),i1=e("$$.dirty"),c1=e(" is now reset to "),Bo=n("code"),p1=e("[-1]"),k1=e(" instead of "),Jo=n("code"),h1=e("null"),v1=e("."),d1=i(),Z=n("p"),Ni=n("strong"),u1=e("Trivia:"),y1=i(),Wo=n("code"),f1=e("-1"),m1=e(" is "),zo=n("code"),x1=e("0b1111_1111"),g1=e(" in binary, where all the bits are "),Fo=n("code"),E1=e("1"),_1=e("."),Xc=i(),_s=n("section"),Ci=n("h4"),oa=n("a"),b1=e("Destructuring "),Ii=n("strong"),w1=e("$$.dirty"),$1=i(),us=n("p"),O1=e("One code-size optimisation that Svelte does is to always destructure the "),Yo=n("code"),D1=e("dirty"),S1=e(" array in the "),Li=n("strong"),T1=e("u_p_date function"),N1=e(" if there's less than 32 variables, since we will always access "),Zo=n("code"),C1=e("dirty[0]"),I1=e(" anyway:"),L1=i(),Ko=n("div"),sp=i(),la=n("section"),Pi=n("h4"),Oe=n("a"),P1=e("tl/dr:"),A1=i(),De=n("ul"),Bs=n("li"),H1=e("The underlying mechanism for "),Qo=n("code"),j1=e("$$invalidate"),M1=e(" and "),Xo=n("code"),R1=e("schedule_update"),G1=e(" does not change"),V1=i(),Ai=n("li"),q1=e("Using bitmask, the compiled code is much compact"),ap=i(),v=n("section"),Hi=n("h2"),Se=n("a"),U1=e("Reactive Declaration"),B1=i(),ra=n("p"),J1=e("Svelte allow us to declare reactive values via the "),Te=n("a"),W1=e("labeled statement"),z1=e(", "),sl=n("code"),F1=e("$:"),Y1=i(),al=n("div"),Z1=i(),ji=n("p"),Ne=n("a"),K1=e("Svelte REPL"),Q1=i(),Ce=n("p"),X1=e("If you look at the compiled output, you would find out that the declarative statements appeared in the "),Ie=n("a"),el=n("code"),sx=e("instance"),ax=e(" function"),ex=e(":"),tx=i(),tl=n("div"),nx=i(),Mi=n("p"),ox=e("Try reorder the reactive declarations and observe the change in the compiled output:"),lx=i(),nl=n("div"),rx=i(),Ri=n("p"),Le=n("a"),ix=e("Svelte REPL"),cx=i(),ol=n("div"),px=i(),Gi=n("p"),kx=e("Some observations:"),hx=i(),ys=n("ul"),ia=n("li"),vx=e("When there are reactive declarations, Svelte defines a custom "),ll=n("code"),dx=e("$$.update"),ux=e(" method."),Vi=n("ul"),bs=n("li"),rl=n("code"),yx=e("$$.update"),fx=e(" is a "),Pe=n("a"),mx=e("no-op function"),xx=e(" by default. (See "),Ae=n("a"),gx=e("src/runtime/internal/Component.ts"),Ex=e(")"),_x=i(),He=n("li"),bx=e("Svelte uses "),il=n("code"),wx=e("$$invalidate"),$x=e(" to update the value of a reactive variable too."),Ox=i(),cl=n("li"),Dx=e("Svelte sorts the reactive declarations and statements, based on the dependency relationship between the declarations and statements"),qi=n("ul"),U=n("li"),pl=n("code"),Sx=e("quadrupled"),Tx=e(" depends on "),kl=n("code"),Nx=e("doubled"),Cx=e(", so "),hl=n("code"),Ix=e("quadrupled"),Lx=e(" is evaluated and "),vl=n("code"),Px=e("$$invalidate"),Ax=e("d after "),dl=n("code"),Hx=e("doubled"),jx=e("."),Mx=i(),je=n("li"),Rx=e("You may have noticed that the order of the variables in the array returned "),ul=n("code"),Gx=e("[doubled, tripled, quadrupled, count]"),Vx=e(" may be different from the output in the latest Svelte version, but that's beyond the scope of this article."),qx=i(),Me=n("p"),Ux=e("Since all reactive declarations and statements are grouped into the "),yl=n("code"),Bx=e("$$.update"),Jx=e(" method, and also the fact that Svelte will sort the declarations and statements according to their dependency relationship, it is irrelevant of the location or the order you declared them."),Wx=i(),Ui=n("p"),zx=e("The following component still works:"),Fx=i(),fl=n("div"),Yx=i(),Bi=n("p"),Re=n("a"),Zx=e("Svelte REPL"),Kx=i(),Ji=n("p"),Ge=n("strong"),Qx=e("The next thing you may ask, when is "),ml=n("code"),Xx=e("$$.update"),s2=e(" being called?"),a2=i(),Js=n("p"),e2=e("Remember the "),xl=n("code"),t2=e("update"),n2=e(" function that gets called in the "),gl=n("code"),o2=e("flush"),l2=e(" function?"),r2=i(),Ve=n("p"),i2=e("I put a "),El=n("code"),c2=e("NOTE:"),p2=e(" comment saying that it will be important later. Well, it is important now."),k2=i(),_l=n("div"),h2=i(),fs=n("p"),v2=e("The "),bl=n("code"),d2=e("$$.update"),u2=e(" function gets called "),Wi=n("strong"),y2=e("in the same microtask"),f2=e(" with the DOM update, right before we called the "),wl=n("code"),m2=e("$$.fragment.p()"),x2=e(" to update the DOM."),g2=i(),zi=n("p"),E2=e("The implication of the above fact is"),ep=i(),I=n("section"),Fi=n("h3"),qe=n("a"),_2=e("1. Execution of all reactive declarations and statements are batched"),b2=i(),Yi=n("p"),w2=e("Just as how DOM updates are batched, reactive declarations and statements are batched too!"),$2=i(),$l=n("div"),O2=i(),Zi=n("p"),Ue=n("a"),D2=e("Svelte REPL"),S2=i(),Be=n("p"),T2=e("When "),Ol=n("code"),N2=e("update()"),C2=e(" get called,"),I2=i(),G=n("ol"),z=n("li"),L2=e("Similar to the "),Dl=n("a"),P2=e("flow described above"),A2=e(", "),Sl=n("code"),H2=e("$$invalidate"),j2=e(" both "),Ki=n("strong"),M2=e('"givenName"'),R2=e(" and "),Qi=n("strong"),G2=e('"familyName"'),V2=e(", and schedules an update"),q2=i(),Xi=n("li"),sc=n("strong"),U2=e("-- End of task --"),B2=i(),ac=n("li"),ec=n("strong"),J2=e("-- Start of microtask--"),W2=i(),ca=n("li"),Tl=n("code"),z2=e("flush()"),F2=e(" calls "),Nl=n("code"),Y2=e("update()"),Z2=e(" for each component marked dirty"),K2=i(),Je=n("li"),Q2=e("Runs "),Cl=n("code"),X2=e("$$.update()"),We=n("ul"),K=n("li"),s3=e("As "),tc=n("strong"),a3=e('"givenName"'),e3=e(" and "),nc=n("strong"),t3=e('"familyName"'),n3=e(" has changed, evaluates and "),Il=n("code"),o3=e("$$invalidate"),l3=i(),oc=n("strong"),r3=e('"name"'),i3=i(),pa=n("li"),c3=e("As "),lc=n("strong"),p3=e('"name"'),k3=e(" has changed, executes "),Ll=n("code"),h3=e("console.log('name', name);"),v3=i(),ze=n("li"),d3=e("Calls "),Pl=n("code"),u3=e("$$.fragment.p(...)"),y3=e(" to update the DOM."),f3=i(),V=n("p"),m3=e("As you can see, even though we've updated "),Al=n("code"),x3=e("givenName"),g3=e(" and "),Hl=n("code"),E3=e("familyName"),_3=e(", we only evaluate "),jl=n("code"),b3=e("name"),w3=e(" and executes "),Ml=n("code"),$3=e("console.log('name', name)"),O3=i(),rc=n("strong"),D3=e("once"),S3=e(" instead of twice:"),T3=i(),Rl=n("div"),tp=i(),H=n("section"),ic=n("h3"),Fe=n("a"),N3=e("2. The value of reactive variable outside of reactive declarations and statements may not be up to date"),C3=i(),cc=n("p"),I3=e("Because the reactive declarations and statements are batched and executed in the next microtask, you can't expect the value to be updated synchronously."),L3=i(),Gl=n("div"),P3=i(),pc=n("p"),Ye=n("a"),A3=e("Svelte REPL"),H3=i(),Ze=n("p"),j3=e("Instead, you "),kc=n("strong"),M3=e("have to"),R3=e(" refer the reactive variable in another reactive declaration or statement:"),G3=i(),Vl=n("div"),np=i(),Q=n("section"),hc=n("h3"),Ke=n("a"),V3=e("Sorting of reactive declarations and statements"),q3=i(),vc=n("p"),U3=e("Svelte tries to preserve the order of reactive declarations and statements as they are declared as much as possible."),B3=i(),Qe=n("p"),J3=e("However, if one reactive declaration or statement refers to a variable that was defined by another reactive declaration, then, "),dc=n("strong"),W3=e("it will be inserted after the latter reactive declaration"),z3=e(":"),F3=i(),ql=n("div"),op=i(),L=n("section"),uc=n("h3"),Xe=n("a"),Y3=e("Reactive variable that is not reactive"),Z3=i(),st=n("p"),K3=e("The Svelte compiler tracks all the variables declared in the "),Ul=n("code"),Q3=e("<script>"),X3=e(" tag."),sg=i(),at=n("p"),ag=e("If all the variables of a reactive declaration or statement refers to, never gets mutated or reassigned, then the reactive declaration or statement will not be added into "),Bl=n("code"),eg=e("$$.update"),tg=e("."),ng=i(),yc=n("p"),og=e("For example:"),lg=i(),Jl=n("div"),rg=i(),fc=n("p"),et=n("a"),ig=e("Svelte REPL"),cg=i(),Ws=n("p"),pg=e("Since, "),Wl=n("code"),kg=e("count"),hg=e(" never gets mutated or reassigned, Svelte optimises the compiled output by not defining "),zl=n("code"),vg=e("$$self.$$.update"),dg=e("."),ug=i(),Fl=n("div"),lp=i(),Yl=n("section"),mc=n("h2"),tt=n("a"),yg=e("Summary"),rp=i(),Zl=n("section"),xc=n("h3"),nt=n("a"),fg=e("1. Svelte keeps track of which variables are dirty and batched the DOM updates."),ip=i(),Kl=n("section"),gc=n("h3"),ot=n("a"),mg=e("2. Using bitmask, Svelte able to generate a more compact compiled code."),cp=i(),Ql=n("section"),Ec=n("h3"),lt=n("a"),xg=e("3. Reactive declarations and statements are executed in batch, just like DOM updates"),pp=i(),B=n("section"),_c=n("h2"),rt=n("a"),gg=e("Closing Note"),Eg=i(),it=n("p"),_g=e("If you wish to know more, "),ct=n("a"),bg=e("follow me on Twitter"),wg=e("."),$g=i(),ms=n("p"),Og=e("I'll post it on Twitter when the next part is ready, where I'll be covering "),pt=n("a"),Dg=e("logic blocks"),Sg=e(", "),kt=n("a"),Tg=e("slots"),Ng=e(", "),ht=n("a"),Cg=e("context"),Ig=e(", and many others."),Lg=i(),bc=n("p"),vt=n("strong"),Pg=e("\u2B05 \u2B05  Previously in "),Xl=n("a"),Ag=e("Part 1"),Hg=e("."),jg=i(),wc=n("p"),dt=n("strong"),Mg=e("\u27A1 \u27A1  Continue reading on "),sr=n("a"),Rg=e("Part 3"),Gg=e("."),kp=i(),ka=n("section"),$c=n("h2"),ut=n("a"),Vg=e("Further Resources"),qg=i(),F=n("ul"),yt=n("li"),Ug=e("Rich Harris shares about "),ft=n("a"),Bg=e("Bitmask Tracking at Svelte Society NYC"),Jg=e("."),Wg=i(),ha=n("li"),zg=e("Svelte Tutorial - "),mt=n("a"),Fg=e("Reactivity"),Yg=i(),xt=n("a"),Zg=e("https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/"),Kg=i(),ar=n("li"),gt=n("a"),Qg=e("The Art of Bitmasking"),Xg=e(" by Shakib Ahmed"),sE=i(),er=n("li"),Et=n("a"),aE=e("Bitmasks: A very esoteric (and impractical) way of managing booleans"),eE=e(" by Basti Ortiz"),tE=i(),Oc=n("li"),_t=n("a"),nE=e("MDN: Bitwise Operators"),this.h()},l(p){v6(S.$$.fragment,p),ts=c(p),Y=o(p,"P",{});var k=l(Y);ns=o(k,"STRONG",{});var vp=l(ns);C=t(vp,"\u2B05 \u2B05  Previously in "),q=o(vp,"A",{href:!0});var _E=l(q);Ot=t(_E,"Part 1"),_E.forEach(a),ok=t(vp,"."),vp.forEach(a),k.forEach(a),Gc=c(p),os=o(p,"P",{});var bt=l(os);Dt=o(bt,"A",{href:!0});var bE=l(Dt);lk=t(bE,"Previously"),bE.forEach(a),rk=t(bt,", when I mentioned the "),St=o(bt,"CODE",{class:!0});var wE=l(St);ik=t(wE,"$$invalidate"),wE.forEach(a),ck=t(bt," function, I explained that the "),Tt=o(bt,"CODE",{class:!0});var $E=l(Tt);pk=t($E,"$$invalidate"),$E.forEach(a),kk=t(bt," function works conceptually like the following:"),bt.forEach(a),Vc=c(p),Da=o(p,"DIV",{class:!0});var e4=l(Da);e4.forEach(a),qc=c(p),gs=o(p,"P",{});var tr=l(gs);hk=t(tr,"but that's not the exact implementation of the "),Nt=o(tr,"CODE",{class:!0});var OE=l(Nt);vk=t(OE,"$$invaldiate"),OE.forEach(a),dk=t(tr," function. So in this article, we are going to look at how "),Ct=o(tr,"CODE",{class:!0});var DE=l(Ct);uk=t(DE,"$$invalidate"),DE.forEach(a),yk=t(tr," is implemented in Svelte."),tr.forEach(a),Uc=c(p),Ys=o(p,"P",{});var dp=l(Ys);fk=t(dp,"At the point of writing, Svelte is at "),Sa=o(dp,"A",{href:!0,rel:!0});var SE=l(Sa);mk=t(SE,"v3.20.1"),SE.forEach(a),xk=t(dp,"."),dp.forEach(a),Bc=c(p),Es=o(p,"SECTION",{});var nr=l(Es);$r=o(nr,"H2",{});var TE=l($r);Ta=o(TE,"A",{href:!0,id:!0});var NE=l(Ta);gk=t(NE,"Pre v3.16.0"),NE.forEach(a),TE.forEach(a),Ek=c(nr),W=o(nr,"P",{});var ws=l(W);_k=t(ws,"There's a big optimisation that changes the underlying implementation of the "),It=o(ws,"CODE",{class:!0});var CE=l(It);bk=t(CE,"$$invalidate"),CE.forEach(a),wk=t(ws," function in "),Na=o(ws,"A",{href:!0,rel:!0});var IE=l(Na);$k=t(IE,"v3.16.0"),IE.forEach(a),Ok=t(ws,", namely in "),Ca=o(ws,"A",{href:!0,rel:!0});var LE=l(Ca);Dk=t(LE,"#3945"),LE.forEach(a),Sk=t(ws,". The underlying concept doesn't change, but it'll be much easier to understand about "),Lt=o(ws,"CODE",{class:!0});var PE=l(Lt);Tk=t(PE,"$$invalidate"),PE.forEach(a),Nk=t(ws," prior the change and learn about the optimisation change separately."),ws.forEach(a),Ck=c(nr),Ia=o(nr,"P",{});var up=l(Ia);Ik=t(up,"Let's explain some of the variables that you are going to see, some of which was introduced in "),Pt=o(up,"A",{href:!0});var AE=l(Pt);Lk=t(AE,"Part 1"),AE.forEach(a),Pk=t(up,":"),up.forEach(a),nr.forEach(a),Jc=c(p),w=o(p,"SECTION",{});var T=l(w);Or=o(T,"H3",{});var HE=l(Or);La=o(HE,"A",{href:!0,id:!0});var jE=l(La);Ak=t(jE,"$$.ctx"),jE.forEach(a),HE.forEach(a),Hk=c(T),Pa=o(T,"P",{});var yp=l(Pa);jk=t(yp,"There's no official name for it. You can call it "),Dr=o(yp,"STRONG",{});var ME=l(Dr);Mk=t(ME,"context"),ME.forEach(a),Rk=t(yp," as it is the context which the template is based on to render onto the DOM."),yp.forEach(a),Gk=c(T),Aa=o(T,"P",{});var fp=l(Aa);Vk=t(fp,"I called it "),At=o(fp,"A",{href:!0});var RE=l(At);qk=t(RE,"instance variables"),RE.forEach(a),Uk=t(fp,". As it is a JavaScript Object that contains all the variables that you:"),fp.forEach(a),Bk=c(T),Ss=o(T,"UL",{});var or=l(Ss);Ha=o(or,"LI",{});var mp=l(Ha);Jk=t(mp,"declared in the "),Ht=o(mp,"CODE",{class:!0});var GE=l(Ht);Wk=t(GE,"<script>"),GE.forEach(a),zk=t(mp," tag"),mp.forEach(a),Fk=c(or),Sr=o(or,"LI",{});var VE=l(Sr);Yk=t(VE,"mutated or reassigned"),VE.forEach(a),Zk=c(or),Tr=o(or,"LI",{});var qE=l(Tr);Kk=t(qE,"referenced in the template"),qE.forEach(a),or.forEach(a),Qk=c(T),Nr=o(T,"P",{});var UE=l(Nr);Xk=t(UE,"that belongs to a component instance."),UE.forEach(a),sh=c(T),Cr=o(T,"P",{});var BE=l(Cr);ah=t(BE,"The instance variables themselves can be of a primitive value, object, array or function."),BE.forEach(a),eh=c(T),Ts=o(T,"P",{});var lr=l(Ts);th=t(lr,"The "),jt=o(lr,"CODE",{class:!0});var JE=l(jt);nh=t(JE,"instance"),JE.forEach(a),oh=t(lr," function creates and returns the "),Mt=o(lr,"CODE",{class:!0});var WE=l(Mt);lh=t(WE,"ctx"),WE.forEach(a),rh=t(lr," object."),lr.forEach(a),ih=c(T),Ns=o(T,"P",{});var rr=l(Ns);ch=t(rr,"Functions declared in the "),Rt=o(rr,"CODE",{class:!0});var zE=l(Rt);ph=t(zE,"<script>"),zE.forEach(a),kh=t(rr," tag will refer to the instance variable that is scoped withn the "),Gt=o(rr,"CODE",{class:!0});var FE=l(Gt);hh=t(FE,"instance"),FE.forEach(a),vh=t(rr," function closure:"),rr.forEach(a),dh=c(T),Vt=o(T,"DIV",{class:!0});var t4=l(Vt);t4.forEach(a),uh=c(T),Ir=o(T,"P",{});var YE=l(Ir);ja=o(YE,"A",{href:!0,rel:!0});var ZE=l(ja);yh=t(ZE,"Svelte REPL"),ZE.forEach(a),YE.forEach(a),fh=c(T),qt=o(T,"DIV",{class:!0});var n4=l(qt);n4.forEach(a),mh=c(T),Cs=o(T,"P",{});var ir=l(Cs);xh=t(ir,"Whenever a new instance of a component is created, the "),Ut=o(ir,"CODE",{class:!0});var KE=l(Ut);gh=t(KE,"instance"),KE.forEach(a),Eh=t(ir," function is called and the "),Bt=o(ir,"CODE",{class:!0});var QE=l(Bt);_h=t(QE,"ctx"),QE.forEach(a),bh=t(ir," object is created and captured within a new closure scope."),ir.forEach(a),T.forEach(a),Wc=c(p),g=o(p,"SECTION",{});var $=l(g);Lr=o($,"H3",{});var XE=l(Lr);Ma=o(XE,"A",{href:!0,id:!0});var s_=l(Ma);wh=t(s_,"$$.dirty"),s_.forEach(a),XE.forEach(a),$h=c($),Jt=o($,"P",{});var oE=l(Jt);Wt=o(oE,"CODE",{class:!0});var a_=l(Wt);Oh=t(a_,"$$.dirty"),a_.forEach(a),Dh=t(oE," is a object that is used to track which instance variable had just changed and needs to be updated onto the DOM."),oE.forEach(a),Sh=c($),Pr=o($,"P",{});var e_=l(Pr);Th=t(e_,"For example, in the following Svelte component:"),e_.forEach(a),Nh=c($),zt=o($,"DIV",{class:!0});var o4=l(zt);o4.forEach(a),Ch=c($),Ar=o($,"P",{});var t_=l(Ar);Ra=o(t_,"A",{href:!0,rel:!0});var n_=l(Ra);Ih=t(n_,"Svelte REPL"),n_.forEach(a),t_.forEach(a),Lh=c($),ls=o($,"P",{});var va=l(ls);Ph=t(va,"The initial "),Ft=o(va,"CODE",{class:!0});var o_=l(Ft);Ah=t(o_,"$$.dirty"),o_.forEach(a),Hh=t(va," is "),Yt=o(va,"CODE",{class:!0});var l_=l(Yt);jh=t(l_,"null"),l_.forEach(a),Mh=t(va," ("),Ga=o(va,"A",{href:!0,rel:!0});var r_=l(Ga);Rh=t(r_,"source code"),r_.forEach(a),Gh=t(va,")."),va.forEach(a),Vh=c($),Is=o($,"P",{});var cr=l(Is);qh=t(cr,"If you clicked on the "),Hr=o(cr,"STRONG",{});var i_=l(Hr);Uh=t(i_,'"+ Agility"'),i_.forEach(a),Bh=t(cr," button, "),Zt=o(cr,"CODE",{class:!0});var c_=l(Zt);Jh=t(c_,"$$.dirty"),c_.forEach(a),Wh=t(cr," will turn into:"),cr.forEach(a),zh=c($),Kt=o($,"DIV",{class:!0});var l4=l(Kt);l4.forEach(a),Fh=c($),Ls=o($,"P",{});var pr=l(Ls);Yh=t(pr,"If you clicked on the "),jr=o(pr,"STRONG",{});var p_=l(jr);Zh=t(p_,'"Level Up"'),p_.forEach(a),Kh=t(pr," button, "),Qt=o(pr,"CODE",{class:!0});var k_=l(Qt);Qh=t(k_,"$$.dirty"),k_.forEach(a),Xh=t(pr," will turn into:"),pr.forEach(a),sv=c($),Xt=o($,"DIV",{class:!0});var r4=l(Xt);r4.forEach(a),av=c($),sn=o($,"P",{});var lE=l(sn);an=o(lE,"CODE",{class:!0});var h_=l(an);ev=t(h_,"$$.dirty"),h_.forEach(a),tv=t(lE," is useful for Svelte, so that it doesn't update the DOM unnecessarily."),lE.forEach(a),nv=c($),Ps=o($,"P",{});var kr=l(Ps);ov=t(kr,"If you looked at the "),Mr=o(kr,"STRONG",{});var v_=l(Mr);lv=t(v_,"p (u_p_date)"),v_.forEach(a),rv=t(kr," function of the compiled code, you will see Svelte checks whether a variable is marked in "),en=o(kr,"CODE",{class:!0});var d_=l(en);iv=t(d_,"$$.dirty"),d_.forEach(a),cv=t(kr,", before updating the DOM."),kr.forEach(a),pv=c($),tn=o($,"DIV",{class:!0});var i4=l(tn);i4.forEach(a),kv=c($),As=o($,"P",{});var hr=l(As);hv=t(hr,"After Svelte updates the DOM, the "),nn=o(hr,"CODE",{class:!0});var u_=l(nn);vv=t(u_,"$$.dirty"),u_.forEach(a),dv=t(hr," is set back to "),on=o(hr,"CODE",{class:!0});var y_=l(on);uv=t(y_,"null"),y_.forEach(a),yv=t(hr," to indicate all changes has been applied onto the DOM."),hr.forEach(a),$.forEach(a),zc=c(p),u=o(p,"SECTION",{});var m=l(u);Rr=o(m,"H3",{});var f_=l(Rr);Va=o(f_,"A",{href:!0,id:!0});var m_=l(Va);fv=t(m_,"$$invalidate"),m_.forEach(a),f_.forEach(a),mv=c(m),ln=o(m,"P",{});var rE=l(ln);rn=o(rE,"CODE",{class:!0});var x_=l(rn);xv=t(x_,"$$invalidate"),x_.forEach(a),gv=t(rE," is the secret behind reactivity in Svelte."),rE.forEach(a),Ev=c(m),Gr=o(m,"P",{});var g_=l(Gr);_v=t(g_,"Whenever a variable is"),g_.forEach(a),bv=c(m),qa=o(m,"UL",{});var xp=l(qa);cn=o(xp,"LI",{});var iE=l(cn);wv=t(iE,"reassigned "),pn=o(iE,"CODE",{class:!0});var E_=l(pn);$v=t(E_,"(foo = 1)"),E_.forEach(a),iE.forEach(a),Ov=c(xp),kn=o(xp,"LI",{});var cE=l(kn);Dv=t(cE,"mutated "),hn=o(cE,"CODE",{class:!0});var __=l(hn);Sv=t(__,"(foo.bar = 1)"),__.forEach(a),cE.forEach(a),xp.forEach(a),Tv=c(m),Ua=o(m,"P",{});var gp=l(Ua);Nv=t(gp,"Svelte will wrap the assignment or update around with the "),vn=o(gp,"CODE",{class:!0});var b_=l(vn);Cv=t(b_,"$$invalidate"),b_.forEach(a),Iv=t(gp," function:"),gp.forEach(a),Lv=c(m),dn=o(m,"DIV",{class:!0});var c4=l(dn);c4.forEach(a),Pv=c(m),Ba=o(m,"P",{});var Ep=l(Ba);Av=t(Ep,"the "),un=o(Ep,"CODE",{class:!0});var w_=l(un);Hv=t(w_,"$$invalidate"),w_.forEach(a),jv=t(Ep," function will:"),Ep.forEach(a),Mv=c(m),rs=o(m,"OL",{});var da=l(rs);yn=o(da,"LI",{});var pE=l(yn);Rv=t(pE,"update the variable in "),fn=o(pE,"CODE",{class:!0});var $_=l(fn);Gv=t($_,"$$.ctx"),$_.forEach(a),pE.forEach(a),Vv=c(da),mn=o(da,"LI",{});var kE=l(mn);qv=t(kE,"mark the variable in "),xn=o(kE,"CODE",{class:!0});var O_=l(xn);Uv=t(O_,"$$.dirty"),O_.forEach(a),kE.forEach(a),Bv=c(da),Vr=o(da,"LI",{});var D_=l(Vr);Jv=t(D_,"schedule an update"),D_.forEach(a),Wv=c(da),qr=o(da,"LI",{});var S_=l(qr);zv=t(S_,"return the value of the assignment or update expression"),S_.forEach(a),da.forEach(a),Fv=c(m),gn=o(m,"DIV",{class:!0});var p4=l(gn);p4.forEach(a),Yv=c(m),Ur=o(m,"P",{});var T_=l(Ur);Ja=o(T_,"A",{href:!0,rel:!0});var N_=l(Ja);Zv=t(N_,"Source code"),N_.forEach(a),T_.forEach(a),Kv=c(m),Wa=o(m,"P",{});var _p=l(Wa);Qv=t(_p,"One interesting note about the function "),En=o(_p,"CODE",{class:!0});var C_=l(En);Xv=t(C_,"$$invalidate"),C_.forEach(a),sd=t(_p," is that, it wraps around the assignment or update expression and returns what the expression evaluates to."),_p.forEach(a),ad=c(m),za=o(m,"P",{});var bp=l(za);ed=t(bp,"This makes "),_n=o(bp,"CODE",{class:!0});var I_=l(_n);td=t(I_,"$$invalidate"),I_.forEach(a),nd=t(bp," chainable:"),bp.forEach(a),od=c(m),bn=o(m,"DIV",{class:!0});var k4=l(bn);k4.forEach(a),ld=c(m),Br=o(m,"P",{});var L_=l(Br);rd=t(L_,"It seemed complex when there's a lot of assignment or update expressions in 1 statement! \u{1F648}"),L_.forEach(a),id=c(m),Hs=o(m,"P",{});var vr=l(Hs);cd=t(vr,"The 2nd argument of "),wn=o(vr,"CODE",{class:!0});var P_=l(wn);pd=t(P_,"$$invalidate"),P_.forEach(a),kd=t(vr," is the assignment or update expressions verbatim. But if it contains any assignment or update sub-expressions, we recursively wrap it with "),$n=o(vr,"CODE",{class:!0});var A_=l($n);hd=t(A_,"$$invalidate"),A_.forEach(a),vd=t(vr,"."),vr.forEach(a),dd=c(m),Fa=o(m,"P",{});var wp=l(Fa);ud=t(wp,"In case where the assignment expression changes a property of an object, we pass the object in as a 3rd argument of the "),On=o(wp,"CODE",{class:!0});var H_=l(On);yd=t(H_,"$$invalidate"),H_.forEach(a),fd=t(wp," function, eg:"),wp.forEach(a),md=c(m),Dn=o(m,"DIV",{class:!0});var h4=l(Dn);h4.forEach(a),xd=c(m),is=o(m,"P",{});var ua=l(is);gd=t(ua,"So that, we update the "),Sn=o(ua,"CODE",{class:!0});var j_=l(Sn);Ed=t(j_,'"obj"'),j_.forEach(a),_d=t(ua," variable to "),Tn=o(ua,"CODE",{class:!0});var M_=l(Tn);bd=t(M_,"obj"),M_.forEach(a),wd=t(ua," instead of the value of the 2nd argument, "),Nn=o(ua,"CODE",{class:!0});var R_=l(Nn);$d=t(R_,'"hello"'),R_.forEach(a),Od=t(ua,"."),ua.forEach(a),m.forEach(a),Fc=c(p),_=o(p,"SECTION",{});var O=l(_);Jr=o(O,"H3",{});var G_=l(Jr);Ya=o(G_,"A",{href:!0,id:!0});var V_=l(Ya);Dd=t(V_,"schedule_update"),V_.forEach(a),G_.forEach(a),Sd=c(O),Cn=o(O,"P",{});var hE=l(Cn);In=o(hE,"CODE",{class:!0});var q_=l(In);Td=t(q_,"schedule_update"),q_.forEach(a),Nd=t(hE," schedules Svelte to update the DOM with the changes made thus far."),hE.forEach(a),Cd=c(O),cs=o(O,"P",{});var ya=l(cs);Id=t(ya,"Svelte, at the point of writing ("),Za=o(ya,"A",{href:!0,rel:!0});var U_=l(Za);Ld=t(U_,"v3.20.1"),U_.forEach(a),Pd=t(ya,"), uses "),Ka=o(ya,"A",{href:!0,rel:!0});var B_=l(Ka);Ad=t(B_,"microtask queue"),B_.forEach(a),Hd=t(ya," to batch change updates. The actual DOM update happens in the next microtask, so that any synchronous "),Ln=o(ya,"CODE",{class:!0});var J_=l(Ln);jd=t(J_,"$$invalidate"),J_.forEach(a),Md=t(ya," operations that happen within the same task get batched into the next DOM update."),ya.forEach(a),Rd=c(O),Wr=o(O,"P",{});var W_=l(Wr);Gd=t(W_,"To schedule a next microtask, Svelte uses the Promise callback."),W_.forEach(a),Vd=c(O),Pn=o(O,"DIV",{class:!0});var v4=l(Pn);v4.forEach(a),qd=c(O),Qa=o(O,"P",{});var $p=l(Qa);Ud=t($p,"In "),An=o($p,"CODE",{class:!0});var z_=l(An);Bd=t(z_,"flush"),z_.forEach(a),Jd=t($p,", we call update for each component marked dirty:"),$p.forEach(a),Wd=c(O),Hn=o(O,"DIV",{class:!0});var d4=l(Hn);d4.forEach(a),zd=c(O),zr=o(O,"P",{});var F_=l(zr);Xa=o(F_,"A",{href:!0,rel:!0});var Y_=l(Xa);Fd=t(Y_,"Source code"),Y_.forEach(a),F_.forEach(a),Yd=c(O),Fr=o(O,"P",{});var Z_=l(Fr);Zd=t(Z_,"So, if you write a Svelte component like this:"),Z_.forEach(a),Kd=c(O),jn=o(O,"DIV",{class:!0});var u4=l(jn);u4.forEach(a),Qd=c(O),Yr=o(O,"P",{});var K_=l(Yr);se=o(K_,"A",{href:!0,rel:!0});var Q_=l(se);Xd=t(Q_,"Svelte REPL"),Q_.forEach(a),K_.forEach(a),su=c(O),js=o(O,"P",{});var dr=l(js);au=t(dr,"The DOM update for the "),Mn=o(dr,"CODE",{class:!0});var X_=l(Mn);eu=t(X_,"givenName"),X_.forEach(a),tu=t(dr," and "),Rn=o(dr,"CODE",{class:!0});var sb=l(Rn);nu=t(sb,"familyName"),sb.forEach(a),ou=t(dr," happens in the same microtask:"),dr.forEach(a),lu=c(O),y=o(O,"OL",{});var x=l(y);Ms=o(x,"LI",{});var ur=l(Ms);ru=t(ur,"Click on the "),Zr=o(ur,"STRONG",{});var ab=l(Zr);iu=t(ab,'"Update"'),ab.forEach(a),cu=t(ur," to call the "),Gn=o(ur,"CODE",{class:!0});var eb=l(Gn);pu=t(eb,"update"),eb.forEach(a),ku=t(ur," function"),ur.forEach(a),hu=c(x),Kr=o(x,"LI",{});var tb=l(Kr);Vn=o(tb,"CODE",{class:!0});var nb=l(Vn);vu=t(nb,"$$invalidate('givenName', givenName = 'Li Hau')"),nb.forEach(a),tb.forEach(a),du=c(x),Zs=o(x,"LI",{});var Dc=l(Zs);uu=t(Dc,"Mark the variable "),qn=o(Dc,"CODE",{class:!0});var ob=l(qn);yu=t(ob,"givenName"),ob.forEach(a),fu=t(Dc," dirty, "),Un=o(Dc,"CODE",{class:!0});var lb=l(Un);mu=t(lb,"$$.dirty['givenName'] = true"),lb.forEach(a),Dc.forEach(a),xu=c(x),Bn=o(x,"LI",{});var vE=l(Bn);gu=t(vE,"Schedule an update, "),Jn=o(vE,"CODE",{class:!0});var rb=l(Jn);Eu=t(rb,"schedule_update()"),rb.forEach(a),vE.forEach(a),_u=c(x),ae=o(x,"LI",{});var Op=l(ae);bu=t(Op,"Since it's the first update in the call stack, push the "),Wn=o(Op,"CODE",{class:!0});var ib=l(Wn);wu=t(ib,"flush"),ib.forEach(a),$u=t(Op," function into the microtask queue"),Op.forEach(a),Ou=c(x),Qr=o(x,"LI",{});var cb=l(Qr);zn=o(cb,"CODE",{class:!0});var pb=l(zn);Du=t(pb,"$$invalidate('familyName', familyName = 'Tan')"),pb.forEach(a),cb.forEach(a),Su=c(x),Ks=o(x,"LI",{});var Sc=l(Ks);Tu=t(Sc,"Mark the variable "),Fn=o(Sc,"CODE",{class:!0});var kb=l(Fn);Nu=t(kb,"familyName"),kb.forEach(a),Cu=t(Sc," dirty, "),Yn=o(Sc,"CODE",{class:!0});var hb=l(Yn);Iu=t(hb,"$$.dirty['familyName'] = true"),hb.forEach(a),Sc.forEach(a),Lu=c(x),Zn=o(x,"LI",{});var dE=l(Zn);Pu=t(dE,"Schedule an update, "),Kn=o(dE,"CODE",{class:!0});var vb=l(Kn);Au=t(vb,"schedule_update()"),vb.forEach(a),dE.forEach(a),Hu=c(x),ee=o(x,"LI",{});var Dp=l(ee);ju=t(Dp,"Since "),Qn=o(Dp,"CODE",{class:!0});var db=l(Qn);Mu=t(db,"update_scheduled = true"),db.forEach(a),Ru=t(Dp,", do nothing."),Dp.forEach(a),Gu=c(x),Xr=o(x,"LI",{});var ub=l(Xr);si=o(ub,"STRONG",{});var yb=l(si);Vu=t(yb,"-- End of task --"),yb.forEach(a),ub.forEach(a),qu=c(x),ai=o(x,"LI",{});var fb=l(ai);ei=o(fb,"STRONG",{});var mb=l(ei);Uu=t(mb,"-- Start of microtask--"),mb.forEach(a),fb.forEach(a),Bu=c(x),Qs=o(x,"LI",{});var Tc=l(Qs);Xn=o(Tc,"CODE",{class:!0});var xb=l(Xn);Ju=t(xb,"flush()"),xb.forEach(a),Wu=t(Tc," calls "),so=o(Tc,"CODE",{class:!0});var gb=l(so);zu=t(gb,"update()"),gb.forEach(a),Fu=t(Tc," for each component marked dirty"),Tc.forEach(a),Yu=c(x),Xs=o(x,"LI",{});var Nc=l(Xs);Zu=t(Nc,"Calls "),ao=o(Nc,"CODE",{class:!0});var Eb=l(ao);Ku=t(Eb,"$$.fragment.p($$.dirty, $$.ctx)"),Eb.forEach(a),Qu=t(Nc,"."),te=o(Nc,"UL",{});var Sp=l(te);ne=o(Sp,"LI",{});var Tp=l(ne);eo=o(Tp,"CODE",{class:!0});var _b=l(eo);Xu=t(_b,"$$.dirty"),_b.forEach(a),sy=t(Tp," is now "),to=o(Tp,"CODE",{class:!0});var bb=l(to);ay=t(bb,"{ givenName: true, familyName: true }"),bb.forEach(a),Tp.forEach(a),ey=c(Sp),oe=o(Sp,"LI",{});var Np=l(oe);no=o(Np,"CODE",{class:!0});var wb=l(no);ty=t(wb,"$$.ctx"),wb.forEach(a),ny=t(Np," is now "),oo=o(Np,"CODE",{class:!0});var $b=l(oo);oy=t($b,"{ givenName: 'Li Hau', familyName: 'Tan' }"),$b.forEach(a),Np.forEach(a),Sp.forEach(a),Nc.forEach(a),ly=c(x),sa=o(x,"LI",{});var Cc=l(sa);ry=t(Cc,"In "),lo=o(Cc,"CODE",{class:!0});var Ob=l(lo);iy=t(Ob,"function p(dirty, ctx)"),Ob.forEach(a),cy=t(Cc,","),le=o(Cc,"UL",{});var Cp=l(le);aa=o(Cp,"LI",{});var Ic=l(aa);py=t(Ic,"Update the 1st text node to "),ro=o(Ic,"CODE",{class:!0});var Db=l(ro);ky=t(Db,"$$.ctx['givenName']"),Db.forEach(a),hy=t(Ic," if "),io=o(Ic,"CODE",{class:!0});var Sb=l(io);vy=t(Sb,"$$.dirty['givenName'] === true"),Sb.forEach(a),Ic.forEach(a),dy=c(Cp),ea=o(Cp,"LI",{});var Lc=l(ea);uy=t(Lc,"Update the 2nd text node to "),co=o(Lc,"CODE",{class:!0});var Tb=l(co);yy=t(Tb,"$$.ctx['familyName']"),Tb.forEach(a),fy=t(Lc," if "),po=o(Lc,"CODE",{class:!0});var Nb=l(po);my=t(Nb,"$$.dirty['familyName'] === true"),Nb.forEach(a),Lc.forEach(a),Cp.forEach(a),Cc.forEach(a),xy=c(x),ta=o(x,"LI",{});var Pc=l(ta);gy=t(Pc,"Resets the "),ko=o(Pc,"CODE",{class:!0});var Cb=l(ko);Ey=t(Cb,"$$.dirty"),Cb.forEach(a),_y=t(Pc," to "),ho=o(Pc,"CODE",{class:!0});var Ib=l(ho);by=t(Ib,"null"),Ib.forEach(a),Pc.forEach(a),wy=c(x),ti=o(x,"LI",{});var Lb=l(ti);$y=t(Lb,"..."),Lb.forEach(a),Oy=c(x),ni=o(x,"LI",{});var Pb=l(ni);oi=o(Pb,"STRONG",{});var Ab=l(oi);Dy=t(Ab,"-- End of microtask--"),Ab.forEach(a),Pb.forEach(a),x.forEach(a),O.forEach(a),Yc=c(p),na=o(p,"SECTION",{});var Ip=l(na);li=o(Ip,"H4",{});var Hb=l(li);re=o(Hb,"A",{href:!0,id:!0});var jb=l(re);Sy=t(jb,"tl/dr:"),jb.forEach(a),Hb.forEach(a),Ty=c(Ip),ps=o(Ip,"UL",{});var fa=l(ps);ks=o(fa,"LI",{});var ma=l(ks);Ny=t(ma,"For each assignment or update, Svelte calls "),vo=o(ma,"CODE",{class:!0});var Mb=l(vo);Cy=t(Mb,"$$invalidate"),Mb.forEach(a),Iy=t(ma," to update the variable in "),uo=o(ma,"CODE",{class:!0});var Rb=l(uo);Ly=t(Rb,"$$.ctx"),Rb.forEach(a),Py=t(ma," and mark the variable dirty in "),yo=o(ma,"CODE",{class:!0});var Gb=l(yo);Ay=t(Gb,"$$.dirty"),Gb.forEach(a),Hy=t(ma,"."),ma.forEach(a),jy=c(fa),ri=o(fa,"LI",{});var Vb=l(ri);My=t(Vb,"The acutal DOM update is batched into the next microtask queue."),Vb.forEach(a),Ry=c(fa),ie=o(fa,"LI",{});var Lp=l(ie);Gy=t(Lp,"To update the DOM for each component, the component "),fo=o(Lp,"CODE",{class:!0});var qb=l(fo);Vy=t(qb,"$$.fragment.p($$.diry, $$.ctx)"),qb.forEach(a),qy=t(Lp," is called."),Lp.forEach(a),Uy=c(fa),Rs=o(fa,"LI",{});var yr=l(Rs);By=t(yr,"After the DOM update, the "),mo=o(yr,"CODE",{class:!0});var Ub=l(mo);Jy=t(Ub,"$$.dirty"),Ub.forEach(a),Wy=t(yr," is reset to "),xo=o(yr,"CODE",{class:!0});var Bb=l(xo);zy=t(Bb,"null"),Bb.forEach(a),Fy=t(yr,"."),yr.forEach(a),fa.forEach(a),Ip.forEach(a),Zc=c(p),N=o(p,"SECTION",{});var P=l(N);ii=o(P,"H2",{});var Jb=l(ii);ce=o(Jb,"A",{href:!0,id:!0});var Wb=l(ce);Yy=t(Wb,"v3.16.0"),Wb.forEach(a),Jb.forEach(a),Zy=c(P),Gs=o(P,"P",{});var fr=l(Gs);Ky=t(fr,"One big change in v3.16.0 is the PR "),pe=o(fr,"A",{href:!0,rel:!0});var zb=l(pe);Qy=t(zb,"#3945"),zb.forEach(a),Xy=t(fr,", namely "),ci=o(fr,"STRONG",{});var Fb=l(ci);sf=t(Fb,"bitmask-based change tracking"),Fb.forEach(a),af=t(fr,"."),fr.forEach(a),ef=c(P),pi=o(P,"P",{});var Yb=l(pi);tf=t(Yb,"Instead of marking the variable dirty using an object:"),Yb.forEach(a),nf=c(P),go=o(P,"DIV",{class:!0});var y4=l(go);y4.forEach(a),of=c(P),ki=o(P,"P",{});var Zb=l(ki);lf=t(Zb,"Svelte assign each variable an index:"),Zb.forEach(a),rf=c(P),Eo=o(P,"DIV",{class:!0});var f4=l(Eo);f4.forEach(a),cf=c(P),ke=o(P,"P",{});var Pp=l(ke);pf=t(Pp,"and uses "),he=o(Pp,"A",{href:!0,rel:!0});var Kb=l(he);kf=t(Kb,"bitmask"),Kb.forEach(a),hf=t(Pp," to store the dirty information:"),Pp.forEach(a),vf=c(P),_o=o(P,"DIV",{class:!0});var m4=l(_o);m4.forEach(a),df=c(P),hi=o(P,"P",{});var Qb=l(hi);uf=t(Qb,"which is far more compact than the previous compiled code."),Qb.forEach(a),P.forEach(a),Kc=c(p),b=o(p,"SECTION",{});var D=l(b);vi=o(D,"H3",{});var Xb=l(vi);ve=o(Xb,"A",{href:!0,id:!0});var sw=l(ve);yf=t(sw,"Bitmask"),sw.forEach(a),Xb.forEach(a),ff=c(D),di=o(D,"P",{});var aw=l(di);mf=t(aw,"For those who don't understand, allow me to quickly explain what it is."),aw.forEach(a),xf=c(D),Vs=o(D,"P",{});var mr=l(Vs);gf=t(mr,"Of course, if you want to learn more about it, feel free to read a more detailed explanation, like "),de=o(mr,"A",{href:!0,rel:!0});var ew=l(de);Ef=t(ew,"this"),ew.forEach(a),_f=t(mr," and "),ue=o(mr,"A",{href:!0,rel:!0});var tw=l(ue);bf=t(tw,"this"),tw.forEach(a),wf=t(mr,"."),mr.forEach(a),$f=c(D),A=o(D,"P",{});var J=l(A);Of=t(J,"The most compact way of representing a group of "),bo=o(J,"CODE",{class:!0});var nw=l(bo);Df=t(nw,"true"),nw.forEach(a),Sf=t(J," or "),wo=o(J,"CODE",{class:!0});var ow=l(wo);Tf=t(ow,"false"),ow.forEach(a),Nf=t(J," is to use bits. If the bit is "),$o=o(J,"CODE",{class:!0});var lw=l($o);Cf=t(lw,"1"),lw.forEach(a),If=t(J," it is "),Oo=o(J,"CODE",{class:!0});var rw=l(Oo);Lf=t(rw,"true"),rw.forEach(a),Pf=t(J," and if it is "),Do=o(J,"CODE",{class:!0});var iw=l(Do);Af=t(iw,"0"),iw.forEach(a),Hf=t(J," it is "),So=o(J,"CODE",{class:!0});var cw=l(So);jf=t(cw,"false"),cw.forEach(a),Mf=t(J,"."),J.forEach(a),Rf=c(D),qs=o(D,"P",{});var xr=l(qs);Gf=t(xr,"A number can be represented in binary, "),ui=o(xr,"STRONG",{});var pw=l(ui);Vf=t(pw,"5"),pw.forEach(a),qf=t(xr," is "),To=o(xr,"CODE",{class:!0});var kw=l(To);Uf=t(kw,"0b0101"),kw.forEach(a),Bf=t(xr," in binary."),xr.forEach(a),Jf=c(D),R=o(D,"P",{});var X=l(R);Wf=t(X,"If "),yi=o(X,"STRONG",{});var hw=l(yi);zf=t(hw,"5"),hw.forEach(a),Ff=t(X," is represented in a 4-bit binary, then it can store 4 boolean values, with the 0th and 2nd bit as "),No=o(X,"CODE",{class:!0});var vw=l(No);Yf=t(vw,"true"),vw.forEach(a),Zf=t(X," and 1st and 3rd bit as "),Co=o(X,"CODE",{class:!0});var dw=l(Co);Kf=t(dw,"false"),dw.forEach(a),Qf=t(X,", (reading from the right to left, from "),ye=o(X,"A",{href:!0,rel:!0});var uw=l(ye);Xf=t(uw,"least significant bit"),uw.forEach(a),sm=t(X," to the "),fe=o(X,"A",{href:!0,rel:!0});var yw=l(fe);am=t(yw,"most significant bit"),yw.forEach(a),em=t(X,")."),X.forEach(a),tm=c(D),fi=o(D,"P",{});var fw=l(fi);mi=o(fw,"STRONG",{});var mw=l(mi);nm=t(mw,"How many boolean values can a number store?"),mw.forEach(a),fw.forEach(a),om=c(D),xi=o(D,"P",{});var xw=l(xi);lm=t(xw,"That depends on the language, a 16-bit integer in Java can store 16 boolean values."),xw.forEach(a),rm=c(D),Us=o(D,"P",{});var gr=l(Us);im=t(gr,"In JavaScript, numbers can are "),me=o(gr,"A",{href:!0,rel:!0});var gw=l(me);cm=t(gw,"represented in 64 bits"),gw.forEach(a),pm=t(gr,". However, when using "),xe=o(gr,"A",{href:!0,rel:!0});var Ew=l(xe);km=t(Ew,"bitwise operations"),Ew.forEach(a),hm=t(gr," on the number, JavaScript will treat the number as 32 bits."),gr.forEach(a),vm=c(D),ge=o(D,"P",{});var Ap=l(ge);dm=t(Ap,"To inspect or modify the boolean value stored in a number, we use "),Ee=o(Ap,"A",{href:!0,rel:!0});var _w=l(Ee);um=t(_w,"bitwise operations"),_w.forEach(a),ym=t(Ap,"."),Ap.forEach(a),fm=c(D),Io=o(D,"DIV",{class:!0});var x4=l(Io);x4.forEach(a),mm=c(D),_e=o(D,"P",{});var Hp=l(_e);xm=t(Hp,"The 2nd operand we use in the bitwise operation, is like a "),be=o(Hp,"A",{href:!0,rel:!0});var bw=l(be);gm=t(bw,"mask"),bw.forEach(a),Em=t(Hp," that allow us to target a specific bit in the 1st number, that stores our boolean values."),Hp.forEach(a),_m=c(D),we=o(D,"P",{});var jp=l(we);bm=t(jp,"We call the mask, "),gi=o(jp,"STRONG",{});var ww=l(gi);wm=t(ww,"bitmask"),ww.forEach(a),$m=t(jp,"."),jp.forEach(a),D.forEach(a),Qc=c(p),f=o(p,"SECTION",{});var E=l(f);Ei=o(E,"H3",{});var $w=l(Ei);$e=o($w,"A",{href:!0,id:!0});var Ow=l($e);Om=t(Ow,"Bitmask in Svelte"),Ow.forEach(a),$w.forEach(a),Dm=c(E),_i=o(E,"P",{});var Dw=l(_i);Sm=t(Dw,"As mentioned earlier, we assign each variable an index:"),Dw.forEach(a),Tm=c(E),Lo=o(E,"DIV",{class:!0});var g4=l(Lo);g4.forEach(a),Nm=c(E),bi=o(E,"P",{});var Sw=l(bi);Cm=t(Sw,"So instead of returning the instance variable as an JavaScript Object, we now return it as an JavaScript Array:"),Sw.forEach(a),Im=c(E),Po=o(E,"DIV",{class:!0});var E4=l(Po);E4.forEach(a),Lm=c(E),hs=o(E,"P",{});var xa=l(hs);Pm=t(xa,"The variable is accessed via "),wi=o(xa,"STRONG",{});var Tw=l(wi);Am=t(Tw,"index"),Tw.forEach(a),Hm=t(xa,", "),Ao=o(xa,"CODE",{class:!0});var Nw=l(Ao);jm=t(Nw,"$$.ctx[index]"),Nw.forEach(a),Mm=t(xa,", instead of "),$i=o(xa,"STRONG",{});var Cw=l($i);Rm=t(Cw,"variable name"),Cw.forEach(a),Gm=t(xa,":"),xa.forEach(a),Vm=c(E),Ho=o(E,"DIV",{class:!0});var _4=l(Ho);_4.forEach(a),qm=c(E),vs=o(E,"P",{});var ga=l(vs);Um=t(ga,"The "),jo=o(ga,"CODE",{class:!0});var Iw=l(jo);Bm=t(Iw,"$$invalidate"),Iw.forEach(a),Jm=t(ga," function works the same, except it takes in "),Oi=o(ga,"STRONG",{});var Lw=l(Oi);Wm=t(Lw,"index"),Lw.forEach(a),zm=t(ga," instead of "),Di=o(ga,"STRONG",{});var Pw=l(Di);Fm=t(Pw,"variable name"),Pw.forEach(a),Ym=t(ga,":"),ga.forEach(a),Zm=c(E),Mo=o(E,"DIV",{class:!0});var b4=l(Mo);b4.forEach(a),Km=c(E),Ro=o(E,"P",{});var uE=l(Ro);Go=o(uE,"CODE",{class:!0});var Aw=l(Go);Qm=t(Aw,"$$.dirty"),Aw.forEach(a),Xm=t(uE," now stores a list of numbers. Each number carries 31 boolean values, each boolean value indicates whether the variable of that index is dirty or not."),uE.forEach(a),s1=c(E),Si=o(E,"P",{});var Hw=l(Si);a1=t(Hw,"To set a variable as dirty, we use bitwise operation:"),Hw.forEach(a),e1=c(E),Vo=o(E,"DIV",{class:!0});var w4=l(Vo);w4.forEach(a),t1=c(E),Ti=o(E,"P",{});var jw=l(Ti);n1=t(jw,"And to verify whether a variable is dirty, we use bitwise operation too!"),jw.forEach(a),o1=c(E),qo=o(E,"DIV",{class:!0});var $4=l(qo);$4.forEach(a),l1=c(E),ds=o(E,"P",{});var Ea=l(ds);r1=t(Ea,"With using bitmask, "),Uo=o(Ea,"CODE",{class:!0});var Mw=l(Uo);i1=t(Mw,"$$.dirty"),Mw.forEach(a),c1=t(Ea," is now reset to "),Bo=o(Ea,"CODE",{class:!0});var Rw=l(Bo);p1=t(Rw,"[-1]"),Rw.forEach(a),k1=t(Ea," instead of "),Jo=o(Ea,"CODE",{class:!0});var Gw=l(Jo);h1=t(Gw,"null"),Gw.forEach(a),v1=t(Ea,"."),Ea.forEach(a),d1=c(E),Z=o(E,"P",{});var zs=l(Z);Ni=o(zs,"STRONG",{});var Vw=l(Ni);u1=t(Vw,"Trivia:"),Vw.forEach(a),y1=c(zs),Wo=o(zs,"CODE",{class:!0});var qw=l(Wo);f1=t(qw,"-1"),qw.forEach(a),m1=t(zs," is "),zo=o(zs,"CODE",{class:!0});var Uw=l(zo);x1=t(Uw,"0b1111_1111"),Uw.forEach(a),g1=t(zs," in binary, where all the bits are "),Fo=o(zs,"CODE",{class:!0});var Bw=l(Fo);E1=t(Bw,"1"),Bw.forEach(a),_1=t(zs,"."),zs.forEach(a),E.forEach(a),Xc=c(p),_s=o(p,"SECTION",{});var Er=l(_s);Ci=o(Er,"H4",{});var Jw=l(Ci);oa=o(Jw,"A",{href:!0,id:!0});var yE=l(oa);b1=t(yE,"Destructuring "),Ii=o(yE,"STRONG",{});var Ww=l(Ii);w1=t(Ww,"$$.dirty"),Ww.forEach(a),yE.forEach(a),Jw.forEach(a),$1=c(Er),us=o(Er,"P",{});var _a=l(us);O1=t(_a,"One code-size optimisation that Svelte does is to always destructure the "),Yo=o(_a,"CODE",{class:!0});var zw=l(Yo);D1=t(zw,"dirty"),zw.forEach(a),S1=t(_a," array in the "),Li=o(_a,"STRONG",{});var Fw=l(Li);T1=t(Fw,"u_p_date function"),Fw.forEach(a),N1=t(_a," if there's less than 32 variables, since we will always access "),Zo=o(_a,"CODE",{class:!0});var Yw=l(Zo);C1=t(Yw,"dirty[0]"),Yw.forEach(a),I1=t(_a," anyway:"),_a.forEach(a),L1=c(Er),Ko=o(Er,"DIV",{class:!0});var O4=l(Ko);O4.forEach(a),Er.forEach(a),sp=c(p),la=o(p,"SECTION",{});var Mp=l(la);Pi=o(Mp,"H4",{});var Zw=l(Pi);Oe=o(Zw,"A",{href:!0,id:!0});var Kw=l(Oe);P1=t(Kw,"tl/dr:"),Kw.forEach(a),Zw.forEach(a),A1=c(Mp),De=o(Mp,"UL",{});var Rp=l(De);Bs=o(Rp,"LI",{});var _r=l(Bs);H1=t(_r,"The underlying mechanism for "),Qo=o(_r,"CODE",{class:!0});var Qw=l(Qo);j1=t(Qw,"$$invalidate"),Qw.forEach(a),M1=t(_r," and "),Xo=o(_r,"CODE",{class:!0});var Xw=l(Xo);R1=t(Xw,"schedule_update"),Xw.forEach(a),G1=t(_r," does not change"),_r.forEach(a),V1=c(Rp),Ai=o(Rp,"LI",{});var s$=l(Ai);q1=t(s$,"Using bitmask, the compiled code is much compact"),s$.forEach(a),Rp.forEach(a),Mp.forEach(a),ap=c(p),v=o(p,"SECTION",{});var d=l(v);Hi=o(d,"H2",{});var a$=l(Hi);Se=o(a$,"A",{href:!0,id:!0});var e$=l(Se);U1=t(e$,"Reactive Declaration"),e$.forEach(a),a$.forEach(a),B1=c(d),ra=o(d,"P",{});var Ac=l(ra);J1=t(Ac,"Svelte allow us to declare reactive values via the "),Te=o(Ac,"A",{href:!0,rel:!0});var t$=l(Te);W1=t(t$,"labeled statement"),t$.forEach(a),z1=t(Ac,", "),sl=o(Ac,"CODE",{class:!0});var n$=l(sl);F1=t(n$,"$:"),n$.forEach(a),Ac.forEach(a),Y1=c(d),al=o(d,"DIV",{class:!0});var D4=l(al);D4.forEach(a),Z1=c(d),ji=o(d,"P",{});var o$=l(ji);Ne=o(o$,"A",{href:!0,rel:!0});var l$=l(Ne);K1=t(l$,"Svelte REPL"),l$.forEach(a),o$.forEach(a),Q1=c(d),Ce=o(d,"P",{});var Gp=l(Ce);X1=t(Gp,"If you look at the compiled output, you would find out that the declarative statements appeared in the "),Ie=o(Gp,"A",{href:!0});var fE=l(Ie);el=o(fE,"CODE",{class:!0});var r$=l(el);sx=t(r$,"instance"),r$.forEach(a),ax=t(fE," function"),fE.forEach(a),ex=t(Gp,":"),Gp.forEach(a),tx=c(d),tl=o(d,"DIV",{class:!0});var S4=l(tl);S4.forEach(a),nx=c(d),Mi=o(d,"P",{});var i$=l(Mi);ox=t(i$,"Try reorder the reactive declarations and observe the change in the compiled output:"),i$.forEach(a),lx=c(d),nl=o(d,"DIV",{class:!0});var T4=l(nl);T4.forEach(a),rx=c(d),Ri=o(d,"P",{});var c$=l(Ri);Le=o(c$,"A",{href:!0,rel:!0});var p$=l(Le);ix=t(p$,"Svelte REPL"),p$.forEach(a),c$.forEach(a),cx=c(d),ol=o(d,"DIV",{class:!0});var N4=l(ol);N4.forEach(a),px=c(d),Gi=o(d,"P",{});var k$=l(Gi);kx=t(k$,"Some observations:"),k$.forEach(a),hx=c(d),ys=o(d,"UL",{});var ba=l(ys);ia=o(ba,"LI",{});var Hc=l(ia);vx=t(Hc,"When there are reactive declarations, Svelte defines a custom "),ll=o(Hc,"CODE",{class:!0});var h$=l(ll);dx=t(h$,"$$.update"),h$.forEach(a),ux=t(Hc," method."),Vi=o(Hc,"UL",{});var v$=l(Vi);bs=o(v$,"LI",{});var wt=l(bs);rl=o(wt,"CODE",{class:!0});var d$=l(rl);yx=t(d$,"$$.update"),d$.forEach(a),fx=t(wt," is a "),Pe=o(wt,"A",{href:!0,rel:!0});var u$=l(Pe);mx=t(u$,"no-op function"),u$.forEach(a),xx=t(wt," by default. (See "),Ae=o(wt,"A",{href:!0,rel:!0});var y$=l(Ae);gx=t(y$,"src/runtime/internal/Component.ts"),y$.forEach(a),Ex=t(wt,")"),wt.forEach(a),v$.forEach(a),Hc.forEach(a),_x=c(ba),He=o(ba,"LI",{});var Vp=l(He);bx=t(Vp,"Svelte uses "),il=o(Vp,"CODE",{class:!0});var f$=l(il);wx=t(f$,"$$invalidate"),f$.forEach(a),$x=t(Vp," to update the value of a reactive variable too."),Vp.forEach(a),Ox=c(ba),cl=o(ba,"LI",{});var mE=l(cl);Dx=t(mE,"Svelte sorts the reactive declarations and statements, based on the dependency relationship between the declarations and statements"),qi=o(mE,"UL",{});var m$=l(qi);U=o(m$,"LI",{});var xs=l(U);pl=o(xs,"CODE",{class:!0});var x$=l(pl);Sx=t(x$,"quadrupled"),x$.forEach(a),Tx=t(xs," depends on "),kl=o(xs,"CODE",{class:!0});var g$=l(kl);Nx=t(g$,"doubled"),g$.forEach(a),Cx=t(xs,", so "),hl=o(xs,"CODE",{class:!0});var E$=l(hl);Ix=t(E$,"quadrupled"),E$.forEach(a),Lx=t(xs," is evaluated and "),vl=o(xs,"CODE",{class:!0});var _$=l(vl);Px=t(_$,"$$invalidate"),_$.forEach(a),Ax=t(xs,"d after "),dl=o(xs,"CODE",{class:!0});var b$=l(dl);Hx=t(b$,"doubled"),b$.forEach(a),jx=t(xs,"."),xs.forEach(a),m$.forEach(a),mE.forEach(a),Mx=c(ba),je=o(ba,"LI",{});var qp=l(je);Rx=t(qp,"You may have noticed that the order of the variables in the array returned "),ul=o(qp,"CODE",{class:!0});var w$=l(ul);Gx=t(w$,"[doubled, tripled, quadrupled, count]"),w$.forEach(a),Vx=t(qp," may be different from the output in the latest Svelte version, but that's beyond the scope of this article."),qp.forEach(a),ba.forEach(a),qx=c(d),Me=o(d,"P",{});var Up=l(Me);Ux=t(Up,"Since all reactive declarations and statements are grouped into the "),yl=o(Up,"CODE",{class:!0});var $$=l(yl);Bx=t($$,"$$.update"),$$.forEach(a),Jx=t(Up," method, and also the fact that Svelte will sort the declarations and statements according to their dependency relationship, it is irrelevant of the location or the order you declared them."),Up.forEach(a),Wx=c(d),Ui=o(d,"P",{});var O$=l(Ui);zx=t(O$,"The following component still works:"),O$.forEach(a),Fx=c(d),fl=o(d,"DIV",{class:!0});var C4=l(fl);C4.forEach(a),Yx=c(d),Bi=o(d,"P",{});var D$=l(Bi);Re=o(D$,"A",{href:!0,rel:!0});var S$=l(Re);Zx=t(S$,"Svelte REPL"),S$.forEach(a),D$.forEach(a),Kx=c(d),Ji=o(d,"P",{});var T$=l(Ji);Ge=o(T$,"STRONG",{});var Bp=l(Ge);Qx=t(Bp,"The next thing you may ask, when is "),ml=o(Bp,"CODE",{class:!0});var N$=l(ml);Xx=t(N$,"$$.update"),N$.forEach(a),s2=t(Bp," being called?"),Bp.forEach(a),T$.forEach(a),a2=c(d),Js=o(d,"P",{});var br=l(Js);e2=t(br,"Remember the "),xl=o(br,"CODE",{class:!0});var C$=l(xl);t2=t(C$,"update"),C$.forEach(a),n2=t(br," function that gets called in the "),gl=o(br,"CODE",{class:!0});var I$=l(gl);o2=t(I$,"flush"),I$.forEach(a),l2=t(br," function?"),br.forEach(a),r2=c(d),Ve=o(d,"P",{});var Jp=l(Ve);i2=t(Jp,"I put a "),El=o(Jp,"CODE",{class:!0});var L$=l(El);c2=t(L$,"NOTE:"),L$.forEach(a),p2=t(Jp," comment saying that it will be important later. Well, it is important now."),Jp.forEach(a),k2=c(d),_l=o(d,"DIV",{class:!0});var I4=l(_l);I4.forEach(a),h2=c(d),fs=o(d,"P",{});var wa=l(fs);v2=t(wa,"The "),bl=o(wa,"CODE",{class:!0});var P$=l(bl);d2=t(P$,"$$.update"),P$.forEach(a),u2=t(wa," function gets called "),Wi=o(wa,"STRONG",{});var A$=l(Wi);y2=t(A$,"in the same microtask"),A$.forEach(a),f2=t(wa," with the DOM update, right before we called the "),wl=o(wa,"CODE",{class:!0});var H$=l(wl);m2=t(H$,"$$.fragment.p()"),H$.forEach(a),x2=t(wa," to update the DOM."),wa.forEach(a),g2=c(d),zi=o(d,"P",{});var j$=l(zi);E2=t(j$,"The implication of the above fact is"),j$.forEach(a),d.forEach(a),ep=c(p),I=o(p,"SECTION",{});var j=l(I);Fi=o(j,"H3",{});var M$=l(Fi);qe=o(M$,"A",{href:!0,id:!0});var R$=l(qe);_2=t(R$,"1. Execution of all reactive declarations and statements are batched"),R$.forEach(a),M$.forEach(a),b2=c(j),Yi=o(j,"P",{});var G$=l(Yi);w2=t(G$,"Just as how DOM updates are batched, reactive declarations and statements are batched too!"),G$.forEach(a),$2=c(j),$l=o(j,"DIV",{class:!0});var L4=l($l);L4.forEach(a),O2=c(j),Zi=o(j,"P",{});var V$=l(Zi);Ue=o(V$,"A",{href:!0,rel:!0});var q$=l(Ue);D2=t(q$,"Svelte REPL"),q$.forEach(a),V$.forEach(a),S2=c(j),Be=o(j,"P",{});var Wp=l(Be);T2=t(Wp,"When "),Ol=o(Wp,"CODE",{class:!0});var U$=l(Ol);N2=t(U$,"update()"),U$.forEach(a),C2=t(Wp," get called,"),Wp.forEach(a),I2=c(j),G=o(j,"OL",{});var ss=l(G);z=o(ss,"LI",{});var $s=l(z);L2=t($s,"Similar to the "),Dl=o($s,"A",{href:!0});var B$=l(Dl);P2=t(B$,"flow described above"),B$.forEach(a),A2=t($s,", "),Sl=o($s,"CODE",{class:!0});var J$=l(Sl);H2=t(J$,"$$invalidate"),J$.forEach(a),j2=t($s," both "),Ki=o($s,"STRONG",{});var W$=l(Ki);M2=t(W$,'"givenName"'),W$.forEach(a),R2=t($s," and "),Qi=o($s,"STRONG",{});var z$=l(Qi);G2=t(z$,'"familyName"'),z$.forEach(a),V2=t($s,", and schedules an update"),$s.forEach(a),q2=c(ss),Xi=o(ss,"LI",{});var F$=l(Xi);sc=o(F$,"STRONG",{});var Y$=l(sc);U2=t(Y$,"-- End of task --"),Y$.forEach(a),F$.forEach(a),B2=c(ss),ac=o(ss,"LI",{});var Z$=l(ac);ec=o(Z$,"STRONG",{});var K$=l(ec);J2=t(K$,"-- Start of microtask--"),K$.forEach(a),Z$.forEach(a),W2=c(ss),ca=o(ss,"LI",{});var jc=l(ca);Tl=o(jc,"CODE",{class:!0});var Q$=l(Tl);z2=t(Q$,"flush()"),Q$.forEach(a),F2=t(jc," calls "),Nl=o(jc,"CODE",{class:!0});var X$=l(Nl);Y2=t(X$,"update()"),X$.forEach(a),Z2=t(jc," for each component marked dirty"),jc.forEach(a),K2=c(ss),Je=o(ss,"LI",{});var zp=l(Je);Q2=t(zp,"Runs "),Cl=o(zp,"CODE",{class:!0});var s5=l(Cl);X2=t(s5,"$$.update()"),s5.forEach(a),We=o(zp,"UL",{});var Fp=l(We);K=o(Fp,"LI",{});var Fs=l(K);s3=t(Fs,"As "),tc=o(Fs,"STRONG",{});var a5=l(tc);a3=t(a5,'"givenName"'),a5.forEach(a),e3=t(Fs," and "),nc=o(Fs,"STRONG",{});var e5=l(nc);t3=t(e5,'"familyName"'),e5.forEach(a),n3=t(Fs," has changed, evaluates and "),Il=o(Fs,"CODE",{class:!0});var t5=l(Il);o3=t(t5,"$$invalidate"),t5.forEach(a),l3=c(Fs),oc=o(Fs,"STRONG",{});var n5=l(oc);r3=t(n5,'"name"'),n5.forEach(a),Fs.forEach(a),i3=c(Fp),pa=o(Fp,"LI",{});var Mc=l(pa);c3=t(Mc,"As "),lc=o(Mc,"STRONG",{});var o5=l(lc);p3=t(o5,'"name"'),o5.forEach(a),k3=t(Mc," has changed, executes "),Ll=o(Mc,"CODE",{class:!0});var l5=l(Ll);h3=t(l5,"console.log('name', name);"),l5.forEach(a),Mc.forEach(a),Fp.forEach(a),zp.forEach(a),v3=c(ss),ze=o(ss,"LI",{});var Yp=l(ze);d3=t(Yp,"Calls "),Pl=o(Yp,"CODE",{class:!0});var r5=l(Pl);u3=t(r5,"$$.fragment.p(...)"),r5.forEach(a),y3=t(Yp," to update the DOM."),Yp.forEach(a),ss.forEach(a),f3=c(j),V=o(j,"P",{});var as=l(V);m3=t(as,"As you can see, even though we've updated "),Al=o(as,"CODE",{class:!0});var i5=l(Al);x3=t(i5,"givenName"),i5.forEach(a),g3=t(as," and "),Hl=o(as,"CODE",{class:!0});var c5=l(Hl);E3=t(c5,"familyName"),c5.forEach(a),_3=t(as,", we only evaluate "),jl=o(as,"CODE",{class:!0});var p5=l(jl);b3=t(p5,"name"),p5.forEach(a),w3=t(as," and executes "),Ml=o(as,"CODE",{class:!0});var k5=l(Ml);$3=t(k5,"console.log('name', name)"),k5.forEach(a),O3=c(as),rc=o(as,"STRONG",{});var h5=l(rc);D3=t(h5,"once"),h5.forEach(a),S3=t(as," instead of twice:"),as.forEach(a),T3=c(j),Rl=o(j,"DIV",{class:!0});var P4=l(Rl);P4.forEach(a),j.forEach(a),tp=c(p),H=o(p,"SECTION",{});var es=l(H);ic=o(es,"H3",{});var v5=l(ic);Fe=o(v5,"A",{href:!0,id:!0});var d5=l(Fe);N3=t(d5,"2. The value of reactive variable outside of reactive declarations and statements may not be up to date"),d5.forEach(a),v5.forEach(a),C3=c(es),cc=o(es,"P",{});var u5=l(cc);I3=t(u5,"Because the reactive declarations and statements are batched and executed in the next microtask, you can't expect the value to be updated synchronously."),u5.forEach(a),L3=c(es),Gl=o(es,"DIV",{class:!0});var A4=l(Gl);A4.forEach(a),P3=c(es),pc=o(es,"P",{});var y5=l(pc);Ye=o(y5,"A",{href:!0,rel:!0});var f5=l(Ye);A3=t(f5,"Svelte REPL"),f5.forEach(a),y5.forEach(a),H3=c(es),Ze=o(es,"P",{});var Zp=l(Ze);j3=t(Zp,"Instead, you "),kc=o(Zp,"STRONG",{});var m5=l(kc);M3=t(m5,"have to"),m5.forEach(a),R3=t(Zp," refer the reactive variable in another reactive declaration or statement:"),Zp.forEach(a),G3=c(es),Vl=o(es,"DIV",{class:!0});var H4=l(Vl);H4.forEach(a),es.forEach(a),np=c(p),Q=o(p,"SECTION",{});var $a=l(Q);hc=o($a,"H3",{});var x5=l(hc);Ke=o(x5,"A",{href:!0,id:!0});var g5=l(Ke);V3=t(g5,"Sorting of reactive declarations and statements"),g5.forEach(a),x5.forEach(a),q3=c($a),vc=o($a,"P",{});var E5=l(vc);U3=t(E5,"Svelte tries to preserve the order of reactive declarations and statements as they are declared as much as possible."),E5.forEach(a),B3=c($a),Qe=o($a,"P",{});var Kp=l(Qe);J3=t(Kp,"However, if one reactive declaration or statement refers to a variable that was defined by another reactive declaration, then, "),dc=o(Kp,"STRONG",{});var _5=l(dc);W3=t(_5,"it will be inserted after the latter reactive declaration"),_5.forEach(a),z3=t(Kp,":"),Kp.forEach(a),F3=c($a),ql=o($a,"DIV",{class:!0});var j4=l(ql);j4.forEach(a),$a.forEach(a),op=c(p),L=o(p,"SECTION",{});var M=l(L);uc=o(M,"H3",{});var b5=l(uc);Xe=o(b5,"A",{href:!0,id:!0});var w5=l(Xe);Y3=t(w5,"Reactive variable that is not reactive"),w5.forEach(a),b5.forEach(a),Z3=c(M),st=o(M,"P",{});var Qp=l(st);K3=t(Qp,"The Svelte compiler tracks all the variables declared in the "),Ul=o(Qp,"CODE",{class:!0});var $5=l(Ul);Q3=t($5,"<script>"),$5.forEach(a),X3=t(Qp," tag."),Qp.forEach(a),sg=c(M),at=o(M,"P",{});var Xp=l(at);ag=t(Xp,"If all the variables of a reactive declaration or statement refers to, never gets mutated or reassigned, then the reactive declaration or statement will not be added into "),Bl=o(Xp,"CODE",{class:!0});var O5=l(Bl);eg=t(O5,"$$.update"),O5.forEach(a),tg=t(Xp,"."),Xp.forEach(a),ng=c(M),yc=o(M,"P",{});var D5=l(yc);og=t(D5,"For example:"),D5.forEach(a),lg=c(M),Jl=o(M,"DIV",{class:!0});var M4=l(Jl);M4.forEach(a),rg=c(M),fc=o(M,"P",{});var S5=l(fc);et=o(S5,"A",{href:!0,rel:!0});var T5=l(et);ig=t(T5,"Svelte REPL"),T5.forEach(a),S5.forEach(a),cg=c(M),Ws=o(M,"P",{});var wr=l(Ws);pg=t(wr,"Since, "),Wl=o(wr,"CODE",{class:!0});var N5=l(Wl);kg=t(N5,"count"),N5.forEach(a),hg=t(wr," never gets mutated or reassigned, Svelte optimises the compiled output by not defining "),zl=o(wr,"CODE",{class:!0});var C5=l(zl);vg=t(C5,"$$self.$$.update"),C5.forEach(a),dg=t(wr,"."),wr.forEach(a),ug=c(M),Fl=o(M,"DIV",{class:!0});var R4=l(Fl);R4.forEach(a),M.forEach(a),lp=c(p),Yl=o(p,"SECTION",{});var I5=l(Yl);mc=o(I5,"H2",{});var L5=l(mc);tt=o(L5,"A",{href:!0,id:!0});var P5=l(tt);yg=t(P5,"Summary"),P5.forEach(a),L5.forEach(a),I5.forEach(a),rp=c(p),Zl=o(p,"SECTION",{});var A5=l(Zl);xc=o(A5,"H3",{});var H5=l(xc);nt=o(H5,"A",{href:!0,id:!0});var j5=l(nt);fg=t(j5,"1. Svelte keeps track of which variables are dirty and batched the DOM updates."),j5.forEach(a),H5.forEach(a),A5.forEach(a),ip=c(p),Kl=o(p,"SECTION",{});var M5=l(Kl);gc=o(M5,"H3",{});var R5=l(gc);ot=o(R5,"A",{href:!0,id:!0});var G5=l(ot);mg=t(G5,"2. Using bitmask, Svelte able to generate a more compact compiled code."),G5.forEach(a),R5.forEach(a),M5.forEach(a),cp=c(p),Ql=o(p,"SECTION",{});var V5=l(Ql);Ec=o(V5,"H3",{});var q5=l(Ec);lt=o(q5,"A",{href:!0,id:!0});var U5=l(lt);xg=t(U5,"3. Reactive declarations and statements are executed in batch, just like DOM updates"),U5.forEach(a),q5.forEach(a),V5.forEach(a),pp=c(p),B=o(p,"SECTION",{});var Os=l(B);_c=o(Os,"H2",{});var B5=l(_c);rt=o(B5,"A",{href:!0,id:!0});var J5=l(rt);gg=t(J5,"Closing Note"),J5.forEach(a),B5.forEach(a),Eg=c(Os),it=o(Os,"P",{});var sk=l(it);_g=t(sk,"If you wish to know more, "),ct=o(sk,"A",{href:!0,rel:!0});var W5=l(ct);bg=t(W5,"follow me on Twitter"),W5.forEach(a),wg=t(sk,"."),sk.forEach(a),$g=c(Os),ms=o(Os,"P",{});var Oa=l(ms);Og=t(Oa,"I'll post it on Twitter when the next part is ready, where I'll be covering "),pt=o(Oa,"A",{href:!0,rel:!0});var z5=l(pt);Dg=t(z5,"logic blocks"),z5.forEach(a),Sg=t(Oa,", "),kt=o(Oa,"A",{href:!0,rel:!0});var F5=l(kt);Tg=t(F5,"slots"),F5.forEach(a),Ng=t(Oa,", "),ht=o(Oa,"A",{href:!0,rel:!0});var Y5=l(ht);Cg=t(Y5,"context"),Y5.forEach(a),Ig=t(Oa,", and many others."),Oa.forEach(a),Lg=c(Os),bc=o(Os,"P",{});var Z5=l(bc);vt=o(Z5,"STRONG",{});var ak=l(vt);Pg=t(ak,"\u2B05 \u2B05  Previously in "),Xl=o(ak,"A",{href:!0});var K5=l(Xl);Ag=t(K5,"Part 1"),K5.forEach(a),Hg=t(ak,"."),ak.forEach(a),Z5.forEach(a),jg=c(Os),wc=o(Os,"P",{});var Q5=l(wc);dt=o(Q5,"STRONG",{});var ek=l(dt);Mg=t(ek,"\u27A1 \u27A1  Continue reading on "),sr=o(ek,"A",{href:!0});var X5=l(sr);Rg=t(X5,"Part 3"),X5.forEach(a),Gg=t(ek,"."),ek.forEach(a),Q5.forEach(a),Os.forEach(a),kp=c(p),ka=o(p,"SECTION",{});var tk=l(ka);$c=o(tk,"H2",{});var s6=l($c);ut=o(s6,"A",{href:!0,id:!0});var a6=l(ut);Vg=t(a6,"Further Resources"),a6.forEach(a),s6.forEach(a),qg=c(tk),F=o(tk,"UL",{});var Ds=l(F);yt=o(Ds,"LI",{});var nk=l(yt);Ug=t(nk,"Rich Harris shares about "),ft=o(nk,"A",{href:!0,rel:!0});var e6=l(ft);Bg=t(e6,"Bitmask Tracking at Svelte Society NYC"),e6.forEach(a),Jg=t(nk,"."),nk.forEach(a),Wg=c(Ds),ha=o(Ds,"LI",{});var Rc=l(ha);zg=t(Rc,"Svelte Tutorial - "),mt=o(Rc,"A",{href:!0,rel:!0});var t6=l(mt);Fg=t(t6,"Reactivity"),t6.forEach(a),Yg=c(Rc),xt=o(Rc,"A",{href:!0,rel:!0});var n6=l(xt);Zg=t(n6,"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/"),n6.forEach(a),Rc.forEach(a),Kg=c(Ds),ar=o(Ds,"LI",{});var xE=l(ar);gt=o(xE,"A",{href:!0,rel:!0});var o6=l(gt);Qg=t(o6,"The Art of Bitmasking"),o6.forEach(a),Xg=t(xE," by Shakib Ahmed"),xE.forEach(a),sE=c(Ds),er=o(Ds,"LI",{});var gE=l(er);Et=o(gE,"A",{href:!0,rel:!0});var l6=l(Et);aE=t(l6,"Bitmasks: A very esoteric (and impractical) way of managing booleans"),l6.forEach(a),eE=t(gE," by Basti Ortiz"),gE.forEach(a),tE=c(Ds),Oc=o(Ds,"LI",{});var r6=l(Oc);_t=o(r6,"A",{href:!0,rel:!0});var i6=l(_t);nE=t(i6,"MDN: Bitwise Operators"),i6.forEach(a),r6.forEach(a),Ds.forEach(a),tk.forEach(a),this.h()},h(){r(q,"href","/compile-svelte-in-your-head-part-1/"),r(Dt,"href","/compile-svelte-in-your-head-part-1/"),r(St,"class","inline"),r(Tt,"class","inline"),r(Da,"class","code-section"),r(Nt,"class","inline"),r(Ct,"class","inline"),r(Sa,"href","https://github.com/sveltejs/svelte/blob/v3.20.1/CHANGELOG.md#3201"),r(Sa,"rel","nofollow"),r(Ta,"href","#pre-v3-16-0"),r(Ta,"id","pre-v3-16-0"),r(It,"class","inline"),r(Na,"href","https://github.com/sveltejs/svelte/blob/master/CHANGELOG.md#3160"),r(Na,"rel","nofollow"),r(Ca,"href","https://github.com/sveltejs/svelte/pull/3945"),r(Ca,"rel","nofollow"),r(Lt,"class","inline"),r(Pt,"href","/compile-svelte-in-your-head-part-1"),r(La,"href","#ctx"),r(La,"id","ctx"),r(At,"href","/compile-svelte-in-your-head-part-1#instance-variable"),r(Ht,"class","inline"),r(jt,"class","inline"),r(Mt,"class","inline"),r(Rt,"class","inline"),r(Gt,"class","inline"),r(Vt,"class","code-section"),r(ja,"href","https://svelte.dev/repl/5b12ff52c2874f4dbb6405d9133b34da?version=3.20.1"),r(ja,"rel","nofollow"),r(qt,"class","code-section"),r(Ut,"class","inline"),r(Bt,"class","inline"),r(Ma,"href","#dirty"),r(Ma,"id","dirty"),r(Wt,"class","inline"),r(zt,"class","code-section"),r(Ra,"href","https://svelte.dev/repl/da579d0113b44f01b2b94893dce21487?version=3.20.1"),r(Ra,"rel","nofollow"),r(Ft,"class","inline"),r(Yt,"class","inline"),r(Ga,"href","https://github.com/sveltejs/svelte/blob/v3.15.0/src/runtime/internal/Component.ts#L124"),r(Ga,"rel","nofollow"),r(Zt,"class","inline"),r(Kt,"class","code-section"),r(Qt,"class","inline"),r(Xt,"class","code-section"),r(an,"class","inline"),r(en,"class","inline"),r(tn,"class","code-section"),r(nn,"class","inline"),r(on,"class","inline"),r(Va,"href","#invalidate"),r(Va,"id","invalidate"),r(rn,"class","inline"),r(pn,"class","inline"),r(hn,"class","inline"),r(vn,"class","inline"),r(dn,"class","code-section"),r(un,"class","inline"),r(fn,"class","inline"),r(xn,"class","inline"),r(gn,"class","code-section"),r(Ja,"href","https://github.com/sveltejs/svelte/blob/v3.15.0/src/runtime/internal/Component.ts#L130-L136"),r(Ja,"rel","nofollow"),r(En,"class","inline"),r(_n,"class","inline"),r(bn,"class","code-section"),r(wn,"class","inline"),r($n,"class","inline"),r(On,"class","inline"),r(Dn,"class","code-section"),r(Sn,"class","inline"),r(Tn,"class","inline"),r(Nn,"class","inline"),r(Ya,"href","#schedule-update"),r(Ya,"id","schedule-update"),r(In,"class","inline"),r(Za,"href","https://github.com/sveltejs/svelte/blob/v3.20.1/CHANGELOG.md#3201"),r(Za,"rel","nofollow"),r(Ka,"href","https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/"),r(Ka,"rel","nofollow"),r(Ln,"class","inline"),r(Pn,"class","code-section"),r(An,"class","inline"),r(Hn,"class","code-section"),r(Xa,"href","https://github.com/sveltejs/svelte/blob/v3.15.0/src/runtime/internal/scheduler.ts#L14"),r(Xa,"rel","nofollow"),r(jn,"class","code-section"),r(se,"href","https://svelte.dev/repl/761a0a6cc2834afb842942e1d23875b1?version=3.20.1"),r(se,"rel","nofollow"),r(Mn,"class","inline"),r(Rn,"class","inline"),r(Gn,"class","inline"),r(Vn,"class","inline"),r(qn,"class","inline"),r(Un,"class","inline"),r(Jn,"class","inline"),r(Wn,"class","inline"),r(zn,"class","inline"),r(Fn,"class","inline"),r(Yn,"class","inline"),r(Kn,"class","inline"),r(Qn,"class","inline"),r(Xn,"class","inline"),r(so,"class","inline"),r(ao,"class","inline"),r(eo,"class","inline"),r(to,"class","inline"),r(no,"class","inline"),r(oo,"class","inline"),r(lo,"class","inline"),r(ro,"class","inline"),r(io,"class","inline"),r(co,"class","inline"),r(po,"class","inline"),r(ko,"class","inline"),r(ho,"class","inline"),r(re,"href","#tl-dr"),r(re,"id","tl-dr"),r(vo,"class","inline"),r(uo,"class","inline"),r(yo,"class","inline"),r(fo,"class","inline"),r(mo,"class","inline"),r(xo,"class","inline"),r(ce,"href","#v3-16-0"),r(ce,"id","v3-16-0"),r(pe,"href","https://github.com/sveltejs/svelte/pull/3945"),r(pe,"rel","nofollow"),r(go,"class","code-section"),r(Eo,"class","code-section"),r(he,"href","https://en.wikipedia.org/wiki/Mask_(computing)"),r(he,"rel","nofollow"),r(_o,"class","code-section"),r(ve,"href","#bitmask"),r(ve,"id","bitmask"),r(de,"href","https://blog.bitsrc.io/the-art-of-bitmasking-ec58ab1b4c03"),r(de,"rel","nofollow"),r(ue,"href","https://dev.to/somedood/bitmasks-a-very-esoteric-and-impractical-way-of-managing-booleans-1hlf"),r(ue,"rel","nofollow"),r(bo,"class","inline"),r(wo,"class","inline"),r($o,"class","inline"),r(Oo,"class","inline"),r(Do,"class","inline"),r(So,"class","inline"),r(To,"class","inline"),r(No,"class","inline"),r(Co,"class","inline"),r(ye,"href","https://en.wikipedia.org/wiki/Bit_numbering#Least_significant_bit"),r(ye,"rel","nofollow"),r(fe,"href","https://en.wikipedia.org/wiki/Bit_numbering#Most_significant_bit"),r(fe,"rel","nofollow"),r(me,"href","https://2ality.com/2012/04/number-encoding.html"),r(me,"rel","nofollow"),r(xe,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators"),r(xe,"rel","nofollow"),r(Ee,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators"),r(Ee,"rel","nofollow"),r(Io,"class","code-section"),r(be,"href","https://en.wikipedia.org/wiki/Mask_(computing)"),r(be,"rel","nofollow"),r($e,"href","#bitmask-in-svelte"),r($e,"id","bitmask-in-svelte"),r(Lo,"class","code-section"),r(Po,"class","code-section"),r(Ao,"class","inline"),r(Ho,"class","code-section"),r(jo,"class","inline"),r(Mo,"class","code-section"),r(Go,"class","inline"),r(Vo,"class","code-section"),r(qo,"class","code-section"),r(Uo,"class","inline"),r(Bo,"class","inline"),r(Jo,"class","inline"),r(Wo,"class","inline"),r(zo,"class","inline"),r(Fo,"class","inline"),r(oa,"href","#destructuring-dirty"),r(oa,"id","destructuring-dirty"),r(Yo,"class","inline"),r(Zo,"class","inline"),r(Ko,"class","code-section"),r(Oe,"href","#tl-dr-1"),r(Oe,"id","tl-dr-1"),r(Qo,"class","inline"),r(Xo,"class","inline"),r(Se,"href","#reactive-declaration"),r(Se,"id","reactive-declaration"),r(Te,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label"),r(Te,"rel","nofollow"),r(sl,"class","inline"),r(al,"class","code-section"),r(Ne,"href","https://svelte.dev/repl/e37329dd126448b2aa0679c08993f9a8?version=3.20.1"),r(Ne,"rel","nofollow"),r(el,"class","inline"),r(Ie,"href","/compile-svelte-in-your-head-part-1/#instanceself-props-invalidate"),r(tl,"class","code-section"),r(nl,"class","code-section"),r(Le,"href","https://svelte.dev/repl/fc6995856489402d90291c4c30952939?version=3.20.1"),r(Le,"rel","nofollow"),r(ol,"class","code-section"),r(ll,"class","inline"),r(rl,"class","inline"),r(Pe,"href","https://en.wikipedia.org/wiki/NOP_(code)"),r(Pe,"rel","nofollow"),r(Ae,"href","https://github.com/sveltejs/svelte/blob/v3.20.1/src/runtime/internal/Component.ts#L111"),r(Ae,"rel","nofollow"),r(il,"class","inline"),r(pl,"class","inline"),r(kl,"class","inline"),r(hl,"class","inline"),r(vl,"class","inline"),r(dl,"class","inline"),r(ul,"class","inline"),r(yl,"class","inline"),r(fl,"class","code-section"),r(Re,"href","https://svelte.dev/repl/fc6995856489402d90291c4c30952939?version=3.20.1"),r(Re,"rel","nofollow"),r(ml,"class","inline"),r(xl,"class","inline"),r(gl,"class","inline"),r(El,"class","inline"),r(_l,"class","code-section"),r(bl,"class","inline"),r(wl,"class","inline"),r(qe,"href","#1-execution-of-all-reactive-declarations-and-statements-are-batched"),r(qe,"id","1-execution-of-all-reactive-declarations-and-statements-are-batched"),r($l,"class","code-section"),r(Ue,"href","https://svelte.dev/repl/941195f1cd5248e9bd14613f9513ad1d?version=3.20.1"),r(Ue,"rel","nofollow"),r(Ol,"class","inline"),r(Dl,"href","#schedule_update"),r(Sl,"class","inline"),r(Tl,"class","inline"),r(Nl,"class","inline"),r(Cl,"class","inline"),r(Il,"class","inline"),r(Ll,"class","inline"),r(Pl,"class","inline"),r(Al,"class","inline"),r(Hl,"class","inline"),r(jl,"class","inline"),r(Ml,"class","inline"),r(Rl,"class","code-section"),r(Fe,"href","#2-the-value-of-reactive-variable-outside-of-reactive-declarations-and-statements-may-not-be-up-to-date"),r(Fe,"id","2-the-value-of-reactive-variable-outside-of-reactive-declarations-and-statements-may-not-be-up-to-date"),r(Gl,"class","code-section"),r(Ye,"href","https://svelte.dev/repl/437548d5c7044cb59bfd0c8a0f4c725d?version=3.20.1"),r(Ye,"rel","nofollow"),r(Vl,"class","code-section"),r(Ke,"href","#sorting-of-reactive-declarations-and-statements"),r(Ke,"id","sorting-of-reactive-declarations-and-statements"),r(ql,"class","code-section"),r(Xe,"href","#reactive-variable-that-is-not-reactive"),r(Xe,"id","reactive-variable-that-is-not-reactive"),r(Ul,"class","inline"),r(Bl,"class","inline"),r(Jl,"class","code-section"),r(et,"href","https://svelte.dev/repl/af86472e1f494cfea2efa494f63fff08?version=3.20.1"),r(et,"rel","nofollow"),r(Wl,"class","inline"),r(zl,"class","inline"),r(Fl,"class","code-section"),r(tt,"href","#summary"),r(tt,"id","summary"),r(nt,"href","#1-svelte-keeps-track-of-which-variables-are-dirty-and-batched-the-dom-updates"),r(nt,"id","1-svelte-keeps-track-of-which-variables-are-dirty-and-batched-the-dom-updates"),r(ot,"href","#2-using-bitmask-svelte-able-to-generate-a-more-compact-compiled-code"),r(ot,"id","2-using-bitmask-svelte-able-to-generate-a-more-compact-compiled-code"),r(lt,"href","#3-reactive-declarations-and-statements-are-executed-in-batch-just-like-dom-updates"),r(lt,"id","3-reactive-declarations-and-statements-are-executed-in-batch-just-like-dom-updates"),r(rt,"href","#closing-note"),r(rt,"id","closing-note"),r(ct,"href","https://twitter.com/lihautan"),r(ct,"rel","nofollow"),r(pt,"href","https://svelte.dev/tutorial/if-blocks"),r(pt,"rel","nofollow"),r(kt,"href","https://svelte.dev/tutorial/slots"),r(kt,"rel","nofollow"),r(ht,"href","https://svelte.dev/tutorial/context-api"),r(ht,"rel","nofollow"),r(Xl,"href","/compile-svelte-in-your-head-part-1/"),r(sr,"href","/compile-svelte-in-your-head-part-3/"),r(ut,"href","#further-resources"),r(ut,"id","further-resources"),r(ft,"href","https://www.youtube.com/watch?v=zq6PpM5t3z0&t=2530s"),r(ft,"rel","nofollow"),r(mt,"href","https://svelte.dev/tutorial/reactive-assignments"),r(mt,"rel","nofollow"),r(xt,"href","https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/"),r(xt,"rel","nofollow"),r(gt,"href","https://blog.bitsrc.io/the-art-of-bitmasking-ec58ab1b4c03"),r(gt,"rel","nofollow"),r(Et,"href","https://dev.to/somedood/bitmasks-a-very-esoteric-and-impractical-way-of-managing-booleans-1hlf"),r(Et,"rel","nofollow"),r(_t,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators"),r(_t,"rel","nofollow")},m(p,k){d6(S,p,k),h(p,ts,k),h(p,Y,k),s(Y,ns),s(ns,C),s(ns,q),s(q,Ot),s(ns,ok),h(p,Gc,k),h(p,os,k),s(os,Dt),s(Dt,lk),s(os,rk),s(os,St),s(St,ik),s(os,ck),s(os,Tt),s(Tt,pk),s(os,kk),h(p,Vc,k),h(p,Da,k),Da.innerHTML=m6,h(p,qc,k),h(p,gs,k),s(gs,hk),s(gs,Nt),s(Nt,vk),s(gs,dk),s(gs,Ct),s(Ct,uk),s(gs,yk),h(p,Uc,k),h(p,Ys,k),s(Ys,fk),s(Ys,Sa),s(Sa,mk),s(Ys,xk),h(p,Bc,k),h(p,Es,k),s(Es,$r),s($r,Ta),s(Ta,gk),s(Es,Ek),s(Es,W),s(W,_k),s(W,It),s(It,bk),s(W,wk),s(W,Na),s(Na,$k),s(W,Ok),s(W,Ca),s(Ca,Dk),s(W,Sk),s(W,Lt),s(Lt,Tk),s(W,Nk),s(Es,Ck),s(Es,Ia),s(Ia,Ik),s(Ia,Pt),s(Pt,Lk),s(Ia,Pk),h(p,Jc,k),h(p,w,k),s(w,Or),s(Or,La),s(La,Ak),s(w,Hk),s(w,Pa),s(Pa,jk),s(Pa,Dr),s(Dr,Mk),s(Pa,Rk),s(w,Gk),s(w,Aa),s(Aa,Vk),s(Aa,At),s(At,qk),s(Aa,Uk),s(w,Bk),s(w,Ss),s(Ss,Ha),s(Ha,Jk),s(Ha,Ht),s(Ht,Wk),s(Ha,zk),s(Ss,Fk),s(Ss,Sr),s(Sr,Yk),s(Ss,Zk),s(Ss,Tr),s(Tr,Kk),s(w,Qk),s(w,Nr),s(Nr,Xk),s(w,sh),s(w,Cr),s(Cr,ah),s(w,eh),s(w,Ts),s(Ts,th),s(Ts,jt),s(jt,nh),s(Ts,oh),s(Ts,Mt),s(Mt,lh),s(Ts,rh),s(w,ih),s(w,Ns),s(Ns,ch),s(Ns,Rt),s(Rt,ph),s(Ns,kh),s(Ns,Gt),s(Gt,hh),s(Ns,vh),s(w,dh),s(w,Vt),Vt.innerHTML=x6,s(w,uh),s(w,Ir),s(Ir,ja),s(ja,yh),s(w,fh),s(w,qt),qt.innerHTML=g6,s(w,mh),s(w,Cs),s(Cs,xh),s(Cs,Ut),s(Ut,gh),s(Cs,Eh),s(Cs,Bt),s(Bt,_h),s(Cs,bh),h(p,Wc,k),h(p,g,k),s(g,Lr),s(Lr,Ma),s(Ma,wh),s(g,$h),s(g,Jt),s(Jt,Wt),s(Wt,Oh),s(Jt,Dh),s(g,Sh),s(g,Pr),s(Pr,Th),s(g,Nh),s(g,zt),zt.innerHTML=E6,s(g,Ch),s(g,Ar),s(Ar,Ra),s(Ra,Ih),s(g,Lh),s(g,ls),s(ls,Ph),s(ls,Ft),s(Ft,Ah),s(ls,Hh),s(ls,Yt),s(Yt,jh),s(ls,Mh),s(ls,Ga),s(Ga,Rh),s(ls,Gh),s(g,Vh),s(g,Is),s(Is,qh),s(Is,Hr),s(Hr,Uh),s(Is,Bh),s(Is,Zt),s(Zt,Jh),s(Is,Wh),s(g,zh),s(g,Kt),Kt.innerHTML=_6,s(g,Fh),s(g,Ls),s(Ls,Yh),s(Ls,jr),s(jr,Zh),s(Ls,Kh),s(Ls,Qt),s(Qt,Qh),s(Ls,Xh),s(g,sv),s(g,Xt),Xt.innerHTML=b6,s(g,av),s(g,sn),s(sn,an),s(an,ev),s(sn,tv),s(g,nv),s(g,Ps),s(Ps,ov),s(Ps,Mr),s(Mr,lv),s(Ps,rv),s(Ps,en),s(en,iv),s(Ps,cv),s(g,pv),s(g,tn),tn.innerHTML=w6,s(g,kv),s(g,As),s(As,hv),s(As,nn),s(nn,vv),s(As,dv),s(As,on),s(on,uv),s(As,yv),h(p,zc,k),h(p,u,k),s(u,Rr),s(Rr,Va),s(Va,fv),s(u,mv),s(u,ln),s(ln,rn),s(rn,xv),s(ln,gv),s(u,Ev),s(u,Gr),s(Gr,_v),s(u,bv),s(u,qa),s(qa,cn),s(cn,wv),s(cn,pn),s(pn,$v),s(qa,Ov),s(qa,kn),s(kn,Dv),s(kn,hn),s(hn,Sv),s(u,Tv),s(u,Ua),s(Ua,Nv),s(Ua,vn),s(vn,Cv),s(Ua,Iv),s(u,Lv),s(u,dn),dn.innerHTML=$6,s(u,Pv),s(u,Ba),s(Ba,Av),s(Ba,un),s(un,Hv),s(Ba,jv),s(u,Mv),s(u,rs),s(rs,yn),s(yn,Rv),s(yn,fn),s(fn,Gv),s(rs,Vv),s(rs,mn),s(mn,qv),s(mn,xn),s(xn,Uv),s(rs,Bv),s(rs,Vr),s(Vr,Jv),s(rs,Wv),s(rs,qr),s(qr,zv),s(u,Fv),s(u,gn),gn.innerHTML=O6,s(u,Yv),s(u,Ur),s(Ur,Ja),s(Ja,Zv),s(u,Kv),s(u,Wa),s(Wa,Qv),s(Wa,En),s(En,Xv),s(Wa,sd),s(u,ad),s(u,za),s(za,ed),s(za,_n),s(_n,td),s(za,nd),s(u,od),s(u,bn),bn.innerHTML=D6,s(u,ld),s(u,Br),s(Br,rd),s(u,id),s(u,Hs),s(Hs,cd),s(Hs,wn),s(wn,pd),s(Hs,kd),s(Hs,$n),s($n,hd),s(Hs,vd),s(u,dd),s(u,Fa),s(Fa,ud),s(Fa,On),s(On,yd),s(Fa,fd),s(u,md),s(u,Dn),Dn.innerHTML=S6,s(u,xd),s(u,is),s(is,gd),s(is,Sn),s(Sn,Ed),s(is,_d),s(is,Tn),s(Tn,bd),s(is,wd),s(is,Nn),s(Nn,$d),s(is,Od),h(p,Fc,k),h(p,_,k),s(_,Jr),s(Jr,Ya),s(Ya,Dd),s(_,Sd),s(_,Cn),s(Cn,In),s(In,Td),s(Cn,Nd),s(_,Cd),s(_,cs),s(cs,Id),s(cs,Za),s(Za,Ld),s(cs,Pd),s(cs,Ka),s(Ka,Ad),s(cs,Hd),s(cs,Ln),s(Ln,jd),s(cs,Md),s(_,Rd),s(_,Wr),s(Wr,Gd),s(_,Vd),s(_,Pn),Pn.innerHTML=T6,s(_,qd),s(_,Qa),s(Qa,Ud),s(Qa,An),s(An,Bd),s(Qa,Jd),s(_,Wd),s(_,Hn),Hn.innerHTML=N6,s(_,zd),s(_,zr),s(zr,Xa),s(Xa,Fd),s(_,Yd),s(_,Fr),s(Fr,Zd),s(_,Kd),s(_,jn),jn.innerHTML=C6,s(_,Qd),s(_,Yr),s(Yr,se),s(se,Xd),s(_,su),s(_,js),s(js,au),s(js,Mn),s(Mn,eu),s(js,tu),s(js,Rn),s(Rn,nu),s(js,ou),s(_,lu),s(_,y),s(y,Ms),s(Ms,ru),s(Ms,Zr),s(Zr,iu),s(Ms,cu),s(Ms,Gn),s(Gn,pu),s(Ms,ku),s(y,hu),s(y,Kr),s(Kr,Vn),s(Vn,vu),s(y,du),s(y,Zs),s(Zs,uu),s(Zs,qn),s(qn,yu),s(Zs,fu),s(Zs,Un),s(Un,mu),s(y,xu),s(y,Bn),s(Bn,gu),s(Bn,Jn),s(Jn,Eu),s(y,_u),s(y,ae),s(ae,bu),s(ae,Wn),s(Wn,wu),s(ae,$u),s(y,Ou),s(y,Qr),s(Qr,zn),s(zn,Du),s(y,Su),s(y,Ks),s(Ks,Tu),s(Ks,Fn),s(Fn,Nu),s(Ks,Cu),s(Ks,Yn),s(Yn,Iu),s(y,Lu),s(y,Zn),s(Zn,Pu),s(Zn,Kn),s(Kn,Au),s(y,Hu),s(y,ee),s(ee,ju),s(ee,Qn),s(Qn,Mu),s(ee,Ru),s(y,Gu),s(y,Xr),s(Xr,si),s(si,Vu),s(y,qu),s(y,ai),s(ai,ei),s(ei,Uu),s(y,Bu),s(y,Qs),s(Qs,Xn),s(Xn,Ju),s(Qs,Wu),s(Qs,so),s(so,zu),s(Qs,Fu),s(y,Yu),s(y,Xs),s(Xs,Zu),s(Xs,ao),s(ao,Ku),s(Xs,Qu),s(Xs,te),s(te,ne),s(ne,eo),s(eo,Xu),s(ne,sy),s(ne,to),s(to,ay),s(te,ey),s(te,oe),s(oe,no),s(no,ty),s(oe,ny),s(oe,oo),s(oo,oy),s(y,ly),s(y,sa),s(sa,ry),s(sa,lo),s(lo,iy),s(sa,cy),s(sa,le),s(le,aa),s(aa,py),s(aa,ro),s(ro,ky),s(aa,hy),s(aa,io),s(io,vy),s(le,dy),s(le,ea),s(ea,uy),s(ea,co),s(co,yy),s(ea,fy),s(ea,po),s(po,my),s(y,xy),s(y,ta),s(ta,gy),s(ta,ko),s(ko,Ey),s(ta,_y),s(ta,ho),s(ho,by),s(y,wy),s(y,ti),s(ti,$y),s(y,Oy),s(y,ni),s(ni,oi),s(oi,Dy),h(p,Yc,k),h(p,na,k),s(na,li),s(li,re),s(re,Sy),s(na,Ty),s(na,ps),s(ps,ks),s(ks,Ny),s(ks,vo),s(vo,Cy),s(ks,Iy),s(ks,uo),s(uo,Ly),s(ks,Py),s(ks,yo),s(yo,Ay),s(ks,Hy),s(ps,jy),s(ps,ri),s(ri,My),s(ps,Ry),s(ps,ie),s(ie,Gy),s(ie,fo),s(fo,Vy),s(ie,qy),s(ps,Uy),s(ps,Rs),s(Rs,By),s(Rs,mo),s(mo,Jy),s(Rs,Wy),s(Rs,xo),s(xo,zy),s(Rs,Fy),h(p,Zc,k),h(p,N,k),s(N,ii),s(ii,ce),s(ce,Yy),s(N,Zy),s(N,Gs),s(Gs,Ky),s(Gs,pe),s(pe,Qy),s(Gs,Xy),s(Gs,ci),s(ci,sf),s(Gs,af),s(N,ef),s(N,pi),s(pi,tf),s(N,nf),s(N,go),go.innerHTML=I6,s(N,of),s(N,ki),s(ki,lf),s(N,rf),s(N,Eo),Eo.innerHTML=L6,s(N,cf),s(N,ke),s(ke,pf),s(ke,he),s(he,kf),s(ke,hf),s(N,vf),s(N,_o),_o.innerHTML=P6,s(N,df),s(N,hi),s(hi,uf),h(p,Kc,k),h(p,b,k),s(b,vi),s(vi,ve),s(ve,yf),s(b,ff),s(b,di),s(di,mf),s(b,xf),s(b,Vs),s(Vs,gf),s(Vs,de),s(de,Ef),s(Vs,_f),s(Vs,ue),s(ue,bf),s(Vs,wf),s(b,$f),s(b,A),s(A,Of),s(A,bo),s(bo,Df),s(A,Sf),s(A,wo),s(wo,Tf),s(A,Nf),s(A,$o),s($o,Cf),s(A,If),s(A,Oo),s(Oo,Lf),s(A,Pf),s(A,Do),s(Do,Af),s(A,Hf),s(A,So),s(So,jf),s(A,Mf),s(b,Rf),s(b,qs),s(qs,Gf),s(qs,ui),s(ui,Vf),s(qs,qf),s(qs,To),s(To,Uf),s(qs,Bf),s(b,Jf),s(b,R),s(R,Wf),s(R,yi),s(yi,zf),s(R,Ff),s(R,No),s(No,Yf),s(R,Zf),s(R,Co),s(Co,Kf),s(R,Qf),s(R,ye),s(ye,Xf),s(R,sm),s(R,fe),s(fe,am),s(R,em),s(b,tm),s(b,fi),s(fi,mi),s(mi,nm),s(b,om),s(b,xi),s(xi,lm),s(b,rm),s(b,Us),s(Us,im),s(Us,me),s(me,cm),s(Us,pm),s(Us,xe),s(xe,km),s(Us,hm),s(b,vm),s(b,ge),s(ge,dm),s(ge,Ee),s(Ee,um),s(ge,ym),s(b,fm),s(b,Io),Io.innerHTML=A6,s(b,mm),s(b,_e),s(_e,xm),s(_e,be),s(be,gm),s(_e,Em),s(b,_m),s(b,we),s(we,bm),s(we,gi),s(gi,wm),s(we,$m),h(p,Qc,k),h(p,f,k),s(f,Ei),s(Ei,$e),s($e,Om),s(f,Dm),s(f,_i),s(_i,Sm),s(f,Tm),s(f,Lo),Lo.innerHTML=H6,s(f,Nm),s(f,bi),s(bi,Cm),s(f,Im),s(f,Po),Po.innerHTML=j6,s(f,Lm),s(f,hs),s(hs,Pm),s(hs,wi),s(wi,Am),s(hs,Hm),s(hs,Ao),s(Ao,jm),s(hs,Mm),s(hs,$i),s($i,Rm),s(hs,Gm),s(f,Vm),s(f,Ho),Ho.innerHTML=M6,s(f,qm),s(f,vs),s(vs,Um),s(vs,jo),s(jo,Bm),s(vs,Jm),s(vs,Oi),s(Oi,Wm),s(vs,zm),s(vs,Di),s(Di,Fm),s(vs,Ym),s(f,Zm),s(f,Mo),Mo.innerHTML=R6,s(f,Km),s(f,Ro),s(Ro,Go),s(Go,Qm),s(Ro,Xm),s(f,s1),s(f,Si),s(Si,a1),s(f,e1),s(f,Vo),Vo.innerHTML=G6,s(f,t1),s(f,Ti),s(Ti,n1),s(f,o1),s(f,qo),qo.innerHTML=V6,s(f,l1),s(f,ds),s(ds,r1),s(ds,Uo),s(Uo,i1),s(ds,c1),s(ds,Bo),s(Bo,p1),s(ds,k1),s(ds,Jo),s(Jo,h1),s(ds,v1),s(f,d1),s(f,Z),s(Z,Ni),s(Ni,u1),s(Z,y1),s(Z,Wo),s(Wo,f1),s(Z,m1),s(Z,zo),s(zo,x1),s(Z,g1),s(Z,Fo),s(Fo,E1),s(Z,_1),h(p,Xc,k),h(p,_s,k),s(_s,Ci),s(Ci,oa),s(oa,b1),s(oa,Ii),s(Ii,w1),s(_s,$1),s(_s,us),s(us,O1),s(us,Yo),s(Yo,D1),s(us,S1),s(us,Li),s(Li,T1),s(us,N1),s(us,Zo),s(Zo,C1),s(us,I1),s(_s,L1),s(_s,Ko),Ko.innerHTML=q6,h(p,sp,k),h(p,la,k),s(la,Pi),s(Pi,Oe),s(Oe,P1),s(la,A1),s(la,De),s(De,Bs),s(Bs,H1),s(Bs,Qo),s(Qo,j1),s(Bs,M1),s(Bs,Xo),s(Xo,R1),s(Bs,G1),s(De,V1),s(De,Ai),s(Ai,q1),h(p,ap,k),h(p,v,k),s(v,Hi),s(Hi,Se),s(Se,U1),s(v,B1),s(v,ra),s(ra,J1),s(ra,Te),s(Te,W1),s(ra,z1),s(ra,sl),s(sl,F1),s(v,Y1),s(v,al),al.innerHTML=U6,s(v,Z1),s(v,ji),s(ji,Ne),s(Ne,K1),s(v,Q1),s(v,Ce),s(Ce,X1),s(Ce,Ie),s(Ie,el),s(el,sx),s(Ie,ax),s(Ce,ex),s(v,tx),s(v,tl),tl.innerHTML=B6,s(v,nx),s(v,Mi),s(Mi,ox),s(v,lx),s(v,nl),nl.innerHTML=J6,s(v,rx),s(v,Ri),s(Ri,Le),s(Le,ix),s(v,cx),s(v,ol),ol.innerHTML=W6,s(v,px),s(v,Gi),s(Gi,kx),s(v,hx),s(v,ys),s(ys,ia),s(ia,vx),s(ia,ll),s(ll,dx),s(ia,ux),s(ia,Vi),s(Vi,bs),s(bs,rl),s(rl,yx),s(bs,fx),s(bs,Pe),s(Pe,mx),s(bs,xx),s(bs,Ae),s(Ae,gx),s(bs,Ex),s(ys,_x),s(ys,He),s(He,bx),s(He,il),s(il,wx),s(He,$x),s(ys,Ox),s(ys,cl),s(cl,Dx),s(cl,qi),s(qi,U),s(U,pl),s(pl,Sx),s(U,Tx),s(U,kl),s(kl,Nx),s(U,Cx),s(U,hl),s(hl,Ix),s(U,Lx),s(U,vl),s(vl,Px),s(U,Ax),s(U,dl),s(dl,Hx),s(U,jx),s(ys,Mx),s(ys,je),s(je,Rx),s(je,ul),s(ul,Gx),s(je,Vx),s(v,qx),s(v,Me),s(Me,Ux),s(Me,yl),s(yl,Bx),s(Me,Jx),s(v,Wx),s(v,Ui),s(Ui,zx),s(v,Fx),s(v,fl),fl.innerHTML=z6,s(v,Yx),s(v,Bi),s(Bi,Re),s(Re,Zx),s(v,Kx),s(v,Ji),s(Ji,Ge),s(Ge,Qx),s(Ge,ml),s(ml,Xx),s(Ge,s2),s(v,a2),s(v,Js),s(Js,e2),s(Js,xl),s(xl,t2),s(Js,n2),s(Js,gl),s(gl,o2),s(Js,l2),s(v,r2),s(v,Ve),s(Ve,i2),s(Ve,El),s(El,c2),s(Ve,p2),s(v,k2),s(v,_l),_l.innerHTML=F6,s(v,h2),s(v,fs),s(fs,v2),s(fs,bl),s(bl,d2),s(fs,u2),s(fs,Wi),s(Wi,y2),s(fs,f2),s(fs,wl),s(wl,m2),s(fs,x2),s(v,g2),s(v,zi),s(zi,E2),h(p,ep,k),h(p,I,k),s(I,Fi),s(Fi,qe),s(qe,_2),s(I,b2),s(I,Yi),s(Yi,w2),s(I,$2),s(I,$l),$l.innerHTML=Y6,s(I,O2),s(I,Zi),s(Zi,Ue),s(Ue,D2),s(I,S2),s(I,Be),s(Be,T2),s(Be,Ol),s(Ol,N2),s(Be,C2),s(I,I2),s(I,G),s(G,z),s(z,L2),s(z,Dl),s(Dl,P2),s(z,A2),s(z,Sl),s(Sl,H2),s(z,j2),s(z,Ki),s(Ki,M2),s(z,R2),s(z,Qi),s(Qi,G2),s(z,V2),s(G,q2),s(G,Xi),s(Xi,sc),s(sc,U2),s(G,B2),s(G,ac),s(ac,ec),s(ec,J2),s(G,W2),s(G,ca),s(ca,Tl),s(Tl,z2),s(ca,F2),s(ca,Nl),s(Nl,Y2),s(ca,Z2),s(G,K2),s(G,Je),s(Je,Q2),s(Je,Cl),s(Cl,X2),s(Je,We),s(We,K),s(K,s3),s(K,tc),s(tc,a3),s(K,e3),s(K,nc),s(nc,t3),s(K,n3),s(K,Il),s(Il,o3),s(K,l3),s(K,oc),s(oc,r3),s(We,i3),s(We,pa),s(pa,c3),s(pa,lc),s(lc,p3),s(pa,k3),s(pa,Ll),s(Ll,h3),s(G,v3),s(G,ze),s(ze,d3),s(ze,Pl),s(Pl,u3),s(ze,y3),s(I,f3),s(I,V),s(V,m3),s(V,Al),s(Al,x3),s(V,g3),s(V,Hl),s(Hl,E3),s(V,_3),s(V,jl),s(jl,b3),s(V,w3),s(V,Ml),s(Ml,$3),s(V,O3),s(V,rc),s(rc,D3),s(V,S3),s(I,T3),s(I,Rl),Rl.innerHTML=Z6,h(p,tp,k),h(p,H,k),s(H,ic),s(ic,Fe),s(Fe,N3),s(H,C3),s(H,cc),s(cc,I3),s(H,L3),s(H,Gl),Gl.innerHTML=K6,s(H,P3),s(H,pc),s(pc,Ye),s(Ye,A3),s(H,H3),s(H,Ze),s(Ze,j3),s(Ze,kc),s(kc,M3),s(Ze,R3),s(H,G3),s(H,Vl),Vl.innerHTML=Q6,h(p,np,k),h(p,Q,k),s(Q,hc),s(hc,Ke),s(Ke,V3),s(Q,q3),s(Q,vc),s(vc,U3),s(Q,B3),s(Q,Qe),s(Qe,J3),s(Qe,dc),s(dc,W3),s(Qe,z3),s(Q,F3),s(Q,ql),ql.innerHTML=X6,h(p,op,k),h(p,L,k),s(L,uc),s(uc,Xe),s(Xe,Y3),s(L,Z3),s(L,st),s(st,K3),s(st,Ul),s(Ul,Q3),s(st,X3),s(L,sg),s(L,at),s(at,ag),s(at,Bl),s(Bl,eg),s(at,tg),s(L,ng),s(L,yc),s(yc,og),s(L,lg),s(L,Jl),Jl.innerHTML=s4,s(L,rg),s(L,fc),s(fc,et),s(et,ig),s(L,cg),s(L,Ws),s(Ws,pg),s(Ws,Wl),s(Wl,kg),s(Ws,hg),s(Ws,zl),s(zl,vg),s(Ws,dg),s(L,ug),s(L,Fl),Fl.innerHTML=a4,h(p,lp,k),h(p,Yl,k),s(Yl,mc),s(mc,tt),s(tt,yg),h(p,rp,k),h(p,Zl,k),s(Zl,xc),s(xc,nt),s(nt,fg),h(p,ip,k),h(p,Kl,k),s(Kl,gc),s(gc,ot),s(ot,mg),h(p,cp,k),h(p,Ql,k),s(Ql,Ec),s(Ec,lt),s(lt,xg),h(p,pp,k),h(p,B,k),s(B,_c),s(_c,rt),s(rt,gg),s(B,Eg),s(B,it),s(it,_g),s(it,ct),s(ct,bg),s(it,wg),s(B,$g),s(B,ms),s(ms,Og),s(ms,pt),s(pt,Dg),s(ms,Sg),s(ms,kt),s(kt,Tg),s(ms,Ng),s(ms,ht),s(ht,Cg),s(ms,Ig),s(B,Lg),s(B,bc),s(bc,vt),s(vt,Pg),s(vt,Xl),s(Xl,Ag),s(vt,Hg),s(B,jg),s(B,wc),s(wc,dt),s(dt,Mg),s(dt,sr),s(sr,Rg),s(dt,Gg),h(p,kp,k),h(p,ka,k),s(ka,$c),s($c,ut),s(ut,Vg),s(ka,qg),s(ka,F),s(F,yt),s(yt,Ug),s(yt,ft),s(ft,Bg),s(yt,Jg),s(F,Wg),s(F,ha),s(ha,zg),s(ha,mt),s(mt,Fg),s(ha,Yg),s(ha,xt),s(xt,Zg),s(F,Kg),s(F,ar),s(ar,gt),s(gt,Qg),s(ar,Xg),s(F,sE),s(F,er),s(er,Et),s(Et,aE),s(er,eE),s(F,tE),s(F,Oc),s(Oc,_t),s(_t,nE),hp=!0},p:J4,i(p){hp||(u6(S.$$.fragment,p),hp=!0)},o(p){y6(S.$$.fragment,p),hp=!1},d(p){f6(S,p),p&&a(ts),p&&a(Y),p&&a(Gc),p&&a(os),p&&a(Vc),p&&a(Da),p&&a(qc),p&&a(gs),p&&a(Uc),p&&a(Ys),p&&a(Bc),p&&a(Es),p&&a(Jc),p&&a(w),p&&a(Wc),p&&a(g),p&&a(zc),p&&a(u),p&&a(Fc),p&&a(_),p&&a(Yc),p&&a(na),p&&a(Zc),p&&a(N),p&&a(Kc),p&&a(b),p&&a(Qc),p&&a(f),p&&a(Xc),p&&a(_s),p&&a(sp),p&&a(la),p&&a(ap),p&&a(v),p&&a(ep),p&&a(I),p&&a(tp),p&&a(H),p&&a(np),p&&a(Q),p&&a(op),p&&a(L),p&&a(lp),p&&a(Yl),p&&a(rp),p&&a(Zl),p&&a(ip),p&&a(Kl),p&&a(cp),p&&a(Ql),p&&a(pp),p&&a(B),p&&a(kp),p&&a(ka)}}}function Z4($t){let S,ts;const Y=[$t[0],k6];let ns={$$slots:{default:[Y4]},$$scope:{ctx:$t}};for(let C=0;C<Y.length;C+=1)ns=EE(ns,Y[C]);return S=new W4({props:ns}),{c(){h6(S.$$.fragment)},l(C){v6(S.$$.fragment,C)},m(C,q){d6(S,C,q),ts=!0},p(C,[q]){const Ot=q&1?U4(Y,[q&1&&c6(C[0]),q&0&&c6(k6)]):{};q&2&&(Ot.$$scope={dirty:q,ctx:C}),S.$set(Ot)},i(C){ts||(u6(S.$$.fragment,C),ts=!0)},o(C){y6(S.$$.fragment,C),ts=!1},d(C){f6(S,C)}}}const k6={title:"Compile Svelte in your head (Part 2)",date:"2020-03-22T08:00:00Z",tags:["Svelte","JavaScript"],series:"Compile Svelte in your head",label:"blog",description:"\u2B05 \u2B05  Previously in Part 1.Previously, when I mentioned the `$invalidate` function, I explained that the `$invalidate` function works conceptually like the following:but that's not the exact implementation of the ..."};function K4($t,S,ts){return B4("blog",{image:F4}),$t.$$set=Y=>{ts(0,S=EE(EE({},S),p6(Y)))},S=p6(S),[S]}class n9 extends G4{constructor(S){super();V4(this,S,K4,Z4,q4,{})}}export{n9 as default,k6 as metadata};
