import{S as I6,i as L6,s as P6,C as dE,w as n4,x as o4,y as l4,z as A6,A as a4,q as r4,o as i4,B as c4,r as H6,R as e4,k as i,e as n,t as e,m as c,c as o,a as l,h as t,d as a,b as r,g as h,F as s,O as j6}from"../../chunks/vendor-6bf294e3.js";import{B as M6}from"../../chunks/BlogLayout-152f599b.js";import{T as R6}from"../../chunks/TableOfContent-1b9e4572.js";import"../../chunks/stores-e20b7872.js";import"../../chunks/WebMentions-745413ea.js";/* empty css                                */var G6="/_app/assets/hero-twitter-672e3383.jpg";function V6(bt){let S,ts,Y,ns,C,q,wt,ek,Mc,os,$t,tk,nk,Ot,ok,lk,Dt,rk,ik,Rc,Oa,p4=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// conceptually...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*...*/</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// to track which variable has changed</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">dirty</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Set</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (variable</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> newValue) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// update ctx</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ctx[variable] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> newValue;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// mark variable as dirty</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">dirty</span><span style="color: var(--shiki-token-function)">.add</span><span style="color: var(--shiki-color-text)">(variable);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// schedules update for the component</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">scheduleUpdate</span><span style="color: var(--shiki-color-text)">(component);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// gets called when update is scheduled</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">flushUpdate</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// update the fragment</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// clear the dirty</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">dirty</span><span style="color: var(--shiki-token-function)">.clear</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Gc,xs,ck,St,pk,kk,Tt,hk,vk,Vc,Ys,dk,Da,uk,yk,qc,gs,br,Sa,fk,mk,W,xk,Nt,gk,Ek,Ta,_k,bk,Na,wk,$k,Ct,Ok,Dk,Sk,Ca,Tk,It,Nk,Ck,Uc,w,wr,Ia,Ik,Lk,La,Pk,$r,Ak,Hk,jk,Pa,Mk,Lt,Rk,Gk,Vk,Ds,Aa,qk,Pt,Uk,Bk,Jk,Or,Wk,zk,Dr,Fk,Yk,Sr,Zk,Kk,Tr,Qk,Xk,Ss,sh,At,ah,eh,Ht,th,nh,oh,Ts,lh,jt,rh,ih,Mt,ch,ph,kh,Rt,k4=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'world'</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    name <span class="token operator">=</span> <span class="token string">'Svelte'</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>update<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div></code></pre>`,hh,Nr,Ha,vh,dh,Gt,h4=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;world&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;name&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Svelte&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123; name</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> update &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...some where in &#96;create_fragment&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-token-function)">.update</span><span style="color: var(--shiki-color-text)">(); </span><span style="color: var(--shiki-token-comment)">// logs &#96;world&#96; scoped in the &#96;instance&#96; closure</span></span></code></pre>`,uh,Ns,yh,Vt,fh,mh,qt,xh,gh,Bc,g,Cr,ja,Eh,_h,Ut,Bt,bh,wh,$h,Ir,Oh,Dh,Jt,v4='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> agility <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">let</span> power <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">incrementAgility</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    agility <span class="token operator">++</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">incrementPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    power <span class="token operator">++</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">levelUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    agility <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span></div><div class="line">    power <span class="token operator">+=</span> <span class="token number">7</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line">Agility: <span class="token language-javascript"><span class="token punctuation">&#123;</span>agility<span class="token punctuation">&#125;</span></span></div><div class="line">Power: <span class="token language-javascript"><span class="token punctuation">&#123;</span>power<span class="token punctuation">&#125;</span></span></div><div class="line">Stats: <span class="token language-javascript"><span class="token punctuation">&#123;</span>agility <span class="token operator">*</span> power<span class="token punctuation">&#125;</span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>incrementAgility<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>+ Agility<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>incrementPower<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>+ Power<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>levelUp<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Level Up<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div></code></pre>',Sh,Lr,Ma,Th,Nh,ls,Ch,Wt,Ih,Lh,zt,Ph,Ah,Ra,Hh,jh,Mh,Cs,Rh,Pr,Gh,Vh,Ft,qh,Uh,Bh,Yt,d4='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123; agility</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">; &#125;</span></span></code></pre>',Jh,Is,Wh,Ar,zh,Fh,Zt,Yh,Zh,Kh,Kt,u4='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123; agility</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> power</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> &#125;</span></span></code></pre>',Qh,Qt,Xt,Xh,sv,av,Ls,ev,Hr,tv,nv,sn,ov,lv,rv,an,y4=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// NOTE: $$.dirty is passed into the &#96;p&#96; function as &#96;changed&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">(changed</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> ctx) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// checked if agility has changed before update the agility text</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">changed</span><span style="color: var(--shiki-color-text)">.agility) </span><span style="color: var(--shiki-token-function)">set_data</span><span style="color: var(--shiki-color-text)">(t1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.agility);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">changed</span><span style="color: var(--shiki-color-text)">.power) </span><span style="color: var(--shiki-token-function)">set_data</span><span style="color: var(--shiki-color-text)">(t3</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.power);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// if either agility or power has changed, update the stats text</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> ((</span><span style="color: var(--shiki-token-constant)">changed</span><span style="color: var(--shiki-color-text)">.agility </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">changed</span><span style="color: var(--shiki-color-text)">.power) </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> t5_value </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> (t5_value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.agility </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.power </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-color-text)">)) </span><span style="color: var(--shiki-token-function)">set_data</span><span style="color: var(--shiki-color-text)">(t5</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> t5_value);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,iv,Ps,cv,en,pv,kv,tn,hv,vv,Jc,u,jr,Ga,dv,uv,nn,on,yv,fv,mv,Mr,xv,gv,Va,ln,Ev,rn,_v,bv,cn,wv,pn,$v,Ov,qa,Dv,kn,Sv,Tv,Nv,hn,f4=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Svelte&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">count</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">foo</span><span style="color: var(--shiki-color-text)">.a </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">bar </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> baz </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// compiled into</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;name&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Svelte&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;count&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> count</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> count);</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">foo</span><span style="color: var(--shiki-color-text)">.a </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> foo);</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;bar&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (bar </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;baz&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (baz </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">))));</span></span></code></pre>`,Cv,Ua,Iv,vn,Lv,Pv,Av,rs,dn,Hv,un,jv,Mv,yn,Rv,fn,Gv,Vv,Rr,qv,Uv,Gr,Bv,Jv,mn,m4=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// src/runtime/internal/Component.ts</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> ret</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> ret) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.ctx </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">not_equal</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.ctx[key]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 1. update the variable in $$.ctx</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.ctx[key] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> value;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 2a. mark the variable in $$.dirty</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">make_dirty</span><span style="color: var(--shiki-color-text)">(component</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// 4. return the value of the assignment or update expression</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> ret;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// src/runtime/internal/Component.ts</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">make_dirty</span><span style="color: var(--shiki-color-text)">(component</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-token-constant)">component</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">dirty_components</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(component);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 3. schedule an update</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">schedule_update</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// initialise $$.dirty</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">component</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">blank_object</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// 2b. mark the variable in $$.dirty</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">component</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty[key] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Wv,Vr,Ba,zv,Fv,Ja,Yv,xn,Zv,Kv,Qv,Wa,Xv,gn,sd,ad,ed,En,x4=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">obj </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  b</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> (foo </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> bar</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">obj</span><span style="color: var(--shiki-color-text)">.c </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;hello&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">(&#123; a</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> c </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> d</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> b &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> baz </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> obj);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// assuming all variables are referenced in the template</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// the above compiles into</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;obj&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  (obj </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    b</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (foo </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;bar&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> bar</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> bar)))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;obj&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">obj</span><span style="color: var(--shiki-color-text)">.c </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;hello&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> obj);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;c&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  (&#123; a</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> c </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;d&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> d</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> d)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> b &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;baz&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (baz </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> obj)))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  c</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;b&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> b)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,td,qr,nd,od,As,ld,_n,rd,id,bn,cd,pd,kd,za,hd,wn,vd,dd,ud,$n,g4=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">obj</span><span style="color: var(--shiki-color-text)">.c </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;hello&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// compiles into</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;obj&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">obj</span><span style="color: var(--shiki-color-text)">.c </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;hello&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> obj);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// - it invalidates &#96;obj&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// - it returns the evaluated value of the expression &#96;obj.c = &#39;hello&#39;&#96;, which is &#39;hello&#39;</span></span></code></pre>`,yd,is,fd,On,md,xd,Dn,gd,Ed,Sn,_d,bd,Wc,_,Ur,Fa,wd,$d,Tn,Nn,Od,Dd,Sd,cs,Td,Ya,Nd,Cd,Za,Id,Ld,Cn,Pd,Ad,Hd,Br,jd,Md,In,E4=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// src/runtime/internal/scheduler.ts</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">schedule_update</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">update_scheduled) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    update_scheduled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// NOTE: &#96;flush&#96; will do the DOM update</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// we push it into the microtask queue</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">resolved_promise</span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(flush);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Rd,Ka,Gd,Ln,Vd,qd,Ud,Pn,_4=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// src/runtime/internal/scheduler.ts</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">flush</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// for each componnet in &#96;dirty_components&#96;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">component</span><span style="color: var(--shiki-color-text)">.$$);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// src/runtime/internal/scheduler.ts</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)">($$) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.fragment </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// NOTE: this will be important later</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-token-function)">.update</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">run_all</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.before_update);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// calls the &#96;p&#96; function</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.fragment </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.p</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.ctx);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// resets &#96;$$.dirty&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">after_update</span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">(add_render_callback);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Bd,Jr,Qa,Jd,Wd,Wr,zd,Fd,An,b4=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> givenName<span class="token punctuation">,</span> familyName<span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    givenName <span class="token operator">=</span> <span class="token string">'Li Hau'</span><span class="token punctuation">;</span></div><div class="line">    familyName <span class="token operator">=</span> <span class="token string">'Tan'</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line">Name: <span class="token language-javascript"><span class="token punctuation">&#123;</span>familyName<span class="token punctuation">&#125;</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>givenName<span class="token punctuation">&#125;</span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>update<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Update<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div></code></pre>`,Yd,zr,Xa,Zd,Kd,Hs,Qd,Hn,Xd,su,jn,au,eu,tu,y,js,nu,Fr,ou,lu,Mn,ru,iu,cu,Yr,Rn,pu,ku,Zs,hu,Gn,vu,du,Vn,uu,yu,qn,fu,Un,mu,xu,se,gu,Bn,Eu,_u,bu,Zr,Jn,wu,$u,Ks,Ou,Wn,Du,Su,zn,Tu,Nu,Fn,Cu,Yn,Iu,Lu,ae,Pu,Zn,Au,Hu,ju,Kr,Qr,Mu,Ru,Xr,si,Gu,Vu,Qs,Kn,qu,Uu,Qn,Bu,Ju,Wu,Xs,zu,Xn,Fu,Yu,ee,te,so,Zu,Ku,ao,Qu,Xu,ne,eo,sy,ay,to,ey,ty,sa,ny,no,oy,ly,oe,aa,ry,oo,iy,cy,lo,py,ky,ea,hy,ro,vy,dy,io,uy,yy,ta,fy,co,my,xy,po,gy,Ey,ai,_y,by,ei,ti,wy,zc,na,ni,le,$y,Oy,ps,ks,Dy,ko,Sy,Ty,ho,Ny,Cy,vo,Iy,Ly,Py,oi,Ay,Hy,re,jy,uo,My,Ry,Gy,Ms,Vy,yo,qy,Uy,fo,By,Jy,Fc,N,li,ie,Wy,zy,Rs,Fy,ce,Yy,Zy,ri,Ky,Qy,Xy,ii,sf,af,mo,w4='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.diry </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123; givenName</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> familyName</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> &#125;;</span></span></code></pre>',ef,ci,tf,nf,xo,$4=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">givenName </span><span style="color: var(--shiki-token-keyword)">-&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">familyName </span><span style="color: var(--shiki-token-keyword)">-&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span></span></code></pre>`,of,pe,lf,ke,rf,cf,pf,go,O4=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">0b0000_0011</span><span style="color: var(--shiki-color-text)">];</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// the 0th and 1st bit marked true</span></span></code></pre>`,kf,pi,hf,Yc,b,ki,he,vf,df,hi,uf,yf,Gs,ff,ve,mf,xf,de,gf,Ef,_f,A,bf,Eo,wf,$f,_o,Of,Df,bo,Sf,Tf,wo,Nf,Cf,$o,If,Lf,Oo,Pf,Af,Hf,Vs,jf,vi,Mf,Rf,Do,Gf,Vf,qf,R,Uf,di,Bf,Jf,So,Wf,zf,To,Ff,Yf,ue,Zf,Kf,ye,Qf,Xf,sm,ui,yi,am,em,fi,tm,nm,qs,om,fe,lm,rm,me,im,cm,pm,xe,km,ge,hm,vm,dm,No,D4=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// set 1st boolean to true</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">0b0101</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0b0010</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0b0111</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// set 2nd boolean to false</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">0b0101</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0b1011</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0b0001</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// is 2nd boolean true?</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">((</span><span style="color: var(--shiki-token-constant)">0b0101</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0b0100</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// NOTE: You can test multiple boolean values at once</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// is 2nd and 3rd boolean true?</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">((</span><span style="color: var(--shiki-token-constant)">0b0101</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0b1100</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`,um,Ee,ym,_e,fm,mm,xm,be,gm,mi,Em,_m,Zc,f,xi,we,bm,wm,gi,$m,Om,Co,S4=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">givenName </span><span style="color: var(--shiki-token-keyword)">-&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">firstName </span><span style="color: var(--shiki-token-keyword)">-&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span></span></code></pre>`,Dm,Ei,Sm,Tm,Io,T4=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// Previous</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123; givenName</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> familyName &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// Now</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [givenName</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> familyName];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Nm,hs,Cm,_i,Im,Lm,Lo,Pm,Am,bi,Hm,jm,Mm,Po,N4=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// Previous</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.givenName </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.familyName;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Now</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">];</span></span></code></pre>`,Rm,vs,Gm,Ao,Vm,qm,wi,Um,Bm,$i,Jm,Wm,zm,Ho,C4=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// Previous</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;givenName&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (givenName </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Li Hau&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Now</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (givenName </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Li Hau&#39;</span><span style="color: var(--shiki-color-text)">));</span></span></code></pre>`,Fm,jo,Mo,Ym,Zm,Km,Oi,Qm,Xm,Ro,I4=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// Previous</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty[</span><span style="color: var(--shiki-token-string-expression)">&#39;givenName&#39;</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Now</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">|=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&lt;&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`,s1,Di,a1,e1,Go,L4=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// Previous</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$dirty</span><span style="color: var(--shiki-color-text)">.givenName) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$dirty</span><span style="color: var(--shiki-color-text)">.givenName </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">$dirty</span><span style="color: var(--shiki-color-text)">.familyName) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Now</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> ($dirty[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> ($dirty[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span></code></pre>`,t1,ds,n1,Vo,o1,l1,qo,r1,i1,Uo,c1,p1,k1,Z,Si,h1,v1,Bo,d1,u1,Jo,y1,f1,Wo,m1,x1,Kc,Es,Ti,oa,g1,Ni,E1,_1,us,b1,zo,w1,$1,Ci,O1,D1,Fo,S1,T1,N1,Yo,P4=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// If less than 32 variables,</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Instead of having &#96;dirty[0]&#96; all the time,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">p</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> (ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Svelte optimises the compiled code by </span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// destruct the array in the arguments</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">p</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> (ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [dirty]) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// If more than or equal to 32 variables</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">p</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> (ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Qc,la,Ii,$e,C1,I1,Oe,Us,L1,Zo,P1,A1,Ko,H1,j1,M1,Li,R1,Xc,v,Pi,De,G1,V1,ra,q1,Se,U1,B1,Qo,J1,W1,Xo,A4='<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line dim">  <span class="token keyword">export</span> <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token comment">// &#96;doubled&#96;, &#96;tripled&#96;, &#96;quadrupled&#96; are reactive</span></div><div class="line highlight">  <span class="token literal-property property">$</span><span class="token operator">:</span> doubled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></div><div class="line highlight">  <span class="token literal-property property">$</span><span class="token operator">:</span> tripled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span></div><div class="line highlight">  <span class="token literal-property property">$</span><span class="token operator">:</span> quadrupled <span class="token operator">=</span> doubled <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></div><div class="line dim"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line dim"></div><div class="line dim"><span class="token language-javascript"><span class="token punctuation">&#123;</span>doubled<span class="token punctuation">&#125;</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>tripled<span class="token punctuation">&#125;</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>quadrupled<span class="token punctuation">&#125;</span></span></div></code></pre>',z1,Ai,Te,F1,Y1,Ne,Z1,Ce,sl,K1,Q1,X1,sx,al,H4=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*count*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">8</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">			$</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> doubled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		&#125;</span></span>
<span class="line highlight"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*count*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">8</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">			$</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> tripled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		&#125;</span></span>
<span class="line highlight"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*doubled*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">			$</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> quadrupled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> doubled </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		&#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [doubled</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> tripled</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> quadrupled</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> count];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ax,Hi,ex,tx,el,j4='<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line dim">  <span class="token keyword">export</span> <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token comment">// NOTE: move &#96;quadrupled&#96; before &#96;doubled&#96;</span></div><div class="line highlight">  <span class="token literal-property property">$</span><span class="token operator">:</span> quadrupled <span class="token operator">=</span> doubled <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></div><div class="line highlight">  <span class="token literal-property property">$</span><span class="token operator">:</span> doubled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token literal-property property">$</span><span class="token operator">:</span> tripled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span></div><div class="line dim"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div></code></pre>',nx,ji,Ie,ox,lx,tl,M4=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-comment)">// NOTE: &#96;quadrupled&#96; invalidates after &#96;doubled&#96;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*count*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">8</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">			$</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (doubled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		&#125;</span></span>
<span class="line highlight"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*doubled*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">			$</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (quadrupled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> doubled </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*count*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">8</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">			$</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (tripled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">		&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	&#125;;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [doubled</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> tripled</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> quadrupled</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> count];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,rx,Mi,ix,cx,Bs,ia,px,nl,kx,hx,Ri,_s,ol,vx,dx,Le,ux,yx,Pe,fx,mx,xx,Ae,gx,ll,Ex,_x,bx,rl,wx,Gi,U,il,$x,Ox,cl,Dx,Sx,pl,Tx,Nx,kl,Cx,Ix,hl,Lx,Px,Ax,He,Hx,vl,jx,Mx,Rx,Vi,Gx,Vx,dl,R4='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line"><span class="token comment">// NOTE: use &#96;count&#96; in a reactive declaration before &#96;count&#96; is declared</span></div><div class="line"><span class="token literal-property property">$</span><span class="token operator">:</span> doubled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></div><div class="line"><span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span></span> * 2 = <span class="token language-javascript"><span class="token punctuation">&#123;</span>doubled<span class="token punctuation">&#125;</span></span></div></code></pre>',qx,qi,je,Ux,Bx,Ui,Me,Jx,ul,Wx,zx,Fx,Js,Yx,yl,Zx,Kx,fl,Qx,Xx,s2,Re,a2,ml,e2,t2,n2,xl,G4=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// src/runtime/internal/scheduler.ts</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)">($$) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.fragment </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// NOTE: this is important now!</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-token-function)">.update</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">run_all</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.before_update);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// calls the &#96;p&#96; function</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.fragment </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.p</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.ctx);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,o2,ys,l2,gl,r2,i2,Bi,c2,p2,El,k2,h2,v2,Ji,d2,sp,I,Wi,Ge,u2,y2,zi,f2,m2,_l,V4=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> givenName <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> familyName <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    givenName <span class="token operator">=</span> <span class="token string">'Li Hau'</span><span class="token punctuation">;</span></div><div class="line">    familyName <span class="token operator">=</span> <span class="token string">'Tan'</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line">  <span class="token literal-property property">$</span><span class="token operator">:</span> name <span class="token operator">=</span> givenName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> familyName<span class="token punctuation">;</span></div><div class="line">  <span class="token literal-property property">$</span><span class="token operator">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div></code></pre>`,x2,Fi,Ve,g2,E2,qe,_2,bl,b2,w2,$2,G,z,O2,wl,D2,S2,$l,T2,N2,Yi,C2,I2,Zi,L2,P2,A2,Ki,Qi,H2,j2,Xi,sc,M2,R2,ca,Ol,G2,V2,Dl,q2,U2,B2,Ue,J2,Sl,W2,Be,K,z2,ac,F2,Y2,ec,Z2,K2,Tl,Q2,X2,tc,s3,a3,pa,e3,nc,t3,n3,Nl,o3,l3,Je,r3,Cl,i3,c3,p3,V,k3,Il,h3,v3,Ll,d3,u3,Pl,y3,f3,Al,m3,x3,oc,g3,E3,_3,Hl,q4=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// Instead of</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// #1 &#96;givenName = &#39;Li Hau&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Li Hau&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39; &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Li Hau &#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// #2 &#96;familyName = &#39;Tan&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Li Hau&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39; &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Tan&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Li Hau Tan&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Reactive declarations and statements are batched</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// #1 &#96;givenName = &#39;Li Hau&#39;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// #2 &#96;familyName = &#39;Tan&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Li Hau&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39; &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Tan&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Li Hau Tan&#39;</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,ap,H,lc,We,b3,w3,rc,$3,O3,jl,U4=`<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line dim">  <span class="token keyword">let</span> givenName <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> familyName <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line dim">    givenName <span class="token operator">=</span> <span class="token string">'Li Hau'</span><span class="token punctuation">;</span></div><div class="line dim">    familyName <span class="token operator">=</span> <span class="token string">'Tan'</span><span class="token punctuation">;</span></div><div class="line highlight">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Logs ''</span></div><div class="line dim">  <span class="token punctuation">&#125;</span></div><div class="line dim">  <span class="token literal-property property">$</span><span class="token operator">:</span> name <span class="token operator">=</span> givenName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> familyName<span class="token punctuation">;</span></div><div class="line dim"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div></code></pre>`,D3,ic,ze,S3,T3,Fe,N3,cc,C3,I3,L3,Ml,B4=`<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line dim">  <span class="token keyword">let</span> givenName <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> familyName <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line dim">    givenName <span class="token operator">=</span> <span class="token string">'Li Hau'</span><span class="token punctuation">;</span></div><div class="line dim">    familyName <span class="token operator">=</span> <span class="token string">'Tan'</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token punctuation">&#125;</span></div><div class="line dim">  <span class="token literal-property property">$</span><span class="token operator">:</span> name <span class="token operator">=</span> givenName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> familyName<span class="token punctuation">;</span></div><div class="line highlight">  <span class="token literal-property property">$</span><span class="token operator">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Logs 'Li Hau Tan'</span></div><div class="line dim"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div></code></pre>`,ep,Q,pc,Ye,P3,A3,kc,H3,j3,Ze,M3,hc,R3,G3,V3,Rl,J4=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// NOTE: refers to &#96;doubled&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> quadrupled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> doubled </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// NOTE: defined &#96;doubled&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> doubled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// compiles into:</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  $</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/* doubled */</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> doubled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  $</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/* quadrupled */</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> quadrupled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> doubled </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,tp,L,vc,Ke,q3,U3,Qe,B3,Gl,J3,W3,z3,Xe,F3,Vl,Y3,Z3,K3,dc,Q3,X3,ql,W4='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line">  <span class="token literal-property property">$</span><span class="token operator">:</span> doubled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span> count <span class="token punctuation">&#125;</span></span> x 2 = <span class="token language-javascript"><span class="token punctuation">&#123;</span>doubled<span class="token punctuation">&#125;</span></span></div></code></pre>',sg,uc,st,ag,eg,Ws,tg,Ul,ng,og,Bl,lg,rg,ig,Jl,z4=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> doubled;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  $</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (doubled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [doubled];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,np,Wl,yc,at,cg,op,zl,fc,et,pg,lp,Fl,mc,tt,kg,rp,Yl,xc,nt,hg,ip,B,gc,ot,vg,dg,lt,ug,rt,yg,fg,mg,fs,xg,it,gg,Eg,ct,_g,bg,pt,wg,$g,Og,Ec,kt,Dg,Zl,Sg,Tg,Ng,_c,ht,Cg,Kl,Ig,Lg,cp,ka,bc,vt,Pg,Ag,F,dt,Hg,ut,jg,Mg,Rg,ha,Gg,yt,Vg,qg,ft,Ug,Bg,Ql,mt,Jg,Wg,zg,Xl,xt,Fg,Yg,Zg,wc,gt,Kg,pp;return S=new R6({props:{data:[{link:"pre-v",title:"Pre v3.16.0",nested:[{link:"ctx",title:"$$.ctx"},{link:"dirty",title:"$$.dirty"},{link:"invalidate",title:"$$invalidate"},{link:"schedule-update",title:"schedule_update",nested:[{link:"tl-dr",title:"tl/dr:"}]}]},{link:"v",title:"v3.16.0",nested:[{link:"bitmask",title:"Bitmask"},{link:"bitmask-in-svelte",title:"Bitmask in Svelte",nested:[{link:"destructuring-dirty",title:"Destructuring  $$.dirty"},{link:"tl-dr",title:"tl/dr:"}]}]},{link:"reactive-declaration",title:"Reactive Declaration",nested:[{link:"execution-of-all-reactive-declarations-and-statements-are-batched",title:"1. Execution of all reactive declarations and statements are batched"},{link:"the-value-of-reactive-variable-outside-of-reactive-declarations-and-statements-may-not-be-up-to-date",title:"2. The value of reactive variable outside of reactive declarations and statements may not be up to date"},{link:"sorting-of-reactive-declarations-and-statements",title:"Sorting of reactive declarations and statements"},{link:"reactive-variable-that-is-not-reactive",title:"Reactive variable that is not reactive"}]},{link:"summary",title:"Summary",nested:[{link:"svelte-keeps-track-of-which-variables-are-dirty-and-batched-the-dom-updates",title:"1. Svelte keeps track of which variables are dirty and batched the DOM updates."},{link:"using-bitmask-svelte-able-to-generate-a-more-compact-compiled-code",title:"2. Using bitmask, Svelte able to generate a more compact compiled code."},{link:"reactive-declarations-and-statements-are-executed-in-batch-just-like-dom-updates",title:"3. Reactive declarations and statements are executed in batch, just like DOM updates"}]},{link:"closing-note",title:"Closing Note"},{link:"further-resources",title:"Further Resources"}]}}),{c(){n4(S.$$.fragment),ts=i(),Y=n("p"),ns=n("strong"),C=e("\u2B05 \u2B05  Previously in "),q=n("a"),wt=e("Part 1"),ek=e("."),Mc=i(),os=n("p"),$t=n("a"),tk=e("Previously"),nk=e(", when I mentioned the "),Ot=n("code"),ok=e("$$invalidate"),lk=e(" function, I explained that the "),Dt=n("code"),rk=e("$$invalidate"),ik=e(" function works conceptually like the following:"),Rc=i(),Oa=n("div"),Gc=i(),xs=n("p"),ck=e("but that's not the exact implementation of the "),St=n("code"),pk=e("$$invaldiate"),kk=e(" function. So in this article, we are going to look at how "),Tt=n("code"),hk=e("$$invalidate"),vk=e(" is implemented in Svelte."),Vc=i(),Ys=n("p"),dk=e("At the point of writing, Svelte is at "),Da=n("a"),uk=e("v3.20.1"),yk=e("."),qc=i(),gs=n("section"),br=n("h2"),Sa=n("a"),fk=e("Pre v3.16.0"),mk=i(),W=n("p"),xk=e("There's a big optimisation that changes the underlying implementation of the "),Nt=n("code"),gk=e("$$invalidate"),Ek=e(" function in "),Ta=n("a"),_k=e("v3.16.0"),bk=e(", namely in "),Na=n("a"),wk=e("#3945"),$k=e(". The underlying concept doesn't change, but it'll be much easier to understand about "),Ct=n("code"),Ok=e("$$invalidate"),Dk=e(" prior the change and learn about the optimisation change separately."),Sk=i(),Ca=n("p"),Tk=e("Let's explain some of the variables that you are going to see, some of which was introduced in "),It=n("a"),Nk=e("Part 1"),Ck=e(":"),Uc=i(),w=n("section"),wr=n("h3"),Ia=n("a"),Ik=e("$$.ctx"),Lk=i(),La=n("p"),Pk=e("There's no official name for it. You can call it "),$r=n("strong"),Ak=e("context"),Hk=e(" as it is the context which the template is based on to render onto the DOM."),jk=i(),Pa=n("p"),Mk=e("I called it "),Lt=n("a"),Rk=e("instance variables"),Gk=e(". As it is a JavaScript Object that contains all the variables that you:"),Vk=i(),Ds=n("ul"),Aa=n("li"),qk=e("declared in the "),Pt=n("code"),Uk=e("<script>"),Bk=e(" tag"),Jk=i(),Or=n("li"),Wk=e("mutated or reassigned"),zk=i(),Dr=n("li"),Fk=e("referenced in the template"),Yk=i(),Sr=n("p"),Zk=e("that belongs to a component instance."),Kk=i(),Tr=n("p"),Qk=e("The instance variables themselves can be of a primitive value, object, array or function."),Xk=i(),Ss=n("p"),sh=e("The "),At=n("code"),ah=e("instance"),eh=e(" function creates and returns the "),Ht=n("code"),th=e("ctx"),nh=e(" object."),oh=i(),Ts=n("p"),lh=e("Functions declared in the "),jt=n("code"),rh=e("<script>"),ih=e(" tag will refer to the instance variable that is scoped withn the "),Mt=n("code"),ch=e("instance"),ph=e(" function closure:"),kh=i(),Rt=n("div"),hh=i(),Nr=n("p"),Ha=n("a"),vh=e("Svelte REPL"),dh=i(),Gt=n("div"),uh=i(),Ns=n("p"),yh=e("Whenever a new instance of a component is created, the "),Vt=n("code"),fh=e("instance"),mh=e(" function is called and the "),qt=n("code"),xh=e("ctx"),gh=e(" object is created and captured within a new closure scope."),Bc=i(),g=n("section"),Cr=n("h3"),ja=n("a"),Eh=e("$$.dirty"),_h=i(),Ut=n("p"),Bt=n("code"),bh=e("$$.dirty"),wh=e(" is a object that is used to track which instance variable had just changed and needs to be updated onto the DOM."),$h=i(),Ir=n("p"),Oh=e("For example, in the following Svelte component:"),Dh=i(),Jt=n("div"),Sh=i(),Lr=n("p"),Ma=n("a"),Th=e("Svelte REPL"),Nh=i(),ls=n("p"),Ch=e("The initial "),Wt=n("code"),Ih=e("$$.dirty"),Lh=e(" is "),zt=n("code"),Ph=e("null"),Ah=e(" ("),Ra=n("a"),Hh=e("source code"),jh=e(")."),Mh=i(),Cs=n("p"),Rh=e("If you clicked on the "),Pr=n("strong"),Gh=e('"+ Agility"'),Vh=e(" button, "),Ft=n("code"),qh=e("$$.dirty"),Uh=e(" will turn into:"),Bh=i(),Yt=n("div"),Jh=i(),Is=n("p"),Wh=e("If you clicked on the "),Ar=n("strong"),zh=e('"Level Up"'),Fh=e(" button, "),Zt=n("code"),Yh=e("$$.dirty"),Zh=e(" will turn into:"),Kh=i(),Kt=n("div"),Qh=i(),Qt=n("p"),Xt=n("code"),Xh=e("$$.dirty"),sv=e(" is useful for Svelte, so that it doesn't update the DOM unnecessarily."),av=i(),Ls=n("p"),ev=e("If you looked at the "),Hr=n("strong"),tv=e("p (u_p_date)"),nv=e(" function of the compiled code, you will see Svelte checks whether a variable is marked in "),sn=n("code"),ov=e("$$.dirty"),lv=e(", before updating the DOM."),rv=i(),an=n("div"),iv=i(),Ps=n("p"),cv=e("After Svelte updates the DOM, the "),en=n("code"),pv=e("$$.dirty"),kv=e(" is set back to "),tn=n("code"),hv=e("null"),vv=e(" to indicate all changes has been applied onto the DOM."),Jc=i(),u=n("section"),jr=n("h3"),Ga=n("a"),dv=e("$$invalidate"),uv=i(),nn=n("p"),on=n("code"),yv=e("$$invalidate"),fv=e(" is the secret behind reactivity in Svelte."),mv=i(),Mr=n("p"),xv=e("Whenever a variable is"),gv=i(),Va=n("ul"),ln=n("li"),Ev=e("reassigned "),rn=n("code"),_v=e("(foo = 1)"),bv=i(),cn=n("li"),wv=e("mutated "),pn=n("code"),$v=e("(foo.bar = 1)"),Ov=i(),qa=n("p"),Dv=e("Svelte will wrap the assignment or update around with the "),kn=n("code"),Sv=e("$$invalidate"),Tv=e(" function:"),Nv=i(),hn=n("div"),Cv=i(),Ua=n("p"),Iv=e("the "),vn=n("code"),Lv=e("$$invalidate"),Pv=e(" function will:"),Av=i(),rs=n("ol"),dn=n("li"),Hv=e("update the variable in "),un=n("code"),jv=e("$$.ctx"),Mv=i(),yn=n("li"),Rv=e("mark the variable in "),fn=n("code"),Gv=e("$$.dirty"),Vv=i(),Rr=n("li"),qv=e("schedule an update"),Uv=i(),Gr=n("li"),Bv=e("return the value of the assignment or update expression"),Jv=i(),mn=n("div"),Wv=i(),Vr=n("p"),Ba=n("a"),zv=e("Source code"),Fv=i(),Ja=n("p"),Yv=e("One interesting note about the function "),xn=n("code"),Zv=e("$$invalidate"),Kv=e(" is that, it wraps around the assignment or update expression and returns what the expression evaluates to."),Qv=i(),Wa=n("p"),Xv=e("This makes "),gn=n("code"),sd=e("$$invalidate"),ad=e(" chainable:"),ed=i(),En=n("div"),td=i(),qr=n("p"),nd=e("It seemed complex when there's a lot of assignment or update expressions in 1 statement! \u{1F648}"),od=i(),As=n("p"),ld=e("The 2nd argument of "),_n=n("code"),rd=e("$$invalidate"),id=e(" is the assignment or update expressions verbatim. But if it contains any assignment or update sub-expressions, we recursively wrap it with "),bn=n("code"),cd=e("$$invalidate"),pd=e("."),kd=i(),za=n("p"),hd=e("In case where the assignment expression changes a property of an object, we pass the object in as a 3rd argument of the "),wn=n("code"),vd=e("$$invalidate"),dd=e(" function, eg:"),ud=i(),$n=n("div"),yd=i(),is=n("p"),fd=e("So that, we update the "),On=n("code"),md=e('"obj"'),xd=e(" variable to "),Dn=n("code"),gd=e("obj"),Ed=e(" instead of the value of the 2nd argument, "),Sn=n("code"),_d=e('"hello"'),bd=e("."),Wc=i(),_=n("section"),Ur=n("h3"),Fa=n("a"),wd=e("schedule_update"),$d=i(),Tn=n("p"),Nn=n("code"),Od=e("schedule_update"),Dd=e(" schedules Svelte to update the DOM with the changes made thus far."),Sd=i(),cs=n("p"),Td=e("Svelte, at the point of writing ("),Ya=n("a"),Nd=e("v3.20.1"),Cd=e("), uses "),Za=n("a"),Id=e("microtask queue"),Ld=e(" to batch change updates. The actual DOM update happens in the next microtask, so that any synchronous "),Cn=n("code"),Pd=e("$$invalidate"),Ad=e(" operations that happen within the same task get batched into the next DOM update."),Hd=i(),Br=n("p"),jd=e("To schedule a next microtask, Svelte uses the Promise callback."),Md=i(),In=n("div"),Rd=i(),Ka=n("p"),Gd=e("In "),Ln=n("code"),Vd=e("flush"),qd=e(", we call update for each component marked dirty:"),Ud=i(),Pn=n("div"),Bd=i(),Jr=n("p"),Qa=n("a"),Jd=e("Source code"),Wd=i(),Wr=n("p"),zd=e("So, if you write a Svelte component like this:"),Fd=i(),An=n("div"),Yd=i(),zr=n("p"),Xa=n("a"),Zd=e("Svelte REPL"),Kd=i(),Hs=n("p"),Qd=e("The DOM update for the "),Hn=n("code"),Xd=e("givenName"),su=e(" and "),jn=n("code"),au=e("familyName"),eu=e(" happens in the same microtask:"),tu=i(),y=n("ol"),js=n("li"),nu=e("Click on the "),Fr=n("strong"),ou=e('"Update"'),lu=e(" to call the "),Mn=n("code"),ru=e("update"),iu=e(" function"),cu=i(),Yr=n("li"),Rn=n("code"),pu=e("$$invalidate('givenName', givenName = 'Li Hau')"),ku=i(),Zs=n("li"),hu=e("Mark the variable "),Gn=n("code"),vu=e("givenName"),du=e(" dirty, "),Vn=n("code"),uu=e("$$.dirty['givenName'] = true"),yu=i(),qn=n("li"),fu=e("Schedule an update, "),Un=n("code"),mu=e("schedule_update()"),xu=i(),se=n("li"),gu=e("Since it's the first update in the call stack, push the "),Bn=n("code"),Eu=e("flush"),_u=e(" function into the microtask queue"),bu=i(),Zr=n("li"),Jn=n("code"),wu=e("$$invalidate('familyName', familyName = 'Tan')"),$u=i(),Ks=n("li"),Ou=e("Mark the variable "),Wn=n("code"),Du=e("familyName"),Su=e(" dirty, "),zn=n("code"),Tu=e("$$.dirty['familyName'] = true"),Nu=i(),Fn=n("li"),Cu=e("Schedule an update, "),Yn=n("code"),Iu=e("schedule_update()"),Lu=i(),ae=n("li"),Pu=e("Since "),Zn=n("code"),Au=e("update_scheduled = true"),Hu=e(", do nothing."),ju=i(),Kr=n("li"),Qr=n("strong"),Mu=e("-- End of task --"),Ru=i(),Xr=n("li"),si=n("strong"),Gu=e("-- Start of microtask--"),Vu=i(),Qs=n("li"),Kn=n("code"),qu=e("flush()"),Uu=e(" calls "),Qn=n("code"),Bu=e("update()"),Ju=e(" for each component marked dirty"),Wu=i(),Xs=n("li"),zu=e("Calls "),Xn=n("code"),Fu=e("$$.fragment.p($$.dirty, $$.ctx)"),Yu=e("."),ee=n("ul"),te=n("li"),so=n("code"),Zu=e("$$.dirty"),Ku=e(" is now "),ao=n("code"),Qu=e("{ givenName: true, familyName: true }"),Xu=i(),ne=n("li"),eo=n("code"),sy=e("$$.ctx"),ay=e(" is now "),to=n("code"),ey=e("{ givenName: 'Li Hau', familyName: 'Tan' }"),ty=i(),sa=n("li"),ny=e("In "),no=n("code"),oy=e("function p(dirty, ctx)"),ly=e(","),oe=n("ul"),aa=n("li"),ry=e("Update the 1st text node to "),oo=n("code"),iy=e("$$.ctx['givenName']"),cy=e(" if "),lo=n("code"),py=e("$$.dirty['givenName'] === true"),ky=i(),ea=n("li"),hy=e("Update the 2nd text node to "),ro=n("code"),vy=e("$$.ctx['familyName']"),dy=e(" if "),io=n("code"),uy=e("$$.dirty['familyName'] === true"),yy=i(),ta=n("li"),fy=e("Resets the "),co=n("code"),my=e("$$.dirty"),xy=e(" to "),po=n("code"),gy=e("null"),Ey=i(),ai=n("li"),_y=e("..."),by=i(),ei=n("li"),ti=n("strong"),wy=e("-- End of microtask--"),zc=i(),na=n("section"),ni=n("h4"),le=n("a"),$y=e("tl/dr:"),Oy=i(),ps=n("ul"),ks=n("li"),Dy=e("For each assignment or update, Svelte calls "),ko=n("code"),Sy=e("$$invalidate"),Ty=e(" to update the variable in "),ho=n("code"),Ny=e("$$.ctx"),Cy=e(" and mark the variable dirty in "),vo=n("code"),Iy=e("$$.dirty"),Ly=e("."),Py=i(),oi=n("li"),Ay=e("The acutal DOM update is batched into the next microtask queue."),Hy=i(),re=n("li"),jy=e("To update the DOM for each component, the component "),uo=n("code"),My=e("$$.fragment.p($$.diry, $$.ctx)"),Ry=e(" is called."),Gy=i(),Ms=n("li"),Vy=e("After the DOM update, the "),yo=n("code"),qy=e("$$.dirty"),Uy=e(" is reset to "),fo=n("code"),By=e("null"),Jy=e("."),Fc=i(),N=n("section"),li=n("h2"),ie=n("a"),Wy=e("v3.16.0"),zy=i(),Rs=n("p"),Fy=e("One big change in v3.16.0 is the PR "),ce=n("a"),Yy=e("#3945"),Zy=e(", namely "),ri=n("strong"),Ky=e("bitmask-based change tracking"),Qy=e("."),Xy=i(),ii=n("p"),sf=e("Instead of marking the variable dirty using an object:"),af=i(),mo=n("div"),ef=i(),ci=n("p"),tf=e("Svelte assign each variable an index:"),nf=i(),xo=n("div"),of=i(),pe=n("p"),lf=e("and uses "),ke=n("a"),rf=e("bitmask"),cf=e(" to store the dirty information:"),pf=i(),go=n("div"),kf=i(),pi=n("p"),hf=e("which is far more compact than the previous compiled code."),Yc=i(),b=n("section"),ki=n("h3"),he=n("a"),vf=e("Bitmask"),df=i(),hi=n("p"),uf=e("For those who don't understand, allow me to quickly explain what it is."),yf=i(),Gs=n("p"),ff=e("Of course, if you want to learn more about it, feel free to read a more detailed explanation, like "),ve=n("a"),mf=e("this"),xf=e(" and "),de=n("a"),gf=e("this"),Ef=e("."),_f=i(),A=n("p"),bf=e("The most compact way of representing a group of "),Eo=n("code"),wf=e("true"),$f=e(" or "),_o=n("code"),Of=e("false"),Df=e(" is to use bits. If the bit is "),bo=n("code"),Sf=e("1"),Tf=e(" it is "),wo=n("code"),Nf=e("true"),Cf=e(" and if it is "),$o=n("code"),If=e("0"),Lf=e(" it is "),Oo=n("code"),Pf=e("false"),Af=e("."),Hf=i(),Vs=n("p"),jf=e("A number can be represented in binary, "),vi=n("strong"),Mf=e("5"),Rf=e(" is "),Do=n("code"),Gf=e("0b0101"),Vf=e(" in binary."),qf=i(),R=n("p"),Uf=e("If "),di=n("strong"),Bf=e("5"),Jf=e(" is represented in a 4-bit binary, then it can store 4 boolean values, with the 0th and 2nd bit as "),So=n("code"),Wf=e("true"),zf=e(" and 1st and 3rd bit as "),To=n("code"),Ff=e("false"),Yf=e(", (reading from the right to left, from "),ue=n("a"),Zf=e("least significant bit"),Kf=e(" to the "),ye=n("a"),Qf=e("most significant bit"),Xf=e(")."),sm=i(),ui=n("p"),yi=n("strong"),am=e("How many boolean values can a number store?"),em=i(),fi=n("p"),tm=e("That depends on the language, a 16-bit integer in Java can store 16 boolean values."),nm=i(),qs=n("p"),om=e("In JavaScript, numbers can are "),fe=n("a"),lm=e("represented in 64 bits"),rm=e(". However, when using "),me=n("a"),im=e("bitwise operations"),cm=e(" on the number, JavaScript will treat the number as 32 bits."),pm=i(),xe=n("p"),km=e("To inspect or modify the boolean value stored in a number, we use "),ge=n("a"),hm=e("bitwise operations"),vm=e("."),dm=i(),No=n("div"),um=i(),Ee=n("p"),ym=e("The 2nd operand we use in the bitwise operation, is like a "),_e=n("a"),fm=e("mask"),mm=e(" that allow us to target a specific bit in the 1st number, that stores our boolean values."),xm=i(),be=n("p"),gm=e("We call the mask, "),mi=n("strong"),Em=e("bitmask"),_m=e("."),Zc=i(),f=n("section"),xi=n("h3"),we=n("a"),bm=e("Bitmask in Svelte"),wm=i(),gi=n("p"),$m=e("As mentioned earlier, we assign each variable an index:"),Om=i(),Co=n("div"),Dm=i(),Ei=n("p"),Sm=e("So instead of returning the instance variable as an JavaScript Object, we now return it as an JavaScript Array:"),Tm=i(),Io=n("div"),Nm=i(),hs=n("p"),Cm=e("The variable is accessed via "),_i=n("strong"),Im=e("index"),Lm=e(", "),Lo=n("code"),Pm=e("$$.ctx[index]"),Am=e(", instead of "),bi=n("strong"),Hm=e("variable name"),jm=e(":"),Mm=i(),Po=n("div"),Rm=i(),vs=n("p"),Gm=e("The "),Ao=n("code"),Vm=e("$$invalidate"),qm=e(" function works the same, except it takes in "),wi=n("strong"),Um=e("index"),Bm=e(" instead of "),$i=n("strong"),Jm=e("variable name"),Wm=e(":"),zm=i(),Ho=n("div"),Fm=i(),jo=n("p"),Mo=n("code"),Ym=e("$$.dirty"),Zm=e(" now stores a list of numbers. Each number carries 31 boolean values, each boolean value indicates whether the variable of that index is dirty or not."),Km=i(),Oi=n("p"),Qm=e("To set a variable as dirty, we use bitwise operation:"),Xm=i(),Ro=n("div"),s1=i(),Di=n("p"),a1=e("And to verify whether a variable is dirty, we use bitwise operation too!"),e1=i(),Go=n("div"),t1=i(),ds=n("p"),n1=e("With using bitmask, "),Vo=n("code"),o1=e("$$.dirty"),l1=e(" is now reset to "),qo=n("code"),r1=e("[-1]"),i1=e(" instead of "),Uo=n("code"),c1=e("null"),p1=e("."),k1=i(),Z=n("p"),Si=n("strong"),h1=e("Trivia:"),v1=i(),Bo=n("code"),d1=e("-1"),u1=e(" is "),Jo=n("code"),y1=e("0b1111_1111"),f1=e(" in binary, where all the bits are "),Wo=n("code"),m1=e("1"),x1=e("."),Kc=i(),Es=n("section"),Ti=n("h4"),oa=n("a"),g1=e("Destructuring "),Ni=n("strong"),E1=e("$$.dirty"),_1=i(),us=n("p"),b1=e("One code-size optimisation that Svelte does is to always destructure the "),zo=n("code"),w1=e("dirty"),$1=e(" array in the "),Ci=n("strong"),O1=e("u_p_date function"),D1=e(" if there's less than 32 variables, since we will always access "),Fo=n("code"),S1=e("dirty[0]"),T1=e(" anyway:"),N1=i(),Yo=n("div"),Qc=i(),la=n("section"),Ii=n("h4"),$e=n("a"),C1=e("tl/dr:"),I1=i(),Oe=n("ul"),Us=n("li"),L1=e("The underlying mechanism for "),Zo=n("code"),P1=e("$$invalidate"),A1=e(" and "),Ko=n("code"),H1=e("schedule_update"),j1=e(" does not change"),M1=i(),Li=n("li"),R1=e("Using bitmask, the compiled code is much compact"),Xc=i(),v=n("section"),Pi=n("h2"),De=n("a"),G1=e("Reactive Declaration"),V1=i(),ra=n("p"),q1=e("Svelte allow us to declare reactive values via the "),Se=n("a"),U1=e("labeled statement"),B1=e(", "),Qo=n("code"),J1=e("$:"),W1=i(),Xo=n("div"),z1=i(),Ai=n("p"),Te=n("a"),F1=e("Svelte REPL"),Y1=i(),Ne=n("p"),Z1=e("If you look at the compiled output, you would find out that the declarative statements appeared in the "),Ce=n("a"),sl=n("code"),K1=e("instance"),Q1=e(" function"),X1=e(":"),sx=i(),al=n("div"),ax=i(),Hi=n("p"),ex=e("Try reorder the reactive declarations and observe the change in the compiled output:"),tx=i(),el=n("div"),nx=i(),ji=n("p"),Ie=n("a"),ox=e("Svelte REPL"),lx=i(),tl=n("div"),rx=i(),Mi=n("p"),ix=e("Some observations:"),cx=i(),Bs=n("ul"),ia=n("li"),px=e("When there are reactive declarations, Svelte defines a custom "),nl=n("code"),kx=e("$$.update"),hx=e(" method."),Ri=n("ul"),_s=n("li"),ol=n("code"),vx=e("$$.update"),dx=e(" is a "),Le=n("a"),ux=e("no-op function"),yx=e(" by default. (See "),Pe=n("a"),fx=e("src/runtime/internal/Component.ts"),mx=e(")"),xx=i(),Ae=n("li"),gx=e("Svelte uses "),ll=n("code"),Ex=e("$$invalidate"),_x=e(" to update the value of a reactive variable too."),bx=i(),rl=n("li"),wx=e("Svelte sorts the reactive declarations and statements, based on the dependency relationship between the declarations and statements"),Gi=n("ul"),U=n("li"),il=n("code"),$x=e("quadrupled"),Ox=e(" depends on "),cl=n("code"),Dx=e("doubled"),Sx=e(", so "),pl=n("code"),Tx=e("quadrupled"),Nx=e(" is evaluated and "),kl=n("code"),Cx=e("$$invalidate"),Ix=e("d after "),hl=n("code"),Lx=e("doubled"),Px=e("."),Ax=i(),He=n("p"),Hx=e("Since all reactive declarations and statements are grouped into the "),vl=n("code"),jx=e("$$.update"),Mx=e(" method, and also the fact that Svelte will sort the declarations and statements according to their dependency relationship, it is irrelevant of the location or the order you declared them."),Rx=i(),Vi=n("p"),Gx=e("The following component still works:"),Vx=i(),dl=n("div"),qx=i(),qi=n("p"),je=n("a"),Ux=e("Svelte REPL"),Bx=i(),Ui=n("p"),Me=n("strong"),Jx=e("The next thing you may ask, when is "),ul=n("code"),Wx=e("$$.update"),zx=e(" being called?"),Fx=i(),Js=n("p"),Yx=e("Remember the "),yl=n("code"),Zx=e("update"),Kx=e(" function that gets called in the "),fl=n("code"),Qx=e("flush"),Xx=e(" function?"),s2=i(),Re=n("p"),a2=e("I put a "),ml=n("code"),e2=e("NOTE:"),t2=e(" comment saying that it will be important later. Well, it is important now."),n2=i(),xl=n("div"),o2=i(),ys=n("p"),l2=e("The "),gl=n("code"),r2=e("$$.update"),i2=e(" function gets called "),Bi=n("strong"),c2=e("in the same microtask"),p2=e(" with the DOM update, right before we called the "),El=n("code"),k2=e("$$.fragment.p()"),h2=e(" to update the DOM."),v2=i(),Ji=n("p"),d2=e("The implication of the above fact is"),sp=i(),I=n("section"),Wi=n("h3"),Ge=n("a"),u2=e("1. Execution of all reactive declarations and statements are batched"),y2=i(),zi=n("p"),f2=e("Just as how DOM updates are batched, reactive declarations and statements are batched too!"),m2=i(),_l=n("div"),x2=i(),Fi=n("p"),Ve=n("a"),g2=e("Svelte REPL"),E2=i(),qe=n("p"),_2=e("When "),bl=n("code"),b2=e("update()"),w2=e(" get called,"),$2=i(),G=n("ol"),z=n("li"),O2=e("Similar to the "),wl=n("a"),D2=e("flow described above"),S2=e(", "),$l=n("code"),T2=e("$$invalidate"),N2=e(" both "),Yi=n("strong"),C2=e('"givenName"'),I2=e(" and "),Zi=n("strong"),L2=e('"familyName"'),P2=e(", and schedules an update"),A2=i(),Ki=n("li"),Qi=n("strong"),H2=e("-- End of task --"),j2=i(),Xi=n("li"),sc=n("strong"),M2=e("-- Start of microtask--"),R2=i(),ca=n("li"),Ol=n("code"),G2=e("flush()"),V2=e(" calls "),Dl=n("code"),q2=e("update()"),U2=e(" for each component marked dirty"),B2=i(),Ue=n("li"),J2=e("Runs "),Sl=n("code"),W2=e("$$.update()"),Be=n("ul"),K=n("li"),z2=e("As "),ac=n("strong"),F2=e('"givenName"'),Y2=e(" and "),ec=n("strong"),Z2=e('"familyName"'),K2=e(" has changed, evaluates and "),Tl=n("code"),Q2=e("$$invalidate"),X2=i(),tc=n("strong"),s3=e('"name"'),a3=i(),pa=n("li"),e3=e("As "),nc=n("strong"),t3=e('"name"'),n3=e(" has changed, executes "),Nl=n("code"),o3=e("console.log('name', name);"),l3=i(),Je=n("li"),r3=e("Calls "),Cl=n("code"),i3=e("$$.fragment.p(...)"),c3=e(" to update the DOM."),p3=i(),V=n("p"),k3=e("As you can see, even though we've updated "),Il=n("code"),h3=e("givenName"),v3=e(" and "),Ll=n("code"),d3=e("familyName"),u3=e(", we only evaluate "),Pl=n("code"),y3=e("name"),f3=e(" and executes "),Al=n("code"),m3=e("console.log('name', name)"),x3=i(),oc=n("strong"),g3=e("once"),E3=e(" instead of twice:"),_3=i(),Hl=n("div"),ap=i(),H=n("section"),lc=n("h3"),We=n("a"),b3=e("2. The value of reactive variable outside of reactive declarations and statements may not be up to date"),w3=i(),rc=n("p"),$3=e("Because the reactive declarations and statements are batched and executed in the next microtask, you can't expect the value to be updated synchronously."),O3=i(),jl=n("div"),D3=i(),ic=n("p"),ze=n("a"),S3=e("Svelte REPL"),T3=i(),Fe=n("p"),N3=e("Instead, you "),cc=n("strong"),C3=e("have to"),I3=e(" refer the reactive variable in another reactive declaration or statement:"),L3=i(),Ml=n("div"),ep=i(),Q=n("section"),pc=n("h3"),Ye=n("a"),P3=e("Sorting of reactive declarations and statements"),A3=i(),kc=n("p"),H3=e("Svelte tries to preserve the order of reactive declarations and statements as they are declared as much as possible."),j3=i(),Ze=n("p"),M3=e("However, if one reactive declaration or statement refers to a variable that was defined by another reactive declaration, then, "),hc=n("strong"),R3=e("it will be inserted after the latter reactive declaration"),G3=e(":"),V3=i(),Rl=n("div"),tp=i(),L=n("section"),vc=n("h3"),Ke=n("a"),q3=e("Reactive variable that is not reactive"),U3=i(),Qe=n("p"),B3=e("The Svelte compiler tracks all the variables declared in the "),Gl=n("code"),J3=e("<script>"),W3=e(" tag."),z3=i(),Xe=n("p"),F3=e("If all the variables of a reactive declaration or statement refers to, never gets mutated or reassigned, then the reactive declaration or statement will not be added into "),Vl=n("code"),Y3=e("$$.update"),Z3=e("."),K3=i(),dc=n("p"),Q3=e("For example:"),X3=i(),ql=n("div"),sg=i(),uc=n("p"),st=n("a"),ag=e("Svelte REPL"),eg=i(),Ws=n("p"),tg=e("Since, "),Ul=n("code"),ng=e("count"),og=e(" never gets mutated or reassigned, Svelte optimises the compiled output by not defining "),Bl=n("code"),lg=e("$$self.$$.update"),rg=e("."),ig=i(),Jl=n("div"),np=i(),Wl=n("section"),yc=n("h2"),at=n("a"),cg=e("Summary"),op=i(),zl=n("section"),fc=n("h3"),et=n("a"),pg=e("1. Svelte keeps track of which variables are dirty and batched the DOM updates."),lp=i(),Fl=n("section"),mc=n("h3"),tt=n("a"),kg=e("2. Using bitmask, Svelte able to generate a more compact compiled code."),rp=i(),Yl=n("section"),xc=n("h3"),nt=n("a"),hg=e("3. Reactive declarations and statements are executed in batch, just like DOM updates"),ip=i(),B=n("section"),gc=n("h2"),ot=n("a"),vg=e("Closing Note"),dg=i(),lt=n("p"),ug=e("If you wish to know more, "),rt=n("a"),yg=e("follow me on Twitter"),fg=e("."),mg=i(),fs=n("p"),xg=e("I'll post it on Twitter when the next part is ready, where I'll be covering "),it=n("a"),gg=e("logic blocks"),Eg=e(", "),ct=n("a"),_g=e("slots"),bg=e(", "),pt=n("a"),wg=e("context"),$g=e(", and many others."),Og=i(),Ec=n("p"),kt=n("strong"),Dg=e("\u2B05 \u2B05  Previously in "),Zl=n("a"),Sg=e("Part 1"),Tg=e("."),Ng=i(),_c=n("p"),ht=n("strong"),Cg=e("\u27A1 \u27A1  Continue reading on "),Kl=n("a"),Ig=e("Part 3"),Lg=e("."),cp=i(),ka=n("section"),bc=n("h2"),vt=n("a"),Pg=e("Further Resources"),Ag=i(),F=n("ul"),dt=n("li"),Hg=e("Rich Harris shares about "),ut=n("a"),jg=e("Bitmask Tracking at Svelte Society NYC"),Mg=e("."),Rg=i(),ha=n("li"),Gg=e("Svelte Tutorial - "),yt=n("a"),Vg=e("Reactivity"),qg=i(),ft=n("a"),Ug=e("https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/"),Bg=i(),Ql=n("li"),mt=n("a"),Jg=e("The Art of Bitmasking"),Wg=e(" by Shakib Ahmed"),zg=i(),Xl=n("li"),xt=n("a"),Fg=e("Bitmasks: A very esoteric (and impractical) way of managing booleans"),Yg=e(" by Basti Ortiz"),Zg=i(),wc=n("li"),gt=n("a"),Kg=e("MDN: Bitwise Operators"),this.h()},l(p){o4(S.$$.fragment,p),ts=c(p),Y=o(p,"P",{});var k=l(Y);ns=o(k,"STRONG",{});var kp=l(ns);C=t(kp,"\u2B05 \u2B05  Previously in "),q=o(kp,"A",{href:!0});var uE=l(q);wt=t(uE,"Part 1"),uE.forEach(a),ek=t(kp,"."),kp.forEach(a),k.forEach(a),Mc=c(p),os=o(p,"P",{});var Et=l(os);$t=o(Et,"A",{href:!0});var yE=l($t);tk=t(yE,"Previously"),yE.forEach(a),nk=t(Et,", when I mentioned the "),Ot=o(Et,"CODE",{class:!0});var fE=l(Ot);ok=t(fE,"$$invalidate"),fE.forEach(a),lk=t(Et," function, I explained that the "),Dt=o(Et,"CODE",{class:!0});var mE=l(Dt);rk=t(mE,"$$invalidate"),mE.forEach(a),ik=t(Et," function works conceptually like the following:"),Et.forEach(a),Rc=c(p),Oa=o(p,"DIV",{class:!0});var F4=l(Oa);F4.forEach(a),Gc=c(p),xs=o(p,"P",{});var sr=l(xs);ck=t(sr,"but that's not the exact implementation of the "),St=o(sr,"CODE",{class:!0});var xE=l(St);pk=t(xE,"$$invaldiate"),xE.forEach(a),kk=t(sr," function. So in this article, we are going to look at how "),Tt=o(sr,"CODE",{class:!0});var gE=l(Tt);hk=t(gE,"$$invalidate"),gE.forEach(a),vk=t(sr," is implemented in Svelte."),sr.forEach(a),Vc=c(p),Ys=o(p,"P",{});var hp=l(Ys);dk=t(hp,"At the point of writing, Svelte is at "),Da=o(hp,"A",{href:!0,rel:!0});var EE=l(Da);uk=t(EE,"v3.20.1"),EE.forEach(a),yk=t(hp,"."),hp.forEach(a),qc=c(p),gs=o(p,"SECTION",{});var ar=l(gs);br=o(ar,"H2",{});var _E=l(br);Sa=o(_E,"A",{href:!0,id:!0});var bE=l(Sa);fk=t(bE,"Pre v3.16.0"),bE.forEach(a),_E.forEach(a),mk=c(ar),W=o(ar,"P",{});var bs=l(W);xk=t(bs,"There's a big optimisation that changes the underlying implementation of the "),Nt=o(bs,"CODE",{class:!0});var wE=l(Nt);gk=t(wE,"$$invalidate"),wE.forEach(a),Ek=t(bs," function in "),Ta=o(bs,"A",{href:!0,rel:!0});var $E=l(Ta);_k=t($E,"v3.16.0"),$E.forEach(a),bk=t(bs,", namely in "),Na=o(bs,"A",{href:!0,rel:!0});var OE=l(Na);wk=t(OE,"#3945"),OE.forEach(a),$k=t(bs,". The underlying concept doesn't change, but it'll be much easier to understand about "),Ct=o(bs,"CODE",{class:!0});var DE=l(Ct);Ok=t(DE,"$$invalidate"),DE.forEach(a),Dk=t(bs," prior the change and learn about the optimisation change separately."),bs.forEach(a),Sk=c(ar),Ca=o(ar,"P",{});var vp=l(Ca);Tk=t(vp,"Let's explain some of the variables that you are going to see, some of which was introduced in "),It=o(vp,"A",{href:!0});var SE=l(It);Nk=t(SE,"Part 1"),SE.forEach(a),Ck=t(vp,":"),vp.forEach(a),ar.forEach(a),Uc=c(p),w=o(p,"SECTION",{});var T=l(w);wr=o(T,"H3",{});var TE=l(wr);Ia=o(TE,"A",{href:!0,id:!0});var NE=l(Ia);Ik=t(NE,"$$.ctx"),NE.forEach(a),TE.forEach(a),Lk=c(T),La=o(T,"P",{});var dp=l(La);Pk=t(dp,"There's no official name for it. You can call it "),$r=o(dp,"STRONG",{});var CE=l($r);Ak=t(CE,"context"),CE.forEach(a),Hk=t(dp," as it is the context which the template is based on to render onto the DOM."),dp.forEach(a),jk=c(T),Pa=o(T,"P",{});var up=l(Pa);Mk=t(up,"I called it "),Lt=o(up,"A",{href:!0});var IE=l(Lt);Rk=t(IE,"instance variables"),IE.forEach(a),Gk=t(up,". As it is a JavaScript Object that contains all the variables that you:"),up.forEach(a),Vk=c(T),Ds=o(T,"UL",{});var er=l(Ds);Aa=o(er,"LI",{});var yp=l(Aa);qk=t(yp,"declared in the "),Pt=o(yp,"CODE",{class:!0});var LE=l(Pt);Uk=t(LE,"<script>"),LE.forEach(a),Bk=t(yp," tag"),yp.forEach(a),Jk=c(er),Or=o(er,"LI",{});var PE=l(Or);Wk=t(PE,"mutated or reassigned"),PE.forEach(a),zk=c(er),Dr=o(er,"LI",{});var AE=l(Dr);Fk=t(AE,"referenced in the template"),AE.forEach(a),er.forEach(a),Yk=c(T),Sr=o(T,"P",{});var HE=l(Sr);Zk=t(HE,"that belongs to a component instance."),HE.forEach(a),Kk=c(T),Tr=o(T,"P",{});var jE=l(Tr);Qk=t(jE,"The instance variables themselves can be of a primitive value, object, array or function."),jE.forEach(a),Xk=c(T),Ss=o(T,"P",{});var tr=l(Ss);sh=t(tr,"The "),At=o(tr,"CODE",{class:!0});var ME=l(At);ah=t(ME,"instance"),ME.forEach(a),eh=t(tr," function creates and returns the "),Ht=o(tr,"CODE",{class:!0});var RE=l(Ht);th=t(RE,"ctx"),RE.forEach(a),nh=t(tr," object."),tr.forEach(a),oh=c(T),Ts=o(T,"P",{});var nr=l(Ts);lh=t(nr,"Functions declared in the "),jt=o(nr,"CODE",{class:!0});var GE=l(jt);rh=t(GE,"<script>"),GE.forEach(a),ih=t(nr," tag will refer to the instance variable that is scoped withn the "),Mt=o(nr,"CODE",{class:!0});var VE=l(Mt);ch=t(VE,"instance"),VE.forEach(a),ph=t(nr," function closure:"),nr.forEach(a),kh=c(T),Rt=o(T,"DIV",{class:!0});var Y4=l(Rt);Y4.forEach(a),hh=c(T),Nr=o(T,"P",{});var qE=l(Nr);Ha=o(qE,"A",{href:!0,rel:!0});var UE=l(Ha);vh=t(UE,"Svelte REPL"),UE.forEach(a),qE.forEach(a),dh=c(T),Gt=o(T,"DIV",{class:!0});var Z4=l(Gt);Z4.forEach(a),uh=c(T),Ns=o(T,"P",{});var or=l(Ns);yh=t(or,"Whenever a new instance of a component is created, the "),Vt=o(or,"CODE",{class:!0});var BE=l(Vt);fh=t(BE,"instance"),BE.forEach(a),mh=t(or," function is called and the "),qt=o(or,"CODE",{class:!0});var JE=l(qt);xh=t(JE,"ctx"),JE.forEach(a),gh=t(or," object is created and captured within a new closure scope."),or.forEach(a),T.forEach(a),Bc=c(p),g=o(p,"SECTION",{});var $=l(g);Cr=o($,"H3",{});var WE=l(Cr);ja=o(WE,"A",{href:!0,id:!0});var zE=l(ja);Eh=t(zE,"$$.dirty"),zE.forEach(a),WE.forEach(a),_h=c($),Ut=o($,"P",{});var Qg=l(Ut);Bt=o(Qg,"CODE",{class:!0});var FE=l(Bt);bh=t(FE,"$$.dirty"),FE.forEach(a),wh=t(Qg," is a object that is used to track which instance variable had just changed and needs to be updated onto the DOM."),Qg.forEach(a),$h=c($),Ir=o($,"P",{});var YE=l(Ir);Oh=t(YE,"For example, in the following Svelte component:"),YE.forEach(a),Dh=c($),Jt=o($,"DIV",{class:!0});var K4=l(Jt);K4.forEach(a),Sh=c($),Lr=o($,"P",{});var ZE=l(Lr);Ma=o(ZE,"A",{href:!0,rel:!0});var KE=l(Ma);Th=t(KE,"Svelte REPL"),KE.forEach(a),ZE.forEach(a),Nh=c($),ls=o($,"P",{});var va=l(ls);Ch=t(va,"The initial "),Wt=o(va,"CODE",{class:!0});var QE=l(Wt);Ih=t(QE,"$$.dirty"),QE.forEach(a),Lh=t(va," is "),zt=o(va,"CODE",{class:!0});var XE=l(zt);Ph=t(XE,"null"),XE.forEach(a),Ah=t(va," ("),Ra=o(va,"A",{href:!0,rel:!0});var s_=l(Ra);Hh=t(s_,"source code"),s_.forEach(a),jh=t(va,")."),va.forEach(a),Mh=c($),Cs=o($,"P",{});var lr=l(Cs);Rh=t(lr,"If you clicked on the "),Pr=o(lr,"STRONG",{});var a_=l(Pr);Gh=t(a_,'"+ Agility"'),a_.forEach(a),Vh=t(lr," button, "),Ft=o(lr,"CODE",{class:!0});var e_=l(Ft);qh=t(e_,"$$.dirty"),e_.forEach(a),Uh=t(lr," will turn into:"),lr.forEach(a),Bh=c($),Yt=o($,"DIV",{class:!0});var Q4=l(Yt);Q4.forEach(a),Jh=c($),Is=o($,"P",{});var rr=l(Is);Wh=t(rr,"If you clicked on the "),Ar=o(rr,"STRONG",{});var t_=l(Ar);zh=t(t_,'"Level Up"'),t_.forEach(a),Fh=t(rr," button, "),Zt=o(rr,"CODE",{class:!0});var n_=l(Zt);Yh=t(n_,"$$.dirty"),n_.forEach(a),Zh=t(rr," will turn into:"),rr.forEach(a),Kh=c($),Kt=o($,"DIV",{class:!0});var X4=l(Kt);X4.forEach(a),Qh=c($),Qt=o($,"P",{});var Xg=l(Qt);Xt=o(Xg,"CODE",{class:!0});var o_=l(Xt);Xh=t(o_,"$$.dirty"),o_.forEach(a),sv=t(Xg," is useful for Svelte, so that it doesn't update the DOM unnecessarily."),Xg.forEach(a),av=c($),Ls=o($,"P",{});var ir=l(Ls);ev=t(ir,"If you looked at the "),Hr=o(ir,"STRONG",{});var l_=l(Hr);tv=t(l_,"p (u_p_date)"),l_.forEach(a),nv=t(ir," function of the compiled code, you will see Svelte checks whether a variable is marked in "),sn=o(ir,"CODE",{class:!0});var r_=l(sn);ov=t(r_,"$$.dirty"),r_.forEach(a),lv=t(ir,", before updating the DOM."),ir.forEach(a),rv=c($),an=o($,"DIV",{class:!0});var s6=l(an);s6.forEach(a),iv=c($),Ps=o($,"P",{});var cr=l(Ps);cv=t(cr,"After Svelte updates the DOM, the "),en=o(cr,"CODE",{class:!0});var i_=l(en);pv=t(i_,"$$.dirty"),i_.forEach(a),kv=t(cr," is set back to "),tn=o(cr,"CODE",{class:!0});var c_=l(tn);hv=t(c_,"null"),c_.forEach(a),vv=t(cr," to indicate all changes has been applied onto the DOM."),cr.forEach(a),$.forEach(a),Jc=c(p),u=o(p,"SECTION",{});var m=l(u);jr=o(m,"H3",{});var p_=l(jr);Ga=o(p_,"A",{href:!0,id:!0});var k_=l(Ga);dv=t(k_,"$$invalidate"),k_.forEach(a),p_.forEach(a),uv=c(m),nn=o(m,"P",{});var sE=l(nn);on=o(sE,"CODE",{class:!0});var h_=l(on);yv=t(h_,"$$invalidate"),h_.forEach(a),fv=t(sE," is the secret behind reactivity in Svelte."),sE.forEach(a),mv=c(m),Mr=o(m,"P",{});var v_=l(Mr);xv=t(v_,"Whenever a variable is"),v_.forEach(a),gv=c(m),Va=o(m,"UL",{});var fp=l(Va);ln=o(fp,"LI",{});var aE=l(ln);Ev=t(aE,"reassigned "),rn=o(aE,"CODE",{class:!0});var d_=l(rn);_v=t(d_,"(foo = 1)"),d_.forEach(a),aE.forEach(a),bv=c(fp),cn=o(fp,"LI",{});var eE=l(cn);wv=t(eE,"mutated "),pn=o(eE,"CODE",{class:!0});var u_=l(pn);$v=t(u_,"(foo.bar = 1)"),u_.forEach(a),eE.forEach(a),fp.forEach(a),Ov=c(m),qa=o(m,"P",{});var mp=l(qa);Dv=t(mp,"Svelte will wrap the assignment or update around with the "),kn=o(mp,"CODE",{class:!0});var y_=l(kn);Sv=t(y_,"$$invalidate"),y_.forEach(a),Tv=t(mp," function:"),mp.forEach(a),Nv=c(m),hn=o(m,"DIV",{class:!0});var a6=l(hn);a6.forEach(a),Cv=c(m),Ua=o(m,"P",{});var xp=l(Ua);Iv=t(xp,"the "),vn=o(xp,"CODE",{class:!0});var f_=l(vn);Lv=t(f_,"$$invalidate"),f_.forEach(a),Pv=t(xp," function will:"),xp.forEach(a),Av=c(m),rs=o(m,"OL",{});var da=l(rs);dn=o(da,"LI",{});var tE=l(dn);Hv=t(tE,"update the variable in "),un=o(tE,"CODE",{class:!0});var m_=l(un);jv=t(m_,"$$.ctx"),m_.forEach(a),tE.forEach(a),Mv=c(da),yn=o(da,"LI",{});var nE=l(yn);Rv=t(nE,"mark the variable in "),fn=o(nE,"CODE",{class:!0});var x_=l(fn);Gv=t(x_,"$$.dirty"),x_.forEach(a),nE.forEach(a),Vv=c(da),Rr=o(da,"LI",{});var g_=l(Rr);qv=t(g_,"schedule an update"),g_.forEach(a),Uv=c(da),Gr=o(da,"LI",{});var E_=l(Gr);Bv=t(E_,"return the value of the assignment or update expression"),E_.forEach(a),da.forEach(a),Jv=c(m),mn=o(m,"DIV",{class:!0});var e6=l(mn);e6.forEach(a),Wv=c(m),Vr=o(m,"P",{});var __=l(Vr);Ba=o(__,"A",{href:!0,rel:!0});var b_=l(Ba);zv=t(b_,"Source code"),b_.forEach(a),__.forEach(a),Fv=c(m),Ja=o(m,"P",{});var gp=l(Ja);Yv=t(gp,"One interesting note about the function "),xn=o(gp,"CODE",{class:!0});var w_=l(xn);Zv=t(w_,"$$invalidate"),w_.forEach(a),Kv=t(gp," is that, it wraps around the assignment or update expression and returns what the expression evaluates to."),gp.forEach(a),Qv=c(m),Wa=o(m,"P",{});var Ep=l(Wa);Xv=t(Ep,"This makes "),gn=o(Ep,"CODE",{class:!0});var $_=l(gn);sd=t($_,"$$invalidate"),$_.forEach(a),ad=t(Ep," chainable:"),Ep.forEach(a),ed=c(m),En=o(m,"DIV",{class:!0});var t6=l(En);t6.forEach(a),td=c(m),qr=o(m,"P",{});var O_=l(qr);nd=t(O_,"It seemed complex when there's a lot of assignment or update expressions in 1 statement! \u{1F648}"),O_.forEach(a),od=c(m),As=o(m,"P",{});var pr=l(As);ld=t(pr,"The 2nd argument of "),_n=o(pr,"CODE",{class:!0});var D_=l(_n);rd=t(D_,"$$invalidate"),D_.forEach(a),id=t(pr," is the assignment or update expressions verbatim. But if it contains any assignment or update sub-expressions, we recursively wrap it with "),bn=o(pr,"CODE",{class:!0});var S_=l(bn);cd=t(S_,"$$invalidate"),S_.forEach(a),pd=t(pr,"."),pr.forEach(a),kd=c(m),za=o(m,"P",{});var _p=l(za);hd=t(_p,"In case where the assignment expression changes a property of an object, we pass the object in as a 3rd argument of the "),wn=o(_p,"CODE",{class:!0});var T_=l(wn);vd=t(T_,"$$invalidate"),T_.forEach(a),dd=t(_p," function, eg:"),_p.forEach(a),ud=c(m),$n=o(m,"DIV",{class:!0});var n6=l($n);n6.forEach(a),yd=c(m),is=o(m,"P",{});var ua=l(is);fd=t(ua,"So that, we update the "),On=o(ua,"CODE",{class:!0});var N_=l(On);md=t(N_,'"obj"'),N_.forEach(a),xd=t(ua," variable to "),Dn=o(ua,"CODE",{class:!0});var C_=l(Dn);gd=t(C_,"obj"),C_.forEach(a),Ed=t(ua," instead of the value of the 2nd argument, "),Sn=o(ua,"CODE",{class:!0});var I_=l(Sn);_d=t(I_,'"hello"'),I_.forEach(a),bd=t(ua,"."),ua.forEach(a),m.forEach(a),Wc=c(p),_=o(p,"SECTION",{});var O=l(_);Ur=o(O,"H3",{});var L_=l(Ur);Fa=o(L_,"A",{href:!0,id:!0});var P_=l(Fa);wd=t(P_,"schedule_update"),P_.forEach(a),L_.forEach(a),$d=c(O),Tn=o(O,"P",{});var oE=l(Tn);Nn=o(oE,"CODE",{class:!0});var A_=l(Nn);Od=t(A_,"schedule_update"),A_.forEach(a),Dd=t(oE," schedules Svelte to update the DOM with the changes made thus far."),oE.forEach(a),Sd=c(O),cs=o(O,"P",{});var ya=l(cs);Td=t(ya,"Svelte, at the point of writing ("),Ya=o(ya,"A",{href:!0,rel:!0});var H_=l(Ya);Nd=t(H_,"v3.20.1"),H_.forEach(a),Cd=t(ya,"), uses "),Za=o(ya,"A",{href:!0,rel:!0});var j_=l(Za);Id=t(j_,"microtask queue"),j_.forEach(a),Ld=t(ya," to batch change updates. The actual DOM update happens in the next microtask, so that any synchronous "),Cn=o(ya,"CODE",{class:!0});var M_=l(Cn);Pd=t(M_,"$$invalidate"),M_.forEach(a),Ad=t(ya," operations that happen within the same task get batched into the next DOM update."),ya.forEach(a),Hd=c(O),Br=o(O,"P",{});var R_=l(Br);jd=t(R_,"To schedule a next microtask, Svelte uses the Promise callback."),R_.forEach(a),Md=c(O),In=o(O,"DIV",{class:!0});var o6=l(In);o6.forEach(a),Rd=c(O),Ka=o(O,"P",{});var bp=l(Ka);Gd=t(bp,"In "),Ln=o(bp,"CODE",{class:!0});var G_=l(Ln);Vd=t(G_,"flush"),G_.forEach(a),qd=t(bp,", we call update for each component marked dirty:"),bp.forEach(a),Ud=c(O),Pn=o(O,"DIV",{class:!0});var l6=l(Pn);l6.forEach(a),Bd=c(O),Jr=o(O,"P",{});var V_=l(Jr);Qa=o(V_,"A",{href:!0,rel:!0});var q_=l(Qa);Jd=t(q_,"Source code"),q_.forEach(a),V_.forEach(a),Wd=c(O),Wr=o(O,"P",{});var U_=l(Wr);zd=t(U_,"So, if you write a Svelte component like this:"),U_.forEach(a),Fd=c(O),An=o(O,"DIV",{class:!0});var r6=l(An);r6.forEach(a),Yd=c(O),zr=o(O,"P",{});var B_=l(zr);Xa=o(B_,"A",{href:!0,rel:!0});var J_=l(Xa);Zd=t(J_,"Svelte REPL"),J_.forEach(a),B_.forEach(a),Kd=c(O),Hs=o(O,"P",{});var kr=l(Hs);Qd=t(kr,"The DOM update for the "),Hn=o(kr,"CODE",{class:!0});var W_=l(Hn);Xd=t(W_,"givenName"),W_.forEach(a),su=t(kr," and "),jn=o(kr,"CODE",{class:!0});var z_=l(jn);au=t(z_,"familyName"),z_.forEach(a),eu=t(kr," happens in the same microtask:"),kr.forEach(a),tu=c(O),y=o(O,"OL",{});var x=l(y);js=o(x,"LI",{});var hr=l(js);nu=t(hr,"Click on the "),Fr=o(hr,"STRONG",{});var F_=l(Fr);ou=t(F_,'"Update"'),F_.forEach(a),lu=t(hr," to call the "),Mn=o(hr,"CODE",{class:!0});var Y_=l(Mn);ru=t(Y_,"update"),Y_.forEach(a),iu=t(hr," function"),hr.forEach(a),cu=c(x),Yr=o(x,"LI",{});var Z_=l(Yr);Rn=o(Z_,"CODE",{class:!0});var K_=l(Rn);pu=t(K_,"$$invalidate('givenName', givenName = 'Li Hau')"),K_.forEach(a),Z_.forEach(a),ku=c(x),Zs=o(x,"LI",{});var $c=l(Zs);hu=t($c,"Mark the variable "),Gn=o($c,"CODE",{class:!0});var Q_=l(Gn);vu=t(Q_,"givenName"),Q_.forEach(a),du=t($c," dirty, "),Vn=o($c,"CODE",{class:!0});var X_=l(Vn);uu=t(X_,"$$.dirty['givenName'] = true"),X_.forEach(a),$c.forEach(a),yu=c(x),qn=o(x,"LI",{});var lE=l(qn);fu=t(lE,"Schedule an update, "),Un=o(lE,"CODE",{class:!0});var sb=l(Un);mu=t(sb,"schedule_update()"),sb.forEach(a),lE.forEach(a),xu=c(x),se=o(x,"LI",{});var wp=l(se);gu=t(wp,"Since it's the first update in the call stack, push the "),Bn=o(wp,"CODE",{class:!0});var ab=l(Bn);Eu=t(ab,"flush"),ab.forEach(a),_u=t(wp," function into the microtask queue"),wp.forEach(a),bu=c(x),Zr=o(x,"LI",{});var eb=l(Zr);Jn=o(eb,"CODE",{class:!0});var tb=l(Jn);wu=t(tb,"$$invalidate('familyName', familyName = 'Tan')"),tb.forEach(a),eb.forEach(a),$u=c(x),Ks=o(x,"LI",{});var Oc=l(Ks);Ou=t(Oc,"Mark the variable "),Wn=o(Oc,"CODE",{class:!0});var nb=l(Wn);Du=t(nb,"familyName"),nb.forEach(a),Su=t(Oc," dirty, "),zn=o(Oc,"CODE",{class:!0});var ob=l(zn);Tu=t(ob,"$$.dirty['familyName'] = true"),ob.forEach(a),Oc.forEach(a),Nu=c(x),Fn=o(x,"LI",{});var rE=l(Fn);Cu=t(rE,"Schedule an update, "),Yn=o(rE,"CODE",{class:!0});var lb=l(Yn);Iu=t(lb,"schedule_update()"),lb.forEach(a),rE.forEach(a),Lu=c(x),ae=o(x,"LI",{});var $p=l(ae);Pu=t($p,"Since "),Zn=o($p,"CODE",{class:!0});var rb=l(Zn);Au=t(rb,"update_scheduled = true"),rb.forEach(a),Hu=t($p,", do nothing."),$p.forEach(a),ju=c(x),Kr=o(x,"LI",{});var ib=l(Kr);Qr=o(ib,"STRONG",{});var cb=l(Qr);Mu=t(cb,"-- End of task --"),cb.forEach(a),ib.forEach(a),Ru=c(x),Xr=o(x,"LI",{});var pb=l(Xr);si=o(pb,"STRONG",{});var kb=l(si);Gu=t(kb,"-- Start of microtask--"),kb.forEach(a),pb.forEach(a),Vu=c(x),Qs=o(x,"LI",{});var Dc=l(Qs);Kn=o(Dc,"CODE",{class:!0});var hb=l(Kn);qu=t(hb,"flush()"),hb.forEach(a),Uu=t(Dc," calls "),Qn=o(Dc,"CODE",{class:!0});var vb=l(Qn);Bu=t(vb,"update()"),vb.forEach(a),Ju=t(Dc," for each component marked dirty"),Dc.forEach(a),Wu=c(x),Xs=o(x,"LI",{});var Sc=l(Xs);zu=t(Sc,"Calls "),Xn=o(Sc,"CODE",{class:!0});var db=l(Xn);Fu=t(db,"$$.fragment.p($$.dirty, $$.ctx)"),db.forEach(a),Yu=t(Sc,"."),ee=o(Sc,"UL",{});var Op=l(ee);te=o(Op,"LI",{});var Dp=l(te);so=o(Dp,"CODE",{class:!0});var ub=l(so);Zu=t(ub,"$$.dirty"),ub.forEach(a),Ku=t(Dp," is now "),ao=o(Dp,"CODE",{class:!0});var yb=l(ao);Qu=t(yb,"{ givenName: true, familyName: true }"),yb.forEach(a),Dp.forEach(a),Xu=c(Op),ne=o(Op,"LI",{});var Sp=l(ne);eo=o(Sp,"CODE",{class:!0});var fb=l(eo);sy=t(fb,"$$.ctx"),fb.forEach(a),ay=t(Sp," is now "),to=o(Sp,"CODE",{class:!0});var mb=l(to);ey=t(mb,"{ givenName: 'Li Hau', familyName: 'Tan' }"),mb.forEach(a),Sp.forEach(a),Op.forEach(a),Sc.forEach(a),ty=c(x),sa=o(x,"LI",{});var Tc=l(sa);ny=t(Tc,"In "),no=o(Tc,"CODE",{class:!0});var xb=l(no);oy=t(xb,"function p(dirty, ctx)"),xb.forEach(a),ly=t(Tc,","),oe=o(Tc,"UL",{});var Tp=l(oe);aa=o(Tp,"LI",{});var Nc=l(aa);ry=t(Nc,"Update the 1st text node to "),oo=o(Nc,"CODE",{class:!0});var gb=l(oo);iy=t(gb,"$$.ctx['givenName']"),gb.forEach(a),cy=t(Nc," if "),lo=o(Nc,"CODE",{class:!0});var Eb=l(lo);py=t(Eb,"$$.dirty['givenName'] === true"),Eb.forEach(a),Nc.forEach(a),ky=c(Tp),ea=o(Tp,"LI",{});var Cc=l(ea);hy=t(Cc,"Update the 2nd text node to "),ro=o(Cc,"CODE",{class:!0});var _b=l(ro);vy=t(_b,"$$.ctx['familyName']"),_b.forEach(a),dy=t(Cc," if "),io=o(Cc,"CODE",{class:!0});var bb=l(io);uy=t(bb,"$$.dirty['familyName'] === true"),bb.forEach(a),Cc.forEach(a),Tp.forEach(a),Tc.forEach(a),yy=c(x),ta=o(x,"LI",{});var Ic=l(ta);fy=t(Ic,"Resets the "),co=o(Ic,"CODE",{class:!0});var wb=l(co);my=t(wb,"$$.dirty"),wb.forEach(a),xy=t(Ic," to "),po=o(Ic,"CODE",{class:!0});var $b=l(po);gy=t($b,"null"),$b.forEach(a),Ic.forEach(a),Ey=c(x),ai=o(x,"LI",{});var Ob=l(ai);_y=t(Ob,"..."),Ob.forEach(a),by=c(x),ei=o(x,"LI",{});var Db=l(ei);ti=o(Db,"STRONG",{});var Sb=l(ti);wy=t(Sb,"-- End of microtask--"),Sb.forEach(a),Db.forEach(a),x.forEach(a),O.forEach(a),zc=c(p),na=o(p,"SECTION",{});var Np=l(na);ni=o(Np,"H4",{});var Tb=l(ni);le=o(Tb,"A",{href:!0,id:!0});var Nb=l(le);$y=t(Nb,"tl/dr:"),Nb.forEach(a),Tb.forEach(a),Oy=c(Np),ps=o(Np,"UL",{});var fa=l(ps);ks=o(fa,"LI",{});var ma=l(ks);Dy=t(ma,"For each assignment or update, Svelte calls "),ko=o(ma,"CODE",{class:!0});var Cb=l(ko);Sy=t(Cb,"$$invalidate"),Cb.forEach(a),Ty=t(ma," to update the variable in "),ho=o(ma,"CODE",{class:!0});var Ib=l(ho);Ny=t(Ib,"$$.ctx"),Ib.forEach(a),Cy=t(ma," and mark the variable dirty in "),vo=o(ma,"CODE",{class:!0});var Lb=l(vo);Iy=t(Lb,"$$.dirty"),Lb.forEach(a),Ly=t(ma,"."),ma.forEach(a),Py=c(fa),oi=o(fa,"LI",{});var Pb=l(oi);Ay=t(Pb,"The acutal DOM update is batched into the next microtask queue."),Pb.forEach(a),Hy=c(fa),re=o(fa,"LI",{});var Cp=l(re);jy=t(Cp,"To update the DOM for each component, the component "),uo=o(Cp,"CODE",{class:!0});var Ab=l(uo);My=t(Ab,"$$.fragment.p($$.diry, $$.ctx)"),Ab.forEach(a),Ry=t(Cp," is called."),Cp.forEach(a),Gy=c(fa),Ms=o(fa,"LI",{});var vr=l(Ms);Vy=t(vr,"After the DOM update, the "),yo=o(vr,"CODE",{class:!0});var Hb=l(yo);qy=t(Hb,"$$.dirty"),Hb.forEach(a),Uy=t(vr," is reset to "),fo=o(vr,"CODE",{class:!0});var jb=l(fo);By=t(jb,"null"),jb.forEach(a),Jy=t(vr,"."),vr.forEach(a),fa.forEach(a),Np.forEach(a),Fc=c(p),N=o(p,"SECTION",{});var P=l(N);li=o(P,"H2",{});var Mb=l(li);ie=o(Mb,"A",{href:!0,id:!0});var Rb=l(ie);Wy=t(Rb,"v3.16.0"),Rb.forEach(a),Mb.forEach(a),zy=c(P),Rs=o(P,"P",{});var dr=l(Rs);Fy=t(dr,"One big change in v3.16.0 is the PR "),ce=o(dr,"A",{href:!0,rel:!0});var Gb=l(ce);Yy=t(Gb,"#3945"),Gb.forEach(a),Zy=t(dr,", namely "),ri=o(dr,"STRONG",{});var Vb=l(ri);Ky=t(Vb,"bitmask-based change tracking"),Vb.forEach(a),Qy=t(dr,"."),dr.forEach(a),Xy=c(P),ii=o(P,"P",{});var qb=l(ii);sf=t(qb,"Instead of marking the variable dirty using an object:"),qb.forEach(a),af=c(P),mo=o(P,"DIV",{class:!0});var i6=l(mo);i6.forEach(a),ef=c(P),ci=o(P,"P",{});var Ub=l(ci);tf=t(Ub,"Svelte assign each variable an index:"),Ub.forEach(a),nf=c(P),xo=o(P,"DIV",{class:!0});var c6=l(xo);c6.forEach(a),of=c(P),pe=o(P,"P",{});var Ip=l(pe);lf=t(Ip,"and uses "),ke=o(Ip,"A",{href:!0,rel:!0});var Bb=l(ke);rf=t(Bb,"bitmask"),Bb.forEach(a),cf=t(Ip," to store the dirty information:"),Ip.forEach(a),pf=c(P),go=o(P,"DIV",{class:!0});var p6=l(go);p6.forEach(a),kf=c(P),pi=o(P,"P",{});var Jb=l(pi);hf=t(Jb,"which is far more compact than the previous compiled code."),Jb.forEach(a),P.forEach(a),Yc=c(p),b=o(p,"SECTION",{});var D=l(b);ki=o(D,"H3",{});var Wb=l(ki);he=o(Wb,"A",{href:!0,id:!0});var zb=l(he);vf=t(zb,"Bitmask"),zb.forEach(a),Wb.forEach(a),df=c(D),hi=o(D,"P",{});var Fb=l(hi);uf=t(Fb,"For those who don't understand, allow me to quickly explain what it is."),Fb.forEach(a),yf=c(D),Gs=o(D,"P",{});var ur=l(Gs);ff=t(ur,"Of course, if you want to learn more about it, feel free to read a more detailed explanation, like "),ve=o(ur,"A",{href:!0,rel:!0});var Yb=l(ve);mf=t(Yb,"this"),Yb.forEach(a),xf=t(ur," and "),de=o(ur,"A",{href:!0,rel:!0});var Zb=l(de);gf=t(Zb,"this"),Zb.forEach(a),Ef=t(ur,"."),ur.forEach(a),_f=c(D),A=o(D,"P",{});var J=l(A);bf=t(J,"The most compact way of representing a group of "),Eo=o(J,"CODE",{class:!0});var Kb=l(Eo);wf=t(Kb,"true"),Kb.forEach(a),$f=t(J," or "),_o=o(J,"CODE",{class:!0});var Qb=l(_o);Of=t(Qb,"false"),Qb.forEach(a),Df=t(J," is to use bits. If the bit is "),bo=o(J,"CODE",{class:!0});var Xb=l(bo);Sf=t(Xb,"1"),Xb.forEach(a),Tf=t(J," it is "),wo=o(J,"CODE",{class:!0});var sw=l(wo);Nf=t(sw,"true"),sw.forEach(a),Cf=t(J," and if it is "),$o=o(J,"CODE",{class:!0});var aw=l($o);If=t(aw,"0"),aw.forEach(a),Lf=t(J," it is "),Oo=o(J,"CODE",{class:!0});var ew=l(Oo);Pf=t(ew,"false"),ew.forEach(a),Af=t(J,"."),J.forEach(a),Hf=c(D),Vs=o(D,"P",{});var yr=l(Vs);jf=t(yr,"A number can be represented in binary, "),vi=o(yr,"STRONG",{});var tw=l(vi);Mf=t(tw,"5"),tw.forEach(a),Rf=t(yr," is "),Do=o(yr,"CODE",{class:!0});var nw=l(Do);Gf=t(nw,"0b0101"),nw.forEach(a),Vf=t(yr," in binary."),yr.forEach(a),qf=c(D),R=o(D,"P",{});var X=l(R);Uf=t(X,"If "),di=o(X,"STRONG",{});var ow=l(di);Bf=t(ow,"5"),ow.forEach(a),Jf=t(X," is represented in a 4-bit binary, then it can store 4 boolean values, with the 0th and 2nd bit as "),So=o(X,"CODE",{class:!0});var lw=l(So);Wf=t(lw,"true"),lw.forEach(a),zf=t(X," and 1st and 3rd bit as "),To=o(X,"CODE",{class:!0});var rw=l(To);Ff=t(rw,"false"),rw.forEach(a),Yf=t(X,", (reading from the right to left, from "),ue=o(X,"A",{href:!0,rel:!0});var iw=l(ue);Zf=t(iw,"least significant bit"),iw.forEach(a),Kf=t(X," to the "),ye=o(X,"A",{href:!0,rel:!0});var cw=l(ye);Qf=t(cw,"most significant bit"),cw.forEach(a),Xf=t(X,")."),X.forEach(a),sm=c(D),ui=o(D,"P",{});var pw=l(ui);yi=o(pw,"STRONG",{});var kw=l(yi);am=t(kw,"How many boolean values can a number store?"),kw.forEach(a),pw.forEach(a),em=c(D),fi=o(D,"P",{});var hw=l(fi);tm=t(hw,"That depends on the language, a 16-bit integer in Java can store 16 boolean values."),hw.forEach(a),nm=c(D),qs=o(D,"P",{});var fr=l(qs);om=t(fr,"In JavaScript, numbers can are "),fe=o(fr,"A",{href:!0,rel:!0});var vw=l(fe);lm=t(vw,"represented in 64 bits"),vw.forEach(a),rm=t(fr,". However, when using "),me=o(fr,"A",{href:!0,rel:!0});var dw=l(me);im=t(dw,"bitwise operations"),dw.forEach(a),cm=t(fr," on the number, JavaScript will treat the number as 32 bits."),fr.forEach(a),pm=c(D),xe=o(D,"P",{});var Lp=l(xe);km=t(Lp,"To inspect or modify the boolean value stored in a number, we use "),ge=o(Lp,"A",{href:!0,rel:!0});var uw=l(ge);hm=t(uw,"bitwise operations"),uw.forEach(a),vm=t(Lp,"."),Lp.forEach(a),dm=c(D),No=o(D,"DIV",{class:!0});var k6=l(No);k6.forEach(a),um=c(D),Ee=o(D,"P",{});var Pp=l(Ee);ym=t(Pp,"The 2nd operand we use in the bitwise operation, is like a "),_e=o(Pp,"A",{href:!0,rel:!0});var yw=l(_e);fm=t(yw,"mask"),yw.forEach(a),mm=t(Pp," that allow us to target a specific bit in the 1st number, that stores our boolean values."),Pp.forEach(a),xm=c(D),be=o(D,"P",{});var Ap=l(be);gm=t(Ap,"We call the mask, "),mi=o(Ap,"STRONG",{});var fw=l(mi);Em=t(fw,"bitmask"),fw.forEach(a),_m=t(Ap,"."),Ap.forEach(a),D.forEach(a),Zc=c(p),f=o(p,"SECTION",{});var E=l(f);xi=o(E,"H3",{});var mw=l(xi);we=o(mw,"A",{href:!0,id:!0});var xw=l(we);bm=t(xw,"Bitmask in Svelte"),xw.forEach(a),mw.forEach(a),wm=c(E),gi=o(E,"P",{});var gw=l(gi);$m=t(gw,"As mentioned earlier, we assign each variable an index:"),gw.forEach(a),Om=c(E),Co=o(E,"DIV",{class:!0});var h6=l(Co);h6.forEach(a),Dm=c(E),Ei=o(E,"P",{});var Ew=l(Ei);Sm=t(Ew,"So instead of returning the instance variable as an JavaScript Object, we now return it as an JavaScript Array:"),Ew.forEach(a),Tm=c(E),Io=o(E,"DIV",{class:!0});var v6=l(Io);v6.forEach(a),Nm=c(E),hs=o(E,"P",{});var xa=l(hs);Cm=t(xa,"The variable is accessed via "),_i=o(xa,"STRONG",{});var _w=l(_i);Im=t(_w,"index"),_w.forEach(a),Lm=t(xa,", "),Lo=o(xa,"CODE",{class:!0});var bw=l(Lo);Pm=t(bw,"$$.ctx[index]"),bw.forEach(a),Am=t(xa,", instead of "),bi=o(xa,"STRONG",{});var ww=l(bi);Hm=t(ww,"variable name"),ww.forEach(a),jm=t(xa,":"),xa.forEach(a),Mm=c(E),Po=o(E,"DIV",{class:!0});var d6=l(Po);d6.forEach(a),Rm=c(E),vs=o(E,"P",{});var ga=l(vs);Gm=t(ga,"The "),Ao=o(ga,"CODE",{class:!0});var $w=l(Ao);Vm=t($w,"$$invalidate"),$w.forEach(a),qm=t(ga," function works the same, except it takes in "),wi=o(ga,"STRONG",{});var Ow=l(wi);Um=t(Ow,"index"),Ow.forEach(a),Bm=t(ga," instead of "),$i=o(ga,"STRONG",{});var Dw=l($i);Jm=t(Dw,"variable name"),Dw.forEach(a),Wm=t(ga,":"),ga.forEach(a),zm=c(E),Ho=o(E,"DIV",{class:!0});var u6=l(Ho);u6.forEach(a),Fm=c(E),jo=o(E,"P",{});var iE=l(jo);Mo=o(iE,"CODE",{class:!0});var Sw=l(Mo);Ym=t(Sw,"$$.dirty"),Sw.forEach(a),Zm=t(iE," now stores a list of numbers. Each number carries 31 boolean values, each boolean value indicates whether the variable of that index is dirty or not."),iE.forEach(a),Km=c(E),Oi=o(E,"P",{});var Tw=l(Oi);Qm=t(Tw,"To set a variable as dirty, we use bitwise operation:"),Tw.forEach(a),Xm=c(E),Ro=o(E,"DIV",{class:!0});var y6=l(Ro);y6.forEach(a),s1=c(E),Di=o(E,"P",{});var Nw=l(Di);a1=t(Nw,"And to verify whether a variable is dirty, we use bitwise operation too!"),Nw.forEach(a),e1=c(E),Go=o(E,"DIV",{class:!0});var f6=l(Go);f6.forEach(a),t1=c(E),ds=o(E,"P",{});var Ea=l(ds);n1=t(Ea,"With using bitmask, "),Vo=o(Ea,"CODE",{class:!0});var Cw=l(Vo);o1=t(Cw,"$$.dirty"),Cw.forEach(a),l1=t(Ea," is now reset to "),qo=o(Ea,"CODE",{class:!0});var Iw=l(qo);r1=t(Iw,"[-1]"),Iw.forEach(a),i1=t(Ea," instead of "),Uo=o(Ea,"CODE",{class:!0});var Lw=l(Uo);c1=t(Lw,"null"),Lw.forEach(a),p1=t(Ea,"."),Ea.forEach(a),k1=c(E),Z=o(E,"P",{});var zs=l(Z);Si=o(zs,"STRONG",{});var Pw=l(Si);h1=t(Pw,"Trivia:"),Pw.forEach(a),v1=c(zs),Bo=o(zs,"CODE",{class:!0});var Aw=l(Bo);d1=t(Aw,"-1"),Aw.forEach(a),u1=t(zs," is "),Jo=o(zs,"CODE",{class:!0});var Hw=l(Jo);y1=t(Hw,"0b1111_1111"),Hw.forEach(a),f1=t(zs," in binary, where all the bits are "),Wo=o(zs,"CODE",{class:!0});var jw=l(Wo);m1=t(jw,"1"),jw.forEach(a),x1=t(zs,"."),zs.forEach(a),E.forEach(a),Kc=c(p),Es=o(p,"SECTION",{});var mr=l(Es);Ti=o(mr,"H4",{});var Mw=l(Ti);oa=o(Mw,"A",{href:!0,id:!0});var cE=l(oa);g1=t(cE,"Destructuring "),Ni=o(cE,"STRONG",{});var Rw=l(Ni);E1=t(Rw,"$$.dirty"),Rw.forEach(a),cE.forEach(a),Mw.forEach(a),_1=c(mr),us=o(mr,"P",{});var _a=l(us);b1=t(_a,"One code-size optimisation that Svelte does is to always destructure the "),zo=o(_a,"CODE",{class:!0});var Gw=l(zo);w1=t(Gw,"dirty"),Gw.forEach(a),$1=t(_a," array in the "),Ci=o(_a,"STRONG",{});var Vw=l(Ci);O1=t(Vw,"u_p_date function"),Vw.forEach(a),D1=t(_a," if there's less than 32 variables, since we will always access "),Fo=o(_a,"CODE",{class:!0});var qw=l(Fo);S1=t(qw,"dirty[0]"),qw.forEach(a),T1=t(_a," anyway:"),_a.forEach(a),N1=c(mr),Yo=o(mr,"DIV",{class:!0});var m6=l(Yo);m6.forEach(a),mr.forEach(a),Qc=c(p),la=o(p,"SECTION",{});var Hp=l(la);Ii=o(Hp,"H4",{});var Uw=l(Ii);$e=o(Uw,"A",{href:!0,id:!0});var Bw=l($e);C1=t(Bw,"tl/dr:"),Bw.forEach(a),Uw.forEach(a),I1=c(Hp),Oe=o(Hp,"UL",{});var jp=l(Oe);Us=o(jp,"LI",{});var xr=l(Us);L1=t(xr,"The underlying mechanism for "),Zo=o(xr,"CODE",{class:!0});var Jw=l(Zo);P1=t(Jw,"$$invalidate"),Jw.forEach(a),A1=t(xr," and "),Ko=o(xr,"CODE",{class:!0});var Ww=l(Ko);H1=t(Ww,"schedule_update"),Ww.forEach(a),j1=t(xr," does not change"),xr.forEach(a),M1=c(jp),Li=o(jp,"LI",{});var zw=l(Li);R1=t(zw,"Using bitmask, the compiled code is much compact"),zw.forEach(a),jp.forEach(a),Hp.forEach(a),Xc=c(p),v=o(p,"SECTION",{});var d=l(v);Pi=o(d,"H2",{});var Fw=l(Pi);De=o(Fw,"A",{href:!0,id:!0});var Yw=l(De);G1=t(Yw,"Reactive Declaration"),Yw.forEach(a),Fw.forEach(a),V1=c(d),ra=o(d,"P",{});var Lc=l(ra);q1=t(Lc,"Svelte allow us to declare reactive values via the "),Se=o(Lc,"A",{href:!0,rel:!0});var Zw=l(Se);U1=t(Zw,"labeled statement"),Zw.forEach(a),B1=t(Lc,", "),Qo=o(Lc,"CODE",{class:!0});var Kw=l(Qo);J1=t(Kw,"$:"),Kw.forEach(a),Lc.forEach(a),W1=c(d),Xo=o(d,"DIV",{class:!0});var x6=l(Xo);x6.forEach(a),z1=c(d),Ai=o(d,"P",{});var Qw=l(Ai);Te=o(Qw,"A",{href:!0,rel:!0});var Xw=l(Te);F1=t(Xw,"Svelte REPL"),Xw.forEach(a),Qw.forEach(a),Y1=c(d),Ne=o(d,"P",{});var Mp=l(Ne);Z1=t(Mp,"If you look at the compiled output, you would find out that the declarative statements appeared in the "),Ce=o(Mp,"A",{href:!0});var pE=l(Ce);sl=o(pE,"CODE",{class:!0});var s$=l(sl);K1=t(s$,"instance"),s$.forEach(a),Q1=t(pE," function"),pE.forEach(a),X1=t(Mp,":"),Mp.forEach(a),sx=c(d),al=o(d,"DIV",{class:!0});var g6=l(al);g6.forEach(a),ax=c(d),Hi=o(d,"P",{});var a$=l(Hi);ex=t(a$,"Try reorder the reactive declarations and observe the change in the compiled output:"),a$.forEach(a),tx=c(d),el=o(d,"DIV",{class:!0});var E6=l(el);E6.forEach(a),nx=c(d),ji=o(d,"P",{});var e$=l(ji);Ie=o(e$,"A",{href:!0,rel:!0});var t$=l(Ie);ox=t(t$,"Svelte REPL"),t$.forEach(a),e$.forEach(a),lx=c(d),tl=o(d,"DIV",{class:!0});var _6=l(tl);_6.forEach(a),rx=c(d),Mi=o(d,"P",{});var n$=l(Mi);ix=t(n$,"Some observations:"),n$.forEach(a),cx=c(d),Bs=o(d,"UL",{});var gr=l(Bs);ia=o(gr,"LI",{});var Pc=l(ia);px=t(Pc,"When there are reactive declarations, Svelte defines a custom "),nl=o(Pc,"CODE",{class:!0});var o$=l(nl);kx=t(o$,"$$.update"),o$.forEach(a),hx=t(Pc," method."),Ri=o(Pc,"UL",{});var l$=l(Ri);_s=o(l$,"LI",{});var _t=l(_s);ol=o(_t,"CODE",{class:!0});var r$=l(ol);vx=t(r$,"$$.update"),r$.forEach(a),dx=t(_t," is a "),Le=o(_t,"A",{href:!0,rel:!0});var i$=l(Le);ux=t(i$,"no-op function"),i$.forEach(a),yx=t(_t," by default. (See "),Pe=o(_t,"A",{href:!0,rel:!0});var c$=l(Pe);fx=t(c$,"src/runtime/internal/Component.ts"),c$.forEach(a),mx=t(_t,")"),_t.forEach(a),l$.forEach(a),Pc.forEach(a),xx=c(gr),Ae=o(gr,"LI",{});var Rp=l(Ae);gx=t(Rp,"Svelte uses "),ll=o(Rp,"CODE",{class:!0});var p$=l(ll);Ex=t(p$,"$$invalidate"),p$.forEach(a),_x=t(Rp," to update the value of a reactive variable too."),Rp.forEach(a),bx=c(gr),rl=o(gr,"LI",{});var kE=l(rl);wx=t(kE,"Svelte sorts the reactive declarations and statements, based on the dependency relationship between the declarations and statements"),Gi=o(kE,"UL",{});var k$=l(Gi);U=o(k$,"LI",{});var ms=l(U);il=o(ms,"CODE",{class:!0});var h$=l(il);$x=t(h$,"quadrupled"),h$.forEach(a),Ox=t(ms," depends on "),cl=o(ms,"CODE",{class:!0});var v$=l(cl);Dx=t(v$,"doubled"),v$.forEach(a),Sx=t(ms,", so "),pl=o(ms,"CODE",{class:!0});var d$=l(pl);Tx=t(d$,"quadrupled"),d$.forEach(a),Nx=t(ms," is evaluated and "),kl=o(ms,"CODE",{class:!0});var u$=l(kl);Cx=t(u$,"$$invalidate"),u$.forEach(a),Ix=t(ms,"d after "),hl=o(ms,"CODE",{class:!0});var y$=l(hl);Lx=t(y$,"doubled"),y$.forEach(a),Px=t(ms,"."),ms.forEach(a),k$.forEach(a),kE.forEach(a),gr.forEach(a),Ax=c(d),He=o(d,"P",{});var Gp=l(He);Hx=t(Gp,"Since all reactive declarations and statements are grouped into the "),vl=o(Gp,"CODE",{class:!0});var f$=l(vl);jx=t(f$,"$$.update"),f$.forEach(a),Mx=t(Gp," method, and also the fact that Svelte will sort the declarations and statements according to their dependency relationship, it is irrelevant of the location or the order you declared them."),Gp.forEach(a),Rx=c(d),Vi=o(d,"P",{});var m$=l(Vi);Gx=t(m$,"The following component still works:"),m$.forEach(a),Vx=c(d),dl=o(d,"DIV",{class:!0});var b6=l(dl);b6.forEach(a),qx=c(d),qi=o(d,"P",{});var x$=l(qi);je=o(x$,"A",{href:!0,rel:!0});var g$=l(je);Ux=t(g$,"Svelte REPL"),g$.forEach(a),x$.forEach(a),Bx=c(d),Ui=o(d,"P",{});var E$=l(Ui);Me=o(E$,"STRONG",{});var Vp=l(Me);Jx=t(Vp,"The next thing you may ask, when is "),ul=o(Vp,"CODE",{class:!0});var _$=l(ul);Wx=t(_$,"$$.update"),_$.forEach(a),zx=t(Vp," being called?"),Vp.forEach(a),E$.forEach(a),Fx=c(d),Js=o(d,"P",{});var Er=l(Js);Yx=t(Er,"Remember the "),yl=o(Er,"CODE",{class:!0});var b$=l(yl);Zx=t(b$,"update"),b$.forEach(a),Kx=t(Er," function that gets called in the "),fl=o(Er,"CODE",{class:!0});var w$=l(fl);Qx=t(w$,"flush"),w$.forEach(a),Xx=t(Er," function?"),Er.forEach(a),s2=c(d),Re=o(d,"P",{});var qp=l(Re);a2=t(qp,"I put a "),ml=o(qp,"CODE",{class:!0});var $$=l(ml);e2=t($$,"NOTE:"),$$.forEach(a),t2=t(qp," comment saying that it will be important later. Well, it is important now."),qp.forEach(a),n2=c(d),xl=o(d,"DIV",{class:!0});var w6=l(xl);w6.forEach(a),o2=c(d),ys=o(d,"P",{});var ba=l(ys);l2=t(ba,"The "),gl=o(ba,"CODE",{class:!0});var O$=l(gl);r2=t(O$,"$$.update"),O$.forEach(a),i2=t(ba," function gets called "),Bi=o(ba,"STRONG",{});var D$=l(Bi);c2=t(D$,"in the same microtask"),D$.forEach(a),p2=t(ba," with the DOM update, right before we called the "),El=o(ba,"CODE",{class:!0});var S$=l(El);k2=t(S$,"$$.fragment.p()"),S$.forEach(a),h2=t(ba," to update the DOM."),ba.forEach(a),v2=c(d),Ji=o(d,"P",{});var T$=l(Ji);d2=t(T$,"The implication of the above fact is"),T$.forEach(a),d.forEach(a),sp=c(p),I=o(p,"SECTION",{});var j=l(I);Wi=o(j,"H3",{});var N$=l(Wi);Ge=o(N$,"A",{href:!0,id:!0});var C$=l(Ge);u2=t(C$,"1. Execution of all reactive declarations and statements are batched"),C$.forEach(a),N$.forEach(a),y2=c(j),zi=o(j,"P",{});var I$=l(zi);f2=t(I$,"Just as how DOM updates are batched, reactive declarations and statements are batched too!"),I$.forEach(a),m2=c(j),_l=o(j,"DIV",{class:!0});var $6=l(_l);$6.forEach(a),x2=c(j),Fi=o(j,"P",{});var L$=l(Fi);Ve=o(L$,"A",{href:!0,rel:!0});var P$=l(Ve);g2=t(P$,"Svelte REPL"),P$.forEach(a),L$.forEach(a),E2=c(j),qe=o(j,"P",{});var Up=l(qe);_2=t(Up,"When "),bl=o(Up,"CODE",{class:!0});var A$=l(bl);b2=t(A$,"update()"),A$.forEach(a),w2=t(Up," get called,"),Up.forEach(a),$2=c(j),G=o(j,"OL",{});var ss=l(G);z=o(ss,"LI",{});var ws=l(z);O2=t(ws,"Similar to the "),wl=o(ws,"A",{href:!0});var H$=l(wl);D2=t(H$,"flow described above"),H$.forEach(a),S2=t(ws,", "),$l=o(ws,"CODE",{class:!0});var j$=l($l);T2=t(j$,"$$invalidate"),j$.forEach(a),N2=t(ws," both "),Yi=o(ws,"STRONG",{});var M$=l(Yi);C2=t(M$,'"givenName"'),M$.forEach(a),I2=t(ws," and "),Zi=o(ws,"STRONG",{});var R$=l(Zi);L2=t(R$,'"familyName"'),R$.forEach(a),P2=t(ws,", and schedules an update"),ws.forEach(a),A2=c(ss),Ki=o(ss,"LI",{});var G$=l(Ki);Qi=o(G$,"STRONG",{});var V$=l(Qi);H2=t(V$,"-- End of task --"),V$.forEach(a),G$.forEach(a),j2=c(ss),Xi=o(ss,"LI",{});var q$=l(Xi);sc=o(q$,"STRONG",{});var U$=l(sc);M2=t(U$,"-- Start of microtask--"),U$.forEach(a),q$.forEach(a),R2=c(ss),ca=o(ss,"LI",{});var Ac=l(ca);Ol=o(Ac,"CODE",{class:!0});var B$=l(Ol);G2=t(B$,"flush()"),B$.forEach(a),V2=t(Ac," calls "),Dl=o(Ac,"CODE",{class:!0});var J$=l(Dl);q2=t(J$,"update()"),J$.forEach(a),U2=t(Ac," for each component marked dirty"),Ac.forEach(a),B2=c(ss),Ue=o(ss,"LI",{});var Bp=l(Ue);J2=t(Bp,"Runs "),Sl=o(Bp,"CODE",{class:!0});var W$=l(Sl);W2=t(W$,"$$.update()"),W$.forEach(a),Be=o(Bp,"UL",{});var Jp=l(Be);K=o(Jp,"LI",{});var Fs=l(K);z2=t(Fs,"As "),ac=o(Fs,"STRONG",{});var z$=l(ac);F2=t(z$,'"givenName"'),z$.forEach(a),Y2=t(Fs," and "),ec=o(Fs,"STRONG",{});var F$=l(ec);Z2=t(F$,'"familyName"'),F$.forEach(a),K2=t(Fs," has changed, evaluates and "),Tl=o(Fs,"CODE",{class:!0});var Y$=l(Tl);Q2=t(Y$,"$$invalidate"),Y$.forEach(a),X2=c(Fs),tc=o(Fs,"STRONG",{});var Z$=l(tc);s3=t(Z$,'"name"'),Z$.forEach(a),Fs.forEach(a),a3=c(Jp),pa=o(Jp,"LI",{});var Hc=l(pa);e3=t(Hc,"As "),nc=o(Hc,"STRONG",{});var K$=l(nc);t3=t(K$,'"name"'),K$.forEach(a),n3=t(Hc," has changed, executes "),Nl=o(Hc,"CODE",{class:!0});var Q$=l(Nl);o3=t(Q$,"console.log('name', name);"),Q$.forEach(a),Hc.forEach(a),Jp.forEach(a),Bp.forEach(a),l3=c(ss),Je=o(ss,"LI",{});var Wp=l(Je);r3=t(Wp,"Calls "),Cl=o(Wp,"CODE",{class:!0});var X$=l(Cl);i3=t(X$,"$$.fragment.p(...)"),X$.forEach(a),c3=t(Wp," to update the DOM."),Wp.forEach(a),ss.forEach(a),p3=c(j),V=o(j,"P",{});var as=l(V);k3=t(as,"As you can see, even though we've updated "),Il=o(as,"CODE",{class:!0});var s5=l(Il);h3=t(s5,"givenName"),s5.forEach(a),v3=t(as," and "),Ll=o(as,"CODE",{class:!0});var a5=l(Ll);d3=t(a5,"familyName"),a5.forEach(a),u3=t(as,", we only evaluate "),Pl=o(as,"CODE",{class:!0});var e5=l(Pl);y3=t(e5,"name"),e5.forEach(a),f3=t(as," and executes "),Al=o(as,"CODE",{class:!0});var t5=l(Al);m3=t(t5,"console.log('name', name)"),t5.forEach(a),x3=c(as),oc=o(as,"STRONG",{});var n5=l(oc);g3=t(n5,"once"),n5.forEach(a),E3=t(as," instead of twice:"),as.forEach(a),_3=c(j),Hl=o(j,"DIV",{class:!0});var O6=l(Hl);O6.forEach(a),j.forEach(a),ap=c(p),H=o(p,"SECTION",{});var es=l(H);lc=o(es,"H3",{});var o5=l(lc);We=o(o5,"A",{href:!0,id:!0});var l5=l(We);b3=t(l5,"2. The value of reactive variable outside of reactive declarations and statements may not be up to date"),l5.forEach(a),o5.forEach(a),w3=c(es),rc=o(es,"P",{});var r5=l(rc);$3=t(r5,"Because the reactive declarations and statements are batched and executed in the next microtask, you can't expect the value to be updated synchronously."),r5.forEach(a),O3=c(es),jl=o(es,"DIV",{class:!0});var D6=l(jl);D6.forEach(a),D3=c(es),ic=o(es,"P",{});var i5=l(ic);ze=o(i5,"A",{href:!0,rel:!0});var c5=l(ze);S3=t(c5,"Svelte REPL"),c5.forEach(a),i5.forEach(a),T3=c(es),Fe=o(es,"P",{});var zp=l(Fe);N3=t(zp,"Instead, you "),cc=o(zp,"STRONG",{});var p5=l(cc);C3=t(p5,"have to"),p5.forEach(a),I3=t(zp," refer the reactive variable in another reactive declaration or statement:"),zp.forEach(a),L3=c(es),Ml=o(es,"DIV",{class:!0});var S6=l(Ml);S6.forEach(a),es.forEach(a),ep=c(p),Q=o(p,"SECTION",{});var wa=l(Q);pc=o(wa,"H3",{});var k5=l(pc);Ye=o(k5,"A",{href:!0,id:!0});var h5=l(Ye);P3=t(h5,"Sorting of reactive declarations and statements"),h5.forEach(a),k5.forEach(a),A3=c(wa),kc=o(wa,"P",{});var v5=l(kc);H3=t(v5,"Svelte tries to preserve the order of reactive declarations and statements as they are declared as much as possible."),v5.forEach(a),j3=c(wa),Ze=o(wa,"P",{});var Fp=l(Ze);M3=t(Fp,"However, if one reactive declaration or statement refers to a variable that was defined by another reactive declaration, then, "),hc=o(Fp,"STRONG",{});var d5=l(hc);R3=t(d5,"it will be inserted after the latter reactive declaration"),d5.forEach(a),G3=t(Fp,":"),Fp.forEach(a),V3=c(wa),Rl=o(wa,"DIV",{class:!0});var T6=l(Rl);T6.forEach(a),wa.forEach(a),tp=c(p),L=o(p,"SECTION",{});var M=l(L);vc=o(M,"H3",{});var u5=l(vc);Ke=o(u5,"A",{href:!0,id:!0});var y5=l(Ke);q3=t(y5,"Reactive variable that is not reactive"),y5.forEach(a),u5.forEach(a),U3=c(M),Qe=o(M,"P",{});var Yp=l(Qe);B3=t(Yp,"The Svelte compiler tracks all the variables declared in the "),Gl=o(Yp,"CODE",{class:!0});var f5=l(Gl);J3=t(f5,"<script>"),f5.forEach(a),W3=t(Yp," tag."),Yp.forEach(a),z3=c(M),Xe=o(M,"P",{});var Zp=l(Xe);F3=t(Zp,"If all the variables of a reactive declaration or statement refers to, never gets mutated or reassigned, then the reactive declaration or statement will not be added into "),Vl=o(Zp,"CODE",{class:!0});var m5=l(Vl);Y3=t(m5,"$$.update"),m5.forEach(a),Z3=t(Zp,"."),Zp.forEach(a),K3=c(M),dc=o(M,"P",{});var x5=l(dc);Q3=t(x5,"For example:"),x5.forEach(a),X3=c(M),ql=o(M,"DIV",{class:!0});var N6=l(ql);N6.forEach(a),sg=c(M),uc=o(M,"P",{});var g5=l(uc);st=o(g5,"A",{href:!0,rel:!0});var E5=l(st);ag=t(E5,"Svelte REPL"),E5.forEach(a),g5.forEach(a),eg=c(M),Ws=o(M,"P",{});var _r=l(Ws);tg=t(_r,"Since, "),Ul=o(_r,"CODE",{class:!0});var _5=l(Ul);ng=t(_5,"count"),_5.forEach(a),og=t(_r," never gets mutated or reassigned, Svelte optimises the compiled output by not defining "),Bl=o(_r,"CODE",{class:!0});var b5=l(Bl);lg=t(b5,"$$self.$$.update"),b5.forEach(a),rg=t(_r,"."),_r.forEach(a),ig=c(M),Jl=o(M,"DIV",{class:!0});var C6=l(Jl);C6.forEach(a),M.forEach(a),np=c(p),Wl=o(p,"SECTION",{});var w5=l(Wl);yc=o(w5,"H2",{});var $5=l(yc);at=o($5,"A",{href:!0,id:!0});var O5=l(at);cg=t(O5,"Summary"),O5.forEach(a),$5.forEach(a),w5.forEach(a),op=c(p),zl=o(p,"SECTION",{});var D5=l(zl);fc=o(D5,"H3",{});var S5=l(fc);et=o(S5,"A",{href:!0,id:!0});var T5=l(et);pg=t(T5,"1. Svelte keeps track of which variables are dirty and batched the DOM updates."),T5.forEach(a),S5.forEach(a),D5.forEach(a),lp=c(p),Fl=o(p,"SECTION",{});var N5=l(Fl);mc=o(N5,"H3",{});var C5=l(mc);tt=o(C5,"A",{href:!0,id:!0});var I5=l(tt);kg=t(I5,"2. Using bitmask, Svelte able to generate a more compact compiled code."),I5.forEach(a),C5.forEach(a),N5.forEach(a),rp=c(p),Yl=o(p,"SECTION",{});var L5=l(Yl);xc=o(L5,"H3",{});var P5=l(xc);nt=o(P5,"A",{href:!0,id:!0});var A5=l(nt);hg=t(A5,"3. Reactive declarations and statements are executed in batch, just like DOM updates"),A5.forEach(a),P5.forEach(a),L5.forEach(a),ip=c(p),B=o(p,"SECTION",{});var $s=l(B);gc=o($s,"H2",{});var H5=l(gc);ot=o(H5,"A",{href:!0,id:!0});var j5=l(ot);vg=t(j5,"Closing Note"),j5.forEach(a),H5.forEach(a),dg=c($s),lt=o($s,"P",{});var Kp=l(lt);ug=t(Kp,"If you wish to know more, "),rt=o(Kp,"A",{href:!0,rel:!0});var M5=l(rt);yg=t(M5,"follow me on Twitter"),M5.forEach(a),fg=t(Kp,"."),Kp.forEach(a),mg=c($s),fs=o($s,"P",{});var $a=l(fs);xg=t($a,"I'll post it on Twitter when the next part is ready, where I'll be covering "),it=o($a,"A",{href:!0,rel:!0});var R5=l(it);gg=t(R5,"logic blocks"),R5.forEach(a),Eg=t($a,", "),ct=o($a,"A",{href:!0,rel:!0});var G5=l(ct);_g=t(G5,"slots"),G5.forEach(a),bg=t($a,", "),pt=o($a,"A",{href:!0,rel:!0});var V5=l(pt);wg=t(V5,"context"),V5.forEach(a),$g=t($a,", and many others."),$a.forEach(a),Og=c($s),Ec=o($s,"P",{});var q5=l(Ec);kt=o(q5,"STRONG",{});var Qp=l(kt);Dg=t(Qp,"\u2B05 \u2B05  Previously in "),Zl=o(Qp,"A",{href:!0});var U5=l(Zl);Sg=t(U5,"Part 1"),U5.forEach(a),Tg=t(Qp,"."),Qp.forEach(a),q5.forEach(a),Ng=c($s),_c=o($s,"P",{});var B5=l(_c);ht=o(B5,"STRONG",{});var Xp=l(ht);Cg=t(Xp,"\u27A1 \u27A1  Continue reading on "),Kl=o(Xp,"A",{href:!0});var J5=l(Kl);Ig=t(J5,"Part 3"),J5.forEach(a),Lg=t(Xp,"."),Xp.forEach(a),B5.forEach(a),$s.forEach(a),cp=c(p),ka=o(p,"SECTION",{});var sk=l(ka);bc=o(sk,"H2",{});var W5=l(bc);vt=o(W5,"A",{href:!0,id:!0});var z5=l(vt);Pg=t(z5,"Further Resources"),z5.forEach(a),W5.forEach(a),Ag=c(sk),F=o(sk,"UL",{});var Os=l(F);dt=o(Os,"LI",{});var ak=l(dt);Hg=t(ak,"Rich Harris shares about "),ut=o(ak,"A",{href:!0,rel:!0});var F5=l(ut);jg=t(F5,"Bitmask Tracking at Svelte Society NYC"),F5.forEach(a),Mg=t(ak,"."),ak.forEach(a),Rg=c(Os),ha=o(Os,"LI",{});var jc=l(ha);Gg=t(jc,"Svelte Tutorial - "),yt=o(jc,"A",{href:!0,rel:!0});var Y5=l(yt);Vg=t(Y5,"Reactivity"),Y5.forEach(a),qg=c(jc),ft=o(jc,"A",{href:!0,rel:!0});var Z5=l(ft);Ug=t(Z5,"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/"),Z5.forEach(a),jc.forEach(a),Bg=c(Os),Ql=o(Os,"LI",{});var hE=l(Ql);mt=o(hE,"A",{href:!0,rel:!0});var K5=l(mt);Jg=t(K5,"The Art of Bitmasking"),K5.forEach(a),Wg=t(hE," by Shakib Ahmed"),hE.forEach(a),zg=c(Os),Xl=o(Os,"LI",{});var vE=l(Xl);xt=o(vE,"A",{href:!0,rel:!0});var Q5=l(xt);Fg=t(Q5,"Bitmasks: A very esoteric (and impractical) way of managing booleans"),Q5.forEach(a),Yg=t(vE," by Basti Ortiz"),vE.forEach(a),Zg=c(Os),wc=o(Os,"LI",{});var X5=l(wc);gt=o(X5,"A",{href:!0,rel:!0});var s4=l(gt);Kg=t(s4,"MDN: Bitwise Operators"),s4.forEach(a),X5.forEach(a),Os.forEach(a),sk.forEach(a),this.h()},h(){r(q,"href","/compile-svelte-in-your-head-part-1/"),r($t,"href","/compile-svelte-in-your-head-part-1/"),r(Ot,"class","inline"),r(Dt,"class","inline"),r(Oa,"class","code-section"),r(St,"class","inline"),r(Tt,"class","inline"),r(Da,"href","https://github.com/sveltejs/svelte/blob/v3.20.1/CHANGELOG.md#3201"),r(Da,"rel","nofollow"),r(Sa,"href","#pre-v"),r(Sa,"id","pre-v"),r(Nt,"class","inline"),r(Ta,"href","https://github.com/sveltejs/svelte/blob/master/CHANGELOG.md#3160"),r(Ta,"rel","nofollow"),r(Na,"href","https://github.com/sveltejs/svelte/pull/3945"),r(Na,"rel","nofollow"),r(Ct,"class","inline"),r(It,"href","/compile-svelte-in-your-head-part-1"),r(Ia,"href","#ctx"),r(Ia,"id","ctx"),r(Lt,"href","/compile-svelte-in-your-head-part-1#instance-variable"),r(Pt,"class","inline"),r(At,"class","inline"),r(Ht,"class","inline"),r(jt,"class","inline"),r(Mt,"class","inline"),r(Rt,"class","code-section"),r(Ha,"href","https://svelte.dev/repl/5b12ff52c2874f4dbb6405d9133b34da?version=3.20.1"),r(Ha,"rel","nofollow"),r(Gt,"class","code-section"),r(Vt,"class","inline"),r(qt,"class","inline"),r(ja,"href","#dirty"),r(ja,"id","dirty"),r(Bt,"class","inline"),r(Jt,"class","code-section"),r(Ma,"href","https://svelte.dev/repl/da579d0113b44f01b2b94893dce21487?version=3.20.1"),r(Ma,"rel","nofollow"),r(Wt,"class","inline"),r(zt,"class","inline"),r(Ra,"href","https://github.com/sveltejs/svelte/blob/v3.15.0/src/runtime/internal/Component.ts#L124"),r(Ra,"rel","nofollow"),r(Ft,"class","inline"),r(Yt,"class","code-section"),r(Zt,"class","inline"),r(Kt,"class","code-section"),r(Xt,"class","inline"),r(sn,"class","inline"),r(an,"class","code-section"),r(en,"class","inline"),r(tn,"class","inline"),r(Ga,"href","#invalidate"),r(Ga,"id","invalidate"),r(on,"class","inline"),r(rn,"class","inline"),r(pn,"class","inline"),r(kn,"class","inline"),r(hn,"class","code-section"),r(vn,"class","inline"),r(un,"class","inline"),r(fn,"class","inline"),r(mn,"class","code-section"),r(Ba,"href","https://github.com/sveltejs/svelte/blob/v3.15.0/src/runtime/internal/Component.ts#L130-L136"),r(Ba,"rel","nofollow"),r(xn,"class","inline"),r(gn,"class","inline"),r(En,"class","code-section"),r(_n,"class","inline"),r(bn,"class","inline"),r(wn,"class","inline"),r($n,"class","code-section"),r(On,"class","inline"),r(Dn,"class","inline"),r(Sn,"class","inline"),r(Fa,"href","#schedule-update"),r(Fa,"id","schedule-update"),r(Nn,"class","inline"),r(Ya,"href","https://github.com/sveltejs/svelte/blob/v3.20.1/CHANGELOG.md#3201"),r(Ya,"rel","nofollow"),r(Za,"href","https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/"),r(Za,"rel","nofollow"),r(Cn,"class","inline"),r(In,"class","code-section"),r(Ln,"class","inline"),r(Pn,"class","code-section"),r(Qa,"href","https://github.com/sveltejs/svelte/blob/v3.15.0/src/runtime/internal/scheduler.ts#L14"),r(Qa,"rel","nofollow"),r(An,"class","code-section"),r(Xa,"href","https://svelte.dev/repl/761a0a6cc2834afb842942e1d23875b1?version=3.20.1"),r(Xa,"rel","nofollow"),r(Hn,"class","inline"),r(jn,"class","inline"),r(Mn,"class","inline"),r(Rn,"class","inline"),r(Gn,"class","inline"),r(Vn,"class","inline"),r(Un,"class","inline"),r(Bn,"class","inline"),r(Jn,"class","inline"),r(Wn,"class","inline"),r(zn,"class","inline"),r(Yn,"class","inline"),r(Zn,"class","inline"),r(Kn,"class","inline"),r(Qn,"class","inline"),r(Xn,"class","inline"),r(so,"class","inline"),r(ao,"class","inline"),r(eo,"class","inline"),r(to,"class","inline"),r(no,"class","inline"),r(oo,"class","inline"),r(lo,"class","inline"),r(ro,"class","inline"),r(io,"class","inline"),r(co,"class","inline"),r(po,"class","inline"),r(le,"href","#tl-dr"),r(le,"id","tl-dr"),r(ko,"class","inline"),r(ho,"class","inline"),r(vo,"class","inline"),r(uo,"class","inline"),r(yo,"class","inline"),r(fo,"class","inline"),r(ie,"href","#v"),r(ie,"id","v"),r(ce,"href","https://github.com/sveltejs/svelte/pull/3945"),r(ce,"rel","nofollow"),r(mo,"class","code-section"),r(xo,"class","code-section"),r(ke,"href","https://en.wikipedia.org/wiki/Mask_(computing)"),r(ke,"rel","nofollow"),r(go,"class","code-section"),r(he,"href","#bitmask"),r(he,"id","bitmask"),r(ve,"href","https://blog.bitsrc.io/the-art-of-bitmasking-ec58ab1b4c03"),r(ve,"rel","nofollow"),r(de,"href","https://dev.to/somedood/bitmasks-a-very-esoteric-and-impractical-way-of-managing-booleans-1hlf"),r(de,"rel","nofollow"),r(Eo,"class","inline"),r(_o,"class","inline"),r(bo,"class","inline"),r(wo,"class","inline"),r($o,"class","inline"),r(Oo,"class","inline"),r(Do,"class","inline"),r(So,"class","inline"),r(To,"class","inline"),r(ue,"href","https://en.wikipedia.org/wiki/Bit_numbering#Least_significant_bit"),r(ue,"rel","nofollow"),r(ye,"href","https://en.wikipedia.org/wiki/Bit_numbering#Most_significant_bit"),r(ye,"rel","nofollow"),r(fe,"href","https://2ality.com/2012/04/number-encoding.html"),r(fe,"rel","nofollow"),r(me,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators"),r(me,"rel","nofollow"),r(ge,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators"),r(ge,"rel","nofollow"),r(No,"class","code-section"),r(_e,"href","https://en.wikipedia.org/wiki/Mask_(computing)"),r(_e,"rel","nofollow"),r(we,"href","#bitmask-in-svelte"),r(we,"id","bitmask-in-svelte"),r(Co,"class","code-section"),r(Io,"class","code-section"),r(Lo,"class","inline"),r(Po,"class","code-section"),r(Ao,"class","inline"),r(Ho,"class","code-section"),r(Mo,"class","inline"),r(Ro,"class","code-section"),r(Go,"class","code-section"),r(Vo,"class","inline"),r(qo,"class","inline"),r(Uo,"class","inline"),r(Bo,"class","inline"),r(Jo,"class","inline"),r(Wo,"class","inline"),r(oa,"href","#destructuring-dirty"),r(oa,"id","destructuring-dirty"),r(zo,"class","inline"),r(Fo,"class","inline"),r(Yo,"class","code-section"),r($e,"href","#tl-dr"),r($e,"id","tl-dr"),r(Zo,"class","inline"),r(Ko,"class","inline"),r(De,"href","#reactive-declaration"),r(De,"id","reactive-declaration"),r(Se,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label"),r(Se,"rel","nofollow"),r(Qo,"class","inline"),r(Xo,"class","code-section"),r(Te,"href","https://svelte.dev/repl/e37329dd126448b2aa0679c08993f9a8?version=3.20.1"),r(Te,"rel","nofollow"),r(sl,"class","inline"),r(Ce,"href","/compile-svelte-in-your-head-part-1/#instanceself-props-invalidate"),r(al,"class","code-section"),r(el,"class","code-section"),r(Ie,"href","https://svelte.dev/repl/fc6995856489402d90291c4c30952939?version=3.20.1"),r(Ie,"rel","nofollow"),r(tl,"class","code-section"),r(nl,"class","inline"),r(ol,"class","inline"),r(Le,"href","https://en.wikipedia.org/wiki/NOP_(code)"),r(Le,"rel","nofollow"),r(Pe,"href","https://github.com/sveltejs/svelte/blob/v3.20.1/src/runtime/internal/Component.ts#L111"),r(Pe,"rel","nofollow"),r(ll,"class","inline"),r(il,"class","inline"),r(cl,"class","inline"),r(pl,"class","inline"),r(kl,"class","inline"),r(hl,"class","inline"),r(vl,"class","inline"),r(dl,"class","code-section"),r(je,"href","https://svelte.dev/repl/fc6995856489402d90291c4c30952939?version=3.20.1"),r(je,"rel","nofollow"),r(ul,"class","inline"),r(yl,"class","inline"),r(fl,"class","inline"),r(ml,"class","inline"),r(xl,"class","code-section"),r(gl,"class","inline"),r(El,"class","inline"),r(Ge,"href","#execution-of-all-reactive-declarations-and-statements-are-batched"),r(Ge,"id","execution-of-all-reactive-declarations-and-statements-are-batched"),r(_l,"class","code-section"),r(Ve,"href","https://svelte.dev/repl/941195f1cd5248e9bd14613f9513ad1d?version=3.20.1"),r(Ve,"rel","nofollow"),r(bl,"class","inline"),r(wl,"href","#schedule_update"),r($l,"class","inline"),r(Ol,"class","inline"),r(Dl,"class","inline"),r(Sl,"class","inline"),r(Tl,"class","inline"),r(Nl,"class","inline"),r(Cl,"class","inline"),r(Il,"class","inline"),r(Ll,"class","inline"),r(Pl,"class","inline"),r(Al,"class","inline"),r(Hl,"class","code-section"),r(We,"href","#the-value-of-reactive-variable-outside-of-reactive-declarations-and-statements-may-not-be-up-to-date"),r(We,"id","the-value-of-reactive-variable-outside-of-reactive-declarations-and-statements-may-not-be-up-to-date"),r(jl,"class","code-section"),r(ze,"href","https://svelte.dev/repl/437548d5c7044cb59bfd0c8a0f4c725d?version=3.20.1"),r(ze,"rel","nofollow"),r(Ml,"class","code-section"),r(Ye,"href","#sorting-of-reactive-declarations-and-statements"),r(Ye,"id","sorting-of-reactive-declarations-and-statements"),r(Rl,"class","code-section"),r(Ke,"href","#reactive-variable-that-is-not-reactive"),r(Ke,"id","reactive-variable-that-is-not-reactive"),r(Gl,"class","inline"),r(Vl,"class","inline"),r(ql,"class","code-section"),r(st,"href","https://svelte.dev/repl/af86472e1f494cfea2efa494f63fff08?version=3.20.1"),r(st,"rel","nofollow"),r(Ul,"class","inline"),r(Bl,"class","inline"),r(Jl,"class","code-section"),r(at,"href","#summary"),r(at,"id","summary"),r(et,"href","#svelte-keeps-track-of-which-variables-are-dirty-and-batched-the-dom-updates"),r(et,"id","svelte-keeps-track-of-which-variables-are-dirty-and-batched-the-dom-updates"),r(tt,"href","#using-bitmask-svelte-able-to-generate-a-more-compact-compiled-code"),r(tt,"id","using-bitmask-svelte-able-to-generate-a-more-compact-compiled-code"),r(nt,"href","#reactive-declarations-and-statements-are-executed-in-batch-just-like-dom-updates"),r(nt,"id","reactive-declarations-and-statements-are-executed-in-batch-just-like-dom-updates"),r(ot,"href","#closing-note"),r(ot,"id","closing-note"),r(rt,"href","https://twitter.com/lihautan"),r(rt,"rel","nofollow"),r(it,"href","https://svelte.dev/tutorial/if-blocks"),r(it,"rel","nofollow"),r(ct,"href","https://svelte.dev/tutorial/slots"),r(ct,"rel","nofollow"),r(pt,"href","https://svelte.dev/tutorial/context-api"),r(pt,"rel","nofollow"),r(Zl,"href","/compile-svelte-in-your-head-part-1/"),r(Kl,"href","/compile-svelte-in-your-head-part-3/"),r(vt,"href","#further-resources"),r(vt,"id","further-resources"),r(ut,"href","https://www.youtube.com/watch?v=zq6PpM5t3z0&t=2530s"),r(ut,"rel","nofollow"),r(yt,"href","https://svelte.dev/tutorial/reactive-assignments"),r(yt,"rel","nofollow"),r(ft,"href","https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/"),r(ft,"rel","nofollow"),r(mt,"href","https://blog.bitsrc.io/the-art-of-bitmasking-ec58ab1b4c03"),r(mt,"rel","nofollow"),r(xt,"href","https://dev.to/somedood/bitmasks-a-very-esoteric-and-impractical-way-of-managing-booleans-1hlf"),r(xt,"rel","nofollow"),r(gt,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators"),r(gt,"rel","nofollow")},m(p,k){l4(S,p,k),h(p,ts,k),h(p,Y,k),s(Y,ns),s(ns,C),s(ns,q),s(q,wt),s(ns,ek),h(p,Mc,k),h(p,os,k),s(os,$t),s($t,tk),s(os,nk),s(os,Ot),s(Ot,ok),s(os,lk),s(os,Dt),s(Dt,rk),s(os,ik),h(p,Rc,k),h(p,Oa,k),Oa.innerHTML=p4,h(p,Gc,k),h(p,xs,k),s(xs,ck),s(xs,St),s(St,pk),s(xs,kk),s(xs,Tt),s(Tt,hk),s(xs,vk),h(p,Vc,k),h(p,Ys,k),s(Ys,dk),s(Ys,Da),s(Da,uk),s(Ys,yk),h(p,qc,k),h(p,gs,k),s(gs,br),s(br,Sa),s(Sa,fk),s(gs,mk),s(gs,W),s(W,xk),s(W,Nt),s(Nt,gk),s(W,Ek),s(W,Ta),s(Ta,_k),s(W,bk),s(W,Na),s(Na,wk),s(W,$k),s(W,Ct),s(Ct,Ok),s(W,Dk),s(gs,Sk),s(gs,Ca),s(Ca,Tk),s(Ca,It),s(It,Nk),s(Ca,Ck),h(p,Uc,k),h(p,w,k),s(w,wr),s(wr,Ia),s(Ia,Ik),s(w,Lk),s(w,La),s(La,Pk),s(La,$r),s($r,Ak),s(La,Hk),s(w,jk),s(w,Pa),s(Pa,Mk),s(Pa,Lt),s(Lt,Rk),s(Pa,Gk),s(w,Vk),s(w,Ds),s(Ds,Aa),s(Aa,qk),s(Aa,Pt),s(Pt,Uk),s(Aa,Bk),s(Ds,Jk),s(Ds,Or),s(Or,Wk),s(Ds,zk),s(Ds,Dr),s(Dr,Fk),s(w,Yk),s(w,Sr),s(Sr,Zk),s(w,Kk),s(w,Tr),s(Tr,Qk),s(w,Xk),s(w,Ss),s(Ss,sh),s(Ss,At),s(At,ah),s(Ss,eh),s(Ss,Ht),s(Ht,th),s(Ss,nh),s(w,oh),s(w,Ts),s(Ts,lh),s(Ts,jt),s(jt,rh),s(Ts,ih),s(Ts,Mt),s(Mt,ch),s(Ts,ph),s(w,kh),s(w,Rt),Rt.innerHTML=k4,s(w,hh),s(w,Nr),s(Nr,Ha),s(Ha,vh),s(w,dh),s(w,Gt),Gt.innerHTML=h4,s(w,uh),s(w,Ns),s(Ns,yh),s(Ns,Vt),s(Vt,fh),s(Ns,mh),s(Ns,qt),s(qt,xh),s(Ns,gh),h(p,Bc,k),h(p,g,k),s(g,Cr),s(Cr,ja),s(ja,Eh),s(g,_h),s(g,Ut),s(Ut,Bt),s(Bt,bh),s(Ut,wh),s(g,$h),s(g,Ir),s(Ir,Oh),s(g,Dh),s(g,Jt),Jt.innerHTML=v4,s(g,Sh),s(g,Lr),s(Lr,Ma),s(Ma,Th),s(g,Nh),s(g,ls),s(ls,Ch),s(ls,Wt),s(Wt,Ih),s(ls,Lh),s(ls,zt),s(zt,Ph),s(ls,Ah),s(ls,Ra),s(Ra,Hh),s(ls,jh),s(g,Mh),s(g,Cs),s(Cs,Rh),s(Cs,Pr),s(Pr,Gh),s(Cs,Vh),s(Cs,Ft),s(Ft,qh),s(Cs,Uh),s(g,Bh),s(g,Yt),Yt.innerHTML=d4,s(g,Jh),s(g,Is),s(Is,Wh),s(Is,Ar),s(Ar,zh),s(Is,Fh),s(Is,Zt),s(Zt,Yh),s(Is,Zh),s(g,Kh),s(g,Kt),Kt.innerHTML=u4,s(g,Qh),s(g,Qt),s(Qt,Xt),s(Xt,Xh),s(Qt,sv),s(g,av),s(g,Ls),s(Ls,ev),s(Ls,Hr),s(Hr,tv),s(Ls,nv),s(Ls,sn),s(sn,ov),s(Ls,lv),s(g,rv),s(g,an),an.innerHTML=y4,s(g,iv),s(g,Ps),s(Ps,cv),s(Ps,en),s(en,pv),s(Ps,kv),s(Ps,tn),s(tn,hv),s(Ps,vv),h(p,Jc,k),h(p,u,k),s(u,jr),s(jr,Ga),s(Ga,dv),s(u,uv),s(u,nn),s(nn,on),s(on,yv),s(nn,fv),s(u,mv),s(u,Mr),s(Mr,xv),s(u,gv),s(u,Va),s(Va,ln),s(ln,Ev),s(ln,rn),s(rn,_v),s(Va,bv),s(Va,cn),s(cn,wv),s(cn,pn),s(pn,$v),s(u,Ov),s(u,qa),s(qa,Dv),s(qa,kn),s(kn,Sv),s(qa,Tv),s(u,Nv),s(u,hn),hn.innerHTML=f4,s(u,Cv),s(u,Ua),s(Ua,Iv),s(Ua,vn),s(vn,Lv),s(Ua,Pv),s(u,Av),s(u,rs),s(rs,dn),s(dn,Hv),s(dn,un),s(un,jv),s(rs,Mv),s(rs,yn),s(yn,Rv),s(yn,fn),s(fn,Gv),s(rs,Vv),s(rs,Rr),s(Rr,qv),s(rs,Uv),s(rs,Gr),s(Gr,Bv),s(u,Jv),s(u,mn),mn.innerHTML=m4,s(u,Wv),s(u,Vr),s(Vr,Ba),s(Ba,zv),s(u,Fv),s(u,Ja),s(Ja,Yv),s(Ja,xn),s(xn,Zv),s(Ja,Kv),s(u,Qv),s(u,Wa),s(Wa,Xv),s(Wa,gn),s(gn,sd),s(Wa,ad),s(u,ed),s(u,En),En.innerHTML=x4,s(u,td),s(u,qr),s(qr,nd),s(u,od),s(u,As),s(As,ld),s(As,_n),s(_n,rd),s(As,id),s(As,bn),s(bn,cd),s(As,pd),s(u,kd),s(u,za),s(za,hd),s(za,wn),s(wn,vd),s(za,dd),s(u,ud),s(u,$n),$n.innerHTML=g4,s(u,yd),s(u,is),s(is,fd),s(is,On),s(On,md),s(is,xd),s(is,Dn),s(Dn,gd),s(is,Ed),s(is,Sn),s(Sn,_d),s(is,bd),h(p,Wc,k),h(p,_,k),s(_,Ur),s(Ur,Fa),s(Fa,wd),s(_,$d),s(_,Tn),s(Tn,Nn),s(Nn,Od),s(Tn,Dd),s(_,Sd),s(_,cs),s(cs,Td),s(cs,Ya),s(Ya,Nd),s(cs,Cd),s(cs,Za),s(Za,Id),s(cs,Ld),s(cs,Cn),s(Cn,Pd),s(cs,Ad),s(_,Hd),s(_,Br),s(Br,jd),s(_,Md),s(_,In),In.innerHTML=E4,s(_,Rd),s(_,Ka),s(Ka,Gd),s(Ka,Ln),s(Ln,Vd),s(Ka,qd),s(_,Ud),s(_,Pn),Pn.innerHTML=_4,s(_,Bd),s(_,Jr),s(Jr,Qa),s(Qa,Jd),s(_,Wd),s(_,Wr),s(Wr,zd),s(_,Fd),s(_,An),An.innerHTML=b4,s(_,Yd),s(_,zr),s(zr,Xa),s(Xa,Zd),s(_,Kd),s(_,Hs),s(Hs,Qd),s(Hs,Hn),s(Hn,Xd),s(Hs,su),s(Hs,jn),s(jn,au),s(Hs,eu),s(_,tu),s(_,y),s(y,js),s(js,nu),s(js,Fr),s(Fr,ou),s(js,lu),s(js,Mn),s(Mn,ru),s(js,iu),s(y,cu),s(y,Yr),s(Yr,Rn),s(Rn,pu),s(y,ku),s(y,Zs),s(Zs,hu),s(Zs,Gn),s(Gn,vu),s(Zs,du),s(Zs,Vn),s(Vn,uu),s(y,yu),s(y,qn),s(qn,fu),s(qn,Un),s(Un,mu),s(y,xu),s(y,se),s(se,gu),s(se,Bn),s(Bn,Eu),s(se,_u),s(y,bu),s(y,Zr),s(Zr,Jn),s(Jn,wu),s(y,$u),s(y,Ks),s(Ks,Ou),s(Ks,Wn),s(Wn,Du),s(Ks,Su),s(Ks,zn),s(zn,Tu),s(y,Nu),s(y,Fn),s(Fn,Cu),s(Fn,Yn),s(Yn,Iu),s(y,Lu),s(y,ae),s(ae,Pu),s(ae,Zn),s(Zn,Au),s(ae,Hu),s(y,ju),s(y,Kr),s(Kr,Qr),s(Qr,Mu),s(y,Ru),s(y,Xr),s(Xr,si),s(si,Gu),s(y,Vu),s(y,Qs),s(Qs,Kn),s(Kn,qu),s(Qs,Uu),s(Qs,Qn),s(Qn,Bu),s(Qs,Ju),s(y,Wu),s(y,Xs),s(Xs,zu),s(Xs,Xn),s(Xn,Fu),s(Xs,Yu),s(Xs,ee),s(ee,te),s(te,so),s(so,Zu),s(te,Ku),s(te,ao),s(ao,Qu),s(ee,Xu),s(ee,ne),s(ne,eo),s(eo,sy),s(ne,ay),s(ne,to),s(to,ey),s(y,ty),s(y,sa),s(sa,ny),s(sa,no),s(no,oy),s(sa,ly),s(sa,oe),s(oe,aa),s(aa,ry),s(aa,oo),s(oo,iy),s(aa,cy),s(aa,lo),s(lo,py),s(oe,ky),s(oe,ea),s(ea,hy),s(ea,ro),s(ro,vy),s(ea,dy),s(ea,io),s(io,uy),s(y,yy),s(y,ta),s(ta,fy),s(ta,co),s(co,my),s(ta,xy),s(ta,po),s(po,gy),s(y,Ey),s(y,ai),s(ai,_y),s(y,by),s(y,ei),s(ei,ti),s(ti,wy),h(p,zc,k),h(p,na,k),s(na,ni),s(ni,le),s(le,$y),s(na,Oy),s(na,ps),s(ps,ks),s(ks,Dy),s(ks,ko),s(ko,Sy),s(ks,Ty),s(ks,ho),s(ho,Ny),s(ks,Cy),s(ks,vo),s(vo,Iy),s(ks,Ly),s(ps,Py),s(ps,oi),s(oi,Ay),s(ps,Hy),s(ps,re),s(re,jy),s(re,uo),s(uo,My),s(re,Ry),s(ps,Gy),s(ps,Ms),s(Ms,Vy),s(Ms,yo),s(yo,qy),s(Ms,Uy),s(Ms,fo),s(fo,By),s(Ms,Jy),h(p,Fc,k),h(p,N,k),s(N,li),s(li,ie),s(ie,Wy),s(N,zy),s(N,Rs),s(Rs,Fy),s(Rs,ce),s(ce,Yy),s(Rs,Zy),s(Rs,ri),s(ri,Ky),s(Rs,Qy),s(N,Xy),s(N,ii),s(ii,sf),s(N,af),s(N,mo),mo.innerHTML=w4,s(N,ef),s(N,ci),s(ci,tf),s(N,nf),s(N,xo),xo.innerHTML=$4,s(N,of),s(N,pe),s(pe,lf),s(pe,ke),s(ke,rf),s(pe,cf),s(N,pf),s(N,go),go.innerHTML=O4,s(N,kf),s(N,pi),s(pi,hf),h(p,Yc,k),h(p,b,k),s(b,ki),s(ki,he),s(he,vf),s(b,df),s(b,hi),s(hi,uf),s(b,yf),s(b,Gs),s(Gs,ff),s(Gs,ve),s(ve,mf),s(Gs,xf),s(Gs,de),s(de,gf),s(Gs,Ef),s(b,_f),s(b,A),s(A,bf),s(A,Eo),s(Eo,wf),s(A,$f),s(A,_o),s(_o,Of),s(A,Df),s(A,bo),s(bo,Sf),s(A,Tf),s(A,wo),s(wo,Nf),s(A,Cf),s(A,$o),s($o,If),s(A,Lf),s(A,Oo),s(Oo,Pf),s(A,Af),s(b,Hf),s(b,Vs),s(Vs,jf),s(Vs,vi),s(vi,Mf),s(Vs,Rf),s(Vs,Do),s(Do,Gf),s(Vs,Vf),s(b,qf),s(b,R),s(R,Uf),s(R,di),s(di,Bf),s(R,Jf),s(R,So),s(So,Wf),s(R,zf),s(R,To),s(To,Ff),s(R,Yf),s(R,ue),s(ue,Zf),s(R,Kf),s(R,ye),s(ye,Qf),s(R,Xf),s(b,sm),s(b,ui),s(ui,yi),s(yi,am),s(b,em),s(b,fi),s(fi,tm),s(b,nm),s(b,qs),s(qs,om),s(qs,fe),s(fe,lm),s(qs,rm),s(qs,me),s(me,im),s(qs,cm),s(b,pm),s(b,xe),s(xe,km),s(xe,ge),s(ge,hm),s(xe,vm),s(b,dm),s(b,No),No.innerHTML=D4,s(b,um),s(b,Ee),s(Ee,ym),s(Ee,_e),s(_e,fm),s(Ee,mm),s(b,xm),s(b,be),s(be,gm),s(be,mi),s(mi,Em),s(be,_m),h(p,Zc,k),h(p,f,k),s(f,xi),s(xi,we),s(we,bm),s(f,wm),s(f,gi),s(gi,$m),s(f,Om),s(f,Co),Co.innerHTML=S4,s(f,Dm),s(f,Ei),s(Ei,Sm),s(f,Tm),s(f,Io),Io.innerHTML=T4,s(f,Nm),s(f,hs),s(hs,Cm),s(hs,_i),s(_i,Im),s(hs,Lm),s(hs,Lo),s(Lo,Pm),s(hs,Am),s(hs,bi),s(bi,Hm),s(hs,jm),s(f,Mm),s(f,Po),Po.innerHTML=N4,s(f,Rm),s(f,vs),s(vs,Gm),s(vs,Ao),s(Ao,Vm),s(vs,qm),s(vs,wi),s(wi,Um),s(vs,Bm),s(vs,$i),s($i,Jm),s(vs,Wm),s(f,zm),s(f,Ho),Ho.innerHTML=C4,s(f,Fm),s(f,jo),s(jo,Mo),s(Mo,Ym),s(jo,Zm),s(f,Km),s(f,Oi),s(Oi,Qm),s(f,Xm),s(f,Ro),Ro.innerHTML=I4,s(f,s1),s(f,Di),s(Di,a1),s(f,e1),s(f,Go),Go.innerHTML=L4,s(f,t1),s(f,ds),s(ds,n1),s(ds,Vo),s(Vo,o1),s(ds,l1),s(ds,qo),s(qo,r1),s(ds,i1),s(ds,Uo),s(Uo,c1),s(ds,p1),s(f,k1),s(f,Z),s(Z,Si),s(Si,h1),s(Z,v1),s(Z,Bo),s(Bo,d1),s(Z,u1),s(Z,Jo),s(Jo,y1),s(Z,f1),s(Z,Wo),s(Wo,m1),s(Z,x1),h(p,Kc,k),h(p,Es,k),s(Es,Ti),s(Ti,oa),s(oa,g1),s(oa,Ni),s(Ni,E1),s(Es,_1),s(Es,us),s(us,b1),s(us,zo),s(zo,w1),s(us,$1),s(us,Ci),s(Ci,O1),s(us,D1),s(us,Fo),s(Fo,S1),s(us,T1),s(Es,N1),s(Es,Yo),Yo.innerHTML=P4,h(p,Qc,k),h(p,la,k),s(la,Ii),s(Ii,$e),s($e,C1),s(la,I1),s(la,Oe),s(Oe,Us),s(Us,L1),s(Us,Zo),s(Zo,P1),s(Us,A1),s(Us,Ko),s(Ko,H1),s(Us,j1),s(Oe,M1),s(Oe,Li),s(Li,R1),h(p,Xc,k),h(p,v,k),s(v,Pi),s(Pi,De),s(De,G1),s(v,V1),s(v,ra),s(ra,q1),s(ra,Se),s(Se,U1),s(ra,B1),s(ra,Qo),s(Qo,J1),s(v,W1),s(v,Xo),Xo.innerHTML=A4,s(v,z1),s(v,Ai),s(Ai,Te),s(Te,F1),s(v,Y1),s(v,Ne),s(Ne,Z1),s(Ne,Ce),s(Ce,sl),s(sl,K1),s(Ce,Q1),s(Ne,X1),s(v,sx),s(v,al),al.innerHTML=H4,s(v,ax),s(v,Hi),s(Hi,ex),s(v,tx),s(v,el),el.innerHTML=j4,s(v,nx),s(v,ji),s(ji,Ie),s(Ie,ox),s(v,lx),s(v,tl),tl.innerHTML=M4,s(v,rx),s(v,Mi),s(Mi,ix),s(v,cx),s(v,Bs),s(Bs,ia),s(ia,px),s(ia,nl),s(nl,kx),s(ia,hx),s(ia,Ri),s(Ri,_s),s(_s,ol),s(ol,vx),s(_s,dx),s(_s,Le),s(Le,ux),s(_s,yx),s(_s,Pe),s(Pe,fx),s(_s,mx),s(Bs,xx),s(Bs,Ae),s(Ae,gx),s(Ae,ll),s(ll,Ex),s(Ae,_x),s(Bs,bx),s(Bs,rl),s(rl,wx),s(rl,Gi),s(Gi,U),s(U,il),s(il,$x),s(U,Ox),s(U,cl),s(cl,Dx),s(U,Sx),s(U,pl),s(pl,Tx),s(U,Nx),s(U,kl),s(kl,Cx),s(U,Ix),s(U,hl),s(hl,Lx),s(U,Px),s(v,Ax),s(v,He),s(He,Hx),s(He,vl),s(vl,jx),s(He,Mx),s(v,Rx),s(v,Vi),s(Vi,Gx),s(v,Vx),s(v,dl),dl.innerHTML=R4,s(v,qx),s(v,qi),s(qi,je),s(je,Ux),s(v,Bx),s(v,Ui),s(Ui,Me),s(Me,Jx),s(Me,ul),s(ul,Wx),s(Me,zx),s(v,Fx),s(v,Js),s(Js,Yx),s(Js,yl),s(yl,Zx),s(Js,Kx),s(Js,fl),s(fl,Qx),s(Js,Xx),s(v,s2),s(v,Re),s(Re,a2),s(Re,ml),s(ml,e2),s(Re,t2),s(v,n2),s(v,xl),xl.innerHTML=G4,s(v,o2),s(v,ys),s(ys,l2),s(ys,gl),s(gl,r2),s(ys,i2),s(ys,Bi),s(Bi,c2),s(ys,p2),s(ys,El),s(El,k2),s(ys,h2),s(v,v2),s(v,Ji),s(Ji,d2),h(p,sp,k),h(p,I,k),s(I,Wi),s(Wi,Ge),s(Ge,u2),s(I,y2),s(I,zi),s(zi,f2),s(I,m2),s(I,_l),_l.innerHTML=V4,s(I,x2),s(I,Fi),s(Fi,Ve),s(Ve,g2),s(I,E2),s(I,qe),s(qe,_2),s(qe,bl),s(bl,b2),s(qe,w2),s(I,$2),s(I,G),s(G,z),s(z,O2),s(z,wl),s(wl,D2),s(z,S2),s(z,$l),s($l,T2),s(z,N2),s(z,Yi),s(Yi,C2),s(z,I2),s(z,Zi),s(Zi,L2),s(z,P2),s(G,A2),s(G,Ki),s(Ki,Qi),s(Qi,H2),s(G,j2),s(G,Xi),s(Xi,sc),s(sc,M2),s(G,R2),s(G,ca),s(ca,Ol),s(Ol,G2),s(ca,V2),s(ca,Dl),s(Dl,q2),s(ca,U2),s(G,B2),s(G,Ue),s(Ue,J2),s(Ue,Sl),s(Sl,W2),s(Ue,Be),s(Be,K),s(K,z2),s(K,ac),s(ac,F2),s(K,Y2),s(K,ec),s(ec,Z2),s(K,K2),s(K,Tl),s(Tl,Q2),s(K,X2),s(K,tc),s(tc,s3),s(Be,a3),s(Be,pa),s(pa,e3),s(pa,nc),s(nc,t3),s(pa,n3),s(pa,Nl),s(Nl,o3),s(G,l3),s(G,Je),s(Je,r3),s(Je,Cl),s(Cl,i3),s(Je,c3),s(I,p3),s(I,V),s(V,k3),s(V,Il),s(Il,h3),s(V,v3),s(V,Ll),s(Ll,d3),s(V,u3),s(V,Pl),s(Pl,y3),s(V,f3),s(V,Al),s(Al,m3),s(V,x3),s(V,oc),s(oc,g3),s(V,E3),s(I,_3),s(I,Hl),Hl.innerHTML=q4,h(p,ap,k),h(p,H,k),s(H,lc),s(lc,We),s(We,b3),s(H,w3),s(H,rc),s(rc,$3),s(H,O3),s(H,jl),jl.innerHTML=U4,s(H,D3),s(H,ic),s(ic,ze),s(ze,S3),s(H,T3),s(H,Fe),s(Fe,N3),s(Fe,cc),s(cc,C3),s(Fe,I3),s(H,L3),s(H,Ml),Ml.innerHTML=B4,h(p,ep,k),h(p,Q,k),s(Q,pc),s(pc,Ye),s(Ye,P3),s(Q,A3),s(Q,kc),s(kc,H3),s(Q,j3),s(Q,Ze),s(Ze,M3),s(Ze,hc),s(hc,R3),s(Ze,G3),s(Q,V3),s(Q,Rl),Rl.innerHTML=J4,h(p,tp,k),h(p,L,k),s(L,vc),s(vc,Ke),s(Ke,q3),s(L,U3),s(L,Qe),s(Qe,B3),s(Qe,Gl),s(Gl,J3),s(Qe,W3),s(L,z3),s(L,Xe),s(Xe,F3),s(Xe,Vl),s(Vl,Y3),s(Xe,Z3),s(L,K3),s(L,dc),s(dc,Q3),s(L,X3),s(L,ql),ql.innerHTML=W4,s(L,sg),s(L,uc),s(uc,st),s(st,ag),s(L,eg),s(L,Ws),s(Ws,tg),s(Ws,Ul),s(Ul,ng),s(Ws,og),s(Ws,Bl),s(Bl,lg),s(Ws,rg),s(L,ig),s(L,Jl),Jl.innerHTML=z4,h(p,np,k),h(p,Wl,k),s(Wl,yc),s(yc,at),s(at,cg),h(p,op,k),h(p,zl,k),s(zl,fc),s(fc,et),s(et,pg),h(p,lp,k),h(p,Fl,k),s(Fl,mc),s(mc,tt),s(tt,kg),h(p,rp,k),h(p,Yl,k),s(Yl,xc),s(xc,nt),s(nt,hg),h(p,ip,k),h(p,B,k),s(B,gc),s(gc,ot),s(ot,vg),s(B,dg),s(B,lt),s(lt,ug),s(lt,rt),s(rt,yg),s(lt,fg),s(B,mg),s(B,fs),s(fs,xg),s(fs,it),s(it,gg),s(fs,Eg),s(fs,ct),s(ct,_g),s(fs,bg),s(fs,pt),s(pt,wg),s(fs,$g),s(B,Og),s(B,Ec),s(Ec,kt),s(kt,Dg),s(kt,Zl),s(Zl,Sg),s(kt,Tg),s(B,Ng),s(B,_c),s(_c,ht),s(ht,Cg),s(ht,Kl),s(Kl,Ig),s(ht,Lg),h(p,cp,k),h(p,ka,k),s(ka,bc),s(bc,vt),s(vt,Pg),s(ka,Ag),s(ka,F),s(F,dt),s(dt,Hg),s(dt,ut),s(ut,jg),s(dt,Mg),s(F,Rg),s(F,ha),s(ha,Gg),s(ha,yt),s(yt,Vg),s(ha,qg),s(ha,ft),s(ft,Ug),s(F,Bg),s(F,Ql),s(Ql,mt),s(mt,Jg),s(Ql,Wg),s(F,zg),s(F,Xl),s(Xl,xt),s(xt,Fg),s(Xl,Yg),s(F,Zg),s(F,wc),s(wc,gt),s(gt,Kg),pp=!0},p:j6,i(p){pp||(r4(S.$$.fragment,p),pp=!0)},o(p){i4(S.$$.fragment,p),pp=!1},d(p){c4(S,p),p&&a(ts),p&&a(Y),p&&a(Mc),p&&a(os),p&&a(Rc),p&&a(Oa),p&&a(Gc),p&&a(xs),p&&a(Vc),p&&a(Ys),p&&a(qc),p&&a(gs),p&&a(Uc),p&&a(w),p&&a(Bc),p&&a(g),p&&a(Jc),p&&a(u),p&&a(Wc),p&&a(_),p&&a(zc),p&&a(na),p&&a(Fc),p&&a(N),p&&a(Yc),p&&a(b),p&&a(Zc),p&&a(f),p&&a(Kc),p&&a(Es),p&&a(Qc),p&&a(la),p&&a(Xc),p&&a(v),p&&a(sp),p&&a(I),p&&a(ap),p&&a(H),p&&a(ep),p&&a(Q),p&&a(tp),p&&a(L),p&&a(np),p&&a(Wl),p&&a(op),p&&a(zl),p&&a(lp),p&&a(Fl),p&&a(rp),p&&a(Yl),p&&a(ip),p&&a(B),p&&a(cp),p&&a(ka)}}}function q6(bt){let S,ts;const Y=[bt[0],t4];let ns={$$slots:{default:[V6]},$$scope:{ctx:bt}};for(let C=0;C<Y.length;C+=1)ns=dE(ns,Y[C]);return S=new M6({props:ns}),{c(){n4(S.$$.fragment)},l(C){o4(S.$$.fragment,C)},m(C,q){l4(S,C,q),ts=!0},p(C,[q]){const wt=q&1?A6(Y,[q&1&&a4(C[0]),q&0&&a4(t4)]):{};q&2&&(wt.$$scope={dirty:q,ctx:C}),S.$set(wt)},i(C){ts||(r4(S.$$.fragment,C),ts=!0)},o(C){i4(S.$$.fragment,C),ts=!1},d(C){c4(S,C)}}}const t4={title:"Compile Svelte in your head (Part 2)",date:"2020-03-22T08:00:00Z",tags:["Svelte","JavaScript"],series:"Compile Svelte in your head",label:"blog"};function U6(bt,S,ts){return H6("blog",{image:G6}),bt.$$set=Y=>{ts(0,S=dE(dE({},S),e4(Y)))},S=e4(S),[S]}class Z6 extends I6{constructor(S){super();L6(this,S,U6,q6,P6,{})}}export{Z6 as default,t4 as metadata};
