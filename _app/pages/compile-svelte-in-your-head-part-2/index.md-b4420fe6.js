import{S as C4,i as I4,s as L4,C as mE,w as P4,x as A4,y as H4,z as j4,A as l6,q as M4,o as R4,B as G4,r as V4,Y as r6,e as n,t as e,k as i,c as o,a as l,h as t,d as a,m as c,b as r,g as h,H as s,J as q4}from"../../chunks/vendor-da4388d4.js";import{B as U4}from"../../chunks/BlogLayout-86707f1c.js";import"../../chunks/stores-1fad7c36.js";import"../../chunks/ldjson-b0805387.js";/* empty css                                */var B4="/_app/assets/hero-twitter-672e3383.jpg";function J4(Ot){let T,q,Ds,ms,C,es,Da,ts,Dt,tk,nk,St,ok,lk,Tt,rk,ik,Gc,Sa,c6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// conceptually...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/*...*/</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// to track which variable has changed</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">dirty</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Set</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (variable</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> newValue) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// update ctx</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  ctx[variable] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> newValue;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// mark variable as dirty</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">dirty</span><span style="color: var(--shiki-token-function)">.add</span><span style="color: var(--shiki-color-text)">(variable);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// schedules update for the component</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">scheduleUpdate</span><span style="color: var(--shiki-color-text)">(component);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// gets called when update is scheduled</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">flushUpdate</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// update the fragment</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// clear the dirty</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">dirty</span><span style="color: var(--shiki-token-function)">.clear</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Vc,xs,ck,Nt,pk,kk,Ct,hk,vk,qc,Ys,dk,Ta,uk,yk,Uc,gs,$r,Na,fk,mk,W,xk,It,gk,Ek,Ca,_k,bk,Ia,wk,$k,Lt,Ok,Dk,Sk,La,Tk,Pt,Nk,Ck,Bc,w,Or,Pa,Ik,Lk,Aa,Pk,Dr,Ak,Hk,jk,Ha,Mk,At,Rk,Gk,Vk,Ss,ja,qk,Ht,Uk,Bk,Jk,Sr,Wk,zk,Tr,Fk,Yk,Nr,Zk,Kk,Cr,Qk,Xk,Ts,sh,jt,ah,eh,Mt,th,nh,oh,Ns,lh,Rt,rh,ih,Gt,ch,ph,kh,Vt,p6=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'world'</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    name <span class="token operator">=</span> <span class="token string">'Svelte'</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>update<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div></code></pre>`,hh,Ir,Ma,vh,dh,qt,k6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;world&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;name&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Svelte&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123; name</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> update &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...some where in &#96;create_fragment&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-token-function)">.update</span><span style="color: var(--shiki-color-text)">(); </span><span style="color: var(--shiki-token-comment)">// logs &#96;world&#96; scoped in the &#96;instance&#96; closure</span></span></code></pre>`,uh,Cs,yh,Ut,fh,mh,Bt,xh,gh,Jc,g,Lr,Ra,Eh,_h,Jt,Wt,bh,wh,$h,Pr,Oh,Dh,zt,h6='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> agility <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">let</span> power <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">incrementAgility</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    agility <span class="token operator">++</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">incrementPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    power <span class="token operator">++</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">levelUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    agility <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span></div><div class="line">    power <span class="token operator">+=</span> <span class="token number">7</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line">Agility: <span class="token language-javascript"><span class="token punctuation">&#123;</span>agility<span class="token punctuation">&#125;</span></span></div><div class="line">Power: <span class="token language-javascript"><span class="token punctuation">&#123;</span>power<span class="token punctuation">&#125;</span></span></div><div class="line">Stats: <span class="token language-javascript"><span class="token punctuation">&#123;</span>agility <span class="token operator">*</span> power<span class="token punctuation">&#125;</span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>incrementAgility<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>+ Agility<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>incrementPower<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>+ Power<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>levelUp<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Level Up<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div></code></pre>',Sh,Ar,Ga,Th,Nh,ns,Ch,Ft,Ih,Lh,Yt,Ph,Ah,Va,Hh,jh,Mh,Is,Rh,Hr,Gh,Vh,Zt,qh,Uh,Bh,Kt,v6='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123; agility</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">; &#125;</span></span></code></pre>',Jh,Ls,Wh,jr,zh,Fh,Qt,Yh,Zh,Kh,Xt,d6='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&#123; agility</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> power</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> &#125;</span></span></code></pre>',Qh,sn,an,Xh,sv,av,Ps,ev,Mr,tv,nv,en,ov,lv,rv,tn,u6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// NOTE: $$.dirty is passed into the &#96;p&#96; function as &#96;changed&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">(changed</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> ctx) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// checked if agility has changed before update the agility text</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">changed</span><span style="color: var(--shiki-color-text)">.agility) </span><span style="color: var(--shiki-token-function)">set_data</span><span style="color: var(--shiki-color-text)">(t1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.agility);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">changed</span><span style="color: var(--shiki-color-text)">.power) </span><span style="color: var(--shiki-token-function)">set_data</span><span style="color: var(--shiki-color-text)">(t3</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.power);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// if either agility or power has changed, update the stats text</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> ((</span><span style="color: var(--shiki-token-constant)">changed</span><span style="color: var(--shiki-color-text)">.agility </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">changed</span><span style="color: var(--shiki-color-text)">.power) </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> t5_value </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> (t5_value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.agility </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.power </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;&quot;</span><span style="color: var(--shiki-color-text)">)) </span><span style="color: var(--shiki-token-function)">set_data</span><span style="color: var(--shiki-color-text)">(t5</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> t5_value);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,iv,As,cv,nn,pv,kv,on,hv,vv,Wc,u,Rr,qa,dv,uv,ln,rn,yv,fv,mv,Gr,xv,gv,Ua,cn,Ev,pn,_v,bv,kn,wv,hn,$v,Ov,Ba,Dv,vn,Sv,Tv,Nv,dn,y6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Svelte&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">count</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">foo</span><span style="color: var(--shiki-color-text)">.a </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">bar </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> baz </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// compiled into</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;name&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Svelte&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;count&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> count</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> count);</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">foo</span><span style="color: var(--shiki-color-text)">.a </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> foo);</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;bar&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (bar </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;baz&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (baz </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">))));</span></span></code></pre>`,Cv,Ja,Iv,un,Lv,Pv,Av,os,yn,Hv,fn,jv,Mv,mn,Rv,xn,Gv,Vv,Vr,qv,Uv,qr,Bv,Jv,gn,f6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// src/runtime/internal/Component.ts</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> (key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> ret</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> ret) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.ctx </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">not_equal</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.ctx[key]</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 1. update the variable in $$.ctx</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.ctx[key] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> value;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 2a. mark the variable in $$.dirty</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">make_dirty</span><span style="color: var(--shiki-color-text)">(component</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// 4. return the value of the assignment or update expression</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> ret;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// src/runtime/internal/Component.ts</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">make_dirty</span><span style="color: var(--shiki-color-text)">(component</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> key) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-token-constant)">component</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">dirty_components</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(component);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// 3. schedule an update</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">schedule_update</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// initialise $$.dirty</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">component</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">blank_object</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// 2b. mark the variable in $$.dirty</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">component</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty[key] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Wv,Ur,Wa,zv,Fv,za,Yv,En,Zv,Kv,Qv,Fa,Xv,_n,sd,ad,ed,bn,m6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">obj </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  b</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> (foo </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> bar</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">obj</span><span style="color: var(--shiki-color-text)">.c </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;hello&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">(&#123; a</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> c </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> d</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> b &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> baz </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> obj);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// assuming all variables are referenced in the template</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// the above compiles into</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;obj&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  (obj </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    b</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (foo </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;bar&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> bar</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> bar)))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;obj&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">obj</span><span style="color: var(--shiki-color-text)">.c </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;hello&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> obj);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;c&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  (&#123; a</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> c </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;d&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> d</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> d)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> b &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;baz&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (baz </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> obj)))</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  c</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;b&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> b)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,td,Br,nd,od,Hs,ld,wn,rd,id,$n,cd,pd,kd,Ya,hd,On,vd,dd,ud,Dn,x6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">obj</span><span style="color: var(--shiki-color-text)">.c </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;hello&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// compiles into</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;obj&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">obj</span><span style="color: var(--shiki-color-text)">.c </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;hello&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> obj);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// - it invalidates &#96;obj&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// - it returns the evaluated value of the expression &#96;obj.c = &#39;hello&#39;&#96;, which is &#39;hello&#39;</span></span></code></pre>`,yd,ls,fd,Sn,md,xd,Tn,gd,Ed,Nn,_d,bd,zc,_,Jr,Za,wd,$d,Cn,In,Od,Dd,Sd,rs,Td,Ka,Nd,Cd,Qa,Id,Ld,Ln,Pd,Ad,Hd,Wr,jd,Md,Pn,g6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// src/runtime/internal/scheduler.ts</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">schedule_update</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">update_scheduled) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    update_scheduled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// NOTE: &#96;flush&#96; will do the DOM update</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// we push it into the microtask queue</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">resolved_promise</span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(flush);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Rd,Xa,Gd,An,Vd,qd,Ud,Hn,E6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// src/runtime/internal/scheduler.ts</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">flush</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// for each componnet in &#96;dirty_components&#96;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">component</span><span style="color: var(--shiki-color-text)">.$$);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// src/runtime/internal/scheduler.ts</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)">($$) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.fragment </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// NOTE: this will be important later</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-token-function)">.update</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">run_all</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.before_update);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// calls the &#96;p&#96; function</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.fragment </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.p</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.ctx);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// resets &#96;$$.dirty&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">after_update</span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">(add_render_callback);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Bd,zr,se,Jd,Wd,Fr,zd,Fd,jn,_6=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> givenName<span class="token punctuation">,</span> familyName<span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    givenName <span class="token operator">=</span> <span class="token string">'Li Hau'</span><span class="token punctuation">;</span></div><div class="line">    familyName <span class="token operator">=</span> <span class="token string">'Tan'</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line">Name: <span class="token language-javascript"><span class="token punctuation">&#123;</span>familyName<span class="token punctuation">&#125;</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>givenName<span class="token punctuation">&#125;</span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>update<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Update<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div></code></pre>`,Yd,Yr,ae,Zd,Kd,js,Qd,Mn,Xd,su,Rn,au,eu,tu,y,Ms,nu,Zr,ou,lu,Gn,ru,iu,cu,Kr,Vn,pu,ku,Zs,hu,qn,vu,du,Un,uu,yu,Bn,fu,Jn,mu,xu,ee,gu,Wn,Eu,_u,bu,Qr,zn,wu,$u,Ks,Ou,Fn,Du,Su,Yn,Tu,Nu,Zn,Cu,Kn,Iu,Lu,te,Pu,Qn,Au,Hu,ju,Xr,si,Mu,Ru,ai,ei,Gu,Vu,Qs,Xn,qu,Uu,so,Bu,Ju,Wu,Xs,zu,ao,Fu,Yu,ne,oe,eo,Zu,Ku,to,Qu,Xu,le,no,sy,ay,oo,ey,ty,sa,ny,lo,oy,ly,re,aa,ry,ro,iy,cy,io,py,ky,ea,hy,co,vy,dy,po,uy,yy,ta,fy,ko,my,xy,ho,gy,Ey,ti,_y,by,ni,oi,wy,Fc,na,li,ie,$y,Oy,is,cs,Dy,vo,Sy,Ty,uo,Ny,Cy,yo,Iy,Ly,Py,ri,Ay,Hy,ce,jy,fo,My,Ry,Gy,Rs,Vy,mo,qy,Uy,xo,By,Jy,Yc,N,ii,pe,Wy,zy,Gs,Fy,ke,Yy,Zy,ci,Ky,Qy,Xy,pi,sf,af,go,b6='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.diry </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123; givenName</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> familyName</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> &#125;;</span></span></code></pre>',ef,ki,tf,nf,Eo,w6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">givenName </span><span style="color: var(--shiki-token-keyword)">-&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">familyName </span><span style="color: var(--shiki-token-keyword)">-&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span></span></code></pre>`,of,he,lf,ve,rf,cf,pf,_o,$6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">0b0000_0011</span><span style="color: var(--shiki-color-text)">];</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// the 0th and 1st bit marked true</span></span></code></pre>`,kf,hi,hf,Zc,b,vi,de,vf,df,di,uf,yf,Vs,ff,ue,mf,xf,ye,gf,Ef,_f,A,bf,bo,wf,$f,wo,Of,Df,$o,Sf,Tf,Oo,Nf,Cf,Do,If,Lf,So,Pf,Af,Hf,qs,jf,ui,Mf,Rf,To,Gf,Vf,qf,R,Uf,yi,Bf,Jf,No,Wf,zf,Co,Ff,Yf,fe,Zf,Kf,me,Qf,Xf,sm,fi,mi,am,em,xi,tm,nm,Us,om,xe,lm,rm,ge,im,cm,pm,Ee,km,_e,hm,vm,dm,Io,O6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// set 1st boolean to true</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">0b0101</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0b0010</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0b0111</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// set 2nd boolean to false</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">0b0101</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0b1011</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0b0001</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// is 2nd boolean true?</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">((</span><span style="color: var(--shiki-token-constant)">0b0101</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0b0100</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// NOTE: You can test multiple boolean values at once</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// is 2nd and 3rd boolean true?</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">((</span><span style="color: var(--shiki-token-constant)">0b0101</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0b1100</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`,um,be,ym,we,fm,mm,xm,$e,gm,gi,Em,_m,Kc,f,Ei,Oe,bm,wm,_i,$m,Om,Lo,D6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">givenName </span><span style="color: var(--shiki-token-keyword)">-&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">firstName </span><span style="color: var(--shiki-token-keyword)">-&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span></span></code></pre>`,Dm,bi,Sm,Tm,Po,S6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// Previous</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123; givenName</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> familyName &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// Now</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [givenName</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> familyName];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Nm,ps,Cm,wi,Im,Lm,Ao,Pm,Am,$i,Hm,jm,Mm,Ho,T6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// Previous</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.givenName </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">ctx</span><span style="color: var(--shiki-color-text)">.familyName;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Now</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.ctx[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">];</span></span></code></pre>`,Rm,ks,Gm,jo,Vm,qm,Oi,Um,Bm,Di,Jm,Wm,zm,Mo,N6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// Previous</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;givenName&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (givenName </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Li Hau&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Now</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (givenName </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Li Hau&#39;</span><span style="color: var(--shiki-color-text)">));</span></span></code></pre>`,Fm,Ro,Go,Ym,Zm,Km,Si,Qm,Xm,Vo,C6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// Previous</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty[</span><span style="color: var(--shiki-token-string-expression)">&#39;givenName&#39;</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Now</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">|=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&lt;&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`,s1,Ti,a1,e1,qo,I6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// Previous</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$dirty</span><span style="color: var(--shiki-color-text)">.givenName) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$dirty</span><span style="color: var(--shiki-color-text)">.givenName </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">$dirty</span><span style="color: var(--shiki-color-text)">.familyName) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Now</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> ($dirty[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> ($dirty[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span></code></pre>`,t1,hs,n1,Uo,o1,l1,Bo,r1,i1,Jo,c1,p1,k1,Y,Ni,h1,v1,Wo,d1,u1,zo,y1,f1,Fo,m1,x1,Qc,Es,Ci,oa,g1,Ii,E1,_1,vs,b1,Yo,w1,$1,Li,O1,D1,Zo,S1,T1,N1,Ko,L6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// If less than 32 variables,</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Instead of having &#96;dirty[0]&#96; all the time,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">p</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> (ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Svelte optimises the compiled code by </span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// destruct the array in the arguments</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">p</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> (ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [dirty]) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// If more than or equal to 32 variables</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">p</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> (ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (dirty[</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">) &#123; </span><span style="color: var(--shiki-token-comment)">/* ... */</span><span style="color: var(--shiki-color-text)"> &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Xc,la,Pi,De,C1,I1,Se,Bs,L1,Qo,P1,A1,Xo,H1,j1,M1,Ai,R1,sp,v,Hi,Te,G1,V1,ra,q1,Ne,U1,B1,sl,J1,W1,al,P6='<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line dim">  <span class="token keyword">export</span> <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token comment">// &#96;doubled&#96;, &#96;tripled&#96;, &#96;quadrupled&#96; are reactive</span></div><div class="line highlight">  <span class="token literal-property property">$</span><span class="token operator">:</span> doubled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></div><div class="line highlight">  <span class="token literal-property property">$</span><span class="token operator">:</span> tripled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span></div><div class="line highlight">  <span class="token literal-property property">$</span><span class="token operator">:</span> quadrupled <span class="token operator">=</span> doubled <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></div><div class="line dim"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line dim"></div><div class="line dim"><span class="token language-javascript"><span class="token punctuation">&#123;</span>doubled<span class="token punctuation">&#125;</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>tripled<span class="token punctuation">&#125;</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>quadrupled<span class="token punctuation">&#125;</span></span></div></code></pre>',z1,ji,Ce,F1,Y1,Ie,Z1,Le,el,K1,Q1,X1,sx,tl,A6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*count*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">8</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">			$</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> doubled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		&#125;</span></span>
<span class="line highlight"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*count*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">8</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">			$</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> tripled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		&#125;</span></span>
<span class="line highlight"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*doubled*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">			$</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> quadrupled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> doubled </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		&#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [doubled</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> tripled</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> quadrupled</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> count];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ax,Mi,ex,tx,nl,H6='<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line dim">  <span class="token keyword">export</span> <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token comment">// NOTE: move &#96;quadrupled&#96; before &#96;doubled&#96;</span></div><div class="line highlight">  <span class="token literal-property property">$</span><span class="token operator">:</span> quadrupled <span class="token operator">=</span> doubled <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></div><div class="line highlight">  <span class="token literal-property property">$</span><span class="token operator">:</span> doubled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token literal-property property">$</span><span class="token operator">:</span> tripled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span></div><div class="line dim"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div></code></pre>',nx,Ri,Pe,ox,lx,ol,j6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-comment)">// NOTE: &#96;quadrupled&#96; invalidates after &#96;doubled&#96;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*count*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">8</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">			$</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (doubled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		&#125;</span></span>
<span class="line highlight"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*doubled*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">			$</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (quadrupled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> doubled </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">		&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*count*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">8</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">			$</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (tripled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">		&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	&#125;;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [doubled</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> tripled</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> quadrupled</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> count];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,rx,Gi,ix,cx,ds,ia,px,ll,kx,hx,Vi,_s,rl,vx,dx,Ae,ux,yx,He,fx,mx,xx,je,gx,il,Ex,_x,bx,cl,wx,qi,U,pl,$x,Ox,kl,Dx,Sx,hl,Tx,Nx,vl,Cx,Ix,dl,Lx,Px,Ax,Me,Hx,ul,jx,Mx,Rx,Re,Gx,yl,Vx,qx,Ux,Ui,Bx,Jx,fl,M6='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line"><span class="token comment">// NOTE: use &#96;count&#96; in a reactive declaration before &#96;count&#96; is declared</span></div><div class="line"><span class="token literal-property property">$</span><span class="token operator">:</span> doubled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></div><div class="line"><span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span></span> * 2 = <span class="token language-javascript"><span class="token punctuation">&#123;</span>doubled<span class="token punctuation">&#125;</span></span></div></code></pre>',Wx,Bi,Ge,zx,Fx,Ji,Ve,Yx,ml,Zx,Kx,Qx,Js,Xx,xl,s2,a2,gl,e2,t2,n2,qe,o2,El,l2,r2,i2,_l,R6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// src/runtime/internal/scheduler.ts</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)">($$) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.fragment </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// NOTE: this is important now!</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-token-function)">.update</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">run_all</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.before_update);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// calls the &#96;p&#96; function</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.fragment </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.p</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.dirty</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.ctx);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,c2,us,p2,bl,k2,h2,Wi,v2,d2,wl,u2,y2,f2,zi,m2,ap,I,Fi,Ue,x2,g2,Yi,E2,_2,$l,G6=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> givenName <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> familyName <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    givenName <span class="token operator">=</span> <span class="token string">'Li Hau'</span><span class="token punctuation">;</span></div><div class="line">    familyName <span class="token operator">=</span> <span class="token string">'Tan'</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line">  <span class="token literal-property property">$</span><span class="token operator">:</span> name <span class="token operator">=</span> givenName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> familyName<span class="token punctuation">;</span></div><div class="line">  <span class="token literal-property property">$</span><span class="token operator">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div></code></pre>`,b2,Zi,Be,w2,$2,Je,O2,Ol,D2,S2,T2,G,z,N2,Dl,C2,I2,Sl,L2,P2,Ki,A2,H2,Qi,j2,M2,R2,Xi,sc,G2,V2,ac,ec,q2,U2,ca,Tl,B2,J2,Nl,W2,z2,F2,We,Y2,Cl,Z2,ze,Z,K2,tc,Q2,X2,nc,s3,a3,Il,e3,t3,oc,n3,o3,pa,l3,lc,r3,i3,Ll,c3,p3,Fe,k3,Pl,h3,v3,d3,V,u3,Al,y3,f3,Hl,m3,x3,jl,g3,E3,Ml,_3,b3,rc,w3,$3,O3,Rl,V6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// Instead of</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// #1 &#96;givenName = &#39;Li Hau&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Li Hau&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39; &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Li Hau &#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// #2 &#96;familyName = &#39;Tan&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Li Hau&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39; &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Tan&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Li Hau Tan&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// Reactive declarations and statements are batched</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// #1 &#96;givenName = &#39;Li Hau&#39;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// #2 &#96;familyName = &#39;Tan&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Li Hau&#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39; &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Tan&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Li Hau Tan&#39;</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,ep,H,ic,Ye,D3,S3,cc,T3,N3,Gl,q6=`<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line dim">  <span class="token keyword">let</span> givenName <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> familyName <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line dim">    givenName <span class="token operator">=</span> <span class="token string">'Li Hau'</span><span class="token punctuation">;</span></div><div class="line dim">    familyName <span class="token operator">=</span> <span class="token string">'Tan'</span><span class="token punctuation">;</span></div><div class="line highlight">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Logs ''</span></div><div class="line dim">  <span class="token punctuation">&#125;</span></div><div class="line dim">  <span class="token literal-property property">$</span><span class="token operator">:</span> name <span class="token operator">=</span> givenName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> familyName<span class="token punctuation">;</span></div><div class="line dim"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div></code></pre>`,C3,pc,Ze,I3,L3,Ke,P3,kc,A3,H3,j3,Vl,U6=`<pre class="prism language-svelte"><code><div class="line dim"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line dim">  <span class="token keyword">let</span> givenName <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> familyName <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line dim">    givenName <span class="token operator">=</span> <span class="token string">'Li Hau'</span><span class="token punctuation">;</span></div><div class="line dim">    familyName <span class="token operator">=</span> <span class="token string">'Tan'</span><span class="token punctuation">;</span></div><div class="line dim">  <span class="token punctuation">&#125;</span></div><div class="line dim">  <span class="token literal-property property">$</span><span class="token operator">:</span> name <span class="token operator">=</span> givenName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> familyName<span class="token punctuation">;</span></div><div class="line highlight">  <span class="token literal-property property">$</span><span class="token operator">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Logs 'Li Hau Tan'</span></div><div class="line dim"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div></code></pre>`,tp,K,hc,Qe,M3,R3,vc,G3,V3,Xe,q3,dc,U3,B3,J3,ql,B6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// NOTE: refers to &#96;doubled&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> quadrupled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> doubled </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// NOTE: defined &#96;doubled&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">$</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> doubled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// compiles into:</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">$$self</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">$$</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">update</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  $</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/* doubled */</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> doubled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  $</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/* quadrupled */</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> quadrupled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> doubled </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,np,L,uc,st,W3,z3,at,F3,Ul,Y3,Z3,K3,et,Q3,Bl,X3,sg,ag,yc,eg,tg,Jl,J6='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line">  <span class="token literal-property property">$</span><span class="token operator">:</span> doubled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span> count <span class="token punctuation">&#125;</span></span> x 2 = <span class="token language-javascript"><span class="token punctuation">&#123;</span>doubled<span class="token punctuation">&#125;</span></span></div></code></pre>',ng,fc,tt,og,lg,Ws,rg,Wl,ig,cg,zl,pg,kg,hg,Fl,W6=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">instance</span><span style="color: var(--shiki-color-text)">($$self</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$props</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> $$invalidate) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> doubled;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  $</span><span style="color: var(--shiki-token-punctuation)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">$$invalidate</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (doubled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> [doubled];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,op,Yl,mc,nt,vg,lp,Zl,xc,ot,dg,rp,Kl,gc,lt,ug,ip,Ql,Ec,rt,yg,cp,B,_c,it,fg,mg,ct,xg,pt,gg,Eg,_g,ys,bg,kt,wg,$g,ht,Og,Dg,vt,Sg,Tg,Ng,bc,dt,Cg,Xl,Ig,Lg,Pg,wc,ut,Ag,sr,Hg,jg,pp,ka,$c,yt,Mg,Rg,F,ft,Gg,mt,Vg,qg,Ug,ha,Bg,xt,Jg,Wg,gt,zg,Fg,ar,Et,Yg,Zg,Kg,er,_t,Qg,Xg,sE,Oc,bt,aE;return{c(){T=n("p"),q=n("strong"),Ds=e("\u2B05 \u2B05  Previously in "),ms=n("a"),C=e("Part 1"),es=e("."),Da=i(),ts=n("p"),Dt=n("a"),tk=e("Previously"),nk=e(", when I mentioned the "),St=n("code"),ok=e("$$invalidate"),lk=e(" function, I explained that the "),Tt=n("code"),rk=e("$$invalidate"),ik=e(" function works conceptually like the following:"),Gc=i(),Sa=n("div"),Vc=i(),xs=n("p"),ck=e("but that's not the exact implementation of the "),Nt=n("code"),pk=e("$$invaldiate"),kk=e(" function. So in this article, we are going to look at how "),Ct=n("code"),hk=e("$$invalidate"),vk=e(" is implemented in Svelte."),qc=i(),Ys=n("p"),dk=e("At the point of writing, Svelte is at "),Ta=n("a"),uk=e("v3.20.1"),yk=e("."),Uc=i(),gs=n("section"),$r=n("h2"),Na=n("a"),fk=e("Pre v3.16.0"),mk=i(),W=n("p"),xk=e("There's a big optimisation that changes the underlying implementation of the "),It=n("code"),gk=e("$$invalidate"),Ek=e(" function in "),Ca=n("a"),_k=e("v3.16.0"),bk=e(", namely in "),Ia=n("a"),wk=e("#3945"),$k=e(". The underlying concept doesn't change, but it'll be much easier to understand about "),Lt=n("code"),Ok=e("$$invalidate"),Dk=e(" prior the change and learn about the optimisation change separately."),Sk=i(),La=n("p"),Tk=e("Let's explain some of the variables that you are going to see, some of which was introduced in "),Pt=n("a"),Nk=e("Part 1"),Ck=e(":"),Bc=i(),w=n("section"),Or=n("h3"),Pa=n("a"),Ik=e("$$.ctx"),Lk=i(),Aa=n("p"),Pk=e("There's no official name for it. You can call it "),Dr=n("strong"),Ak=e("context"),Hk=e(" as it is the context which the template is based on to render onto the DOM."),jk=i(),Ha=n("p"),Mk=e("I called it "),At=n("a"),Rk=e("instance variables"),Gk=e(". As it is a JavaScript Object that contains all the variables that you:"),Vk=i(),Ss=n("ul"),ja=n("li"),qk=e("declared in the "),Ht=n("code"),Uk=e("<script>"),Bk=e(" tag"),Jk=i(),Sr=n("li"),Wk=e("mutated or reassigned"),zk=i(),Tr=n("li"),Fk=e("referenced in the template"),Yk=i(),Nr=n("p"),Zk=e("that belongs to a component instance."),Kk=i(),Cr=n("p"),Qk=e("The instance variables themselves can be of a primitive value, object, array or function."),Xk=i(),Ts=n("p"),sh=e("The "),jt=n("code"),ah=e("instance"),eh=e(" function creates and returns the "),Mt=n("code"),th=e("ctx"),nh=e(" object."),oh=i(),Ns=n("p"),lh=e("Functions declared in the "),Rt=n("code"),rh=e("<script>"),ih=e(" tag will refer to the instance variable that is scoped withn the "),Gt=n("code"),ch=e("instance"),ph=e(" function closure:"),kh=i(),Vt=n("div"),hh=i(),Ir=n("p"),Ma=n("a"),vh=e("Svelte REPL"),dh=i(),qt=n("div"),uh=i(),Cs=n("p"),yh=e("Whenever a new instance of a component is created, the "),Ut=n("code"),fh=e("instance"),mh=e(" function is called and the "),Bt=n("code"),xh=e("ctx"),gh=e(" object is created and captured within a new closure scope."),Jc=i(),g=n("section"),Lr=n("h3"),Ra=n("a"),Eh=e("$$.dirty"),_h=i(),Jt=n("p"),Wt=n("code"),bh=e("$$.dirty"),wh=e(" is a object that is used to track which instance variable had just changed and needs to be updated onto the DOM."),$h=i(),Pr=n("p"),Oh=e("For example, in the following Svelte component:"),Dh=i(),zt=n("div"),Sh=i(),Ar=n("p"),Ga=n("a"),Th=e("Svelte REPL"),Nh=i(),ns=n("p"),Ch=e("The initial "),Ft=n("code"),Ih=e("$$.dirty"),Lh=e(" is "),Yt=n("code"),Ph=e("null"),Ah=e(" ("),Va=n("a"),Hh=e("source code"),jh=e(")."),Mh=i(),Is=n("p"),Rh=e("If you clicked on the "),Hr=n("strong"),Gh=e('"+ Agility"'),Vh=e(" button, "),Zt=n("code"),qh=e("$$.dirty"),Uh=e(" will turn into:"),Bh=i(),Kt=n("div"),Jh=i(),Ls=n("p"),Wh=e("If you clicked on the "),jr=n("strong"),zh=e('"Level Up"'),Fh=e(" button, "),Qt=n("code"),Yh=e("$$.dirty"),Zh=e(" will turn into:"),Kh=i(),Xt=n("div"),Qh=i(),sn=n("p"),an=n("code"),Xh=e("$$.dirty"),sv=e(" is useful for Svelte, so that it doesn't update the DOM unnecessarily."),av=i(),Ps=n("p"),ev=e("If you looked at the "),Mr=n("strong"),tv=e("p (u_p_date)"),nv=e(" function of the compiled code, you will see Svelte checks whether a variable is marked in "),en=n("code"),ov=e("$$.dirty"),lv=e(", before updating the DOM."),rv=i(),tn=n("div"),iv=i(),As=n("p"),cv=e("After Svelte updates the DOM, the "),nn=n("code"),pv=e("$$.dirty"),kv=e(" is set back to "),on=n("code"),hv=e("null"),vv=e(" to indicate all changes has been applied onto the DOM."),Wc=i(),u=n("section"),Rr=n("h3"),qa=n("a"),dv=e("$$invalidate"),uv=i(),ln=n("p"),rn=n("code"),yv=e("$$invalidate"),fv=e(" is the secret behind reactivity in Svelte."),mv=i(),Gr=n("p"),xv=e("Whenever a variable is"),gv=i(),Ua=n("ul"),cn=n("li"),Ev=e("reassigned "),pn=n("code"),_v=e("(foo = 1)"),bv=i(),kn=n("li"),wv=e("mutated "),hn=n("code"),$v=e("(foo.bar = 1)"),Ov=i(),Ba=n("p"),Dv=e("Svelte will wrap the assignment or update around with the "),vn=n("code"),Sv=e("$$invalidate"),Tv=e(" function:"),Nv=i(),dn=n("div"),Cv=i(),Ja=n("p"),Iv=e("the "),un=n("code"),Lv=e("$$invalidate"),Pv=e(" function will:"),Av=i(),os=n("ol"),yn=n("li"),Hv=e("update the variable in "),fn=n("code"),jv=e("$$.ctx"),Mv=i(),mn=n("li"),Rv=e("mark the variable in "),xn=n("code"),Gv=e("$$.dirty"),Vv=i(),Vr=n("li"),qv=e("schedule an update"),Uv=i(),qr=n("li"),Bv=e("return the value of the assignment or update expression"),Jv=i(),gn=n("div"),Wv=i(),Ur=n("p"),Wa=n("a"),zv=e("Source code"),Fv=i(),za=n("p"),Yv=e("One interesting note about the function "),En=n("code"),Zv=e("$$invalidate"),Kv=e(" is that, it wraps around the assignment or update expression and returns what the expression evaluates to."),Qv=i(),Fa=n("p"),Xv=e("This makes "),_n=n("code"),sd=e("$$invalidate"),ad=e(" chainable:"),ed=i(),bn=n("div"),td=i(),Br=n("p"),nd=e("It seemed complex when there's a lot of assignment or update expressions in 1 statement! \u{1F648}"),od=i(),Hs=n("p"),ld=e("The 2nd argument of "),wn=n("code"),rd=e("$$invalidate"),id=e(" is the assignment or update expressions verbatim. But if it contains any assignment or update sub-expressions, we recursively wrap it with "),$n=n("code"),cd=e("$$invalidate"),pd=e("."),kd=i(),Ya=n("p"),hd=e("In case where the assignment expression changes a property of an object, we pass the object in as a 3rd argument of the "),On=n("code"),vd=e("$$invalidate"),dd=e(" function, eg:"),ud=i(),Dn=n("div"),yd=i(),ls=n("p"),fd=e("So that, we update the "),Sn=n("code"),md=e('"obj"'),xd=e(" variable to "),Tn=n("code"),gd=e("obj"),Ed=e(" instead of the value of the 2nd argument, "),Nn=n("code"),_d=e('"hello"'),bd=e("."),zc=i(),_=n("section"),Jr=n("h3"),Za=n("a"),wd=e("schedule_update"),$d=i(),Cn=n("p"),In=n("code"),Od=e("schedule_update"),Dd=e(" schedules Svelte to update the DOM with the changes made thus far."),Sd=i(),rs=n("p"),Td=e("Svelte, at the point of writing ("),Ka=n("a"),Nd=e("v3.20.1"),Cd=e("), uses "),Qa=n("a"),Id=e("microtask queue"),Ld=e(" to batch change updates. The actual DOM update happens in the next microtask, so that any synchronous "),Ln=n("code"),Pd=e("$$invalidate"),Ad=e(" operations that happen within the same task get batched into the next DOM update."),Hd=i(),Wr=n("p"),jd=e("To schedule a next microtask, Svelte uses the Promise callback."),Md=i(),Pn=n("div"),Rd=i(),Xa=n("p"),Gd=e("In "),An=n("code"),Vd=e("flush"),qd=e(", we call update for each component marked dirty:"),Ud=i(),Hn=n("div"),Bd=i(),zr=n("p"),se=n("a"),Jd=e("Source code"),Wd=i(),Fr=n("p"),zd=e("So, if you write a Svelte component like this:"),Fd=i(),jn=n("div"),Yd=i(),Yr=n("p"),ae=n("a"),Zd=e("Svelte REPL"),Kd=i(),js=n("p"),Qd=e("The DOM update for the "),Mn=n("code"),Xd=e("givenName"),su=e(" and "),Rn=n("code"),au=e("familyName"),eu=e(" happens in the same microtask:"),tu=i(),y=n("ol"),Ms=n("li"),nu=e("Click on the "),Zr=n("strong"),ou=e('"Update"'),lu=e(" to call the "),Gn=n("code"),ru=e("update"),iu=e(" function"),cu=i(),Kr=n("li"),Vn=n("code"),pu=e("$$invalidate('givenName', givenName = 'Li Hau')"),ku=i(),Zs=n("li"),hu=e("Mark the variable "),qn=n("code"),vu=e("givenName"),du=e(" dirty, "),Un=n("code"),uu=e("$$.dirty['givenName'] = true"),yu=i(),Bn=n("li"),fu=e("Schedule an update, "),Jn=n("code"),mu=e("schedule_update()"),xu=i(),ee=n("li"),gu=e("Since it's the first update in the call stack, push the "),Wn=n("code"),Eu=e("flush"),_u=e(" function into the microtask queue"),bu=i(),Qr=n("li"),zn=n("code"),wu=e("$$invalidate('familyName', familyName = 'Tan')"),$u=i(),Ks=n("li"),Ou=e("Mark the variable "),Fn=n("code"),Du=e("familyName"),Su=e(" dirty, "),Yn=n("code"),Tu=e("$$.dirty['familyName'] = true"),Nu=i(),Zn=n("li"),Cu=e("Schedule an update, "),Kn=n("code"),Iu=e("schedule_update()"),Lu=i(),te=n("li"),Pu=e("Since "),Qn=n("code"),Au=e("update_scheduled = true"),Hu=e(", do nothing."),ju=i(),Xr=n("li"),si=n("strong"),Mu=e("-- End of task --"),Ru=i(),ai=n("li"),ei=n("strong"),Gu=e("-- Start of microtask--"),Vu=i(),Qs=n("li"),Xn=n("code"),qu=e("flush()"),Uu=e(" calls "),so=n("code"),Bu=e("update()"),Ju=e(" for each component marked dirty"),Wu=i(),Xs=n("li"),zu=e("Calls "),ao=n("code"),Fu=e("$$.fragment.p($$.dirty, $$.ctx)"),Yu=e("."),ne=n("ul"),oe=n("li"),eo=n("code"),Zu=e("$$.dirty"),Ku=e(" is now "),to=n("code"),Qu=e("{ givenName: true, familyName: true }"),Xu=i(),le=n("li"),no=n("code"),sy=e("$$.ctx"),ay=e(" is now "),oo=n("code"),ey=e("{ givenName: 'Li Hau', familyName: 'Tan' }"),ty=i(),sa=n("li"),ny=e("In "),lo=n("code"),oy=e("function p(dirty, ctx)"),ly=e(","),re=n("ul"),aa=n("li"),ry=e("Update the 1st text node to "),ro=n("code"),iy=e("$$.ctx['givenName']"),cy=e(" if "),io=n("code"),py=e("$$.dirty['givenName'] === true"),ky=i(),ea=n("li"),hy=e("Update the 2nd text node to "),co=n("code"),vy=e("$$.ctx['familyName']"),dy=e(" if "),po=n("code"),uy=e("$$.dirty['familyName'] === true"),yy=i(),ta=n("li"),fy=e("Resets the "),ko=n("code"),my=e("$$.dirty"),xy=e(" to "),ho=n("code"),gy=e("null"),Ey=i(),ti=n("li"),_y=e("..."),by=i(),ni=n("li"),oi=n("strong"),wy=e("-- End of microtask--"),Fc=i(),na=n("section"),li=n("h4"),ie=n("a"),$y=e("tl/dr:"),Oy=i(),is=n("ul"),cs=n("li"),Dy=e("For each assignment or update, Svelte calls "),vo=n("code"),Sy=e("$$invalidate"),Ty=e(" to update the variable in "),uo=n("code"),Ny=e("$$.ctx"),Cy=e(" and mark the variable dirty in "),yo=n("code"),Iy=e("$$.dirty"),Ly=e("."),Py=i(),ri=n("li"),Ay=e("The acutal DOM update is batched into the next microtask queue."),Hy=i(),ce=n("li"),jy=e("To update the DOM for each component, the component "),fo=n("code"),My=e("$$.fragment.p($$.diry, $$.ctx)"),Ry=e(" is called."),Gy=i(),Rs=n("li"),Vy=e("After the DOM update, the "),mo=n("code"),qy=e("$$.dirty"),Uy=e(" is reset to "),xo=n("code"),By=e("null"),Jy=e("."),Yc=i(),N=n("section"),ii=n("h2"),pe=n("a"),Wy=e("v3.16.0"),zy=i(),Gs=n("p"),Fy=e("One big change in v3.16.0 is the PR "),ke=n("a"),Yy=e("#3945"),Zy=e(", namely "),ci=n("strong"),Ky=e("bitmask-based change tracking"),Qy=e("."),Xy=i(),pi=n("p"),sf=e("Instead of marking the variable dirty using an object:"),af=i(),go=n("div"),ef=i(),ki=n("p"),tf=e("Svelte assign each variable an index:"),nf=i(),Eo=n("div"),of=i(),he=n("p"),lf=e("and uses "),ve=n("a"),rf=e("bitmask"),cf=e(" to store the dirty information:"),pf=i(),_o=n("div"),kf=i(),hi=n("p"),hf=e("which is far more compact than the previous compiled code."),Zc=i(),b=n("section"),vi=n("h3"),de=n("a"),vf=e("Bitmask"),df=i(),di=n("p"),uf=e("For those who don't understand, allow me to quickly explain what it is."),yf=i(),Vs=n("p"),ff=e("Of course, if you want to learn more about it, feel free to read a more detailed explanation, like "),ue=n("a"),mf=e("this"),xf=e(" and "),ye=n("a"),gf=e("this"),Ef=e("."),_f=i(),A=n("p"),bf=e("The most compact way of representing a group of "),bo=n("code"),wf=e("true"),$f=e(" or "),wo=n("code"),Of=e("false"),Df=e(" is to use bits. If the bit is "),$o=n("code"),Sf=e("1"),Tf=e(" it is "),Oo=n("code"),Nf=e("true"),Cf=e(" and if it is "),Do=n("code"),If=e("0"),Lf=e(" it is "),So=n("code"),Pf=e("false"),Af=e("."),Hf=i(),qs=n("p"),jf=e("A number can be represented in binary, "),ui=n("strong"),Mf=e("5"),Rf=e(" is "),To=n("code"),Gf=e("0b0101"),Vf=e(" in binary."),qf=i(),R=n("p"),Uf=e("If "),yi=n("strong"),Bf=e("5"),Jf=e(" is represented in a 4-bit binary, then it can store 4 boolean values, with the 0th and 2nd bit as "),No=n("code"),Wf=e("true"),zf=e(" and 1st and 3rd bit as "),Co=n("code"),Ff=e("false"),Yf=e(", (reading from the right to left, from "),fe=n("a"),Zf=e("least significant bit"),Kf=e(" to the "),me=n("a"),Qf=e("most significant bit"),Xf=e(")."),sm=i(),fi=n("p"),mi=n("strong"),am=e("How many boolean values can a number store?"),em=i(),xi=n("p"),tm=e("That depends on the language, a 16-bit integer in Java can store 16 boolean values."),nm=i(),Us=n("p"),om=e("In JavaScript, numbers can are "),xe=n("a"),lm=e("represented in 64 bits"),rm=e(". However, when using "),ge=n("a"),im=e("bitwise operations"),cm=e(" on the number, JavaScript will treat the number as 32 bits."),pm=i(),Ee=n("p"),km=e("To inspect or modify the boolean value stored in a number, we use "),_e=n("a"),hm=e("bitwise operations"),vm=e("."),dm=i(),Io=n("div"),um=i(),be=n("p"),ym=e("The 2nd operand we use in the bitwise operation, is like a "),we=n("a"),fm=e("mask"),mm=e(" that allow us to target a specific bit in the 1st number, that stores our boolean values."),xm=i(),$e=n("p"),gm=e("We call the mask, "),gi=n("strong"),Em=e("bitmask"),_m=e("."),Kc=i(),f=n("section"),Ei=n("h3"),Oe=n("a"),bm=e("Bitmask in Svelte"),wm=i(),_i=n("p"),$m=e("As mentioned earlier, we assign each variable an index:"),Om=i(),Lo=n("div"),Dm=i(),bi=n("p"),Sm=e("So instead of returning the instance variable as an JavaScript Object, we now return it as an JavaScript Array:"),Tm=i(),Po=n("div"),Nm=i(),ps=n("p"),Cm=e("The variable is accessed via "),wi=n("strong"),Im=e("index"),Lm=e(", "),Ao=n("code"),Pm=e("$$.ctx[index]"),Am=e(", instead of "),$i=n("strong"),Hm=e("variable name"),jm=e(":"),Mm=i(),Ho=n("div"),Rm=i(),ks=n("p"),Gm=e("The "),jo=n("code"),Vm=e("$$invalidate"),qm=e(" function works the same, except it takes in "),Oi=n("strong"),Um=e("index"),Bm=e(" instead of "),Di=n("strong"),Jm=e("variable name"),Wm=e(":"),zm=i(),Mo=n("div"),Fm=i(),Ro=n("p"),Go=n("code"),Ym=e("$$.dirty"),Zm=e(" now stores a list of numbers. Each number carries 31 boolean values, each boolean value indicates whether the variable of that index is dirty or not."),Km=i(),Si=n("p"),Qm=e("To set a variable as dirty, we use bitwise operation:"),Xm=i(),Vo=n("div"),s1=i(),Ti=n("p"),a1=e("And to verify whether a variable is dirty, we use bitwise operation too!"),e1=i(),qo=n("div"),t1=i(),hs=n("p"),n1=e("With using bitmask, "),Uo=n("code"),o1=e("$$.dirty"),l1=e(" is now reset to "),Bo=n("code"),r1=e("[-1]"),i1=e(" instead of "),Jo=n("code"),c1=e("null"),p1=e("."),k1=i(),Y=n("p"),Ni=n("strong"),h1=e("Trivia:"),v1=i(),Wo=n("code"),d1=e("-1"),u1=e(" is "),zo=n("code"),y1=e("0b1111_1111"),f1=e(" in binary, where all the bits are "),Fo=n("code"),m1=e("1"),x1=e("."),Qc=i(),Es=n("section"),Ci=n("h4"),oa=n("a"),g1=e("Destructuring "),Ii=n("strong"),E1=e("$$.dirty"),_1=i(),vs=n("p"),b1=e("One code-size optimisation that Svelte does is to always destructure the "),Yo=n("code"),w1=e("dirty"),$1=e(" array in the "),Li=n("strong"),O1=e("u_p_date function"),D1=e(" if there's less than 32 variables, since we will always access "),Zo=n("code"),S1=e("dirty[0]"),T1=e(" anyway:"),N1=i(),Ko=n("div"),Xc=i(),la=n("section"),Pi=n("h4"),De=n("a"),C1=e("tl/dr:"),I1=i(),Se=n("ul"),Bs=n("li"),L1=e("The underlying mechanism for "),Qo=n("code"),P1=e("$$invalidate"),A1=e(" and "),Xo=n("code"),H1=e("schedule_update"),j1=e(" does not change"),M1=i(),Ai=n("li"),R1=e("Using bitmask, the compiled code is much compact"),sp=i(),v=n("section"),Hi=n("h2"),Te=n("a"),G1=e("Reactive Declaration"),V1=i(),ra=n("p"),q1=e("Svelte allow us to declare reactive values via the "),Ne=n("a"),U1=e("labeled statement"),B1=e(", "),sl=n("code"),J1=e("$:"),W1=i(),al=n("div"),z1=i(),ji=n("p"),Ce=n("a"),F1=e("Svelte REPL"),Y1=i(),Ie=n("p"),Z1=e("If you look at the compiled output, you would find out that the declarative statements appeared in the "),Le=n("a"),el=n("code"),K1=e("instance"),Q1=e(" function"),X1=e(":"),sx=i(),tl=n("div"),ax=i(),Mi=n("p"),ex=e("Try reorder the reactive declarations and observe the change in the compiled output:"),tx=i(),nl=n("div"),nx=i(),Ri=n("p"),Pe=n("a"),ox=e("Svelte REPL"),lx=i(),ol=n("div"),rx=i(),Gi=n("p"),ix=e("Some observations:"),cx=i(),ds=n("ul"),ia=n("li"),px=e("When there are reactive declarations, Svelte defines a custom "),ll=n("code"),kx=e("$$.update"),hx=e(" method."),Vi=n("ul"),_s=n("li"),rl=n("code"),vx=e("$$.update"),dx=e(" is a "),Ae=n("a"),ux=e("no-op function"),yx=e(" by default. (See "),He=n("a"),fx=e("src/runtime/internal/Component.ts"),mx=e(")"),xx=i(),je=n("li"),gx=e("Svelte uses "),il=n("code"),Ex=e("$$invalidate"),_x=e(" to update the value of a reactive variable too."),bx=i(),cl=n("li"),wx=e("Svelte sorts the reactive declarations and statements, based on the dependency relationship between the declarations and statements"),qi=n("ul"),U=n("li"),pl=n("code"),$x=e("quadrupled"),Ox=e(" depends on "),kl=n("code"),Dx=e("doubled"),Sx=e(", so "),hl=n("code"),Tx=e("quadrupled"),Nx=e(" is evaluated and "),vl=n("code"),Cx=e("$$invalidate"),Ix=e("d after "),dl=n("code"),Lx=e("doubled"),Px=e("."),Ax=i(),Me=n("li"),Hx=e("You may have noticed that the order of the variables in the array returned "),ul=n("code"),jx=e("[doubled, tripled, quadrupled, count]"),Mx=e(" may be different from the output in the latest Svelte version, but that's beyond the scope of this article."),Rx=i(),Re=n("p"),Gx=e("Since all reactive declarations and statements are grouped into the "),yl=n("code"),Vx=e("$$.update"),qx=e(" method, and also the fact that Svelte will sort the declarations and statements according to their dependency relationship, it is irrelevant of the location or the order you declared them."),Ux=i(),Ui=n("p"),Bx=e("The following component still works:"),Jx=i(),fl=n("div"),Wx=i(),Bi=n("p"),Ge=n("a"),zx=e("Svelte REPL"),Fx=i(),Ji=n("p"),Ve=n("strong"),Yx=e("The next thing you may ask, when is "),ml=n("code"),Zx=e("$$.update"),Kx=e(" being called?"),Qx=i(),Js=n("p"),Xx=e("Remember the "),xl=n("code"),s2=e("update"),a2=e(" function that gets called in the "),gl=n("code"),e2=e("flush"),t2=e(" function?"),n2=i(),qe=n("p"),o2=e("I put a "),El=n("code"),l2=e("NOTE:"),r2=e(" comment saying that it will be important later. Well, it is important now."),i2=i(),_l=n("div"),c2=i(),us=n("p"),p2=e("The "),bl=n("code"),k2=e("$$.update"),h2=e(" function gets called "),Wi=n("strong"),v2=e("in the same microtask"),d2=e(" with the DOM update, right before we called the "),wl=n("code"),u2=e("$$.fragment.p()"),y2=e(" to update the DOM."),f2=i(),zi=n("p"),m2=e("The implication of the above fact is"),ap=i(),I=n("section"),Fi=n("h3"),Ue=n("a"),x2=e("1. Execution of all reactive declarations and statements are batched"),g2=i(),Yi=n("p"),E2=e("Just as how DOM updates are batched, reactive declarations and statements are batched too!"),_2=i(),$l=n("div"),b2=i(),Zi=n("p"),Be=n("a"),w2=e("Svelte REPL"),$2=i(),Je=n("p"),O2=e("When "),Ol=n("code"),D2=e("update()"),S2=e(" get called,"),T2=i(),G=n("ol"),z=n("li"),N2=e("Similar to the "),Dl=n("a"),C2=e("flow described above"),I2=e(", "),Sl=n("code"),L2=e("$$invalidate"),P2=e(" both "),Ki=n("strong"),A2=e('"givenName"'),H2=e(" and "),Qi=n("strong"),j2=e('"familyName"'),M2=e(", and schedules an update"),R2=i(),Xi=n("li"),sc=n("strong"),G2=e("-- End of task --"),V2=i(),ac=n("li"),ec=n("strong"),q2=e("-- Start of microtask--"),U2=i(),ca=n("li"),Tl=n("code"),B2=e("flush()"),J2=e(" calls "),Nl=n("code"),W2=e("update()"),z2=e(" for each component marked dirty"),F2=i(),We=n("li"),Y2=e("Runs "),Cl=n("code"),Z2=e("$$.update()"),ze=n("ul"),Z=n("li"),K2=e("As "),tc=n("strong"),Q2=e('"givenName"'),X2=e(" and "),nc=n("strong"),s3=e('"familyName"'),a3=e(" has changed, evaluates and "),Il=n("code"),e3=e("$$invalidate"),t3=i(),oc=n("strong"),n3=e('"name"'),o3=i(),pa=n("li"),l3=e("As "),lc=n("strong"),r3=e('"name"'),i3=e(" has changed, executes "),Ll=n("code"),c3=e("console.log('name', name);"),p3=i(),Fe=n("li"),k3=e("Calls "),Pl=n("code"),h3=e("$$.fragment.p(...)"),v3=e(" to update the DOM."),d3=i(),V=n("p"),u3=e("As you can see, even though we've updated "),Al=n("code"),y3=e("givenName"),f3=e(" and "),Hl=n("code"),m3=e("familyName"),x3=e(", we only evaluate "),jl=n("code"),g3=e("name"),E3=e(" and executes "),Ml=n("code"),_3=e("console.log('name', name)"),b3=i(),rc=n("strong"),w3=e("once"),$3=e(" instead of twice:"),O3=i(),Rl=n("div"),ep=i(),H=n("section"),ic=n("h3"),Ye=n("a"),D3=e("2. The value of reactive variable outside of reactive declarations and statements may not be up to date"),S3=i(),cc=n("p"),T3=e("Because the reactive declarations and statements are batched and executed in the next microtask, you can't expect the value to be updated synchronously."),N3=i(),Gl=n("div"),C3=i(),pc=n("p"),Ze=n("a"),I3=e("Svelte REPL"),L3=i(),Ke=n("p"),P3=e("Instead, you "),kc=n("strong"),A3=e("have to"),H3=e(" refer the reactive variable in another reactive declaration or statement:"),j3=i(),Vl=n("div"),tp=i(),K=n("section"),hc=n("h3"),Qe=n("a"),M3=e("Sorting of reactive declarations and statements"),R3=i(),vc=n("p"),G3=e("Svelte tries to preserve the order of reactive declarations and statements as they are declared as much as possible."),V3=i(),Xe=n("p"),q3=e("However, if one reactive declaration or statement refers to a variable that was defined by another reactive declaration, then, "),dc=n("strong"),U3=e("it will be inserted after the latter reactive declaration"),B3=e(":"),J3=i(),ql=n("div"),np=i(),L=n("section"),uc=n("h3"),st=n("a"),W3=e("Reactive variable that is not reactive"),z3=i(),at=n("p"),F3=e("The Svelte compiler tracks all the variables declared in the "),Ul=n("code"),Y3=e("<script>"),Z3=e(" tag."),K3=i(),et=n("p"),Q3=e("If all the variables of a reactive declaration or statement refers to, never gets mutated or reassigned, then the reactive declaration or statement will not be added into "),Bl=n("code"),X3=e("$$.update"),sg=e("."),ag=i(),yc=n("p"),eg=e("For example:"),tg=i(),Jl=n("div"),ng=i(),fc=n("p"),tt=n("a"),og=e("Svelte REPL"),lg=i(),Ws=n("p"),rg=e("Since, "),Wl=n("code"),ig=e("count"),cg=e(" never gets mutated or reassigned, Svelte optimises the compiled output by not defining "),zl=n("code"),pg=e("$$self.$$.update"),kg=e("."),hg=i(),Fl=n("div"),op=i(),Yl=n("section"),mc=n("h2"),nt=n("a"),vg=e("Summary"),lp=i(),Zl=n("section"),xc=n("h3"),ot=n("a"),dg=e("1. Svelte keeps track of which variables are dirty and batched the DOM updates."),rp=i(),Kl=n("section"),gc=n("h3"),lt=n("a"),ug=e("2. Using bitmask, Svelte able to generate a more compact compiled code."),ip=i(),Ql=n("section"),Ec=n("h3"),rt=n("a"),yg=e("3. Reactive declarations and statements are executed in batch, just like DOM updates"),cp=i(),B=n("section"),_c=n("h2"),it=n("a"),fg=e("Closing Note"),mg=i(),ct=n("p"),xg=e("If you wish to know more, "),pt=n("a"),gg=e("follow me on Twitter"),Eg=e("."),_g=i(),ys=n("p"),bg=e("I'll post it on Twitter when the next part is ready, where I'll be covering "),kt=n("a"),wg=e("logic blocks"),$g=e(", "),ht=n("a"),Og=e("slots"),Dg=e(", "),vt=n("a"),Sg=e("context"),Tg=e(", and many others."),Ng=i(),bc=n("p"),dt=n("strong"),Cg=e("\u2B05 \u2B05  Previously in "),Xl=n("a"),Ig=e("Part 1"),Lg=e("."),Pg=i(),wc=n("p"),ut=n("strong"),Ag=e("\u27A1 \u27A1  Continue reading on "),sr=n("a"),Hg=e("Part 3"),jg=e("."),pp=i(),ka=n("section"),$c=n("h2"),yt=n("a"),Mg=e("Further Resources"),Rg=i(),F=n("ul"),ft=n("li"),Gg=e("Rich Harris shares about "),mt=n("a"),Vg=e("Bitmask Tracking at Svelte Society NYC"),qg=e("."),Ug=i(),ha=n("li"),Bg=e("Svelte Tutorial - "),xt=n("a"),Jg=e("Reactivity"),Wg=i(),gt=n("a"),zg=e("https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/"),Fg=i(),ar=n("li"),Et=n("a"),Yg=e("The Art of Bitmasking"),Zg=e(" by Shakib Ahmed"),Kg=i(),er=n("li"),_t=n("a"),Qg=e("Bitmasks: A very esoteric (and impractical) way of managing booleans"),Xg=e(" by Basti Ortiz"),sE=i(),Oc=n("li"),bt=n("a"),aE=e("MDN: Bitwise Operators"),this.h()},l(p){T=o(p,"P",{});var k=l(T);q=o(k,"STRONG",{});var kp=l(q);Ds=t(kp,"\u2B05 \u2B05  Previously in "),ms=o(kp,"A",{href:!0});var xE=l(ms);C=t(xE,"Part 1"),xE.forEach(a),es=t(kp,"."),kp.forEach(a),k.forEach(a),Da=c(p),ts=o(p,"P",{});var wt=l(ts);Dt=o(wt,"A",{href:!0});var gE=l(Dt);tk=t(gE,"Previously"),gE.forEach(a),nk=t(wt,", when I mentioned the "),St=o(wt,"CODE",{class:!0});var EE=l(St);ok=t(EE,"$$invalidate"),EE.forEach(a),lk=t(wt," function, I explained that the "),Tt=o(wt,"CODE",{class:!0});var _E=l(Tt);rk=t(_E,"$$invalidate"),_E.forEach(a),ik=t(wt," function works conceptually like the following:"),wt.forEach(a),Gc=c(p),Sa=o(p,"DIV",{class:!0});var z6=l(Sa);z6.forEach(a),Vc=c(p),xs=o(p,"P",{});var tr=l(xs);ck=t(tr,"but that's not the exact implementation of the "),Nt=o(tr,"CODE",{class:!0});var bE=l(Nt);pk=t(bE,"$$invaldiate"),bE.forEach(a),kk=t(tr," function. So in this article, we are going to look at how "),Ct=o(tr,"CODE",{class:!0});var wE=l(Ct);hk=t(wE,"$$invalidate"),wE.forEach(a),vk=t(tr," is implemented in Svelte."),tr.forEach(a),qc=c(p),Ys=o(p,"P",{});var hp=l(Ys);dk=t(hp,"At the point of writing, Svelte is at "),Ta=o(hp,"A",{href:!0,rel:!0});var $E=l(Ta);uk=t($E,"v3.20.1"),$E.forEach(a),yk=t(hp,"."),hp.forEach(a),Uc=c(p),gs=o(p,"SECTION",{});var nr=l(gs);$r=o(nr,"H2",{});var OE=l($r);Na=o(OE,"A",{href:!0,id:!0});var DE=l(Na);fk=t(DE,"Pre v3.16.0"),DE.forEach(a),OE.forEach(a),mk=c(nr),W=o(nr,"P",{});var bs=l(W);xk=t(bs,"There's a big optimisation that changes the underlying implementation of the "),It=o(bs,"CODE",{class:!0});var SE=l(It);gk=t(SE,"$$invalidate"),SE.forEach(a),Ek=t(bs," function in "),Ca=o(bs,"A",{href:!0,rel:!0});var TE=l(Ca);_k=t(TE,"v3.16.0"),TE.forEach(a),bk=t(bs,", namely in "),Ia=o(bs,"A",{href:!0,rel:!0});var NE=l(Ia);wk=t(NE,"#3945"),NE.forEach(a),$k=t(bs,". The underlying concept doesn't change, but it'll be much easier to understand about "),Lt=o(bs,"CODE",{class:!0});var CE=l(Lt);Ok=t(CE,"$$invalidate"),CE.forEach(a),Dk=t(bs," prior the change and learn about the optimisation change separately."),bs.forEach(a),Sk=c(nr),La=o(nr,"P",{});var vp=l(La);Tk=t(vp,"Let's explain some of the variables that you are going to see, some of which was introduced in "),Pt=o(vp,"A",{href:!0});var IE=l(Pt);Nk=t(IE,"Part 1"),IE.forEach(a),Ck=t(vp,":"),vp.forEach(a),nr.forEach(a),Bc=c(p),w=o(p,"SECTION",{});var S=l(w);Or=o(S,"H3",{});var LE=l(Or);Pa=o(LE,"A",{href:!0,id:!0});var PE=l(Pa);Ik=t(PE,"$$.ctx"),PE.forEach(a),LE.forEach(a),Lk=c(S),Aa=o(S,"P",{});var dp=l(Aa);Pk=t(dp,"There's no official name for it. You can call it "),Dr=o(dp,"STRONG",{});var AE=l(Dr);Ak=t(AE,"context"),AE.forEach(a),Hk=t(dp," as it is the context which the template is based on to render onto the DOM."),dp.forEach(a),jk=c(S),Ha=o(S,"P",{});var up=l(Ha);Mk=t(up,"I called it "),At=o(up,"A",{href:!0});var HE=l(At);Rk=t(HE,"instance variables"),HE.forEach(a),Gk=t(up,". As it is a JavaScript Object that contains all the variables that you:"),up.forEach(a),Vk=c(S),Ss=o(S,"UL",{});var or=l(Ss);ja=o(or,"LI",{});var yp=l(ja);qk=t(yp,"declared in the "),Ht=o(yp,"CODE",{class:!0});var jE=l(Ht);Uk=t(jE,"<script>"),jE.forEach(a),Bk=t(yp," tag"),yp.forEach(a),Jk=c(or),Sr=o(or,"LI",{});var ME=l(Sr);Wk=t(ME,"mutated or reassigned"),ME.forEach(a),zk=c(or),Tr=o(or,"LI",{});var RE=l(Tr);Fk=t(RE,"referenced in the template"),RE.forEach(a),or.forEach(a),Yk=c(S),Nr=o(S,"P",{});var GE=l(Nr);Zk=t(GE,"that belongs to a component instance."),GE.forEach(a),Kk=c(S),Cr=o(S,"P",{});var VE=l(Cr);Qk=t(VE,"The instance variables themselves can be of a primitive value, object, array or function."),VE.forEach(a),Xk=c(S),Ts=o(S,"P",{});var lr=l(Ts);sh=t(lr,"The "),jt=o(lr,"CODE",{class:!0});var qE=l(jt);ah=t(qE,"instance"),qE.forEach(a),eh=t(lr," function creates and returns the "),Mt=o(lr,"CODE",{class:!0});var UE=l(Mt);th=t(UE,"ctx"),UE.forEach(a),nh=t(lr," object."),lr.forEach(a),oh=c(S),Ns=o(S,"P",{});var rr=l(Ns);lh=t(rr,"Functions declared in the "),Rt=o(rr,"CODE",{class:!0});var BE=l(Rt);rh=t(BE,"<script>"),BE.forEach(a),ih=t(rr," tag will refer to the instance variable that is scoped withn the "),Gt=o(rr,"CODE",{class:!0});var JE=l(Gt);ch=t(JE,"instance"),JE.forEach(a),ph=t(rr," function closure:"),rr.forEach(a),kh=c(S),Vt=o(S,"DIV",{class:!0});var F6=l(Vt);F6.forEach(a),hh=c(S),Ir=o(S,"P",{});var WE=l(Ir);Ma=o(WE,"A",{href:!0,rel:!0});var zE=l(Ma);vh=t(zE,"Svelte REPL"),zE.forEach(a),WE.forEach(a),dh=c(S),qt=o(S,"DIV",{class:!0});var Y6=l(qt);Y6.forEach(a),uh=c(S),Cs=o(S,"P",{});var ir=l(Cs);yh=t(ir,"Whenever a new instance of a component is created, the "),Ut=o(ir,"CODE",{class:!0});var FE=l(Ut);fh=t(FE,"instance"),FE.forEach(a),mh=t(ir," function is called and the "),Bt=o(ir,"CODE",{class:!0});var YE=l(Bt);xh=t(YE,"ctx"),YE.forEach(a),gh=t(ir," object is created and captured within a new closure scope."),ir.forEach(a),S.forEach(a),Jc=c(p),g=o(p,"SECTION",{});var $=l(g);Lr=o($,"H3",{});var ZE=l(Lr);Ra=o(ZE,"A",{href:!0,id:!0});var KE=l(Ra);Eh=t(KE,"$$.dirty"),KE.forEach(a),ZE.forEach(a),_h=c($),Jt=o($,"P",{});var eE=l(Jt);Wt=o(eE,"CODE",{class:!0});var QE=l(Wt);bh=t(QE,"$$.dirty"),QE.forEach(a),wh=t(eE," is a object that is used to track which instance variable had just changed and needs to be updated onto the DOM."),eE.forEach(a),$h=c($),Pr=o($,"P",{});var XE=l(Pr);Oh=t(XE,"For example, in the following Svelte component:"),XE.forEach(a),Dh=c($),zt=o($,"DIV",{class:!0});var Z6=l(zt);Z6.forEach(a),Sh=c($),Ar=o($,"P",{});var s_=l(Ar);Ga=o(s_,"A",{href:!0,rel:!0});var a_=l(Ga);Th=t(a_,"Svelte REPL"),a_.forEach(a),s_.forEach(a),Nh=c($),ns=o($,"P",{});var va=l(ns);Ch=t(va,"The initial "),Ft=o(va,"CODE",{class:!0});var e_=l(Ft);Ih=t(e_,"$$.dirty"),e_.forEach(a),Lh=t(va," is "),Yt=o(va,"CODE",{class:!0});var t_=l(Yt);Ph=t(t_,"null"),t_.forEach(a),Ah=t(va," ("),Va=o(va,"A",{href:!0,rel:!0});var n_=l(Va);Hh=t(n_,"source code"),n_.forEach(a),jh=t(va,")."),va.forEach(a),Mh=c($),Is=o($,"P",{});var cr=l(Is);Rh=t(cr,"If you clicked on the "),Hr=o(cr,"STRONG",{});var o_=l(Hr);Gh=t(o_,'"+ Agility"'),o_.forEach(a),Vh=t(cr," button, "),Zt=o(cr,"CODE",{class:!0});var l_=l(Zt);qh=t(l_,"$$.dirty"),l_.forEach(a),Uh=t(cr," will turn into:"),cr.forEach(a),Bh=c($),Kt=o($,"DIV",{class:!0});var K6=l(Kt);K6.forEach(a),Jh=c($),Ls=o($,"P",{});var pr=l(Ls);Wh=t(pr,"If you clicked on the "),jr=o(pr,"STRONG",{});var r_=l(jr);zh=t(r_,'"Level Up"'),r_.forEach(a),Fh=t(pr," button, "),Qt=o(pr,"CODE",{class:!0});var i_=l(Qt);Yh=t(i_,"$$.dirty"),i_.forEach(a),Zh=t(pr," will turn into:"),pr.forEach(a),Kh=c($),Xt=o($,"DIV",{class:!0});var Q6=l(Xt);Q6.forEach(a),Qh=c($),sn=o($,"P",{});var tE=l(sn);an=o(tE,"CODE",{class:!0});var c_=l(an);Xh=t(c_,"$$.dirty"),c_.forEach(a),sv=t(tE," is useful for Svelte, so that it doesn't update the DOM unnecessarily."),tE.forEach(a),av=c($),Ps=o($,"P",{});var kr=l(Ps);ev=t(kr,"If you looked at the "),Mr=o(kr,"STRONG",{});var p_=l(Mr);tv=t(p_,"p (u_p_date)"),p_.forEach(a),nv=t(kr," function of the compiled code, you will see Svelte checks whether a variable is marked in "),en=o(kr,"CODE",{class:!0});var k_=l(en);ov=t(k_,"$$.dirty"),k_.forEach(a),lv=t(kr,", before updating the DOM."),kr.forEach(a),rv=c($),tn=o($,"DIV",{class:!0});var X6=l(tn);X6.forEach(a),iv=c($),As=o($,"P",{});var hr=l(As);cv=t(hr,"After Svelte updates the DOM, the "),nn=o(hr,"CODE",{class:!0});var h_=l(nn);pv=t(h_,"$$.dirty"),h_.forEach(a),kv=t(hr," is set back to "),on=o(hr,"CODE",{class:!0});var v_=l(on);hv=t(v_,"null"),v_.forEach(a),vv=t(hr," to indicate all changes has been applied onto the DOM."),hr.forEach(a),$.forEach(a),Wc=c(p),u=o(p,"SECTION",{});var m=l(u);Rr=o(m,"H3",{});var d_=l(Rr);qa=o(d_,"A",{href:!0,id:!0});var u_=l(qa);dv=t(u_,"$$invalidate"),u_.forEach(a),d_.forEach(a),uv=c(m),ln=o(m,"P",{});var nE=l(ln);rn=o(nE,"CODE",{class:!0});var y_=l(rn);yv=t(y_,"$$invalidate"),y_.forEach(a),fv=t(nE," is the secret behind reactivity in Svelte."),nE.forEach(a),mv=c(m),Gr=o(m,"P",{});var f_=l(Gr);xv=t(f_,"Whenever a variable is"),f_.forEach(a),gv=c(m),Ua=o(m,"UL",{});var fp=l(Ua);cn=o(fp,"LI",{});var oE=l(cn);Ev=t(oE,"reassigned "),pn=o(oE,"CODE",{class:!0});var m_=l(pn);_v=t(m_,"(foo = 1)"),m_.forEach(a),oE.forEach(a),bv=c(fp),kn=o(fp,"LI",{});var lE=l(kn);wv=t(lE,"mutated "),hn=o(lE,"CODE",{class:!0});var x_=l(hn);$v=t(x_,"(foo.bar = 1)"),x_.forEach(a),lE.forEach(a),fp.forEach(a),Ov=c(m),Ba=o(m,"P",{});var mp=l(Ba);Dv=t(mp,"Svelte will wrap the assignment or update around with the "),vn=o(mp,"CODE",{class:!0});var g_=l(vn);Sv=t(g_,"$$invalidate"),g_.forEach(a),Tv=t(mp," function:"),mp.forEach(a),Nv=c(m),dn=o(m,"DIV",{class:!0});var s4=l(dn);s4.forEach(a),Cv=c(m),Ja=o(m,"P",{});var xp=l(Ja);Iv=t(xp,"the "),un=o(xp,"CODE",{class:!0});var E_=l(un);Lv=t(E_,"$$invalidate"),E_.forEach(a),Pv=t(xp," function will:"),xp.forEach(a),Av=c(m),os=o(m,"OL",{});var da=l(os);yn=o(da,"LI",{});var rE=l(yn);Hv=t(rE,"update the variable in "),fn=o(rE,"CODE",{class:!0});var __=l(fn);jv=t(__,"$$.ctx"),__.forEach(a),rE.forEach(a),Mv=c(da),mn=o(da,"LI",{});var iE=l(mn);Rv=t(iE,"mark the variable in "),xn=o(iE,"CODE",{class:!0});var b_=l(xn);Gv=t(b_,"$$.dirty"),b_.forEach(a),iE.forEach(a),Vv=c(da),Vr=o(da,"LI",{});var w_=l(Vr);qv=t(w_,"schedule an update"),w_.forEach(a),Uv=c(da),qr=o(da,"LI",{});var $_=l(qr);Bv=t($_,"return the value of the assignment or update expression"),$_.forEach(a),da.forEach(a),Jv=c(m),gn=o(m,"DIV",{class:!0});var a4=l(gn);a4.forEach(a),Wv=c(m),Ur=o(m,"P",{});var O_=l(Ur);Wa=o(O_,"A",{href:!0,rel:!0});var D_=l(Wa);zv=t(D_,"Source code"),D_.forEach(a),O_.forEach(a),Fv=c(m),za=o(m,"P",{});var gp=l(za);Yv=t(gp,"One interesting note about the function "),En=o(gp,"CODE",{class:!0});var S_=l(En);Zv=t(S_,"$$invalidate"),S_.forEach(a),Kv=t(gp," is that, it wraps around the assignment or update expression and returns what the expression evaluates to."),gp.forEach(a),Qv=c(m),Fa=o(m,"P",{});var Ep=l(Fa);Xv=t(Ep,"This makes "),_n=o(Ep,"CODE",{class:!0});var T_=l(_n);sd=t(T_,"$$invalidate"),T_.forEach(a),ad=t(Ep," chainable:"),Ep.forEach(a),ed=c(m),bn=o(m,"DIV",{class:!0});var e4=l(bn);e4.forEach(a),td=c(m),Br=o(m,"P",{});var N_=l(Br);nd=t(N_,"It seemed complex when there's a lot of assignment or update expressions in 1 statement! \u{1F648}"),N_.forEach(a),od=c(m),Hs=o(m,"P",{});var vr=l(Hs);ld=t(vr,"The 2nd argument of "),wn=o(vr,"CODE",{class:!0});var C_=l(wn);rd=t(C_,"$$invalidate"),C_.forEach(a),id=t(vr," is the assignment or update expressions verbatim. But if it contains any assignment or update sub-expressions, we recursively wrap it with "),$n=o(vr,"CODE",{class:!0});var I_=l($n);cd=t(I_,"$$invalidate"),I_.forEach(a),pd=t(vr,"."),vr.forEach(a),kd=c(m),Ya=o(m,"P",{});var _p=l(Ya);hd=t(_p,"In case where the assignment expression changes a property of an object, we pass the object in as a 3rd argument of the "),On=o(_p,"CODE",{class:!0});var L_=l(On);vd=t(L_,"$$invalidate"),L_.forEach(a),dd=t(_p," function, eg:"),_p.forEach(a),ud=c(m),Dn=o(m,"DIV",{class:!0});var t4=l(Dn);t4.forEach(a),yd=c(m),ls=o(m,"P",{});var ua=l(ls);fd=t(ua,"So that, we update the "),Sn=o(ua,"CODE",{class:!0});var P_=l(Sn);md=t(P_,'"obj"'),P_.forEach(a),xd=t(ua," variable to "),Tn=o(ua,"CODE",{class:!0});var A_=l(Tn);gd=t(A_,"obj"),A_.forEach(a),Ed=t(ua," instead of the value of the 2nd argument, "),Nn=o(ua,"CODE",{class:!0});var H_=l(Nn);_d=t(H_,'"hello"'),H_.forEach(a),bd=t(ua,"."),ua.forEach(a),m.forEach(a),zc=c(p),_=o(p,"SECTION",{});var O=l(_);Jr=o(O,"H3",{});var j_=l(Jr);Za=o(j_,"A",{href:!0,id:!0});var M_=l(Za);wd=t(M_,"schedule_update"),M_.forEach(a),j_.forEach(a),$d=c(O),Cn=o(O,"P",{});var cE=l(Cn);In=o(cE,"CODE",{class:!0});var R_=l(In);Od=t(R_,"schedule_update"),R_.forEach(a),Dd=t(cE," schedules Svelte to update the DOM with the changes made thus far."),cE.forEach(a),Sd=c(O),rs=o(O,"P",{});var ya=l(rs);Td=t(ya,"Svelte, at the point of writing ("),Ka=o(ya,"A",{href:!0,rel:!0});var G_=l(Ka);Nd=t(G_,"v3.20.1"),G_.forEach(a),Cd=t(ya,"), uses "),Qa=o(ya,"A",{href:!0,rel:!0});var V_=l(Qa);Id=t(V_,"microtask queue"),V_.forEach(a),Ld=t(ya," to batch change updates. The actual DOM update happens in the next microtask, so that any synchronous "),Ln=o(ya,"CODE",{class:!0});var q_=l(Ln);Pd=t(q_,"$$invalidate"),q_.forEach(a),Ad=t(ya," operations that happen within the same task get batched into the next DOM update."),ya.forEach(a),Hd=c(O),Wr=o(O,"P",{});var U_=l(Wr);jd=t(U_,"To schedule a next microtask, Svelte uses the Promise callback."),U_.forEach(a),Md=c(O),Pn=o(O,"DIV",{class:!0});var n4=l(Pn);n4.forEach(a),Rd=c(O),Xa=o(O,"P",{});var bp=l(Xa);Gd=t(bp,"In "),An=o(bp,"CODE",{class:!0});var B_=l(An);Vd=t(B_,"flush"),B_.forEach(a),qd=t(bp,", we call update for each component marked dirty:"),bp.forEach(a),Ud=c(O),Hn=o(O,"DIV",{class:!0});var o4=l(Hn);o4.forEach(a),Bd=c(O),zr=o(O,"P",{});var J_=l(zr);se=o(J_,"A",{href:!0,rel:!0});var W_=l(se);Jd=t(W_,"Source code"),W_.forEach(a),J_.forEach(a),Wd=c(O),Fr=o(O,"P",{});var z_=l(Fr);zd=t(z_,"So, if you write a Svelte component like this:"),z_.forEach(a),Fd=c(O),jn=o(O,"DIV",{class:!0});var l4=l(jn);l4.forEach(a),Yd=c(O),Yr=o(O,"P",{});var F_=l(Yr);ae=o(F_,"A",{href:!0,rel:!0});var Y_=l(ae);Zd=t(Y_,"Svelte REPL"),Y_.forEach(a),F_.forEach(a),Kd=c(O),js=o(O,"P",{});var dr=l(js);Qd=t(dr,"The DOM update for the "),Mn=o(dr,"CODE",{class:!0});var Z_=l(Mn);Xd=t(Z_,"givenName"),Z_.forEach(a),su=t(dr," and "),Rn=o(dr,"CODE",{class:!0});var K_=l(Rn);au=t(K_,"familyName"),K_.forEach(a),eu=t(dr," happens in the same microtask:"),dr.forEach(a),tu=c(O),y=o(O,"OL",{});var x=l(y);Ms=o(x,"LI",{});var ur=l(Ms);nu=t(ur,"Click on the "),Zr=o(ur,"STRONG",{});var Q_=l(Zr);ou=t(Q_,'"Update"'),Q_.forEach(a),lu=t(ur," to call the "),Gn=o(ur,"CODE",{class:!0});var X_=l(Gn);ru=t(X_,"update"),X_.forEach(a),iu=t(ur," function"),ur.forEach(a),cu=c(x),Kr=o(x,"LI",{});var sb=l(Kr);Vn=o(sb,"CODE",{class:!0});var ab=l(Vn);pu=t(ab,"$$invalidate('givenName', givenName = 'Li Hau')"),ab.forEach(a),sb.forEach(a),ku=c(x),Zs=o(x,"LI",{});var Dc=l(Zs);hu=t(Dc,"Mark the variable "),qn=o(Dc,"CODE",{class:!0});var eb=l(qn);vu=t(eb,"givenName"),eb.forEach(a),du=t(Dc," dirty, "),Un=o(Dc,"CODE",{class:!0});var tb=l(Un);uu=t(tb,"$$.dirty['givenName'] = true"),tb.forEach(a),Dc.forEach(a),yu=c(x),Bn=o(x,"LI",{});var pE=l(Bn);fu=t(pE,"Schedule an update, "),Jn=o(pE,"CODE",{class:!0});var nb=l(Jn);mu=t(nb,"schedule_update()"),nb.forEach(a),pE.forEach(a),xu=c(x),ee=o(x,"LI",{});var wp=l(ee);gu=t(wp,"Since it's the first update in the call stack, push the "),Wn=o(wp,"CODE",{class:!0});var ob=l(Wn);Eu=t(ob,"flush"),ob.forEach(a),_u=t(wp," function into the microtask queue"),wp.forEach(a),bu=c(x),Qr=o(x,"LI",{});var lb=l(Qr);zn=o(lb,"CODE",{class:!0});var rb=l(zn);wu=t(rb,"$$invalidate('familyName', familyName = 'Tan')"),rb.forEach(a),lb.forEach(a),$u=c(x),Ks=o(x,"LI",{});var Sc=l(Ks);Ou=t(Sc,"Mark the variable "),Fn=o(Sc,"CODE",{class:!0});var ib=l(Fn);Du=t(ib,"familyName"),ib.forEach(a),Su=t(Sc," dirty, "),Yn=o(Sc,"CODE",{class:!0});var cb=l(Yn);Tu=t(cb,"$$.dirty['familyName'] = true"),cb.forEach(a),Sc.forEach(a),Nu=c(x),Zn=o(x,"LI",{});var kE=l(Zn);Cu=t(kE,"Schedule an update, "),Kn=o(kE,"CODE",{class:!0});var pb=l(Kn);Iu=t(pb,"schedule_update()"),pb.forEach(a),kE.forEach(a),Lu=c(x),te=o(x,"LI",{});var $p=l(te);Pu=t($p,"Since "),Qn=o($p,"CODE",{class:!0});var kb=l(Qn);Au=t(kb,"update_scheduled = true"),kb.forEach(a),Hu=t($p,", do nothing."),$p.forEach(a),ju=c(x),Xr=o(x,"LI",{});var hb=l(Xr);si=o(hb,"STRONG",{});var vb=l(si);Mu=t(vb,"-- End of task --"),vb.forEach(a),hb.forEach(a),Ru=c(x),ai=o(x,"LI",{});var db=l(ai);ei=o(db,"STRONG",{});var ub=l(ei);Gu=t(ub,"-- Start of microtask--"),ub.forEach(a),db.forEach(a),Vu=c(x),Qs=o(x,"LI",{});var Tc=l(Qs);Xn=o(Tc,"CODE",{class:!0});var yb=l(Xn);qu=t(yb,"flush()"),yb.forEach(a),Uu=t(Tc," calls "),so=o(Tc,"CODE",{class:!0});var fb=l(so);Bu=t(fb,"update()"),fb.forEach(a),Ju=t(Tc," for each component marked dirty"),Tc.forEach(a),Wu=c(x),Xs=o(x,"LI",{});var Nc=l(Xs);zu=t(Nc,"Calls "),ao=o(Nc,"CODE",{class:!0});var mb=l(ao);Fu=t(mb,"$$.fragment.p($$.dirty, $$.ctx)"),mb.forEach(a),Yu=t(Nc,"."),ne=o(Nc,"UL",{});var Op=l(ne);oe=o(Op,"LI",{});var Dp=l(oe);eo=o(Dp,"CODE",{class:!0});var xb=l(eo);Zu=t(xb,"$$.dirty"),xb.forEach(a),Ku=t(Dp," is now "),to=o(Dp,"CODE",{class:!0});var gb=l(to);Qu=t(gb,"{ givenName: true, familyName: true }"),gb.forEach(a),Dp.forEach(a),Xu=c(Op),le=o(Op,"LI",{});var Sp=l(le);no=o(Sp,"CODE",{class:!0});var Eb=l(no);sy=t(Eb,"$$.ctx"),Eb.forEach(a),ay=t(Sp," is now "),oo=o(Sp,"CODE",{class:!0});var _b=l(oo);ey=t(_b,"{ givenName: 'Li Hau', familyName: 'Tan' }"),_b.forEach(a),Sp.forEach(a),Op.forEach(a),Nc.forEach(a),ty=c(x),sa=o(x,"LI",{});var Cc=l(sa);ny=t(Cc,"In "),lo=o(Cc,"CODE",{class:!0});var bb=l(lo);oy=t(bb,"function p(dirty, ctx)"),bb.forEach(a),ly=t(Cc,","),re=o(Cc,"UL",{});var Tp=l(re);aa=o(Tp,"LI",{});var Ic=l(aa);ry=t(Ic,"Update the 1st text node to "),ro=o(Ic,"CODE",{class:!0});var wb=l(ro);iy=t(wb,"$$.ctx['givenName']"),wb.forEach(a),cy=t(Ic," if "),io=o(Ic,"CODE",{class:!0});var $b=l(io);py=t($b,"$$.dirty['givenName'] === true"),$b.forEach(a),Ic.forEach(a),ky=c(Tp),ea=o(Tp,"LI",{});var Lc=l(ea);hy=t(Lc,"Update the 2nd text node to "),co=o(Lc,"CODE",{class:!0});var Ob=l(co);vy=t(Ob,"$$.ctx['familyName']"),Ob.forEach(a),dy=t(Lc," if "),po=o(Lc,"CODE",{class:!0});var Db=l(po);uy=t(Db,"$$.dirty['familyName'] === true"),Db.forEach(a),Lc.forEach(a),Tp.forEach(a),Cc.forEach(a),yy=c(x),ta=o(x,"LI",{});var Pc=l(ta);fy=t(Pc,"Resets the "),ko=o(Pc,"CODE",{class:!0});var Sb=l(ko);my=t(Sb,"$$.dirty"),Sb.forEach(a),xy=t(Pc," to "),ho=o(Pc,"CODE",{class:!0});var Tb=l(ho);gy=t(Tb,"null"),Tb.forEach(a),Pc.forEach(a),Ey=c(x),ti=o(x,"LI",{});var Nb=l(ti);_y=t(Nb,"..."),Nb.forEach(a),by=c(x),ni=o(x,"LI",{});var Cb=l(ni);oi=o(Cb,"STRONG",{});var Ib=l(oi);wy=t(Ib,"-- End of microtask--"),Ib.forEach(a),Cb.forEach(a),x.forEach(a),O.forEach(a),Fc=c(p),na=o(p,"SECTION",{});var Np=l(na);li=o(Np,"H4",{});var Lb=l(li);ie=o(Lb,"A",{href:!0,id:!0});var Pb=l(ie);$y=t(Pb,"tl/dr:"),Pb.forEach(a),Lb.forEach(a),Oy=c(Np),is=o(Np,"UL",{});var fa=l(is);cs=o(fa,"LI",{});var ma=l(cs);Dy=t(ma,"For each assignment or update, Svelte calls "),vo=o(ma,"CODE",{class:!0});var Ab=l(vo);Sy=t(Ab,"$$invalidate"),Ab.forEach(a),Ty=t(ma," to update the variable in "),uo=o(ma,"CODE",{class:!0});var Hb=l(uo);Ny=t(Hb,"$$.ctx"),Hb.forEach(a),Cy=t(ma," and mark the variable dirty in "),yo=o(ma,"CODE",{class:!0});var jb=l(yo);Iy=t(jb,"$$.dirty"),jb.forEach(a),Ly=t(ma,"."),ma.forEach(a),Py=c(fa),ri=o(fa,"LI",{});var Mb=l(ri);Ay=t(Mb,"The acutal DOM update is batched into the next microtask queue."),Mb.forEach(a),Hy=c(fa),ce=o(fa,"LI",{});var Cp=l(ce);jy=t(Cp,"To update the DOM for each component, the component "),fo=o(Cp,"CODE",{class:!0});var Rb=l(fo);My=t(Rb,"$$.fragment.p($$.diry, $$.ctx)"),Rb.forEach(a),Ry=t(Cp," is called."),Cp.forEach(a),Gy=c(fa),Rs=o(fa,"LI",{});var yr=l(Rs);Vy=t(yr,"After the DOM update, the "),mo=o(yr,"CODE",{class:!0});var Gb=l(mo);qy=t(Gb,"$$.dirty"),Gb.forEach(a),Uy=t(yr," is reset to "),xo=o(yr,"CODE",{class:!0});var Vb=l(xo);By=t(Vb,"null"),Vb.forEach(a),Jy=t(yr,"."),yr.forEach(a),fa.forEach(a),Np.forEach(a),Yc=c(p),N=o(p,"SECTION",{});var P=l(N);ii=o(P,"H2",{});var qb=l(ii);pe=o(qb,"A",{href:!0,id:!0});var Ub=l(pe);Wy=t(Ub,"v3.16.0"),Ub.forEach(a),qb.forEach(a),zy=c(P),Gs=o(P,"P",{});var fr=l(Gs);Fy=t(fr,"One big change in v3.16.0 is the PR "),ke=o(fr,"A",{href:!0,rel:!0});var Bb=l(ke);Yy=t(Bb,"#3945"),Bb.forEach(a),Zy=t(fr,", namely "),ci=o(fr,"STRONG",{});var Jb=l(ci);Ky=t(Jb,"bitmask-based change tracking"),Jb.forEach(a),Qy=t(fr,"."),fr.forEach(a),Xy=c(P),pi=o(P,"P",{});var Wb=l(pi);sf=t(Wb,"Instead of marking the variable dirty using an object:"),Wb.forEach(a),af=c(P),go=o(P,"DIV",{class:!0});var r4=l(go);r4.forEach(a),ef=c(P),ki=o(P,"P",{});var zb=l(ki);tf=t(zb,"Svelte assign each variable an index:"),zb.forEach(a),nf=c(P),Eo=o(P,"DIV",{class:!0});var i4=l(Eo);i4.forEach(a),of=c(P),he=o(P,"P",{});var Ip=l(he);lf=t(Ip,"and uses "),ve=o(Ip,"A",{href:!0,rel:!0});var Fb=l(ve);rf=t(Fb,"bitmask"),Fb.forEach(a),cf=t(Ip," to store the dirty information:"),Ip.forEach(a),pf=c(P),_o=o(P,"DIV",{class:!0});var c4=l(_o);c4.forEach(a),kf=c(P),hi=o(P,"P",{});var Yb=l(hi);hf=t(Yb,"which is far more compact than the previous compiled code."),Yb.forEach(a),P.forEach(a),Zc=c(p),b=o(p,"SECTION",{});var D=l(b);vi=o(D,"H3",{});var Zb=l(vi);de=o(Zb,"A",{href:!0,id:!0});var Kb=l(de);vf=t(Kb,"Bitmask"),Kb.forEach(a),Zb.forEach(a),df=c(D),di=o(D,"P",{});var Qb=l(di);uf=t(Qb,"For those who don't understand, allow me to quickly explain what it is."),Qb.forEach(a),yf=c(D),Vs=o(D,"P",{});var mr=l(Vs);ff=t(mr,"Of course, if you want to learn more about it, feel free to read a more detailed explanation, like "),ue=o(mr,"A",{href:!0,rel:!0});var Xb=l(ue);mf=t(Xb,"this"),Xb.forEach(a),xf=t(mr," and "),ye=o(mr,"A",{href:!0,rel:!0});var sw=l(ye);gf=t(sw,"this"),sw.forEach(a),Ef=t(mr,"."),mr.forEach(a),_f=c(D),A=o(D,"P",{});var J=l(A);bf=t(J,"The most compact way of representing a group of "),bo=o(J,"CODE",{class:!0});var aw=l(bo);wf=t(aw,"true"),aw.forEach(a),$f=t(J," or "),wo=o(J,"CODE",{class:!0});var ew=l(wo);Of=t(ew,"false"),ew.forEach(a),Df=t(J," is to use bits. If the bit is "),$o=o(J,"CODE",{class:!0});var tw=l($o);Sf=t(tw,"1"),tw.forEach(a),Tf=t(J," it is "),Oo=o(J,"CODE",{class:!0});var nw=l(Oo);Nf=t(nw,"true"),nw.forEach(a),Cf=t(J," and if it is "),Do=o(J,"CODE",{class:!0});var ow=l(Do);If=t(ow,"0"),ow.forEach(a),Lf=t(J," it is "),So=o(J,"CODE",{class:!0});var lw=l(So);Pf=t(lw,"false"),lw.forEach(a),Af=t(J,"."),J.forEach(a),Hf=c(D),qs=o(D,"P",{});var xr=l(qs);jf=t(xr,"A number can be represented in binary, "),ui=o(xr,"STRONG",{});var rw=l(ui);Mf=t(rw,"5"),rw.forEach(a),Rf=t(xr," is "),To=o(xr,"CODE",{class:!0});var iw=l(To);Gf=t(iw,"0b0101"),iw.forEach(a),Vf=t(xr," in binary."),xr.forEach(a),qf=c(D),R=o(D,"P",{});var Q=l(R);Uf=t(Q,"If "),yi=o(Q,"STRONG",{});var cw=l(yi);Bf=t(cw,"5"),cw.forEach(a),Jf=t(Q," is represented in a 4-bit binary, then it can store 4 boolean values, with the 0th and 2nd bit as "),No=o(Q,"CODE",{class:!0});var pw=l(No);Wf=t(pw,"true"),pw.forEach(a),zf=t(Q," and 1st and 3rd bit as "),Co=o(Q,"CODE",{class:!0});var kw=l(Co);Ff=t(kw,"false"),kw.forEach(a),Yf=t(Q,", (reading from the right to left, from "),fe=o(Q,"A",{href:!0,rel:!0});var hw=l(fe);Zf=t(hw,"least significant bit"),hw.forEach(a),Kf=t(Q," to the "),me=o(Q,"A",{href:!0,rel:!0});var vw=l(me);Qf=t(vw,"most significant bit"),vw.forEach(a),Xf=t(Q,")."),Q.forEach(a),sm=c(D),fi=o(D,"P",{});var dw=l(fi);mi=o(dw,"STRONG",{});var uw=l(mi);am=t(uw,"How many boolean values can a number store?"),uw.forEach(a),dw.forEach(a),em=c(D),xi=o(D,"P",{});var yw=l(xi);tm=t(yw,"That depends on the language, a 16-bit integer in Java can store 16 boolean values."),yw.forEach(a),nm=c(D),Us=o(D,"P",{});var gr=l(Us);om=t(gr,"In JavaScript, numbers can are "),xe=o(gr,"A",{href:!0,rel:!0});var fw=l(xe);lm=t(fw,"represented in 64 bits"),fw.forEach(a),rm=t(gr,". However, when using "),ge=o(gr,"A",{href:!0,rel:!0});var mw=l(ge);im=t(mw,"bitwise operations"),mw.forEach(a),cm=t(gr," on the number, JavaScript will treat the number as 32 bits."),gr.forEach(a),pm=c(D),Ee=o(D,"P",{});var Lp=l(Ee);km=t(Lp,"To inspect or modify the boolean value stored in a number, we use "),_e=o(Lp,"A",{href:!0,rel:!0});var xw=l(_e);hm=t(xw,"bitwise operations"),xw.forEach(a),vm=t(Lp,"."),Lp.forEach(a),dm=c(D),Io=o(D,"DIV",{class:!0});var p4=l(Io);p4.forEach(a),um=c(D),be=o(D,"P",{});var Pp=l(be);ym=t(Pp,"The 2nd operand we use in the bitwise operation, is like a "),we=o(Pp,"A",{href:!0,rel:!0});var gw=l(we);fm=t(gw,"mask"),gw.forEach(a),mm=t(Pp," that allow us to target a specific bit in the 1st number, that stores our boolean values."),Pp.forEach(a),xm=c(D),$e=o(D,"P",{});var Ap=l($e);gm=t(Ap,"We call the mask, "),gi=o(Ap,"STRONG",{});var Ew=l(gi);Em=t(Ew,"bitmask"),Ew.forEach(a),_m=t(Ap,"."),Ap.forEach(a),D.forEach(a),Kc=c(p),f=o(p,"SECTION",{});var E=l(f);Ei=o(E,"H3",{});var _w=l(Ei);Oe=o(_w,"A",{href:!0,id:!0});var bw=l(Oe);bm=t(bw,"Bitmask in Svelte"),bw.forEach(a),_w.forEach(a),wm=c(E),_i=o(E,"P",{});var ww=l(_i);$m=t(ww,"As mentioned earlier, we assign each variable an index:"),ww.forEach(a),Om=c(E),Lo=o(E,"DIV",{class:!0});var k4=l(Lo);k4.forEach(a),Dm=c(E),bi=o(E,"P",{});var $w=l(bi);Sm=t($w,"So instead of returning the instance variable as an JavaScript Object, we now return it as an JavaScript Array:"),$w.forEach(a),Tm=c(E),Po=o(E,"DIV",{class:!0});var h4=l(Po);h4.forEach(a),Nm=c(E),ps=o(E,"P",{});var xa=l(ps);Cm=t(xa,"The variable is accessed via "),wi=o(xa,"STRONG",{});var Ow=l(wi);Im=t(Ow,"index"),Ow.forEach(a),Lm=t(xa,", "),Ao=o(xa,"CODE",{class:!0});var Dw=l(Ao);Pm=t(Dw,"$$.ctx[index]"),Dw.forEach(a),Am=t(xa,", instead of "),$i=o(xa,"STRONG",{});var Sw=l($i);Hm=t(Sw,"variable name"),Sw.forEach(a),jm=t(xa,":"),xa.forEach(a),Mm=c(E),Ho=o(E,"DIV",{class:!0});var v4=l(Ho);v4.forEach(a),Rm=c(E),ks=o(E,"P",{});var ga=l(ks);Gm=t(ga,"The "),jo=o(ga,"CODE",{class:!0});var Tw=l(jo);Vm=t(Tw,"$$invalidate"),Tw.forEach(a),qm=t(ga," function works the same, except it takes in "),Oi=o(ga,"STRONG",{});var Nw=l(Oi);Um=t(Nw,"index"),Nw.forEach(a),Bm=t(ga," instead of "),Di=o(ga,"STRONG",{});var Cw=l(Di);Jm=t(Cw,"variable name"),Cw.forEach(a),Wm=t(ga,":"),ga.forEach(a),zm=c(E),Mo=o(E,"DIV",{class:!0});var d4=l(Mo);d4.forEach(a),Fm=c(E),Ro=o(E,"P",{});var hE=l(Ro);Go=o(hE,"CODE",{class:!0});var Iw=l(Go);Ym=t(Iw,"$$.dirty"),Iw.forEach(a),Zm=t(hE," now stores a list of numbers. Each number carries 31 boolean values, each boolean value indicates whether the variable of that index is dirty or not."),hE.forEach(a),Km=c(E),Si=o(E,"P",{});var Lw=l(Si);Qm=t(Lw,"To set a variable as dirty, we use bitwise operation:"),Lw.forEach(a),Xm=c(E),Vo=o(E,"DIV",{class:!0});var u4=l(Vo);u4.forEach(a),s1=c(E),Ti=o(E,"P",{});var Pw=l(Ti);a1=t(Pw,"And to verify whether a variable is dirty, we use bitwise operation too!"),Pw.forEach(a),e1=c(E),qo=o(E,"DIV",{class:!0});var y4=l(qo);y4.forEach(a),t1=c(E),hs=o(E,"P",{});var Ea=l(hs);n1=t(Ea,"With using bitmask, "),Uo=o(Ea,"CODE",{class:!0});var Aw=l(Uo);o1=t(Aw,"$$.dirty"),Aw.forEach(a),l1=t(Ea," is now reset to "),Bo=o(Ea,"CODE",{class:!0});var Hw=l(Bo);r1=t(Hw,"[-1]"),Hw.forEach(a),i1=t(Ea," instead of "),Jo=o(Ea,"CODE",{class:!0});var jw=l(Jo);c1=t(jw,"null"),jw.forEach(a),p1=t(Ea,"."),Ea.forEach(a),k1=c(E),Y=o(E,"P",{});var zs=l(Y);Ni=o(zs,"STRONG",{});var Mw=l(Ni);h1=t(Mw,"Trivia:"),Mw.forEach(a),v1=c(zs),Wo=o(zs,"CODE",{class:!0});var Rw=l(Wo);d1=t(Rw,"-1"),Rw.forEach(a),u1=t(zs," is "),zo=o(zs,"CODE",{class:!0});var Gw=l(zo);y1=t(Gw,"0b1111_1111"),Gw.forEach(a),f1=t(zs," in binary, where all the bits are "),Fo=o(zs,"CODE",{class:!0});var Vw=l(Fo);m1=t(Vw,"1"),Vw.forEach(a),x1=t(zs,"."),zs.forEach(a),E.forEach(a),Qc=c(p),Es=o(p,"SECTION",{});var Er=l(Es);Ci=o(Er,"H4",{});var qw=l(Ci);oa=o(qw,"A",{href:!0,id:!0});var vE=l(oa);g1=t(vE,"Destructuring "),Ii=o(vE,"STRONG",{});var Uw=l(Ii);E1=t(Uw,"$$.dirty"),Uw.forEach(a),vE.forEach(a),qw.forEach(a),_1=c(Er),vs=o(Er,"P",{});var _a=l(vs);b1=t(_a,"One code-size optimisation that Svelte does is to always destructure the "),Yo=o(_a,"CODE",{class:!0});var Bw=l(Yo);w1=t(Bw,"dirty"),Bw.forEach(a),$1=t(_a," array in the "),Li=o(_a,"STRONG",{});var Jw=l(Li);O1=t(Jw,"u_p_date function"),Jw.forEach(a),D1=t(_a," if there's less than 32 variables, since we will always access "),Zo=o(_a,"CODE",{class:!0});var Ww=l(Zo);S1=t(Ww,"dirty[0]"),Ww.forEach(a),T1=t(_a," anyway:"),_a.forEach(a),N1=c(Er),Ko=o(Er,"DIV",{class:!0});var f4=l(Ko);f4.forEach(a),Er.forEach(a),Xc=c(p),la=o(p,"SECTION",{});var Hp=l(la);Pi=o(Hp,"H4",{});var zw=l(Pi);De=o(zw,"A",{href:!0,id:!0});var Fw=l(De);C1=t(Fw,"tl/dr:"),Fw.forEach(a),zw.forEach(a),I1=c(Hp),Se=o(Hp,"UL",{});var jp=l(Se);Bs=o(jp,"LI",{});var _r=l(Bs);L1=t(_r,"The underlying mechanism for "),Qo=o(_r,"CODE",{class:!0});var Yw=l(Qo);P1=t(Yw,"$$invalidate"),Yw.forEach(a),A1=t(_r," and "),Xo=o(_r,"CODE",{class:!0});var Zw=l(Xo);H1=t(Zw,"schedule_update"),Zw.forEach(a),j1=t(_r," does not change"),_r.forEach(a),M1=c(jp),Ai=o(jp,"LI",{});var Kw=l(Ai);R1=t(Kw,"Using bitmask, the compiled code is much compact"),Kw.forEach(a),jp.forEach(a),Hp.forEach(a),sp=c(p),v=o(p,"SECTION",{});var d=l(v);Hi=o(d,"H2",{});var Qw=l(Hi);Te=o(Qw,"A",{href:!0,id:!0});var Xw=l(Te);G1=t(Xw,"Reactive Declaration"),Xw.forEach(a),Qw.forEach(a),V1=c(d),ra=o(d,"P",{});var Ac=l(ra);q1=t(Ac,"Svelte allow us to declare reactive values via the "),Ne=o(Ac,"A",{href:!0,rel:!0});var s5=l(Ne);U1=t(s5,"labeled statement"),s5.forEach(a),B1=t(Ac,", "),sl=o(Ac,"CODE",{class:!0});var a5=l(sl);J1=t(a5,"$:"),a5.forEach(a),Ac.forEach(a),W1=c(d),al=o(d,"DIV",{class:!0});var m4=l(al);m4.forEach(a),z1=c(d),ji=o(d,"P",{});var e5=l(ji);Ce=o(e5,"A",{href:!0,rel:!0});var t5=l(Ce);F1=t(t5,"Svelte REPL"),t5.forEach(a),e5.forEach(a),Y1=c(d),Ie=o(d,"P",{});var Mp=l(Ie);Z1=t(Mp,"If you look at the compiled output, you would find out that the declarative statements appeared in the "),Le=o(Mp,"A",{href:!0});var dE=l(Le);el=o(dE,"CODE",{class:!0});var n5=l(el);K1=t(n5,"instance"),n5.forEach(a),Q1=t(dE," function"),dE.forEach(a),X1=t(Mp,":"),Mp.forEach(a),sx=c(d),tl=o(d,"DIV",{class:!0});var x4=l(tl);x4.forEach(a),ax=c(d),Mi=o(d,"P",{});var o5=l(Mi);ex=t(o5,"Try reorder the reactive declarations and observe the change in the compiled output:"),o5.forEach(a),tx=c(d),nl=o(d,"DIV",{class:!0});var g4=l(nl);g4.forEach(a),nx=c(d),Ri=o(d,"P",{});var l5=l(Ri);Pe=o(l5,"A",{href:!0,rel:!0});var r5=l(Pe);ox=t(r5,"Svelte REPL"),r5.forEach(a),l5.forEach(a),lx=c(d),ol=o(d,"DIV",{class:!0});var E4=l(ol);E4.forEach(a),rx=c(d),Gi=o(d,"P",{});var i5=l(Gi);ix=t(i5,"Some observations:"),i5.forEach(a),cx=c(d),ds=o(d,"UL",{});var ba=l(ds);ia=o(ba,"LI",{});var Hc=l(ia);px=t(Hc,"When there are reactive declarations, Svelte defines a custom "),ll=o(Hc,"CODE",{class:!0});var c5=l(ll);kx=t(c5,"$$.update"),c5.forEach(a),hx=t(Hc," method."),Vi=o(Hc,"UL",{});var p5=l(Vi);_s=o(p5,"LI",{});var $t=l(_s);rl=o($t,"CODE",{class:!0});var k5=l(rl);vx=t(k5,"$$.update"),k5.forEach(a),dx=t($t," is a "),Ae=o($t,"A",{href:!0,rel:!0});var h5=l(Ae);ux=t(h5,"no-op function"),h5.forEach(a),yx=t($t," by default. (See "),He=o($t,"A",{href:!0,rel:!0});var v5=l(He);fx=t(v5,"src/runtime/internal/Component.ts"),v5.forEach(a),mx=t($t,")"),$t.forEach(a),p5.forEach(a),Hc.forEach(a),xx=c(ba),je=o(ba,"LI",{});var Rp=l(je);gx=t(Rp,"Svelte uses "),il=o(Rp,"CODE",{class:!0});var d5=l(il);Ex=t(d5,"$$invalidate"),d5.forEach(a),_x=t(Rp," to update the value of a reactive variable too."),Rp.forEach(a),bx=c(ba),cl=o(ba,"LI",{});var uE=l(cl);wx=t(uE,"Svelte sorts the reactive declarations and statements, based on the dependency relationship between the declarations and statements"),qi=o(uE,"UL",{});var u5=l(qi);U=o(u5,"LI",{});var fs=l(U);pl=o(fs,"CODE",{class:!0});var y5=l(pl);$x=t(y5,"quadrupled"),y5.forEach(a),Ox=t(fs," depends on "),kl=o(fs,"CODE",{class:!0});var f5=l(kl);Dx=t(f5,"doubled"),f5.forEach(a),Sx=t(fs,", so "),hl=o(fs,"CODE",{class:!0});var m5=l(hl);Tx=t(m5,"quadrupled"),m5.forEach(a),Nx=t(fs," is evaluated and "),vl=o(fs,"CODE",{class:!0});var x5=l(vl);Cx=t(x5,"$$invalidate"),x5.forEach(a),Ix=t(fs,"d after "),dl=o(fs,"CODE",{class:!0});var g5=l(dl);Lx=t(g5,"doubled"),g5.forEach(a),Px=t(fs,"."),fs.forEach(a),u5.forEach(a),uE.forEach(a),Ax=c(ba),Me=o(ba,"LI",{});var Gp=l(Me);Hx=t(Gp,"You may have noticed that the order of the variables in the array returned "),ul=o(Gp,"CODE",{class:!0});var E5=l(ul);jx=t(E5,"[doubled, tripled, quadrupled, count]"),E5.forEach(a),Mx=t(Gp," may be different from the output in the latest Svelte version, but that's beyond the scope of this article."),Gp.forEach(a),ba.forEach(a),Rx=c(d),Re=o(d,"P",{});var Vp=l(Re);Gx=t(Vp,"Since all reactive declarations and statements are grouped into the "),yl=o(Vp,"CODE",{class:!0});var _5=l(yl);Vx=t(_5,"$$.update"),_5.forEach(a),qx=t(Vp," method, and also the fact that Svelte will sort the declarations and statements according to their dependency relationship, it is irrelevant of the location or the order you declared them."),Vp.forEach(a),Ux=c(d),Ui=o(d,"P",{});var b5=l(Ui);Bx=t(b5,"The following component still works:"),b5.forEach(a),Jx=c(d),fl=o(d,"DIV",{class:!0});var _4=l(fl);_4.forEach(a),Wx=c(d),Bi=o(d,"P",{});var w5=l(Bi);Ge=o(w5,"A",{href:!0,rel:!0});var $5=l(Ge);zx=t($5,"Svelte REPL"),$5.forEach(a),w5.forEach(a),Fx=c(d),Ji=o(d,"P",{});var O5=l(Ji);Ve=o(O5,"STRONG",{});var qp=l(Ve);Yx=t(qp,"The next thing you may ask, when is "),ml=o(qp,"CODE",{class:!0});var D5=l(ml);Zx=t(D5,"$$.update"),D5.forEach(a),Kx=t(qp," being called?"),qp.forEach(a),O5.forEach(a),Qx=c(d),Js=o(d,"P",{});var br=l(Js);Xx=t(br,"Remember the "),xl=o(br,"CODE",{class:!0});var S5=l(xl);s2=t(S5,"update"),S5.forEach(a),a2=t(br," function that gets called in the "),gl=o(br,"CODE",{class:!0});var T5=l(gl);e2=t(T5,"flush"),T5.forEach(a),t2=t(br," function?"),br.forEach(a),n2=c(d),qe=o(d,"P",{});var Up=l(qe);o2=t(Up,"I put a "),El=o(Up,"CODE",{class:!0});var N5=l(El);l2=t(N5,"NOTE:"),N5.forEach(a),r2=t(Up," comment saying that it will be important later. Well, it is important now."),Up.forEach(a),i2=c(d),_l=o(d,"DIV",{class:!0});var b4=l(_l);b4.forEach(a),c2=c(d),us=o(d,"P",{});var wa=l(us);p2=t(wa,"The "),bl=o(wa,"CODE",{class:!0});var C5=l(bl);k2=t(C5,"$$.update"),C5.forEach(a),h2=t(wa," function gets called "),Wi=o(wa,"STRONG",{});var I5=l(Wi);v2=t(I5,"in the same microtask"),I5.forEach(a),d2=t(wa," with the DOM update, right before we called the "),wl=o(wa,"CODE",{class:!0});var L5=l(wl);u2=t(L5,"$$.fragment.p()"),L5.forEach(a),y2=t(wa," to update the DOM."),wa.forEach(a),f2=c(d),zi=o(d,"P",{});var P5=l(zi);m2=t(P5,"The implication of the above fact is"),P5.forEach(a),d.forEach(a),ap=c(p),I=o(p,"SECTION",{});var j=l(I);Fi=o(j,"H3",{});var A5=l(Fi);Ue=o(A5,"A",{href:!0,id:!0});var H5=l(Ue);x2=t(H5,"1. Execution of all reactive declarations and statements are batched"),H5.forEach(a),A5.forEach(a),g2=c(j),Yi=o(j,"P",{});var j5=l(Yi);E2=t(j5,"Just as how DOM updates are batched, reactive declarations and statements are batched too!"),j5.forEach(a),_2=c(j),$l=o(j,"DIV",{class:!0});var w4=l($l);w4.forEach(a),b2=c(j),Zi=o(j,"P",{});var M5=l(Zi);Be=o(M5,"A",{href:!0,rel:!0});var R5=l(Be);w2=t(R5,"Svelte REPL"),R5.forEach(a),M5.forEach(a),$2=c(j),Je=o(j,"P",{});var Bp=l(Je);O2=t(Bp,"When "),Ol=o(Bp,"CODE",{class:!0});var G5=l(Ol);D2=t(G5,"update()"),G5.forEach(a),S2=t(Bp," get called,"),Bp.forEach(a),T2=c(j),G=o(j,"OL",{});var X=l(G);z=o(X,"LI",{});var ws=l(z);N2=t(ws,"Similar to the "),Dl=o(ws,"A",{href:!0});var V5=l(Dl);C2=t(V5,"flow described above"),V5.forEach(a),I2=t(ws,", "),Sl=o(ws,"CODE",{class:!0});var q5=l(Sl);L2=t(q5,"$$invalidate"),q5.forEach(a),P2=t(ws," both "),Ki=o(ws,"STRONG",{});var U5=l(Ki);A2=t(U5,'"givenName"'),U5.forEach(a),H2=t(ws," and "),Qi=o(ws,"STRONG",{});var B5=l(Qi);j2=t(B5,'"familyName"'),B5.forEach(a),M2=t(ws,", and schedules an update"),ws.forEach(a),R2=c(X),Xi=o(X,"LI",{});var J5=l(Xi);sc=o(J5,"STRONG",{});var W5=l(sc);G2=t(W5,"-- End of task --"),W5.forEach(a),J5.forEach(a),V2=c(X),ac=o(X,"LI",{});var z5=l(ac);ec=o(z5,"STRONG",{});var F5=l(ec);q2=t(F5,"-- Start of microtask--"),F5.forEach(a),z5.forEach(a),U2=c(X),ca=o(X,"LI",{});var jc=l(ca);Tl=o(jc,"CODE",{class:!0});var Y5=l(Tl);B2=t(Y5,"flush()"),Y5.forEach(a),J2=t(jc," calls "),Nl=o(jc,"CODE",{class:!0});var Z5=l(Nl);W2=t(Z5,"update()"),Z5.forEach(a),z2=t(jc," for each component marked dirty"),jc.forEach(a),F2=c(X),We=o(X,"LI",{});var Jp=l(We);Y2=t(Jp,"Runs "),Cl=o(Jp,"CODE",{class:!0});var K5=l(Cl);Z2=t(K5,"$$.update()"),K5.forEach(a),ze=o(Jp,"UL",{});var Wp=l(ze);Z=o(Wp,"LI",{});var Fs=l(Z);K2=t(Fs,"As "),tc=o(Fs,"STRONG",{});var Q5=l(tc);Q2=t(Q5,'"givenName"'),Q5.forEach(a),X2=t(Fs," and "),nc=o(Fs,"STRONG",{});var X5=l(nc);s3=t(X5,'"familyName"'),X5.forEach(a),a3=t(Fs," has changed, evaluates and "),Il=o(Fs,"CODE",{class:!0});var s$=l(Il);e3=t(s$,"$$invalidate"),s$.forEach(a),t3=c(Fs),oc=o(Fs,"STRONG",{});var a$=l(oc);n3=t(a$,'"name"'),a$.forEach(a),Fs.forEach(a),o3=c(Wp),pa=o(Wp,"LI",{});var Mc=l(pa);l3=t(Mc,"As "),lc=o(Mc,"STRONG",{});var e$=l(lc);r3=t(e$,'"name"'),e$.forEach(a),i3=t(Mc," has changed, executes "),Ll=o(Mc,"CODE",{class:!0});var t$=l(Ll);c3=t(t$,"console.log('name', name);"),t$.forEach(a),Mc.forEach(a),Wp.forEach(a),Jp.forEach(a),p3=c(X),Fe=o(X,"LI",{});var zp=l(Fe);k3=t(zp,"Calls "),Pl=o(zp,"CODE",{class:!0});var n$=l(Pl);h3=t(n$,"$$.fragment.p(...)"),n$.forEach(a),v3=t(zp," to update the DOM."),zp.forEach(a),X.forEach(a),d3=c(j),V=o(j,"P",{});var ss=l(V);u3=t(ss,"As you can see, even though we've updated "),Al=o(ss,"CODE",{class:!0});var o$=l(Al);y3=t(o$,"givenName"),o$.forEach(a),f3=t(ss," and "),Hl=o(ss,"CODE",{class:!0});var l$=l(Hl);m3=t(l$,"familyName"),l$.forEach(a),x3=t(ss,", we only evaluate "),jl=o(ss,"CODE",{class:!0});var r$=l(jl);g3=t(r$,"name"),r$.forEach(a),E3=t(ss," and executes "),Ml=o(ss,"CODE",{class:!0});var i$=l(Ml);_3=t(i$,"console.log('name', name)"),i$.forEach(a),b3=c(ss),rc=o(ss,"STRONG",{});var c$=l(rc);w3=t(c$,"once"),c$.forEach(a),$3=t(ss," instead of twice:"),ss.forEach(a),O3=c(j),Rl=o(j,"DIV",{class:!0});var $4=l(Rl);$4.forEach(a),j.forEach(a),ep=c(p),H=o(p,"SECTION",{});var as=l(H);ic=o(as,"H3",{});var p$=l(ic);Ye=o(p$,"A",{href:!0,id:!0});var k$=l(Ye);D3=t(k$,"2. The value of reactive variable outside of reactive declarations and statements may not be up to date"),k$.forEach(a),p$.forEach(a),S3=c(as),cc=o(as,"P",{});var h$=l(cc);T3=t(h$,"Because the reactive declarations and statements are batched and executed in the next microtask, you can't expect the value to be updated synchronously."),h$.forEach(a),N3=c(as),Gl=o(as,"DIV",{class:!0});var O4=l(Gl);O4.forEach(a),C3=c(as),pc=o(as,"P",{});var v$=l(pc);Ze=o(v$,"A",{href:!0,rel:!0});var d$=l(Ze);I3=t(d$,"Svelte REPL"),d$.forEach(a),v$.forEach(a),L3=c(as),Ke=o(as,"P",{});var Fp=l(Ke);P3=t(Fp,"Instead, you "),kc=o(Fp,"STRONG",{});var u$=l(kc);A3=t(u$,"have to"),u$.forEach(a),H3=t(Fp," refer the reactive variable in another reactive declaration or statement:"),Fp.forEach(a),j3=c(as),Vl=o(as,"DIV",{class:!0});var D4=l(Vl);D4.forEach(a),as.forEach(a),tp=c(p),K=o(p,"SECTION",{});var $a=l(K);hc=o($a,"H3",{});var y$=l(hc);Qe=o(y$,"A",{href:!0,id:!0});var f$=l(Qe);M3=t(f$,"Sorting of reactive declarations and statements"),f$.forEach(a),y$.forEach(a),R3=c($a),vc=o($a,"P",{});var m$=l(vc);G3=t(m$,"Svelte tries to preserve the order of reactive declarations and statements as they are declared as much as possible."),m$.forEach(a),V3=c($a),Xe=o($a,"P",{});var Yp=l(Xe);q3=t(Yp,"However, if one reactive declaration or statement refers to a variable that was defined by another reactive declaration, then, "),dc=o(Yp,"STRONG",{});var x$=l(dc);U3=t(x$,"it will be inserted after the latter reactive declaration"),x$.forEach(a),B3=t(Yp,":"),Yp.forEach(a),J3=c($a),ql=o($a,"DIV",{class:!0});var S4=l(ql);S4.forEach(a),$a.forEach(a),np=c(p),L=o(p,"SECTION",{});var M=l(L);uc=o(M,"H3",{});var g$=l(uc);st=o(g$,"A",{href:!0,id:!0});var E$=l(st);W3=t(E$,"Reactive variable that is not reactive"),E$.forEach(a),g$.forEach(a),z3=c(M),at=o(M,"P",{});var Zp=l(at);F3=t(Zp,"The Svelte compiler tracks all the variables declared in the "),Ul=o(Zp,"CODE",{class:!0});var _$=l(Ul);Y3=t(_$,"<script>"),_$.forEach(a),Z3=t(Zp," tag."),Zp.forEach(a),K3=c(M),et=o(M,"P",{});var Kp=l(et);Q3=t(Kp,"If all the variables of a reactive declaration or statement refers to, never gets mutated or reassigned, then the reactive declaration or statement will not be added into "),Bl=o(Kp,"CODE",{class:!0});var b$=l(Bl);X3=t(b$,"$$.update"),b$.forEach(a),sg=t(Kp,"."),Kp.forEach(a),ag=c(M),yc=o(M,"P",{});var w$=l(yc);eg=t(w$,"For example:"),w$.forEach(a),tg=c(M),Jl=o(M,"DIV",{class:!0});var T4=l(Jl);T4.forEach(a),ng=c(M),fc=o(M,"P",{});var $$=l(fc);tt=o($$,"A",{href:!0,rel:!0});var O$=l(tt);og=t(O$,"Svelte REPL"),O$.forEach(a),$$.forEach(a),lg=c(M),Ws=o(M,"P",{});var wr=l(Ws);rg=t(wr,"Since, "),Wl=o(wr,"CODE",{class:!0});var D$=l(Wl);ig=t(D$,"count"),D$.forEach(a),cg=t(wr," never gets mutated or reassigned, Svelte optimises the compiled output by not defining "),zl=o(wr,"CODE",{class:!0});var S$=l(zl);pg=t(S$,"$$self.$$.update"),S$.forEach(a),kg=t(wr,"."),wr.forEach(a),hg=c(M),Fl=o(M,"DIV",{class:!0});var N4=l(Fl);N4.forEach(a),M.forEach(a),op=c(p),Yl=o(p,"SECTION",{});var T$=l(Yl);mc=o(T$,"H2",{});var N$=l(mc);nt=o(N$,"A",{href:!0,id:!0});var C$=l(nt);vg=t(C$,"Summary"),C$.forEach(a),N$.forEach(a),T$.forEach(a),lp=c(p),Zl=o(p,"SECTION",{});var I$=l(Zl);xc=o(I$,"H3",{});var L$=l(xc);ot=o(L$,"A",{href:!0,id:!0});var P$=l(ot);dg=t(P$,"1. Svelte keeps track of which variables are dirty and batched the DOM updates."),P$.forEach(a),L$.forEach(a),I$.forEach(a),rp=c(p),Kl=o(p,"SECTION",{});var A$=l(Kl);gc=o(A$,"H3",{});var H$=l(gc);lt=o(H$,"A",{href:!0,id:!0});var j$=l(lt);ug=t(j$,"2. Using bitmask, Svelte able to generate a more compact compiled code."),j$.forEach(a),H$.forEach(a),A$.forEach(a),ip=c(p),Ql=o(p,"SECTION",{});var M$=l(Ql);Ec=o(M$,"H3",{});var R$=l(Ec);rt=o(R$,"A",{href:!0,id:!0});var G$=l(rt);yg=t(G$,"3. Reactive declarations and statements are executed in batch, just like DOM updates"),G$.forEach(a),R$.forEach(a),M$.forEach(a),cp=c(p),B=o(p,"SECTION",{});var $s=l(B);_c=o($s,"H2",{});var V$=l(_c);it=o(V$,"A",{href:!0,id:!0});var q$=l(it);fg=t(q$,"Closing Note"),q$.forEach(a),V$.forEach(a),mg=c($s),ct=o($s,"P",{});var Qp=l(ct);xg=t(Qp,"If you wish to know more, "),pt=o(Qp,"A",{href:!0,rel:!0});var U$=l(pt);gg=t(U$,"follow me on Twitter"),U$.forEach(a),Eg=t(Qp,"."),Qp.forEach(a),_g=c($s),ys=o($s,"P",{});var Oa=l(ys);bg=t(Oa,"I'll post it on Twitter when the next part is ready, where I'll be covering "),kt=o(Oa,"A",{href:!0,rel:!0});var B$=l(kt);wg=t(B$,"logic blocks"),B$.forEach(a),$g=t(Oa,", "),ht=o(Oa,"A",{href:!0,rel:!0});var J$=l(ht);Og=t(J$,"slots"),J$.forEach(a),Dg=t(Oa,", "),vt=o(Oa,"A",{href:!0,rel:!0});var W$=l(vt);Sg=t(W$,"context"),W$.forEach(a),Tg=t(Oa,", and many others."),Oa.forEach(a),Ng=c($s),bc=o($s,"P",{});var z$=l(bc);dt=o(z$,"STRONG",{});var Xp=l(dt);Cg=t(Xp,"\u2B05 \u2B05  Previously in "),Xl=o(Xp,"A",{href:!0});var F$=l(Xl);Ig=t(F$,"Part 1"),F$.forEach(a),Lg=t(Xp,"."),Xp.forEach(a),z$.forEach(a),Pg=c($s),wc=o($s,"P",{});var Y$=l(wc);ut=o(Y$,"STRONG",{});var sk=l(ut);Ag=t(sk,"\u27A1 \u27A1  Continue reading on "),sr=o(sk,"A",{href:!0});var Z$=l(sr);Hg=t(Z$,"Part 3"),Z$.forEach(a),jg=t(sk,"."),sk.forEach(a),Y$.forEach(a),$s.forEach(a),pp=c(p),ka=o(p,"SECTION",{});var ak=l(ka);$c=o(ak,"H2",{});var K$=l($c);yt=o(K$,"A",{href:!0,id:!0});var Q$=l(yt);Mg=t(Q$,"Further Resources"),Q$.forEach(a),K$.forEach(a),Rg=c(ak),F=o(ak,"UL",{});var Os=l(F);ft=o(Os,"LI",{});var ek=l(ft);Gg=t(ek,"Rich Harris shares about "),mt=o(ek,"A",{href:!0,rel:!0});var X$=l(mt);Vg=t(X$,"Bitmask Tracking at Svelte Society NYC"),X$.forEach(a),qg=t(ek,"."),ek.forEach(a),Ug=c(Os),ha=o(Os,"LI",{});var Rc=l(ha);Bg=t(Rc,"Svelte Tutorial - "),xt=o(Rc,"A",{href:!0,rel:!0});var s6=l(xt);Jg=t(s6,"Reactivity"),s6.forEach(a),Wg=c(Rc),gt=o(Rc,"A",{href:!0,rel:!0});var a6=l(gt);zg=t(a6,"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/"),a6.forEach(a),Rc.forEach(a),Fg=c(Os),ar=o(Os,"LI",{});var yE=l(ar);Et=o(yE,"A",{href:!0,rel:!0});var e6=l(Et);Yg=t(e6,"The Art of Bitmasking"),e6.forEach(a),Zg=t(yE," by Shakib Ahmed"),yE.forEach(a),Kg=c(Os),er=o(Os,"LI",{});var fE=l(er);_t=o(fE,"A",{href:!0,rel:!0});var t6=l(_t);Qg=t(t6,"Bitmasks: A very esoteric (and impractical) way of managing booleans"),t6.forEach(a),Xg=t(fE," by Basti Ortiz"),fE.forEach(a),sE=c(Os),Oc=o(Os,"LI",{});var n6=l(Oc);bt=o(n6,"A",{href:!0,rel:!0});var o6=l(bt);aE=t(o6,"MDN: Bitwise Operators"),o6.forEach(a),n6.forEach(a),Os.forEach(a),ak.forEach(a),this.h()},h(){r(ms,"href","/compile-svelte-in-your-head-part-1/"),r(Dt,"href","/compile-svelte-in-your-head-part-1/"),r(St,"class","inline"),r(Tt,"class","inline"),r(Sa,"class","code-section"),r(Nt,"class","inline"),r(Ct,"class","inline"),r(Ta,"href","https://github.com/sveltejs/svelte/blob/v3.20.1/CHANGELOG.md#3201"),r(Ta,"rel","nofollow"),r(Na,"href","#pre-v3-16-0"),r(Na,"id","pre-v3-16-0"),r(It,"class","inline"),r(Ca,"href","https://github.com/sveltejs/svelte/blob/master/CHANGELOG.md#3160"),r(Ca,"rel","nofollow"),r(Ia,"href","https://github.com/sveltejs/svelte/pull/3945"),r(Ia,"rel","nofollow"),r(Lt,"class","inline"),r(Pt,"href","/compile-svelte-in-your-head-part-1"),r(Pa,"href","#ctx"),r(Pa,"id","ctx"),r(At,"href","/compile-svelte-in-your-head-part-1#instance-variable"),r(Ht,"class","inline"),r(jt,"class","inline"),r(Mt,"class","inline"),r(Rt,"class","inline"),r(Gt,"class","inline"),r(Vt,"class","code-section"),r(Ma,"href","https://svelte.dev/repl/5b12ff52c2874f4dbb6405d9133b34da?version=3.20.1"),r(Ma,"rel","nofollow"),r(qt,"class","code-section"),r(Ut,"class","inline"),r(Bt,"class","inline"),r(Ra,"href","#dirty"),r(Ra,"id","dirty"),r(Wt,"class","inline"),r(zt,"class","code-section"),r(Ga,"href","https://svelte.dev/repl/da579d0113b44f01b2b94893dce21487?version=3.20.1"),r(Ga,"rel","nofollow"),r(Ft,"class","inline"),r(Yt,"class","inline"),r(Va,"href","https://github.com/sveltejs/svelte/blob/v3.15.0/src/runtime/internal/Component.ts#L124"),r(Va,"rel","nofollow"),r(Zt,"class","inline"),r(Kt,"class","code-section"),r(Qt,"class","inline"),r(Xt,"class","code-section"),r(an,"class","inline"),r(en,"class","inline"),r(tn,"class","code-section"),r(nn,"class","inline"),r(on,"class","inline"),r(qa,"href","#invalidate"),r(qa,"id","invalidate"),r(rn,"class","inline"),r(pn,"class","inline"),r(hn,"class","inline"),r(vn,"class","inline"),r(dn,"class","code-section"),r(un,"class","inline"),r(fn,"class","inline"),r(xn,"class","inline"),r(gn,"class","code-section"),r(Wa,"href","https://github.com/sveltejs/svelte/blob/v3.15.0/src/runtime/internal/Component.ts#L130-L136"),r(Wa,"rel","nofollow"),r(En,"class","inline"),r(_n,"class","inline"),r(bn,"class","code-section"),r(wn,"class","inline"),r($n,"class","inline"),r(On,"class","inline"),r(Dn,"class","code-section"),r(Sn,"class","inline"),r(Tn,"class","inline"),r(Nn,"class","inline"),r(Za,"href","#schedule-update"),r(Za,"id","schedule-update"),r(In,"class","inline"),r(Ka,"href","https://github.com/sveltejs/svelte/blob/v3.20.1/CHANGELOG.md#3201"),r(Ka,"rel","nofollow"),r(Qa,"href","https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/"),r(Qa,"rel","nofollow"),r(Ln,"class","inline"),r(Pn,"class","code-section"),r(An,"class","inline"),r(Hn,"class","code-section"),r(se,"href","https://github.com/sveltejs/svelte/blob/v3.15.0/src/runtime/internal/scheduler.ts#L14"),r(se,"rel","nofollow"),r(jn,"class","code-section"),r(ae,"href","https://svelte.dev/repl/761a0a6cc2834afb842942e1d23875b1?version=3.20.1"),r(ae,"rel","nofollow"),r(Mn,"class","inline"),r(Rn,"class","inline"),r(Gn,"class","inline"),r(Vn,"class","inline"),r(qn,"class","inline"),r(Un,"class","inline"),r(Jn,"class","inline"),r(Wn,"class","inline"),r(zn,"class","inline"),r(Fn,"class","inline"),r(Yn,"class","inline"),r(Kn,"class","inline"),r(Qn,"class","inline"),r(Xn,"class","inline"),r(so,"class","inline"),r(ao,"class","inline"),r(eo,"class","inline"),r(to,"class","inline"),r(no,"class","inline"),r(oo,"class","inline"),r(lo,"class","inline"),r(ro,"class","inline"),r(io,"class","inline"),r(co,"class","inline"),r(po,"class","inline"),r(ko,"class","inline"),r(ho,"class","inline"),r(ie,"href","#tl-dr"),r(ie,"id","tl-dr"),r(vo,"class","inline"),r(uo,"class","inline"),r(yo,"class","inline"),r(fo,"class","inline"),r(mo,"class","inline"),r(xo,"class","inline"),r(pe,"href","#v3-16-0"),r(pe,"id","v3-16-0"),r(ke,"href","https://github.com/sveltejs/svelte/pull/3945"),r(ke,"rel","nofollow"),r(go,"class","code-section"),r(Eo,"class","code-section"),r(ve,"href","https://en.wikipedia.org/wiki/Mask_(computing)"),r(ve,"rel","nofollow"),r(_o,"class","code-section"),r(de,"href","#bitmask"),r(de,"id","bitmask"),r(ue,"href","https://blog.bitsrc.io/the-art-of-bitmasking-ec58ab1b4c03"),r(ue,"rel","nofollow"),r(ye,"href","https://dev.to/somedood/bitmasks-a-very-esoteric-and-impractical-way-of-managing-booleans-1hlf"),r(ye,"rel","nofollow"),r(bo,"class","inline"),r(wo,"class","inline"),r($o,"class","inline"),r(Oo,"class","inline"),r(Do,"class","inline"),r(So,"class","inline"),r(To,"class","inline"),r(No,"class","inline"),r(Co,"class","inline"),r(fe,"href","https://en.wikipedia.org/wiki/Bit_numbering#Least_significant_bit"),r(fe,"rel","nofollow"),r(me,"href","https://en.wikipedia.org/wiki/Bit_numbering#Most_significant_bit"),r(me,"rel","nofollow"),r(xe,"href","https://2ality.com/2012/04/number-encoding.html"),r(xe,"rel","nofollow"),r(ge,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators"),r(ge,"rel","nofollow"),r(_e,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators"),r(_e,"rel","nofollow"),r(Io,"class","code-section"),r(we,"href","https://en.wikipedia.org/wiki/Mask_(computing)"),r(we,"rel","nofollow"),r(Oe,"href","#bitmask-in-svelte"),r(Oe,"id","bitmask-in-svelte"),r(Lo,"class","code-section"),r(Po,"class","code-section"),r(Ao,"class","inline"),r(Ho,"class","code-section"),r(jo,"class","inline"),r(Mo,"class","code-section"),r(Go,"class","inline"),r(Vo,"class","code-section"),r(qo,"class","code-section"),r(Uo,"class","inline"),r(Bo,"class","inline"),r(Jo,"class","inline"),r(Wo,"class","inline"),r(zo,"class","inline"),r(Fo,"class","inline"),r(oa,"href","#destructuring-dirty"),r(oa,"id","destructuring-dirty"),r(Yo,"class","inline"),r(Zo,"class","inline"),r(Ko,"class","code-section"),r(De,"href","#tl-dr-1"),r(De,"id","tl-dr-1"),r(Qo,"class","inline"),r(Xo,"class","inline"),r(Te,"href","#reactive-declaration"),r(Te,"id","reactive-declaration"),r(Ne,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label"),r(Ne,"rel","nofollow"),r(sl,"class","inline"),r(al,"class","code-section"),r(Ce,"href","https://svelte.dev/repl/e37329dd126448b2aa0679c08993f9a8?version=3.20.1"),r(Ce,"rel","nofollow"),r(el,"class","inline"),r(Le,"href","/compile-svelte-in-your-head-part-1/#instanceself-props-invalidate"),r(tl,"class","code-section"),r(nl,"class","code-section"),r(Pe,"href","https://svelte.dev/repl/fc6995856489402d90291c4c30952939?version=3.20.1"),r(Pe,"rel","nofollow"),r(ol,"class","code-section"),r(ll,"class","inline"),r(rl,"class","inline"),r(Ae,"href","https://en.wikipedia.org/wiki/NOP_(code)"),r(Ae,"rel","nofollow"),r(He,"href","https://github.com/sveltejs/svelte/blob/v3.20.1/src/runtime/internal/Component.ts#L111"),r(He,"rel","nofollow"),r(il,"class","inline"),r(pl,"class","inline"),r(kl,"class","inline"),r(hl,"class","inline"),r(vl,"class","inline"),r(dl,"class","inline"),r(ul,"class","inline"),r(yl,"class","inline"),r(fl,"class","code-section"),r(Ge,"href","https://svelte.dev/repl/fc6995856489402d90291c4c30952939?version=3.20.1"),r(Ge,"rel","nofollow"),r(ml,"class","inline"),r(xl,"class","inline"),r(gl,"class","inline"),r(El,"class","inline"),r(_l,"class","code-section"),r(bl,"class","inline"),r(wl,"class","inline"),r(Ue,"href","#1-execution-of-all-reactive-declarations-and-statements-are-batched"),r(Ue,"id","1-execution-of-all-reactive-declarations-and-statements-are-batched"),r($l,"class","code-section"),r(Be,"href","https://svelte.dev/repl/941195f1cd5248e9bd14613f9513ad1d?version=3.20.1"),r(Be,"rel","nofollow"),r(Ol,"class","inline"),r(Dl,"href","#schedule_update"),r(Sl,"class","inline"),r(Tl,"class","inline"),r(Nl,"class","inline"),r(Cl,"class","inline"),r(Il,"class","inline"),r(Ll,"class","inline"),r(Pl,"class","inline"),r(Al,"class","inline"),r(Hl,"class","inline"),r(jl,"class","inline"),r(Ml,"class","inline"),r(Rl,"class","code-section"),r(Ye,"href","#2-the-value-of-reactive-variable-outside-of-reactive-declarations-and-statements-may-not-be-up-to-date"),r(Ye,"id","2-the-value-of-reactive-variable-outside-of-reactive-declarations-and-statements-may-not-be-up-to-date"),r(Gl,"class","code-section"),r(Ze,"href","https://svelte.dev/repl/437548d5c7044cb59bfd0c8a0f4c725d?version=3.20.1"),r(Ze,"rel","nofollow"),r(Vl,"class","code-section"),r(Qe,"href","#sorting-of-reactive-declarations-and-statements"),r(Qe,"id","sorting-of-reactive-declarations-and-statements"),r(ql,"class","code-section"),r(st,"href","#reactive-variable-that-is-not-reactive"),r(st,"id","reactive-variable-that-is-not-reactive"),r(Ul,"class","inline"),r(Bl,"class","inline"),r(Jl,"class","code-section"),r(tt,"href","https://svelte.dev/repl/af86472e1f494cfea2efa494f63fff08?version=3.20.1"),r(tt,"rel","nofollow"),r(Wl,"class","inline"),r(zl,"class","inline"),r(Fl,"class","code-section"),r(nt,"href","#summary"),r(nt,"id","summary"),r(ot,"href","#1-svelte-keeps-track-of-which-variables-are-dirty-and-batched-the-dom-updates"),r(ot,"id","1-svelte-keeps-track-of-which-variables-are-dirty-and-batched-the-dom-updates"),r(lt,"href","#2-using-bitmask-svelte-able-to-generate-a-more-compact-compiled-code"),r(lt,"id","2-using-bitmask-svelte-able-to-generate-a-more-compact-compiled-code"),r(rt,"href","#3-reactive-declarations-and-statements-are-executed-in-batch-just-like-dom-updates"),r(rt,"id","3-reactive-declarations-and-statements-are-executed-in-batch-just-like-dom-updates"),r(it,"href","#closing-note"),r(it,"id","closing-note"),r(pt,"href","https://twitter.com/lihautan"),r(pt,"rel","nofollow"),r(kt,"href","https://svelte.dev/tutorial/if-blocks"),r(kt,"rel","nofollow"),r(ht,"href","https://svelte.dev/tutorial/slots"),r(ht,"rel","nofollow"),r(vt,"href","https://svelte.dev/tutorial/context-api"),r(vt,"rel","nofollow"),r(Xl,"href","/compile-svelte-in-your-head-part-1/"),r(sr,"href","/compile-svelte-in-your-head-part-3/"),r(yt,"href","#further-resources"),r(yt,"id","further-resources"),r(mt,"href","https://www.youtube.com/watch?v=zq6PpM5t3z0&t=2530s"),r(mt,"rel","nofollow"),r(xt,"href","https://svelte.dev/tutorial/reactive-assignments"),r(xt,"rel","nofollow"),r(gt,"href","https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/"),r(gt,"rel","nofollow"),r(Et,"href","https://blog.bitsrc.io/the-art-of-bitmasking-ec58ab1b4c03"),r(Et,"rel","nofollow"),r(_t,"href","https://dev.to/somedood/bitmasks-a-very-esoteric-and-impractical-way-of-managing-booleans-1hlf"),r(_t,"rel","nofollow"),r(bt,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators"),r(bt,"rel","nofollow")},m(p,k){h(p,T,k),s(T,q),s(q,Ds),s(q,ms),s(ms,C),s(q,es),h(p,Da,k),h(p,ts,k),s(ts,Dt),s(Dt,tk),s(ts,nk),s(ts,St),s(St,ok),s(ts,lk),s(ts,Tt),s(Tt,rk),s(ts,ik),h(p,Gc,k),h(p,Sa,k),Sa.innerHTML=c6,h(p,Vc,k),h(p,xs,k),s(xs,ck),s(xs,Nt),s(Nt,pk),s(xs,kk),s(xs,Ct),s(Ct,hk),s(xs,vk),h(p,qc,k),h(p,Ys,k),s(Ys,dk),s(Ys,Ta),s(Ta,uk),s(Ys,yk),h(p,Uc,k),h(p,gs,k),s(gs,$r),s($r,Na),s(Na,fk),s(gs,mk),s(gs,W),s(W,xk),s(W,It),s(It,gk),s(W,Ek),s(W,Ca),s(Ca,_k),s(W,bk),s(W,Ia),s(Ia,wk),s(W,$k),s(W,Lt),s(Lt,Ok),s(W,Dk),s(gs,Sk),s(gs,La),s(La,Tk),s(La,Pt),s(Pt,Nk),s(La,Ck),h(p,Bc,k),h(p,w,k),s(w,Or),s(Or,Pa),s(Pa,Ik),s(w,Lk),s(w,Aa),s(Aa,Pk),s(Aa,Dr),s(Dr,Ak),s(Aa,Hk),s(w,jk),s(w,Ha),s(Ha,Mk),s(Ha,At),s(At,Rk),s(Ha,Gk),s(w,Vk),s(w,Ss),s(Ss,ja),s(ja,qk),s(ja,Ht),s(Ht,Uk),s(ja,Bk),s(Ss,Jk),s(Ss,Sr),s(Sr,Wk),s(Ss,zk),s(Ss,Tr),s(Tr,Fk),s(w,Yk),s(w,Nr),s(Nr,Zk),s(w,Kk),s(w,Cr),s(Cr,Qk),s(w,Xk),s(w,Ts),s(Ts,sh),s(Ts,jt),s(jt,ah),s(Ts,eh),s(Ts,Mt),s(Mt,th),s(Ts,nh),s(w,oh),s(w,Ns),s(Ns,lh),s(Ns,Rt),s(Rt,rh),s(Ns,ih),s(Ns,Gt),s(Gt,ch),s(Ns,ph),s(w,kh),s(w,Vt),Vt.innerHTML=p6,s(w,hh),s(w,Ir),s(Ir,Ma),s(Ma,vh),s(w,dh),s(w,qt),qt.innerHTML=k6,s(w,uh),s(w,Cs),s(Cs,yh),s(Cs,Ut),s(Ut,fh),s(Cs,mh),s(Cs,Bt),s(Bt,xh),s(Cs,gh),h(p,Jc,k),h(p,g,k),s(g,Lr),s(Lr,Ra),s(Ra,Eh),s(g,_h),s(g,Jt),s(Jt,Wt),s(Wt,bh),s(Jt,wh),s(g,$h),s(g,Pr),s(Pr,Oh),s(g,Dh),s(g,zt),zt.innerHTML=h6,s(g,Sh),s(g,Ar),s(Ar,Ga),s(Ga,Th),s(g,Nh),s(g,ns),s(ns,Ch),s(ns,Ft),s(Ft,Ih),s(ns,Lh),s(ns,Yt),s(Yt,Ph),s(ns,Ah),s(ns,Va),s(Va,Hh),s(ns,jh),s(g,Mh),s(g,Is),s(Is,Rh),s(Is,Hr),s(Hr,Gh),s(Is,Vh),s(Is,Zt),s(Zt,qh),s(Is,Uh),s(g,Bh),s(g,Kt),Kt.innerHTML=v6,s(g,Jh),s(g,Ls),s(Ls,Wh),s(Ls,jr),s(jr,zh),s(Ls,Fh),s(Ls,Qt),s(Qt,Yh),s(Ls,Zh),s(g,Kh),s(g,Xt),Xt.innerHTML=d6,s(g,Qh),s(g,sn),s(sn,an),s(an,Xh),s(sn,sv),s(g,av),s(g,Ps),s(Ps,ev),s(Ps,Mr),s(Mr,tv),s(Ps,nv),s(Ps,en),s(en,ov),s(Ps,lv),s(g,rv),s(g,tn),tn.innerHTML=u6,s(g,iv),s(g,As),s(As,cv),s(As,nn),s(nn,pv),s(As,kv),s(As,on),s(on,hv),s(As,vv),h(p,Wc,k),h(p,u,k),s(u,Rr),s(Rr,qa),s(qa,dv),s(u,uv),s(u,ln),s(ln,rn),s(rn,yv),s(ln,fv),s(u,mv),s(u,Gr),s(Gr,xv),s(u,gv),s(u,Ua),s(Ua,cn),s(cn,Ev),s(cn,pn),s(pn,_v),s(Ua,bv),s(Ua,kn),s(kn,wv),s(kn,hn),s(hn,$v),s(u,Ov),s(u,Ba),s(Ba,Dv),s(Ba,vn),s(vn,Sv),s(Ba,Tv),s(u,Nv),s(u,dn),dn.innerHTML=y6,s(u,Cv),s(u,Ja),s(Ja,Iv),s(Ja,un),s(un,Lv),s(Ja,Pv),s(u,Av),s(u,os),s(os,yn),s(yn,Hv),s(yn,fn),s(fn,jv),s(os,Mv),s(os,mn),s(mn,Rv),s(mn,xn),s(xn,Gv),s(os,Vv),s(os,Vr),s(Vr,qv),s(os,Uv),s(os,qr),s(qr,Bv),s(u,Jv),s(u,gn),gn.innerHTML=f6,s(u,Wv),s(u,Ur),s(Ur,Wa),s(Wa,zv),s(u,Fv),s(u,za),s(za,Yv),s(za,En),s(En,Zv),s(za,Kv),s(u,Qv),s(u,Fa),s(Fa,Xv),s(Fa,_n),s(_n,sd),s(Fa,ad),s(u,ed),s(u,bn),bn.innerHTML=m6,s(u,td),s(u,Br),s(Br,nd),s(u,od),s(u,Hs),s(Hs,ld),s(Hs,wn),s(wn,rd),s(Hs,id),s(Hs,$n),s($n,cd),s(Hs,pd),s(u,kd),s(u,Ya),s(Ya,hd),s(Ya,On),s(On,vd),s(Ya,dd),s(u,ud),s(u,Dn),Dn.innerHTML=x6,s(u,yd),s(u,ls),s(ls,fd),s(ls,Sn),s(Sn,md),s(ls,xd),s(ls,Tn),s(Tn,gd),s(ls,Ed),s(ls,Nn),s(Nn,_d),s(ls,bd),h(p,zc,k),h(p,_,k),s(_,Jr),s(Jr,Za),s(Za,wd),s(_,$d),s(_,Cn),s(Cn,In),s(In,Od),s(Cn,Dd),s(_,Sd),s(_,rs),s(rs,Td),s(rs,Ka),s(Ka,Nd),s(rs,Cd),s(rs,Qa),s(Qa,Id),s(rs,Ld),s(rs,Ln),s(Ln,Pd),s(rs,Ad),s(_,Hd),s(_,Wr),s(Wr,jd),s(_,Md),s(_,Pn),Pn.innerHTML=g6,s(_,Rd),s(_,Xa),s(Xa,Gd),s(Xa,An),s(An,Vd),s(Xa,qd),s(_,Ud),s(_,Hn),Hn.innerHTML=E6,s(_,Bd),s(_,zr),s(zr,se),s(se,Jd),s(_,Wd),s(_,Fr),s(Fr,zd),s(_,Fd),s(_,jn),jn.innerHTML=_6,s(_,Yd),s(_,Yr),s(Yr,ae),s(ae,Zd),s(_,Kd),s(_,js),s(js,Qd),s(js,Mn),s(Mn,Xd),s(js,su),s(js,Rn),s(Rn,au),s(js,eu),s(_,tu),s(_,y),s(y,Ms),s(Ms,nu),s(Ms,Zr),s(Zr,ou),s(Ms,lu),s(Ms,Gn),s(Gn,ru),s(Ms,iu),s(y,cu),s(y,Kr),s(Kr,Vn),s(Vn,pu),s(y,ku),s(y,Zs),s(Zs,hu),s(Zs,qn),s(qn,vu),s(Zs,du),s(Zs,Un),s(Un,uu),s(y,yu),s(y,Bn),s(Bn,fu),s(Bn,Jn),s(Jn,mu),s(y,xu),s(y,ee),s(ee,gu),s(ee,Wn),s(Wn,Eu),s(ee,_u),s(y,bu),s(y,Qr),s(Qr,zn),s(zn,wu),s(y,$u),s(y,Ks),s(Ks,Ou),s(Ks,Fn),s(Fn,Du),s(Ks,Su),s(Ks,Yn),s(Yn,Tu),s(y,Nu),s(y,Zn),s(Zn,Cu),s(Zn,Kn),s(Kn,Iu),s(y,Lu),s(y,te),s(te,Pu),s(te,Qn),s(Qn,Au),s(te,Hu),s(y,ju),s(y,Xr),s(Xr,si),s(si,Mu),s(y,Ru),s(y,ai),s(ai,ei),s(ei,Gu),s(y,Vu),s(y,Qs),s(Qs,Xn),s(Xn,qu),s(Qs,Uu),s(Qs,so),s(so,Bu),s(Qs,Ju),s(y,Wu),s(y,Xs),s(Xs,zu),s(Xs,ao),s(ao,Fu),s(Xs,Yu),s(Xs,ne),s(ne,oe),s(oe,eo),s(eo,Zu),s(oe,Ku),s(oe,to),s(to,Qu),s(ne,Xu),s(ne,le),s(le,no),s(no,sy),s(le,ay),s(le,oo),s(oo,ey),s(y,ty),s(y,sa),s(sa,ny),s(sa,lo),s(lo,oy),s(sa,ly),s(sa,re),s(re,aa),s(aa,ry),s(aa,ro),s(ro,iy),s(aa,cy),s(aa,io),s(io,py),s(re,ky),s(re,ea),s(ea,hy),s(ea,co),s(co,vy),s(ea,dy),s(ea,po),s(po,uy),s(y,yy),s(y,ta),s(ta,fy),s(ta,ko),s(ko,my),s(ta,xy),s(ta,ho),s(ho,gy),s(y,Ey),s(y,ti),s(ti,_y),s(y,by),s(y,ni),s(ni,oi),s(oi,wy),h(p,Fc,k),h(p,na,k),s(na,li),s(li,ie),s(ie,$y),s(na,Oy),s(na,is),s(is,cs),s(cs,Dy),s(cs,vo),s(vo,Sy),s(cs,Ty),s(cs,uo),s(uo,Ny),s(cs,Cy),s(cs,yo),s(yo,Iy),s(cs,Ly),s(is,Py),s(is,ri),s(ri,Ay),s(is,Hy),s(is,ce),s(ce,jy),s(ce,fo),s(fo,My),s(ce,Ry),s(is,Gy),s(is,Rs),s(Rs,Vy),s(Rs,mo),s(mo,qy),s(Rs,Uy),s(Rs,xo),s(xo,By),s(Rs,Jy),h(p,Yc,k),h(p,N,k),s(N,ii),s(ii,pe),s(pe,Wy),s(N,zy),s(N,Gs),s(Gs,Fy),s(Gs,ke),s(ke,Yy),s(Gs,Zy),s(Gs,ci),s(ci,Ky),s(Gs,Qy),s(N,Xy),s(N,pi),s(pi,sf),s(N,af),s(N,go),go.innerHTML=b6,s(N,ef),s(N,ki),s(ki,tf),s(N,nf),s(N,Eo),Eo.innerHTML=w6,s(N,of),s(N,he),s(he,lf),s(he,ve),s(ve,rf),s(he,cf),s(N,pf),s(N,_o),_o.innerHTML=$6,s(N,kf),s(N,hi),s(hi,hf),h(p,Zc,k),h(p,b,k),s(b,vi),s(vi,de),s(de,vf),s(b,df),s(b,di),s(di,uf),s(b,yf),s(b,Vs),s(Vs,ff),s(Vs,ue),s(ue,mf),s(Vs,xf),s(Vs,ye),s(ye,gf),s(Vs,Ef),s(b,_f),s(b,A),s(A,bf),s(A,bo),s(bo,wf),s(A,$f),s(A,wo),s(wo,Of),s(A,Df),s(A,$o),s($o,Sf),s(A,Tf),s(A,Oo),s(Oo,Nf),s(A,Cf),s(A,Do),s(Do,If),s(A,Lf),s(A,So),s(So,Pf),s(A,Af),s(b,Hf),s(b,qs),s(qs,jf),s(qs,ui),s(ui,Mf),s(qs,Rf),s(qs,To),s(To,Gf),s(qs,Vf),s(b,qf),s(b,R),s(R,Uf),s(R,yi),s(yi,Bf),s(R,Jf),s(R,No),s(No,Wf),s(R,zf),s(R,Co),s(Co,Ff),s(R,Yf),s(R,fe),s(fe,Zf),s(R,Kf),s(R,me),s(me,Qf),s(R,Xf),s(b,sm),s(b,fi),s(fi,mi),s(mi,am),s(b,em),s(b,xi),s(xi,tm),s(b,nm),s(b,Us),s(Us,om),s(Us,xe),s(xe,lm),s(Us,rm),s(Us,ge),s(ge,im),s(Us,cm),s(b,pm),s(b,Ee),s(Ee,km),s(Ee,_e),s(_e,hm),s(Ee,vm),s(b,dm),s(b,Io),Io.innerHTML=O6,s(b,um),s(b,be),s(be,ym),s(be,we),s(we,fm),s(be,mm),s(b,xm),s(b,$e),s($e,gm),s($e,gi),s(gi,Em),s($e,_m),h(p,Kc,k),h(p,f,k),s(f,Ei),s(Ei,Oe),s(Oe,bm),s(f,wm),s(f,_i),s(_i,$m),s(f,Om),s(f,Lo),Lo.innerHTML=D6,s(f,Dm),s(f,bi),s(bi,Sm),s(f,Tm),s(f,Po),Po.innerHTML=S6,s(f,Nm),s(f,ps),s(ps,Cm),s(ps,wi),s(wi,Im),s(ps,Lm),s(ps,Ao),s(Ao,Pm),s(ps,Am),s(ps,$i),s($i,Hm),s(ps,jm),s(f,Mm),s(f,Ho),Ho.innerHTML=T6,s(f,Rm),s(f,ks),s(ks,Gm),s(ks,jo),s(jo,Vm),s(ks,qm),s(ks,Oi),s(Oi,Um),s(ks,Bm),s(ks,Di),s(Di,Jm),s(ks,Wm),s(f,zm),s(f,Mo),Mo.innerHTML=N6,s(f,Fm),s(f,Ro),s(Ro,Go),s(Go,Ym),s(Ro,Zm),s(f,Km),s(f,Si),s(Si,Qm),s(f,Xm),s(f,Vo),Vo.innerHTML=C6,s(f,s1),s(f,Ti),s(Ti,a1),s(f,e1),s(f,qo),qo.innerHTML=I6,s(f,t1),s(f,hs),s(hs,n1),s(hs,Uo),s(Uo,o1),s(hs,l1),s(hs,Bo),s(Bo,r1),s(hs,i1),s(hs,Jo),s(Jo,c1),s(hs,p1),s(f,k1),s(f,Y),s(Y,Ni),s(Ni,h1),s(Y,v1),s(Y,Wo),s(Wo,d1),s(Y,u1),s(Y,zo),s(zo,y1),s(Y,f1),s(Y,Fo),s(Fo,m1),s(Y,x1),h(p,Qc,k),h(p,Es,k),s(Es,Ci),s(Ci,oa),s(oa,g1),s(oa,Ii),s(Ii,E1),s(Es,_1),s(Es,vs),s(vs,b1),s(vs,Yo),s(Yo,w1),s(vs,$1),s(vs,Li),s(Li,O1),s(vs,D1),s(vs,Zo),s(Zo,S1),s(vs,T1),s(Es,N1),s(Es,Ko),Ko.innerHTML=L6,h(p,Xc,k),h(p,la,k),s(la,Pi),s(Pi,De),s(De,C1),s(la,I1),s(la,Se),s(Se,Bs),s(Bs,L1),s(Bs,Qo),s(Qo,P1),s(Bs,A1),s(Bs,Xo),s(Xo,H1),s(Bs,j1),s(Se,M1),s(Se,Ai),s(Ai,R1),h(p,sp,k),h(p,v,k),s(v,Hi),s(Hi,Te),s(Te,G1),s(v,V1),s(v,ra),s(ra,q1),s(ra,Ne),s(Ne,U1),s(ra,B1),s(ra,sl),s(sl,J1),s(v,W1),s(v,al),al.innerHTML=P6,s(v,z1),s(v,ji),s(ji,Ce),s(Ce,F1),s(v,Y1),s(v,Ie),s(Ie,Z1),s(Ie,Le),s(Le,el),s(el,K1),s(Le,Q1),s(Ie,X1),s(v,sx),s(v,tl),tl.innerHTML=A6,s(v,ax),s(v,Mi),s(Mi,ex),s(v,tx),s(v,nl),nl.innerHTML=H6,s(v,nx),s(v,Ri),s(Ri,Pe),s(Pe,ox),s(v,lx),s(v,ol),ol.innerHTML=j6,s(v,rx),s(v,Gi),s(Gi,ix),s(v,cx),s(v,ds),s(ds,ia),s(ia,px),s(ia,ll),s(ll,kx),s(ia,hx),s(ia,Vi),s(Vi,_s),s(_s,rl),s(rl,vx),s(_s,dx),s(_s,Ae),s(Ae,ux),s(_s,yx),s(_s,He),s(He,fx),s(_s,mx),s(ds,xx),s(ds,je),s(je,gx),s(je,il),s(il,Ex),s(je,_x),s(ds,bx),s(ds,cl),s(cl,wx),s(cl,qi),s(qi,U),s(U,pl),s(pl,$x),s(U,Ox),s(U,kl),s(kl,Dx),s(U,Sx),s(U,hl),s(hl,Tx),s(U,Nx),s(U,vl),s(vl,Cx),s(U,Ix),s(U,dl),s(dl,Lx),s(U,Px),s(ds,Ax),s(ds,Me),s(Me,Hx),s(Me,ul),s(ul,jx),s(Me,Mx),s(v,Rx),s(v,Re),s(Re,Gx),s(Re,yl),s(yl,Vx),s(Re,qx),s(v,Ux),s(v,Ui),s(Ui,Bx),s(v,Jx),s(v,fl),fl.innerHTML=M6,s(v,Wx),s(v,Bi),s(Bi,Ge),s(Ge,zx),s(v,Fx),s(v,Ji),s(Ji,Ve),s(Ve,Yx),s(Ve,ml),s(ml,Zx),s(Ve,Kx),s(v,Qx),s(v,Js),s(Js,Xx),s(Js,xl),s(xl,s2),s(Js,a2),s(Js,gl),s(gl,e2),s(Js,t2),s(v,n2),s(v,qe),s(qe,o2),s(qe,El),s(El,l2),s(qe,r2),s(v,i2),s(v,_l),_l.innerHTML=R6,s(v,c2),s(v,us),s(us,p2),s(us,bl),s(bl,k2),s(us,h2),s(us,Wi),s(Wi,v2),s(us,d2),s(us,wl),s(wl,u2),s(us,y2),s(v,f2),s(v,zi),s(zi,m2),h(p,ap,k),h(p,I,k),s(I,Fi),s(Fi,Ue),s(Ue,x2),s(I,g2),s(I,Yi),s(Yi,E2),s(I,_2),s(I,$l),$l.innerHTML=G6,s(I,b2),s(I,Zi),s(Zi,Be),s(Be,w2),s(I,$2),s(I,Je),s(Je,O2),s(Je,Ol),s(Ol,D2),s(Je,S2),s(I,T2),s(I,G),s(G,z),s(z,N2),s(z,Dl),s(Dl,C2),s(z,I2),s(z,Sl),s(Sl,L2),s(z,P2),s(z,Ki),s(Ki,A2),s(z,H2),s(z,Qi),s(Qi,j2),s(z,M2),s(G,R2),s(G,Xi),s(Xi,sc),s(sc,G2),s(G,V2),s(G,ac),s(ac,ec),s(ec,q2),s(G,U2),s(G,ca),s(ca,Tl),s(Tl,B2),s(ca,J2),s(ca,Nl),s(Nl,W2),s(ca,z2),s(G,F2),s(G,We),s(We,Y2),s(We,Cl),s(Cl,Z2),s(We,ze),s(ze,Z),s(Z,K2),s(Z,tc),s(tc,Q2),s(Z,X2),s(Z,nc),s(nc,s3),s(Z,a3),s(Z,Il),s(Il,e3),s(Z,t3),s(Z,oc),s(oc,n3),s(ze,o3),s(ze,pa),s(pa,l3),s(pa,lc),s(lc,r3),s(pa,i3),s(pa,Ll),s(Ll,c3),s(G,p3),s(G,Fe),s(Fe,k3),s(Fe,Pl),s(Pl,h3),s(Fe,v3),s(I,d3),s(I,V),s(V,u3),s(V,Al),s(Al,y3),s(V,f3),s(V,Hl),s(Hl,m3),s(V,x3),s(V,jl),s(jl,g3),s(V,E3),s(V,Ml),s(Ml,_3),s(V,b3),s(V,rc),s(rc,w3),s(V,$3),s(I,O3),s(I,Rl),Rl.innerHTML=V6,h(p,ep,k),h(p,H,k),s(H,ic),s(ic,Ye),s(Ye,D3),s(H,S3),s(H,cc),s(cc,T3),s(H,N3),s(H,Gl),Gl.innerHTML=q6,s(H,C3),s(H,pc),s(pc,Ze),s(Ze,I3),s(H,L3),s(H,Ke),s(Ke,P3),s(Ke,kc),s(kc,A3),s(Ke,H3),s(H,j3),s(H,Vl),Vl.innerHTML=U6,h(p,tp,k),h(p,K,k),s(K,hc),s(hc,Qe),s(Qe,M3),s(K,R3),s(K,vc),s(vc,G3),s(K,V3),s(K,Xe),s(Xe,q3),s(Xe,dc),s(dc,U3),s(Xe,B3),s(K,J3),s(K,ql),ql.innerHTML=B6,h(p,np,k),h(p,L,k),s(L,uc),s(uc,st),s(st,W3),s(L,z3),s(L,at),s(at,F3),s(at,Ul),s(Ul,Y3),s(at,Z3),s(L,K3),s(L,et),s(et,Q3),s(et,Bl),s(Bl,X3),s(et,sg),s(L,ag),s(L,yc),s(yc,eg),s(L,tg),s(L,Jl),Jl.innerHTML=J6,s(L,ng),s(L,fc),s(fc,tt),s(tt,og),s(L,lg),s(L,Ws),s(Ws,rg),s(Ws,Wl),s(Wl,ig),s(Ws,cg),s(Ws,zl),s(zl,pg),s(Ws,kg),s(L,hg),s(L,Fl),Fl.innerHTML=W6,h(p,op,k),h(p,Yl,k),s(Yl,mc),s(mc,nt),s(nt,vg),h(p,lp,k),h(p,Zl,k),s(Zl,xc),s(xc,ot),s(ot,dg),h(p,rp,k),h(p,Kl,k),s(Kl,gc),s(gc,lt),s(lt,ug),h(p,ip,k),h(p,Ql,k),s(Ql,Ec),s(Ec,rt),s(rt,yg),h(p,cp,k),h(p,B,k),s(B,_c),s(_c,it),s(it,fg),s(B,mg),s(B,ct),s(ct,xg),s(ct,pt),s(pt,gg),s(ct,Eg),s(B,_g),s(B,ys),s(ys,bg),s(ys,kt),s(kt,wg),s(ys,$g),s(ys,ht),s(ht,Og),s(ys,Dg),s(ys,vt),s(vt,Sg),s(ys,Tg),s(B,Ng),s(B,bc),s(bc,dt),s(dt,Cg),s(dt,Xl),s(Xl,Ig),s(dt,Lg),s(B,Pg),s(B,wc),s(wc,ut),s(ut,Ag),s(ut,sr),s(sr,Hg),s(ut,jg),h(p,pp,k),h(p,ka,k),s(ka,$c),s($c,yt),s(yt,Mg),s(ka,Rg),s(ka,F),s(F,ft),s(ft,Gg),s(ft,mt),s(mt,Vg),s(ft,qg),s(F,Ug),s(F,ha),s(ha,Bg),s(ha,xt),s(xt,Jg),s(ha,Wg),s(ha,gt),s(gt,zg),s(F,Fg),s(F,ar),s(ar,Et),s(Et,Yg),s(ar,Zg),s(F,Kg),s(F,er),s(er,_t),s(_t,Qg),s(er,Xg),s(F,sE),s(F,Oc),s(Oc,bt),s(bt,aE)},p:q4,d(p){p&&a(T),p&&a(Da),p&&a(ts),p&&a(Gc),p&&a(Sa),p&&a(Vc),p&&a(xs),p&&a(qc),p&&a(Ys),p&&a(Uc),p&&a(gs),p&&a(Bc),p&&a(w),p&&a(Jc),p&&a(g),p&&a(Wc),p&&a(u),p&&a(zc),p&&a(_),p&&a(Fc),p&&a(na),p&&a(Yc),p&&a(N),p&&a(Zc),p&&a(b),p&&a(Kc),p&&a(f),p&&a(Qc),p&&a(Es),p&&a(Xc),p&&a(la),p&&a(sp),p&&a(v),p&&a(ap),p&&a(I),p&&a(ep),p&&a(H),p&&a(tp),p&&a(K),p&&a(np),p&&a(L),p&&a(op),p&&a(Yl),p&&a(lp),p&&a(Zl),p&&a(rp),p&&a(Kl),p&&a(ip),p&&a(Ql),p&&a(cp),p&&a(B),p&&a(pp),p&&a(ka)}}}function W4(Ot){let T,q;const Ds=[Ot[0],i6];let ms={$$slots:{default:[J4]},$$scope:{ctx:Ot}};for(let C=0;C<Ds.length;C+=1)ms=mE(ms,Ds[C]);return T=new U4({props:ms}),{c(){P4(T.$$.fragment)},l(C){A4(T.$$.fragment,C)},m(C,es){H4(T,C,es),q=!0},p(C,[es]){const Da=es&1?j4(Ds,[es&1&&l6(C[0]),es&0&&l6(i6)]):{};es&2&&(Da.$$scope={dirty:es,ctx:C}),T.$set(Da)},i(C){q||(M4(T.$$.fragment,C),q=!0)},o(C){R4(T.$$.fragment,C),q=!1},d(C){G4(T,C)}}}const i6={title:"Compile Svelte in your head (Part 2)",date:"2020-03-22T08:00:00Z",tags:["Svelte","JavaScript"],series:"Compile Svelte in your head",label:"blog",description:"\u2B05 \u2B05  Previously in Part 1.Previously, when I mentioned the `$invalidate` function, I explained that the `$invalidate` function works conceptually like the following:but that's not the exact implementation of the ...",tableOfContents:[{link:"pre-v3-16-0",title:"Pre v3.16.0",nested:[{link:"ctx",title:"$.ctx"},{link:"dirty",title:"$.dirty"},{link:"invalidate",title:"$invalidate"},{link:"schedule-update",title:"schedule_update",nested:[{link:"tl-dr",title:"tl/dr:"}]}]},{link:"v3-16-0",title:"v3.16.0",nested:[{link:"bitmask",title:"Bitmask"},{link:"bitmask-in-svelte",title:"Bitmask in Svelte",nested:[{link:"destructuring-dirty",title:"Destructuring  $.dirty"},{link:"tl-dr-1",title:"tl/dr:"}]}]},{link:"reactive-declaration",title:"Reactive Declaration",nested:[{link:"1-execution-of-all-reactive-declarations-and-statements-are-batched",title:"1. Execution of all reactive declarations and statements are batched"},{link:"2-the-value-of-reactive-variable-outside-of-reactive-declarations-and-statements-may-not-be-up-to-date",title:"2. The value of reactive variable outside of reactive declarations and statements may not be up to date"},{link:"sorting-of-reactive-declarations-and-statements",title:"Sorting of reactive declarations and statements"},{link:"reactive-variable-that-is-not-reactive",title:"Reactive variable that is not reactive"}]},{link:"summary",title:"Summary",nested:[{link:"1-svelte-keeps-track-of-which-variables-are-dirty-and-batched-the-dom-updates",title:"1. Svelte keeps track of which variables are dirty and batched the DOM updates."},{link:"2-using-bitmask-svelte-able-to-generate-a-more-compact-compiled-code",title:"2. Using bitmask, Svelte able to generate a more compact compiled code."},{link:"3-reactive-declarations-and-statements-are-executed-in-batch-just-like-dom-updates",title:"3. Reactive declarations and statements are executed in batch, just like DOM updates"}]},{link:"closing-note",title:"Closing Note"},{link:"further-resources",title:"Further Resources"}]};function z4(Ot,T,q){return V4("blog",{image:B4}),Ot.$$set=Ds=>{q(0,T=mE(mE({},T),r6(Ds)))},T=r6(T),[T]}class X4 extends C4{constructor(T){super();I4(this,T,z4,W4,L4,{})}}export{X4 as default,i6 as metadata};
