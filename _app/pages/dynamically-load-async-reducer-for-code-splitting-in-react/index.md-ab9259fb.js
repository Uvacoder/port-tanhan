import{S as sa,i as ta,s as aa,C as Ys,w as zt,x as Gt,y as Kt,z as ra,A as Wt,q as Qt,o as Yt,B as Ft,r as na,R as Nt,k as h,e as a,t as s,m as d,c as r,a as n,h as t,d as o,b as l,g as T,F as e,O as la}from"../../chunks/vendor-6bf294e3.js";import{B as ia}from"../../chunks/BlogLayout-152f599b.js";import{T as ca}from"../../chunks/TableOfContent-1b9e4572.js";import{_ as pa}from"../../chunks/twitter-card-image-a57df29d.js";import"../../chunks/stores-e20b7872.js";import"../../chunks/WebMentions-745413ea.js";/* empty css                                */function ha(oe){let k,_,x,O,u,w,q,Me,v,be,D,Xe,eo,Ee,oo,so,b,P,to,se,ao,ro,Re,no,lo,io,A,co,te,po,ho,ae,ko,uo,Ce,yo,vo,re,$,fo,mo,xo,Te,wo,go,ne,Vt=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// root.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> React </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;react&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; Provider &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;react-redux&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; store &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;./store&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> CustomComponent </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./CustomComponent&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">App</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// react-redux provider to provide the store in React context</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-constant)">Provider</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">store</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">&#123;store&#125;&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &lt;</span><span style="color: var(--shiki-token-constant)">CustomComponent</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;/</span><span style="color: var(--shiki-token-constant)">Provider</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  );</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// store.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; createStore</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> combineReducers &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;redux&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// import all your reducers here</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> reducerA </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./reducerA&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> reducerB </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./reducerB&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> reducerC </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./reducerC&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// combine all your reducers here</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">rootReducer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">combineReducers</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  reducerA</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> reducerA</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  reducerB</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> reducerB</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  reducerC</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> reducerC</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// create the redux store!</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">store</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createStore</span><span style="color: var(--shiki-color-text)">(rootReducer);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// CustomComponent.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> React </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;react&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; connect &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;react-redux&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CustomComponent</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">mapStateToProps</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> state </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;&#125;; &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">mapDispatchToProps</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> dispatch </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> ( return &#123;&#125;; &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">export default </span><span style="color: var(--shiki-token-function)">connect</span><span style="color: var(--shiki-color-text)">(mapStateToProps</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> mapDispatchToProps)(CustomComponent);</span></span></code></pre>`,ze,R,Oe,L,_o,bo,Pe,Eo,Ro,Ie,Co,Ge,i,Se,B,To,Oo,H,Po,U,Io,So,Ao,W,jo,N,qo,Do,$o,Ae,le,Lo,M,Bo,Ho,y,Uo,z,Wo,No,G,Mo,zo,K,Go,Ko,ie,Qo,Yo,ce,Fo,Vo,Zo,I,Jo,pe,Xo,es,he,os,ss,ts,je,qe,as,rs,Q,ns,Y,ls,is,cs,De,$e,ps,hs,Le,ds,ks,de,Zt=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> React </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;react&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> gameReducer </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./gameReducer&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> injectReducer </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;inducer&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CustomComponent</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">React</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">Component</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// component logic here</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">injectReducer</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  game</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> gameReducer</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;)(CustomComponent);</span></span></code></pre>`,us,f,F,ys,vs,Be,fs,ms,He,xs,ws,ke,gs,_s,ue,bs,Es,Rs,Ue,We,Cs,Ts,V,Os,ye,Ps,Is,Ss,ve,Jt=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">InjectReducer</span><span style="color: var(--shiki-color-text)">.contextTypes </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  store</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PropTypes</span><span style="color: var(--shiki-token-function)">.shape</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">     replaceReducer</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PropTypes</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">func</span><span style="color: var(--shiki-color-text)">.isRequired</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,As,Z,js,J,qs,Ds,$s,S,Ls,fe,Bs,Hs,me,Us,Ws,Ns,X,Ms,ee,zs,Gs,Ke;return k=new ca({props:{data:[{link:"context",title:"Context"},{link:"problem",title:"Problem"},{link:"solution",title:"Solution"}]}}),{c(){zt(k.$$.fragment),_=h(),x=a("blockquote"),O=a("p"),u=s("This article assumes you have basic knowledge on React and Redux. If you like to learn more about React or Redux, you can go here to learn more."),w=h(),q=a("hr"),Me=h(),v=a("section"),be=a("h2"),D=a("a"),Xe=s("Context"),eo=h(),Ee=a("p"),oo=s("A common pattern to write a React Redux application is to have:"),so=h(),b=a("ul"),P=a("li"),to=s("a "),se=a("code"),ao=s("rootReducer"),ro=s(" that imports "),Re=a("strong"),no=s("all the reducers"),lo=s(" that will be used in the application"),io=h(),A=a("li"),co=s("a "),te=a("code"),po=s("reduxStore"),ho=s(" that is created using "),ae=a("code"),ko=s("rootReducer"),uo=h(),Ce=a("li"),yo=s("the React application"),vo=h(),re=a("li"),$=a("a"),fo=s("react-redux"),mo=s(" that bridge React components and Redux together"),xo=h(),Te=a("p"),wo=s("This is what its going to be look like in code:"),go=h(),ne=a("div"),ze=h(),R=a("section"),Oe=a("h2"),L=a("a"),_o=s("Problem"),bo=h(),Pe=a("p"),Eo=s("Everything seemed perfect, until your app size increases too fast\u2026"),Ro=h(),Ie=a("p"),Co=s("It takes much longer time to load your web app, and things got worse with a crappy internet speed\u2026"),Ge=h(),i=a("section"),Se=a("h2"),B=a("a"),To=s("Solution"),Oo=h(),H=a("p"),Po=s("I know you "),U=a("a"),Io=s("must have googled for the solution online."),So=s(" \u{1F609}"),Ao=h(),W=a("p"),jo=s("So, lets talk about one of the solutions that you can do to make your app bundle smaller \u200A\u2014 "),N=a("a"),qo=s("\u200Acode splitting using webpack"),Do=s("!"),$o=h(),Ae=a("blockquote"),le=a("p"),Lo=s("Code splitting is one of the most compelling features of webpack. This feature allows you to split your code into various bundles which can then be loaded on demand or in parallel. It can be used to achieve smaller bundles and control resource load prioritization which, if used correctly, can have a major impact on load time.\u200A\u2014"),M=a("a"),Bo=s("\u200Awebpack"),Ho=h(),y=a("p"),Uo=s("Great! Webpack provides "),z=a("a"),Wo=s("import()"),No=s(" syntax, that conforms to the "),G=a("a"),Mo=s("ECMAScript proposal"),zo=s(" for dynamic imports. Let\u2019s try to split our code "),K=a("a"),Go=s("based on different entry points of your routes"),Ko=s(". This makes perfect sense, user that goes to "),ie=a("code"),Qo=s("mywebsite/foo"),Yo=s(" do not need code that is written only for "),ce=a("code"),Fo=s("mywebsite/bar"),Vo=s("!"),Zo=h(),I=a("p"),Jo=s("By now, you should realise, reducer that is written only for "),pe=a("code"),Xo=s("mywebsite/bar"),es=s(", shouldn\u2019t be imported or included when you are visiting "),he=a("code"),os=s("mywebsite/foo"),ss=s("!"),ts=h(),je=a("blockquote"),qe=a("p"),as=s("Then how do I dynamically load reducers for code splitting in a Redux application?"),rs=h(),Q=a("p"),ns=s("That\u2019s a "),Y=a("a"),ls=s("StackOverflow thread"),is=s(" that you should read about."),cs=h(),De=a("blockquote"),$e=a("p"),ps=s("There may be neater way of expressing this\u200A\u2014\u200AI\u2019m just showing the idea."),hs=h(),Le=a("p"),ds=s("Yes, one of a neater way is to write a higher order component that takes care of dynamically loading of reducers."),ks=h(),de=a("div"),us=h(),f=a("p"),F=a("a"),ys=s("inducer"),vs=s(" (read: "),Be=a("strong"),fs=s("In"),ms=s("ject Re"),He=a("strong"),xs=s("ducer"),ws=s(") gives you a HOC that will add you reducer to the Redux store that is currently using during "),ke=a("code"),gs=s("componentWillMount"),_s=s(" and remove it during "),ue=a("code"),bs=s("componentWillUnmount"),Es=s(". It\u2019s that simple!"),Rs=h(),Ue=a("blockquote"),We=a("p"),Cs=s("So, how does inducer actually works?"),Ts=h(),V=a("p"),Os=s("Firstly, inducer HOC gets the store from context, provided from the StoreProvider of "),ye=a("code"),Ps=s("react-redux"),Is=s(" ."),Ss=h(),ve=a("div"),As=h(),Z=a("p"),js=s("Next, inducer HOC comes up with the new async root reducer that includes the reducer you want to include, and use "),J=a("a"),qs=s("replaceReducer"),Ds=s(" from Redux to updates the reducer."),$s=h(),S=a("p"),Ls=s("When "),fe=a("code"),Bs=s("componentWillUnmount"),Hs=s(" inducer will remove your reducer and call "),me=a("code"),Us=s("replaceReducer"),Ws=s(" again!"),Ns=h(),X=a("p"),Ms=s("You can read the "),ee=a("a"),zs=s("complete code"),Gs=s(" here!"),this.h()},l(c){Gt(k.$$.fragment,c),_=d(c),x=r(c,"BLOCKQUOTE",{});var m=n(x);O=r(m,"P",{});var Fs=n(O);u=t(Fs,"This article assumes you have basic knowledge on React and Redux. If you like to learn more about React or Redux, you can go here to learn more."),Fs.forEach(o),m.forEach(o),w=d(c),q=r(c,"HR",{}),Me=d(c),v=r(c,"SECTION",{});var C=n(v);be=r(C,"H2",{});var Vs=n(be);D=r(Vs,"A",{href:!0,id:!0});var Zs=n(D);Xe=t(Zs,"Context"),Zs.forEach(o),Vs.forEach(o),eo=d(C),Ee=r(C,"P",{});var Js=n(Ee);oo=t(Js,"A common pattern to write a React Redux application is to have:"),Js.forEach(o),so=d(C),b=r(C,"UL",{});var j=n(b);P=r(j,"LI",{});var xe=n(P);to=t(xe,"a "),se=r(xe,"CODE",{class:!0});var Xs=n(se);ao=t(Xs,"rootReducer"),Xs.forEach(o),ro=t(xe," that imports "),Re=r(xe,"STRONG",{});var et=n(Re);no=t(et,"all the reducers"),et.forEach(o),lo=t(xe," that will be used in the application"),xe.forEach(o),io=d(j),A=r(j,"LI",{});var Ne=n(A);co=t(Ne,"a "),te=r(Ne,"CODE",{class:!0});var ot=n(te);po=t(ot,"reduxStore"),ot.forEach(o),ho=t(Ne," that is created using "),ae=r(Ne,"CODE",{class:!0});var st=n(ae);ko=t(st,"rootReducer"),st.forEach(o),Ne.forEach(o),uo=d(j),Ce=r(j,"LI",{});var tt=n(Ce);yo=t(tt,"the React application"),tt.forEach(o),vo=d(j),re=r(j,"LI",{});var Ks=n(re);$=r(Ks,"A",{href:!0,rel:!0});var at=n($);fo=t(at,"react-redux"),at.forEach(o),mo=t(Ks," that bridge React components and Redux together"),Ks.forEach(o),j.forEach(o),xo=d(C),Te=r(C,"P",{});var rt=n(Te);wo=t(rt,"This is what its going to be look like in code:"),rt.forEach(o),go=d(C),ne=r(C,"DIV",{class:!0});var Xt=n(ne);Xt.forEach(o),C.forEach(o),ze=d(c),R=r(c,"SECTION",{});var we=n(R);Oe=r(we,"H2",{});var nt=n(Oe);L=r(nt,"A",{href:!0,id:!0});var lt=n(L);_o=t(lt,"Problem"),lt.forEach(o),nt.forEach(o),bo=d(we),Pe=r(we,"P",{});var it=n(Pe);Eo=t(it,"Everything seemed perfect, until your app size increases too fast\u2026"),it.forEach(o),Ro=d(we),Ie=r(we,"P",{});var ct=n(Ie);Co=t(ct,"It takes much longer time to load your web app, and things got worse with a crappy internet speed\u2026"),ct.forEach(o),we.forEach(o),Ge=d(c),i=r(c,"SECTION",{});var p=n(i);Se=r(p,"H2",{});var pt=n(Se);B=r(pt,"A",{href:!0,id:!0});var ht=n(B);To=t(ht,"Solution"),ht.forEach(o),pt.forEach(o),Oo=d(p),H=r(p,"P",{});var Qe=n(H);Po=t(Qe,"I know you "),U=r(Qe,"A",{href:!0,rel:!0});var dt=n(U);Io=t(dt,"must have googled for the solution online."),dt.forEach(o),So=t(Qe," \u{1F609}"),Qe.forEach(o),Ao=d(p),W=r(p,"P",{});var Ye=n(W);jo=t(Ye,"So, lets talk about one of the solutions that you can do to make your app bundle smaller \u200A\u2014 "),N=r(Ye,"A",{href:!0,rel:!0});var kt=n(N);qo=t(kt,"\u200Acode splitting using webpack"),kt.forEach(o),Do=t(Ye,"!"),Ye.forEach(o),$o=d(p),Ae=r(p,"BLOCKQUOTE",{});var ut=n(Ae);le=r(ut,"P",{});var Qs=n(le);Lo=t(Qs,"Code splitting is one of the most compelling features of webpack. This feature allows you to split your code into various bundles which can then be loaded on demand or in parallel. It can be used to achieve smaller bundles and control resource load prioritization which, if used correctly, can have a major impact on load time.\u200A\u2014"),M=r(Qs,"A",{href:!0,rel:!0});var yt=n(M);Bo=t(yt,"\u200Awebpack"),yt.forEach(o),Qs.forEach(o),ut.forEach(o),Ho=d(p),y=r(p,"P",{});var g=n(y);Uo=t(g,"Great! Webpack provides "),z=r(g,"A",{href:!0,rel:!0});var vt=n(z);Wo=t(vt,"import()"),vt.forEach(o),No=t(g," syntax, that conforms to the "),G=r(g,"A",{href:!0,rel:!0});var ft=n(G);Mo=t(ft,"ECMAScript proposal"),ft.forEach(o),zo=t(g," for dynamic imports. Let\u2019s try to split our code "),K=r(g,"A",{href:!0,rel:!0});var mt=n(K);Go=t(mt,"based on different entry points of your routes"),mt.forEach(o),Ko=t(g,". This makes perfect sense, user that goes to "),ie=r(g,"CODE",{class:!0});var xt=n(ie);Qo=t(xt,"mywebsite/foo"),xt.forEach(o),Yo=t(g," do not need code that is written only for "),ce=r(g,"CODE",{class:!0});var wt=n(ce);Fo=t(wt,"mywebsite/bar"),wt.forEach(o),Vo=t(g,"!"),g.forEach(o),Zo=d(p),I=r(p,"P",{});var ge=n(I);Jo=t(ge,"By now, you should realise, reducer that is written only for "),pe=r(ge,"CODE",{class:!0});var gt=n(pe);Xo=t(gt,"mywebsite/bar"),gt.forEach(o),es=t(ge,", shouldn\u2019t be imported or included when you are visiting "),he=r(ge,"CODE",{class:!0});var _t=n(he);os=t(_t,"mywebsite/foo"),_t.forEach(o),ss=t(ge,"!"),ge.forEach(o),ts=d(p),je=r(p,"BLOCKQUOTE",{});var bt=n(je);qe=r(bt,"P",{});var Et=n(qe);as=t(Et,"Then how do I dynamically load reducers for code splitting in a Redux application?"),Et.forEach(o),bt.forEach(o),rs=d(p),Q=r(p,"P",{});var Fe=n(Q);ns=t(Fe,"That\u2019s a "),Y=r(Fe,"A",{href:!0,rel:!0});var Rt=n(Y);ls=t(Rt,"StackOverflow thread"),Rt.forEach(o),is=t(Fe," that you should read about."),Fe.forEach(o),cs=d(p),De=r(p,"BLOCKQUOTE",{});var Ct=n(De);$e=r(Ct,"P",{});var Tt=n($e);ps=t(Tt,"There may be neater way of expressing this\u200A\u2014\u200AI\u2019m just showing the idea."),Tt.forEach(o),Ct.forEach(o),hs=d(p),Le=r(p,"P",{});var Ot=n(Le);ds=t(Ot,"Yes, one of a neater way is to write a higher order component that takes care of dynamically loading of reducers."),Ot.forEach(o),ks=d(p),de=r(p,"DIV",{class:!0});var ea=n(de);ea.forEach(o),us=d(p),f=r(p,"P",{});var E=n(f);F=r(E,"A",{href:!0,rel:!0});var Pt=n(F);ys=t(Pt,"inducer"),Pt.forEach(o),vs=t(E," (read: "),Be=r(E,"STRONG",{});var It=n(Be);fs=t(It,"In"),It.forEach(o),ms=t(E,"ject Re"),He=r(E,"STRONG",{});var St=n(He);xs=t(St,"ducer"),St.forEach(o),ws=t(E,") gives you a HOC that will add you reducer to the Redux store that is currently using during "),ke=r(E,"CODE",{class:!0});var At=n(ke);gs=t(At,"componentWillMount"),At.forEach(o),_s=t(E," and remove it during "),ue=r(E,"CODE",{class:!0});var jt=n(ue);bs=t(jt,"componentWillUnmount"),jt.forEach(o),Es=t(E,". It\u2019s that simple!"),E.forEach(o),Rs=d(p),Ue=r(p,"BLOCKQUOTE",{});var qt=n(Ue);We=r(qt,"P",{});var Dt=n(We);Cs=t(Dt,"So, how does inducer actually works?"),Dt.forEach(o),qt.forEach(o),Ts=d(p),V=r(p,"P",{});var Ve=n(V);Os=t(Ve,"Firstly, inducer HOC gets the store from context, provided from the StoreProvider of "),ye=r(Ve,"CODE",{class:!0});var $t=n(ye);Ps=t($t,"react-redux"),$t.forEach(o),Is=t(Ve," ."),Ve.forEach(o),Ss=d(p),ve=r(p,"DIV",{class:!0});var oa=n(ve);oa.forEach(o),As=d(p),Z=r(p,"P",{});var Ze=n(Z);js=t(Ze,"Next, inducer HOC comes up with the new async root reducer that includes the reducer you want to include, and use "),J=r(Ze,"A",{href:!0,rel:!0});var Lt=n(J);qs=t(Lt,"replaceReducer"),Lt.forEach(o),Ds=t(Ze," from Redux to updates the reducer."),Ze.forEach(o),$s=d(p),S=r(p,"P",{});var _e=n(S);Ls=t(_e,"When "),fe=r(_e,"CODE",{class:!0});var Bt=n(fe);Bs=t(Bt,"componentWillUnmount"),Bt.forEach(o),Hs=t(_e," inducer will remove your reducer and call "),me=r(_e,"CODE",{class:!0});var Ht=n(me);Us=t(Ht,"replaceReducer"),Ht.forEach(o),Ws=t(_e," again!"),_e.forEach(o),Ns=d(p),X=r(p,"P",{});var Je=n(X);Ms=t(Je,"You can read the "),ee=r(Je,"A",{href:!0,rel:!0});var Ut=n(ee);zs=t(Ut,"complete code"),Ut.forEach(o),Gs=t(Je," here!"),Je.forEach(o),p.forEach(o),this.h()},h(){l(D,"href","#context"),l(D,"id","context"),l(se,"class","inline"),l(te,"class","inline"),l(ae,"class","inline"),l($,"href","https://github.com/reduxjs/react-redux"),l($,"rel","nofollow"),l(ne,"class","code-section"),l(L,"href","#problem"),l(L,"id","problem"),l(B,"href","#solution"),l(B,"id","solution"),l(U,"href","http://lmgtfy.com/?q=code-splitting"),l(U,"rel","nofollow"),l(N,"href","https://webpack.js.org/guides/code-splitting/"),l(N,"rel","nofollow"),l(M,"href","https://webpack.js.org/guides/code-splitting/"),l(M,"rel","nofollow"),l(z,"href","https://webpack.js.org/guides/code-splitting/#dynamic-imports"),l(z,"rel","nofollow"),l(G,"href","https://github.com/tc39/proposal-dynamic-import"),l(G,"rel","nofollow"),l(K,"href","https://github.com/ReactTraining/react-router/blob/master/packages/react-router-dom/docs/guides/code-splitting.md"),l(K,"rel","nofollow"),l(ie,"class","inline"),l(ce,"class","inline"),l(pe,"class","inline"),l(he,"class","inline"),l(Y,"href","https://stackoverflow.com/questions/32968016/how-to-dynamically-load-reducers-for-code-splitting-in-a-redux-application"),l(Y,"rel","nofollow"),l(de,"class","code-section"),l(F,"href","https://www.npmjs.com/package/inducer"),l(F,"rel","nofollow"),l(ke,"class","inline"),l(ue,"class","inline"),l(ye,"class","inline"),l(ve,"class","code-section"),l(J,"href","https://redux.js.org/api/store#replaceReducer"),l(J,"rel","nofollow"),l(fe,"class","inline"),l(me,"class","inline"),l(ee,"href","https://github.com/tanhauhau/inducer/blob/master/src/index.js"),l(ee,"rel","nofollow")},m(c,m){Kt(k,c,m),T(c,_,m),T(c,x,m),e(x,O),e(O,u),T(c,w,m),T(c,q,m),T(c,Me,m),T(c,v,m),e(v,be),e(be,D),e(D,Xe),e(v,eo),e(v,Ee),e(Ee,oo),e(v,so),e(v,b),e(b,P),e(P,to),e(P,se),e(se,ao),e(P,ro),e(P,Re),e(Re,no),e(P,lo),e(b,io),e(b,A),e(A,co),e(A,te),e(te,po),e(A,ho),e(A,ae),e(ae,ko),e(b,uo),e(b,Ce),e(Ce,yo),e(b,vo),e(b,re),e(re,$),e($,fo),e(re,mo),e(v,xo),e(v,Te),e(Te,wo),e(v,go),e(v,ne),ne.innerHTML=Vt,T(c,ze,m),T(c,R,m),e(R,Oe),e(Oe,L),e(L,_o),e(R,bo),e(R,Pe),e(Pe,Eo),e(R,Ro),e(R,Ie),e(Ie,Co),T(c,Ge,m),T(c,i,m),e(i,Se),e(Se,B),e(B,To),e(i,Oo),e(i,H),e(H,Po),e(H,U),e(U,Io),e(H,So),e(i,Ao),e(i,W),e(W,jo),e(W,N),e(N,qo),e(W,Do),e(i,$o),e(i,Ae),e(Ae,le),e(le,Lo),e(le,M),e(M,Bo),e(i,Ho),e(i,y),e(y,Uo),e(y,z),e(z,Wo),e(y,No),e(y,G),e(G,Mo),e(y,zo),e(y,K),e(K,Go),e(y,Ko),e(y,ie),e(ie,Qo),e(y,Yo),e(y,ce),e(ce,Fo),e(y,Vo),e(i,Zo),e(i,I),e(I,Jo),e(I,pe),e(pe,Xo),e(I,es),e(I,he),e(he,os),e(I,ss),e(i,ts),e(i,je),e(je,qe),e(qe,as),e(i,rs),e(i,Q),e(Q,ns),e(Q,Y),e(Y,ls),e(Q,is),e(i,cs),e(i,De),e(De,$e),e($e,ps),e(i,hs),e(i,Le),e(Le,ds),e(i,ks),e(i,de),de.innerHTML=Zt,e(i,us),e(i,f),e(f,F),e(F,ys),e(f,vs),e(f,Be),e(Be,fs),e(f,ms),e(f,He),e(He,xs),e(f,ws),e(f,ke),e(ke,gs),e(f,_s),e(f,ue),e(ue,bs),e(f,Es),e(i,Rs),e(i,Ue),e(Ue,We),e(We,Cs),e(i,Ts),e(i,V),e(V,Os),e(V,ye),e(ye,Ps),e(V,Is),e(i,Ss),e(i,ve),ve.innerHTML=Jt,e(i,As),e(i,Z),e(Z,js),e(Z,J),e(J,qs),e(Z,Ds),e(i,$s),e(i,S),e(S,Ls),e(S,fe),e(fe,Bs),e(S,Hs),e(S,me),e(me,Us),e(S,Ws),e(i,Ns),e(i,X),e(X,Ms),e(X,ee),e(ee,zs),e(X,Gs),Ke=!0},p:la,i(c){Ke||(Qt(k.$$.fragment,c),Ke=!0)},o(c){Yt(k.$$.fragment,c),Ke=!1},d(c){Ft(k,c),c&&o(_),c&&o(x),c&&o(w),c&&o(q),c&&o(Me),c&&o(v),c&&o(ze),c&&o(R),c&&o(Ge),c&&o(i)}}}function da(oe){let k,_;const x=[oe[0],Mt];let O={$$slots:{default:[ha]},$$scope:{ctx:oe}};for(let u=0;u<x.length;u+=1)O=Ys(O,x[u]);return k=new ia({props:O}),{c(){zt(k.$$.fragment)},l(u){Gt(k.$$.fragment,u)},m(u,w){Kt(k,u,w),_=!0},p(u,[w]){const q=w&1?ra(x,[w&1&&Wt(u[0]),w&0&&Wt(Mt)]):{};w&2&&(q.$$scope={dirty:w,ctx:u}),k.$set(q)},i(u){_||(Qt(k.$$.fragment,u),_=!0)},o(u){Yt(k.$$.fragment,u),_=!1},d(u){Ft(k,u)}}}const Mt={title:"Dynamically load reducers for code splitting in a React Redux application",date:"2017-11-16T08:00:00Z",description:"How to inject reducer asynchronously",label:"blog"};function ka(oe,k,_){return na("blog",{image:pa}),oe.$$set=x=>{_(0,k=Ys(Ys({},k),Nt(x)))},k=Nt(k),[k]}class ga extends sa{constructor(k){super();ta(this,k,ka,da,aa,{})}}export{ga as default,Mt as metadata};
