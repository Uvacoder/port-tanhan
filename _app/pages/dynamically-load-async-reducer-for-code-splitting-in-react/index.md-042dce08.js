import{S as Qt,i as Yt,s as Vt,C as Gs,w as Ft,x as Jt,y as Zt,z as Xt,A as Bt,q as ea,o as oa,B as sa,r as ta,Y as Ut,e as a,t as s,k as p,c as r,a as n,h as t,d as o,m as h,b as l,g as I,H as e,J as aa}from"../../chunks/vendor-da4388d4.js";import{B as ra}from"../../chunks/BlogLayout-14cfab6f.js";import{_ as na}from"../../chunks/twitter-card-image-a57df29d.js";import"../../chunks/stores-1fad7c36.js";import"../../chunks/ldjson-b0805387.js";/* empty css                                */function la(ee){let k,m,C,S,u,x,y,_e,q,Fe,Je,be,Ze,Xe,_,O,eo,oe,oo,so,Ee,to,ao,ro,A,no,se,lo,io,te,co,po,Re,ho,ko,ae,D,uo,yo,vo,Ce,fo,mo,re,$t=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// root.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> React </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;react&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; Provider &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;react-redux&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; store &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;./store&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> CustomComponent </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./CustomComponent&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">App</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// react-redux provider to provide the store in React context</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;</span><span style="color: var(--shiki-token-constant)">Provider</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">store</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)">&#123;store&#125;&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &lt;</span><span style="color: var(--shiki-token-constant)">CustomComponent</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &lt;/</span><span style="color: var(--shiki-token-constant)">Provider</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  );</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// store.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; createStore</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> combineReducers &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;redux&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// import all your reducers here</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> reducerA </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./reducerA&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> reducerB </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./reducerB&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> reducerC </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./reducerC&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// combine all your reducers here</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">rootReducer</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">combineReducers</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  reducerA</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> reducerA</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  reducerB</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> reducerB</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  reducerC</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> reducerC</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// create the redux store!</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">store</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">createStore</span><span style="color: var(--shiki-color-text)">(rootReducer);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// CustomComponent.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> React </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;react&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; connect &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;react-redux&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CustomComponent</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">mapStateToProps</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> state </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;&#125;; &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">mapDispatchToProps</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> dispatch </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> ( return &#123;&#125;; &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">export default </span><span style="color: var(--shiki-token-function)">connect</span><span style="color: var(--shiki-color-text)">(mapStateToProps</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> mapDispatchToProps)(CustomComponent);</span></span></code></pre>`,Ne,E,Oe,L,xo,wo,Te,go,_o,Pe,bo,Me,i,Ie,H,Eo,Ro,B,Co,U,Oo,To,Po,W,Io,$,So,Ao,jo,Se,ne,qo,N,Do,Lo,v,Ho,M,Bo,Uo,z,Wo,$o,G,No,Mo,le,zo,Go,ie,Ko,Qo,Yo,T,Vo,ce,Fo,Jo,pe,Zo,Xo,es,Ae,je,os,ss,K,ts,Q,as,rs,ns,qe,De,ls,is,Le,cs,ps,he,Nt=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> React </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;react&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> gameReducer </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./gameReducer&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> injectReducer </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;inducer&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">CustomComponent</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">React</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">Component</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// component logic here</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">injectReducer</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  game</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> gameReducer</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;)(CustomComponent);</span></span></code></pre>`,hs,f,Y,ds,ks,He,us,ys,Be,vs,fs,de,ms,xs,ke,ws,gs,_s,Ue,We,bs,Es,V,Rs,ue,Cs,Os,Ts,ye,Mt=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">InjectReducer</span><span style="color: var(--shiki-color-text)">.contextTypes </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  store</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PropTypes</span><span style="color: var(--shiki-token-function)">.shape</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">     replaceReducer</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PropTypes</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">func</span><span style="color: var(--shiki-color-text)">.isRequired</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,Ps,F,Is,J,Ss,As,js,P,qs,ve,Ds,Ls,fe,Hs,Bs,Us,Z,Ws,X,$s,Ns;return{c(){k=a("blockquote"),m=a("p"),C=s("This article assumes you have basic knowledge on React and Redux. If you like to learn more about React or Redux, you can go here to learn more."),S=p(),u=a("hr"),x=p(),y=a("section"),_e=a("h2"),q=a("a"),Fe=s("Context"),Je=p(),be=a("p"),Ze=s("A common pattern to write a React Redux application is to have:"),Xe=p(),_=a("ul"),O=a("li"),eo=s("a "),oe=a("code"),oo=s("rootReducer"),so=s(" that imports "),Ee=a("strong"),to=s("all the reducers"),ao=s(" that will be used in the application"),ro=p(),A=a("li"),no=s("a "),se=a("code"),lo=s("reduxStore"),io=s(" that is created using "),te=a("code"),co=s("rootReducer"),po=p(),Re=a("li"),ho=s("the React application"),ko=p(),ae=a("li"),D=a("a"),uo=s("react-redux"),yo=s(" that bridge React components and Redux together"),vo=p(),Ce=a("p"),fo=s("This is what its going to be look like in code:"),mo=p(),re=a("div"),Ne=p(),E=a("section"),Oe=a("h2"),L=a("a"),xo=s("Problem"),wo=p(),Te=a("p"),go=s("Everything seemed perfect, until your app size increases too fast\u2026"),_o=p(),Pe=a("p"),bo=s("It takes much longer time to load your web app, and things got worse with a crappy internet speed\u2026"),Me=p(),i=a("section"),Ie=a("h2"),H=a("a"),Eo=s("Solution"),Ro=p(),B=a("p"),Co=s("I know you "),U=a("a"),Oo=s("must have googled for the solution online."),To=s(" \u{1F609}"),Po=p(),W=a("p"),Io=s("So, lets talk about one of the solutions that you can do to make your app bundle smaller \u200A\u2014 "),$=a("a"),So=s("\u200Acode splitting using webpack"),Ao=s("!"),jo=p(),Se=a("blockquote"),ne=a("p"),qo=s("Code splitting is one of the most compelling features of webpack. This feature allows you to split your code into various bundles which can then be loaded on demand or in parallel. It can be used to achieve smaller bundles and control resource load prioritization which, if used correctly, can have a major impact on load time.\u200A\u2014"),N=a("a"),Do=s("\u200Awebpack"),Lo=p(),v=a("p"),Ho=s("Great! Webpack provides "),M=a("a"),Bo=s("import()"),Uo=s(" syntax, that conforms to the "),z=a("a"),Wo=s("ECMAScript proposal"),$o=s(" for dynamic imports. Let\u2019s try to split our code "),G=a("a"),No=s("based on different entry points of your routes"),Mo=s(". This makes perfect sense, user that goes to "),le=a("code"),zo=s("mywebsite/foo"),Go=s(" do not need code that is written only for "),ie=a("code"),Ko=s("mywebsite/bar"),Qo=s("!"),Yo=p(),T=a("p"),Vo=s("By now, you should realise, reducer that is written only for "),ce=a("code"),Fo=s("mywebsite/bar"),Jo=s(", shouldn\u2019t be imported or included when you are visiting "),pe=a("code"),Zo=s("mywebsite/foo"),Xo=s("!"),es=p(),Ae=a("blockquote"),je=a("p"),os=s("Then how do I dynamically load reducers for code splitting in a Redux application?"),ss=p(),K=a("p"),ts=s("That\u2019s a "),Q=a("a"),as=s("StackOverflow thread"),rs=s(" that you should read about."),ns=p(),qe=a("blockquote"),De=a("p"),ls=s("There may be neater way of expressing this\u200A\u2014\u200AI\u2019m just showing the idea."),is=p(),Le=a("p"),cs=s("Yes, one of a neater way is to write a higher order component that takes care of dynamically loading of reducers."),ps=p(),he=a("div"),hs=p(),f=a("p"),Y=a("a"),ds=s("inducer"),ks=s(" (read: "),He=a("strong"),us=s("In"),ys=s("ject Re"),Be=a("strong"),vs=s("ducer"),fs=s(") gives you a HOC that will add you reducer to the Redux store that is currently using during "),de=a("code"),ms=s("componentWillMount"),xs=s(" and remove it during "),ke=a("code"),ws=s("componentWillUnmount"),gs=s(". It\u2019s that simple!"),_s=p(),Ue=a("blockquote"),We=a("p"),bs=s("So, how does inducer actually works?"),Es=p(),V=a("p"),Rs=s("Firstly, inducer HOC gets the store from context, provided from the StoreProvider of "),ue=a("code"),Cs=s("react-redux"),Os=s(" ."),Ts=p(),ye=a("div"),Ps=p(),F=a("p"),Is=s("Next, inducer HOC comes up with the new async root reducer that includes the reducer you want to include, and use "),J=a("a"),Ss=s("replaceReducer"),As=s(" from Redux to updates the reducer."),js=p(),P=a("p"),qs=s("When "),ve=a("code"),Ds=s("componentWillUnmount"),Ls=s(" inducer will remove your reducer and call "),fe=a("code"),Hs=s("replaceReducer"),Bs=s(" again!"),Us=p(),Z=a("p"),Ws=s("You can read the "),X=a("a"),$s=s("complete code"),Ns=s(" here!"),this.h()},l(d){k=r(d,"BLOCKQUOTE",{});var w=n(k);m=r(w,"P",{});var Ks=n(m);C=t(Ks,"This article assumes you have basic knowledge on React and Redux. If you like to learn more about React or Redux, you can go here to learn more."),Ks.forEach(o),w.forEach(o),S=h(d),u=r(d,"HR",{}),x=h(d),y=r(d,"SECTION",{});var R=n(y);_e=r(R,"H2",{});var Qs=n(_e);q=r(Qs,"A",{href:!0,id:!0});var Ys=n(q);Fe=t(Ys,"Context"),Ys.forEach(o),Qs.forEach(o),Je=h(R),be=r(R,"P",{});var Vs=n(be);Ze=t(Vs,"A common pattern to write a React Redux application is to have:"),Vs.forEach(o),Xe=h(R),_=r(R,"UL",{});var j=n(_);O=r(j,"LI",{});var me=n(O);eo=t(me,"a "),oe=r(me,"CODE",{class:!0});var Fs=n(oe);oo=t(Fs,"rootReducer"),Fs.forEach(o),so=t(me," that imports "),Ee=r(me,"STRONG",{});var Js=n(Ee);to=t(Js,"all the reducers"),Js.forEach(o),ao=t(me," that will be used in the application"),me.forEach(o),ro=h(j),A=r(j,"LI",{});var $e=n(A);no=t($e,"a "),se=r($e,"CODE",{class:!0});var Zs=n(se);lo=t(Zs,"reduxStore"),Zs.forEach(o),io=t($e," that is created using "),te=r($e,"CODE",{class:!0});var Xs=n(te);co=t(Xs,"rootReducer"),Xs.forEach(o),$e.forEach(o),po=h(j),Re=r(j,"LI",{});var et=n(Re);ho=t(et,"the React application"),et.forEach(o),ko=h(j),ae=r(j,"LI",{});var Ms=n(ae);D=r(Ms,"A",{href:!0,rel:!0});var ot=n(D);uo=t(ot,"react-redux"),ot.forEach(o),yo=t(Ms," that bridge React components and Redux together"),Ms.forEach(o),j.forEach(o),vo=h(R),Ce=r(R,"P",{});var st=n(Ce);fo=t(st,"This is what its going to be look like in code:"),st.forEach(o),mo=h(R),re=r(R,"DIV",{class:!0});var zt=n(re);zt.forEach(o),R.forEach(o),Ne=h(d),E=r(d,"SECTION",{});var xe=n(E);Oe=r(xe,"H2",{});var tt=n(Oe);L=r(tt,"A",{href:!0,id:!0});var at=n(L);xo=t(at,"Problem"),at.forEach(o),tt.forEach(o),wo=h(xe),Te=r(xe,"P",{});var rt=n(Te);go=t(rt,"Everything seemed perfect, until your app size increases too fast\u2026"),rt.forEach(o),_o=h(xe),Pe=r(xe,"P",{});var nt=n(Pe);bo=t(nt,"It takes much longer time to load your web app, and things got worse with a crappy internet speed\u2026"),nt.forEach(o),xe.forEach(o),Me=h(d),i=r(d,"SECTION",{});var c=n(i);Ie=r(c,"H2",{});var lt=n(Ie);H=r(lt,"A",{href:!0,id:!0});var it=n(H);Eo=t(it,"Solution"),it.forEach(o),lt.forEach(o),Ro=h(c),B=r(c,"P",{});var ze=n(B);Co=t(ze,"I know you "),U=r(ze,"A",{href:!0,rel:!0});var ct=n(U);Oo=t(ct,"must have googled for the solution online."),ct.forEach(o),To=t(ze," \u{1F609}"),ze.forEach(o),Po=h(c),W=r(c,"P",{});var Ge=n(W);Io=t(Ge,"So, lets talk about one of the solutions that you can do to make your app bundle smaller \u200A\u2014 "),$=r(Ge,"A",{href:!0,rel:!0});var pt=n($);So=t(pt,"\u200Acode splitting using webpack"),pt.forEach(o),Ao=t(Ge,"!"),Ge.forEach(o),jo=h(c),Se=r(c,"BLOCKQUOTE",{});var ht=n(Se);ne=r(ht,"P",{});var zs=n(ne);qo=t(zs,"Code splitting is one of the most compelling features of webpack. This feature allows you to split your code into various bundles which can then be loaded on demand or in parallel. It can be used to achieve smaller bundles and control resource load prioritization which, if used correctly, can have a major impact on load time.\u200A\u2014"),N=r(zs,"A",{href:!0,rel:!0});var dt=n(N);Do=t(dt,"\u200Awebpack"),dt.forEach(o),zs.forEach(o),ht.forEach(o),Lo=h(c),v=r(c,"P",{});var g=n(v);Ho=t(g,"Great! Webpack provides "),M=r(g,"A",{href:!0,rel:!0});var kt=n(M);Bo=t(kt,"import()"),kt.forEach(o),Uo=t(g," syntax, that conforms to the "),z=r(g,"A",{href:!0,rel:!0});var ut=n(z);Wo=t(ut,"ECMAScript proposal"),ut.forEach(o),$o=t(g," for dynamic imports. Let\u2019s try to split our code "),G=r(g,"A",{href:!0,rel:!0});var yt=n(G);No=t(yt,"based on different entry points of your routes"),yt.forEach(o),Mo=t(g,". This makes perfect sense, user that goes to "),le=r(g,"CODE",{class:!0});var vt=n(le);zo=t(vt,"mywebsite/foo"),vt.forEach(o),Go=t(g," do not need code that is written only for "),ie=r(g,"CODE",{class:!0});var ft=n(ie);Ko=t(ft,"mywebsite/bar"),ft.forEach(o),Qo=t(g,"!"),g.forEach(o),Yo=h(c),T=r(c,"P",{});var we=n(T);Vo=t(we,"By now, you should realise, reducer that is written only for "),ce=r(we,"CODE",{class:!0});var mt=n(ce);Fo=t(mt,"mywebsite/bar"),mt.forEach(o),Jo=t(we,", shouldn\u2019t be imported or included when you are visiting "),pe=r(we,"CODE",{class:!0});var xt=n(pe);Zo=t(xt,"mywebsite/foo"),xt.forEach(o),Xo=t(we,"!"),we.forEach(o),es=h(c),Ae=r(c,"BLOCKQUOTE",{});var wt=n(Ae);je=r(wt,"P",{});var gt=n(je);os=t(gt,"Then how do I dynamically load reducers for code splitting in a Redux application?"),gt.forEach(o),wt.forEach(o),ss=h(c),K=r(c,"P",{});var Ke=n(K);ts=t(Ke,"That\u2019s a "),Q=r(Ke,"A",{href:!0,rel:!0});var _t=n(Q);as=t(_t,"StackOverflow thread"),_t.forEach(o),rs=t(Ke," that you should read about."),Ke.forEach(o),ns=h(c),qe=r(c,"BLOCKQUOTE",{});var bt=n(qe);De=r(bt,"P",{});var Et=n(De);ls=t(Et,"There may be neater way of expressing this\u200A\u2014\u200AI\u2019m just showing the idea."),Et.forEach(o),bt.forEach(o),is=h(c),Le=r(c,"P",{});var Rt=n(Le);cs=t(Rt,"Yes, one of a neater way is to write a higher order component that takes care of dynamically loading of reducers."),Rt.forEach(o),ps=h(c),he=r(c,"DIV",{class:!0});var Gt=n(he);Gt.forEach(o),hs=h(c),f=r(c,"P",{});var b=n(f);Y=r(b,"A",{href:!0,rel:!0});var Ct=n(Y);ds=t(Ct,"inducer"),Ct.forEach(o),ks=t(b," (read: "),He=r(b,"STRONG",{});var Ot=n(He);us=t(Ot,"In"),Ot.forEach(o),ys=t(b,"ject Re"),Be=r(b,"STRONG",{});var Tt=n(Be);vs=t(Tt,"ducer"),Tt.forEach(o),fs=t(b,") gives you a HOC that will add you reducer to the Redux store that is currently using during "),de=r(b,"CODE",{class:!0});var Pt=n(de);ms=t(Pt,"componentWillMount"),Pt.forEach(o),xs=t(b," and remove it during "),ke=r(b,"CODE",{class:!0});var It=n(ke);ws=t(It,"componentWillUnmount"),It.forEach(o),gs=t(b,". It\u2019s that simple!"),b.forEach(o),_s=h(c),Ue=r(c,"BLOCKQUOTE",{});var St=n(Ue);We=r(St,"P",{});var At=n(We);bs=t(At,"So, how does inducer actually works?"),At.forEach(o),St.forEach(o),Es=h(c),V=r(c,"P",{});var Qe=n(V);Rs=t(Qe,"Firstly, inducer HOC gets the store from context, provided from the StoreProvider of "),ue=r(Qe,"CODE",{class:!0});var jt=n(ue);Cs=t(jt,"react-redux"),jt.forEach(o),Os=t(Qe," ."),Qe.forEach(o),Ts=h(c),ye=r(c,"DIV",{class:!0});var Kt=n(ye);Kt.forEach(o),Ps=h(c),F=r(c,"P",{});var Ye=n(F);Is=t(Ye,"Next, inducer HOC comes up with the new async root reducer that includes the reducer you want to include, and use "),J=r(Ye,"A",{href:!0,rel:!0});var qt=n(J);Ss=t(qt,"replaceReducer"),qt.forEach(o),As=t(Ye," from Redux to updates the reducer."),Ye.forEach(o),js=h(c),P=r(c,"P",{});var ge=n(P);qs=t(ge,"When "),ve=r(ge,"CODE",{class:!0});var Dt=n(ve);Ds=t(Dt,"componentWillUnmount"),Dt.forEach(o),Ls=t(ge," inducer will remove your reducer and call "),fe=r(ge,"CODE",{class:!0});var Lt=n(fe);Hs=t(Lt,"replaceReducer"),Lt.forEach(o),Bs=t(ge," again!"),ge.forEach(o),Us=h(c),Z=r(c,"P",{});var Ve=n(Z);Ws=t(Ve,"You can read the "),X=r(Ve,"A",{href:!0,rel:!0});var Ht=n(X);$s=t(Ht,"complete code"),Ht.forEach(o),Ns=t(Ve," here!"),Ve.forEach(o),c.forEach(o),this.h()},h(){l(q,"href","#context"),l(q,"id","context"),l(oe,"class","inline"),l(se,"class","inline"),l(te,"class","inline"),l(D,"href","https://github.com/reduxjs/react-redux"),l(D,"rel","nofollow"),l(re,"class","code-section"),l(L,"href","#problem"),l(L,"id","problem"),l(H,"href","#solution"),l(H,"id","solution"),l(U,"href","http://lmgtfy.com/?q=code-splitting"),l(U,"rel","nofollow"),l($,"href","https://webpack.js.org/guides/code-splitting/"),l($,"rel","nofollow"),l(N,"href","https://webpack.js.org/guides/code-splitting/"),l(N,"rel","nofollow"),l(M,"href","https://webpack.js.org/guides/code-splitting/#dynamic-imports"),l(M,"rel","nofollow"),l(z,"href","https://github.com/tc39/proposal-dynamic-import"),l(z,"rel","nofollow"),l(G,"href","https://github.com/ReactTraining/react-router/blob/master/packages/react-router-dom/docs/guides/code-splitting.md"),l(G,"rel","nofollow"),l(le,"class","inline"),l(ie,"class","inline"),l(ce,"class","inline"),l(pe,"class","inline"),l(Q,"href","https://stackoverflow.com/questions/32968016/how-to-dynamically-load-reducers-for-code-splitting-in-a-redux-application"),l(Q,"rel","nofollow"),l(he,"class","code-section"),l(Y,"href","https://www.npmjs.com/package/inducer"),l(Y,"rel","nofollow"),l(de,"class","inline"),l(ke,"class","inline"),l(ue,"class","inline"),l(ye,"class","code-section"),l(J,"href","https://redux.js.org/api/store#replaceReducer"),l(J,"rel","nofollow"),l(ve,"class","inline"),l(fe,"class","inline"),l(X,"href","https://github.com/tanhauhau/inducer/blob/master/src/index.js"),l(X,"rel","nofollow")},m(d,w){I(d,k,w),e(k,m),e(m,C),I(d,S,w),I(d,u,w),I(d,x,w),I(d,y,w),e(y,_e),e(_e,q),e(q,Fe),e(y,Je),e(y,be),e(be,Ze),e(y,Xe),e(y,_),e(_,O),e(O,eo),e(O,oe),e(oe,oo),e(O,so),e(O,Ee),e(Ee,to),e(O,ao),e(_,ro),e(_,A),e(A,no),e(A,se),e(se,lo),e(A,io),e(A,te),e(te,co),e(_,po),e(_,Re),e(Re,ho),e(_,ko),e(_,ae),e(ae,D),e(D,uo),e(ae,yo),e(y,vo),e(y,Ce),e(Ce,fo),e(y,mo),e(y,re),re.innerHTML=$t,I(d,Ne,w),I(d,E,w),e(E,Oe),e(Oe,L),e(L,xo),e(E,wo),e(E,Te),e(Te,go),e(E,_o),e(E,Pe),e(Pe,bo),I(d,Me,w),I(d,i,w),e(i,Ie),e(Ie,H),e(H,Eo),e(i,Ro),e(i,B),e(B,Co),e(B,U),e(U,Oo),e(B,To),e(i,Po),e(i,W),e(W,Io),e(W,$),e($,So),e(W,Ao),e(i,jo),e(i,Se),e(Se,ne),e(ne,qo),e(ne,N),e(N,Do),e(i,Lo),e(i,v),e(v,Ho),e(v,M),e(M,Bo),e(v,Uo),e(v,z),e(z,Wo),e(v,$o),e(v,G),e(G,No),e(v,Mo),e(v,le),e(le,zo),e(v,Go),e(v,ie),e(ie,Ko),e(v,Qo),e(i,Yo),e(i,T),e(T,Vo),e(T,ce),e(ce,Fo),e(T,Jo),e(T,pe),e(pe,Zo),e(T,Xo),e(i,es),e(i,Ae),e(Ae,je),e(je,os),e(i,ss),e(i,K),e(K,ts),e(K,Q),e(Q,as),e(K,rs),e(i,ns),e(i,qe),e(qe,De),e(De,ls),e(i,is),e(i,Le),e(Le,cs),e(i,ps),e(i,he),he.innerHTML=Nt,e(i,hs),e(i,f),e(f,Y),e(Y,ds),e(f,ks),e(f,He),e(He,us),e(f,ys),e(f,Be),e(Be,vs),e(f,fs),e(f,de),e(de,ms),e(f,xs),e(f,ke),e(ke,ws),e(f,gs),e(i,_s),e(i,Ue),e(Ue,We),e(We,bs),e(i,Es),e(i,V),e(V,Rs),e(V,ue),e(ue,Cs),e(V,Os),e(i,Ts),e(i,ye),ye.innerHTML=Mt,e(i,Ps),e(i,F),e(F,Is),e(F,J),e(J,Ss),e(F,As),e(i,js),e(i,P),e(P,qs),e(P,ve),e(ve,Ds),e(P,Ls),e(P,fe),e(fe,Hs),e(P,Bs),e(i,Us),e(i,Z),e(Z,Ws),e(Z,X),e(X,$s),e(Z,Ns)},p:aa,d(d){d&&o(k),d&&o(S),d&&o(u),d&&o(x),d&&o(y),d&&o(Ne),d&&o(E),d&&o(Me),d&&o(i)}}}function ia(ee){let k,m;const C=[ee[0],Wt];let S={$$slots:{default:[la]},$$scope:{ctx:ee}};for(let u=0;u<C.length;u+=1)S=Gs(S,C[u]);return k=new ra({props:S}),{c(){Ft(k.$$.fragment)},l(u){Jt(k.$$.fragment,u)},m(u,x){Zt(k,u,x),m=!0},p(u,[x]){const y=x&1?Xt(C,[x&1&&Bt(u[0]),x&0&&Bt(Wt)]):{};x&2&&(y.$$scope={dirty:x,ctx:u}),k.$set(y)},i(u){m||(ea(k.$$.fragment,u),m=!0)},o(u){oa(k.$$.fragment,u),m=!1},d(u){sa(k,u)}}}const Wt={title:"Dynamically load reducers for code splitting in a React Redux application",date:"2017-11-16T08:00:00Z",description:"How to inject reducer asynchronously",label:"blog",tableOfContents:[{link:"context",title:"Context"},{link:"problem",title:"Problem"},{link:"solution",title:"Solution"}]};function ca(ee,k,m){return ta("blog",{image:na}),ee.$$set=C=>{m(0,k=Gs(Gs({},k),Ut(C)))},k=Ut(k),[k]}class va extends Qt{constructor(k){super();Yt(this,k,ca,ia,Vt,{})}}export{va as default,Wt as metadata};
