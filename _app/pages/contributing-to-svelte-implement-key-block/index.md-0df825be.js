import{S as aE,i as oE,s as tE,C as cm,w as R_,x as B_,y as j_,z as nE,A as L_,q as W_,o as $_,B as M_,r as lE,R as H_,k as i,e as t,t as e,m as c,c as n,a as l,h as a,d as o,b as r,g as C,F as s,O as rE}from"../../chunks/vendor-6bf294e3.js";import{B as iE}from"../../chunks/BlogLayout-152f599b.js";import{T as cE}from"../../chunks/TableOfContent-1b9e4572.js";import"../../chunks/stores-e20b7872.js";import"../../chunks/WebMentions-745413ea.js";/* empty css                                */var pE="/_app/assets/hero-twitter-3bdf63ce.jpg";function kE(ma){let _,K,S,vs,E,U,ga,J,Ni,wa,Ri,Bi,_a,ji,Wi,Ea,$i,Mi,Vi,T,Gi,ba,qi,Ki,Ca,Ui,Ji,Oa,Yi,Fi,Da,zi,Qi,Ta,Zi,Xi,Ia,sc,ec,Sa,ac,oc,jr,f,bl,he,tc,nc,N,lc,Pa,rc,ic,Cl,cc,pc,Ol,kc,hc,de,dc,vc,yc,ys,uc,Aa,fc,xc,La,mc,gc,wc,us,_c,Ha,Ec,bc,Na,Cc,Oc,Dc,Ra,V_=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'alice'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'bob'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"><span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">#each</span> <span class="token language-javascript">data </span><span class="token keyword">as</span> <span class="token language-javascript">item </span><span class="token language-javascript"><span class="token punctuation">(</span>item<span class="token punctuation">.</span>id<span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">&#123;</span> item<span class="token punctuation">.</span>name <span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div><div class="line"><span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">/each</span><span class="token punctuation">&#125;</span></span></div></code></pre>`,Tc,Dl,ve,Ic,Sc,u,Pc,Ba,Ac,Lc,ja,Hc,Nc,Wa,Rc,Bc,$a,jc,Wc,Ma,$c,Mc,Va,Vc,Gc,Ga,qc,Kc,qa,Uc,Jc,Ka,Yc,Fc,Ua,zc,Qc,fs,Zc,Ja,Xc,sp,ep,Ya,ap,op,Fa,tp,np,lp,Y,rp,za,ip,cp,Qa,pp,kp,Za,hp,dp,vp,Ks,xs,yp,Xa,up,fp,xp,so,mp,gp,wp,Tl,ms,_p,eo,Ep,bp,gs,Cp,ao,Op,Dp,Tp,Ip,F,Sp,oo,Pp,Ap,to,Lp,Hp,Il,Np,Rp,Bp,no,G_='<pre class="prism language-svelte"><code><div class="line"><span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">#each</span> <span class="token language-javascript">key </span><span class="token keyword">as</span> <span class="token language-javascript">k </span><span class="token language-javascript"><span class="token punctuation">(</span>k<span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">/each</span><span class="token punctuation">&#125;</span></span></div></code></pre>',jp,ws,Wp,lo,$p,Mp,ro,Vp,Gp,Wr,b,Sl,ye,qp,Kp,_s,Up,ue,Jp,io,Yp,Fp,zp,fe,Qp,Zp,Xp,co,q_=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> fade <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'svelte/transition'</span></div><div class="line">  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> count <span class="token operator">+=</span><span class="token number">1</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>handleClick<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>You clicked <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span> <span class="token attr-name"><span class="token namespace">transition:</span>fade</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span> times<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></div></code></pre>`,sk,Pl,ek,ak,xe,ok,po,tk,nk,lk,me,rk,Al,ik,ck,pk,ko,K_=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> fade <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'svelte/transition'</span></div><div class="line">  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> count <span class="token operator">+=</span><span class="token number">1</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>handleClick<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>You clicked</div><div class="line">  <span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">#each</span> <span class="token language-javascript"><span class="token punctuation">[</span>count<span class="token punctuation">]</span> </span><span class="token keyword">as</span> <span class="token language-javascript">count </span><span class="token language-javascript"><span class="token punctuation">(</span>count<span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span></div><div class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span> <span class="token attr-name"><span class="token namespace">transition:</span>fade</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span></div><div class="line">  <span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">/each</span><span class="token punctuation">&#125;</span></span></div><div class="line"> times<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></div></code></pre>`,kk,ge,hk,ho,dk,vk,yk,vo,U_=`<pre class="prism language-"><code><span class="line">&lt;p&gt;You clicked</span>
<span class="line">  &#123;#key count&#125;</span>
<span class="line">    &lt;strong transition:fade&gt;&#123;count&#125;&lt;/strong&gt;</span>
<span class="line">  &#123;/key&#125;</span>
<span class="line"> times&lt;/p&gt;</span></code></pre>`,uk,we,fk,yo,xk,mk,$r,j,Ll,_e,gk,wk,Ee,_k,uo,Ek,bk,Ck,z,Hl,Ok,Dk,Nl,Tk,Ik,Rl,Sk,Pk,Bl,Ak,Lk,jl,Hk,Mr,d,Wl,be,Nk,Rk,Ce,Bk,Oe,jk,Wk,$k,fo,J_=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> state</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ParserState</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> fragment;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">while</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.index </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">template</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  state </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">state</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> fragment;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Mk,$l,Vk,Gk,Q,xo,Ml,qk,Kk,Uk,L,Vl,Jk,Yk,mo,Fk,zk,go,Qk,Zk,wo,Xk,sh,_o,eh,ah,oh,Z,Gl,th,nh,Eo,lh,rh,bo,ih,ch,Co,ph,kh,ls,ql,hh,dh,Oo,vh,yh,Do,uh,fh,xh,Es,mh,To,gh,wh,Us,Kl,_h,Eh,bh,Ch,X,Oh,Io,Dh,Th,So,Ih,Sh,Po,Ph,Ah,Lh,Ao,Y_='<pre class="prism language-svelte"><code><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#key expression<span class="token punctuation">&#125;</span></span></div><div class="line">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span>key<span class="token punctuation">&#125;</span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- similar to --></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> expression<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></div></code></pre>',Hh,bs,Nh,Lo,Rh,Bh,Ho,jh,Wh,$h,No,F_=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">parser</span><span style="color: var(--shiki-token-function)">.eat</span><span style="color: var(--shiki-color-text)">(#)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// if &#123;#if foo&#125;, &#123;#each foo&#125; or &#123;#await foo&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> type;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">parser</span><span style="color: var(--shiki-token-function)">.eat</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;if&#39;</span><span style="color: var(--shiki-color-text)">)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    type </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;IfBlock&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">parser</span><span style="color: var(--shiki-token-function)">.eat</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;each&#39;</span><span style="color: var(--shiki-color-text)">)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    type </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;EachBlock&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">parser</span><span style="color: var(--shiki-token-function)">.eat</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;await&#39;</span><span style="color: var(--shiki-color-text)">)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    type </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AwaitBlock&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line inserted"><span style="color: var(--shiki-color-text)">   &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">parser</span><span style="color: var(--shiki-token-function)">.eat</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;key&#39;</span><span style="color: var(--shiki-color-text)">)) &#123;</span></span>
<span class="line inserted"><span style="color: var(--shiki-color-text)">     type </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;KeyBlock&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">parser</span><span style="color: var(--shiki-token-function)">.error</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      code</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;expected-block-type&#96;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line deleted"><span style="color: var(--shiki-color-text)">       message</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;Expected if, each or await&#96;</span></span>
<span class="line inserted"><span style="color: var(--shiki-color-text)">       message: </span><span style="color: var(--shiki-token-string-expression)">&#96;Expected if, each, await or key&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span></code></pre>`,Mh,ss,Vh,Ro,Gh,qh,Bo,Kh,Uh,jo,Jh,Yh,Fh,Wo,z_=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">parser</span><span style="color: var(--shiki-token-function)">.eat</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/&#39;</span><span style="color: var(--shiki-color-text)">)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> block </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">parser</span><span style="color: var(--shiki-token-function)">.current</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> expected;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;IfBlock&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    expected </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;if&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;EachBlock&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    expected </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;each&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AwaitBlock&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    expected </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;await&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line inserted"><span style="color: var(--shiki-color-text)">   &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;KeyBlock&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line inserted"><span style="color: var(--shiki-color-text)">     expected </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;key&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">parser</span><span style="color: var(--shiki-token-function)">.error</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      code</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;unexpected-block-close&#96;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      message</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;Unexpected block closing tag&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span></code></pre>`,zh,R,Qh,$o,Zh,Xh,Mo,sd,ed,Vo,ad,od,Go,td,nd,ld,qo,Q_=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-constant)">parser</span><span style="color: var(--shiki-token-function)">.require_whitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// read the JS expression</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">expression</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">read_expression</span><span style="color: var(--shiki-color-text)">(parser);</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// create the AST node</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">TemplateNode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-constant)">parser</span><span style="color: var(--shiki-token-function)">.allow_whitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// other logic blocks specific syntax</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;EachBlock&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// &#123;#each&#125; block specific syntax for &#123;#each list as item&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,rd,Ul,id,Vr,v,Jl,De,cd,pd,Cs,kd,Ko,hd,dd,Uo,vd,yd,ud,Os,fd,Jo,xd,md,Yo,gd,wd,_d,Fo,Z_=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> Expression </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./shared/Expression&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> map_children </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./shared/map_children&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> AbstractBlock </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./shared/AbstractBlock&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">KeyBlock</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">AbstractBlock</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// for discriminant property for TypeScript to differentiate types</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  type</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;KeyBlock&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  expression</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Expression</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(component</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> scope</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> info) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">super</span><span style="color: var(--shiki-color-text)">(component</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> scope</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> info);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// create an Expression instance for the expression</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.expression </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Expression</span><span style="color: var(--shiki-color-text)">(component</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> scope</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">info</span><span style="color: var(--shiki-color-text)">.expression);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// loop through children and create respective node instance</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.children </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">map_children</span><span style="color: var(--shiki-color-text)">(component</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> scope</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">info</span><span style="color: var(--shiki-color-text)">.children);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// simple validation: make sure the block is not empty</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.warn_if_empty_block</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ed,Yl,bd,Cd,Fl,Od,Dd,Ds,zo,Qo,Td,Id,Sd,Ts,Pd,Zo,Ad,Ld,Xo,Hd,Nd,Rd,rs,st,Bd,jd,et,Wd,$d,at,Md,Vd,Gd,es,zl,qd,Kd,Ql,Ud,Jd,Zl,Yd,Fd,Is,ot,zd,Xl,Qd,Zd,W,Xd,tt,sv,ev,Te,nt,av,ov,sr,tv,nv,Ie,lv,lt,rv,iv,cv,$,pv,rt,kv,hv,Se,it,dv,vv,er,yv,uv,Pe,fv,ct,xv,mv,gv,ar,wv,_v,Ss,Ev,pt,bv,Cv,kt,Ov,Dv,Tv,ht,X_=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// src/compiler/compile/nodes/shared/map_children.ts</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">get_constructor</span><span style="color: var(--shiki-color-text)">(type) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">switch</span><span style="color: var(--shiki-color-text)"> (type) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AwaitBlock&#39;</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> AwaitBlock;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Body&#39;</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> Body;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;KeyBlock&#39;</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> KeyBlock;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Iv,Ps,Sv,dt,Pv,Av,vt,Lv,Hv,Nv,yt,s3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// src/compiler/compile/nodes/interfaces.ts</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">INode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Action</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Animation</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">KeyBlock</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`,Rv,As,Bv,or,jv,Wv,ut,$v,Mv,Gr,p,tr,Ae,Vv,Gv,Le,qv,nr,Kv,Uv,Jv,Ls,Yv,ft,Fv,zv,xt,Qv,Zv,Xv,Hs,sy,mt,ey,ay,gt,oy,ty,ny,wt,e3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_key_block</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// instructions to create / mount / update / destroy inner content of &#123;#key&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123;&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">() &#123;&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">() &#123;&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">() &#123;&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ly,He,ry,_t,iy,cy,py,Et,a3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">key_block</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_key_block</span><span style="color: var(--shiki-color-text)">(ctx);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// create the elements for the &#123;#key&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">key_block</span><span style="color: var(--shiki-token-function)">.c</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// mount the elements in the &#123;#key&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">key_block</span><span style="color: var(--shiki-token-function)">.m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// update the elements in the &#123;#key&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">key_block</span><span style="color: var(--shiki-token-function)">.p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// destroy the elements in the &#123;#key&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">key_block</span><span style="color: var(--shiki-token-function)">.d</span><span style="color: var(--shiki-color-text)">(detaching);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// intro &amp; outro the elements in the &#123;#key&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">transition_in</span><span style="color: var(--shiki-color-text)">(key_block);</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">transition_out</span><span style="color: var(--shiki-color-text)">(key_block);</span></span></code></pre>`,ky,lr,hy,dy,bt,o3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// init</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> key_block </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_key_block</span><span style="color: var(--shiki-color-text)">(ctx);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// create</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">key_block</span><span style="color: var(--shiki-token-function)">.c</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// mount</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">key_block</span><span style="color: var(--shiki-token-function)">.m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// update</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">key_block</span><span style="color: var(--shiki-token-function)">.p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">i</span><span style="color: var(--shiki-color-text)">(local) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// intro</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">transition_in</span><span style="color: var(--shiki-color-text)">(key_block);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">o</span><span style="color: var(--shiki-color-text)">(local) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// outro</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">transition_out</span><span style="color: var(--shiki-color-text)">(key_block);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">(detaching) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// destroy</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">key_block</span><span style="color: var(--shiki-token-function)">.d</span><span style="color: var(--shiki-color-text)">(detaching);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,vy,Ne,yy,Ct,uy,fy,xy,Re,rr,my,gy,Be,wy,Ot,_y,Ey,by,Dt,t3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// we store the previous key expression value</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> previous_key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> value_of_the_key_expression;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// if the any variables within the key has changed, and</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> dynamic_variables_in_key_expression </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// if the value of the key expression has changed</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        previous_key </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> (previous_key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> value_of_the_key_expression)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      ) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// destroy the elements</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// detaching = 1 (true) to remove the elements immediately</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">key_block</span><span style="color: var(--shiki-token-function)">.d</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// create a new key_block</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        key_block </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_key_block</span><span style="color: var(--shiki-color-text)">(ctx);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">key_block</span><span style="color: var(--shiki-token-function)">.c</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// mount the new key_block</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">key_block</span><span style="color: var(--shiki-token-function)">.m</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// if the key has not changed, make sure the content of &#123;#key&#125; is up to date</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">key_block</span><span style="color: var(--shiki-token-function)">.p</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Cy,je,Oy,Tt,Dy,Ty,Iy,It,n3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// instead of key_block.d(1);</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">group_outros</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">transition_out</span><span style="color: var(--shiki-color-text)">(key_block</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> noop);</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">check_outros</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// before key_block.m(...)</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">transition_in</span><span style="color: var(--shiki-color-text)">(key_block);</span></span></code></pre>`,Sy,Ns,Py,St,Ay,Ly,Pt,Hy,Ny,Ry,We,By,At,jy,Wy,$y,$e,My,Lt,Vy,Gy,qy,Ht,l3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">KeyBlockWrapper</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Wrapper</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// the &#96;key_block&#96; variable</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  var</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123; type</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Identifier&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;key_block&#39;</span><span style="color: var(--shiki-color-text)"> &#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(renderer</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Renderer</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> block</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Block</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Wrapper</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> node</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">EachBlock</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> strip_whitespace</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">boolean</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> next_sibling</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Wrapper</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">super</span><span style="color: var(--shiki-color-text)">(renderer</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> block</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> node);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// deoptimisation, set flag indicate the content is not static</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.cannot_use_innerhtml</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.not_static_content</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// get all the dynamic variables within the expression</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// useful for later</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.dependencies </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">expression</span><span style="color: var(--shiki-token-function)">.dynamic_dependencies</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// create a new &#96;create_fragment&#96; function</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.block </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.child</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      comment</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_debugging_comment</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-color-text)">.component)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">component</span><span style="color: var(--shiki-token-function)">.get_unique_name</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;create_key_block&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      type</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;key&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">blocks</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(block);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// create render-dom Wrappers for the children</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.fragment </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">FragmentWrapper</span><span style="color: var(--shiki-color-text)">(renderer</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.block</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.children</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> strip_whitespace</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> next_sibling);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">render</span><span style="color: var(--shiki-color-text)">(block</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Block</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent_node</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent_nodes</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// NOTE: here is where we write the render code</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ky,ir,Uy,Jy,Me,O,Yy,Nt,Fy,zy,Rt,Qy,Zy,Bt,Xy,su,jt,eu,au,Wt,ou,tu,$t,nu,lu,Mt,ru,iu,Ve,Js,cu,Vt,pu,ku,Gt,hu,du,qt,vu,Kt,yu,uu,M,fu,cr,xu,mu,Ut,gu,wu,pr,_u,Eu,kr,Ys,bu,Jt,Cu,Ou,Ge,Du,Tu,qe,Iu,Yt,Su,Pu,Au,Ke,Lu,Ft,Hu,Nu,Ru,zt,r3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">render</span><span style="color: var(--shiki-color-text)">(block: Block</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent_node: Identifier</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent_nodes: Identifier) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.render</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.block</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    (</span><span style="color: var(--shiki-token-function)">x</span><span style="color: var(--shiki-token-string-expression)">&#96;#nodes&#96;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">as</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">unknown</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">as</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Identifier</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  );</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Bu,A,ju,Qt,Wu,$u,Zt,Mu,Vu,Xt,Gu,qu,sn,Ku,Uu,en,Ju,Yu,Fu,zu,Qu,Rs,Zu,an,Xu,sf,on,ef,af,of,tn,i3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">span</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,tf,Ue,nf,nn,lf,rf,cf,ln,c3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">spanWrapper</span><span style="color: var(--shiki-token-function)">.render</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  block</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// div&#39;s var</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">x</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">var</span><span style="color: var(--shiki-color-text)">.name</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.childNodes&#96;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// div.childNodes</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,pf,as,kf,rn,hf,df,cn,vf,yf,pn,uf,ff,xf,mf,gf,hr,wf,_f,kn,p3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// let key_block = create_key_block(ctx);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">init</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;let </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> = </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-color-text)">.name</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">(#ctx)&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// key_block.c();</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">create</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.c();&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// key_block.m(...);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">mount</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.m(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">parent_node </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;#target&quot;</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">parent_node </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;null&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;#anchor&quot;</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">);&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// key_block.p(...);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">update</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.p(#ctx, #dirty);&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// key_block.d(...);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">destroy</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.d(detaching)&#96;</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,Ef,dr,bf,Cf,Je,B,Of,hn,Df,Tf,dn,If,Sf,vn,Pf,Af,yn,Lf,Hf,Nf,V,Rf,Ye,Bf,jf,un,Wf,$f,fn,Mf,Vf,vr,Fs,Gf,xn,qf,Kf,Fe,Uf,Jf,mn,Yf,gn,Ff,zf,wn,k3='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">is_dirty</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-token-function)">.dirty</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.dependencies);</span></span></code></pre>',Qf,ze,Zf,_n,Xf,sx,ex,yr,ax,ox,En,h3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// we store the previous key expression value</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> previous_key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> value_of_the_key_expression;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// if the value of the key expression has changed</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">previous_key </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> (previous_key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> value_of_the_key_expression)</span></span></code></pre>`,tx,Qe,nx,bn,lx,rx,ix,Cn,d3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">previous_key</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.get_unique_name</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;previous_key&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">snippet</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">expression</span><span style="color: var(--shiki-token-function)">.manipulate</span><span style="color: var(--shiki-color-text)">(block);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.add_variable</span><span style="color: var(--shiki-color-text)">(previous_key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> snippet);</span></span></code></pre>`,cx,zs,On,px,kx,Dn,hx,dx,vx,Tn,v3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">human</span><span style="color: var(--shiki-color-text)">.age </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> limit</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// into something like</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">].age </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">]</span></span></code></pre>`,yx,Ze,ux,In,fx,xx,mx,Sn,y3='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">has_change</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">x</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">previous_key</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> !== (</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">previous_key</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> = </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">snippet</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">)&#96;</span></span></code></pre>',gx,ur,wx,_x,Pn,u3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">update</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  if (</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">is_dirty</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> &amp;&amp; </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">has_change</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.d(1);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> = </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-color-text)">.name</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">(#ctx);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.c();</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.m(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.get_update_mount_node</span><span style="color: var(--shiki-color-text)">(anchor)</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">anchor</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  &#125; else &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.p(#ctx, #dirty);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,Ex,os,bx,An,Cx,Ox,Ln,Dx,Tx,Hn,Ix,Sx,Px,Nn,f3='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">anchor</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.get_or_create_anchor</span><span style="color: var(--shiki-color-text)">(block</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent_node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent_nodes);</span></span></code></pre>',Ax,Xe,Lx,Rn,Hx,Nx,Rx,fr,Bx,jx,Bn,x3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">has_transitions</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">!!</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-color-text)">.has_intro_method </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-color-text)">.has_outro_method);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">transition_out</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  @group_outros();</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  @transition_out(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, 1, 1, @noop);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  @check_outros();</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">transition_in</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  @transition_in(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`,Wx,xr,$x,qr,G,mr,sa,Mx,Vx,Bs,Gx,jn,qx,Kx,Wn,Ux,Jx,Yx,$n,m3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> KeyBlock </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;../../nodes/KeyBlock&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> Renderer</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; RenderOptions &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;../Renderer&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">KeyBlock</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> renderer</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Renderer</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> options</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">RenderOptions</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-token-function)">.render</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.children</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> options);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Fx,js,zx,Mn,Qx,Zx,Vn,Xx,s1,Kr,is,gr,ea,e1,a1,wr,o1,t1,_r,n1,Ur,Qs,Er,aa,l1,r1,oa,ta,i1,Gn,c1,p1,k1,na,h1,la,qn,d1,v1,Jr,cs,br,ra,y1,u1,Ws,f1,Kn,x1,m1,Un,g1,w1,_1,ts,Cr,Jn,Or,E1,b1,C1,Dr,Yn,Tr,O1,D1,T1,ia,$s,Ir,I1,S1,Sr,P1,A1,Fn,L1,H1,zn,g3='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> reactive1<span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">let</span> reactive2<span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">let</span> key<span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#key key<span class="token punctuation">&#125;</span></span></div><div class="line">   <span class="token language-javascript"><span class="token punctuation">&#123;</span>key<span class="token punctuation">&#125;</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>reactive1<span class="token punctuation">&#125;</span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span>key<span class="token punctuation">&#125;</span></span></div><div class="line"></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>reactive2<span class="token punctuation">&#125;</span></span></div></code></pre>',N1,ca,Qn,Pr,R1,B1,j1,Zn,w3='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">   <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></div><div class="line">   <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></div><div class="line">   <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">     a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></div><div class="line">     b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></div><div class="line">   <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#key a <span class="token operator">+</span> b<span class="token punctuation">&#125;</span></span></div><div class="line">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span>key<span class="token punctuation">&#125;</span></span></div></code></pre>',Yr,H,Ar,pa,W1,$1,ka,M1,ha,V1,G1,q1,K1,U1,da,J1,va,Y1,F1,z1,ya,Q1,ua,Z1,X1,Fr;return _=new cE({props:{data:[{link:"background",title:"Background"},{link:"the-motivation",title:"The motivation",nested:[{link:"transitions-for-reactive-data-change",title:"Transitions for reactive data change"}]},{link:"the-implementation",title:"The implementation",nested:[{link:"parsing",title:"Parsing"},{link:"tracking-references-and-dependencies",title:"Tracking references and dependencies"},{link:"creating-code-blocks-fragments",title:"Creating code blocks & fragments"},{link:"creating-code-for-ssr",title:"Creating code for SSR"},{link:"generate-code",title:"Generate code"},{link:"a-few-other-implementation-consideration",title:"A few other implementation consideration"}]},{link:"the-testing",title:"The testing"},{link:"closing-notes",title:"Closing Notes"}]}}),{c(){R_(_.$$.fragment),K=i(),S=t("section"),vs=t("h2"),E=t("a"),U=e("Background"),ga=i(),J=t("p"),Ni=e("Unlike the other contributing to Svelte posts ["),wa=t("a"),Ri=e("1"),Bi=e("] ["),_a=t("a"),ji=e("2"),Wi=e("], which I wrote it while implementing the fix, describing as detailed as possible, today I am going to share the process of how I implemented the "),Ea=t("code"),$i=e("{#key}"),Mi=e(" block retrospectively."),Vi=i(),T=t("p"),Gi=e("The implementation of the "),ba=t("code"),qi=e("{#key}"),Ki=e(" block is much simpler, relative to "),Ca=t("code"),Ui=e("{#if}"),Ji=e(", "),Oa=t("code"),Yi=e("{#await}"),Fi=e(" or "),Da=t("code"),zi=e("{#each}"),Qi=e(". And I believe the process of implementing the "),Ta=t("code"),Zi=e("{#key}"),Xi=e(" block helps paint the pratical side of "),Ia=t("a"),sc=e('"The Svelte Compiler Handbook"'),ec=e(" or my "),Sa=t("a"),ac=e('"Looking into the Svelte compiler" talk'),oc=e("."),jr=i(),f=t("section"),bl=t("h2"),he=t("a"),tc=e("The motivation"),nc=i(),N=t("p"),lc=e("The idea of "),Pa=t("code"),rc=e("{#key}"),ic=e(" block starts with the feature request 2 years ago "),Cl=t("em"),cc=e("(yea, it's that long)"),pc=e(" for "),Ol=t("strong"),kc=e("the ability to key a non-each component"),hc=e(", "),de=t("a"),dc=e("GitHub issue #1469"),vc=e("."),yc=i(),ys=t("p"),uc=e("To "),Aa=t("code"),fc=e("key"),xc=e(" a component, is to force recreation of the component when the "),La=t("code"),mc=e("key"),gc=e(" changes."),wc=i(),us=t("p"),_c=e("And you see this ability of destroying and creating new components when using "),Ha=t("code"),Ec=e("{#each}"),bc=e(" with "),Na=t("code"),Cc=e("key"),Oc=e(":"),Dc=i(),Ra=t("div"),Tc=i(),Dl=t("p"),ve=t("a"),Ic=e("REPL"),Sc=i(),u=t("p"),Pc=e("When we call the function "),Ba=t("code"),Ac=e("update"),Lc=e(", we removed "),ja=t("code"),Hc=e("alice"),Nc=e(" from the "),Wa=t("code"),Rc=e("data"),Bc=e(" and we added "),$a=t("code"),jc=e("bob"),Wc=e(". The net effect is still having a list of 1 item. However, instead of reusing the 1 "),Ma=t("code"),$c=e("<div />"),Mc=e(" by updating "),Va=t("code"),Vc=e("{ item.name }"),Gc=e(" to "),Ga=t("code"),qc=e('"bob"'),Kc=e(", Svelte removes and destroys the "),qa=t("code"),Uc=e("<div />"),Jc=e(" and create a new "),Ka=t("code"),Yc=e("<div />"),Fc=e(" for "),Ua=t("code"),zc=e("bob"),Qc=e(". This is because of the "),fs=t("a"),Zc=e("key we specified to the "),Ja=t("code"),Xc=e("{#each}"),sp=e(" block"),ep=e(". Svelte will not reuse the "),Ya=t("code"),ap=e("<div />"),op=e(" because it was created with a different "),Fa=t("code"),tp=e("key"),np=e("."),lp=i(),Y=t("p"),rp=e("One of the benefits of having a key for "),za=t("code"),ip=e("{#each}"),cp=e(" item is to be able to add transition to the item correctly. Without a "),Qa=t("code"),pp=e("key"),kp=e(" to identify which item is added / removed, the transiion on a "),Za=t("code"),hp=e("{#each}"),dp=e(" list will always applied to the last item, when the list grows or shrinks in length."),vp=i(),Ks=t("p"),xs=t("a"),yp=e("Try with and without the "),Xa=t("code"),up=e("key"),fp=e(" in this REPL"),xp=e(" to see the importance of having a "),so=t("code"),mp=e("key"),gp=e("."),wp=i(),Tl=t("blockquote"),ms=t("p"),_p=e("This is similar to the "),eo=t("code"),Ep=e("key"),bp=e(" attribute of React, if you are familiar with React. "),gs=t("a"),Cp=e("Check this out on how to remount a component with the "),ao=t("code"),Op=e("key"),Dp=e(" attribute in React"),Tp=e("."),Ip=i(),F=t("p"),Sp=e("However, the ability of having to "),oo=t("code"),Pp=e("key"),Ap=e(" an element / component only exist for the "),to=t("code"),Lp=e("{#each}"),Hp=e(" block. To workaround the constraint, it's common to use the "),Il=t("strong"),Np=e('"1-item keyed-each hack"'),Rp=e(":"),Bp=i(),no=t("div"),jp=i(),ws=t("p"),Wp=e("The "),lo=t("code"),$p=e("<div />"),Mp=e(" will be recreated if the "),ro=t("code"),Vp=e("key"),Gp=e(" has changed."),Wr=i(),b=t("section"),Sl=t("h3"),ye=t("a"),qp=e("Transitions for reactive data change"),Kp=i(),_s=t("p"),Up=e("Another commonly brought up request, to "),ue=t("strong"),Jp=e("be able to apply "),io=t("code"),Yp=e("transition:"),Fp=e(" to an element when a reactive data changes"),zp=e(" ("),fe=t("a"),Qp=e("GitHub issue #5119"),Zp=e("):"),Xp=i(),co=t("div"),sk=i(),Pl=t("p"),ek=e("This is another facet of the same issue."),ak=i(),xe=t("p"),ok=e("We need an ability to transition the old element out, and transition a new element in when a data, or a "),po=t("code"),tk=e("key"),nk=e(" changes."),lk=i(),me=t("p"),rk=e("A workaround, again, is to use the "),Al=t("strong"),ik=e('"1-item keyed-each hack"'),ck=e(":"),pk=i(),ko=t("div"),kk=i(),ge=t("p"),hk=e("So the proposal of the feature request was to have a "),ho=t("code"),dk=e("{#key}"),vk=e(" block:"),yk=i(),vo=t("div"),uk=i(),we=t("p"),fk=e("I've seen this issue months ago, and I passed the issue. I didn't think I know good enough to implement a new logic block. However, the issue recently resurfaced as someone commented on it recently. And this time, I felt I am ready, so here's my journey of implementing the "),yo=t("code"),xk=e("{#key}"),mk=e(" block."),$r=i(),j=t("section"),Ll=t("h2"),_e=t("a"),gk=e("The implementation"),wk=i(),Ee=t("p"),_k=e("As explained in "),uo=t("a"),Ek=e('"The Svelte Compiler Handbook"'),bk=e(", the Svelte compilation process can be broken into steps:"),Ck=i(),z=t("ul"),Hl=t("li"),Ok=e("Parsing"),Dk=i(),Nl=t("li"),Tk=e("Tracking references and dependencies"),Ik=i(),Rl=t("li"),Sk=e("Creating code blocks & fragments"),Pk=i(),Bl=t("li"),Ak=e("Generate code"),Lk=i(),jl=t("p"),Hk=e("Of course, that's the steps that we are going to work on as well."),Mr=i(),d=t("section"),Wl=t("h3"),be=t("a"),Nk=e("Parsing"),Rk=i(),Ce=t("p"),Bk=e("The actual parsing starts "),Oe=t("a"),jk=e("here in src/compiler/parse/index.ts"),Wk=e(":"),$k=i(),fo=t("div"),Mk=i(),$l=t("p"),Vk=e("There are 4 states in the parser:"),Gk=i(),Q=t("ul"),xo=t("li"),Ml=t("strong"),qk=e("fragment"),Kk=e(" - in this state, we check the current character and determine which state we should proceed to"),Uk=i(),L=t("li"),Vl=t("strong"),Jk=e("tag"),Yk=e(" - we enter this state when we encounter "),mo=t("code"),Fk=e("<"),zk=e(" character. In this state, we are going to parse HTML tags (eg: "),go=t("code"),Qk=e("<p>"),Zk=e("), attributes (eg: "),wo=t("code"),Xk=e("class"),sh=e(") and directives (eg: "),_o=t("code"),eh=e("on:"),ah=e(")."),oh=i(),Z=t("li"),Gl=t("strong"),th=e("mustache"),nh=e(" - we enter this state when we encounter "),Eo=t("code"),lh=e("{"),rh=e(" character. In this state, we are going to parse expression, "),bo=t("code"),ih=e("{ value }"),ch=e(" and logic blocks "),Co=t("code"),ph=e("{#if}"),kh=i(),ls=t("li"),ql=t("strong"),hh=e("text"),dh=e(" - In this state, we are going to parse texts that are neither "),Oo=t("code"),vh=e("<"),yh=e(" nor "),Do=t("code"),uh=e("{"),fh=e(", which includes whitespace, newlines, and texts!"),xh=i(),Es=t("p"),mh=e("To be able to parse the "),To=t("code"),gh=e("{#key}"),wh=e(" block, we are going to take a look at the "),Us=t("a"),Kl=t("strong"),_h=e("mustache"),Eh=e(" state function"),bh=e("."),Ch=i(),X=t("p"),Oh=e("The "),Io=t("code"),Dh=e("{#key}"),Th=e(" block syntax is similar to "),So=t("code"),Ih=e("{#if}"),Sh=e(" without "),Po=t("code"),Ph=e("else"),Ah=e(", we take in an expression in the opening block and that's all:"),Lh=i(),Ao=t("div"),Hh=i(),bs=t("p"),Nh=e("So over here, when we encounter a "),Lo=t("code"),Rh=e("{#"),Bh=e(", we add a case to check if we are starting a "),Ho=t("code"),jh=e("{#key}"),Wh=e(" block:"),$h=i(),No=t("div"),Mh=i(),ss=t("p"),Vh=e("Similarly, for closing block "),Ro=t("code"),Gh=e("{/"),qh=e(", we are going to make sure that "),Bo=t("code"),Kh=e("{#key}"),Uh=e(" closes with "),jo=t("code"),Jh=e("{/key}"),Yh=e(":"),Fh=i(),Wo=t("div"),zh=i(),R=t("p"),Qh=e("The next step is to read the JS expression. Since all logic blocks, "),$o=t("code"),Zh=e("{#if}"),Xh=e(", "),Mo=t("code"),sd=e("{#each}"),ed=e(" and "),Vo=t("code"),ad=e("{#await}"),od=e(" will read the JS expression next, it is no different for "),Go=t("code"),td=e("{#key}"),nd=e(" and it is already taken care of:"),ld=i(),qo=t("div"),rd=i(),Ul=t("p"),id=e("So, let's move on to the next step!"),Vr=i(),v=t("section"),Jl=t("h3"),De=t("a"),cd=e("Tracking references and dependencies"),pd=i(),Cs=t("p"),kd=e("If you noticed in the previous step, the type name we created for "),Ko=t("code"),hd=e("{#key}"),dd=e(" block is called "),Uo=t("code"),vd=e("KeyBlock"),yd=e("."),ud=i(),Os=t("p"),fd=e("So, to keep the name consistent, we are going to create a "),Jo=t("code"),xd=e("KeyBlock"),md=e(" class in "),Yo=t("code"),gd=e("src/compiler/compile/nodes/KeyBlock.ts"),wd=e(":"),_d=i(),Fo=t("div"),Ed=i(),Yl=t("p"),bd=e("I've added comments annotating the code above, hopefully it's self-explanatory."),Cd=i(),Fl=t("p"),Od=e("A few more points:"),Dd=i(),Ds=t("ul"),zo=t("li"),Qo=t("code"),Td=e("info"),Id=e(" is the AST node we got from the parsing."),Sd=i(),Ts=t("li"),Pd=e("the "),Zo=t("code"),Ad=e("class Expression"),Ld=e(" is constructed with the JavaScript AST of the expression and it is where we traverse the AST and marked the variables within the expression as "),Xo=t("code"),Hd=e("referenced: true"),Nd=e("."),Rd=i(),rs=t("li"),st=t("code"),Bd=e("map_children"),jd=e(" is used to map the "),et=t("code"),Wd=e("children"),$d=e(" of the "),at=t("code"),Md=e("KeyBlock"),Vd=e(" AST node to the compile node."),Gd=i(),es=t("blockquote"),zl=t("p"),qd=e('Pardon for my lack of "appropriate" naming to differentiate the nodes in the Svelte codebase.'),Kd=i(),Ql=t("p"),Ud=e("Throughout the Svelte compilation process, the node is transformed one to another, which in every step of the transformation, new analysis is performed, and new information are added."),Jd=i(),Zl=t("p"),Yd=e("Here, I am going to call:"),Fd=i(),Is=t("ul"),ot=t("li"),zd=e("the node resulting from the parser: "),Xl=t("strong"),Qd=e("AST node"),Zd=i(),W=t("li"),Xd=e("the node created by the "),tt=t("code"),sv=e("Component"),ev=e(", which extends from "),Te=t("a"),nt=t("code"),av=e("compiler/compile/nodes/shared/Node.ts"),ov=e(": "),sr=t("strong"),tv=e("compile node"),nv=i(),Ie=t("em"),lv=e("(because they are stored in the "),lt=t("code"),rv=e("compile"),iv=e(" folder)"),cv=i(),$=t("li"),pv=e("the node created by the "),rt=t("code"),kv=e("Renderer"),hv=e(", which extends from "),Se=t("a"),it=t("code"),dv=e("compiler/compile/render_dom/wrappers/shared/Wrapper.ts"),vv=e(": "),er=t("strong"),yv=e("render-dom Wrapper"),uv=i(),Pe=t("em"),fv=e("(also because they are stored in the "),ct=t("code"),xv=e("render_dom/wrappers"),mv=e(" folder)"),gv=i(),ar=t("p"),wv=e("If you managed to keep up so far, you may be sensing where we are heading next."),_v=i(),Ss=t("p"),Ev=e("We need to add "),pt=t("code"),bv=e("KeyBlock"),Cv=e(" into "),kt=t("code"),Ov=e("map_children"),Dv=e(":"),Tv=i(),ht=t("div"),Iv=i(),Ps=t("p"),Sv=e("Also, we need to add "),dt=t("code"),Pv=e("KeyBlock"),Av=e(" as one of the "),vt=t("code"),Lv=e("INode"),Hv=e(" type for TypeScript:"),Nv=i(),yt=t("div"),Rv=i(),As=t("p"),Bv=e("And now, let's move on to implementing a "),or=t("strong"),jv=e("render-dom Wrapper"),Wv=e(" for "),ut=t("code"),$v=e("KeyBlock"),Mv=e("."),Gr=i(),p=t("section"),tr=t("h3"),Ae=t("a"),Vv=e("Creating code blocks & fragments"),Gv=i(),Le=t("p"),qv=e("At this point, we need to decide how the compiled JS should look like, it's time for us to "),nr=t("strong"),Kv=e("reverse-compile Svelte in your head"),Uv=e("!"),Jv=i(),Ls=t("p"),Yv=e("If you've read my "),ft=t("a"),Fv=e("Compile Svelte in your head (Part 4)"),zv=e(", you've seen how we create a different "),xt=t("code"),Qv=e("create_fragment"),Zv=e(" function for each of the logic branches, so we can control the content within a logic branch as a whole."),Xv=i(),Hs=t("p"),sy=e("Similarly, we can create a "),mt=t("code"),ey=e("create_fragment"),ay=e(" function for the content of the "),gt=t("code"),oy=e("{#key}"),ty=e(", then we can control when to create / mount / update / destroy the content."),ny=i(),wt=t("div"),ly=i(),He=t("p"),ry=e("To use the "),_t=t("code"),iy=e("create_key_block"),cy=e(":"),py=i(),Et=t("div"),ky=i(),lr=t("p"),hy=e("The next thing to do, is to place these statements in the right position:"),dy=i(),bt=t("div"),vy=i(),Ne=t("p"),yy=e("Now, the most important piece of the "),Ct=t("code"),uy=e("{#key}"),fy=e(" block, the logic to"),xy=i(),Re=t("ul"),rr=t("li"),my=e("check if the expression has changed"),gy=i(),Be=t("li"),wy=e("if so, recreate the elements inside the "),Ot=t("code"),_y=e("{#key}"),Ey=e(" block"),by=i(),Dt=t("div"),Cy=i(),je=t("p"),Oy=e("If there is transition in the content of the "),Tt=t("code"),Dy=e("key_block"),Ty=e(", we need extra code for the transition:"),Iy=i(),It=t("div"),Sy=i(),Ns=t("p"),Py=e("I am going to gloss over the details of how "),St=t("code"),Ay=e("outros"),Ly=e(" / "),Pt=t("code"),Hy=e("intros"),Ny=e(` work, we will cover them in the later parts of "Compile Svelte in your head", so let's assume these code are up for the job.`),Ry=i(),We=t("p"),By=e("Now we have done the reverse-compile Svelte in your head, let's reverse the reverse, and write the render code for Svelte "),At=t("code"),jy=e("{#key}"),Wy=e(" block."),$y=i(),$e=t("p"),My=e("Here are some setup code for the render-dom Wrapper for "),Lt=t("code"),Vy=e("{#key}"),Gy=e(":"),qy=i(),Ht=t("div"),Ky=i(),ir=t("p"),Uy=e("A few more points:"),Jy=i(),Me=t("ul"),O=t("li"),Yy=e("the "),Nt=t("code"),Fy=e("block"),zy=e(" in the "),Rt=t("code"),Qy=e("render"),Zy=e(" method is the current "),Bt=t("code"),Xy=e("create_fragment"),su=e(" function that the "),jt=t("code"),eu=e("{#key}"),au=e(" block is in; "),Wt=t("code"),ou=e("this.block"),tu=e(" is the new "),$t=t("code"),nu=e("create_fragment"),lu=e(" function that we created to put the content of the "),Mt=t("code"),ru=e("{#key}"),iu=e(" block"),Ve=t("ul"),Js=t("li"),cu=e("we named the new "),Vt=t("code"),pu=e("create_fragment"),ku=e(" function "),Gt=t("code"),hu=e('"create_key_block"'),du=i(),qt=t("li"),vu=e("to make sure there's no conflicting names, we use "),Kt=t("code"),yu=e("renderer.component.get_unique_name()"),uu=i(),M=t("li"),fu=e("All "),cr=t("strong"),xu=e("render-dom wrappers"),mu=e(" has a property named "),Ut=t("code"),gu=e("var"),wu=e(", which is the variable name referencing the element / block to be created by the "),pr=t("strong"),_u=e("render-dom wrapper"),Eu=e("."),kr=t("ul"),Ys=t("li"),bu=e("the "),Jt=t("code"),Cu=e("var"),Ou=e(" name will be "),Ge=t("a"),Du=e("deconflicted by the Renderer"),Tu=i(),qe=t("p"),Iu=e("Now, let's implement the "),Yt=t("code"),Su=e("render"),Pu=e(" method."),Au=i(),Ke=t("p"),Lu=e("Firstly, render the children into "),Ft=t("code"),Hu=e("this.block"),Nu=e(":"),Ru=i(),zt=t("div"),Bu=i(),A=t("p"),ju=e("We pass in "),Qt=t("code"),Wu=e("null"),$u=e(" as "),Zt=t("code"),Mu=e("parent_node"),Vu=e(" and "),Xt=t("code"),Gu=e("x`#nodes`"),qu=e(" as "),sn=t("code"),Ku=e("parent_nodes"),Uu=e(" to indicate that the children will be rendered at the root of the "),en=t("code"),Ju=e("this.block"),Yu=e("."),Fu=i(),zu=t("hr"),Qu=i(),Rs=t("p"),Zu=e("If I am implementing the "),an=t("code"),Xu=e("render"),sf=e(" method of an Element render-dom Wrapper, and currently rendering the "),on=t("code"),ef=e("<div>"),af=e(" in the following code snippet:"),of=i(),tn=t("div"),tf=i(),Ue=t("p"),nf=e("then I will render the "),nn=t("code"),lf=e("<span />"),rf=e(" with:"),cf=i(),ln=t("div"),pf=i(),as=t("p"),kf=e("so the "),rn=t("code"),hf=e("<span />"),df=e(" will be inserted into the current "),cn=t("code"),vf=e("<div />"),yf=e(" and hydrate from the "),pn=t("code"),uf=e("<div />"),ff=e("'s childNodes."),xf=i(),mf=t("hr"),gf=i(),hr=t("p"),wf=e("Next, I am going to insert code into each of the fragment methods:"),_f=i(),kn=t("div"),Ef=i(),dr=t("p"),bf=e("A few more points:"),Cf=i(),Je=t("ul"),B=t("li"),Of=e("we push the code into respective methods of the "),hn=t("code"),Df=e("block"),Tf=e(", eg: "),dn=t("code"),If=e("init"),Sf=e(", "),vn=t("code"),Pf=e("create"),Af=e(", "),yn=t("code"),Lf=e("mount"),Hf=e(", ..."),Nf=i(),V=t("li"),Rf=e("we use "),Ye=t("a"),Bf=e("tagged templates"),jf=e(", "),un=t("code"),Wf=e("b`...`"),$f=e(" to create a JavaScript AST node. The "),fn=t("code"),Mf=e("b"),Vf=e(" tag function allow us to pass in JavaScript AST node as placeholder, so that is very convenient."),vr=t("ul"),Fs=t("li"),Gf=e("You can check out more about the "),xn=t("code"),qf=e("b"),Kf=e(" tag function from "),Fe=t("a"),Uf=e("code-red"),Jf=i(),mn=t("p"),Yf=e("Now, to implement the dirty checking, we use "),gn=t("code"),Ff=e("this.dependencies"),zf=i(),wn=t("div"),Qf=i(),ze=t("p"),Zf=e("To determine whether our expression value has changed, we are going to compute the expression and compare it with "),_n=t("code"),Xf=e("previous_key"),sx=e(" and determine whether it has changed."),ex=i(),yr=t("p"),ax=e("Here's a recap of the compiled code that we've come up previously:"),ox=i(),En=t("div"),tx=i(),Qe=t("p"),nx=e("We start with declaring the variable, "),bn=t("code"),lx=e("previous_key"),rx=e(":"),ix=i(),Cn=t("div"),cx=i(),zs=t("p"),On=t("code"),px=e("expression.manipulate(block)"),kx=e(" will convert the expression to refer to the "),Dn=t("code"),hx=e("ctx"),dx=e(" variable, for example:"),vx=i(),Tn=t("div"),yx=i(),Ze=t("p"),ux=e("Next we are going to compare the new value and assign it to "),In=t("code"),fx=e("previous_key"),xx=e(" after that."),mx=i(),Sn=t("div"),gx=i(),ur=t("p"),wx=e("And to combine all of these, we have:"),_x=i(),Pn=t("div"),Ex=i(),os=t("p"),bx=e("We are using the "),An=t("code"),Cx=e("anchor"),Ox=e(" when we are mounting the new "),Ln=t("code"),Dx=e("key_block"),Tx=e(", you can check out "),Hn=t("a"),Ix=e("Compile Svelte in your head Part 4: the extra text node"),Sx=e(", explaining why we need the anchor node, and here is how the anchor node being computed:"),Px=i(),Nn=t("div"),Ax=i(),Xe=t("p"),Lx=e("It could be the next sibling, or it could be a new "),Rn=t("code"),Hx=e("empty()"),Nx=e(" text node created."),Rx=i(),fr=t("p"),Bx=e("Finally, if the content has transition, we need to add code for the transition as well:"),jx=i(),Bn=t("div"),Wx=i(),xr=t("p"),$x=e("Where to place them? Well, I'll leave that as your exercise to figure that out. \u{1F609}"),qr=i(),G=t("section"),mr=t("h3"),sa=t("a"),Mx=e("Creating code for SSR"),Vx=i(),Bs=t("p"),Gx=e("For SSR, it is much simpler than for the "),jn=t("code"),qx=e("dom"),Kx=e(". "),Wn=t("code"),Ux=e("{#key}"),Jx=e(" block has no special meaning in SSR, because, you will only render once in SSR:"),Yx=i(),$n=t("div"),Fx=i(),js=t("p"),zx=e("\u261D\uFE0F That's all the code we need for SSR. We are rendering the children, passing down the "),Mn=t("code"),Qx=e("options"),Zx=e(", and add no extra code for the "),Vn=t("code"),Xx=e("{#key}"),s1=e(" block."),Kr=i(),is=t("section"),gr=t("h3"),ea=t("a"),e1=e("Generate code"),a1=i(),wr=t("p"),o1=e("Well, everything in this step is set up generic enough to handle most use case."),t1=i(),_r=t("p"),n1=e("So, nothing to change here. \u{1F937}\u200D\u2642\uFE0F"),Ur=i(),Qs=t("section"),Er=t("h3"),aa=t("a"),l1=e("A few other implementation consideration"),r1=i(),oa=t("ul"),ta=t("li"),i1=e("What if the expression in the "),Gn=t("code"),c1=e("{#key}"),p1=e(" block is not dynamic, do we give warnings? or optimise the output?"),k1=i(),na=t("li"),h1=e("How will "),la=t("a"),qn=t("code"),d1=e("<svelte:options immutable={true}>"),v1=e(" affect the code output?"),Jr=i(),cs=t("section"),br=t("h2"),ra=t("a"),y1=e("The testing"),u1=i(),Ws=t("p"),f1=e(`You've seen me implementing test cases in the previous "Contributing to Svelte" articles [`),Kn=t("a"),x1=e("1"),m1=e("] ["),Un=t("a"),g1=e("2"),w1=e("], here I am going to skip showing the implementation of the test cases, and probably point out some thoughts I had when coming up with tests:"),_1=i(),ts=t("ol"),Cr=t("li"),Jn=t("p"),Or=t("strong"),E1=e("Happy path:"),b1=e(" changing the key expression should recreate the content"),C1=i(),Dr=t("li"),Yn=t("p"),Tr=t("strong"),O1=e("Happy path:"),D1=e(" Transition when recreating the content should work \u2728"),T1=i(),ia=t("li"),$s=t("p"),Ir=t("strong"),I1=e("Possible edge case:"),S1=e(" Changing variables other than the key expression should "),Sr=t("strong"),P1=e("not"),A1=e(" recreate the content in "),Fn=t("code"),L1=e("{#key}"),H1=i(),zn=t("div"),N1=i(),ca=t("li"),Qn=t("p"),Pr=t("strong"),R1=e("Possible edge case:"),B1=e(" Changing the variables within the key expression but the result value of the key expression stay the same"),j1=i(),Zn=t("div"),Yr=i(),H=t("section"),Ar=t("h2"),pa=t("a"),W1=e("Closing Notes"),$1=i(),ka=t("p"),M1=e("You can read the "),ha=t("a"),V1=e("Pull Request #5397"),G1=e(" to read the final implementation."),q1=i(),K1=t("hr"),U1=i(),da=t("p"),J1=e("If you wish to learn more about Svelte, "),va=t("a"),Y1=e("follow me on Twitter"),F1=e("."),z1=i(),ya=t("p"),Q1=e("If you have anything unclear about this article, find me on "),ua=t("a"),Z1=e("Twitter"),X1=e(" too!"),this.h()},l(h){B_(_.$$.fragment,h),K=c(h),S=n(h,"SECTION",{});var y=l(S);vs=n(y,"H2",{});var pm=l(vs);E=n(pm,"A",{href:!0,id:!0});var km=l(E);U=a(km,"Background"),km.forEach(o),pm.forEach(o),ga=c(y),J=n(y,"P",{});var Zs=l(J);Ni=a(Zs,"Unlike the other contributing to Svelte posts ["),wa=n(Zs,"A",{href:!0});var hm=l(wa);Ri=a(hm,"1"),hm.forEach(o),Bi=a(Zs,"] ["),_a=n(Zs,"A",{href:!0});var dm=l(_a);ji=a(dm,"2"),dm.forEach(o),Wi=a(Zs,"], which I wrote it while implementing the fix, describing as detailed as possible, today I am going to share the process of how I implemented the "),Ea=n(Zs,"CODE",{class:!0});var vm=l(Ea);$i=a(vm,"{#key}"),vm.forEach(o),Mi=a(Zs," block retrospectively."),Zs.forEach(o),Vi=c(y),T=n(y,"P",{});var P=l(T);Gi=a(P,"The implementation of the "),ba=n(P,"CODE",{class:!0});var ym=l(ba);qi=a(ym,"{#key}"),ym.forEach(o),Ki=a(P," block is much simpler, relative to "),Ca=n(P,"CODE",{class:!0});var um=l(Ca);Ui=a(um,"{#if}"),um.forEach(o),Ji=a(P,", "),Oa=n(P,"CODE",{class:!0});var fm=l(Oa);Yi=a(fm,"{#await}"),fm.forEach(o),Fi=a(P," or "),Da=n(P,"CODE",{class:!0});var xm=l(Da);zi=a(xm,"{#each}"),xm.forEach(o),Qi=a(P,". And I believe the process of implementing the "),Ta=n(P,"CODE",{class:!0});var mm=l(Ta);Zi=a(mm,"{#key}"),mm.forEach(o),Xi=a(P," block helps paint the pratical side of "),Ia=n(P,"A",{href:!0});var gm=l(Ia);sc=a(gm,'"The Svelte Compiler Handbook"'),gm.forEach(o),ec=a(P," or my "),Sa=n(P,"A",{href:!0});var wm=l(Sa);ac=a(wm,'"Looking into the Svelte compiler" talk'),wm.forEach(o),oc=a(P,"."),P.forEach(o),y.forEach(o),jr=c(h),f=n(h,"SECTION",{});var w=l(f);bl=n(w,"H2",{});var _m=l(bl);he=n(_m,"A",{href:!0,id:!0});var Em=l(he);tc=a(Em,"The motivation"),Em.forEach(o),_m.forEach(o),nc=c(w),N=n(w,"P",{});var ps=l(N);lc=a(ps,"The idea of "),Pa=n(ps,"CODE",{class:!0});var bm=l(Pa);rc=a(bm,"{#key}"),bm.forEach(o),ic=a(ps," block starts with the feature request 2 years ago "),Cl=n(ps,"EM",{});var Cm=l(Cl);cc=a(Cm,"(yea, it's that long)"),Cm.forEach(o),pc=a(ps," for "),Ol=n(ps,"STRONG",{});var Om=l(Ol);kc=a(Om,"the ability to key a non-each component"),Om.forEach(o),hc=a(ps,", "),de=n(ps,"A",{href:!0,rel:!0});var Dm=l(de);dc=a(Dm,"GitHub issue #1469"),Dm.forEach(o),vc=a(ps,"."),ps.forEach(o),yc=c(w),ys=n(w,"P",{});var Xn=l(ys);uc=a(Xn,"To "),Aa=n(Xn,"CODE",{class:!0});var Tm=l(Aa);fc=a(Tm,"key"),Tm.forEach(o),xc=a(Xn," a component, is to force recreation of the component when the "),La=n(Xn,"CODE",{class:!0});var Im=l(La);mc=a(Im,"key"),Im.forEach(o),gc=a(Xn," changes."),Xn.forEach(o),wc=c(w),us=n(w,"P",{});var sl=l(us);_c=a(sl,"And you see this ability of destroying and creating new components when using "),Ha=n(sl,"CODE",{class:!0});var Sm=l(Ha);Ec=a(Sm,"{#each}"),Sm.forEach(o),bc=a(sl," with "),Na=n(sl,"CODE",{class:!0});var Pm=l(Na);Cc=a(Pm,"key"),Pm.forEach(o),Oc=a(sl,":"),sl.forEach(o),Dc=c(w),Ra=n(w,"DIV",{class:!0});var _3=l(Ra);_3.forEach(o),Tc=c(w),Dl=n(w,"P",{});var Am=l(Dl);ve=n(Am,"A",{href:!0,rel:!0});var Lm=l(ve);Ic=a(Lm,"REPL"),Lm.forEach(o),Am.forEach(o),Sc=c(w),u=n(w,"P",{});var m=l(u);Pc=a(m,"When we call the function "),Ba=n(m,"CODE",{class:!0});var Hm=l(Ba);Ac=a(Hm,"update"),Hm.forEach(o),Lc=a(m,", we removed "),ja=n(m,"CODE",{class:!0});var Nm=l(ja);Hc=a(Nm,"alice"),Nm.forEach(o),Nc=a(m," from the "),Wa=n(m,"CODE",{class:!0});var Rm=l(Wa);Rc=a(Rm,"data"),Rm.forEach(o),Bc=a(m," and we added "),$a=n(m,"CODE",{class:!0});var Bm=l($a);jc=a(Bm,"bob"),Bm.forEach(o),Wc=a(m,". The net effect is still having a list of 1 item. However, instead of reusing the 1 "),Ma=n(m,"CODE",{class:!0});var jm=l(Ma);$c=a(jm,"<div />"),jm.forEach(o),Mc=a(m," by updating "),Va=n(m,"CODE",{class:!0});var Wm=l(Va);Vc=a(Wm,"{ item.name }"),Wm.forEach(o),Gc=a(m," to "),Ga=n(m,"CODE",{class:!0});var $m=l(Ga);qc=a($m,'"bob"'),$m.forEach(o),Kc=a(m,", Svelte removes and destroys the "),qa=n(m,"CODE",{class:!0});var Mm=l(qa);Uc=a(Mm,"<div />"),Mm.forEach(o),Jc=a(m," and create a new "),Ka=n(m,"CODE",{class:!0});var Vm=l(Ka);Yc=a(Vm,"<div />"),Vm.forEach(o),Fc=a(m," for "),Ua=n(m,"CODE",{class:!0});var Gm=l(Ua);zc=a(Gm,"bob"),Gm.forEach(o),Qc=a(m,". This is because of the "),fs=n(m,"A",{href:!0,rel:!0});var zr=l(fs);Zc=a(zr,"key we specified to the "),Ja=n(zr,"CODE",{class:!0});var qm=l(Ja);Xc=a(qm,"{#each}"),qm.forEach(o),sp=a(zr," block"),zr.forEach(o),ep=a(m,". Svelte will not reuse the "),Ya=n(m,"CODE",{class:!0});var Km=l(Ya);ap=a(Km,"<div />"),Km.forEach(o),op=a(m," because it was created with a different "),Fa=n(m,"CODE",{class:!0});var Um=l(Fa);tp=a(Um,"key"),Um.forEach(o),np=a(m,"."),m.forEach(o),lp=c(w),Y=n(w,"P",{});var Xs=l(Y);rp=a(Xs,"One of the benefits of having a key for "),za=n(Xs,"CODE",{class:!0});var Jm=l(za);ip=a(Jm,"{#each}"),Jm.forEach(o),cp=a(Xs," item is to be able to add transition to the item correctly. Without a "),Qa=n(Xs,"CODE",{class:!0});var Ym=l(Qa);pp=a(Ym,"key"),Ym.forEach(o),kp=a(Xs," to identify which item is added / removed, the transiion on a "),Za=n(Xs,"CODE",{class:!0});var Fm=l(Za);hp=a(Fm,"{#each}"),Fm.forEach(o),dp=a(Xs," list will always applied to the last item, when the list grows or shrinks in length."),Xs.forEach(o),vp=c(w),Ks=n(w,"P",{});var Lr=l(Ks);xs=n(Lr,"A",{href:!0,rel:!0});var Qr=l(xs);yp=a(Qr,"Try with and without the "),Xa=n(Qr,"CODE",{class:!0});var zm=l(Xa);up=a(zm,"key"),zm.forEach(o),fp=a(Qr," in this REPL"),Qr.forEach(o),xp=a(Lr," to see the importance of having a "),so=n(Lr,"CODE",{class:!0});var Qm=l(so);mp=a(Qm,"key"),Qm.forEach(o),gp=a(Lr,"."),Lr.forEach(o),wp=c(w),Tl=n(w,"BLOCKQUOTE",{});var Zm=l(Tl);ms=n(Zm,"P",{});var el=l(ms);_p=a(el,"This is similar to the "),eo=n(el,"CODE",{class:!0});var Xm=l(eo);Ep=a(Xm,"key"),Xm.forEach(o),bp=a(el," attribute of React, if you are familiar with React. "),gs=n(el,"A",{href:!0,rel:!0});var Zr=l(gs);Cp=a(Zr,"Check this out on how to remount a component with the "),ao=n(Zr,"CODE",{class:!0});var sg=l(ao);Op=a(sg,"key"),sg.forEach(o),Dp=a(Zr," attribute in React"),Zr.forEach(o),Tp=a(el,"."),el.forEach(o),Zm.forEach(o),Ip=c(w),F=n(w,"P",{});var se=l(F);Sp=a(se,"However, the ability of having to "),oo=n(se,"CODE",{class:!0});var eg=l(oo);Pp=a(eg,"key"),eg.forEach(o),Ap=a(se," an element / component only exist for the "),to=n(se,"CODE",{class:!0});var ag=l(to);Lp=a(ag,"{#each}"),ag.forEach(o),Hp=a(se," block. To workaround the constraint, it's common to use the "),Il=n(se,"STRONG",{});var og=l(Il);Np=a(og,'"1-item keyed-each hack"'),og.forEach(o),Rp=a(se,":"),se.forEach(o),Bp=c(w),no=n(w,"DIV",{class:!0});var E3=l(no);E3.forEach(o),jp=c(w),ws=n(w,"P",{});var al=l(ws);Wp=a(al,"The "),lo=n(al,"CODE",{class:!0});var tg=l(lo);$p=a(tg,"<div />"),tg.forEach(o),Mp=a(al," will be recreated if the "),ro=n(al,"CODE",{class:!0});var ng=l(ro);Vp=a(ng,"key"),ng.forEach(o),Gp=a(al," has changed."),al.forEach(o),w.forEach(o),Wr=c(h),b=n(h,"SECTION",{});var D=l(b);Sl=n(D,"H3",{});var lg=l(Sl);ye=n(lg,"A",{href:!0,id:!0});var rg=l(ye);qp=a(rg,"Transitions for reactive data change"),rg.forEach(o),lg.forEach(o),Kp=c(D),_s=n(D,"P",{});var ol=l(_s);Up=a(ol,"Another commonly brought up request, to "),ue=n(ol,"STRONG",{});var Xr=l(ue);Jp=a(Xr,"be able to apply "),io=n(Xr,"CODE",{class:!0});var ig=l(io);Yp=a(ig,"transition:"),ig.forEach(o),Fp=a(Xr," to an element when a reactive data changes"),Xr.forEach(o),zp=a(ol," ("),fe=n(ol,"A",{href:!0,rel:!0});var cg=l(fe);Qp=a(cg,"GitHub issue #5119"),cg.forEach(o),Zp=a(ol,"):"),ol.forEach(o),Xp=c(D),co=n(D,"DIV",{class:!0});var b3=l(co);b3.forEach(o),sk=c(D),Pl=n(D,"P",{});var pg=l(Pl);ek=a(pg,"This is another facet of the same issue."),pg.forEach(o),ak=c(D),xe=n(D,"P",{});var si=l(xe);ok=a(si,"We need an ability to transition the old element out, and transition a new element in when a data, or a "),po=n(si,"CODE",{class:!0});var kg=l(po);tk=a(kg,"key"),kg.forEach(o),nk=a(si," changes."),si.forEach(o),lk=c(D),me=n(D,"P",{});var ei=l(me);rk=a(ei,"A workaround, again, is to use the "),Al=n(ei,"STRONG",{});var hg=l(Al);ik=a(hg,'"1-item keyed-each hack"'),hg.forEach(o),ck=a(ei,":"),ei.forEach(o),pk=c(D),ko=n(D,"DIV",{class:!0});var C3=l(ko);C3.forEach(o),kk=c(D),ge=n(D,"P",{});var ai=l(ge);hk=a(ai,"So the proposal of the feature request was to have a "),ho=n(ai,"CODE",{class:!0});var dg=l(ho);dk=a(dg,"{#key}"),dg.forEach(o),vk=a(ai," block:"),ai.forEach(o),yk=c(D),vo=n(D,"DIV",{class:!0});var O3=l(vo);O3.forEach(o),uk=c(D),we=n(D,"P",{});var oi=l(we);fk=a(oi,"I've seen this issue months ago, and I passed the issue. I didn't think I know good enough to implement a new logic block. However, the issue recently resurfaced as someone commented on it recently. And this time, I felt I am ready, so here's my journey of implementing the "),yo=n(oi,"CODE",{class:!0});var vg=l(yo);xk=a(vg,"{#key}"),vg.forEach(o),mk=a(oi," block."),oi.forEach(o),D.forEach(o),$r=c(h),j=n(h,"SECTION",{});var ee=l(j);Ll=n(ee,"H2",{});var yg=l(Ll);_e=n(yg,"A",{href:!0,id:!0});var ug=l(_e);gk=a(ug,"The implementation"),ug.forEach(o),yg.forEach(o),wk=c(ee),Ee=n(ee,"P",{});var ti=l(Ee);_k=a(ti,"As explained in "),uo=n(ti,"A",{href:!0});var fg=l(uo);Ek=a(fg,'"The Svelte Compiler Handbook"'),fg.forEach(o),bk=a(ti,", the Svelte compilation process can be broken into steps:"),ti.forEach(o),Ck=c(ee),z=n(ee,"UL",{});var ae=l(z);Hl=n(ae,"LI",{});var xg=l(Hl);Ok=a(xg,"Parsing"),xg.forEach(o),Dk=c(ae),Nl=n(ae,"LI",{});var mg=l(Nl);Tk=a(mg,"Tracking references and dependencies"),mg.forEach(o),Ik=c(ae),Rl=n(ae,"LI",{});var gg=l(Rl);Sk=a(gg,"Creating code blocks & fragments"),gg.forEach(o),Pk=c(ae),Bl=n(ae,"LI",{});var wg=l(Bl);Ak=a(wg,"Generate code"),wg.forEach(o),ae.forEach(o),Lk=c(ee),jl=n(ee,"P",{});var _g=l(jl);Hk=a(_g,"Of course, that's the steps that we are going to work on as well."),_g.forEach(o),ee.forEach(o),Mr=c(h),d=n(h,"SECTION",{});var x=l(d);Wl=n(x,"H3",{});var Eg=l(Wl);be=n(Eg,"A",{href:!0,id:!0});var bg=l(be);Nk=a(bg,"Parsing"),bg.forEach(o),Eg.forEach(o),Rk=c(x),Ce=n(x,"P",{});var ni=l(Ce);Bk=a(ni,"The actual parsing starts "),Oe=n(ni,"A",{href:!0,rel:!0});var Cg=l(Oe);jk=a(Cg,"here in src/compiler/parse/index.ts"),Cg.forEach(o),Wk=a(ni,":"),ni.forEach(o),$k=c(x),fo=n(x,"DIV",{class:!0});var D3=l(fo);D3.forEach(o),Mk=c(x),$l=n(x,"P",{});var Og=l($l);Vk=a(Og,"There are 4 states in the parser:"),Og.forEach(o),Gk=c(x),Q=n(x,"UL",{});var oe=l(Q);xo=n(oe,"LI",{});var sm=l(xo);Ml=n(sm,"STRONG",{});var Dg=l(Ml);qk=a(Dg,"fragment"),Dg.forEach(o),Kk=a(sm," - in this state, we check the current character and determine which state we should proceed to"),sm.forEach(o),Uk=c(oe),L=n(oe,"LI",{});var ns=l(L);Vl=n(ns,"STRONG",{});var Tg=l(Vl);Jk=a(Tg,"tag"),Tg.forEach(o),Yk=a(ns," - we enter this state when we encounter "),mo=n(ns,"CODE",{class:!0});var Ig=l(mo);Fk=a(Ig,"<"),Ig.forEach(o),zk=a(ns," character. In this state, we are going to parse HTML tags (eg: "),go=n(ns,"CODE",{class:!0});var Sg=l(go);Qk=a(Sg,"<p>"),Sg.forEach(o),Zk=a(ns,"), attributes (eg: "),wo=n(ns,"CODE",{class:!0});var Pg=l(wo);Xk=a(Pg,"class"),Pg.forEach(o),sh=a(ns,") and directives (eg: "),_o=n(ns,"CODE",{class:!0});var Ag=l(_o);eh=a(Ag,"on:"),Ag.forEach(o),ah=a(ns,")."),ns.forEach(o),oh=c(oe),Z=n(oe,"LI",{});var te=l(Z);Gl=n(te,"STRONG",{});var Lg=l(Gl);th=a(Lg,"mustache"),Lg.forEach(o),nh=a(te," - we enter this state when we encounter "),Eo=n(te,"CODE",{class:!0});var Hg=l(Eo);lh=a(Hg,"{"),Hg.forEach(o),rh=a(te," character. In this state, we are going to parse expression, "),bo=n(te,"CODE",{class:!0});var Ng=l(bo);ih=a(Ng,"{ value }"),Ng.forEach(o),ch=a(te," and logic blocks "),Co=n(te,"CODE",{class:!0});var Rg=l(Co);ph=a(Rg,"{#if}"),Rg.forEach(o),te.forEach(o),kh=c(oe),ls=n(oe,"LI",{});var fa=l(ls);ql=n(fa,"STRONG",{});var Bg=l(ql);hh=a(Bg,"text"),Bg.forEach(o),dh=a(fa," - In this state, we are going to parse texts that are neither "),Oo=n(fa,"CODE",{class:!0});var jg=l(Oo);vh=a(jg,"<"),jg.forEach(o),yh=a(fa," nor "),Do=n(fa,"CODE",{class:!0});var Wg=l(Do);uh=a(Wg,"{"),Wg.forEach(o),fh=a(fa,", which includes whitespace, newlines, and texts!"),fa.forEach(o),oe.forEach(o),xh=c(x),Es=n(x,"P",{});var tl=l(Es);mh=a(tl,"To be able to parse the "),To=n(tl,"CODE",{class:!0});var $g=l(To);gh=a($g,"{#key}"),$g.forEach(o),wh=a(tl," block, we are going to take a look at the "),Us=n(tl,"A",{href:!0,rel:!0});var em=l(Us);Kl=n(em,"STRONG",{});var Mg=l(Kl);_h=a(Mg,"mustache"),Mg.forEach(o),Eh=a(em," state function"),em.forEach(o),bh=a(tl,"."),tl.forEach(o),Ch=c(x),X=n(x,"P",{});var ne=l(X);Oh=a(ne,"The "),Io=n(ne,"CODE",{class:!0});var Vg=l(Io);Dh=a(Vg,"{#key}"),Vg.forEach(o),Th=a(ne," block syntax is similar to "),So=n(ne,"CODE",{class:!0});var Gg=l(So);Ih=a(Gg,"{#if}"),Gg.forEach(o),Sh=a(ne," without "),Po=n(ne,"CODE",{class:!0});var qg=l(Po);Ph=a(qg,"else"),qg.forEach(o),Ah=a(ne,", we take in an expression in the opening block and that's all:"),ne.forEach(o),Lh=c(x),Ao=n(x,"DIV",{class:!0});var T3=l(Ao);T3.forEach(o),Hh=c(x),bs=n(x,"P",{});var nl=l(bs);Nh=a(nl,"So over here, when we encounter a "),Lo=n(nl,"CODE",{class:!0});var Kg=l(Lo);Rh=a(Kg,"{#"),Kg.forEach(o),Bh=a(nl,", we add a case to check if we are starting a "),Ho=n(nl,"CODE",{class:!0});var Ug=l(Ho);jh=a(Ug,"{#key}"),Ug.forEach(o),Wh=a(nl," block:"),nl.forEach(o),$h=c(x),No=n(x,"DIV",{class:!0});var I3=l(No);I3.forEach(o),Mh=c(x),ss=n(x,"P",{});var le=l(ss);Vh=a(le,"Similarly, for closing block "),Ro=n(le,"CODE",{class:!0});var Jg=l(Ro);Gh=a(Jg,"{/"),Jg.forEach(o),qh=a(le,", we are going to make sure that "),Bo=n(le,"CODE",{class:!0});var Yg=l(Bo);Kh=a(Yg,"{#key}"),Yg.forEach(o),Uh=a(le," closes with "),jo=n(le,"CODE",{class:!0});var Fg=l(jo);Jh=a(Fg,"{/key}"),Fg.forEach(o),Yh=a(le,":"),le.forEach(o),Fh=c(x),Wo=n(x,"DIV",{class:!0});var S3=l(Wo);S3.forEach(o),zh=c(x),R=n(x,"P",{});var ks=l(R);Qh=a(ks,"The next step is to read the JS expression. Since all logic blocks, "),$o=n(ks,"CODE",{class:!0});var zg=l($o);Zh=a(zg,"{#if}"),zg.forEach(o),Xh=a(ks,", "),Mo=n(ks,"CODE",{class:!0});var Qg=l(Mo);sd=a(Qg,"{#each}"),Qg.forEach(o),ed=a(ks," and "),Vo=n(ks,"CODE",{class:!0});var Zg=l(Vo);ad=a(Zg,"{#await}"),Zg.forEach(o),od=a(ks," will read the JS expression next, it is no different for "),Go=n(ks,"CODE",{class:!0});var Xg=l(Go);td=a(Xg,"{#key}"),Xg.forEach(o),nd=a(ks," and it is already taken care of:"),ks.forEach(o),ld=c(x),qo=n(x,"DIV",{class:!0});var P3=l(qo);P3.forEach(o),rd=c(x),Ul=n(x,"P",{});var s2=l(Ul);id=a(s2,"So, let's move on to the next step!"),s2.forEach(o),x.forEach(o),Vr=c(h),v=n(h,"SECTION",{});var g=l(v);Jl=n(g,"H3",{});var e2=l(Jl);De=n(e2,"A",{href:!0,id:!0});var a2=l(De);cd=a(a2,"Tracking references and dependencies"),a2.forEach(o),e2.forEach(o),pd=c(g),Cs=n(g,"P",{});var ll=l(Cs);kd=a(ll,"If you noticed in the previous step, the type name we created for "),Ko=n(ll,"CODE",{class:!0});var o2=l(Ko);hd=a(o2,"{#key}"),o2.forEach(o),dd=a(ll," block is called "),Uo=n(ll,"CODE",{class:!0});var t2=l(Uo);vd=a(t2,"KeyBlock"),t2.forEach(o),yd=a(ll,"."),ll.forEach(o),ud=c(g),Os=n(g,"P",{});var rl=l(Os);fd=a(rl,"So, to keep the name consistent, we are going to create a "),Jo=n(rl,"CODE",{class:!0});var n2=l(Jo);xd=a(n2,"KeyBlock"),n2.forEach(o),md=a(rl," class in "),Yo=n(rl,"CODE",{class:!0});var l2=l(Yo);gd=a(l2,"src/compiler/compile/nodes/KeyBlock.ts"),l2.forEach(o),wd=a(rl,":"),rl.forEach(o),_d=c(g),Fo=n(g,"DIV",{class:!0});var A3=l(Fo);A3.forEach(o),Ed=c(g),Yl=n(g,"P",{});var r2=l(Yl);bd=a(r2,"I've added comments annotating the code above, hopefully it's self-explanatory."),r2.forEach(o),Cd=c(g),Fl=n(g,"P",{});var i2=l(Fl);Od=a(i2,"A few more points:"),i2.forEach(o),Dd=c(g),Ds=n(g,"UL",{});var il=l(Ds);zo=n(il,"LI",{});var am=l(zo);Qo=n(am,"CODE",{class:!0});var c2=l(Qo);Td=a(c2,"info"),c2.forEach(o),Id=a(am," is the AST node we got from the parsing."),am.forEach(o),Sd=c(il),Ts=n(il,"LI",{});var cl=l(Ts);Pd=a(cl,"the "),Zo=n(cl,"CODE",{class:!0});var p2=l(Zo);Ad=a(p2,"class Expression"),p2.forEach(o),Ld=a(cl," is constructed with the JavaScript AST of the expression and it is where we traverse the AST and marked the variables within the expression as "),Xo=n(cl,"CODE",{class:!0});var k2=l(Xo);Hd=a(k2,"referenced: true"),k2.forEach(o),Nd=a(cl,"."),cl.forEach(o),Rd=c(il),rs=n(il,"LI",{});var xa=l(rs);st=n(xa,"CODE",{class:!0});var h2=l(st);Bd=a(h2,"map_children"),h2.forEach(o),jd=a(xa," is used to map the "),et=n(xa,"CODE",{class:!0});var d2=l(et);Wd=a(d2,"children"),d2.forEach(o),$d=a(xa," of the "),at=n(xa,"CODE",{class:!0});var v2=l(at);Md=a(v2,"KeyBlock"),v2.forEach(o),Vd=a(xa," AST node to the compile node."),xa.forEach(o),il.forEach(o),Gd=c(g),es=n(g,"BLOCKQUOTE",{});var re=l(es);zl=n(re,"P",{});var y2=l(zl);qd=a(y2,'Pardon for my lack of "appropriate" naming to differentiate the nodes in the Svelte codebase.'),y2.forEach(o),Kd=c(re),Ql=n(re,"P",{});var u2=l(Ql);Ud=a(u2,"Throughout the Svelte compilation process, the node is transformed one to another, which in every step of the transformation, new analysis is performed, and new information are added."),u2.forEach(o),Jd=c(re),Zl=n(re,"P",{});var f2=l(Zl);Yd=a(f2,"Here, I am going to call:"),f2.forEach(o),Fd=c(re),Is=n(re,"UL",{});var pl=l(Is);ot=n(pl,"LI",{});var om=l(ot);zd=a(om,"the node resulting from the parser: "),Xl=n(om,"STRONG",{});var x2=l(Xl);Qd=a(x2,"AST node"),x2.forEach(o),om.forEach(o),Zd=c(pl),W=n(pl,"LI",{});var Ms=l(W);Xd=a(Ms,"the node created by the "),tt=n(Ms,"CODE",{class:!0});var m2=l(tt);sv=a(m2,"Component"),m2.forEach(o),ev=a(Ms,", which extends from "),Te=n(Ms,"A",{href:!0,rel:!0});var g2=l(Te);nt=n(g2,"CODE",{class:!0});var w2=l(nt);av=a(w2,"compiler/compile/nodes/shared/Node.ts"),w2.forEach(o),g2.forEach(o),ov=a(Ms,": "),sr=n(Ms,"STRONG",{});var _2=l(sr);tv=a(_2,"compile node"),_2.forEach(o),nv=c(Ms),Ie=n(Ms,"EM",{});var li=l(Ie);lv=a(li,"(because they are stored in the "),lt=n(li,"CODE",{class:!0});var E2=l(lt);rv=a(E2,"compile"),E2.forEach(o),iv=a(li," folder)"),li.forEach(o),Ms.forEach(o),cv=c(pl),$=n(pl,"LI",{});var Vs=l($);pv=a(Vs,"the node created by the "),rt=n(Vs,"CODE",{class:!0});var b2=l(rt);kv=a(b2,"Renderer"),b2.forEach(o),hv=a(Vs,", which extends from "),Se=n(Vs,"A",{href:!0,rel:!0});var C2=l(Se);it=n(C2,"CODE",{class:!0});var O2=l(it);dv=a(O2,"compiler/compile/render_dom/wrappers/shared/Wrapper.ts"),O2.forEach(o),C2.forEach(o),vv=a(Vs,": "),er=n(Vs,"STRONG",{});var D2=l(er);yv=a(D2,"render-dom Wrapper"),D2.forEach(o),uv=c(Vs),Pe=n(Vs,"EM",{});var ri=l(Pe);fv=a(ri,"(also because they are stored in the "),ct=n(ri,"CODE",{class:!0});var T2=l(ct);xv=a(T2,"render_dom/wrappers"),T2.forEach(o),mv=a(ri," folder)"),ri.forEach(o),Vs.forEach(o),pl.forEach(o),re.forEach(o),gv=c(g),ar=n(g,"P",{});var I2=l(ar);wv=a(I2,"If you managed to keep up so far, you may be sensing where we are heading next."),I2.forEach(o),_v=c(g),Ss=n(g,"P",{});var kl=l(Ss);Ev=a(kl,"We need to add "),pt=n(kl,"CODE",{class:!0});var S2=l(pt);bv=a(S2,"KeyBlock"),S2.forEach(o),Cv=a(kl," into "),kt=n(kl,"CODE",{class:!0});var P2=l(kt);Ov=a(P2,"map_children"),P2.forEach(o),Dv=a(kl,":"),kl.forEach(o),Tv=c(g),ht=n(g,"DIV",{class:!0});var L3=l(ht);L3.forEach(o),Iv=c(g),Ps=n(g,"P",{});var hl=l(Ps);Sv=a(hl,"Also, we need to add "),dt=n(hl,"CODE",{class:!0});var A2=l(dt);Pv=a(A2,"KeyBlock"),A2.forEach(o),Av=a(hl," as one of the "),vt=n(hl,"CODE",{class:!0});var L2=l(vt);Lv=a(L2,"INode"),L2.forEach(o),Hv=a(hl," type for TypeScript:"),hl.forEach(o),Nv=c(g),yt=n(g,"DIV",{class:!0});var H3=l(yt);H3.forEach(o),Rv=c(g),As=n(g,"P",{});var dl=l(As);Bv=a(dl,"And now, let's move on to implementing a "),or=n(dl,"STRONG",{});var H2=l(or);jv=a(H2,"render-dom Wrapper"),H2.forEach(o),Wv=a(dl," for "),ut=n(dl,"CODE",{class:!0});var N2=l(ut);$v=a(N2,"KeyBlock"),N2.forEach(o),Mv=a(dl,"."),dl.forEach(o),g.forEach(o),Gr=c(h),p=n(h,"SECTION",{});var k=l(p);tr=n(k,"H3",{});var R2=l(tr);Ae=n(R2,"A",{href:!0,id:!0});var B2=l(Ae);Vv=a(B2,"Creating code blocks & fragments"),B2.forEach(o),R2.forEach(o),Gv=c(k),Le=n(k,"P",{});var ii=l(Le);qv=a(ii,"At this point, we need to decide how the compiled JS should look like, it's time for us to "),nr=n(ii,"STRONG",{});var j2=l(nr);Kv=a(j2,"reverse-compile Svelte in your head"),j2.forEach(o),Uv=a(ii,"!"),ii.forEach(o),Jv=c(k),Ls=n(k,"P",{});var vl=l(Ls);Yv=a(vl,"If you've read my "),ft=n(vl,"A",{href:!0});var W2=l(ft);Fv=a(W2,"Compile Svelte in your head (Part 4)"),W2.forEach(o),zv=a(vl,", you've seen how we create a different "),xt=n(vl,"CODE",{class:!0});var $2=l(xt);Qv=a($2,"create_fragment"),$2.forEach(o),Zv=a(vl," function for each of the logic branches, so we can control the content within a logic branch as a whole."),vl.forEach(o),Xv=c(k),Hs=n(k,"P",{});var yl=l(Hs);sy=a(yl,"Similarly, we can create a "),mt=n(yl,"CODE",{class:!0});var M2=l(mt);ey=a(M2,"create_fragment"),M2.forEach(o),ay=a(yl," function for the content of the "),gt=n(yl,"CODE",{class:!0});var V2=l(gt);oy=a(V2,"{#key}"),V2.forEach(o),ty=a(yl,", then we can control when to create / mount / update / destroy the content."),yl.forEach(o),ny=c(k),wt=n(k,"DIV",{class:!0});var N3=l(wt);N3.forEach(o),ly=c(k),He=n(k,"P",{});var ci=l(He);ry=a(ci,"To use the "),_t=n(ci,"CODE",{class:!0});var G2=l(_t);iy=a(G2,"create_key_block"),G2.forEach(o),cy=a(ci,":"),ci.forEach(o),py=c(k),Et=n(k,"DIV",{class:!0});var R3=l(Et);R3.forEach(o),ky=c(k),lr=n(k,"P",{});var q2=l(lr);hy=a(q2,"The next thing to do, is to place these statements in the right position:"),q2.forEach(o),dy=c(k),bt=n(k,"DIV",{class:!0});var B3=l(bt);B3.forEach(o),vy=c(k),Ne=n(k,"P",{});var pi=l(Ne);yy=a(pi,"Now, the most important piece of the "),Ct=n(pi,"CODE",{class:!0});var K2=l(Ct);uy=a(K2,"{#key}"),K2.forEach(o),fy=a(pi," block, the logic to"),pi.forEach(o),xy=c(k),Re=n(k,"UL",{});var ki=l(Re);rr=n(ki,"LI",{});var U2=l(rr);my=a(U2,"check if the expression has changed"),U2.forEach(o),gy=c(ki),Be=n(ki,"LI",{});var hi=l(Be);wy=a(hi,"if so, recreate the elements inside the "),Ot=n(hi,"CODE",{class:!0});var J2=l(Ot);_y=a(J2,"{#key}"),J2.forEach(o),Ey=a(hi," block"),hi.forEach(o),ki.forEach(o),by=c(k),Dt=n(k,"DIV",{class:!0});var j3=l(Dt);j3.forEach(o),Cy=c(k),je=n(k,"P",{});var di=l(je);Oy=a(di,"If there is transition in the content of the "),Tt=n(di,"CODE",{class:!0});var Y2=l(Tt);Dy=a(Y2,"key_block"),Y2.forEach(o),Ty=a(di,", we need extra code for the transition:"),di.forEach(o),Iy=c(k),It=n(k,"DIV",{class:!0});var W3=l(It);W3.forEach(o),Sy=c(k),Ns=n(k,"P",{});var ul=l(Ns);Py=a(ul,"I am going to gloss over the details of how "),St=n(ul,"CODE",{class:!0});var F2=l(St);Ay=a(F2,"outros"),F2.forEach(o),Ly=a(ul," / "),Pt=n(ul,"CODE",{class:!0});var z2=l(Pt);Hy=a(z2,"intros"),z2.forEach(o),Ny=a(ul,` work, we will cover them in the later parts of "Compile Svelte in your head", so let's assume these code are up for the job.`),ul.forEach(o),Ry=c(k),We=n(k,"P",{});var vi=l(We);By=a(vi,"Now we have done the reverse-compile Svelte in your head, let's reverse the reverse, and write the render code for Svelte "),At=n(vi,"CODE",{class:!0});var Q2=l(At);jy=a(Q2,"{#key}"),Q2.forEach(o),Wy=a(vi," block."),vi.forEach(o),$y=c(k),$e=n(k,"P",{});var yi=l($e);My=a(yi,"Here are some setup code for the render-dom Wrapper for "),Lt=n(yi,"CODE",{class:!0});var Z2=l(Lt);Vy=a(Z2,"{#key}"),Z2.forEach(o),Gy=a(yi,":"),yi.forEach(o),qy=c(k),Ht=n(k,"DIV",{class:!0});var $3=l(Ht);$3.forEach(o),Ky=c(k),ir=n(k,"P",{});var X2=l(ir);Uy=a(X2,"A few more points:"),X2.forEach(o),Jy=c(k),Me=n(k,"UL",{});var ui=l(Me);O=n(ui,"LI",{});var I=l(O);Yy=a(I,"the "),Nt=n(I,"CODE",{class:!0});var sw=l(Nt);Fy=a(sw,"block"),sw.forEach(o),zy=a(I," in the "),Rt=n(I,"CODE",{class:!0});var ew=l(Rt);Qy=a(ew,"render"),ew.forEach(o),Zy=a(I," method is the current "),Bt=n(I,"CODE",{class:!0});var aw=l(Bt);Xy=a(aw,"create_fragment"),aw.forEach(o),su=a(I," function that the "),jt=n(I,"CODE",{class:!0});var ow=l(jt);eu=a(ow,"{#key}"),ow.forEach(o),au=a(I," block is in; "),Wt=n(I,"CODE",{class:!0});var tw=l(Wt);ou=a(tw,"this.block"),tw.forEach(o),tu=a(I," is the new "),$t=n(I,"CODE",{class:!0});var nw=l($t);nu=a(nw,"create_fragment"),nw.forEach(o),lu=a(I," function that we created to put the content of the "),Mt=n(I,"CODE",{class:!0});var lw=l(Mt);ru=a(lw,"{#key}"),lw.forEach(o),iu=a(I," block"),Ve=n(I,"UL",{});var fi=l(Ve);Js=n(fi,"LI",{});var Hr=l(Js);cu=a(Hr,"we named the new "),Vt=n(Hr,"CODE",{class:!0});var rw=l(Vt);pu=a(rw,"create_fragment"),rw.forEach(o),ku=a(Hr," function "),Gt=n(Hr,"CODE",{class:!0});var iw=l(Gt);hu=a(iw,'"create_key_block"'),iw.forEach(o),Hr.forEach(o),du=c(fi),qt=n(fi,"LI",{});var tm=l(qt);vu=a(tm,"to make sure there's no conflicting names, we use "),Kt=n(tm,"CODE",{class:!0});var cw=l(Kt);yu=a(cw,"renderer.component.get_unique_name()"),cw.forEach(o),tm.forEach(o),fi.forEach(o),I.forEach(o),uu=c(ui),M=n(ui,"LI",{});var Gs=l(M);fu=a(Gs,"All "),cr=n(Gs,"STRONG",{});var pw=l(cr);xu=a(pw,"render-dom wrappers"),pw.forEach(o),mu=a(Gs," has a property named "),Ut=n(Gs,"CODE",{class:!0});var kw=l(Ut);gu=a(kw,"var"),kw.forEach(o),wu=a(Gs,", which is the variable name referencing the element / block to be created by the "),pr=n(Gs,"STRONG",{});var hw=l(pr);_u=a(hw,"render-dom wrapper"),hw.forEach(o),Eu=a(Gs,"."),kr=n(Gs,"UL",{});var dw=l(kr);Ys=n(dw,"LI",{});var Nr=l(Ys);bu=a(Nr,"the "),Jt=n(Nr,"CODE",{class:!0});var vw=l(Jt);Cu=a(vw,"var"),vw.forEach(o),Ou=a(Nr," name will be "),Ge=n(Nr,"A",{href:!0,rel:!0});var yw=l(Ge);Du=a(yw,"deconflicted by the Renderer"),yw.forEach(o),Nr.forEach(o),dw.forEach(o),Gs.forEach(o),ui.forEach(o),Tu=c(k),qe=n(k,"P",{});var xi=l(qe);Iu=a(xi,"Now, let's implement the "),Yt=n(xi,"CODE",{class:!0});var uw=l(Yt);Su=a(uw,"render"),uw.forEach(o),Pu=a(xi," method."),xi.forEach(o),Au=c(k),Ke=n(k,"P",{});var mi=l(Ke);Lu=a(mi,"Firstly, render the children into "),Ft=n(mi,"CODE",{class:!0});var fw=l(Ft);Hu=a(fw,"this.block"),fw.forEach(o),Nu=a(mi,":"),mi.forEach(o),Ru=c(k),zt=n(k,"DIV",{class:!0});var M3=l(zt);M3.forEach(o),Bu=c(k),A=n(k,"P",{});var q=l(A);ju=a(q,"We pass in "),Qt=n(q,"CODE",{class:!0});var xw=l(Qt);Wu=a(xw,"null"),xw.forEach(o),$u=a(q," as "),Zt=n(q,"CODE",{class:!0});var mw=l(Zt);Mu=a(mw,"parent_node"),mw.forEach(o),Vu=a(q," and "),Xt=n(q,"CODE",{class:!0});var gw=l(Xt);Gu=a(gw,"x`#nodes`"),gw.forEach(o),qu=a(q," as "),sn=n(q,"CODE",{class:!0});var ww=l(sn);Ku=a(ww,"parent_nodes"),ww.forEach(o),Uu=a(q," to indicate that the children will be rendered at the root of the "),en=n(q,"CODE",{class:!0});var _w=l(en);Ju=a(_w,"this.block"),_w.forEach(o),Yu=a(q,"."),q.forEach(o),Fu=c(k),zu=n(k,"HR",{}),Qu=c(k),Rs=n(k,"P",{});var fl=l(Rs);Zu=a(fl,"If I am implementing the "),an=n(fl,"CODE",{class:!0});var Ew=l(an);Xu=a(Ew,"render"),Ew.forEach(o),sf=a(fl," method of an Element render-dom Wrapper, and currently rendering the "),on=n(fl,"CODE",{class:!0});var bw=l(on);ef=a(bw,"<div>"),bw.forEach(o),af=a(fl," in the following code snippet:"),fl.forEach(o),of=c(k),tn=n(k,"DIV",{class:!0});var V3=l(tn);V3.forEach(o),tf=c(k),Ue=n(k,"P",{});var gi=l(Ue);nf=a(gi,"then I will render the "),nn=n(gi,"CODE",{class:!0});var Cw=l(nn);lf=a(Cw,"<span />"),Cw.forEach(o),rf=a(gi," with:"),gi.forEach(o),cf=c(k),ln=n(k,"DIV",{class:!0});var G3=l(ln);G3.forEach(o),pf=c(k),as=n(k,"P",{});var ie=l(as);kf=a(ie,"so the "),rn=n(ie,"CODE",{class:!0});var Ow=l(rn);hf=a(Ow,"<span />"),Ow.forEach(o),df=a(ie," will be inserted into the current "),cn=n(ie,"CODE",{class:!0});var Dw=l(cn);vf=a(Dw,"<div />"),Dw.forEach(o),yf=a(ie," and hydrate from the "),pn=n(ie,"CODE",{class:!0});var Tw=l(pn);uf=a(Tw,"<div />"),Tw.forEach(o),ff=a(ie,"'s childNodes."),ie.forEach(o),xf=c(k),mf=n(k,"HR",{}),gf=c(k),hr=n(k,"P",{});var Iw=l(hr);wf=a(Iw,"Next, I am going to insert code into each of the fragment methods:"),Iw.forEach(o),_f=c(k),kn=n(k,"DIV",{class:!0});var q3=l(kn);q3.forEach(o),Ef=c(k),dr=n(k,"P",{});var Sw=l(dr);bf=a(Sw,"A few more points:"),Sw.forEach(o),Cf=c(k),Je=n(k,"UL",{});var wi=l(Je);B=n(wi,"LI",{});var hs=l(B);Of=a(hs,"we push the code into respective methods of the "),hn=n(hs,"CODE",{class:!0});var Pw=l(hn);Df=a(Pw,"block"),Pw.forEach(o),Tf=a(hs,", eg: "),dn=n(hs,"CODE",{class:!0});var Aw=l(dn);If=a(Aw,"init"),Aw.forEach(o),Sf=a(hs,", "),vn=n(hs,"CODE",{class:!0});var Lw=l(vn);Pf=a(Lw,"create"),Lw.forEach(o),Af=a(hs,", "),yn=n(hs,"CODE",{class:!0});var Hw=l(yn);Lf=a(Hw,"mount"),Hw.forEach(o),Hf=a(hs,", ..."),hs.forEach(o),Nf=c(wi),V=n(wi,"LI",{});var qs=l(V);Rf=a(qs,"we use "),Ye=n(qs,"A",{href:!0,rel:!0});var Nw=l(Ye);Bf=a(Nw,"tagged templates"),Nw.forEach(o),jf=a(qs,", "),un=n(qs,"CODE",{class:!0});var Rw=l(un);Wf=a(Rw,"b`...`"),Rw.forEach(o),$f=a(qs," to create a JavaScript AST node. The "),fn=n(qs,"CODE",{class:!0});var Bw=l(fn);Mf=a(Bw,"b"),Bw.forEach(o),Vf=a(qs," tag function allow us to pass in JavaScript AST node as placeholder, so that is very convenient."),vr=n(qs,"UL",{});var jw=l(vr);Fs=n(jw,"LI",{});var Rr=l(Fs);Gf=a(Rr,"You can check out more about the "),xn=n(Rr,"CODE",{class:!0});var Ww=l(xn);qf=a(Ww,"b"),Ww.forEach(o),Kf=a(Rr," tag function from "),Fe=n(Rr,"A",{href:!0,rel:!0});var $w=l(Fe);Uf=a($w,"code-red"),$w.forEach(o),Rr.forEach(o),jw.forEach(o),qs.forEach(o),wi.forEach(o),Jf=c(k),mn=n(k,"P",{});var nm=l(mn);Yf=a(nm,"Now, to implement the dirty checking, we use "),gn=n(nm,"CODE",{class:!0});var Mw=l(gn);Ff=a(Mw,"this.dependencies"),Mw.forEach(o),nm.forEach(o),zf=c(k),wn=n(k,"DIV",{class:!0});var K3=l(wn);K3.forEach(o),Qf=c(k),ze=n(k,"P",{});var _i=l(ze);Zf=a(_i,"To determine whether our expression value has changed, we are going to compute the expression and compare it with "),_n=n(_i,"CODE",{class:!0});var Vw=l(_n);Xf=a(Vw,"previous_key"),Vw.forEach(o),sx=a(_i," and determine whether it has changed."),_i.forEach(o),ex=c(k),yr=n(k,"P",{});var Gw=l(yr);ax=a(Gw,"Here's a recap of the compiled code that we've come up previously:"),Gw.forEach(o),ox=c(k),En=n(k,"DIV",{class:!0});var U3=l(En);U3.forEach(o),tx=c(k),Qe=n(k,"P",{});var Ei=l(Qe);nx=a(Ei,"We start with declaring the variable, "),bn=n(Ei,"CODE",{class:!0});var qw=l(bn);lx=a(qw,"previous_key"),qw.forEach(o),rx=a(Ei,":"),Ei.forEach(o),ix=c(k),Cn=n(k,"DIV",{class:!0});var J3=l(Cn);J3.forEach(o),cx=c(k),zs=n(k,"P",{});var Br=l(zs);On=n(Br,"CODE",{class:!0});var Kw=l(On);px=a(Kw,"expression.manipulate(block)"),Kw.forEach(o),kx=a(Br," will convert the expression to refer to the "),Dn=n(Br,"CODE",{class:!0});var Uw=l(Dn);hx=a(Uw,"ctx"),Uw.forEach(o),dx=a(Br," variable, for example:"),Br.forEach(o),vx=c(k),Tn=n(k,"DIV",{class:!0});var Y3=l(Tn);Y3.forEach(o),yx=c(k),Ze=n(k,"P",{});var bi=l(Ze);ux=a(bi,"Next we are going to compare the new value and assign it to "),In=n(bi,"CODE",{class:!0});var Jw=l(In);fx=a(Jw,"previous_key"),Jw.forEach(o),xx=a(bi," after that."),bi.forEach(o),mx=c(k),Sn=n(k,"DIV",{class:!0});var F3=l(Sn);F3.forEach(o),gx=c(k),ur=n(k,"P",{});var Yw=l(ur);wx=a(Yw,"And to combine all of these, we have:"),Yw.forEach(o),_x=c(k),Pn=n(k,"DIV",{class:!0});var z3=l(Pn);z3.forEach(o),Ex=c(k),os=n(k,"P",{});var ce=l(os);bx=a(ce,"We are using the "),An=n(ce,"CODE",{class:!0});var Fw=l(An);Cx=a(Fw,"anchor"),Fw.forEach(o),Ox=a(ce," when we are mounting the new "),Ln=n(ce,"CODE",{class:!0});var zw=l(Ln);Dx=a(zw,"key_block"),zw.forEach(o),Tx=a(ce,", you can check out "),Hn=n(ce,"A",{href:!0});var Qw=l(Hn);Ix=a(Qw,"Compile Svelte in your head Part 4: the extra text node"),Qw.forEach(o),Sx=a(ce,", explaining why we need the anchor node, and here is how the anchor node being computed:"),ce.forEach(o),Px=c(k),Nn=n(k,"DIV",{class:!0});var Q3=l(Nn);Q3.forEach(o),Ax=c(k),Xe=n(k,"P",{});var Ci=l(Xe);Lx=a(Ci,"It could be the next sibling, or it could be a new "),Rn=n(Ci,"CODE",{class:!0});var Zw=l(Rn);Hx=a(Zw,"empty()"),Zw.forEach(o),Nx=a(Ci," text node created."),Ci.forEach(o),Rx=c(k),fr=n(k,"P",{});var Xw=l(fr);Bx=a(Xw,"Finally, if the content has transition, we need to add code for the transition as well:"),Xw.forEach(o),jx=c(k),Bn=n(k,"DIV",{class:!0});var Z3=l(Bn);Z3.forEach(o),Wx=c(k),xr=n(k,"P",{});var s_=l(xr);$x=a(s_,"Where to place them? Well, I'll leave that as your exercise to figure that out. \u{1F609}"),s_.forEach(o),k.forEach(o),qr=c(h),G=n(h,"SECTION",{});var pe=l(G);mr=n(pe,"H3",{});var e_=l(mr);sa=n(e_,"A",{href:!0,id:!0});var a_=l(sa);Mx=a(a_,"Creating code for SSR"),a_.forEach(o),e_.forEach(o),Vx=c(pe),Bs=n(pe,"P",{});var xl=l(Bs);Gx=a(xl,"For SSR, it is much simpler than for the "),jn=n(xl,"CODE",{class:!0});var o_=l(jn);qx=a(o_,"dom"),o_.forEach(o),Kx=a(xl,". "),Wn=n(xl,"CODE",{class:!0});var t_=l(Wn);Ux=a(t_,"{#key}"),t_.forEach(o),Jx=a(xl," block has no special meaning in SSR, because, you will only render once in SSR:"),xl.forEach(o),Yx=c(pe),$n=n(pe,"DIV",{class:!0});var X3=l($n);X3.forEach(o),Fx=c(pe),js=n(pe,"P",{});var ml=l(js);zx=a(ml,"\u261D\uFE0F That's all the code we need for SSR. We are rendering the children, passing down the "),Mn=n(ml,"CODE",{class:!0});var n_=l(Mn);Qx=a(n_,"options"),n_.forEach(o),Zx=a(ml,", and add no extra code for the "),Vn=n(ml,"CODE",{class:!0});var l_=l(Vn);Xx=a(l_,"{#key}"),l_.forEach(o),s1=a(ml," block."),ml.forEach(o),pe.forEach(o),Kr=c(h),is=n(h,"SECTION",{});var gl=l(is);gr=n(gl,"H3",{});var r_=l(gr);ea=n(r_,"A",{href:!0,id:!0});var i_=l(ea);e1=a(i_,"Generate code"),i_.forEach(o),r_.forEach(o),a1=c(gl),wr=n(gl,"P",{});var c_=l(wr);o1=a(c_,"Well, everything in this step is set up generic enough to handle most use case."),c_.forEach(o),t1=c(gl),_r=n(gl,"P",{});var p_=l(_r);n1=a(p_,"So, nothing to change here. \u{1F937}\u200D\u2642\uFE0F"),p_.forEach(o),gl.forEach(o),Ur=c(h),Qs=n(h,"SECTION",{});var Oi=l(Qs);Er=n(Oi,"H3",{});var k_=l(Er);aa=n(k_,"A",{href:!0,id:!0});var h_=l(aa);l1=a(h_,"A few other implementation consideration"),h_.forEach(o),k_.forEach(o),r1=c(Oi),oa=n(Oi,"UL",{});var Di=l(oa);ta=n(Di,"LI",{});var Ti=l(ta);i1=a(Ti,"What if the expression in the "),Gn=n(Ti,"CODE",{class:!0});var d_=l(Gn);c1=a(d_,"{#key}"),d_.forEach(o),p1=a(Ti," block is not dynamic, do we give warnings? or optimise the output?"),Ti.forEach(o),k1=c(Di),na=n(Di,"LI",{});var Ii=l(na);h1=a(Ii,"How will "),la=n(Ii,"A",{href:!0,rel:!0});var v_=l(la);qn=n(v_,"CODE",{class:!0});var y_=l(qn);d1=a(y_,"<svelte:options immutable={true}>"),y_.forEach(o),v_.forEach(o),v1=a(Ii," affect the code output?"),Ii.forEach(o),Di.forEach(o),Oi.forEach(o),Jr=c(h),cs=n(h,"SECTION",{});var wl=l(cs);br=n(wl,"H2",{});var u_=l(br);ra=n(u_,"A",{href:!0,id:!0});var f_=l(ra);y1=a(f_,"The testing"),f_.forEach(o),u_.forEach(o),u1=c(wl),Ws=n(wl,"P",{});var _l=l(Ws);f1=a(_l,`You've seen me implementing test cases in the previous "Contributing to Svelte" articles [`),Kn=n(_l,"A",{href:!0});var x_=l(Kn);x1=a(x_,"1"),x_.forEach(o),m1=a(_l,"] ["),Un=n(_l,"A",{href:!0});var m_=l(Un);g1=a(m_,"2"),m_.forEach(o),w1=a(_l,"], here I am going to skip showing the implementation of the test cases, and probably point out some thoughts I had when coming up with tests:"),_l.forEach(o),_1=c(wl),ts=n(wl,"OL",{});var ke=l(ts);Cr=n(ke,"LI",{});var g_=l(Cr);Jn=n(g_,"P",{});var lm=l(Jn);Or=n(lm,"STRONG",{});var w_=l(Or);E1=a(w_,"Happy path:"),w_.forEach(o),b1=a(lm," changing the key expression should recreate the content"),lm.forEach(o),g_.forEach(o),C1=c(ke),Dr=n(ke,"LI",{});var __=l(Dr);Yn=n(__,"P",{});var rm=l(Yn);Tr=n(rm,"STRONG",{});var E_=l(Tr);O1=a(E_,"Happy path:"),E_.forEach(o),D1=a(rm," Transition when recreating the content should work \u2728"),rm.forEach(o),__.forEach(o),T1=c(ke),ia=n(ke,"LI",{});var Si=l(ia);$s=n(Si,"P",{});var El=l($s);Ir=n(El,"STRONG",{});var b_=l(Ir);I1=a(b_,"Possible edge case:"),b_.forEach(o),S1=a(El," Changing variables other than the key expression should "),Sr=n(El,"STRONG",{});var C_=l(Sr);P1=a(C_,"not"),C_.forEach(o),A1=a(El," recreate the content in "),Fn=n(El,"CODE",{class:!0});var O_=l(Fn);L1=a(O_,"{#key}"),O_.forEach(o),El.forEach(o),H1=c(Si),zn=n(Si,"DIV",{class:!0});var sE=l(zn);sE.forEach(o),Si.forEach(o),N1=c(ke),ca=n(ke,"LI",{});var Pi=l(ca);Qn=n(Pi,"P",{});var im=l(Qn);Pr=n(im,"STRONG",{});var D_=l(Pr);R1=a(D_,"Possible edge case:"),D_.forEach(o),B1=a(im," Changing the variables within the key expression but the result value of the key expression stay the same"),im.forEach(o),j1=c(Pi),Zn=n(Pi,"DIV",{class:!0});var eE=l(Zn);eE.forEach(o),Pi.forEach(o),ke.forEach(o),wl.forEach(o),Yr=c(h),H=n(h,"SECTION",{});var ds=l(H);Ar=n(ds,"H2",{});var T_=l(Ar);pa=n(T_,"A",{href:!0,id:!0});var I_=l(pa);W1=a(I_,"Closing Notes"),I_.forEach(o),T_.forEach(o),$1=c(ds),ka=n(ds,"P",{});var Ai=l(ka);M1=a(Ai,"You can read the "),ha=n(Ai,"A",{href:!0,rel:!0});var S_=l(ha);V1=a(S_,"Pull Request #5397"),S_.forEach(o),G1=a(Ai," to read the final implementation."),Ai.forEach(o),q1=c(ds),K1=n(ds,"HR",{}),U1=c(ds),da=n(ds,"P",{});var Li=l(da);J1=a(Li,"If you wish to learn more about Svelte, "),va=n(Li,"A",{href:!0,rel:!0});var P_=l(va);Y1=a(P_,"follow me on Twitter"),P_.forEach(o),F1=a(Li,"."),Li.forEach(o),z1=c(ds),ya=n(ds,"P",{});var Hi=l(ya);Q1=a(Hi,"If you have anything unclear about this article, find me on "),ua=n(Hi,"A",{href:!0,rel:!0});var A_=l(ua);Z1=a(A_,"Twitter"),A_.forEach(o),X1=a(Hi," too!"),Hi.forEach(o),ds.forEach(o),this.h()},h(){r(E,"href","#background"),r(E,"id","background"),r(wa,"href","/contributing-to-svelte-fixing-issue-5012"),r(_a,"href","/contributing-to-svelte-fixing-issue-4392"),r(Ea,"class","inline"),r(ba,"class","inline"),r(Ca,"class","inline"),r(Oa,"class","inline"),r(Da,"class","inline"),r(Ta,"class","inline"),r(Ia,"href","/the-svelte-compiler-handbook"),r(Sa,"href","/looking-into-the-svelte-compiler"),r(he,"href","#the-motivation"),r(he,"id","the-motivation"),r(Pa,"class","inline"),r(de,"href","https://github.com/sveltejs/svelte/issues/1469"),r(de,"rel","nofollow"),r(Aa,"class","inline"),r(La,"class","inline"),r(Ha,"class","inline"),r(Na,"class","inline"),r(Ra,"class","code-section"),r(ve,"href","https://svelte.dev/repl/1be3a0b123aa4384853ff5abd103f9ae"),r(ve,"rel","nofollow"),r(Ba,"class","inline"),r(ja,"class","inline"),r(Wa,"class","inline"),r($a,"class","inline"),r(Ma,"class","inline"),r(Va,"class","inline"),r(Ga,"class","inline"),r(qa,"class","inline"),r(Ka,"class","inline"),r(Ua,"class","inline"),r(Ja,"class","inline"),r(fs,"href","https://svelte.dev/tutorial/keyed-each-blocks"),r(fs,"rel","nofollow"),r(Ya,"class","inline"),r(Fa,"class","inline"),r(za,"class","inline"),r(Qa,"class","inline"),r(Za,"class","inline"),r(Xa,"class","inline"),r(xs,"href","https://svelte.dev/repl/b1f5815f8b5f4634afa9025492739fa4"),r(xs,"rel","nofollow"),r(so,"class","inline"),r(eo,"class","inline"),r(ao,"class","inline"),r(gs,"href","https://www.nikgraf.com/blog/using-reacts-key-attribute-to-remount-a-component"),r(gs,"rel","nofollow"),r(oo,"class","inline"),r(to,"class","inline"),r(no,"class","code-section"),r(lo,"class","inline"),r(ro,"class","inline"),r(ye,"href","#transitions-for-reactive-data-change"),r(ye,"id","transitions-for-reactive-data-change"),r(io,"class","inline"),r(fe,"href","https://github.com/sveltejs/svelte/issues/5119"),r(fe,"rel","nofollow"),r(co,"class","code-section"),r(po,"class","inline"),r(ko,"class","code-section"),r(ho,"class","inline"),r(vo,"class","code-section"),r(yo,"class","inline"),r(_e,"href","#the-implementation"),r(_e,"id","the-implementation"),r(uo,"href","/the-svelte-compiler-handbook"),r(be,"href","#parsing"),r(be,"id","parsing"),r(Oe,"href","https://github.com/sveltejs/svelte/blob/82dc26a31c37906153e07686b73d3af08dd50154/src/compiler/parse/index.ts#L51"),r(Oe,"rel","nofollow"),r(fo,"class","code-section"),r(mo,"class","inline"),r(go,"class","inline"),r(wo,"class","inline"),r(_o,"class","inline"),r(Eo,"class","inline"),r(bo,"class","inline"),r(Co,"class","inline"),r(Oo,"class","inline"),r(Do,"class","inline"),r(To,"class","inline"),r(Us,"href","https://github.com/sveltejs/svelte/blob/82dc26a31c37906153e07686b73d3af08dd50154/src/compiler/parse/state/mustache.ts#L35"),r(Us,"rel","nofollow"),r(Io,"class","inline"),r(So,"class","inline"),r(Po,"class","inline"),r(Ao,"class","code-section"),r(Lo,"class","inline"),r(Ho,"class","inline"),r(No,"class","code-section"),r(Ro,"class","inline"),r(Bo,"class","inline"),r(jo,"class","inline"),r(Wo,"class","code-section"),r($o,"class","inline"),r(Mo,"class","inline"),r(Vo,"class","inline"),r(Go,"class","inline"),r(qo,"class","code-section"),r(De,"href","#tracking-references-and-dependencies"),r(De,"id","tracking-references-and-dependencies"),r(Ko,"class","inline"),r(Uo,"class","inline"),r(Jo,"class","inline"),r(Yo,"class","inline"),r(Fo,"class","code-section"),r(Qo,"class","inline"),r(Zo,"class","inline"),r(Xo,"class","inline"),r(st,"class","inline"),r(et,"class","inline"),r(at,"class","inline"),r(tt,"class","inline"),r(nt,"class","inline"),r(Te,"href","https://github.com/sveltejs/svelte/blob/caebe0deb80d959ad7c7b5276d7e017be71769c7/src/compiler/compile/nodes/shared/Node.ts"),r(Te,"rel","nofollow"),r(lt,"class","inline"),r(rt,"class","inline"),r(it,"class","inline"),r(Se,"href","https://github.com/sveltejs/svelte/blob/2b2f40d32ae36a94b77b69959494687073a3ebbc/src/compiler/compile/render_dom/wrappers/shared/Wrapper.ts#L7"),r(Se,"rel","nofollow"),r(ct,"class","inline"),r(pt,"class","inline"),r(kt,"class","inline"),r(ht,"class","code-section"),r(dt,"class","inline"),r(vt,"class","inline"),r(yt,"class","code-section"),r(ut,"class","inline"),r(Ae,"href","#creating-code-blocks-fragments"),r(Ae,"id","creating-code-blocks-fragments"),r(ft,"href","/compile-svelte-in-your-head-part-4"),r(xt,"class","inline"),r(mt,"class","inline"),r(gt,"class","inline"),r(wt,"class","code-section"),r(_t,"class","inline"),r(Et,"class","code-section"),r(bt,"class","code-section"),r(Ct,"class","inline"),r(Ot,"class","inline"),r(Dt,"class","code-section"),r(Tt,"class","inline"),r(It,"class","code-section"),r(St,"class","inline"),r(Pt,"class","inline"),r(At,"class","inline"),r(Lt,"class","inline"),r(Ht,"class","code-section"),r(Nt,"class","inline"),r(Rt,"class","inline"),r(Bt,"class","inline"),r(jt,"class","inline"),r(Wt,"class","inline"),r($t,"class","inline"),r(Mt,"class","inline"),r(Vt,"class","inline"),r(Gt,"class","inline"),r(Kt,"class","inline"),r(Ut,"class","inline"),r(Jt,"class","inline"),r(Ge,"href","https://github.com/sveltejs/svelte/blob/8148a7a33444805320923e4c4e071f62dee3df6c/src/compiler/compile/render_dom/Block.ts#L118-L152"),r(Ge,"rel","nofollow"),r(Yt,"class","inline"),r(Ft,"class","inline"),r(zt,"class","code-section"),r(Qt,"class","inline"),r(Zt,"class","inline"),r(Xt,"class","inline"),r(sn,"class","inline"),r(en,"class","inline"),r(an,"class","inline"),r(on,"class","inline"),r(tn,"class","code-section"),r(nn,"class","inline"),r(ln,"class","code-section"),r(rn,"class","inline"),r(cn,"class","inline"),r(pn,"class","inline"),r(kn,"class","code-section"),r(hn,"class","inline"),r(dn,"class","inline"),r(vn,"class","inline"),r(yn,"class","inline"),r(Ye,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_templates"),r(Ye,"rel","nofollow"),r(un,"class","inline"),r(fn,"class","inline"),r(xn,"class","inline"),r(Fe,"href","https://github.com/Rich-Harris/code-red"),r(Fe,"rel","nofollow"),r(gn,"class","inline"),r(wn,"class","code-section"),r(_n,"class","inline"),r(En,"class","code-section"),r(bn,"class","inline"),r(Cn,"class","code-section"),r(On,"class","inline"),r(Dn,"class","inline"),r(Tn,"class","code-section"),r(In,"class","inline"),r(Sn,"class","code-section"),r(Pn,"class","code-section"),r(An,"class","inline"),r(Ln,"class","inline"),r(Hn,"href","/compile-svelte-in-your-head-part-4/#the-extra-text-node"),r(Nn,"class","code-section"),r(Rn,"class","inline"),r(Bn,"class","code-section"),r(sa,"href","#creating-code-for-ssr"),r(sa,"id","creating-code-for-ssr"),r(jn,"class","inline"),r(Wn,"class","inline"),r($n,"class","code-section"),r(Mn,"class","inline"),r(Vn,"class","inline"),r(ea,"href","#generate-code"),r(ea,"id","generate-code"),r(aa,"href","#a-few-other-implementation-consideration"),r(aa,"id","a-few-other-implementation-consideration"),r(Gn,"class","inline"),r(qn,"class","inline"),r(la,"href","https://svelte.dev/docs#svelte_options"),r(la,"rel","nofollow"),r(ra,"href","#the-testing"),r(ra,"id","the-testing"),r(Kn,"href","/contributing-to-svelte-fixing-issue-5012"),r(Un,"href","/contributing-to-svelte-fixing-issue-4392"),r(Fn,"class","inline"),r(zn,"class","code-section"),r(Zn,"class","code-section"),r(pa,"href","#closing-notes"),r(pa,"id","closing-notes"),r(ha,"href","https://github.com/sveltejs/svelte/pull/5397"),r(ha,"rel","nofollow"),r(va,"href","https://twitter.com/lihautan"),r(va,"rel","nofollow"),r(ua,"href","https://twitter.com/lihautan"),r(ua,"rel","nofollow")},m(h,y){j_(_,h,y),C(h,K,y),C(h,S,y),s(S,vs),s(vs,E),s(E,U),s(S,ga),s(S,J),s(J,Ni),s(J,wa),s(wa,Ri),s(J,Bi),s(J,_a),s(_a,ji),s(J,Wi),s(J,Ea),s(Ea,$i),s(J,Mi),s(S,Vi),s(S,T),s(T,Gi),s(T,ba),s(ba,qi),s(T,Ki),s(T,Ca),s(Ca,Ui),s(T,Ji),s(T,Oa),s(Oa,Yi),s(T,Fi),s(T,Da),s(Da,zi),s(T,Qi),s(T,Ta),s(Ta,Zi),s(T,Xi),s(T,Ia),s(Ia,sc),s(T,ec),s(T,Sa),s(Sa,ac),s(T,oc),C(h,jr,y),C(h,f,y),s(f,bl),s(bl,he),s(he,tc),s(f,nc),s(f,N),s(N,lc),s(N,Pa),s(Pa,rc),s(N,ic),s(N,Cl),s(Cl,cc),s(N,pc),s(N,Ol),s(Ol,kc),s(N,hc),s(N,de),s(de,dc),s(N,vc),s(f,yc),s(f,ys),s(ys,uc),s(ys,Aa),s(Aa,fc),s(ys,xc),s(ys,La),s(La,mc),s(ys,gc),s(f,wc),s(f,us),s(us,_c),s(us,Ha),s(Ha,Ec),s(us,bc),s(us,Na),s(Na,Cc),s(us,Oc),s(f,Dc),s(f,Ra),Ra.innerHTML=V_,s(f,Tc),s(f,Dl),s(Dl,ve),s(ve,Ic),s(f,Sc),s(f,u),s(u,Pc),s(u,Ba),s(Ba,Ac),s(u,Lc),s(u,ja),s(ja,Hc),s(u,Nc),s(u,Wa),s(Wa,Rc),s(u,Bc),s(u,$a),s($a,jc),s(u,Wc),s(u,Ma),s(Ma,$c),s(u,Mc),s(u,Va),s(Va,Vc),s(u,Gc),s(u,Ga),s(Ga,qc),s(u,Kc),s(u,qa),s(qa,Uc),s(u,Jc),s(u,Ka),s(Ka,Yc),s(u,Fc),s(u,Ua),s(Ua,zc),s(u,Qc),s(u,fs),s(fs,Zc),s(fs,Ja),s(Ja,Xc),s(fs,sp),s(u,ep),s(u,Ya),s(Ya,ap),s(u,op),s(u,Fa),s(Fa,tp),s(u,np),s(f,lp),s(f,Y),s(Y,rp),s(Y,za),s(za,ip),s(Y,cp),s(Y,Qa),s(Qa,pp),s(Y,kp),s(Y,Za),s(Za,hp),s(Y,dp),s(f,vp),s(f,Ks),s(Ks,xs),s(xs,yp),s(xs,Xa),s(Xa,up),s(xs,fp),s(Ks,xp),s(Ks,so),s(so,mp),s(Ks,gp),s(f,wp),s(f,Tl),s(Tl,ms),s(ms,_p),s(ms,eo),s(eo,Ep),s(ms,bp),s(ms,gs),s(gs,Cp),s(gs,ao),s(ao,Op),s(gs,Dp),s(ms,Tp),s(f,Ip),s(f,F),s(F,Sp),s(F,oo),s(oo,Pp),s(F,Ap),s(F,to),s(to,Lp),s(F,Hp),s(F,Il),s(Il,Np),s(F,Rp),s(f,Bp),s(f,no),no.innerHTML=G_,s(f,jp),s(f,ws),s(ws,Wp),s(ws,lo),s(lo,$p),s(ws,Mp),s(ws,ro),s(ro,Vp),s(ws,Gp),C(h,Wr,y),C(h,b,y),s(b,Sl),s(Sl,ye),s(ye,qp),s(b,Kp),s(b,_s),s(_s,Up),s(_s,ue),s(ue,Jp),s(ue,io),s(io,Yp),s(ue,Fp),s(_s,zp),s(_s,fe),s(fe,Qp),s(_s,Zp),s(b,Xp),s(b,co),co.innerHTML=q_,s(b,sk),s(b,Pl),s(Pl,ek),s(b,ak),s(b,xe),s(xe,ok),s(xe,po),s(po,tk),s(xe,nk),s(b,lk),s(b,me),s(me,rk),s(me,Al),s(Al,ik),s(me,ck),s(b,pk),s(b,ko),ko.innerHTML=K_,s(b,kk),s(b,ge),s(ge,hk),s(ge,ho),s(ho,dk),s(ge,vk),s(b,yk),s(b,vo),vo.innerHTML=U_,s(b,uk),s(b,we),s(we,fk),s(we,yo),s(yo,xk),s(we,mk),C(h,$r,y),C(h,j,y),s(j,Ll),s(Ll,_e),s(_e,gk),s(j,wk),s(j,Ee),s(Ee,_k),s(Ee,uo),s(uo,Ek),s(Ee,bk),s(j,Ck),s(j,z),s(z,Hl),s(Hl,Ok),s(z,Dk),s(z,Nl),s(Nl,Tk),s(z,Ik),s(z,Rl),s(Rl,Sk),s(z,Pk),s(z,Bl),s(Bl,Ak),s(j,Lk),s(j,jl),s(jl,Hk),C(h,Mr,y),C(h,d,y),s(d,Wl),s(Wl,be),s(be,Nk),s(d,Rk),s(d,Ce),s(Ce,Bk),s(Ce,Oe),s(Oe,jk),s(Ce,Wk),s(d,$k),s(d,fo),fo.innerHTML=J_,s(d,Mk),s(d,$l),s($l,Vk),s(d,Gk),s(d,Q),s(Q,xo),s(xo,Ml),s(Ml,qk),s(xo,Kk),s(Q,Uk),s(Q,L),s(L,Vl),s(Vl,Jk),s(L,Yk),s(L,mo),s(mo,Fk),s(L,zk),s(L,go),s(go,Qk),s(L,Zk),s(L,wo),s(wo,Xk),s(L,sh),s(L,_o),s(_o,eh),s(L,ah),s(Q,oh),s(Q,Z),s(Z,Gl),s(Gl,th),s(Z,nh),s(Z,Eo),s(Eo,lh),s(Z,rh),s(Z,bo),s(bo,ih),s(Z,ch),s(Z,Co),s(Co,ph),s(Q,kh),s(Q,ls),s(ls,ql),s(ql,hh),s(ls,dh),s(ls,Oo),s(Oo,vh),s(ls,yh),s(ls,Do),s(Do,uh),s(ls,fh),s(d,xh),s(d,Es),s(Es,mh),s(Es,To),s(To,gh),s(Es,wh),s(Es,Us),s(Us,Kl),s(Kl,_h),s(Us,Eh),s(Es,bh),s(d,Ch),s(d,X),s(X,Oh),s(X,Io),s(Io,Dh),s(X,Th),s(X,So),s(So,Ih),s(X,Sh),s(X,Po),s(Po,Ph),s(X,Ah),s(d,Lh),s(d,Ao),Ao.innerHTML=Y_,s(d,Hh),s(d,bs),s(bs,Nh),s(bs,Lo),s(Lo,Rh),s(bs,Bh),s(bs,Ho),s(Ho,jh),s(bs,Wh),s(d,$h),s(d,No),No.innerHTML=F_,s(d,Mh),s(d,ss),s(ss,Vh),s(ss,Ro),s(Ro,Gh),s(ss,qh),s(ss,Bo),s(Bo,Kh),s(ss,Uh),s(ss,jo),s(jo,Jh),s(ss,Yh),s(d,Fh),s(d,Wo),Wo.innerHTML=z_,s(d,zh),s(d,R),s(R,Qh),s(R,$o),s($o,Zh),s(R,Xh),s(R,Mo),s(Mo,sd),s(R,ed),s(R,Vo),s(Vo,ad),s(R,od),s(R,Go),s(Go,td),s(R,nd),s(d,ld),s(d,qo),qo.innerHTML=Q_,s(d,rd),s(d,Ul),s(Ul,id),C(h,Vr,y),C(h,v,y),s(v,Jl),s(Jl,De),s(De,cd),s(v,pd),s(v,Cs),s(Cs,kd),s(Cs,Ko),s(Ko,hd),s(Cs,dd),s(Cs,Uo),s(Uo,vd),s(Cs,yd),s(v,ud),s(v,Os),s(Os,fd),s(Os,Jo),s(Jo,xd),s(Os,md),s(Os,Yo),s(Yo,gd),s(Os,wd),s(v,_d),s(v,Fo),Fo.innerHTML=Z_,s(v,Ed),s(v,Yl),s(Yl,bd),s(v,Cd),s(v,Fl),s(Fl,Od),s(v,Dd),s(v,Ds),s(Ds,zo),s(zo,Qo),s(Qo,Td),s(zo,Id),s(Ds,Sd),s(Ds,Ts),s(Ts,Pd),s(Ts,Zo),s(Zo,Ad),s(Ts,Ld),s(Ts,Xo),s(Xo,Hd),s(Ts,Nd),s(Ds,Rd),s(Ds,rs),s(rs,st),s(st,Bd),s(rs,jd),s(rs,et),s(et,Wd),s(rs,$d),s(rs,at),s(at,Md),s(rs,Vd),s(v,Gd),s(v,es),s(es,zl),s(zl,qd),s(es,Kd),s(es,Ql),s(Ql,Ud),s(es,Jd),s(es,Zl),s(Zl,Yd),s(es,Fd),s(es,Is),s(Is,ot),s(ot,zd),s(ot,Xl),s(Xl,Qd),s(Is,Zd),s(Is,W),s(W,Xd),s(W,tt),s(tt,sv),s(W,ev),s(W,Te),s(Te,nt),s(nt,av),s(W,ov),s(W,sr),s(sr,tv),s(W,nv),s(W,Ie),s(Ie,lv),s(Ie,lt),s(lt,rv),s(Ie,iv),s(Is,cv),s(Is,$),s($,pv),s($,rt),s(rt,kv),s($,hv),s($,Se),s(Se,it),s(it,dv),s($,vv),s($,er),s(er,yv),s($,uv),s($,Pe),s(Pe,fv),s(Pe,ct),s(ct,xv),s(Pe,mv),s(v,gv),s(v,ar),s(ar,wv),s(v,_v),s(v,Ss),s(Ss,Ev),s(Ss,pt),s(pt,bv),s(Ss,Cv),s(Ss,kt),s(kt,Ov),s(Ss,Dv),s(v,Tv),s(v,ht),ht.innerHTML=X_,s(v,Iv),s(v,Ps),s(Ps,Sv),s(Ps,dt),s(dt,Pv),s(Ps,Av),s(Ps,vt),s(vt,Lv),s(Ps,Hv),s(v,Nv),s(v,yt),yt.innerHTML=s3,s(v,Rv),s(v,As),s(As,Bv),s(As,or),s(or,jv),s(As,Wv),s(As,ut),s(ut,$v),s(As,Mv),C(h,Gr,y),C(h,p,y),s(p,tr),s(tr,Ae),s(Ae,Vv),s(p,Gv),s(p,Le),s(Le,qv),s(Le,nr),s(nr,Kv),s(Le,Uv),s(p,Jv),s(p,Ls),s(Ls,Yv),s(Ls,ft),s(ft,Fv),s(Ls,zv),s(Ls,xt),s(xt,Qv),s(Ls,Zv),s(p,Xv),s(p,Hs),s(Hs,sy),s(Hs,mt),s(mt,ey),s(Hs,ay),s(Hs,gt),s(gt,oy),s(Hs,ty),s(p,ny),s(p,wt),wt.innerHTML=e3,s(p,ly),s(p,He),s(He,ry),s(He,_t),s(_t,iy),s(He,cy),s(p,py),s(p,Et),Et.innerHTML=a3,s(p,ky),s(p,lr),s(lr,hy),s(p,dy),s(p,bt),bt.innerHTML=o3,s(p,vy),s(p,Ne),s(Ne,yy),s(Ne,Ct),s(Ct,uy),s(Ne,fy),s(p,xy),s(p,Re),s(Re,rr),s(rr,my),s(Re,gy),s(Re,Be),s(Be,wy),s(Be,Ot),s(Ot,_y),s(Be,Ey),s(p,by),s(p,Dt),Dt.innerHTML=t3,s(p,Cy),s(p,je),s(je,Oy),s(je,Tt),s(Tt,Dy),s(je,Ty),s(p,Iy),s(p,It),It.innerHTML=n3,s(p,Sy),s(p,Ns),s(Ns,Py),s(Ns,St),s(St,Ay),s(Ns,Ly),s(Ns,Pt),s(Pt,Hy),s(Ns,Ny),s(p,Ry),s(p,We),s(We,By),s(We,At),s(At,jy),s(We,Wy),s(p,$y),s(p,$e),s($e,My),s($e,Lt),s(Lt,Vy),s($e,Gy),s(p,qy),s(p,Ht),Ht.innerHTML=l3,s(p,Ky),s(p,ir),s(ir,Uy),s(p,Jy),s(p,Me),s(Me,O),s(O,Yy),s(O,Nt),s(Nt,Fy),s(O,zy),s(O,Rt),s(Rt,Qy),s(O,Zy),s(O,Bt),s(Bt,Xy),s(O,su),s(O,jt),s(jt,eu),s(O,au),s(O,Wt),s(Wt,ou),s(O,tu),s(O,$t),s($t,nu),s(O,lu),s(O,Mt),s(Mt,ru),s(O,iu),s(O,Ve),s(Ve,Js),s(Js,cu),s(Js,Vt),s(Vt,pu),s(Js,ku),s(Js,Gt),s(Gt,hu),s(Ve,du),s(Ve,qt),s(qt,vu),s(qt,Kt),s(Kt,yu),s(Me,uu),s(Me,M),s(M,fu),s(M,cr),s(cr,xu),s(M,mu),s(M,Ut),s(Ut,gu),s(M,wu),s(M,pr),s(pr,_u),s(M,Eu),s(M,kr),s(kr,Ys),s(Ys,bu),s(Ys,Jt),s(Jt,Cu),s(Ys,Ou),s(Ys,Ge),s(Ge,Du),s(p,Tu),s(p,qe),s(qe,Iu),s(qe,Yt),s(Yt,Su),s(qe,Pu),s(p,Au),s(p,Ke),s(Ke,Lu),s(Ke,Ft),s(Ft,Hu),s(Ke,Nu),s(p,Ru),s(p,zt),zt.innerHTML=r3,s(p,Bu),s(p,A),s(A,ju),s(A,Qt),s(Qt,Wu),s(A,$u),s(A,Zt),s(Zt,Mu),s(A,Vu),s(A,Xt),s(Xt,Gu),s(A,qu),s(A,sn),s(sn,Ku),s(A,Uu),s(A,en),s(en,Ju),s(A,Yu),s(p,Fu),s(p,zu),s(p,Qu),s(p,Rs),s(Rs,Zu),s(Rs,an),s(an,Xu),s(Rs,sf),s(Rs,on),s(on,ef),s(Rs,af),s(p,of),s(p,tn),tn.innerHTML=i3,s(p,tf),s(p,Ue),s(Ue,nf),s(Ue,nn),s(nn,lf),s(Ue,rf),s(p,cf),s(p,ln),ln.innerHTML=c3,s(p,pf),s(p,as),s(as,kf),s(as,rn),s(rn,hf),s(as,df),s(as,cn),s(cn,vf),s(as,yf),s(as,pn),s(pn,uf),s(as,ff),s(p,xf),s(p,mf),s(p,gf),s(p,hr),s(hr,wf),s(p,_f),s(p,kn),kn.innerHTML=p3,s(p,Ef),s(p,dr),s(dr,bf),s(p,Cf),s(p,Je),s(Je,B),s(B,Of),s(B,hn),s(hn,Df),s(B,Tf),s(B,dn),s(dn,If),s(B,Sf),s(B,vn),s(vn,Pf),s(B,Af),s(B,yn),s(yn,Lf),s(B,Hf),s(Je,Nf),s(Je,V),s(V,Rf),s(V,Ye),s(Ye,Bf),s(V,jf),s(V,un),s(un,Wf),s(V,$f),s(V,fn),s(fn,Mf),s(V,Vf),s(V,vr),s(vr,Fs),s(Fs,Gf),s(Fs,xn),s(xn,qf),s(Fs,Kf),s(Fs,Fe),s(Fe,Uf),s(p,Jf),s(p,mn),s(mn,Yf),s(mn,gn),s(gn,Ff),s(p,zf),s(p,wn),wn.innerHTML=k3,s(p,Qf),s(p,ze),s(ze,Zf),s(ze,_n),s(_n,Xf),s(ze,sx),s(p,ex),s(p,yr),s(yr,ax),s(p,ox),s(p,En),En.innerHTML=h3,s(p,tx),s(p,Qe),s(Qe,nx),s(Qe,bn),s(bn,lx),s(Qe,rx),s(p,ix),s(p,Cn),Cn.innerHTML=d3,s(p,cx),s(p,zs),s(zs,On),s(On,px),s(zs,kx),s(zs,Dn),s(Dn,hx),s(zs,dx),s(p,vx),s(p,Tn),Tn.innerHTML=v3,s(p,yx),s(p,Ze),s(Ze,ux),s(Ze,In),s(In,fx),s(Ze,xx),s(p,mx),s(p,Sn),Sn.innerHTML=y3,s(p,gx),s(p,ur),s(ur,wx),s(p,_x),s(p,Pn),Pn.innerHTML=u3,s(p,Ex),s(p,os),s(os,bx),s(os,An),s(An,Cx),s(os,Ox),s(os,Ln),s(Ln,Dx),s(os,Tx),s(os,Hn),s(Hn,Ix),s(os,Sx),s(p,Px),s(p,Nn),Nn.innerHTML=f3,s(p,Ax),s(p,Xe),s(Xe,Lx),s(Xe,Rn),s(Rn,Hx),s(Xe,Nx),s(p,Rx),s(p,fr),s(fr,Bx),s(p,jx),s(p,Bn),Bn.innerHTML=x3,s(p,Wx),s(p,xr),s(xr,$x),C(h,qr,y),C(h,G,y),s(G,mr),s(mr,sa),s(sa,Mx),s(G,Vx),s(G,Bs),s(Bs,Gx),s(Bs,jn),s(jn,qx),s(Bs,Kx),s(Bs,Wn),s(Wn,Ux),s(Bs,Jx),s(G,Yx),s(G,$n),$n.innerHTML=m3,s(G,Fx),s(G,js),s(js,zx),s(js,Mn),s(Mn,Qx),s(js,Zx),s(js,Vn),s(Vn,Xx),s(js,s1),C(h,Kr,y),C(h,is,y),s(is,gr),s(gr,ea),s(ea,e1),s(is,a1),s(is,wr),s(wr,o1),s(is,t1),s(is,_r),s(_r,n1),C(h,Ur,y),C(h,Qs,y),s(Qs,Er),s(Er,aa),s(aa,l1),s(Qs,r1),s(Qs,oa),s(oa,ta),s(ta,i1),s(ta,Gn),s(Gn,c1),s(ta,p1),s(oa,k1),s(oa,na),s(na,h1),s(na,la),s(la,qn),s(qn,d1),s(na,v1),C(h,Jr,y),C(h,cs,y),s(cs,br),s(br,ra),s(ra,y1),s(cs,u1),s(cs,Ws),s(Ws,f1),s(Ws,Kn),s(Kn,x1),s(Ws,m1),s(Ws,Un),s(Un,g1),s(Ws,w1),s(cs,_1),s(cs,ts),s(ts,Cr),s(Cr,Jn),s(Jn,Or),s(Or,E1),s(Jn,b1),s(ts,C1),s(ts,Dr),s(Dr,Yn),s(Yn,Tr),s(Tr,O1),s(Yn,D1),s(ts,T1),s(ts,ia),s(ia,$s),s($s,Ir),s(Ir,I1),s($s,S1),s($s,Sr),s(Sr,P1),s($s,A1),s($s,Fn),s(Fn,L1),s(ia,H1),s(ia,zn),zn.innerHTML=g3,s(ts,N1),s(ts,ca),s(ca,Qn),s(Qn,Pr),s(Pr,R1),s(Qn,B1),s(ca,j1),s(ca,Zn),Zn.innerHTML=w3,C(h,Yr,y),C(h,H,y),s(H,Ar),s(Ar,pa),s(pa,W1),s(H,$1),s(H,ka),s(ka,M1),s(ka,ha),s(ha,V1),s(ka,G1),s(H,q1),s(H,K1),s(H,U1),s(H,da),s(da,J1),s(da,va),s(va,Y1),s(da,F1),s(H,z1),s(H,ya),s(ya,Q1),s(ya,ua),s(ua,Z1),s(ya,X1),Fr=!0},p:rE,i(h){Fr||(W_(_.$$.fragment,h),Fr=!0)},o(h){$_(_.$$.fragment,h),Fr=!1},d(h){M_(_,h),h&&o(K),h&&o(S),h&&o(jr),h&&o(f),h&&o(Wr),h&&o(b),h&&o($r),h&&o(j),h&&o(Mr),h&&o(d),h&&o(Vr),h&&o(v),h&&o(Gr),h&&o(p),h&&o(qr),h&&o(G),h&&o(Kr),h&&o(is),h&&o(Ur),h&&o(Qs),h&&o(Jr),h&&o(cs),h&&o(Yr),h&&o(H)}}}function hE(ma){let _,K;const S=[ma[0],N_];let vs={$$slots:{default:[kE]},$$scope:{ctx:ma}};for(let E=0;E<S.length;E+=1)vs=cm(vs,S[E]);return _=new iE({props:vs}),{c(){R_(_.$$.fragment)},l(E){B_(_.$$.fragment,E)},m(E,U){j_(_,E,U),K=!0},p(E,[U]){const ga=U&1?nE(S,[U&1&&L_(E[0]),U&0&&L_(N_)]):{};U&2&&(ga.$$scope={dirty:U,ctx:E}),_.$set(ga)},i(E){K||(W_(_.$$.fragment,E),K=!0)},o(E){$_(_.$$.fragment,E),K=!1},d(E){M_(_,E)}}}const N_={title:"Contributing to Svelte - Implement {#key}",date:"2020-09-27T08:00:00Z",tags:["Svelte","JavaScript","Open Source"],series:"Contributing to Svelte",description:"I am going to share an anecdote on how I implemented {#key} logic block in Svelte",label:"blog"};function dE(ma,_,K){return lE("blog",{image:pE}),ma.$$set=S=>{K(0,_=cm(cm({},_),H_(S)))},_=H_(_),[_]}class gE extends aE{constructor(_){super();oE(this,_,dE,hE,tE,{})}}export{gE as default,N_ as metadata};
