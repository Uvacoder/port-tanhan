import{S as J3,i as Y3,s as F3,C as lm,w as z3,x as Q3,y as Z3,z as X3,A as S_,q as sE,o as eE,B as aE,r as oE,Y as P_,e as t,t as e,k as i,c as n,a as l,h as a,d as o,m as c,b as r,g as b,H as s,J as tE}from"../../chunks/vendor-da4388d4.js";import{B as nE}from"../../chunks/BlogLayout-14cfab6f.js";import"../../chunks/stores-1fad7c36.js";import"../../chunks/ldjson-b0805387.js";/* empty css                                */var lE="https://lihautan.com/_app/assets/hero-twitter-3bdf63ce.jpg";function rE(xa){let w,W,N,pe,C,T,ma,ga,Li,Hi,wa,Ni,Ri,_a,Bi,ji,Wi,I,Mi,Ea,Vi,$i,ba,Gi,qi,Ca,Ki,Ui,Oa,Ji,Yi,Da,Fi,zi,Ta,Qi,Zi,Ia,Xi,sc,Br,u,El,ke,ec,ac,R,oc,Sa,tc,nc,bl,lc,rc,Cl,ic,cc,he,pc,kc,hc,ds,dc,Pa,vc,yc,Aa,uc,fc,xc,vs,mc,La,gc,wc,Ha,_c,Ec,bc,Na,L_=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'alice'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">    data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'bob'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></div><div class="line">  <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"><span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">#each</span> <span class="token language-javascript">data </span><span class="token keyword">as</span> <span class="token language-javascript">item </span><span class="token language-javascript"><span class="token punctuation">(</span>item<span class="token punctuation">.</span>id<span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">&#123;</span> item<span class="token punctuation">.</span>name <span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></div><div class="line"><span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">/each</span><span class="token punctuation">&#125;</span></span></div></code></pre>`,Cc,Ol,de,Oc,Dc,y,Tc,Ra,Ic,Sc,Ba,Pc,Ac,ja,Lc,Hc,Wa,Nc,Rc,Ma,Bc,jc,Va,Wc,Mc,$a,Vc,$c,Ga,Gc,qc,qa,Kc,Uc,Ka,Jc,Yc,ys,Fc,Ua,zc,Qc,Zc,Ja,Xc,sp,Ya,ep,ap,op,J,tp,Fa,np,lp,za,rp,ip,Qa,cp,pp,kp,Gs,us,hp,Za,dp,vp,yp,Xa,up,fp,xp,Dl,fs,mp,so,gp,wp,xs,_p,eo,Ep,bp,Cp,Op,Y,Dp,ao,Tp,Ip,oo,Sp,Pp,Tl,Ap,Lp,Hp,to,H_='<pre class="prism language-svelte"><code><div class="line"><span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">#each</span> <span class="token language-javascript">key </span><span class="token keyword">as</span> <span class="token language-javascript">k </span><span class="token language-javascript"><span class="token punctuation">(</span>k<span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">/each</span><span class="token punctuation">&#125;</span></span></div></code></pre>',Np,ms,Rp,no,Bp,jp,lo,Wp,Mp,jr,E,Il,ve,Vp,$p,gs,Gp,ye,qp,ro,Kp,Up,Jp,ue,Yp,Fp,zp,io,N_=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> fade <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'svelte/transition'</span></div><div class="line">  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> count <span class="token operator">+=</span><span class="token number">1</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>handleClick<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>You clicked <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span> <span class="token attr-name"><span class="token namespace">transition:</span>fade</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span> times<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></div></code></pre>`,Qp,Sl,Zp,Xp,fe,sk,co,ek,ak,ok,xe,tk,Pl,nk,lk,rk,po,R_=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> fade <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'svelte/transition'</span></div><div class="line">  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> count <span class="token operator">+=</span><span class="token number">1</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>handleClick<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>You clicked</div><div class="line">  <span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">#each</span> <span class="token language-javascript"><span class="token punctuation">[</span>count<span class="token punctuation">]</span> </span><span class="token keyword">as</span> <span class="token language-javascript">count </span><span class="token language-javascript"><span class="token punctuation">(</span>count<span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span></div><div class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span> <span class="token attr-name"><span class="token namespace">transition:</span>fade</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span></div><div class="line">  <span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">/each</span><span class="token punctuation">&#125;</span></span></div><div class="line"> times<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></div></code></pre>`,ik,me,ck,ko,pk,kk,hk,ho,B_=`<pre class="prism language-"><code><span class="line">&lt;p&gt;You clicked</span>
<span class="line">  &#123;#key count&#125;</span>
<span class="line">    &lt;strong transition:fade&gt;&#123;count&#125;&lt;/strong&gt;</span>
<span class="line">  &#123;/key&#125;</span>
<span class="line"> times&lt;/p&gt;</span></code></pre>`,dk,ge,vk,vo,yk,uk,Wr,M,Al,we,fk,xk,_e,mk,yo,gk,wk,_k,F,Ll,Ek,bk,Hl,Ck,Ok,Nl,Dk,Tk,Rl,Ik,Sk,Bl,Pk,Mr,d,jl,Ee,Ak,Lk,be,Hk,Ce,Nk,Rk,Bk,uo,j_=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> state</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">ParserState</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> fragment;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">while</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.index </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">template</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  state </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">state</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> fragment;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,jk,Wl,Wk,Mk,z,fo,Ml,Vk,$k,Gk,L,Vl,qk,Kk,xo,Uk,Jk,mo,Yk,Fk,go,zk,Qk,wo,Zk,Xk,sh,Q,$l,eh,ah,_o,oh,th,Eo,nh,lh,bo,rh,ih,ns,Gl,ch,ph,Co,kh,hh,Oo,dh,vh,yh,ws,uh,Do,fh,xh,qs,ql,mh,gh,wh,_h,Z,Eh,To,bh,Ch,Io,Oh,Dh,So,Th,Ih,Sh,Po,W_='<pre class="prism language-svelte"><code><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#key expression<span class="token punctuation">&#125;</span></span></div><div class="line">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span>key<span class="token punctuation">&#125;</span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- similar to --></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> expression<span class="token punctuation">&#125;</span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></div></code></pre>',Ph,_s,Ah,Ao,Lh,Hh,Lo,Nh,Rh,Bh,Ho,M_=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">parser</span><span style="color: var(--shiki-token-function)">.eat</span><span style="color: var(--shiki-color-text)">(#)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// if &#123;#if foo&#125;, &#123;#each foo&#125; or &#123;#await foo&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> type;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">parser</span><span style="color: var(--shiki-token-function)">.eat</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;if&#39;</span><span style="color: var(--shiki-color-text)">)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    type </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;IfBlock&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">parser</span><span style="color: var(--shiki-token-function)">.eat</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;each&#39;</span><span style="color: var(--shiki-color-text)">)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    type </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;EachBlock&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">parser</span><span style="color: var(--shiki-token-function)">.eat</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;await&#39;</span><span style="color: var(--shiki-color-text)">)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    type </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AwaitBlock&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line inserted"><span style="color: var(--shiki-color-text)">   &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">parser</span><span style="color: var(--shiki-token-function)">.eat</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;key&#39;</span><span style="color: var(--shiki-color-text)">)) &#123;</span></span>
<span class="line inserted"><span style="color: var(--shiki-color-text)">     type </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;KeyBlock&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">parser</span><span style="color: var(--shiki-token-function)">.error</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      code</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;expected-block-type&#96;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line deleted"><span style="color: var(--shiki-color-text)">       message</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;Expected if, each or await&#96;</span></span>
<span class="line inserted"><span style="color: var(--shiki-color-text)">       message: </span><span style="color: var(--shiki-token-string-expression)">&#96;Expected if, each, await or key&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span></code></pre>`,jh,X,Wh,No,Mh,Vh,Ro,$h,Gh,Bo,qh,Kh,Uh,jo,V_=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">parser</span><span style="color: var(--shiki-token-function)">.eat</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;/&#39;</span><span style="color: var(--shiki-color-text)">)) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> block </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">parser</span><span style="color: var(--shiki-token-function)">.current</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> expected;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;IfBlock&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    expected </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;if&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;EachBlock&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    expected </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;each&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AwaitBlock&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    expected </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;await&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line inserted"><span style="color: var(--shiki-color-text)">   &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-color-text)">.type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;KeyBlock&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line inserted"><span style="color: var(--shiki-color-text)">     expected </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;key&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">parser</span><span style="color: var(--shiki-token-function)">.error</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      code</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;unexpected-block-close&#96;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      message</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;Unexpected block closing tag&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span></code></pre>`,Jh,B,Yh,Wo,Fh,zh,Mo,Qh,Zh,Vo,Xh,sd,$o,ed,ad,od,Go,$_=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-constant)">parser</span><span style="color: var(--shiki-token-function)">.require_whitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// read the JS expression</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">expression</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">read_expression</span><span style="color: var(--shiki-color-text)">(parser);</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// create the AST node</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">TemplateNode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">&#125;;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-constant)">parser</span><span style="color: var(--shiki-token-function)">.allow_whitespace</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// other logic blocks specific syntax</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (type </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;EachBlock&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// &#123;#each&#125; block specific syntax for &#123;#each list as item&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,td,Kl,nd,Vr,v,Ul,Oe,ld,rd,Es,id,qo,cd,pd,Ko,kd,hd,dd,bs,vd,Uo,yd,ud,Jo,fd,xd,md,Yo,G_=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> Expression </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./shared/Expression&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> map_children </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./shared/map_children&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> AbstractBlock </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./shared/AbstractBlock&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">KeyBlock</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">AbstractBlock</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// for discriminant property for TypeScript to differentiate types</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  type</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;KeyBlock&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  expression</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Expression</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(component</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> scope</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> info) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">super</span><span style="color: var(--shiki-color-text)">(component</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> scope</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> info);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// create an Expression instance for the expression</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.expression </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Expression</span><span style="color: var(--shiki-color-text)">(component</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> scope</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">info</span><span style="color: var(--shiki-color-text)">.expression);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// loop through children and create respective node instance</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.children </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">map_children</span><span style="color: var(--shiki-color-text)">(component</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> scope</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">info</span><span style="color: var(--shiki-color-text)">.children);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// simple validation: make sure the block is not empty</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.warn_if_empty_block</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,gd,Jl,wd,_d,Yl,Ed,bd,Cs,Fo,zo,Cd,Od,Dd,Os,Td,Qo,Id,Sd,Zo,Pd,Ad,Ld,ls,Xo,Hd,Nd,st,Rd,Bd,et,jd,Wd,Md,ss,Fl,Vd,$d,zl,Gd,qd,Ql,Kd,Ud,Ds,at,Jd,Zl,Yd,Fd,V,zd,ot,Qd,Zd,De,tt,Xd,sv,Xl,ev,av,Te,ov,nt,tv,nv,lv,$,rv,lt,iv,cv,Ie,rt,pv,kv,sr,hv,dv,Se,vv,it,yv,uv,fv,er,xv,mv,Ts,gv,ct,wv,_v,pt,Ev,bv,Cv,kt,q_=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// src/compiler/compile/nodes/shared/map_children.ts</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">get_constructor</span><span style="color: var(--shiki-color-text)">(type) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">switch</span><span style="color: var(--shiki-color-text)"> (type) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;AwaitBlock&#39;</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> AwaitBlock;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Body&#39;</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> Body;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">case</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;KeyBlock&#39;</span><span style="color: var(--shiki-color-text)">:</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> KeyBlock;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ov,Is,Dv,ht,Tv,Iv,dt,Sv,Pv,Av,vt,K_=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// src/compiler/compile/nodes/interfaces.ts</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">type</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">INode</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Action</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Animation</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">|</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">KeyBlock</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`,Lv,Ss,Hv,ar,Nv,Rv,yt,Bv,jv,$r,p,or,Pe,Wv,Mv,Ae,Vv,tr,$v,Gv,qv,Ps,Kv,ut,Uv,Jv,ft,Yv,Fv,zv,As,Qv,xt,Zv,Xv,mt,sy,ey,ay,gt,U_=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_key_block</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// instructions to create / mount / update / destroy inner content of &#123;#key&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123;&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">() &#123;&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">() &#123;&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">() &#123;&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,oy,Le,ty,wt,ny,ly,ry,_t,J_=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">key_block</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_key_block</span><span style="color: var(--shiki-color-text)">(ctx);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// create the elements for the &#123;#key&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">key_block</span><span style="color: var(--shiki-token-function)">.c</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// mount the elements in the &#123;#key&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">key_block</span><span style="color: var(--shiki-token-function)">.m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// update the elements in the &#123;#key&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">key_block</span><span style="color: var(--shiki-token-function)">.p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// destroy the elements in the &#123;#key&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">key_block</span><span style="color: var(--shiki-token-function)">.d</span><span style="color: var(--shiki-color-text)">(detaching);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// intro &amp; outro the elements in the &#123;#key&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">transition_in</span><span style="color: var(--shiki-color-text)">(key_block);</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">transition_out</span><span style="color: var(--shiki-color-text)">(key_block);</span></span></code></pre>`,iy,nr,cy,py,Et,Y_=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// init</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> key_block </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_key_block</span><span style="color: var(--shiki-color-text)">(ctx);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// create</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">key_block</span><span style="color: var(--shiki-token-function)">.c</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// mount</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">key_block</span><span style="color: var(--shiki-token-function)">.m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// update</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">key_block</span><span style="color: var(--shiki-token-function)">.p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">i</span><span style="color: var(--shiki-color-text)">(local) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// intro</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">transition_in</span><span style="color: var(--shiki-color-text)">(key_block);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">o</span><span style="color: var(--shiki-color-text)">(local) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// outro</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">transition_out</span><span style="color: var(--shiki-color-text)">(key_block);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">d</span><span style="color: var(--shiki-color-text)">(detaching) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// destroy</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">key_block</span><span style="color: var(--shiki-token-function)">.d</span><span style="color: var(--shiki-color-text)">(detaching);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ky,He,hy,bt,dy,vy,yy,Ne,lr,uy,fy,Re,xy,Ct,my,gy,wy,Ot,F_=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_fragment</span><span style="color: var(--shiki-color-text)">(ctx) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// we store the previous key expression value</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> previous_key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> value_of_the_key_expression;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// if the any variables within the key has changed, and</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> dynamic_variables_in_key_expression </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// if the value of the key expression has changed</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        previous_key </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> (previous_key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> value_of_the_key_expression)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      ) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// destroy the elements</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// detaching = 1 (true) to remove the elements immediately</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">key_block</span><span style="color: var(--shiki-token-function)">.d</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// create a new key_block</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        key_block </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_key_block</span><span style="color: var(--shiki-color-text)">(ctx);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">key_block</span><span style="color: var(--shiki-token-function)">.c</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// mount the new key_block</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">key_block</span><span style="color: var(--shiki-token-function)">.m</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// if the key has not changed, make sure the content of &#123;#key&#125; is up to date</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">key_block</span><span style="color: var(--shiki-token-function)">.p</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,_y,Be,Ey,Dt,by,Cy,Oy,Tt,z_=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// instead of key_block.d(1);</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">group_outros</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">transition_out</span><span style="color: var(--shiki-color-text)">(key_block</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> noop);</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">check_outros</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// before key_block.m(...)</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">transition_in</span><span style="color: var(--shiki-color-text)">(key_block);</span></span></code></pre>`,Dy,Ls,Ty,It,Iy,Sy,St,Py,Ay,Ly,je,Hy,Pt,Ny,Ry,By,We,jy,At,Wy,My,Vy,Lt,Q_=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">class</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">KeyBlockWrapper</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">extends</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Wrapper</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// the &#96;key_block&#96; variable</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  var</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123; type</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Identifier&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;key_block&#39;</span><span style="color: var(--shiki-color-text)"> &#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">constructor</span><span style="color: var(--shiki-color-text)">(renderer</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Renderer</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> block</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Block</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Wrapper</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> node</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">EachBlock</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> strip_whitespace</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">boolean</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> next_sibling</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Wrapper</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">super</span><span style="color: var(--shiki-color-text)">(renderer</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> block</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> node);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// deoptimisation, set flag indicate the content is not static</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.cannot_use_innerhtml</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.not_static_content</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// get all the dynamic variables within the expression</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// useful for later</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.dependencies </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">expression</span><span style="color: var(--shiki-token-function)">.dynamic_dependencies</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// create a new &#96;create_fragment&#96; function</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.block </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.child</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      comment</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">create_debugging_comment</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-color-text)">.component)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">component</span><span style="color: var(--shiki-token-function)">.get_unique_name</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;create_key_block&#39;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      type</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;key&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">blocks</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(block);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// create render-dom Wrappers for the children</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.fragment </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">FragmentWrapper</span><span style="color: var(--shiki-color-text)">(renderer</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.block</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.children</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> strip_whitespace</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> next_sibling);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">render</span><span style="color: var(--shiki-color-text)">(block</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Block</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent_node</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent_nodes</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Identifier</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// NOTE: here is where we write the render code</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,$y,rr,Gy,qy,Me,O,Ky,Ht,Uy,Jy,Nt,Yy,Fy,Rt,zy,Qy,Bt,Zy,Xy,jt,su,eu,Wt,au,ou,Mt,tu,nu,Ve,Ks,lu,Vt,ru,iu,$t,cu,pu,Gt,ku,qt,hu,du,G,vu,ir,yu,uu,Kt,fu,xu,cr,mu,gu,pr,Us,wu,Ut,_u,Eu,$e,bu,Cu,Ge,Ou,Jt,Du,Tu,Iu,qe,Su,Yt,Pu,Au,Lu,Ft,Z_=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">render</span><span style="color: var(--shiki-color-text)">(block: Block</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent_node: Identifier</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent_nodes: Identifier) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">fragment</span><span style="color: var(--shiki-token-function)">.render</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.block</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    (</span><span style="color: var(--shiki-token-function)">x</span><span style="color: var(--shiki-token-string-expression)">&#96;#nodes&#96;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">as</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">unknown</span><span style="color: var(--shiki-color-text)">) </span><span style="color: var(--shiki-token-keyword)">as</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Identifier</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  );</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Hu,A,Nu,zt,Ru,Bu,Qt,ju,Wu,Zt,Mu,Vu,Xt,$u,Gu,sn,qu,Ku,Uu,Ju,Yu,Hs,Fu,en,zu,Qu,an,Zu,Xu,sf,on,X_=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">&lt;</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &lt;</span><span style="color: var(--shiki-token-string-expression)">span</span><span style="color: var(--shiki-color-text)"> /&gt;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&lt;/</span><span style="color: var(--shiki-token-string-expression)">div</span><span style="color: var(--shiki-color-text)">&gt;</span></span></code></pre>`,ef,Ke,af,tn,of,tf,nf,nn,s3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">spanWrapper</span><span style="color: var(--shiki-token-function)">.render</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  block</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// div&#39;s var</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">x</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">var</span><span style="color: var(--shiki-color-text)">.name</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.childNodes&#96;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// div.childNodes</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,lf,es,rf,ln,cf,pf,rn,kf,hf,cn,df,vf,yf,uf,ff,kr,xf,mf,pn,e3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// let key_block = create_key_block(ctx);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">init</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;let </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> = </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-color-text)">.name</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">(#ctx)&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// key_block.c();</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">create</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.c();&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// key_block.m(...);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">mount</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.m(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">parent_node </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;#target&quot;</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">parent_node </span><span style="color: var(--shiki-token-keyword)">?</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;null&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;#anchor&quot;</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">);&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// key_block.p(...);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">update</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.p(#ctx, #dirty);&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// key_block.d(...);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">destroy</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.d(detaching)&#96;</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,gf,hr,wf,_f,Ue,j,Ef,kn,bf,Cf,hn,Of,Df,dn,Tf,If,vn,Sf,Pf,Af,q,Lf,Je,Hf,Nf,yn,Rf,Bf,un,jf,Wf,dr,Js,Mf,fn,Vf,$f,Ye,Gf,qf,xn,Kf,mn,Uf,Jf,gn,a3='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">is_dirty</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-token-function)">.dirty</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.dependencies);</span></span></code></pre>',Yf,Fe,Ff,wn,zf,Qf,Zf,vr,Xf,sx,_n,o3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// we store the previous key expression value</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> previous_key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> value_of_the_key_expression;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// if the value of the key expression has changed</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">previous_key </span><span style="color: var(--shiki-token-keyword)">!==</span><span style="color: var(--shiki-color-text)"> (previous_key </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> value_of_the_key_expression)</span></span></code></pre>`,ex,ze,ax,En,ox,tx,nx,bn,t3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">previous_key</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.get_unique_name</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;previous_key&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">snippet</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">expression</span><span style="color: var(--shiki-token-function)">.manipulate</span><span style="color: var(--shiki-color-text)">(block);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.add_variable</span><span style="color: var(--shiki-color-text)">(previous_key</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> snippet);</span></span></code></pre>`,lx,Ys,Cn,rx,ix,On,cx,px,kx,Dn,n3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">human</span><span style="color: var(--shiki-color-text)">.age </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> limit</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// into something like</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">].age </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">]</span></span></code></pre>`,hx,Qe,dx,Tn,vx,yx,ux,In,l3='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">has_change</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">x</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">previous_key</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> !== (</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">previous_key</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> = </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">snippet</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">)&#96;</span></span></code></pre>',fx,yr,xx,mx,Sn,r3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">update</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  if (</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">is_dirty</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> &amp;&amp; </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">has_change</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.d(1);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> = </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-color-text)">.name</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">(#ctx);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.c();</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.m(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.get_update_mount_node</span><span style="color: var(--shiki-color-text)">(anchor)</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">anchor</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  &#125; else &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.p(#ctx, #dirty);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,gx,as,wx,Pn,_x,Ex,An,bx,Cx,Ln,Ox,Dx,Tx,Hn,i3='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">anchor</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.get_or_create_anchor</span><span style="color: var(--shiki-color-text)">(block</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent_node</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> parent_nodes);</span></span></code></pre>',Ix,Ze,Sx,Nn,Px,Ax,Lx,ur,Hx,Nx,Rn,c3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">has_transitions</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">!!</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-color-text)">.has_intro_method </span><span style="color: var(--shiki-token-keyword)">||</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-color-text)">.has_outro_method);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">transition_out</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  @group_outros();</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  @transition_out(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, 1, 1, @noop);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  @check_outros();</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">transition_in</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  @transition_in(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`,Rx,fr,Bx,Gr,K,xr,Xe,jx,Wx,Ns,Mx,Bn,Vx,$x,jn,Gx,qx,Kx,Wn,p3=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> KeyBlock </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;../../nodes/KeyBlock&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> Renderer</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; RenderOptions &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;../Renderer&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(node</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">KeyBlock</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> renderer</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">Renderer</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> options</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">RenderOptions</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-token-function)">.render</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.children</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> options);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Ux,Rs,Jx,Mn,Yx,Fx,Vn,zx,Qx,qr,rs,mr,sa,Zx,Xx,gr,s1,e1,wr,a1,Kr,Fs,_r,ea,o1,t1,aa,oa,n1,$n,l1,r1,i1,ta,c1,na,Gn,p1,k1,Ur,is,Er,la,h1,d1,Bs,v1,qn,y1,u1,Kn,f1,x1,m1,os,br,Un,Cr,g1,w1,_1,Or,Jn,Dr,E1,b1,C1,ra,js,Tr,O1,D1,Ir,T1,I1,Yn,S1,P1,Fn,k3='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> reactive1<span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">let</span> reactive2<span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">let</span> key<span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#key key<span class="token punctuation">&#125;</span></span></div><div class="line">   <span class="token language-javascript"><span class="token punctuation">&#123;</span>key<span class="token punctuation">&#125;</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>reactive1<span class="token punctuation">&#125;</span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span>key<span class="token punctuation">&#125;</span></span></div><div class="line"></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>reactive2<span class="token punctuation">&#125;</span></span></div></code></pre>',A1,ia,zn,Sr,L1,H1,N1,Qn,h3='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">   <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></div><div class="line">   <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></div><div class="line">   <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></div><div class="line">     a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></div><div class="line">     b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></div><div class="line">   <span class="token punctuation">&#125;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#key a <span class="token operator">+</span> b<span class="token punctuation">&#125;</span></span></div><div class="line">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">/></span></span></div><div class="line"><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span>key<span class="token punctuation">&#125;</span></span></div></code></pre>',Jr,H,Pr,ca,R1,B1,pa,j1,ka,W1,M1,V1,$1,G1,ha,q1,da,K1,U1,J1,va,Y1,ya,F1,z1;return{c(){w=t("section"),W=t("h2"),N=t("a"),pe=e("Background"),C=i(),T=t("p"),ma=e("Unlike the other contributing to Svelte posts ["),ga=t("a"),Li=e("1"),Hi=e("] ["),wa=t("a"),Ni=e("2"),Ri=e("], which I wrote it while implementing the fix, describing as detailed as possible, today I am going to share the process of how I implemented the "),_a=t("code"),Bi=e("{#key}"),ji=e(" block retrospectively."),Wi=i(),I=t("p"),Mi=e("The implementation of the "),Ea=t("code"),Vi=e("{#key}"),$i=e(" block is much simpler, relative to "),ba=t("code"),Gi=e("{#if}"),qi=e(", "),Ca=t("code"),Ki=e("{#await}"),Ui=e(" or "),Oa=t("code"),Ji=e("{#each}"),Yi=e(". And I believe the process of implementing the "),Da=t("code"),Fi=e("{#key}"),zi=e(" block helps paint the pratical side of "),Ta=t("a"),Qi=e('"The Svelte Compiler Handbook"'),Zi=e(" or my "),Ia=t("a"),Xi=e('"Looking into the Svelte compiler" talk'),sc=e("."),Br=i(),u=t("section"),El=t("h2"),ke=t("a"),ec=e("The motivation"),ac=i(),R=t("p"),oc=e("The idea of "),Sa=t("code"),tc=e("{#key}"),nc=e(" block starts with the feature request 2 years ago "),bl=t("em"),lc=e("(yea, it's that long)"),rc=e(" for "),Cl=t("strong"),ic=e("the ability to key a non-each component"),cc=e(", "),he=t("a"),pc=e("GitHub issue #1469"),kc=e("."),hc=i(),ds=t("p"),dc=e("To "),Pa=t("code"),vc=e("key"),yc=e(" a component, is to force recreation of the component when the "),Aa=t("code"),uc=e("key"),fc=e(" changes."),xc=i(),vs=t("p"),mc=e("And you see this ability of destroying and creating new components when using "),La=t("code"),gc=e("{#each}"),wc=e(" with "),Ha=t("code"),_c=e("key"),Ec=e(":"),bc=i(),Na=t("div"),Cc=i(),Ol=t("p"),de=t("a"),Oc=e("REPL"),Dc=i(),y=t("p"),Tc=e("When we call the function "),Ra=t("code"),Ic=e("update"),Sc=e(", we removed "),Ba=t("code"),Pc=e("alice"),Ac=e(" from the "),ja=t("code"),Lc=e("data"),Hc=e(" and we added "),Wa=t("code"),Nc=e("bob"),Rc=e(". The net effect is still having a list of 1 item. However, instead of reusing the 1 "),Ma=t("code"),Bc=e("<div />"),jc=e(" by updating "),Va=t("code"),Wc=e("{ item.name }"),Mc=e(" to "),$a=t("code"),Vc=e('"bob"'),$c=e(", Svelte removes and destroys the "),Ga=t("code"),Gc=e("<div />"),qc=e(" and create a new "),qa=t("code"),Kc=e("<div />"),Uc=e(" for "),Ka=t("code"),Jc=e("bob"),Yc=e(". This is because of the "),ys=t("a"),Fc=e("key we specified to the "),Ua=t("code"),zc=e("{#each}"),Qc=e(" block"),Zc=e(". Svelte will not reuse the "),Ja=t("code"),Xc=e("<div />"),sp=e(" because it was created with a different "),Ya=t("code"),ep=e("key"),ap=e("."),op=i(),J=t("p"),tp=e("One of the benefits of having a key for "),Fa=t("code"),np=e("{#each}"),lp=e(" item is to be able to add transition to the item correctly. Without a "),za=t("code"),rp=e("key"),ip=e(" to identify which item is added / removed, the transiion on a "),Qa=t("code"),cp=e("{#each}"),pp=e(" list will always applied to the last item, when the list grows or shrinks in length."),kp=i(),Gs=t("p"),us=t("a"),hp=e("Try with and without the "),Za=t("code"),dp=e("key"),vp=e(" in this REPL"),yp=e(" to see the importance of having a "),Xa=t("code"),up=e("key"),fp=e("."),xp=i(),Dl=t("blockquote"),fs=t("p"),mp=e("This is similar to the "),so=t("code"),gp=e("key"),wp=e(" attribute of React, if you are familiar with React. "),xs=t("a"),_p=e("Check this out on how to remount a component with the "),eo=t("code"),Ep=e("key"),bp=e(" attribute in React"),Cp=e("."),Op=i(),Y=t("p"),Dp=e("However, the ability of having to "),ao=t("code"),Tp=e("key"),Ip=e(" an element / component only exist for the "),oo=t("code"),Sp=e("{#each}"),Pp=e(" block. To workaround the constraint, it's common to use the "),Tl=t("strong"),Ap=e('"1-item keyed-each hack"'),Lp=e(":"),Hp=i(),to=t("div"),Np=i(),ms=t("p"),Rp=e("The "),no=t("code"),Bp=e("<div />"),jp=e(" will be recreated if the "),lo=t("code"),Wp=e("key"),Mp=e(" has changed."),jr=i(),E=t("section"),Il=t("h3"),ve=t("a"),Vp=e("Transitions for reactive data change"),$p=i(),gs=t("p"),Gp=e("Another commonly brought up request, to "),ye=t("strong"),qp=e("be able to apply "),ro=t("code"),Kp=e("transition:"),Up=e(" to an element when a reactive data changes"),Jp=e(" ("),ue=t("a"),Yp=e("GitHub issue #5119"),Fp=e("):"),zp=i(),io=t("div"),Qp=i(),Sl=t("p"),Zp=e("This is another facet of the same issue."),Xp=i(),fe=t("p"),sk=e("We need an ability to transition the old element out, and transition a new element in when a data, or a "),co=t("code"),ek=e("key"),ak=e(" changes."),ok=i(),xe=t("p"),tk=e("A workaround, again, is to use the "),Pl=t("strong"),nk=e('"1-item keyed-each hack"'),lk=e(":"),rk=i(),po=t("div"),ik=i(),me=t("p"),ck=e("So the proposal of the feature request was to have a "),ko=t("code"),pk=e("{#key}"),kk=e(" block:"),hk=i(),ho=t("div"),dk=i(),ge=t("p"),vk=e("I've seen this issue months ago, and I passed the issue. I didn't think I know good enough to implement a new logic block. However, the issue recently resurfaced as someone commented on it recently. And this time, I felt I am ready, so here's my journey of implementing the "),vo=t("code"),yk=e("{#key}"),uk=e(" block."),Wr=i(),M=t("section"),Al=t("h2"),we=t("a"),fk=e("The implementation"),xk=i(),_e=t("p"),mk=e("As explained in "),yo=t("a"),gk=e('"The Svelte Compiler Handbook"'),wk=e(", the Svelte compilation process can be broken into steps:"),_k=i(),F=t("ul"),Ll=t("li"),Ek=e("Parsing"),bk=i(),Hl=t("li"),Ck=e("Tracking references and dependencies"),Ok=i(),Nl=t("li"),Dk=e("Creating code blocks & fragments"),Tk=i(),Rl=t("li"),Ik=e("Generate code"),Sk=i(),Bl=t("p"),Pk=e("Of course, that's the steps that we are going to work on as well."),Mr=i(),d=t("section"),jl=t("h3"),Ee=t("a"),Ak=e("Parsing"),Lk=i(),be=t("p"),Hk=e("The actual parsing starts "),Ce=t("a"),Nk=e("here in src/compiler/parse/index.ts"),Rk=e(":"),Bk=i(),uo=t("div"),jk=i(),Wl=t("p"),Wk=e("There are 4 states in the parser:"),Mk=i(),z=t("ul"),fo=t("li"),Ml=t("strong"),Vk=e("fragment"),$k=e(" - in this state, we check the current character and determine which state we should proceed to"),Gk=i(),L=t("li"),Vl=t("strong"),qk=e("tag"),Kk=e(" - we enter this state when we encounter "),xo=t("code"),Uk=e("<"),Jk=e(" character. In this state, we are going to parse HTML tags (eg: "),mo=t("code"),Yk=e("<p>"),Fk=e("), attributes (eg: "),go=t("code"),zk=e("class"),Qk=e(") and directives (eg: "),wo=t("code"),Zk=e("on:"),Xk=e(")."),sh=i(),Q=t("li"),$l=t("strong"),eh=e("mustache"),ah=e(" - we enter this state when we encounter "),_o=t("code"),oh=e("{"),th=e(" character. In this state, we are going to parse expression, "),Eo=t("code"),nh=e("{ value }"),lh=e(" and logic blocks "),bo=t("code"),rh=e("{#if}"),ih=i(),ns=t("li"),Gl=t("strong"),ch=e("text"),ph=e(" - In this state, we are going to parse texts that are neither "),Co=t("code"),kh=e("<"),hh=e(" nor "),Oo=t("code"),dh=e("{"),vh=e(", which includes whitespace, newlines, and texts!"),yh=i(),ws=t("p"),uh=e("To be able to parse the "),Do=t("code"),fh=e("{#key}"),xh=e(" block, we are going to take a look at the "),qs=t("a"),ql=t("strong"),mh=e("mustache"),gh=e(" state function"),wh=e("."),_h=i(),Z=t("p"),Eh=e("The "),To=t("code"),bh=e("{#key}"),Ch=e(" block syntax is similar to "),Io=t("code"),Oh=e("{#if}"),Dh=e(" without "),So=t("code"),Th=e("else"),Ih=e(", we take in an expression in the opening block and that's all:"),Sh=i(),Po=t("div"),Ph=i(),_s=t("p"),Ah=e("So over here, when we encounter a "),Ao=t("code"),Lh=e("{#"),Hh=e(", we add a case to check if we are starting a "),Lo=t("code"),Nh=e("{#key}"),Rh=e(" block:"),Bh=i(),Ho=t("div"),jh=i(),X=t("p"),Wh=e("Similarly, for closing block "),No=t("code"),Mh=e("{/"),Vh=e(", we are going to make sure that "),Ro=t("code"),$h=e("{#key}"),Gh=e(" closes with "),Bo=t("code"),qh=e("{/key}"),Kh=e(":"),Uh=i(),jo=t("div"),Jh=i(),B=t("p"),Yh=e("The next step is to read the JS expression. Since all logic blocks, "),Wo=t("code"),Fh=e("{#if}"),zh=e(", "),Mo=t("code"),Qh=e("{#each}"),Zh=e(" and "),Vo=t("code"),Xh=e("{#await}"),sd=e(" will read the JS expression next, it is no different for "),$o=t("code"),ed=e("{#key}"),ad=e(" and it is already taken care of:"),od=i(),Go=t("div"),td=i(),Kl=t("p"),nd=e("So, let's move on to the next step!"),Vr=i(),v=t("section"),Ul=t("h3"),Oe=t("a"),ld=e("Tracking references and dependencies"),rd=i(),Es=t("p"),id=e("If you noticed in the previous step, the type name we created for "),qo=t("code"),cd=e("{#key}"),pd=e(" block is called "),Ko=t("code"),kd=e("KeyBlock"),hd=e("."),dd=i(),bs=t("p"),vd=e("So, to keep the name consistent, we are going to create a "),Uo=t("code"),yd=e("KeyBlock"),ud=e(" class in "),Jo=t("code"),fd=e("src/compiler/compile/nodes/KeyBlock.ts"),xd=e(":"),md=i(),Yo=t("div"),gd=i(),Jl=t("p"),wd=e("I've added comments annotating the code above, hopefully it's self-explanatory."),_d=i(),Yl=t("p"),Ed=e("A few more points:"),bd=i(),Cs=t("ul"),Fo=t("li"),zo=t("code"),Cd=e("info"),Od=e(" is the AST node we got from the parsing."),Dd=i(),Os=t("li"),Td=e("the "),Qo=t("code"),Id=e("class Expression"),Sd=e(" is constructed with the JavaScript AST of the expression and it is where we traverse the AST and marked the variables within the expression as "),Zo=t("code"),Pd=e("referenced: true"),Ad=e("."),Ld=i(),ls=t("li"),Xo=t("code"),Hd=e("map_children"),Nd=e(" is used to map the "),st=t("code"),Rd=e("children"),Bd=e(" of the "),et=t("code"),jd=e("KeyBlock"),Wd=e(" AST node to the compile node."),Md=i(),ss=t("blockquote"),Fl=t("p"),Vd=e('Pardon for my lack of "appropriate" naming to differentiate the nodes in the Svelte codebase.'),$d=i(),zl=t("p"),Gd=e("Throughout the Svelte compilation process, the node is transformed one to another, which in every step of the transformation, new analysis is performed, and new information are added."),qd=i(),Ql=t("p"),Kd=e("Here, I am going to call:"),Ud=i(),Ds=t("ul"),at=t("li"),Jd=e("the node resulting from the parser: "),Zl=t("strong"),Yd=e("AST node"),Fd=i(),V=t("li"),zd=e("the node created by the "),ot=t("code"),Qd=e("Component"),Zd=e(", which extends from "),De=t("a"),tt=t("code"),Xd=e("compiler/compile/nodes/shared/Node.ts"),sv=e(": "),Xl=t("strong"),ev=e("compile node"),av=i(),Te=t("em"),ov=e("(because they are stored in the "),nt=t("code"),tv=e("compile"),nv=e(" folder)"),lv=i(),$=t("li"),rv=e("the node created by the "),lt=t("code"),iv=e("Renderer"),cv=e(", which extends from "),Ie=t("a"),rt=t("code"),pv=e("compiler/compile/render_dom/wrappers/shared/Wrapper.ts"),kv=e(": "),sr=t("strong"),hv=e("render-dom Wrapper"),dv=i(),Se=t("em"),vv=e("(also because they are stored in the "),it=t("code"),yv=e("render_dom/wrappers"),uv=e(" folder)"),fv=i(),er=t("p"),xv=e("If you managed to keep up so far, you may be sensing where we are heading next."),mv=i(),Ts=t("p"),gv=e("We need to add "),ct=t("code"),wv=e("KeyBlock"),_v=e(" into "),pt=t("code"),Ev=e("map_children"),bv=e(":"),Cv=i(),kt=t("div"),Ov=i(),Is=t("p"),Dv=e("Also, we need to add "),ht=t("code"),Tv=e("KeyBlock"),Iv=e(" as one of the "),dt=t("code"),Sv=e("INode"),Pv=e(" type for TypeScript:"),Av=i(),vt=t("div"),Lv=i(),Ss=t("p"),Hv=e("And now, let's move on to implementing a "),ar=t("strong"),Nv=e("render-dom Wrapper"),Rv=e(" for "),yt=t("code"),Bv=e("KeyBlock"),jv=e("."),$r=i(),p=t("section"),or=t("h3"),Pe=t("a"),Wv=e("Creating code blocks & fragments"),Mv=i(),Ae=t("p"),Vv=e("At this point, we need to decide how the compiled JS should look like, it's time for us to "),tr=t("strong"),$v=e("reverse-compile Svelte in your head"),Gv=e("!"),qv=i(),Ps=t("p"),Kv=e("If you've read my "),ut=t("a"),Uv=e("Compile Svelte in your head (Part 4)"),Jv=e(", you've seen how we create a different "),ft=t("code"),Yv=e("create_fragment"),Fv=e(" function for each of the logic branches, so we can control the content within a logic branch as a whole."),zv=i(),As=t("p"),Qv=e("Similarly, we can create a "),xt=t("code"),Zv=e("create_fragment"),Xv=e(" function for the content of the "),mt=t("code"),sy=e("{#key}"),ey=e(", then we can control when to create / mount / update / destroy the content."),ay=i(),gt=t("div"),oy=i(),Le=t("p"),ty=e("To use the "),wt=t("code"),ny=e("create_key_block"),ly=e(":"),ry=i(),_t=t("div"),iy=i(),nr=t("p"),cy=e("The next thing to do, is to place these statements in the right position:"),py=i(),Et=t("div"),ky=i(),He=t("p"),hy=e("Now, the most important piece of the "),bt=t("code"),dy=e("{#key}"),vy=e(" block, the logic to"),yy=i(),Ne=t("ul"),lr=t("li"),uy=e("check if the expression has changed"),fy=i(),Re=t("li"),xy=e("if so, recreate the elements inside the "),Ct=t("code"),my=e("{#key}"),gy=e(" block"),wy=i(),Ot=t("div"),_y=i(),Be=t("p"),Ey=e("If there is transition in the content of the "),Dt=t("code"),by=e("key_block"),Cy=e(", we need extra code for the transition:"),Oy=i(),Tt=t("div"),Dy=i(),Ls=t("p"),Ty=e("I am going to gloss over the details of how "),It=t("code"),Iy=e("outros"),Sy=e(" / "),St=t("code"),Py=e("intros"),Ay=e(` work, we will cover them in the later parts of "Compile Svelte in your head", so let's assume these code are up for the job.`),Ly=i(),je=t("p"),Hy=e("Now we have done the reverse-compile Svelte in your head, let's reverse the reverse, and write the render code for Svelte "),Pt=t("code"),Ny=e("{#key}"),Ry=e(" block."),By=i(),We=t("p"),jy=e("Here are some setup code for the render-dom Wrapper for "),At=t("code"),Wy=e("{#key}"),My=e(":"),Vy=i(),Lt=t("div"),$y=i(),rr=t("p"),Gy=e("A few more points:"),qy=i(),Me=t("ul"),O=t("li"),Ky=e("the "),Ht=t("code"),Uy=e("block"),Jy=e(" in the "),Nt=t("code"),Yy=e("render"),Fy=e(" method is the current "),Rt=t("code"),zy=e("create_fragment"),Qy=e(" function that the "),Bt=t("code"),Zy=e("{#key}"),Xy=e(" block is in; "),jt=t("code"),su=e("this.block"),eu=e(" is the new "),Wt=t("code"),au=e("create_fragment"),ou=e(" function that we created to put the content of the "),Mt=t("code"),tu=e("{#key}"),nu=e(" block"),Ve=t("ul"),Ks=t("li"),lu=e("we named the new "),Vt=t("code"),ru=e("create_fragment"),iu=e(" function "),$t=t("code"),cu=e('"create_key_block"'),pu=i(),Gt=t("li"),ku=e("to make sure there's no conflicting names, we use "),qt=t("code"),hu=e("renderer.component.get_unique_name()"),du=i(),G=t("li"),vu=e("All "),ir=t("strong"),yu=e("render-dom wrappers"),uu=e(" has a property named "),Kt=t("code"),fu=e("var"),xu=e(", which is the variable name referencing the element / block to be created by the "),cr=t("strong"),mu=e("render-dom wrapper"),gu=e("."),pr=t("ul"),Us=t("li"),wu=e("the "),Ut=t("code"),_u=e("var"),Eu=e(" name will be "),$e=t("a"),bu=e("deconflicted by the Renderer"),Cu=i(),Ge=t("p"),Ou=e("Now, let's implement the "),Jt=t("code"),Du=e("render"),Tu=e(" method."),Iu=i(),qe=t("p"),Su=e("Firstly, render the children into "),Yt=t("code"),Pu=e("this.block"),Au=e(":"),Lu=i(),Ft=t("div"),Hu=i(),A=t("p"),Nu=e("We pass in "),zt=t("code"),Ru=e("null"),Bu=e(" as "),Qt=t("code"),ju=e("parent_node"),Wu=e(" and "),Zt=t("code"),Mu=e("x`#nodes`"),Vu=e(" as "),Xt=t("code"),$u=e("parent_nodes"),Gu=e(" to indicate that the children will be rendered at the root of the "),sn=t("code"),qu=e("this.block"),Ku=e("."),Uu=i(),Ju=t("hr"),Yu=i(),Hs=t("p"),Fu=e("If I am implementing the "),en=t("code"),zu=e("render"),Qu=e(" method of an Element render-dom Wrapper, and currently rendering the "),an=t("code"),Zu=e("<div>"),Xu=e(" in the following code snippet:"),sf=i(),on=t("div"),ef=i(),Ke=t("p"),af=e("then I will render the "),tn=t("code"),of=e("<span />"),tf=e(" with:"),nf=i(),nn=t("div"),lf=i(),es=t("p"),rf=e("so the "),ln=t("code"),cf=e("<span />"),pf=e(" will be inserted into the current "),rn=t("code"),kf=e("<div />"),hf=e(" and hydrate from the "),cn=t("code"),df=e("<div />"),vf=e("'s childNodes."),yf=i(),uf=t("hr"),ff=i(),kr=t("p"),xf=e("Next, I am going to insert code into each of the fragment methods:"),mf=i(),pn=t("div"),gf=i(),hr=t("p"),wf=e("A few more points:"),_f=i(),Ue=t("ul"),j=t("li"),Ef=e("we push the code into respective methods of the "),kn=t("code"),bf=e("block"),Cf=e(", eg: "),hn=t("code"),Of=e("init"),Df=e(", "),dn=t("code"),Tf=e("create"),If=e(", "),vn=t("code"),Sf=e("mount"),Pf=e(", ..."),Af=i(),q=t("li"),Lf=e("we use "),Je=t("a"),Hf=e("tagged templates"),Nf=e(", "),yn=t("code"),Rf=e("b`...`"),Bf=e(" to create a JavaScript AST node. The "),un=t("code"),jf=e("b"),Wf=e(" tag function allow us to pass in JavaScript AST node as placeholder, so that is very convenient."),dr=t("ul"),Js=t("li"),Mf=e("You can check out more about the "),fn=t("code"),Vf=e("b"),$f=e(" tag function from "),Ye=t("a"),Gf=e("code-red"),qf=i(),xn=t("p"),Kf=e("Now, to implement the dirty checking, we use "),mn=t("code"),Uf=e("this.dependencies"),Jf=i(),gn=t("div"),Yf=i(),Fe=t("p"),Ff=e("To determine whether our expression value has changed, we are going to compute the expression and compare it with "),wn=t("code"),zf=e("previous_key"),Qf=e(" and determine whether it has changed."),Zf=i(),vr=t("p"),Xf=e("Here's a recap of the compiled code that we've come up previously:"),sx=i(),_n=t("div"),ex=i(),ze=t("p"),ax=e("We start with declaring the variable, "),En=t("code"),ox=e("previous_key"),tx=e(":"),nx=i(),bn=t("div"),lx=i(),Ys=t("p"),Cn=t("code"),rx=e("expression.manipulate(block)"),ix=e(" will convert the expression to refer to the "),On=t("code"),cx=e("ctx"),px=e(" variable, for example:"),kx=i(),Dn=t("div"),hx=i(),Qe=t("p"),dx=e("Next we are going to compare the new value and assign it to "),Tn=t("code"),vx=e("previous_key"),yx=e(" after that."),ux=i(),In=t("div"),fx=i(),yr=t("p"),xx=e("And to combine all of these, we have:"),mx=i(),Sn=t("div"),gx=i(),as=t("p"),wx=e("We are using the "),Pn=t("code"),_x=e("anchor"),Ex=e(" when we are mounting the new "),An=t("code"),bx=e("key_block"),Cx=e(", you can check out "),Ln=t("a"),Ox=e("Compile Svelte in your head Part 4: the extra text node"),Dx=e(", explaining why we need the anchor node, and here is how the anchor node being computed:"),Tx=i(),Hn=t("div"),Ix=i(),Ze=t("p"),Sx=e("It could be the next sibling, or it could be a new "),Nn=t("code"),Px=e("empty()"),Ax=e(" text node created."),Lx=i(),ur=t("p"),Hx=e("Finally, if the content has transition, we need to add code for the transition as well:"),Nx=i(),Rn=t("div"),Rx=i(),fr=t("p"),Bx=e("Where to place them? Well, I'll leave that as your exercise to figure that out. \u{1F609}"),Gr=i(),K=t("section"),xr=t("h3"),Xe=t("a"),jx=e("Creating code for SSR"),Wx=i(),Ns=t("p"),Mx=e("For SSR, it is much simpler than for the "),Bn=t("code"),Vx=e("dom"),$x=e(". "),jn=t("code"),Gx=e("{#key}"),qx=e(" block has no special meaning in SSR, because, you will only render once in SSR:"),Kx=i(),Wn=t("div"),Ux=i(),Rs=t("p"),Jx=e("\u261D\uFE0F That's all the code we need for SSR. We are rendering the children, passing down the "),Mn=t("code"),Yx=e("options"),Fx=e(", and add no extra code for the "),Vn=t("code"),zx=e("{#key}"),Qx=e(" block."),qr=i(),rs=t("section"),mr=t("h3"),sa=t("a"),Zx=e("Generate code"),Xx=i(),gr=t("p"),s1=e("Well, everything in this step is set up generic enough to handle most use case."),e1=i(),wr=t("p"),a1=e("So, nothing to change here. \u{1F937}\u200D\u2642\uFE0F"),Kr=i(),Fs=t("section"),_r=t("h3"),ea=t("a"),o1=e("A few other implementation consideration"),t1=i(),aa=t("ul"),oa=t("li"),n1=e("What if the expression in the "),$n=t("code"),l1=e("{#key}"),r1=e(" block is not dynamic, do we give warnings? or optimise the output?"),i1=i(),ta=t("li"),c1=e("How will "),na=t("a"),Gn=t("code"),p1=e("<svelte:options immutable={true}>"),k1=e(" affect the code output?"),Ur=i(),is=t("section"),Er=t("h2"),la=t("a"),h1=e("The testing"),d1=i(),Bs=t("p"),v1=e(`You've seen me implementing test cases in the previous "Contributing to Svelte" articles [`),qn=t("a"),y1=e("1"),u1=e("] ["),Kn=t("a"),f1=e("2"),x1=e("], here I am going to skip showing the implementation of the test cases, and probably point out some thoughts I had when coming up with tests:"),m1=i(),os=t("ol"),br=t("li"),Un=t("p"),Cr=t("strong"),g1=e("Happy path:"),w1=e(" changing the key expression should recreate the content"),_1=i(),Or=t("li"),Jn=t("p"),Dr=t("strong"),E1=e("Happy path:"),b1=e(" Transition when recreating the content should work \u2728"),C1=i(),ra=t("li"),js=t("p"),Tr=t("strong"),O1=e("Possible edge case:"),D1=e(" Changing variables other than the key expression should "),Ir=t("strong"),T1=e("not"),I1=e(" recreate the content in "),Yn=t("code"),S1=e("{#key}"),P1=i(),Fn=t("div"),A1=i(),ia=t("li"),zn=t("p"),Sr=t("strong"),L1=e("Possible edge case:"),H1=e(" Changing the variables within the key expression but the result value of the key expression stay the same"),N1=i(),Qn=t("div"),Jr=i(),H=t("section"),Pr=t("h2"),ca=t("a"),R1=e("Closing Notes"),B1=i(),pa=t("p"),j1=e("You can read the "),ka=t("a"),W1=e("Pull Request #5397"),M1=e(" to read the final implementation."),V1=i(),$1=t("hr"),G1=i(),ha=t("p"),q1=e("If you wish to learn more about Svelte, "),da=t("a"),K1=e("follow me on Twitter"),U1=e("."),J1=i(),va=t("p"),Y1=e("If you have anything unclear about this article, find me on "),ya=t("a"),F1=e("Twitter"),z1=e(" too!"),this.h()},l(h){w=n(h,"SECTION",{});var f=l(w);W=n(f,"H2",{});var rm=l(W);N=n(rm,"A",{href:!0,id:!0});var im=l(N);pe=a(im,"Background"),im.forEach(o),rm.forEach(o),C=c(f),T=n(f,"P",{});var zs=l(T);ma=a(zs,"Unlike the other contributing to Svelte posts ["),ga=n(zs,"A",{href:!0});var cm=l(ga);Li=a(cm,"1"),cm.forEach(o),Hi=a(zs,"] ["),wa=n(zs,"A",{href:!0});var pm=l(wa);Ni=a(pm,"2"),pm.forEach(o),Ri=a(zs,"], which I wrote it while implementing the fix, describing as detailed as possible, today I am going to share the process of how I implemented the "),_a=n(zs,"CODE",{class:!0});var km=l(_a);Bi=a(km,"{#key}"),km.forEach(o),ji=a(zs," block retrospectively."),zs.forEach(o),Wi=c(f),I=n(f,"P",{});var P=l(I);Mi=a(P,"The implementation of the "),Ea=n(P,"CODE",{class:!0});var hm=l(Ea);Vi=a(hm,"{#key}"),hm.forEach(o),$i=a(P," block is much simpler, relative to "),ba=n(P,"CODE",{class:!0});var dm=l(ba);Gi=a(dm,"{#if}"),dm.forEach(o),qi=a(P,", "),Ca=n(P,"CODE",{class:!0});var vm=l(Ca);Ki=a(vm,"{#await}"),vm.forEach(o),Ui=a(P," or "),Oa=n(P,"CODE",{class:!0});var ym=l(Oa);Ji=a(ym,"{#each}"),ym.forEach(o),Yi=a(P,". And I believe the process of implementing the "),Da=n(P,"CODE",{class:!0});var um=l(Da);Fi=a(um,"{#key}"),um.forEach(o),zi=a(P," block helps paint the pratical side of "),Ta=n(P,"A",{href:!0});var fm=l(Ta);Qi=a(fm,'"The Svelte Compiler Handbook"'),fm.forEach(o),Zi=a(P," or my "),Ia=n(P,"A",{href:!0});var xm=l(Ia);Xi=a(xm,'"Looking into the Svelte compiler" talk'),xm.forEach(o),sc=a(P,"."),P.forEach(o),f.forEach(o),Br=c(h),u=n(h,"SECTION",{});var _=l(u);El=n(_,"H2",{});var mm=l(El);ke=n(mm,"A",{href:!0,id:!0});var gm=l(ke);ec=a(gm,"The motivation"),gm.forEach(o),mm.forEach(o),ac=c(_),R=n(_,"P",{});var cs=l(R);oc=a(cs,"The idea of "),Sa=n(cs,"CODE",{class:!0});var wm=l(Sa);tc=a(wm,"{#key}"),wm.forEach(o),nc=a(cs," block starts with the feature request 2 years ago "),bl=n(cs,"EM",{});var _m=l(bl);lc=a(_m,"(yea, it's that long)"),_m.forEach(o),rc=a(cs," for "),Cl=n(cs,"STRONG",{});var Em=l(Cl);ic=a(Em,"the ability to key a non-each component"),Em.forEach(o),cc=a(cs,", "),he=n(cs,"A",{href:!0,rel:!0});var bm=l(he);pc=a(bm,"GitHub issue #1469"),bm.forEach(o),kc=a(cs,"."),cs.forEach(o),hc=c(_),ds=n(_,"P",{});var Zn=l(ds);dc=a(Zn,"To "),Pa=n(Zn,"CODE",{class:!0});var Cm=l(Pa);vc=a(Cm,"key"),Cm.forEach(o),yc=a(Zn," a component, is to force recreation of the component when the "),Aa=n(Zn,"CODE",{class:!0});var Om=l(Aa);uc=a(Om,"key"),Om.forEach(o),fc=a(Zn," changes."),Zn.forEach(o),xc=c(_),vs=n(_,"P",{});var Xn=l(vs);mc=a(Xn,"And you see this ability of destroying and creating new components when using "),La=n(Xn,"CODE",{class:!0});var Dm=l(La);gc=a(Dm,"{#each}"),Dm.forEach(o),wc=a(Xn," with "),Ha=n(Xn,"CODE",{class:!0});var Tm=l(Ha);_c=a(Tm,"key"),Tm.forEach(o),Ec=a(Xn,":"),Xn.forEach(o),bc=c(_),Na=n(_,"DIV",{class:!0});var d3=l(Na);d3.forEach(o),Cc=c(_),Ol=n(_,"P",{});var Im=l(Ol);de=n(Im,"A",{href:!0,rel:!0});var Sm=l(de);Oc=a(Sm,"REPL"),Sm.forEach(o),Im.forEach(o),Dc=c(_),y=n(_,"P",{});var m=l(y);Tc=a(m,"When we call the function "),Ra=n(m,"CODE",{class:!0});var Pm=l(Ra);Ic=a(Pm,"update"),Pm.forEach(o),Sc=a(m,", we removed "),Ba=n(m,"CODE",{class:!0});var Am=l(Ba);Pc=a(Am,"alice"),Am.forEach(o),Ac=a(m," from the "),ja=n(m,"CODE",{class:!0});var Lm=l(ja);Lc=a(Lm,"data"),Lm.forEach(o),Hc=a(m," and we added "),Wa=n(m,"CODE",{class:!0});var Hm=l(Wa);Nc=a(Hm,"bob"),Hm.forEach(o),Rc=a(m,". The net effect is still having a list of 1 item. However, instead of reusing the 1 "),Ma=n(m,"CODE",{class:!0});var Nm=l(Ma);Bc=a(Nm,"<div />"),Nm.forEach(o),jc=a(m," by updating "),Va=n(m,"CODE",{class:!0});var Rm=l(Va);Wc=a(Rm,"{ item.name }"),Rm.forEach(o),Mc=a(m," to "),$a=n(m,"CODE",{class:!0});var Bm=l($a);Vc=a(Bm,'"bob"'),Bm.forEach(o),$c=a(m,", Svelte removes and destroys the "),Ga=n(m,"CODE",{class:!0});var jm=l(Ga);Gc=a(jm,"<div />"),jm.forEach(o),qc=a(m," and create a new "),qa=n(m,"CODE",{class:!0});var Wm=l(qa);Kc=a(Wm,"<div />"),Wm.forEach(o),Uc=a(m," for "),Ka=n(m,"CODE",{class:!0});var Mm=l(Ka);Jc=a(Mm,"bob"),Mm.forEach(o),Yc=a(m,". This is because of the "),ys=n(m,"A",{href:!0,rel:!0});var Yr=l(ys);Fc=a(Yr,"key we specified to the "),Ua=n(Yr,"CODE",{class:!0});var Vm=l(Ua);zc=a(Vm,"{#each}"),Vm.forEach(o),Qc=a(Yr," block"),Yr.forEach(o),Zc=a(m,". Svelte will not reuse the "),Ja=n(m,"CODE",{class:!0});var $m=l(Ja);Xc=a($m,"<div />"),$m.forEach(o),sp=a(m," because it was created with a different "),Ya=n(m,"CODE",{class:!0});var Gm=l(Ya);ep=a(Gm,"key"),Gm.forEach(o),ap=a(m,"."),m.forEach(o),op=c(_),J=n(_,"P",{});var Qs=l(J);tp=a(Qs,"One of the benefits of having a key for "),Fa=n(Qs,"CODE",{class:!0});var qm=l(Fa);np=a(qm,"{#each}"),qm.forEach(o),lp=a(Qs," item is to be able to add transition to the item correctly. Without a "),za=n(Qs,"CODE",{class:!0});var Km=l(za);rp=a(Km,"key"),Km.forEach(o),ip=a(Qs," to identify which item is added / removed, the transiion on a "),Qa=n(Qs,"CODE",{class:!0});var Um=l(Qa);cp=a(Um,"{#each}"),Um.forEach(o),pp=a(Qs," list will always applied to the last item, when the list grows or shrinks in length."),Qs.forEach(o),kp=c(_),Gs=n(_,"P",{});var Ar=l(Gs);us=n(Ar,"A",{href:!0,rel:!0});var Fr=l(us);hp=a(Fr,"Try with and without the "),Za=n(Fr,"CODE",{class:!0});var Jm=l(Za);dp=a(Jm,"key"),Jm.forEach(o),vp=a(Fr," in this REPL"),Fr.forEach(o),yp=a(Ar," to see the importance of having a "),Xa=n(Ar,"CODE",{class:!0});var Ym=l(Xa);up=a(Ym,"key"),Ym.forEach(o),fp=a(Ar,"."),Ar.forEach(o),xp=c(_),Dl=n(_,"BLOCKQUOTE",{});var Fm=l(Dl);fs=n(Fm,"P",{});var sl=l(fs);mp=a(sl,"This is similar to the "),so=n(sl,"CODE",{class:!0});var zm=l(so);gp=a(zm,"key"),zm.forEach(o),wp=a(sl," attribute of React, if you are familiar with React. "),xs=n(sl,"A",{href:!0,rel:!0});var zr=l(xs);_p=a(zr,"Check this out on how to remount a component with the "),eo=n(zr,"CODE",{class:!0});var Qm=l(eo);Ep=a(Qm,"key"),Qm.forEach(o),bp=a(zr," attribute in React"),zr.forEach(o),Cp=a(sl,"."),sl.forEach(o),Fm.forEach(o),Op=c(_),Y=n(_,"P",{});var Zs=l(Y);Dp=a(Zs,"However, the ability of having to "),ao=n(Zs,"CODE",{class:!0});var Zm=l(ao);Tp=a(Zm,"key"),Zm.forEach(o),Ip=a(Zs," an element / component only exist for the "),oo=n(Zs,"CODE",{class:!0});var Xm=l(oo);Sp=a(Xm,"{#each}"),Xm.forEach(o),Pp=a(Zs," block. To workaround the constraint, it's common to use the "),Tl=n(Zs,"STRONG",{});var sg=l(Tl);Ap=a(sg,'"1-item keyed-each hack"'),sg.forEach(o),Lp=a(Zs,":"),Zs.forEach(o),Hp=c(_),to=n(_,"DIV",{class:!0});var v3=l(to);v3.forEach(o),Np=c(_),ms=n(_,"P",{});var el=l(ms);Rp=a(el,"The "),no=n(el,"CODE",{class:!0});var eg=l(no);Bp=a(eg,"<div />"),eg.forEach(o),jp=a(el," will be recreated if the "),lo=n(el,"CODE",{class:!0});var ag=l(lo);Wp=a(ag,"key"),ag.forEach(o),Mp=a(el," has changed."),el.forEach(o),_.forEach(o),jr=c(h),E=n(h,"SECTION",{});var D=l(E);Il=n(D,"H3",{});var og=l(Il);ve=n(og,"A",{href:!0,id:!0});var tg=l(ve);Vp=a(tg,"Transitions for reactive data change"),tg.forEach(o),og.forEach(o),$p=c(D),gs=n(D,"P",{});var al=l(gs);Gp=a(al,"Another commonly brought up request, to "),ye=n(al,"STRONG",{});var Qr=l(ye);qp=a(Qr,"be able to apply "),ro=n(Qr,"CODE",{class:!0});var ng=l(ro);Kp=a(ng,"transition:"),ng.forEach(o),Up=a(Qr," to an element when a reactive data changes"),Qr.forEach(o),Jp=a(al," ("),ue=n(al,"A",{href:!0,rel:!0});var lg=l(ue);Yp=a(lg,"GitHub issue #5119"),lg.forEach(o),Fp=a(al,"):"),al.forEach(o),zp=c(D),io=n(D,"DIV",{class:!0});var y3=l(io);y3.forEach(o),Qp=c(D),Sl=n(D,"P",{});var rg=l(Sl);Zp=a(rg,"This is another facet of the same issue."),rg.forEach(o),Xp=c(D),fe=n(D,"P",{});var Zr=l(fe);sk=a(Zr,"We need an ability to transition the old element out, and transition a new element in when a data, or a "),co=n(Zr,"CODE",{class:!0});var ig=l(co);ek=a(ig,"key"),ig.forEach(o),ak=a(Zr," changes."),Zr.forEach(o),ok=c(D),xe=n(D,"P",{});var Xr=l(xe);tk=a(Xr,"A workaround, again, is to use the "),Pl=n(Xr,"STRONG",{});var cg=l(Pl);nk=a(cg,'"1-item keyed-each hack"'),cg.forEach(o),lk=a(Xr,":"),Xr.forEach(o),rk=c(D),po=n(D,"DIV",{class:!0});var u3=l(po);u3.forEach(o),ik=c(D),me=n(D,"P",{});var si=l(me);ck=a(si,"So the proposal of the feature request was to have a "),ko=n(si,"CODE",{class:!0});var pg=l(ko);pk=a(pg,"{#key}"),pg.forEach(o),kk=a(si," block:"),si.forEach(o),hk=c(D),ho=n(D,"DIV",{class:!0});var f3=l(ho);f3.forEach(o),dk=c(D),ge=n(D,"P",{});var ei=l(ge);vk=a(ei,"I've seen this issue months ago, and I passed the issue. I didn't think I know good enough to implement a new logic block. However, the issue recently resurfaced as someone commented on it recently. And this time, I felt I am ready, so here's my journey of implementing the "),vo=n(ei,"CODE",{class:!0});var kg=l(vo);yk=a(kg,"{#key}"),kg.forEach(o),uk=a(ei," block."),ei.forEach(o),D.forEach(o),Wr=c(h),M=n(h,"SECTION",{});var Xs=l(M);Al=n(Xs,"H2",{});var hg=l(Al);we=n(hg,"A",{href:!0,id:!0});var dg=l(we);fk=a(dg,"The implementation"),dg.forEach(o),hg.forEach(o),xk=c(Xs),_e=n(Xs,"P",{});var ai=l(_e);mk=a(ai,"As explained in "),yo=n(ai,"A",{href:!0});var vg=l(yo);gk=a(vg,'"The Svelte Compiler Handbook"'),vg.forEach(o),wk=a(ai,", the Svelte compilation process can be broken into steps:"),ai.forEach(o),_k=c(Xs),F=n(Xs,"UL",{});var se=l(F);Ll=n(se,"LI",{});var yg=l(Ll);Ek=a(yg,"Parsing"),yg.forEach(o),bk=c(se),Hl=n(se,"LI",{});var ug=l(Hl);Ck=a(ug,"Tracking references and dependencies"),ug.forEach(o),Ok=c(se),Nl=n(se,"LI",{});var fg=l(Nl);Dk=a(fg,"Creating code blocks & fragments"),fg.forEach(o),Tk=c(se),Rl=n(se,"LI",{});var xg=l(Rl);Ik=a(xg,"Generate code"),xg.forEach(o),se.forEach(o),Sk=c(Xs),Bl=n(Xs,"P",{});var mg=l(Bl);Pk=a(mg,"Of course, that's the steps that we are going to work on as well."),mg.forEach(o),Xs.forEach(o),Mr=c(h),d=n(h,"SECTION",{});var x=l(d);jl=n(x,"H3",{});var gg=l(jl);Ee=n(gg,"A",{href:!0,id:!0});var wg=l(Ee);Ak=a(wg,"Parsing"),wg.forEach(o),gg.forEach(o),Lk=c(x),be=n(x,"P",{});var oi=l(be);Hk=a(oi,"The actual parsing starts "),Ce=n(oi,"A",{href:!0,rel:!0});var _g=l(Ce);Nk=a(_g,"here in src/compiler/parse/index.ts"),_g.forEach(o),Rk=a(oi,":"),oi.forEach(o),Bk=c(x),uo=n(x,"DIV",{class:!0});var x3=l(uo);x3.forEach(o),jk=c(x),Wl=n(x,"P",{});var Eg=l(Wl);Wk=a(Eg,"There are 4 states in the parser:"),Eg.forEach(o),Mk=c(x),z=n(x,"UL",{});var ee=l(z);fo=n(ee,"LI",{});var Q1=l(fo);Ml=n(Q1,"STRONG",{});var bg=l(Ml);Vk=a(bg,"fragment"),bg.forEach(o),$k=a(Q1," - in this state, we check the current character and determine which state we should proceed to"),Q1.forEach(o),Gk=c(ee),L=n(ee,"LI",{});var ts=l(L);Vl=n(ts,"STRONG",{});var Cg=l(Vl);qk=a(Cg,"tag"),Cg.forEach(o),Kk=a(ts," - we enter this state when we encounter "),xo=n(ts,"CODE",{class:!0});var Og=l(xo);Uk=a(Og,"<"),Og.forEach(o),Jk=a(ts," character. In this state, we are going to parse HTML tags (eg: "),mo=n(ts,"CODE",{class:!0});var Dg=l(mo);Yk=a(Dg,"<p>"),Dg.forEach(o),Fk=a(ts,"), attributes (eg: "),go=n(ts,"CODE",{class:!0});var Tg=l(go);zk=a(Tg,"class"),Tg.forEach(o),Qk=a(ts,") and directives (eg: "),wo=n(ts,"CODE",{class:!0});var Ig=l(wo);Zk=a(Ig,"on:"),Ig.forEach(o),Xk=a(ts,")."),ts.forEach(o),sh=c(ee),Q=n(ee,"LI",{});var ae=l(Q);$l=n(ae,"STRONG",{});var Sg=l($l);eh=a(Sg,"mustache"),Sg.forEach(o),ah=a(ae," - we enter this state when we encounter "),_o=n(ae,"CODE",{class:!0});var Pg=l(_o);oh=a(Pg,"{"),Pg.forEach(o),th=a(ae," character. In this state, we are going to parse expression, "),Eo=n(ae,"CODE",{class:!0});var Ag=l(Eo);nh=a(Ag,"{ value }"),Ag.forEach(o),lh=a(ae," and logic blocks "),bo=n(ae,"CODE",{class:!0});var Lg=l(bo);rh=a(Lg,"{#if}"),Lg.forEach(o),ae.forEach(o),ih=c(ee),ns=n(ee,"LI",{});var ua=l(ns);Gl=n(ua,"STRONG",{});var Hg=l(Gl);ch=a(Hg,"text"),Hg.forEach(o),ph=a(ua," - In this state, we are going to parse texts that are neither "),Co=n(ua,"CODE",{class:!0});var Ng=l(Co);kh=a(Ng,"<"),Ng.forEach(o),hh=a(ua," nor "),Oo=n(ua,"CODE",{class:!0});var Rg=l(Oo);dh=a(Rg,"{"),Rg.forEach(o),vh=a(ua,", which includes whitespace, newlines, and texts!"),ua.forEach(o),ee.forEach(o),yh=c(x),ws=n(x,"P",{});var ol=l(ws);uh=a(ol,"To be able to parse the "),Do=n(ol,"CODE",{class:!0});var Bg=l(Do);fh=a(Bg,"{#key}"),Bg.forEach(o),xh=a(ol," block, we are going to take a look at the "),qs=n(ol,"A",{href:!0,rel:!0});var Z1=l(qs);ql=n(Z1,"STRONG",{});var jg=l(ql);mh=a(jg,"mustache"),jg.forEach(o),gh=a(Z1," state function"),Z1.forEach(o),wh=a(ol,"."),ol.forEach(o),_h=c(x),Z=n(x,"P",{});var oe=l(Z);Eh=a(oe,"The "),To=n(oe,"CODE",{class:!0});var Wg=l(To);bh=a(Wg,"{#key}"),Wg.forEach(o),Ch=a(oe," block syntax is similar to "),Io=n(oe,"CODE",{class:!0});var Mg=l(Io);Oh=a(Mg,"{#if}"),Mg.forEach(o),Dh=a(oe," without "),So=n(oe,"CODE",{class:!0});var Vg=l(So);Th=a(Vg,"else"),Vg.forEach(o),Ih=a(oe,", we take in an expression in the opening block and that's all:"),oe.forEach(o),Sh=c(x),Po=n(x,"DIV",{class:!0});var m3=l(Po);m3.forEach(o),Ph=c(x),_s=n(x,"P",{});var tl=l(_s);Ah=a(tl,"So over here, when we encounter a "),Ao=n(tl,"CODE",{class:!0});var $g=l(Ao);Lh=a($g,"{#"),$g.forEach(o),Hh=a(tl,", we add a case to check if we are starting a "),Lo=n(tl,"CODE",{class:!0});var Gg=l(Lo);Nh=a(Gg,"{#key}"),Gg.forEach(o),Rh=a(tl," block:"),tl.forEach(o),Bh=c(x),Ho=n(x,"DIV",{class:!0});var g3=l(Ho);g3.forEach(o),jh=c(x),X=n(x,"P",{});var te=l(X);Wh=a(te,"Similarly, for closing block "),No=n(te,"CODE",{class:!0});var qg=l(No);Mh=a(qg,"{/"),qg.forEach(o),Vh=a(te,", we are going to make sure that "),Ro=n(te,"CODE",{class:!0});var Kg=l(Ro);$h=a(Kg,"{#key}"),Kg.forEach(o),Gh=a(te," closes with "),Bo=n(te,"CODE",{class:!0});var Ug=l(Bo);qh=a(Ug,"{/key}"),Ug.forEach(o),Kh=a(te,":"),te.forEach(o),Uh=c(x),jo=n(x,"DIV",{class:!0});var w3=l(jo);w3.forEach(o),Jh=c(x),B=n(x,"P",{});var ps=l(B);Yh=a(ps,"The next step is to read the JS expression. Since all logic blocks, "),Wo=n(ps,"CODE",{class:!0});var Jg=l(Wo);Fh=a(Jg,"{#if}"),Jg.forEach(o),zh=a(ps,", "),Mo=n(ps,"CODE",{class:!0});var Yg=l(Mo);Qh=a(Yg,"{#each}"),Yg.forEach(o),Zh=a(ps," and "),Vo=n(ps,"CODE",{class:!0});var Fg=l(Vo);Xh=a(Fg,"{#await}"),Fg.forEach(o),sd=a(ps," will read the JS expression next, it is no different for "),$o=n(ps,"CODE",{class:!0});var zg=l($o);ed=a(zg,"{#key}"),zg.forEach(o),ad=a(ps," and it is already taken care of:"),ps.forEach(o),od=c(x),Go=n(x,"DIV",{class:!0});var _3=l(Go);_3.forEach(o),td=c(x),Kl=n(x,"P",{});var Qg=l(Kl);nd=a(Qg,"So, let's move on to the next step!"),Qg.forEach(o),x.forEach(o),Vr=c(h),v=n(h,"SECTION",{});var g=l(v);Ul=n(g,"H3",{});var Zg=l(Ul);Oe=n(Zg,"A",{href:!0,id:!0});var Xg=l(Oe);ld=a(Xg,"Tracking references and dependencies"),Xg.forEach(o),Zg.forEach(o),rd=c(g),Es=n(g,"P",{});var nl=l(Es);id=a(nl,"If you noticed in the previous step, the type name we created for "),qo=n(nl,"CODE",{class:!0});var s2=l(qo);cd=a(s2,"{#key}"),s2.forEach(o),pd=a(nl," block is called "),Ko=n(nl,"CODE",{class:!0});var e2=l(Ko);kd=a(e2,"KeyBlock"),e2.forEach(o),hd=a(nl,"."),nl.forEach(o),dd=c(g),bs=n(g,"P",{});var ll=l(bs);vd=a(ll,"So, to keep the name consistent, we are going to create a "),Uo=n(ll,"CODE",{class:!0});var a2=l(Uo);yd=a(a2,"KeyBlock"),a2.forEach(o),ud=a(ll," class in "),Jo=n(ll,"CODE",{class:!0});var o2=l(Jo);fd=a(o2,"src/compiler/compile/nodes/KeyBlock.ts"),o2.forEach(o),xd=a(ll,":"),ll.forEach(o),md=c(g),Yo=n(g,"DIV",{class:!0});var E3=l(Yo);E3.forEach(o),gd=c(g),Jl=n(g,"P",{});var t2=l(Jl);wd=a(t2,"I've added comments annotating the code above, hopefully it's self-explanatory."),t2.forEach(o),_d=c(g),Yl=n(g,"P",{});var n2=l(Yl);Ed=a(n2,"A few more points:"),n2.forEach(o),bd=c(g),Cs=n(g,"UL",{});var rl=l(Cs);Fo=n(rl,"LI",{});var X1=l(Fo);zo=n(X1,"CODE",{class:!0});var l2=l(zo);Cd=a(l2,"info"),l2.forEach(o),Od=a(X1," is the AST node we got from the parsing."),X1.forEach(o),Dd=c(rl),Os=n(rl,"LI",{});var il=l(Os);Td=a(il,"the "),Qo=n(il,"CODE",{class:!0});var r2=l(Qo);Id=a(r2,"class Expression"),r2.forEach(o),Sd=a(il," is constructed with the JavaScript AST of the expression and it is where we traverse the AST and marked the variables within the expression as "),Zo=n(il,"CODE",{class:!0});var i2=l(Zo);Pd=a(i2,"referenced: true"),i2.forEach(o),Ad=a(il,"."),il.forEach(o),Ld=c(rl),ls=n(rl,"LI",{});var fa=l(ls);Xo=n(fa,"CODE",{class:!0});var c2=l(Xo);Hd=a(c2,"map_children"),c2.forEach(o),Nd=a(fa," is used to map the "),st=n(fa,"CODE",{class:!0});var p2=l(st);Rd=a(p2,"children"),p2.forEach(o),Bd=a(fa," of the "),et=n(fa,"CODE",{class:!0});var k2=l(et);jd=a(k2,"KeyBlock"),k2.forEach(o),Wd=a(fa," AST node to the compile node."),fa.forEach(o),rl.forEach(o),Md=c(g),ss=n(g,"BLOCKQUOTE",{});var ne=l(ss);Fl=n(ne,"P",{});var h2=l(Fl);Vd=a(h2,'Pardon for my lack of "appropriate" naming to differentiate the nodes in the Svelte codebase.'),h2.forEach(o),$d=c(ne),zl=n(ne,"P",{});var d2=l(zl);Gd=a(d2,"Throughout the Svelte compilation process, the node is transformed one to another, which in every step of the transformation, new analysis is performed, and new information are added."),d2.forEach(o),qd=c(ne),Ql=n(ne,"P",{});var v2=l(Ql);Kd=a(v2,"Here, I am going to call:"),v2.forEach(o),Ud=c(ne),Ds=n(ne,"UL",{});var cl=l(Ds);at=n(cl,"LI",{});var sm=l(at);Jd=a(sm,"the node resulting from the parser: "),Zl=n(sm,"STRONG",{});var y2=l(Zl);Yd=a(y2,"AST node"),y2.forEach(o),sm.forEach(o),Fd=c(cl),V=n(cl,"LI",{});var Ws=l(V);zd=a(Ws,"the node created by the "),ot=n(Ws,"CODE",{class:!0});var u2=l(ot);Qd=a(u2,"Component"),u2.forEach(o),Zd=a(Ws,", which extends from "),De=n(Ws,"A",{href:!0,rel:!0});var f2=l(De);tt=n(f2,"CODE",{class:!0});var x2=l(tt);Xd=a(x2,"compiler/compile/nodes/shared/Node.ts"),x2.forEach(o),f2.forEach(o),sv=a(Ws,": "),Xl=n(Ws,"STRONG",{});var m2=l(Xl);ev=a(m2,"compile node"),m2.forEach(o),av=c(Ws),Te=n(Ws,"EM",{});var ti=l(Te);ov=a(ti,"(because they are stored in the "),nt=n(ti,"CODE",{class:!0});var g2=l(nt);tv=a(g2,"compile"),g2.forEach(o),nv=a(ti," folder)"),ti.forEach(o),Ws.forEach(o),lv=c(cl),$=n(cl,"LI",{});var Ms=l($);rv=a(Ms,"the node created by the "),lt=n(Ms,"CODE",{class:!0});var w2=l(lt);iv=a(w2,"Renderer"),w2.forEach(o),cv=a(Ms,", which extends from "),Ie=n(Ms,"A",{href:!0,rel:!0});var _2=l(Ie);rt=n(_2,"CODE",{class:!0});var E2=l(rt);pv=a(E2,"compiler/compile/render_dom/wrappers/shared/Wrapper.ts"),E2.forEach(o),_2.forEach(o),kv=a(Ms,": "),sr=n(Ms,"STRONG",{});var b2=l(sr);hv=a(b2,"render-dom Wrapper"),b2.forEach(o),dv=c(Ms),Se=n(Ms,"EM",{});var ni=l(Se);vv=a(ni,"(also because they are stored in the "),it=n(ni,"CODE",{class:!0});var C2=l(it);yv=a(C2,"render_dom/wrappers"),C2.forEach(o),uv=a(ni," folder)"),ni.forEach(o),Ms.forEach(o),cl.forEach(o),ne.forEach(o),fv=c(g),er=n(g,"P",{});var O2=l(er);xv=a(O2,"If you managed to keep up so far, you may be sensing where we are heading next."),O2.forEach(o),mv=c(g),Ts=n(g,"P",{});var pl=l(Ts);gv=a(pl,"We need to add "),ct=n(pl,"CODE",{class:!0});var D2=l(ct);wv=a(D2,"KeyBlock"),D2.forEach(o),_v=a(pl," into "),pt=n(pl,"CODE",{class:!0});var T2=l(pt);Ev=a(T2,"map_children"),T2.forEach(o),bv=a(pl,":"),pl.forEach(o),Cv=c(g),kt=n(g,"DIV",{class:!0});var b3=l(kt);b3.forEach(o),Ov=c(g),Is=n(g,"P",{});var kl=l(Is);Dv=a(kl,"Also, we need to add "),ht=n(kl,"CODE",{class:!0});var I2=l(ht);Tv=a(I2,"KeyBlock"),I2.forEach(o),Iv=a(kl," as one of the "),dt=n(kl,"CODE",{class:!0});var S2=l(dt);Sv=a(S2,"INode"),S2.forEach(o),Pv=a(kl," type for TypeScript:"),kl.forEach(o),Av=c(g),vt=n(g,"DIV",{class:!0});var C3=l(vt);C3.forEach(o),Lv=c(g),Ss=n(g,"P",{});var hl=l(Ss);Hv=a(hl,"And now, let's move on to implementing a "),ar=n(hl,"STRONG",{});var P2=l(ar);Nv=a(P2,"render-dom Wrapper"),P2.forEach(o),Rv=a(hl," for "),yt=n(hl,"CODE",{class:!0});var A2=l(yt);Bv=a(A2,"KeyBlock"),A2.forEach(o),jv=a(hl,"."),hl.forEach(o),g.forEach(o),$r=c(h),p=n(h,"SECTION",{});var k=l(p);or=n(k,"H3",{});var L2=l(or);Pe=n(L2,"A",{href:!0,id:!0});var H2=l(Pe);Wv=a(H2,"Creating code blocks & fragments"),H2.forEach(o),L2.forEach(o),Mv=c(k),Ae=n(k,"P",{});var li=l(Ae);Vv=a(li,"At this point, we need to decide how the compiled JS should look like, it's time for us to "),tr=n(li,"STRONG",{});var N2=l(tr);$v=a(N2,"reverse-compile Svelte in your head"),N2.forEach(o),Gv=a(li,"!"),li.forEach(o),qv=c(k),Ps=n(k,"P",{});var dl=l(Ps);Kv=a(dl,"If you've read my "),ut=n(dl,"A",{href:!0});var R2=l(ut);Uv=a(R2,"Compile Svelte in your head (Part 4)"),R2.forEach(o),Jv=a(dl,", you've seen how we create a different "),ft=n(dl,"CODE",{class:!0});var B2=l(ft);Yv=a(B2,"create_fragment"),B2.forEach(o),Fv=a(dl," function for each of the logic branches, so we can control the content within a logic branch as a whole."),dl.forEach(o),zv=c(k),As=n(k,"P",{});var vl=l(As);Qv=a(vl,"Similarly, we can create a "),xt=n(vl,"CODE",{class:!0});var j2=l(xt);Zv=a(j2,"create_fragment"),j2.forEach(o),Xv=a(vl," function for the content of the "),mt=n(vl,"CODE",{class:!0});var W2=l(mt);sy=a(W2,"{#key}"),W2.forEach(o),ey=a(vl,", then we can control when to create / mount / update / destroy the content."),vl.forEach(o),ay=c(k),gt=n(k,"DIV",{class:!0});var O3=l(gt);O3.forEach(o),oy=c(k),Le=n(k,"P",{});var ri=l(Le);ty=a(ri,"To use the "),wt=n(ri,"CODE",{class:!0});var M2=l(wt);ny=a(M2,"create_key_block"),M2.forEach(o),ly=a(ri,":"),ri.forEach(o),ry=c(k),_t=n(k,"DIV",{class:!0});var D3=l(_t);D3.forEach(o),iy=c(k),nr=n(k,"P",{});var V2=l(nr);cy=a(V2,"The next thing to do, is to place these statements in the right position:"),V2.forEach(o),py=c(k),Et=n(k,"DIV",{class:!0});var T3=l(Et);T3.forEach(o),ky=c(k),He=n(k,"P",{});var ii=l(He);hy=a(ii,"Now, the most important piece of the "),bt=n(ii,"CODE",{class:!0});var $2=l(bt);dy=a($2,"{#key}"),$2.forEach(o),vy=a(ii," block, the logic to"),ii.forEach(o),yy=c(k),Ne=n(k,"UL",{});var ci=l(Ne);lr=n(ci,"LI",{});var G2=l(lr);uy=a(G2,"check if the expression has changed"),G2.forEach(o),fy=c(ci),Re=n(ci,"LI",{});var pi=l(Re);xy=a(pi,"if so, recreate the elements inside the "),Ct=n(pi,"CODE",{class:!0});var q2=l(Ct);my=a(q2,"{#key}"),q2.forEach(o),gy=a(pi," block"),pi.forEach(o),ci.forEach(o),wy=c(k),Ot=n(k,"DIV",{class:!0});var I3=l(Ot);I3.forEach(o),_y=c(k),Be=n(k,"P",{});var ki=l(Be);Ey=a(ki,"If there is transition in the content of the "),Dt=n(ki,"CODE",{class:!0});var K2=l(Dt);by=a(K2,"key_block"),K2.forEach(o),Cy=a(ki,", we need extra code for the transition:"),ki.forEach(o),Oy=c(k),Tt=n(k,"DIV",{class:!0});var S3=l(Tt);S3.forEach(o),Dy=c(k),Ls=n(k,"P",{});var yl=l(Ls);Ty=a(yl,"I am going to gloss over the details of how "),It=n(yl,"CODE",{class:!0});var U2=l(It);Iy=a(U2,"outros"),U2.forEach(o),Sy=a(yl," / "),St=n(yl,"CODE",{class:!0});var J2=l(St);Py=a(J2,"intros"),J2.forEach(o),Ay=a(yl,` work, we will cover them in the later parts of "Compile Svelte in your head", so let's assume these code are up for the job.`),yl.forEach(o),Ly=c(k),je=n(k,"P",{});var hi=l(je);Hy=a(hi,"Now we have done the reverse-compile Svelte in your head, let's reverse the reverse, and write the render code for Svelte "),Pt=n(hi,"CODE",{class:!0});var Y2=l(Pt);Ny=a(Y2,"{#key}"),Y2.forEach(o),Ry=a(hi," block."),hi.forEach(o),By=c(k),We=n(k,"P",{});var di=l(We);jy=a(di,"Here are some setup code for the render-dom Wrapper for "),At=n(di,"CODE",{class:!0});var F2=l(At);Wy=a(F2,"{#key}"),F2.forEach(o),My=a(di,":"),di.forEach(o),Vy=c(k),Lt=n(k,"DIV",{class:!0});var P3=l(Lt);P3.forEach(o),$y=c(k),rr=n(k,"P",{});var z2=l(rr);Gy=a(z2,"A few more points:"),z2.forEach(o),qy=c(k),Me=n(k,"UL",{});var vi=l(Me);O=n(vi,"LI",{});var S=l(O);Ky=a(S,"the "),Ht=n(S,"CODE",{class:!0});var Q2=l(Ht);Uy=a(Q2,"block"),Q2.forEach(o),Jy=a(S," in the "),Nt=n(S,"CODE",{class:!0});var Z2=l(Nt);Yy=a(Z2,"render"),Z2.forEach(o),Fy=a(S," method is the current "),Rt=n(S,"CODE",{class:!0});var X2=l(Rt);zy=a(X2,"create_fragment"),X2.forEach(o),Qy=a(S," function that the "),Bt=n(S,"CODE",{class:!0});var sw=l(Bt);Zy=a(sw,"{#key}"),sw.forEach(o),Xy=a(S," block is in; "),jt=n(S,"CODE",{class:!0});var ew=l(jt);su=a(ew,"this.block"),ew.forEach(o),eu=a(S," is the new "),Wt=n(S,"CODE",{class:!0});var aw=l(Wt);au=a(aw,"create_fragment"),aw.forEach(o),ou=a(S," function that we created to put the content of the "),Mt=n(S,"CODE",{class:!0});var ow=l(Mt);tu=a(ow,"{#key}"),ow.forEach(o),nu=a(S," block"),Ve=n(S,"UL",{});var yi=l(Ve);Ks=n(yi,"LI",{});var Lr=l(Ks);lu=a(Lr,"we named the new "),Vt=n(Lr,"CODE",{class:!0});var tw=l(Vt);ru=a(tw,"create_fragment"),tw.forEach(o),iu=a(Lr," function "),$t=n(Lr,"CODE",{class:!0});var nw=l($t);cu=a(nw,'"create_key_block"'),nw.forEach(o),Lr.forEach(o),pu=c(yi),Gt=n(yi,"LI",{});var em=l(Gt);ku=a(em,"to make sure there's no conflicting names, we use "),qt=n(em,"CODE",{class:!0});var lw=l(qt);hu=a(lw,"renderer.component.get_unique_name()"),lw.forEach(o),em.forEach(o),yi.forEach(o),S.forEach(o),du=c(vi),G=n(vi,"LI",{});var Vs=l(G);vu=a(Vs,"All "),ir=n(Vs,"STRONG",{});var rw=l(ir);yu=a(rw,"render-dom wrappers"),rw.forEach(o),uu=a(Vs," has a property named "),Kt=n(Vs,"CODE",{class:!0});var iw=l(Kt);fu=a(iw,"var"),iw.forEach(o),xu=a(Vs,", which is the variable name referencing the element / block to be created by the "),cr=n(Vs,"STRONG",{});var cw=l(cr);mu=a(cw,"render-dom wrapper"),cw.forEach(o),gu=a(Vs,"."),pr=n(Vs,"UL",{});var pw=l(pr);Us=n(pw,"LI",{});var Hr=l(Us);wu=a(Hr,"the "),Ut=n(Hr,"CODE",{class:!0});var kw=l(Ut);_u=a(kw,"var"),kw.forEach(o),Eu=a(Hr," name will be "),$e=n(Hr,"A",{href:!0,rel:!0});var hw=l($e);bu=a(hw,"deconflicted by the Renderer"),hw.forEach(o),Hr.forEach(o),pw.forEach(o),Vs.forEach(o),vi.forEach(o),Cu=c(k),Ge=n(k,"P",{});var ui=l(Ge);Ou=a(ui,"Now, let's implement the "),Jt=n(ui,"CODE",{class:!0});var dw=l(Jt);Du=a(dw,"render"),dw.forEach(o),Tu=a(ui," method."),ui.forEach(o),Iu=c(k),qe=n(k,"P",{});var fi=l(qe);Su=a(fi,"Firstly, render the children into "),Yt=n(fi,"CODE",{class:!0});var vw=l(Yt);Pu=a(vw,"this.block"),vw.forEach(o),Au=a(fi,":"),fi.forEach(o),Lu=c(k),Ft=n(k,"DIV",{class:!0});var A3=l(Ft);A3.forEach(o),Hu=c(k),A=n(k,"P",{});var U=l(A);Nu=a(U,"We pass in "),zt=n(U,"CODE",{class:!0});var yw=l(zt);Ru=a(yw,"null"),yw.forEach(o),Bu=a(U," as "),Qt=n(U,"CODE",{class:!0});var uw=l(Qt);ju=a(uw,"parent_node"),uw.forEach(o),Wu=a(U," and "),Zt=n(U,"CODE",{class:!0});var fw=l(Zt);Mu=a(fw,"x`#nodes`"),fw.forEach(o),Vu=a(U," as "),Xt=n(U,"CODE",{class:!0});var xw=l(Xt);$u=a(xw,"parent_nodes"),xw.forEach(o),Gu=a(U," to indicate that the children will be rendered at the root of the "),sn=n(U,"CODE",{class:!0});var mw=l(sn);qu=a(mw,"this.block"),mw.forEach(o),Ku=a(U,"."),U.forEach(o),Uu=c(k),Ju=n(k,"HR",{}),Yu=c(k),Hs=n(k,"P",{});var ul=l(Hs);Fu=a(ul,"If I am implementing the "),en=n(ul,"CODE",{class:!0});var gw=l(en);zu=a(gw,"render"),gw.forEach(o),Qu=a(ul," method of an Element render-dom Wrapper, and currently rendering the "),an=n(ul,"CODE",{class:!0});var ww=l(an);Zu=a(ww,"<div>"),ww.forEach(o),Xu=a(ul," in the following code snippet:"),ul.forEach(o),sf=c(k),on=n(k,"DIV",{class:!0});var L3=l(on);L3.forEach(o),ef=c(k),Ke=n(k,"P",{});var xi=l(Ke);af=a(xi,"then I will render the "),tn=n(xi,"CODE",{class:!0});var _w=l(tn);of=a(_w,"<span />"),_w.forEach(o),tf=a(xi," with:"),xi.forEach(o),nf=c(k),nn=n(k,"DIV",{class:!0});var H3=l(nn);H3.forEach(o),lf=c(k),es=n(k,"P",{});var le=l(es);rf=a(le,"so the "),ln=n(le,"CODE",{class:!0});var Ew=l(ln);cf=a(Ew,"<span />"),Ew.forEach(o),pf=a(le," will be inserted into the current "),rn=n(le,"CODE",{class:!0});var bw=l(rn);kf=a(bw,"<div />"),bw.forEach(o),hf=a(le," and hydrate from the "),cn=n(le,"CODE",{class:!0});var Cw=l(cn);df=a(Cw,"<div />"),Cw.forEach(o),vf=a(le,"'s childNodes."),le.forEach(o),yf=c(k),uf=n(k,"HR",{}),ff=c(k),kr=n(k,"P",{});var Ow=l(kr);xf=a(Ow,"Next, I am going to insert code into each of the fragment methods:"),Ow.forEach(o),mf=c(k),pn=n(k,"DIV",{class:!0});var N3=l(pn);N3.forEach(o),gf=c(k),hr=n(k,"P",{});var Dw=l(hr);wf=a(Dw,"A few more points:"),Dw.forEach(o),_f=c(k),Ue=n(k,"UL",{});var mi=l(Ue);j=n(mi,"LI",{});var ks=l(j);Ef=a(ks,"we push the code into respective methods of the "),kn=n(ks,"CODE",{class:!0});var Tw=l(kn);bf=a(Tw,"block"),Tw.forEach(o),Cf=a(ks,", eg: "),hn=n(ks,"CODE",{class:!0});var Iw=l(hn);Of=a(Iw,"init"),Iw.forEach(o),Df=a(ks,", "),dn=n(ks,"CODE",{class:!0});var Sw=l(dn);Tf=a(Sw,"create"),Sw.forEach(o),If=a(ks,", "),vn=n(ks,"CODE",{class:!0});var Pw=l(vn);Sf=a(Pw,"mount"),Pw.forEach(o),Pf=a(ks,", ..."),ks.forEach(o),Af=c(mi),q=n(mi,"LI",{});var $s=l(q);Lf=a($s,"we use "),Je=n($s,"A",{href:!0,rel:!0});var Aw=l(Je);Hf=a(Aw,"tagged templates"),Aw.forEach(o),Nf=a($s,", "),yn=n($s,"CODE",{class:!0});var Lw=l(yn);Rf=a(Lw,"b`...`"),Lw.forEach(o),Bf=a($s," to create a JavaScript AST node. The "),un=n($s,"CODE",{class:!0});var Hw=l(un);jf=a(Hw,"b"),Hw.forEach(o),Wf=a($s," tag function allow us to pass in JavaScript AST node as placeholder, so that is very convenient."),dr=n($s,"UL",{});var Nw=l(dr);Js=n(Nw,"LI",{});var Nr=l(Js);Mf=a(Nr,"You can check out more about the "),fn=n(Nr,"CODE",{class:!0});var Rw=l(fn);Vf=a(Rw,"b"),Rw.forEach(o),$f=a(Nr," tag function from "),Ye=n(Nr,"A",{href:!0,rel:!0});var Bw=l(Ye);Gf=a(Bw,"code-red"),Bw.forEach(o),Nr.forEach(o),Nw.forEach(o),$s.forEach(o),mi.forEach(o),qf=c(k),xn=n(k,"P",{});var am=l(xn);Kf=a(am,"Now, to implement the dirty checking, we use "),mn=n(am,"CODE",{class:!0});var jw=l(mn);Uf=a(jw,"this.dependencies"),jw.forEach(o),am.forEach(o),Jf=c(k),gn=n(k,"DIV",{class:!0});var R3=l(gn);R3.forEach(o),Yf=c(k),Fe=n(k,"P",{});var gi=l(Fe);Ff=a(gi,"To determine whether our expression value has changed, we are going to compute the expression and compare it with "),wn=n(gi,"CODE",{class:!0});var Ww=l(wn);zf=a(Ww,"previous_key"),Ww.forEach(o),Qf=a(gi," and determine whether it has changed."),gi.forEach(o),Zf=c(k),vr=n(k,"P",{});var Mw=l(vr);Xf=a(Mw,"Here's a recap of the compiled code that we've come up previously:"),Mw.forEach(o),sx=c(k),_n=n(k,"DIV",{class:!0});var B3=l(_n);B3.forEach(o),ex=c(k),ze=n(k,"P",{});var wi=l(ze);ax=a(wi,"We start with declaring the variable, "),En=n(wi,"CODE",{class:!0});var Vw=l(En);ox=a(Vw,"previous_key"),Vw.forEach(o),tx=a(wi,":"),wi.forEach(o),nx=c(k),bn=n(k,"DIV",{class:!0});var j3=l(bn);j3.forEach(o),lx=c(k),Ys=n(k,"P",{});var Rr=l(Ys);Cn=n(Rr,"CODE",{class:!0});var $w=l(Cn);rx=a($w,"expression.manipulate(block)"),$w.forEach(o),ix=a(Rr," will convert the expression to refer to the "),On=n(Rr,"CODE",{class:!0});var Gw=l(On);cx=a(Gw,"ctx"),Gw.forEach(o),px=a(Rr," variable, for example:"),Rr.forEach(o),kx=c(k),Dn=n(k,"DIV",{class:!0});var W3=l(Dn);W3.forEach(o),hx=c(k),Qe=n(k,"P",{});var _i=l(Qe);dx=a(_i,"Next we are going to compare the new value and assign it to "),Tn=n(_i,"CODE",{class:!0});var qw=l(Tn);vx=a(qw,"previous_key"),qw.forEach(o),yx=a(_i," after that."),_i.forEach(o),ux=c(k),In=n(k,"DIV",{class:!0});var M3=l(In);M3.forEach(o),fx=c(k),yr=n(k,"P",{});var Kw=l(yr);xx=a(Kw,"And to combine all of these, we have:"),Kw.forEach(o),mx=c(k),Sn=n(k,"DIV",{class:!0});var V3=l(Sn);V3.forEach(o),gx=c(k),as=n(k,"P",{});var re=l(as);wx=a(re,"We are using the "),Pn=n(re,"CODE",{class:!0});var Uw=l(Pn);_x=a(Uw,"anchor"),Uw.forEach(o),Ex=a(re," when we are mounting the new "),An=n(re,"CODE",{class:!0});var Jw=l(An);bx=a(Jw,"key_block"),Jw.forEach(o),Cx=a(re,", you can check out "),Ln=n(re,"A",{href:!0});var Yw=l(Ln);Ox=a(Yw,"Compile Svelte in your head Part 4: the extra text node"),Yw.forEach(o),Dx=a(re,", explaining why we need the anchor node, and here is how the anchor node being computed:"),re.forEach(o),Tx=c(k),Hn=n(k,"DIV",{class:!0});var $3=l(Hn);$3.forEach(o),Ix=c(k),Ze=n(k,"P",{});var Ei=l(Ze);Sx=a(Ei,"It could be the next sibling, or it could be a new "),Nn=n(Ei,"CODE",{class:!0});var Fw=l(Nn);Px=a(Fw,"empty()"),Fw.forEach(o),Ax=a(Ei," text node created."),Ei.forEach(o),Lx=c(k),ur=n(k,"P",{});var zw=l(ur);Hx=a(zw,"Finally, if the content has transition, we need to add code for the transition as well:"),zw.forEach(o),Nx=c(k),Rn=n(k,"DIV",{class:!0});var G3=l(Rn);G3.forEach(o),Rx=c(k),fr=n(k,"P",{});var Qw=l(fr);Bx=a(Qw,"Where to place them? Well, I'll leave that as your exercise to figure that out. \u{1F609}"),Qw.forEach(o),k.forEach(o),Gr=c(h),K=n(h,"SECTION",{});var ie=l(K);xr=n(ie,"H3",{});var Zw=l(xr);Xe=n(Zw,"A",{href:!0,id:!0});var Xw=l(Xe);jx=a(Xw,"Creating code for SSR"),Xw.forEach(o),Zw.forEach(o),Wx=c(ie),Ns=n(ie,"P",{});var fl=l(Ns);Mx=a(fl,"For SSR, it is much simpler than for the "),Bn=n(fl,"CODE",{class:!0});var s_=l(Bn);Vx=a(s_,"dom"),s_.forEach(o),$x=a(fl,". "),jn=n(fl,"CODE",{class:!0});var e_=l(jn);Gx=a(e_,"{#key}"),e_.forEach(o),qx=a(fl," block has no special meaning in SSR, because, you will only render once in SSR:"),fl.forEach(o),Kx=c(ie),Wn=n(ie,"DIV",{class:!0});var q3=l(Wn);q3.forEach(o),Ux=c(ie),Rs=n(ie,"P",{});var xl=l(Rs);Jx=a(xl,"\u261D\uFE0F That's all the code we need for SSR. We are rendering the children, passing down the "),Mn=n(xl,"CODE",{class:!0});var a_=l(Mn);Yx=a(a_,"options"),a_.forEach(o),Fx=a(xl,", and add no extra code for the "),Vn=n(xl,"CODE",{class:!0});var o_=l(Vn);zx=a(o_,"{#key}"),o_.forEach(o),Qx=a(xl," block."),xl.forEach(o),ie.forEach(o),qr=c(h),rs=n(h,"SECTION",{});var ml=l(rs);mr=n(ml,"H3",{});var t_=l(mr);sa=n(t_,"A",{href:!0,id:!0});var n_=l(sa);Zx=a(n_,"Generate code"),n_.forEach(o),t_.forEach(o),Xx=c(ml),gr=n(ml,"P",{});var l_=l(gr);s1=a(l_,"Well, everything in this step is set up generic enough to handle most use case."),l_.forEach(o),e1=c(ml),wr=n(ml,"P",{});var r_=l(wr);a1=a(r_,"So, nothing to change here. \u{1F937}\u200D\u2642\uFE0F"),r_.forEach(o),ml.forEach(o),Kr=c(h),Fs=n(h,"SECTION",{});var bi=l(Fs);_r=n(bi,"H3",{});var i_=l(_r);ea=n(i_,"A",{href:!0,id:!0});var c_=l(ea);o1=a(c_,"A few other implementation consideration"),c_.forEach(o),i_.forEach(o),t1=c(bi),aa=n(bi,"UL",{});var Ci=l(aa);oa=n(Ci,"LI",{});var Oi=l(oa);n1=a(Oi,"What if the expression in the "),$n=n(Oi,"CODE",{class:!0});var p_=l($n);l1=a(p_,"{#key}"),p_.forEach(o),r1=a(Oi," block is not dynamic, do we give warnings? or optimise the output?"),Oi.forEach(o),i1=c(Ci),ta=n(Ci,"LI",{});var Di=l(ta);c1=a(Di,"How will "),na=n(Di,"A",{href:!0,rel:!0});var k_=l(na);Gn=n(k_,"CODE",{class:!0});var h_=l(Gn);p1=a(h_,"<svelte:options immutable={true}>"),h_.forEach(o),k_.forEach(o),k1=a(Di," affect the code output?"),Di.forEach(o),Ci.forEach(o),bi.forEach(o),Ur=c(h),is=n(h,"SECTION",{});var gl=l(is);Er=n(gl,"H2",{});var d_=l(Er);la=n(d_,"A",{href:!0,id:!0});var v_=l(la);h1=a(v_,"The testing"),v_.forEach(o),d_.forEach(o),d1=c(gl),Bs=n(gl,"P",{});var wl=l(Bs);v1=a(wl,`You've seen me implementing test cases in the previous "Contributing to Svelte" articles [`),qn=n(wl,"A",{href:!0});var y_=l(qn);y1=a(y_,"1"),y_.forEach(o),u1=a(wl,"] ["),Kn=n(wl,"A",{href:!0});var u_=l(Kn);f1=a(u_,"2"),u_.forEach(o),x1=a(wl,"], here I am going to skip showing the implementation of the test cases, and probably point out some thoughts I had when coming up with tests:"),wl.forEach(o),m1=c(gl),os=n(gl,"OL",{});var ce=l(os);br=n(ce,"LI",{});var f_=l(br);Un=n(f_,"P",{});var om=l(Un);Cr=n(om,"STRONG",{});var x_=l(Cr);g1=a(x_,"Happy path:"),x_.forEach(o),w1=a(om," changing the key expression should recreate the content"),om.forEach(o),f_.forEach(o),_1=c(ce),Or=n(ce,"LI",{});var m_=l(Or);Jn=n(m_,"P",{});var tm=l(Jn);Dr=n(tm,"STRONG",{});var g_=l(Dr);E1=a(g_,"Happy path:"),g_.forEach(o),b1=a(tm," Transition when recreating the content should work \u2728"),tm.forEach(o),m_.forEach(o),C1=c(ce),ra=n(ce,"LI",{});var Ti=l(ra);js=n(Ti,"P",{});var _l=l(js);Tr=n(_l,"STRONG",{});var w_=l(Tr);O1=a(w_,"Possible edge case:"),w_.forEach(o),D1=a(_l," Changing variables other than the key expression should "),Ir=n(_l,"STRONG",{});var __=l(Ir);T1=a(__,"not"),__.forEach(o),I1=a(_l," recreate the content in "),Yn=n(_l,"CODE",{class:!0});var E_=l(Yn);S1=a(E_,"{#key}"),E_.forEach(o),_l.forEach(o),P1=c(Ti),Fn=n(Ti,"DIV",{class:!0});var K3=l(Fn);K3.forEach(o),Ti.forEach(o),A1=c(ce),ia=n(ce,"LI",{});var Ii=l(ia);zn=n(Ii,"P",{});var nm=l(zn);Sr=n(nm,"STRONG",{});var b_=l(Sr);L1=a(b_,"Possible edge case:"),b_.forEach(o),H1=a(nm," Changing the variables within the key expression but the result value of the key expression stay the same"),nm.forEach(o),N1=c(Ii),Qn=n(Ii,"DIV",{class:!0});var U3=l(Qn);U3.forEach(o),Ii.forEach(o),ce.forEach(o),gl.forEach(o),Jr=c(h),H=n(h,"SECTION",{});var hs=l(H);Pr=n(hs,"H2",{});var C_=l(Pr);ca=n(C_,"A",{href:!0,id:!0});var O_=l(ca);R1=a(O_,"Closing Notes"),O_.forEach(o),C_.forEach(o),B1=c(hs),pa=n(hs,"P",{});var Si=l(pa);j1=a(Si,"You can read the "),ka=n(Si,"A",{href:!0,rel:!0});var D_=l(ka);W1=a(D_,"Pull Request #5397"),D_.forEach(o),M1=a(Si," to read the final implementation."),Si.forEach(o),V1=c(hs),$1=n(hs,"HR",{}),G1=c(hs),ha=n(hs,"P",{});var Pi=l(ha);q1=a(Pi,"If you wish to learn more about Svelte, "),da=n(Pi,"A",{href:!0,rel:!0});var T_=l(da);K1=a(T_,"follow me on Twitter"),T_.forEach(o),U1=a(Pi,"."),Pi.forEach(o),J1=c(hs),va=n(hs,"P",{});var Ai=l(va);Y1=a(Ai,"If you have anything unclear about this article, find me on "),ya=n(Ai,"A",{href:!0,rel:!0});var I_=l(ya);F1=a(I_,"Twitter"),I_.forEach(o),z1=a(Ai," too!"),Ai.forEach(o),hs.forEach(o),this.h()},h(){r(N,"href","#background"),r(N,"id","background"),r(ga,"href","/contributing-to-svelte-fixing-issue-5012"),r(wa,"href","/contributing-to-svelte-fixing-issue-4392"),r(_a,"class","inline"),r(Ea,"class","inline"),r(ba,"class","inline"),r(Ca,"class","inline"),r(Oa,"class","inline"),r(Da,"class","inline"),r(Ta,"href","/the-svelte-compiler-handbook"),r(Ia,"href","/looking-into-the-svelte-compiler"),r(ke,"href","#the-motivation"),r(ke,"id","the-motivation"),r(Sa,"class","inline"),r(he,"href","https://github.com/sveltejs/svelte/issues/1469"),r(he,"rel","nofollow"),r(Pa,"class","inline"),r(Aa,"class","inline"),r(La,"class","inline"),r(Ha,"class","inline"),r(Na,"class","code-section"),r(de,"href","https://svelte.dev/repl/1be3a0b123aa4384853ff5abd103f9ae"),r(de,"rel","nofollow"),r(Ra,"class","inline"),r(Ba,"class","inline"),r(ja,"class","inline"),r(Wa,"class","inline"),r(Ma,"class","inline"),r(Va,"class","inline"),r($a,"class","inline"),r(Ga,"class","inline"),r(qa,"class","inline"),r(Ka,"class","inline"),r(Ua,"class","inline"),r(ys,"href","https://svelte.dev/tutorial/keyed-each-blocks"),r(ys,"rel","nofollow"),r(Ja,"class","inline"),r(Ya,"class","inline"),r(Fa,"class","inline"),r(za,"class","inline"),r(Qa,"class","inline"),r(Za,"class","inline"),r(us,"href","https://svelte.dev/repl/b1f5815f8b5f4634afa9025492739fa4"),r(us,"rel","nofollow"),r(Xa,"class","inline"),r(so,"class","inline"),r(eo,"class","inline"),r(xs,"href","https://www.nikgraf.com/blog/using-reacts-key-attribute-to-remount-a-component"),r(xs,"rel","nofollow"),r(ao,"class","inline"),r(oo,"class","inline"),r(to,"class","code-section"),r(no,"class","inline"),r(lo,"class","inline"),r(ve,"href","#transitions-for-reactive-data-change"),r(ve,"id","transitions-for-reactive-data-change"),r(ro,"class","inline"),r(ue,"href","https://github.com/sveltejs/svelte/issues/5119"),r(ue,"rel","nofollow"),r(io,"class","code-section"),r(co,"class","inline"),r(po,"class","code-section"),r(ko,"class","inline"),r(ho,"class","code-section"),r(vo,"class","inline"),r(we,"href","#the-implementation"),r(we,"id","the-implementation"),r(yo,"href","/the-svelte-compiler-handbook"),r(Ee,"href","#parsing"),r(Ee,"id","parsing"),r(Ce,"href","https://github.com/sveltejs/svelte/blob/82dc26a31c37906153e07686b73d3af08dd50154/src/compiler/parse/index.ts#L51"),r(Ce,"rel","nofollow"),r(uo,"class","code-section"),r(xo,"class","inline"),r(mo,"class","inline"),r(go,"class","inline"),r(wo,"class","inline"),r(_o,"class","inline"),r(Eo,"class","inline"),r(bo,"class","inline"),r(Co,"class","inline"),r(Oo,"class","inline"),r(Do,"class","inline"),r(qs,"href","https://github.com/sveltejs/svelte/blob/82dc26a31c37906153e07686b73d3af08dd50154/src/compiler/parse/state/mustache.ts#L35"),r(qs,"rel","nofollow"),r(To,"class","inline"),r(Io,"class","inline"),r(So,"class","inline"),r(Po,"class","code-section"),r(Ao,"class","inline"),r(Lo,"class","inline"),r(Ho,"class","code-section"),r(No,"class","inline"),r(Ro,"class","inline"),r(Bo,"class","inline"),r(jo,"class","code-section"),r(Wo,"class","inline"),r(Mo,"class","inline"),r(Vo,"class","inline"),r($o,"class","inline"),r(Go,"class","code-section"),r(Oe,"href","#tracking-references-and-dependencies"),r(Oe,"id","tracking-references-and-dependencies"),r(qo,"class","inline"),r(Ko,"class","inline"),r(Uo,"class","inline"),r(Jo,"class","inline"),r(Yo,"class","code-section"),r(zo,"class","inline"),r(Qo,"class","inline"),r(Zo,"class","inline"),r(Xo,"class","inline"),r(st,"class","inline"),r(et,"class","inline"),r(ot,"class","inline"),r(tt,"class","inline"),r(De,"href","https://github.com/sveltejs/svelte/blob/caebe0deb80d959ad7c7b5276d7e017be71769c7/src/compiler/compile/nodes/shared/Node.ts"),r(De,"rel","nofollow"),r(nt,"class","inline"),r(lt,"class","inline"),r(rt,"class","inline"),r(Ie,"href","https://github.com/sveltejs/svelte/blob/2b2f40d32ae36a94b77b69959494687073a3ebbc/src/compiler/compile/render_dom/wrappers/shared/Wrapper.ts#L7"),r(Ie,"rel","nofollow"),r(it,"class","inline"),r(ct,"class","inline"),r(pt,"class","inline"),r(kt,"class","code-section"),r(ht,"class","inline"),r(dt,"class","inline"),r(vt,"class","code-section"),r(yt,"class","inline"),r(Pe,"href","#creating-code-blocks-fragments"),r(Pe,"id","creating-code-blocks-fragments"),r(ut,"href","/compile-svelte-in-your-head-part-4"),r(ft,"class","inline"),r(xt,"class","inline"),r(mt,"class","inline"),r(gt,"class","code-section"),r(wt,"class","inline"),r(_t,"class","code-section"),r(Et,"class","code-section"),r(bt,"class","inline"),r(Ct,"class","inline"),r(Ot,"class","code-section"),r(Dt,"class","inline"),r(Tt,"class","code-section"),r(It,"class","inline"),r(St,"class","inline"),r(Pt,"class","inline"),r(At,"class","inline"),r(Lt,"class","code-section"),r(Ht,"class","inline"),r(Nt,"class","inline"),r(Rt,"class","inline"),r(Bt,"class","inline"),r(jt,"class","inline"),r(Wt,"class","inline"),r(Mt,"class","inline"),r(Vt,"class","inline"),r($t,"class","inline"),r(qt,"class","inline"),r(Kt,"class","inline"),r(Ut,"class","inline"),r($e,"href","https://github.com/sveltejs/svelte/blob/8148a7a33444805320923e4c4e071f62dee3df6c/src/compiler/compile/render_dom/Block.ts#L118-L152"),r($e,"rel","nofollow"),r(Jt,"class","inline"),r(Yt,"class","inline"),r(Ft,"class","code-section"),r(zt,"class","inline"),r(Qt,"class","inline"),r(Zt,"class","inline"),r(Xt,"class","inline"),r(sn,"class","inline"),r(en,"class","inline"),r(an,"class","inline"),r(on,"class","code-section"),r(tn,"class","inline"),r(nn,"class","code-section"),r(ln,"class","inline"),r(rn,"class","inline"),r(cn,"class","inline"),r(pn,"class","code-section"),r(kn,"class","inline"),r(hn,"class","inline"),r(dn,"class","inline"),r(vn,"class","inline"),r(Je,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_templates"),r(Je,"rel","nofollow"),r(yn,"class","inline"),r(un,"class","inline"),r(fn,"class","inline"),r(Ye,"href","https://github.com/Rich-Harris/code-red"),r(Ye,"rel","nofollow"),r(mn,"class","inline"),r(gn,"class","code-section"),r(wn,"class","inline"),r(_n,"class","code-section"),r(En,"class","inline"),r(bn,"class","code-section"),r(Cn,"class","inline"),r(On,"class","inline"),r(Dn,"class","code-section"),r(Tn,"class","inline"),r(In,"class","code-section"),r(Sn,"class","code-section"),r(Pn,"class","inline"),r(An,"class","inline"),r(Ln,"href","/compile-svelte-in-your-head-part-4/#the-extra-text-node"),r(Hn,"class","code-section"),r(Nn,"class","inline"),r(Rn,"class","code-section"),r(Xe,"href","#creating-code-for-ssr"),r(Xe,"id","creating-code-for-ssr"),r(Bn,"class","inline"),r(jn,"class","inline"),r(Wn,"class","code-section"),r(Mn,"class","inline"),r(Vn,"class","inline"),r(sa,"href","#generate-code"),r(sa,"id","generate-code"),r(ea,"href","#a-few-other-implementation-consideration"),r(ea,"id","a-few-other-implementation-consideration"),r($n,"class","inline"),r(Gn,"class","inline"),r(na,"href","https://svelte.dev/docs#svelte_options"),r(na,"rel","nofollow"),r(la,"href","#the-testing"),r(la,"id","the-testing"),r(qn,"href","/contributing-to-svelte-fixing-issue-5012"),r(Kn,"href","/contributing-to-svelte-fixing-issue-4392"),r(Yn,"class","inline"),r(Fn,"class","code-section"),r(Qn,"class","code-section"),r(ca,"href","#closing-notes"),r(ca,"id","closing-notes"),r(ka,"href","https://github.com/sveltejs/svelte/pull/5397"),r(ka,"rel","nofollow"),r(da,"href","https://twitter.com/lihautan"),r(da,"rel","nofollow"),r(ya,"href","https://twitter.com/lihautan"),r(ya,"rel","nofollow")},m(h,f){b(h,w,f),s(w,W),s(W,N),s(N,pe),s(w,C),s(w,T),s(T,ma),s(T,ga),s(ga,Li),s(T,Hi),s(T,wa),s(wa,Ni),s(T,Ri),s(T,_a),s(_a,Bi),s(T,ji),s(w,Wi),s(w,I),s(I,Mi),s(I,Ea),s(Ea,Vi),s(I,$i),s(I,ba),s(ba,Gi),s(I,qi),s(I,Ca),s(Ca,Ki),s(I,Ui),s(I,Oa),s(Oa,Ji),s(I,Yi),s(I,Da),s(Da,Fi),s(I,zi),s(I,Ta),s(Ta,Qi),s(I,Zi),s(I,Ia),s(Ia,Xi),s(I,sc),b(h,Br,f),b(h,u,f),s(u,El),s(El,ke),s(ke,ec),s(u,ac),s(u,R),s(R,oc),s(R,Sa),s(Sa,tc),s(R,nc),s(R,bl),s(bl,lc),s(R,rc),s(R,Cl),s(Cl,ic),s(R,cc),s(R,he),s(he,pc),s(R,kc),s(u,hc),s(u,ds),s(ds,dc),s(ds,Pa),s(Pa,vc),s(ds,yc),s(ds,Aa),s(Aa,uc),s(ds,fc),s(u,xc),s(u,vs),s(vs,mc),s(vs,La),s(La,gc),s(vs,wc),s(vs,Ha),s(Ha,_c),s(vs,Ec),s(u,bc),s(u,Na),Na.innerHTML=L_,s(u,Cc),s(u,Ol),s(Ol,de),s(de,Oc),s(u,Dc),s(u,y),s(y,Tc),s(y,Ra),s(Ra,Ic),s(y,Sc),s(y,Ba),s(Ba,Pc),s(y,Ac),s(y,ja),s(ja,Lc),s(y,Hc),s(y,Wa),s(Wa,Nc),s(y,Rc),s(y,Ma),s(Ma,Bc),s(y,jc),s(y,Va),s(Va,Wc),s(y,Mc),s(y,$a),s($a,Vc),s(y,$c),s(y,Ga),s(Ga,Gc),s(y,qc),s(y,qa),s(qa,Kc),s(y,Uc),s(y,Ka),s(Ka,Jc),s(y,Yc),s(y,ys),s(ys,Fc),s(ys,Ua),s(Ua,zc),s(ys,Qc),s(y,Zc),s(y,Ja),s(Ja,Xc),s(y,sp),s(y,Ya),s(Ya,ep),s(y,ap),s(u,op),s(u,J),s(J,tp),s(J,Fa),s(Fa,np),s(J,lp),s(J,za),s(za,rp),s(J,ip),s(J,Qa),s(Qa,cp),s(J,pp),s(u,kp),s(u,Gs),s(Gs,us),s(us,hp),s(us,Za),s(Za,dp),s(us,vp),s(Gs,yp),s(Gs,Xa),s(Xa,up),s(Gs,fp),s(u,xp),s(u,Dl),s(Dl,fs),s(fs,mp),s(fs,so),s(so,gp),s(fs,wp),s(fs,xs),s(xs,_p),s(xs,eo),s(eo,Ep),s(xs,bp),s(fs,Cp),s(u,Op),s(u,Y),s(Y,Dp),s(Y,ao),s(ao,Tp),s(Y,Ip),s(Y,oo),s(oo,Sp),s(Y,Pp),s(Y,Tl),s(Tl,Ap),s(Y,Lp),s(u,Hp),s(u,to),to.innerHTML=H_,s(u,Np),s(u,ms),s(ms,Rp),s(ms,no),s(no,Bp),s(ms,jp),s(ms,lo),s(lo,Wp),s(ms,Mp),b(h,jr,f),b(h,E,f),s(E,Il),s(Il,ve),s(ve,Vp),s(E,$p),s(E,gs),s(gs,Gp),s(gs,ye),s(ye,qp),s(ye,ro),s(ro,Kp),s(ye,Up),s(gs,Jp),s(gs,ue),s(ue,Yp),s(gs,Fp),s(E,zp),s(E,io),io.innerHTML=N_,s(E,Qp),s(E,Sl),s(Sl,Zp),s(E,Xp),s(E,fe),s(fe,sk),s(fe,co),s(co,ek),s(fe,ak),s(E,ok),s(E,xe),s(xe,tk),s(xe,Pl),s(Pl,nk),s(xe,lk),s(E,rk),s(E,po),po.innerHTML=R_,s(E,ik),s(E,me),s(me,ck),s(me,ko),s(ko,pk),s(me,kk),s(E,hk),s(E,ho),ho.innerHTML=B_,s(E,dk),s(E,ge),s(ge,vk),s(ge,vo),s(vo,yk),s(ge,uk),b(h,Wr,f),b(h,M,f),s(M,Al),s(Al,we),s(we,fk),s(M,xk),s(M,_e),s(_e,mk),s(_e,yo),s(yo,gk),s(_e,wk),s(M,_k),s(M,F),s(F,Ll),s(Ll,Ek),s(F,bk),s(F,Hl),s(Hl,Ck),s(F,Ok),s(F,Nl),s(Nl,Dk),s(F,Tk),s(F,Rl),s(Rl,Ik),s(M,Sk),s(M,Bl),s(Bl,Pk),b(h,Mr,f),b(h,d,f),s(d,jl),s(jl,Ee),s(Ee,Ak),s(d,Lk),s(d,be),s(be,Hk),s(be,Ce),s(Ce,Nk),s(be,Rk),s(d,Bk),s(d,uo),uo.innerHTML=j_,s(d,jk),s(d,Wl),s(Wl,Wk),s(d,Mk),s(d,z),s(z,fo),s(fo,Ml),s(Ml,Vk),s(fo,$k),s(z,Gk),s(z,L),s(L,Vl),s(Vl,qk),s(L,Kk),s(L,xo),s(xo,Uk),s(L,Jk),s(L,mo),s(mo,Yk),s(L,Fk),s(L,go),s(go,zk),s(L,Qk),s(L,wo),s(wo,Zk),s(L,Xk),s(z,sh),s(z,Q),s(Q,$l),s($l,eh),s(Q,ah),s(Q,_o),s(_o,oh),s(Q,th),s(Q,Eo),s(Eo,nh),s(Q,lh),s(Q,bo),s(bo,rh),s(z,ih),s(z,ns),s(ns,Gl),s(Gl,ch),s(ns,ph),s(ns,Co),s(Co,kh),s(ns,hh),s(ns,Oo),s(Oo,dh),s(ns,vh),s(d,yh),s(d,ws),s(ws,uh),s(ws,Do),s(Do,fh),s(ws,xh),s(ws,qs),s(qs,ql),s(ql,mh),s(qs,gh),s(ws,wh),s(d,_h),s(d,Z),s(Z,Eh),s(Z,To),s(To,bh),s(Z,Ch),s(Z,Io),s(Io,Oh),s(Z,Dh),s(Z,So),s(So,Th),s(Z,Ih),s(d,Sh),s(d,Po),Po.innerHTML=W_,s(d,Ph),s(d,_s),s(_s,Ah),s(_s,Ao),s(Ao,Lh),s(_s,Hh),s(_s,Lo),s(Lo,Nh),s(_s,Rh),s(d,Bh),s(d,Ho),Ho.innerHTML=M_,s(d,jh),s(d,X),s(X,Wh),s(X,No),s(No,Mh),s(X,Vh),s(X,Ro),s(Ro,$h),s(X,Gh),s(X,Bo),s(Bo,qh),s(X,Kh),s(d,Uh),s(d,jo),jo.innerHTML=V_,s(d,Jh),s(d,B),s(B,Yh),s(B,Wo),s(Wo,Fh),s(B,zh),s(B,Mo),s(Mo,Qh),s(B,Zh),s(B,Vo),s(Vo,Xh),s(B,sd),s(B,$o),s($o,ed),s(B,ad),s(d,od),s(d,Go),Go.innerHTML=$_,s(d,td),s(d,Kl),s(Kl,nd),b(h,Vr,f),b(h,v,f),s(v,Ul),s(Ul,Oe),s(Oe,ld),s(v,rd),s(v,Es),s(Es,id),s(Es,qo),s(qo,cd),s(Es,pd),s(Es,Ko),s(Ko,kd),s(Es,hd),s(v,dd),s(v,bs),s(bs,vd),s(bs,Uo),s(Uo,yd),s(bs,ud),s(bs,Jo),s(Jo,fd),s(bs,xd),s(v,md),s(v,Yo),Yo.innerHTML=G_,s(v,gd),s(v,Jl),s(Jl,wd),s(v,_d),s(v,Yl),s(Yl,Ed),s(v,bd),s(v,Cs),s(Cs,Fo),s(Fo,zo),s(zo,Cd),s(Fo,Od),s(Cs,Dd),s(Cs,Os),s(Os,Td),s(Os,Qo),s(Qo,Id),s(Os,Sd),s(Os,Zo),s(Zo,Pd),s(Os,Ad),s(Cs,Ld),s(Cs,ls),s(ls,Xo),s(Xo,Hd),s(ls,Nd),s(ls,st),s(st,Rd),s(ls,Bd),s(ls,et),s(et,jd),s(ls,Wd),s(v,Md),s(v,ss),s(ss,Fl),s(Fl,Vd),s(ss,$d),s(ss,zl),s(zl,Gd),s(ss,qd),s(ss,Ql),s(Ql,Kd),s(ss,Ud),s(ss,Ds),s(Ds,at),s(at,Jd),s(at,Zl),s(Zl,Yd),s(Ds,Fd),s(Ds,V),s(V,zd),s(V,ot),s(ot,Qd),s(V,Zd),s(V,De),s(De,tt),s(tt,Xd),s(V,sv),s(V,Xl),s(Xl,ev),s(V,av),s(V,Te),s(Te,ov),s(Te,nt),s(nt,tv),s(Te,nv),s(Ds,lv),s(Ds,$),s($,rv),s($,lt),s(lt,iv),s($,cv),s($,Ie),s(Ie,rt),s(rt,pv),s($,kv),s($,sr),s(sr,hv),s($,dv),s($,Se),s(Se,vv),s(Se,it),s(it,yv),s(Se,uv),s(v,fv),s(v,er),s(er,xv),s(v,mv),s(v,Ts),s(Ts,gv),s(Ts,ct),s(ct,wv),s(Ts,_v),s(Ts,pt),s(pt,Ev),s(Ts,bv),s(v,Cv),s(v,kt),kt.innerHTML=q_,s(v,Ov),s(v,Is),s(Is,Dv),s(Is,ht),s(ht,Tv),s(Is,Iv),s(Is,dt),s(dt,Sv),s(Is,Pv),s(v,Av),s(v,vt),vt.innerHTML=K_,s(v,Lv),s(v,Ss),s(Ss,Hv),s(Ss,ar),s(ar,Nv),s(Ss,Rv),s(Ss,yt),s(yt,Bv),s(Ss,jv),b(h,$r,f),b(h,p,f),s(p,or),s(or,Pe),s(Pe,Wv),s(p,Mv),s(p,Ae),s(Ae,Vv),s(Ae,tr),s(tr,$v),s(Ae,Gv),s(p,qv),s(p,Ps),s(Ps,Kv),s(Ps,ut),s(ut,Uv),s(Ps,Jv),s(Ps,ft),s(ft,Yv),s(Ps,Fv),s(p,zv),s(p,As),s(As,Qv),s(As,xt),s(xt,Zv),s(As,Xv),s(As,mt),s(mt,sy),s(As,ey),s(p,ay),s(p,gt),gt.innerHTML=U_,s(p,oy),s(p,Le),s(Le,ty),s(Le,wt),s(wt,ny),s(Le,ly),s(p,ry),s(p,_t),_t.innerHTML=J_,s(p,iy),s(p,nr),s(nr,cy),s(p,py),s(p,Et),Et.innerHTML=Y_,s(p,ky),s(p,He),s(He,hy),s(He,bt),s(bt,dy),s(He,vy),s(p,yy),s(p,Ne),s(Ne,lr),s(lr,uy),s(Ne,fy),s(Ne,Re),s(Re,xy),s(Re,Ct),s(Ct,my),s(Re,gy),s(p,wy),s(p,Ot),Ot.innerHTML=F_,s(p,_y),s(p,Be),s(Be,Ey),s(Be,Dt),s(Dt,by),s(Be,Cy),s(p,Oy),s(p,Tt),Tt.innerHTML=z_,s(p,Dy),s(p,Ls),s(Ls,Ty),s(Ls,It),s(It,Iy),s(Ls,Sy),s(Ls,St),s(St,Py),s(Ls,Ay),s(p,Ly),s(p,je),s(je,Hy),s(je,Pt),s(Pt,Ny),s(je,Ry),s(p,By),s(p,We),s(We,jy),s(We,At),s(At,Wy),s(We,My),s(p,Vy),s(p,Lt),Lt.innerHTML=Q_,s(p,$y),s(p,rr),s(rr,Gy),s(p,qy),s(p,Me),s(Me,O),s(O,Ky),s(O,Ht),s(Ht,Uy),s(O,Jy),s(O,Nt),s(Nt,Yy),s(O,Fy),s(O,Rt),s(Rt,zy),s(O,Qy),s(O,Bt),s(Bt,Zy),s(O,Xy),s(O,jt),s(jt,su),s(O,eu),s(O,Wt),s(Wt,au),s(O,ou),s(O,Mt),s(Mt,tu),s(O,nu),s(O,Ve),s(Ve,Ks),s(Ks,lu),s(Ks,Vt),s(Vt,ru),s(Ks,iu),s(Ks,$t),s($t,cu),s(Ve,pu),s(Ve,Gt),s(Gt,ku),s(Gt,qt),s(qt,hu),s(Me,du),s(Me,G),s(G,vu),s(G,ir),s(ir,yu),s(G,uu),s(G,Kt),s(Kt,fu),s(G,xu),s(G,cr),s(cr,mu),s(G,gu),s(G,pr),s(pr,Us),s(Us,wu),s(Us,Ut),s(Ut,_u),s(Us,Eu),s(Us,$e),s($e,bu),s(p,Cu),s(p,Ge),s(Ge,Ou),s(Ge,Jt),s(Jt,Du),s(Ge,Tu),s(p,Iu),s(p,qe),s(qe,Su),s(qe,Yt),s(Yt,Pu),s(qe,Au),s(p,Lu),s(p,Ft),Ft.innerHTML=Z_,s(p,Hu),s(p,A),s(A,Nu),s(A,zt),s(zt,Ru),s(A,Bu),s(A,Qt),s(Qt,ju),s(A,Wu),s(A,Zt),s(Zt,Mu),s(A,Vu),s(A,Xt),s(Xt,$u),s(A,Gu),s(A,sn),s(sn,qu),s(A,Ku),s(p,Uu),s(p,Ju),s(p,Yu),s(p,Hs),s(Hs,Fu),s(Hs,en),s(en,zu),s(Hs,Qu),s(Hs,an),s(an,Zu),s(Hs,Xu),s(p,sf),s(p,on),on.innerHTML=X_,s(p,ef),s(p,Ke),s(Ke,af),s(Ke,tn),s(tn,of),s(Ke,tf),s(p,nf),s(p,nn),nn.innerHTML=s3,s(p,lf),s(p,es),s(es,rf),s(es,ln),s(ln,cf),s(es,pf),s(es,rn),s(rn,kf),s(es,hf),s(es,cn),s(cn,df),s(es,vf),s(p,yf),s(p,uf),s(p,ff),s(p,kr),s(kr,xf),s(p,mf),s(p,pn),pn.innerHTML=e3,s(p,gf),s(p,hr),s(hr,wf),s(p,_f),s(p,Ue),s(Ue,j),s(j,Ef),s(j,kn),s(kn,bf),s(j,Cf),s(j,hn),s(hn,Of),s(j,Df),s(j,dn),s(dn,Tf),s(j,If),s(j,vn),s(vn,Sf),s(j,Pf),s(Ue,Af),s(Ue,q),s(q,Lf),s(q,Je),s(Je,Hf),s(q,Nf),s(q,yn),s(yn,Rf),s(q,Bf),s(q,un),s(un,jf),s(q,Wf),s(q,dr),s(dr,Js),s(Js,Mf),s(Js,fn),s(fn,Vf),s(Js,$f),s(Js,Ye),s(Ye,Gf),s(p,qf),s(p,xn),s(xn,Kf),s(xn,mn),s(mn,Uf),s(p,Jf),s(p,gn),gn.innerHTML=a3,s(p,Yf),s(p,Fe),s(Fe,Ff),s(Fe,wn),s(wn,zf),s(Fe,Qf),s(p,Zf),s(p,vr),s(vr,Xf),s(p,sx),s(p,_n),_n.innerHTML=o3,s(p,ex),s(p,ze),s(ze,ax),s(ze,En),s(En,ox),s(ze,tx),s(p,nx),s(p,bn),bn.innerHTML=t3,s(p,lx),s(p,Ys),s(Ys,Cn),s(Cn,rx),s(Ys,ix),s(Ys,On),s(On,cx),s(Ys,px),s(p,kx),s(p,Dn),Dn.innerHTML=n3,s(p,hx),s(p,Qe),s(Qe,dx),s(Qe,Tn),s(Tn,vx),s(Qe,yx),s(p,ux),s(p,In),In.innerHTML=l3,s(p,fx),s(p,yr),s(yr,xx),s(p,mx),s(p,Sn),Sn.innerHTML=r3,s(p,gx),s(p,as),s(as,wx),s(as,Pn),s(Pn,_x),s(as,Ex),s(as,An),s(An,bx),s(as,Cx),s(as,Ln),s(Ln,Ox),s(as,Dx),s(p,Tx),s(p,Hn),Hn.innerHTML=i3,s(p,Ix),s(p,Ze),s(Ze,Sx),s(Ze,Nn),s(Nn,Px),s(Ze,Ax),s(p,Lx),s(p,ur),s(ur,Hx),s(p,Nx),s(p,Rn),Rn.innerHTML=c3,s(p,Rx),s(p,fr),s(fr,Bx),b(h,Gr,f),b(h,K,f),s(K,xr),s(xr,Xe),s(Xe,jx),s(K,Wx),s(K,Ns),s(Ns,Mx),s(Ns,Bn),s(Bn,Vx),s(Ns,$x),s(Ns,jn),s(jn,Gx),s(Ns,qx),s(K,Kx),s(K,Wn),Wn.innerHTML=p3,s(K,Ux),s(K,Rs),s(Rs,Jx),s(Rs,Mn),s(Mn,Yx),s(Rs,Fx),s(Rs,Vn),s(Vn,zx),s(Rs,Qx),b(h,qr,f),b(h,rs,f),s(rs,mr),s(mr,sa),s(sa,Zx),s(rs,Xx),s(rs,gr),s(gr,s1),s(rs,e1),s(rs,wr),s(wr,a1),b(h,Kr,f),b(h,Fs,f),s(Fs,_r),s(_r,ea),s(ea,o1),s(Fs,t1),s(Fs,aa),s(aa,oa),s(oa,n1),s(oa,$n),s($n,l1),s(oa,r1),s(aa,i1),s(aa,ta),s(ta,c1),s(ta,na),s(na,Gn),s(Gn,p1),s(ta,k1),b(h,Ur,f),b(h,is,f),s(is,Er),s(Er,la),s(la,h1),s(is,d1),s(is,Bs),s(Bs,v1),s(Bs,qn),s(qn,y1),s(Bs,u1),s(Bs,Kn),s(Kn,f1),s(Bs,x1),s(is,m1),s(is,os),s(os,br),s(br,Un),s(Un,Cr),s(Cr,g1),s(Un,w1),s(os,_1),s(os,Or),s(Or,Jn),s(Jn,Dr),s(Dr,E1),s(Jn,b1),s(os,C1),s(os,ra),s(ra,js),s(js,Tr),s(Tr,O1),s(js,D1),s(js,Ir),s(Ir,T1),s(js,I1),s(js,Yn),s(Yn,S1),s(ra,P1),s(ra,Fn),Fn.innerHTML=k3,s(os,A1),s(os,ia),s(ia,zn),s(zn,Sr),s(Sr,L1),s(zn,H1),s(ia,N1),s(ia,Qn),Qn.innerHTML=h3,b(h,Jr,f),b(h,H,f),s(H,Pr),s(Pr,ca),s(ca,R1),s(H,B1),s(H,pa),s(pa,j1),s(pa,ka),s(ka,W1),s(pa,M1),s(H,V1),s(H,$1),s(H,G1),s(H,ha),s(ha,q1),s(ha,da),s(da,K1),s(ha,U1),s(H,J1),s(H,va),s(va,Y1),s(va,ya),s(ya,F1),s(va,z1)},p:tE,d(h){h&&o(w),h&&o(Br),h&&o(u),h&&o(jr),h&&o(E),h&&o(Wr),h&&o(M),h&&o(Mr),h&&o(d),h&&o(Vr),h&&o(v),h&&o($r),h&&o(p),h&&o(Gr),h&&o(K),h&&o(qr),h&&o(rs),h&&o(Kr),h&&o(Fs),h&&o(Ur),h&&o(is),h&&o(Jr),h&&o(H)}}}function iE(xa){let w,W;const N=[xa[0],A_];let pe={$$slots:{default:[rE]},$$scope:{ctx:xa}};for(let C=0;C<N.length;C+=1)pe=lm(pe,N[C]);return w=new nE({props:pe}),{c(){z3(w.$$.fragment)},l(C){Q3(w.$$.fragment,C)},m(C,T){Z3(w,C,T),W=!0},p(C,[T]){const ma=T&1?X3(N,[T&1&&S_(C[0]),T&0&&S_(A_)]):{};T&2&&(ma.$$scope={dirty:T,ctx:C}),w.$set(ma)},i(C){W||(sE(w.$$.fragment,C),W=!0)},o(C){eE(w.$$.fragment,C),W=!1},d(C){aE(w,C)}}}const A_={title:"Contributing to Svelte - Implement {#key}",date:"2020-09-27T08:00:00Z",tags:["Svelte","JavaScript","Open Source"],series:"Contributing to Svelte",description:"I am going to share an anecdote on how I implemented {#key} logic block in Svelte",label:"blog",tableOfContents:[{link:"background",title:"Background"},{link:"the-motivation",title:"The motivation",nested:[{link:"transitions-for-reactive-data-change",title:"Transitions for reactive data change"}]},{link:"the-implementation",title:"The implementation",nested:[{link:"parsing",title:"Parsing"},{link:"tracking-references-and-dependencies",title:"Tracking references and dependencies"},{link:"creating-code-blocks-fragments",title:"Creating code blocks & fragments"},{link:"creating-code-for-ssr",title:"Creating code for SSR"},{link:"generate-code",title:"Generate code"},{link:"a-few-other-implementation-consideration",title:"A few other implementation consideration"}]},{link:"the-testing",title:"The testing"},{link:"closing-notes",title:"Closing Notes"}]};function cE(xa,w,W){return oE("blog",{image:lE}),xa.$$set=N=>{W(0,w=lm(lm({},w),P_(N)))},w=P_(w),[w]}class yE extends J3{constructor(w){super();Y3(this,w,cE,iE,F3,{})}}export{yE as default,A_ as metadata};
