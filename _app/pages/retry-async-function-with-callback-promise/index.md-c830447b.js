import{S as ru,i as iu,s as cu,C as th,w as Pv,x as Iv,y as Lv,z as pu,A as Dv,q as Sv,o as Hv,B as Mv,r as ku,R as Cv,k as i,e as t,t as o,m as c,c as n,a as l,h as a,d as e,b as r,Q as hu,g as E,F as s,O as yu}from"../../chunks/vendor-ea160616.js";import{B as vu}from"../../chunks/BlogLayout-1be3dc1e.js";import{T as du}from"../../chunks/TableOfContent-c4f5cb6e.js";import"../../chunks/stores-7d7fda0c.js";import"../../chunks/WebMentions-d768a574.js";/* empty css                                */var uu="/_app/assets/recursive-78d11ada.webp",Tv="/_app/assets/recursive-4f6ef114.png",xu="/_app/assets/hero-twitter-d9078b01.jpg";function fu(so){let w,O,C,ts,m,_,oo,dt,ao,rn,ut,v,Se,ns,cn,pn,ls,kn,rs,hn,yn,vn,is,He,dn,un,Me,xn,fn,eo,jv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">callback</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> result) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,wn,P,mn,to,gn,En,no,_n,bn,lo,Dn,Cn,Tn,ro,Av=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> cb) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">//</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,On,cs,Pn,io,In,Ln,Sn,co,Vv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> cb) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">//</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Hn,ps,Mn,po,jn,An,Vn,ko,Fv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> cb) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">error) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">//</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125;);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Fn,je,Nn,qn,ho,Nv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> cb) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// 1st attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">error) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// 2nd attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">error) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-comment)">// 3rd attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">error) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-comment)">// failed for 3 times</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Failed retrying 3 times&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,$n,ks,Wn,yo,Jn,Un,Rn,hs,Bn,ys,zn,Gn,Yn,Ae,Qn,Zn,vo,qv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> cb) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// 1st attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (error) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// 2nd attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (error) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-comment)">// 3rd attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (error) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-comment)">// failed for 3 times</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Failed retrying 3 times&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Kn,vs,Xn,uo,sl,ol,al,ds,el,xo,tl,nl,ll,us,rl,fo,il,cl,pl,wo,$v=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> n</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> cb) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> attempt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// 1st attempt</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">error) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (attempt</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> n) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Failed retrying </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">n</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> times&#96;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// 2nd attempt</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">error) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">          &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (attempt</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> n) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Failed retrying </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">n</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> times&#96;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">            &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/* this goes forever ...*/</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">            &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">          &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,kl,xs,hl,mo,yl,vl,dl,Ve,ul,xl,Fe,fs,Ne,qe,ws,nh,fl,$e,wl,ml,We,gl,El,go,Wv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> n</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> cb) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> attempt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_retry</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">error) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (attempt</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> n) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Failed retrying </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">n</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> times&#96;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">_retry</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line highlight"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">_retry</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,_l,Je,bl,Dl,Ue,Cl,xt,h,Re,ms,Tl,Ol,gs,Pl,Es,Il,Ll,Sl,D,Hl,Eo,Ml,jl,_o,Al,Vl,bo,Fl,Nl,Do,ql,$l,Wl,Co,Jv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">getPromiseA</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// a promise</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(handleA) </span><span style="color: var(--shiki-token-comment)">// returns a new promise</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(handleB); </span><span style="color: var(--shiki-token-comment)">// returns another new promise</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">getPromiseB</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// a promise</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(handleA) </span><span style="color: var(--shiki-token-comment)">// returns a new promise</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(handleB); </span><span style="color: var(--shiki-token-comment)">// returns another new promise</span></span></code></pre>`,Jl,I,Ul,To,Rl,Bl,Oo,zl,Gl,_s,Yl,Ql,Zl,V,Kl,Po,Xl,sr,Io,or,ar,er,Lo,Uv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">//</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,tr,bs,nr,So,lr,rr,ir,Ho,Rv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(); </span><span style="color: var(--shiki-token-comment)">// returns a promise</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,cr,F,pr,Mo,kr,hr,jo,yr,vr,dr,Ao,Bv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// returns a promise</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">()); </span><span style="color: var(--shiki-token-comment)">// returns a new promise</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ur,Ds,xr,Vo,fr,wr,mr,Fo,zv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// returns a promise (promise#1)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">()) </span><span style="color: var(--shiki-token-comment)">// returns a new promise (promise#2)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">()); </span><span style="color: var(--shiki-token-comment)">// returns yet a new promise (promise#3)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,gr,L,Er,Be,_r,br,No,Dr,Cr,qo,Tr,Or,Pr,N,Ir,$o,Lr,Sr,Wo,Hr,Mr,jr,q,Ar,Jo,Vr,Fr,Uo,Nr,qr,$r,Ro,Gv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">promise3</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// returns a promise (promise#1)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">()) </span><span style="color: var(--shiki-token-comment)">// returns a new promise (promise#2)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">()); </span><span style="color: var(--shiki-token-comment)">// returns yet a new promise (promise#3)</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">promise3</span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    data </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> data</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// resolved with the result from &#96;fn()&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// reject with the max retry error</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Failed retrying 3 times&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  );</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Wr,ze,Jr,Ur,Bo,Yv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">promise3</span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  data </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> data</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// resolved with the result from &#96;fn()&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// reject with the max retry error</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Failed retrying 3 times&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// is equivalent to</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">promise3 </span><span style="color: var(--shiki-token-comment)">// resolved with the result from &#96;fn()&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// reject with the max retry error</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Failed retrying 3 times&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span></code></pre>`,Rr,Cs,Br,zo,zr,Gr,Yr,Go,Qv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// prettier-ignore</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// returns a promise (promise#1)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">()) </span><span style="color: var(--shiki-token-comment)">// returns a new promise (promise#2)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">()) </span><span style="color: var(--shiki-token-comment)">// returns yet a new promise (promise#3)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// reject with the max retry error</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Failed retrying 3 times&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Qr,Ts,Zr,Yo,Kr,Xr,si,Os,oi,Qo,ai,ei,ti,Zo,Zv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// prettier-ignore</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> n) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// attempt #1</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">()) </span><span style="color: var(--shiki-token-comment)">// attempt #2</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">()) </span><span style="color: var(--shiki-token-comment)">// attempt #n</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Failed retrying </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">n</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> times&#96;</span><span style="color: var(--shiki-color-text)">); &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ni,$,li,Ko,ri,ii,Xo,ci,pi,ki,Ge,Ps,hi,sa,yi,vi,di,oa,Kv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> n) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> promise </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> n; i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    promise </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">promise</span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">promise</span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Failed retrying </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">n</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> times&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> promise;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ui,S,xi,aa,fi,wi,ea,mi,gi,ta,Ei,_i,bi,na,Xv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> n) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> promise;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> n; i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">promise) promise </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> promise </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">promise</span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">promise</span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Failed retrying </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">n</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> times&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> promise;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Di,W,Ci,la,Ti,Oi,ra,Pi,Ii,Li,ia,sd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> n) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> promise </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Promise</span><span style="color: var(--shiki-token-function)">.reject</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> n; i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    promise </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">promise</span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">promise</span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Failed retrying </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">n</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> times&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> promise;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Si,Ye,Hi,ft,p,Qe,Is,Mi,ji,Ls,Ai,ca,Vi,Fi,Ni,Ze,qi,$i,pa,od=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> value;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">promise</span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(data </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> data;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;resolved&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;here&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value);</span></span></code></pre>`,Wi,Ke,Ji,Ui,ka,ad='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-string-expression)">&quot;here&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">undefined</span></span></code></pre>',Ri,Xe,Bi,zi,ha,ed='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-string-expression)">&quot;resolved&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;value&quot;</span></span></code></pre>',Gi,Ss,Yi,ya,Qi,Zi,Ki,J,Xi,va,sc,oc,da,ac,ec,tc,Hs,nc,ua,lc,rc,ic,Ms,cc,xa,pc,kc,hc,fa,td=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// timeline #1</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  promise</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(data </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// timeline #2</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">doSomething</span><span style="color: var(--shiki-color-text)">(data);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(data2 </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// timeline #3</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">doAnotherThing</span><span style="color: var(--shiki-color-text)">(data2);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// timeline #1</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,yc,U,vc,wa,dc,uc,ma,xc,fc,wc,ga,nd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// timeline #1</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> data </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> promise;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// timeline #2</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> data2 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">doSomething</span><span style="color: var(--shiki-color-text)">(data);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// timeline #3</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">doAnotherThing</span><span style="color: var(--shiki-color-text)">(data2);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,mc,H,gc,Ea,Ec,_c,_a,bc,Dc,ba,Cc,Tc,Oc,Da,ld=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">//</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Pc,js,Ic,Ca,Lc,Sc,Hc,Ta,rd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(); </span><span style="color: var(--shiki-token-comment)">// returns a promise</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Mc,b,jc,Oa,Ac,Vc,Pa,Fc,Nc,Ia,qc,$c,La,Wc,Jc,Sa,Uc,Rc,Ha,id=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Bc,R,zc,Ma,Gc,Yc,ja,Qc,Zc,Kc,Aa,cd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Xc,As,sp,Va,op,ap,ep,Fa,pd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Failed retrying 3 times&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,tp,Na,np,qa,lp,rp,$a,kd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Failed retrying 3 times&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ip,B,cp,Wa,pp,kp,Ja,hp,yp,vp,Ua,hd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Failed retrying 3 times&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,dp,Vs,up,Ra,xp,fp,wp,Fs,mp,Ba,gp,Ep,_p,za,yd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> n) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(); </span><span style="color: var(--shiki-token-comment)">// 1st attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(); </span><span style="color: var(--shiki-token-comment)">// 2nd attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(); </span><span style="color: var(--shiki-token-comment)">// nth attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Failed retrying </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">n</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> times&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,bp,z,Dp,Ga,Cp,Tp,Ya,Op,Pp,Ip,Qa,vd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> n) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> n; i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Failed retrying </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">n</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> times&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Lp,G,Sp,Za,Hp,Mp,Ka,jp,Ap,wt,x,st,Ns,Vp,Fp,Y,Np,Xa,qp,$p,se,Wp,Jp,Up,ot,Rp,Bp,M,qs,oe,zp,Gp,$s,Ws,Yp,ae,Qp,Zp,Kp,at,Xp,sk,Js,ee,ok,ak,Us,Rs,ek,te,tk,nk,lk,et,rk,ik,Bs,ne,ck,pk,zs,Gs,kk,le,hk,yk,vk,tt,dk,uk,Ys,re,xk,fk,Qs,Zs,wk,ie,mk,gk,Ek,nt,_k,bk,Ks,Dk,ce,Ck,Tk,Ok,lt,Pk,Ik,pe,dd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">mockFnFactory</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">() &#123;&#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Lk,rt,Sk,Hk,ke,ud=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line highlight"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">mockFnFactory</span><span style="color: var(--shiki-color-text)">(numFailure) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">() &#123;&#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Mk,it,jk,Ak,he,xd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">mockFnFactory</span><span style="color: var(--shiki-color-text)">(numFailure) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> numCalls </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    numCalls</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Vk,ct,Fk,Nk,ye,fd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// calback version</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">mockFnFactory</span><span style="color: var(--shiki-color-text)">(numFailure) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> numCalls </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(callback) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    numCalls</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (numCalls </span><span style="color: var(--shiki-token-keyword)">&lt;=</span><span style="color: var(--shiki-color-text)"> numFailure) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">callback</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">callback</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> numCalls);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// promise version</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">mockFnFactory</span><span style="color: var(--shiki-color-text)">(numFailure) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> numCalls </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(callback) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    numCalls</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (numCalls </span><span style="color: var(--shiki-token-keyword)">&lt;=</span><span style="color: var(--shiki-color-text)"> numFailure) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Promise</span><span style="color: var(--shiki-token-function)">.reject</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Promise</span><span style="color: var(--shiki-token-function)">.resolve</span><span style="color: var(--shiki-color-text)">(numCalls);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,qk,pt,$k,Wk,ve,wd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">spy</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> numCalled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">args) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      numCalled</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">args);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">getNumberOfTimesCalled</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> numCalled;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Jk,kt,Uk,Rk,de,md=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">describe</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#96;fn&#96; failed on 1st attempt, and succeed thereafter (callback based)&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fn</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">mockFnFactory</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">spied</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">spy</span><span style="color: var(--shiki-color-text)">(fn);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// retry at most 3 times</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">spied</span><span style="color: var(--shiki-color-text)">.fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// verify &#96;fn&#96; get called only 2 times</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">assert</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">spied</span><span style="color: var(--shiki-token-function)">.getNumberOfTimesCalled</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// verify we get the return value from the 2nd attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">assert</span><span style="color: var(--shiki-color-text)">(data </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">describe</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#96;fn&#96; failed on 1st attempt, and succeed thereafter (promise based)&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fn</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">mockFnFactory</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">spied</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">spy</span><span style="color: var(--shiki-color-text)">(fn);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// retry at most 3 times</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">spied</span><span style="color: var(--shiki-color-text)">.fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    data </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// verify &#96;fn&#96; get called only 2 times</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">assert</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">spied</span><span style="color: var(--shiki-token-function)">.getNumberOfTimesCalled</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// verify we get the return value from the 2nd attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">assert</span><span style="color: var(--shiki-color-text)">(data </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    error </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  );</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,mt,T,ht,Xs,Bk,zk,Q,Gk,ue,Yk,Qk,xe,Zk,Kk,Xk,yt,sh,oh,vt,ah,gt;return w=new du({props:{data:[{link:"the-callback-pattern",title:"The callback pattern"},{link:"the-promise-chain",title:"The promise chain"},{link:"async-await",title:"Async await"},{link:"testing",title:"Testing"},{link:"closing-note",title:"Closing Note"}]}}),{c(){Pv(w.$$.fragment),O=i(),C=t("p"),ts=o("JavaScript is a single-threaded programming language, which means only one thing can happen at a time in a single thread."),m=i(),_=t("p"),oo=o("That\u2019s where asynchronous JavaScript comes into play. Using asynchronous JavaScript (such as callbacks, promises, and async/await), you can perform long network requests without blocking the main thread."),dt=i(),ao=t("p"),rn=o("In this article, I'm going to show how you can retry an asynchronous function in JavaScript, using the callback pattern, promise chain pattern and async await. Also, I'll show you how to write test to verify it works."),ut=i(),v=t("section"),Se=t("h2"),ns=t("a"),cn=o("The callback pattern"),pn=i(),ls=t("p"),kn=o("Let's take a look at retrying asynchronous function that takes in a callback function that follows "),rs=t("a"),hn=o("the callback convention"),yn=o(":"),vn=i(),is=t("ul"),He=t("li"),dn=o("The first argument of the callback function is an error object"),un=i(),Me=t("li"),xn=o("The second argument contains the callback results."),fn=i(),eo=t("div"),wn=i(),P=t("p"),mn=o("So we are going to implement the "),to=t("code"),gn=o("retry"),En=o(" function, that takes in the asynchronous function to retry, "),no=t("code"),_n=o("fn"),bn=o(" and a callback function, "),lo=t("code"),Dn=o("cb"),Cn=o(", that will be called when the function succeeded or failed after all the retry attempts."),Tn=i(),ro=t("div"),On=i(),cs=t("p"),Pn=o("The first thing we are going to do is to call the function "),io=t("code"),In=o("fn"),Ln=o(":"),Sn=i(),co=t("div"),Hn=i(),ps=t("p"),Mn=o("We check if there's an error, if there's no error, we can call the "),po=t("code"),jn=o("cb"),An=o(" function to indicate the function succeeded. However, if there's an error, we are going to call the function again to retry."),Vn=i(),ko=t("div"),Fn=i(),je=t("p"),Nn=o("Let's retry at most 3 times:"),qn=i(),ho=t("div"),$n=i(),ks=t("p"),Wn=o("Notice that it starts to get unwieldy as we are nesting more callback functions. It's hard to figure out which close bracket "),yo=t("code"),Jn=o("}"),Un=o(" is belong to without proper indentation."),Rn=i(),hs=t("p"),Bn=o("This is the so-called "),ys=t("a"),zn=o('"Callback Hell"'),Gn=o(" in JavaScript."),Yn=i(),Ae=t("p"),Qn=o("Let's make it more unbearable to prove the point by flipping the if case:"),Zn=i(),vo=t("div"),Kn=i(),vs=t("p"),Xn=o("Now can you tell which "),uo=t("code"),sl=o("data"),ol=o(" is belong to which function?"),al=i(),ds=t("p"),el=o("Now, instead of always retry at most 3 times, we are going to retry at most "),xo=t("code"),tl=o("n"),nl=o(" times."),ll=i(),us=t("p"),rl=o("So we are going to introduce a new argument, "),fo=t("code"),il=o("n"),cl=o(":"),pl=i(),wo=t("div"),kl=i(),xs=t("p"),hl=o("The function keeps going forever, until it reaches "),mo=t("code"),yl=o("n"),vl=o(" attempt."),dl=i(),Ve=t("p"),ul=o("If you stare at the code hard enough, you would notice that the code starts to repeat itself:"),xl=i(),Fe=t("p"),fs=t("picture"),Ne=t("source"),qe=t("source"),ws=t("img"),fl=i(),$e=t("p"),wl=o("Note that the code within the outer red square is the same as the code within the inner red square, which is the same as the inner inner red square ..."),ml=i(),We=t("p"),gl=o("So, let's extract the code within the red square out into a function and replace the red squares with the function:"),El=i(),go=t("div"),_l=i(),Je=t("p"),bl=o("And there you go, retrying an asynchronous function with callback pattern."),Dl=i(),Ue=t("p"),Cl=o("Does it work? Well, we have to test it to verify it. Stay till the end to see how we are going to write unit test to verify it."),xt=i(),h=t("section"),Re=t("h2"),ms=t("a"),Tl=o("The promise chain"),Ol=i(),gs=t("p"),Pl=o("A "),Es=t("a"),Il=o("Promise"),Ll=o(", according to MDN, object represents the eventual completion of an asynchronous operation, and its resulting value."),Sl=i(),D=t("p"),Hl=o("A Promise object provides "),Eo=t("code"),Ml=o(".then"),jl=o(" and "),_o=t("code"),Al=o(".catch"),Vl=o(" method, which takes in callback function to be called when the promise is resolved or rejected respectively. The "),bo=t("code"),Fl=o(".then"),Nl=o(" and "),Do=t("code"),ql=o(".catch"),$l=o(" method then returns a new Promise of the return value of the callback function."),Wl=i(),Co=t("div"),Jl=i(),I=t("p"),Ul=o("The chaining of "),To=t("code"),Rl=o(".then"),Bl=o(" and "),Oo=t("code"),zl=o(".catch"),Gl=o(" is a common pattern, called "),_s=t("a"),Yl=o("Promise chaining"),Ql=o("."),Zl=i(),V=t("p"),Kl=o("Now, lets implement the "),Po=t("code"),Xl=o("retry"),sr=o(" function, which takes in the asynchronous function to retry, "),Io=t("code"),or=o("fn"),ar=o(" and return a promise, which resolved when the function succeeded or resolved after failing all the retry attempts."),er=i(),Lo=t("div"),tr=i(),bs=t("p"),nr=o("The first thing we are going to do is to call the function "),So=t("code"),lr=o("fn"),rr=o(":"),ir=i(),Ho=t("div"),cr=i(),F=t("p"),pr=o("We need to retry calling "),Mo=t("code"),kr=o("fn"),hr=o(" again, if the first "),jo=t("code"),yr=o("fn"),vr=o(" is rejected"),dr=i(),Ao=t("div"),ur=i(),Ds=t("p"),xr=o("If that new promise rejected again, we retry by calling "),Vo=t("code"),fr=o("fn"),wr=o(" again"),mr=i(),Fo=t("div"),gr=i(),L=t("p"),Er=o("The last promise "),Be=t("em"),_r=o("(promise#3)"),br=o(" will reject if the 3rd "),No=t("code"),Dr=o("fn()"),Cr=o(" attempt rejects, and resolve if any of the "),qo=t("code"),Tr=o("fn()"),Or=o(" attempts resolve."),Pr=i(),N=t("p"),Ir=o("The callback method within "),$o=t("code"),Lr=o(".catch"),Sr=o(" will be called only when the previous "),Wo=t("code"),Hr=o("fn()"),Mr=o(" attempt rejects."),jr=i(),q=t("p"),Ar=o("We are going to return a rejected promise with the error indicating max retries has met, if the last promise "),Jo=t("code"),Vr=o("(promise#3)"),Fr=o(" rejected, and a resolved promise with the result from "),Uo=t("code"),Nr=o("fn()"),qr=o("."),$r=i(),Ro=t("div"),Wr=i(),ze=t("p"),Jr=o("And we can make the code more concise, as the following two are equivalent, in terms of what is being resolved and rejected:"),Ur=i(),Bo=t("div"),Rr=i(),Cs=t("p"),Br=o("Also, we can substitute the variable "),zo=t("code"),zr=o("promise3"),Gr=o(" with it's promise chain value:"),Yr=i(),Go=t("div"),Qr=i(),Ts=t("p"),Zr=o("Now, instead of always retry at most 3 times, we are going to retry at most "),Yo=t("code"),Kr=o("n"),Xr=o(" times."),si=i(),Os=t("p"),oi=o("So we are going to introduce a new argument, "),Qo=t("code"),ai=o("n"),ei=o(":"),ti=i(),Zo=t("div"),ni=i(),$=t("p"),li=o("Instead of writing "),Ko=t("code"),ri=o(".catch(() => fn())"),ii=i(),Xo=t("code"),ci=o("n"),pi=o(" number of times, we can build the Promise up using a for loop."),ki=i(),Ge=t("p"),Ps=t("strong"),hi=o("Assuming "),sa=t("code"),yi=o("n"),vi=o(" is always greater or equal to 1,"),di=i(),oa=t("div"),ui=i(),S=t("p"),xi=o("What if "),aa=t("code"),fi=o("n"),wi=o(" is "),ea=t("code"),mi=o("0"),gi=o(" or negative? We shouldn't call "),ta=t("code"),Ei=o("fn()"),_i=o(" at all!"),bi=i(),na=t("div"),Di=i(),W=t("p"),Ci=o("Well, this maybe a little bit inelegant, having to execute the "),la=t("code"),Ti=o("if (!promise) ... else ..."),Oi=o(" on every loop, we can initialise the promise with a rejected promise, so that we can treat the 1st "),ra=t("code"),Pi=o("fn()"),Ii=o(" called as the 1st retry:"),Li=i(),ia=t("div"),Si=i(),Ye=t("p"),Hi=o("And there you go, retrying an asynchronous function with promise chain."),ft=i(),p=t("section"),Qe=t("h2"),Is=t("a"),Mi=o("Async await"),ji=i(),Ls=t("p"),Ai=o("When you use a promise, you need to use "),ca=t("code"),Vi=o(".then"),Fi=o(" to get the resolved value, and that happened asynchronously."),Ni=i(),Ze=t("p"),qi=o("Meaning, if you have"),$i=i(),pa=t("div"),Wi=i(),Ke=t("p"),Ji=o("You would see"),Ui=i(),ka=t("div"),Ri=i(),Xe=t("p"),Bi=o("first, and then some time later,"),zi=i(),ha=t("div"),Gi=i(),Ss=t("p"),Yi=o("This is because the function in the "),ya=t("code"),Qi=o(".then"),Zi=o(" is called asynchronously, it is executed in a separate timeline of execution, so to speak."),Ki=i(),J=t("p"),Xi=o("And "),va=t("code"),sc=o("async"),oc=o(" + "),da=t("code"),ac=o("await"),ec=o(" in JavaScript allow us to stitch multiple separate timeline of execution into disguisedly 1 timeline of execution flow."),tc=i(),Hs=t("p"),nc=o("Everytime when we "),ua=t("code"),lc=o("await"),rc=o(", we jump into a different asynchronous timeline."),ic=i(),Ms=t("p"),cc=o("So, with the code with Promise + "),xa=t("code"),pc=o(".then"),kc=o(":"),hc=i(),fa=t("div"),yc=i(),U=t("p"),vc=o("can be written in "),wa=t("code"),dc=o("async"),uc=o(" + "),ma=t("code"),xc=o("await"),fc=o(" in the following manner:"),wc=i(),ga=t("div"),mc=i(),H=t("p"),gc=o("Now, lets implement the "),Ea=t("code"),Ec=o("retry"),_c=o(" function using "),_a=t("code"),bc=o("async"),Dc=o(" + "),ba=t("code"),Cc=o("await"),Tc=o("."),Oc=i(),Da=t("div"),Pc=i(),js=t("p"),Ic=o("The first thing we are going to do is to call the function "),Ca=t("code"),Lc=o("fn"),Sc=o(":"),Hc=i(),Ta=t("div"),Mc=i(),b=t("p"),jc=o("We need to retry calling "),Oa=t("code"),Ac=o("fn"),Vc=o(" again, if the first "),Pa=t("code"),Fc=o("fn"),Nc=o(" is rejected. Instead of "),Ia=t("code"),qc=o(".catch"),$c=o(", we use "),La=t("code"),Wc=o("await"),Jc=o(" + "),Sa=t("code"),Uc=o("try catch"),Rc=i(),Ha=t("div"),Bc=i(),R=t("p"),zc=o("If the 2nd "),Ma=t("code"),Gc=o("fn()"),Yc=o(" rejected again, we retry by calling "),ja=t("code"),Qc=o("fn"),Zc=o(" again"),Kc=i(),Aa=t("div"),Xc=i(),As=t("p"),sp=o("And if the last "),Va=t("code"),op=o("fn()"),ap=o(" rejected again, we are going to return a rejected promise with an error indicating max retries has met by throw the error"),ep=i(),Fa=t("div"),tp=i(),Na=t("p"),np=o("Now, if we need to return a Promise resolved with the resolved value from "),qa=t("code"),lp=o("fn()"),rp=i(),$a=t("div"),ip=i(),B=t("p"),cp=o("Since we are ending early in the "),Wa=t("code"),pp=o("try"),kp=o(" block, and we are not using the error from the "),Ja=t("code"),hp=o("catch"),yp=o(" block, we can make the code less nested"),vp=i(),Ua=t("div"),dp=i(),Vs=t("p"),up=o("Now, instead of always retry at most 3 times, we are going to retry at most "),Ra=t("code"),xp=o("n"),fp=o(" times."),wp=i(),Fs=t("p"),mp=o("So we are going to introduce a new argument, "),Ba=t("code"),gp=o("n"),Ep=o(":"),_p=i(),za=t("div"),bp=i(),z=t("p"),Dp=o("Instead of writing it "),Ga=t("code"),Cp=o("n"),Tp=o(" number of times, we can achieve it using a "),Ya=t("code"),Op=o("for"),Pp=o(" loop:"),Ip=i(),Qa=t("div"),Lp=i(),G=t("p"),Sp=o("And there you go, retrying an asynchronous function using "),Za=t("code"),Hp=o("async"),Mp=o(" + "),Ka=t("code"),jp=o("await"),Ap=o("."),wt=i(),x=t("section"),st=t("h2"),Ns=t("a"),Vp=o("Testing"),Fp=i(),Y=t("p"),Np=o("To test whether our "),Xa=t("code"),qp=o("retry"),$p=o(" function works, we need to have a max number of retry in mind, say 3. And we need a function, "),se=t("code"),Wp=o("fn"),Jp=o(" that we can control when it succeed and when it failed."),Up=i(),ot=t("p"),Rp=o("So we can have the following test cases:"),Bp=i(),M=t("ul"),qs=t("li"),oe=t("code"),zp=o("fn"),Gp=o(" always succeed;"),$s=t("ul"),Ws=t("li"),Yp=o("verify "),ae=t("code"),Qp=o("fn"),Zp=o(" get called only 1 time"),Kp=i(),at=t("li"),Xp=o("verify we get the return value from the 1st attempt"),sk=i(),Js=t("li"),ee=t("code"),ok=o("fn"),ak=o(" failed on 1st attempt, and succeed thereafter;"),Us=t("ul"),Rs=t("li"),ek=o("verify "),te=t("code"),tk=o("fn"),nk=o(" get called only 2 times"),lk=i(),et=t("li"),rk=o("verify we get the return value from the 2nd attempt"),ik=i(),Bs=t("li"),ne=t("code"),ck=o("fn"),pk=o(" failed on 1st, 2nd attempt, and succeed thereafter;"),zs=t("ul"),Gs=t("li"),kk=o("verify "),le=t("code"),hk=o("fn"),yk=o(" get called only 3 times"),vk=i(),tt=t("li"),dk=o("verify we get the return value from the 3rd attempt"),uk=i(),Ys=t("li"),re=t("code"),xk=o("fn"),fk=o(" failed on 1st, 2nd, 3rd attempt, and succeed thereafter;"),Qs=t("ul"),Zs=t("li"),wk=o("verify "),ie=t("code"),mk=o("fn"),gk=o(" get called only 3 times"),Ek=i(),nt=t("li"),_k=o("verify we get the max retry error"),bk=i(),Ks=t("p"),Dk=o("So, the key is to devise such "),ce=t("code"),Ck=o("fn"),Tk=o(" that we can control when it succeed and when it failed."),Ok=i(),lt=t("p"),Pk=o("We can create a function that returns such function"),Ik=i(),pe=t("div"),Lk=i(),rt=t("p"),Sk=o("The function takes in number indicating how many time the return function would fail, before succeeding thereafter"),Hk=i(),ke=t("div"),Mk=i(),it=t("p"),jk=o("To know how many times the function is called, we can track it with a variable"),Ak=i(),he=t("div"),Vk=i(),ct=t("p"),Fk=o("As long as the number of times called is less than the number of time it should fail, it will fail."),Nk=i(),ye=t("div"),qk=i(),pt=t("p"),$k=o('Next, to verify the function get called a certain number of times, we can create a "spy" function:'),Wk=i(),ve=t("div"),Jk=i(),kt=t("p"),Uk=o("So, let's put all of them together:"),Rk=i(),de=t("div"),mt=i(),T=t("section"),ht=t("h2"),Xs=t("a"),Bk=o("Closing Note"),zk=i(),Q=t("p"),Gk=o("We've seen how we can retry an asynchronous function using the callback pattern, promise chain pattern and "),ue=t("code"),Yk=o("async"),Qk=o(" + "),xe=t("code"),Zk=o("await"),Kk=o("."),Xk=i(),yt=t("p"),sh=o("Each of the 3 methods is important in its on right, albeit some is more verbose than another."),oh=i(),vt=t("p"),ah=o("Lastly, we also cover how to write test to verify our code, and also how to create the mock function to facilitate our test cases."),this.h()},l(d){Iv(w.$$.fragment,d),O=c(d),C=n(d,"P",{});var g=l(C);ts=a(g,"JavaScript is a single-threaded programming language, which means only one thing can happen at a time in a single thread."),g.forEach(e),m=c(d),_=n(d,"P",{});var lh=l(_);oo=a(lh,"That\u2019s where asynchronous JavaScript comes into play. Using asynchronous JavaScript (such as callbacks, promises, and async/await), you can perform long network requests without blocking the main thread."),lh.forEach(e),dt=c(d),ao=n(d,"P",{});var rh=l(ao);rn=a(rh,"In this article, I'm going to show how you can retry an asynchronous function in JavaScript, using the callback pattern, promise chain pattern and async await. Also, I'll show you how to write test to verify it works."),rh.forEach(e),ut=c(d),v=n(d,"SECTION",{});var u=l(v);Se=n(u,"H2",{});var ih=l(Se);ns=n(ih,"A",{href:!0,id:!0});var ch=l(ns);cn=a(ch,"The callback pattern"),ch.forEach(e),ih.forEach(e),pn=c(u),ls=n(u,"P",{});var Et=l(ls);kn=a(Et,"Let's take a look at retrying asynchronous function that takes in a callback function that follows "),rs=n(Et,"A",{href:!0,rel:!0});var ph=l(rs);hn=a(ph,"the callback convention"),ph.forEach(e),yn=a(Et,":"),Et.forEach(e),vn=c(u),is=n(u,"UL",{});var _t=l(is);He=n(_t,"LI",{});var kh=l(He);dn=a(kh,"The first argument of the callback function is an error object"),kh.forEach(e),un=c(_t),Me=n(_t,"LI",{});var hh=l(Me);xn=a(hh,"The second argument contains the callback results."),hh.forEach(e),_t.forEach(e),fn=c(u),eo=n(u,"DIV",{class:!0});var gd=l(eo);gd.forEach(e),wn=c(u),P=n(u,"P",{});var Z=l(P);mn=a(Z,"So we are going to implement the "),to=n(Z,"CODE",{class:!0});var yh=l(to);gn=a(yh,"retry"),yh.forEach(e),En=a(Z," function, that takes in the asynchronous function to retry, "),no=n(Z,"CODE",{class:!0});var vh=l(no);_n=a(vh,"fn"),vh.forEach(e),bn=a(Z," and a callback function, "),lo=n(Z,"CODE",{class:!0});var dh=l(lo);Dn=a(dh,"cb"),dh.forEach(e),Cn=a(Z,", that will be called when the function succeeded or failed after all the retry attempts."),Z.forEach(e),Tn=c(u),ro=n(u,"DIV",{class:!0});var Ed=l(ro);Ed.forEach(e),On=c(u),cs=n(u,"P",{});var bt=l(cs);Pn=a(bt,"The first thing we are going to do is to call the function "),io=n(bt,"CODE",{class:!0});var uh=l(io);In=a(uh,"fn"),uh.forEach(e),Ln=a(bt,":"),bt.forEach(e),Sn=c(u),co=n(u,"DIV",{class:!0});var _d=l(co);_d.forEach(e),Hn=c(u),ps=n(u,"P",{});var Dt=l(ps);Mn=a(Dt,"We check if there's an error, if there's no error, we can call the "),po=n(Dt,"CODE",{class:!0});var xh=l(po);jn=a(xh,"cb"),xh.forEach(e),An=a(Dt," function to indicate the function succeeded. However, if there's an error, we are going to call the function again to retry."),Dt.forEach(e),Vn=c(u),ko=n(u,"DIV",{class:!0});var bd=l(ko);bd.forEach(e),Fn=c(u),je=n(u,"P",{});var fh=l(je);Nn=a(fh,"Let's retry at most 3 times:"),fh.forEach(e),qn=c(u),ho=n(u,"DIV",{class:!0});var Dd=l(ho);Dd.forEach(e),$n=c(u),ks=n(u,"P",{});var Ct=l(ks);Wn=a(Ct,"Notice that it starts to get unwieldy as we are nesting more callback functions. It's hard to figure out which close bracket "),yo=n(Ct,"CODE",{class:!0});var wh=l(yo);Jn=a(wh,"}"),wh.forEach(e),Un=a(Ct," is belong to without proper indentation."),Ct.forEach(e),Rn=c(u),hs=n(u,"P",{});var Tt=l(hs);Bn=a(Tt,"This is the so-called "),ys=n(Tt,"A",{href:!0,rel:!0});var mh=l(ys);zn=a(mh,'"Callback Hell"'),mh.forEach(e),Gn=a(Tt," in JavaScript."),Tt.forEach(e),Yn=c(u),Ae=n(u,"P",{});var gh=l(Ae);Qn=a(gh,"Let's make it more unbearable to prove the point by flipping the if case:"),gh.forEach(e),Zn=c(u),vo=n(u,"DIV",{class:!0});var Cd=l(vo);Cd.forEach(e),Kn=c(u),vs=n(u,"P",{});var Ot=l(vs);Xn=a(Ot,"Now can you tell which "),uo=n(Ot,"CODE",{class:!0});var Eh=l(uo);sl=a(Eh,"data"),Eh.forEach(e),ol=a(Ot," is belong to which function?"),Ot.forEach(e),al=c(u),ds=n(u,"P",{});var Pt=l(ds);el=a(Pt,"Now, instead of always retry at most 3 times, we are going to retry at most "),xo=n(Pt,"CODE",{class:!0});var _h=l(xo);tl=a(_h,"n"),_h.forEach(e),nl=a(Pt," times."),Pt.forEach(e),ll=c(u),us=n(u,"P",{});var It=l(us);rl=a(It,"So we are going to introduce a new argument, "),fo=n(It,"CODE",{class:!0});var bh=l(fo);il=a(bh,"n"),bh.forEach(e),cl=a(It,":"),It.forEach(e),pl=c(u),wo=n(u,"DIV",{class:!0});var Td=l(wo);Td.forEach(e),kl=c(u),xs=n(u,"P",{});var Lt=l(xs);hl=a(Lt,"The function keeps going forever, until it reaches "),mo=n(Lt,"CODE",{class:!0});var Dh=l(mo);yl=a(Dh,"n"),Dh.forEach(e),vl=a(Lt," attempt."),Lt.forEach(e),dl=c(u),Ve=n(u,"P",{});var Ch=l(Ve);ul=a(Ch,"If you stare at the code hard enough, you would notice that the code starts to repeat itself:"),Ch.forEach(e),xl=c(u),Fe=n(u,"P",{});var Th=l(Fe);fs=n(Th,"PICTURE",{});var St=l(fs);Ne=n(St,"SOURCE",{type:!0,srcset:!0}),qe=n(St,"SOURCE",{type:!0,srcset:!0}),ws=n(St,"IMG",{src:!0,loading:!0,alt:!0}),St.forEach(e),Th.forEach(e),fl=c(u),$e=n(u,"P",{});var Oh=l($e);wl=a(Oh,"Note that the code within the outer red square is the same as the code within the inner red square, which is the same as the inner inner red square ..."),Oh.forEach(e),ml=c(u),We=n(u,"P",{});var Ph=l(We);gl=a(Ph,"So, let's extract the code within the red square out into a function and replace the red squares with the function:"),Ph.forEach(e),El=c(u),go=n(u,"DIV",{class:!0});var Od=l(go);Od.forEach(e),_l=c(u),Je=n(u,"P",{});var Ih=l(Je);bl=a(Ih,"And there you go, retrying an asynchronous function with callback pattern."),Ih.forEach(e),Dl=c(u),Ue=n(u,"P",{});var Lh=l(Ue);Cl=a(Lh,"Does it work? Well, we have to test it to verify it. Stay till the end to see how we are going to write unit test to verify it."),Lh.forEach(e),u.forEach(e),xt=c(d),h=n(d,"SECTION",{});var y=l(h);Re=n(y,"H2",{});var Sh=l(Re);ms=n(Sh,"A",{href:!0,id:!0});var Hh=l(ms);Tl=a(Hh,"The promise chain"),Hh.forEach(e),Sh.forEach(e),Ol=c(y),gs=n(y,"P",{});var Ht=l(gs);Pl=a(Ht,"A "),Es=n(Ht,"A",{href:!0,rel:!0});var Mh=l(Es);Il=a(Mh,"Promise"),Mh.forEach(e),Ll=a(Ht,", according to MDN, object represents the eventual completion of an asynchronous operation, and its resulting value."),Ht.forEach(e),Sl=c(y),D=n(y,"P",{});var A=l(D);Hl=a(A,"A Promise object provides "),Eo=n(A,"CODE",{class:!0});var jh=l(Eo);Ml=a(jh,".then"),jh.forEach(e),jl=a(A," and "),_o=n(A,"CODE",{class:!0});var Ah=l(_o);Al=a(Ah,".catch"),Ah.forEach(e),Vl=a(A," method, which takes in callback function to be called when the promise is resolved or rejected respectively. The "),bo=n(A,"CODE",{class:!0});var Vh=l(bo);Fl=a(Vh,".then"),Vh.forEach(e),Nl=a(A," and "),Do=n(A,"CODE",{class:!0});var Fh=l(Do);ql=a(Fh,".catch"),Fh.forEach(e),$l=a(A," method then returns a new Promise of the return value of the callback function."),A.forEach(e),Wl=c(y),Co=n(y,"DIV",{class:!0});var Pd=l(Co);Pd.forEach(e),Jl=c(y),I=n(y,"P",{});var K=l(I);Ul=a(K,"The chaining of "),To=n(K,"CODE",{class:!0});var Nh=l(To);Rl=a(Nh,".then"),Nh.forEach(e),Bl=a(K," and "),Oo=n(K,"CODE",{class:!0});var qh=l(Oo);zl=a(qh,".catch"),qh.forEach(e),Gl=a(K," is a common pattern, called "),_s=n(K,"A",{href:!0,rel:!0});var $h=l(_s);Yl=a($h,"Promise chaining"),$h.forEach(e),Ql=a(K,"."),K.forEach(e),Zl=c(y),V=n(y,"P",{});var fe=l(V);Kl=a(fe,"Now, lets implement the "),Po=n(fe,"CODE",{class:!0});var Wh=l(Po);Xl=a(Wh,"retry"),Wh.forEach(e),sr=a(fe," function, which takes in the asynchronous function to retry, "),Io=n(fe,"CODE",{class:!0});var Jh=l(Io);or=a(Jh,"fn"),Jh.forEach(e),ar=a(fe," and return a promise, which resolved when the function succeeded or resolved after failing all the retry attempts."),fe.forEach(e),er=c(y),Lo=n(y,"DIV",{class:!0});var Id=l(Lo);Id.forEach(e),tr=c(y),bs=n(y,"P",{});var Mt=l(bs);nr=a(Mt,"The first thing we are going to do is to call the function "),So=n(Mt,"CODE",{class:!0});var Uh=l(So);lr=a(Uh,"fn"),Uh.forEach(e),rr=a(Mt,":"),Mt.forEach(e),ir=c(y),Ho=n(y,"DIV",{class:!0});var Ld=l(Ho);Ld.forEach(e),cr=c(y),F=n(y,"P",{});var we=l(F);pr=a(we,"We need to retry calling "),Mo=n(we,"CODE",{class:!0});var Rh=l(Mo);kr=a(Rh,"fn"),Rh.forEach(e),hr=a(we," again, if the first "),jo=n(we,"CODE",{class:!0});var Bh=l(jo);yr=a(Bh,"fn"),Bh.forEach(e),vr=a(we," is rejected"),we.forEach(e),dr=c(y),Ao=n(y,"DIV",{class:!0});var Sd=l(Ao);Sd.forEach(e),ur=c(y),Ds=n(y,"P",{});var jt=l(Ds);xr=a(jt,"If that new promise rejected again, we retry by calling "),Vo=n(jt,"CODE",{class:!0});var zh=l(Vo);fr=a(zh,"fn"),zh.forEach(e),wr=a(jt," again"),jt.forEach(e),mr=c(y),Fo=n(y,"DIV",{class:!0});var Hd=l(Fo);Hd.forEach(e),gr=c(y),L=n(y,"P",{});var X=l(L);Er=a(X,"The last promise "),Be=n(X,"EM",{});var Gh=l(Be);_r=a(Gh,"(promise#3)"),Gh.forEach(e),br=a(X," will reject if the 3rd "),No=n(X,"CODE",{class:!0});var Yh=l(No);Dr=a(Yh,"fn()"),Yh.forEach(e),Cr=a(X," attempt rejects, and resolve if any of the "),qo=n(X,"CODE",{class:!0});var Qh=l(qo);Tr=a(Qh,"fn()"),Qh.forEach(e),Or=a(X," attempts resolve."),X.forEach(e),Pr=c(y),N=n(y,"P",{});var me=l(N);Ir=a(me,"The callback method within "),$o=n(me,"CODE",{class:!0});var Zh=l($o);Lr=a(Zh,".catch"),Zh.forEach(e),Sr=a(me," will be called only when the previous "),Wo=n(me,"CODE",{class:!0});var Kh=l(Wo);Hr=a(Kh,"fn()"),Kh.forEach(e),Mr=a(me," attempt rejects."),me.forEach(e),jr=c(y),q=n(y,"P",{});var ge=l(q);Ar=a(ge,"We are going to return a rejected promise with the error indicating max retries has met, if the last promise "),Jo=n(ge,"CODE",{class:!0});var Xh=l(Jo);Vr=a(Xh,"(promise#3)"),Xh.forEach(e),Fr=a(ge," rejected, and a resolved promise with the result from "),Uo=n(ge,"CODE",{class:!0});var sy=l(Uo);Nr=a(sy,"fn()"),sy.forEach(e),qr=a(ge,"."),ge.forEach(e),$r=c(y),Ro=n(y,"DIV",{class:!0});var Md=l(Ro);Md.forEach(e),Wr=c(y),ze=n(y,"P",{});var oy=l(ze);Jr=a(oy,"And we can make the code more concise, as the following two are equivalent, in terms of what is being resolved and rejected:"),oy.forEach(e),Ur=c(y),Bo=n(y,"DIV",{class:!0});var jd=l(Bo);jd.forEach(e),Rr=c(y),Cs=n(y,"P",{});var At=l(Cs);Br=a(At,"Also, we can substitute the variable "),zo=n(At,"CODE",{class:!0});var ay=l(zo);zr=a(ay,"promise3"),ay.forEach(e),Gr=a(At," with it's promise chain value:"),At.forEach(e),Yr=c(y),Go=n(y,"DIV",{class:!0});var Ad=l(Go);Ad.forEach(e),Qr=c(y),Ts=n(y,"P",{});var Vt=l(Ts);Zr=a(Vt,"Now, instead of always retry at most 3 times, we are going to retry at most "),Yo=n(Vt,"CODE",{class:!0});var ey=l(Yo);Kr=a(ey,"n"),ey.forEach(e),Xr=a(Vt," times."),Vt.forEach(e),si=c(y),Os=n(y,"P",{});var Ft=l(Os);oi=a(Ft,"So we are going to introduce a new argument, "),Qo=n(Ft,"CODE",{class:!0});var ty=l(Qo);ai=a(ty,"n"),ty.forEach(e),ei=a(Ft,":"),Ft.forEach(e),ti=c(y),Zo=n(y,"DIV",{class:!0});var Vd=l(Zo);Vd.forEach(e),ni=c(y),$=n(y,"P",{});var Ee=l($);li=a(Ee,"Instead of writing "),Ko=n(Ee,"CODE",{class:!0});var ny=l(Ko);ri=a(ny,".catch(() => fn())"),ny.forEach(e),ii=c(Ee),Xo=n(Ee,"CODE",{class:!0});var ly=l(Xo);ci=a(ly,"n"),ly.forEach(e),pi=a(Ee," number of times, we can build the Promise up using a for loop."),Ee.forEach(e),ki=c(y),Ge=n(y,"P",{});var ry=l(Ge);Ps=n(ry,"STRONG",{});var Nt=l(Ps);hi=a(Nt,"Assuming "),sa=n(Nt,"CODE",{class:!0});var iy=l(sa);yi=a(iy,"n"),iy.forEach(e),vi=a(Nt," is always greater or equal to 1,"),Nt.forEach(e),ry.forEach(e),di=c(y),oa=n(y,"DIV",{class:!0});var Fd=l(oa);Fd.forEach(e),ui=c(y),S=n(y,"P",{});var ss=l(S);xi=a(ss,"What if "),aa=n(ss,"CODE",{class:!0});var cy=l(aa);fi=a(cy,"n"),cy.forEach(e),wi=a(ss," is "),ea=n(ss,"CODE",{class:!0});var py=l(ea);mi=a(py,"0"),py.forEach(e),gi=a(ss," or negative? We shouldn't call "),ta=n(ss,"CODE",{class:!0});var ky=l(ta);Ei=a(ky,"fn()"),ky.forEach(e),_i=a(ss," at all!"),ss.forEach(e),bi=c(y),na=n(y,"DIV",{class:!0});var Nd=l(na);Nd.forEach(e),Di=c(y),W=n(y,"P",{});var _e=l(W);Ci=a(_e,"Well, this maybe a little bit inelegant, having to execute the "),la=n(_e,"CODE",{class:!0});var hy=l(la);Ti=a(hy,"if (!promise) ... else ..."),hy.forEach(e),Oi=a(_e," on every loop, we can initialise the promise with a rejected promise, so that we can treat the 1st "),ra=n(_e,"CODE",{class:!0});var yy=l(ra);Pi=a(yy,"fn()"),yy.forEach(e),Ii=a(_e," called as the 1st retry:"),_e.forEach(e),Li=c(y),ia=n(y,"DIV",{class:!0});var qd=l(ia);qd.forEach(e),Si=c(y),Ye=n(y,"P",{});var vy=l(Ye);Hi=a(vy,"And there you go, retrying an asynchronous function with promise chain."),vy.forEach(e),y.forEach(e),ft=c(d),p=n(d,"SECTION",{});var k=l(p);Qe=n(k,"H2",{});var dy=l(Qe);Is=n(dy,"A",{href:!0,id:!0});var uy=l(Is);Mi=a(uy,"Async await"),uy.forEach(e),dy.forEach(e),ji=c(k),Ls=n(k,"P",{});var qt=l(Ls);Ai=a(qt,"When you use a promise, you need to use "),ca=n(qt,"CODE",{class:!0});var xy=l(ca);Vi=a(xy,".then"),xy.forEach(e),Fi=a(qt," to get the resolved value, and that happened asynchronously."),qt.forEach(e),Ni=c(k),Ze=n(k,"P",{});var fy=l(Ze);qi=a(fy,"Meaning, if you have"),fy.forEach(e),$i=c(k),pa=n(k,"DIV",{class:!0});var $d=l(pa);$d.forEach(e),Wi=c(k),Ke=n(k,"P",{});var wy=l(Ke);Ji=a(wy,"You would see"),wy.forEach(e),Ui=c(k),ka=n(k,"DIV",{class:!0});var Wd=l(ka);Wd.forEach(e),Ri=c(k),Xe=n(k,"P",{});var my=l(Xe);Bi=a(my,"first, and then some time later,"),my.forEach(e),zi=c(k),ha=n(k,"DIV",{class:!0});var Jd=l(ha);Jd.forEach(e),Gi=c(k),Ss=n(k,"P",{});var $t=l(Ss);Yi=a($t,"This is because the function in the "),ya=n($t,"CODE",{class:!0});var gy=l(ya);Qi=a(gy,".then"),gy.forEach(e),Zi=a($t," is called asynchronously, it is executed in a separate timeline of execution, so to speak."),$t.forEach(e),Ki=c(k),J=n(k,"P",{});var be=l(J);Xi=a(be,"And "),va=n(be,"CODE",{class:!0});var Ey=l(va);sc=a(Ey,"async"),Ey.forEach(e),oc=a(be," + "),da=n(be,"CODE",{class:!0});var _y=l(da);ac=a(_y,"await"),_y.forEach(e),ec=a(be," in JavaScript allow us to stitch multiple separate timeline of execution into disguisedly 1 timeline of execution flow."),be.forEach(e),tc=c(k),Hs=n(k,"P",{});var Wt=l(Hs);nc=a(Wt,"Everytime when we "),ua=n(Wt,"CODE",{class:!0});var by=l(ua);lc=a(by,"await"),by.forEach(e),rc=a(Wt,", we jump into a different asynchronous timeline."),Wt.forEach(e),ic=c(k),Ms=n(k,"P",{});var Jt=l(Ms);cc=a(Jt,"So, with the code with Promise + "),xa=n(Jt,"CODE",{class:!0});var Dy=l(xa);pc=a(Dy,".then"),Dy.forEach(e),kc=a(Jt,":"),Jt.forEach(e),hc=c(k),fa=n(k,"DIV",{class:!0});var Ud=l(fa);Ud.forEach(e),yc=c(k),U=n(k,"P",{});var De=l(U);vc=a(De,"can be written in "),wa=n(De,"CODE",{class:!0});var Cy=l(wa);dc=a(Cy,"async"),Cy.forEach(e),uc=a(De," + "),ma=n(De,"CODE",{class:!0});var Ty=l(ma);xc=a(Ty,"await"),Ty.forEach(e),fc=a(De," in the following manner:"),De.forEach(e),wc=c(k),ga=n(k,"DIV",{class:!0});var Rd=l(ga);Rd.forEach(e),mc=c(k),H=n(k,"P",{});var os=l(H);gc=a(os,"Now, lets implement the "),Ea=n(os,"CODE",{class:!0});var Oy=l(Ea);Ec=a(Oy,"retry"),Oy.forEach(e),_c=a(os," function using "),_a=n(os,"CODE",{class:!0});var Py=l(_a);bc=a(Py,"async"),Py.forEach(e),Dc=a(os," + "),ba=n(os,"CODE",{class:!0});var Iy=l(ba);Cc=a(Iy,"await"),Iy.forEach(e),Tc=a(os,"."),os.forEach(e),Oc=c(k),Da=n(k,"DIV",{class:!0});var Bd=l(Da);Bd.forEach(e),Pc=c(k),js=n(k,"P",{});var Ut=l(js);Ic=a(Ut,"The first thing we are going to do is to call the function "),Ca=n(Ut,"CODE",{class:!0});var Ly=l(Ca);Lc=a(Ly,"fn"),Ly.forEach(e),Sc=a(Ut,":"),Ut.forEach(e),Hc=c(k),Ta=n(k,"DIV",{class:!0});var zd=l(Ta);zd.forEach(e),Mc=c(k),b=n(k,"P",{});var j=l(b);jc=a(j,"We need to retry calling "),Oa=n(j,"CODE",{class:!0});var Sy=l(Oa);Ac=a(Sy,"fn"),Sy.forEach(e),Vc=a(j," again, if the first "),Pa=n(j,"CODE",{class:!0});var Hy=l(Pa);Fc=a(Hy,"fn"),Hy.forEach(e),Nc=a(j," is rejected. Instead of "),Ia=n(j,"CODE",{class:!0});var My=l(Ia);qc=a(My,".catch"),My.forEach(e),$c=a(j,", we use "),La=n(j,"CODE",{class:!0});var jy=l(La);Wc=a(jy,"await"),jy.forEach(e),Jc=a(j," + "),Sa=n(j,"CODE",{class:!0});var Ay=l(Sa);Uc=a(Ay,"try catch"),Ay.forEach(e),j.forEach(e),Rc=c(k),Ha=n(k,"DIV",{class:!0});var Gd=l(Ha);Gd.forEach(e),Bc=c(k),R=n(k,"P",{});var Ce=l(R);zc=a(Ce,"If the 2nd "),Ma=n(Ce,"CODE",{class:!0});var Vy=l(Ma);Gc=a(Vy,"fn()"),Vy.forEach(e),Yc=a(Ce," rejected again, we retry by calling "),ja=n(Ce,"CODE",{class:!0});var Fy=l(ja);Qc=a(Fy,"fn"),Fy.forEach(e),Zc=a(Ce," again"),Ce.forEach(e),Kc=c(k),Aa=n(k,"DIV",{class:!0});var Yd=l(Aa);Yd.forEach(e),Xc=c(k),As=n(k,"P",{});var Rt=l(As);sp=a(Rt,"And if the last "),Va=n(Rt,"CODE",{class:!0});var Ny=l(Va);op=a(Ny,"fn()"),Ny.forEach(e),ap=a(Rt," rejected again, we are going to return a rejected promise with an error indicating max retries has met by throw the error"),Rt.forEach(e),ep=c(k),Fa=n(k,"DIV",{class:!0});var Qd=l(Fa);Qd.forEach(e),tp=c(k),Na=n(k,"P",{});var eh=l(Na);np=a(eh,"Now, if we need to return a Promise resolved with the resolved value from "),qa=n(eh,"CODE",{class:!0});var qy=l(qa);lp=a(qy,"fn()"),qy.forEach(e),eh.forEach(e),rp=c(k),$a=n(k,"DIV",{class:!0});var Zd=l($a);Zd.forEach(e),ip=c(k),B=n(k,"P",{});var Te=l(B);cp=a(Te,"Since we are ending early in the "),Wa=n(Te,"CODE",{class:!0});var $y=l(Wa);pp=a($y,"try"),$y.forEach(e),kp=a(Te," block, and we are not using the error from the "),Ja=n(Te,"CODE",{class:!0});var Wy=l(Ja);hp=a(Wy,"catch"),Wy.forEach(e),yp=a(Te," block, we can make the code less nested"),Te.forEach(e),vp=c(k),Ua=n(k,"DIV",{class:!0});var Kd=l(Ua);Kd.forEach(e),dp=c(k),Vs=n(k,"P",{});var Bt=l(Vs);up=a(Bt,"Now, instead of always retry at most 3 times, we are going to retry at most "),Ra=n(Bt,"CODE",{class:!0});var Jy=l(Ra);xp=a(Jy,"n"),Jy.forEach(e),fp=a(Bt," times."),Bt.forEach(e),wp=c(k),Fs=n(k,"P",{});var zt=l(Fs);mp=a(zt,"So we are going to introduce a new argument, "),Ba=n(zt,"CODE",{class:!0});var Uy=l(Ba);gp=a(Uy,"n"),Uy.forEach(e),Ep=a(zt,":"),zt.forEach(e),_p=c(k),za=n(k,"DIV",{class:!0});var Xd=l(za);Xd.forEach(e),bp=c(k),z=n(k,"P",{});var Oe=l(z);Dp=a(Oe,"Instead of writing it "),Ga=n(Oe,"CODE",{class:!0});var Ry=l(Ga);Cp=a(Ry,"n"),Ry.forEach(e),Tp=a(Oe," number of times, we can achieve it using a "),Ya=n(Oe,"CODE",{class:!0});var By=l(Ya);Op=a(By,"for"),By.forEach(e),Pp=a(Oe," loop:"),Oe.forEach(e),Ip=c(k),Qa=n(k,"DIV",{class:!0});var su=l(Qa);su.forEach(e),Lp=c(k),G=n(k,"P",{});var Pe=l(G);Sp=a(Pe,"And there you go, retrying an asynchronous function using "),Za=n(Pe,"CODE",{class:!0});var zy=l(Za);Hp=a(zy,"async"),zy.forEach(e),Mp=a(Pe," + "),Ka=n(Pe,"CODE",{class:!0});var Gy=l(Ka);jp=a(Gy,"await"),Gy.forEach(e),Ap=a(Pe,"."),Pe.forEach(e),k.forEach(e),wt=c(d),x=n(d,"SECTION",{});var f=l(x);st=n(f,"H2",{});var Yy=l(st);Ns=n(Yy,"A",{href:!0,id:!0});var Qy=l(Ns);Vp=a(Qy,"Testing"),Qy.forEach(e),Yy.forEach(e),Fp=c(f),Y=n(f,"P",{});var Ie=l(Y);Np=a(Ie,"To test whether our "),Xa=n(Ie,"CODE",{class:!0});var Zy=l(Xa);qp=a(Zy,"retry"),Zy.forEach(e),$p=a(Ie," function works, we need to have a max number of retry in mind, say 3. And we need a function, "),se=n(Ie,"CODE",{class:!0});var Ky=l(se);Wp=a(Ky,"fn"),Ky.forEach(e),Jp=a(Ie," that we can control when it succeed and when it failed."),Ie.forEach(e),Up=c(f),ot=n(f,"P",{});var Xy=l(ot);Rp=a(Xy,"So we can have the following test cases:"),Xy.forEach(e),Bp=c(f),M=n(f,"UL",{});var as=l(M);qs=n(as,"LI",{});var Gt=l(qs);oe=n(Gt,"CODE",{class:!0});var sv=l(oe);zp=a(sv,"fn"),sv.forEach(e),Gp=a(Gt," always succeed;"),$s=n(Gt,"UL",{});var Yt=l($s);Ws=n(Yt,"LI",{});var Qt=l(Ws);Yp=a(Qt,"verify "),ae=n(Qt,"CODE",{class:!0});var ov=l(ae);Qp=a(ov,"fn"),ov.forEach(e),Zp=a(Qt," get called only 1 time"),Qt.forEach(e),Kp=c(Yt),at=n(Yt,"LI",{});var av=l(at);Xp=a(av,"verify we get the return value from the 1st attempt"),av.forEach(e),Yt.forEach(e),Gt.forEach(e),sk=c(as),Js=n(as,"LI",{});var Zt=l(Js);ee=n(Zt,"CODE",{class:!0});var ev=l(ee);ok=a(ev,"fn"),ev.forEach(e),ak=a(Zt," failed on 1st attempt, and succeed thereafter;"),Us=n(Zt,"UL",{});var Kt=l(Us);Rs=n(Kt,"LI",{});var Xt=l(Rs);ek=a(Xt,"verify "),te=n(Xt,"CODE",{class:!0});var tv=l(te);tk=a(tv,"fn"),tv.forEach(e),nk=a(Xt," get called only 2 times"),Xt.forEach(e),lk=c(Kt),et=n(Kt,"LI",{});var nv=l(et);rk=a(nv,"verify we get the return value from the 2nd attempt"),nv.forEach(e),Kt.forEach(e),Zt.forEach(e),ik=c(as),Bs=n(as,"LI",{});var sn=l(Bs);ne=n(sn,"CODE",{class:!0});var lv=l(ne);ck=a(lv,"fn"),lv.forEach(e),pk=a(sn," failed on 1st, 2nd attempt, and succeed thereafter;"),zs=n(sn,"UL",{});var on=l(zs);Gs=n(on,"LI",{});var an=l(Gs);kk=a(an,"verify "),le=n(an,"CODE",{class:!0});var rv=l(le);hk=a(rv,"fn"),rv.forEach(e),yk=a(an," get called only 3 times"),an.forEach(e),vk=c(on),tt=n(on,"LI",{});var iv=l(tt);dk=a(iv,"verify we get the return value from the 3rd attempt"),iv.forEach(e),on.forEach(e),sn.forEach(e),uk=c(as),Ys=n(as,"LI",{});var en=l(Ys);re=n(en,"CODE",{class:!0});var cv=l(re);xk=a(cv,"fn"),cv.forEach(e),fk=a(en," failed on 1st, 2nd, 3rd attempt, and succeed thereafter;"),Qs=n(en,"UL",{});var tn=l(Qs);Zs=n(tn,"LI",{});var nn=l(Zs);wk=a(nn,"verify "),ie=n(nn,"CODE",{class:!0});var pv=l(ie);mk=a(pv,"fn"),pv.forEach(e),gk=a(nn," get called only 3 times"),nn.forEach(e),Ek=c(tn),nt=n(tn,"LI",{});var kv=l(nt);_k=a(kv,"verify we get the max retry error"),kv.forEach(e),tn.forEach(e),en.forEach(e),as.forEach(e),bk=c(f),Ks=n(f,"P",{});var ln=l(Ks);Dk=a(ln,"So, the key is to devise such "),ce=n(ln,"CODE",{class:!0});var hv=l(ce);Ck=a(hv,"fn"),hv.forEach(e),Tk=a(ln," that we can control when it succeed and when it failed."),ln.forEach(e),Ok=c(f),lt=n(f,"P",{});var yv=l(lt);Pk=a(yv,"We can create a function that returns such function"),yv.forEach(e),Ik=c(f),pe=n(f,"DIV",{class:!0});var ou=l(pe);ou.forEach(e),Lk=c(f),rt=n(f,"P",{});var vv=l(rt);Sk=a(vv,"The function takes in number indicating how many time the return function would fail, before succeeding thereafter"),vv.forEach(e),Hk=c(f),ke=n(f,"DIV",{class:!0});var au=l(ke);au.forEach(e),Mk=c(f),it=n(f,"P",{});var dv=l(it);jk=a(dv,"To know how many times the function is called, we can track it with a variable"),dv.forEach(e),Ak=c(f),he=n(f,"DIV",{class:!0});var eu=l(he);eu.forEach(e),Vk=c(f),ct=n(f,"P",{});var uv=l(ct);Fk=a(uv,"As long as the number of times called is less than the number of time it should fail, it will fail."),uv.forEach(e),Nk=c(f),ye=n(f,"DIV",{class:!0});var tu=l(ye);tu.forEach(e),qk=c(f),pt=n(f,"P",{});var xv=l(pt);$k=a(xv,'Next, to verify the function get called a certain number of times, we can create a "spy" function:'),xv.forEach(e),Wk=c(f),ve=n(f,"DIV",{class:!0});var nu=l(ve);nu.forEach(e),Jk=c(f),kt=n(f,"P",{});var fv=l(kt);Uk=a(fv,"So, let's put all of them together:"),fv.forEach(e),Rk=c(f),de=n(f,"DIV",{class:!0});var lu=l(de);lu.forEach(e),f.forEach(e),mt=c(d),T=n(d,"SECTION",{});var es=l(T);ht=n(es,"H2",{});var wv=l(ht);Xs=n(wv,"A",{href:!0,id:!0});var mv=l(Xs);Bk=a(mv,"Closing Note"),mv.forEach(e),wv.forEach(e),zk=c(es),Q=n(es,"P",{});var Le=l(Q);Gk=a(Le,"We've seen how we can retry an asynchronous function using the callback pattern, promise chain pattern and "),ue=n(Le,"CODE",{class:!0});var gv=l(ue);Yk=a(gv,"async"),gv.forEach(e),Qk=a(Le," + "),xe=n(Le,"CODE",{class:!0});var Ev=l(xe);Zk=a(Ev,"await"),Ev.forEach(e),Kk=a(Le,"."),Le.forEach(e),Xk=c(es),yt=n(es,"P",{});var _v=l(yt);sh=a(_v,"Each of the 3 methods is important in its on right, albeit some is more verbose than another."),_v.forEach(e),oh=c(es),vt=n(es,"P",{});var bv=l(vt);ah=a(bv,"Lastly, we also cover how to write test to verify our code, and also how to create the mock function to facilitate our test cases."),bv.forEach(e),es.forEach(e),this.h()},h(){r(ns,"href","#the-callback-pattern"),r(ns,"id","the-callback-pattern"),r(rs,"href","https://gist.github.com/sunnycmf/b2ad4f80a3b627f04ff2"),r(rs,"rel","nofollow"),r(eo,"class","code-section"),r(to,"class","inline"),r(no,"class","inline"),r(lo,"class","inline"),r(ro,"class","code-section"),r(io,"class","inline"),r(co,"class","code-section"),r(po,"class","inline"),r(ko,"class","code-section"),r(ho,"class","code-section"),r(yo,"class","inline"),r(ys,"href","http://callbackhell.com/"),r(ys,"rel","nofollow"),r(vo,"class","code-section"),r(uo,"class","inline"),r(xo,"class","inline"),r(fo,"class","inline"),r(wo,"class","code-section"),r(mo,"class","inline"),r(Ne,"type","image/webp"),r(Ne,"srcset",uu),r(qe,"type","image/png"),r(qe,"srcset",Tv),hu(ws.src,nh=Tv)||r(ws,"src",nh),r(ws,"loading","lazy"),r(ws,"alt","recursive pattern"),r(go,"class","code-section"),r(ms,"href","#the-promise-chain"),r(ms,"id","the-promise-chain"),r(Es,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"),r(Es,"rel","nofollow"),r(Eo,"class","inline"),r(_o,"class","inline"),r(bo,"class","inline"),r(Do,"class","inline"),r(Co,"class","code-section"),r(To,"class","inline"),r(Oo,"class","inline"),r(_s,"href","https://www.javascripttutorial.net/es6/promise-chaining/"),r(_s,"rel","nofollow"),r(Po,"class","inline"),r(Io,"class","inline"),r(Lo,"class","code-section"),r(So,"class","inline"),r(Ho,"class","code-section"),r(Mo,"class","inline"),r(jo,"class","inline"),r(Ao,"class","code-section"),r(Vo,"class","inline"),r(Fo,"class","code-section"),r(No,"class","inline"),r(qo,"class","inline"),r($o,"class","inline"),r(Wo,"class","inline"),r(Jo,"class","inline"),r(Uo,"class","inline"),r(Ro,"class","code-section"),r(Bo,"class","code-section"),r(zo,"class","inline"),r(Go,"class","code-section"),r(Yo,"class","inline"),r(Qo,"class","inline"),r(Zo,"class","code-section"),r(Ko,"class","inline"),r(Xo,"class","inline"),r(sa,"class","inline"),r(oa,"class","code-section"),r(aa,"class","inline"),r(ea,"class","inline"),r(ta,"class","inline"),r(na,"class","code-section"),r(la,"class","inline"),r(ra,"class","inline"),r(ia,"class","code-section"),r(Is,"href","#async-await"),r(Is,"id","async-await"),r(ca,"class","inline"),r(pa,"class","code-section"),r(ka,"class","code-section"),r(ha,"class","code-section"),r(ya,"class","inline"),r(va,"class","inline"),r(da,"class","inline"),r(ua,"class","inline"),r(xa,"class","inline"),r(fa,"class","code-section"),r(wa,"class","inline"),r(ma,"class","inline"),r(ga,"class","code-section"),r(Ea,"class","inline"),r(_a,"class","inline"),r(ba,"class","inline"),r(Da,"class","code-section"),r(Ca,"class","inline"),r(Ta,"class","code-section"),r(Oa,"class","inline"),r(Pa,"class","inline"),r(Ia,"class","inline"),r(La,"class","inline"),r(Sa,"class","inline"),r(Ha,"class","code-section"),r(Ma,"class","inline"),r(ja,"class","inline"),r(Aa,"class","code-section"),r(Va,"class","inline"),r(Fa,"class","code-section"),r(qa,"class","inline"),r($a,"class","code-section"),r(Wa,"class","inline"),r(Ja,"class","inline"),r(Ua,"class","code-section"),r(Ra,"class","inline"),r(Ba,"class","inline"),r(za,"class","code-section"),r(Ga,"class","inline"),r(Ya,"class","inline"),r(Qa,"class","code-section"),r(Za,"class","inline"),r(Ka,"class","inline"),r(Ns,"href","#testing"),r(Ns,"id","testing"),r(Xa,"class","inline"),r(se,"class","inline"),r(oe,"class","inline"),r(ae,"class","inline"),r(ee,"class","inline"),r(te,"class","inline"),r(ne,"class","inline"),r(le,"class","inline"),r(re,"class","inline"),r(ie,"class","inline"),r(ce,"class","inline"),r(pe,"class","code-section"),r(ke,"class","code-section"),r(he,"class","code-section"),r(ye,"class","code-section"),r(ve,"class","code-section"),r(de,"class","code-section"),r(Xs,"href","#closing-note"),r(Xs,"id","closing-note"),r(ue,"class","inline"),r(xe,"class","inline")},m(d,g){Lv(w,d,g),E(d,O,g),E(d,C,g),s(C,ts),E(d,m,g),E(d,_,g),s(_,oo),E(d,dt,g),E(d,ao,g),s(ao,rn),E(d,ut,g),E(d,v,g),s(v,Se),s(Se,ns),s(ns,cn),s(v,pn),s(v,ls),s(ls,kn),s(ls,rs),s(rs,hn),s(ls,yn),s(v,vn),s(v,is),s(is,He),s(He,dn),s(is,un),s(is,Me),s(Me,xn),s(v,fn),s(v,eo),eo.innerHTML=jv,s(v,wn),s(v,P),s(P,mn),s(P,to),s(to,gn),s(P,En),s(P,no),s(no,_n),s(P,bn),s(P,lo),s(lo,Dn),s(P,Cn),s(v,Tn),s(v,ro),ro.innerHTML=Av,s(v,On),s(v,cs),s(cs,Pn),s(cs,io),s(io,In),s(cs,Ln),s(v,Sn),s(v,co),co.innerHTML=Vv,s(v,Hn),s(v,ps),s(ps,Mn),s(ps,po),s(po,jn),s(ps,An),s(v,Vn),s(v,ko),ko.innerHTML=Fv,s(v,Fn),s(v,je),s(je,Nn),s(v,qn),s(v,ho),ho.innerHTML=Nv,s(v,$n),s(v,ks),s(ks,Wn),s(ks,yo),s(yo,Jn),s(ks,Un),s(v,Rn),s(v,hs),s(hs,Bn),s(hs,ys),s(ys,zn),s(hs,Gn),s(v,Yn),s(v,Ae),s(Ae,Qn),s(v,Zn),s(v,vo),vo.innerHTML=qv,s(v,Kn),s(v,vs),s(vs,Xn),s(vs,uo),s(uo,sl),s(vs,ol),s(v,al),s(v,ds),s(ds,el),s(ds,xo),s(xo,tl),s(ds,nl),s(v,ll),s(v,us),s(us,rl),s(us,fo),s(fo,il),s(us,cl),s(v,pl),s(v,wo),wo.innerHTML=$v,s(v,kl),s(v,xs),s(xs,hl),s(xs,mo),s(mo,yl),s(xs,vl),s(v,dl),s(v,Ve),s(Ve,ul),s(v,xl),s(v,Fe),s(Fe,fs),s(fs,Ne),s(fs,qe),s(fs,ws),s(v,fl),s(v,$e),s($e,wl),s(v,ml),s(v,We),s(We,gl),s(v,El),s(v,go),go.innerHTML=Wv,s(v,_l),s(v,Je),s(Je,bl),s(v,Dl),s(v,Ue),s(Ue,Cl),E(d,xt,g),E(d,h,g),s(h,Re),s(Re,ms),s(ms,Tl),s(h,Ol),s(h,gs),s(gs,Pl),s(gs,Es),s(Es,Il),s(gs,Ll),s(h,Sl),s(h,D),s(D,Hl),s(D,Eo),s(Eo,Ml),s(D,jl),s(D,_o),s(_o,Al),s(D,Vl),s(D,bo),s(bo,Fl),s(D,Nl),s(D,Do),s(Do,ql),s(D,$l),s(h,Wl),s(h,Co),Co.innerHTML=Jv,s(h,Jl),s(h,I),s(I,Ul),s(I,To),s(To,Rl),s(I,Bl),s(I,Oo),s(Oo,zl),s(I,Gl),s(I,_s),s(_s,Yl),s(I,Ql),s(h,Zl),s(h,V),s(V,Kl),s(V,Po),s(Po,Xl),s(V,sr),s(V,Io),s(Io,or),s(V,ar),s(h,er),s(h,Lo),Lo.innerHTML=Uv,s(h,tr),s(h,bs),s(bs,nr),s(bs,So),s(So,lr),s(bs,rr),s(h,ir),s(h,Ho),Ho.innerHTML=Rv,s(h,cr),s(h,F),s(F,pr),s(F,Mo),s(Mo,kr),s(F,hr),s(F,jo),s(jo,yr),s(F,vr),s(h,dr),s(h,Ao),Ao.innerHTML=Bv,s(h,ur),s(h,Ds),s(Ds,xr),s(Ds,Vo),s(Vo,fr),s(Ds,wr),s(h,mr),s(h,Fo),Fo.innerHTML=zv,s(h,gr),s(h,L),s(L,Er),s(L,Be),s(Be,_r),s(L,br),s(L,No),s(No,Dr),s(L,Cr),s(L,qo),s(qo,Tr),s(L,Or),s(h,Pr),s(h,N),s(N,Ir),s(N,$o),s($o,Lr),s(N,Sr),s(N,Wo),s(Wo,Hr),s(N,Mr),s(h,jr),s(h,q),s(q,Ar),s(q,Jo),s(Jo,Vr),s(q,Fr),s(q,Uo),s(Uo,Nr),s(q,qr),s(h,$r),s(h,Ro),Ro.innerHTML=Gv,s(h,Wr),s(h,ze),s(ze,Jr),s(h,Ur),s(h,Bo),Bo.innerHTML=Yv,s(h,Rr),s(h,Cs),s(Cs,Br),s(Cs,zo),s(zo,zr),s(Cs,Gr),s(h,Yr),s(h,Go),Go.innerHTML=Qv,s(h,Qr),s(h,Ts),s(Ts,Zr),s(Ts,Yo),s(Yo,Kr),s(Ts,Xr),s(h,si),s(h,Os),s(Os,oi),s(Os,Qo),s(Qo,ai),s(Os,ei),s(h,ti),s(h,Zo),Zo.innerHTML=Zv,s(h,ni),s(h,$),s($,li),s($,Ko),s(Ko,ri),s($,ii),s($,Xo),s(Xo,ci),s($,pi),s(h,ki),s(h,Ge),s(Ge,Ps),s(Ps,hi),s(Ps,sa),s(sa,yi),s(Ps,vi),s(h,di),s(h,oa),oa.innerHTML=Kv,s(h,ui),s(h,S),s(S,xi),s(S,aa),s(aa,fi),s(S,wi),s(S,ea),s(ea,mi),s(S,gi),s(S,ta),s(ta,Ei),s(S,_i),s(h,bi),s(h,na),na.innerHTML=Xv,s(h,Di),s(h,W),s(W,Ci),s(W,la),s(la,Ti),s(W,Oi),s(W,ra),s(ra,Pi),s(W,Ii),s(h,Li),s(h,ia),ia.innerHTML=sd,s(h,Si),s(h,Ye),s(Ye,Hi),E(d,ft,g),E(d,p,g),s(p,Qe),s(Qe,Is),s(Is,Mi),s(p,ji),s(p,Ls),s(Ls,Ai),s(Ls,ca),s(ca,Vi),s(Ls,Fi),s(p,Ni),s(p,Ze),s(Ze,qi),s(p,$i),s(p,pa),pa.innerHTML=od,s(p,Wi),s(p,Ke),s(Ke,Ji),s(p,Ui),s(p,ka),ka.innerHTML=ad,s(p,Ri),s(p,Xe),s(Xe,Bi),s(p,zi),s(p,ha),ha.innerHTML=ed,s(p,Gi),s(p,Ss),s(Ss,Yi),s(Ss,ya),s(ya,Qi),s(Ss,Zi),s(p,Ki),s(p,J),s(J,Xi),s(J,va),s(va,sc),s(J,oc),s(J,da),s(da,ac),s(J,ec),s(p,tc),s(p,Hs),s(Hs,nc),s(Hs,ua),s(ua,lc),s(Hs,rc),s(p,ic),s(p,Ms),s(Ms,cc),s(Ms,xa),s(xa,pc),s(Ms,kc),s(p,hc),s(p,fa),fa.innerHTML=td,s(p,yc),s(p,U),s(U,vc),s(U,wa),s(wa,dc),s(U,uc),s(U,ma),s(ma,xc),s(U,fc),s(p,wc),s(p,ga),ga.innerHTML=nd,s(p,mc),s(p,H),s(H,gc),s(H,Ea),s(Ea,Ec),s(H,_c),s(H,_a),s(_a,bc),s(H,Dc),s(H,ba),s(ba,Cc),s(H,Tc),s(p,Oc),s(p,Da),Da.innerHTML=ld,s(p,Pc),s(p,js),s(js,Ic),s(js,Ca),s(Ca,Lc),s(js,Sc),s(p,Hc),s(p,Ta),Ta.innerHTML=rd,s(p,Mc),s(p,b),s(b,jc),s(b,Oa),s(Oa,Ac),s(b,Vc),s(b,Pa),s(Pa,Fc),s(b,Nc),s(b,Ia),s(Ia,qc),s(b,$c),s(b,La),s(La,Wc),s(b,Jc),s(b,Sa),s(Sa,Uc),s(p,Rc),s(p,Ha),Ha.innerHTML=id,s(p,Bc),s(p,R),s(R,zc),s(R,Ma),s(Ma,Gc),s(R,Yc),s(R,ja),s(ja,Qc),s(R,Zc),s(p,Kc),s(p,Aa),Aa.innerHTML=cd,s(p,Xc),s(p,As),s(As,sp),s(As,Va),s(Va,op),s(As,ap),s(p,ep),s(p,Fa),Fa.innerHTML=pd,s(p,tp),s(p,Na),s(Na,np),s(Na,qa),s(qa,lp),s(p,rp),s(p,$a),$a.innerHTML=kd,s(p,ip),s(p,B),s(B,cp),s(B,Wa),s(Wa,pp),s(B,kp),s(B,Ja),s(Ja,hp),s(B,yp),s(p,vp),s(p,Ua),Ua.innerHTML=hd,s(p,dp),s(p,Vs),s(Vs,up),s(Vs,Ra),s(Ra,xp),s(Vs,fp),s(p,wp),s(p,Fs),s(Fs,mp),s(Fs,Ba),s(Ba,gp),s(Fs,Ep),s(p,_p),s(p,za),za.innerHTML=yd,s(p,bp),s(p,z),s(z,Dp),s(z,Ga),s(Ga,Cp),s(z,Tp),s(z,Ya),s(Ya,Op),s(z,Pp),s(p,Ip),s(p,Qa),Qa.innerHTML=vd,s(p,Lp),s(p,G),s(G,Sp),s(G,Za),s(Za,Hp),s(G,Mp),s(G,Ka),s(Ka,jp),s(G,Ap),E(d,wt,g),E(d,x,g),s(x,st),s(st,Ns),s(Ns,Vp),s(x,Fp),s(x,Y),s(Y,Np),s(Y,Xa),s(Xa,qp),s(Y,$p),s(Y,se),s(se,Wp),s(Y,Jp),s(x,Up),s(x,ot),s(ot,Rp),s(x,Bp),s(x,M),s(M,qs),s(qs,oe),s(oe,zp),s(qs,Gp),s(qs,$s),s($s,Ws),s(Ws,Yp),s(Ws,ae),s(ae,Qp),s(Ws,Zp),s($s,Kp),s($s,at),s(at,Xp),s(M,sk),s(M,Js),s(Js,ee),s(ee,ok),s(Js,ak),s(Js,Us),s(Us,Rs),s(Rs,ek),s(Rs,te),s(te,tk),s(Rs,nk),s(Us,lk),s(Us,et),s(et,rk),s(M,ik),s(M,Bs),s(Bs,ne),s(ne,ck),s(Bs,pk),s(Bs,zs),s(zs,Gs),s(Gs,kk),s(Gs,le),s(le,hk),s(Gs,yk),s(zs,vk),s(zs,tt),s(tt,dk),s(M,uk),s(M,Ys),s(Ys,re),s(re,xk),s(Ys,fk),s(Ys,Qs),s(Qs,Zs),s(Zs,wk),s(Zs,ie),s(ie,mk),s(Zs,gk),s(Qs,Ek),s(Qs,nt),s(nt,_k),s(x,bk),s(x,Ks),s(Ks,Dk),s(Ks,ce),s(ce,Ck),s(Ks,Tk),s(x,Ok),s(x,lt),s(lt,Pk),s(x,Ik),s(x,pe),pe.innerHTML=dd,s(x,Lk),s(x,rt),s(rt,Sk),s(x,Hk),s(x,ke),ke.innerHTML=ud,s(x,Mk),s(x,it),s(it,jk),s(x,Ak),s(x,he),he.innerHTML=xd,s(x,Vk),s(x,ct),s(ct,Fk),s(x,Nk),s(x,ye),ye.innerHTML=fd,s(x,qk),s(x,pt),s(pt,$k),s(x,Wk),s(x,ve),ve.innerHTML=wd,s(x,Jk),s(x,kt),s(kt,Uk),s(x,Rk),s(x,de),de.innerHTML=md,E(d,mt,g),E(d,T,g),s(T,ht),s(ht,Xs),s(Xs,Bk),s(T,zk),s(T,Q),s(Q,Gk),s(Q,ue),s(ue,Yk),s(Q,Qk),s(Q,xe),s(xe,Zk),s(Q,Kk),s(T,Xk),s(T,yt),s(yt,sh),s(T,oh),s(T,vt),s(vt,ah),gt=!0},p:yu,i(d){gt||(Sv(w.$$.fragment,d),gt=!0)},o(d){Hv(w.$$.fragment,d),gt=!1},d(d){Mv(w,d),d&&e(O),d&&e(C),d&&e(m),d&&e(_),d&&e(dt),d&&e(ao),d&&e(ut),d&&e(v),d&&e(xt),d&&e(h),d&&e(ft),d&&e(p),d&&e(wt),d&&e(x),d&&e(mt),d&&e(T)}}}function wu(so){let w,O;const C=[so[0],Ov];let ts={$$slots:{default:[fu]},$$scope:{ctx:so}};for(let m=0;m<C.length;m+=1)ts=th(ts,C[m]);return w=new vu({props:ts}),{c(){Pv(w.$$.fragment)},l(m){Iv(w.$$.fragment,m)},m(m,_){Lv(w,m,_),O=!0},p(m,[_]){const oo=_&1?pu(C,[_&1&&Dv(m[0]),_&0&&Dv(Ov)]):{};_&2&&(oo.$$scope={dirty:_,ctx:m}),w.$set(oo)},i(m){O||(Sv(w.$$.fragment,m),O=!0)},o(m){Hv(w.$$.fragment,m),O=!1},d(m){Mv(w,m)}}}const Ov={title:"Retry asynchronous function using the callback pattern, promise chain and async await",date:"2020-06-21T08:00:00Z",tags:["JavaScript","Asynchronous","Problem Solving"],description:"How to retry asynchronous function using the callback pattern, promise chain and async await. Mental model for asynchronous JavaScript.",label:"blog"};function mu(so,w,O){return ku("blog",{image:xu}),so.$$set=C=>{O(0,w=th(th({},w),Cv(C)))},w=Cv(w),[w]}class Tu extends ru{constructor(w){super();iu(this,w,mu,wu,cu,{})}}export{Tu as default,Ov as metadata};
