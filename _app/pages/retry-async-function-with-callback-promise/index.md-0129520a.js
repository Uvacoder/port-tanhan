import{S as cu,i as pu,s as ku,C as nh,w as Lv,x as Sv,y as Hv,z as hu,A as Tv,q as Mv,o as jv,B as Av,r as yu,R as Pv,k as i,e as t,t as o,m as c,c as n,a as l,h as a,d as e,b as r,Q as vu,f as ls,g as _,F as s,O as du}from"../../chunks/vendor-569a3c5c.js";import{B as uu}from"../../chunks/BlogLayout-17b76cb2.js";import{T as xu}from"../../chunks/TableOfContent-dbc18cb8.js";import"../../chunks/stores-ee936cd4.js";import"../../chunks/WebMentions-968cc380.js";/* empty css                                */var fu="/_app/assets/recursive-4fb6e38d.webp",wu="/_app/assets/recursive-78d11ada.webp",mu="/_app/assets/recursive-aea82d56.png",Ov="/_app/assets/recursive-4f6ef114.png",gu="/_app/assets/hero-twitter-d9078b01.jpg";function _u(oo){let w,O,C,rs,m,E,ao,ut,eo,rn,xt,v,Me,is,cn,pn,cs,kn,ps,hn,yn,vn,ks,je,dn,un,Ae,xn,fn,to,Vv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">callback</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> result) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,wn,I,mn,no,gn,_n,lo,En,bn,ro,Dn,Cn,Tn,io,Fv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> cb) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">//</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Pn,hs,On,co,In,Ln,Sn,po,Nv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> cb) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">//</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Hn,ys,Mn,ko,jn,An,Vn,ho,qv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> cb) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">error) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">//</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125;);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Fn,Ve,Nn,qn,yo,$v=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> cb) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// 1st attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">error) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// 2nd attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">error) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-comment)">// 3rd attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">error) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-comment)">// failed for 3 times</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Failed retrying 3 times&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,$n,vs,Wn,vo,Jn,Un,Rn,ds,Bn,us,zn,Gn,Yn,Fe,Qn,Zn,uo,Wv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> cb) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// 1st attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (error) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// 2nd attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (error) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-comment)">// 3rd attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (error) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-comment)">// failed for 3 times</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Failed retrying 3 times&#39;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">            &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Kn,xs,Xn,xo,sl,ol,al,fs,el,fo,tl,nl,ll,ws,rl,wo,il,cl,pl,mo,Jv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> n</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> cb) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> attempt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// 1st attempt</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">error) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (attempt</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> n) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Failed retrying </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">n</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> times&#96;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-comment)">// 2nd attempt</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">error) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">          &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">            </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (attempt</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> n) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Failed retrying </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">n</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> times&#96;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">            &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">              </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-comment)">/* this goes forever ...*/</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">            &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">          &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,kl,ms,hl,go,yl,vl,dl,Ne,ul,xl,qe,F,_o,$e,T,lh,fl,We,wl,ml,Je,gl,_l,Eo,Uv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> n</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> cb) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> attempt </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">_retry</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">error) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (attempt</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> n) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">cb</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Failed retrying </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">n</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> times&#96;</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">          </span><span style="color: var(--shiki-token-function)">_retry</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line highlight"></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">_retry</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,El,Ue,bl,Dl,Re,Cl,ft,h,Be,gs,Tl,Pl,_s,Ol,Es,Il,Ll,Sl,D,Hl,bo,Ml,jl,Do,Al,Vl,Co,Fl,Nl,To,ql,$l,Wl,Po,Rv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">getPromiseA</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// a promise</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(handleA) </span><span style="color: var(--shiki-token-comment)">// returns a new promise</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(handleB); </span><span style="color: var(--shiki-token-comment)">// returns another new promise</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">getPromiseB</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// a promise</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(handleA) </span><span style="color: var(--shiki-token-comment)">// returns a new promise</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(handleB); </span><span style="color: var(--shiki-token-comment)">// returns another new promise</span></span></code></pre>`,Jl,L,Ul,Oo,Rl,Bl,Io,zl,Gl,bs,Yl,Ql,Zl,N,Kl,Lo,Xl,sr,So,or,ar,er,Ho,Bv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">//</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,tr,Ds,nr,Mo,lr,rr,ir,jo,zv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(); </span><span style="color: var(--shiki-token-comment)">// returns a promise</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,cr,q,pr,Ao,kr,hr,Vo,yr,vr,dr,Fo,Gv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// returns a promise</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">()); </span><span style="color: var(--shiki-token-comment)">// returns a new promise</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ur,Cs,xr,No,fr,wr,mr,qo,Yv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// returns a promise (promise#1)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">()) </span><span style="color: var(--shiki-token-comment)">// returns a new promise (promise#2)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">()); </span><span style="color: var(--shiki-token-comment)">// returns yet a new promise (promise#3)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,gr,S,_r,ze,Er,br,$o,Dr,Cr,Wo,Tr,Pr,Or,$,Ir,Jo,Lr,Sr,Uo,Hr,Mr,jr,W,Ar,Ro,Vr,Fr,Bo,Nr,qr,$r,zo,Qv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">promise3</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// returns a promise (promise#1)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">()) </span><span style="color: var(--shiki-token-comment)">// returns a new promise (promise#2)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">()); </span><span style="color: var(--shiki-token-comment)">// returns yet a new promise (promise#3)</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">promise3</span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    data </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> data</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// resolved with the result from &#96;fn()&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// reject with the max retry error</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Failed retrying 3 times&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  );</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Wr,Ge,Jr,Ur,Go,Zv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-constant)">promise3</span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  data </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> data</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// resolved with the result from &#96;fn()&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// reject with the max retry error</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Failed retrying 3 times&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// is equivalent to</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">promise3 </span><span style="color: var(--shiki-token-comment)">// resolved with the result from &#96;fn()&#96;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// reject with the max retry error</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Failed retrying 3 times&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span></code></pre>`,Rr,Ts,Br,Yo,zr,Gr,Yr,Qo,Kv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-comment)">// prettier-ignore</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// returns a promise (promise#1)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">()) </span><span style="color: var(--shiki-token-comment)">// returns a new promise (promise#2)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">()) </span><span style="color: var(--shiki-token-comment)">// returns yet a new promise (promise#3)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// reject with the max retry error</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Failed retrying 3 times&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Qr,Ps,Zr,Zo,Kr,Xr,si,Os,oi,Ko,ai,ei,ti,Xo,Xv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// prettier-ignore</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> n) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-comment)">// attempt #1</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">()) </span><span style="color: var(--shiki-token-comment)">// attempt #2</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">()) </span><span style="color: var(--shiki-token-comment)">// attempt #n</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Failed retrying </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">n</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> times&#96;</span><span style="color: var(--shiki-color-text)">); &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ni,J,li,sa,ri,ii,oa,ci,pi,ki,Ye,Is,hi,aa,yi,vi,di,ea,sd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> n) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> promise </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> n; i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    promise </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">promise</span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">promise</span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Failed retrying </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">n</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> times&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> promise;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ui,H,xi,ta,fi,wi,na,mi,gi,la,_i,Ei,bi,ra,od=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> n) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> promise;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> n; i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-color-text)">promise) promise </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> promise </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">promise</span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">promise</span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Failed retrying </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">n</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> times&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> promise;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Di,U,Ci,ia,Ti,Pi,ca,Oi,Ii,Li,pa,ad=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> n) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> promise </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Promise</span><span style="color: var(--shiki-token-function)">.reject</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> n; i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    promise </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">promise</span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">promise</span><span style="color: var(--shiki-token-function)">.catch</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Failed retrying </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">n</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> times&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> promise;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Si,Qe,Hi,wt,p,Ze,Ls,Mi,ji,Ss,Ai,ka,Vi,Fi,Ni,Ke,qi,$i,ha,ed=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> value;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">promise</span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(data </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> data;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;resolved&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;here&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value);</span></span></code></pre>`,Wi,Xe,Ji,Ui,ya,td='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-string-expression)">&quot;here&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">undefined</span></span></code></pre>',Ri,st,Bi,zi,va,nd='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-string-expression)">&quot;resolved&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;value&quot;</span></span></code></pre>',Gi,Hs,Yi,da,Qi,Zi,Ki,R,Xi,ua,sc,oc,xa,ac,ec,tc,Ms,nc,fa,lc,rc,ic,js,cc,wa,pc,kc,hc,ma,ld=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// timeline #1</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  promise</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(data </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// timeline #2</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">doSomething</span><span style="color: var(--shiki-color-text)">(data);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;)</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(data2 </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// timeline #3</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">doAnotherThing</span><span style="color: var(--shiki-color-text)">(data2);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// timeline #1</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,yc,B,vc,ga,dc,uc,_a,xc,fc,wc,Ea,rd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">foo</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// timeline #1</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> data </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> promise;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// timeline #2</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> data2 </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">doSomething</span><span style="color: var(--shiki-color-text)">(data);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// timeline #3</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">doAnotherThing</span><span style="color: var(--shiki-color-text)">(data2);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,mc,M,gc,ba,_c,Ec,Da,bc,Dc,Ca,Cc,Tc,Pc,Ta,id=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">//</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Oc,As,Ic,Pa,Lc,Sc,Hc,Oa,cd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(); </span><span style="color: var(--shiki-token-comment)">// returns a promise</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Mc,b,jc,Ia,Ac,Vc,La,Fc,Nc,Sa,qc,$c,Ha,Wc,Jc,Ma,Uc,Rc,ja,pd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Bc,z,zc,Aa,Gc,Yc,Va,Qc,Zc,Kc,Fa,kd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Xc,Vs,sp,Na,op,ap,ep,qa,hd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Failed retrying 3 times&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,tp,$a,np,Wa,lp,rp,Ja,yd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Failed retrying 3 times&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ip,G,cp,Ua,pp,kp,Ra,hp,yp,vp,Ba,vd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Failed retrying 3 times&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,dp,Fs,up,za,xp,fp,wp,Ns,mp,Ga,gp,_p,Ep,Ya,dd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> n) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(); </span><span style="color: var(--shiki-token-comment)">// 1st attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(); </span><span style="color: var(--shiki-token-comment)">// 2nd attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(); </span><span style="color: var(--shiki-token-comment)">// nth attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Failed retrying </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">n</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> times&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,bp,Y,Dp,Qa,Cp,Tp,Za,Pp,Op,Ip,Ka,ud=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> n) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> n; i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">try</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">catch</span><span style="color: var(--shiki-color-text)"> &#123;&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">throw</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;Failed retrying </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">n</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> times&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Lp,Q,Sp,Xa,Hp,Mp,se,jp,Ap,mt,x,ot,qs,Vp,Fp,Z,Np,oe,qp,$p,ae,Wp,Jp,Up,at,Rp,Bp,j,$s,ee,zp,Gp,Ws,Js,Yp,te,Qp,Zp,Kp,et,Xp,sk,Us,ne,ok,ak,Rs,Bs,ek,le,tk,nk,lk,tt,rk,ik,zs,re,ck,pk,Gs,Ys,kk,ie,hk,yk,vk,nt,dk,uk,Qs,ce,xk,fk,Zs,Ks,wk,pe,mk,gk,_k,lt,Ek,bk,Xs,Dk,ke,Ck,Tk,Pk,rt,Ok,Ik,he,xd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">mockFnFactory</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">() &#123;&#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Lk,it,Sk,Hk,ye,fd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line highlight"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">mockFnFactory</span><span style="color: var(--shiki-color-text)">(numFailure) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">() &#123;&#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Mk,ct,jk,Ak,ve,wd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">mockFnFactory</span><span style="color: var(--shiki-color-text)">(numFailure) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> numCalls </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    numCalls</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Vk,pt,Fk,Nk,de,md=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// calback version</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">mockFnFactory</span><span style="color: var(--shiki-color-text)">(numFailure) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> numCalls </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(callback) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    numCalls</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (numCalls </span><span style="color: var(--shiki-token-keyword)">&lt;=</span><span style="color: var(--shiki-color-text)"> numFailure) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">callback</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">callback</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">null</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> numCalls);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// promise version</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">mockFnFactory</span><span style="color: var(--shiki-color-text)">(numFailure) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> numCalls </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(callback) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    numCalls</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (numCalls </span><span style="color: var(--shiki-token-keyword)">&lt;=</span><span style="color: var(--shiki-color-text)"> numFailure) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Promise</span><span style="color: var(--shiki-token-function)">.reject</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Error</span><span style="color: var(--shiki-color-text)">());</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Promise</span><span style="color: var(--shiki-token-function)">.resolve</span><span style="color: var(--shiki-color-text)">(numCalls);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,qk,kt,$k,Wk,ue,gd=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">spy</span><span style="color: var(--shiki-color-text)">(fn) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> numCalled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">args) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      numCalled</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">fn</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">args);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">getNumberOfTimesCalled</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> numCalled;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Jk,ht,Uk,Rk,xe,_d=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">describe</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#96;fn&#96; failed on 1st attempt, and succeed thereafter (callback based)&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fn</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">mockFnFactory</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">spied</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">spy</span><span style="color: var(--shiki-color-text)">(fn);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// retry at most 3 times</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">spied</span><span style="color: var(--shiki-color-text)">.fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> (error</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// verify &#96;fn&#96; get called only 2 times</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">assert</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">spied</span><span style="color: var(--shiki-token-function)">.getNumberOfTimesCalled</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// verify we get the return value from the 2nd attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">assert</span><span style="color: var(--shiki-color-text)">(data </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">describe</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;&#96;fn&#96; failed on 1st attempt, and succeed thereafter (promise based)&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> () </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">fn</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">mockFnFactory</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">spied</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">spy</span><span style="color: var(--shiki-color-text)">(fn);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// retry at most 3 times</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">retry</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">spied</span><span style="color: var(--shiki-color-text)">.fn</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-function)">.then</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    data </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// verify &#96;fn&#96; get called only 2 times</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">assert</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">spied</span><span style="color: var(--shiki-token-function)">.getNumberOfTimesCalled</span><span style="color: var(--shiki-color-text)">() </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// verify we get the return value from the 2nd attempt</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">assert</span><span style="color: var(--shiki-color-text)">(data </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    error </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;&#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  );</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,gt,P,yt,so,Bk,zk,K,Gk,fe,Yk,Qk,we,Zk,Kk,Xk,vt,sh,oh,dt,ah,_t;return w=new xu({props:{data:[{link:"the-callback-pattern",title:"The callback pattern"},{link:"the-promise-chain",title:"The promise chain"},{link:"async-await",title:"Async await"},{link:"testing",title:"Testing"},{link:"closing-note",title:"Closing Note"}]}}),{c(){Lv(w.$$.fragment),O=i(),C=t("p"),rs=o("JavaScript is a single-threaded programming language, which means only one thing can happen at a time in a single thread."),m=i(),E=t("p"),ao=o("That\u2019s where asynchronous JavaScript comes into play. Using asynchronous JavaScript (such as callbacks, promises, and async/await), you can perform long network requests without blocking the main thread."),ut=i(),eo=t("p"),rn=o("In this article, I'm going to show how you can retry an asynchronous function in JavaScript, using the callback pattern, promise chain pattern and async await. Also, I'll show you how to write test to verify it works."),xt=i(),v=t("section"),Me=t("h2"),is=t("a"),cn=o("The callback pattern"),pn=i(),cs=t("p"),kn=o("Let's take a look at retrying asynchronous function that takes in a callback function that follows "),ps=t("a"),hn=o("the callback convention"),yn=o(":"),vn=i(),ks=t("ul"),je=t("li"),dn=o("The first argument of the callback function is an error object"),un=i(),Ae=t("li"),xn=o("The second argument contains the callback results."),fn=i(),to=t("div"),wn=i(),I=t("p"),mn=o("So we are going to implement the "),no=t("code"),gn=o("retry"),_n=o(" function, that takes in the asynchronous function to retry, "),lo=t("code"),En=o("fn"),bn=o(" and a callback function, "),ro=t("code"),Dn=o("cb"),Cn=o(", that will be called when the function succeeded or failed after all the retry attempts."),Tn=i(),io=t("div"),Pn=i(),hs=t("p"),On=o("The first thing we are going to do is to call the function "),co=t("code"),In=o("fn"),Ln=o(":"),Sn=i(),po=t("div"),Hn=i(),ys=t("p"),Mn=o("We check if there's an error, if there's no error, we can call the "),ko=t("code"),jn=o("cb"),An=o(" function to indicate the function succeeded. However, if there's an error, we are going to call the function again to retry."),Vn=i(),ho=t("div"),Fn=i(),Ve=t("p"),Nn=o("Let's retry at most 3 times:"),qn=i(),yo=t("div"),$n=i(),vs=t("p"),Wn=o("Notice that it starts to get unwieldy as we are nesting more callback functions. It's hard to figure out which close bracket "),vo=t("code"),Jn=o("}"),Un=o(" is belong to without proper indentation."),Rn=i(),ds=t("p"),Bn=o("This is the so-called "),us=t("a"),zn=o('"Callback Hell"'),Gn=o(" in JavaScript."),Yn=i(),Fe=t("p"),Qn=o("Let's make it more unbearable to prove the point by flipping the if case:"),Zn=i(),uo=t("div"),Kn=i(),xs=t("p"),Xn=o("Now can you tell which "),xo=t("code"),sl=o("data"),ol=o(" is belong to which function?"),al=i(),fs=t("p"),el=o("Now, instead of always retry at most 3 times, we are going to retry at most "),fo=t("code"),tl=o("n"),nl=o(" times."),ll=i(),ws=t("p"),rl=o("So we are going to introduce a new argument, "),wo=t("code"),il=o("n"),cl=o(":"),pl=i(),mo=t("div"),kl=i(),ms=t("p"),hl=o("The function keeps going forever, until it reaches "),go=t("code"),yl=o("n"),vl=o(" attempt."),dl=i(),Ne=t("p"),ul=o("If you stare at the code hard enough, you would notice that the code starts to repeat itself:"),xl=i(),qe=t("p"),F=t("span"),_o=t("picture"),$e=t("source"),T=t("img"),fl=i(),We=t("p"),wl=o("Note that the code within the outer red square is the same as the code within the inner red square, which is the same as the inner inner red square ..."),ml=i(),Je=t("p"),gl=o("So, let's extract the code within the red square out into a function and replace the red squares with the function:"),_l=i(),Eo=t("div"),El=i(),Ue=t("p"),bl=o("And there you go, retrying an asynchronous function with callback pattern."),Dl=i(),Re=t("p"),Cl=o("Does it work? Well, we have to test it to verify it. Stay till the end to see how we are going to write unit test to verify it."),ft=i(),h=t("section"),Be=t("h2"),gs=t("a"),Tl=o("The promise chain"),Pl=i(),_s=t("p"),Ol=o("A "),Es=t("a"),Il=o("Promise"),Ll=o(", according to MDN, object represents the eventual completion of an asynchronous operation, and its resulting value."),Sl=i(),D=t("p"),Hl=o("A Promise object provides "),bo=t("code"),Ml=o(".then"),jl=o(" and "),Do=t("code"),Al=o(".catch"),Vl=o(" method, which takes in callback function to be called when the promise is resolved or rejected respectively. The "),Co=t("code"),Fl=o(".then"),Nl=o(" and "),To=t("code"),ql=o(".catch"),$l=o(" method then returns a new Promise of the return value of the callback function."),Wl=i(),Po=t("div"),Jl=i(),L=t("p"),Ul=o("The chaining of "),Oo=t("code"),Rl=o(".then"),Bl=o(" and "),Io=t("code"),zl=o(".catch"),Gl=o(" is a common pattern, called "),bs=t("a"),Yl=o("Promise chaining"),Ql=o("."),Zl=i(),N=t("p"),Kl=o("Now, lets implement the "),Lo=t("code"),Xl=o("retry"),sr=o(" function, which takes in the asynchronous function to retry, "),So=t("code"),or=o("fn"),ar=o(" and return a promise, which resolved when the function succeeded or resolved after failing all the retry attempts."),er=i(),Ho=t("div"),tr=i(),Ds=t("p"),nr=o("The first thing we are going to do is to call the function "),Mo=t("code"),lr=o("fn"),rr=o(":"),ir=i(),jo=t("div"),cr=i(),q=t("p"),pr=o("We need to retry calling "),Ao=t("code"),kr=o("fn"),hr=o(" again, if the first "),Vo=t("code"),yr=o("fn"),vr=o(" is rejected"),dr=i(),Fo=t("div"),ur=i(),Cs=t("p"),xr=o("If that new promise rejected again, we retry by calling "),No=t("code"),fr=o("fn"),wr=o(" again"),mr=i(),qo=t("div"),gr=i(),S=t("p"),_r=o("The last promise "),ze=t("em"),Er=o("(promise#3)"),br=o(" will reject if the 3rd "),$o=t("code"),Dr=o("fn()"),Cr=o(" attempt rejects, and resolve if any of the "),Wo=t("code"),Tr=o("fn()"),Pr=o(" attempts resolve."),Or=i(),$=t("p"),Ir=o("The callback method within "),Jo=t("code"),Lr=o(".catch"),Sr=o(" will be called only when the previous "),Uo=t("code"),Hr=o("fn()"),Mr=o(" attempt rejects."),jr=i(),W=t("p"),Ar=o("We are going to return a rejected promise with the error indicating max retries has met, if the last promise "),Ro=t("code"),Vr=o("(promise#3)"),Fr=o(" rejected, and a resolved promise with the result from "),Bo=t("code"),Nr=o("fn()"),qr=o("."),$r=i(),zo=t("div"),Wr=i(),Ge=t("p"),Jr=o("And we can make the code more concise, as the following two are equivalent, in terms of what is being resolved and rejected:"),Ur=i(),Go=t("div"),Rr=i(),Ts=t("p"),Br=o("Also, we can substitute the variable "),Yo=t("code"),zr=o("promise3"),Gr=o(" with it's promise chain value:"),Yr=i(),Qo=t("div"),Qr=i(),Ps=t("p"),Zr=o("Now, instead of always retry at most 3 times, we are going to retry at most "),Zo=t("code"),Kr=o("n"),Xr=o(" times."),si=i(),Os=t("p"),oi=o("So we are going to introduce a new argument, "),Ko=t("code"),ai=o("n"),ei=o(":"),ti=i(),Xo=t("div"),ni=i(),J=t("p"),li=o("Instead of writing "),sa=t("code"),ri=o(".catch(() => fn())"),ii=i(),oa=t("code"),ci=o("n"),pi=o(" number of times, we can build the Promise up using a for loop."),ki=i(),Ye=t("p"),Is=t("strong"),hi=o("Assuming "),aa=t("code"),yi=o("n"),vi=o(" is always greater or equal to 1,"),di=i(),ea=t("div"),ui=i(),H=t("p"),xi=o("What if "),ta=t("code"),fi=o("n"),wi=o(" is "),na=t("code"),mi=o("0"),gi=o(" or negative? We shouldn't call "),la=t("code"),_i=o("fn()"),Ei=o(" at all!"),bi=i(),ra=t("div"),Di=i(),U=t("p"),Ci=o("Well, this maybe a little bit inelegant, having to execute the "),ia=t("code"),Ti=o("if (!promise) ... else ..."),Pi=o(" on every loop, we can initialise the promise with a rejected promise, so that we can treat the 1st "),ca=t("code"),Oi=o("fn()"),Ii=o(" called as the 1st retry:"),Li=i(),pa=t("div"),Si=i(),Qe=t("p"),Hi=o("And there you go, retrying an asynchronous function with promise chain."),wt=i(),p=t("section"),Ze=t("h2"),Ls=t("a"),Mi=o("Async await"),ji=i(),Ss=t("p"),Ai=o("When you use a promise, you need to use "),ka=t("code"),Vi=o(".then"),Fi=o(" to get the resolved value, and that happened asynchronously."),Ni=i(),Ke=t("p"),qi=o("Meaning, if you have"),$i=i(),ha=t("div"),Wi=i(),Xe=t("p"),Ji=o("You would see"),Ui=i(),ya=t("div"),Ri=i(),st=t("p"),Bi=o("first, and then some time later,"),zi=i(),va=t("div"),Gi=i(),Hs=t("p"),Yi=o("This is because the function in the "),da=t("code"),Qi=o(".then"),Zi=o(" is called asynchronously, it is executed in a separate timeline of execution, so to speak."),Ki=i(),R=t("p"),Xi=o("And "),ua=t("code"),sc=o("async"),oc=o(" + "),xa=t("code"),ac=o("await"),ec=o(" in JavaScript allow us to stitch multiple separate timeline of execution into disguisedly 1 timeline of execution flow."),tc=i(),Ms=t("p"),nc=o("Everytime when we "),fa=t("code"),lc=o("await"),rc=o(", we jump into a different asynchronous timeline."),ic=i(),js=t("p"),cc=o("So, with the code with Promise + "),wa=t("code"),pc=o(".then"),kc=o(":"),hc=i(),ma=t("div"),yc=i(),B=t("p"),vc=o("can be written in "),ga=t("code"),dc=o("async"),uc=o(" + "),_a=t("code"),xc=o("await"),fc=o(" in the following manner:"),wc=i(),Ea=t("div"),mc=i(),M=t("p"),gc=o("Now, lets implement the "),ba=t("code"),_c=o("retry"),Ec=o(" function using "),Da=t("code"),bc=o("async"),Dc=o(" + "),Ca=t("code"),Cc=o("await"),Tc=o("."),Pc=i(),Ta=t("div"),Oc=i(),As=t("p"),Ic=o("The first thing we are going to do is to call the function "),Pa=t("code"),Lc=o("fn"),Sc=o(":"),Hc=i(),Oa=t("div"),Mc=i(),b=t("p"),jc=o("We need to retry calling "),Ia=t("code"),Ac=o("fn"),Vc=o(" again, if the first "),La=t("code"),Fc=o("fn"),Nc=o(" is rejected. Instead of "),Sa=t("code"),qc=o(".catch"),$c=o(", we use "),Ha=t("code"),Wc=o("await"),Jc=o(" + "),Ma=t("code"),Uc=o("try catch"),Rc=i(),ja=t("div"),Bc=i(),z=t("p"),zc=o("If the 2nd "),Aa=t("code"),Gc=o("fn()"),Yc=o(" rejected again, we retry by calling "),Va=t("code"),Qc=o("fn"),Zc=o(" again"),Kc=i(),Fa=t("div"),Xc=i(),Vs=t("p"),sp=o("And if the last "),Na=t("code"),op=o("fn()"),ap=o(" rejected again, we are going to return a rejected promise with an error indicating max retries has met by throw the error"),ep=i(),qa=t("div"),tp=i(),$a=t("p"),np=o("Now, if we need to return a Promise resolved with the resolved value from "),Wa=t("code"),lp=o("fn()"),rp=i(),Ja=t("div"),ip=i(),G=t("p"),cp=o("Since we are ending early in the "),Ua=t("code"),pp=o("try"),kp=o(" block, and we are not using the error from the "),Ra=t("code"),hp=o("catch"),yp=o(" block, we can make the code less nested"),vp=i(),Ba=t("div"),dp=i(),Fs=t("p"),up=o("Now, instead of always retry at most 3 times, we are going to retry at most "),za=t("code"),xp=o("n"),fp=o(" times."),wp=i(),Ns=t("p"),mp=o("So we are going to introduce a new argument, "),Ga=t("code"),gp=o("n"),_p=o(":"),Ep=i(),Ya=t("div"),bp=i(),Y=t("p"),Dp=o("Instead of writing it "),Qa=t("code"),Cp=o("n"),Tp=o(" number of times, we can achieve it using a "),Za=t("code"),Pp=o("for"),Op=o(" loop:"),Ip=i(),Ka=t("div"),Lp=i(),Q=t("p"),Sp=o("And there you go, retrying an asynchronous function using "),Xa=t("code"),Hp=o("async"),Mp=o(" + "),se=t("code"),jp=o("await"),Ap=o("."),mt=i(),x=t("section"),ot=t("h2"),qs=t("a"),Vp=o("Testing"),Fp=i(),Z=t("p"),Np=o("To test whether our "),oe=t("code"),qp=o("retry"),$p=o(" function works, we need to have a max number of retry in mind, say 3. And we need a function, "),ae=t("code"),Wp=o("fn"),Jp=o(" that we can control when it succeed and when it failed."),Up=i(),at=t("p"),Rp=o("So we can have the following test cases:"),Bp=i(),j=t("ul"),$s=t("li"),ee=t("code"),zp=o("fn"),Gp=o(" always succeed;"),Ws=t("ul"),Js=t("li"),Yp=o("verify "),te=t("code"),Qp=o("fn"),Zp=o(" get called only 1 time"),Kp=i(),et=t("li"),Xp=o("verify we get the return value from the 1st attempt"),sk=i(),Us=t("li"),ne=t("code"),ok=o("fn"),ak=o(" failed on 1st attempt, and succeed thereafter;"),Rs=t("ul"),Bs=t("li"),ek=o("verify "),le=t("code"),tk=o("fn"),nk=o(" get called only 2 times"),lk=i(),tt=t("li"),rk=o("verify we get the return value from the 2nd attempt"),ik=i(),zs=t("li"),re=t("code"),ck=o("fn"),pk=o(" failed on 1st, 2nd attempt, and succeed thereafter;"),Gs=t("ul"),Ys=t("li"),kk=o("verify "),ie=t("code"),hk=o("fn"),yk=o(" get called only 3 times"),vk=i(),nt=t("li"),dk=o("verify we get the return value from the 3rd attempt"),uk=i(),Qs=t("li"),ce=t("code"),xk=o("fn"),fk=o(" failed on 1st, 2nd, 3rd attempt, and succeed thereafter;"),Zs=t("ul"),Ks=t("li"),wk=o("verify "),pe=t("code"),mk=o("fn"),gk=o(" get called only 3 times"),_k=i(),lt=t("li"),Ek=o("verify we get the max retry error"),bk=i(),Xs=t("p"),Dk=o("So, the key is to devise such "),ke=t("code"),Ck=o("fn"),Tk=o(" that we can control when it succeed and when it failed."),Pk=i(),rt=t("p"),Ok=o("We can create a function that returns such function"),Ik=i(),he=t("div"),Lk=i(),it=t("p"),Sk=o("The function takes in number indicating how many time the return function would fail, before succeeding thereafter"),Hk=i(),ye=t("div"),Mk=i(),ct=t("p"),jk=o("To know how many times the function is called, we can track it with a variable"),Ak=i(),ve=t("div"),Vk=i(),pt=t("p"),Fk=o("As long as the number of times called is less than the number of time it should fail, it will fail."),Nk=i(),de=t("div"),qk=i(),kt=t("p"),$k=o('Next, to verify the function get called a certain number of times, we can create a "spy" function:'),Wk=i(),ue=t("div"),Jk=i(),ht=t("p"),Uk=o("So, let's put all of them together:"),Rk=i(),xe=t("div"),gt=i(),P=t("section"),yt=t("h2"),so=t("a"),Bk=o("Closing Note"),zk=i(),K=t("p"),Gk=o("We've seen how we can retry an asynchronous function using the callback pattern, promise chain pattern and "),fe=t("code"),Yk=o("async"),Qk=o(" + "),we=t("code"),Zk=o("await"),Kk=o("."),Xk=i(),vt=t("p"),sh=o("Each of the 3 methods is important in its on right, albeit some is more verbose than another."),oh=i(),dt=t("p"),ah=o("Lastly, we also cover how to write test to verify our code, and also how to create the mock function to facilitate our test cases."),this.h()},l(d){Sv(w.$$.fragment,d),O=c(d),C=n(d,"P",{});var g=l(C);rs=a(g,"JavaScript is a single-threaded programming language, which means only one thing can happen at a time in a single thread."),g.forEach(e),m=c(d),E=n(d,"P",{});var rh=l(E);ao=a(rh,"That\u2019s where asynchronous JavaScript comes into play. Using asynchronous JavaScript (such as callbacks, promises, and async/await), you can perform long network requests without blocking the main thread."),rh.forEach(e),ut=c(d),eo=n(d,"P",{});var ih=l(eo);rn=a(ih,"In this article, I'm going to show how you can retry an asynchronous function in JavaScript, using the callback pattern, promise chain pattern and async await. Also, I'll show you how to write test to verify it works."),ih.forEach(e),xt=c(d),v=n(d,"SECTION",{});var u=l(v);Me=n(u,"H2",{});var ch=l(Me);is=n(ch,"A",{href:!0,id:!0});var ph=l(is);cn=a(ph,"The callback pattern"),ph.forEach(e),ch.forEach(e),pn=c(u),cs=n(u,"P",{});var Et=l(cs);kn=a(Et,"Let's take a look at retrying asynchronous function that takes in a callback function that follows "),ps=n(Et,"A",{href:!0,rel:!0});var kh=l(ps);hn=a(kh,"the callback convention"),kh.forEach(e),yn=a(Et,":"),Et.forEach(e),vn=c(u),ks=n(u,"UL",{});var bt=l(ks);je=n(bt,"LI",{});var hh=l(je);dn=a(hh,"The first argument of the callback function is an error object"),hh.forEach(e),un=c(bt),Ae=n(bt,"LI",{});var yh=l(Ae);xn=a(yh,"The second argument contains the callback results."),yh.forEach(e),bt.forEach(e),fn=c(u),to=n(u,"DIV",{class:!0});var Ed=l(to);Ed.forEach(e),wn=c(u),I=n(u,"P",{});var X=l(I);mn=a(X,"So we are going to implement the "),no=n(X,"CODE",{class:!0});var vh=l(no);gn=a(vh,"retry"),vh.forEach(e),_n=a(X," function, that takes in the asynchronous function to retry, "),lo=n(X,"CODE",{class:!0});var dh=l(lo);En=a(dh,"fn"),dh.forEach(e),bn=a(X," and a callback function, "),ro=n(X,"CODE",{class:!0});var uh=l(ro);Dn=a(uh,"cb"),uh.forEach(e),Cn=a(X,", that will be called when the function succeeded or failed after all the retry attempts."),X.forEach(e),Tn=c(u),io=n(u,"DIV",{class:!0});var bd=l(io);bd.forEach(e),Pn=c(u),hs=n(u,"P",{});var Dt=l(hs);On=a(Dt,"The first thing we are going to do is to call the function "),co=n(Dt,"CODE",{class:!0});var xh=l(co);In=a(xh,"fn"),xh.forEach(e),Ln=a(Dt,":"),Dt.forEach(e),Sn=c(u),po=n(u,"DIV",{class:!0});var Dd=l(po);Dd.forEach(e),Hn=c(u),ys=n(u,"P",{});var Ct=l(ys);Mn=a(Ct,"We check if there's an error, if there's no error, we can call the "),ko=n(Ct,"CODE",{class:!0});var fh=l(ko);jn=a(fh,"cb"),fh.forEach(e),An=a(Ct," function to indicate the function succeeded. However, if there's an error, we are going to call the function again to retry."),Ct.forEach(e),Vn=c(u),ho=n(u,"DIV",{class:!0});var Cd=l(ho);Cd.forEach(e),Fn=c(u),Ve=n(u,"P",{});var wh=l(Ve);Nn=a(wh,"Let's retry at most 3 times:"),wh.forEach(e),qn=c(u),yo=n(u,"DIV",{class:!0});var Td=l(yo);Td.forEach(e),$n=c(u),vs=n(u,"P",{});var Tt=l(vs);Wn=a(Tt,"Notice that it starts to get unwieldy as we are nesting more callback functions. It's hard to figure out which close bracket "),vo=n(Tt,"CODE",{class:!0});var mh=l(vo);Jn=a(mh,"}"),mh.forEach(e),Un=a(Tt," is belong to without proper indentation."),Tt.forEach(e),Rn=c(u),ds=n(u,"P",{});var Pt=l(ds);Bn=a(Pt,"This is the so-called "),us=n(Pt,"A",{href:!0,rel:!0});var gh=l(us);zn=a(gh,'"Callback Hell"'),gh.forEach(e),Gn=a(Pt," in JavaScript."),Pt.forEach(e),Yn=c(u),Fe=n(u,"P",{});var _h=l(Fe);Qn=a(_h,"Let's make it more unbearable to prove the point by flipping the if case:"),_h.forEach(e),Zn=c(u),uo=n(u,"DIV",{class:!0});var Pd=l(uo);Pd.forEach(e),Kn=c(u),xs=n(u,"P",{});var Ot=l(xs);Xn=a(Ot,"Now can you tell which "),xo=n(Ot,"CODE",{class:!0});var Eh=l(xo);sl=a(Eh,"data"),Eh.forEach(e),ol=a(Ot," is belong to which function?"),Ot.forEach(e),al=c(u),fs=n(u,"P",{});var It=l(fs);el=a(It,"Now, instead of always retry at most 3 times, we are going to retry at most "),fo=n(It,"CODE",{class:!0});var bh=l(fo);tl=a(bh,"n"),bh.forEach(e),nl=a(It," times."),It.forEach(e),ll=c(u),ws=n(u,"P",{});var Lt=l(ws);rl=a(Lt,"So we are going to introduce a new argument, "),wo=n(Lt,"CODE",{class:!0});var Dh=l(wo);il=a(Dh,"n"),Dh.forEach(e),cl=a(Lt,":"),Lt.forEach(e),pl=c(u),mo=n(u,"DIV",{class:!0});var Od=l(mo);Od.forEach(e),kl=c(u),ms=n(u,"P",{});var St=l(ms);hl=a(St,"The function keeps going forever, until it reaches "),go=n(St,"CODE",{class:!0});var Ch=l(go);yl=a(Ch,"n"),Ch.forEach(e),vl=a(St," attempt."),St.forEach(e),dl=c(u),Ne=n(u,"P",{});var Th=l(Ne);ul=a(Th,"If you stare at the code hard enough, you would notice that the code starts to repeat itself:"),Th.forEach(e),xl=c(u),qe=n(u,"P",{});var Ph=l(qe);F=n(Ph,"SPAN",{style:!0});var Oh=l(F);_o=n(Oh,"PICTURE",{});var eh=l(_o);$e=n(eh,"SOURCE",{type:!0,srcset:!0}),T=n(eh,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),eh.forEach(e),Oh.forEach(e),Ph.forEach(e),fl=c(u),We=n(u,"P",{});var Ih=l(We);wl=a(Ih,"Note that the code within the outer red square is the same as the code within the inner red square, which is the same as the inner inner red square ..."),Ih.forEach(e),ml=c(u),Je=n(u,"P",{});var Lh=l(Je);gl=a(Lh,"So, let's extract the code within the red square out into a function and replace the red squares with the function:"),Lh.forEach(e),_l=c(u),Eo=n(u,"DIV",{class:!0});var Id=l(Eo);Id.forEach(e),El=c(u),Ue=n(u,"P",{});var Sh=l(Ue);bl=a(Sh,"And there you go, retrying an asynchronous function with callback pattern."),Sh.forEach(e),Dl=c(u),Re=n(u,"P",{});var Hh=l(Re);Cl=a(Hh,"Does it work? Well, we have to test it to verify it. Stay till the end to see how we are going to write unit test to verify it."),Hh.forEach(e),u.forEach(e),ft=c(d),h=n(d,"SECTION",{});var y=l(h);Be=n(y,"H2",{});var Mh=l(Be);gs=n(Mh,"A",{href:!0,id:!0});var jh=l(gs);Tl=a(jh,"The promise chain"),jh.forEach(e),Mh.forEach(e),Pl=c(y),_s=n(y,"P",{});var Ht=l(_s);Ol=a(Ht,"A "),Es=n(Ht,"A",{href:!0,rel:!0});var Ah=l(Es);Il=a(Ah,"Promise"),Ah.forEach(e),Ll=a(Ht,", according to MDN, object represents the eventual completion of an asynchronous operation, and its resulting value."),Ht.forEach(e),Sl=c(y),D=n(y,"P",{});var V=l(D);Hl=a(V,"A Promise object provides "),bo=n(V,"CODE",{class:!0});var Vh=l(bo);Ml=a(Vh,".then"),Vh.forEach(e),jl=a(V," and "),Do=n(V,"CODE",{class:!0});var Fh=l(Do);Al=a(Fh,".catch"),Fh.forEach(e),Vl=a(V," method, which takes in callback function to be called when the promise is resolved or rejected respectively. The "),Co=n(V,"CODE",{class:!0});var Nh=l(Co);Fl=a(Nh,".then"),Nh.forEach(e),Nl=a(V," and "),To=n(V,"CODE",{class:!0});var qh=l(To);ql=a(qh,".catch"),qh.forEach(e),$l=a(V," method then returns a new Promise of the return value of the callback function."),V.forEach(e),Wl=c(y),Po=n(y,"DIV",{class:!0});var Ld=l(Po);Ld.forEach(e),Jl=c(y),L=n(y,"P",{});var ss=l(L);Ul=a(ss,"The chaining of "),Oo=n(ss,"CODE",{class:!0});var $h=l(Oo);Rl=a($h,".then"),$h.forEach(e),Bl=a(ss," and "),Io=n(ss,"CODE",{class:!0});var Wh=l(Io);zl=a(Wh,".catch"),Wh.forEach(e),Gl=a(ss," is a common pattern, called "),bs=n(ss,"A",{href:!0,rel:!0});var Jh=l(bs);Yl=a(Jh,"Promise chaining"),Jh.forEach(e),Ql=a(ss,"."),ss.forEach(e),Zl=c(y),N=n(y,"P",{});var me=l(N);Kl=a(me,"Now, lets implement the "),Lo=n(me,"CODE",{class:!0});var Uh=l(Lo);Xl=a(Uh,"retry"),Uh.forEach(e),sr=a(me," function, which takes in the asynchronous function to retry, "),So=n(me,"CODE",{class:!0});var Rh=l(So);or=a(Rh,"fn"),Rh.forEach(e),ar=a(me," and return a promise, which resolved when the function succeeded or resolved after failing all the retry attempts."),me.forEach(e),er=c(y),Ho=n(y,"DIV",{class:!0});var Sd=l(Ho);Sd.forEach(e),tr=c(y),Ds=n(y,"P",{});var Mt=l(Ds);nr=a(Mt,"The first thing we are going to do is to call the function "),Mo=n(Mt,"CODE",{class:!0});var Bh=l(Mo);lr=a(Bh,"fn"),Bh.forEach(e),rr=a(Mt,":"),Mt.forEach(e),ir=c(y),jo=n(y,"DIV",{class:!0});var Hd=l(jo);Hd.forEach(e),cr=c(y),q=n(y,"P",{});var ge=l(q);pr=a(ge,"We need to retry calling "),Ao=n(ge,"CODE",{class:!0});var zh=l(Ao);kr=a(zh,"fn"),zh.forEach(e),hr=a(ge," again, if the first "),Vo=n(ge,"CODE",{class:!0});var Gh=l(Vo);yr=a(Gh,"fn"),Gh.forEach(e),vr=a(ge," is rejected"),ge.forEach(e),dr=c(y),Fo=n(y,"DIV",{class:!0});var Md=l(Fo);Md.forEach(e),ur=c(y),Cs=n(y,"P",{});var jt=l(Cs);xr=a(jt,"If that new promise rejected again, we retry by calling "),No=n(jt,"CODE",{class:!0});var Yh=l(No);fr=a(Yh,"fn"),Yh.forEach(e),wr=a(jt," again"),jt.forEach(e),mr=c(y),qo=n(y,"DIV",{class:!0});var jd=l(qo);jd.forEach(e),gr=c(y),S=n(y,"P",{});var os=l(S);_r=a(os,"The last promise "),ze=n(os,"EM",{});var Qh=l(ze);Er=a(Qh,"(promise#3)"),Qh.forEach(e),br=a(os," will reject if the 3rd "),$o=n(os,"CODE",{class:!0});var Zh=l($o);Dr=a(Zh,"fn()"),Zh.forEach(e),Cr=a(os," attempt rejects, and resolve if any of the "),Wo=n(os,"CODE",{class:!0});var Kh=l(Wo);Tr=a(Kh,"fn()"),Kh.forEach(e),Pr=a(os," attempts resolve."),os.forEach(e),Or=c(y),$=n(y,"P",{});var _e=l($);Ir=a(_e,"The callback method within "),Jo=n(_e,"CODE",{class:!0});var Xh=l(Jo);Lr=a(Xh,".catch"),Xh.forEach(e),Sr=a(_e," will be called only when the previous "),Uo=n(_e,"CODE",{class:!0});var sy=l(Uo);Hr=a(sy,"fn()"),sy.forEach(e),Mr=a(_e," attempt rejects."),_e.forEach(e),jr=c(y),W=n(y,"P",{});var Ee=l(W);Ar=a(Ee,"We are going to return a rejected promise with the error indicating max retries has met, if the last promise "),Ro=n(Ee,"CODE",{class:!0});var oy=l(Ro);Vr=a(oy,"(promise#3)"),oy.forEach(e),Fr=a(Ee," rejected, and a resolved promise with the result from "),Bo=n(Ee,"CODE",{class:!0});var ay=l(Bo);Nr=a(ay,"fn()"),ay.forEach(e),qr=a(Ee,"."),Ee.forEach(e),$r=c(y),zo=n(y,"DIV",{class:!0});var Ad=l(zo);Ad.forEach(e),Wr=c(y),Ge=n(y,"P",{});var ey=l(Ge);Jr=a(ey,"And we can make the code more concise, as the following two are equivalent, in terms of what is being resolved and rejected:"),ey.forEach(e),Ur=c(y),Go=n(y,"DIV",{class:!0});var Vd=l(Go);Vd.forEach(e),Rr=c(y),Ts=n(y,"P",{});var At=l(Ts);Br=a(At,"Also, we can substitute the variable "),Yo=n(At,"CODE",{class:!0});var ty=l(Yo);zr=a(ty,"promise3"),ty.forEach(e),Gr=a(At," with it's promise chain value:"),At.forEach(e),Yr=c(y),Qo=n(y,"DIV",{class:!0});var Fd=l(Qo);Fd.forEach(e),Qr=c(y),Ps=n(y,"P",{});var Vt=l(Ps);Zr=a(Vt,"Now, instead of always retry at most 3 times, we are going to retry at most "),Zo=n(Vt,"CODE",{class:!0});var ny=l(Zo);Kr=a(ny,"n"),ny.forEach(e),Xr=a(Vt," times."),Vt.forEach(e),si=c(y),Os=n(y,"P",{});var Ft=l(Os);oi=a(Ft,"So we are going to introduce a new argument, "),Ko=n(Ft,"CODE",{class:!0});var ly=l(Ko);ai=a(ly,"n"),ly.forEach(e),ei=a(Ft,":"),Ft.forEach(e),ti=c(y),Xo=n(y,"DIV",{class:!0});var Nd=l(Xo);Nd.forEach(e),ni=c(y),J=n(y,"P",{});var be=l(J);li=a(be,"Instead of writing "),sa=n(be,"CODE",{class:!0});var ry=l(sa);ri=a(ry,".catch(() => fn())"),ry.forEach(e),ii=c(be),oa=n(be,"CODE",{class:!0});var iy=l(oa);ci=a(iy,"n"),iy.forEach(e),pi=a(be," number of times, we can build the Promise up using a for loop."),be.forEach(e),ki=c(y),Ye=n(y,"P",{});var cy=l(Ye);Is=n(cy,"STRONG",{});var Nt=l(Is);hi=a(Nt,"Assuming "),aa=n(Nt,"CODE",{class:!0});var py=l(aa);yi=a(py,"n"),py.forEach(e),vi=a(Nt," is always greater or equal to 1,"),Nt.forEach(e),cy.forEach(e),di=c(y),ea=n(y,"DIV",{class:!0});var qd=l(ea);qd.forEach(e),ui=c(y),H=n(y,"P",{});var as=l(H);xi=a(as,"What if "),ta=n(as,"CODE",{class:!0});var ky=l(ta);fi=a(ky,"n"),ky.forEach(e),wi=a(as," is "),na=n(as,"CODE",{class:!0});var hy=l(na);mi=a(hy,"0"),hy.forEach(e),gi=a(as," or negative? We shouldn't call "),la=n(as,"CODE",{class:!0});var yy=l(la);_i=a(yy,"fn()"),yy.forEach(e),Ei=a(as," at all!"),as.forEach(e),bi=c(y),ra=n(y,"DIV",{class:!0});var $d=l(ra);$d.forEach(e),Di=c(y),U=n(y,"P",{});var De=l(U);Ci=a(De,"Well, this maybe a little bit inelegant, having to execute the "),ia=n(De,"CODE",{class:!0});var vy=l(ia);Ti=a(vy,"if (!promise) ... else ..."),vy.forEach(e),Pi=a(De," on every loop, we can initialise the promise with a rejected promise, so that we can treat the 1st "),ca=n(De,"CODE",{class:!0});var dy=l(ca);Oi=a(dy,"fn()"),dy.forEach(e),Ii=a(De," called as the 1st retry:"),De.forEach(e),Li=c(y),pa=n(y,"DIV",{class:!0});var Wd=l(pa);Wd.forEach(e),Si=c(y),Qe=n(y,"P",{});var uy=l(Qe);Hi=a(uy,"And there you go, retrying an asynchronous function with promise chain."),uy.forEach(e),y.forEach(e),wt=c(d),p=n(d,"SECTION",{});var k=l(p);Ze=n(k,"H2",{});var xy=l(Ze);Ls=n(xy,"A",{href:!0,id:!0});var fy=l(Ls);Mi=a(fy,"Async await"),fy.forEach(e),xy.forEach(e),ji=c(k),Ss=n(k,"P",{});var qt=l(Ss);Ai=a(qt,"When you use a promise, you need to use "),ka=n(qt,"CODE",{class:!0});var wy=l(ka);Vi=a(wy,".then"),wy.forEach(e),Fi=a(qt," to get the resolved value, and that happened asynchronously."),qt.forEach(e),Ni=c(k),Ke=n(k,"P",{});var my=l(Ke);qi=a(my,"Meaning, if you have"),my.forEach(e),$i=c(k),ha=n(k,"DIV",{class:!0});var Jd=l(ha);Jd.forEach(e),Wi=c(k),Xe=n(k,"P",{});var gy=l(Xe);Ji=a(gy,"You would see"),gy.forEach(e),Ui=c(k),ya=n(k,"DIV",{class:!0});var Ud=l(ya);Ud.forEach(e),Ri=c(k),st=n(k,"P",{});var _y=l(st);Bi=a(_y,"first, and then some time later,"),_y.forEach(e),zi=c(k),va=n(k,"DIV",{class:!0});var Rd=l(va);Rd.forEach(e),Gi=c(k),Hs=n(k,"P",{});var $t=l(Hs);Yi=a($t,"This is because the function in the "),da=n($t,"CODE",{class:!0});var Ey=l(da);Qi=a(Ey,".then"),Ey.forEach(e),Zi=a($t," is called asynchronously, it is executed in a separate timeline of execution, so to speak."),$t.forEach(e),Ki=c(k),R=n(k,"P",{});var Ce=l(R);Xi=a(Ce,"And "),ua=n(Ce,"CODE",{class:!0});var by=l(ua);sc=a(by,"async"),by.forEach(e),oc=a(Ce," + "),xa=n(Ce,"CODE",{class:!0});var Dy=l(xa);ac=a(Dy,"await"),Dy.forEach(e),ec=a(Ce," in JavaScript allow us to stitch multiple separate timeline of execution into disguisedly 1 timeline of execution flow."),Ce.forEach(e),tc=c(k),Ms=n(k,"P",{});var Wt=l(Ms);nc=a(Wt,"Everytime when we "),fa=n(Wt,"CODE",{class:!0});var Cy=l(fa);lc=a(Cy,"await"),Cy.forEach(e),rc=a(Wt,", we jump into a different asynchronous timeline."),Wt.forEach(e),ic=c(k),js=n(k,"P",{});var Jt=l(js);cc=a(Jt,"So, with the code with Promise + "),wa=n(Jt,"CODE",{class:!0});var Ty=l(wa);pc=a(Ty,".then"),Ty.forEach(e),kc=a(Jt,":"),Jt.forEach(e),hc=c(k),ma=n(k,"DIV",{class:!0});var Bd=l(ma);Bd.forEach(e),yc=c(k),B=n(k,"P",{});var Te=l(B);vc=a(Te,"can be written in "),ga=n(Te,"CODE",{class:!0});var Py=l(ga);dc=a(Py,"async"),Py.forEach(e),uc=a(Te," + "),_a=n(Te,"CODE",{class:!0});var Oy=l(_a);xc=a(Oy,"await"),Oy.forEach(e),fc=a(Te," in the following manner:"),Te.forEach(e),wc=c(k),Ea=n(k,"DIV",{class:!0});var zd=l(Ea);zd.forEach(e),mc=c(k),M=n(k,"P",{});var es=l(M);gc=a(es,"Now, lets implement the "),ba=n(es,"CODE",{class:!0});var Iy=l(ba);_c=a(Iy,"retry"),Iy.forEach(e),Ec=a(es," function using "),Da=n(es,"CODE",{class:!0});var Ly=l(Da);bc=a(Ly,"async"),Ly.forEach(e),Dc=a(es," + "),Ca=n(es,"CODE",{class:!0});var Sy=l(Ca);Cc=a(Sy,"await"),Sy.forEach(e),Tc=a(es,"."),es.forEach(e),Pc=c(k),Ta=n(k,"DIV",{class:!0});var Gd=l(Ta);Gd.forEach(e),Oc=c(k),As=n(k,"P",{});var Ut=l(As);Ic=a(Ut,"The first thing we are going to do is to call the function "),Pa=n(Ut,"CODE",{class:!0});var Hy=l(Pa);Lc=a(Hy,"fn"),Hy.forEach(e),Sc=a(Ut,":"),Ut.forEach(e),Hc=c(k),Oa=n(k,"DIV",{class:!0});var Yd=l(Oa);Yd.forEach(e),Mc=c(k),b=n(k,"P",{});var A=l(b);jc=a(A,"We need to retry calling "),Ia=n(A,"CODE",{class:!0});var My=l(Ia);Ac=a(My,"fn"),My.forEach(e),Vc=a(A," again, if the first "),La=n(A,"CODE",{class:!0});var jy=l(La);Fc=a(jy,"fn"),jy.forEach(e),Nc=a(A," is rejected. Instead of "),Sa=n(A,"CODE",{class:!0});var Ay=l(Sa);qc=a(Ay,".catch"),Ay.forEach(e),$c=a(A,", we use "),Ha=n(A,"CODE",{class:!0});var Vy=l(Ha);Wc=a(Vy,"await"),Vy.forEach(e),Jc=a(A," + "),Ma=n(A,"CODE",{class:!0});var Fy=l(Ma);Uc=a(Fy,"try catch"),Fy.forEach(e),A.forEach(e),Rc=c(k),ja=n(k,"DIV",{class:!0});var Qd=l(ja);Qd.forEach(e),Bc=c(k),z=n(k,"P",{});var Pe=l(z);zc=a(Pe,"If the 2nd "),Aa=n(Pe,"CODE",{class:!0});var Ny=l(Aa);Gc=a(Ny,"fn()"),Ny.forEach(e),Yc=a(Pe," rejected again, we retry by calling "),Va=n(Pe,"CODE",{class:!0});var qy=l(Va);Qc=a(qy,"fn"),qy.forEach(e),Zc=a(Pe," again"),Pe.forEach(e),Kc=c(k),Fa=n(k,"DIV",{class:!0});var Zd=l(Fa);Zd.forEach(e),Xc=c(k),Vs=n(k,"P",{});var Rt=l(Vs);sp=a(Rt,"And if the last "),Na=n(Rt,"CODE",{class:!0});var $y=l(Na);op=a($y,"fn()"),$y.forEach(e),ap=a(Rt," rejected again, we are going to return a rejected promise with an error indicating max retries has met by throw the error"),Rt.forEach(e),ep=c(k),qa=n(k,"DIV",{class:!0});var Kd=l(qa);Kd.forEach(e),tp=c(k),$a=n(k,"P",{});var th=l($a);np=a(th,"Now, if we need to return a Promise resolved with the resolved value from "),Wa=n(th,"CODE",{class:!0});var Wy=l(Wa);lp=a(Wy,"fn()"),Wy.forEach(e),th.forEach(e),rp=c(k),Ja=n(k,"DIV",{class:!0});var Xd=l(Ja);Xd.forEach(e),ip=c(k),G=n(k,"P",{});var Oe=l(G);cp=a(Oe,"Since we are ending early in the "),Ua=n(Oe,"CODE",{class:!0});var Jy=l(Ua);pp=a(Jy,"try"),Jy.forEach(e),kp=a(Oe," block, and we are not using the error from the "),Ra=n(Oe,"CODE",{class:!0});var Uy=l(Ra);hp=a(Uy,"catch"),Uy.forEach(e),yp=a(Oe," block, we can make the code less nested"),Oe.forEach(e),vp=c(k),Ba=n(k,"DIV",{class:!0});var su=l(Ba);su.forEach(e),dp=c(k),Fs=n(k,"P",{});var Bt=l(Fs);up=a(Bt,"Now, instead of always retry at most 3 times, we are going to retry at most "),za=n(Bt,"CODE",{class:!0});var Ry=l(za);xp=a(Ry,"n"),Ry.forEach(e),fp=a(Bt," times."),Bt.forEach(e),wp=c(k),Ns=n(k,"P",{});var zt=l(Ns);mp=a(zt,"So we are going to introduce a new argument, "),Ga=n(zt,"CODE",{class:!0});var By=l(Ga);gp=a(By,"n"),By.forEach(e),_p=a(zt,":"),zt.forEach(e),Ep=c(k),Ya=n(k,"DIV",{class:!0});var ou=l(Ya);ou.forEach(e),bp=c(k),Y=n(k,"P",{});var Ie=l(Y);Dp=a(Ie,"Instead of writing it "),Qa=n(Ie,"CODE",{class:!0});var zy=l(Qa);Cp=a(zy,"n"),zy.forEach(e),Tp=a(Ie," number of times, we can achieve it using a "),Za=n(Ie,"CODE",{class:!0});var Gy=l(Za);Pp=a(Gy,"for"),Gy.forEach(e),Op=a(Ie," loop:"),Ie.forEach(e),Ip=c(k),Ka=n(k,"DIV",{class:!0});var au=l(Ka);au.forEach(e),Lp=c(k),Q=n(k,"P",{});var Le=l(Q);Sp=a(Le,"And there you go, retrying an asynchronous function using "),Xa=n(Le,"CODE",{class:!0});var Yy=l(Xa);Hp=a(Yy,"async"),Yy.forEach(e),Mp=a(Le," + "),se=n(Le,"CODE",{class:!0});var Qy=l(se);jp=a(Qy,"await"),Qy.forEach(e),Ap=a(Le,"."),Le.forEach(e),k.forEach(e),mt=c(d),x=n(d,"SECTION",{});var f=l(x);ot=n(f,"H2",{});var Zy=l(ot);qs=n(Zy,"A",{href:!0,id:!0});var Ky=l(qs);Vp=a(Ky,"Testing"),Ky.forEach(e),Zy.forEach(e),Fp=c(f),Z=n(f,"P",{});var Se=l(Z);Np=a(Se,"To test whether our "),oe=n(Se,"CODE",{class:!0});var Xy=l(oe);qp=a(Xy,"retry"),Xy.forEach(e),$p=a(Se," function works, we need to have a max number of retry in mind, say 3. And we need a function, "),ae=n(Se,"CODE",{class:!0});var sv=l(ae);Wp=a(sv,"fn"),sv.forEach(e),Jp=a(Se," that we can control when it succeed and when it failed."),Se.forEach(e),Up=c(f),at=n(f,"P",{});var ov=l(at);Rp=a(ov,"So we can have the following test cases:"),ov.forEach(e),Bp=c(f),j=n(f,"UL",{});var ts=l(j);$s=n(ts,"LI",{});var Gt=l($s);ee=n(Gt,"CODE",{class:!0});var av=l(ee);zp=a(av,"fn"),av.forEach(e),Gp=a(Gt," always succeed;"),Ws=n(Gt,"UL",{});var Yt=l(Ws);Js=n(Yt,"LI",{});var Qt=l(Js);Yp=a(Qt,"verify "),te=n(Qt,"CODE",{class:!0});var ev=l(te);Qp=a(ev,"fn"),ev.forEach(e),Zp=a(Qt," get called only 1 time"),Qt.forEach(e),Kp=c(Yt),et=n(Yt,"LI",{});var tv=l(et);Xp=a(tv,"verify we get the return value from the 1st attempt"),tv.forEach(e),Yt.forEach(e),Gt.forEach(e),sk=c(ts),Us=n(ts,"LI",{});var Zt=l(Us);ne=n(Zt,"CODE",{class:!0});var nv=l(ne);ok=a(nv,"fn"),nv.forEach(e),ak=a(Zt," failed on 1st attempt, and succeed thereafter;"),Rs=n(Zt,"UL",{});var Kt=l(Rs);Bs=n(Kt,"LI",{});var Xt=l(Bs);ek=a(Xt,"verify "),le=n(Xt,"CODE",{class:!0});var lv=l(le);tk=a(lv,"fn"),lv.forEach(e),nk=a(Xt," get called only 2 times"),Xt.forEach(e),lk=c(Kt),tt=n(Kt,"LI",{});var rv=l(tt);rk=a(rv,"verify we get the return value from the 2nd attempt"),rv.forEach(e),Kt.forEach(e),Zt.forEach(e),ik=c(ts),zs=n(ts,"LI",{});var sn=l(zs);re=n(sn,"CODE",{class:!0});var iv=l(re);ck=a(iv,"fn"),iv.forEach(e),pk=a(sn," failed on 1st, 2nd attempt, and succeed thereafter;"),Gs=n(sn,"UL",{});var on=l(Gs);Ys=n(on,"LI",{});var an=l(Ys);kk=a(an,"verify "),ie=n(an,"CODE",{class:!0});var cv=l(ie);hk=a(cv,"fn"),cv.forEach(e),yk=a(an," get called only 3 times"),an.forEach(e),vk=c(on),nt=n(on,"LI",{});var pv=l(nt);dk=a(pv,"verify we get the return value from the 3rd attempt"),pv.forEach(e),on.forEach(e),sn.forEach(e),uk=c(ts),Qs=n(ts,"LI",{});var en=l(Qs);ce=n(en,"CODE",{class:!0});var kv=l(ce);xk=a(kv,"fn"),kv.forEach(e),fk=a(en," failed on 1st, 2nd, 3rd attempt, and succeed thereafter;"),Zs=n(en,"UL",{});var tn=l(Zs);Ks=n(tn,"LI",{});var nn=l(Ks);wk=a(nn,"verify "),pe=n(nn,"CODE",{class:!0});var hv=l(pe);mk=a(hv,"fn"),hv.forEach(e),gk=a(nn," get called only 3 times"),nn.forEach(e),_k=c(tn),lt=n(tn,"LI",{});var yv=l(lt);Ek=a(yv,"verify we get the max retry error"),yv.forEach(e),tn.forEach(e),en.forEach(e),ts.forEach(e),bk=c(f),Xs=n(f,"P",{});var ln=l(Xs);Dk=a(ln,"So, the key is to devise such "),ke=n(ln,"CODE",{class:!0});var vv=l(ke);Ck=a(vv,"fn"),vv.forEach(e),Tk=a(ln," that we can control when it succeed and when it failed."),ln.forEach(e),Pk=c(f),rt=n(f,"P",{});var dv=l(rt);Ok=a(dv,"We can create a function that returns such function"),dv.forEach(e),Ik=c(f),he=n(f,"DIV",{class:!0});var eu=l(he);eu.forEach(e),Lk=c(f),it=n(f,"P",{});var uv=l(it);Sk=a(uv,"The function takes in number indicating how many time the return function would fail, before succeeding thereafter"),uv.forEach(e),Hk=c(f),ye=n(f,"DIV",{class:!0});var tu=l(ye);tu.forEach(e),Mk=c(f),ct=n(f,"P",{});var xv=l(ct);jk=a(xv,"To know how many times the function is called, we can track it with a variable"),xv.forEach(e),Ak=c(f),ve=n(f,"DIV",{class:!0});var nu=l(ve);nu.forEach(e),Vk=c(f),pt=n(f,"P",{});var fv=l(pt);Fk=a(fv,"As long as the number of times called is less than the number of time it should fail, it will fail."),fv.forEach(e),Nk=c(f),de=n(f,"DIV",{class:!0});var lu=l(de);lu.forEach(e),qk=c(f),kt=n(f,"P",{});var wv=l(kt);$k=a(wv,'Next, to verify the function get called a certain number of times, we can create a "spy" function:'),wv.forEach(e),Wk=c(f),ue=n(f,"DIV",{class:!0});var ru=l(ue);ru.forEach(e),Jk=c(f),ht=n(f,"P",{});var mv=l(ht);Uk=a(mv,"So, let's put all of them together:"),mv.forEach(e),Rk=c(f),xe=n(f,"DIV",{class:!0});var iu=l(xe);iu.forEach(e),f.forEach(e),gt=c(d),P=n(d,"SECTION",{});var ns=l(P);yt=n(ns,"H2",{});var gv=l(yt);so=n(gv,"A",{href:!0,id:!0});var _v=l(so);Bk=a(_v,"Closing Note"),_v.forEach(e),gv.forEach(e),zk=c(ns),K=n(ns,"P",{});var He=l(K);Gk=a(He,"We've seen how we can retry an asynchronous function using the callback pattern, promise chain pattern and "),fe=n(He,"CODE",{class:!0});var Ev=l(fe);Yk=a(Ev,"async"),Ev.forEach(e),Qk=a(He," + "),we=n(He,"CODE",{class:!0});var bv=l(we);Zk=a(bv,"await"),bv.forEach(e),Kk=a(He,"."),He.forEach(e),Xk=c(ns),vt=n(ns,"P",{});var Dv=l(vt);sh=a(Dv,"Each of the 3 methods is important in its on right, albeit some is more verbose than another."),Dv.forEach(e),oh=c(ns),dt=n(ns,"P",{});var Cv=l(dt);ah=a(Cv,"Lastly, we also cover how to write test to verify our code, and also how to create the mock function to facilitate our test cases."),Cv.forEach(e),ns.forEach(e),this.h()},h(){r(is,"href","#the-callback-pattern"),r(is,"id","the-callback-pattern"),r(ps,"href","https://gist.github.com/sunnycmf/b2ad4f80a3b627f04ff2"),r(ps,"rel","nofollow"),r(to,"class","code-section"),r(no,"class","inline"),r(lo,"class","inline"),r(ro,"class","inline"),r(io,"class","code-section"),r(co,"class","inline"),r(po,"class","code-section"),r(ko,"class","inline"),r(ho,"class","code-section"),r(yo,"class","code-section"),r(vo,"class","inline"),r(us,"href","http://callbackhell.com/"),r(us,"rel","nofollow"),r(uo,"class","code-section"),r(xo,"class","inline"),r(fo,"class","inline"),r(wo,"class","inline"),r(mo,"class","code-section"),r(go,"class","inline"),r($e,"type","image/webp"),r($e,"srcset",wu+", "+fu+" 2x"),vu(T.src,lh=Ov)||r(T,"src",lh),r(T,"srcset",Ov+", "+mu+" 2x"),r(T,"loading","lazy"),ls(T,"position","absolute"),ls(T,"top","0"),ls(T,"width","100%"),ls(T,"height","100%"),r(T,"alt","recursive pattern"),ls(F,"display","block"),ls(F,"position","relative"),ls(F,"padding-top","118.716%"),ls(F,"width","100%"),r(Eo,"class","code-section"),r(gs,"href","#the-promise-chain"),r(gs,"id","the-promise-chain"),r(Es,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"),r(Es,"rel","nofollow"),r(bo,"class","inline"),r(Do,"class","inline"),r(Co,"class","inline"),r(To,"class","inline"),r(Po,"class","code-section"),r(Oo,"class","inline"),r(Io,"class","inline"),r(bs,"href","https://www.javascripttutorial.net/es6/promise-chaining/"),r(bs,"rel","nofollow"),r(Lo,"class","inline"),r(So,"class","inline"),r(Ho,"class","code-section"),r(Mo,"class","inline"),r(jo,"class","code-section"),r(Ao,"class","inline"),r(Vo,"class","inline"),r(Fo,"class","code-section"),r(No,"class","inline"),r(qo,"class","code-section"),r($o,"class","inline"),r(Wo,"class","inline"),r(Jo,"class","inline"),r(Uo,"class","inline"),r(Ro,"class","inline"),r(Bo,"class","inline"),r(zo,"class","code-section"),r(Go,"class","code-section"),r(Yo,"class","inline"),r(Qo,"class","code-section"),r(Zo,"class","inline"),r(Ko,"class","inline"),r(Xo,"class","code-section"),r(sa,"class","inline"),r(oa,"class","inline"),r(aa,"class","inline"),r(ea,"class","code-section"),r(ta,"class","inline"),r(na,"class","inline"),r(la,"class","inline"),r(ra,"class","code-section"),r(ia,"class","inline"),r(ca,"class","inline"),r(pa,"class","code-section"),r(Ls,"href","#async-await"),r(Ls,"id","async-await"),r(ka,"class","inline"),r(ha,"class","code-section"),r(ya,"class","code-section"),r(va,"class","code-section"),r(da,"class","inline"),r(ua,"class","inline"),r(xa,"class","inline"),r(fa,"class","inline"),r(wa,"class","inline"),r(ma,"class","code-section"),r(ga,"class","inline"),r(_a,"class","inline"),r(Ea,"class","code-section"),r(ba,"class","inline"),r(Da,"class","inline"),r(Ca,"class","inline"),r(Ta,"class","code-section"),r(Pa,"class","inline"),r(Oa,"class","code-section"),r(Ia,"class","inline"),r(La,"class","inline"),r(Sa,"class","inline"),r(Ha,"class","inline"),r(Ma,"class","inline"),r(ja,"class","code-section"),r(Aa,"class","inline"),r(Va,"class","inline"),r(Fa,"class","code-section"),r(Na,"class","inline"),r(qa,"class","code-section"),r(Wa,"class","inline"),r(Ja,"class","code-section"),r(Ua,"class","inline"),r(Ra,"class","inline"),r(Ba,"class","code-section"),r(za,"class","inline"),r(Ga,"class","inline"),r(Ya,"class","code-section"),r(Qa,"class","inline"),r(Za,"class","inline"),r(Ka,"class","code-section"),r(Xa,"class","inline"),r(se,"class","inline"),r(qs,"href","#testing"),r(qs,"id","testing"),r(oe,"class","inline"),r(ae,"class","inline"),r(ee,"class","inline"),r(te,"class","inline"),r(ne,"class","inline"),r(le,"class","inline"),r(re,"class","inline"),r(ie,"class","inline"),r(ce,"class","inline"),r(pe,"class","inline"),r(ke,"class","inline"),r(he,"class","code-section"),r(ye,"class","code-section"),r(ve,"class","code-section"),r(de,"class","code-section"),r(ue,"class","code-section"),r(xe,"class","code-section"),r(so,"href","#closing-note"),r(so,"id","closing-note"),r(fe,"class","inline"),r(we,"class","inline")},m(d,g){Hv(w,d,g),_(d,O,g),_(d,C,g),s(C,rs),_(d,m,g),_(d,E,g),s(E,ao),_(d,ut,g),_(d,eo,g),s(eo,rn),_(d,xt,g),_(d,v,g),s(v,Me),s(Me,is),s(is,cn),s(v,pn),s(v,cs),s(cs,kn),s(cs,ps),s(ps,hn),s(cs,yn),s(v,vn),s(v,ks),s(ks,je),s(je,dn),s(ks,un),s(ks,Ae),s(Ae,xn),s(v,fn),s(v,to),to.innerHTML=Vv,s(v,wn),s(v,I),s(I,mn),s(I,no),s(no,gn),s(I,_n),s(I,lo),s(lo,En),s(I,bn),s(I,ro),s(ro,Dn),s(I,Cn),s(v,Tn),s(v,io),io.innerHTML=Fv,s(v,Pn),s(v,hs),s(hs,On),s(hs,co),s(co,In),s(hs,Ln),s(v,Sn),s(v,po),po.innerHTML=Nv,s(v,Hn),s(v,ys),s(ys,Mn),s(ys,ko),s(ko,jn),s(ys,An),s(v,Vn),s(v,ho),ho.innerHTML=qv,s(v,Fn),s(v,Ve),s(Ve,Nn),s(v,qn),s(v,yo),yo.innerHTML=$v,s(v,$n),s(v,vs),s(vs,Wn),s(vs,vo),s(vo,Jn),s(vs,Un),s(v,Rn),s(v,ds),s(ds,Bn),s(ds,us),s(us,zn),s(ds,Gn),s(v,Yn),s(v,Fe),s(Fe,Qn),s(v,Zn),s(v,uo),uo.innerHTML=Wv,s(v,Kn),s(v,xs),s(xs,Xn),s(xs,xo),s(xo,sl),s(xs,ol),s(v,al),s(v,fs),s(fs,el),s(fs,fo),s(fo,tl),s(fs,nl),s(v,ll),s(v,ws),s(ws,rl),s(ws,wo),s(wo,il),s(ws,cl),s(v,pl),s(v,mo),mo.innerHTML=Jv,s(v,kl),s(v,ms),s(ms,hl),s(ms,go),s(go,yl),s(ms,vl),s(v,dl),s(v,Ne),s(Ne,ul),s(v,xl),s(v,qe),s(qe,F),s(F,_o),s(_o,$e),s(_o,T),s(v,fl),s(v,We),s(We,wl),s(v,ml),s(v,Je),s(Je,gl),s(v,_l),s(v,Eo),Eo.innerHTML=Uv,s(v,El),s(v,Ue),s(Ue,bl),s(v,Dl),s(v,Re),s(Re,Cl),_(d,ft,g),_(d,h,g),s(h,Be),s(Be,gs),s(gs,Tl),s(h,Pl),s(h,_s),s(_s,Ol),s(_s,Es),s(Es,Il),s(_s,Ll),s(h,Sl),s(h,D),s(D,Hl),s(D,bo),s(bo,Ml),s(D,jl),s(D,Do),s(Do,Al),s(D,Vl),s(D,Co),s(Co,Fl),s(D,Nl),s(D,To),s(To,ql),s(D,$l),s(h,Wl),s(h,Po),Po.innerHTML=Rv,s(h,Jl),s(h,L),s(L,Ul),s(L,Oo),s(Oo,Rl),s(L,Bl),s(L,Io),s(Io,zl),s(L,Gl),s(L,bs),s(bs,Yl),s(L,Ql),s(h,Zl),s(h,N),s(N,Kl),s(N,Lo),s(Lo,Xl),s(N,sr),s(N,So),s(So,or),s(N,ar),s(h,er),s(h,Ho),Ho.innerHTML=Bv,s(h,tr),s(h,Ds),s(Ds,nr),s(Ds,Mo),s(Mo,lr),s(Ds,rr),s(h,ir),s(h,jo),jo.innerHTML=zv,s(h,cr),s(h,q),s(q,pr),s(q,Ao),s(Ao,kr),s(q,hr),s(q,Vo),s(Vo,yr),s(q,vr),s(h,dr),s(h,Fo),Fo.innerHTML=Gv,s(h,ur),s(h,Cs),s(Cs,xr),s(Cs,No),s(No,fr),s(Cs,wr),s(h,mr),s(h,qo),qo.innerHTML=Yv,s(h,gr),s(h,S),s(S,_r),s(S,ze),s(ze,Er),s(S,br),s(S,$o),s($o,Dr),s(S,Cr),s(S,Wo),s(Wo,Tr),s(S,Pr),s(h,Or),s(h,$),s($,Ir),s($,Jo),s(Jo,Lr),s($,Sr),s($,Uo),s(Uo,Hr),s($,Mr),s(h,jr),s(h,W),s(W,Ar),s(W,Ro),s(Ro,Vr),s(W,Fr),s(W,Bo),s(Bo,Nr),s(W,qr),s(h,$r),s(h,zo),zo.innerHTML=Qv,s(h,Wr),s(h,Ge),s(Ge,Jr),s(h,Ur),s(h,Go),Go.innerHTML=Zv,s(h,Rr),s(h,Ts),s(Ts,Br),s(Ts,Yo),s(Yo,zr),s(Ts,Gr),s(h,Yr),s(h,Qo),Qo.innerHTML=Kv,s(h,Qr),s(h,Ps),s(Ps,Zr),s(Ps,Zo),s(Zo,Kr),s(Ps,Xr),s(h,si),s(h,Os),s(Os,oi),s(Os,Ko),s(Ko,ai),s(Os,ei),s(h,ti),s(h,Xo),Xo.innerHTML=Xv,s(h,ni),s(h,J),s(J,li),s(J,sa),s(sa,ri),s(J,ii),s(J,oa),s(oa,ci),s(J,pi),s(h,ki),s(h,Ye),s(Ye,Is),s(Is,hi),s(Is,aa),s(aa,yi),s(Is,vi),s(h,di),s(h,ea),ea.innerHTML=sd,s(h,ui),s(h,H),s(H,xi),s(H,ta),s(ta,fi),s(H,wi),s(H,na),s(na,mi),s(H,gi),s(H,la),s(la,_i),s(H,Ei),s(h,bi),s(h,ra),ra.innerHTML=od,s(h,Di),s(h,U),s(U,Ci),s(U,ia),s(ia,Ti),s(U,Pi),s(U,ca),s(ca,Oi),s(U,Ii),s(h,Li),s(h,pa),pa.innerHTML=ad,s(h,Si),s(h,Qe),s(Qe,Hi),_(d,wt,g),_(d,p,g),s(p,Ze),s(Ze,Ls),s(Ls,Mi),s(p,ji),s(p,Ss),s(Ss,Ai),s(Ss,ka),s(ka,Vi),s(Ss,Fi),s(p,Ni),s(p,Ke),s(Ke,qi),s(p,$i),s(p,ha),ha.innerHTML=ed,s(p,Wi),s(p,Xe),s(Xe,Ji),s(p,Ui),s(p,ya),ya.innerHTML=td,s(p,Ri),s(p,st),s(st,Bi),s(p,zi),s(p,va),va.innerHTML=nd,s(p,Gi),s(p,Hs),s(Hs,Yi),s(Hs,da),s(da,Qi),s(Hs,Zi),s(p,Ki),s(p,R),s(R,Xi),s(R,ua),s(ua,sc),s(R,oc),s(R,xa),s(xa,ac),s(R,ec),s(p,tc),s(p,Ms),s(Ms,nc),s(Ms,fa),s(fa,lc),s(Ms,rc),s(p,ic),s(p,js),s(js,cc),s(js,wa),s(wa,pc),s(js,kc),s(p,hc),s(p,ma),ma.innerHTML=ld,s(p,yc),s(p,B),s(B,vc),s(B,ga),s(ga,dc),s(B,uc),s(B,_a),s(_a,xc),s(B,fc),s(p,wc),s(p,Ea),Ea.innerHTML=rd,s(p,mc),s(p,M),s(M,gc),s(M,ba),s(ba,_c),s(M,Ec),s(M,Da),s(Da,bc),s(M,Dc),s(M,Ca),s(Ca,Cc),s(M,Tc),s(p,Pc),s(p,Ta),Ta.innerHTML=id,s(p,Oc),s(p,As),s(As,Ic),s(As,Pa),s(Pa,Lc),s(As,Sc),s(p,Hc),s(p,Oa),Oa.innerHTML=cd,s(p,Mc),s(p,b),s(b,jc),s(b,Ia),s(Ia,Ac),s(b,Vc),s(b,La),s(La,Fc),s(b,Nc),s(b,Sa),s(Sa,qc),s(b,$c),s(b,Ha),s(Ha,Wc),s(b,Jc),s(b,Ma),s(Ma,Uc),s(p,Rc),s(p,ja),ja.innerHTML=pd,s(p,Bc),s(p,z),s(z,zc),s(z,Aa),s(Aa,Gc),s(z,Yc),s(z,Va),s(Va,Qc),s(z,Zc),s(p,Kc),s(p,Fa),Fa.innerHTML=kd,s(p,Xc),s(p,Vs),s(Vs,sp),s(Vs,Na),s(Na,op),s(Vs,ap),s(p,ep),s(p,qa),qa.innerHTML=hd,s(p,tp),s(p,$a),s($a,np),s($a,Wa),s(Wa,lp),s(p,rp),s(p,Ja),Ja.innerHTML=yd,s(p,ip),s(p,G),s(G,cp),s(G,Ua),s(Ua,pp),s(G,kp),s(G,Ra),s(Ra,hp),s(G,yp),s(p,vp),s(p,Ba),Ba.innerHTML=vd,s(p,dp),s(p,Fs),s(Fs,up),s(Fs,za),s(za,xp),s(Fs,fp),s(p,wp),s(p,Ns),s(Ns,mp),s(Ns,Ga),s(Ga,gp),s(Ns,_p),s(p,Ep),s(p,Ya),Ya.innerHTML=dd,s(p,bp),s(p,Y),s(Y,Dp),s(Y,Qa),s(Qa,Cp),s(Y,Tp),s(Y,Za),s(Za,Pp),s(Y,Op),s(p,Ip),s(p,Ka),Ka.innerHTML=ud,s(p,Lp),s(p,Q),s(Q,Sp),s(Q,Xa),s(Xa,Hp),s(Q,Mp),s(Q,se),s(se,jp),s(Q,Ap),_(d,mt,g),_(d,x,g),s(x,ot),s(ot,qs),s(qs,Vp),s(x,Fp),s(x,Z),s(Z,Np),s(Z,oe),s(oe,qp),s(Z,$p),s(Z,ae),s(ae,Wp),s(Z,Jp),s(x,Up),s(x,at),s(at,Rp),s(x,Bp),s(x,j),s(j,$s),s($s,ee),s(ee,zp),s($s,Gp),s($s,Ws),s(Ws,Js),s(Js,Yp),s(Js,te),s(te,Qp),s(Js,Zp),s(Ws,Kp),s(Ws,et),s(et,Xp),s(j,sk),s(j,Us),s(Us,ne),s(ne,ok),s(Us,ak),s(Us,Rs),s(Rs,Bs),s(Bs,ek),s(Bs,le),s(le,tk),s(Bs,nk),s(Rs,lk),s(Rs,tt),s(tt,rk),s(j,ik),s(j,zs),s(zs,re),s(re,ck),s(zs,pk),s(zs,Gs),s(Gs,Ys),s(Ys,kk),s(Ys,ie),s(ie,hk),s(Ys,yk),s(Gs,vk),s(Gs,nt),s(nt,dk),s(j,uk),s(j,Qs),s(Qs,ce),s(ce,xk),s(Qs,fk),s(Qs,Zs),s(Zs,Ks),s(Ks,wk),s(Ks,pe),s(pe,mk),s(Ks,gk),s(Zs,_k),s(Zs,lt),s(lt,Ek),s(x,bk),s(x,Xs),s(Xs,Dk),s(Xs,ke),s(ke,Ck),s(Xs,Tk),s(x,Pk),s(x,rt),s(rt,Ok),s(x,Ik),s(x,he),he.innerHTML=xd,s(x,Lk),s(x,it),s(it,Sk),s(x,Hk),s(x,ye),ye.innerHTML=fd,s(x,Mk),s(x,ct),s(ct,jk),s(x,Ak),s(x,ve),ve.innerHTML=wd,s(x,Vk),s(x,pt),s(pt,Fk),s(x,Nk),s(x,de),de.innerHTML=md,s(x,qk),s(x,kt),s(kt,$k),s(x,Wk),s(x,ue),ue.innerHTML=gd,s(x,Jk),s(x,ht),s(ht,Uk),s(x,Rk),s(x,xe),xe.innerHTML=_d,_(d,gt,g),_(d,P,g),s(P,yt),s(yt,so),s(so,Bk),s(P,zk),s(P,K),s(K,Gk),s(K,fe),s(fe,Yk),s(K,Qk),s(K,we),s(we,Zk),s(K,Kk),s(P,Xk),s(P,vt),s(vt,sh),s(P,oh),s(P,dt),s(dt,ah),_t=!0},p:du,i(d){_t||(Mv(w.$$.fragment,d),_t=!0)},o(d){jv(w.$$.fragment,d),_t=!1},d(d){Av(w,d),d&&e(O),d&&e(C),d&&e(m),d&&e(E),d&&e(ut),d&&e(eo),d&&e(xt),d&&e(v),d&&e(ft),d&&e(h),d&&e(wt),d&&e(p),d&&e(mt),d&&e(x),d&&e(gt),d&&e(P)}}}function Eu(oo){let w,O;const C=[oo[0],Iv];let rs={$$slots:{default:[_u]},$$scope:{ctx:oo}};for(let m=0;m<C.length;m+=1)rs=nh(rs,C[m]);return w=new uu({props:rs}),{c(){Lv(w.$$.fragment)},l(m){Sv(w.$$.fragment,m)},m(m,E){Hv(w,m,E),O=!0},p(m,[E]){const ao=E&1?hu(C,[E&1&&Tv(m[0]),E&0&&Tv(Iv)]):{};E&2&&(ao.$$scope={dirty:E,ctx:m}),w.$set(ao)},i(m){O||(Mv(w.$$.fragment,m),O=!0)},o(m){jv(w.$$.fragment,m),O=!1},d(m){Av(w,m)}}}const Iv={title:"Retry asynchronous function using the callback pattern, promise chain and async await",date:"2020-06-21T08:00:00Z",tags:["JavaScript","Asynchronous","Problem Solving"],description:"How to retry asynchronous function using the callback pattern, promise chain and async await. Mental model for asynchronous JavaScript.",label:"blog"};function bu(oo,w,O){return yu("blog",{image:gu}),oo.$$set=C=>{O(0,w=nh(nh({},w),Pv(C)))},w=Pv(w),[w]}class Lu extends cu{constructor(w){super();pu(this,w,bu,Eu,ku,{})}}export{Lu as default,Iv as metadata};
