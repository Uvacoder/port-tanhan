import{S as vv,i as yv,s as uv,C as Bp,w as Mh,x as Uh,y as Hh,z as dv,A as Th,q as qh,o as Bh,B as $h,r as fv,R as jh,k as i,e as o,t as n,m as p,c as a,a as t,h as r,d as e,b as l,Q as qt,g as u,F as s,O as mv}from"../../chunks/vendor-ea160616.js";import{B as xv}from"../../chunks/BlogLayout-1be3dc1e.js";import{T as wv}from"../../chunks/TableOfContent-c4f5cb6e.js";import{_ as gv}from"../../chunks/twitter-card-image-a57df29d.js";import"../../chunks/stores-7d7fda0c.js";import"../../chunks/WebMentions-d768a574.js";/* empty css                                */var _v="/_app/assets/resolution-38a93b01.webp",Sh="/_app/assets/resolution-ae1270e0.png",bv="/_app/assets/ast-explorer-7f652ebd.webp",Ph="/_app/assets/ast-explorer-295c3117.jpeg",Ev="/_app/assets/relationship-c145c69f.webp",Ch="/_app/assets/relationship-fe442a09.png",Iv="/_app/assets/why-bundling-5208ef38.webp",Oh="/_app/assets/why-bundling-7bcbaa8f.png";function Av(le){let m,L,I,q,x,T,ie,xo,Bt,$t,ts,Nt,wo,Rt,Wt,rt,z,go,ns,Vt,Jt,B,F,Gt,rs,zt,Ft,ls,Qt,Kt,Q,Zt,is,Xt,Yt,ps,sn,en,pe,on,cs,an,lt,ce,_o,ks,tn,it,w,bo,hs,nn,rn,Eo,ln,pn,Io,cn,kn,Ao,vs,Lo,To,ys,$p,hn,jo,vn,yn,So,un,dn,$,Po,fn,mn,Co,xn,wn,Oo,gn,_n,Do,bn,En,Mo,us,Uo,Ho,ds,Np,In,qo,An,pt,K,Bo,fs,Ln,Tn,$o,jn,ct,k,No,ms,Sn,Pn,ke,Nh=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> calculate </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./calculate&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; measure</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> UNITS &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;../measurements&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> formula </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;formulas&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">oneCm</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">measure</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">UNITS</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">CM</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">result</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">calculate</span><span style="color: var(--shiki-color-text)">(formula</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> oneCm);</span></span></code></pre>`,Cn,Ro,On,Dn,N,Wo,he,Mn,Un,Vo,ve,Hn,qn,Jo,ye,Bn,$n,Go,Nn,Rn,zo,Wn,Vn,Fo,Jn,Gn,xs,ue,de,zn,Fn,Qn,fe,me,Kn,Zn,Xn,Qo,ws,Ko,Zo,gs,Rp,Yn,Xo,sr,er,j,xe,or,_s,ar,tr,we,nr,bs,rr,lr,ge,ir,Es,pr,cr,_e,kr,Is,hr,vr,be,Rh=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// babel</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;@babel/core&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.parseSync</span><span style="color: var(--shiki-color-text)">(code);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// acorn</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">acorn</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;acorn&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">acorn</span><span style="color: var(--shiki-token-function)">.parse</span><span style="color: var(--shiki-color-text)">(code</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; ecmaVersion</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2020</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> sourceType</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;module&#39;</span><span style="color: var(--shiki-color-text)"> &#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// esprima</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">esprima</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;esprima&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">esprima</span><span style="color: var(--shiki-token-function)">.parseScript</span><span style="color: var(--shiki-color-text)">(code);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// if you just need the import &amp; export</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// es-module-lexer is blazing fast, it is written in c, and loaded through web-assembly</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// is what powers vite for parsing dependencies</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">init</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">parse</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;es-module-lexer&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> init;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">imports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parse</span><span style="color: var(--shiki-color-text)">(code);</span></span></code></pre>`,yr,Yo,ur,dr,R,Ee,fr,As,mr,xr,Ie,wr,Ls,gr,_r,Ae,br,Ts,Er,Ir,Le,Wh=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// babel</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">traverse</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;@babel/traverse&#39;</span><span style="color: var(--shiki-color-text)">).default;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">traverse</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">ImportDeclaration</span><span style="color: var(--shiki-color-text)">(node) &#123;&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// acorn</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">walk</span><span style="color: var(--shiki-token-function)">.simple</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">ImportDeclaration</span><span style="color: var(--shiki-color-text)">(node) &#123;&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// estree-walker</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">walk</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;estree-walker&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">walk</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">enter</span><span style="color: var(--shiki-color-text)">(node) &#123;&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">leave</span><span style="color: var(--shiki-color-text)">(node) &#123;&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,Ar,sa,Lr,Tr,W,Te,jr,js,ea,Ss,Sr,Pr,oa,Ps,Cr,Or,je,Dr,aa,ta,Cs,Mr,Ur,Se,Hr,Os,na,Ds,qr,Br,ra,Ms,$r,kt,f,la,Us,Nr,Rr,ia,Wr,Vr,Hs,pa,Jr,Gr,ca,zr,Fr,Pe,Vh=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">resolve</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;a/b/app.js&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./calculate.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// a/b/calculate.js</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">resolve</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;a/b/app.js&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;../measurements.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// a/measurements.js</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">resolve</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;a/b/app.js&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;formulas&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// node_modules/formulas/src/index.js</span></span></code></pre>`,Qr,Ce,Kr,qs,Zr,Xr,ka,Yr,sl,ha,el,ol,V,va,al,tl,ya,nl,rl,ua,ll,il,da,Bs,fa,ma,$s,Wp,pl,xa,cl,kl,Ns,Rs,hl,Ws,Oe,vl,yl,ul,De,dl,Vs,fl,ht,Me,wa,Js,ml,vt,g,ga,Gs,xl,wl,_a,zs,gl,_l,ba,bl,El,Ea,Il,Al,J,Ia,Ue,Ll,Tl,He,qe,jl,Sl,Pl,D,Be,Cl,Ol,$e,Dl,Ml,Ne,Ul,Hl,ql,Aa,Bl,$l,Fs,Re,We,Nl,Rl,Wl,Ve,Je,Vl,Jl,Gl,La,zl,Fl,Ge,Jh='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">moduleCFromModuleA </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> moduleCFromModuleB;</span></span></code></pre>',Ql,Ta,Kl,yt,A,ja,Qs,Zl,Xl,Sa,Yl,si,Pa,ei,oi,Ca,ai,ti,ze,Gh=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// circle.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// square.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(side) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> side </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> side;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// app.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> squareArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./square&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> circleArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./circle&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">squareArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circleArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span></code></pre>`,ut,M,Oa,Ks,ni,ri,S,Da,li,ii,Ma,pi,ci,Ua,ki,hi,Ha,vi,yi,Fe,zh=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// webpack-bundle.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;circle.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(__exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> __getModule) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">__exports</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;square.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(__exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> __getModule) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">__exports</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(side) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> side </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> side;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;app.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(__exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> __getModule) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">squareArea</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">__getModule</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;square.js&#39;</span><span style="color: var(--shiki-color-text)">).default;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">circleArea</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">__getModule</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;circle.js&#39;</span><span style="color: var(--shiki-color-text)">).default;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">squareArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">))</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circleArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">))</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">webpackRuntime</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  modules</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  entry</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;app.js&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,dt,U,qa,Zs,ui,di,P,Ba,fi,mi,$a,xi,wi,Na,gi,_i,Ra,bi,Ei,Qe,Fh=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// rollup-bundle.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circle$area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">square$area</span><span style="color: var(--shiki-color-text)">(side) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> side </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> side;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">square$area</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circle$area</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span></code></pre>`,ft,Z,Wa,Xs,Ii,Ai,C,Va,Ja,Li,Ti,Ga,za,ji,Si,Fa,Ke,Pi,Ys,Ci,Oi,Qa,Ze,Di,se,Mi,mt,y,Ka,ee,Ui,Hi,Za,oe,qi,Bi,Xa,$i,Ni,Ya,Ri,Wi,Xe,Qh=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// a.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">as</span><span style="color: var(--shiki-color-text)"> b </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./b&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./c&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> &#123; d &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./d&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// main.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">as</span><span style="color: var(--shiki-color-text)"> a </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./a&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(a);</span></span></code></pre>`,Vi,st,Ji,Gi,Ye,Kh=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// a.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./c&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// b.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./c&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// c.js</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;c.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// main.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./a&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./b&#39;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`,zi,O,Fi,so,Qi,Ki,eo,Zi,Xi,oo,Yi,sp,ep,ao,Zh=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// a.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; b &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./b&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; c &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./c&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">a</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;a&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">setTimeout</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;a.js | b=</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">b</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> | c=</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">c</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// b.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; a &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./a&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; c &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./c&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">b</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;b&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">setTimeout</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;b.js | a=</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">a</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> | c=</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">c</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// c.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; a &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./a&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; b &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./b&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">c</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;c&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">setTimeout</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;c.js | a=</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">a</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> | b=</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">b</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// main.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; a &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./a&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; b &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./b&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; c &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./c&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">setTimeout</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;main.js | a=</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">a</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> | b=</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">b</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> | c=</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">c</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,op,et,ap,tp,to,Xh=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// a.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> a </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;a&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> &#123; a</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> b &#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> b </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;b&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// main.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; a</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> b &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./a&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;a = &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> a);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;b = &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> b);</span></span></code></pre>`,np,ae,rp,no,lp,ip,pp,ro,Yh=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// data.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">increment</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  count</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// a.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; count</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> increment &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./data&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;count = &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> count);</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">increment</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;count = &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> count);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// b.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; count</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> increment &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./data&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;count = &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> count);</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">increment</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;count = &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> count);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// main.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./a&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./b&#39;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`,cp,ot,kp,xt,X,at,te,hp,vp,G,yp,lo,up,dp,ne,fp,mp,wt;return m=new wv({props:{data:[{link:"background",title:"Background"},{link:"prior-art",title:"Prior Art"},{link:"week-1-resolving",title:"Week 1 - Resolving",nested:[{link:"why-module-bundler",title:"Why module bundler?"},{link:"1-we-start-from-an-entry-file",title:"1. We start from an entry file."},{link:"2-we-read-the-file-and-determine-what-is-being-imported-into-this-file",title:"2. We read the file and determine what is being imported into this file"},{link:"3-now-knowing-what-are-the-names-you-are-importing-from-you-need-to-figure-out-their-actual-file-path",title:"3. Now knowing what are the names you are importing from, you need to figure out their actual file path"},{link:"4-after-you-figured-the-file-path-you-re-importing-from-for-each-of-the-file-repeat-step-2-until-no-more-new-files-to-be-found",title:"4\uFE0F\u20E3 After you figured the file path you're importing from, for each of the file, \u{1F501} repeat step 2\uFE0F\u20E3 until no more new files to be found."},{link:"assignment",title:"Assignment"}]},{link:"week-2-bundling",title:"Week 2 - Bundling",nested:[{link:"observation-bundle-using-webpack",title:"\u{1F52D} Observation: Bundle using webpack",nested:[{link:"observation-bundle-using-rollup",title:"\u{1F52D} Observation: Bundle using rollup"}]},{link:"output-target-of-bundling",title:"\u{1F4E4} Output target of bundling"},{link:"assignment-1",title:"Assignment"},{link:"manipulating-ast",title:"\u{1F528} Manipulating AST"}]}]}}),{c(){Mh(m.$$.fragment),L=i(),I=o("section"),q=o("h2"),x=o("a"),T=n("Background"),ie=i(),xo=o("p"),Bt=n("We are trying out a new form of our weekly sharing, which is interest group-based."),$t=i(),ts=o("p"),Nt=n("I am hosting the "),wo=o("strong"),Rt=n('"Building a simplified webpack clone"'),Wt=n(" interest group, which lasted 8 weeks, and every week, we will cover 1 concept of webpack and an assignment to implement that concept ourselves."),rt=i(),z=o("section"),go=o("h2"),ns=o("a"),Vt=n("Prior Art"),Jt=i(),B=o("ul"),F=o("li"),Gt=n("\u{1F4FA} "),rs=o("a"),zt=n("Tobias Koppers"),Ft=n(" - bundling live by hand - "),ls=o("a"),Qt=n("https://youtube.com/watch?v=UNMkLHzofQI"),Kt=i(),Q=o("li"),Zt=n("\u{1F4FA} "),is=o("a"),Xt=n("Ronen Amiel"),Yt=n(" - build your own webpack - "),ps=o("a"),sn=n("https://youtube.com/watch?v=Gc9-7PBqOC8"),en=i(),pe=o("li"),on=n("\u{1F4D6} adam kelly - "),cs=o("a"),an=n("https://freecodecamp.org/news/lets-learn-how-module-bundlers-work-and-then-write-one-ourselves-b2e3fe6c88ae/"),lt=i(),ce=o("section"),_o=o("h2"),ks=o("a"),tn=n("Week 1 - Resolving"),it=i(),w=o("section"),bo=o("h3"),hs=o("a"),nn=n("Why module bundler?"),rn=i(),Eo=o("p"),ln=n("We love writing small modular JS files, but that shouldn't impact the users."),pn=i(),Io=o("p"),cn=n("Traditionally with limit on number of request connection, \u{1F40C} slow internet speed, we want to combine all the code into 1 file -> 1 network request"),kn=i(),Ao=o("p"),vs=o("picture"),Lo=o("source"),To=o("source"),ys=o("img"),hn=i(),jo=o("p"),vn=n("\u{1F570} Traditionally, we concatenate the source files into 1 big output file."),yn=i(),So=o("p"),un=n("But that begs the question"),dn=i(),$=o("ul"),Po=o("li"),fn=n("\u2753 what should be the order of concatenation (files may depend on each other) ?"),mn=i(),Co=o("li"),xn=n("\u2753 what if there's var naming conflict across files?"),wn=i(),Oo=o("li"),gn=n("\u2753 what if there's unused file?"),_n=i(),Do=o("p"),bn=n("\u{1F4A1} That's why we need a module system to define the relationship among the JS modules"),En=i(),Mo=o("p"),us=o("picture"),Uo=o("source"),Ho=o("source"),ds=o("img"),In=i(),qo=o("p"),An=n("So now, let's take a look how we can start building a module dependency graph"),pt=i(),K=o("section"),Bo=o("h3"),fs=o("a"),Ln=n("1. We start from an entry file."),Tn=i(),$o=o("p"),jn=n("This is the starting point of the application"),ct=i(),k=o("section"),No=o("h3"),ms=o("a"),Sn=n("2. We read the file and determine what is being imported into this file"),Pn=i(),ke=o("div"),Cn=i(),Ro=o("p"),On=n("In the example above, the following is imported:"),Dn=i(),N=o("ul"),Wo=o("li"),he=o("code"),Mn=n("'./calculate'"),Un=i(),Vo=o("li"),ve=o("code"),Hn=n("'../measurements'"),qn=i(),Jo=o("li"),ye=o("code"),Bn=n("'formulas'"),$n=i(),Go=o("p"),Nn=n("we can spot the import from our human eye \u{1F440}, but how can computer \u{1F916} do that for us?"),Rn=i(),zo=o("p"),Wn=n("\u{1F916} can parse the code in string into Abstract Syntax Tree (AST), something representing the code that \u{1F916} can understand."),Vn=i(),Fo=o("p"),Jn=n("in AST, import statement is represented by a node with:"),Gn=i(),xs=o("ul"),ue=o("li"),de=o("code"),zn=n("type"),Fn=n(' = "ImportDeclaration"'),Qn=i(),fe=o("li"),me=o("code"),Kn=n("source.value"),Zn=n(" = the filename it's trying to import"),Xn=i(),Qo=o("p"),ws=o("picture"),Ko=o("source"),Zo=o("source"),gs=o("img"),Yn=i(),Xo=o("p"),sr=n("There are various JavaScript parser out there, here are some of them"),er=i(),j=o("ul"),xe=o("li"),or=n("\u{1F517} "),_s=o("a"),ar=n("babel"),tr=i(),we=o("li"),nr=n("\u{1F517} "),bs=o("a"),rr=n("acorn"),lr=i(),ge=o("li"),ir=n("\u{1F517} "),Es=o("a"),pr=n("esprima"),cr=i(),_e=o("li"),kr=n("\u{1F517} "),Is=o("a"),hr=n("es-module-lexer"),vr=i(),be=o("div"),yr=i(),Yo=o("p"),ur=n("...and if you forgot about your tree-traversal algorithm \u{1F628}, here are some libraries that can help you out"),dr=i(),R=o("ul"),Ee=o("li"),fr=n("\u{1F517} "),As=o("a"),mr=n("babel-traverse"),xr=i(),Ie=o("li"),wr=n("\u{1F517} "),Ls=o("a"),gr=n("acorn-walk"),_r=i(),Ae=o("li"),br=n("\u{1F517} "),Ts=o("a"),Er=n("estree-walker"),Ir=i(),Le=o("div"),Ar=i(),sa=o("p"),Lr=n("Some other useful links"),Tr=i(),W=o("ul"),Te=o("li"),jr=n("Inspect your AST"),js=o("ul"),ea=o("li"),Ss=o("a"),Sr=n("https://astexplorer.net"),Pr=i(),oa=o("li"),Ps=o("a"),Cr=n("https://lihautan.com/babel-ast-explorer/"),Or=i(),je=o("li"),Dr=n("The JS AST Specification"),aa=o("ul"),ta=o("li"),Cs=o("a"),Mr=n("https://github.com/estree/estree"),Ur=i(),Se=o("li"),Hr=n("Guide on parsing, traversing AST"),Os=o("ul"),na=o("li"),Ds=o("a"),qr=n("https://lihautan.com/manipulating-ast-with-javascript"),Br=i(),ra=o("li"),Ms=o("a"),$r=n("https://lihautan.com/json-parser-with-javascript"),kt=i(),f=o("section"),la=o("h3"),Us=o("a"),Nr=n("3. Now knowing what are the names you are importing from, you need to figure out their actual file path"),Rr=i(),ia=o("p"),Wr=n("that depends on"),Vr=i(),Hs=o("ul"),pa=o("li"),Jr=n("the current file path"),Gr=i(),ca=o("li"),zr=n("the name you are importing from"),Fr=i(),Pe=o("div"),Qr=i(),Ce=o("p"),Kr=n("That leads us to the "),qs=o("a"),Zr=n("Node.js Module Resolution Algorithm"),Xr=i(),ka=o("p"),Yr=n("It describes the steps taken to resolve the file."),sl=i(),ha=o("p"),el=n("there are 3 scenarios in general:"),ol=i(),V=o("ul"),va=o("li"),al=n("load as file"),tl=i(),ya=o("li"),nl=n("load as directory"),rl=i(),ua=o("li"),ll=n("load as node_modules"),il=i(),da=o("p"),Bs=o("picture"),fa=o("source"),ma=o("source"),$s=o("img"),pl=i(),xa=o("p"),cl=n("Some other module resolution:"),kl=i(),Ns=o("ul"),Rs=o("li"),hl=n("webpack uses "),Ws=o("a"),Oe=o("code"),vl=n("enhanced-resolve"),yl=n(" which is a highly configurable resolver"),ul=i(),De=o("li"),dl=n("Typescript implements its own resolver, "),Vs=o("a"),fl=n("see how TS resolving works"),ht=i(),Me=o("section"),wa=o("h3"),Js=o("a"),ml=n("4\uFE0F\u20E3 After you figured the file path you're importing from, for each of the file, \u{1F501} repeat step 2\uFE0F\u20E3 until no more new files to be found."),vt=i(),g=o("section"),ga=o("h3"),Gs=o("a"),xl=n("Assignment"),wl=i(),_a=o("p"),zs=o("a"),gl=n("Test cases"),_l=i(),ba=o("p"),bl=n("For each test cases, we provide the entry file, and we expect"),El=i(),Ea=o("p"),Il=n("\u{1F4DD} Module"),Al=i(),J=o("ul"),Ia=o("li"),Ue=o("code"),Ll=n("filepath"),Tl=i(),He=o("li"),qe=o("code"),jl=n("dependencies"),Sl=n(" -> list of Depedencies (see below \u{1F447})"),Pl=i(),D=o("li"),Be=o("code"),Cl=n("isEntryFile"),Ol=n(" -> "),$e=o("code"),Dl=n("true"),Ml=n(" if it is the entry file / "),Ne=o("code"),Ul=n("false"),Hl=n(" otherwise"),ql=i(),Aa=o("p"),Bl=n("\u{1F4DD} Depedencies"),$l=i(),Fs=o("ul"),Re=o("li"),We=o("code"),Nl=n("module"),Rl=n(" (see above \u261D\uFE0F)"),Wl=i(),Ve=o("li"),Je=o("code"),Vl=n("exports"),Jl=n(' -> list of var names you are importing, eg "default", "measure" ..'),Gl=i(),La=o("p"),zl=n("\u{1F4DD} If 2 module are importing the same module, both should be referring to the same module instance"),Fl=i(),Ge=o("div"),Ql=i(),Ta=o("p"),Kl=n("\u{1F4DD} Be careful with circular dependency \u{1F648}"),yt=i(),A=o("section"),ja=o("h2"),Qs=o("a"),Zl=n("Week 2 - Bundling"),Xl=i(),Sa=o("p"),Yl=n("\u{1F914} How do you bundle modules into 1 file?"),si=i(),Pa=o("p"),ei=n("After studying the 2 most popular bundlers, webpack and rollup, i found that the way they bundle are very different."),oi=i(),Ca=o("p"),ai=n("Both of them come a long way, I believe both has its own pros and cons"),ti=i(),ze=o("div"),ut=i(),M=o("section"),Oa=o("h3"),Ks=o("a"),ni=n("\u{1F52D} Observation: Bundle using webpack"),ri=i(),S=o("ul"),Da=o("li"),li=n("\u{1F4DD} each module wrap in a function"),ii=i(),Ma=o("li"),pi=n("\u{1F4DD} a module map, module identifier as key"),ci=i(),Ua=o("li"),ki=n("\u{1F4DD} a runtime glue code to piece modules together"),hi=i(),Ha=o("li"),vi=n('\u{1F4DD} calling module function, with 2 parameters, 1 to assign the exports of the module, 1 to "require" other modules'),yi=i(),Fe=o("div"),dt=i(),U=o("section"),qa=o("h4"),Zs=o("a"),ui=n("\u{1F52D} Observation: Bundle using rollup"),di=i(),P=o("ul"),Ba=o("li"),fi=n("\u{1F4DD} much flatter bundle"),mi=i(),$a=o("li"),xi=n("\u{1F4DD} module are concatenated in topological order"),wi=i(),Na=o("li"),gi=n("\u{1F4DD} exports and imports are removed by renaming them to the same variable name"),_i=i(),Ra=o("li"),bi=n("\u{1F4DD} any variable in module scope that may have naming conflict with other variables are renamed"),Ei=i(),Qe=o("div"),ft=i(),Z=o("section"),Wa=o("h3"),Xs=o("a"),Ii=n("\u{1F4E4} Output target of bundling"),Ai=i(),C=o("ul"),Va=o("li"),Ja=o("p"),Li=n("IIFE (the most common target, we want to execute the script)"),Ti=i(),Ga=o("li"),za=o("p"),ji=n("CJS, ESM, UMD, AMD, ... (we want to bundle a library, exports of entry file is exported in selected module format)"),Si=i(),Fa=o("li"),Ke=o("p"),Pi=n("\u{1F517} "),Ys=o("a"),Ci=n("https://webpack.js.org/configuration/output/#outputlibrarytarget"),Oi=i(),Qa=o("li"),Ze=o("p"),Di=n("\u{1F517} "),se=o("a"),Mi=n("https://rollupjs.org/guide/en/#configuration-files"),mt=i(),y=o("section"),Ka=o("h3"),ee=o("a"),Ui=n("Assignment"),Hi=i(),Za=o("p"),oe=o("a"),qi=n("Test cases"),Bi=i(),Xa=o("p"),$i=n("Here are some of the the interesting test cases:"),Ni=i(),Ya=o("p"),Ri=n("\u{1F9EA} Able to handle re-export nicely"),Wi=i(),Xe=o("div"),Vi=i(),st=o("p"),Ji=n("\u{1F9EA} Importing the same file twice, but are you able to make sure it's gonna be evaluated only once?"),Gi=i(),Ye=o("div"),zi=i(),O=o("p"),Fi=n("\u{1F9EA} The dreaded circular dependency, are you able to make sure to get the value of "),so=o("code"),Qi=n("a"),Ki=n(", "),eo=o("code"),Zi=n("b"),Xi=n(", "),oo=o("code"),Yi=n("c"),sp=n(" in all the files?"),ep=i(),ao=o("div"),op=i(),et=o("p"),ap=n("\u{1F9EA} Are you able to export a variable before it is declared? Does the order matter?"),tp=i(),to=o("div"),np=i(),ae=o("p"),rp=n("\u{1F9EA} imported variables is not a normal variable, it's a live binding of the exported variable. Are you able to make sure that the value of "),no=o("code"),lp=n("count"),ip=n(" is always up to date?"),pp=i(),ro=o("div"),cp=i(),ot=o("p"),kp=n("\u{1F4DD} Be careful with circular dependency \u{1F648}"),xt=i(),X=o("section"),at=o("h3"),te=o("a"),hp=n("\u{1F528} Manipulating AST"),vp=i(),G=o("p"),yp=n("\u{1F4D6}  "),lo=o("a"),up=n("manipulating ast with javascript"),dp=n(` (generic)
\u{1F4D6}  `),ne=o("a"),fp=n("babel plugin handbook"),mp=n(" (babel)"),this.h()},l(c){Uh(m.$$.fragment,c),L=p(c),I=a(c,"SECTION",{});var h=t(I);q=a(h,"H2",{});var Vp=t(q);x=a(Vp,"A",{href:!0,id:!0});var Jp=t(x);T=r(Jp,"Background"),Jp.forEach(e),Vp.forEach(e),ie=p(h),xo=a(h,"P",{});var Gp=t(xo);Bt=r(Gp,"We are trying out a new form of our weekly sharing, which is interest group-based."),Gp.forEach(e),$t=p(h),ts=a(h,"P",{});var gt=t(ts);Nt=r(gt,"I am hosting the "),wo=a(gt,"STRONG",{});var zp=t(wo);Rt=r(zp,'"Building a simplified webpack clone"'),zp.forEach(e),Wt=r(gt," interest group, which lasted 8 weeks, and every week, we will cover 1 concept of webpack and an assignment to implement that concept ourselves."),gt.forEach(e),h.forEach(e),rt=p(c),z=a(c,"SECTION",{});var _t=t(z);go=a(_t,"H2",{});var Fp=t(go);ns=a(Fp,"A",{href:!0,id:!0});var Qp=t(ns);Vt=r(Qp,"Prior Art"),Qp.forEach(e),Fp.forEach(e),Jt=p(_t),B=a(_t,"UL",{});var io=t(B);F=a(io,"LI",{});var tt=t(F);Gt=r(tt,"\u{1F4FA} "),rs=a(tt,"A",{href:!0,rel:!0});var Kp=t(rs);zt=r(Kp,"Tobias Koppers"),Kp.forEach(e),Ft=r(tt," - bundling live by hand - "),ls=a(tt,"A",{href:!0,rel:!0});var Zp=t(ls);Qt=r(Zp,"https://youtube.com/watch?v=UNMkLHzofQI"),Zp.forEach(e),tt.forEach(e),Kt=p(io),Q=a(io,"LI",{});var nt=t(Q);Zt=r(nt,"\u{1F4FA} "),is=a(nt,"A",{href:!0,rel:!0});var Xp=t(is);Xt=r(Xp,"Ronen Amiel"),Xp.forEach(e),Yt=r(nt," - build your own webpack - "),ps=a(nt,"A",{href:!0,rel:!0});var Yp=t(ps);sn=r(Yp,"https://youtube.com/watch?v=Gc9-7PBqOC8"),Yp.forEach(e),nt.forEach(e),en=p(io),pe=a(io,"LI",{});var xp=t(pe);on=r(xp,"\u{1F4D6} adam kelly - "),cs=a(xp,"A",{href:!0,rel:!0});var sc=t(cs);an=r(sc,"https://freecodecamp.org/news/lets-learn-how-module-bundlers-work-and-then-write-one-ourselves-b2e3fe6c88ae/"),sc.forEach(e),xp.forEach(e),io.forEach(e),_t.forEach(e),lt=p(c),ce=a(c,"SECTION",{});var ec=t(ce);_o=a(ec,"H2",{});var oc=t(_o);ks=a(oc,"A",{href:!0,id:!0});var ac=t(ks);tn=r(ac,"Week 1 - Resolving"),ac.forEach(e),oc.forEach(e),ec.forEach(e),it=p(c),w=a(c,"SECTION",{});var b=t(w);bo=a(b,"H3",{});var tc=t(bo);hs=a(tc,"A",{href:!0,id:!0});var nc=t(hs);nn=r(nc,"Why module bundler?"),nc.forEach(e),tc.forEach(e),rn=p(b),Eo=a(b,"P",{});var rc=t(Eo);ln=r(rc,"We love writing small modular JS files, but that shouldn't impact the users."),rc.forEach(e),pn=p(b),Io=a(b,"P",{});var lc=t(Io);cn=r(lc,"Traditionally with limit on number of request connection, \u{1F40C} slow internet speed, we want to combine all the code into 1 file -> 1 network request"),lc.forEach(e),kn=p(b),Ao=a(b,"P",{});var ic=t(Ao);vs=a(ic,"PICTURE",{});var bt=t(vs);Lo=a(bt,"SOURCE",{type:!0,srcset:!0}),To=a(bt,"SOURCE",{type:!0,srcset:!0}),ys=a(bt,"IMG",{src:!0,loading:!0,alt:!0}),bt.forEach(e),ic.forEach(e),hn=p(b),jo=a(b,"P",{});var pc=t(jo);vn=r(pc,"\u{1F570} Traditionally, we concatenate the source files into 1 big output file."),pc.forEach(e),yn=p(b),So=a(b,"P",{});var cc=t(So);un=r(cc,"But that begs the question"),cc.forEach(e),dn=p(b),$=a(b,"UL",{});var po=t($);Po=a(po,"LI",{});var kc=t(Po);fn=r(kc,"\u2753 what should be the order of concatenation (files may depend on each other) ?"),kc.forEach(e),mn=p(po),Co=a(po,"LI",{});var hc=t(Co);xn=r(hc,"\u2753 what if there's var naming conflict across files?"),hc.forEach(e),wn=p(po),Oo=a(po,"LI",{});var vc=t(Oo);gn=r(vc,"\u2753 what if there's unused file?"),vc.forEach(e),po.forEach(e),_n=p(b),Do=a(b,"P",{});var yc=t(Do);bn=r(yc,"\u{1F4A1} That's why we need a module system to define the relationship among the JS modules"),yc.forEach(e),En=p(b),Mo=a(b,"P",{});var uc=t(Mo);us=a(uc,"PICTURE",{});var Et=t(us);Uo=a(Et,"SOURCE",{type:!0,srcset:!0}),Ho=a(Et,"SOURCE",{type:!0,srcset:!0}),ds=a(Et,"IMG",{src:!0,loading:!0,alt:!0}),Et.forEach(e),uc.forEach(e),In=p(b),qo=a(b,"P",{});var dc=t(qo);An=r(dc,"So now, let's take a look how we can start building a module dependency graph"),dc.forEach(e),b.forEach(e),pt=p(c),K=a(c,"SECTION",{});var It=t(K);Bo=a(It,"H3",{});var fc=t(Bo);fs=a(fc,"A",{href:!0,id:!0});var mc=t(fs);Ln=r(mc,"1. We start from an entry file."),mc.forEach(e),fc.forEach(e),Tn=p(It),$o=a(It,"P",{});var xc=t($o);jn=r(xc,"This is the starting point of the application"),xc.forEach(e),It.forEach(e),ct=p(c),k=a(c,"SECTION",{});var v=t(k);No=a(v,"H3",{});var wc=t(No);ms=a(wc,"A",{href:!0,id:!0});var gc=t(ms);Sn=r(gc,"2. We read the file and determine what is being imported into this file"),gc.forEach(e),wc.forEach(e),Pn=p(v),ke=a(v,"DIV",{class:!0});var sv=t(ke);sv.forEach(e),Cn=p(v),Ro=a(v,"P",{});var _c=t(Ro);On=r(_c,"In the example above, the following is imported:"),_c.forEach(e),Dn=p(v),N=a(v,"UL",{});var co=t(N);Wo=a(co,"LI",{});var bc=t(Wo);he=a(bc,"CODE",{class:!0});var Ec=t(he);Mn=r(Ec,"'./calculate'"),Ec.forEach(e),bc.forEach(e),Un=p(co),Vo=a(co,"LI",{});var Ic=t(Vo);ve=a(Ic,"CODE",{class:!0});var Ac=t(ve);Hn=r(Ac,"'../measurements'"),Ac.forEach(e),Ic.forEach(e),qn=p(co),Jo=a(co,"LI",{});var Lc=t(Jo);ye=a(Lc,"CODE",{class:!0});var Tc=t(ye);Bn=r(Tc,"'formulas'"),Tc.forEach(e),Lc.forEach(e),co.forEach(e),$n=p(v),Go=a(v,"P",{});var jc=t(Go);Nn=r(jc,"we can spot the import from our human eye \u{1F440}, but how can computer \u{1F916} do that for us?"),jc.forEach(e),Rn=p(v),zo=a(v,"P",{});var Sc=t(zo);Wn=r(Sc,"\u{1F916} can parse the code in string into Abstract Syntax Tree (AST), something representing the code that \u{1F916} can understand."),Sc.forEach(e),Vn=p(v),Fo=a(v,"P",{});var Pc=t(Fo);Jn=r(Pc,"in AST, import statement is represented by a node with:"),Pc.forEach(e),Gn=p(v),xs=a(v,"UL",{});var At=t(xs);ue=a(At,"LI",{});var wp=t(ue);de=a(wp,"CODE",{class:!0});var Cc=t(de);zn=r(Cc,"type"),Cc.forEach(e),Fn=r(wp,' = "ImportDeclaration"'),wp.forEach(e),Qn=p(At),fe=a(At,"LI",{});var gp=t(fe);me=a(gp,"CODE",{class:!0});var Oc=t(me);Kn=r(Oc,"source.value"),Oc.forEach(e),Zn=r(gp," = the filename it's trying to import"),gp.forEach(e),At.forEach(e),Xn=p(v),Qo=a(v,"P",{});var Dc=t(Qo);ws=a(Dc,"PICTURE",{});var Lt=t(ws);Ko=a(Lt,"SOURCE",{type:!0,srcset:!0}),Zo=a(Lt,"SOURCE",{type:!0,srcset:!0}),gs=a(Lt,"IMG",{src:!0,loading:!0,alt:!0}),Lt.forEach(e),Dc.forEach(e),Yn=p(v),Xo=a(v,"P",{});var Mc=t(Xo);sr=r(Mc,"There are various JavaScript parser out there, here are some of them"),Mc.forEach(e),er=p(v),j=a(v,"UL",{});var Y=t(j);xe=a(Y,"LI",{});var _p=t(xe);or=r(_p,"\u{1F517} "),_s=a(_p,"A",{href:!0,rel:!0});var Uc=t(_s);ar=r(Uc,"babel"),Uc.forEach(e),_p.forEach(e),tr=p(Y),we=a(Y,"LI",{});var bp=t(we);nr=r(bp,"\u{1F517} "),bs=a(bp,"A",{href:!0,rel:!0});var Hc=t(bs);rr=r(Hc,"acorn"),Hc.forEach(e),bp.forEach(e),lr=p(Y),ge=a(Y,"LI",{});var Ep=t(ge);ir=r(Ep,"\u{1F517} "),Es=a(Ep,"A",{href:!0,rel:!0});var qc=t(Es);pr=r(qc,"esprima"),qc.forEach(e),Ep.forEach(e),cr=p(Y),_e=a(Y,"LI",{});var Ip=t(_e);kr=r(Ip,"\u{1F517} "),Is=a(Ip,"A",{href:!0,rel:!0});var Bc=t(Is);hr=r(Bc,"es-module-lexer"),Bc.forEach(e),Ip.forEach(e),Y.forEach(e),vr=p(v),be=a(v,"DIV",{class:!0});var ev=t(be);ev.forEach(e),yr=p(v),Yo=a(v,"P",{});var $c=t(Yo);ur=r($c,"...and if you forgot about your tree-traversal algorithm \u{1F628}, here are some libraries that can help you out"),$c.forEach(e),dr=p(v),R=a(v,"UL",{});var ko=t(R);Ee=a(ko,"LI",{});var Ap=t(Ee);fr=r(Ap,"\u{1F517} "),As=a(Ap,"A",{href:!0,rel:!0});var Nc=t(As);mr=r(Nc,"babel-traverse"),Nc.forEach(e),Ap.forEach(e),xr=p(ko),Ie=a(ko,"LI",{});var Lp=t(Ie);wr=r(Lp,"\u{1F517} "),Ls=a(Lp,"A",{href:!0,rel:!0});var Rc=t(Ls);gr=r(Rc,"acorn-walk"),Rc.forEach(e),Lp.forEach(e),_r=p(ko),Ae=a(ko,"LI",{});var Tp=t(Ae);br=r(Tp,"\u{1F517} "),Ts=a(Tp,"A",{href:!0,rel:!0});var Wc=t(Ts);Er=r(Wc,"estree-walker"),Wc.forEach(e),Tp.forEach(e),ko.forEach(e),Ir=p(v),Le=a(v,"DIV",{class:!0});var ov=t(Le);ov.forEach(e),Ar=p(v),sa=a(v,"P",{});var Vc=t(sa);Lr=r(Vc,"Some other useful links"),Vc.forEach(e),Tr=p(v),W=a(v,"UL",{});var ho=t(W);Te=a(ho,"LI",{});var jp=t(Te);jr=r(jp,"Inspect your AST"),js=a(jp,"UL",{});var Tt=t(js);ea=a(Tt,"LI",{});var Jc=t(ea);Ss=a(Jc,"A",{href:!0,rel:!0});var Gc=t(Ss);Sr=r(Gc,"https://astexplorer.net"),Gc.forEach(e),Jc.forEach(e),Pr=p(Tt),oa=a(Tt,"LI",{});var zc=t(oa);Ps=a(zc,"A",{href:!0,rel:!0});var Fc=t(Ps);Cr=r(Fc,"https://lihautan.com/babel-ast-explorer/"),Fc.forEach(e),zc.forEach(e),Tt.forEach(e),jp.forEach(e),Or=p(ho),je=a(ho,"LI",{});var Sp=t(je);Dr=r(Sp,"The JS AST Specification"),aa=a(Sp,"UL",{});var Qc=t(aa);ta=a(Qc,"LI",{});var Kc=t(ta);Cs=a(Kc,"A",{href:!0,rel:!0});var Zc=t(Cs);Mr=r(Zc,"https://github.com/estree/estree"),Zc.forEach(e),Kc.forEach(e),Qc.forEach(e),Sp.forEach(e),Ur=p(ho),Se=a(ho,"LI",{});var Pp=t(Se);Hr=r(Pp,"Guide on parsing, traversing AST"),Os=a(Pp,"UL",{});var jt=t(Os);na=a(jt,"LI",{});var Xc=t(na);Ds=a(Xc,"A",{href:!0,rel:!0});var Yc=t(Ds);qr=r(Yc,"https://lihautan.com/manipulating-ast-with-javascript"),Yc.forEach(e),Xc.forEach(e),Br=p(jt),ra=a(jt,"LI",{});var sk=t(ra);Ms=a(sk,"A",{href:!0,rel:!0});var ek=t(Ms);$r=r(ek,"https://lihautan.com/json-parser-with-javascript"),ek.forEach(e),sk.forEach(e),jt.forEach(e),Pp.forEach(e),ho.forEach(e),v.forEach(e),kt=p(c),f=a(c,"SECTION",{});var _=t(f);la=a(_,"H3",{});var ok=t(la);Us=a(ok,"A",{href:!0,id:!0});var ak=t(Us);Nr=r(ak,"3. Now knowing what are the names you are importing from, you need to figure out their actual file path"),ak.forEach(e),ok.forEach(e),Rr=p(_),ia=a(_,"P",{});var tk=t(ia);Wr=r(tk,"that depends on"),tk.forEach(e),Vr=p(_),Hs=a(_,"UL",{});var St=t(Hs);pa=a(St,"LI",{});var nk=t(pa);Jr=r(nk,"the current file path"),nk.forEach(e),Gr=p(St),ca=a(St,"LI",{});var rk=t(ca);zr=r(rk,"the name you are importing from"),rk.forEach(e),St.forEach(e),Fr=p(_),Pe=a(_,"DIV",{class:!0});var av=t(Pe);av.forEach(e),Qr=p(_),Ce=a(_,"P",{});var Cp=t(Ce);Kr=r(Cp,"That leads us to the "),qs=a(Cp,"A",{href:!0,rel:!0});var lk=t(qs);Zr=r(lk,"Node.js Module Resolution Algorithm"),lk.forEach(e),Cp.forEach(e),Xr=p(_),ka=a(_,"P",{});var ik=t(ka);Yr=r(ik,"It describes the steps taken to resolve the file."),ik.forEach(e),sl=p(_),ha=a(_,"P",{});var pk=t(ha);el=r(pk,"there are 3 scenarios in general:"),pk.forEach(e),ol=p(_),V=a(_,"UL",{});var vo=t(V);va=a(vo,"LI",{});var ck=t(va);al=r(ck,"load as file"),ck.forEach(e),tl=p(vo),ya=a(vo,"LI",{});var kk=t(ya);nl=r(kk,"load as directory"),kk.forEach(e),rl=p(vo),ua=a(vo,"LI",{});var hk=t(ua);ll=r(hk,"load as node_modules"),hk.forEach(e),vo.forEach(e),il=p(_),da=a(_,"P",{});var vk=t(da);Bs=a(vk,"PICTURE",{});var Pt=t(Bs);fa=a(Pt,"SOURCE",{type:!0,srcset:!0}),ma=a(Pt,"SOURCE",{type:!0,srcset:!0}),$s=a(Pt,"IMG",{src:!0,loading:!0,alt:!0}),Pt.forEach(e),vk.forEach(e),pl=p(_),xa=a(_,"P",{});var yk=t(xa);cl=r(yk,"Some other module resolution:"),yk.forEach(e),kl=p(_),Ns=a(_,"UL",{});var Ct=t(Ns);Rs=a(Ct,"LI",{});var Ot=t(Rs);hl=r(Ot,"webpack uses "),Ws=a(Ot,"A",{href:!0,rel:!0});var uk=t(Ws);Oe=a(uk,"CODE",{class:!0});var dk=t(Oe);vl=r(dk,"enhanced-resolve"),dk.forEach(e),uk.forEach(e),yl=r(Ot," which is a highly configurable resolver"),Ot.forEach(e),ul=p(Ct),De=a(Ct,"LI",{});var Op=t(De);dl=r(Op,"Typescript implements its own resolver, "),Vs=a(Op,"A",{href:!0,rel:!0});var fk=t(Vs);fl=r(fk,"see how TS resolving works"),fk.forEach(e),Op.forEach(e),Ct.forEach(e),_.forEach(e),ht=p(c),Me=a(c,"SECTION",{});var mk=t(Me);wa=a(mk,"H3",{});var xk=t(wa);Js=a(xk,"A",{href:!0,id:!0});var wk=t(Js);ml=r(wk,"4\uFE0F\u20E3 After you figured the file path you're importing from, for each of the file, \u{1F501} repeat step 2\uFE0F\u20E3 until no more new files to be found."),wk.forEach(e),xk.forEach(e),mk.forEach(e),vt=p(c),g=a(c,"SECTION",{});var E=t(g);ga=a(E,"H3",{});var gk=t(ga);Gs=a(gk,"A",{href:!0,id:!0});var _k=t(Gs);xl=r(_k,"Assignment"),_k.forEach(e),gk.forEach(e),wl=p(E),_a=a(E,"P",{});var bk=t(_a);zs=a(bk,"A",{href:!0,rel:!0});var Ek=t(zs);gl=r(Ek,"Test cases"),Ek.forEach(e),bk.forEach(e),_l=p(E),ba=a(E,"P",{});var Ik=t(ba);bl=r(Ik,"For each test cases, we provide the entry file, and we expect"),Ik.forEach(e),El=p(E),Ea=a(E,"P",{});var Ak=t(Ea);Il=r(Ak,"\u{1F4DD} Module"),Ak.forEach(e),Al=p(E),J=a(E,"UL",{});var yo=t(J);Ia=a(yo,"LI",{});var Lk=t(Ia);Ue=a(Lk,"CODE",{class:!0});var Tk=t(Ue);Ll=r(Tk,"filepath"),Tk.forEach(e),Lk.forEach(e),Tl=p(yo),He=a(yo,"LI",{});var Dp=t(He);qe=a(Dp,"CODE",{class:!0});var jk=t(qe);jl=r(jk,"dependencies"),jk.forEach(e),Sl=r(Dp," -> list of Depedencies (see below \u{1F447})"),Dp.forEach(e),Pl=p(yo),D=a(yo,"LI",{});var re=t(D);Be=a(re,"CODE",{class:!0});var Sk=t(Be);Cl=r(Sk,"isEntryFile"),Sk.forEach(e),Ol=r(re," -> "),$e=a(re,"CODE",{class:!0});var Pk=t($e);Dl=r(Pk,"true"),Pk.forEach(e),Ml=r(re," if it is the entry file / "),Ne=a(re,"CODE",{class:!0});var Ck=t(Ne);Ul=r(Ck,"false"),Ck.forEach(e),Hl=r(re," otherwise"),re.forEach(e),yo.forEach(e),ql=p(E),Aa=a(E,"P",{});var Ok=t(Aa);Bl=r(Ok,"\u{1F4DD} Depedencies"),Ok.forEach(e),$l=p(E),Fs=a(E,"UL",{});var Dt=t(Fs);Re=a(Dt,"LI",{});var Mp=t(Re);We=a(Mp,"CODE",{class:!0});var Dk=t(We);Nl=r(Dk,"module"),Dk.forEach(e),Rl=r(Mp," (see above \u261D\uFE0F)"),Mp.forEach(e),Wl=p(Dt),Ve=a(Dt,"LI",{});var Up=t(Ve);Je=a(Up,"CODE",{class:!0});var Mk=t(Je);Vl=r(Mk,"exports"),Mk.forEach(e),Jl=r(Up,' -> list of var names you are importing, eg "default", "measure" ..'),Up.forEach(e),Dt.forEach(e),Gl=p(E),La=a(E,"P",{});var Uk=t(La);zl=r(Uk,"\u{1F4DD} If 2 module are importing the same module, both should be referring to the same module instance"),Uk.forEach(e),Fl=p(E),Ge=a(E,"DIV",{class:!0});var tv=t(Ge);tv.forEach(e),Ql=p(E),Ta=a(E,"P",{});var Hk=t(Ta);Kl=r(Hk,"\u{1F4DD} Be careful with circular dependency \u{1F648}"),Hk.forEach(e),E.forEach(e),yt=p(c),A=a(c,"SECTION",{});var H=t(A);ja=a(H,"H2",{});var qk=t(ja);Qs=a(qk,"A",{href:!0,id:!0});var Bk=t(Qs);Zl=r(Bk,"Week 2 - Bundling"),Bk.forEach(e),qk.forEach(e),Xl=p(H),Sa=a(H,"P",{});var $k=t(Sa);Yl=r($k,"\u{1F914} How do you bundle modules into 1 file?"),$k.forEach(e),si=p(H),Pa=a(H,"P",{});var Nk=t(Pa);ei=r(Nk,"After studying the 2 most popular bundlers, webpack and rollup, i found that the way they bundle are very different."),Nk.forEach(e),oi=p(H),Ca=a(H,"P",{});var Rk=t(Ca);ai=r(Rk,"Both of them come a long way, I believe both has its own pros and cons"),Rk.forEach(e),ti=p(H),ze=a(H,"DIV",{class:!0});var nv=t(ze);nv.forEach(e),H.forEach(e),ut=p(c),M=a(c,"SECTION",{});var uo=t(M);Oa=a(uo,"H3",{});var Wk=t(Oa);Ks=a(Wk,"A",{href:!0,id:!0});var Vk=t(Ks);ni=r(Vk,"\u{1F52D} Observation: Bundle using webpack"),Vk.forEach(e),Wk.forEach(e),ri=p(uo),S=a(uo,"UL",{});var ss=t(S);Da=a(ss,"LI",{});var Jk=t(Da);li=r(Jk,"\u{1F4DD} each module wrap in a function"),Jk.forEach(e),ii=p(ss),Ma=a(ss,"LI",{});var Gk=t(Ma);pi=r(Gk,"\u{1F4DD} a module map, module identifier as key"),Gk.forEach(e),ci=p(ss),Ua=a(ss,"LI",{});var zk=t(Ua);ki=r(zk,"\u{1F4DD} a runtime glue code to piece modules together"),zk.forEach(e),hi=p(ss),Ha=a(ss,"LI",{});var Fk=t(Ha);vi=r(Fk,'\u{1F4DD} calling module function, with 2 parameters, 1 to assign the exports of the module, 1 to "require" other modules'),Fk.forEach(e),ss.forEach(e),yi=p(uo),Fe=a(uo,"DIV",{class:!0});var rv=t(Fe);rv.forEach(e),uo.forEach(e),dt=p(c),U=a(c,"SECTION",{});var fo=t(U);qa=a(fo,"H4",{});var Qk=t(qa);Zs=a(Qk,"A",{href:!0,id:!0});var Kk=t(Zs);ui=r(Kk,"\u{1F52D} Observation: Bundle using rollup"),Kk.forEach(e),Qk.forEach(e),di=p(fo),P=a(fo,"UL",{});var es=t(P);Ba=a(es,"LI",{});var Zk=t(Ba);fi=r(Zk,"\u{1F4DD} much flatter bundle"),Zk.forEach(e),mi=p(es),$a=a(es,"LI",{});var Xk=t($a);xi=r(Xk,"\u{1F4DD} module are concatenated in topological order"),Xk.forEach(e),wi=p(es),Na=a(es,"LI",{});var Yk=t(Na);gi=r(Yk,"\u{1F4DD} exports and imports are removed by renaming them to the same variable name"),Yk.forEach(e),_i=p(es),Ra=a(es,"LI",{});var sh=t(Ra);bi=r(sh,"\u{1F4DD} any variable in module scope that may have naming conflict with other variables are renamed"),sh.forEach(e),es.forEach(e),Ei=p(fo),Qe=a(fo,"DIV",{class:!0});var lv=t(Qe);lv.forEach(e),fo.forEach(e),ft=p(c),Z=a(c,"SECTION",{});var Mt=t(Z);Wa=a(Mt,"H3",{});var eh=t(Wa);Xs=a(eh,"A",{href:!0,id:!0});var oh=t(Xs);Ii=r(oh,"\u{1F4E4} Output target of bundling"),oh.forEach(e),eh.forEach(e),Ai=p(Mt),C=a(Mt,"UL",{});var os=t(C);Va=a(os,"LI",{});var ah=t(Va);Ja=a(ah,"P",{});var th=t(Ja);Li=r(th,"IIFE (the most common target, we want to execute the script)"),th.forEach(e),ah.forEach(e),Ti=p(os),Ga=a(os,"LI",{});var nh=t(Ga);za=a(nh,"P",{});var rh=t(za);ji=r(rh,"CJS, ESM, UMD, AMD, ... (we want to bundle a library, exports of entry file is exported in selected module format)"),rh.forEach(e),nh.forEach(e),Si=p(os),Fa=a(os,"LI",{});var lh=t(Fa);Ke=a(lh,"P",{});var Hp=t(Ke);Pi=r(Hp,"\u{1F517} "),Ys=a(Hp,"A",{href:!0,rel:!0});var ih=t(Ys);Ci=r(ih,"https://webpack.js.org/configuration/output/#outputlibrarytarget"),ih.forEach(e),Hp.forEach(e),lh.forEach(e),Oi=p(os),Qa=a(os,"LI",{});var ph=t(Qa);Ze=a(ph,"P",{});var qp=t(Ze);Di=r(qp,"\u{1F517} "),se=a(qp,"A",{href:!0,rel:!0});var ch=t(se);Mi=r(ch,"https://rollupjs.org/guide/en/#configuration-files"),ch.forEach(e),qp.forEach(e),ph.forEach(e),os.forEach(e),Mt.forEach(e),mt=p(c),y=a(c,"SECTION",{});var d=t(y);Ka=a(d,"H3",{});var kh=t(Ka);ee=a(kh,"A",{href:!0,id:!0});var hh=t(ee);Ui=r(hh,"Assignment"),hh.forEach(e),kh.forEach(e),Hi=p(d),Za=a(d,"P",{});var vh=t(Za);oe=a(vh,"A",{href:!0,rel:!0});var yh=t(oe);qi=r(yh,"Test cases"),yh.forEach(e),vh.forEach(e),Bi=p(d),Xa=a(d,"P",{});var uh=t(Xa);$i=r(uh,"Here are some of the the interesting test cases:"),uh.forEach(e),Ni=p(d),Ya=a(d,"P",{});var dh=t(Ya);Ri=r(dh,"\u{1F9EA} Able to handle re-export nicely"),dh.forEach(e),Wi=p(d),Xe=a(d,"DIV",{class:!0});var iv=t(Xe);iv.forEach(e),Vi=p(d),st=a(d,"P",{});var fh=t(st);Ji=r(fh,"\u{1F9EA} Importing the same file twice, but are you able to make sure it's gonna be evaluated only once?"),fh.forEach(e),Gi=p(d),Ye=a(d,"DIV",{class:!0});var pv=t(Ye);pv.forEach(e),zi=p(d),O=a(d,"P",{});var as=t(O);Fi=r(as,"\u{1F9EA} The dreaded circular dependency, are you able to make sure to get the value of "),so=a(as,"CODE",{class:!0});var mh=t(so);Qi=r(mh,"a"),mh.forEach(e),Ki=r(as,", "),eo=a(as,"CODE",{class:!0});var xh=t(eo);Zi=r(xh,"b"),xh.forEach(e),Xi=r(as,", "),oo=a(as,"CODE",{class:!0});var wh=t(oo);Yi=r(wh,"c"),wh.forEach(e),sp=r(as," in all the files?"),as.forEach(e),ep=p(d),ao=a(d,"DIV",{class:!0});var cv=t(ao);cv.forEach(e),op=p(d),et=a(d,"P",{});var gh=t(et);ap=r(gh,"\u{1F9EA} Are you able to export a variable before it is declared? Does the order matter?"),gh.forEach(e),tp=p(d),to=a(d,"DIV",{class:!0});var kv=t(to);kv.forEach(e),np=p(d),ae=a(d,"P",{});var Ut=t(ae);rp=r(Ut,"\u{1F9EA} imported variables is not a normal variable, it's a live binding of the exported variable. Are you able to make sure that the value of "),no=a(Ut,"CODE",{class:!0});var _h=t(no);lp=r(_h,"count"),_h.forEach(e),ip=r(Ut," is always up to date?"),Ut.forEach(e),pp=p(d),ro=a(d,"DIV",{class:!0});var hv=t(ro);hv.forEach(e),cp=p(d),ot=a(d,"P",{});var bh=t(ot);kp=r(bh,"\u{1F4DD} Be careful with circular dependency \u{1F648}"),bh.forEach(e),d.forEach(e),xt=p(c),X=a(c,"SECTION",{});var Ht=t(X);at=a(Ht,"H3",{});var Eh=t(at);te=a(Eh,"A",{href:!0,id:!0});var Ih=t(te);hp=r(Ih,"\u{1F528} Manipulating AST"),Ih.forEach(e),Eh.forEach(e),vp=p(Ht),G=a(Ht,"P",{});var mo=t(G);yp=r(mo,"\u{1F4D6}  "),lo=a(mo,"A",{href:!0});var Ah=t(lo);up=r(Ah,"manipulating ast with javascript"),Ah.forEach(e),dp=r(mo,` (generic)
\u{1F4D6}  `),ne=a(mo,"A",{href:!0,rel:!0});var Lh=t(ne);fp=r(Lh,"babel plugin handbook"),Lh.forEach(e),mp=r(mo," (babel)"),mo.forEach(e),Ht.forEach(e),this.h()},h(){l(x,"href","#background"),l(x,"id","background"),l(ns,"href","#prior-art"),l(ns,"id","prior-art"),l(rs,"href","https://twitter.com/wSokra"),l(rs,"rel","nofollow"),l(ls,"href","https://youtube.com/watch?v=UNMkLHzofQI"),l(ls,"rel","nofollow"),l(is,"href","https://twitter.com/ronenamiel"),l(is,"rel","nofollow"),l(ps,"href","https://youtube.com/watch?v=Gc9-7PBqOC8"),l(ps,"rel","nofollow"),l(cs,"href","https://freecodecamp.org/news/lets-learn-how-module-bundlers-work-and-then-write-one-ourselves-b2e3fe6c88ae/"),l(cs,"rel","nofollow"),l(ks,"href","#week-1-resolving"),l(ks,"id","week-1-resolving"),l(hs,"href","#why-module-bundler"),l(hs,"id","why-module-bundler"),l(Lo,"type","image/webp"),l(Lo,"srcset",Iv),l(To,"type","image/png"),l(To,"srcset",Oh),qt(ys.src,$p=Oh)||l(ys,"src",$p),l(ys,"loading","lazy"),l(ys,"alt","why bundling"),l(Uo,"type","image/webp"),l(Uo,"srcset",Ev),l(Ho,"type","image/png"),l(Ho,"srcset",Ch),qt(ds.src,Np=Ch)||l(ds,"src",Np),l(ds,"loading","lazy"),l(ds,"alt","relationship within a bundle"),l(fs,"href","#1-we-start-from-an-entry-file"),l(fs,"id","1-we-start-from-an-entry-file"),l(ms,"href","#2-we-read-the-file-and-determine-what-is-being-imported-into-this-file"),l(ms,"id","2-we-read-the-file-and-determine-what-is-being-imported-into-this-file"),l(ke,"class","code-section"),l(he,"class","inline"),l(ve,"class","inline"),l(ye,"class","inline"),l(de,"class","inline"),l(me,"class","inline"),l(Ko,"type","image/webp"),l(Ko,"srcset",bv),l(Zo,"type","image/jpeg"),l(Zo,"srcset",Ph),qt(gs.src,Rp=Ph)||l(gs,"src",Rp),l(gs,"loading","lazy"),l(gs,"alt","ast explorer"),l(_s,"href","https://babeljs.io/docs/en/babel-core"),l(_s,"rel","nofollow"),l(bs,"href","https://github.com/acornjs/acorn"),l(bs,"rel","nofollow"),l(Es,"href","https://github.com/jquery/esprima"),l(Es,"rel","nofollow"),l(Is,"href","https://github.com/guybedford/es-module-lexer"),l(Is,"rel","nofollow"),l(be,"class","code-section"),l(As,"href","https://babeljs.io/docs/en/babel-traverse"),l(As,"rel","nofollow"),l(Ls,"href","https://github.com/acornjs/acorn/tree/master/acorn-walk"),l(Ls,"rel","nofollow"),l(Ts,"href","https://github.com/Rich-Harris/estree-walker"),l(Ts,"rel","nofollow"),l(Le,"class","code-section"),l(Ss,"href","https://astexplorer.net"),l(Ss,"rel","nofollow"),l(Ps,"href","https://lihautan.com/babel-ast-explorer/"),l(Ps,"rel","nofollow"),l(Cs,"href","https://github.com/estree/estree"),l(Cs,"rel","nofollow"),l(Ds,"href","https://lihautan.com/manipulating-ast-with-javascript"),l(Ds,"rel","nofollow"),l(Ms,"href","https://lihautan.com/json-parser-with-javascript"),l(Ms,"rel","nofollow"),l(Us,"href","#3-now-knowing-what-are-the-names-you-are-importing-from-you-need-to-figure-out-their-actual-file-path"),l(Us,"id","3-now-knowing-what-are-the-names-you-are-importing-from-you-need-to-figure-out-their-actual-file-path"),l(Pe,"class","code-section"),l(qs,"href","https://nodejs.org/api/modules.html#modules_all_together"),l(qs,"rel","nofollow"),l(fa,"type","image/webp"),l(fa,"srcset",_v),l(ma,"type","image/png"),l(ma,"srcset",Sh),qt($s.src,Wp=Sh)||l($s,"src",Wp),l($s,"loading","lazy"),l($s,"alt","node js module resolution algorithm"),l(Oe,"class","inline"),l(Ws,"href","https://github.com/webpack/enhanced-resolve"),l(Ws,"rel","nofollow"),l(Vs,"href","https://typescriptlang.org/docs/handbook/module-resolution.html"),l(Vs,"rel","nofollow"),l(Js,"href","#4-after-you-figured-the-file-path-you-re-importing-from-for-each-of-the-file-repeat-step-2-until-no-more-new-files-to-be-found"),l(Js,"id","4-after-you-figured-the-file-path-you-re-importing-from-for-each-of-the-file-repeat-step-2-until-no-more-new-files-to-be-found"),l(Gs,"href","#assignment"),l(Gs,"id","assignment"),l(zs,"href","https://github.com/tanhauhau/rk-webpack-clone"),l(zs,"rel","nofollow"),l(Ue,"class","inline"),l(qe,"class","inline"),l(Be,"class","inline"),l($e,"class","inline"),l(Ne,"class","inline"),l(We,"class","inline"),l(Je,"class","inline"),l(Ge,"class","code-section"),l(Qs,"href","#week-2-bundling"),l(Qs,"id","week-2-bundling"),l(ze,"class","code-section"),l(Ks,"href","#observation-bundle-using-webpack"),l(Ks,"id","observation-bundle-using-webpack"),l(Fe,"class","code-section"),l(Zs,"href","#observation-bundle-using-rollup"),l(Zs,"id","observation-bundle-using-rollup"),l(Qe,"class","code-section"),l(Xs,"href","#output-target-of-bundling"),l(Xs,"id","output-target-of-bundling"),l(Ys,"href","https://webpack.js.org/configuration/output/#outputlibrarytarget"),l(Ys,"rel","nofollow"),l(se,"href","https://rollupjs.org/guide/en/#configuration-files"),l(se,"rel","nofollow"),l(ee,"href","#assignment-1"),l(ee,"id","assignment-1"),l(oe,"href","https://github.com/tanhauhau/rk-webpack-clone"),l(oe,"rel","nofollow"),l(Xe,"class","code-section"),l(Ye,"class","code-section"),l(so,"class","inline"),l(eo,"class","inline"),l(oo,"class","inline"),l(ao,"class","code-section"),l(to,"class","code-section"),l(no,"class","inline"),l(ro,"class","code-section"),l(te,"href","#manipulating-ast"),l(te,"id","manipulating-ast"),l(lo,"href","/manipulating-ast-with-javascript/"),l(ne,"href","https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md"),l(ne,"rel","nofollow")},m(c,h){Hh(m,c,h),u(c,L,h),u(c,I,h),s(I,q),s(q,x),s(x,T),s(I,ie),s(I,xo),s(xo,Bt),s(I,$t),s(I,ts),s(ts,Nt),s(ts,wo),s(wo,Rt),s(ts,Wt),u(c,rt,h),u(c,z,h),s(z,go),s(go,ns),s(ns,Vt),s(z,Jt),s(z,B),s(B,F),s(F,Gt),s(F,rs),s(rs,zt),s(F,Ft),s(F,ls),s(ls,Qt),s(B,Kt),s(B,Q),s(Q,Zt),s(Q,is),s(is,Xt),s(Q,Yt),s(Q,ps),s(ps,sn),s(B,en),s(B,pe),s(pe,on),s(pe,cs),s(cs,an),u(c,lt,h),u(c,ce,h),s(ce,_o),s(_o,ks),s(ks,tn),u(c,it,h),u(c,w,h),s(w,bo),s(bo,hs),s(hs,nn),s(w,rn),s(w,Eo),s(Eo,ln),s(w,pn),s(w,Io),s(Io,cn),s(w,kn),s(w,Ao),s(Ao,vs),s(vs,Lo),s(vs,To),s(vs,ys),s(w,hn),s(w,jo),s(jo,vn),s(w,yn),s(w,So),s(So,un),s(w,dn),s(w,$),s($,Po),s(Po,fn),s($,mn),s($,Co),s(Co,xn),s($,wn),s($,Oo),s(Oo,gn),s(w,_n),s(w,Do),s(Do,bn),s(w,En),s(w,Mo),s(Mo,us),s(us,Uo),s(us,Ho),s(us,ds),s(w,In),s(w,qo),s(qo,An),u(c,pt,h),u(c,K,h),s(K,Bo),s(Bo,fs),s(fs,Ln),s(K,Tn),s(K,$o),s($o,jn),u(c,ct,h),u(c,k,h),s(k,No),s(No,ms),s(ms,Sn),s(k,Pn),s(k,ke),ke.innerHTML=Nh,s(k,Cn),s(k,Ro),s(Ro,On),s(k,Dn),s(k,N),s(N,Wo),s(Wo,he),s(he,Mn),s(N,Un),s(N,Vo),s(Vo,ve),s(ve,Hn),s(N,qn),s(N,Jo),s(Jo,ye),s(ye,Bn),s(k,$n),s(k,Go),s(Go,Nn),s(k,Rn),s(k,zo),s(zo,Wn),s(k,Vn),s(k,Fo),s(Fo,Jn),s(k,Gn),s(k,xs),s(xs,ue),s(ue,de),s(de,zn),s(ue,Fn),s(xs,Qn),s(xs,fe),s(fe,me),s(me,Kn),s(fe,Zn),s(k,Xn),s(k,Qo),s(Qo,ws),s(ws,Ko),s(ws,Zo),s(ws,gs),s(k,Yn),s(k,Xo),s(Xo,sr),s(k,er),s(k,j),s(j,xe),s(xe,or),s(xe,_s),s(_s,ar),s(j,tr),s(j,we),s(we,nr),s(we,bs),s(bs,rr),s(j,lr),s(j,ge),s(ge,ir),s(ge,Es),s(Es,pr),s(j,cr),s(j,_e),s(_e,kr),s(_e,Is),s(Is,hr),s(k,vr),s(k,be),be.innerHTML=Rh,s(k,yr),s(k,Yo),s(Yo,ur),s(k,dr),s(k,R),s(R,Ee),s(Ee,fr),s(Ee,As),s(As,mr),s(R,xr),s(R,Ie),s(Ie,wr),s(Ie,Ls),s(Ls,gr),s(R,_r),s(R,Ae),s(Ae,br),s(Ae,Ts),s(Ts,Er),s(k,Ir),s(k,Le),Le.innerHTML=Wh,s(k,Ar),s(k,sa),s(sa,Lr),s(k,Tr),s(k,W),s(W,Te),s(Te,jr),s(Te,js),s(js,ea),s(ea,Ss),s(Ss,Sr),s(js,Pr),s(js,oa),s(oa,Ps),s(Ps,Cr),s(W,Or),s(W,je),s(je,Dr),s(je,aa),s(aa,ta),s(ta,Cs),s(Cs,Mr),s(W,Ur),s(W,Se),s(Se,Hr),s(Se,Os),s(Os,na),s(na,Ds),s(Ds,qr),s(Os,Br),s(Os,ra),s(ra,Ms),s(Ms,$r),u(c,kt,h),u(c,f,h),s(f,la),s(la,Us),s(Us,Nr),s(f,Rr),s(f,ia),s(ia,Wr),s(f,Vr),s(f,Hs),s(Hs,pa),s(pa,Jr),s(Hs,Gr),s(Hs,ca),s(ca,zr),s(f,Fr),s(f,Pe),Pe.innerHTML=Vh,s(f,Qr),s(f,Ce),s(Ce,Kr),s(Ce,qs),s(qs,Zr),s(f,Xr),s(f,ka),s(ka,Yr),s(f,sl),s(f,ha),s(ha,el),s(f,ol),s(f,V),s(V,va),s(va,al),s(V,tl),s(V,ya),s(ya,nl),s(V,rl),s(V,ua),s(ua,ll),s(f,il),s(f,da),s(da,Bs),s(Bs,fa),s(Bs,ma),s(Bs,$s),s(f,pl),s(f,xa),s(xa,cl),s(f,kl),s(f,Ns),s(Ns,Rs),s(Rs,hl),s(Rs,Ws),s(Ws,Oe),s(Oe,vl),s(Rs,yl),s(Ns,ul),s(Ns,De),s(De,dl),s(De,Vs),s(Vs,fl),u(c,ht,h),u(c,Me,h),s(Me,wa),s(wa,Js),s(Js,ml),u(c,vt,h),u(c,g,h),s(g,ga),s(ga,Gs),s(Gs,xl),s(g,wl),s(g,_a),s(_a,zs),s(zs,gl),s(g,_l),s(g,ba),s(ba,bl),s(g,El),s(g,Ea),s(Ea,Il),s(g,Al),s(g,J),s(J,Ia),s(Ia,Ue),s(Ue,Ll),s(J,Tl),s(J,He),s(He,qe),s(qe,jl),s(He,Sl),s(J,Pl),s(J,D),s(D,Be),s(Be,Cl),s(D,Ol),s(D,$e),s($e,Dl),s(D,Ml),s(D,Ne),s(Ne,Ul),s(D,Hl),s(g,ql),s(g,Aa),s(Aa,Bl),s(g,$l),s(g,Fs),s(Fs,Re),s(Re,We),s(We,Nl),s(Re,Rl),s(Fs,Wl),s(Fs,Ve),s(Ve,Je),s(Je,Vl),s(Ve,Jl),s(g,Gl),s(g,La),s(La,zl),s(g,Fl),s(g,Ge),Ge.innerHTML=Jh,s(g,Ql),s(g,Ta),s(Ta,Kl),u(c,yt,h),u(c,A,h),s(A,ja),s(ja,Qs),s(Qs,Zl),s(A,Xl),s(A,Sa),s(Sa,Yl),s(A,si),s(A,Pa),s(Pa,ei),s(A,oi),s(A,Ca),s(Ca,ai),s(A,ti),s(A,ze),ze.innerHTML=Gh,u(c,ut,h),u(c,M,h),s(M,Oa),s(Oa,Ks),s(Ks,ni),s(M,ri),s(M,S),s(S,Da),s(Da,li),s(S,ii),s(S,Ma),s(Ma,pi),s(S,ci),s(S,Ua),s(Ua,ki),s(S,hi),s(S,Ha),s(Ha,vi),s(M,yi),s(M,Fe),Fe.innerHTML=zh,u(c,dt,h),u(c,U,h),s(U,qa),s(qa,Zs),s(Zs,ui),s(U,di),s(U,P),s(P,Ba),s(Ba,fi),s(P,mi),s(P,$a),s($a,xi),s(P,wi),s(P,Na),s(Na,gi),s(P,_i),s(P,Ra),s(Ra,bi),s(U,Ei),s(U,Qe),Qe.innerHTML=Fh,u(c,ft,h),u(c,Z,h),s(Z,Wa),s(Wa,Xs),s(Xs,Ii),s(Z,Ai),s(Z,C),s(C,Va),s(Va,Ja),s(Ja,Li),s(C,Ti),s(C,Ga),s(Ga,za),s(za,ji),s(C,Si),s(C,Fa),s(Fa,Ke),s(Ke,Pi),s(Ke,Ys),s(Ys,Ci),s(C,Oi),s(C,Qa),s(Qa,Ze),s(Ze,Di),s(Ze,se),s(se,Mi),u(c,mt,h),u(c,y,h),s(y,Ka),s(Ka,ee),s(ee,Ui),s(y,Hi),s(y,Za),s(Za,oe),s(oe,qi),s(y,Bi),s(y,Xa),s(Xa,$i),s(y,Ni),s(y,Ya),s(Ya,Ri),s(y,Wi),s(y,Xe),Xe.innerHTML=Qh,s(y,Vi),s(y,st),s(st,Ji),s(y,Gi),s(y,Ye),Ye.innerHTML=Kh,s(y,zi),s(y,O),s(O,Fi),s(O,so),s(so,Qi),s(O,Ki),s(O,eo),s(eo,Zi),s(O,Xi),s(O,oo),s(oo,Yi),s(O,sp),s(y,ep),s(y,ao),ao.innerHTML=Zh,s(y,op),s(y,et),s(et,ap),s(y,tp),s(y,to),to.innerHTML=Xh,s(y,np),s(y,ae),s(ae,rp),s(ae,no),s(no,lp),s(ae,ip),s(y,pp),s(y,ro),ro.innerHTML=Yh,s(y,cp),s(y,ot),s(ot,kp),u(c,xt,h),u(c,X,h),s(X,at),s(at,te),s(te,hp),s(X,vp),s(X,G),s(G,yp),s(G,lo),s(lo,up),s(G,dp),s(G,ne),s(ne,fp),s(G,mp),wt=!0},p:mv,i(c){wt||(qh(m.$$.fragment,c),wt=!0)},o(c){Bh(m.$$.fragment,c),wt=!1},d(c){$h(m,c),c&&e(L),c&&e(I),c&&e(rt),c&&e(z),c&&e(lt),c&&e(ce),c&&e(it),c&&e(w),c&&e(pt),c&&e(K),c&&e(ct),c&&e(k),c&&e(kt),c&&e(f),c&&e(ht),c&&e(Me),c&&e(vt),c&&e(g),c&&e(yt),c&&e(A),c&&e(ut),c&&e(M),c&&e(dt),c&&e(U),c&&e(ft),c&&e(Z),c&&e(mt),c&&e(y),c&&e(xt),c&&e(X)}}}function Lv(le){let m,L;const I=[le[0],Dh];let q={$$slots:{default:[Av]},$$scope:{ctx:le}};for(let x=0;x<I.length;x+=1)q=Bp(q,I[x]);return m=new xv({props:q}),{c(){Mh(m.$$.fragment)},l(x){Uh(m.$$.fragment,x)},m(x,T){Hh(m,x,T),L=!0},p(x,[T]){const ie=T&1?dv(I,[T&1&&Th(x[0]),T&0&&Th(Dh)]):{};T&2&&(ie.$$scope={dirty:T,ctx:x}),m.$set(ie)},i(x){L||(qh(m.$$.fragment,x),L=!0)},o(x){Bh(m.$$.fragment,x),L=!1},d(x){$h(m,x)}}}const Dh={title:"Building a simplified webpack clone",date:"2020-10-02T08:00:00Z",tags:["JavaScript","webpack"],label:"blog"};function Tv(le,m,L){return fv("blog",{image:gv}),le.$$set=I=>{L(0,m=Bp(Bp({},m),jh(I)))},m=jh(m),[m]}class Uv extends vv{constructor(m){super();yv(this,m,Tv,Lv,uv,{})}}export{Uv as default,Dh as metadata};
