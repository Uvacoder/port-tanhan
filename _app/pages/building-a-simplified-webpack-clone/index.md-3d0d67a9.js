import{S as mv,i as xv,s as wv,C as Np,w as Nh,x as $h,y as Wh,z as _v,A as Oh,q as Rh,o as Vh,B as Jh,r as gv,R as Dh,k as i,e as o,t as n,m as p,c as a,a as t,h as r,d as e,b as l,Q as Mt,f as u,g as d,F as s,O as bv}from"../../chunks/vendor-569a3c5c.js";import{B as Ev}from"../../chunks/BlogLayout-17b76cb2.js";import{T as Iv}from"../../chunks/TableOfContent-dbc18cb8.js";import{_ as Av}from"../../chunks/twitter-card-image-a57df29d.js";import"../../chunks/stores-ee936cd4.js";import"../../chunks/WebMentions-968cc380.js";/* empty css                                */var Lv="/_app/assets/resolution-2200871a.webp",Tv="/_app/assets/resolution-9852c085.webp",jv="/_app/assets/resolution-186eb573.png",Mh="/_app/assets/resolution-24fc7ecb.png",Sv="/_app/assets/ast-explorer-32fc0f90.webp",Pv="/_app/assets/ast-explorer-238b7db6.webp",Cv="/_app/assets/ast-explorer-3ca973fa.jpeg",Hh="/_app/assets/ast-explorer-f43b9e05.jpeg",Ov="/_app/assets/relationship-89cf5e96.webp",Dv="/_app/assets/relationship-c145c69f.webp",Mv="/_app/assets/relationship-216c3ca7.png",qh="/_app/assets/relationship-fe442a09.png",Hv="/_app/assets/why-bundling-4ca6805a.webp",qv="/_app/assets/why-bundling-604eeac3.webp",Bv="/_app/assets/why-bundling-c892a37b.png",Bh="/_app/assets/why-bundling-ec0a8239.png";function Uv(ie){let x,C,A,R,w,O,pe,Eo,Ht,qt,vs,Bt,Io,Ut,Nt,lt,os,Ao,ys,$t,Wt,V,as,Rt,us,Vt,Jt,ds,Gt,zt,ts,Ft,fs,Qt,Kt,ms,Zt,Xt,ce,Yt,xs,sn,it,ke,Lo,ws,en,pt,_,To,_s,on,an,jo,tn,nn,So,rn,ln,Po,J,he,Co,T,$p,pn,Oo,cn,kn,Do,hn,vn,G,Mo,yn,un,Ho,dn,fn,qo,mn,xn,Bo,wn,_n,Uo,z,ve,No,j,Wp,gn,$o,bn,ct,ns,Wo,gs,En,In,Ro,An,kt,k,Vo,bs,Ln,Tn,ye,Gh=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> calculate </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./calculate&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; measure</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> UNITS &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;../measurements&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> formula </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;formulas&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">oneCm</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">measure</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">UNITS</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">CM</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">result</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">calculate</span><span style="color: var(--shiki-color-text)">(formula</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> oneCm);</span></span></code></pre>`,jn,Jo,Sn,Pn,F,Go,ue,Cn,On,zo,de,Dn,Mn,Fo,fe,Hn,qn,Qo,Bn,Un,Ko,Nn,$n,Zo,Wn,Rn,Es,me,xe,Vn,Jn,Gn,we,_e,zn,Fn,Qn,Xo,Q,ge,Yo,S,Rp,Kn,sa,Zn,Xn,D,be,Yn,Is,sr,er,Ee,or,As,ar,tr,Ie,nr,Ls,rr,lr,Ae,ir,Ts,pr,cr,Le,zh=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// babel</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;@babel/core&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.parseSync</span><span style="color: var(--shiki-color-text)">(code);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// acorn</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">acorn</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;acorn&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">acorn</span><span style="color: var(--shiki-token-function)">.parse</span><span style="color: var(--shiki-color-text)">(code</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; ecmaVersion</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2020</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> sourceType</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;module&#39;</span><span style="color: var(--shiki-color-text)"> &#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// esprima</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">esprima</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;esprima&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">esprima</span><span style="color: var(--shiki-token-function)">.parseScript</span><span style="color: var(--shiki-color-text)">(code);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// if you just need the import &amp; export</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// es-module-lexer is blazing fast, it is written in c, and loaded through web-assembly</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// is what powers vite for parsing dependencies</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">init</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">parse</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;es-module-lexer&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> init;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">imports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parse</span><span style="color: var(--shiki-color-text)">(code);</span></span></code></pre>`,kr,ea,hr,vr,K,Te,yr,js,ur,dr,je,fr,Ss,mr,xr,Se,wr,Ps,_r,gr,Pe,Fh=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// babel</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">traverse</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;@babel/traverse&#39;</span><span style="color: var(--shiki-color-text)">).default;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">traverse</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">ImportDeclaration</span><span style="color: var(--shiki-color-text)">(node) &#123;&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// acorn</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">walk</span><span style="color: var(--shiki-token-function)">.simple</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">ImportDeclaration</span><span style="color: var(--shiki-color-text)">(node) &#123;&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// estree-walker</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">walk</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;estree-walker&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">walk</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">enter</span><span style="color: var(--shiki-color-text)">(node) &#123;&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">leave</span><span style="color: var(--shiki-color-text)">(node) &#123;&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,br,oa,Er,Ir,Z,Ce,Ar,Cs,aa,Os,Lr,Tr,ta,Ds,jr,Sr,Oe,Pr,na,ra,Ms,Cr,Or,De,Dr,Hs,la,qs,Mr,Hr,ia,Bs,qr,ht,m,pa,Us,Br,Ur,ca,Nr,$r,Ns,ka,Wr,Rr,ha,Vr,Jr,Me,Qh=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">resolve</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;a/b/app.js&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./calculate.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// a/b/calculate.js</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">resolve</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;a/b/app.js&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;../measurements.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// a/measurements.js</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">resolve</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;a/b/app.js&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;formulas&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// node_modules/formulas/src/index.js</span></span></code></pre>`,Gr,He,zr,$s,Fr,Qr,va,Kr,Zr,ya,Xr,Yr,X,ua,sl,el,da,ol,al,fa,tl,nl,ma,Y,qe,xa,P,Vp,rl,wa,ll,il,Ws,Rs,pl,Vs,Be,cl,kl,hl,Ue,vl,Js,yl,vt,Ne,_a,Gs,ul,yt,g,ga,zs,dl,fl,ba,Fs,ml,xl,Ea,wl,_l,Ia,gl,bl,ss,Aa,$e,El,Il,We,Re,Al,Ll,Tl,U,Ve,jl,Sl,Je,Pl,Cl,Ge,Ol,Dl,Ml,La,Hl,ql,Qs,ze,Fe,Bl,Ul,Nl,Qe,Ke,$l,Wl,Rl,Ta,Vl,Jl,Ze,Kh='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">moduleCFromModuleA </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> moduleCFromModuleB;</span></span></code></pre>',Gl,ja,zl,ut,L,Sa,Ks,Fl,Ql,Pa,Kl,Zl,Ca,Xl,Yl,Oa,si,ei,Xe,Zh=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// circle.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// square.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(side) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> side </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> side;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// app.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> squareArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./square&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> circleArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./circle&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">squareArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circleArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span></code></pre>`,dt,N,Da,Zs,oi,ai,M,Ma,ti,ni,Ha,ri,li,qa,ii,pi,Ba,ci,ki,Ye,Xh=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// webpack-bundle.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;circle.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(__exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> __getModule) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">__exports</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;square.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(__exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> __getModule) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">__exports</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(side) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> side </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> side;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;app.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(__exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> __getModule) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">squareArea</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">__getModule</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;square.js&#39;</span><span style="color: var(--shiki-color-text)">).default;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">circleArea</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">__getModule</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;circle.js&#39;</span><span style="color: var(--shiki-color-text)">).default;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">squareArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">))</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circleArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">))</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">webpackRuntime</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  modules</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  entry</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;app.js&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,ft,$,Ua,Xs,hi,vi,H,Na,yi,ui,$a,di,fi,Wa,mi,xi,Ra,wi,_i,so,Yh=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// rollup-bundle.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circle$area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">square$area</span><span style="color: var(--shiki-color-text)">(side) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> side </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> side;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">square$area</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circle$area</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span></code></pre>`,mt,rs,Va,Ys,gi,bi,q,Ja,Ga,Ei,Ii,za,Fa,Ai,Li,Qa,eo,Ti,se,ji,Si,Ka,oo,Pi,ee,Ci,xt,y,Za,oe,Oi,Di,Xa,ae,Mi,Hi,Ya,qi,Bi,st,Ui,Ni,ao,sv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// a.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">as</span><span style="color: var(--shiki-color-text)"> b </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./b&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./c&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> &#123; d &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./d&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// main.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">as</span><span style="color: var(--shiki-color-text)"> a </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./a&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(a);</span></span></code></pre>`,$i,et,Wi,Ri,to,ev=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// a.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./c&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// b.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./c&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// c.js</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;c.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// main.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./a&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./b&#39;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`,Vi,B,Ji,no,Gi,zi,ro,Fi,Qi,lo,Ki,Zi,Xi,io,ov=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// a.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; b &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./b&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; c &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./c&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">a</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;a&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">setTimeout</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;a.js | b=</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">b</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> | c=</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">c</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// b.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; a &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./a&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; c &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./c&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">b</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;b&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">setTimeout</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;b.js | a=</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">a</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> | c=</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">c</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// c.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; a &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./a&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; b &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./b&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">c</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;c&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">setTimeout</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;c.js | a=</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">a</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> | b=</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">b</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// main.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; a &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./a&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; b &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./b&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; c &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./c&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">setTimeout</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;main.js | a=</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">a</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> | b=</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">b</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> | c=</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">c</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,Yi,ot,sp,ep,po,av=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// a.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> a </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;a&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> &#123; a</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> b &#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> b </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;b&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// main.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; a</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> b &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./a&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;a = &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> a);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;b = &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> b);</span></span></code></pre>`,op,te,ap,co,tp,np,rp,ko,tv=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// data.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">increment</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  count</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// a.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; count</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> increment &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./data&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;count = &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> count);</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">increment</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;count = &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> count);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// b.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; count</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> increment &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./data&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;count = &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> count);</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">increment</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;count = &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> count);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// main.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./a&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./b&#39;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`,lp,at,ip,wt,ls,tt,ne,pp,cp,es,kp,ho,hp,vp,re,yp,up,_t;return x=new Iv({props:{data:[{link:"background",title:"Background"},{link:"prior-art",title:"Prior Art"},{link:"week-1-resolving",title:"Week 1 - Resolving",nested:[{link:"why-module-bundler",title:"Why module bundler?"},{link:"1-we-start-from-an-entry-file",title:"1. We start from an entry file."},{link:"2-we-read-the-file-and-determine-what-is-being-imported-into-this-file",title:"2. We read the file and determine what is being imported into this file"},{link:"3-now-knowing-what-are-the-names-you-are-importing-from-you-need-to-figure-out-their-actual-file-path",title:"3. Now knowing what are the names you are importing from, you need to figure out their actual file path"},{link:"4-after-you-figured-the-file-path-you-re-importing-from-for-each-of-the-file-repeat-step-2-until-no-more-new-files-to-be-found",title:"4\uFE0F\u20E3 After you figured the file path you're importing from, for each of the file, \u{1F501} repeat step 2\uFE0F\u20E3 until no more new files to be found."},{link:"assignment",title:"Assignment"}]},{link:"week-2-bundling",title:"Week 2 - Bundling",nested:[{link:"observation-bundle-using-webpack",title:"\u{1F52D} Observation: Bundle using webpack",nested:[{link:"observation-bundle-using-rollup",title:"\u{1F52D} Observation: Bundle using rollup"}]},{link:"output-target-of-bundling",title:"\u{1F4E4} Output target of bundling"},{link:"assignment-1",title:"Assignment"},{link:"manipulating-ast",title:"\u{1F528} Manipulating AST"}]}]}}),{c(){Nh(x.$$.fragment),C=i(),A=o("section"),R=o("h2"),w=o("a"),O=n("Background"),pe=i(),Eo=o("p"),Ht=n("We are trying out a new form of our weekly sharing, which is interest group-based."),qt=i(),vs=o("p"),Bt=n("I am hosting the "),Io=o("strong"),Ut=n('"Building a simplified webpack clone"'),Nt=n(" interest group, which lasted 8 weeks, and every week, we will cover 1 concept of webpack and an assignment to implement that concept ourselves."),lt=i(),os=o("section"),Ao=o("h2"),ys=o("a"),$t=n("Prior Art"),Wt=i(),V=o("ul"),as=o("li"),Rt=n("\u{1F4FA} "),us=o("a"),Vt=n("Tobias Koppers"),Jt=n(" - bundling live by hand - "),ds=o("a"),Gt=n("https://youtube.com/watch?v=UNMkLHzofQI"),zt=i(),ts=o("li"),Ft=n("\u{1F4FA} "),fs=o("a"),Qt=n("Ronen Amiel"),Kt=n(" - build your own webpack - "),ms=o("a"),Zt=n("https://youtube.com/watch?v=Gc9-7PBqOC8"),Xt=i(),ce=o("li"),Yt=n("\u{1F4D6} adam kelly - "),xs=o("a"),sn=n("https://freecodecamp.org/news/lets-learn-how-module-bundlers-work-and-then-write-one-ourselves-b2e3fe6c88ae/"),it=i(),ke=o("section"),Lo=o("h2"),ws=o("a"),en=n("Week 1 - Resolving"),pt=i(),_=o("section"),To=o("h3"),_s=o("a"),on=n("Why module bundler?"),an=i(),jo=o("p"),tn=n("We love writing small modular JS files, but that shouldn't impact the users."),nn=i(),So=o("p"),rn=n("Traditionally with limit on number of request connection, \u{1F40C} slow internet speed, we want to combine all the code into 1 file -> 1 network request"),ln=i(),Po=o("p"),J=o("span"),he=o("picture"),Co=o("source"),T=o("img"),pn=i(),Oo=o("p"),cn=n("\u{1F570} Traditionally, we concatenate the source files into 1 big output file."),kn=i(),Do=o("p"),hn=n("But that begs the question"),vn=i(),G=o("ul"),Mo=o("li"),yn=n("\u2753 what should be the order of concatenation (files may depend on each other) ?"),un=i(),Ho=o("li"),dn=n("\u2753 what if there's var naming conflict across files?"),fn=i(),qo=o("li"),mn=n("\u2753 what if there's unused file?"),xn=i(),Bo=o("p"),wn=n("\u{1F4A1} That's why we need a module system to define the relationship among the JS modules"),_n=i(),Uo=o("p"),z=o("span"),ve=o("picture"),No=o("source"),j=o("img"),gn=i(),$o=o("p"),bn=n("So now, let's take a look how we can start building a module dependency graph"),ct=i(),ns=o("section"),Wo=o("h3"),gs=o("a"),En=n("1. We start from an entry file."),In=i(),Ro=o("p"),An=n("This is the starting point of the application"),kt=i(),k=o("section"),Vo=o("h3"),bs=o("a"),Ln=n("2. We read the file and determine what is being imported into this file"),Tn=i(),ye=o("div"),jn=i(),Jo=o("p"),Sn=n("In the example above, the following is imported:"),Pn=i(),F=o("ul"),Go=o("li"),ue=o("code"),Cn=n("'./calculate'"),On=i(),zo=o("li"),de=o("code"),Dn=n("'../measurements'"),Mn=i(),Fo=o("li"),fe=o("code"),Hn=n("'formulas'"),qn=i(),Qo=o("p"),Bn=n("we can spot the import from our human eye \u{1F440}, but how can computer \u{1F916} do that for us?"),Un=i(),Ko=o("p"),Nn=n("\u{1F916} can parse the code in string into Abstract Syntax Tree (AST), something representing the code that \u{1F916} can understand."),$n=i(),Zo=o("p"),Wn=n("in AST, import statement is represented by a node with:"),Rn=i(),Es=o("ul"),me=o("li"),xe=o("code"),Vn=n("type"),Jn=n(' = "ImportDeclaration"'),Gn=i(),we=o("li"),_e=o("code"),zn=n("source.value"),Fn=n(" = the filename it's trying to import"),Qn=i(),Xo=o("p"),Q=o("span"),ge=o("picture"),Yo=o("source"),S=o("img"),Kn=i(),sa=o("p"),Zn=n("There are various JavaScript parser out there, here are some of them"),Xn=i(),D=o("ul"),be=o("li"),Yn=n("\u{1F517} "),Is=o("a"),sr=n("babel"),er=i(),Ee=o("li"),or=n("\u{1F517} "),As=o("a"),ar=n("acorn"),tr=i(),Ie=o("li"),nr=n("\u{1F517} "),Ls=o("a"),rr=n("esprima"),lr=i(),Ae=o("li"),ir=n("\u{1F517} "),Ts=o("a"),pr=n("es-module-lexer"),cr=i(),Le=o("div"),kr=i(),ea=o("p"),hr=n("...and if you forgot about your tree-traversal algorithm \u{1F628}, here are some libraries that can help you out"),vr=i(),K=o("ul"),Te=o("li"),yr=n("\u{1F517} "),js=o("a"),ur=n("babel-traverse"),dr=i(),je=o("li"),fr=n("\u{1F517} "),Ss=o("a"),mr=n("acorn-walk"),xr=i(),Se=o("li"),wr=n("\u{1F517} "),Ps=o("a"),_r=n("estree-walker"),gr=i(),Pe=o("div"),br=i(),oa=o("p"),Er=n("Some other useful links"),Ir=i(),Z=o("ul"),Ce=o("li"),Ar=n("Inspect your AST"),Cs=o("ul"),aa=o("li"),Os=o("a"),Lr=n("https://astexplorer.net"),Tr=i(),ta=o("li"),Ds=o("a"),jr=n("https://lihautan.com/babel-ast-explorer/"),Sr=i(),Oe=o("li"),Pr=n("The JS AST Specification"),na=o("ul"),ra=o("li"),Ms=o("a"),Cr=n("https://github.com/estree/estree"),Or=i(),De=o("li"),Dr=n("Guide on parsing, traversing AST"),Hs=o("ul"),la=o("li"),qs=o("a"),Mr=n("https://lihautan.com/manipulating-ast-with-javascript"),Hr=i(),ia=o("li"),Bs=o("a"),qr=n("https://lihautan.com/json-parser-with-javascript"),ht=i(),m=o("section"),pa=o("h3"),Us=o("a"),Br=n("3. Now knowing what are the names you are importing from, you need to figure out their actual file path"),Ur=i(),ca=o("p"),Nr=n("that depends on"),$r=i(),Ns=o("ul"),ka=o("li"),Wr=n("the current file path"),Rr=i(),ha=o("li"),Vr=n("the name you are importing from"),Jr=i(),Me=o("div"),Gr=i(),He=o("p"),zr=n("That leads us to the "),$s=o("a"),Fr=n("Node.js Module Resolution Algorithm"),Qr=i(),va=o("p"),Kr=n("It describes the steps taken to resolve the file."),Zr=i(),ya=o("p"),Xr=n("there are 3 scenarios in general:"),Yr=i(),X=o("ul"),ua=o("li"),sl=n("load as file"),el=i(),da=o("li"),ol=n("load as directory"),al=i(),fa=o("li"),tl=n("load as node_modules"),nl=i(),ma=o("p"),Y=o("span"),qe=o("picture"),xa=o("source"),P=o("img"),rl=i(),wa=o("p"),ll=n("Some other module resolution:"),il=i(),Ws=o("ul"),Rs=o("li"),pl=n("webpack uses "),Vs=o("a"),Be=o("code"),cl=n("enhanced-resolve"),kl=n(" which is a highly configurable resolver"),hl=i(),Ue=o("li"),vl=n("Typescript implements its own resolver, "),Js=o("a"),yl=n("see how TS resolving works"),vt=i(),Ne=o("section"),_a=o("h3"),Gs=o("a"),ul=n("4\uFE0F\u20E3 After you figured the file path you're importing from, for each of the file, \u{1F501} repeat step 2\uFE0F\u20E3 until no more new files to be found."),yt=i(),g=o("section"),ga=o("h3"),zs=o("a"),dl=n("Assignment"),fl=i(),ba=o("p"),Fs=o("a"),ml=n("Test cases"),xl=i(),Ea=o("p"),wl=n("For each test cases, we provide the entry file, and we expect"),_l=i(),Ia=o("p"),gl=n("\u{1F4DD} Module"),bl=i(),ss=o("ul"),Aa=o("li"),$e=o("code"),El=n("filepath"),Il=i(),We=o("li"),Re=o("code"),Al=n("dependencies"),Ll=n(" -> list of Depedencies (see below \u{1F447})"),Tl=i(),U=o("li"),Ve=o("code"),jl=n("isEntryFile"),Sl=n(" -> "),Je=o("code"),Pl=n("true"),Cl=n(" if it is the entry file / "),Ge=o("code"),Ol=n("false"),Dl=n(" otherwise"),Ml=i(),La=o("p"),Hl=n("\u{1F4DD} Depedencies"),ql=i(),Qs=o("ul"),ze=o("li"),Fe=o("code"),Bl=n("module"),Ul=n(" (see above \u261D\uFE0F)"),Nl=i(),Qe=o("li"),Ke=o("code"),$l=n("exports"),Wl=n(' -> list of var names you are importing, eg "default", "measure" ..'),Rl=i(),Ta=o("p"),Vl=n("\u{1F4DD} If 2 module are importing the same module, both should be referring to the same module instance"),Jl=i(),Ze=o("div"),Gl=i(),ja=o("p"),zl=n("\u{1F4DD} Be careful with circular dependency \u{1F648}"),ut=i(),L=o("section"),Sa=o("h2"),Ks=o("a"),Fl=n("Week 2 - Bundling"),Ql=i(),Pa=o("p"),Kl=n("\u{1F914} How do you bundle modules into 1 file?"),Zl=i(),Ca=o("p"),Xl=n("After studying the 2 most popular bundlers, webpack and rollup, i found that the way they bundle are very different."),Yl=i(),Oa=o("p"),si=n("Both of them come a long way, I believe both has its own pros and cons"),ei=i(),Xe=o("div"),dt=i(),N=o("section"),Da=o("h3"),Zs=o("a"),oi=n("\u{1F52D} Observation: Bundle using webpack"),ai=i(),M=o("ul"),Ma=o("li"),ti=n("\u{1F4DD} each module wrap in a function"),ni=i(),Ha=o("li"),ri=n("\u{1F4DD} a module map, module identifier as key"),li=i(),qa=o("li"),ii=n("\u{1F4DD} a runtime glue code to piece modules together"),pi=i(),Ba=o("li"),ci=n('\u{1F4DD} calling module function, with 2 parameters, 1 to assign the exports of the module, 1 to "require" other modules'),ki=i(),Ye=o("div"),ft=i(),$=o("section"),Ua=o("h4"),Xs=o("a"),hi=n("\u{1F52D} Observation: Bundle using rollup"),vi=i(),H=o("ul"),Na=o("li"),yi=n("\u{1F4DD} much flatter bundle"),ui=i(),$a=o("li"),di=n("\u{1F4DD} module are concatenated in topological order"),fi=i(),Wa=o("li"),mi=n("\u{1F4DD} exports and imports are removed by renaming them to the same variable name"),xi=i(),Ra=o("li"),wi=n("\u{1F4DD} any variable in module scope that may have naming conflict with other variables are renamed"),_i=i(),so=o("div"),mt=i(),rs=o("section"),Va=o("h3"),Ys=o("a"),gi=n("\u{1F4E4} Output target of bundling"),bi=i(),q=o("ul"),Ja=o("li"),Ga=o("p"),Ei=n("IIFE (the most common target, we want to execute the script)"),Ii=i(),za=o("li"),Fa=o("p"),Ai=n("CJS, ESM, UMD, AMD, ... (we want to bundle a library, exports of entry file is exported in selected module format)"),Li=i(),Qa=o("li"),eo=o("p"),Ti=n("\u{1F517} "),se=o("a"),ji=n("https://webpack.js.org/configuration/output/#outputlibrarytarget"),Si=i(),Ka=o("li"),oo=o("p"),Pi=n("\u{1F517} "),ee=o("a"),Ci=n("https://rollupjs.org/guide/en/#configuration-files"),xt=i(),y=o("section"),Za=o("h3"),oe=o("a"),Oi=n("Assignment"),Di=i(),Xa=o("p"),ae=o("a"),Mi=n("Test cases"),Hi=i(),Ya=o("p"),qi=n("Here are some of the the interesting test cases:"),Bi=i(),st=o("p"),Ui=n("\u{1F9EA} Able to handle re-export nicely"),Ni=i(),ao=o("div"),$i=i(),et=o("p"),Wi=n("\u{1F9EA} Importing the same file twice, but are you able to make sure it's gonna be evaluated only once?"),Ri=i(),to=o("div"),Vi=i(),B=o("p"),Ji=n("\u{1F9EA} The dreaded circular dependency, are you able to make sure to get the value of "),no=o("code"),Gi=n("a"),zi=n(", "),ro=o("code"),Fi=n("b"),Qi=n(", "),lo=o("code"),Ki=n("c"),Zi=n(" in all the files?"),Xi=i(),io=o("div"),Yi=i(),ot=o("p"),sp=n("\u{1F9EA} Are you able to export a variable before it is declared? Does the order matter?"),ep=i(),po=o("div"),op=i(),te=o("p"),ap=n("\u{1F9EA} imported variables is not a normal variable, it's a live binding of the exported variable. Are you able to make sure that the value of "),co=o("code"),tp=n("count"),np=n(" is always up to date?"),rp=i(),ko=o("div"),lp=i(),at=o("p"),ip=n("\u{1F4DD} Be careful with circular dependency \u{1F648}"),wt=i(),ls=o("section"),tt=o("h3"),ne=o("a"),pp=n("\u{1F528} Manipulating AST"),cp=i(),es=o("p"),kp=n("\u{1F4D6}  "),ho=o("a"),hp=n("manipulating ast with javascript"),vp=n(` (generic)
\u{1F4D6}  `),re=o("a"),yp=n("babel plugin handbook"),up=n(" (babel)"),this.h()},l(c){$h(x.$$.fragment,c),C=p(c),A=a(c,"SECTION",{});var h=t(A);R=a(h,"H2",{});var Jp=t(R);w=a(Jp,"A",{href:!0,id:!0});var Gp=t(w);O=r(Gp,"Background"),Gp.forEach(e),Jp.forEach(e),pe=p(h),Eo=a(h,"P",{});var zp=t(Eo);Ht=r(zp,"We are trying out a new form of our weekly sharing, which is interest group-based."),zp.forEach(e),qt=p(h),vs=a(h,"P",{});var gt=t(vs);Bt=r(gt,"I am hosting the "),Io=a(gt,"STRONG",{});var Fp=t(Io);Ut=r(Fp,'"Building a simplified webpack clone"'),Fp.forEach(e),Nt=r(gt," interest group, which lasted 8 weeks, and every week, we will cover 1 concept of webpack and an assignment to implement that concept ourselves."),gt.forEach(e),h.forEach(e),lt=p(c),os=a(c,"SECTION",{});var bt=t(os);Ao=a(bt,"H2",{});var Qp=t(Ao);ys=a(Qp,"A",{href:!0,id:!0});var Kp=t(ys);$t=r(Kp,"Prior Art"),Kp.forEach(e),Qp.forEach(e),Wt=p(bt),V=a(bt,"UL",{});var vo=t(V);as=a(vo,"LI",{});var nt=t(as);Rt=r(nt,"\u{1F4FA} "),us=a(nt,"A",{href:!0,rel:!0});var Zp=t(us);Vt=r(Zp,"Tobias Koppers"),Zp.forEach(e),Jt=r(nt," - bundling live by hand - "),ds=a(nt,"A",{href:!0,rel:!0});var Xp=t(ds);Gt=r(Xp,"https://youtube.com/watch?v=UNMkLHzofQI"),Xp.forEach(e),nt.forEach(e),zt=p(vo),ts=a(vo,"LI",{});var rt=t(ts);Ft=r(rt,"\u{1F4FA} "),fs=a(rt,"A",{href:!0,rel:!0});var Yp=t(fs);Qt=r(Yp,"Ronen Amiel"),Yp.forEach(e),Kt=r(rt," - build your own webpack - "),ms=a(rt,"A",{href:!0,rel:!0});var sc=t(ms);Zt=r(sc,"https://youtube.com/watch?v=Gc9-7PBqOC8"),sc.forEach(e),rt.forEach(e),Xt=p(vo),ce=a(vo,"LI",{});var dp=t(ce);Yt=r(dp,"\u{1F4D6} adam kelly - "),xs=a(dp,"A",{href:!0,rel:!0});var ec=t(xs);sn=r(ec,"https://freecodecamp.org/news/lets-learn-how-module-bundlers-work-and-then-write-one-ourselves-b2e3fe6c88ae/"),ec.forEach(e),dp.forEach(e),vo.forEach(e),bt.forEach(e),it=p(c),ke=a(c,"SECTION",{});var oc=t(ke);Lo=a(oc,"H2",{});var ac=t(Lo);ws=a(ac,"A",{href:!0,id:!0});var tc=t(ws);en=r(tc,"Week 1 - Resolving"),tc.forEach(e),ac.forEach(e),oc.forEach(e),pt=p(c),_=a(c,"SECTION",{});var E=t(_);To=a(E,"H3",{});var nc=t(To);_s=a(nc,"A",{href:!0,id:!0});var rc=t(_s);on=r(rc,"Why module bundler?"),rc.forEach(e),nc.forEach(e),an=p(E),jo=a(E,"P",{});var lc=t(jo);tn=r(lc,"We love writing small modular JS files, but that shouldn't impact the users."),lc.forEach(e),nn=p(E),So=a(E,"P",{});var ic=t(So);rn=r(ic,"Traditionally with limit on number of request connection, \u{1F40C} slow internet speed, we want to combine all the code into 1 file -> 1 network request"),ic.forEach(e),ln=p(E),Po=a(E,"P",{});var pc=t(Po);J=a(pc,"SPAN",{style:!0});var cc=t(J);he=a(cc,"PICTURE",{});var fp=t(he);Co=a(fp,"SOURCE",{type:!0,srcset:!0}),T=a(fp,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),fp.forEach(e),cc.forEach(e),pc.forEach(e),pn=p(E),Oo=a(E,"P",{});var kc=t(Oo);cn=r(kc,"\u{1F570} Traditionally, we concatenate the source files into 1 big output file."),kc.forEach(e),kn=p(E),Do=a(E,"P",{});var hc=t(Do);hn=r(hc,"But that begs the question"),hc.forEach(e),vn=p(E),G=a(E,"UL",{});var yo=t(G);Mo=a(yo,"LI",{});var vc=t(Mo);yn=r(vc,"\u2753 what should be the order of concatenation (files may depend on each other) ?"),vc.forEach(e),un=p(yo),Ho=a(yo,"LI",{});var yc=t(Ho);dn=r(yc,"\u2753 what if there's var naming conflict across files?"),yc.forEach(e),fn=p(yo),qo=a(yo,"LI",{});var uc=t(qo);mn=r(uc,"\u2753 what if there's unused file?"),uc.forEach(e),yo.forEach(e),xn=p(E),Bo=a(E,"P",{});var dc=t(Bo);wn=r(dc,"\u{1F4A1} That's why we need a module system to define the relationship among the JS modules"),dc.forEach(e),_n=p(E),Uo=a(E,"P",{});var fc=t(Uo);z=a(fc,"SPAN",{style:!0});var mc=t(z);ve=a(mc,"PICTURE",{});var mp=t(ve);No=a(mp,"SOURCE",{type:!0,srcset:!0}),j=a(mp,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),mp.forEach(e),mc.forEach(e),fc.forEach(e),gn=p(E),$o=a(E,"P",{});var xc=t($o);bn=r(xc,"So now, let's take a look how we can start building a module dependency graph"),xc.forEach(e),E.forEach(e),ct=p(c),ns=a(c,"SECTION",{});var Et=t(ns);Wo=a(Et,"H3",{});var wc=t(Wo);gs=a(wc,"A",{href:!0,id:!0});var _c=t(gs);En=r(_c,"1. We start from an entry file."),_c.forEach(e),wc.forEach(e),In=p(Et),Ro=a(Et,"P",{});var gc=t(Ro);An=r(gc,"This is the starting point of the application"),gc.forEach(e),Et.forEach(e),kt=p(c),k=a(c,"SECTION",{});var v=t(k);Vo=a(v,"H3",{});var bc=t(Vo);bs=a(bc,"A",{href:!0,id:!0});var Ec=t(bs);Ln=r(Ec,"2. We read the file and determine what is being imported into this file"),Ec.forEach(e),bc.forEach(e),Tn=p(v),ye=a(v,"DIV",{class:!0});var nv=t(ye);nv.forEach(e),jn=p(v),Jo=a(v,"P",{});var Ic=t(Jo);Sn=r(Ic,"In the example above, the following is imported:"),Ic.forEach(e),Pn=p(v),F=a(v,"UL",{});var uo=t(F);Go=a(uo,"LI",{});var Ac=t(Go);ue=a(Ac,"CODE",{class:!0});var Lc=t(ue);Cn=r(Lc,"'./calculate'"),Lc.forEach(e),Ac.forEach(e),On=p(uo),zo=a(uo,"LI",{});var Tc=t(zo);de=a(Tc,"CODE",{class:!0});var jc=t(de);Dn=r(jc,"'../measurements'"),jc.forEach(e),Tc.forEach(e),Mn=p(uo),Fo=a(uo,"LI",{});var Sc=t(Fo);fe=a(Sc,"CODE",{class:!0});var Pc=t(fe);Hn=r(Pc,"'formulas'"),Pc.forEach(e),Sc.forEach(e),uo.forEach(e),qn=p(v),Qo=a(v,"P",{});var Cc=t(Qo);Bn=r(Cc,"we can spot the import from our human eye \u{1F440}, but how can computer \u{1F916} do that for us?"),Cc.forEach(e),Un=p(v),Ko=a(v,"P",{});var Oc=t(Ko);Nn=r(Oc,"\u{1F916} can parse the code in string into Abstract Syntax Tree (AST), something representing the code that \u{1F916} can understand."),Oc.forEach(e),$n=p(v),Zo=a(v,"P",{});var Dc=t(Zo);Wn=r(Dc,"in AST, import statement is represented by a node with:"),Dc.forEach(e),Rn=p(v),Es=a(v,"UL",{});var It=t(Es);me=a(It,"LI",{});var xp=t(me);xe=a(xp,"CODE",{class:!0});var Mc=t(xe);Vn=r(Mc,"type"),Mc.forEach(e),Jn=r(xp,' = "ImportDeclaration"'),xp.forEach(e),Gn=p(It),we=a(It,"LI",{});var wp=t(we);_e=a(wp,"CODE",{class:!0});var Hc=t(_e);zn=r(Hc,"source.value"),Hc.forEach(e),Fn=r(wp," = the filename it's trying to import"),wp.forEach(e),It.forEach(e),Qn=p(v),Xo=a(v,"P",{});var qc=t(Xo);Q=a(qc,"SPAN",{style:!0});var Bc=t(Q);ge=a(Bc,"PICTURE",{});var _p=t(ge);Yo=a(_p,"SOURCE",{type:!0,srcset:!0}),S=a(_p,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),_p.forEach(e),Bc.forEach(e),qc.forEach(e),Kn=p(v),sa=a(v,"P",{});var Uc=t(sa);Zn=r(Uc,"There are various JavaScript parser out there, here are some of them"),Uc.forEach(e),Xn=p(v),D=a(v,"UL",{});var is=t(D);be=a(is,"LI",{});var gp=t(be);Yn=r(gp,"\u{1F517} "),Is=a(gp,"A",{href:!0,rel:!0});var Nc=t(Is);sr=r(Nc,"babel"),Nc.forEach(e),gp.forEach(e),er=p(is),Ee=a(is,"LI",{});var bp=t(Ee);or=r(bp,"\u{1F517} "),As=a(bp,"A",{href:!0,rel:!0});var $c=t(As);ar=r($c,"acorn"),$c.forEach(e),bp.forEach(e),tr=p(is),Ie=a(is,"LI",{});var Ep=t(Ie);nr=r(Ep,"\u{1F517} "),Ls=a(Ep,"A",{href:!0,rel:!0});var Wc=t(Ls);rr=r(Wc,"esprima"),Wc.forEach(e),Ep.forEach(e),lr=p(is),Ae=a(is,"LI",{});var Ip=t(Ae);ir=r(Ip,"\u{1F517} "),Ts=a(Ip,"A",{href:!0,rel:!0});var Rc=t(Ts);pr=r(Rc,"es-module-lexer"),Rc.forEach(e),Ip.forEach(e),is.forEach(e),cr=p(v),Le=a(v,"DIV",{class:!0});var rv=t(Le);rv.forEach(e),kr=p(v),ea=a(v,"P",{});var Vc=t(ea);hr=r(Vc,"...and if you forgot about your tree-traversal algorithm \u{1F628}, here are some libraries that can help you out"),Vc.forEach(e),vr=p(v),K=a(v,"UL",{});var fo=t(K);Te=a(fo,"LI",{});var Ap=t(Te);yr=r(Ap,"\u{1F517} "),js=a(Ap,"A",{href:!0,rel:!0});var Jc=t(js);ur=r(Jc,"babel-traverse"),Jc.forEach(e),Ap.forEach(e),dr=p(fo),je=a(fo,"LI",{});var Lp=t(je);fr=r(Lp,"\u{1F517} "),Ss=a(Lp,"A",{href:!0,rel:!0});var Gc=t(Ss);mr=r(Gc,"acorn-walk"),Gc.forEach(e),Lp.forEach(e),xr=p(fo),Se=a(fo,"LI",{});var Tp=t(Se);wr=r(Tp,"\u{1F517} "),Ps=a(Tp,"A",{href:!0,rel:!0});var zc=t(Ps);_r=r(zc,"estree-walker"),zc.forEach(e),Tp.forEach(e),fo.forEach(e),gr=p(v),Pe=a(v,"DIV",{class:!0});var lv=t(Pe);lv.forEach(e),br=p(v),oa=a(v,"P",{});var Fc=t(oa);Er=r(Fc,"Some other useful links"),Fc.forEach(e),Ir=p(v),Z=a(v,"UL",{});var mo=t(Z);Ce=a(mo,"LI",{});var jp=t(Ce);Ar=r(jp,"Inspect your AST"),Cs=a(jp,"UL",{});var At=t(Cs);aa=a(At,"LI",{});var Qc=t(aa);Os=a(Qc,"A",{href:!0,rel:!0});var Kc=t(Os);Lr=r(Kc,"https://astexplorer.net"),Kc.forEach(e),Qc.forEach(e),Tr=p(At),ta=a(At,"LI",{});var Zc=t(ta);Ds=a(Zc,"A",{href:!0,rel:!0});var Xc=t(Ds);jr=r(Xc,"https://lihautan.com/babel-ast-explorer/"),Xc.forEach(e),Zc.forEach(e),At.forEach(e),jp.forEach(e),Sr=p(mo),Oe=a(mo,"LI",{});var Sp=t(Oe);Pr=r(Sp,"The JS AST Specification"),na=a(Sp,"UL",{});var Yc=t(na);ra=a(Yc,"LI",{});var sk=t(ra);Ms=a(sk,"A",{href:!0,rel:!0});var ek=t(Ms);Cr=r(ek,"https://github.com/estree/estree"),ek.forEach(e),sk.forEach(e),Yc.forEach(e),Sp.forEach(e),Or=p(mo),De=a(mo,"LI",{});var Pp=t(De);Dr=r(Pp,"Guide on parsing, traversing AST"),Hs=a(Pp,"UL",{});var Lt=t(Hs);la=a(Lt,"LI",{});var ok=t(la);qs=a(ok,"A",{href:!0,rel:!0});var ak=t(qs);Mr=r(ak,"https://lihautan.com/manipulating-ast-with-javascript"),ak.forEach(e),ok.forEach(e),Hr=p(Lt),ia=a(Lt,"LI",{});var tk=t(ia);Bs=a(tk,"A",{href:!0,rel:!0});var nk=t(Bs);qr=r(nk,"https://lihautan.com/json-parser-with-javascript"),nk.forEach(e),tk.forEach(e),Lt.forEach(e),Pp.forEach(e),mo.forEach(e),v.forEach(e),ht=p(c),m=a(c,"SECTION",{});var b=t(m);pa=a(b,"H3",{});var rk=t(pa);Us=a(rk,"A",{href:!0,id:!0});var lk=t(Us);Br=r(lk,"3. Now knowing what are the names you are importing from, you need to figure out their actual file path"),lk.forEach(e),rk.forEach(e),Ur=p(b),ca=a(b,"P",{});var ik=t(ca);Nr=r(ik,"that depends on"),ik.forEach(e),$r=p(b),Ns=a(b,"UL",{});var Tt=t(Ns);ka=a(Tt,"LI",{});var pk=t(ka);Wr=r(pk,"the current file path"),pk.forEach(e),Rr=p(Tt),ha=a(Tt,"LI",{});var ck=t(ha);Vr=r(ck,"the name you are importing from"),ck.forEach(e),Tt.forEach(e),Jr=p(b),Me=a(b,"DIV",{class:!0});var iv=t(Me);iv.forEach(e),Gr=p(b),He=a(b,"P",{});var Cp=t(He);zr=r(Cp,"That leads us to the "),$s=a(Cp,"A",{href:!0,rel:!0});var kk=t($s);Fr=r(kk,"Node.js Module Resolution Algorithm"),kk.forEach(e),Cp.forEach(e),Qr=p(b),va=a(b,"P",{});var hk=t(va);Kr=r(hk,"It describes the steps taken to resolve the file."),hk.forEach(e),Zr=p(b),ya=a(b,"P",{});var vk=t(ya);Xr=r(vk,"there are 3 scenarios in general:"),vk.forEach(e),Yr=p(b),X=a(b,"UL",{});var xo=t(X);ua=a(xo,"LI",{});var yk=t(ua);sl=r(yk,"load as file"),yk.forEach(e),el=p(xo),da=a(xo,"LI",{});var uk=t(da);ol=r(uk,"load as directory"),uk.forEach(e),al=p(xo),fa=a(xo,"LI",{});var dk=t(fa);tl=r(dk,"load as node_modules"),dk.forEach(e),xo.forEach(e),nl=p(b),ma=a(b,"P",{});var fk=t(ma);Y=a(fk,"SPAN",{style:!0});var mk=t(Y);qe=a(mk,"PICTURE",{});var Op=t(qe);xa=a(Op,"SOURCE",{type:!0,srcset:!0}),P=a(Op,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),Op.forEach(e),mk.forEach(e),fk.forEach(e),rl=p(b),wa=a(b,"P",{});var xk=t(wa);ll=r(xk,"Some other module resolution:"),xk.forEach(e),il=p(b),Ws=a(b,"UL",{});var jt=t(Ws);Rs=a(jt,"LI",{});var St=t(Rs);pl=r(St,"webpack uses "),Vs=a(St,"A",{href:!0,rel:!0});var wk=t(Vs);Be=a(wk,"CODE",{class:!0});var _k=t(Be);cl=r(_k,"enhanced-resolve"),_k.forEach(e),wk.forEach(e),kl=r(St," which is a highly configurable resolver"),St.forEach(e),hl=p(jt),Ue=a(jt,"LI",{});var Dp=t(Ue);vl=r(Dp,"Typescript implements its own resolver, "),Js=a(Dp,"A",{href:!0,rel:!0});var gk=t(Js);yl=r(gk,"see how TS resolving works"),gk.forEach(e),Dp.forEach(e),jt.forEach(e),b.forEach(e),vt=p(c),Ne=a(c,"SECTION",{});var bk=t(Ne);_a=a(bk,"H3",{});var Ek=t(_a);Gs=a(Ek,"A",{href:!0,id:!0});var Ik=t(Gs);ul=r(Ik,"4\uFE0F\u20E3 After you figured the file path you're importing from, for each of the file, \u{1F501} repeat step 2\uFE0F\u20E3 until no more new files to be found."),Ik.forEach(e),Ek.forEach(e),bk.forEach(e),yt=p(c),g=a(c,"SECTION",{});var I=t(g);ga=a(I,"H3",{});var Ak=t(ga);zs=a(Ak,"A",{href:!0,id:!0});var Lk=t(zs);dl=r(Lk,"Assignment"),Lk.forEach(e),Ak.forEach(e),fl=p(I),ba=a(I,"P",{});var Tk=t(ba);Fs=a(Tk,"A",{href:!0,rel:!0});var jk=t(Fs);ml=r(jk,"Test cases"),jk.forEach(e),Tk.forEach(e),xl=p(I),Ea=a(I,"P",{});var Sk=t(Ea);wl=r(Sk,"For each test cases, we provide the entry file, and we expect"),Sk.forEach(e),_l=p(I),Ia=a(I,"P",{});var Pk=t(Ia);gl=r(Pk,"\u{1F4DD} Module"),Pk.forEach(e),bl=p(I),ss=a(I,"UL",{});var wo=t(ss);Aa=a(wo,"LI",{});var Ck=t(Aa);$e=a(Ck,"CODE",{class:!0});var Ok=t($e);El=r(Ok,"filepath"),Ok.forEach(e),Ck.forEach(e),Il=p(wo),We=a(wo,"LI",{});var Mp=t(We);Re=a(Mp,"CODE",{class:!0});var Dk=t(Re);Al=r(Dk,"dependencies"),Dk.forEach(e),Ll=r(Mp," -> list of Depedencies (see below \u{1F447})"),Mp.forEach(e),Tl=p(wo),U=a(wo,"LI",{});var le=t(U);Ve=a(le,"CODE",{class:!0});var Mk=t(Ve);jl=r(Mk,"isEntryFile"),Mk.forEach(e),Sl=r(le," -> "),Je=a(le,"CODE",{class:!0});var Hk=t(Je);Pl=r(Hk,"true"),Hk.forEach(e),Cl=r(le," if it is the entry file / "),Ge=a(le,"CODE",{class:!0});var qk=t(Ge);Ol=r(qk,"false"),qk.forEach(e),Dl=r(le," otherwise"),le.forEach(e),wo.forEach(e),Ml=p(I),La=a(I,"P",{});var Bk=t(La);Hl=r(Bk,"\u{1F4DD} Depedencies"),Bk.forEach(e),ql=p(I),Qs=a(I,"UL",{});var Pt=t(Qs);ze=a(Pt,"LI",{});var Hp=t(ze);Fe=a(Hp,"CODE",{class:!0});var Uk=t(Fe);Bl=r(Uk,"module"),Uk.forEach(e),Ul=r(Hp," (see above \u261D\uFE0F)"),Hp.forEach(e),Nl=p(Pt),Qe=a(Pt,"LI",{});var qp=t(Qe);Ke=a(qp,"CODE",{class:!0});var Nk=t(Ke);$l=r(Nk,"exports"),Nk.forEach(e),Wl=r(qp,' -> list of var names you are importing, eg "default", "measure" ..'),qp.forEach(e),Pt.forEach(e),Rl=p(I),Ta=a(I,"P",{});var $k=t(Ta);Vl=r($k,"\u{1F4DD} If 2 module are importing the same module, both should be referring to the same module instance"),$k.forEach(e),Jl=p(I),Ze=a(I,"DIV",{class:!0});var pv=t(Ze);pv.forEach(e),Gl=p(I),ja=a(I,"P",{});var Wk=t(ja);zl=r(Wk,"\u{1F4DD} Be careful with circular dependency \u{1F648}"),Wk.forEach(e),I.forEach(e),ut=p(c),L=a(c,"SECTION",{});var W=t(L);Sa=a(W,"H2",{});var Rk=t(Sa);Ks=a(Rk,"A",{href:!0,id:!0});var Vk=t(Ks);Fl=r(Vk,"Week 2 - Bundling"),Vk.forEach(e),Rk.forEach(e),Ql=p(W),Pa=a(W,"P",{});var Jk=t(Pa);Kl=r(Jk,"\u{1F914} How do you bundle modules into 1 file?"),Jk.forEach(e),Zl=p(W),Ca=a(W,"P",{});var Gk=t(Ca);Xl=r(Gk,"After studying the 2 most popular bundlers, webpack and rollup, i found that the way they bundle are very different."),Gk.forEach(e),Yl=p(W),Oa=a(W,"P",{});var zk=t(Oa);si=r(zk,"Both of them come a long way, I believe both has its own pros and cons"),zk.forEach(e),ei=p(W),Xe=a(W,"DIV",{class:!0});var cv=t(Xe);cv.forEach(e),W.forEach(e),dt=p(c),N=a(c,"SECTION",{});var _o=t(N);Da=a(_o,"H3",{});var Fk=t(Da);Zs=a(Fk,"A",{href:!0,id:!0});var Qk=t(Zs);oi=r(Qk,"\u{1F52D} Observation: Bundle using webpack"),Qk.forEach(e),Fk.forEach(e),ai=p(_o),M=a(_o,"UL",{});var ps=t(M);Ma=a(ps,"LI",{});var Kk=t(Ma);ti=r(Kk,"\u{1F4DD} each module wrap in a function"),Kk.forEach(e),ni=p(ps),Ha=a(ps,"LI",{});var Zk=t(Ha);ri=r(Zk,"\u{1F4DD} a module map, module identifier as key"),Zk.forEach(e),li=p(ps),qa=a(ps,"LI",{});var Xk=t(qa);ii=r(Xk,"\u{1F4DD} a runtime glue code to piece modules together"),Xk.forEach(e),pi=p(ps),Ba=a(ps,"LI",{});var Yk=t(Ba);ci=r(Yk,'\u{1F4DD} calling module function, with 2 parameters, 1 to assign the exports of the module, 1 to "require" other modules'),Yk.forEach(e),ps.forEach(e),ki=p(_o),Ye=a(_o,"DIV",{class:!0});var kv=t(Ye);kv.forEach(e),_o.forEach(e),ft=p(c),$=a(c,"SECTION",{});var go=t($);Ua=a(go,"H4",{});var sh=t(Ua);Xs=a(sh,"A",{href:!0,id:!0});var eh=t(Xs);hi=r(eh,"\u{1F52D} Observation: Bundle using rollup"),eh.forEach(e),sh.forEach(e),vi=p(go),H=a(go,"UL",{});var cs=t(H);Na=a(cs,"LI",{});var oh=t(Na);yi=r(oh,"\u{1F4DD} much flatter bundle"),oh.forEach(e),ui=p(cs),$a=a(cs,"LI",{});var ah=t($a);di=r(ah,"\u{1F4DD} module are concatenated in topological order"),ah.forEach(e),fi=p(cs),Wa=a(cs,"LI",{});var th=t(Wa);mi=r(th,"\u{1F4DD} exports and imports are removed by renaming them to the same variable name"),th.forEach(e),xi=p(cs),Ra=a(cs,"LI",{});var nh=t(Ra);wi=r(nh,"\u{1F4DD} any variable in module scope that may have naming conflict with other variables are renamed"),nh.forEach(e),cs.forEach(e),_i=p(go),so=a(go,"DIV",{class:!0});var hv=t(so);hv.forEach(e),go.forEach(e),mt=p(c),rs=a(c,"SECTION",{});var Ct=t(rs);Va=a(Ct,"H3",{});var rh=t(Va);Ys=a(rh,"A",{href:!0,id:!0});var lh=t(Ys);gi=r(lh,"\u{1F4E4} Output target of bundling"),lh.forEach(e),rh.forEach(e),bi=p(Ct),q=a(Ct,"UL",{});var ks=t(q);Ja=a(ks,"LI",{});var ih=t(Ja);Ga=a(ih,"P",{});var ph=t(Ga);Ei=r(ph,"IIFE (the most common target, we want to execute the script)"),ph.forEach(e),ih.forEach(e),Ii=p(ks),za=a(ks,"LI",{});var ch=t(za);Fa=a(ch,"P",{});var kh=t(Fa);Ai=r(kh,"CJS, ESM, UMD, AMD, ... (we want to bundle a library, exports of entry file is exported in selected module format)"),kh.forEach(e),ch.forEach(e),Li=p(ks),Qa=a(ks,"LI",{});var hh=t(Qa);eo=a(hh,"P",{});var Bp=t(eo);Ti=r(Bp,"\u{1F517} "),se=a(Bp,"A",{href:!0,rel:!0});var vh=t(se);ji=r(vh,"https://webpack.js.org/configuration/output/#outputlibrarytarget"),vh.forEach(e),Bp.forEach(e),hh.forEach(e),Si=p(ks),Ka=a(ks,"LI",{});var yh=t(Ka);oo=a(yh,"P",{});var Up=t(oo);Pi=r(Up,"\u{1F517} "),ee=a(Up,"A",{href:!0,rel:!0});var uh=t(ee);Ci=r(uh,"https://rollupjs.org/guide/en/#configuration-files"),uh.forEach(e),Up.forEach(e),yh.forEach(e),ks.forEach(e),Ct.forEach(e),xt=p(c),y=a(c,"SECTION",{});var f=t(y);Za=a(f,"H3",{});var dh=t(Za);oe=a(dh,"A",{href:!0,id:!0});var fh=t(oe);Oi=r(fh,"Assignment"),fh.forEach(e),dh.forEach(e),Di=p(f),Xa=a(f,"P",{});var mh=t(Xa);ae=a(mh,"A",{href:!0,rel:!0});var xh=t(ae);Mi=r(xh,"Test cases"),xh.forEach(e),mh.forEach(e),Hi=p(f),Ya=a(f,"P",{});var wh=t(Ya);qi=r(wh,"Here are some of the the interesting test cases:"),wh.forEach(e),Bi=p(f),st=a(f,"P",{});var _h=t(st);Ui=r(_h,"\u{1F9EA} Able to handle re-export nicely"),_h.forEach(e),Ni=p(f),ao=a(f,"DIV",{class:!0});var vv=t(ao);vv.forEach(e),$i=p(f),et=a(f,"P",{});var gh=t(et);Wi=r(gh,"\u{1F9EA} Importing the same file twice, but are you able to make sure it's gonna be evaluated only once?"),gh.forEach(e),Ri=p(f),to=a(f,"DIV",{class:!0});var yv=t(to);yv.forEach(e),Vi=p(f),B=a(f,"P",{});var hs=t(B);Ji=r(hs,"\u{1F9EA} The dreaded circular dependency, are you able to make sure to get the value of "),no=a(hs,"CODE",{class:!0});var bh=t(no);Gi=r(bh,"a"),bh.forEach(e),zi=r(hs,", "),ro=a(hs,"CODE",{class:!0});var Eh=t(ro);Fi=r(Eh,"b"),Eh.forEach(e),Qi=r(hs,", "),lo=a(hs,"CODE",{class:!0});var Ih=t(lo);Ki=r(Ih,"c"),Ih.forEach(e),Zi=r(hs," in all the files?"),hs.forEach(e),Xi=p(f),io=a(f,"DIV",{class:!0});var uv=t(io);uv.forEach(e),Yi=p(f),ot=a(f,"P",{});var Ah=t(ot);sp=r(Ah,"\u{1F9EA} Are you able to export a variable before it is declared? Does the order matter?"),Ah.forEach(e),ep=p(f),po=a(f,"DIV",{class:!0});var dv=t(po);dv.forEach(e),op=p(f),te=a(f,"P",{});var Ot=t(te);ap=r(Ot,"\u{1F9EA} imported variables is not a normal variable, it's a live binding of the exported variable. Are you able to make sure that the value of "),co=a(Ot,"CODE",{class:!0});var Lh=t(co);tp=r(Lh,"count"),Lh.forEach(e),np=r(Ot," is always up to date?"),Ot.forEach(e),rp=p(f),ko=a(f,"DIV",{class:!0});var fv=t(ko);fv.forEach(e),lp=p(f),at=a(f,"P",{});var Th=t(at);ip=r(Th,"\u{1F4DD} Be careful with circular dependency \u{1F648}"),Th.forEach(e),f.forEach(e),wt=p(c),ls=a(c,"SECTION",{});var Dt=t(ls);tt=a(Dt,"H3",{});var jh=t(tt);ne=a(jh,"A",{href:!0,id:!0});var Sh=t(ne);pp=r(Sh,"\u{1F528} Manipulating AST"),Sh.forEach(e),jh.forEach(e),cp=p(Dt),es=a(Dt,"P",{});var bo=t(es);kp=r(bo,"\u{1F4D6}  "),ho=a(bo,"A",{href:!0});var Ph=t(ho);hp=r(Ph,"manipulating ast with javascript"),Ph.forEach(e),vp=r(bo,` (generic)
\u{1F4D6}  `),re=a(bo,"A",{href:!0,rel:!0});var Ch=t(re);yp=r(Ch,"babel plugin handbook"),Ch.forEach(e),up=r(bo," (babel)"),bo.forEach(e),Dt.forEach(e),this.h()},h(){l(w,"href","#background"),l(w,"id","background"),l(ys,"href","#prior-art"),l(ys,"id","prior-art"),l(us,"href","https://twitter.com/wSokra"),l(us,"rel","nofollow"),l(ds,"href","https://youtube.com/watch?v=UNMkLHzofQI"),l(ds,"rel","nofollow"),l(fs,"href","https://twitter.com/ronenamiel"),l(fs,"rel","nofollow"),l(ms,"href","https://youtube.com/watch?v=Gc9-7PBqOC8"),l(ms,"rel","nofollow"),l(xs,"href","https://freecodecamp.org/news/lets-learn-how-module-bundlers-work-and-then-write-one-ourselves-b2e3fe6c88ae/"),l(xs,"rel","nofollow"),l(ws,"href","#week-1-resolving"),l(ws,"id","week-1-resolving"),l(_s,"href","#why-module-bundler"),l(_s,"id","why-module-bundler"),l(Co,"type","image/webp"),l(Co,"srcset",qv+", "+Hv+" 2x"),Mt(T.src,$p=Bh)||l(T,"src",$p),l(T,"srcset",Bh+", "+Bv+" 2x"),l(T,"loading","lazy"),u(T,"position","absolute"),u(T,"top","0"),u(T,"width","100%"),u(T,"height","100%"),l(T,"alt","why bundling"),u(J,"display","block"),u(J,"position","relative"),u(J,"padding-top","35.100%"),u(J,"width","100%"),l(No,"type","image/webp"),l(No,"srcset",Dv+", "+Ov+" 2x"),Mt(j.src,Wp=qh)||l(j,"src",Wp),l(j,"srcset",qh+", "+Mv+" 2x"),l(j,"loading","lazy"),u(j,"position","absolute"),u(j,"top","0"),u(j,"width","100%"),u(j,"height","100%"),l(j,"alt","relationship within a bundle"),u(z,"display","block"),u(z,"position","relative"),u(z,"padding-top","90.868%"),u(z,"width","100%"),l(gs,"href","#1-we-start-from-an-entry-file"),l(gs,"id","1-we-start-from-an-entry-file"),l(bs,"href","#2-we-read-the-file-and-determine-what-is-being-imported-into-this-file"),l(bs,"id","2-we-read-the-file-and-determine-what-is-being-imported-into-this-file"),l(ye,"class","code-section"),l(ue,"class","inline"),l(de,"class","inline"),l(fe,"class","inline"),l(xe,"class","inline"),l(_e,"class","inline"),l(Yo,"type","image/webp"),l(Yo,"srcset",Pv+", "+Sv+" 2x"),Mt(S.src,Rp=Hh)||l(S,"src",Rp),l(S,"srcset",Hh+", "+Cv+" 2x"),l(S,"loading","lazy"),u(S,"position","absolute"),u(S,"top","0"),u(S,"width","100%"),u(S,"height","100%"),l(S,"alt","ast explorer"),u(Q,"display","block"),u(Q,"position","relative"),u(Q,"padding-top","48.359%"),u(Q,"width","100%"),l(Is,"href","https://babeljs.io/docs/en/babel-core"),l(Is,"rel","nofollow"),l(As,"href","https://github.com/acornjs/acorn"),l(As,"rel","nofollow"),l(Ls,"href","https://github.com/jquery/esprima"),l(Ls,"rel","nofollow"),l(Ts,"href","https://github.com/guybedford/es-module-lexer"),l(Ts,"rel","nofollow"),l(Le,"class","code-section"),l(js,"href","https://babeljs.io/docs/en/babel-traverse"),l(js,"rel","nofollow"),l(Ss,"href","https://github.com/acornjs/acorn/tree/master/acorn-walk"),l(Ss,"rel","nofollow"),l(Ps,"href","https://github.com/Rich-Harris/estree-walker"),l(Ps,"rel","nofollow"),l(Pe,"class","code-section"),l(Os,"href","https://astexplorer.net"),l(Os,"rel","nofollow"),l(Ds,"href","https://lihautan.com/babel-ast-explorer/"),l(Ds,"rel","nofollow"),l(Ms,"href","https://github.com/estree/estree"),l(Ms,"rel","nofollow"),l(qs,"href","https://lihautan.com/manipulating-ast-with-javascript"),l(qs,"rel","nofollow"),l(Bs,"href","https://lihautan.com/json-parser-with-javascript"),l(Bs,"rel","nofollow"),l(Us,"href","#3-now-knowing-what-are-the-names-you-are-importing-from-you-need-to-figure-out-their-actual-file-path"),l(Us,"id","3-now-knowing-what-are-the-names-you-are-importing-from-you-need-to-figure-out-their-actual-file-path"),l(Me,"class","code-section"),l($s,"href","https://nodejs.org/api/modules.html#modules_all_together"),l($s,"rel","nofollow"),l(xa,"type","image/webp"),l(xa,"srcset",Tv+", "+Lv+" 2x"),Mt(P.src,Vp=Mh)||l(P,"src",Vp),l(P,"srcset",Mh+", "+jv+" 2x"),l(P,"loading","lazy"),u(P,"position","absolute"),u(P,"top","0"),u(P,"width","100%"),u(P,"height","100%"),l(P,"alt","node js module resolution algorithm"),u(Y,"display","block"),u(Y,"position","relative"),u(Y,"padding-top","38.000%"),u(Y,"width","100%"),l(Be,"class","inline"),l(Vs,"href","https://github.com/webpack/enhanced-resolve"),l(Vs,"rel","nofollow"),l(Js,"href","https://typescriptlang.org/docs/handbook/module-resolution.html"),l(Js,"rel","nofollow"),l(Gs,"href","#4-after-you-figured-the-file-path-you-re-importing-from-for-each-of-the-file-repeat-step-2-until-no-more-new-files-to-be-found"),l(Gs,"id","4-after-you-figured-the-file-path-you-re-importing-from-for-each-of-the-file-repeat-step-2-until-no-more-new-files-to-be-found"),l(zs,"href","#assignment"),l(zs,"id","assignment"),l(Fs,"href","https://github.com/tanhauhau/rk-webpack-clone"),l(Fs,"rel","nofollow"),l($e,"class","inline"),l(Re,"class","inline"),l(Ve,"class","inline"),l(Je,"class","inline"),l(Ge,"class","inline"),l(Fe,"class","inline"),l(Ke,"class","inline"),l(Ze,"class","code-section"),l(Ks,"href","#week-2-bundling"),l(Ks,"id","week-2-bundling"),l(Xe,"class","code-section"),l(Zs,"href","#observation-bundle-using-webpack"),l(Zs,"id","observation-bundle-using-webpack"),l(Ye,"class","code-section"),l(Xs,"href","#observation-bundle-using-rollup"),l(Xs,"id","observation-bundle-using-rollup"),l(so,"class","code-section"),l(Ys,"href","#output-target-of-bundling"),l(Ys,"id","output-target-of-bundling"),l(se,"href","https://webpack.js.org/configuration/output/#outputlibrarytarget"),l(se,"rel","nofollow"),l(ee,"href","https://rollupjs.org/guide/en/#configuration-files"),l(ee,"rel","nofollow"),l(oe,"href","#assignment-1"),l(oe,"id","assignment-1"),l(ae,"href","https://github.com/tanhauhau/rk-webpack-clone"),l(ae,"rel","nofollow"),l(ao,"class","code-section"),l(to,"class","code-section"),l(no,"class","inline"),l(ro,"class","inline"),l(lo,"class","inline"),l(io,"class","code-section"),l(po,"class","code-section"),l(co,"class","inline"),l(ko,"class","code-section"),l(ne,"href","#manipulating-ast"),l(ne,"id","manipulating-ast"),l(ho,"href","/manipulating-ast-with-javascript/"),l(re,"href","https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md"),l(re,"rel","nofollow")},m(c,h){Wh(x,c,h),d(c,C,h),d(c,A,h),s(A,R),s(R,w),s(w,O),s(A,pe),s(A,Eo),s(Eo,Ht),s(A,qt),s(A,vs),s(vs,Bt),s(vs,Io),s(Io,Ut),s(vs,Nt),d(c,lt,h),d(c,os,h),s(os,Ao),s(Ao,ys),s(ys,$t),s(os,Wt),s(os,V),s(V,as),s(as,Rt),s(as,us),s(us,Vt),s(as,Jt),s(as,ds),s(ds,Gt),s(V,zt),s(V,ts),s(ts,Ft),s(ts,fs),s(fs,Qt),s(ts,Kt),s(ts,ms),s(ms,Zt),s(V,Xt),s(V,ce),s(ce,Yt),s(ce,xs),s(xs,sn),d(c,it,h),d(c,ke,h),s(ke,Lo),s(Lo,ws),s(ws,en),d(c,pt,h),d(c,_,h),s(_,To),s(To,_s),s(_s,on),s(_,an),s(_,jo),s(jo,tn),s(_,nn),s(_,So),s(So,rn),s(_,ln),s(_,Po),s(Po,J),s(J,he),s(he,Co),s(he,T),s(_,pn),s(_,Oo),s(Oo,cn),s(_,kn),s(_,Do),s(Do,hn),s(_,vn),s(_,G),s(G,Mo),s(Mo,yn),s(G,un),s(G,Ho),s(Ho,dn),s(G,fn),s(G,qo),s(qo,mn),s(_,xn),s(_,Bo),s(Bo,wn),s(_,_n),s(_,Uo),s(Uo,z),s(z,ve),s(ve,No),s(ve,j),s(_,gn),s(_,$o),s($o,bn),d(c,ct,h),d(c,ns,h),s(ns,Wo),s(Wo,gs),s(gs,En),s(ns,In),s(ns,Ro),s(Ro,An),d(c,kt,h),d(c,k,h),s(k,Vo),s(Vo,bs),s(bs,Ln),s(k,Tn),s(k,ye),ye.innerHTML=Gh,s(k,jn),s(k,Jo),s(Jo,Sn),s(k,Pn),s(k,F),s(F,Go),s(Go,ue),s(ue,Cn),s(F,On),s(F,zo),s(zo,de),s(de,Dn),s(F,Mn),s(F,Fo),s(Fo,fe),s(fe,Hn),s(k,qn),s(k,Qo),s(Qo,Bn),s(k,Un),s(k,Ko),s(Ko,Nn),s(k,$n),s(k,Zo),s(Zo,Wn),s(k,Rn),s(k,Es),s(Es,me),s(me,xe),s(xe,Vn),s(me,Jn),s(Es,Gn),s(Es,we),s(we,_e),s(_e,zn),s(we,Fn),s(k,Qn),s(k,Xo),s(Xo,Q),s(Q,ge),s(ge,Yo),s(ge,S),s(k,Kn),s(k,sa),s(sa,Zn),s(k,Xn),s(k,D),s(D,be),s(be,Yn),s(be,Is),s(Is,sr),s(D,er),s(D,Ee),s(Ee,or),s(Ee,As),s(As,ar),s(D,tr),s(D,Ie),s(Ie,nr),s(Ie,Ls),s(Ls,rr),s(D,lr),s(D,Ae),s(Ae,ir),s(Ae,Ts),s(Ts,pr),s(k,cr),s(k,Le),Le.innerHTML=zh,s(k,kr),s(k,ea),s(ea,hr),s(k,vr),s(k,K),s(K,Te),s(Te,yr),s(Te,js),s(js,ur),s(K,dr),s(K,je),s(je,fr),s(je,Ss),s(Ss,mr),s(K,xr),s(K,Se),s(Se,wr),s(Se,Ps),s(Ps,_r),s(k,gr),s(k,Pe),Pe.innerHTML=Fh,s(k,br),s(k,oa),s(oa,Er),s(k,Ir),s(k,Z),s(Z,Ce),s(Ce,Ar),s(Ce,Cs),s(Cs,aa),s(aa,Os),s(Os,Lr),s(Cs,Tr),s(Cs,ta),s(ta,Ds),s(Ds,jr),s(Z,Sr),s(Z,Oe),s(Oe,Pr),s(Oe,na),s(na,ra),s(ra,Ms),s(Ms,Cr),s(Z,Or),s(Z,De),s(De,Dr),s(De,Hs),s(Hs,la),s(la,qs),s(qs,Mr),s(Hs,Hr),s(Hs,ia),s(ia,Bs),s(Bs,qr),d(c,ht,h),d(c,m,h),s(m,pa),s(pa,Us),s(Us,Br),s(m,Ur),s(m,ca),s(ca,Nr),s(m,$r),s(m,Ns),s(Ns,ka),s(ka,Wr),s(Ns,Rr),s(Ns,ha),s(ha,Vr),s(m,Jr),s(m,Me),Me.innerHTML=Qh,s(m,Gr),s(m,He),s(He,zr),s(He,$s),s($s,Fr),s(m,Qr),s(m,va),s(va,Kr),s(m,Zr),s(m,ya),s(ya,Xr),s(m,Yr),s(m,X),s(X,ua),s(ua,sl),s(X,el),s(X,da),s(da,ol),s(X,al),s(X,fa),s(fa,tl),s(m,nl),s(m,ma),s(ma,Y),s(Y,qe),s(qe,xa),s(qe,P),s(m,rl),s(m,wa),s(wa,ll),s(m,il),s(m,Ws),s(Ws,Rs),s(Rs,pl),s(Rs,Vs),s(Vs,Be),s(Be,cl),s(Rs,kl),s(Ws,hl),s(Ws,Ue),s(Ue,vl),s(Ue,Js),s(Js,yl),d(c,vt,h),d(c,Ne,h),s(Ne,_a),s(_a,Gs),s(Gs,ul),d(c,yt,h),d(c,g,h),s(g,ga),s(ga,zs),s(zs,dl),s(g,fl),s(g,ba),s(ba,Fs),s(Fs,ml),s(g,xl),s(g,Ea),s(Ea,wl),s(g,_l),s(g,Ia),s(Ia,gl),s(g,bl),s(g,ss),s(ss,Aa),s(Aa,$e),s($e,El),s(ss,Il),s(ss,We),s(We,Re),s(Re,Al),s(We,Ll),s(ss,Tl),s(ss,U),s(U,Ve),s(Ve,jl),s(U,Sl),s(U,Je),s(Je,Pl),s(U,Cl),s(U,Ge),s(Ge,Ol),s(U,Dl),s(g,Ml),s(g,La),s(La,Hl),s(g,ql),s(g,Qs),s(Qs,ze),s(ze,Fe),s(Fe,Bl),s(ze,Ul),s(Qs,Nl),s(Qs,Qe),s(Qe,Ke),s(Ke,$l),s(Qe,Wl),s(g,Rl),s(g,Ta),s(Ta,Vl),s(g,Jl),s(g,Ze),Ze.innerHTML=Kh,s(g,Gl),s(g,ja),s(ja,zl),d(c,ut,h),d(c,L,h),s(L,Sa),s(Sa,Ks),s(Ks,Fl),s(L,Ql),s(L,Pa),s(Pa,Kl),s(L,Zl),s(L,Ca),s(Ca,Xl),s(L,Yl),s(L,Oa),s(Oa,si),s(L,ei),s(L,Xe),Xe.innerHTML=Zh,d(c,dt,h),d(c,N,h),s(N,Da),s(Da,Zs),s(Zs,oi),s(N,ai),s(N,M),s(M,Ma),s(Ma,ti),s(M,ni),s(M,Ha),s(Ha,ri),s(M,li),s(M,qa),s(qa,ii),s(M,pi),s(M,Ba),s(Ba,ci),s(N,ki),s(N,Ye),Ye.innerHTML=Xh,d(c,ft,h),d(c,$,h),s($,Ua),s(Ua,Xs),s(Xs,hi),s($,vi),s($,H),s(H,Na),s(Na,yi),s(H,ui),s(H,$a),s($a,di),s(H,fi),s(H,Wa),s(Wa,mi),s(H,xi),s(H,Ra),s(Ra,wi),s($,_i),s($,so),so.innerHTML=Yh,d(c,mt,h),d(c,rs,h),s(rs,Va),s(Va,Ys),s(Ys,gi),s(rs,bi),s(rs,q),s(q,Ja),s(Ja,Ga),s(Ga,Ei),s(q,Ii),s(q,za),s(za,Fa),s(Fa,Ai),s(q,Li),s(q,Qa),s(Qa,eo),s(eo,Ti),s(eo,se),s(se,ji),s(q,Si),s(q,Ka),s(Ka,oo),s(oo,Pi),s(oo,ee),s(ee,Ci),d(c,xt,h),d(c,y,h),s(y,Za),s(Za,oe),s(oe,Oi),s(y,Di),s(y,Xa),s(Xa,ae),s(ae,Mi),s(y,Hi),s(y,Ya),s(Ya,qi),s(y,Bi),s(y,st),s(st,Ui),s(y,Ni),s(y,ao),ao.innerHTML=sv,s(y,$i),s(y,et),s(et,Wi),s(y,Ri),s(y,to),to.innerHTML=ev,s(y,Vi),s(y,B),s(B,Ji),s(B,no),s(no,Gi),s(B,zi),s(B,ro),s(ro,Fi),s(B,Qi),s(B,lo),s(lo,Ki),s(B,Zi),s(y,Xi),s(y,io),io.innerHTML=ov,s(y,Yi),s(y,ot),s(ot,sp),s(y,ep),s(y,po),po.innerHTML=av,s(y,op),s(y,te),s(te,ap),s(te,co),s(co,tp),s(te,np),s(y,rp),s(y,ko),ko.innerHTML=tv,s(y,lp),s(y,at),s(at,ip),d(c,wt,h),d(c,ls,h),s(ls,tt),s(tt,ne),s(ne,pp),s(ls,cp),s(ls,es),s(es,kp),s(es,ho),s(ho,hp),s(es,vp),s(es,re),s(re,yp),s(es,up),_t=!0},p:bv,i(c){_t||(Rh(x.$$.fragment,c),_t=!0)},o(c){Vh(x.$$.fragment,c),_t=!1},d(c){Jh(x,c),c&&e(C),c&&e(A),c&&e(lt),c&&e(os),c&&e(it),c&&e(ke),c&&e(pt),c&&e(_),c&&e(ct),c&&e(ns),c&&e(kt),c&&e(k),c&&e(ht),c&&e(m),c&&e(vt),c&&e(Ne),c&&e(yt),c&&e(g),c&&e(ut),c&&e(L),c&&e(dt),c&&e(N),c&&e(ft),c&&e($),c&&e(mt),c&&e(rs),c&&e(xt),c&&e(y),c&&e(wt),c&&e(ls)}}}function Nv(ie){let x,C;const A=[ie[0],Uh];let R={$$slots:{default:[Uv]},$$scope:{ctx:ie}};for(let w=0;w<A.length;w+=1)R=Np(R,A[w]);return x=new Ev({props:R}),{c(){Nh(x.$$.fragment)},l(w){$h(x.$$.fragment,w)},m(w,O){Wh(x,w,O),C=!0},p(w,[O]){const pe=O&1?_v(A,[O&1&&Oh(w[0]),O&0&&Oh(Uh)]):{};O&2&&(pe.$$scope={dirty:O,ctx:w}),x.$set(pe)},i(w){C||(Rh(x.$$.fragment,w),C=!0)},o(w){Vh(x.$$.fragment,w),C=!1},d(w){Jh(x,w)}}}const Uh={title:"Building a simplified webpack clone",date:"2020-10-02T08:00:00Z",tags:["JavaScript","webpack"],label:"blog",description:'BackgroundWe are trying out a new form of our weekly sharing, which is interest group-based.I am hosting the "Building a simplified webpack clone" interest group, which lasted 8 weeks, and every week, we will cover 1 concept of webpack and an assignment to implement that concept ourselves....'};function $v(ie,x,C){return gv("blog",{image:Av}),ie.$$set=A=>{C(0,x=Np(Np({},x),Dh(A)))},x=Dh(x),[x]}class Qv extends mv{constructor(x){super();xv(this,x,$v,Nv,wv,{})}}export{Qv as default,Uh as metadata};
