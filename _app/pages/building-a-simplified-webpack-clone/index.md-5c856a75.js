import{S as pv,i as cv,s as hv,C as qp,w as kv,x as vv,y as yv,z as uv,A as Sk,q as dv,o as fv,B as mv,r as xv,Y as Pk,e as o,t as n,k as i,c as a,a as t,h as r,d as e,m as p,b as l,X as Ot,f as u,g as d,H as s,J as wv}from"../../chunks/vendor-9710682b.js";import{B as _v}from"../../chunks/BlogLayout-9a08402e.js";import{_ as gv}from"../../chunks/twitter-card-image-a57df29d.js";import"../../chunks/stores-f9c97213.js";import"../../chunks/TableOfContent-2fa6a472.js";/* empty css                                */var bv="/_app/assets/resolution-2200871a.webp",Ev="/_app/assets/resolution-9852c085.webp",Iv="/_app/assets/resolution-186eb573.png",Ck="/_app/assets/resolution-24fc7ecb.png",Av="/_app/assets/ast-explorer-32fc0f90.webp",Lv="/_app/assets/ast-explorer-238b7db6.webp",Tv="/_app/assets/ast-explorer-3ca973fa.jpeg",Ok="/_app/assets/ast-explorer-f43b9e05.jpeg",jv="/_app/assets/relationship-89cf5e96.webp",Sv="/_app/assets/relationship-c145c69f.webp",Pv="/_app/assets/relationship-216c3ca7.png",Dk="/_app/assets/relationship-fe442a09.png",Cv="/_app/assets/why-bundling-4ca6805a.webp",Ov="/_app/assets/why-bundling-604eeac3.webp",Dv="/_app/assets/why-bundling-c892a37b.png",Mk="/_app/assets/why-bundling-ec0a8239.png";function Mv(ie){let m,j,L,ks,b,T,pe,Dt,vs,Mt,Eo,Ht,qt,rt,es,Io,ys,Bt,Ut,R,os,Nt,us,$t,Wt,ds,Rt,Vt,as,Jt,fs,Gt,zt,ms,Ft,Qt,ce,Kt,xs,Xt,lt,he,Ao,ws,Yt,it,w,Lo,_s,Zt,sn,To,en,on,jo,an,tn,So,V,ke,Po,S,Bp,nn,Co,rn,ln,Oo,pn,cn,J,Do,hn,kn,Mo,vn,yn,Ho,un,dn,qo,fn,mn,Bo,G,ve,Uo,P,Up,xn,No,wn,pt,ts,$o,gs,_n,gn,Wo,bn,ct,h,Ro,bs,En,In,ye,qk=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> calculate </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./calculate&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; measure</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> UNITS &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;../measurements&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> formula </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;formulas&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">oneCm</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">measure</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">UNITS</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">CM</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">result</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">calculate</span><span style="color: var(--shiki-color-text)">(formula</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> oneCm);</span></span></code></pre>`,An,Vo,Ln,Tn,z,Jo,ue,jn,Sn,Go,de,Pn,Cn,zo,fe,On,Dn,Fo,Mn,Hn,Qo,qn,Bn,Ko,Un,Nn,Es,me,xe,$n,Wn,Rn,we,_e,Vn,Jn,Gn,Xo,F,ge,Yo,C,Np,zn,Zo,Fn,Qn,D,be,Kn,Is,Xn,Yn,Ee,Zn,As,sr,er,Ie,or,Ls,ar,tr,Ae,nr,Ts,rr,lr,Le,Bk=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// babel</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;@babel/core&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">babel</span><span style="color: var(--shiki-token-function)">.parseSync</span><span style="color: var(--shiki-color-text)">(code);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// acorn</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">acorn</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;acorn&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">acorn</span><span style="color: var(--shiki-token-function)">.parse</span><span style="color: var(--shiki-color-text)">(code</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; ecmaVersion</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">2020</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> sourceType</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;module&#39;</span><span style="color: var(--shiki-color-text)"> &#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// esprima</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">esprima</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;esprima&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">esprima</span><span style="color: var(--shiki-token-function)">.parseScript</span><span style="color: var(--shiki-color-text)">(code);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// if you just need the import &amp; export</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// es-module-lexer is blazing fast, it is written in c, and loaded through web-assembly</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// is what powers vite for parsing dependencies</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">init</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">parse</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;es-module-lexer&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> init;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">imports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">exports</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">parse</span><span style="color: var(--shiki-color-text)">(code);</span></span></code></pre>`,ir,sa,pr,cr,Q,Te,hr,js,kr,vr,je,yr,Ss,ur,dr,Se,fr,Ps,mr,xr,Pe,Uk=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// babel</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">traverse</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;@babel/traverse&#39;</span><span style="color: var(--shiki-color-text)">).default;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">traverse</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">ImportDeclaration</span><span style="color: var(--shiki-color-text)">(node) &#123;&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// acorn</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">walk</span><span style="color: var(--shiki-token-function)">.simple</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">ImportDeclaration</span><span style="color: var(--shiki-color-text)">(node) &#123;&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// estree-walker</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-constant)">walk</span><span style="color: var(--shiki-color-text)"> &#125; </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">require</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;estree-walker&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">walk</span><span style="color: var(--shiki-color-text)">(ast</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">enter</span><span style="color: var(--shiki-color-text)">(node) &#123;&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">leave</span><span style="color: var(--shiki-color-text)">(node) &#123;&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,wr,ea,_r,gr,K,Ce,br,Cs,oa,Os,Er,Ir,aa,Ds,Ar,Lr,Oe,Tr,ta,na,Ms,jr,Sr,De,Pr,Hs,ra,qs,Cr,Or,la,Bs,Dr,ht,x,ia,Us,Mr,Hr,pa,qr,Br,Ns,ca,Ur,Nr,ha,$r,Wr,Me,Nk=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-function)">resolve</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;a/b/app.js&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./calculate.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// a/b/calculate.js</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">resolve</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;a/b/app.js&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;../measurements.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// a/measurements.js</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">resolve</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;a/b/app.js&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;formulas&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// node_modules/formulas/src/index.js</span></span></code></pre>`,Rr,He,Vr,$s,Jr,Gr,ka,zr,Fr,va,Qr,Kr,X,ya,Xr,Yr,ua,Zr,sl,da,el,ol,fa,Y,qe,ma,O,$p,al,xa,tl,nl,Ws,Rs,rl,Vs,Be,ll,il,pl,Ue,cl,Js,hl,kt,Ne,wa,Gs,kl,vt,_,_a,zs,vl,yl,ga,Fs,ul,dl,ba,fl,ml,Ea,xl,wl,Z,Ia,$e,_l,gl,We,Re,bl,El,Il,U,Ve,Al,Ll,Je,Tl,jl,Ge,Sl,Pl,Cl,Aa,Ol,Dl,Qs,ze,Fe,Ml,Hl,ql,Qe,Ke,Bl,Ul,Nl,La,$l,Wl,Xe,$k='<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">moduleCFromModuleA </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> moduleCFromModuleB;</span></span></code></pre>',Rl,Ta,Vl,yt,A,ja,Ks,Jl,Gl,Sa,zl,Fl,Pa,Ql,Kl,Ca,Xl,Yl,Ye,Wk=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// circle.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// square.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(side) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> side </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> side;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// app.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> squareArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./square&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> circleArea </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./circle&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">squareArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circleArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span></code></pre>`,ut,N,Oa,Xs,Zl,si,M,Da,ei,oi,Ma,ai,ti,Ha,ni,ri,qa,li,ii,Ze,Rk=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// webpack-bundle.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">modules</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;circle.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(__exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> __getModule) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">__exports</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;square.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(__exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> __getModule) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">__exports</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-function)">default</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">area</span><span style="color: var(--shiki-color-text)">(side) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> side </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> side;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;app.js&#39;</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)">(__exports</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> __getModule) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">squareArea</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">__getModule</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;square.js&#39;</span><span style="color: var(--shiki-color-text)">).default;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">circleArea</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">__getModule</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;circle.js&#39;</span><span style="color: var(--shiki-color-text)">).default;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">squareArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">))</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circleArea</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">))</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">webpackRuntime</span><span style="color: var(--shiki-color-text)">(&#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  modules</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  entry</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;app.js&#39;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,dt,$,Ba,Ys,pi,ci,H,Ua,hi,ki,Na,vi,yi,$a,ui,di,Wa,fi,mi,so,Vk=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// rollup-bundle.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">3.141</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circle$area</span><span style="color: var(--shiki-color-text)">(radius) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">PI</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> radius;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">square$area</span><span style="color: var(--shiki-color-text)">(side) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> side </span><span style="color: var(--shiki-token-keyword)">*</span><span style="color: var(--shiki-color-text)"> side;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of square: &#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">square$area</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;Area of circle&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">circle$area</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">5</span><span style="color: var(--shiki-color-text)">));</span></span></code></pre>`,ft,ns,Ra,Zs,xi,wi,q,Va,Ja,_i,gi,Ga,za,bi,Ei,Fa,eo,Ii,se,Ai,Li,Qa,oo,Ti,ee,ji,mt,y,Ka,oe,Si,Pi,Xa,ae,Ci,Oi,Ya,Di,Mi,Za,Hi,qi,ao,Jk=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// a.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">as</span><span style="color: var(--shiki-color-text)"> b </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./b&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./c&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> &#123; d &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./d&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// main.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">*</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">as</span><span style="color: var(--shiki-color-text)"> a </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./a&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(a);</span></span></code></pre>`,Bi,st,Ui,Ni,to,Gk=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// a.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./c&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// b.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./c&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// c.js</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;c.js&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// main.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./a&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./b&#39;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`,$i,B,Wi,no,Ri,Vi,ro,Ji,Gi,lo,zi,Fi,Qi,io,zk=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// a.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; b &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./b&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; c &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./c&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">a</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;a&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">setTimeout</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;a.js | b=</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">b</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> | c=</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">c</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// b.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; a &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./a&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; c &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./c&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">b</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;b&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">setTimeout</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;b.js | a=</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">a</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> | c=</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">c</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// c.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; a &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./a&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; b &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./b&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">c</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;c&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">setTimeout</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;c.js | a=</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">a</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> | b=</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">b</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// main.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; a &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./a&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; b &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./b&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; c &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./c&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-function)">setTimeout</span><span style="color: var(--shiki-color-text)">(() </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#96;main.js | a=</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">a</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> | b=</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">b</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> | c=</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">c</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;);</span></span></code></pre>`,Ki,et,Xi,Yi,po,Fk=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// a.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> a </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;a&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> &#123; a</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> b &#125;;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> b </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;b&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// main.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; a</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> b &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./a&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;a = &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> a);</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;b = &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> b);</span></span></code></pre>`,Zi,te,sp,co,ep,op,ap,ho,Qk=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// data.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> count </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">increment</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  count</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// a.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; count</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> increment &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./data&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;count = &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> count);</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">increment</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;count = &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> count);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// b.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> &#123; count</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> increment &#125; </span><span style="color: var(--shiki-token-keyword)">from</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./data&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;count = &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> count);</span></span>
<span class="line"><span style="color: var(--shiki-token-function)">increment</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;count = &#39;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)"> count);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// main.js</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./a&#39;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">import</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;./b&#39;</span><span style="color: var(--shiki-color-text)">;</span></span></code></pre>`,tp,ot,np,xt,rs,at,ne,rp,lp,ss,ip,ko,pp,cp,re,hp,kp;return{c(){m=o("section"),j=o("h2"),L=o("a"),ks=n("Background"),b=i(),T=o("p"),pe=n("We are trying out a new form of our weekly sharing, which is interest group-based."),Dt=i(),vs=o("p"),Mt=n("I am hosting the "),Eo=o("strong"),Ht=n('"Building a simplified webpack clone"'),qt=n(" interest group, which lasted 8 weeks, and every week, we will cover 1 concept of webpack and an assignment to implement that concept ourselves."),rt=i(),es=o("section"),Io=o("h2"),ys=o("a"),Bt=n("Prior Art"),Ut=i(),R=o("ul"),os=o("li"),Nt=n("\u{1F4FA} "),us=o("a"),$t=n("Tobias Koppers"),Wt=n(" - bundling live by hand - "),ds=o("a"),Rt=n("https://youtube.com/watch?v=UNMkLHzofQI"),Vt=i(),as=o("li"),Jt=n("\u{1F4FA} "),fs=o("a"),Gt=n("Ronen Amiel"),zt=n(" - build your own webpack - "),ms=o("a"),Ft=n("https://youtube.com/watch?v=Gc9-7PBqOC8"),Qt=i(),ce=o("li"),Kt=n("\u{1F4D6} adam kelly - "),xs=o("a"),Xt=n("https://freecodecamp.org/news/lets-learn-how-module-bundlers-work-and-then-write-one-ourselves-b2e3fe6c88ae/"),lt=i(),he=o("section"),Ao=o("h2"),ws=o("a"),Yt=n("Week 1 - Resolving"),it=i(),w=o("section"),Lo=o("h3"),_s=o("a"),Zt=n("Why module bundler?"),sn=i(),To=o("p"),en=n("We love writing small modular JS files, but that shouldn't impact the users."),on=i(),jo=o("p"),an=n("Traditionally with limit on number of request connection, \u{1F40C} slow internet speed, we want to combine all the code into 1 file -> 1 network request"),tn=i(),So=o("p"),V=o("span"),ke=o("picture"),Po=o("source"),S=o("img"),nn=i(),Co=o("p"),rn=n("\u{1F570} Traditionally, we concatenate the source files into 1 big output file."),ln=i(),Oo=o("p"),pn=n("But that begs the question"),cn=i(),J=o("ul"),Do=o("li"),hn=n("\u2753 what should be the order of concatenation (files may depend on each other) ?"),kn=i(),Mo=o("li"),vn=n("\u2753 what if there's var naming conflict across files?"),yn=i(),Ho=o("li"),un=n("\u2753 what if there's unused file?"),dn=i(),qo=o("p"),fn=n("\u{1F4A1} That's why we need a module system to define the relationship among the JS modules"),mn=i(),Bo=o("p"),G=o("span"),ve=o("picture"),Uo=o("source"),P=o("img"),xn=i(),No=o("p"),wn=n("So now, let's take a look how we can start building a module dependency graph"),pt=i(),ts=o("section"),$o=o("h3"),gs=o("a"),_n=n("1. We start from an entry file."),gn=i(),Wo=o("p"),bn=n("This is the starting point of the application"),ct=i(),h=o("section"),Ro=o("h3"),bs=o("a"),En=n("2. We read the file and determine what is being imported into this file"),In=i(),ye=o("div"),An=i(),Vo=o("p"),Ln=n("In the example above, the following is imported:"),Tn=i(),z=o("ul"),Jo=o("li"),ue=o("code"),jn=n("'./calculate'"),Sn=i(),Go=o("li"),de=o("code"),Pn=n("'../measurements'"),Cn=i(),zo=o("li"),fe=o("code"),On=n("'formulas'"),Dn=i(),Fo=o("p"),Mn=n("we can spot the import from our human eye \u{1F440}, but how can computer \u{1F916} do that for us?"),Hn=i(),Qo=o("p"),qn=n("\u{1F916} can parse the code in string into Abstract Syntax Tree (AST), something representing the code that \u{1F916} can understand."),Bn=i(),Ko=o("p"),Un=n("in AST, import statement is represented by a node with:"),Nn=i(),Es=o("ul"),me=o("li"),xe=o("code"),$n=n("type"),Wn=n(' = "ImportDeclaration"'),Rn=i(),we=o("li"),_e=o("code"),Vn=n("source.value"),Jn=n(" = the filename it's trying to import"),Gn=i(),Xo=o("p"),F=o("span"),ge=o("picture"),Yo=o("source"),C=o("img"),zn=i(),Zo=o("p"),Fn=n("There are various JavaScript parser out there, here are some of them"),Qn=i(),D=o("ul"),be=o("li"),Kn=n("\u{1F517} "),Is=o("a"),Xn=n("babel"),Yn=i(),Ee=o("li"),Zn=n("\u{1F517} "),As=o("a"),sr=n("acorn"),er=i(),Ie=o("li"),or=n("\u{1F517} "),Ls=o("a"),ar=n("esprima"),tr=i(),Ae=o("li"),nr=n("\u{1F517} "),Ts=o("a"),rr=n("es-module-lexer"),lr=i(),Le=o("div"),ir=i(),sa=o("p"),pr=n("...and if you forgot about your tree-traversal algorithm \u{1F628}, here are some libraries that can help you out"),cr=i(),Q=o("ul"),Te=o("li"),hr=n("\u{1F517} "),js=o("a"),kr=n("babel-traverse"),vr=i(),je=o("li"),yr=n("\u{1F517} "),Ss=o("a"),ur=n("acorn-walk"),dr=i(),Se=o("li"),fr=n("\u{1F517} "),Ps=o("a"),mr=n("estree-walker"),xr=i(),Pe=o("div"),wr=i(),ea=o("p"),_r=n("Some other useful links"),gr=i(),K=o("ul"),Ce=o("li"),br=n("Inspect your AST"),Cs=o("ul"),oa=o("li"),Os=o("a"),Er=n("https://astexplorer.net"),Ir=i(),aa=o("li"),Ds=o("a"),Ar=n("https://lihautan.com/babel-ast-explorer/"),Lr=i(),Oe=o("li"),Tr=n("The JS AST Specification"),ta=o("ul"),na=o("li"),Ms=o("a"),jr=n("https://github.com/estree/estree"),Sr=i(),De=o("li"),Pr=n("Guide on parsing, traversing AST"),Hs=o("ul"),ra=o("li"),qs=o("a"),Cr=n("https://lihautan.com/manipulating-ast-with-javascript"),Or=i(),la=o("li"),Bs=o("a"),Dr=n("https://lihautan.com/json-parser-with-javascript"),ht=i(),x=o("section"),ia=o("h3"),Us=o("a"),Mr=n("3. Now knowing what are the names you are importing from, you need to figure out their actual file path"),Hr=i(),pa=o("p"),qr=n("that depends on"),Br=i(),Ns=o("ul"),ca=o("li"),Ur=n("the current file path"),Nr=i(),ha=o("li"),$r=n("the name you are importing from"),Wr=i(),Me=o("div"),Rr=i(),He=o("p"),Vr=n("That leads us to the "),$s=o("a"),Jr=n("Node.js Module Resolution Algorithm"),Gr=i(),ka=o("p"),zr=n("It describes the steps taken to resolve the file."),Fr=i(),va=o("p"),Qr=n("there are 3 scenarios in general:"),Kr=i(),X=o("ul"),ya=o("li"),Xr=n("load as file"),Yr=i(),ua=o("li"),Zr=n("load as directory"),sl=i(),da=o("li"),el=n("load as node_modules"),ol=i(),fa=o("p"),Y=o("span"),qe=o("picture"),ma=o("source"),O=o("img"),al=i(),xa=o("p"),tl=n("Some other module resolution:"),nl=i(),Ws=o("ul"),Rs=o("li"),rl=n("webpack uses "),Vs=o("a"),Be=o("code"),ll=n("enhanced-resolve"),il=n(" which is a highly configurable resolver"),pl=i(),Ue=o("li"),cl=n("Typescript implements its own resolver, "),Js=o("a"),hl=n("see how TS resolving works"),kt=i(),Ne=o("section"),wa=o("h3"),Gs=o("a"),kl=n("4\uFE0F\u20E3 After you figured the file path you're importing from, for each of the file, \u{1F501} repeat step 2\uFE0F\u20E3 until no more new files to be found."),vt=i(),_=o("section"),_a=o("h3"),zs=o("a"),vl=n("Assignment"),yl=i(),ga=o("p"),Fs=o("a"),ul=n("Test cases"),dl=i(),ba=o("p"),fl=n("For each test cases, we provide the entry file, and we expect"),ml=i(),Ea=o("p"),xl=n("\u{1F4DD} Module"),wl=i(),Z=o("ul"),Ia=o("li"),$e=o("code"),_l=n("filepath"),gl=i(),We=o("li"),Re=o("code"),bl=n("dependencies"),El=n(" -> list of Depedencies (see below \u{1F447})"),Il=i(),U=o("li"),Ve=o("code"),Al=n("isEntryFile"),Ll=n(" -> "),Je=o("code"),Tl=n("true"),jl=n(" if it is the entry file / "),Ge=o("code"),Sl=n("false"),Pl=n(" otherwise"),Cl=i(),Aa=o("p"),Ol=n("\u{1F4DD} Depedencies"),Dl=i(),Qs=o("ul"),ze=o("li"),Fe=o("code"),Ml=n("module"),Hl=n(" (see above \u261D\uFE0F)"),ql=i(),Qe=o("li"),Ke=o("code"),Bl=n("exports"),Ul=n(' -> list of var names you are importing, eg "default", "measure" ..'),Nl=i(),La=o("p"),$l=n("\u{1F4DD} If 2 module are importing the same module, both should be referring to the same module instance"),Wl=i(),Xe=o("div"),Rl=i(),Ta=o("p"),Vl=n("\u{1F4DD} Be careful with circular dependency \u{1F648}"),yt=i(),A=o("section"),ja=o("h2"),Ks=o("a"),Jl=n("Week 2 - Bundling"),Gl=i(),Sa=o("p"),zl=n("\u{1F914} How do you bundle modules into 1 file?"),Fl=i(),Pa=o("p"),Ql=n("After studying the 2 most popular bundlers, webpack and rollup, i found that the way they bundle are very different."),Kl=i(),Ca=o("p"),Xl=n("Both of them come a long way, I believe both has its own pros and cons"),Yl=i(),Ye=o("div"),ut=i(),N=o("section"),Oa=o("h3"),Xs=o("a"),Zl=n("\u{1F52D} Observation: Bundle using webpack"),si=i(),M=o("ul"),Da=o("li"),ei=n("\u{1F4DD} each module wrap in a function"),oi=i(),Ma=o("li"),ai=n("\u{1F4DD} a module map, module identifier as key"),ti=i(),Ha=o("li"),ni=n("\u{1F4DD} a runtime glue code to piece modules together"),ri=i(),qa=o("li"),li=n('\u{1F4DD} calling module function, with 2 parameters, 1 to assign the exports of the module, 1 to "require" other modules'),ii=i(),Ze=o("div"),dt=i(),$=o("section"),Ba=o("h4"),Ys=o("a"),pi=n("\u{1F52D} Observation: Bundle using rollup"),ci=i(),H=o("ul"),Ua=o("li"),hi=n("\u{1F4DD} much flatter bundle"),ki=i(),Na=o("li"),vi=n("\u{1F4DD} module are concatenated in topological order"),yi=i(),$a=o("li"),ui=n("\u{1F4DD} exports and imports are removed by renaming them to the same variable name"),di=i(),Wa=o("li"),fi=n("\u{1F4DD} any variable in module scope that may have naming conflict with other variables are renamed"),mi=i(),so=o("div"),ft=i(),ns=o("section"),Ra=o("h3"),Zs=o("a"),xi=n("\u{1F4E4} Output target of bundling"),wi=i(),q=o("ul"),Va=o("li"),Ja=o("p"),_i=n("IIFE (the most common target, we want to execute the script)"),gi=i(),Ga=o("li"),za=o("p"),bi=n("CJS, ESM, UMD, AMD, ... (we want to bundle a library, exports of entry file is exported in selected module format)"),Ei=i(),Fa=o("li"),eo=o("p"),Ii=n("\u{1F517} "),se=o("a"),Ai=n("https://webpack.js.org/configuration/output/#outputlibrarytarget"),Li=i(),Qa=o("li"),oo=o("p"),Ti=n("\u{1F517} "),ee=o("a"),ji=n("https://rollupjs.org/guide/en/#configuration-files"),mt=i(),y=o("section"),Ka=o("h3"),oe=o("a"),Si=n("Assignment"),Pi=i(),Xa=o("p"),ae=o("a"),Ci=n("Test cases"),Oi=i(),Ya=o("p"),Di=n("Here are some of the the interesting test cases:"),Mi=i(),Za=o("p"),Hi=n("\u{1F9EA} Able to handle re-export nicely"),qi=i(),ao=o("div"),Bi=i(),st=o("p"),Ui=n("\u{1F9EA} Importing the same file twice, but are you able to make sure it's gonna be evaluated only once?"),Ni=i(),to=o("div"),$i=i(),B=o("p"),Wi=n("\u{1F9EA} The dreaded circular dependency, are you able to make sure to get the value of "),no=o("code"),Ri=n("a"),Vi=n(", "),ro=o("code"),Ji=n("b"),Gi=n(", "),lo=o("code"),zi=n("c"),Fi=n(" in all the files?"),Qi=i(),io=o("div"),Ki=i(),et=o("p"),Xi=n("\u{1F9EA} Are you able to export a variable before it is declared? Does the order matter?"),Yi=i(),po=o("div"),Zi=i(),te=o("p"),sp=n("\u{1F9EA} imported variables is not a normal variable, it's a live binding of the exported variable. Are you able to make sure that the value of "),co=o("code"),ep=n("count"),op=n(" is always up to date?"),ap=i(),ho=o("div"),tp=i(),ot=o("p"),np=n("\u{1F4DD} Be careful with circular dependency \u{1F648}"),xt=i(),rs=o("section"),at=o("h3"),ne=o("a"),rp=n("\u{1F528} Manipulating AST"),lp=i(),ss=o("p"),ip=n("\u{1F4D6}  "),ko=o("a"),pp=n("manipulating ast with javascript"),cp=n(` (generic)
\u{1F4D6}  `),re=o("a"),hp=n("babel plugin handbook"),kp=n(" (babel)"),this.h()},l(c){m=a(c,"SECTION",{});var k=t(m);j=a(k,"H2",{});var Wp=t(j);L=a(Wp,"A",{href:!0,id:!0});var Rp=t(L);ks=r(Rp,"Background"),Rp.forEach(e),Wp.forEach(e),b=p(k),T=a(k,"P",{});var Vp=t(T);pe=r(Vp,"We are trying out a new form of our weekly sharing, which is interest group-based."),Vp.forEach(e),Dt=p(k),vs=a(k,"P",{});var wt=t(vs);Mt=r(wt,"I am hosting the "),Eo=a(wt,"STRONG",{});var Jp=t(Eo);Ht=r(Jp,'"Building a simplified webpack clone"'),Jp.forEach(e),qt=r(wt," interest group, which lasted 8 weeks, and every week, we will cover 1 concept of webpack and an assignment to implement that concept ourselves."),wt.forEach(e),k.forEach(e),rt=p(c),es=a(c,"SECTION",{});var _t=t(es);Io=a(_t,"H2",{});var Gp=t(Io);ys=a(Gp,"A",{href:!0,id:!0});var zp=t(ys);Bt=r(zp,"Prior Art"),zp.forEach(e),Gp.forEach(e),Ut=p(_t),R=a(_t,"UL",{});var vo=t(R);os=a(vo,"LI",{});var tt=t(os);Nt=r(tt,"\u{1F4FA} "),us=a(tt,"A",{href:!0,rel:!0});var Fp=t(us);$t=r(Fp,"Tobias Koppers"),Fp.forEach(e),Wt=r(tt," - bundling live by hand - "),ds=a(tt,"A",{href:!0,rel:!0});var Qp=t(ds);Rt=r(Qp,"https://youtube.com/watch?v=UNMkLHzofQI"),Qp.forEach(e),tt.forEach(e),Vt=p(vo),as=a(vo,"LI",{});var nt=t(as);Jt=r(nt,"\u{1F4FA} "),fs=a(nt,"A",{href:!0,rel:!0});var Kp=t(fs);Gt=r(Kp,"Ronen Amiel"),Kp.forEach(e),zt=r(nt," - build your own webpack - "),ms=a(nt,"A",{href:!0,rel:!0});var Xp=t(ms);Ft=r(Xp,"https://youtube.com/watch?v=Gc9-7PBqOC8"),Xp.forEach(e),nt.forEach(e),Qt=p(vo),ce=a(vo,"LI",{});var vp=t(ce);Kt=r(vp,"\u{1F4D6} adam kelly - "),xs=a(vp,"A",{href:!0,rel:!0});var Yp=t(xs);Xt=r(Yp,"https://freecodecamp.org/news/lets-learn-how-module-bundlers-work-and-then-write-one-ourselves-b2e3fe6c88ae/"),Yp.forEach(e),vp.forEach(e),vo.forEach(e),_t.forEach(e),lt=p(c),he=a(c,"SECTION",{});var Zp=t(he);Ao=a(Zp,"H2",{});var sc=t(Ao);ws=a(sc,"A",{href:!0,id:!0});var ec=t(ws);Yt=r(ec,"Week 1 - Resolving"),ec.forEach(e),sc.forEach(e),Zp.forEach(e),it=p(c),w=a(c,"SECTION",{});var E=t(w);Lo=a(E,"H3",{});var oc=t(Lo);_s=a(oc,"A",{href:!0,id:!0});var ac=t(_s);Zt=r(ac,"Why module bundler?"),ac.forEach(e),oc.forEach(e),sn=p(E),To=a(E,"P",{});var tc=t(To);en=r(tc,"We love writing small modular JS files, but that shouldn't impact the users."),tc.forEach(e),on=p(E),jo=a(E,"P",{});var nc=t(jo);an=r(nc,"Traditionally with limit on number of request connection, \u{1F40C} slow internet speed, we want to combine all the code into 1 file -> 1 network request"),nc.forEach(e),tn=p(E),So=a(E,"P",{});var rc=t(So);V=a(rc,"SPAN",{style:!0});var lc=t(V);ke=a(lc,"PICTURE",{});var yp=t(ke);Po=a(yp,"SOURCE",{type:!0,srcset:!0}),S=a(yp,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),yp.forEach(e),lc.forEach(e),rc.forEach(e),nn=p(E),Co=a(E,"P",{});var ic=t(Co);rn=r(ic,"\u{1F570} Traditionally, we concatenate the source files into 1 big output file."),ic.forEach(e),ln=p(E),Oo=a(E,"P",{});var pc=t(Oo);pn=r(pc,"But that begs the question"),pc.forEach(e),cn=p(E),J=a(E,"UL",{});var yo=t(J);Do=a(yo,"LI",{});var cc=t(Do);hn=r(cc,"\u2753 what should be the order of concatenation (files may depend on each other) ?"),cc.forEach(e),kn=p(yo),Mo=a(yo,"LI",{});var hc=t(Mo);vn=r(hc,"\u2753 what if there's var naming conflict across files?"),hc.forEach(e),yn=p(yo),Ho=a(yo,"LI",{});var kc=t(Ho);un=r(kc,"\u2753 what if there's unused file?"),kc.forEach(e),yo.forEach(e),dn=p(E),qo=a(E,"P",{});var vc=t(qo);fn=r(vc,"\u{1F4A1} That's why we need a module system to define the relationship among the JS modules"),vc.forEach(e),mn=p(E),Bo=a(E,"P",{});var yc=t(Bo);G=a(yc,"SPAN",{style:!0});var uc=t(G);ve=a(uc,"PICTURE",{});var up=t(ve);Uo=a(up,"SOURCE",{type:!0,srcset:!0}),P=a(up,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),up.forEach(e),uc.forEach(e),yc.forEach(e),xn=p(E),No=a(E,"P",{});var dc=t(No);wn=r(dc,"So now, let's take a look how we can start building a module dependency graph"),dc.forEach(e),E.forEach(e),pt=p(c),ts=a(c,"SECTION",{});var gt=t(ts);$o=a(gt,"H3",{});var fc=t($o);gs=a(fc,"A",{href:!0,id:!0});var mc=t(gs);_n=r(mc,"1. We start from an entry file."),mc.forEach(e),fc.forEach(e),gn=p(gt),Wo=a(gt,"P",{});var xc=t(Wo);bn=r(xc,"This is the starting point of the application"),xc.forEach(e),gt.forEach(e),ct=p(c),h=a(c,"SECTION",{});var v=t(h);Ro=a(v,"H3",{});var wc=t(Ro);bs=a(wc,"A",{href:!0,id:!0});var _c=t(bs);En=r(_c,"2. We read the file and determine what is being imported into this file"),_c.forEach(e),wc.forEach(e),In=p(v),ye=a(v,"DIV",{class:!0});var Kk=t(ye);Kk.forEach(e),An=p(v),Vo=a(v,"P",{});var gc=t(Vo);Ln=r(gc,"In the example above, the following is imported:"),gc.forEach(e),Tn=p(v),z=a(v,"UL",{});var uo=t(z);Jo=a(uo,"LI",{});var bc=t(Jo);ue=a(bc,"CODE",{class:!0});var Ec=t(ue);jn=r(Ec,"'./calculate'"),Ec.forEach(e),bc.forEach(e),Sn=p(uo),Go=a(uo,"LI",{});var Ic=t(Go);de=a(Ic,"CODE",{class:!0});var Ac=t(de);Pn=r(Ac,"'../measurements'"),Ac.forEach(e),Ic.forEach(e),Cn=p(uo),zo=a(uo,"LI",{});var Lc=t(zo);fe=a(Lc,"CODE",{class:!0});var Tc=t(fe);On=r(Tc,"'formulas'"),Tc.forEach(e),Lc.forEach(e),uo.forEach(e),Dn=p(v),Fo=a(v,"P",{});var jc=t(Fo);Mn=r(jc,"we can spot the import from our human eye \u{1F440}, but how can computer \u{1F916} do that for us?"),jc.forEach(e),Hn=p(v),Qo=a(v,"P",{});var Sc=t(Qo);qn=r(Sc,"\u{1F916} can parse the code in string into Abstract Syntax Tree (AST), something representing the code that \u{1F916} can understand."),Sc.forEach(e),Bn=p(v),Ko=a(v,"P",{});var Pc=t(Ko);Un=r(Pc,"in AST, import statement is represented by a node with:"),Pc.forEach(e),Nn=p(v),Es=a(v,"UL",{});var bt=t(Es);me=a(bt,"LI",{});var dp=t(me);xe=a(dp,"CODE",{class:!0});var Cc=t(xe);$n=r(Cc,"type"),Cc.forEach(e),Wn=r(dp,' = "ImportDeclaration"'),dp.forEach(e),Rn=p(bt),we=a(bt,"LI",{});var fp=t(we);_e=a(fp,"CODE",{class:!0});var Oc=t(_e);Vn=r(Oc,"source.value"),Oc.forEach(e),Jn=r(fp," = the filename it's trying to import"),fp.forEach(e),bt.forEach(e),Gn=p(v),Xo=a(v,"P",{});var Dc=t(Xo);F=a(Dc,"SPAN",{style:!0});var Mc=t(F);ge=a(Mc,"PICTURE",{});var mp=t(ge);Yo=a(mp,"SOURCE",{type:!0,srcset:!0}),C=a(mp,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),mp.forEach(e),Mc.forEach(e),Dc.forEach(e),zn=p(v),Zo=a(v,"P",{});var Hc=t(Zo);Fn=r(Hc,"There are various JavaScript parser out there, here are some of them"),Hc.forEach(e),Qn=p(v),D=a(v,"UL",{});var ls=t(D);be=a(ls,"LI",{});var xp=t(be);Kn=r(xp,"\u{1F517} "),Is=a(xp,"A",{href:!0,rel:!0});var qc=t(Is);Xn=r(qc,"babel"),qc.forEach(e),xp.forEach(e),Yn=p(ls),Ee=a(ls,"LI",{});var wp=t(Ee);Zn=r(wp,"\u{1F517} "),As=a(wp,"A",{href:!0,rel:!0});var Bc=t(As);sr=r(Bc,"acorn"),Bc.forEach(e),wp.forEach(e),er=p(ls),Ie=a(ls,"LI",{});var _p=t(Ie);or=r(_p,"\u{1F517} "),Ls=a(_p,"A",{href:!0,rel:!0});var Uc=t(Ls);ar=r(Uc,"esprima"),Uc.forEach(e),_p.forEach(e),tr=p(ls),Ae=a(ls,"LI",{});var gp=t(Ae);nr=r(gp,"\u{1F517} "),Ts=a(gp,"A",{href:!0,rel:!0});var Nc=t(Ts);rr=r(Nc,"es-module-lexer"),Nc.forEach(e),gp.forEach(e),ls.forEach(e),lr=p(v),Le=a(v,"DIV",{class:!0});var Xk=t(Le);Xk.forEach(e),ir=p(v),sa=a(v,"P",{});var $c=t(sa);pr=r($c,"...and if you forgot about your tree-traversal algorithm \u{1F628}, here are some libraries that can help you out"),$c.forEach(e),cr=p(v),Q=a(v,"UL",{});var fo=t(Q);Te=a(fo,"LI",{});var bp=t(Te);hr=r(bp,"\u{1F517} "),js=a(bp,"A",{href:!0,rel:!0});var Wc=t(js);kr=r(Wc,"babel-traverse"),Wc.forEach(e),bp.forEach(e),vr=p(fo),je=a(fo,"LI",{});var Ep=t(je);yr=r(Ep,"\u{1F517} "),Ss=a(Ep,"A",{href:!0,rel:!0});var Rc=t(Ss);ur=r(Rc,"acorn-walk"),Rc.forEach(e),Ep.forEach(e),dr=p(fo),Se=a(fo,"LI",{});var Ip=t(Se);fr=r(Ip,"\u{1F517} "),Ps=a(Ip,"A",{href:!0,rel:!0});var Vc=t(Ps);mr=r(Vc,"estree-walker"),Vc.forEach(e),Ip.forEach(e),fo.forEach(e),xr=p(v),Pe=a(v,"DIV",{class:!0});var Yk=t(Pe);Yk.forEach(e),wr=p(v),ea=a(v,"P",{});var Jc=t(ea);_r=r(Jc,"Some other useful links"),Jc.forEach(e),gr=p(v),K=a(v,"UL",{});var mo=t(K);Ce=a(mo,"LI",{});var Ap=t(Ce);br=r(Ap,"Inspect your AST"),Cs=a(Ap,"UL",{});var Et=t(Cs);oa=a(Et,"LI",{});var Gc=t(oa);Os=a(Gc,"A",{href:!0,rel:!0});var zc=t(Os);Er=r(zc,"https://astexplorer.net"),zc.forEach(e),Gc.forEach(e),Ir=p(Et),aa=a(Et,"LI",{});var Fc=t(aa);Ds=a(Fc,"A",{href:!0,rel:!0});var Qc=t(Ds);Ar=r(Qc,"https://lihautan.com/babel-ast-explorer/"),Qc.forEach(e),Fc.forEach(e),Et.forEach(e),Ap.forEach(e),Lr=p(mo),Oe=a(mo,"LI",{});var Lp=t(Oe);Tr=r(Lp,"The JS AST Specification"),ta=a(Lp,"UL",{});var Kc=t(ta);na=a(Kc,"LI",{});var Xc=t(na);Ms=a(Xc,"A",{href:!0,rel:!0});var Yc=t(Ms);jr=r(Yc,"https://github.com/estree/estree"),Yc.forEach(e),Xc.forEach(e),Kc.forEach(e),Lp.forEach(e),Sr=p(mo),De=a(mo,"LI",{});var Tp=t(De);Pr=r(Tp,"Guide on parsing, traversing AST"),Hs=a(Tp,"UL",{});var It=t(Hs);ra=a(It,"LI",{});var Zc=t(ra);qs=a(Zc,"A",{href:!0,rel:!0});var sh=t(qs);Cr=r(sh,"https://lihautan.com/manipulating-ast-with-javascript"),sh.forEach(e),Zc.forEach(e),Or=p(It),la=a(It,"LI",{});var eh=t(la);Bs=a(eh,"A",{href:!0,rel:!0});var oh=t(Bs);Dr=r(oh,"https://lihautan.com/json-parser-with-javascript"),oh.forEach(e),eh.forEach(e),It.forEach(e),Tp.forEach(e),mo.forEach(e),v.forEach(e),ht=p(c),x=a(c,"SECTION",{});var g=t(x);ia=a(g,"H3",{});var ah=t(ia);Us=a(ah,"A",{href:!0,id:!0});var th=t(Us);Mr=r(th,"3. Now knowing what are the names you are importing from, you need to figure out their actual file path"),th.forEach(e),ah.forEach(e),Hr=p(g),pa=a(g,"P",{});var nh=t(pa);qr=r(nh,"that depends on"),nh.forEach(e),Br=p(g),Ns=a(g,"UL",{});var At=t(Ns);ca=a(At,"LI",{});var rh=t(ca);Ur=r(rh,"the current file path"),rh.forEach(e),Nr=p(At),ha=a(At,"LI",{});var lh=t(ha);$r=r(lh,"the name you are importing from"),lh.forEach(e),At.forEach(e),Wr=p(g),Me=a(g,"DIV",{class:!0});var Zk=t(Me);Zk.forEach(e),Rr=p(g),He=a(g,"P",{});var jp=t(He);Vr=r(jp,"That leads us to the "),$s=a(jp,"A",{href:!0,rel:!0});var ih=t($s);Jr=r(ih,"Node.js Module Resolution Algorithm"),ih.forEach(e),jp.forEach(e),Gr=p(g),ka=a(g,"P",{});var ph=t(ka);zr=r(ph,"It describes the steps taken to resolve the file."),ph.forEach(e),Fr=p(g),va=a(g,"P",{});var ch=t(va);Qr=r(ch,"there are 3 scenarios in general:"),ch.forEach(e),Kr=p(g),X=a(g,"UL",{});var xo=t(X);ya=a(xo,"LI",{});var hh=t(ya);Xr=r(hh,"load as file"),hh.forEach(e),Yr=p(xo),ua=a(xo,"LI",{});var kh=t(ua);Zr=r(kh,"load as directory"),kh.forEach(e),sl=p(xo),da=a(xo,"LI",{});var vh=t(da);el=r(vh,"load as node_modules"),vh.forEach(e),xo.forEach(e),ol=p(g),fa=a(g,"P",{});var yh=t(fa);Y=a(yh,"SPAN",{style:!0});var uh=t(Y);qe=a(uh,"PICTURE",{});var Sp=t(qe);ma=a(Sp,"SOURCE",{type:!0,srcset:!0}),O=a(Sp,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),Sp.forEach(e),uh.forEach(e),yh.forEach(e),al=p(g),xa=a(g,"P",{});var dh=t(xa);tl=r(dh,"Some other module resolution:"),dh.forEach(e),nl=p(g),Ws=a(g,"UL",{});var Lt=t(Ws);Rs=a(Lt,"LI",{});var Tt=t(Rs);rl=r(Tt,"webpack uses "),Vs=a(Tt,"A",{href:!0,rel:!0});var fh=t(Vs);Be=a(fh,"CODE",{class:!0});var mh=t(Be);ll=r(mh,"enhanced-resolve"),mh.forEach(e),fh.forEach(e),il=r(Tt," which is a highly configurable resolver"),Tt.forEach(e),pl=p(Lt),Ue=a(Lt,"LI",{});var Pp=t(Ue);cl=r(Pp,"Typescript implements its own resolver, "),Js=a(Pp,"A",{href:!0,rel:!0});var xh=t(Js);hl=r(xh,"see how TS resolving works"),xh.forEach(e),Pp.forEach(e),Lt.forEach(e),g.forEach(e),kt=p(c),Ne=a(c,"SECTION",{});var wh=t(Ne);wa=a(wh,"H3",{});var _h=t(wa);Gs=a(_h,"A",{href:!0,id:!0});var gh=t(Gs);kl=r(gh,"4\uFE0F\u20E3 After you figured the file path you're importing from, for each of the file, \u{1F501} repeat step 2\uFE0F\u20E3 until no more new files to be found."),gh.forEach(e),_h.forEach(e),wh.forEach(e),vt=p(c),_=a(c,"SECTION",{});var I=t(_);_a=a(I,"H3",{});var bh=t(_a);zs=a(bh,"A",{href:!0,id:!0});var Eh=t(zs);vl=r(Eh,"Assignment"),Eh.forEach(e),bh.forEach(e),yl=p(I),ga=a(I,"P",{});var Ih=t(ga);Fs=a(Ih,"A",{href:!0,rel:!0});var Ah=t(Fs);ul=r(Ah,"Test cases"),Ah.forEach(e),Ih.forEach(e),dl=p(I),ba=a(I,"P",{});var Lh=t(ba);fl=r(Lh,"For each test cases, we provide the entry file, and we expect"),Lh.forEach(e),ml=p(I),Ea=a(I,"P",{});var Th=t(Ea);xl=r(Th,"\u{1F4DD} Module"),Th.forEach(e),wl=p(I),Z=a(I,"UL",{});var wo=t(Z);Ia=a(wo,"LI",{});var jh=t(Ia);$e=a(jh,"CODE",{class:!0});var Sh=t($e);_l=r(Sh,"filepath"),Sh.forEach(e),jh.forEach(e),gl=p(wo),We=a(wo,"LI",{});var Cp=t(We);Re=a(Cp,"CODE",{class:!0});var Ph=t(Re);bl=r(Ph,"dependencies"),Ph.forEach(e),El=r(Cp," -> list of Depedencies (see below \u{1F447})"),Cp.forEach(e),Il=p(wo),U=a(wo,"LI",{});var le=t(U);Ve=a(le,"CODE",{class:!0});var Ch=t(Ve);Al=r(Ch,"isEntryFile"),Ch.forEach(e),Ll=r(le," -> "),Je=a(le,"CODE",{class:!0});var Oh=t(Je);Tl=r(Oh,"true"),Oh.forEach(e),jl=r(le," if it is the entry file / "),Ge=a(le,"CODE",{class:!0});var Dh=t(Ge);Sl=r(Dh,"false"),Dh.forEach(e),Pl=r(le," otherwise"),le.forEach(e),wo.forEach(e),Cl=p(I),Aa=a(I,"P",{});var Mh=t(Aa);Ol=r(Mh,"\u{1F4DD} Depedencies"),Mh.forEach(e),Dl=p(I),Qs=a(I,"UL",{});var jt=t(Qs);ze=a(jt,"LI",{});var Op=t(ze);Fe=a(Op,"CODE",{class:!0});var Hh=t(Fe);Ml=r(Hh,"module"),Hh.forEach(e),Hl=r(Op," (see above \u261D\uFE0F)"),Op.forEach(e),ql=p(jt),Qe=a(jt,"LI",{});var Dp=t(Qe);Ke=a(Dp,"CODE",{class:!0});var qh=t(Ke);Bl=r(qh,"exports"),qh.forEach(e),Ul=r(Dp,' -> list of var names you are importing, eg "default", "measure" ..'),Dp.forEach(e),jt.forEach(e),Nl=p(I),La=a(I,"P",{});var Bh=t(La);$l=r(Bh,"\u{1F4DD} If 2 module are importing the same module, both should be referring to the same module instance"),Bh.forEach(e),Wl=p(I),Xe=a(I,"DIV",{class:!0});var sv=t(Xe);sv.forEach(e),Rl=p(I),Ta=a(I,"P",{});var Uh=t(Ta);Vl=r(Uh,"\u{1F4DD} Be careful with circular dependency \u{1F648}"),Uh.forEach(e),I.forEach(e),yt=p(c),A=a(c,"SECTION",{});var W=t(A);ja=a(W,"H2",{});var Nh=t(ja);Ks=a(Nh,"A",{href:!0,id:!0});var $h=t(Ks);Jl=r($h,"Week 2 - Bundling"),$h.forEach(e),Nh.forEach(e),Gl=p(W),Sa=a(W,"P",{});var Wh=t(Sa);zl=r(Wh,"\u{1F914} How do you bundle modules into 1 file?"),Wh.forEach(e),Fl=p(W),Pa=a(W,"P",{});var Rh=t(Pa);Ql=r(Rh,"After studying the 2 most popular bundlers, webpack and rollup, i found that the way they bundle are very different."),Rh.forEach(e),Kl=p(W),Ca=a(W,"P",{});var Vh=t(Ca);Xl=r(Vh,"Both of them come a long way, I believe both has its own pros and cons"),Vh.forEach(e),Yl=p(W),Ye=a(W,"DIV",{class:!0});var ev=t(Ye);ev.forEach(e),W.forEach(e),ut=p(c),N=a(c,"SECTION",{});var _o=t(N);Oa=a(_o,"H3",{});var Jh=t(Oa);Xs=a(Jh,"A",{href:!0,id:!0});var Gh=t(Xs);Zl=r(Gh,"\u{1F52D} Observation: Bundle using webpack"),Gh.forEach(e),Jh.forEach(e),si=p(_o),M=a(_o,"UL",{});var is=t(M);Da=a(is,"LI",{});var zh=t(Da);ei=r(zh,"\u{1F4DD} each module wrap in a function"),zh.forEach(e),oi=p(is),Ma=a(is,"LI",{});var Fh=t(Ma);ai=r(Fh,"\u{1F4DD} a module map, module identifier as key"),Fh.forEach(e),ti=p(is),Ha=a(is,"LI",{});var Qh=t(Ha);ni=r(Qh,"\u{1F4DD} a runtime glue code to piece modules together"),Qh.forEach(e),ri=p(is),qa=a(is,"LI",{});var Kh=t(qa);li=r(Kh,'\u{1F4DD} calling module function, with 2 parameters, 1 to assign the exports of the module, 1 to "require" other modules'),Kh.forEach(e),is.forEach(e),ii=p(_o),Ze=a(_o,"DIV",{class:!0});var ov=t(Ze);ov.forEach(e),_o.forEach(e),dt=p(c),$=a(c,"SECTION",{});var go=t($);Ba=a(go,"H4",{});var Xh=t(Ba);Ys=a(Xh,"A",{href:!0,id:!0});var Yh=t(Ys);pi=r(Yh,"\u{1F52D} Observation: Bundle using rollup"),Yh.forEach(e),Xh.forEach(e),ci=p(go),H=a(go,"UL",{});var ps=t(H);Ua=a(ps,"LI",{});var Zh=t(Ua);hi=r(Zh,"\u{1F4DD} much flatter bundle"),Zh.forEach(e),ki=p(ps),Na=a(ps,"LI",{});var sk=t(Na);vi=r(sk,"\u{1F4DD} module are concatenated in topological order"),sk.forEach(e),yi=p(ps),$a=a(ps,"LI",{});var ek=t($a);ui=r(ek,"\u{1F4DD} exports and imports are removed by renaming them to the same variable name"),ek.forEach(e),di=p(ps),Wa=a(ps,"LI",{});var ok=t(Wa);fi=r(ok,"\u{1F4DD} any variable in module scope that may have naming conflict with other variables are renamed"),ok.forEach(e),ps.forEach(e),mi=p(go),so=a(go,"DIV",{class:!0});var av=t(so);av.forEach(e),go.forEach(e),ft=p(c),ns=a(c,"SECTION",{});var St=t(ns);Ra=a(St,"H3",{});var ak=t(Ra);Zs=a(ak,"A",{href:!0,id:!0});var tk=t(Zs);xi=r(tk,"\u{1F4E4} Output target of bundling"),tk.forEach(e),ak.forEach(e),wi=p(St),q=a(St,"UL",{});var cs=t(q);Va=a(cs,"LI",{});var nk=t(Va);Ja=a(nk,"P",{});var rk=t(Ja);_i=r(rk,"IIFE (the most common target, we want to execute the script)"),rk.forEach(e),nk.forEach(e),gi=p(cs),Ga=a(cs,"LI",{});var lk=t(Ga);za=a(lk,"P",{});var ik=t(za);bi=r(ik,"CJS, ESM, UMD, AMD, ... (we want to bundle a library, exports of entry file is exported in selected module format)"),ik.forEach(e),lk.forEach(e),Ei=p(cs),Fa=a(cs,"LI",{});var pk=t(Fa);eo=a(pk,"P",{});var Mp=t(eo);Ii=r(Mp,"\u{1F517} "),se=a(Mp,"A",{href:!0,rel:!0});var ck=t(se);Ai=r(ck,"https://webpack.js.org/configuration/output/#outputlibrarytarget"),ck.forEach(e),Mp.forEach(e),pk.forEach(e),Li=p(cs),Qa=a(cs,"LI",{});var hk=t(Qa);oo=a(hk,"P",{});var Hp=t(oo);Ti=r(Hp,"\u{1F517} "),ee=a(Hp,"A",{href:!0,rel:!0});var kk=t(ee);ji=r(kk,"https://rollupjs.org/guide/en/#configuration-files"),kk.forEach(e),Hp.forEach(e),hk.forEach(e),cs.forEach(e),St.forEach(e),mt=p(c),y=a(c,"SECTION",{});var f=t(y);Ka=a(f,"H3",{});var vk=t(Ka);oe=a(vk,"A",{href:!0,id:!0});var yk=t(oe);Si=r(yk,"Assignment"),yk.forEach(e),vk.forEach(e),Pi=p(f),Xa=a(f,"P",{});var uk=t(Xa);ae=a(uk,"A",{href:!0,rel:!0});var dk=t(ae);Ci=r(dk,"Test cases"),dk.forEach(e),uk.forEach(e),Oi=p(f),Ya=a(f,"P",{});var fk=t(Ya);Di=r(fk,"Here are some of the the interesting test cases:"),fk.forEach(e),Mi=p(f),Za=a(f,"P",{});var mk=t(Za);Hi=r(mk,"\u{1F9EA} Able to handle re-export nicely"),mk.forEach(e),qi=p(f),ao=a(f,"DIV",{class:!0});var tv=t(ao);tv.forEach(e),Bi=p(f),st=a(f,"P",{});var xk=t(st);Ui=r(xk,"\u{1F9EA} Importing the same file twice, but are you able to make sure it's gonna be evaluated only once?"),xk.forEach(e),Ni=p(f),to=a(f,"DIV",{class:!0});var nv=t(to);nv.forEach(e),$i=p(f),B=a(f,"P",{});var hs=t(B);Wi=r(hs,"\u{1F9EA} The dreaded circular dependency, are you able to make sure to get the value of "),no=a(hs,"CODE",{class:!0});var wk=t(no);Ri=r(wk,"a"),wk.forEach(e),Vi=r(hs,", "),ro=a(hs,"CODE",{class:!0});var _k=t(ro);Ji=r(_k,"b"),_k.forEach(e),Gi=r(hs,", "),lo=a(hs,"CODE",{class:!0});var gk=t(lo);zi=r(gk,"c"),gk.forEach(e),Fi=r(hs," in all the files?"),hs.forEach(e),Qi=p(f),io=a(f,"DIV",{class:!0});var rv=t(io);rv.forEach(e),Ki=p(f),et=a(f,"P",{});var bk=t(et);Xi=r(bk,"\u{1F9EA} Are you able to export a variable before it is declared? Does the order matter?"),bk.forEach(e),Yi=p(f),po=a(f,"DIV",{class:!0});var lv=t(po);lv.forEach(e),Zi=p(f),te=a(f,"P",{});var Pt=t(te);sp=r(Pt,"\u{1F9EA} imported variables is not a normal variable, it's a live binding of the exported variable. Are you able to make sure that the value of "),co=a(Pt,"CODE",{class:!0});var Ek=t(co);ep=r(Ek,"count"),Ek.forEach(e),op=r(Pt," is always up to date?"),Pt.forEach(e),ap=p(f),ho=a(f,"DIV",{class:!0});var iv=t(ho);iv.forEach(e),tp=p(f),ot=a(f,"P",{});var Ik=t(ot);np=r(Ik,"\u{1F4DD} Be careful with circular dependency \u{1F648}"),Ik.forEach(e),f.forEach(e),xt=p(c),rs=a(c,"SECTION",{});var Ct=t(rs);at=a(Ct,"H3",{});var Ak=t(at);ne=a(Ak,"A",{href:!0,id:!0});var Lk=t(ne);rp=r(Lk,"\u{1F528} Manipulating AST"),Lk.forEach(e),Ak.forEach(e),lp=p(Ct),ss=a(Ct,"P",{});var bo=t(ss);ip=r(bo,"\u{1F4D6}  "),ko=a(bo,"A",{href:!0});var Tk=t(ko);pp=r(Tk,"manipulating ast with javascript"),Tk.forEach(e),cp=r(bo,` (generic)
\u{1F4D6}  `),re=a(bo,"A",{href:!0,rel:!0});var jk=t(re);hp=r(jk,"babel plugin handbook"),jk.forEach(e),kp=r(bo," (babel)"),bo.forEach(e),Ct.forEach(e),this.h()},h(){l(L,"href","#background"),l(L,"id","background"),l(ys,"href","#prior-art"),l(ys,"id","prior-art"),l(us,"href","https://twitter.com/wSokra"),l(us,"rel","nofollow"),l(ds,"href","https://youtube.com/watch?v=UNMkLHzofQI"),l(ds,"rel","nofollow"),l(fs,"href","https://twitter.com/ronenamiel"),l(fs,"rel","nofollow"),l(ms,"href","https://youtube.com/watch?v=Gc9-7PBqOC8"),l(ms,"rel","nofollow"),l(xs,"href","https://freecodecamp.org/news/lets-learn-how-module-bundlers-work-and-then-write-one-ourselves-b2e3fe6c88ae/"),l(xs,"rel","nofollow"),l(ws,"href","#week-1-resolving"),l(ws,"id","week-1-resolving"),l(_s,"href","#why-module-bundler"),l(_s,"id","why-module-bundler"),l(Po,"type","image/webp"),l(Po,"srcset",Ov+", "+Cv+" 2x"),Ot(S.src,Bp=Mk)||l(S,"src",Bp),l(S,"srcset",Mk+", "+Dv+" 2x"),l(S,"loading","lazy"),u(S,"position","absolute"),u(S,"top","0"),u(S,"width","100%"),u(S,"height","100%"),l(S,"alt","why bundling"),u(V,"display","block"),u(V,"position","relative"),u(V,"padding-top","35.100%"),u(V,"width","100%"),l(Uo,"type","image/webp"),l(Uo,"srcset",Sv+", "+jv+" 2x"),Ot(P.src,Up=Dk)||l(P,"src",Up),l(P,"srcset",Dk+", "+Pv+" 2x"),l(P,"loading","lazy"),u(P,"position","absolute"),u(P,"top","0"),u(P,"width","100%"),u(P,"height","100%"),l(P,"alt","relationship within a bundle"),u(G,"display","block"),u(G,"position","relative"),u(G,"padding-top","90.868%"),u(G,"width","100%"),l(gs,"href","#1-we-start-from-an-entry-file"),l(gs,"id","1-we-start-from-an-entry-file"),l(bs,"href","#2-we-read-the-file-and-determine-what-is-being-imported-into-this-file"),l(bs,"id","2-we-read-the-file-and-determine-what-is-being-imported-into-this-file"),l(ye,"class","code-section"),l(ue,"class","inline"),l(de,"class","inline"),l(fe,"class","inline"),l(xe,"class","inline"),l(_e,"class","inline"),l(Yo,"type","image/webp"),l(Yo,"srcset",Lv+", "+Av+" 2x"),Ot(C.src,Np=Ok)||l(C,"src",Np),l(C,"srcset",Ok+", "+Tv+" 2x"),l(C,"loading","lazy"),u(C,"position","absolute"),u(C,"top","0"),u(C,"width","100%"),u(C,"height","100%"),l(C,"alt","ast explorer"),u(F,"display","block"),u(F,"position","relative"),u(F,"padding-top","48.359%"),u(F,"width","100%"),l(Is,"href","https://babeljs.io/docs/en/babel-core"),l(Is,"rel","nofollow"),l(As,"href","https://github.com/acornjs/acorn"),l(As,"rel","nofollow"),l(Ls,"href","https://github.com/jquery/esprima"),l(Ls,"rel","nofollow"),l(Ts,"href","https://github.com/guybedford/es-module-lexer"),l(Ts,"rel","nofollow"),l(Le,"class","code-section"),l(js,"href","https://babeljs.io/docs/en/babel-traverse"),l(js,"rel","nofollow"),l(Ss,"href","https://github.com/acornjs/acorn/tree/master/acorn-walk"),l(Ss,"rel","nofollow"),l(Ps,"href","https://github.com/Rich-Harris/estree-walker"),l(Ps,"rel","nofollow"),l(Pe,"class","code-section"),l(Os,"href","https://astexplorer.net"),l(Os,"rel","nofollow"),l(Ds,"href","https://lihautan.com/babel-ast-explorer/"),l(Ds,"rel","nofollow"),l(Ms,"href","https://github.com/estree/estree"),l(Ms,"rel","nofollow"),l(qs,"href","https://lihautan.com/manipulating-ast-with-javascript"),l(qs,"rel","nofollow"),l(Bs,"href","https://lihautan.com/json-parser-with-javascript"),l(Bs,"rel","nofollow"),l(Us,"href","#3-now-knowing-what-are-the-names-you-are-importing-from-you-need-to-figure-out-their-actual-file-path"),l(Us,"id","3-now-knowing-what-are-the-names-you-are-importing-from-you-need-to-figure-out-their-actual-file-path"),l(Me,"class","code-section"),l($s,"href","https://nodejs.org/api/modules.html#modules_all_together"),l($s,"rel","nofollow"),l(ma,"type","image/webp"),l(ma,"srcset",Ev+", "+bv+" 2x"),Ot(O.src,$p=Ck)||l(O,"src",$p),l(O,"srcset",Ck+", "+Iv+" 2x"),l(O,"loading","lazy"),u(O,"position","absolute"),u(O,"top","0"),u(O,"width","100%"),u(O,"height","100%"),l(O,"alt","node js module resolution algorithm"),u(Y,"display","block"),u(Y,"position","relative"),u(Y,"padding-top","38.000%"),u(Y,"width","100%"),l(Be,"class","inline"),l(Vs,"href","https://github.com/webpack/enhanced-resolve"),l(Vs,"rel","nofollow"),l(Js,"href","https://typescriptlang.org/docs/handbook/module-resolution.html"),l(Js,"rel","nofollow"),l(Gs,"href","#4-after-you-figured-the-file-path-you-re-importing-from-for-each-of-the-file-repeat-step-2-until-no-more-new-files-to-be-found"),l(Gs,"id","4-after-you-figured-the-file-path-you-re-importing-from-for-each-of-the-file-repeat-step-2-until-no-more-new-files-to-be-found"),l(zs,"href","#assignment"),l(zs,"id","assignment"),l(Fs,"href","https://github.com/tanhauhau/rk-webpack-clone"),l(Fs,"rel","nofollow"),l($e,"class","inline"),l(Re,"class","inline"),l(Ve,"class","inline"),l(Je,"class","inline"),l(Ge,"class","inline"),l(Fe,"class","inline"),l(Ke,"class","inline"),l(Xe,"class","code-section"),l(Ks,"href","#week-2-bundling"),l(Ks,"id","week-2-bundling"),l(Ye,"class","code-section"),l(Xs,"href","#observation-bundle-using-webpack"),l(Xs,"id","observation-bundle-using-webpack"),l(Ze,"class","code-section"),l(Ys,"href","#observation-bundle-using-rollup"),l(Ys,"id","observation-bundle-using-rollup"),l(so,"class","code-section"),l(Zs,"href","#output-target-of-bundling"),l(Zs,"id","output-target-of-bundling"),l(se,"href","https://webpack.js.org/configuration/output/#outputlibrarytarget"),l(se,"rel","nofollow"),l(ee,"href","https://rollupjs.org/guide/en/#configuration-files"),l(ee,"rel","nofollow"),l(oe,"href","#assignment-1"),l(oe,"id","assignment-1"),l(ae,"href","https://github.com/tanhauhau/rk-webpack-clone"),l(ae,"rel","nofollow"),l(ao,"class","code-section"),l(to,"class","code-section"),l(no,"class","inline"),l(ro,"class","inline"),l(lo,"class","inline"),l(io,"class","code-section"),l(po,"class","code-section"),l(co,"class","inline"),l(ho,"class","code-section"),l(ne,"href","#manipulating-ast"),l(ne,"id","manipulating-ast"),l(ko,"href","/manipulating-ast-with-javascript/"),l(re,"href","https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md"),l(re,"rel","nofollow")},m(c,k){d(c,m,k),s(m,j),s(j,L),s(L,ks),s(m,b),s(m,T),s(T,pe),s(m,Dt),s(m,vs),s(vs,Mt),s(vs,Eo),s(Eo,Ht),s(vs,qt),d(c,rt,k),d(c,es,k),s(es,Io),s(Io,ys),s(ys,Bt),s(es,Ut),s(es,R),s(R,os),s(os,Nt),s(os,us),s(us,$t),s(os,Wt),s(os,ds),s(ds,Rt),s(R,Vt),s(R,as),s(as,Jt),s(as,fs),s(fs,Gt),s(as,zt),s(as,ms),s(ms,Ft),s(R,Qt),s(R,ce),s(ce,Kt),s(ce,xs),s(xs,Xt),d(c,lt,k),d(c,he,k),s(he,Ao),s(Ao,ws),s(ws,Yt),d(c,it,k),d(c,w,k),s(w,Lo),s(Lo,_s),s(_s,Zt),s(w,sn),s(w,To),s(To,en),s(w,on),s(w,jo),s(jo,an),s(w,tn),s(w,So),s(So,V),s(V,ke),s(ke,Po),s(ke,S),s(w,nn),s(w,Co),s(Co,rn),s(w,ln),s(w,Oo),s(Oo,pn),s(w,cn),s(w,J),s(J,Do),s(Do,hn),s(J,kn),s(J,Mo),s(Mo,vn),s(J,yn),s(J,Ho),s(Ho,un),s(w,dn),s(w,qo),s(qo,fn),s(w,mn),s(w,Bo),s(Bo,G),s(G,ve),s(ve,Uo),s(ve,P),s(w,xn),s(w,No),s(No,wn),d(c,pt,k),d(c,ts,k),s(ts,$o),s($o,gs),s(gs,_n),s(ts,gn),s(ts,Wo),s(Wo,bn),d(c,ct,k),d(c,h,k),s(h,Ro),s(Ro,bs),s(bs,En),s(h,In),s(h,ye),ye.innerHTML=qk,s(h,An),s(h,Vo),s(Vo,Ln),s(h,Tn),s(h,z),s(z,Jo),s(Jo,ue),s(ue,jn),s(z,Sn),s(z,Go),s(Go,de),s(de,Pn),s(z,Cn),s(z,zo),s(zo,fe),s(fe,On),s(h,Dn),s(h,Fo),s(Fo,Mn),s(h,Hn),s(h,Qo),s(Qo,qn),s(h,Bn),s(h,Ko),s(Ko,Un),s(h,Nn),s(h,Es),s(Es,me),s(me,xe),s(xe,$n),s(me,Wn),s(Es,Rn),s(Es,we),s(we,_e),s(_e,Vn),s(we,Jn),s(h,Gn),s(h,Xo),s(Xo,F),s(F,ge),s(ge,Yo),s(ge,C),s(h,zn),s(h,Zo),s(Zo,Fn),s(h,Qn),s(h,D),s(D,be),s(be,Kn),s(be,Is),s(Is,Xn),s(D,Yn),s(D,Ee),s(Ee,Zn),s(Ee,As),s(As,sr),s(D,er),s(D,Ie),s(Ie,or),s(Ie,Ls),s(Ls,ar),s(D,tr),s(D,Ae),s(Ae,nr),s(Ae,Ts),s(Ts,rr),s(h,lr),s(h,Le),Le.innerHTML=Bk,s(h,ir),s(h,sa),s(sa,pr),s(h,cr),s(h,Q),s(Q,Te),s(Te,hr),s(Te,js),s(js,kr),s(Q,vr),s(Q,je),s(je,yr),s(je,Ss),s(Ss,ur),s(Q,dr),s(Q,Se),s(Se,fr),s(Se,Ps),s(Ps,mr),s(h,xr),s(h,Pe),Pe.innerHTML=Uk,s(h,wr),s(h,ea),s(ea,_r),s(h,gr),s(h,K),s(K,Ce),s(Ce,br),s(Ce,Cs),s(Cs,oa),s(oa,Os),s(Os,Er),s(Cs,Ir),s(Cs,aa),s(aa,Ds),s(Ds,Ar),s(K,Lr),s(K,Oe),s(Oe,Tr),s(Oe,ta),s(ta,na),s(na,Ms),s(Ms,jr),s(K,Sr),s(K,De),s(De,Pr),s(De,Hs),s(Hs,ra),s(ra,qs),s(qs,Cr),s(Hs,Or),s(Hs,la),s(la,Bs),s(Bs,Dr),d(c,ht,k),d(c,x,k),s(x,ia),s(ia,Us),s(Us,Mr),s(x,Hr),s(x,pa),s(pa,qr),s(x,Br),s(x,Ns),s(Ns,ca),s(ca,Ur),s(Ns,Nr),s(Ns,ha),s(ha,$r),s(x,Wr),s(x,Me),Me.innerHTML=Nk,s(x,Rr),s(x,He),s(He,Vr),s(He,$s),s($s,Jr),s(x,Gr),s(x,ka),s(ka,zr),s(x,Fr),s(x,va),s(va,Qr),s(x,Kr),s(x,X),s(X,ya),s(ya,Xr),s(X,Yr),s(X,ua),s(ua,Zr),s(X,sl),s(X,da),s(da,el),s(x,ol),s(x,fa),s(fa,Y),s(Y,qe),s(qe,ma),s(qe,O),s(x,al),s(x,xa),s(xa,tl),s(x,nl),s(x,Ws),s(Ws,Rs),s(Rs,rl),s(Rs,Vs),s(Vs,Be),s(Be,ll),s(Rs,il),s(Ws,pl),s(Ws,Ue),s(Ue,cl),s(Ue,Js),s(Js,hl),d(c,kt,k),d(c,Ne,k),s(Ne,wa),s(wa,Gs),s(Gs,kl),d(c,vt,k),d(c,_,k),s(_,_a),s(_a,zs),s(zs,vl),s(_,yl),s(_,ga),s(ga,Fs),s(Fs,ul),s(_,dl),s(_,ba),s(ba,fl),s(_,ml),s(_,Ea),s(Ea,xl),s(_,wl),s(_,Z),s(Z,Ia),s(Ia,$e),s($e,_l),s(Z,gl),s(Z,We),s(We,Re),s(Re,bl),s(We,El),s(Z,Il),s(Z,U),s(U,Ve),s(Ve,Al),s(U,Ll),s(U,Je),s(Je,Tl),s(U,jl),s(U,Ge),s(Ge,Sl),s(U,Pl),s(_,Cl),s(_,Aa),s(Aa,Ol),s(_,Dl),s(_,Qs),s(Qs,ze),s(ze,Fe),s(Fe,Ml),s(ze,Hl),s(Qs,ql),s(Qs,Qe),s(Qe,Ke),s(Ke,Bl),s(Qe,Ul),s(_,Nl),s(_,La),s(La,$l),s(_,Wl),s(_,Xe),Xe.innerHTML=$k,s(_,Rl),s(_,Ta),s(Ta,Vl),d(c,yt,k),d(c,A,k),s(A,ja),s(ja,Ks),s(Ks,Jl),s(A,Gl),s(A,Sa),s(Sa,zl),s(A,Fl),s(A,Pa),s(Pa,Ql),s(A,Kl),s(A,Ca),s(Ca,Xl),s(A,Yl),s(A,Ye),Ye.innerHTML=Wk,d(c,ut,k),d(c,N,k),s(N,Oa),s(Oa,Xs),s(Xs,Zl),s(N,si),s(N,M),s(M,Da),s(Da,ei),s(M,oi),s(M,Ma),s(Ma,ai),s(M,ti),s(M,Ha),s(Ha,ni),s(M,ri),s(M,qa),s(qa,li),s(N,ii),s(N,Ze),Ze.innerHTML=Rk,d(c,dt,k),d(c,$,k),s($,Ba),s(Ba,Ys),s(Ys,pi),s($,ci),s($,H),s(H,Ua),s(Ua,hi),s(H,ki),s(H,Na),s(Na,vi),s(H,yi),s(H,$a),s($a,ui),s(H,di),s(H,Wa),s(Wa,fi),s($,mi),s($,so),so.innerHTML=Vk,d(c,ft,k),d(c,ns,k),s(ns,Ra),s(Ra,Zs),s(Zs,xi),s(ns,wi),s(ns,q),s(q,Va),s(Va,Ja),s(Ja,_i),s(q,gi),s(q,Ga),s(Ga,za),s(za,bi),s(q,Ei),s(q,Fa),s(Fa,eo),s(eo,Ii),s(eo,se),s(se,Ai),s(q,Li),s(q,Qa),s(Qa,oo),s(oo,Ti),s(oo,ee),s(ee,ji),d(c,mt,k),d(c,y,k),s(y,Ka),s(Ka,oe),s(oe,Si),s(y,Pi),s(y,Xa),s(Xa,ae),s(ae,Ci),s(y,Oi),s(y,Ya),s(Ya,Di),s(y,Mi),s(y,Za),s(Za,Hi),s(y,qi),s(y,ao),ao.innerHTML=Jk,s(y,Bi),s(y,st),s(st,Ui),s(y,Ni),s(y,to),to.innerHTML=Gk,s(y,$i),s(y,B),s(B,Wi),s(B,no),s(no,Ri),s(B,Vi),s(B,ro),s(ro,Ji),s(B,Gi),s(B,lo),s(lo,zi),s(B,Fi),s(y,Qi),s(y,io),io.innerHTML=zk,s(y,Ki),s(y,et),s(et,Xi),s(y,Yi),s(y,po),po.innerHTML=Fk,s(y,Zi),s(y,te),s(te,sp),s(te,co),s(co,ep),s(te,op),s(y,ap),s(y,ho),ho.innerHTML=Qk,s(y,tp),s(y,ot),s(ot,np),d(c,xt,k),d(c,rs,k),s(rs,at),s(at,ne),s(ne,rp),s(rs,lp),s(rs,ss),s(ss,ip),s(ss,ko),s(ko,pp),s(ss,cp),s(ss,re),s(re,hp),s(ss,kp)},p:wv,d(c){c&&e(m),c&&e(rt),c&&e(es),c&&e(lt),c&&e(he),c&&e(it),c&&e(w),c&&e(pt),c&&e(ts),c&&e(ct),c&&e(h),c&&e(ht),c&&e(x),c&&e(kt),c&&e(Ne),c&&e(vt),c&&e(_),c&&e(yt),c&&e(A),c&&e(ut),c&&e(N),c&&e(dt),c&&e($),c&&e(ft),c&&e(ns),c&&e(mt),c&&e(y),c&&e(xt),c&&e(rs)}}}function Hv(ie){let m,j;const L=[ie[0],Hk];let ks={$$slots:{default:[Mv]},$$scope:{ctx:ie}};for(let b=0;b<L.length;b+=1)ks=qp(ks,L[b]);return m=new _v({props:ks}),{c(){kv(m.$$.fragment)},l(b){vv(m.$$.fragment,b)},m(b,T){yv(m,b,T),j=!0},p(b,[T]){const pe=T&1?uv(L,[T&1&&Sk(b[0]),T&0&&Sk(Hk)]):{};T&2&&(pe.$$scope={dirty:T,ctx:b}),m.$set(pe)},i(b){j||(dv(m.$$.fragment,b),j=!0)},o(b){fv(m.$$.fragment,b),j=!1},d(b){mv(m,b)}}}const Hk={title:"Building a simplified webpack clone",date:"2020-10-02T08:00:00Z",tags:["JavaScript","webpack"],label:"blog",description:'BackgroundWe are trying out a new form of our weekly sharing, which is interest group-based.I am hosting the "Building a simplified webpack clone" interest group, which lasted 8 weeks, and every week, we will cover 1 concept of webpack and an assignment to implement that concept ourselves....',tableOfContents:[{link:"background",title:"Background"},{link:"prior-art",title:"Prior Art"},{link:"week-1-resolving",title:"Week 1 - Resolving",nested:[{link:"why-module-bundler",title:"Why module bundler?"},{link:"1-we-start-from-an-entry-file",title:"1. We start from an entry file."},{link:"2-we-read-the-file-and-determine-what-is-being-imported-into-this-file",title:"2. We read the file and determine what is being imported into this file"},{link:"3-now-knowing-what-are-the-names-you-are-importing-from-you-need-to-figure-out-their-actual-file-path",title:"3. Now knowing what are the names you are importing from, you need to figure out their actual file path"},{link:"4-after-you-figured-the-file-path-you-re-importing-from-for-each-of-the-file-repeat-step-2-until-no-more-new-files-to-be-found",title:"4\uFE0F\u20E3 After you figured the file path you're importing from, for each of the file, \u{1F501} repeat step 2\uFE0F\u20E3 until no more new files to be found."},{link:"assignment",title:"Assignment"}]},{link:"week-2-bundling",title:"Week 2 - Bundling",nested:[{link:"observation-bundle-using-webpack",title:"\u{1F52D} Observation: Bundle using webpack",nested:[{link:"observation-bundle-using-rollup",title:"\u{1F52D} Observation: Bundle using rollup"}]},{link:"output-target-of-bundling",title:"\u{1F4E4} Output target of bundling"},{link:"assignment-1",title:"Assignment"},{link:"manipulating-ast",title:"\u{1F528} Manipulating AST"}]}]};function qv(ie,m,j){return xv("blog",{image:gv}),ie.$$set=L=>{j(0,m=qp(qp({},m),Pk(L)))},m=Pk(m),[m]}class Vv extends pv{constructor(m){super();cv(this,m,qv,Hv,hv,{})}}export{Vv as default,Hk as metadata};
