import{S as Pm,i as Tm,s as Am,C as qy,w as _g,x as bg,y as Eg,z as jm,A as xg,q as Ig,o as Og,B as Cg,r as Hm,R as gg,k as i,e as o,t as e,m as c,c as n,a as l,h as t,d as a,b as r,Q as Lm,f as As,g as B,F as s,O as $m}from"../../chunks/vendor-569a3c5c.js";import{B as Rm}from"../../chunks/BlogLayout-17b76cb2.js";import{T as qm}from"../../chunks/TableOfContent-dbc18cb8.js";import"../../chunks/stores-ee936cd4.js";import"../../chunks/WebMentions-968cc380.js";/* empty css                                */var Mm="/_app/assets/fixed-837c06bd.webp",Vm="/_app/assets/fixed-07cd81e0.webp",Wm="/_app/assets/fixed-6569dd04.png",mg="/_app/assets/fixed-b68d5f00.png",Nm="/_app/assets/hero-twitter-e15593c5.jpg";function Bm(He){let f,F,u,ls,x,G,Le,Wo,yl,ul,No,fl,xl,rs,$e,gl,js,ml,wl,Bo,_l,bl,Fo,El,Il,Hs,Ol,Re,Cl,Dl,Sl,Go,Pl,Tl,Uo,Al,jl,zo,Hl,Ll,Yo,$l,$n,m,Jo,Ls,Rl,ql,$s,Ml,Rs,Vl,Wl,Nl,Bl,Fl,Qo,qe,Gl,qs,Ul,zl,Ms,Yl,Me,Jl,Ql,Zl,Ve,Dg=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token string">'World'</span><span class="token punctuation">]</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">multiple</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></div></code></pre>`,Kl,Vs,Xl,Ws,sr,er,tr,ar,Rn,E,Zo,Ns,or,nr,Ko,lr,rr,D,ir,We,cr,pr,Ne,kr,hr,Be,vr,dr,Fe,yr,ur,Ge,fr,xr,gr,U,mr,Ue,wr,_r,Xo,br,Er,ze,Ir,Or,Cr,j,Dr,Bs,Sr,Pr,sn,Tr,Ar,Fs,jr,Hr,Gs,Lr,$r,Rr,is,qr,Us,Mr,Vr,zs,Wr,Nr,qn,p,en,Ys,Br,Fr,tn,Gr,Ur,S,zr,Ye,Yr,Jr,Js,Qr,Zr,Je,Kr,Xr,Qe,si,ei,Ze,ti,ai,oi,Ke,Sg=`<pre class="prism language-"><code><span class="line">- /Projects</span>
<span class="line">  - svelte                &lt;-- cloned from https://github.com/sveltejs/svelte</span>
<span class="line">  - test-svelte           &lt;-- initialised with Svelte Template</span>
<span class="line">    - node_modules/svelte &lt;-- symlink to &#96;/Projects/svelte&#96;</span></code></pre>`,ni,Qs,li,Xe,ri,ii,ci,H,pi,an,ki,hi,st,vi,di,Zs,yi,ui,et,fi,xi,gi,cs,ps,mi,tt,wi,_i,at,bi,Ei,Ii,on,Oi,Ci,ts,Di,ot,Si,Pi,nt,Ti,Ai,lt,ji,Hi,ks,Li,rt,$i,Ri,it,qi,Mi,Vi,ct,Pg=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token string">'World'</span><span class="token punctuation">]</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- with spread --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">multiple</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token comment">&lt;!-- without spread --></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">multiple</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></div></code></pre>`,Wi,nn,Ni,Bi,pt,Tg=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line inserted"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> select_levels </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [&#123; multiple</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; value</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*value*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;&#125;];</span></span>
<span class="line inserted"><span style="color: var(--shiki-color-text)"> 	</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> select_data </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;&#125;;</span></span>
<span class="line inserted"><span style="color: var(--shiki-color-text)"> 	</span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">select_levels</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line inserted"><span style="color: var(--shiki-color-text)"> 	  select_data </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">assign</span><span style="color: var(--shiki-color-text)">(select_data</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> select_levels[i]);</span></span>
<span class="line inserted"><span style="color: var(--shiki-color-text)"> 	&#125;</span></span>
<span class="line deleted"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> select_value_value;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">c</span><span style="color: var(--shiki-color-text)">() &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">/* ... */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">set_attributes</span><span style="color: var(--shiki-color-text)">(select</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> select_data);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">/* ... */</span></span>
<span class="line deleted"><span style="color: var(--shiki-color-text)">      select_value_value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*value*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">];</span></span>
<span class="line"></span>
<span class="line deleted"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">select</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line deleted"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> option </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">select</span><span style="color: var(--shiki-color-text)">.options[i];</span></span>
<span class="line deleted"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">option</span><span style="color: var(--shiki-color-text)">.selected </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">~</span><span style="color: var(--shiki-token-constant)">select_value_value</span><span style="color: var(--shiki-token-function)">.indexOf</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">option</span><span style="color: var(--shiki-color-text)">.__value);</span></span>
<span class="line deleted"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line deleted"><span style="color: var(--shiki-color-text)">    p</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> noop</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line inserted"><span style="color: var(--shiki-color-text)">     </span><span style="color: var(--shiki-token-function)">p</span><span style="color: var(--shiki-color-text)">(ctx</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [dirty]) &#123;</span></span>
<span class="line inserted"><span style="color: var(--shiki-color-text)">       </span><span style="color: var(--shiki-token-function)">set_attributes</span><span style="color: var(--shiki-color-text)">(select</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">get_spread_update</span><span style="color: var(--shiki-color-text)">(select_levels</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [&#123; multiple</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-constant)">true</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> dirty </span><span style="color: var(--shiki-token-keyword)">&amp;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*value*/</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">&amp;&amp;</span><span style="color: var(--shiki-color-text)"> &#123; value</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">/*value*/</span><span style="color: var(--shiki-color-text)"> ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">] &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123;&#125;]));</span></span>
<span class="line inserted"><span style="color: var(--shiki-color-text)">     &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">/* ... */</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;;</span></span></code></pre>`,Fi,Ks,Gi,kt,Ui,zi,Yi,ln,Ji,Qi,ht,Ag='<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">foo</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>foo<span class="token punctuation">"</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">...</span>bar<span class="token punctuation">&#125;</span></span> <span class="token attr-name">baz</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>baz<span class="token punctuation">"</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">...</span>qux<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span></div></code></pre>',Zi,rn,Ki,Xi,vt,jg=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">levels</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [&#123; foo</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> bar</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> &#123; baz</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;baz&#39;</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> qux];</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// build the attribute maps</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">data</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123;&#125;;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">levels</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; i</span><span style="color: var(--shiki-token-keyword)">++</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  data </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Object</span><span style="color: var(--shiki-token-function)">.assign</span><span style="color: var(--shiki-color-text)">(data</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> levels[i]);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// set attribute to element</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">attributeName</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> data) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-token-function)">.setAttribute</span><span style="color: var(--shiki-color-text)">(attributeName</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> data[attributeName]);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// if &#96;bar&#96; changed</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">updates</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">get_spread_update</span><span style="color: var(--shiki-color-text)">(levels</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> bar</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">]);</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// updates will return the updates needed to make, in this case, the diff in &#96;bar&#96;, eg: &#123; aa: &#39;1&#39; &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">attributeName</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">in</span><span style="color: var(--shiki-color-text)"> updates) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">div</span><span style="color: var(--shiki-token-function)">.setAttribute</span><span style="color: var(--shiki-color-text)">(attributeName</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> updates[attributeName]);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,sc,Xs,ec,dt,tc,ac,oc,cn,nc,lc,yt,Hg=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// in &#96;mount&#96; method</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">select</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> option </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">select</span><span style="color: var(--shiki-color-text)">.options[i];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">option</span><span style="color: var(--shiki-color-text)">.selected </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">~</span><span style="color: var(--shiki-token-constant)">select_value_value</span><span style="color: var(--shiki-token-function)">.indexOf</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">option</span><span style="color: var(--shiki-color-text)">.__value);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,rc,hs,ic,ut,cc,pc,ft,kc,hc,vc,se,dc,xt,yc,uc,fc,gt,Lg=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> select</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">append</span><span style="color: var(--shiki-color-text)">(select</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> option0);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">append</span><span style="color: var(--shiki-color-text)">(select</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> option1);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">select</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> option </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">select</span><span style="color: var(--shiki-color-text)">.options[i];</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">option</span><span style="color: var(--shiki-color-text)">.selected </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">~</span><span style="color: var(--shiki-color-text)">ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-function)">.indexOf</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">option</span><span style="color: var(--shiki-color-text)">.__value);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`,xc,z,gc,mt,mc,wc,wt,_c,bc,_t,Ec,Ic,Oc,pn,Cc,Dc,kn,vs,bt,hn,$,My,Sc,ee,Pc,Et,Tc,Ac,jc,vn,Hc,Lc,te,$c,dn,Rc,qc,Mc,ds,yn,It,Vc,Wc,un,Ot,Nc,Bc,fn,Ct,Fc,Gc,ws,Uc,Dt,zc,Yc,ae,Jc,Qc,St,$g=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">function</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">select_options</span><span style="color: var(--shiki-color-text)">(select</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> value) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">let</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">select</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">option</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">select</span><span style="color: var(--shiki-color-text)">.options[i];</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">option</span><span style="color: var(--shiki-color-text)">.selected </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">~</span><span style="color: var(--shiki-token-constant)">value</span><span style="color: var(--shiki-token-function)">.indexOf</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">option</span><span style="color: var(--shiki-color-text)">.__value);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Zc,ys,Kc,Pt,Xc,sp,Tt,ep,tp,ap,At,Rg=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-function)">m</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">insert</span><span style="color: var(--shiki-color-text)">(target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> select</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> anchor);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">append</span><span style="color: var(--shiki-color-text)">(select</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> option0);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-function)">append</span><span style="color: var(--shiki-color-text)">(select</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> option1);</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> i </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">&lt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">select</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">options</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-color-text)">; i </span><span style="color: var(--shiki-token-keyword)">+=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">     </span><span style="color: var(--shiki-token-keyword)">var</span><span style="color: var(--shiki-color-text)"> option </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">select</span><span style="color: var(--shiki-color-text)">.options[i];</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">     </span><span style="color: var(--shiki-token-constant)">option</span><span style="color: var(--shiki-color-text)">.selected </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">~</span><span style="color: var(--shiki-color-text)">ctx[</span><span style="color: var(--shiki-token-constant)">0</span><span style="color: var(--shiki-color-text)">]</span><span style="color: var(--shiki-token-function)">.indexOf</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">option</span><span style="color: var(--shiki-color-text)">.__value);</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">-</span><span style="color: var(--shiki-color-text)">   &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-token-keyword)">+</span><span style="color: var(--shiki-color-text)">   </span><span style="color: var(--shiki-token-function)">select_options</span><span style="color: var(--shiki-color-text)">(select</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> select_value_value);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span></code></pre>`,op,_s,np,jt,lp,rp,Ht,ip,cp,Lt,qg=`<div class="filename">src/compiler/compile/render_dom/wrappers/Element/Attribute.ts</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-color-text)">updater </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  for (var </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">i</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> = 0; </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">i</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> &lt; </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.options.length; </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">i</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> += 1) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    var </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">option</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> = </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.options[</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">i</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">];</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">    </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">if_statement</span><span style="color: var(--shiki-token-keyword)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  &#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">mount</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">last</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> = </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">value</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">  </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">updater</span><span style="color: var(--shiki-token-keyword)">&#125;</span></span>
<span class="line"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,pp,xn,kp,hp,Y,vp,$t,dp,yp,Rt,up,fp,qt,xp,gp,mp,Mt,Mg=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line highlight"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (is_multiple_select) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  updater </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;@select_options(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">last</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">);&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">&#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  updater </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;@select_option(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">last</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">);&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">&#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">mount</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">  </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">last</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> = </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">value</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">  </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">updater</span><span style="color: var(--shiki-token-keyword)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">&#96;</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,wp,P,_p,Vt,bp,Ep,oe,Ip,Op,Wt,Cp,Dp,Nt,Sp,Pp,ne,Tp,Ap,jp,L,Hp,Bt,Lp,$p,le,Rp,qp,Ft,Mp,Vp,Gt,Wp,Np,Bp,us,Ut,zt,Fp,Gp,Up,Yt,Jt,zp,Yp,Jp,Qt,Zt,Qp,Zp,Kp,gn,Xp,sk,Kt,Vg=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &#123; type</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;Identifier&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> name</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;foo&#39;</span><span style="color: var(--shiki-color-text)"> &#125;;</span></span>
<span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">code</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;const </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">node</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> = 1;&#96;</span><span style="color: var(--shiki-color-text)">; </span><span style="color: var(--shiki-token-comment)">// returns an AST node for &#96;const foo = 1;&#96;</span></span></code></pre>`,ek,R,Xt,tk,ak,sa,ok,nk,re,lk,rk,ea,ik,ck,pk,ta,Wg=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">code</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;@foo(bar)&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// turns into</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// import &#123; foo &#125; from &#39;svelte/internal&#39;;</span></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// foo(bar);</span></span></code></pre>`,kk,mn,hk,vk,aa,Ng=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line highlight"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (is_legacy_input_type) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">&#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (is_select_value_attribute) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (is_multiple_select) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    updater </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;@select_options(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">last</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">);&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    updater </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;@select_option(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">element</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">last</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">);&#96;</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">mount</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">    </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">last</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)"> = </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">value</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">    </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">updater</span><span style="color: var(--shiki-token-keyword)">&#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-token-string-expression)">  &#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125; </span><span style="color: var(--shiki-token-keyword)">else</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (is_src) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,dk,J,yk,oa,uk,fk,na,xk,gk,la,mk,wk,_k,ra,Bg=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line highlight"><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.log</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;is_legacy_input_type:&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  is_legacy_input_type</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-string-expression)">&#39;is_select_value_attribute:&#39;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  is_select_value_attribute</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (is_legacy_input_type) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,bk,ie,Ek,ia,Ik,Ok,Ck,ce,Dk,ca,Sk,Pk,Tk,fs,Ak,pa,jk,Hk,ka,Lk,$k,Rk,ha,Fg=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">render</span><span style="color: var(--shiki-color-text)">(block: Block) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">console</span><span style="color: var(--shiki-token-function)">.trace</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&#39;trace&#39;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,qk,va,Gg=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-color-text)">Trace: trace</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  at AttributeWrapper.render (/Projects/svelte/compiler.js:8269:11)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  at /Projects/svelte/compiler.js:10749:14</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  at Array.forEach (&lt;anonymous&gt;)</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  at ElementWrapper.add_attributes (/Projects/svelte/compiler.js:10748:19)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  at ElementWrapper.render (/Projects/svelte/compiler.js:10472:8)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  at /Projects/svelte/compiler.js:10454:11</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  at Array.forEach (&lt;anonymous&gt;)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  at ElementWrapper.render (/Projects/svelte/compiler.js:10453:24)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  at FragmentWrapper.render (/Projects/svelte/compiler.js:13030:18)</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  at new Renderer (/Projects/svelte/compiler.js:13112:17)</span></span></code></pre>`,Mk,da,Vk,pe,Wk,Nk,ya,Ug=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">add_attributes</span><span style="color: var(--shiki-color-text)">(block: Block) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// Get all the class dependencies first</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">attributes</span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">((attribute) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">attribute</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;class&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">dependencies</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">attribute</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-token-function)">.get_dependencies</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">class_dependencies</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">dependencies);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">attributes</span><span style="color: var(--shiki-token-function)">.some</span><span style="color: var(--shiki-color-text)">(attr </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">attr</span><span style="color: var(--shiki-color-text)">.is_spread)) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.add_spread_attributes</span><span style="color: var(--shiki-color-text)">(block);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">return</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">attributes</span><span style="color: var(--shiki-token-function)">.forEach</span><span style="color: var(--shiki-color-text)">((attribute) </span><span style="color: var(--shiki-token-keyword)">=&gt;</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">attribute</span><span style="color: var(--shiki-token-function)">.render</span><span style="color: var(--shiki-color-text)">(block);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;);</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Bk,Q,Fk,ua,Gk,Uk,fa,zk,Yk,xa,Jk,Qk,Zk,Z,Kk,ga,Xk,sh,ma,eh,th,wa,ah,oh,nh,ke,lh,_a,rh,ih,ch,ba,zg=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">add_spread_attributes</span><span style="color: var(--shiki-color-text)">(block: Block) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// for &#96;&lt;select&gt;&#96; element only</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;select&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">mount</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;@select_options(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">data</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.value);&#96;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ph,g,kh,Ea,hh,vh,Ia,dh,yh,Oa,Ca,uh,fh,Da,xh,gh,Sa,mh,wh,Pa,_h,bh,Ta,Eh,Ih,Aa,Oh,Ch,ja,Dh,Sh,Ph,Ha,Yg=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-comment)">// push &#96;const foo = 1&#96; to &#96;m()&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">mount</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;const foo = 1&#96;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-token-comment)">// push &#96;const bar = 2&#96; to &#96;c()&#96;</span></span>
<span class="line"><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">create</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;const bar = 2&#96;</span><span style="color: var(--shiki-color-text)">);</span></span></code></pre>`,Th,K,Ah,La,jh,Hh,$a,Lh,$h,Ra,Rh,qh,Mn,h,wn,he,Mh,Vh,_n,Wh,Nh,bn,Bh,Fh,ve,Gh,qa,Uh,zh,Yh,de,xs,Jh,Ma,Qh,Zh,Va,Kh,Xh,sv,ye,ev,Wa,tv,av,ov,En,nv,lv,In,rv,iv,Na,Jg=`<pre class="prism language-svelte"><code><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"></div><div class="line">  <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token string">'World'</span><span class="token punctuation">]</span><span class="token punctuation">;</span></div><div class="line">  <span class="token keyword">export</span> <span class="token keyword">let</span> spread <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></div><div class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">multiple</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">...</span>spread<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span></div><div class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></div><div class="line"></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Hello<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>group=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div><div class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>World<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">bind:</span>group=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span></div></code></pre>`,cv,X,pv,Ba,kv,hv,Fa,vv,dv,Ga,yv,uv,fv,b,xv,Ua,gv,mv,za,wv,_v,Ya,bv,Ev,Ja,Iv,Ov,Qa,Cv,Dv,Za,Sv,Pv,Ka,Tv,Av,jv,On,Hv,Lv,Cn,$v,Rv,ss,qv,Xa,Mv,Vv,so,Wv,Nv,eo,Bv,Fv,Gv,to,ao,Uv,zv,Yv,oo,Qg=`<div class="filename">_config.js</div><pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// initial props to passed to the component</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  props</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> &#123; </span><span style="color: var(--shiki-token-comment)">/*...*/</span><span style="color: var(--shiki-color-text)"> &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// initial rendered html</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  html</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#96;&#96;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// test case</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">test</span><span style="color: var(--shiki-color-text)">(&#123; assert</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> target &#125;) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// you can test the behavior of the component here</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">  &#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,Jv,ue,Qv,no,Zv,Kv,Xv,lo,Zg=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	</span><span style="color: var(--shiki-token-keyword)">async</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-function)">test</span><span style="color: var(--shiki-color-text)">(&#123; assert</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> target</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> window &#125;) &#123;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// find the element</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">input1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">input2</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">target</span><span style="color: var(--shiki-token-function)">.querySelectorAll</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;input&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">select</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">target</span><span style="color: var(--shiki-token-function)">.querySelector</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;select&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">option1</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">option2</span><span style="color: var(--shiki-color-text)">] </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">select</span><span style="color: var(--shiki-color-text)">.childNodes;</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// uncheck the checkbox</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">event</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">window</span><span style="color: var(--shiki-token-function)">.Event</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;change&quot;</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-constant)">input1</span><span style="color: var(--shiki-color-text)">.checked </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">false</span><span style="color: var(--shiki-color-text)">;</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">await</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">input1</span><span style="color: var(--shiki-token-function)">.dispatchEvent</span><span style="color: var(--shiki-color-text)">(event);</span></span>
<span class="line"></span>
<span class="line"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-comment)">// verify the component updated correctly</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">selections</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Array</span><span style="color: var(--shiki-token-function)">.from</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">select</span><span style="color: var(--shiki-color-text)">.selectedOptions);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-constant)">assert</span><span style="color: var(--shiki-token-function)">.equal</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">selections</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">length</span><span style="color: var(--shiki-token-punctuation)">,</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">);</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-constant)">assert</span><span style="color: var(--shiki-token-function)">.ok</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-keyword)">!</span><span style="color: var(--shiki-token-constant)">selections</span><span style="color: var(--shiki-token-function)">.includes</span><span style="color: var(--shiki-color-text)">(option1));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">		</span><span style="color: var(--shiki-token-constant)">assert</span><span style="color: var(--shiki-token-function)">.ok</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-constant)">selections</span><span style="color: var(--shiki-token-function)">.includes</span><span style="color: var(--shiki-color-text)">(option2));</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">	&#125;</span><span style="color: var(--shiki-token-punctuation)">,</span></span>
<span class="line"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,sd,fe,ed,ro,td,ad,od,io,Kg=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-keyword)">export</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">default</span><span style="color: var(--shiki-color-text)"> &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">  solo</span><span style="color: var(--shiki-token-keyword)">:</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;;</span></span></code></pre>`,nd,A,Dn,ld,rd,co,id,cd,po,pd,kd,ko,hd,vd,ho,dd,yd,ud,xe,fd,vo,xd,gd,md,ge,wd,yo,_d,bd,Ed,uo,Xg=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">add_spread_attributes</span><span style="color: var(--shiki-color-text)">(block: Block) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;select&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">mount</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;@select_options(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">data</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.value);&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">update</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;@select_options(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">data</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.value);&#96;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Id,me,Od,fo,Cd,Dd,Sd,T,Pd,xo,Td,Ad,go,jd,Hd,mo,Ld,$d,wo,Rd,qd,_o,Md,Vd,Wd,we,Nd,bo,Bd,Fd,Gd,Sn,Ud,zd,_e,Yd,be,Eo,Jd,Qd,Zd,Io,sm=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">add_spread_attributes</span><span style="color: var(--shiki-color-text)">(block: Block) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;select&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">dependencies</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-keyword)">...</span><span style="color: var(--shiki-color-text)">];</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">mount</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;@select_options(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">data</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.value);&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">update</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-comment)">// block.renderer.dirty(...) will give me &#96;dirty &amp; bitmask&#96;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;if (</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-token-function)">.dirty</span><span style="color: var(--shiki-color-text)">(dependencies)</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">) @select_options(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">data</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.value);&#96;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,Kd,Pn,Xd,sy,Oo,em=`<pre class="shiki" style="background-color: var(--shiki-color-background)"><code><span class="line dim"><span style="color: var(--shiki-token-function)">add_spread_attributes</span><span style="color: var(--shiki-color-text)">(block: Block) &#123;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// ...</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">if</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.name </span><span style="color: var(--shiki-token-keyword)">===</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&#39;select&#39;</span><span style="color: var(--shiki-color-text)">) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">dependencies</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">new</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">Set</span><span style="color: var(--shiki-color-text)">();</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">attr</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.attributes) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-keyword)">for</span><span style="color: var(--shiki-color-text)"> (</span><span style="color: var(--shiki-token-keyword)">const</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">dep</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-keyword)">of</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">attr</span><span style="color: var(--shiki-color-text)">.</span><span style="color: var(--shiki-token-constant)">node</span><span style="color: var(--shiki-color-text)">.dependencies) &#123;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">        </span><span style="color: var(--shiki-token-constant)">dependencies</span><span style="color: var(--shiki-token-function)">.add</span><span style="color: var(--shiki-color-text)">(dep);</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">      &#125;</span></span>
<span class="line highlight"><span style="color: var(--shiki-color-text)">    &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">mount</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;@select_options(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">data</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.value);&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">chunks</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">update</span><span style="color: var(--shiki-token-function)">.push</span><span style="color: var(--shiki-color-text)">(</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">      </span><span style="color: var(--shiki-token-function)">b</span><span style="color: var(--shiki-token-string-expression)">&#96;if (</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">block</span><span style="color: var(--shiki-token-function)">.</span><span style="color: var(--shiki-token-constant)">renderer</span><span style="color: var(--shiki-token-function)">.dirty</span><span style="color: var(--shiki-color-text)">(dependencies)</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">) @select_options(</span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-token-constant)">this</span><span style="color: var(--shiki-color-text)">.var</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">, </span><span style="color: var(--shiki-token-keyword)">$&#123;</span><span style="color: var(--shiki-color-text)">data</span><span style="color: var(--shiki-token-keyword)">&#125;</span><span style="color: var(--shiki-token-string-expression)">.value);&#96;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">    );</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">  &#125;</span></span>
<span class="line dim"><span style="color: var(--shiki-color-text)">&#125;</span></span></code></pre>`,ey,Tn,ty,Vn,w,An,Ee,ay,oy,gs,ny,Co,ly,ry,Do,iy,cy,py,Ie,ky,Oe,hy,vy,dy,Ce,yy,De,uy,fy,xy,jn,gy,my,wy,_y,Se,by,Pe,Ey,Iy,Oy,Te,Cy,Ae,Dy,Sy,Wn;return f=new qm({props:{data:[{link:"background",title:"Background"},{link:"the-story-begins",title:"The story begins"},{link:"verifying-the-bug",title:"Verifying the bug"},{link:"investigating-the-bug",title:"Investigating the bug"},{link:"fixing-the-bug",title:"Fixing the bug"},{link:"submitting-the-fix",title:"Submitting the fix"}]}}),{c(){_g(f.$$.fragment),F=i(),u=o("section"),ls=o("h2"),x=o("a"),G=e("Background"),Le=i(),Wo=o("p"),yl=e("As Svelte gains more attention, I find that more and more people are interested in contributing to Svelte."),ul=i(),No=o("p"),fl=e("Of course, contributing to Svelte, does not mean to contribute only in code, it could be:"),xl=i(),rs=o("ul"),$e=o("li"),gl=e("answering questions about Svelte, on social media, Stack Overflow, or "),js=o("a"),ml=e("Discord"),wl=i(),Bo=o("li"),_l=e("improving Svelte docs, or write tutorials and articles about Svelte"),bl=i(),Fo=o("li"),El=e("organising and speaking in meetups about Svelte"),Il=i(),Hs=o("p"),Ol=e("For those who want to contribute in code, most people are unsure where to start. So I wrote "),Re=o("a"),Cl=e("The Svelte Compiler Handbook"),Dl=e(" as an overview of the Svelte source code."),Sl=i(),Go=o("p"),Pl=e("However, today, I want to try a different tone."),Tl=i(),Uo=o("p"),Al=e("I am going to tell you an anecdote on how I investigated and fixed a bug in Svelte."),jl=i(),zo=o("p"),Hl=e("I documented down my train of thoughts as detailed as possible."),Ll=i(),Yo=o("p"),$l=e("I hope this gives anyone who is reading, a glimpse on how to work on the Svelte source code."),$n=i(),m=o("section"),Jo=o("h2"),Ls=o("a"),Rl=e("The story begins"),ql=i(),$s=o("p"),Ml=e("I was combing through "),Rs=o("a"),Vl=e("bugs on GitHub"),Wl=e(", and found this rather interesting bug:"),Nl=i(),Bl=o("hr"),Fl=i(),Qo=o("p"),qe=o("strong"),Gl=e("Select multiple value does not get set with spread props "),qs=o("a"),Ul=e("#4392"),zl=i(),Ms=o("p"),Yl=e("Adding any type of spread, even an empty object "),Me=o("code"),Jl=e("{...{}}"),Ql=e(", causes the value not to be set:"),Zl=i(),Ve=o("div"),Kl=i(),Vs=o("p"),Xl=e("To reproduce: "),Ws=o("a"),sr=e("REPL"),er=e("."),tr=i(),ar=o("hr"),Rn=i(),E=o("section"),Zo=o("h2"),Ns=o("a"),or=e("Verifying the bug"),nr=i(),Ko=o("p"),lr=e("I clicked into the REPL and tried to understand about the bug."),rr=i(),D=o("p"),ir=e("I found that if the "),We=o("code"),cr=e("<select multiple>"),pr=e(" has spread attribute "),Ne=o("code"),kr=e("{...any}"),hr=e(", the "),Be=o("code"),vr=e("value"),dr=e(" attribute will not be reactive. Changes in the value of "),Fe=o("code"),yr=e("value"),ur=e(" will not be reflected to the "),Ge=o("code"),fr=e("<select>"),xr=e("."),gr=i(),U=o("p"),mr=e("I noticed the REPL link uses the version "),Ue=o("code"),wr=e("3.18.1"),_r=e(", it's not the latest version of Svelte. At the point of writing, Svelte is at "),Xo=o("strong"),br=e("3.22.3"),Er=e(". I tried removing the "),ze=o("code"),Ir=e("?version=3.18.1"),Or=e(" from the query params to verify whether the bug has fixed, and realised that the bug is still there. (Great! Something interesting to investigate into.)"),Cr=i(),j=o("p"),Dr=e("To understand the current status of the issue, I read through the comments. According to "),Bs=o("a"),Sr=e("Conduitry"),Pr=e(", the issue is related to "),sn=o("strong"),Tr=e("Radio/checkbox input with bind:group and spread props makes variable undefined"),Ar=i(),Fs=o("a"),jr=e("#3680"),Hr=e(" and can be fixed together. However, the issue "),Gs=o("a"),Lr=e("#3680"),$r=e(" was fixed and closed, yet this issue is still open."),Rr=i(),is=o("p"),qr=e("Nevertheless, I read through "),Us=o("a"),Mr=e("the PR"),Vr=e(" for the closed issue "),zs=o("a"),Wr=e("#3680"),Nr=e(", roughly understand how it was fixed and hopefully it can give me some inspirations on this issue."),qn=i(),p=o("section"),en=o("h2"),Ys=o("a"),Br=e("Investigating the bug"),Fr=i(),tn=o("p"),Gr=e("Once I verified that the behavior described in the issue is unexpected and reproducible in the latest version of Svelte, I copied the REPL code into my local machine to investigate."),Ur=i(),S=o("p"),zr=e("I have a "),Ye=o("code"),Yr=e("test-svelte"),Jr=e(" folder ready in my local machine, where I created using "),Js=o("a"),Qr=e("Svelte Template"),Zr=e(". I have "),Je=o("code"),Kr=e("npm link"),Xr=e("ed my local Svelte clone to the "),Qe=o("code"),si=e("test-svelte"),ei=e(" folder, so I can rebuild "),Ze=o("code"),ti=e("test-svelte"),ai=e(" anytime with the latest changes done to my Svelte clone."),oi=i(),Ke=o("div"),ni=i(),Qs=o("p"),li=e("I have "),Xe=o("code"),ri=e("yarn dev"),ii=e(" running in the Svelte folder, so any changes I make gets compiled immediately."),ci=i(),H=o("p"),pi=e("I prefer to "),an=o("strong"),ki=e("build"),hi=i(),st=o("code"),vi=e("test-svelte"),di=e(" and serve it with "),Zs=o("a"),yi=e("http-server"),ui=e(" rather than start a dev server "),et=o("code"),fi=e("test-svelte"),xi=e(" in watch mode. That allows me to"),gi=i(),cs=o("ul"),ps=o("li"),mi=e("Run the "),tt=o("code"),wi=e("http-server"),_i=e(" in the background while tweaking the Svelte code or the "),at=o("code"),bi=e("test-svelte"),Ei=e(" app."),Ii=i(),on=o("li"),Oi=e("Not having to restart the dev server whenever I've made changes to the Svelte code"),Ci=i(),ts=o("li"),Di=e("Able to inspect and modify "),ot=o("code"),Si=e("bundle.js"),Pi=e(" without worrying that accidentaly save in the "),nt=o("code"),Ti=e("test-svelte"),Ai=e(" app will overwrite the "),lt=o("code"),ji=e("bundle.js"),Hi=i(),ks=o("p"),Li=e("Looking at the different "),rt=o("code"),$i=e("bundle.js"),Ri=e(" generated from with "),it=o("code"),qi=e("{...spread}"),Mi=e(" attributes and without spread attributes"),Vi=i(),ct=o("div"),Wi=i(),nn=o("p"),Ni=e("I found the following diffs in the bundled output:"),Bi=i(),pt=o("div"),Fi=i(),Ks=o("p"),Gi=e("Well, I know I haven't cover how spread attribute works in any of my "),kt=o("a"),Ui=e('"Compile Svelte in your Head"'),zi=e(" articles, but the general idea is that, Svelte builds an array of attributes, and then apply it to the element / Component."),Yi=i(),ln=o("p"),Ji=e("For example, if we write the following in Svelte"),Qi=i(),ht=o("div"),Zi=i(),rn=o("p"),Ki=e("It gets compiled to something like this:"),Xi=i(),vt=o("div"),sc=i(),Xs=o("p"),ec=e("So, this roughly explains the additional code added into the "),dt=o("code"),tc=e("bundle.js"),ac=e(" for handling spread attributes."),oc=i(),cn=o("p"),nc=e("However the code that is removed, is something I am not familiar with."),lc=i(),yt=o("div"),rc=i(),hs=o("p"),ic=e("It seems like we are trying to set "),ut=o("code"),cc=e("option.selected"),pc=e(" after we mount the "),ft=o("code"),kc=e("<select>"),hc=e(" element. Not sure how important is that to us."),vc=i(),se=o("p"),dc=e("To verify that the bug is because that the above code snippet is missing when having a spread attribute, I tried adding the code snippet into the "),xt=o("code"),yc=e("bundle.js"),uc=e(" manually, and refresh the page."),fc=i(),gt=o("div"),xc=i(),z=o("p"),gc=e("Instead of "),mt=o("code"),mc=e("~select_value_value.indexOf(...)"),wc=e(", I changed it to "),wt=o("code"),_c=e("~ctx[0].indexOf(...)"),bc=e(", as "),_t=o("code"),Ec=e("select_value_value"),Ic=e(" wasn't created when using spread attribute."),Oc=i(),pn=o("p"),Cc=e("...and it works!"),Dc=i(),kn=o("p"),vs=o("span"),bt=o("picture"),hn=o("source"),$=o("img"),Sc=i(),ee=o("p"),Pc=e("So, now we know that the bug is caused by missing setting "),Et=o("code"),Tc=e("option.selected"),Ac=e(" on mount, now its time to figure out what the code snippet is not generated when there's a spread attribute."),jc=i(),vn=o("p"),Hc=e("To quickly find out why something is not generated, I tried to look for where it is generated, figuring out probably whether certain condition was not set correctly to cause the Svelte compiler to omit out the code snippet."),Lc=i(),te=o("p"),$c=e("To find the right place to start looking is an art. Usually I try to global search a small snippet of code that is "),dn=o("strong"),Rc=e("most likely static"),qc=e(", something that has no variable name, for example:"),Mc=i(),ds=o("ul"),yn=o("li"),It=o("code"),Vc=e(".indexOf(option.__value)"),Wc=i(),un=o("li"),Ot=o("code"),Nc=e(".options.length;"),Bc=i(),fn=o("li"),Ct=o("code"),Fc=e(".selected = ~"),Gc=i(),ws=o("p"),Uc=e("The only search result I got when searching for "),Dt=o("code"),zc=e(".indexOf(option.__value)"),Yc=e(" is in "),ae=o("a"),Jc=e("src/runtime/internal/dom.ts"),Qc=i(),St=o("div"),Zc=i(),ys=o("p"),Kc=e("Anything within "),Pt=o("code"),Xc=e("src/runtime/"),sp=e(" are helper functions that are referenced from the output code, to reduce the output code size. Hmm... probably we should reuse the "),Tt=o("code"),ep=e("select_options"),tp=e(" helper function:"),ap=i(),At=o("div"),op=i(),_s=o("p"),np=e("Anyway, "),jt=o("code"),lp=e("src/runtime/internal/dom.ts"),rp=e(" is not where I am looking for, so I tried searching "),Ht=o("code"),ip=e(".options.length"),cp=i(),Lt=o("div"),pp=i(),xn=o("p"),kp=e("Yes, this is most likely where it is."),hp=i(),Y=o("p"),vp=e("Firstly, let me update the "),$t=o("code"),dp=e("updater"),yp=e(" to use the "),Rt=o("code"),up=e("src/runtime/"),fp=i(),qt=o("code"),xp=e("select_options"),gp=e(" helper instead:"),mp=i(),Mt=o("div"),wp=i(),P=o("p"),_p=e("The "),Vt=o("code"),bp=e("b`...`"),Ep=e(", is called a "),oe=o("a"),Ip=e("tagged template"),Op=e(", where the "),Wt=o("code"),Cp=e("b"),Dp=e(" is a function that takes in the template literal and return something. In this case, the "),Nt=o("code"),Sp=e("b"),Pp=e(" function returns an "),ne=o("a"),Tp=e("Abstract Syntaxt Tree (AST)"),Ap=e("."),jp=i(),L=o("p"),Hp=e("The "),Bt=o("code"),Lp=e("b"),$p=e(" function comes from "),le=o("a"),Rp=e("code-red"),qp=e(", a utility to generate a JavaScript AST node. Beside "),Ft=o("code"),Mp=e("b"),Vp=e(", "),Gt=o("code"),Wp=e("code-red"),Np=e(" provides a few helper functions:"),Bp=i(),us=o("ul"),Ut=o("li"),zt=o("code"),Fp=e("b"),Gp=e(" returns a block node"),Up=i(),Yt=o("li"),Jt=o("code"),zp=e("x"),Yp=e(" returns an expression node"),Jp=i(),Qt=o("li"),Zt=o("code"),Qp=e("p"),Zp=e(" returns a object property node"),Kp=i(),gn=o("p"),Xp=e("These helper functions are useful in generating code in Svelte compiler, particularly because the placeholder itself can takes in another AST node:"),sk=i(),Kt=o("div"),ek=i(),R=o("p"),Xt=o("code"),tk=e("@"),ak=e(" in front of "),sa=o("code"),ok=e("@select_option"),nk=e(" is a convention in Svelte, where it will "),re=o("a"),lk=e("get replaced"),rk=e(" to refer to helpr functions in "),ea=o("code"),ik=e("src/runtime/"),ck=e(" before writing the generated AST out:"),pk=i(),ta=o("div"),kk=i(),mn=o("p"),hk=e("Coming back to figure out why this piece of code is not executed when there's a spread attribute,"),vk=i(),aa=o("div"),dk=i(),J=o("p"),yk=e("I tried adding "),oa=o("code"),uk=e("console.log"),fk=e(" before the if statement, to figure out the value for "),na=o("code"),xk=e("is_legacy_input_type"),gk=e(" and "),la=o("code"),mk=e("is_select_value_attribute"),wk=e(":"),_k=i(),ra=o("div"),bk=i(),ie=o("p"),Ek=e("To my surpise, there was no log. "),ia=o("code"),Ik=e("AttributeWrapper#render"),Ok=e(" wasn't executed."),Ck=i(),ce=o("p"),Dk=e("I tried removing the spread attribute, and verified from the log that the "),ca=o("code"),Sk=e("AttributeWrapper#render"),Pk=e(" method was indeed executed when there's no spread attribute."),Tk=i(),fs=o("p"),Ak=e("To figure out the caller of the "),pa=o("code"),jk=e("AttributeWrapper#render"),Hk=e(" method, I added "),ka=o("code"),Lk=e("console.trace"),$k=e(" at the top of the method:"),Rk=i(),ha=o("div"),qk=i(),va=o("div"),Mk=i(),da=o("p"),Vk=e("This brought me to "),pe=o("a"),Wk=e("src/compiler/compile/render_dom/wrappers/Element/index.ts"),Nk=i(),ya=o("div"),Bk=i(),Q=o("p"),Fk=e("If there's a spread attribute, it will call the "),ua=o("code"),Gk=e("this.node.attributes.some(attr => attr.is_spread)"),Uk=e(" method instead of calling "),fa=o("code"),zk=e("attribute.render(block)"),Yk=e(", so that's probably why "),xa=o("code"),Jk=e("AttributeWrapper#render"),Qk=e(" wasn't called."),Zk=i(),Z=o("p"),Kk=e("I looked into the method "),ga=o("code"),Xk=e("add_spread_attributes"),sh=e(", found out it contain only the code about handling spread attributes as I explained earlier. It didn't have any code related to "),ma=o("code"),eh=e("select_options"),th=e(", so I figured that, maybe "),wa=o("code"),ah=e("<select multiple>"),oh=e(" with spread attribute is an edge case that wasn't handled currently at all."),nh=i(),ke=o("p"),lh=e("So, I tried to add a special check for this case at the bottom of the "),_a=o("code"),rh=e("add_spread_attributes"),ih=e(" method:"),ch=i(),ba=o("div"),ph=i(),g=o("p"),kh=e("As mentioned in the "),Ea=o("a"),hh=e("The Svelte Compiler Handbook"),vh=e(", a "),Ia=o("code"),dh=e("block"),yh=e(" is where it keeps the code to generate the "),Oa=o("a"),Ca=o("code"),uh=e("create_fragment"),fh=e(" function. The return object of the "),Da=o("code"),xh=e("create_fragment"),gh=e(" function contains various method as mentioned in "),Sa=o("a"),mh=e("Compile Svelte in your Head"),wh=e(", such as "),Pa=o("code"),_h=e("c()"),bh=e(", "),Ta=o("code"),Eh=e("m()"),Ih=e(" and "),Aa=o("code"),Oh=e("d()"),Ch=e(". To add code into different method, you can push them into the array in "),ja=o("code"),Dh=e("block.chunks"),Sh=e(", for example:"),Ph=i(),Ha=o("div"),Th=i(),K=o("p"),Ah=e("I tried adding "),La=o("code"),jh=e("@select_options(...)"),Hh=e(" into the "),$a=o("code"),Lh=e("m()"),$h=e(" method and yup, the "),Ra=o("code"),Rh=e("<select>"),qh=e(" element is pre-selected correctly!"),Mn=i(),h=o("section"),wn=o("h2"),he=o("a"),Mh=e("Fixing the bug"),Vh=i(),_n=o("p"),Wh=e("To ensure the bug is fixed, I need to come up with a test."),Nh=i(),bn=o("p"),Bh=e("Usually I come up with test cases that try to entail various scenario I can imagine."),Fh=i(),ve=o("p"),Gh=e("In this example, we've manually tested the case where the "),qa=o("code"),Uh=e("<select multiple {value} {...{}}>"),zh=e(", the value is set correctly during initialisation. but have we check the case where:"),Yh=i(),de=o("ul"),xs=o("li"),Jh=e("we update the value of "),Ma=o("code"),Qh=e("value"),Zh=e(", will the "),Va=o("code"),Kh=e("<select>"),Xh=e(" get updated accordingly?"),sv=i(),ye=o("li"),ev=e("if the value is overriden by the spreaded attribute, eg "),Wa=o("code"),tv=e("<select mutliple {value} { ...{value: []} }>"),av=e("?"),ov=i(),En=o("p"),nv=e("Ideally, the test cases come up should be failed before the fix, and passed after the fix."),lv=i(),In=o("p"),rv=e("So here's the test case I came up:"),iv=i(),Na=o("div"),cv=i(),X=o("p"),pv=e("I can check and uncheck the checkbox to change the value of "),Ba=o("code"),kv=e("value"),hv=e(" to verify the the "),Fa=o("code"),vv=e("value"),dv=e(" is reactive, and "),Ga=o("code"),yv=e("<select>"),uv=e(" will get updated accordingly."),fv=i(),b=o("p"),xv=e("Besides that, I exported "),Ua=o("code"),gv=e("spread"),mv=e(", so that I can change the object to something object to contain "),za=o("code"),wv=e("value"),_v=e(", eg: "),Ya=o("code"),bv=e("{ value: [] }"),Ev=e(", and see how "),Ja=o("code"),Iv=e("<select>"),Ov=e(" will update accordingly. Make sure that our fix not just work with "),Qa=o("code"),Cv=e("value"),Dv=e(" attribute, and also when the "),Za=o("code"),Sv=e("value"),Pv=e(" is spreaded into "),Ka=o("code"),Tv=e("<select>"),Av=e("."),jv=i(),On=o("p"),Hv=e("You may think that we are familiar with our fix, we know what it will fix, what it will not fix, do we need think up and write all the edge cases?"),Lv=i(),Cn=o("p"),$v=e("Well, I think you should. Future you will thank the present you when he encounter a fail test, that just mean his change may have an unintentional regression change. If you don't have the test case, the future you will never know what edge case he didn't accounted for."),Rv=i(),ss=o("p"),qv=e("Runtime test cases are added into "),Xa=o("code"),Mv=e("test/runtime/samples/"),Vv=e(". Each folder represent 1 test case. Inside the folder, the component to be tested is named "),so=o("code"),Wv=e("App.svelte"),Nv=e(", and the test case is written "),eo=o("code"),Bv=e("_config.js"),Fv=e("."),Gv=i(),to=o("p"),ao=o("code"),Uv=e("_config.js"),zv=e(" default exports a object:"),Yv=i(),oo=o("div"),Jv=i(),ue=o("p"),Qv=e("An example of test case of unchecking the checkbox, and verify "),no=o("code"),Zv=e("<select>"),Kv=e(" value get updated"),Xv=i(),lo=o("div"),sd=i(),fe=o("p"),ed=e("To run only this test, so that we can focus on ensuring the test case pass, we can set "),ro=o("code"),td=e("solo: true"),ad=e(":"),od=i(),io=o("div"),nd=i(),A=o("p"),Dn=o("strong"),ld=e("Quick tip:"),rd=e(" running "),co=o("code"),id=e("npm run test"),cd=e(" will build Svelte code first before executing the test. If you are like me, running "),po=o("code"),pd=e("npm run dev"),kd=e(" on the background, Svelte code is build on every code change. So, "),ko=o("code"),hd=e("npm run quicktest"),vd=e(" would allow you to skip the "),ho=o("code"),dd=e("pretest"),yd=e(" build, and run the test suite immediately."),ud=i(),xe=o("p"),fd=e("With the test, I realised that I didn't handle the case when the "),vo=o("code"),xd=e("value"),gd=e(" is updated."),md=i(),ge=o("p"),wd=e("So I guess what I needed to do is to add the same code in the "),yo=o("code"),_d=e("p()"),bd=e(" (update) method too!"),Ed=i(),uo=o("div"),Id=i(),me=o("p"),Od=e("Well, of course in this way, the "),fo=o("code"),Cd=e("select_options"),Dd=e(" get executed unconditionally whenever any variable is updated."),Sd=i(),T=o("p"),Pd=e("I need to make sure that the "),xo=o("code"),Td=e("select_options(...)"),Ad=e(" inside the "),go=o("code"),jd=e("p()"),Hd=e(" method get executed only when the value of "),mo=o("code"),Ld=e("value"),$d=e(" changes, and also probably when "),wo=o("code"),Rd=e("spread"),qd=e(" changes too, because it could potentially override the value of "),_o=o("code"),Md=e("value"),Vd=e("."),Wd=i(),we=o("p"),Nd=e("If you've read "),bo=o("a"),Bd=e("Compile Svelte in your Head - Bitmask in Svelte"),Fd=e(", you know that Svelte uses bitmask to check any variable changes."),Gd=i(),Sn=o("p"),Ud=e("How do I know what is the bitmask to use in this case, well I dont have to."),zd=i(),_e=o("p"),Yd=e("I can use "),be=o("a"),Eo=o("code"),Jd=e("renderer.dirty(dependencies)"),Qd=e(" to help me with that:"),Zd=i(),Io=o("div"),Kd=i(),Pn=o("p"),Xd=e("Next, I need to figure out what are the dependencies to be included. In this particular case, the dependencies of all attributes have to be taken consideration, because it is hard to tell which one would be eventually applied due to the spread attribute."),sy=i(),Oo=o("div"),ey=i(),Tn=o("p"),ty=e("After a few tweaks, finally I passed all my test cases, and its time to create a pull request!"),Vn=i(),w=o("section"),An=o("h2"),Ee=o("a"),ay=e("Submitting the fix"),oy=i(),gs=o("p"),ny=e("Before pushing the fix to remote, it is important to make sure that all the lints and typescript definitions are correct. You can run "),Co=o("code"),ly=e("npm run lint --fixed"),ry=e(" for linting, and "),Do=o("code"),iy=e("npm run tsd"),cy=e(" to generate typescript definition."),py=i(),Ie=o("p"),ky=e("If you are unsure on how to create a pull request, you can check out "),Oe=o("a"),hy=e("How to make your first pull request on GitHub"),vy=e("."),dy=i(),Ce=o("p"),yy=e("I pushed my branch and created a "),De=o("a"),uy=e("Pull Request to Svelte"),fy=e(", and now I am waiting for feedback and for it to get merged."),xy=i(),jn=o("p"),gy=e("Svelte is not maintained by full-time maintainers, everyone has their full-time job, so please be patient and be nice."),my=i(),wy=o("hr"),_y=i(),Se=o("p"),by=e("If you wish to learn more about Svelte, "),Pe=o("a"),Ey=e("follow me on Twitter"),Iy=e("."),Oy=i(),Te=o("p"),Cy=e("If you have anything unclear about this article, find me on "),Ae=o("a"),Dy=e("Twitter"),Sy=e(" too!"),this.h()},l(d){bg(f.$$.fragment,d),F=c(d),u=n(d,"SECTION",{});var y=l(u);ls=n(y,"H2",{});var Vy=l(ls);x=n(Vy,"A",{href:!0,id:!0});var Wy=l(x);G=t(Wy,"Background"),Wy.forEach(a),Vy.forEach(a),Le=c(y),Wo=n(y,"P",{});var Ny=l(Wo);yl=t(Ny,"As Svelte gains more attention, I find that more and more people are interested in contributing to Svelte."),Ny.forEach(a),ul=c(y),No=n(y,"P",{});var By=l(No);fl=t(By,"Of course, contributing to Svelte, does not mean to contribute only in code, it could be:"),By.forEach(a),xl=c(y),rs=n(y,"UL",{});var So=l(rs);$e=n(So,"LI",{});var Py=l($e);gl=t(Py,"answering questions about Svelte, on social media, Stack Overflow, or "),js=n(Py,"A",{href:!0,rel:!0});var Fy=l(js);ml=t(Fy,"Discord"),Fy.forEach(a),Py.forEach(a),wl=c(So),Bo=n(So,"LI",{});var Gy=l(Bo);_l=t(Gy,"improving Svelte docs, or write tutorials and articles about Svelte"),Gy.forEach(a),bl=c(So),Fo=n(So,"LI",{});var Uy=l(Fo);El=t(Uy,"organising and speaking in meetups about Svelte"),Uy.forEach(a),So.forEach(a),Il=c(y),Hs=n(y,"P",{});var Nn=l(Hs);Ol=t(Nn,"For those who want to contribute in code, most people are unsure where to start. So I wrote "),Re=n(Nn,"A",{href:!0});var zy=l(Re);Cl=t(zy,"The Svelte Compiler Handbook"),zy.forEach(a),Dl=t(Nn," as an overview of the Svelte source code."),Nn.forEach(a),Sl=c(y),Go=n(y,"P",{});var Yy=l(Go);Pl=t(Yy,"However, today, I want to try a different tone."),Yy.forEach(a),Tl=c(y),Uo=n(y,"P",{});var Jy=l(Uo);Al=t(Jy,"I am going to tell you an anecdote on how I investigated and fixed a bug in Svelte."),Jy.forEach(a),jl=c(y),zo=n(y,"P",{});var Qy=l(zo);Hl=t(Qy,"I documented down my train of thoughts as detailed as possible."),Qy.forEach(a),Ll=c(y),Yo=n(y,"P",{});var Zy=l(Yo);$l=t(Zy,"I hope this gives anyone who is reading, a glimpse on how to work on the Svelte source code."),Zy.forEach(a),y.forEach(a),$n=c(d),m=n(d,"SECTION",{});var I=l(m);Jo=n(I,"H2",{});var Ky=l(Jo);Ls=n(Ky,"A",{href:!0,id:!0});var Xy=l(Ls);Rl=t(Xy,"The story begins"),Xy.forEach(a),Ky.forEach(a),ql=c(I),$s=n(I,"P",{});var Bn=l($s);Ml=t(Bn,"I was combing through "),Rs=n(Bn,"A",{href:!0,rel:!0});var su=l(Rs);Vl=t(su,"bugs on GitHub"),su.forEach(a),Wl=t(Bn,", and found this rather interesting bug:"),Bn.forEach(a),Nl=c(I),Bl=n(I,"HR",{}),Fl=c(I),Qo=n(I,"P",{});var eu=l(Qo);qe=n(eu,"STRONG",{});var Ty=l(qe);Gl=t(Ty,"Select multiple value does not get set with spread props "),qs=n(Ty,"A",{href:!0,rel:!0});var tu=l(qs);Ul=t(tu,"#4392"),tu.forEach(a),Ty.forEach(a),eu.forEach(a),zl=c(I),Ms=n(I,"P",{});var Fn=l(Ms);Yl=t(Fn,"Adding any type of spread, even an empty object "),Me=n(Fn,"CODE",{class:!0});var au=l(Me);Jl=t(au,"{...{}}"),au.forEach(a),Ql=t(Fn,", causes the value not to be set:"),Fn.forEach(a),Zl=c(I),Ve=n(I,"DIV",{class:!0});var tm=l(Ve);tm.forEach(a),Kl=c(I),Vs=n(I,"P",{});var Gn=l(Vs);Xl=t(Gn,"To reproduce: "),Ws=n(Gn,"A",{href:!0,rel:!0});var ou=l(Ws);sr=t(ou,"REPL"),ou.forEach(a),er=t(Gn,"."),Gn.forEach(a),tr=c(I),ar=n(I,"HR",{}),I.forEach(a),Rn=c(d),E=n(d,"SECTION",{});var q=l(E);Zo=n(q,"H2",{});var nu=l(Zo);Ns=n(nu,"A",{href:!0,id:!0});var lu=l(Ns);or=t(lu,"Verifying the bug"),lu.forEach(a),nu.forEach(a),nr=c(q),Ko=n(q,"P",{});var ru=l(Ko);lr=t(ru,"I clicked into the REPL and tried to understand about the bug."),ru.forEach(a),rr=c(q),D=n(q,"P",{});var M=l(D);ir=t(M,"I found that if the "),We=n(M,"CODE",{class:!0});var iu=l(We);cr=t(iu,"<select multiple>"),iu.forEach(a),pr=t(M," has spread attribute "),Ne=n(M,"CODE",{class:!0});var cu=l(Ne);kr=t(cu,"{...any}"),cu.forEach(a),hr=t(M,", the "),Be=n(M,"CODE",{class:!0});var pu=l(Be);vr=t(pu,"value"),pu.forEach(a),dr=t(M," attribute will not be reactive. Changes in the value of "),Fe=n(M,"CODE",{class:!0});var ku=l(Fe);yr=t(ku,"value"),ku.forEach(a),ur=t(M," will not be reflected to the "),Ge=n(M,"CODE",{class:!0});var hu=l(Ge);fr=t(hu,"<select>"),hu.forEach(a),xr=t(M,"."),M.forEach(a),gr=c(q),U=n(q,"P",{});var bs=l(U);mr=t(bs,"I noticed the REPL link uses the version "),Ue=n(bs,"CODE",{class:!0});var vu=l(Ue);wr=t(vu,"3.18.1"),vu.forEach(a),_r=t(bs,", it's not the latest version of Svelte. At the point of writing, Svelte is at "),Xo=n(bs,"STRONG",{});var du=l(Xo);br=t(du,"3.22.3"),du.forEach(a),Er=t(bs,". I tried removing the "),ze=n(bs,"CODE",{class:!0});var yu=l(ze);Ir=t(yu,"?version=3.18.1"),yu.forEach(a),Or=t(bs," from the query params to verify whether the bug has fixed, and realised that the bug is still there. (Great! Something interesting to investigate into.)"),bs.forEach(a),Cr=c(q),j=n(q,"P",{});var as=l(j);Dr=t(as,"To understand the current status of the issue, I read through the comments. According to "),Bs=n(as,"A",{href:!0,rel:!0});var uu=l(Bs);Sr=t(uu,"Conduitry"),uu.forEach(a),Pr=t(as,", the issue is related to "),sn=n(as,"STRONG",{});var fu=l(sn);Tr=t(fu,"Radio/checkbox input with bind:group and spread props makes variable undefined"),fu.forEach(a),Ar=c(as),Fs=n(as,"A",{href:!0,rel:!0});var xu=l(Fs);jr=t(xu,"#3680"),xu.forEach(a),Hr=t(as," and can be fixed together. However, the issue "),Gs=n(as,"A",{href:!0,rel:!0});var gu=l(Gs);Lr=t(gu,"#3680"),gu.forEach(a),$r=t(as," was fixed and closed, yet this issue is still open."),as.forEach(a),Rr=c(q),is=n(q,"P",{});var Po=l(is);qr=t(Po,"Nevertheless, I read through "),Us=n(Po,"A",{href:!0,rel:!0});var mu=l(Us);Mr=t(mu,"the PR"),mu.forEach(a),Vr=t(Po," for the closed issue "),zs=n(Po,"A",{href:!0,rel:!0});var wu=l(zs);Wr=t(wu,"#3680"),wu.forEach(a),Nr=t(Po,", roughly understand how it was fixed and hopefully it can give me some inspirations on this issue."),Po.forEach(a),q.forEach(a),qn=c(d),p=n(d,"SECTION",{});var k=l(p);en=n(k,"H2",{});var _u=l(en);Ys=n(_u,"A",{href:!0,id:!0});var bu=l(Ys);Br=t(bu,"Investigating the bug"),bu.forEach(a),_u.forEach(a),Fr=c(k),tn=n(k,"P",{});var Eu=l(tn);Gr=t(Eu,"Once I verified that the behavior described in the issue is unexpected and reproducible in the latest version of Svelte, I copied the REPL code into my local machine to investigate."),Eu.forEach(a),Ur=c(k),S=n(k,"P",{});var V=l(S);zr=t(V,"I have a "),Ye=n(V,"CODE",{class:!0});var Iu=l(Ye);Yr=t(Iu,"test-svelte"),Iu.forEach(a),Jr=t(V," folder ready in my local machine, where I created using "),Js=n(V,"A",{href:!0,rel:!0});var Ou=l(Js);Qr=t(Ou,"Svelte Template"),Ou.forEach(a),Zr=t(V,". I have "),Je=n(V,"CODE",{class:!0});var Cu=l(Je);Kr=t(Cu,"npm link"),Cu.forEach(a),Xr=t(V,"ed my local Svelte clone to the "),Qe=n(V,"CODE",{class:!0});var Du=l(Qe);si=t(Du,"test-svelte"),Du.forEach(a),ei=t(V," folder, so I can rebuild "),Ze=n(V,"CODE",{class:!0});var Su=l(Ze);ti=t(Su,"test-svelte"),Su.forEach(a),ai=t(V," anytime with the latest changes done to my Svelte clone."),V.forEach(a),oi=c(k),Ke=n(k,"DIV",{class:!0});var am=l(Ke);am.forEach(a),ni=c(k),Qs=n(k,"P",{});var Un=l(Qs);li=t(Un,"I have "),Xe=n(Un,"CODE",{class:!0});var Pu=l(Xe);ri=t(Pu,"yarn dev"),Pu.forEach(a),ii=t(Un," running in the Svelte folder, so any changes I make gets compiled immediately."),Un.forEach(a),ci=c(k),H=n(k,"P",{});var os=l(H);pi=t(os,"I prefer to "),an=n(os,"STRONG",{});var Tu=l(an);ki=t(Tu,"build"),Tu.forEach(a),hi=c(os),st=n(os,"CODE",{class:!0});var Au=l(st);vi=t(Au,"test-svelte"),Au.forEach(a),di=t(os," and serve it with "),Zs=n(os,"A",{href:!0,rel:!0});var ju=l(Zs);yi=t(ju,"http-server"),ju.forEach(a),ui=t(os," rather than start a dev server "),et=n(os,"CODE",{class:!0});var Hu=l(et);fi=t(Hu,"test-svelte"),Hu.forEach(a),xi=t(os," in watch mode. That allows me to"),os.forEach(a),gi=c(k),cs=n(k,"UL",{});var To=l(cs);ps=n(To,"LI",{});var Ao=l(ps);mi=t(Ao,"Run the "),tt=n(Ao,"CODE",{class:!0});var Lu=l(tt);wi=t(Lu,"http-server"),Lu.forEach(a),_i=t(Ao," in the background while tweaking the Svelte code or the "),at=n(Ao,"CODE",{class:!0});var $u=l(at);bi=t($u,"test-svelte"),$u.forEach(a),Ei=t(Ao," app."),Ao.forEach(a),Ii=c(To),on=n(To,"LI",{});var Ru=l(on);Oi=t(Ru,"Not having to restart the dev server whenever I've made changes to the Svelte code"),Ru.forEach(a),Ci=c(To),ts=n(To,"LI",{});var je=l(ts);Di=t(je,"Able to inspect and modify "),ot=n(je,"CODE",{class:!0});var qu=l(ot);Si=t(qu,"bundle.js"),qu.forEach(a),Pi=t(je," without worrying that accidentaly save in the "),nt=n(je,"CODE",{class:!0});var Mu=l(nt);Ti=t(Mu,"test-svelte"),Mu.forEach(a),Ai=t(je," app will overwrite the "),lt=n(je,"CODE",{class:!0});var Vu=l(lt);ji=t(Vu,"bundle.js"),Vu.forEach(a),je.forEach(a),To.forEach(a),Hi=c(k),ks=n(k,"P",{});var jo=l(ks);Li=t(jo,"Looking at the different "),rt=n(jo,"CODE",{class:!0});var Wu=l(rt);$i=t(Wu,"bundle.js"),Wu.forEach(a),Ri=t(jo," generated from with "),it=n(jo,"CODE",{class:!0});var Nu=l(it);qi=t(Nu,"{...spread}"),Nu.forEach(a),Mi=t(jo," attributes and without spread attributes"),jo.forEach(a),Vi=c(k),ct=n(k,"DIV",{class:!0});var om=l(ct);om.forEach(a),Wi=c(k),nn=n(k,"P",{});var Bu=l(nn);Ni=t(Bu,"I found the following diffs in the bundled output:"),Bu.forEach(a),Bi=c(k),pt=n(k,"DIV",{class:!0});var nm=l(pt);nm.forEach(a),Fi=c(k),Ks=n(k,"P",{});var zn=l(Ks);Gi=t(zn,"Well, I know I haven't cover how spread attribute works in any of my "),kt=n(zn,"A",{href:!0});var Fu=l(kt);Ui=t(Fu,'"Compile Svelte in your Head"'),Fu.forEach(a),zi=t(zn," articles, but the general idea is that, Svelte builds an array of attributes, and then apply it to the element / Component."),zn.forEach(a),Yi=c(k),ln=n(k,"P",{});var Gu=l(ln);Ji=t(Gu,"For example, if we write the following in Svelte"),Gu.forEach(a),Qi=c(k),ht=n(k,"DIV",{class:!0});var lm=l(ht);lm.forEach(a),Zi=c(k),rn=n(k,"P",{});var Uu=l(rn);Ki=t(Uu,"It gets compiled to something like this:"),Uu.forEach(a),Xi=c(k),vt=n(k,"DIV",{class:!0});var rm=l(vt);rm.forEach(a),sc=c(k),Xs=n(k,"P",{});var Yn=l(Xs);ec=t(Yn,"So, this roughly explains the additional code added into the "),dt=n(Yn,"CODE",{class:!0});var zu=l(dt);tc=t(zu,"bundle.js"),zu.forEach(a),ac=t(Yn," for handling spread attributes."),Yn.forEach(a),oc=c(k),cn=n(k,"P",{});var Yu=l(cn);nc=t(Yu,"However the code that is removed, is something I am not familiar with."),Yu.forEach(a),lc=c(k),yt=n(k,"DIV",{class:!0});var im=l(yt);im.forEach(a),rc=c(k),hs=n(k,"P",{});var Ho=l(hs);ic=t(Ho,"It seems like we are trying to set "),ut=n(Ho,"CODE",{class:!0});var Ju=l(ut);cc=t(Ju,"option.selected"),Ju.forEach(a),pc=t(Ho," after we mount the "),ft=n(Ho,"CODE",{class:!0});var Qu=l(ft);kc=t(Qu,"<select>"),Qu.forEach(a),hc=t(Ho," element. Not sure how important is that to us."),Ho.forEach(a),vc=c(k),se=n(k,"P",{});var Jn=l(se);dc=t(Jn,"To verify that the bug is because that the above code snippet is missing when having a spread attribute, I tried adding the code snippet into the "),xt=n(Jn,"CODE",{class:!0});var Zu=l(xt);yc=t(Zu,"bundle.js"),Zu.forEach(a),uc=t(Jn," manually, and refresh the page."),Jn.forEach(a),fc=c(k),gt=n(k,"DIV",{class:!0});var cm=l(gt);cm.forEach(a),xc=c(k),z=n(k,"P",{});var Es=l(z);gc=t(Es,"Instead of "),mt=n(Es,"CODE",{class:!0});var Ku=l(mt);mc=t(Ku,"~select_value_value.indexOf(...)"),Ku.forEach(a),wc=t(Es,", I changed it to "),wt=n(Es,"CODE",{class:!0});var Xu=l(wt);_c=t(Xu,"~ctx[0].indexOf(...)"),Xu.forEach(a),bc=t(Es,", as "),_t=n(Es,"CODE",{class:!0});var sf=l(_t);Ec=t(sf,"select_value_value"),sf.forEach(a),Ic=t(Es," wasn't created when using spread attribute."),Es.forEach(a),Oc=c(k),pn=n(k,"P",{});var ef=l(pn);Cc=t(ef,"...and it works!"),ef.forEach(a),Dc=c(k),kn=n(k,"P",{});var tf=l(kn);vs=n(tf,"SPAN",{style:!0});var af=l(vs);bt=n(af,"PICTURE",{});var Ay=l(bt);hn=n(Ay,"SOURCE",{type:!0,srcset:!0}),$=n(Ay,"IMG",{src:!0,srcset:!0,loading:!0,style:!0,alt:!0}),Ay.forEach(a),af.forEach(a),tf.forEach(a),Sc=c(k),ee=n(k,"P",{});var Qn=l(ee);Pc=t(Qn,"So, now we know that the bug is caused by missing setting "),Et=n(Qn,"CODE",{class:!0});var of=l(Et);Tc=t(of,"option.selected"),of.forEach(a),Ac=t(Qn," on mount, now its time to figure out what the code snippet is not generated when there's a spread attribute."),Qn.forEach(a),jc=c(k),vn=n(k,"P",{});var nf=l(vn);Hc=t(nf,"To quickly find out why something is not generated, I tried to look for where it is generated, figuring out probably whether certain condition was not set correctly to cause the Svelte compiler to omit out the code snippet."),nf.forEach(a),Lc=c(k),te=n(k,"P",{});var Zn=l(te);$c=t(Zn,"To find the right place to start looking is an art. Usually I try to global search a small snippet of code that is "),dn=n(Zn,"STRONG",{});var lf=l(dn);Rc=t(lf,"most likely static"),lf.forEach(a),qc=t(Zn,", something that has no variable name, for example:"),Zn.forEach(a),Mc=c(k),ds=n(k,"UL",{});var Lo=l(ds);yn=n(Lo,"LI",{});var rf=l(yn);It=n(rf,"CODE",{class:!0});var cf=l(It);Vc=t(cf,".indexOf(option.__value)"),cf.forEach(a),rf.forEach(a),Wc=c(Lo),un=n(Lo,"LI",{});var pf=l(un);Ot=n(pf,"CODE",{class:!0});var kf=l(Ot);Nc=t(kf,".options.length;"),kf.forEach(a),pf.forEach(a),Bc=c(Lo),fn=n(Lo,"LI",{});var hf=l(fn);Ct=n(hf,"CODE",{class:!0});var vf=l(Ct);Fc=t(vf,".selected = ~"),vf.forEach(a),hf.forEach(a),Lo.forEach(a),Gc=c(k),ws=n(k,"P",{});var Hn=l(ws);Uc=t(Hn,"The only search result I got when searching for "),Dt=n(Hn,"CODE",{class:!0});var df=l(Dt);zc=t(df,".indexOf(option.__value)"),df.forEach(a),Yc=t(Hn," is in "),ae=n(Hn,"A",{href:!0,rel:!0});var yf=l(ae);Jc=t(yf,"src/runtime/internal/dom.ts"),yf.forEach(a),Hn.forEach(a),Qc=c(k),St=n(k,"DIV",{class:!0});var pm=l(St);pm.forEach(a),Zc=c(k),ys=n(k,"P",{});var $o=l(ys);Kc=t($o,"Anything within "),Pt=n($o,"CODE",{class:!0});var uf=l(Pt);Xc=t(uf,"src/runtime/"),uf.forEach(a),sp=t($o," are helper functions that are referenced from the output code, to reduce the output code size. Hmm... probably we should reuse the "),Tt=n($o,"CODE",{class:!0});var ff=l(Tt);ep=t(ff,"select_options"),ff.forEach(a),tp=t($o," helper function:"),$o.forEach(a),ap=c(k),At=n(k,"DIV",{class:!0});var km=l(At);km.forEach(a),op=c(k),_s=n(k,"P",{});var Ln=l(_s);np=t(Ln,"Anyway, "),jt=n(Ln,"CODE",{class:!0});var xf=l(jt);lp=t(xf,"src/runtime/internal/dom.ts"),xf.forEach(a),rp=t(Ln," is not where I am looking for, so I tried searching "),Ht=n(Ln,"CODE",{class:!0});var gf=l(Ht);ip=t(gf,".options.length"),gf.forEach(a),Ln.forEach(a),cp=c(k),Lt=n(k,"DIV",{class:!0});var hm=l(Lt);hm.forEach(a),pp=c(k),xn=n(k,"P",{});var mf=l(xn);kp=t(mf,"Yes, this is most likely where it is."),mf.forEach(a),hp=c(k),Y=n(k,"P",{});var Is=l(Y);vp=t(Is,"Firstly, let me update the "),$t=n(Is,"CODE",{class:!0});var wf=l($t);dp=t(wf,"updater"),wf.forEach(a),yp=t(Is," to use the "),Rt=n(Is,"CODE",{class:!0});var _f=l(Rt);up=t(_f,"src/runtime/"),_f.forEach(a),fp=c(Is),qt=n(Is,"CODE",{class:!0});var bf=l(qt);xp=t(bf,"select_options"),bf.forEach(a),gp=t(Is," helper instead:"),Is.forEach(a),mp=c(k),Mt=n(k,"DIV",{class:!0});var vm=l(Mt);vm.forEach(a),wp=c(k),P=n(k,"P",{});var W=l(P);_p=t(W,"The "),Vt=n(W,"CODE",{class:!0});var Ef=l(Vt);bp=t(Ef,"b`...`"),Ef.forEach(a),Ep=t(W,", is called a "),oe=n(W,"A",{href:!0,rel:!0});var If=l(oe);Ip=t(If,"tagged template"),If.forEach(a),Op=t(W,", where the "),Wt=n(W,"CODE",{class:!0});var Of=l(Wt);Cp=t(Of,"b"),Of.forEach(a),Dp=t(W," is a function that takes in the template literal and return something. In this case, the "),Nt=n(W,"CODE",{class:!0});var Cf=l(Nt);Sp=t(Cf,"b"),Cf.forEach(a),Pp=t(W," function returns an "),ne=n(W,"A",{href:!0,rel:!0});var Df=l(ne);Tp=t(Df,"Abstract Syntaxt Tree (AST)"),Df.forEach(a),Ap=t(W,"."),W.forEach(a),jp=c(k),L=n(k,"P",{});var ns=l(L);Hp=t(ns,"The "),Bt=n(ns,"CODE",{class:!0});var Sf=l(Bt);Lp=t(Sf,"b"),Sf.forEach(a),$p=t(ns," function comes from "),le=n(ns,"A",{href:!0,rel:!0});var Pf=l(le);Rp=t(Pf,"code-red"),Pf.forEach(a),qp=t(ns,", a utility to generate a JavaScript AST node. Beside "),Ft=n(ns,"CODE",{class:!0});var Tf=l(Ft);Mp=t(Tf,"b"),Tf.forEach(a),Vp=t(ns,", "),Gt=n(ns,"CODE",{class:!0});var Af=l(Gt);Wp=t(Af,"code-red"),Af.forEach(a),Np=t(ns," provides a few helper functions:"),ns.forEach(a),Bp=c(k),us=n(k,"UL",{});var Ro=l(us);Ut=n(Ro,"LI",{});var jy=l(Ut);zt=n(jy,"CODE",{class:!0});var jf=l(zt);Fp=t(jf,"b"),jf.forEach(a),Gp=t(jy," returns a block node"),jy.forEach(a),Up=c(Ro),Yt=n(Ro,"LI",{});var Hy=l(Yt);Jt=n(Hy,"CODE",{class:!0});var Hf=l(Jt);zp=t(Hf,"x"),Hf.forEach(a),Yp=t(Hy," returns an expression node"),Hy.forEach(a),Jp=c(Ro),Qt=n(Ro,"LI",{});var Ly=l(Qt);Zt=n(Ly,"CODE",{class:!0});var Lf=l(Zt);Qp=t(Lf,"p"),Lf.forEach(a),Zp=t(Ly," returns a object property node"),Ly.forEach(a),Ro.forEach(a),Kp=c(k),gn=n(k,"P",{});var $f=l(gn);Xp=t($f,"These helper functions are useful in generating code in Svelte compiler, particularly because the placeholder itself can takes in another AST node:"),$f.forEach(a),sk=c(k),Kt=n(k,"DIV",{class:!0});var dm=l(Kt);dm.forEach(a),ek=c(k),R=n(k,"P",{});var ms=l(R);Xt=n(ms,"CODE",{class:!0});var Rf=l(Xt);tk=t(Rf,"@"),Rf.forEach(a),ak=t(ms," in front of "),sa=n(ms,"CODE",{class:!0});var qf=l(sa);ok=t(qf,"@select_option"),qf.forEach(a),nk=t(ms," is a convention in Svelte, where it will "),re=n(ms,"A",{href:!0,rel:!0});var Mf=l(re);lk=t(Mf,"get replaced"),Mf.forEach(a),rk=t(ms," to refer to helpr functions in "),ea=n(ms,"CODE",{class:!0});var Vf=l(ea);ik=t(Vf,"src/runtime/"),Vf.forEach(a),ck=t(ms," before writing the generated AST out:"),ms.forEach(a),pk=c(k),ta=n(k,"DIV",{class:!0});var ym=l(ta);ym.forEach(a),kk=c(k),mn=n(k,"P",{});var Wf=l(mn);hk=t(Wf,"Coming back to figure out why this piece of code is not executed when there's a spread attribute,"),Wf.forEach(a),vk=c(k),aa=n(k,"DIV",{class:!0});var um=l(aa);um.forEach(a),dk=c(k),J=n(k,"P",{});var Os=l(J);yk=t(Os,"I tried adding "),oa=n(Os,"CODE",{class:!0});var Nf=l(oa);uk=t(Nf,"console.log"),Nf.forEach(a),fk=t(Os," before the if statement, to figure out the value for "),na=n(Os,"CODE",{class:!0});var Bf=l(na);xk=t(Bf,"is_legacy_input_type"),Bf.forEach(a),gk=t(Os," and "),la=n(Os,"CODE",{class:!0});var Ff=l(la);mk=t(Ff,"is_select_value_attribute"),Ff.forEach(a),wk=t(Os,":"),Os.forEach(a),_k=c(k),ra=n(k,"DIV",{class:!0});var fm=l(ra);fm.forEach(a),bk=c(k),ie=n(k,"P",{});var Kn=l(ie);Ek=t(Kn,"To my surpise, there was no log. "),ia=n(Kn,"CODE",{class:!0});var Gf=l(ia);Ik=t(Gf,"AttributeWrapper#render"),Gf.forEach(a),Ok=t(Kn," wasn't executed."),Kn.forEach(a),Ck=c(k),ce=n(k,"P",{});var Xn=l(ce);Dk=t(Xn,"I tried removing the spread attribute, and verified from the log that the "),ca=n(Xn,"CODE",{class:!0});var Uf=l(ca);Sk=t(Uf,"AttributeWrapper#render"),Uf.forEach(a),Pk=t(Xn," method was indeed executed when there's no spread attribute."),Xn.forEach(a),Tk=c(k),fs=n(k,"P",{});var qo=l(fs);Ak=t(qo,"To figure out the caller of the "),pa=n(qo,"CODE",{class:!0});var zf=l(pa);jk=t(zf,"AttributeWrapper#render"),zf.forEach(a),Hk=t(qo," method, I added "),ka=n(qo,"CODE",{class:!0});var Yf=l(ka);Lk=t(Yf,"console.trace"),Yf.forEach(a),$k=t(qo," at the top of the method:"),qo.forEach(a),Rk=c(k),ha=n(k,"DIV",{class:!0});var xm=l(ha);xm.forEach(a),qk=c(k),va=n(k,"DIV",{class:!0});var gm=l(va);gm.forEach(a),Mk=c(k),da=n(k,"P",{});var $y=l(da);Vk=t($y,"This brought me to "),pe=n($y,"A",{href:!0,rel:!0});var Jf=l(pe);Wk=t(Jf,"src/compiler/compile/render_dom/wrappers/Element/index.ts"),Jf.forEach(a),$y.forEach(a),Nk=c(k),ya=n(k,"DIV",{class:!0});var mm=l(ya);mm.forEach(a),Bk=c(k),Q=n(k,"P",{});var Cs=l(Q);Fk=t(Cs,"If there's a spread attribute, it will call the "),ua=n(Cs,"CODE",{class:!0});var Qf=l(ua);Gk=t(Qf,"this.node.attributes.some(attr => attr.is_spread)"),Qf.forEach(a),Uk=t(Cs," method instead of calling "),fa=n(Cs,"CODE",{class:!0});var Zf=l(fa);zk=t(Zf,"attribute.render(block)"),Zf.forEach(a),Yk=t(Cs,", so that's probably why "),xa=n(Cs,"CODE",{class:!0});var Kf=l(xa);Jk=t(Kf,"AttributeWrapper#render"),Kf.forEach(a),Qk=t(Cs," wasn't called."),Cs.forEach(a),Zk=c(k),Z=n(k,"P",{});var Ds=l(Z);Kk=t(Ds,"I looked into the method "),ga=n(Ds,"CODE",{class:!0});var Xf=l(ga);Xk=t(Xf,"add_spread_attributes"),Xf.forEach(a),sh=t(Ds,", found out it contain only the code about handling spread attributes as I explained earlier. It didn't have any code related to "),ma=n(Ds,"CODE",{class:!0});var sx=l(ma);eh=t(sx,"select_options"),sx.forEach(a),th=t(Ds,", so I figured that, maybe "),wa=n(Ds,"CODE",{class:!0});var ex=l(wa);ah=t(ex,"<select multiple>"),ex.forEach(a),oh=t(Ds," with spread attribute is an edge case that wasn't handled currently at all."),Ds.forEach(a),nh=c(k),ke=n(k,"P",{});var sl=l(ke);lh=t(sl,"So, I tried to add a special check for this case at the bottom of the "),_a=n(sl,"CODE",{class:!0});var tx=l(_a);rh=t(tx,"add_spread_attributes"),tx.forEach(a),ih=t(sl," method:"),sl.forEach(a),ch=c(k),ba=n(k,"DIV",{class:!0});var wm=l(ba);wm.forEach(a),ph=c(k),g=n(k,"P",{});var _=l(g);kh=t(_,"As mentioned in the "),Ea=n(_,"A",{href:!0});var ax=l(Ea);hh=t(ax,"The Svelte Compiler Handbook"),ax.forEach(a),vh=t(_,", a "),Ia=n(_,"CODE",{class:!0});var ox=l(Ia);dh=t(ox,"block"),ox.forEach(a),yh=t(_," is where it keeps the code to generate the "),Oa=n(_,"A",{href:!0});var nx=l(Oa);Ca=n(nx,"CODE",{class:!0});var lx=l(Ca);uh=t(lx,"create_fragment"),lx.forEach(a),nx.forEach(a),fh=t(_," function. The return object of the "),Da=n(_,"CODE",{class:!0});var rx=l(Da);xh=t(rx,"create_fragment"),rx.forEach(a),gh=t(_," function contains various method as mentioned in "),Sa=n(_,"A",{href:!0});var ix=l(Sa);mh=t(ix,"Compile Svelte in your Head"),ix.forEach(a),wh=t(_,", such as "),Pa=n(_,"CODE",{class:!0});var cx=l(Pa);_h=t(cx,"c()"),cx.forEach(a),bh=t(_,", "),Ta=n(_,"CODE",{class:!0});var px=l(Ta);Eh=t(px,"m()"),px.forEach(a),Ih=t(_," and "),Aa=n(_,"CODE",{class:!0});var kx=l(Aa);Oh=t(kx,"d()"),kx.forEach(a),Ch=t(_,". To add code into different method, you can push them into the array in "),ja=n(_,"CODE",{class:!0});var hx=l(ja);Dh=t(hx,"block.chunks"),hx.forEach(a),Sh=t(_,", for example:"),_.forEach(a),Ph=c(k),Ha=n(k,"DIV",{class:!0});var _m=l(Ha);_m.forEach(a),Th=c(k),K=n(k,"P",{});var Ss=l(K);Ah=t(Ss,"I tried adding "),La=n(Ss,"CODE",{class:!0});var vx=l(La);jh=t(vx,"@select_options(...)"),vx.forEach(a),Hh=t(Ss," into the "),$a=n(Ss,"CODE",{class:!0});var dx=l($a);Lh=t(dx,"m()"),dx.forEach(a),$h=t(Ss," method and yup, the "),Ra=n(Ss,"CODE",{class:!0});var yx=l(Ra);Rh=t(yx,"<select>"),yx.forEach(a),qh=t(Ss," element is pre-selected correctly!"),Ss.forEach(a),k.forEach(a),Mn=c(d),h=n(d,"SECTION",{});var v=l(h);wn=n(v,"H2",{});var ux=l(wn);he=n(ux,"A",{href:!0,id:!0});var fx=l(he);Mh=t(fx,"Fixing the bug"),fx.forEach(a),ux.forEach(a),Vh=c(v),_n=n(v,"P",{});var xx=l(_n);Wh=t(xx,"To ensure the bug is fixed, I need to come up with a test."),xx.forEach(a),Nh=c(v),bn=n(v,"P",{});var gx=l(bn);Bh=t(gx,"Usually I come up with test cases that try to entail various scenario I can imagine."),gx.forEach(a),Fh=c(v),ve=n(v,"P",{});var el=l(ve);Gh=t(el,"In this example, we've manually tested the case where the "),qa=n(el,"CODE",{class:!0});var mx=l(qa);Uh=t(mx,"<select multiple {value} {...{}}>"),mx.forEach(a),zh=t(el,", the value is set correctly during initialisation. but have we check the case where:"),el.forEach(a),Yh=c(v),de=n(v,"UL",{});var tl=l(de);xs=n(tl,"LI",{});var Mo=l(xs);Jh=t(Mo,"we update the value of "),Ma=n(Mo,"CODE",{class:!0});var wx=l(Ma);Qh=t(wx,"value"),wx.forEach(a),Zh=t(Mo,", will the "),Va=n(Mo,"CODE",{class:!0});var _x=l(Va);Kh=t(_x,"<select>"),_x.forEach(a),Xh=t(Mo," get updated accordingly?"),Mo.forEach(a),sv=c(tl),ye=n(tl,"LI",{});var al=l(ye);ev=t(al,"if the value is overriden by the spreaded attribute, eg "),Wa=n(al,"CODE",{class:!0});var bx=l(Wa);tv=t(bx,"<select mutliple {value} { ...{value: []} }>"),bx.forEach(a),av=t(al,"?"),al.forEach(a),tl.forEach(a),ov=c(v),En=n(v,"P",{});var Ex=l(En);nv=t(Ex,"Ideally, the test cases come up should be failed before the fix, and passed after the fix."),Ex.forEach(a),lv=c(v),In=n(v,"P",{});var Ix=l(In);rv=t(Ix,"So here's the test case I came up:"),Ix.forEach(a),iv=c(v),Na=n(v,"DIV",{class:!0});var bm=l(Na);bm.forEach(a),cv=c(v),X=n(v,"P",{});var Ps=l(X);pv=t(Ps,"I can check and uncheck the checkbox to change the value of "),Ba=n(Ps,"CODE",{class:!0});var Ox=l(Ba);kv=t(Ox,"value"),Ox.forEach(a),hv=t(Ps," to verify the the "),Fa=n(Ps,"CODE",{class:!0});var Cx=l(Fa);vv=t(Cx,"value"),Cx.forEach(a),dv=t(Ps," is reactive, and "),Ga=n(Ps,"CODE",{class:!0});var Dx=l(Ga);yv=t(Dx,"<select>"),Dx.forEach(a),uv=t(Ps," will get updated accordingly."),Ps.forEach(a),fv=c(v),b=n(v,"P",{});var O=l(b);xv=t(O,"Besides that, I exported "),Ua=n(O,"CODE",{class:!0});var Sx=l(Ua);gv=t(Sx,"spread"),Sx.forEach(a),mv=t(O,", so that I can change the object to something object to contain "),za=n(O,"CODE",{class:!0});var Px=l(za);wv=t(Px,"value"),Px.forEach(a),_v=t(O,", eg: "),Ya=n(O,"CODE",{class:!0});var Tx=l(Ya);bv=t(Tx,"{ value: [] }"),Tx.forEach(a),Ev=t(O,", and see how "),Ja=n(O,"CODE",{class:!0});var Ax=l(Ja);Iv=t(Ax,"<select>"),Ax.forEach(a),Ov=t(O," will update accordingly. Make sure that our fix not just work with "),Qa=n(O,"CODE",{class:!0});var jx=l(Qa);Cv=t(jx,"value"),jx.forEach(a),Dv=t(O," attribute, and also when the "),Za=n(O,"CODE",{class:!0});var Hx=l(Za);Sv=t(Hx,"value"),Hx.forEach(a),Pv=t(O," is spreaded into "),Ka=n(O,"CODE",{class:!0});var Lx=l(Ka);Tv=t(Lx,"<select>"),Lx.forEach(a),Av=t(O,"."),O.forEach(a),jv=c(v),On=n(v,"P",{});var $x=l(On);Hv=t($x,"You may think that we are familiar with our fix, we know what it will fix, what it will not fix, do we need think up and write all the edge cases?"),$x.forEach(a),Lv=c(v),Cn=n(v,"P",{});var Rx=l(Cn);$v=t(Rx,"Well, I think you should. Future you will thank the present you when he encounter a fail test, that just mean his change may have an unintentional regression change. If you don't have the test case, the future you will never know what edge case he didn't accounted for."),Rx.forEach(a),Rv=c(v),ss=n(v,"P",{});var Ts=l(ss);qv=t(Ts,"Runtime test cases are added into "),Xa=n(Ts,"CODE",{class:!0});var qx=l(Xa);Mv=t(qx,"test/runtime/samples/"),qx.forEach(a),Vv=t(Ts,". Each folder represent 1 test case. Inside the folder, the component to be tested is named "),so=n(Ts,"CODE",{class:!0});var Mx=l(so);Wv=t(Mx,"App.svelte"),Mx.forEach(a),Nv=t(Ts,", and the test case is written "),eo=n(Ts,"CODE",{class:!0});var Vx=l(eo);Bv=t(Vx,"_config.js"),Vx.forEach(a),Fv=t(Ts,"."),Ts.forEach(a),Gv=c(v),to=n(v,"P",{});var Ry=l(to);ao=n(Ry,"CODE",{class:!0});var Wx=l(ao);Uv=t(Wx,"_config.js"),Wx.forEach(a),zv=t(Ry," default exports a object:"),Ry.forEach(a),Yv=c(v),oo=n(v,"DIV",{class:!0});var Em=l(oo);Em.forEach(a),Jv=c(v),ue=n(v,"P",{});var ol=l(ue);Qv=t(ol,"An example of test case of unchecking the checkbox, and verify "),no=n(ol,"CODE",{class:!0});var Nx=l(no);Zv=t(Nx,"<select>"),Nx.forEach(a),Kv=t(ol," value get updated"),ol.forEach(a),Xv=c(v),lo=n(v,"DIV",{class:!0});var Im=l(lo);Im.forEach(a),sd=c(v),fe=n(v,"P",{});var nl=l(fe);ed=t(nl,"To run only this test, so that we can focus on ensuring the test case pass, we can set "),ro=n(nl,"CODE",{class:!0});var Bx=l(ro);td=t(Bx,"solo: true"),Bx.forEach(a),ad=t(nl,":"),nl.forEach(a),od=c(v),io=n(v,"DIV",{class:!0});var Om=l(io);Om.forEach(a),nd=c(v),A=n(v,"P",{});var es=l(A);Dn=n(es,"STRONG",{});var Fx=l(Dn);ld=t(Fx,"Quick tip:"),Fx.forEach(a),rd=t(es," running "),co=n(es,"CODE",{class:!0});var Gx=l(co);id=t(Gx,"npm run test"),Gx.forEach(a),cd=t(es," will build Svelte code first before executing the test. If you are like me, running "),po=n(es,"CODE",{class:!0});var Ux=l(po);pd=t(Ux,"npm run dev"),Ux.forEach(a),kd=t(es," on the background, Svelte code is build on every code change. So, "),ko=n(es,"CODE",{class:!0});var zx=l(ko);hd=t(zx,"npm run quicktest"),zx.forEach(a),vd=t(es," would allow you to skip the "),ho=n(es,"CODE",{class:!0});var Yx=l(ho);dd=t(Yx,"pretest"),Yx.forEach(a),yd=t(es," build, and run the test suite immediately."),es.forEach(a),ud=c(v),xe=n(v,"P",{});var ll=l(xe);fd=t(ll,"With the test, I realised that I didn't handle the case when the "),vo=n(ll,"CODE",{class:!0});var Jx=l(vo);xd=t(Jx,"value"),Jx.forEach(a),gd=t(ll," is updated."),ll.forEach(a),md=c(v),ge=n(v,"P",{});var rl=l(ge);wd=t(rl,"So I guess what I needed to do is to add the same code in the "),yo=n(rl,"CODE",{class:!0});var Qx=l(yo);_d=t(Qx,"p()"),Qx.forEach(a),bd=t(rl," (update) method too!"),rl.forEach(a),Ed=c(v),uo=n(v,"DIV",{class:!0});var Cm=l(uo);Cm.forEach(a),Id=c(v),me=n(v,"P",{});var il=l(me);Od=t(il,"Well, of course in this way, the "),fo=n(il,"CODE",{class:!0});var Zx=l(fo);Cd=t(Zx,"select_options"),Zx.forEach(a),Dd=t(il," get executed unconditionally whenever any variable is updated."),il.forEach(a),Sd=c(v),T=n(v,"P",{});var N=l(T);Pd=t(N,"I need to make sure that the "),xo=n(N,"CODE",{class:!0});var Kx=l(xo);Td=t(Kx,"select_options(...)"),Kx.forEach(a),Ad=t(N," inside the "),go=n(N,"CODE",{class:!0});var Xx=l(go);jd=t(Xx,"p()"),Xx.forEach(a),Hd=t(N," method get executed only when the value of "),mo=n(N,"CODE",{class:!0});var sg=l(mo);Ld=t(sg,"value"),sg.forEach(a),$d=t(N," changes, and also probably when "),wo=n(N,"CODE",{class:!0});var eg=l(wo);Rd=t(eg,"spread"),eg.forEach(a),qd=t(N," changes too, because it could potentially override the value of "),_o=n(N,"CODE",{class:!0});var tg=l(_o);Md=t(tg,"value"),tg.forEach(a),Vd=t(N,"."),N.forEach(a),Wd=c(v),we=n(v,"P",{});var cl=l(we);Nd=t(cl,"If you've read "),bo=n(cl,"A",{href:!0});var ag=l(bo);Bd=t(ag,"Compile Svelte in your Head - Bitmask in Svelte"),ag.forEach(a),Fd=t(cl,", you know that Svelte uses bitmask to check any variable changes."),cl.forEach(a),Gd=c(v),Sn=n(v,"P",{});var og=l(Sn);Ud=t(og,"How do I know what is the bitmask to use in this case, well I dont have to."),og.forEach(a),zd=c(v),_e=n(v,"P",{});var pl=l(_e);Yd=t(pl,"I can use "),be=n(pl,"A",{href:!0,rel:!0});var ng=l(be);Eo=n(ng,"CODE",{class:!0});var lg=l(Eo);Jd=t(lg,"renderer.dirty(dependencies)"),lg.forEach(a),ng.forEach(a),Qd=t(pl," to help me with that:"),pl.forEach(a),Zd=c(v),Io=n(v,"DIV",{class:!0});var Dm=l(Io);Dm.forEach(a),Kd=c(v),Pn=n(v,"P",{});var rg=l(Pn);Xd=t(rg,"Next, I need to figure out what are the dependencies to be included. In this particular case, the dependencies of all attributes have to be taken consideration, because it is hard to tell which one would be eventually applied due to the spread attribute."),rg.forEach(a),sy=c(v),Oo=n(v,"DIV",{class:!0});var Sm=l(Oo);Sm.forEach(a),ey=c(v),Tn=n(v,"P",{});var ig=l(Tn);ty=t(ig,"After a few tweaks, finally I passed all my test cases, and its time to create a pull request!"),ig.forEach(a),v.forEach(a),Vn=c(d),w=n(d,"SECTION",{});var C=l(w);An=n(C,"H2",{});var cg=l(An);Ee=n(cg,"A",{href:!0,id:!0});var pg=l(Ee);ay=t(pg,"Submitting the fix"),pg.forEach(a),cg.forEach(a),oy=c(C),gs=n(C,"P",{});var Vo=l(gs);ny=t(Vo,"Before pushing the fix to remote, it is important to make sure that all the lints and typescript definitions are correct. You can run "),Co=n(Vo,"CODE",{class:!0});var kg=l(Co);ly=t(kg,"npm run lint --fixed"),kg.forEach(a),ry=t(Vo," for linting, and "),Do=n(Vo,"CODE",{class:!0});var hg=l(Do);iy=t(hg,"npm run tsd"),hg.forEach(a),cy=t(Vo," to generate typescript definition."),Vo.forEach(a),py=c(C),Ie=n(C,"P",{});var kl=l(Ie);ky=t(kl,"If you are unsure on how to create a pull request, you can check out "),Oe=n(kl,"A",{href:!0,rel:!0});var vg=l(Oe);hy=t(vg,"How to make your first pull request on GitHub"),vg.forEach(a),vy=t(kl,"."),kl.forEach(a),dy=c(C),Ce=n(C,"P",{});var hl=l(Ce);yy=t(hl,"I pushed my branch and created a "),De=n(hl,"A",{href:!0,rel:!0});var dg=l(De);uy=t(dg,"Pull Request to Svelte"),dg.forEach(a),fy=t(hl,", and now I am waiting for feedback and for it to get merged."),hl.forEach(a),xy=c(C),jn=n(C,"P",{});var yg=l(jn);gy=t(yg,"Svelte is not maintained by full-time maintainers, everyone has their full-time job, so please be patient and be nice."),yg.forEach(a),my=c(C),wy=n(C,"HR",{}),_y=c(C),Se=n(C,"P",{});var vl=l(Se);by=t(vl,"If you wish to learn more about Svelte, "),Pe=n(vl,"A",{href:!0,rel:!0});var ug=l(Pe);Ey=t(ug,"follow me on Twitter"),ug.forEach(a),Iy=t(vl,"."),vl.forEach(a),Oy=c(C),Te=n(C,"P",{});var dl=l(Te);Cy=t(dl,"If you have anything unclear about this article, find me on "),Ae=n(dl,"A",{href:!0,rel:!0});var fg=l(Ae);Dy=t(fg,"Twitter"),fg.forEach(a),Sy=t(dl," too!"),dl.forEach(a),C.forEach(a),this.h()},h(){r(x,"href","#background"),r(x,"id","background"),r(js,"href","https://svelte.dev/chat"),r(js,"rel","nofollow"),r(Re,"href","/the-svelte-compiler-handbook/"),r(Ls,"href","#the-story-begins"),r(Ls,"id","the-story-begins"),r(Rs,"href","https://github.com/sveltejs/svelte/issues?q=is%3Aopen+is%3Aissue+label%3Abug"),r(Rs,"rel","nofollow"),r(qs,"href","https://github.com/sveltejs/svelte/issues/4392"),r(qs,"rel","nofollow"),r(Me,"class","inline"),r(Ve,"class","code-section"),r(Ws,"href","https://svelte.dev/repl/99bd5ebecc464e328972252e287ab716?version=3.18.1"),r(Ws,"rel","nofollow"),r(Ns,"href","#verifying-the-bug"),r(Ns,"id","verifying-the-bug"),r(We,"class","inline"),r(Ne,"class","inline"),r(Be,"class","inline"),r(Fe,"class","inline"),r(Ge,"class","inline"),r(Ue,"class","inline"),r(ze,"class","inline"),r(Bs,"href","https://github.com/Conduitry"),r(Bs,"rel","nofollow"),r(Fs,"href","https://github.com/sveltejs/svelte/issues/3680"),r(Fs,"rel","nofollow"),r(Gs,"href","https://github.com/sveltejs/svelte/issues/3680"),r(Gs,"rel","nofollow"),r(Us,"href","https://github.com/sveltejs/svelte/pull/4398"),r(Us,"rel","nofollow"),r(zs,"href","https://github.com/sveltejs/svelte/issues/3680"),r(zs,"rel","nofollow"),r(Ys,"href","#investigating-the-bug"),r(Ys,"id","investigating-the-bug"),r(Ye,"class","inline"),r(Js,"href","https://github.com/sveltejs/template"),r(Js,"rel","nofollow"),r(Je,"class","inline"),r(Qe,"class","inline"),r(Ze,"class","inline"),r(Ke,"class","code-section"),r(Xe,"class","inline"),r(st,"class","inline"),r(Zs,"href","https://www.npmjs.com/package/http-server"),r(Zs,"rel","nofollow"),r(et,"class","inline"),r(tt,"class","inline"),r(at,"class","inline"),r(ot,"class","inline"),r(nt,"class","inline"),r(lt,"class","inline"),r(rt,"class","inline"),r(it,"class","inline"),r(ct,"class","code-section"),r(pt,"class","code-section"),r(kt,"href","/compile-svelte-in-your-head-part-1/"),r(ht,"class","code-section"),r(vt,"class","code-section"),r(dt,"class","inline"),r(yt,"class","code-section"),r(ut,"class","inline"),r(ft,"class","inline"),r(xt,"class","inline"),r(gt,"class","code-section"),r(mt,"class","inline"),r(wt,"class","inline"),r(_t,"class","inline"),r(hn,"type","image/webp"),r(hn,"srcset",Vm+", "+Mm+" 2x"),Lm($.src,My=mg)||r($,"src",My),r($,"srcset",mg+", "+Wm+" 2x"),r($,"loading","lazy"),As($,"position","absolute"),As($,"top","0"),As($,"width","100%"),As($,"height","100%"),r($,"alt","Fixed"),As(vs,"display","block"),As(vs,"position","relative"),As(vs,"padding-top","58.266%"),As(vs,"width","100%"),r(Et,"class","inline"),r(It,"class","inline"),r(Ot,"class","inline"),r(Ct,"class","inline"),r(Dt,"class","inline"),r(ae,"href","https://github.com/sveltejs/svelte/blob/e34f2088434423914bbc91b84a450a7f7477252b/src/runtime/internal/dom.ts#L221-L226"),r(ae,"rel","nofollow"),r(St,"class","code-section"),r(Pt,"class","inline"),r(Tt,"class","inline"),r(At,"class","code-section"),r(jt,"class","inline"),r(Ht,"class","inline"),r(Lt,"class","code-section"),r($t,"class","inline"),r(Rt,"class","inline"),r(qt,"class","inline"),r(Mt,"class","code-section"),r(Vt,"class","inline"),r(oe,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_templates"),r(oe,"rel","nofollow"),r(Wt,"class","inline"),r(Nt,"class","inline"),r(ne,"href","https://en.wikipedia.org/wiki/Abstract_syntax_tree"),r(ne,"rel","nofollow"),r(Bt,"class","inline"),r(le,"href","https://www.npmjs.com/package/code-red"),r(le,"rel","nofollow"),r(Ft,"class","inline"),r(Gt,"class","inline"),r(zt,"class","inline"),r(Jt,"class","inline"),r(Zt,"class","inline"),r(Kt,"class","code-section"),r(Xt,"class","inline"),r(sa,"class","inline"),r(re,"href","https://github.com/sveltejs/svelte/blob/e34f2088434423914bbc91b84a450a7f7477252b/src/compiler/compile/Component.ts#L245-L264"),r(re,"rel","nofollow"),r(ea,"class","inline"),r(ta,"class","code-section"),r(aa,"class","code-section"),r(oa,"class","inline"),r(na,"class","inline"),r(la,"class","inline"),r(ra,"class","code-section"),r(ia,"class","inline"),r(ca,"class","inline"),r(pa,"class","inline"),r(ka,"class","inline"),r(ha,"class","code-section"),r(va,"class","code-section"),r(pe,"href","https://github.com/sveltejs/svelte/blob/e34f2088434423914bbc91b84a450a7f7477252b/src/compiler/compile/render_dom/wrappers/Element/index.ts#L642-L659"),r(pe,"rel","nofollow"),r(ya,"class","code-section"),r(ua,"class","inline"),r(fa,"class","inline"),r(xa,"class","inline"),r(ga,"class","inline"),r(ma,"class","inline"),r(wa,"class","inline"),r(_a,"class","inline"),r(ba,"class","code-section"),r(Ea,"href","/the-svelte-compiler-handbook/#dom-renderer"),r(Ia,"class","inline"),r(Ca,"class","inline"),r(Oa,"href","/compile-svelte-in-your-head-part-1/#create_fragment"),r(Da,"class","inline"),r(Sa,"href","/compile-svelte-in-your-head-part-1/#create_fragment"),r(Pa,"class","inline"),r(Ta,"class","inline"),r(Aa,"class","inline"),r(ja,"class","inline"),r(Ha,"class","code-section"),r(La,"class","inline"),r($a,"class","inline"),r(Ra,"class","inline"),r(he,"href","#fixing-the-bug"),r(he,"id","fixing-the-bug"),r(qa,"class","inline"),r(Ma,"class","inline"),r(Va,"class","inline"),r(Wa,"class","inline"),r(Na,"class","code-section"),r(Ba,"class","inline"),r(Fa,"class","inline"),r(Ga,"class","inline"),r(Ua,"class","inline"),r(za,"class","inline"),r(Ya,"class","inline"),r(Ja,"class","inline"),r(Qa,"class","inline"),r(Za,"class","inline"),r(Ka,"class","inline"),r(Xa,"class","inline"),r(so,"class","inline"),r(eo,"class","inline"),r(ao,"class","inline"),r(oo,"class","code-section"),r(no,"class","inline"),r(lo,"class","code-section"),r(ro,"class","inline"),r(io,"class","code-section"),r(co,"class","inline"),r(po,"class","inline"),r(ko,"class","inline"),r(ho,"class","inline"),r(vo,"class","inline"),r(yo,"class","inline"),r(uo,"class","code-section"),r(fo,"class","inline"),r(xo,"class","inline"),r(go,"class","inline"),r(mo,"class","inline"),r(wo,"class","inline"),r(_o,"class","inline"),r(bo,"href","/compile-svelte-in-your-head-part-2/#bitmask-in-svelte"),r(Eo,"class","inline"),r(be,"href","https://github.com/sveltejs/svelte/blob/e34f2088434423914bbc91b84a450a7f7477252b/src/compiler/compile/render_dom/Renderer.ts#L206"),r(be,"rel","nofollow"),r(Io,"class","code-section"),r(Oo,"class","code-section"),r(Ee,"href","#submitting-the-fix"),r(Ee,"id","submitting-the-fix"),r(Co,"class","inline"),r(Do,"class","inline"),r(Oe,"href","https://www.freecodecamp.org/news/how-to-make-your-first-pull-request-on-github-3/"),r(Oe,"rel","nofollow"),r(De,"href","https://github.com/sveltejs/svelte/pull/4894"),r(De,"rel","nofollow"),r(Pe,"href","https://twitter.com/lihautan"),r(Pe,"rel","nofollow"),r(Ae,"href","https://twitter.com/lihautan"),r(Ae,"rel","nofollow")},m(d,y){Eg(f,d,y),B(d,F,y),B(d,u,y),s(u,ls),s(ls,x),s(x,G),s(u,Le),s(u,Wo),s(Wo,yl),s(u,ul),s(u,No),s(No,fl),s(u,xl),s(u,rs),s(rs,$e),s($e,gl),s($e,js),s(js,ml),s(rs,wl),s(rs,Bo),s(Bo,_l),s(rs,bl),s(rs,Fo),s(Fo,El),s(u,Il),s(u,Hs),s(Hs,Ol),s(Hs,Re),s(Re,Cl),s(Hs,Dl),s(u,Sl),s(u,Go),s(Go,Pl),s(u,Tl),s(u,Uo),s(Uo,Al),s(u,jl),s(u,zo),s(zo,Hl),s(u,Ll),s(u,Yo),s(Yo,$l),B(d,$n,y),B(d,m,y),s(m,Jo),s(Jo,Ls),s(Ls,Rl),s(m,ql),s(m,$s),s($s,Ml),s($s,Rs),s(Rs,Vl),s($s,Wl),s(m,Nl),s(m,Bl),s(m,Fl),s(m,Qo),s(Qo,qe),s(qe,Gl),s(qe,qs),s(qs,Ul),s(m,zl),s(m,Ms),s(Ms,Yl),s(Ms,Me),s(Me,Jl),s(Ms,Ql),s(m,Zl),s(m,Ve),Ve.innerHTML=Dg,s(m,Kl),s(m,Vs),s(Vs,Xl),s(Vs,Ws),s(Ws,sr),s(Vs,er),s(m,tr),s(m,ar),B(d,Rn,y),B(d,E,y),s(E,Zo),s(Zo,Ns),s(Ns,or),s(E,nr),s(E,Ko),s(Ko,lr),s(E,rr),s(E,D),s(D,ir),s(D,We),s(We,cr),s(D,pr),s(D,Ne),s(Ne,kr),s(D,hr),s(D,Be),s(Be,vr),s(D,dr),s(D,Fe),s(Fe,yr),s(D,ur),s(D,Ge),s(Ge,fr),s(D,xr),s(E,gr),s(E,U),s(U,mr),s(U,Ue),s(Ue,wr),s(U,_r),s(U,Xo),s(Xo,br),s(U,Er),s(U,ze),s(ze,Ir),s(U,Or),s(E,Cr),s(E,j),s(j,Dr),s(j,Bs),s(Bs,Sr),s(j,Pr),s(j,sn),s(sn,Tr),s(j,Ar),s(j,Fs),s(Fs,jr),s(j,Hr),s(j,Gs),s(Gs,Lr),s(j,$r),s(E,Rr),s(E,is),s(is,qr),s(is,Us),s(Us,Mr),s(is,Vr),s(is,zs),s(zs,Wr),s(is,Nr),B(d,qn,y),B(d,p,y),s(p,en),s(en,Ys),s(Ys,Br),s(p,Fr),s(p,tn),s(tn,Gr),s(p,Ur),s(p,S),s(S,zr),s(S,Ye),s(Ye,Yr),s(S,Jr),s(S,Js),s(Js,Qr),s(S,Zr),s(S,Je),s(Je,Kr),s(S,Xr),s(S,Qe),s(Qe,si),s(S,ei),s(S,Ze),s(Ze,ti),s(S,ai),s(p,oi),s(p,Ke),Ke.innerHTML=Sg,s(p,ni),s(p,Qs),s(Qs,li),s(Qs,Xe),s(Xe,ri),s(Qs,ii),s(p,ci),s(p,H),s(H,pi),s(H,an),s(an,ki),s(H,hi),s(H,st),s(st,vi),s(H,di),s(H,Zs),s(Zs,yi),s(H,ui),s(H,et),s(et,fi),s(H,xi),s(p,gi),s(p,cs),s(cs,ps),s(ps,mi),s(ps,tt),s(tt,wi),s(ps,_i),s(ps,at),s(at,bi),s(ps,Ei),s(cs,Ii),s(cs,on),s(on,Oi),s(cs,Ci),s(cs,ts),s(ts,Di),s(ts,ot),s(ot,Si),s(ts,Pi),s(ts,nt),s(nt,Ti),s(ts,Ai),s(ts,lt),s(lt,ji),s(p,Hi),s(p,ks),s(ks,Li),s(ks,rt),s(rt,$i),s(ks,Ri),s(ks,it),s(it,qi),s(ks,Mi),s(p,Vi),s(p,ct),ct.innerHTML=Pg,s(p,Wi),s(p,nn),s(nn,Ni),s(p,Bi),s(p,pt),pt.innerHTML=Tg,s(p,Fi),s(p,Ks),s(Ks,Gi),s(Ks,kt),s(kt,Ui),s(Ks,zi),s(p,Yi),s(p,ln),s(ln,Ji),s(p,Qi),s(p,ht),ht.innerHTML=Ag,s(p,Zi),s(p,rn),s(rn,Ki),s(p,Xi),s(p,vt),vt.innerHTML=jg,s(p,sc),s(p,Xs),s(Xs,ec),s(Xs,dt),s(dt,tc),s(Xs,ac),s(p,oc),s(p,cn),s(cn,nc),s(p,lc),s(p,yt),yt.innerHTML=Hg,s(p,rc),s(p,hs),s(hs,ic),s(hs,ut),s(ut,cc),s(hs,pc),s(hs,ft),s(ft,kc),s(hs,hc),s(p,vc),s(p,se),s(se,dc),s(se,xt),s(xt,yc),s(se,uc),s(p,fc),s(p,gt),gt.innerHTML=Lg,s(p,xc),s(p,z),s(z,gc),s(z,mt),s(mt,mc),s(z,wc),s(z,wt),s(wt,_c),s(z,bc),s(z,_t),s(_t,Ec),s(z,Ic),s(p,Oc),s(p,pn),s(pn,Cc),s(p,Dc),s(p,kn),s(kn,vs),s(vs,bt),s(bt,hn),s(bt,$),s(p,Sc),s(p,ee),s(ee,Pc),s(ee,Et),s(Et,Tc),s(ee,Ac),s(p,jc),s(p,vn),s(vn,Hc),s(p,Lc),s(p,te),s(te,$c),s(te,dn),s(dn,Rc),s(te,qc),s(p,Mc),s(p,ds),s(ds,yn),s(yn,It),s(It,Vc),s(ds,Wc),s(ds,un),s(un,Ot),s(Ot,Nc),s(ds,Bc),s(ds,fn),s(fn,Ct),s(Ct,Fc),s(p,Gc),s(p,ws),s(ws,Uc),s(ws,Dt),s(Dt,zc),s(ws,Yc),s(ws,ae),s(ae,Jc),s(p,Qc),s(p,St),St.innerHTML=$g,s(p,Zc),s(p,ys),s(ys,Kc),s(ys,Pt),s(Pt,Xc),s(ys,sp),s(ys,Tt),s(Tt,ep),s(ys,tp),s(p,ap),s(p,At),At.innerHTML=Rg,s(p,op),s(p,_s),s(_s,np),s(_s,jt),s(jt,lp),s(_s,rp),s(_s,Ht),s(Ht,ip),s(p,cp),s(p,Lt),Lt.innerHTML=qg,s(p,pp),s(p,xn),s(xn,kp),s(p,hp),s(p,Y),s(Y,vp),s(Y,$t),s($t,dp),s(Y,yp),s(Y,Rt),s(Rt,up),s(Y,fp),s(Y,qt),s(qt,xp),s(Y,gp),s(p,mp),s(p,Mt),Mt.innerHTML=Mg,s(p,wp),s(p,P),s(P,_p),s(P,Vt),s(Vt,bp),s(P,Ep),s(P,oe),s(oe,Ip),s(P,Op),s(P,Wt),s(Wt,Cp),s(P,Dp),s(P,Nt),s(Nt,Sp),s(P,Pp),s(P,ne),s(ne,Tp),s(P,Ap),s(p,jp),s(p,L),s(L,Hp),s(L,Bt),s(Bt,Lp),s(L,$p),s(L,le),s(le,Rp),s(L,qp),s(L,Ft),s(Ft,Mp),s(L,Vp),s(L,Gt),s(Gt,Wp),s(L,Np),s(p,Bp),s(p,us),s(us,Ut),s(Ut,zt),s(zt,Fp),s(Ut,Gp),s(us,Up),s(us,Yt),s(Yt,Jt),s(Jt,zp),s(Yt,Yp),s(us,Jp),s(us,Qt),s(Qt,Zt),s(Zt,Qp),s(Qt,Zp),s(p,Kp),s(p,gn),s(gn,Xp),s(p,sk),s(p,Kt),Kt.innerHTML=Vg,s(p,ek),s(p,R),s(R,Xt),s(Xt,tk),s(R,ak),s(R,sa),s(sa,ok),s(R,nk),s(R,re),s(re,lk),s(R,rk),s(R,ea),s(ea,ik),s(R,ck),s(p,pk),s(p,ta),ta.innerHTML=Wg,s(p,kk),s(p,mn),s(mn,hk),s(p,vk),s(p,aa),aa.innerHTML=Ng,s(p,dk),s(p,J),s(J,yk),s(J,oa),s(oa,uk),s(J,fk),s(J,na),s(na,xk),s(J,gk),s(J,la),s(la,mk),s(J,wk),s(p,_k),s(p,ra),ra.innerHTML=Bg,s(p,bk),s(p,ie),s(ie,Ek),s(ie,ia),s(ia,Ik),s(ie,Ok),s(p,Ck),s(p,ce),s(ce,Dk),s(ce,ca),s(ca,Sk),s(ce,Pk),s(p,Tk),s(p,fs),s(fs,Ak),s(fs,pa),s(pa,jk),s(fs,Hk),s(fs,ka),s(ka,Lk),s(fs,$k),s(p,Rk),s(p,ha),ha.innerHTML=Fg,s(p,qk),s(p,va),va.innerHTML=Gg,s(p,Mk),s(p,da),s(da,Vk),s(da,pe),s(pe,Wk),s(p,Nk),s(p,ya),ya.innerHTML=Ug,s(p,Bk),s(p,Q),s(Q,Fk),s(Q,ua),s(ua,Gk),s(Q,Uk),s(Q,fa),s(fa,zk),s(Q,Yk),s(Q,xa),s(xa,Jk),s(Q,Qk),s(p,Zk),s(p,Z),s(Z,Kk),s(Z,ga),s(ga,Xk),s(Z,sh),s(Z,ma),s(ma,eh),s(Z,th),s(Z,wa),s(wa,ah),s(Z,oh),s(p,nh),s(p,ke),s(ke,lh),s(ke,_a),s(_a,rh),s(ke,ih),s(p,ch),s(p,ba),ba.innerHTML=zg,s(p,ph),s(p,g),s(g,kh),s(g,Ea),s(Ea,hh),s(g,vh),s(g,Ia),s(Ia,dh),s(g,yh),s(g,Oa),s(Oa,Ca),s(Ca,uh),s(g,fh),s(g,Da),s(Da,xh),s(g,gh),s(g,Sa),s(Sa,mh),s(g,wh),s(g,Pa),s(Pa,_h),s(g,bh),s(g,Ta),s(Ta,Eh),s(g,Ih),s(g,Aa),s(Aa,Oh),s(g,Ch),s(g,ja),s(ja,Dh),s(g,Sh),s(p,Ph),s(p,Ha),Ha.innerHTML=Yg,s(p,Th),s(p,K),s(K,Ah),s(K,La),s(La,jh),s(K,Hh),s(K,$a),s($a,Lh),s(K,$h),s(K,Ra),s(Ra,Rh),s(K,qh),B(d,Mn,y),B(d,h,y),s(h,wn),s(wn,he),s(he,Mh),s(h,Vh),s(h,_n),s(_n,Wh),s(h,Nh),s(h,bn),s(bn,Bh),s(h,Fh),s(h,ve),s(ve,Gh),s(ve,qa),s(qa,Uh),s(ve,zh),s(h,Yh),s(h,de),s(de,xs),s(xs,Jh),s(xs,Ma),s(Ma,Qh),s(xs,Zh),s(xs,Va),s(Va,Kh),s(xs,Xh),s(de,sv),s(de,ye),s(ye,ev),s(ye,Wa),s(Wa,tv),s(ye,av),s(h,ov),s(h,En),s(En,nv),s(h,lv),s(h,In),s(In,rv),s(h,iv),s(h,Na),Na.innerHTML=Jg,s(h,cv),s(h,X),s(X,pv),s(X,Ba),s(Ba,kv),s(X,hv),s(X,Fa),s(Fa,vv),s(X,dv),s(X,Ga),s(Ga,yv),s(X,uv),s(h,fv),s(h,b),s(b,xv),s(b,Ua),s(Ua,gv),s(b,mv),s(b,za),s(za,wv),s(b,_v),s(b,Ya),s(Ya,bv),s(b,Ev),s(b,Ja),s(Ja,Iv),s(b,Ov),s(b,Qa),s(Qa,Cv),s(b,Dv),s(b,Za),s(Za,Sv),s(b,Pv),s(b,Ka),s(Ka,Tv),s(b,Av),s(h,jv),s(h,On),s(On,Hv),s(h,Lv),s(h,Cn),s(Cn,$v),s(h,Rv),s(h,ss),s(ss,qv),s(ss,Xa),s(Xa,Mv),s(ss,Vv),s(ss,so),s(so,Wv),s(ss,Nv),s(ss,eo),s(eo,Bv),s(ss,Fv),s(h,Gv),s(h,to),s(to,ao),s(ao,Uv),s(to,zv),s(h,Yv),s(h,oo),oo.innerHTML=Qg,s(h,Jv),s(h,ue),s(ue,Qv),s(ue,no),s(no,Zv),s(ue,Kv),s(h,Xv),s(h,lo),lo.innerHTML=Zg,s(h,sd),s(h,fe),s(fe,ed),s(fe,ro),s(ro,td),s(fe,ad),s(h,od),s(h,io),io.innerHTML=Kg,s(h,nd),s(h,A),s(A,Dn),s(Dn,ld),s(A,rd),s(A,co),s(co,id),s(A,cd),s(A,po),s(po,pd),s(A,kd),s(A,ko),s(ko,hd),s(A,vd),s(A,ho),s(ho,dd),s(A,yd),s(h,ud),s(h,xe),s(xe,fd),s(xe,vo),s(vo,xd),s(xe,gd),s(h,md),s(h,ge),s(ge,wd),s(ge,yo),s(yo,_d),s(ge,bd),s(h,Ed),s(h,uo),uo.innerHTML=Xg,s(h,Id),s(h,me),s(me,Od),s(me,fo),s(fo,Cd),s(me,Dd),s(h,Sd),s(h,T),s(T,Pd),s(T,xo),s(xo,Td),s(T,Ad),s(T,go),s(go,jd),s(T,Hd),s(T,mo),s(mo,Ld),s(T,$d),s(T,wo),s(wo,Rd),s(T,qd),s(T,_o),s(_o,Md),s(T,Vd),s(h,Wd),s(h,we),s(we,Nd),s(we,bo),s(bo,Bd),s(we,Fd),s(h,Gd),s(h,Sn),s(Sn,Ud),s(h,zd),s(h,_e),s(_e,Yd),s(_e,be),s(be,Eo),s(Eo,Jd),s(_e,Qd),s(h,Zd),s(h,Io),Io.innerHTML=sm,s(h,Kd),s(h,Pn),s(Pn,Xd),s(h,sy),s(h,Oo),Oo.innerHTML=em,s(h,ey),s(h,Tn),s(Tn,ty),B(d,Vn,y),B(d,w,y),s(w,An),s(An,Ee),s(Ee,ay),s(w,oy),s(w,gs),s(gs,ny),s(gs,Co),s(Co,ly),s(gs,ry),s(gs,Do),s(Do,iy),s(gs,cy),s(w,py),s(w,Ie),s(Ie,ky),s(Ie,Oe),s(Oe,hy),s(Ie,vy),s(w,dy),s(w,Ce),s(Ce,yy),s(Ce,De),s(De,uy),s(Ce,fy),s(w,xy),s(w,jn),s(jn,gy),s(w,my),s(w,wy),s(w,_y),s(w,Se),s(Se,by),s(Se,Pe),s(Pe,Ey),s(Se,Iy),s(w,Oy),s(w,Te),s(Te,Cy),s(Te,Ae),s(Ae,Dy),s(Te,Sy),Wn=!0},p:$m,i(d){Wn||(Ig(f.$$.fragment,d),Wn=!0)},o(d){Og(f.$$.fragment,d),Wn=!1},d(d){Cg(f,d),d&&a(F),d&&a(u),d&&a($n),d&&a(m),d&&a(Rn),d&&a(E),d&&a(qn),d&&a(p),d&&a(Mn),d&&a(h),d&&a(Vn),d&&a(w)}}}function Fm(He){let f,F;const u=[He[0],wg];let ls={$$slots:{default:[Bm]},$$scope:{ctx:He}};for(let x=0;x<u.length;x+=1)ls=qy(ls,u[x]);return f=new Rm({props:ls}),{c(){_g(f.$$.fragment)},l(x){bg(f.$$.fragment,x)},m(x,G){Eg(f,x,G),F=!0},p(x,[G]){const Le=G&1?jm(u,[G&1&&xg(x[0]),G&0&&xg(wg)]):{};G&2&&(Le.$$scope={dirty:G,ctx:x}),f.$set(Le)},i(x){F||(Ig(f.$$.fragment,x),F=!0)},o(x){Og(f.$$.fragment,x),F=!1},d(x){Cg(f,x)}}}const wg={title:"Contributing to Svelte - Fixing issue #4392",date:"2020-05-23T08:00:00Z",tags:["Svelte","JavaScript","Open Source"],series:"Contributing to Svelte",description:"I am going to tell you an anecdote on how I investigated and fixed a bug in Svelte. I documented down my train of thoughts as detailed as possible. I hope this gives anyone who is reading, a glimpse on how to work on the Svelte source code.",label:"blog"};function Gm(He,f,F){return Hm("blog",{image:Nm}),He.$$set=u=>{F(0,f=qy(qy({},f),gg(u)))},f=gg(f),[f]}class Km extends Pm{constructor(f){super();Tm(this,f,Gm,Fm,Am,{})}}export{Km as default,wg as metadata};
