function e(){}function a(e,a){for(const r in a)e[r]=a[r];return e}function r(e){return e()}function t(){return Object.create(null)}function o(e){e.forEach(r)}function c(e){return"function"==typeof e}function i(e,a){return e!=e?a==a:e!==a||e&&"object"==typeof e||"function"==typeof e}function s(e,r,t,o){return e[1]&&o?a(t.ctx.slice(),e[1](o(r))):t.ctx}function n(e,a,r,t,o,c,i){const n=function(e,a,r,t){if(e[2]&&t){const o=e[2](t(r));if(void 0===a.dirty)return o;if("object"==typeof o){const e=[],r=Math.max(a.dirty.length,o.length);for(let t=0;t<r;t+=1)e[t]=a.dirty[t]|o[t];return e}return a.dirty|o}return a.dirty}(a,t,o,c);if(n){const o=s(a,r,t,i);e.p(o,n)}}function h(e,a){e.appendChild(a)}function f(e,a,r){e.insertBefore(a,r||null)}function l(e){e.parentNode.removeChild(e)}function m(e,a){for(let r=0;r<e.length;r+=1)e[r]&&e[r].d(a)}function d(e){return document.createElement(e)}function g(e){return document.createElementNS("http://www.w3.org/2000/svg",e)}function u(e){return document.createTextNode(e)}function p(){return u(" ")}function E(){return u("")}function v(e,a,r){null==r?e.removeAttribute(a):e.getAttribute(a)!==r&&e.setAttribute(a,r)}function b(e){return Array.from(e.childNodes)}function y(e,a,r,t){for(let t=0;t<e.length;t+=1){const o=e[t];if(o.nodeName===a){let a=0;const c=[];for(;a<o.attributes.length;){const e=o.attributes[a++];r[e.name]||c.push(e.name)}for(let e=0;e<c.length;e++)o.removeAttribute(c[e]);return e.splice(t,1)[0]}}return t?g(a):d(a)}function w(e,a){for(let r=0;r<e.length;r+=1){const t=e[r];if(3===t.nodeType)return t.data=""+a,e.splice(r,1)[0]}return u(a)}function C(e){return w(e," ")}function O(e,a){a=""+a,e.wholeText!==a&&(e.data=a)}function I(e,a){e.value=null==a?"":a}class k{constructor(e=null){this.a=e,this.e=this.n=null}m(e,a,r=null){this.e||(this.e=d(a.nodeName),this.t=a,this.h(e)),this.i(r)}h(e){this.e.innerHTML=e,this.n=Array.from(this.e.childNodes)}i(e){for(let a=0;a<this.n.length;a+=1)f(this.t,this.n[a],e)}p(e){this.d(),this.h(e),this.i(this.a)}d(){this.n.forEach(l)}}let D;function P(e){D=e}function A(e){(function(){if(!D)throw new Error("Function called outside component initialization");return D})().$$.on_mount.push(e)}const T=[],L=[],S=[],$=[],x=Promise.resolve();let N=!1;function G(e){S.push(e)}let M=!1;const R=new Set;function H(){if(!M){M=!0;do{for(let e=0;e<T.length;e+=1){const a=T[e];P(a),U(a.$$)}for(T.length=0;L.length;)L.pop()();for(let e=0;e<S.length;e+=1){const a=S[e];R.has(a)||(R.add(a),a())}S.length=0}while(T.length);for(;$.length;)$.pop()();N=!1,M=!1,R.clear()}}function U(e){if(null!==e.fragment){e.update(),o(e.before_update);const a=e.dirty;e.dirty=[-1],e.fragment&&e.fragment.p(e.ctx,a),e.after_update.forEach(G)}}const j=new Set;function q(e,a){e&&e.i&&(j.delete(e),e.i(a))}function F(e,a,r,t){if(e&&e.o){if(j.has(e))return;j.add(e),(void 0).c.push(()=>{j.delete(e),t&&(r&&e.d(1),t())}),e.o(a)}}function B(e){e&&e.c()}function Y(e,a){e&&e.l(a)}function _(e,a,t){const{fragment:i,on_mount:s,on_destroy:n,after_update:h}=e.$$;i&&i.m(a,t),G(()=>{const a=s.map(r).filter(c);n?n.push(...a):o(a),e.$$.on_mount=[]}),h.forEach(G)}function V(e,a){const r=e.$$;null!==r.fragment&&(o(r.on_destroy),r.fragment&&r.fragment.d(a),r.on_destroy=r.fragment=null,r.ctx=[])}function W(e,a){-1===e.$$.dirty[0]&&(T.push(e),N||(N=!0,x.then(H)),e.$$.dirty.fill(0)),e.$$.dirty[a/31|0]|=1<<a%31}function z(a,r,c,i,s,n,h=[-1]){const f=D;P(a);const m=r.props||{},d=a.$$={fragment:null,ctx:null,props:n,update:e,not_equal:s,bound:t(),on_mount:[],on_destroy:[],before_update:[],after_update:[],context:new Map(f?f.$$.context:[]),callbacks:t(),dirty:h};let g=!1;if(d.ctx=c?c(a,m,(e,r,...t)=>{const o=t.length?t[0]:r;return d.ctx&&s(d.ctx[e],d.ctx[e]=o)&&(d.bound[e]&&d.bound[e](o),g&&W(a,e)),r}):[],d.update(),g=!0,o(d.before_update),d.fragment=!!i&&i(d.ctx),r.target){if(r.hydrate){const e=b(r.target);d.fragment&&d.fragment.l(e),e.forEach(l)}else d.fragment&&d.fragment.c();r.intro&&q(a.$$.fragment),_(a,r.target,r.anchor),H()}P(f)}class K{$destroy(){V(this,1),this.$destroy=e}$on(e,a){const r=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return r.push(a),()=>{const e=r.indexOf(a);-1!==e&&r.splice(e,1)}}$set(){}}function J(a){let r,t,o,c,i,s,n,m,E,O,I,k,D,P,A,T,L,S,$,x,N,G,M,R,H,U,j,q,F,B,Y,_,V,W,z;return{c(){r=d("header"),t=d("nav"),o=d("ul"),c=d("li"),i=d("a"),s=u("Tan Li Hau"),n=p(),m=d("li"),E=d("a"),O=u("About"),I=p(),k=d("li"),D=d("a"),P=u("Writings"),A=p(),T=d("li"),L=d("a"),S=u("Talks"),$=p(),x=d("li"),N=d("a"),G=u("Notes"),M=p(),R=d("li"),H=d("a"),U=u("Newsletter"),j=p(),q=d("li"),F=d("a"),B=g("svg"),Y=g("path"),_=p(),V=d("a"),W=g("svg"),z=g("path"),this.h()},l(e){r=y(e,"HEADER",{class:!0});var a=b(r);t=y(a,"NAV",{});var h=b(t);o=y(h,"UL",{class:!0});var f=b(o);c=y(f,"LI",{class:!0});var d=b(c);i=y(d,"A",{href:!0,class:!0});var g=b(i);s=w(g,"Tan Li Hau"),g.forEach(l),d.forEach(l),n=C(f),m=y(f,"LI",{class:!0});var u=b(m);E=y(u,"A",{href:!0,class:!0});var p=b(E);O=w(p,"About"),p.forEach(l),u.forEach(l),I=C(f),k=y(f,"LI",{class:!0});var v=b(k);D=y(v,"A",{href:!0,class:!0});var K=b(D);P=w(K,"Writings"),K.forEach(l),v.forEach(l),A=C(f),T=y(f,"LI",{class:!0});var J=b(T);L=y(J,"A",{href:!0,class:!0});var Q=b(L);S=w(Q,"Talks"),Q.forEach(l),J.forEach(l),$=C(f),x=y(f,"LI",{class:!0});var X=b(x);N=y(X,"A",{href:!0,class:!0});var Z=b(N);G=w(Z,"Notes"),Z.forEach(l),X.forEach(l),M=C(f),R=y(f,"LI",{class:!0});var ee=b(R);H=y(ee,"A",{href:!0,class:!0});var ae=b(H);U=w(ae,"Newsletter"),ae.forEach(l),ee.forEach(l),j=C(f),q=y(f,"LI",{class:!0});var re=b(q);F=y(re,"A",{"aria-label":!0,href:!0,class:!0});var te=b(F);B=y(te,"svg",{viewBox:!0,width:!0,height:!0,class:!0},1);var oe=b(B);Y=y(oe,"path",{d:!0},1),b(Y).forEach(l),oe.forEach(l),te.forEach(l),_=C(re),V=y(re,"A",{"aria-label":!0,href:!0,class:!0});var ce=b(V);W=y(ce,"svg",{viewBox:!0,width:!0,height:!0,class:!0},1);var ie=b(W);z=y(ie,"path",{d:!0},1),b(z).forEach(l),ie.forEach(l),ce.forEach(l),re.forEach(l),f.forEach(l),h.forEach(l),a.forEach(l),this.h()},h(){v(i,"href","/"),v(i,"class","svelte-f3e4uo"),v(c,"class","svelte-f3e4uo"),v(E,"href","/about"),v(E,"class","svelte-f3e4uo"),v(m,"class","svelte-f3e4uo"),v(D,"href","/blogs"),v(D,"class","svelte-f3e4uo"),v(k,"class","svelte-f3e4uo"),v(L,"href","/talks"),v(L,"class","svelte-f3e4uo"),v(T,"class","svelte-f3e4uo"),v(N,"href","/notes"),v(N,"class","svelte-f3e4uo"),v(x,"class","svelte-f3e4uo"),v(H,"href","/newsletter"),v(H,"class","svelte-f3e4uo"),v(R,"class","svelte-f3e4uo"),v(Y,"d","M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66\n    10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5\n    4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"),v(B,"viewBox","0 0 24 24"),v(B,"width","1em"),v(B,"height","1em"),v(B,"class","svelte-f3e4uo"),v(F,"aria-label","Twitter account"),v(F,"href","https://twitter.com/lihautan"),v(F,"class","svelte-f3e4uo"),v(z,"d","M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0\n    0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07\n    5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65\n    5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42\n    3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"),v(W,"viewBox","0 0 24 24"),v(W,"width","1em"),v(W,"height","1em"),v(W,"class","svelte-f3e4uo"),v(V,"aria-label","Github account"),v(V,"href","https://github.com/tanhauhau"),v(V,"class","svelte-f3e4uo"),v(q,"class","social svelte-f3e4uo"),v(o,"class","svelte-f3e4uo"),v(r,"class","svelte-f3e4uo")},m(e,a){f(e,r,a),h(r,t),h(t,o),h(o,c),h(c,i),h(i,s),h(o,n),h(o,m),h(m,E),h(E,O),h(o,I),h(o,k),h(k,D),h(D,P),h(o,A),h(o,T),h(T,L),h(L,S),h(o,$),h(o,x),h(x,N),h(N,G),h(o,M),h(o,R),h(R,H),h(H,U),h(o,j),h(o,q),h(q,F),h(F,B),h(B,Y),h(q,_),h(q,V),h(V,W),h(W,z)},p:e,i:e,o:e,d(e){e&&l(r)}}}class Q extends K{constructor(e){super(),z(this,e,null,J,i,{})}}function X(a){let r,t,o,c,i,s,n,m,g,E,O,k,D,P,A,T,L,S,$,x;return{c(){r=d("div"),t=d("h1"),o=u("Subscribe to my newsletter"),c=p(),i=d("h2"),s=u("Get the latest blog posts and project updates delivered right to your inbox"),n=p(),m=d("form"),g=d("div"),E=d("input"),O=p(),k=d("input"),P=p(),A=d("input"),T=p(),L=d("p"),S=u("Powered by Buttondown."),this.h()},l(e){r=y(e,"DIV",{class:!0});var a=b(r);t=y(a,"H1",{});var h=b(t);o=w(h,"Subscribe to my newsletter"),h.forEach(l),c=C(a),i=y(a,"H2",{class:!0});var f=b(i);s=w(f,"Get the latest blog posts and project updates delivered right to your inbox"),f.forEach(l),n=C(a),m=y(a,"FORM",{action:!0,method:!0,target:!0,onsubmit:!0,class:!0});var d=b(m);g=y(d,"DIV",{class:!0});var u=b(g);E=y(u,"INPUT",{type:!0,name:!0,id:!0,"aria-label":!0,placeholder:!0,class:!0}),O=C(u),k=y(u,"INPUT",{type:!0,value:!0,disabled:!0,class:!0}),u.forEach(l),P=C(d),A=y(d,"INPUT",{type:!0,value:!0,name:!0,class:!0}),T=C(d),L=y(d,"P",{class:!0});var p=b(L);S=w(p,"Powered by Buttondown."),p.forEach(l),d.forEach(l),a.forEach(l),this.h()},h(){v(i,"class","svelte-1k1s1co"),v(E,"type","email"),v(E,"name","email"),v(E,"id","bd-email"),v(E,"aria-label","email address"),v(E,"placeholder","youremail@example.com"),v(E,"class","svelte-1k1s1co"),v(k,"type","submit"),k.value="Subscribe",k.disabled=D=!a[0],v(k,"class","svelte-1k1s1co"),v(g,"class","form-item svelte-1k1s1co"),v(A,"type","hidden"),A.value="1",v(A,"name","embed"),v(A,"class","svelte-1k1s1co"),v(L,"class","svelte-1k1s1co"),v(m,"action","https://buttondown.email/api/emails/embed-subscribe/lihautan"),v(m,"method","post"),v(m,"target","popupwindow"),v(m,"onsubmit","window.open('https://buttondown.email/lihautan', 'popupwindow')"),v(m,"class","embeddable-buttondown-form"),v(r,"class","form svelte-1k1s1co")},m(e,l){var d,u,p,v;f(e,r,l),h(r,t),h(t,o),h(r,c),h(r,i),h(i,s),h(r,n),h(r,m),h(m,g),h(g,E),I(E,a[0]),h(g,O),h(g,k),h(m,P),h(m,A),h(m,T),h(m,L),h(L,S),$||(d=E,u="input",p=a[1],d.addEventListener(u,p,v),x=()=>d.removeEventListener(u,p,v),$=!0)},p(e,[a]){1&a&&E.value!==e[0]&&I(E,e[0]),1&a&&D!==(D=!e[0])&&(k.disabled=D)},i:e,o:e,d(e){e&&l(r),$=!1,x()}}}function Z(e,a,r){let t;return[t,function(){t=this.value,r(0,t)}]}class ee extends K{constructor(e){super(),z(this,e,Z,X,i,{})}}function ae(e){return A(()=>(setTimeout(()=>{if(window.innerWidth>1080){const e=document.createElement("script");e.async=!0,e.type="text/javascript",e.src="//cdn.carbonads.com/carbon.js?serve=CE7ITK3E&placement=lihautancom",e.id="_carbonads_js",document.body.appendChild(e)}},5e3),()=>{try{const e=document.getElementById("carbonads");e.parentNode.removeChild(e)}catch(e){}})),[]}class re extends K{constructor(e){super(),z(this,e,ae,null,i,{})}}function te(e,a,r){const t=e.slice();return t[6]=a[r],t}function oe(e,a,r){const t=e.slice();return t[6]=a[r],t}function ce(e){let a,r;return{c(){a=d("meta"),this.h()},l(e){a=y(e,"META",{name:!0,content:!0}),this.h()},h(){v(a,"name","keywords"),v(a,"content",r=e[6])},m(e,r){f(e,a,r)},p(e,t){4&t&&r!==(r=e[6])&&v(a,"content",r)},d(e){e&&l(a)}}}function ie(e){let a,r,t=e[6]+"";return{c(){a=d("span"),r=u(t),this.h()},l(e){a=y(e,"SPAN",{class:!0});var o=b(a);r=w(o,t),o.forEach(l),this.h()},h(){v(a,"class","svelte-9tqnza")},m(e,t){f(e,a,t),h(a,r)},p(e,a){4&a&&t!==(t=e[6]+"")&&O(r,t)},d(e){e&&l(a)}}}function se(e){let a,r,t,o,c,i,g,I,D,P,A,T,L,S,$,x,N,G,M,R,H,U,j,W,z,K,J,X,Z,ae,se,ne,he,fe,le,me,de,ge,ue,pe=`<script type="application/ld+json">${JSON.stringify({"@context":"https://schema.org","@type":"Article",author:e[3],copyrightHolder:e[3],copyrightYear:"2020",creator:e[3],publisher:e[3],description:e[1],headline:e[0],name:e[0],inLanguage:"en"})}<\/script>`,Ee=`<script type="application/ld+json">${JSON.stringify({"@context":"https://schema.org","@type":"BreadcrumbList",description:"Breadcrumbs list",name:"Breadcrumbs",itemListElement:[{"@type":"ListItem",item:{"@id":"https://lihautan.com",name:"Homepage"},position:1},{"@type":"ListItem",item:{"@id":"https%3A%2F%2Flihautan.com%2Fgit-gudder",name:e[0]},position:2}]})}<\/script>`;document.title=a=e[0]+" | Tan Li Hau";let ve=e[2],be=[];for(let a=0;a<ve.length;a+=1)be[a]=ce(oe(e,ve,a));j=new Q({});let ye=e[2],we=[];for(let a=0;a<ye.length;a+=1)we[a]=ie(te(e,ye,a));const Ce=e[5].default,Oe=function(e,a,r,t){if(e){const o=s(e,a,r,t);return e[0](o)}}(Ce,e,e[4],null);return he=new ee({}),le=new re({}),{c(){r=d("meta"),t=d("meta"),o=d("meta"),c=d("meta"),i=d("meta"),g=d("meta"),I=d("meta"),D=d("meta"),P=d("meta"),A=d("meta"),T=d("meta");for(let e=0;e<be.length;e+=1)be[e].c();L=d("meta"),S=d("meta"),x=E(),G=E(),M=p(),R=d("a"),H=u("Skip to content"),U=p(),B(j.$$.fragment),W=p(),z=d("main"),K=d("h1"),J=u(e[0]),X=p();for(let e=0;e<we.length;e+=1)we[e].c();Z=p(),ae=d("article"),Oe&&Oe.c(),se=p(),ne=d("footer"),B(he.$$.fragment),fe=p(),B(le.$$.fragment),me=p(),ge=E(),this.h()},l(a){const s=function(e,a=document.body){return Array.from(a.querySelectorAll(e))}('[data-svelte="svelte-n0q11s"]',document.head);r=y(s,"META",{name:!0,content:!0}),t=y(s,"META",{name:!0,content:!0}),o=y(s,"META",{name:!0,content:!0}),c=y(s,"META",{name:!0,content:!0}),i=y(s,"META",{name:!0,content:!0}),g=y(s,"META",{name:!0,content:!0}),I=y(s,"META",{name:!0,content:!0}),D=y(s,"META",{name:!0,content:!0}),P=y(s,"META",{name:!0,content:!0}),A=y(s,"META",{name:!0,content:!0}),T=y(s,"META",{name:!0,content:!0});for(let e=0;e<be.length;e+=1)be[e].l(s);L=y(s,"META",{itemprop:!0,content:!0}),S=y(s,"META",{itemprop:!0,content:!0}),x=E(),G=E(),s.forEach(l),M=C(a),R=y(a,"A",{href:!0,class:!0});var n=b(R);H=w(n,"Skip to content"),n.forEach(l),U=C(a),Y(j.$$.fragment,a),W=C(a),z=y(a,"MAIN",{id:!0,class:!0});var h=b(z);K=y(h,"H1",{});var f=b(K);J=w(f,e[0]),f.forEach(l),X=C(h);for(let e=0;e<we.length;e+=1)we[e].l(h);Z=C(h),ae=y(h,"ARTICLE",{});var m=b(ae);Oe&&Oe.l(m),m.forEach(l),h.forEach(l),se=C(a),ne=y(a,"FOOTER",{class:!0});var d=b(ne);Y(he.$$.fragment,d),fe=C(d),Y(le.$$.fragment,d),d.forEach(l),me=C(a),ge=E(),this.h()},h(){v(r,"name","description"),v(r,"content",e[1]),v(t,"name","image"),v(t,"content",null),v(o,"name","og:image"),v(o,"content",null),v(c,"name","og:title"),v(c,"content",e[0]),v(i,"name","og:description"),v(i,"content",e[1]),v(g,"name","og:type"),v(g,"content","website"),v(I,"name","twitter:card"),v(I,"content","summary_large_image"),v(D,"name","twitter:creator"),v(D,"content","@lihautan"),v(P,"name","twitter:title"),v(P,"content",e[0]),v(A,"name","twitter:description"),v(A,"content",e[1]),v(T,"name","twitter:image"),v(T,"content",null),v(L,"itemprop","url"),v(L,"content","https%3A%2F%2Flihautan.com%2Fgit-gudder"),v(S,"itemprop","image"),v(S,"content",null),$=new k(x),N=new k(G),v(R,"href","#content"),v(R,"class","skip svelte-9tqnza"),v(z,"id","content"),v(z,"class","blog svelte-9tqnza"),v(ne,"class","svelte-9tqnza"),de=new k(ge)},m(e,a){h(document.head,r),h(document.head,t),h(document.head,o),h(document.head,c),h(document.head,i),h(document.head,g),h(document.head,I),h(document.head,D),h(document.head,P),h(document.head,A),h(document.head,T);for(let e=0;e<be.length;e+=1)be[e].m(document.head,null);h(document.head,L),h(document.head,S),$.m(pe,document.head),h(document.head,x),N.m(Ee,document.head),h(document.head,G),f(e,M,a),f(e,R,a),h(R,H),f(e,U,a),_(j,e,a),f(e,W,a),f(e,z,a),h(z,K),h(K,J),h(z,X);for(let e=0;e<we.length;e+=1)we[e].m(z,null);h(z,Z),h(z,ae),Oe&&Oe.m(ae,null),f(e,se,a),f(e,ne,a),_(he,ne,null),h(ne,fe),_(le,ne,null),f(e,me,a),de.m('<script async defer src="https://platform.twitter.com/widgets.js" charset="utf-8"><\/script>',e,a),f(e,ge,a),ue=!0},p(e,[t]){if((!ue||1&t)&&a!==(a=e[0]+" | Tan Li Hau")&&(document.title=a),(!ue||2&t)&&v(r,"content",e[1]),(!ue||1&t)&&v(c,"content",e[0]),(!ue||2&t)&&v(i,"content",e[1]),(!ue||1&t)&&v(P,"content",e[0]),(!ue||2&t)&&v(A,"content",e[1]),4&t){let a;for(ve=e[2],a=0;a<ve.length;a+=1){const r=oe(e,ve,a);be[a]?be[a].p(r,t):(be[a]=ce(r),be[a].c(),be[a].m(L.parentNode,L))}for(;a<be.length;a+=1)be[a].d(1);be.length=ve.length}if((!ue||3&t)&&pe!==(pe=`<script type="application/ld+json">${JSON.stringify({"@context":"https://schema.org","@type":"Article",author:e[3],copyrightHolder:e[3],copyrightYear:"2020",creator:e[3],publisher:e[3],description:e[1],headline:e[0],name:e[0],inLanguage:"en"})}<\/script>`)&&$.p(pe),(!ue||1&t)&&Ee!==(Ee=`<script type="application/ld+json">${JSON.stringify({"@context":"https://schema.org","@type":"BreadcrumbList",description:"Breadcrumbs list",name:"Breadcrumbs",itemListElement:[{"@type":"ListItem",item:{"@id":"https://lihautan.com",name:"Homepage"},position:1},{"@type":"ListItem",item:{"@id":"https%3A%2F%2Flihautan.com%2Fgit-gudder",name:e[0]},position:2}]})}<\/script>`)&&N.p(Ee),(!ue||1&t)&&O(J,e[0]),4&t){let a;for(ye=e[2],a=0;a<ye.length;a+=1){const r=te(e,ye,a);we[a]?we[a].p(r,t):(we[a]=ie(r),we[a].c(),we[a].m(z,Z))}for(;a<we.length;a+=1)we[a].d(1);we.length=ye.length}Oe&&Oe.p&&16&t&&n(Oe,Ce,e,e[4],t,null,null)},i(e){ue||(q(j.$$.fragment,e),q(Oe,e),q(he.$$.fragment,e),q(le.$$.fragment,e),ue=!0)},o(e){F(j.$$.fragment,e),F(Oe,e),F(he.$$.fragment,e),F(le.$$.fragment,e),ue=!1},d(e){l(r),l(t),l(o),l(c),l(i),l(g),l(I),l(D),l(P),l(A),l(T),m(be,e),l(L),l(S),l(x),e&&$.d(),l(G),e&&N.d(),e&&l(M),e&&l(R),e&&l(U),V(j,e),e&&l(W),e&&l(z),m(we,e),Oe&&Oe.d(e),e&&l(se),e&&l(ne),V(he),V(le),e&&l(me),e&&l(ge),e&&de.d()}}}function ne(e,a,r){let{title:t=""}=a,{description:o=""}=a,{tags:c=[]}=a;const i={"@type":"Person",name:"Tan Li Hau"};let{$$slots:s={},$$scope:n}=a;return e.$set=e=>{"title"in e&&r(0,t=e.title),"description"in e&&r(1,o=e.description),"tags"in e&&r(2,c=e.tags),"$$scope"in e&&r(4,n=e.$$scope)},[t,o,c,i,n,s]}class he extends K{constructor(e){super(),z(this,e,ne,se,i,{title:0,description:1,tags:2})}}function fe(a){let r,t,o,c,i,s,n,m,g,E,O,I,k,D,P,A,T,L,S,$,x,N,G,M,R,H,U,j,q,F,B,Y,_,V,W,z,K,J,Q,X,Z,ee,ae,re,te,oe,ce,ie,se,ne,he,fe,le,me,de,ge,ue,pe,Ee,ve,be,ye,we,Ce,Oe,Ie,ke,De,Pe,Ae,Te,Le,Se,$e,xe,Ne,Ge,Me,Re,He,Ue,je,qe,Fe,Be,Ye,_e,Ve,We,ze,Ke,Je,Qe,Xe,Ze,ea,aa,ra,ta,oa,ca,ia,sa,na,ha,fa,la,ma,da,ga,ua,pa,Ea,va,ba,ya,wa,Ca,Oa,Ia,ka,Da,Pa,Aa,Ta,La,Sa,$a,xa,Na,Ga,Ma,Ra,Ha,Ua,ja,qa,Fa,Ba,Ya,_a,Va,Wa,za,Ka,Ja,Qa,Xa,Za,er,ar,rr,tr,or,cr,ir,sr,nr,hr,fr,lr,mr,dr,gr,ur,pr,Er,vr,br,yr,wr,Cr,Or,Ir,kr,Dr,Pr,Ar,Tr,Lr,Sr,$r,xr,Nr,Gr,Mr,Rr,Hr,Ur,jr,qr,Fr,Br,Yr,_r,Vr,Wr,zr,Kr,Jr,Qr,Xr,Zr,et,at,rt,tt,ot,ct,it,st,nt,ht,ft,lt,mt,dt,gt,ut,pt,Et,vt,bt,yt,wt,Ct,Ot,It,kt,Dt,Pt,At,Tt,Lt,St,$t,xt,Nt,Gt,Mt,Rt,Ht,Ut,jt,qt,Ft,Bt,Yt,_t,Vt,Wt,zt,Kt,Jt,Qt,Xt,Zt,eo,ao,ro,to,oo,co,io,so,no,ho,fo,lo,mo,go,uo,po,Eo,vo,bo,yo,wo,Co,Oo,Io,ko,Do,Po,Ao,To,Lo,So,$o,xo,No,Go,Mo,Ro,Ho,Uo,jo,qo,Fo,Bo,Yo,_o,Vo,Wo,zo,Ko,Jo,Qo,Xo,Zo,ec,ac,rc,tc,oc,cc,ic,sc,nc,hc,fc,lc,mc,dc,gc,uc,pc,Ec,vc,bc,yc,wc,Cc,Oc,Ic,kc,Dc,Pc,Ac,Tc,Lc,Sc,$c,xc,Nc,Gc,Mc,Rc,Hc,Uc,jc,qc,Fc,Bc,Yc,_c,Vc,Wc,zc,Kc,Jc,Qc,Xc,Zc,ei,ai,ri,ti,oi,ci,ii,si,ni,hi,fi,li,mi,di,gi,ui,pi,Ei,vi,bi,yi,wi,Ci,Oi,Ii,ki,Di,Pi,Ai,Ti,Li,Si,$i,xi,Ni,Gi,Mi,Ri,Hi,Ui,ji,qi,Fi,Bi,Yi,_i,Vi,Wi,zi,Ki,Ji,Qi,Xi,Zi,es,as,rs,ts,os,cs,is,ss,ns,hs,fs,ls,ms,ds,gs,us,ps,Es,vs,bs,ys,ws,Cs,Os,Is,ks,Ds,Ps,As,Ts,Ls,Ss,$s,xs,Ns,Gs,Ms,Rs,Hs,Us,js,qs,Fs,Bs,Ys,_s,Vs,Ws,zs,Ks,Js,Qs,Xs,Zs,en,an,rn,tn,on,cn,sn,nn,hn,fn,ln,mn,dn,gn,un,pn,En,vn,bn,yn,wn,Cn,On,In,kn,Dn,Pn,An,Tn,Ln,Sn,$n,xn,Nn,Gn,Mn,Rn,Hn,Un,jn,qn,Fn,Bn,Yn,_n,Vn,Wn,zn,Kn,Jn,Qn,Xn,Zn,eh,ah,rh,th,oh,ch,ih,sh,nh,hh,fh,lh,mh,dh,gh,uh,ph,Eh,vh,bh,yh,wh,Ch,Oh,Ih,kh,Dh,Ph,Ah,Th,Lh,Sh,$h,xh,Nh,Gh,Mh,Rh,Hh,Uh,jh,qh,Fh,Bh,Yh,_h,Vh,Wh,zh,Kh,Jh,Qh,Xh,Zh,ef,af,rf,tf,of,cf,sf,nf,hf,ff,lf,mf,df,gf,uf,pf,Ef,vf,bf,yf,wf,Cf,Of,If,kf,Df,Pf,Af,Tf,Lf,Sf,$f,xf,Nf,Gf,Mf,Rf,Hf,Uf,jf,qf,Ff,Bf,Yf,_f,Vf,Wf,zf,Kf,Jf,Qf,Xf,Zf,el,al,rl,tl,ol,cl,il,sl,nl,hl,fl,ll,ml,dl,gl,ul,pl,El,vl,bl,yl,wl,Cl,Ol,Il,kl,Dl,Pl,Al,Tl,Ll,Sl,$l,xl,Nl,Gl,Ml,Rl,Hl,Ul,jl,ql,Fl,Bl,Yl,_l,Vl,Wl,zl,Kl,Jl,Ql,Xl,Zl,em,am,rm,tm,om,cm,im,sm,nm,hm,fm,lm,mm,dm,gm,um,pm,Em,vm,bm,ym,wm,Cm,Om,Im,km,Dm,Pm,Am,Tm,Lm,Sm,$m,xm,Nm,Gm,Mm,Rm,Hm,Um,jm,qm,Fm,Bm,Ym,_m,Vm,Wm,zm,Km,Jm,Qm,Xm,Zm,ed,ad,rd,td,od,cd,id,sd,nd,hd,fd,ld,md,dd,gd,ud,pd,Ed,vd,bd,yd,wd,Cd,Od,Id,kd,Dd,Pd,Ad,Td,Ld,Sd,$d,xd,Nd,Gd,Md,Rd,Hd,Ud,jd,qd,Fd,Bd,Yd,_d,Vd,Wd,zd,Kd,Jd,Qd,Xd,Zd,eg,ag,rg,tg,og,cg,ig,sg,ng,hg,fg,lg,mg,dg,gg,ug,pg,Eg,vg,bg,yg,wg,Cg,Og,Ig,kg,Dg,Pg,Ag,Tg,Lg,Sg,$g,xg,Ng,Gg,Mg,Rg,Hg,Ug,jg,qg,Fg,Bg,Yg,_g,Vg,Wg,zg,Kg,Jg,Qg,Xg,Zg,eu,au,ru,tu,ou,cu,iu,su,nu,hu,fu,lu,mu,du,gu,uu,pu,Eu,vu,bu,yu,wu,Cu,Ou,Iu,ku,Du,Pu,Au,Tu,Lu,Su,$u,xu,Nu,Gu,Mu,Ru,Hu,Uu,ju,qu,Fu,Bu,Yu,_u,Vu,Wu,zu,Ku,Ju,Qu,Xu,Zu,ep,ap,rp,tp,op,cp,ip,sp,np,hp,fp,lp,mp,dp,gp,up,pp,Ep,vp,bp,yp,wp,Cp,Op,Ip,kp,Dp,Pp,Ap,Tp,Lp,Sp,$p,xp,Np,Gp,Mp,Rp,Hp,Up,jp,qp,Fp,Bp,Yp,_p,Vp,Wp,zp,Kp,Jp,Qp,Xp,Zp,eE,aE,rE,tE,oE,cE,iE,sE,nE,hE,fE,lE,mE,dE,gE,uE,pE,EE,vE,bE,yE,wE,CE,OE,IE,kE,DE,PE,AE,TE,LE;return{c(){r=d("section"),t=d("ul"),o=d("li"),c=d("a"),i=u("Disclaimer"),s=d("li"),n=d("a"),m=u("git merge"),g=d("ul"),E=d("li"),O=d("a"),I=u("Fast-forward merge"),k=d("li"),D=d("a"),P=u("Non Fast-forward merge"),A=d("li"),T=d("a"),L=u("git pull"),S=d("li"),$=d("a"),x=u("git reset"),N=d("li"),G=d("a"),M=u("git cherry-pick"),R=d("li"),H=d("a"),U=u("git revert"),j=d("li"),q=d("a"),F=u("git rebase"),B=d("ul"),Y=d("li"),_=d("a"),V=u("git rebase --interactive"),W=d("ul"),z=d("li"),K=d("a"),J=u("pick"),Q=d("li"),X=d("a"),Z=u("drop"),ee=d("li"),ae=d("a"),re=u("squash & fixup"),te=d("li"),oe=d("a"),ce=u("break"),ie=d("li"),se=d("a"),ne=u("edit"),he=d("li"),fe=d("a"),le=u("git pull --rebase"),me=d("li"),de=d("a"),ge=u("git rebase a shared branch"),ue=d("li"),pe=d("a"),Ee=u("git log"),ve=d("ul"),be=d("li"),ye=d("a"),we=u("--since, --after, --until, --before"),Ce=d("li"),Oe=d("a"),Ie=u("--grep"),ke=d("li"),De=d("a"),Pe=u("--invert-grep"),Ae=d("li"),Te=d("a"),Le=u("--all-match"),Se=d("li"),$e=d("a"),xe=u("--min-parents, --max-parents, --merges, --no-merges"),Ne=d("li"),Ge=d("a"),Me=u("--first-parent"),Re=d("li"),He=d("a"),Ue=u("git reflog"),je=d("li"),qe=d("a"),Fe=u("git bisect"),Be=d("li"),Ye=d("a"),_e=u("Summary"),Ve=p(),We=d("p"),ze=u("This week in React Knowledgeable, I did a sharing on Git commands."),Ke=p(),Je=d("p"),Qe=u("The title of the talk was called "),Xe=d("strong"),Ze=u('"Git Gudder"'),ea=u(', because almost a year ago I did a lightning sharing on "Git Gud", '),aa=d("em"),ra=u("(Get Good)"),ta=u(', this follow up sharing used the comparative of "Git Gud", therefore, "Git Gudder".'),oa=p(),ca=d("blockquote"),ia=d("p"),sa=u('Will there be a "Git Guddest"? 🤔'),na=p(),ha=d("section"),fa=d("h2"),la=d("a"),ma=u("Disclaimer"),da=p(),ga=d("p"),ua=u("I am by no means a Git master or anywhere near mastering Git. I do google or "),pa=d("a"),Ea=u("refer to the docs"),va=u(" whenever I am unsure of the commands. In this talk, I listed out all the common history manipulation commands Git provides. I hoped that, with it, we are aware of what is available in our toolbox. So, we can look for it whenever we need it."),ba=p(),ya=d("section"),wa=d("h2"),Ca=d("a"),Oa=u("git merge"),Ia=p(),ka=d("p"),Da=u("There's 2 kind of "),Pa=d("code"),Aa=u("git merge"),Ta=u(", the "),La=d("strong"),Sa=u("fast-forward"),$a=u(" and "),xa=d("strong"),Na=u("non fast-forward"),Ga=u("."),Ma=p(),Ra=d("section"),Ha=d("h3"),Ua=d("a"),ja=u("Fast-forward merge"),qa=p(),Fa=d("p"),Ba=u("Merging "),Ya=d("code"),_a=u("master"),Va=u(" into "),Wa=d("code"),za=u("branch A"),Ka=u(":"),Ja=p(),Qa=d("p"),Xa=d("img"),er=p(),ar=d("div"),rr=u("Fast-forward merge"),tr=p(),or=d("section"),cr=d("h3"),ir=d("a"),sr=u("Non Fast-forward merge"),nr=p(),hr=d("p"),fr=u("Merging "),lr=d("code"),mr=u("master"),dr=u(" into "),gr=d("code"),ur=u("branch A"),pr=u(":"),Er=p(),vr=d("p"),br=d("img"),wr=p(),Cr=d("div"),Or=u("Non fast-forward merge"),Ir=p(),kr=d("p"),Dr=u("Non fast-forward merge will create an extra commit that merges 2 branches."),Pr=p(),Ar=d("section"),Tr=d("h3"),Lr=d("a"),Sr=u("git pull"),$r=p(),xr=d("p"),Nr=u("By default, "),Gr=d("code"),Mr=u("git pull"),Rr=u(" is "),Hr=d("code"),Ur=u("git fetch origin branch"),jr=u(" + "),qr=d("code"),Fr=u("git merge origin/branch"),Br=u("."),Yr=p(),_r=d("p"),Vr=d("img"),zr=p(),Kr=d("div"),Jr=u("git pull"),Qr=p(),Xr=d("section"),Zr=d("h2"),et=d("a"),at=u("git reset"),rt=p(),tt=d("p"),ot=d("code"),ct=u("git reset --hard"),it=u(" allows you to change the reference of where your branch is pointing at."),st=p(),nt=d("p"),ht=d("code"),ft=u("git checkout branch-b"),lt=u(", "),mt=d("code"),dt=u("git reset --hard branch-a"),gt=u(", "),ut=d("code"),pt=u("git reset --hard #d"),Et=u(":"),vt=p(),bt=d("p"),yt=d("img"),Ct=p(),Ot=d("div"),It=u("git reset"),kt=p(),Dt=d("section"),Pt=d("h2"),At=d("a"),Tt=u("git cherry-pick"),Lt=p(),St=d("p"),$t=u("cherry-pick allows you to pick commits from some other branches, tags, or refs."),xt=p(),Nt=d("p"),Gt=d("code"),Mt=u("git checkout branch-b"),Rt=u(", "),Ht=d("code"),Ut=u("git cherry-pick branch-a"),jt=u(":"),qt=p(),Ft=d("p"),Bt=d("img"),_t=p(),Vt=d("div"),Wt=u("git cherry-pick"),zt=p(),Kt=d("section"),Jt=d("h2"),Qt=d("a"),Xt=u("git revert"),Zt=p(),eo=d("p"),ao=d("code"),ro=u("git revert"),to=u(" creates a new commit that reverses the change of the commit that you are reverting."),oo=p(),co=d("p"),io=u("For example, if you accidentally merged "),so=d("code"),no=u("feat/a"),ho=u(" into "),fo=d("code"),lo=u("master"),mo=u(" branch, you can "),go=d("code"),uo=u("git checkout master"),po=u(", "),Eo=d("code"),vo=u("git revert #1"),bo=u(":"),yo=p(),wo=d("p"),Co=d("img"),Io=p(),ko=d("div"),Do=u("git revert"),Po=p(),Ao=d("p"),To=u("If you know merge master into your "),Lo=d("code"),So=u("feat/a"),$o=u(" branch, you would noticed that all the changes in the branch is gone, because the merge is a fast-forward merge, that includes the revert commit made in the branch:"),xo=p(),No=d("p"),Go=d("img"),Ro=p(),Ho=d("div"),Uo=u("Merging `master` into `feat/a`"),jo=p(),qo=d("p"),Fo=u("If you want to recover the changes made in "),Bo=d("code"),Yo=u("feat/a"),_o=u(", you can "),Vo=d("code"),Wo=u("revert"),zo=u(" the "),Ko=d("code"),Jo=u("revert"),Qo=u(":"),Xo=p(),Zo=d("p"),ec=d("code"),ac=u("git revert ~#1"),rc=u(":"),tc=p(),oc=d("p"),cc=d("img"),sc=p(),nc=d("div"),hc=u("git revert the revert"),fc=p(),lc=d("p"),mc=u("Now, when you are ready to merge your "),dc=d("code"),gc=u("feat/a"),uc=u(" branch into "),pc=d("code"),Ec=u("master"),vc=u(", you get the all the changes in "),bc=d("code"),yc=u("feat/a"),wc=u(", a commit that revert all that, and a commit that reverts the revert commit, which meant, you still have all the changes in "),Cc=d("code"),Oc=u("feat/a"),Ic=u(" in "),kc=d("code"),Dc=u("master"),Pc=u(":"),Ac=p(),Tc=d("p"),Lc=d("img"),$c=p(),xc=d("div"),Nc=u("Merging changes back to master"),Gc=p(),Mc=d("section"),Rc=d("h2"),Hc=d("a"),Uc=u("git rebase"),jc=p(),qc=d("p"),Fc=d("code"),Bc=u("git rebase"),Yc=u(' allows you to "move" commits to a different "base".'),_c=p(),Vc=d("p"),Wc=u("For example, you branched out "),zc=d("code"),Kc=u("branch-a"),Jc=u(" from "),Qc=d("code"),Xc=u("master"),Zc=u(" a while ago, and "),ei=d("code"),ai=u("master"),ri=u(" has made a few more commits. But if you merge your branch into master now, it would be a non fast-forward merge, creating an extra commit to the history. If you want a clean, one-line history, you can do a "),ti=d("code"),oi=u("rebase"),ci=u(", replaying commits that you have made in "),ii=d("code"),si=u("branch-a"),ni=u(" on top of the latest "),hi=d("code"),fi=u("master"),li=u("."),mi=p(),di=d("p"),gi=d("code"),ui=u("git checkout branch-a"),pi=u(", "),Ei=d("code"),vi=u("git rebase master"),bi=u(":"),yi=p(),wi=d("p"),Ci=d("img"),Ii=p(),ki=d("div"),Di=u("git rebase"),Pi=p(),Ai=d("p"),Ti=d("code"),Li=u("git rebase"),Si=u(" does not have to be on top of the branch that you branched out, you can rebase to anywhere:"),$i=p(),xi=d("p"),Ni=d("code"),Gi=u("git checkout branch-a"),Mi=u(", "),Ri=d("code"),Hi=u("git rebase --onto branch-b master branch-a"),Ui=u(":"),ji=p(),qi=d("p"),Fi=d("img"),Yi=p(),_i=d("div"),Vi=u("git rebase"),Wi=p(),zi=d("p"),Ki=u("There's 3 reference point you should know when doing a git rebase:"),Ji=p(),Qi=d("ul"),Xi=d("li"),Zi=d("code"),es=u("<new base>"),as=p(),rs=d("li"),ts=d("code"),os=u("<upstream>"),cs=p(),is=d("li"),ss=d("code"),ns=u("<branch>"),hs=p(),fs=d("p"),ls=d("picture"),ms=d("source"),ds=d("source"),gs=d("img"),ps=p(),Es=d("div"),vs=u("git rebase"),bs=p(),ys=d("p"),ws=u("Here are a few things you should know:"),Cs=p(),Os=d("ul"),Is=d("li"),ks=d("code"),Ds=u("git rebase"),Ps=u(" will replay the commits from "),As=d("code"),Ts=u("<upstream>"),Ls=u(" to "),Ss=d("code"),$s=u("<branch>"),xs=u(" onto "),Ns=d("code"),Gs=u("<new base>"),Ms=u("."),Rs=p(),Hs=d("li"),Us=u("If you specify "),js=d("code"),qs=u("<upstream>"),Fs=u(" as a branch name, "),Bs=d("code"),Ys=u("git rebase"),_s=u(" will replay commits from the common ancestor of "),Vs=d("code"),Ws=u("<upstream>"),zs=u(" and "),Ks=d("code"),Js=u("<branch>"),Qs=u(" to "),Xs=d("code"),Zs=u("<branch>"),en=u("."),an=p(),rn=d("li"),tn=u("If you do not specify "),on=d("code"),cn=u("<branch>"),sn=u(", the default is the "),nn=d("code"),hn=u("HEAD"),fn=u(", current commit you are at now."),ln=p(),mn=d("li"),dn=u("If you do not specify "),gn=d("code"),un=u("--onto <new base>"),pn=u(", the new base will be default to "),En=d("code"),vn=u("<upsttream>"),bn=u(", that's why "),yn=d("code"),wn=u("git rebase master"),Cn=u(" is equivalent to "),On=d("code"),In=u("git rebase --onto master master"),kn=u("."),Dn=p(),Pn=d("li"),An=u("If you do not specify "),Tn=d("code"),Ln=u("<upstream>"),Sn=u(", it will be the upstream of the current branch. So "),$n=d("code"),xn=u("git rebase"),Nn=u(" is equivalent to "),Gn=d("code"),Mn=u("git rebase <origin/current-branch>"),Rn=u("."),Hn=p(),Un=d("section"),jn=d("h3"),qn=d("a"),Fn=u("git rebase --interactive"),Bn=p(),Yn=d("p"),_n=d("code"),Vn=u("git rebase"),Wn=u(" has an interactive mode, which allows you to specify instructions while replaying commits during a rebase."),zn=p(),Kn=d("p"),Jn=d("picture"),Qn=d("source"),Xn=d("source"),Zn=d("img"),ah=p(),rh=d("div"),th=u("git rebase interactive"),oh=p(),ch=d("p"),ih=u("When you run "),sh=d("code"),nh=u("git rebase --interactive"),hh=u(", git will prompt you with an editor to edit the instructions. In it, you will see a list of commits that will be replayed:"),fh=p(),lh=d("pre"),mh=p(),dh=d("section"),gh=d("h4"),uh=d("a"),ph=u("pick"),Eh=p(),vh=d("p"),bh=u("The default instruction. Will just use the commit while replaying:"),yh=p(),wh=d("p"),Ch=d("picture"),Oh=d("source"),Ih=d("source"),kh=d("img"),Ph=p(),Ah=d("pre"),Th=p(),Lh=d("section"),Sh=d("h4"),$h=d("a"),xh=u("drop"),Nh=p(),Gh=d("p"),Mh=u("Drop will omit the commit:"),Rh=p(),Hh=d("p"),Uh=d("picture"),jh=d("source"),qh=d("source"),Fh=d("img"),Yh=p(),_h=d("pre"),Vh=p(),Wh=d("section"),zh=d("h4"),Kh=d("a"),Jh=u("squash & fixup"),Qh=p(),Xh=d("p"),Zh=u("Squash & Fixup will combine your commit with the previous commit, the only difference is that with "),ef=d("code"),af=u("squash"),rf=u(", git will prompt you to edit the commit message of the combined commit, while "),tf=d("code"),of=u("fixup"),cf=u(" will drop the commit of the "),sf=d("code"),nf=u("fixup"),hf=u("ed commit."),ff=p(),lf=d("p"),mf=d("picture"),df=d("source"),gf=d("source"),uf=d("img"),Ef=p(),vf=d("pre"),bf=p(),yf=d("section"),wf=d("h4"),Cf=d("a"),Of=u("break"),If=p(),kf=d("p"),Df=u("Pause the rebase. You can do add more commits here if you want. When you are done, make sure that your workspace and stage is clean, run "),Pf=d("code"),Af=u("git rebase --continue"),Tf=u(" to continue."),Lf=p(),Sf=d("p"),$f=d("picture"),xf=d("source"),Nf=d("source"),Gf=d("img"),Rf=p(),Hf=d("pre"),Uf=p(),jf=d("section"),qf=d("h4"),Ff=d("a"),Bf=u("edit"),Yf=p(),_f=d("p"),Vf=u("Pause the rebase at the commit that you are editing, before the commit has been commited. You can add, remove or ammend your files before continue the rebase process."),Wf=p(),zf=d("p"),Kf=d("picture"),Jf=d("source"),Qf=d("source"),Xf=d("img"),el=p(),al=d("pre"),rl=p(),tl=d("section"),ol=d("h3"),cl=d("a"),il=u("git pull --rebase"),sl=p(),nl=d("p"),hl=u("There's a rebase mode for git pull, where it will be "),fl=d("code"),ll=u("git fetch origin branch"),ml=u(" + "),dl=d("code"),gl=u("git rebase origin/branch"),ul=u("."),pl=p(),El=d("p"),vl=d("img"),yl=p(),wl=d("div"),Cl=u("git pull --rebase"),Ol=p(),Il=d("section"),kl=d("h3"),Dl=d("a"),Pl=u("git rebase a shared branch"),Al=p(),Tl=d("p"),Ll=u("Say "),Sl=d("code"),$l=u("x"),xl=u(" and "),Nl=d("code"),Gl=u("y"),Ml=u(" are working on the "),Rl=d("code"),Hl=u("feat/a"),Ul=u(" branch."),jl=p(),ql=d("p"),Fl=d("picture"),Bl=d("source"),Yl=d("source"),_l=d("img"),Wl=p(),zl=d("p"),Kl=d("code"),Jl=u("x"),Ql=u(" decided to rebase the "),Xl=d("code"),Zl=u("feat/a"),em=u(" branch to squash and drop some commits:"),am=p(),rm=d("p"),tm=d("picture"),om=d("source"),cm=d("source"),im=d("img"),nm=p(),hm=d("p"),fm=u("While "),lm=d("code"),mm=u("x"),dm=u(" had done that, that was just a part of the whole picture. Because the "),gm=d("code"),um=u("rebase"),pm=u(" on his local machine changed the git history on his local copy only."),Em=p(),vm=d("p"),bm=d("picture"),ym=d("source"),wm=d("source"),Cm=d("img"),Im=p(),km=d("p"),Dm=u("To make the change on the remote server as well, "),Pm=d("code"),Am=u("x"),Tm=u(" forced push his branch to the remote server. ("),Lm=d("strong"),Sm=u("Note:"),$m=u(" You can push without "),xm=d("code"),Nm=u("--force"),Gm=u(" if the origin branch cannot fast-forward merge your local branch)"),Mm=p(),Rm=d("p"),Hm=u("While "),Um=d("code"),jm=u("y"),qm=u(" on the other hand, did not know about the "),Fm=d("code"),Bm=u("rebase"),Ym=u(", so when "),_m=d("code"),Vm=u("y"),Wm=u(" pulled the code, it ended up with a messed up merged of a messed up git history:"),zm=p(),Km=d("p"),Jm=d("picture"),Qm=d("source"),Xm=d("source"),Zm=d("img"),ad=p(),rd=d("p"),td=u("In most cases, there would be a merge conflict, because "),od=d("code"),cd=u("x"),id=u(" and "),sd=d("code"),nd=u("y"),hd=u("'s branch would have made changes on the same file."),fd=p(),ld=d("p"),md=u("So, the correct way, if the rebase is necessary, is to notify "),dd=d("code"),gd=u("y"),ud=u(" about the rebase, so that "),pd=d("code"),Ed=u("y"),vd=u(" can "),bd=d("code"),yd=u("git reset --hard"),wd=u(" his branch to the remote branch."),Cd=p(),Od=d("p"),Id=d("picture"),kd=d("source"),Dd=d("source"),Pd=d("img"),Td=p(),Ld=d("p"),Sd=u("If unfortunately, at the same time, "),$d=d("code"),xd=u("y"),Nd=u(" has made more commits to his local branch, he would have to "),Gd=d("code"),Md=u("git rebase"),Rd=u(" the new changes onto the remote branch, or "),Hd=d("code"),Ud=u("git cherry-pick"),jd=u(" the new changes after the "),qd=d("code"),Fd=u("git reset --hard"),Bd=u("."),Yd=p(),_d=d("p"),Vd=u("In the companies that I have worked with, forbidden a "),Wd=d("code"),zd=u("rebase"),Kd=u(" on a common branch, especially the "),Jd=d("code"),Qd=u("master"),Xd=u(" branch."),Zd=p(),eg=d("section"),ag=d("h2"),rg=d("a"),tg=u("git log"),og=p(),cg=d("p"),ig=u("The go-to command to look at your git history. There's a few options that is worth mentioning, that allow us to search through the sea of commits:"),sg=p(),ng=d("section"),hg=d("h3"),fg=d("a"),lg=u("--since, --after, --until, --before"),mg=p(),dg=d("p"),gg=u("You can filter out commits within a specific timeframe"),ug=p(),pg=d("section"),Eg=d("h3"),vg=d("a"),bg=u("--grep"),yg=p(),wg=d("p"),Cg=u("You can filter out commits based on commit message"),Og=p(),Ig=d("section"),kg=d("h3"),Dg=d("a"),Pg=u("--invert-grep"),Ag=p(),Tg=d("p");Lg=u("You can filter out commits that does not match the "),Sg=d("code"),$g=u("--grep"),xg=p(),Ng=d("section"),Gg=d("h3"),Mg=d("a"),Rg=u("--all-match"),Hg=p(),Ug=d("p"),jg=d("code"),qg=u("--grep"),Fg=u(" is a "),Bg=d("code"),Yg=u("OR"),_g=u(" filter, "),Vg=d("code"),Wg=u("--all-match"),zg=u(" make it a "),Kg=d("code"),Jg=u("AND"),Qg=u(" filter"),Xg=p(),Zg=d("section"),eu=d("h3"),au=d("a"),ru=u("--min-parents, --max-parents, --merges, --no-merges"),tu=p(),ou=d("p"),cu=u("You can specify commits with the number of parents. A simple merge commit has 2 parent, so "),iu=d("code"),su=u("--merge"),nu=u(" is equivalent to "),hu=d("code"),fu=u("--min-parents=2"),lu=u("."),mu=p(),du=d("section"),gu=d("h3"),uu=d("a"),pu=u("--first-parent"),Eu=p(),vu=d("p"),bu=u("You can follow only the first parent commit upon seeing a merge commit. This is especially useful when you have merged of branches in, "),yu=d("code"),wu=u("--first-parent"),Cu=u(" allow you to filter out only the merge commit and the commit you have made on the current branch."),Ou=p(),Iu=d("section"),ku=d("h2"),Du=d("a"),Pu=u("git reflog"),Au=p(),Tu=d("p"),Lu=u("The reference log shows you all the "),Su=d("code"),$u=u("HEAD"),xu=u(" position you have been to. This is especially useful when you have "),Nu=d("code"),Gu=u("reset --hard"),Mu=u(" or "),Ru=d("code"),Hu=u("rebase"),Uu=u(", you can still find back the commit reference that you were at previously, so you can recover them."),ju=p(),qu=d("section"),Fu=d("h2"),Bu=d("a"),Yu=u("git bisect"),_u=p(),Vu=d("p"),Wu=u("This is a useful command that I am looking forward to use it."),zu=p(),Ku=d("p"),Ju=u("Often times when you noticed something has changed / break / less optimised, yet you do not know when this change was introduced into your repository. "),Qu=d("code"),Xu=u("git bisect"),Zu=u(" allows you to do binary search on the history, so that you can quickly pin down the commit where the change was introduced."),ep=p(),ap=d("pre"),rp=p(),tp=d("p"),op=u("Once you've specified at least one "),cp=d("code"),ip=u("bad"),sp=u(" and one "),np=d("code"),hp=u("good"),fp=u(" commit, "),lp=d("code"),mp=u("git bisect"),dp=u(" will find and checkout to a commit in the middle of that range between "),gp=d("code"),up=u("bad"),pp=u(" and "),Ep=d("code"),vp=u("good"),bp=u(" and greets you with:"),yp=p(),wp=d("pre"),Cp=p(),Op=d("p"),Ip=u("You can know test / verify / profile your code, and specify whether the current commit is a "),kp=d("code"),Dp=u("good"),Pp=u(" commit or a "),Ap=d("code"),Tp=u("bad"),Lp=u(" commit:"),Sp=p(),$p=d("pre"),xp=p(),Np=d("p"),Gp=u("Continue doing it until eventually there's no more commit to inspect. "),Mp=d("code"),Rp=u("git bisect"),Hp=u(" will print out the description of the first bad commit."),Up=p(),jp=d("section"),qp=d("h2"),Fp=d("a"),Bp=u("Summary"),Yp=p(),_p=d("p"),Vp=u("We've gone through the following git commands:"),Wp=p(),zp=d("ul"),Kp=d("li"),Jp=u("git merge"),Qp=p(),Xp=d("li"),Zp=u("git reset"),eE=p(),aE=d("li"),rE=u("git cherry-pick"),tE=p(),oE=d("li"),cE=u("git revert"),iE=p(),sE=d("li"),nE=u("git rebase"),hE=p(),fE=d("li"),lE=u("git log"),mE=p(),dE=d("li"),gE=u("git reflog"),uE=p(),pE=d("li"),EE=u("git bisect"),vE=p(),bE=d("p"),yE=u("Hopefully we are now "),wE=d("code"),CE=u("git gudder"),OE=u(" than before!"),IE=p(),kE=d("hr"),DE=p(),PE=d("p"),AE=u("Related topic: "),TE=d("a"),LE=u("Git commits went missing after a rebase"),this.h()},l(e){r=y(e,"SECTION",{});var a=b(r);t=y(a,"UL",{class:!0,id:!0,role:!0,"aria-label":!0});var h=b(t);o=y(h,"LI",{});var f=b(o);c=y(f,"A",{href:!0});var d=b(c);i=w(d,"Disclaimer"),d.forEach(l),f.forEach(l),s=y(h,"LI",{});var u=b(s);n=y(u,"A",{href:!0});var p=b(n);m=w(p,"git merge"),p.forEach(l),u.forEach(l),g=y(h,"UL",{});var v=b(g);E=y(v,"LI",{});var Za=b(E);O=y(Za,"A",{href:!0});var yr=b(O);I=w(yr,"Fast-forward merge"),yr.forEach(l),Za.forEach(l),k=y(v,"LI",{});var Wr=b(k);D=y(Wr,"A",{href:!0});var wt=b(D);P=w(wt,"Non Fast-forward merge"),wt.forEach(l),Wr.forEach(l),A=y(v,"LI",{});var Yt=b(A);T=y(Yt,"A",{href:!0});var Oo=b(T);L=w(Oo,"git pull"),Oo.forEach(l),Yt.forEach(l),v.forEach(l),S=y(h,"LI",{});var Mo=b(S);$=y(Mo,"A",{href:!0});var ic=b($);x=w(ic,"git reset"),ic.forEach(l),Mo.forEach(l),N=y(h,"LI",{});var Sc=b(N);G=y(Sc,"A",{href:!0});var Oi=b(G);M=w(Oi,"git cherry-pick"),Oi.forEach(l),Sc.forEach(l),R=y(h,"LI",{});var Bi=b(R);H=y(Bi,"A",{href:!0});var us=b(H);U=w(us,"git revert"),us.forEach(l),Bi.forEach(l),j=y(h,"LI",{});var eh=b(j);q=y(eh,"A",{href:!0});var Dh=b(q);F=w(Dh,"git rebase"),Dh.forEach(l),eh.forEach(l),B=y(h,"UL",{});var Bh=b(B);Y=y(Bh,"LI",{});var pf=b(Y);_=y(pf,"A",{href:!0});var Mf=b(_);V=w(Mf,"git rebase --interactive"),Mf.forEach(l),pf.forEach(l),W=y(Bh,"UL",{});var Zf=b(W);z=y(Zf,"LI",{});var bl=b(z);K=y(bl,"A",{href:!0});var Vl=b(K);J=w(Vl,"pick"),Vl.forEach(l),bl.forEach(l),Q=y(Zf,"LI",{});var sm=b(Q);X=y(sm,"A",{href:!0});var Om=b(X);Z=w(Om,"drop"),Om.forEach(l),sm.forEach(l),ee=y(Zf,"LI",{});var ed=b(ee);ae=y(ed,"A",{href:!0});var Ad=b(ae);re=w(Ad,"squash & fixup"),Ad.forEach(l),ed.forEach(l),te=y(Zf,"LI",{});var SE=b(te);oe=y(SE,"A",{href:!0});var $E=b(oe);ce=w($E,"break"),$E.forEach(l),SE.forEach(l),ie=y(Zf,"LI",{});var xE=b(ie);se=y(xE,"A",{href:!0});var NE=b(se);ne=w(NE,"edit"),NE.forEach(l),xE.forEach(l),Zf.forEach(l),he=y(Bh,"LI",{});var GE=b(he);fe=y(GE,"A",{href:!0});var ME=b(fe);le=w(ME,"git pull --rebase"),ME.forEach(l),GE.forEach(l),me=y(Bh,"LI",{});var RE=b(me);de=y(RE,"A",{href:!0});var HE=b(de);ge=w(HE,"git rebase a shared branch"),HE.forEach(l),RE.forEach(l),Bh.forEach(l),ue=y(h,"LI",{});var UE=b(ue);pe=y(UE,"A",{href:!0});var jE=b(pe);Ee=w(jE,"git log"),jE.forEach(l),UE.forEach(l),ve=y(h,"UL",{});var qE=b(ve);be=y(qE,"LI",{});var FE=b(be);ye=y(FE,"A",{href:!0});var BE=b(ye);we=w(BE,"--since, --after, --until, --before"),BE.forEach(l),FE.forEach(l),Ce=y(qE,"LI",{});var YE=b(Ce);Oe=y(YE,"A",{href:!0});var _E=b(Oe);Ie=w(_E,"--grep"),_E.forEach(l),YE.forEach(l),ke=y(qE,"LI",{});var VE=b(ke);De=y(VE,"A",{href:!0});var WE=b(De);Pe=w(WE,"--invert-grep"),WE.forEach(l),VE.forEach(l),Ae=y(qE,"LI",{});var zE=b(Ae);Te=y(zE,"A",{href:!0});var KE=b(Te);Le=w(KE,"--all-match"),KE.forEach(l),zE.forEach(l),Se=y(qE,"LI",{});var JE=b(Se);$e=y(JE,"A",{href:!0});var QE=b($e);xe=w(QE,"--min-parents, --max-parents, --merges, --no-merges"),QE.forEach(l),JE.forEach(l),Ne=y(qE,"LI",{});var XE=b(Ne);Ge=y(XE,"A",{href:!0});var ZE=b(Ge);Me=w(ZE,"--first-parent"),ZE.forEach(l),XE.forEach(l),qE.forEach(l),Re=y(h,"LI",{});var ev=b(Re);He=y(ev,"A",{href:!0});var av=b(He);Ue=w(av,"git reflog"),av.forEach(l),ev.forEach(l),je=y(h,"LI",{});var rv=b(je);qe=y(rv,"A",{href:!0});var tv=b(qe);Fe=w(tv,"git bisect"),tv.forEach(l),rv.forEach(l),Be=y(h,"LI",{});var ov=b(Be);Ye=y(ov,"A",{href:!0});var cv=b(Ye);_e=w(cv,"Summary"),cv.forEach(l),ov.forEach(l),h.forEach(l),a.forEach(l),Ve=C(e),We=y(e,"P",{});var iv=b(We);ze=w(iv,"This week in React Knowledgeable, I did a sharing on Git commands."),iv.forEach(l),Ke=C(e),Je=y(e,"P",{});var sv=b(Je);Qe=w(sv,"The title of the talk was called "),Xe=y(sv,"STRONG",{});var nv=b(Xe);Ze=w(nv,'"Git Gudder"'),nv.forEach(l),ea=w(sv,', because almost a year ago I did a lightning sharing on "Git Gud", '),aa=y(sv,"EM",{});var hv=b(aa);ra=w(hv,"(Get Good)"),hv.forEach(l),ta=w(sv,', this follow up sharing used the comparative of "Git Gud", therefore, "Git Gudder".'),sv.forEach(l),oa=C(e),ca=y(e,"BLOCKQUOTE",{});var fv=b(ca);ia=y(fv,"P",{});var lv=b(ia);sa=w(lv,'Will there be a "Git Guddest"? 🤔'),lv.forEach(l),fv.forEach(l),na=C(e),ha=y(e,"SECTION",{});var mv=b(ha);fa=y(mv,"H2",{});var dv=b(fa);la=y(dv,"A",{href:!0,id:!0});var gv=b(la);ma=w(gv,"Disclaimer"),gv.forEach(l),dv.forEach(l),da=C(mv),ga=y(mv,"P",{});var uv=b(ga);ua=w(uv,"I am by no means a Git master or anywhere near mastering Git. I do google or "),pa=y(uv,"A",{href:!0,rel:!0});var pv=b(pa);Ea=w(pv,"refer to the docs"),pv.forEach(l),va=w(uv," whenever I am unsure of the commands. In this talk, I listed out all the common history manipulation commands Git provides. I hoped that, with it, we are aware of what is available in our toolbox. So, we can look for it whenever we need it."),uv.forEach(l),mv.forEach(l),ba=C(e),ya=y(e,"SECTION",{});var Ev=b(ya);wa=y(Ev,"H2",{});var vv=b(wa);Ca=y(vv,"A",{href:!0,id:!0});var bv=b(Ca);Oa=w(bv,"git merge"),bv.forEach(l),vv.forEach(l),Ia=C(Ev),ka=y(Ev,"P",{});var yv=b(ka);Da=w(yv,"There's 2 kind of "),Pa=y(yv,"CODE",{});var wv=b(Pa);Aa=w(wv,"git merge"),wv.forEach(l),Ta=w(yv,", the "),La=y(yv,"STRONG",{});var Cv=b(La);Sa=w(Cv,"fast-forward"),Cv.forEach(l),$a=w(yv," and "),xa=y(yv,"STRONG",{});var Ov=b(xa);Na=w(Ov,"non fast-forward"),Ov.forEach(l),Ga=w(yv,"."),yv.forEach(l),Ev.forEach(l),Ma=C(e),Ra=y(e,"SECTION",{});var Iv=b(Ra);Ha=y(Iv,"H3",{});var kv=b(Ha);Ua=y(kv,"A",{href:!0,id:!0});var Dv=b(Ua);ja=w(Dv,"Fast-forward merge"),Dv.forEach(l),kv.forEach(l),qa=C(Iv),Fa=y(Iv,"P",{});var Pv=b(Fa);Ba=w(Pv,"Merging "),Ya=y(Pv,"CODE",{});var Av=b(Ya);_a=w(Av,"master"),Av.forEach(l),Va=w(Pv," into "),Wa=y(Pv,"CODE",{});var Tv=b(Wa);za=w(Tv,"branch A"),Tv.forEach(l),Ka=w(Pv,":"),Pv.forEach(l),Ja=C(Iv),Qa=y(Iv,"P",{});var Lv=b(Qa);Xa=y(Lv,"IMG",{src:!0,alt:!0}),Lv.forEach(l),er=C(Iv),ar=y(Iv,"DIV",{class:!0});var Sv=b(ar);rr=w(Sv,"Fast-forward merge"),Sv.forEach(l),Iv.forEach(l),tr=C(e),or=y(e,"SECTION",{});var $v=b(or);cr=y($v,"H3",{});var xv=b(cr);ir=y(xv,"A",{href:!0,id:!0});var Nv=b(ir);sr=w(Nv,"Non Fast-forward merge"),Nv.forEach(l),xv.forEach(l),nr=C($v),hr=y($v,"P",{});var Gv=b(hr);fr=w(Gv,"Merging "),lr=y(Gv,"CODE",{});var Mv=b(lr);mr=w(Mv,"master"),Mv.forEach(l),dr=w(Gv," into "),gr=y(Gv,"CODE",{});var Rv=b(gr);ur=w(Rv,"branch A"),Rv.forEach(l),pr=w(Gv,":"),Gv.forEach(l),Er=C($v),vr=y($v,"P",{});var Hv=b(vr);br=y(Hv,"IMG",{src:!0,alt:!0}),Hv.forEach(l),wr=C($v),Cr=y($v,"DIV",{class:!0});var Uv=b(Cr);Or=w(Uv,"Non fast-forward merge"),Uv.forEach(l),Ir=C($v),kr=y($v,"P",{});var jv=b(kr);Dr=w(jv,"Non fast-forward merge will create an extra commit that merges 2 branches."),jv.forEach(l),$v.forEach(l),Pr=C(e),Ar=y(e,"SECTION",{});var qv=b(Ar);Tr=y(qv,"H3",{});var Fv=b(Tr);Lr=y(Fv,"A",{href:!0,id:!0});var Bv=b(Lr);Sr=w(Bv,"git pull"),Bv.forEach(l),Fv.forEach(l),$r=C(qv),xr=y(qv,"P",{});var Yv=b(xr);Nr=w(Yv,"By default, "),Gr=y(Yv,"CODE",{});var _v=b(Gr);Mr=w(_v,"git pull"),_v.forEach(l),Rr=w(Yv," is "),Hr=y(Yv,"CODE",{});var Vv=b(Hr);Ur=w(Vv,"git fetch origin branch"),Vv.forEach(l),jr=w(Yv," + "),qr=y(Yv,"CODE",{});var Wv=b(qr);Fr=w(Wv,"git merge origin/branch"),Wv.forEach(l),Br=w(Yv,"."),Yv.forEach(l),Yr=C(qv),_r=y(qv,"P",{});var zv=b(_r);Vr=y(zv,"IMG",{src:!0,alt:!0}),zv.forEach(l),zr=C(qv),Kr=y(qv,"DIV",{class:!0});var Kv=b(Kr);Jr=w(Kv,"git pull"),Kv.forEach(l),qv.forEach(l),Qr=C(e),Xr=y(e,"SECTION",{});var Jv=b(Xr);Zr=y(Jv,"H2",{});var Qv=b(Zr);et=y(Qv,"A",{href:!0,id:!0});var Xv=b(et);at=w(Xv,"git reset"),Xv.forEach(l),Qv.forEach(l),rt=C(Jv),tt=y(Jv,"P",{});var Zv=b(tt);ot=y(Zv,"CODE",{});var eb=b(ot);ct=w(eb,"git reset --hard"),eb.forEach(l),it=w(Zv," allows you to change the reference of where your branch is pointing at."),Zv.forEach(l),st=C(Jv),nt=y(Jv,"P",{});var ab=b(nt);ht=y(ab,"CODE",{});var rb=b(ht);ft=w(rb,"git checkout branch-b"),rb.forEach(l),lt=w(ab,", "),mt=y(ab,"CODE",{});var tb=b(mt);dt=w(tb,"git reset --hard branch-a"),tb.forEach(l),gt=w(ab,", "),ut=y(ab,"CODE",{});var ob=b(ut);pt=w(ob,"git reset --hard #d"),ob.forEach(l),Et=w(ab,":"),ab.forEach(l),vt=C(Jv),bt=y(Jv,"P",{});var cb=b(bt);yt=y(cb,"IMG",{src:!0,alt:!0}),cb.forEach(l),Ct=C(Jv),Ot=y(Jv,"DIV",{class:!0});var ib=b(Ot);It=w(ib,"git reset"),ib.forEach(l),Jv.forEach(l),kt=C(e),Dt=y(e,"SECTION",{});var sb=b(Dt);Pt=y(sb,"H2",{});var nb=b(Pt);At=y(nb,"A",{href:!0,id:!0});var hb=b(At);Tt=w(hb,"git cherry-pick"),hb.forEach(l),nb.forEach(l),Lt=C(sb),St=y(sb,"P",{});var fb=b(St);$t=w(fb,"cherry-pick allows you to pick commits from some other branches, tags, or refs."),fb.forEach(l),xt=C(sb),Nt=y(sb,"P",{});var lb=b(Nt);Gt=y(lb,"CODE",{});var mb=b(Gt);Mt=w(mb,"git checkout branch-b"),mb.forEach(l),Rt=w(lb,", "),Ht=y(lb,"CODE",{});var db=b(Ht);Ut=w(db,"git cherry-pick branch-a"),db.forEach(l),jt=w(lb,":"),lb.forEach(l),qt=C(sb),Ft=y(sb,"P",{});var gb=b(Ft);Bt=y(gb,"IMG",{src:!0,alt:!0}),gb.forEach(l),_t=C(sb),Vt=y(sb,"DIV",{class:!0});var ub=b(Vt);Wt=w(ub,"git cherry-pick"),ub.forEach(l),sb.forEach(l),zt=C(e),Kt=y(e,"SECTION",{});var pb=b(Kt);Jt=y(pb,"H2",{});var Eb=b(Jt);Qt=y(Eb,"A",{href:!0,id:!0});var vb=b(Qt);Xt=w(vb,"git revert"),vb.forEach(l),Eb.forEach(l),Zt=C(pb),eo=y(pb,"P",{});var bb=b(eo);ao=y(bb,"CODE",{});var yb=b(ao);ro=w(yb,"git revert"),yb.forEach(l),to=w(bb," creates a new commit that reverses the change of the commit that you are reverting."),bb.forEach(l),oo=C(pb),co=y(pb,"P",{});var wb=b(co);io=w(wb,"For example, if you accidentally merged "),so=y(wb,"CODE",{});var Cb=b(so);no=w(Cb,"feat/a"),Cb.forEach(l),ho=w(wb," into "),fo=y(wb,"CODE",{});var Ob=b(fo);lo=w(Ob,"master"),Ob.forEach(l),mo=w(wb," branch, you can "),go=y(wb,"CODE",{});var Ib=b(go);uo=w(Ib,"git checkout master"),Ib.forEach(l),po=w(wb,", "),Eo=y(wb,"CODE",{});var kb=b(Eo);vo=w(kb,"git revert #1"),kb.forEach(l),bo=w(wb,":"),wb.forEach(l),yo=C(pb),wo=y(pb,"P",{});var Db=b(wo);Co=y(Db,"IMG",{src:!0,alt:!0}),Db.forEach(l),Io=C(pb),ko=y(pb,"DIV",{class:!0});var Pb=b(ko);Do=w(Pb,"git revert"),Pb.forEach(l),Po=C(pb),Ao=y(pb,"P",{});var Ab=b(Ao);To=w(Ab,"If you know merge master into your "),Lo=y(Ab,"CODE",{});var Tb=b(Lo);So=w(Tb,"feat/a"),Tb.forEach(l),$o=w(Ab," branch, you would noticed that all the changes in the branch is gone, because the merge is a fast-forward merge, that includes the revert commit made in the branch:"),Ab.forEach(l),xo=C(pb),No=y(pb,"P",{});var Lb=b(No);Go=y(Lb,"IMG",{src:!0,alt:!0}),Lb.forEach(l),Ro=C(pb),Ho=y(pb,"DIV",{class:!0});var Sb=b(Ho);Uo=w(Sb,"Merging `master` into `feat/a`"),Sb.forEach(l),jo=C(pb),qo=y(pb,"P",{});var $b=b(qo);Fo=w($b,"If you want to recover the changes made in "),Bo=y($b,"CODE",{});var xb=b(Bo);Yo=w(xb,"feat/a"),xb.forEach(l),_o=w($b,", you can "),Vo=y($b,"CODE",{});var Nb=b(Vo);Wo=w(Nb,"revert"),Nb.forEach(l),zo=w($b," the "),Ko=y($b,"CODE",{});var Gb=b(Ko);Jo=w(Gb,"revert"),Gb.forEach(l),Qo=w($b,":"),$b.forEach(l),Xo=C(pb),Zo=y(pb,"P",{});var Mb=b(Zo);ec=y(Mb,"CODE",{});var Rb=b(ec);ac=w(Rb,"git revert ~#1"),Rb.forEach(l),rc=w(Mb,":"),Mb.forEach(l),tc=C(pb),oc=y(pb,"P",{});var Hb=b(oc);cc=y(Hb,"IMG",{src:!0,alt:!0}),Hb.forEach(l),sc=C(pb),nc=y(pb,"DIV",{class:!0});var Ub=b(nc);hc=w(Ub,"git revert the revert"),Ub.forEach(l),fc=C(pb),lc=y(pb,"P",{});var jb=b(lc);mc=w(jb,"Now, when you are ready to merge your "),dc=y(jb,"CODE",{});var qb=b(dc);gc=w(qb,"feat/a"),qb.forEach(l),uc=w(jb," branch into "),pc=y(jb,"CODE",{});var Fb=b(pc);Ec=w(Fb,"master"),Fb.forEach(l),vc=w(jb,", you get the all the changes in "),bc=y(jb,"CODE",{});var Bb=b(bc);yc=w(Bb,"feat/a"),Bb.forEach(l),wc=w(jb,", a commit that revert all that, and a commit that reverts the revert commit, which meant, you still have all the changes in "),Cc=y(jb,"CODE",{});var Yb=b(Cc);Oc=w(Yb,"feat/a"),Yb.forEach(l),Ic=w(jb," in "),kc=y(jb,"CODE",{});var _b=b(kc);Dc=w(_b,"master"),_b.forEach(l),Pc=w(jb,":"),jb.forEach(l),Ac=C(pb),Tc=y(pb,"P",{});var Vb=b(Tc);Lc=y(Vb,"IMG",{src:!0,alt:!0}),Vb.forEach(l),$c=C(pb),xc=y(pb,"DIV",{class:!0});var Wb=b(xc);Nc=w(Wb,"Merging changes back to master"),Wb.forEach(l),pb.forEach(l),Gc=C(e),Mc=y(e,"SECTION",{});var zb=b(Mc);Rc=y(zb,"H2",{});var Kb=b(Rc);Hc=y(Kb,"A",{href:!0,id:!0});var Jb=b(Hc);Uc=w(Jb,"git rebase"),Jb.forEach(l),Kb.forEach(l),jc=C(zb),qc=y(zb,"P",{});var Qb=b(qc);Fc=y(Qb,"CODE",{});var Xb=b(Fc);Bc=w(Xb,"git rebase"),Xb.forEach(l),Yc=w(Qb,' allows you to "move" commits to a different "base".'),Qb.forEach(l),_c=C(zb),Vc=y(zb,"P",{});var Zb=b(Vc);Wc=w(Zb,"For example, you branched out "),zc=y(Zb,"CODE",{});var ey=b(zc);Kc=w(ey,"branch-a"),ey.forEach(l),Jc=w(Zb," from "),Qc=y(Zb,"CODE",{});var ay=b(Qc);Xc=w(ay,"master"),ay.forEach(l),Zc=w(Zb," a while ago, and "),ei=y(Zb,"CODE",{});var ry=b(ei);ai=w(ry,"master"),ry.forEach(l),ri=w(Zb," has made a few more commits. But if you merge your branch into master now, it would be a non fast-forward merge, creating an extra commit to the history. If you want a clean, one-line history, you can do a "),ti=y(Zb,"CODE",{});var ty=b(ti);oi=w(ty,"rebase"),ty.forEach(l),ci=w(Zb,", replaying commits that you have made in "),ii=y(Zb,"CODE",{});var oy=b(ii);si=w(oy,"branch-a"),oy.forEach(l),ni=w(Zb," on top of the latest "),hi=y(Zb,"CODE",{});var cy=b(hi);fi=w(cy,"master"),cy.forEach(l),li=w(Zb,"."),Zb.forEach(l),mi=C(zb),di=y(zb,"P",{});var iy=b(di);gi=y(iy,"CODE",{});var sy=b(gi);ui=w(sy,"git checkout branch-a"),sy.forEach(l),pi=w(iy,", "),Ei=y(iy,"CODE",{});var ny=b(Ei);vi=w(ny,"git rebase master"),ny.forEach(l),bi=w(iy,":"),iy.forEach(l),yi=C(zb),wi=y(zb,"P",{});var hy=b(wi);Ci=y(hy,"IMG",{src:!0,alt:!0}),hy.forEach(l),Ii=C(zb),ki=y(zb,"DIV",{class:!0});var fy=b(ki);Di=w(fy,"git rebase"),fy.forEach(l),Pi=C(zb),Ai=y(zb,"P",{});var ly=b(Ai);Ti=y(ly,"CODE",{});var my=b(Ti);Li=w(my,"git rebase"),my.forEach(l),Si=w(ly," does not have to be on top of the branch that you branched out, you can rebase to anywhere:"),ly.forEach(l),$i=C(zb),xi=y(zb,"P",{});var dy=b(xi);Ni=y(dy,"CODE",{});var gy=b(Ni);Gi=w(gy,"git checkout branch-a"),gy.forEach(l),Mi=w(dy,", "),Ri=y(dy,"CODE",{});var uy=b(Ri);Hi=w(uy,"git rebase --onto branch-b master branch-a"),uy.forEach(l),Ui=w(dy,":"),dy.forEach(l),ji=C(zb),qi=y(zb,"P",{});var py=b(qi);Fi=y(py,"IMG",{src:!0,alt:!0}),py.forEach(l),Yi=C(zb),_i=y(zb,"DIV",{class:!0});var Ey=b(_i);Vi=w(Ey,"git rebase"),Ey.forEach(l),Wi=C(zb),zi=y(zb,"P",{});var vy=b(zi);Ki=w(vy,"There's 3 reference point you should know when doing a git rebase:"),vy.forEach(l),Ji=C(zb),Qi=y(zb,"UL",{});var by=b(Qi);Xi=y(by,"LI",{});var yy=b(Xi);Zi=y(yy,"CODE",{});var wy=b(Zi);es=w(wy,"<new base>"),wy.forEach(l),yy.forEach(l),as=C(by),rs=y(by,"LI",{});var Cy=b(rs);ts=y(Cy,"CODE",{});var Oy=b(ts);os=w(Oy,"<upstream>"),Oy.forEach(l),Cy.forEach(l),cs=C(by),is=y(by,"LI",{});var Iy=b(is);ss=y(Iy,"CODE",{});var ky=b(ss);ns=w(ky,"<branch>"),ky.forEach(l),Iy.forEach(l),by.forEach(l),hs=C(zb),fs=y(zb,"P",{});var Dy=b(fs);ls=y(Dy,"PICTURE",{});var Py=b(ls);ms=y(Py,"SOURCE",{type:!0,srcset:!0}),ds=y(Py,"SOURCE",{type:!0,srcset:!0}),gs=y(Py,"IMG",{alt:!0,src:!0}),Py.forEach(l),Dy.forEach(l),ps=C(zb),Es=y(zb,"DIV",{class:!0});var Ay=b(Es);vs=w(Ay,"git rebase"),Ay.forEach(l),bs=C(zb),ys=y(zb,"P",{});var Ty=b(ys);ws=w(Ty,"Here are a few things you should know:"),Ty.forEach(l),Cs=C(zb),Os=y(zb,"UL",{});var Ly=b(Os);Is=y(Ly,"LI",{});var Sy=b(Is);ks=y(Sy,"CODE",{});var $y=b(ks);Ds=w($y,"git rebase"),$y.forEach(l),Ps=w(Sy," will replay the commits from "),As=y(Sy,"CODE",{});var xy=b(As);Ts=w(xy,"<upstream>"),xy.forEach(l),Ls=w(Sy," to "),Ss=y(Sy,"CODE",{});var Ny=b(Ss);$s=w(Ny,"<branch>"),Ny.forEach(l),xs=w(Sy," onto "),Ns=y(Sy,"CODE",{});var Gy=b(Ns);Gs=w(Gy,"<new base>"),Gy.forEach(l),Ms=w(Sy,"."),Sy.forEach(l),Rs=C(Ly),Hs=y(Ly,"LI",{});var My=b(Hs);Us=w(My,"If you specify "),js=y(My,"CODE",{});var Ry=b(js);qs=w(Ry,"<upstream>"),Ry.forEach(l),Fs=w(My," as a branch name, "),Bs=y(My,"CODE",{});var Hy=b(Bs);Ys=w(Hy,"git rebase"),Hy.forEach(l),_s=w(My," will replay commits from the common ancestor of "),Vs=y(My,"CODE",{});var Uy=b(Vs);Ws=w(Uy,"<upstream>"),Uy.forEach(l),zs=w(My," and "),Ks=y(My,"CODE",{});var jy=b(Ks);Js=w(jy,"<branch>"),jy.forEach(l),Qs=w(My," to "),Xs=y(My,"CODE",{});var qy=b(Xs);Zs=w(qy,"<branch>"),qy.forEach(l),en=w(My,"."),My.forEach(l),an=C(Ly),rn=y(Ly,"LI",{});var Fy=b(rn);tn=w(Fy,"If you do not specify "),on=y(Fy,"CODE",{});var By=b(on);cn=w(By,"<branch>"),By.forEach(l),sn=w(Fy,", the default is the "),nn=y(Fy,"CODE",{});var Yy=b(nn);hn=w(Yy,"HEAD"),Yy.forEach(l),fn=w(Fy,", current commit you are at now."),Fy.forEach(l),ln=C(Ly),mn=y(Ly,"LI",{});var _y=b(mn);dn=w(_y,"If you do not specify "),gn=y(_y,"CODE",{});var Vy=b(gn);un=w(Vy,"--onto <new base>"),Vy.forEach(l),pn=w(_y,", the new base will be default to "),En=y(_y,"CODE",{});var Wy=b(En);vn=w(Wy,"<upsttream>"),Wy.forEach(l),bn=w(_y,", that's why "),yn=y(_y,"CODE",{});var zy=b(yn);wn=w(zy,"git rebase master"),zy.forEach(l),Cn=w(_y," is equivalent to "),On=y(_y,"CODE",{});var Ky=b(On);In=w(Ky,"git rebase --onto master master"),Ky.forEach(l),kn=w(_y,"."),_y.forEach(l),Dn=C(Ly),Pn=y(Ly,"LI",{});var Jy=b(Pn);An=w(Jy,"If you do not specify "),Tn=y(Jy,"CODE",{});var Qy=b(Tn);Ln=w(Qy,"<upstream>"),Qy.forEach(l),Sn=w(Jy,", it will be the upstream of the current branch. So "),$n=y(Jy,"CODE",{});var Xy=b($n);xn=w(Xy,"git rebase"),Xy.forEach(l),Nn=w(Jy," is equivalent to "),Gn=y(Jy,"CODE",{});var Zy=b(Gn);Mn=w(Zy,"git rebase <origin/current-branch>"),Zy.forEach(l),Rn=w(Jy,"."),Jy.forEach(l),Ly.forEach(l),zb.forEach(l),Hn=C(e),Un=y(e,"SECTION",{});var ew=b(Un);jn=y(ew,"H3",{});var aw=b(jn);qn=y(aw,"A",{href:!0,id:!0});var rw=b(qn);Fn=w(rw,"git rebase --interactive"),rw.forEach(l),aw.forEach(l),Bn=C(ew),Yn=y(ew,"P",{});var tw=b(Yn);_n=y(tw,"CODE",{});var ow=b(_n);Vn=w(ow,"git rebase"),ow.forEach(l),Wn=w(tw," has an interactive mode, which allows you to specify instructions while replaying commits during a rebase."),tw.forEach(l),zn=C(ew),Kn=y(ew,"P",{});var cw=b(Kn);Jn=y(cw,"PICTURE",{});var iw=b(Jn);Qn=y(iw,"SOURCE",{type:!0,srcset:!0}),Xn=y(iw,"SOURCE",{type:!0,srcset:!0}),Zn=y(iw,"IMG",{alt:!0,src:!0}),iw.forEach(l),cw.forEach(l),ah=C(ew),rh=y(ew,"DIV",{class:!0});var sw=b(rh);th=w(sw,"git rebase interactive"),sw.forEach(l),oh=C(ew),ch=y(ew,"P",{});var nw=b(ch);ih=w(nw,"When you run "),sh=y(nw,"CODE",{});var hw=b(sh);nh=w(hw,"git rebase --interactive"),hw.forEach(l),hh=w(nw,", git will prompt you with an editor to edit the instructions. In it, you will see a list of commits that will be replayed:"),nw.forEach(l),fh=C(ew),lh=y(ew,"PRE",{class:!0}),b(lh).forEach(l),ew.forEach(l),mh=C(e),dh=y(e,"SECTION",{});var fw=b(dh);gh=y(fw,"H4",{});var lw=b(gh);uh=y(lw,"A",{href:!0,id:!0});var mw=b(uh);ph=w(mw,"pick"),mw.forEach(l),lw.forEach(l),Eh=C(fw),vh=y(fw,"P",{});var dw=b(vh);bh=w(dw,"The default instruction. Will just use the commit while replaying:"),dw.forEach(l),yh=C(fw),wh=y(fw,"P",{});var gw=b(wh);Ch=y(gw,"PICTURE",{});var uw=b(Ch);Oh=y(uw,"SOURCE",{type:!0,srcset:!0}),Ih=y(uw,"SOURCE",{type:!0,srcset:!0}),kh=y(uw,"IMG",{alt:!0,src:!0}),uw.forEach(l),gw.forEach(l),Ph=C(fw),Ah=y(fw,"PRE",{class:!0}),b(Ah).forEach(l),fw.forEach(l),Th=C(e),Lh=y(e,"SECTION",{});var pw=b(Lh);Sh=y(pw,"H4",{});var Ew=b(Sh);$h=y(Ew,"A",{href:!0,id:!0});var vw=b($h);xh=w(vw,"drop"),vw.forEach(l),Ew.forEach(l),Nh=C(pw),Gh=y(pw,"P",{});var bw=b(Gh);Mh=w(bw,"Drop will omit the commit:"),bw.forEach(l),Rh=C(pw),Hh=y(pw,"P",{});var yw=b(Hh);Uh=y(yw,"PICTURE",{});var ww=b(Uh);jh=y(ww,"SOURCE",{type:!0,srcset:!0}),qh=y(ww,"SOURCE",{type:!0,srcset:!0}),Fh=y(ww,"IMG",{alt:!0,src:!0}),ww.forEach(l),yw.forEach(l),Yh=C(pw),_h=y(pw,"PRE",{class:!0}),b(_h).forEach(l),pw.forEach(l),Vh=C(e),Wh=y(e,"SECTION",{});var Cw=b(Wh);zh=y(Cw,"H4",{});var Ow=b(zh);Kh=y(Ow,"A",{href:!0,id:!0});var Iw=b(Kh);Jh=w(Iw,"squash & fixup"),Iw.forEach(l),Ow.forEach(l),Qh=C(Cw),Xh=y(Cw,"P",{});var kw=b(Xh);Zh=w(kw,"Squash & Fixup will combine your commit with the previous commit, the only difference is that with "),ef=y(kw,"CODE",{});var Dw=b(ef);af=w(Dw,"squash"),Dw.forEach(l),rf=w(kw,", git will prompt you to edit the commit message of the combined commit, while "),tf=y(kw,"CODE",{});var Pw=b(tf);of=w(Pw,"fixup"),Pw.forEach(l),cf=w(kw," will drop the commit of the "),sf=y(kw,"CODE",{});var Aw=b(sf);nf=w(Aw,"fixup"),Aw.forEach(l),hf=w(kw,"ed commit."),kw.forEach(l),ff=C(Cw),lf=y(Cw,"P",{});var Tw=b(lf);mf=y(Tw,"PICTURE",{});var Lw=b(mf);df=y(Lw,"SOURCE",{type:!0,srcset:!0}),gf=y(Lw,"SOURCE",{type:!0,srcset:!0}),uf=y(Lw,"IMG",{alt:!0,src:!0}),Lw.forEach(l),Tw.forEach(l),Ef=C(Cw),vf=y(Cw,"PRE",{class:!0}),b(vf).forEach(l),Cw.forEach(l),bf=C(e),yf=y(e,"SECTION",{});var Sw=b(yf);wf=y(Sw,"H4",{});var $w=b(wf);Cf=y($w,"A",{href:!0,id:!0});var xw=b(Cf);Of=w(xw,"break"),xw.forEach(l),$w.forEach(l),If=C(Sw),kf=y(Sw,"P",{});var Nw=b(kf);Df=w(Nw,"Pause the rebase. You can do add more commits here if you want. When you are done, make sure that your workspace and stage is clean, run "),Pf=y(Nw,"CODE",{});var Gw=b(Pf);Af=w(Gw,"git rebase --continue"),Gw.forEach(l),Tf=w(Nw," to continue."),Nw.forEach(l),Lf=C(Sw),Sf=y(Sw,"P",{});var Mw=b(Sf);$f=y(Mw,"PICTURE",{});var Rw=b($f);xf=y(Rw,"SOURCE",{type:!0,srcset:!0}),Nf=y(Rw,"SOURCE",{type:!0,srcset:!0}),Gf=y(Rw,"IMG",{alt:!0,src:!0}),Rw.forEach(l),Mw.forEach(l),Rf=C(Sw),Hf=y(Sw,"PRE",{class:!0}),b(Hf).forEach(l),Sw.forEach(l),Uf=C(e),jf=y(e,"SECTION",{});var Hw=b(jf);qf=y(Hw,"H4",{});var Uw=b(qf);Ff=y(Uw,"A",{href:!0,id:!0});var jw=b(Ff);Bf=w(jw,"edit"),jw.forEach(l),Uw.forEach(l),Yf=C(Hw),_f=y(Hw,"P",{});var qw=b(_f);Vf=w(qw,"Pause the rebase at the commit that you are editing, before the commit has been commited. You can add, remove or ammend your files before continue the rebase process."),qw.forEach(l),Wf=C(Hw),zf=y(Hw,"P",{});var Fw=b(zf);Kf=y(Fw,"PICTURE",{});var Bw=b(Kf);Jf=y(Bw,"SOURCE",{type:!0,srcset:!0}),Qf=y(Bw,"SOURCE",{type:!0,srcset:!0}),Xf=y(Bw,"IMG",{alt:!0,src:!0}),Bw.forEach(l),Fw.forEach(l),el=C(Hw),al=y(Hw,"PRE",{class:!0}),b(al).forEach(l),Hw.forEach(l),rl=C(e),tl=y(e,"SECTION",{});var Yw=b(tl);ol=y(Yw,"H3",{});var _w=b(ol);cl=y(_w,"A",{href:!0,id:!0});var Vw=b(cl);il=w(Vw,"git pull --rebase"),Vw.forEach(l),_w.forEach(l),sl=C(Yw),nl=y(Yw,"P",{});var Ww=b(nl);hl=w(Ww,"There's a rebase mode for git pull, where it will be "),fl=y(Ww,"CODE",{});var zw=b(fl);ll=w(zw,"git fetch origin branch"),zw.forEach(l),ml=w(Ww," + "),dl=y(Ww,"CODE",{});var Kw=b(dl);gl=w(Kw,"git rebase origin/branch"),Kw.forEach(l),ul=w(Ww,"."),Ww.forEach(l),pl=C(Yw),El=y(Yw,"P",{});var Jw=b(El);vl=y(Jw,"IMG",{src:!0,alt:!0}),Jw.forEach(l),yl=C(Yw),wl=y(Yw,"DIV",{class:!0});var Qw=b(wl);Cl=w(Qw,"git pull --rebase"),Qw.forEach(l),Yw.forEach(l),Ol=C(e),Il=y(e,"SECTION",{});var Xw=b(Il);kl=y(Xw,"H3",{});var Zw=b(kl);Dl=y(Zw,"A",{href:!0,id:!0});var eC=b(Dl);Pl=w(eC,"git rebase a shared branch"),eC.forEach(l),Zw.forEach(l),Al=C(Xw),Tl=y(Xw,"P",{});var aC=b(Tl);Ll=w(aC,"Say "),Sl=y(aC,"CODE",{});var rC=b(Sl);$l=w(rC,"x"),rC.forEach(l),xl=w(aC," and "),Nl=y(aC,"CODE",{});var tC=b(Nl);Gl=w(tC,"y"),tC.forEach(l),Ml=w(aC," are working on the "),Rl=y(aC,"CODE",{});var oC=b(Rl);Hl=w(oC,"feat/a"),oC.forEach(l),Ul=w(aC," branch."),aC.forEach(l),jl=C(Xw),ql=y(Xw,"P",{});var cC=b(ql);Fl=y(cC,"PICTURE",{});var iC=b(Fl);Bl=y(iC,"SOURCE",{type:!0,srcset:!0}),Yl=y(iC,"SOURCE",{type:!0,srcset:!0}),_l=y(iC,"IMG",{alt:!0,src:!0}),iC.forEach(l),cC.forEach(l),Wl=C(Xw),zl=y(Xw,"P",{});var sC=b(zl);Kl=y(sC,"CODE",{});var nC=b(Kl);Jl=w(nC,"x"),nC.forEach(l),Ql=w(sC," decided to rebase the "),Xl=y(sC,"CODE",{});var hC=b(Xl);Zl=w(hC,"feat/a"),hC.forEach(l),em=w(sC," branch to squash and drop some commits:"),sC.forEach(l),am=C(Xw),rm=y(Xw,"P",{});var fC=b(rm);tm=y(fC,"PICTURE",{});var lC=b(tm);om=y(lC,"SOURCE",{type:!0,srcset:!0}),cm=y(lC,"SOURCE",{type:!0,srcset:!0}),im=y(lC,"IMG",{alt:!0,src:!0}),lC.forEach(l),fC.forEach(l),nm=C(Xw),hm=y(Xw,"P",{});var mC=b(hm);fm=w(mC,"While "),lm=y(mC,"CODE",{});var dC=b(lm);mm=w(dC,"x"),dC.forEach(l),dm=w(mC," had done that, that was just a part of the whole picture. Because the "),gm=y(mC,"CODE",{});var gC=b(gm);um=w(gC,"rebase"),gC.forEach(l),pm=w(mC," on his local machine changed the git history on his local copy only."),mC.forEach(l),Em=C(Xw),vm=y(Xw,"P",{});var uC=b(vm);bm=y(uC,"PICTURE",{});var pC=b(bm);ym=y(pC,"SOURCE",{type:!0,srcset:!0}),wm=y(pC,"SOURCE",{type:!0,srcset:!0}),Cm=y(pC,"IMG",{alt:!0,src:!0}),pC.forEach(l),uC.forEach(l),Im=C(Xw),km=y(Xw,"P",{});var EC=b(km);Dm=w(EC,"To make the change on the remote server as well, "),Pm=y(EC,"CODE",{});var vC=b(Pm);Am=w(vC,"x"),vC.forEach(l),Tm=w(EC," forced push his branch to the remote server. ("),Lm=y(EC,"STRONG",{});var bC=b(Lm);Sm=w(bC,"Note:"),bC.forEach(l),$m=w(EC," You can push without "),xm=y(EC,"CODE",{});var yC=b(xm);Nm=w(yC,"--force"),yC.forEach(l),Gm=w(EC," if the origin branch cannot fast-forward merge your local branch)"),EC.forEach(l),Mm=C(Xw),Rm=y(Xw,"P",{});var wC=b(Rm);Hm=w(wC,"While "),Um=y(wC,"CODE",{});var CC=b(Um);jm=w(CC,"y"),CC.forEach(l),qm=w(wC," on the other hand, did not know about the "),Fm=y(wC,"CODE",{});var OC=b(Fm);Bm=w(OC,"rebase"),OC.forEach(l),Ym=w(wC,", so when "),_m=y(wC,"CODE",{});var IC=b(_m);Vm=w(IC,"y"),IC.forEach(l),Wm=w(wC," pulled the code, it ended up with a messed up merged of a messed up git history:"),wC.forEach(l),zm=C(Xw),Km=y(Xw,"P",{});var kC=b(Km);Jm=y(kC,"PICTURE",{});var DC=b(Jm);Qm=y(DC,"SOURCE",{type:!0,srcset:!0}),Xm=y(DC,"SOURCE",{type:!0,srcset:!0}),Zm=y(DC,"IMG",{alt:!0,src:!0}),DC.forEach(l),kC.forEach(l),ad=C(Xw),rd=y(Xw,"P",{});var PC=b(rd);td=w(PC,"In most cases, there would be a merge conflict, because "),od=y(PC,"CODE",{});var AC=b(od);cd=w(AC,"x"),AC.forEach(l),id=w(PC," and "),sd=y(PC,"CODE",{});var TC=b(sd);nd=w(TC,"y"),TC.forEach(l),hd=w(PC,"'s branch would have made changes on the same file."),PC.forEach(l),fd=C(Xw),ld=y(Xw,"P",{});var LC=b(ld);md=w(LC,"So, the correct way, if the rebase is necessary, is to notify "),dd=y(LC,"CODE",{});var SC=b(dd);gd=w(SC,"y"),SC.forEach(l),ud=w(LC," about the rebase, so that "),pd=y(LC,"CODE",{});var $C=b(pd);Ed=w($C,"y"),$C.forEach(l),vd=w(LC," can "),bd=y(LC,"CODE",{});var xC=b(bd);yd=w(xC,"git reset --hard"),xC.forEach(l),wd=w(LC," his branch to the remote branch."),LC.forEach(l),Cd=C(Xw),Od=y(Xw,"P",{});var NC=b(Od);Id=y(NC,"PICTURE",{});var GC=b(Id);kd=y(GC,"SOURCE",{type:!0,srcset:!0}),Dd=y(GC,"SOURCE",{type:!0,srcset:!0}),Pd=y(GC,"IMG",{alt:!0,src:!0}),GC.forEach(l),NC.forEach(l),Td=C(Xw),Ld=y(Xw,"P",{});var MC=b(Ld);Sd=w(MC,"If unfortunately, at the same time, "),$d=y(MC,"CODE",{});var RC=b($d);xd=w(RC,"y"),RC.forEach(l),Nd=w(MC," has made more commits to his local branch, he would have to "),Gd=y(MC,"CODE",{});var HC=b(Gd);Md=w(HC,"git rebase"),HC.forEach(l),Rd=w(MC," the new changes onto the remote branch, or "),Hd=y(MC,"CODE",{});var UC=b(Hd);Ud=w(UC,"git cherry-pick"),UC.forEach(l),jd=w(MC," the new changes after the "),qd=y(MC,"CODE",{});var jC=b(qd);Fd=w(jC,"git reset --hard"),jC.forEach(l),Bd=w(MC,"."),MC.forEach(l),Yd=C(Xw),_d=y(Xw,"P",{});var qC=b(_d);Vd=w(qC,"In the companies that I have worked with, forbidden a "),Wd=y(qC,"CODE",{});var FC=b(Wd);zd=w(FC,"rebase"),FC.forEach(l),Kd=w(qC," on a common branch, especially the "),Jd=y(qC,"CODE",{});var BC=b(Jd);Qd=w(BC,"master"),BC.forEach(l),Xd=w(qC," branch."),qC.forEach(l),Xw.forEach(l),Zd=C(e),eg=y(e,"SECTION",{});var YC=b(eg);ag=y(YC,"H2",{});var _C=b(ag);rg=y(_C,"A",{href:!0,id:!0});var VC=b(rg);tg=w(VC,"git log"),VC.forEach(l),_C.forEach(l),og=C(YC),cg=y(YC,"P",{});var WC=b(cg);ig=w(WC,"The go-to command to look at your git history. There's a few options that is worth mentioning, that allow us to search through the sea of commits:"),WC.forEach(l),YC.forEach(l),sg=C(e),ng=y(e,"SECTION",{});var zC=b(ng);hg=y(zC,"H3",{});var KC=b(hg);fg=y(KC,"A",{href:!0,id:!0});var JC=b(fg);lg=w(JC,"--since, --after, --until, --before"),JC.forEach(l),KC.forEach(l),mg=C(zC),dg=y(zC,"P",{});var QC=b(dg);gg=w(QC,"You can filter out commits within a specific timeframe"),QC.forEach(l),zC.forEach(l),ug=C(e),pg=y(e,"SECTION",{});var XC=b(pg);Eg=y(XC,"H3",{});var ZC=b(Eg);vg=y(ZC,"A",{href:!0,id:!0});var eO=b(vg);bg=w(eO,"--grep"),eO.forEach(l),ZC.forEach(l),yg=C(XC),wg=y(XC,"P",{});var aO=b(wg);Cg=w(aO,"You can filter out commits based on commit message"),aO.forEach(l),XC.forEach(l),Og=C(e),Ig=y(e,"SECTION",{});var rO=b(Ig);kg=y(rO,"H3",{});var tO=b(kg);Dg=y(tO,"A",{href:!0,id:!0});var oO=b(Dg);Pg=w(oO,"--invert-grep"),oO.forEach(l),tO.forEach(l),Ag=C(rO),Tg=y(rO,"P",{});var cO=b(Tg);Lg=w(cO,"You can filter out commits that does not match the "),Sg=y(cO,"CODE",{});var iO=b(Sg);$g=w(iO,"--grep"),iO.forEach(l),cO.forEach(l),rO.forEach(l),xg=C(e),Ng=y(e,"SECTION",{});var sO=b(Ng);Gg=y(sO,"H3",{});var nO=b(Gg);Mg=y(nO,"A",{href:!0,id:!0});var hO=b(Mg);Rg=w(hO,"--all-match"),hO.forEach(l),nO.forEach(l),Hg=C(sO),Ug=y(sO,"P",{});var fO=b(Ug);jg=y(fO,"CODE",{});var lO=b(jg);qg=w(lO,"--grep"),lO.forEach(l),Fg=w(fO," is a "),Bg=y(fO,"CODE",{});var mO=b(Bg);Yg=w(mO,"OR"),mO.forEach(l),_g=w(fO," filter, "),Vg=y(fO,"CODE",{});var dO=b(Vg);Wg=w(dO,"--all-match"),dO.forEach(l),zg=w(fO," make it a "),Kg=y(fO,"CODE",{});var gO=b(Kg);Jg=w(gO,"AND"),gO.forEach(l),Qg=w(fO," filter"),fO.forEach(l),sO.forEach(l),Xg=C(e),Zg=y(e,"SECTION",{});var uO=b(Zg);eu=y(uO,"H3",{});var pO=b(eu);au=y(pO,"A",{href:!0,id:!0});var EO=b(au);ru=w(EO,"--min-parents, --max-parents, --merges, --no-merges"),EO.forEach(l),pO.forEach(l),tu=C(uO),ou=y(uO,"P",{});var vO=b(ou);cu=w(vO,"You can specify commits with the number of parents. A simple merge commit has 2 parent, so "),iu=y(vO,"CODE",{});var bO=b(iu);su=w(bO,"--merge"),bO.forEach(l),nu=w(vO," is equivalent to "),hu=y(vO,"CODE",{});var yO=b(hu);fu=w(yO,"--min-parents=2"),yO.forEach(l),lu=w(vO,"."),vO.forEach(l),uO.forEach(l),mu=C(e),du=y(e,"SECTION",{});var wO=b(du);gu=y(wO,"H3",{});var CO=b(gu);uu=y(CO,"A",{href:!0,id:!0});var OO=b(uu);pu=w(OO,"--first-parent"),OO.forEach(l),CO.forEach(l),Eu=C(wO),vu=y(wO,"P",{});var IO=b(vu);bu=w(IO,"You can follow only the first parent commit upon seeing a merge commit. This is especially useful when you have merged of branches in, "),yu=y(IO,"CODE",{});var kO=b(yu);wu=w(kO,"--first-parent"),kO.forEach(l),Cu=w(IO," allow you to filter out only the merge commit and the commit you have made on the current branch."),IO.forEach(l),wO.forEach(l),Ou=C(e),Iu=y(e,"SECTION",{});var DO=b(Iu);ku=y(DO,"H2",{});var PO=b(ku);Du=y(PO,"A",{href:!0,id:!0});var AO=b(Du);Pu=w(AO,"git reflog"),AO.forEach(l),PO.forEach(l),Au=C(DO),Tu=y(DO,"P",{});var TO=b(Tu);Lu=w(TO,"The reference log shows you all the "),Su=y(TO,"CODE",{});var LO=b(Su);$u=w(LO,"HEAD"),LO.forEach(l),xu=w(TO," position you have been to. This is especially useful when you have "),Nu=y(TO,"CODE",{});var SO=b(Nu);Gu=w(SO,"reset --hard"),SO.forEach(l),Mu=w(TO," or "),Ru=y(TO,"CODE",{});var $O=b(Ru);Hu=w($O,"rebase"),$O.forEach(l),Uu=w(TO,", you can still find back the commit reference that you were at previously, so you can recover them."),TO.forEach(l),DO.forEach(l),ju=C(e),qu=y(e,"SECTION",{});var xO=b(qu);Fu=y(xO,"H2",{});var NO=b(Fu);Bu=y(NO,"A",{href:!0,id:!0});var GO=b(Bu);Yu=w(GO,"git bisect"),GO.forEach(l),NO.forEach(l),_u=C(xO),Vu=y(xO,"P",{});var MO=b(Vu);Wu=w(MO,"This is a useful command that I am looking forward to use it."),MO.forEach(l),zu=C(xO),Ku=y(xO,"P",{});var RO=b(Ku);Ju=w(RO,"Often times when you noticed something has changed / break / less optimised, yet you do not know when this change was introduced into your repository. "),Qu=y(RO,"CODE",{});var HO=b(Qu);Xu=w(HO,"git bisect"),HO.forEach(l),Zu=w(RO," allows you to do binary search on the history, so that you can quickly pin down the commit where the change was introduced."),RO.forEach(l),ep=C(xO),ap=y(xO,"PRE",{class:!0}),b(ap).forEach(l),rp=C(xO),tp=y(xO,"P",{});var UO=b(tp);op=w(UO,"Once you've specified at least one "),cp=y(UO,"CODE",{});var jO=b(cp);ip=w(jO,"bad"),jO.forEach(l),sp=w(UO," and one "),np=y(UO,"CODE",{});var qO=b(np);hp=w(qO,"good"),qO.forEach(l),fp=w(UO," commit, "),lp=y(UO,"CODE",{});var FO=b(lp);mp=w(FO,"git bisect"),FO.forEach(l),dp=w(UO," will find and checkout to a commit in the middle of that range between "),gp=y(UO,"CODE",{});var BO=b(gp);up=w(BO,"bad"),BO.forEach(l),pp=w(UO," and "),Ep=y(UO,"CODE",{});var YO=b(Ep);vp=w(YO,"good"),YO.forEach(l),bp=w(UO," and greets you with:"),UO.forEach(l),yp=C(xO),wp=y(xO,"PRE",{class:!0}),b(wp).forEach(l),Cp=C(xO),Op=y(xO,"P",{});var _O=b(Op);Ip=w(_O,"You can know test / verify / profile your code, and specify whether the current commit is a "),kp=y(_O,"CODE",{});var VO=b(kp);Dp=w(VO,"good"),VO.forEach(l),Pp=w(_O," commit or a "),Ap=y(_O,"CODE",{});var WO=b(Ap);Tp=w(WO,"bad"),WO.forEach(l),Lp=w(_O," commit:"),_O.forEach(l),Sp=C(xO),$p=y(xO,"PRE",{class:!0}),b($p).forEach(l),xp=C(xO),Np=y(xO,"P",{});var zO=b(Np);Gp=w(zO,"Continue doing it until eventually there's no more commit to inspect. "),Mp=y(zO,"CODE",{});var KO=b(Mp);Rp=w(KO,"git bisect"),KO.forEach(l),Hp=w(zO," will print out the description of the first bad commit."),zO.forEach(l),xO.forEach(l),Up=C(e),jp=y(e,"SECTION",{});var JO=b(jp);qp=y(JO,"H2",{});var QO=b(qp);Fp=y(QO,"A",{href:!0,id:!0});var XO=b(Fp);Bp=w(XO,"Summary"),XO.forEach(l),QO.forEach(l),Yp=C(JO),_p=y(JO,"P",{});var ZO=b(_p);Vp=w(ZO,"We've gone through the following git commands:"),ZO.forEach(l),Wp=C(JO),zp=y(JO,"UL",{});var eI=b(zp);Kp=y(eI,"LI",{});var aI=b(Kp);Jp=w(aI,"git merge"),aI.forEach(l),Qp=C(eI),Xp=y(eI,"LI",{});var rI=b(Xp);Zp=w(rI,"git reset"),rI.forEach(l),eE=C(eI),aE=y(eI,"LI",{});var tI=b(aE);rE=w(tI,"git cherry-pick"),tI.forEach(l),tE=C(eI),oE=y(eI,"LI",{});var oI=b(oE);cE=w(oI,"git revert"),oI.forEach(l),iE=C(eI),sE=y(eI,"LI",{});var cI=b(sE);nE=w(cI,"git rebase"),cI.forEach(l),hE=C(eI),fE=y(eI,"LI",{});var iI=b(fE);lE=w(iI,"git log"),iI.forEach(l),mE=C(eI),dE=y(eI,"LI",{});var sI=b(dE);gE=w(sI,"git reflog"),sI.forEach(l),uE=C(eI),pE=y(eI,"LI",{});var nI=b(pE);EE=w(nI,"git bisect"),nI.forEach(l),eI.forEach(l),vE=C(JO),bE=y(JO,"P",{});var hI=b(bE);yE=w(hI,"Hopefully we are now "),wE=y(hI,"CODE",{});var fI=b(wE);CE=w(fI,"git gudder"),fI.forEach(l),OE=w(hI," than before!"),hI.forEach(l),IE=C(JO),kE=y(JO,"HR",{}),DE=C(JO),PE=y(JO,"P",{});var lI=b(PE);AE=w(lI,"Related topic: "),TE=y(lI,"A",{href:!0});var mI=b(TE);LE=w(mI,"Git commits went missing after a rebase"),mI.forEach(l),lI.forEach(l),JO.forEach(l),this.h()},h(){v(c,"href","#disclaimer"),v(n,"href","#git-merge"),v(O,"href","#fast-forward-merge"),v(D,"href","#non-fast-forward-merge"),v(T,"href","#git-pull"),v($,"href","#git-reset"),v(G,"href","#git-cherry-pick"),v(H,"href","#git-revert"),v(q,"href","#git-rebase"),v(_,"href","#git-rebase-interactive"),v(K,"href","#pick"),v(X,"href","#drop"),v(ae,"href","#squash-fixup"),v(oe,"href","#break"),v(se,"href","#edit"),v(fe,"href","#git-pull-rebase"),v(de,"href","#git-rebase-a-shared-branch"),v(pe,"href","#git-log"),v(ye,"href","#since-after-until-before"),v(Oe,"href","#grep"),v(De,"href","#invert-grep"),v(Te,"href","#all-match"),v($e,"href","#min-parents-max-parents-merges-no-merges"),v(Ge,"href","#first-parent"),v(He,"href","#git-reflog"),v(qe,"href","#git-bisect"),v(Ye,"href","#summary"),v(t,"class","sitemap"),v(t,"id","sitemap"),v(t,"role","navigation"),v(t,"aria-label","Table of Contents"),v(la,"href","#disclaimer"),v(la,"id","disclaimer"),v(pa,"href","https://git-scm.com"),v(pa,"rel","nofollow"),v(Ca,"href","#git-merge"),v(Ca,"id","git-merge"),v(Ua,"href","#fast-forward-merge"),v(Ua,"id","fast-forward-merge"),Xa.src!==(Za="14b76240a1dacc59.gif")&&v(Xa,"src","14b76240a1dacc59.gif"),v(Xa,"alt","git-merge-ff"),v(ar,"class","caption svelte-koydfe"),v(ir,"href","#non-fast-forward-merge"),v(ir,"id","non-fast-forward-merge"),br.src!==(yr="610fbd9b1e091b6b.gif")&&v(br,"src","610fbd9b1e091b6b.gif"),v(br,"alt","git-merge-non-ff"),v(Cr,"class","caption svelte-koydfe"),v(Lr,"href","#git-pull"),v(Lr,"id","git-pull"),Vr.src!==(Wr="8abcb6ba74bc8300.gif")&&v(Vr,"src","8abcb6ba74bc8300.gif"),v(Vr,"alt","git-pull"),v(Kr,"class","caption svelte-koydfe"),v(et,"href","#git-reset"),v(et,"id","git-reset"),yt.src!==(wt="6455262f1f1c176c.gif")&&v(yt,"src","6455262f1f1c176c.gif"),v(yt,"alt","git-reset"),v(Ot,"class","caption svelte-koydfe"),v(At,"href","#git-cherry-pick"),v(At,"id","git-cherry-pick"),Bt.src!==(Yt="43f5cfa399149816.gif")&&v(Bt,"src","43f5cfa399149816.gif"),v(Bt,"alt","git-cherry-pick"),v(Vt,"class","caption svelte-koydfe"),v(Qt,"href","#git-revert"),v(Qt,"id","git-revert"),Co.src!==(Oo="8f2e6d6d994d95d3.gif")&&v(Co,"src","8f2e6d6d994d95d3.gif"),v(Co,"alt","git-revert"),v(ko,"class","caption svelte-koydfe"),Go.src!==(Mo="f911bb098d6b5bd0.gif")&&v(Go,"src","f911bb098d6b5bd0.gif"),v(Go,"alt","git-revert-2"),v(Ho,"class","caption svelte-koydfe"),cc.src!==(ic="49e8e341afc972f0.gif")&&v(cc,"src","49e8e341afc972f0.gif"),v(cc,"alt","git-revert-3"),v(nc,"class","caption svelte-koydfe"),Lc.src!==(Sc="949bbf6f9817c71a.gif")&&v(Lc,"src","949bbf6f9817c71a.gif"),v(Lc,"alt","git-revert-4"),v(xc,"class","caption svelte-koydfe"),v(Hc,"href","#git-rebase"),v(Hc,"id","git-rebase"),Ci.src!==(Oi="475d4a996ddab5a8.gif")&&v(Ci,"src","475d4a996ddab5a8.gif"),v(Ci,"alt","git-rebase"),v(ki,"class","caption svelte-koydfe"),Fi.src!==(Bi="6cff0833729fbadb.gif")&&v(Fi,"src","6cff0833729fbadb.gif"),v(Fi,"alt","git-rebase-2"),v(_i,"class","caption svelte-koydfe"),v(ms,"type","image/webp"),v(ms,"srcset","b2e7cead9fe8c5c8.webp"),v(ds,"type","image/jpeg"),v(ds,"srcset","b2e7cead9fe8c5c8.jpg"),v(gs,"alt","git-rebase"),gs.src!==(us="b2e7cead9fe8c5c8.jpg")&&v(gs,"src","b2e7cead9fe8c5c8.jpg"),v(Es,"class","caption svelte-koydfe"),v(qn,"href","#git-rebase-interactive"),v(qn,"id","git-rebase-interactive"),v(Qn,"type","image/webp"),v(Qn,"srcset","f4f5e2a02869d046.webp"),v(Xn,"type","image/jpeg"),v(Xn,"srcset","f4f5e2a02869d046.png"),v(Zn,"alt","git-rebase-i-pick"),Zn.src!==(eh="f4f5e2a02869d046.png")&&v(Zn,"src","f4f5e2a02869d046.png"),v(rh,"class","caption svelte-koydfe"),v(lh,"class","language-null"),v(uh,"href","#pick"),v(uh,"id","pick"),v(Oh,"type","image/webp"),v(Oh,"srcset","f4f5e2a02869d046.webp"),v(Ih,"type","image/jpeg"),v(Ih,"srcset","f4f5e2a02869d046.png"),v(kh,"alt","git-rebase-i-pick"),kh.src!==(Dh="f4f5e2a02869d046.png")&&v(kh,"src","f4f5e2a02869d046.png"),v(Ah,"class","language-null"),v($h,"href","#drop"),v($h,"id","drop"),v(jh,"type","image/webp"),v(jh,"srcset","355841674aa71990.webp"),v(qh,"type","image/jpeg"),v(qh,"srcset","355841674aa71990.png"),v(Fh,"alt","git-rebase-i-drop"),Fh.src!==(Bh="355841674aa71990.png")&&v(Fh,"src","355841674aa71990.png"),v(_h,"class","language-null"),v(Kh,"href","#squash-fixup"),v(Kh,"id","squash-fixup"),v(df,"type","image/webp"),v(df,"srcset","fd3eb938981581e2.webp"),v(gf,"type","image/jpeg"),v(gf,"srcset","fd3eb938981581e2.png"),v(uf,"alt","git-rebase-i-squash"),uf.src!==(pf="fd3eb938981581e2.png")&&v(uf,"src","fd3eb938981581e2.png"),v(vf,"class","language-null"),v(Cf,"href","#break"),v(Cf,"id","break"),v(xf,"type","image/webp"),v(xf,"srcset","2b060f92d0e23b63.webp"),v(Nf,"type","image/jpeg"),v(Nf,"srcset","2b060f92d0e23b63.png"),v(Gf,"alt","git-rebase-i-break"),Gf.src!==(Mf="2b060f92d0e23b63.png")&&v(Gf,"src","2b060f92d0e23b63.png"),v(Hf,"class","language-null"),v(Ff,"href","#edit"),v(Ff,"id","edit"),v(Jf,"type","image/webp"),v(Jf,"srcset","2b060f92d0e23b63.webp"),v(Qf,"type","image/jpeg"),v(Qf,"srcset","2b060f92d0e23b63.png"),v(Xf,"alt","git-rebase-i-edit"),Xf.src!==(Zf="2b060f92d0e23b63.png")&&v(Xf,"src","2b060f92d0e23b63.png"),v(al,"class","language-null"),v(cl,"href","#git-pull-rebase"),v(cl,"id","git-pull-rebase"),vl.src!==(bl="34921f7344aa46e5.gif")&&v(vl,"src","34921f7344aa46e5.gif"),v(vl,"alt","git-pull-rebase"),v(wl,"class","caption svelte-koydfe"),v(Dl,"href","#git-rebase-a-shared-branch"),v(Dl,"id","git-rebase-a-shared-branch"),v(Bl,"type","image/webp"),v(Bl,"srcset","c7dedf32afca356b.webp"),v(Yl,"type","image/jpeg"),v(Yl,"srcset","c7dedf32afca356b.png"),v(_l,"alt","git-rebase-w"),_l.src!==(Vl="c7dedf32afca356b.png")&&v(_l,"src","c7dedf32afca356b.png"),v(om,"type","image/webp"),v(om,"srcset","34ca5606390b28f5.webp"),v(cm,"type","image/jpeg"),v(cm,"srcset","34ca5606390b28f5.png"),v(im,"alt","git-rebase-w-2"),im.src!==(sm="34ca5606390b28f5.png")&&v(im,"src","34ca5606390b28f5.png"),v(ym,"type","image/webp"),v(ym,"srcset","ae144be0681b4ed4.webp"),v(wm,"type","image/jpeg"),v(wm,"srcset","ae144be0681b4ed4.png"),v(Cm,"alt","git-rebase-w-3"),Cm.src!==(Om="ae144be0681b4ed4.png")&&v(Cm,"src","ae144be0681b4ed4.png"),v(Qm,"type","image/webp"),v(Qm,"srcset","c6f5adaa2d62d6a0.webp"),v(Xm,"type","image/jpeg"),v(Xm,"srcset","c6f5adaa2d62d6a0.png"),v(Zm,"alt","git-rebase-w-4"),Zm.src!==(ed="c6f5adaa2d62d6a0.png")&&v(Zm,"src","c6f5adaa2d62d6a0.png"),v(kd,"type","image/webp"),v(kd,"srcset","89a51a224ed20d86.webp"),v(Dd,"type","image/jpeg"),v(Dd,"srcset","89a51a224ed20d86.png"),v(Pd,"alt","git-rebase-w-5"),Pd.src!==(Ad="89a51a224ed20d86.png")&&v(Pd,"src","89a51a224ed20d86.png"),v(rg,"href","#git-log"),v(rg,"id","git-log"),v(fg,"href","#since-after-until-before"),v(fg,"id","since-after-until-before"),v(vg,"href","#grep"),v(vg,"id","grep"),v(Dg,"href","#invert-grep"),v(Dg,"id","invert-grep"),v(Mg,"href","#all-match"),v(Mg,"id","all-match"),v(au,"href","#min-parents-max-parents-merges-no-merges"),v(au,"id","min-parents-max-parents-merges-no-merges"),v(uu,"href","#first-parent"),v(uu,"id","first-parent"),v(Du,"href","#git-reflog"),v(Du,"id","git-reflog"),v(Bu,"href","#git-bisect"),v(Bu,"id","git-bisect"),v(ap,"class","language-sh"),v(wp,"class","language-null"),v($p,"class","language-sh"),v(Fp,"href","#summary"),v(Fp,"id","summary"),v(TE,"href","/commit-went-missing-after-rebase/")},m(e,a){f(e,r,a),h(r,t),h(t,o),h(o,c),h(c,i),h(t,s),h(s,n),h(n,m),h(t,g),h(g,E),h(E,O),h(O,I),h(g,k),h(k,D),h(D,P),h(g,A),h(A,T),h(T,L),h(t,S),h(S,$),h($,x),h(t,N),h(N,G),h(G,M),h(t,R),h(R,H),h(H,U),h(t,j),h(j,q),h(q,F),h(t,B),h(B,Y),h(Y,_),h(_,V),h(B,W),h(W,z),h(z,K),h(K,J),h(W,Q),h(Q,X),h(X,Z),h(W,ee),h(ee,ae),h(ae,re),h(W,te),h(te,oe),h(oe,ce),h(W,ie),h(ie,se),h(se,ne),h(B,he),h(he,fe),h(fe,le),h(B,me),h(me,de),h(de,ge),h(t,ue),h(ue,pe),h(pe,Ee),h(t,ve),h(ve,be),h(be,ye),h(ye,we),h(ve,Ce),h(Ce,Oe),h(Oe,Ie),h(ve,ke),h(ke,De),h(De,Pe),h(ve,Ae),h(Ae,Te),h(Te,Le),h(ve,Se),h(Se,$e),h($e,xe),h(ve,Ne),h(Ne,Ge),h(Ge,Me),h(t,Re),h(Re,He),h(He,Ue),h(t,je),h(je,qe),h(qe,Fe),h(t,Be),h(Be,Ye),h(Ye,_e),f(e,Ve,a),f(e,We,a),h(We,ze),f(e,Ke,a),f(e,Je,a),h(Je,Qe),h(Je,Xe),h(Xe,Ze),h(Je,ea),h(Je,aa),h(aa,ra),h(Je,ta),f(e,oa,a),f(e,ca,a),h(ca,ia),h(ia,sa),f(e,na,a),f(e,ha,a),h(ha,fa),h(fa,la),h(la,ma),h(ha,da),h(ha,ga),h(ga,ua),h(ga,pa),h(pa,Ea),h(ga,va),f(e,ba,a),f(e,ya,a),h(ya,wa),h(wa,Ca),h(Ca,Oa),h(ya,Ia),h(ya,ka),h(ka,Da),h(ka,Pa),h(Pa,Aa),h(ka,Ta),h(ka,La),h(La,Sa),h(ka,$a),h(ka,xa),h(xa,Na),h(ka,Ga),f(e,Ma,a),f(e,Ra,a),h(Ra,Ha),h(Ha,Ua),h(Ua,ja),h(Ra,qa),h(Ra,Fa),h(Fa,Ba),h(Fa,Ya),h(Ya,_a),h(Fa,Va),h(Fa,Wa),h(Wa,za),h(Fa,Ka),h(Ra,Ja),h(Ra,Qa),h(Qa,Xa),h(Ra,er),h(Ra,ar),h(ar,rr),f(e,tr,a),f(e,or,a),h(or,cr),h(cr,ir),h(ir,sr),h(or,nr),h(or,hr),h(hr,fr),h(hr,lr),h(lr,mr),h(hr,dr),h(hr,gr),h(gr,ur),h(hr,pr),h(or,Er),h(or,vr),h(vr,br),h(or,wr),h(or,Cr),h(Cr,Or),h(or,Ir),h(or,kr),h(kr,Dr),f(e,Pr,a),f(e,Ar,a),h(Ar,Tr),h(Tr,Lr),h(Lr,Sr),h(Ar,$r),h(Ar,xr),h(xr,Nr),h(xr,Gr),h(Gr,Mr),h(xr,Rr),h(xr,Hr),h(Hr,Ur),h(xr,jr),h(xr,qr),h(qr,Fr),h(xr,Br),h(Ar,Yr),h(Ar,_r),h(_r,Vr),h(Ar,zr),h(Ar,Kr),h(Kr,Jr),f(e,Qr,a),f(e,Xr,a),h(Xr,Zr),h(Zr,et),h(et,at),h(Xr,rt),h(Xr,tt),h(tt,ot),h(ot,ct),h(tt,it),h(Xr,st),h(Xr,nt),h(nt,ht),h(ht,ft),h(nt,lt),h(nt,mt),h(mt,dt),h(nt,gt),h(nt,ut),h(ut,pt),h(nt,Et),h(Xr,vt),h(Xr,bt),h(bt,yt),h(Xr,Ct),h(Xr,Ot),h(Ot,It),f(e,kt,a),f(e,Dt,a),h(Dt,Pt),h(Pt,At),h(At,Tt),h(Dt,Lt),h(Dt,St),h(St,$t),h(Dt,xt),h(Dt,Nt),h(Nt,Gt),h(Gt,Mt),h(Nt,Rt),h(Nt,Ht),h(Ht,Ut),h(Nt,jt),h(Dt,qt),h(Dt,Ft),h(Ft,Bt),h(Dt,_t),h(Dt,Vt),h(Vt,Wt),f(e,zt,a),f(e,Kt,a),h(Kt,Jt),h(Jt,Qt),h(Qt,Xt),h(Kt,Zt),h(Kt,eo),h(eo,ao),h(ao,ro),h(eo,to),h(Kt,oo),h(Kt,co),h(co,io),h(co,so),h(so,no),h(co,ho),h(co,fo),h(fo,lo),h(co,mo),h(co,go),h(go,uo),h(co,po),h(co,Eo),h(Eo,vo),h(co,bo),h(Kt,yo),h(Kt,wo),h(wo,Co),h(Kt,Io),h(Kt,ko),h(ko,Do),h(Kt,Po),h(Kt,Ao),h(Ao,To),h(Ao,Lo),h(Lo,So),h(Ao,$o),h(Kt,xo),h(Kt,No),h(No,Go),h(Kt,Ro),h(Kt,Ho),h(Ho,Uo),h(Kt,jo),h(Kt,qo),h(qo,Fo),h(qo,Bo),h(Bo,Yo),h(qo,_o),h(qo,Vo),h(Vo,Wo),h(qo,zo),h(qo,Ko),h(Ko,Jo),h(qo,Qo),h(Kt,Xo),h(Kt,Zo),h(Zo,ec),h(ec,ac),h(Zo,rc),h(Kt,tc),h(Kt,oc),h(oc,cc),h(Kt,sc),h(Kt,nc),h(nc,hc),h(Kt,fc),h(Kt,lc),h(lc,mc),h(lc,dc),h(dc,gc),h(lc,uc),h(lc,pc),h(pc,Ec),h(lc,vc),h(lc,bc),h(bc,yc),h(lc,wc),h(lc,Cc),h(Cc,Oc),h(lc,Ic),h(lc,kc),h(kc,Dc),h(lc,Pc),h(Kt,Ac),h(Kt,Tc),h(Tc,Lc),h(Kt,$c),h(Kt,xc),h(xc,Nc),f(e,Gc,a),f(e,Mc,a),h(Mc,Rc),h(Rc,Hc),h(Hc,Uc),h(Mc,jc),h(Mc,qc),h(qc,Fc),h(Fc,Bc),h(qc,Yc),h(Mc,_c),h(Mc,Vc),h(Vc,Wc),h(Vc,zc),h(zc,Kc),h(Vc,Jc),h(Vc,Qc),h(Qc,Xc),h(Vc,Zc),h(Vc,ei),h(ei,ai),h(Vc,ri),h(Vc,ti),h(ti,oi),h(Vc,ci),h(Vc,ii),h(ii,si),h(Vc,ni),h(Vc,hi),h(hi,fi),h(Vc,li),h(Mc,mi),h(Mc,di),h(di,gi),h(gi,ui),h(di,pi),h(di,Ei),h(Ei,vi),h(di,bi),h(Mc,yi),h(Mc,wi),h(wi,Ci),h(Mc,Ii),h(Mc,ki),h(ki,Di),h(Mc,Pi),h(Mc,Ai),h(Ai,Ti),h(Ti,Li),h(Ai,Si),h(Mc,$i),h(Mc,xi),h(xi,Ni),h(Ni,Gi),h(xi,Mi),h(xi,Ri),h(Ri,Hi),h(xi,Ui),h(Mc,ji),h(Mc,qi),h(qi,Fi),h(Mc,Yi),h(Mc,_i),h(_i,Vi),h(Mc,Wi),h(Mc,zi),h(zi,Ki),h(Mc,Ji),h(Mc,Qi),h(Qi,Xi),h(Xi,Zi),h(Zi,es),h(Qi,as),h(Qi,rs),h(rs,ts),h(ts,os),h(Qi,cs),h(Qi,is),h(is,ss),h(ss,ns),h(Mc,hs),h(Mc,fs),h(fs,ls),h(ls,ms),h(ls,ds),h(ls,gs),h(Mc,ps),h(Mc,Es),h(Es,vs),h(Mc,bs),h(Mc,ys),h(ys,ws),h(Mc,Cs),h(Mc,Os),h(Os,Is),h(Is,ks),h(ks,Ds),h(Is,Ps),h(Is,As),h(As,Ts),h(Is,Ls),h(Is,Ss),h(Ss,$s),h(Is,xs),h(Is,Ns),h(Ns,Gs),h(Is,Ms),h(Os,Rs),h(Os,Hs),h(Hs,Us),h(Hs,js),h(js,qs),h(Hs,Fs),h(Hs,Bs),h(Bs,Ys),h(Hs,_s),h(Hs,Vs),h(Vs,Ws),h(Hs,zs),h(Hs,Ks),h(Ks,Js),h(Hs,Qs),h(Hs,Xs),h(Xs,Zs),h(Hs,en),h(Os,an),h(Os,rn),h(rn,tn),h(rn,on),h(on,cn),h(rn,sn),h(rn,nn),h(nn,hn),h(rn,fn),h(Os,ln),h(Os,mn),h(mn,dn),h(mn,gn),h(gn,un),h(mn,pn),h(mn,En),h(En,vn),h(mn,bn),h(mn,yn),h(yn,wn),h(mn,Cn),h(mn,On),h(On,In),h(mn,kn),h(Os,Dn),h(Os,Pn),h(Pn,An),h(Pn,Tn),h(Tn,Ln),h(Pn,Sn),h(Pn,$n),h($n,xn),h(Pn,Nn),h(Pn,Gn),h(Gn,Mn),h(Pn,Rn),f(e,Hn,a),f(e,Un,a),h(Un,jn),h(jn,qn),h(qn,Fn),h(Un,Bn),h(Un,Yn),h(Yn,_n),h(_n,Vn),h(Yn,Wn),h(Un,zn),h(Un,Kn),h(Kn,Jn),h(Jn,Qn),h(Jn,Xn),h(Jn,Zn),h(Un,ah),h(Un,rh),h(rh,th),h(Un,oh),h(Un,ch),h(ch,ih),h(ch,sh),h(sh,nh),h(ch,hh),h(Un,fh),h(Un,lh),lh.innerHTML='\n<code class="language-">pick #2 commit msg 2\npick #3 commit msg 3\npick #4 commit msg 4\npick #5 commit msg 5\npick #6 commit msg 6\n\n# Rebase #1..#6 onto #1 (5 commands)\n#\n# Commands:\n# p, pick = use commit\n# r, reword = use commit, but edit the commit message\n# e, edit = use commit, but stop for amending\n...</code>',f(e,mh,a),f(e,dh,a),h(dh,gh),h(gh,uh),h(uh,ph),h(dh,Eh),h(dh,vh),h(vh,bh),h(dh,yh),h(dh,wh),h(wh,Ch),h(Ch,Oh),h(Ch,Ih),h(Ch,kh),h(dh,Ph),h(dh,Ah),Ah.innerHTML='\n<code class="language-">pick #2 commit msg 2\npick #3 commit msg 3\npick #4 commit msg 4\npick #5 commit msg 5\npick #6 commit msg 6</code>',f(e,Th,a),f(e,Lh,a),h(Lh,Sh),h(Sh,$h),h($h,xh),h(Lh,Nh),h(Lh,Gh),h(Gh,Mh),h(Lh,Rh),h(Lh,Hh),h(Hh,Uh),h(Uh,jh),h(Uh,qh),h(Uh,Fh),h(Lh,Yh),h(Lh,_h),_h.innerHTML='\n<code class="language-">pick #2 commit msg 2\ndrop #3 commit msg 3\npick #4 commit msg 4\npick #5 commit msg 5\npick #6 commit msg 6</code>',f(e,Vh,a),f(e,Wh,a),h(Wh,zh),h(zh,Kh),h(Kh,Jh),h(Wh,Qh),h(Wh,Xh),h(Xh,Zh),h(Xh,ef),h(ef,af),h(Xh,rf),h(Xh,tf),h(tf,of),h(Xh,cf),h(Xh,sf),h(sf,nf),h(Xh,hf),h(Wh,ff),h(Wh,lf),h(lf,mf),h(mf,df),h(mf,gf),h(mf,uf),h(Wh,Ef),h(Wh,vf),vf.innerHTML='\n<code class="language-">pick   #2 commit msg 2\nsquash #3 commit msg 3\npick   #4 commit msg 4\nfixup  #5 commit msg 5\npick   #6 commit msg 6</code>',f(e,bf,a),f(e,yf,a),h(yf,wf),h(wf,Cf),h(Cf,Of),h(yf,If),h(yf,kf),h(kf,Df),h(kf,Pf),h(Pf,Af),h(kf,Tf),h(yf,Lf),h(yf,Sf),h(Sf,$f),h($f,xf),h($f,Nf),h($f,Gf),h(yf,Rf),h(yf,Hf),Hf.innerHTML='\n<code class="language-">pick   #2 commit msg 2\npick   #3 commit msg 3\nbreak\npick   #4 commit msg 4\npick   #5 commit msg 5\npick   #6 commit msg 6</code>',f(e,Uf,a),f(e,jf,a),h(jf,qf),h(qf,Ff),h(Ff,Bf),h(jf,Yf),h(jf,_f),h(_f,Vf),h(jf,Wf),h(jf,zf),h(zf,Kf),h(Kf,Jf),h(Kf,Qf),h(Kf,Xf),h(jf,el),h(jf,al),al.innerHTML='\n<code class="language-">pick   #2 commit msg 2\nedit   #3 commit msg 3\npick   #4 commit msg 4\npick   #5 commit msg 5\npick   #6 commit msg 6</code>',f(e,rl,a),f(e,tl,a),h(tl,ol),h(ol,cl),h(cl,il),h(tl,sl),h(tl,nl),h(nl,hl),h(nl,fl),h(fl,ll),h(nl,ml),h(nl,dl),h(dl,gl),h(nl,ul),h(tl,pl),h(tl,El),h(El,vl),h(tl,yl),h(tl,wl),h(wl,Cl),f(e,Ol,a),f(e,Il,a),h(Il,kl),h(kl,Dl),h(Dl,Pl),h(Il,Al),h(Il,Tl),h(Tl,Ll),h(Tl,Sl),h(Sl,$l),h(Tl,xl),h(Tl,Nl),h(Nl,Gl),h(Tl,Ml),h(Tl,Rl),h(Rl,Hl),h(Tl,Ul),h(Il,jl),h(Il,ql),h(ql,Fl),h(Fl,Bl),h(Fl,Yl),h(Fl,_l),h(Il,Wl),h(Il,zl),h(zl,Kl),h(Kl,Jl),h(zl,Ql),h(zl,Xl),h(Xl,Zl),h(zl,em),h(Il,am),h(Il,rm),h(rm,tm),h(tm,om),h(tm,cm),h(tm,im),h(Il,nm),h(Il,hm),h(hm,fm),h(hm,lm),h(lm,mm),h(hm,dm),h(hm,gm),h(gm,um),h(hm,pm),h(Il,Em),h(Il,vm),h(vm,bm),h(bm,ym),h(bm,wm),h(bm,Cm),h(Il,Im),h(Il,km),h(km,Dm),h(km,Pm),h(Pm,Am),h(km,Tm),h(km,Lm),h(Lm,Sm),h(km,$m),h(km,xm),h(xm,Nm),h(km,Gm),h(Il,Mm),h(Il,Rm),h(Rm,Hm),h(Rm,Um),h(Um,jm),h(Rm,qm),h(Rm,Fm),h(Fm,Bm),h(Rm,Ym),h(Rm,_m),h(_m,Vm),h(Rm,Wm),h(Il,zm),h(Il,Km),h(Km,Jm),h(Jm,Qm),h(Jm,Xm),h(Jm,Zm),h(Il,ad),h(Il,rd),h(rd,td),h(rd,od),h(od,cd),h(rd,id),h(rd,sd),h(sd,nd),h(rd,hd),h(Il,fd),h(Il,ld),h(ld,md),h(ld,dd),h(dd,gd),h(ld,ud),h(ld,pd),h(pd,Ed),h(ld,vd),h(ld,bd),h(bd,yd),h(ld,wd),h(Il,Cd),h(Il,Od),h(Od,Id),h(Id,kd),h(Id,Dd),h(Id,Pd),h(Il,Td),h(Il,Ld),h(Ld,Sd),h(Ld,$d),h($d,xd),h(Ld,Nd),h(Ld,Gd),h(Gd,Md),h(Ld,Rd),h(Ld,Hd),h(Hd,Ud),h(Ld,jd),h(Ld,qd),h(qd,Fd),h(Ld,Bd),h(Il,Yd),h(Il,_d),h(_d,Vd),h(_d,Wd),h(Wd,zd),h(_d,Kd),h(_d,Jd),h(Jd,Qd),h(_d,Xd),f(e,Zd,a),f(e,eg,a),h(eg,ag),h(ag,rg),h(rg,tg),h(eg,og),h(eg,cg),h(cg,ig),f(e,sg,a),f(e,ng,a),h(ng,hg),h(hg,fg),h(fg,lg),h(ng,mg),h(ng,dg),h(dg,gg),f(e,ug,a),f(e,pg,a),h(pg,Eg),h(Eg,vg),h(vg,bg),h(pg,yg),h(pg,wg),h(wg,Cg),f(e,Og,a);f(e,Ig,a),h(Ig,kg),h(kg,Dg),h(Dg,Pg),h(Ig,Ag),h(Ig,Tg),h(Tg,Lg),h(Tg,Sg),h(Sg,$g),f(e,xg,a),f(e,Ng,a),h(Ng,Gg),h(Gg,Mg),h(Mg,Rg),h(Ng,Hg),h(Ng,Ug),h(Ug,jg),h(jg,qg),h(Ug,Fg),h(Ug,Bg),h(Bg,Yg),h(Ug,_g),h(Ug,Vg),h(Vg,Wg),h(Ug,zg),h(Ug,Kg),h(Kg,Jg),h(Ug,Qg),f(e,Xg,a),f(e,Zg,a),h(Zg,eu),h(eu,au),h(au,ru),h(Zg,tu),h(Zg,ou),h(ou,cu),h(ou,iu),h(iu,su),h(ou,nu),h(ou,hu),h(hu,fu),h(ou,lu),f(e,mu,a),f(e,du,a),h(du,gu),h(gu,uu),h(uu,pu),h(du,Eu),h(du,vu),h(vu,bu),h(vu,yu),h(yu,wu),h(vu,Cu),f(e,Ou,a),f(e,Iu,a),h(Iu,ku),h(ku,Du),h(Du,Pu),h(Iu,Au),h(Iu,Tu),h(Tu,Lu),h(Tu,Su),h(Su,$u),h(Tu,xu),h(Tu,Nu),h(Nu,Gu),h(Tu,Mu),h(Tu,Ru),h(Ru,Hu),h(Tu,Uu),f(e,ju,a),f(e,qu,a),h(qu,Fu),h(Fu,Bu),h(Bu,Yu),h(qu,_u),h(qu,Vu),h(Vu,Wu),h(qu,zu),h(qu,Ku),h(Ku,Ju),h(Ku,Qu),h(Qu,Xu),h(Ku,Zu),h(qu,ep),h(qu,ap),ap.innerHTML='<code class="language-sh">$ git bisect start # starts the bisect session\n$ git bisect bad v2.5.1 # specify the commit you know is bad\n$ git bisect good v2.6.13 # specify the commit you knew were good</code>',h(qu,rp),h(qu,tp),h(tp,op),h(tp,cp),h(cp,ip),h(tp,sp),h(tp,np),h(np,hp),h(tp,fp),h(tp,lp),h(lp,mp),h(tp,dp),h(tp,gp),h(gp,up),h(tp,pp),h(tp,Ep),h(Ep,vp),h(tp,bp),h(qu,yp),h(qu,wp),wp.innerHTML='\n<code class="language-">Bisecting: 675 revisions left to test after this (roughly 10 steps)</code>',h(qu,Cp),h(qu,Op),h(Op,Ip),h(Op,kp),h(kp,Dp),h(Op,Pp),h(Op,Ap),h(Ap,Tp),h(Op,Lp),h(qu,Sp),h(qu,$p),$p.innerHTML='<code class="language-sh"># if it is a good commit\n$ git bisect good\n\n# if it is a bad commit\n$ git bisect bad</code>',h(qu,xp),h(qu,Np),h(Np,Gp),h(Np,Mp),h(Mp,Rp),h(Np,Hp),f(e,Up,a),f(e,jp,a),h(jp,qp),h(qp,Fp),h(Fp,Bp),h(jp,Yp),h(jp,_p),h(_p,Vp),h(jp,Wp),h(jp,zp),h(zp,Kp),h(Kp,Jp),h(zp,Qp),h(zp,Xp),h(Xp,Zp),h(zp,eE),h(zp,aE),h(aE,rE),h(zp,tE),h(zp,oE),h(oE,cE),h(zp,iE),h(zp,sE),h(sE,nE),h(zp,hE),h(zp,fE),h(fE,lE),h(zp,mE),h(zp,dE),h(dE,gE),h(zp,uE),h(zp,pE),h(pE,EE),h(jp,vE),h(jp,bE),h(bE,yE),h(bE,wE),h(wE,CE),h(bE,OE),h(jp,IE),h(jp,kE),h(jp,DE),h(jp,PE),h(PE,AE),h(PE,TE),h(TE,LE)},p:e,d(e){e&&l(r),e&&l(Ve),e&&l(We),e&&l(Ke),e&&l(Je),e&&l(oa),e&&l(ca),e&&l(na),e&&l(ha),e&&l(ba),e&&l(ya),e&&l(Ma),e&&l(Ra),e&&l(tr),e&&l(or),e&&l(Pr),e&&l(Ar),e&&l(Qr),e&&l(Xr),e&&l(kt),e&&l(Dt),e&&l(zt),e&&l(Kt),e&&l(Gc),e&&l(Mc),e&&l(Hn),e&&l(Un),e&&l(mh),e&&l(dh),e&&l(Th),e&&l(Lh),e&&l(Vh),e&&l(Wh),e&&l(bf),e&&l(yf),e&&l(Uf),e&&l(jf),e&&l(rl),e&&l(tl),e&&l(Ol),e&&l(Il),e&&l(Zd),e&&l(eg),e&&l(sg),e&&l(ng),e&&l(ug),e&&l(pg),e&&l(Og),e&&l(Ig),e&&l(xg),e&&l(Ng),e&&l(Xg),e&&l(Zg),e&&l(mu),e&&l(du),e&&l(Ou),e&&l(Iu),e&&l(ju),e&&l(qu),e&&l(Up),e&&l(jp)}}}function le(e){let r,t;const o=[me];let c={$$slots:{default:[fe]},$$scope:{ctx:e}};for(let e=0;e<o.length;e+=1)c=a(c,o[e]);return r=new he({props:c}),{c(){B(r.$$.fragment)},l(e){Y(r.$$.fragment,e)},m(e,a){_(r,e,a),t=!0},p(e,[a]){const t=0&a?function(e,a){const r={},t={},o={$$scope:1};let c=e.length;for(;c--;){const i=e[c],s=a[c];if(s){for(const e in i)e in s||(t[e]=1);for(const e in s)o[e]||(r[e]=s[e],o[e]=1);e[c]=s}else for(const e in i)o[e]=1}for(const e in t)e in r||(r[e]=void 0);return r}(o,[(c=me,"object"==typeof c&&null!==c?c:{})]):{};var c;1&a&&(t.$$scope={dirty:a,ctx:e}),r.$set(t)},i(e){t||(q(r.$$.fragment,e),t=!0)},o(e){F(r.$$.fragment,e),t=!1},d(e){V(r,e)}}}const me={title:"Git Gudder",venue:"Shopee SG",venueLink:"https://www.google.com.sg/maps/place/Shopee+Building/@1.2923933,103.7860786,19z/data=!3m1!4b1!4m5!3m4!1s0x31da1b803e3bae77:0x154e17d66760912b!8m2!3d1.2923933!4d103.7866258",occasion:"React Knowledgeable Week 41",occasionLink:"https://github.com/Shopee/shopee-react-knowledgeable/issues/129",slides:"https://slides.com/tanhauhau/git-gudder",date:"2019-08-30",slug:"git-gudder",type:"talk"};class de extends K{constructor(e){super(),z(this,e,null,le,i,{})}}setTimeout(()=>{new de({target:document.querySelector("#app"),hydrate:!0})},3e3);
