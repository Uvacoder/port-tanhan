function e(){}function a(e,a){for(const t in a)e[t]=a[t];return e}function t(e){return e()}function r(){return Object.create(null)}function o(e){e.forEach(t)}function c(e){return"function"==typeof e}function i(e,a){return e!=e?a==a:e!==a||e&&"object"==typeof e||"function"==typeof e}function n(e,t,r,o){return e[1]&&o?a(r.ctx.slice(),e[1](o(t))):r.ctx}function s(e,a,t,r,o,c,i){const s=function(e,a,t,r){if(e[2]&&r){const o=e[2](r(t));if(void 0===a.dirty)return o;if("object"==typeof o){const e=[],t=Math.max(a.dirty.length,o.length);for(let r=0;r<t;r+=1)e[r]=a.dirty[r]|o[r];return e}return a.dirty|o}return a.dirty}(a,r,o,c);if(s){const o=n(a,t,r,i);e.p(o,s)}}function h(e,a){e.appendChild(a)}function l(e,a,t){e.insertBefore(a,t||null)}function f(e){e.parentNode.removeChild(e)}function d(e,a){for(let t=0;t<e.length;t+=1)e[t]&&e[t].d(a)}function m(e){return document.createElement(e)}function g(e){return document.createElementNS("http://www.w3.org/2000/svg",e)}function u(e){return document.createTextNode(e)}function p(){return u(" ")}function E(){return u("")}function v(e,a,t){null==t?e.removeAttribute(a):e.getAttribute(a)!==t&&e.setAttribute(a,t)}function b(e){return Array.from(e.childNodes)}function y(e,a,t,r){for(let r=0;r<e.length;r+=1){const o=e[r];if(o.nodeName===a){let a=0;const c=[];for(;a<o.attributes.length;){const e=o.attributes[a++];t[e.name]||c.push(e.name)}for(let e=0;e<c.length;e++)o.removeAttribute(c[e]);return e.splice(r,1)[0]}}return r?g(a):m(a)}function w(e,a){for(let t=0;t<e.length;t+=1){const r=e[t];if(3===r.nodeType)return r.data=""+a,e.splice(t,1)[0]}return u(a)}function C(e){return w(e," ")}function O(e,a){a=""+a,e.wholeText!==a&&(e.data=a)}function I(e,a){e.value=null==a?"":a}class k{constructor(e=null){this.a=e,this.e=this.n=null}m(e,a,t=null){this.e||(this.e=m(a.nodeName),this.t=a,this.h(e)),this.i(t)}h(e){this.e.innerHTML=e,this.n=Array.from(this.e.childNodes)}i(e){for(let a=0;a<this.n.length;a+=1)l(this.t,this.n[a],e)}p(e){this.d(),this.h(e),this.i(this.a)}d(){this.n.forEach(f)}}let D;function A(e){D=e}function P(e){(function(){if(!D)throw new Error("Function called outside component initialization");return D})().$$.on_mount.push(e)}const T=[],S=[],L=[],$=[],x=Promise.resolve();let N=!1;function G(e){L.push(e)}let M=!1;const H=new Set;function R(){if(!M){M=!0;do{for(let e=0;e<T.length;e+=1){const a=T[e];A(a),U(a.$$)}for(T.length=0;S.length;)S.pop()();for(let e=0;e<L.length;e+=1){const a=L[e];H.has(a)||(H.add(a),a())}L.length=0}while(T.length);for(;$.length;)$.pop()();N=!1,M=!1,H.clear()}}function U(e){if(null!==e.fragment){e.update(),o(e.before_update);const a=e.dirty;e.dirty=[-1],e.fragment&&e.fragment.p(e.ctx,a),e.after_update.forEach(G)}}const z=new Set;function j(e,a){e&&e.i&&(z.delete(e),e.i(a))}function q(e,a,t,r){if(e&&e.o){if(z.has(e))return;z.add(e),(void 0).c.push(()=>{z.delete(e),r&&(t&&e.d(1),r())}),e.o(a)}}function F(e){e&&e.c()}function B(e,a){e&&e.l(a)}function Y(e,a,r){const{fragment:i,on_mount:n,on_destroy:s,after_update:h}=e.$$;i&&i.m(a,r),G(()=>{const a=n.map(t).filter(c);s?s.push(...a):o(a),e.$$.on_mount=[]}),h.forEach(G)}function _(e,a){const t=e.$$;null!==t.fragment&&(o(t.on_destroy),t.fragment&&t.fragment.d(a),t.on_destroy=t.fragment=null,t.ctx=[])}function V(e,a){-1===e.$$.dirty[0]&&(T.push(e),N||(N=!0,x.then(R)),e.$$.dirty.fill(0)),e.$$.dirty[a/31|0]|=1<<a%31}function W(a,t,c,i,n,s,h=[-1]){const l=D;A(a);const d=t.props||{},m=a.$$={fragment:null,ctx:null,props:s,update:e,not_equal:n,bound:r(),on_mount:[],on_destroy:[],before_update:[],after_update:[],context:new Map(l?l.$$.context:[]),callbacks:r(),dirty:h};let g=!1;if(m.ctx=c?c(a,d,(e,t,...r)=>{const o=r.length?r[0]:t;return m.ctx&&n(m.ctx[e],m.ctx[e]=o)&&(m.bound[e]&&m.bound[e](o),g&&V(a,e)),t}):[],m.update(),g=!0,o(m.before_update),m.fragment=!!i&&i(m.ctx),t.target){if(t.hydrate){const e=b(t.target);m.fragment&&m.fragment.l(e),e.forEach(f)}else m.fragment&&m.fragment.c();t.intro&&j(a.$$.fragment),Y(a,t.target,t.anchor),R()}A(l)}class K{$destroy(){_(this,1),this.$destroy=e}$on(e,a){const t=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return t.push(a),()=>{const e=t.indexOf(a);-1!==e&&t.splice(e,1)}}$set(){}}function J(a){let t,r,o,c,i,n,s,d,E,O,I,k,D,A,P,T,S,L,$,x,N,G,M,H,R,U,z,j,q,F,B,Y,_,V,W;return{c(){t=m("header"),r=m("nav"),o=m("ul"),c=m("li"),i=m("a"),n=u("Tan Li Hau"),s=p(),d=m("li"),E=m("a"),O=u("About"),I=p(),k=m("li"),D=m("a"),A=u("Writings"),P=p(),T=m("li"),S=m("a"),L=u("Talks"),$=p(),x=m("li"),N=m("a"),G=u("Notes"),M=p(),H=m("li"),R=m("a"),U=u("Newsletter"),z=p(),j=m("li"),q=m("a"),F=g("svg"),B=g("path"),Y=p(),_=m("a"),V=g("svg"),W=g("path"),this.h()},l(e){t=y(e,"HEADER",{class:!0});var a=b(t);r=y(a,"NAV",{});var h=b(r);o=y(h,"UL",{class:!0});var l=b(o);c=y(l,"LI",{class:!0});var m=b(c);i=y(m,"A",{href:!0,class:!0});var g=b(i);n=w(g,"Tan Li Hau"),g.forEach(f),m.forEach(f),s=C(l),d=y(l,"LI",{class:!0});var u=b(d);E=y(u,"A",{href:!0,class:!0});var p=b(E);O=w(p,"About"),p.forEach(f),u.forEach(f),I=C(l),k=y(l,"LI",{class:!0});var v=b(k);D=y(v,"A",{href:!0,class:!0});var K=b(D);A=w(K,"Writings"),K.forEach(f),v.forEach(f),P=C(l),T=y(l,"LI",{class:!0});var J=b(T);S=y(J,"A",{href:!0,class:!0});var Q=b(S);L=w(Q,"Talks"),Q.forEach(f),J.forEach(f),$=C(l),x=y(l,"LI",{class:!0});var X=b(x);N=y(X,"A",{href:!0,class:!0});var Z=b(N);G=w(Z,"Notes"),Z.forEach(f),X.forEach(f),M=C(l),H=y(l,"LI",{class:!0});var ee=b(H);R=y(ee,"A",{href:!0,class:!0});var ae=b(R);U=w(ae,"Newsletter"),ae.forEach(f),ee.forEach(f),z=C(l),j=y(l,"LI",{class:!0});var te=b(j);q=y(te,"A",{"aria-label":!0,href:!0,class:!0});var re=b(q);F=y(re,"svg",{viewBox:!0,width:!0,height:!0,class:!0},1);var oe=b(F);B=y(oe,"path",{d:!0},1),b(B).forEach(f),oe.forEach(f),re.forEach(f),Y=C(te),_=y(te,"A",{"aria-label":!0,href:!0,class:!0});var ce=b(_);V=y(ce,"svg",{viewBox:!0,width:!0,height:!0,class:!0},1);var ie=b(V);W=y(ie,"path",{d:!0},1),b(W).forEach(f),ie.forEach(f),ce.forEach(f),te.forEach(f),l.forEach(f),h.forEach(f),a.forEach(f),this.h()},h(){v(i,"href","/"),v(i,"class","svelte-f3e4uo"),v(c,"class","svelte-f3e4uo"),v(E,"href","/about"),v(E,"class","svelte-f3e4uo"),v(d,"class","svelte-f3e4uo"),v(D,"href","/blogs"),v(D,"class","svelte-f3e4uo"),v(k,"class","svelte-f3e4uo"),v(S,"href","/talks"),v(S,"class","svelte-f3e4uo"),v(T,"class","svelte-f3e4uo"),v(N,"href","/notes"),v(N,"class","svelte-f3e4uo"),v(x,"class","svelte-f3e4uo"),v(R,"href","/newsletter"),v(R,"class","svelte-f3e4uo"),v(H,"class","svelte-f3e4uo"),v(B,"d","M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66\n    10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5\n    4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"),v(F,"viewBox","0 0 24 24"),v(F,"width","1em"),v(F,"height","1em"),v(F,"class","svelte-f3e4uo"),v(q,"aria-label","Twitter account"),v(q,"href","https://twitter.com/lihautan"),v(q,"class","svelte-f3e4uo"),v(W,"d","M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0\n    0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07\n    5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65\n    5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42\n    3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"),v(V,"viewBox","0 0 24 24"),v(V,"width","1em"),v(V,"height","1em"),v(V,"class","svelte-f3e4uo"),v(_,"aria-label","Github account"),v(_,"href","https://github.com/tanhauhau"),v(_,"class","svelte-f3e4uo"),v(j,"class","social svelte-f3e4uo"),v(o,"class","svelte-f3e4uo"),v(t,"class","svelte-f3e4uo")},m(e,a){l(e,t,a),h(t,r),h(r,o),h(o,c),h(c,i),h(i,n),h(o,s),h(o,d),h(d,E),h(E,O),h(o,I),h(o,k),h(k,D),h(D,A),h(o,P),h(o,T),h(T,S),h(S,L),h(o,$),h(o,x),h(x,N),h(N,G),h(o,M),h(o,H),h(H,R),h(R,U),h(o,z),h(o,j),h(j,q),h(q,F),h(F,B),h(j,Y),h(j,_),h(_,V),h(V,W)},p:e,i:e,o:e,d(e){e&&f(t)}}}class Q extends K{constructor(e){super(),W(this,e,null,J,i,{})}}function X(a){let t,r,o,c,i,n,s,d,g,E,O,k,D,A,P,T,S,L,$,x;return{c(){t=m("div"),r=m("h1"),o=u("Subscribe to my newsletter"),c=p(),i=m("h2"),n=u("Get the latest blog posts and project updates delivered right to your inbox"),s=p(),d=m("form"),g=m("div"),E=m("input"),O=p(),k=m("input"),A=p(),P=m("input"),T=p(),S=m("p"),L=u("Powered by Buttondown."),this.h()},l(e){t=y(e,"DIV",{class:!0});var a=b(t);r=y(a,"H1",{});var h=b(r);o=w(h,"Subscribe to my newsletter"),h.forEach(f),c=C(a),i=y(a,"H2",{class:!0});var l=b(i);n=w(l,"Get the latest blog posts and project updates delivered right to your inbox"),l.forEach(f),s=C(a),d=y(a,"FORM",{action:!0,method:!0,target:!0,onsubmit:!0,class:!0});var m=b(d);g=y(m,"DIV",{class:!0});var u=b(g);E=y(u,"INPUT",{type:!0,name:!0,id:!0,"aria-label":!0,placeholder:!0,class:!0}),O=C(u),k=y(u,"INPUT",{type:!0,value:!0,disabled:!0,class:!0}),u.forEach(f),A=C(m),P=y(m,"INPUT",{type:!0,value:!0,name:!0,class:!0}),T=C(m),S=y(m,"P",{class:!0});var p=b(S);L=w(p,"Powered by Buttondown."),p.forEach(f),m.forEach(f),a.forEach(f),this.h()},h(){v(i,"class","svelte-1k1s1co"),v(E,"type","email"),v(E,"name","email"),v(E,"id","bd-email"),v(E,"aria-label","email address"),v(E,"placeholder","youremail@example.com"),v(E,"class","svelte-1k1s1co"),v(k,"type","submit"),k.value="Subscribe",k.disabled=D=!a[0],v(k,"class","svelte-1k1s1co"),v(g,"class","form-item svelte-1k1s1co"),v(P,"type","hidden"),P.value="1",v(P,"name","embed"),v(P,"class","svelte-1k1s1co"),v(S,"class","svelte-1k1s1co"),v(d,"action","https://buttondown.email/api/emails/embed-subscribe/lihautan"),v(d,"method","post"),v(d,"target","popupwindow"),v(d,"onsubmit","window.open('https://buttondown.email/lihautan', 'popupwindow')"),v(d,"class","embeddable-buttondown-form"),v(t,"class","form svelte-1k1s1co")},m(e,f){var m,u,p,v;l(e,t,f),h(t,r),h(r,o),h(t,c),h(t,i),h(i,n),h(t,s),h(t,d),h(d,g),h(g,E),I(E,a[0]),h(g,O),h(g,k),h(d,A),h(d,P),h(d,T),h(d,S),h(S,L),$||(m=E,u="input",p=a[1],m.addEventListener(u,p,v),x=()=>m.removeEventListener(u,p,v),$=!0)},p(e,[a]){1&a&&E.value!==e[0]&&I(E,e[0]),1&a&&D!==(D=!e[0])&&(k.disabled=D)},i:e,o:e,d(e){e&&f(t),$=!1,x()}}}function Z(e,a,t){let r;return[r,function(){r=this.value,t(0,r)}]}class ee extends K{constructor(e){super(),W(this,e,Z,X,i,{})}}function ae(e){return P(()=>(setTimeout(()=>{if(window.innerWidth>1080){const e=document.createElement("script");e.async=!0,e.type="text/javascript",e.src="//cdn.carbonads.com/carbon.js?serve=CE7ITK3E&placement=lihautancom",e.id="_carbonads_js",document.body.appendChild(e)}},5e3),()=>{try{const e=document.getElementById("carbonads");e.parentNode.removeChild(e)}catch(e){}})),[]}class te extends K{constructor(e){super(),W(this,e,ae,null,i,{})}}function re(e,a,t){const r=e.slice();return r[6]=a[t],r}function oe(e,a,t){const r=e.slice();return r[6]=a[t],r}function ce(e){let a,t;return{c(){a=m("meta"),this.h()},l(e){a=y(e,"META",{name:!0,content:!0}),this.h()},h(){v(a,"name","keywords"),v(a,"content",t=e[6])},m(e,t){l(e,a,t)},p(e,r){4&r&&t!==(t=e[6])&&v(a,"content",t)},d(e){e&&f(a)}}}function ie(e){let a,t,r=e[6]+"";return{c(){a=m("span"),t=u(r),this.h()},l(e){a=y(e,"SPAN",{class:!0});var o=b(a);t=w(o,r),o.forEach(f),this.h()},h(){v(a,"class","svelte-9tqnza")},m(e,r){l(e,a,r),h(a,t)},p(e,a){4&a&&r!==(r=e[6]+"")&&O(t,r)},d(e){e&&f(a)}}}function ne(e){let a,t,r,o,c,i,g,I,D,A,P,T,S,L,$,x,N,G,M,H,R,U,z,V,W,K,J,X,Z,ae,ne,se,he,le,fe,de,me=`<script type="application/ld+json">${JSON.stringify({"@context":"https://schema.org","@type":"Article",author:e[3],copyrightHolder:e[3],copyrightYear:"2020",creator:e[3],publisher:e[3],description:e[1],headline:e[0],name:e[0],inLanguage:"en"})}<\/script>`,ge=`<script type="application/ld+json">${JSON.stringify({"@context":"https://schema.org","@type":"BreadcrumbList",description:"Breadcrumbs list",name:"Breadcrumbs",itemListElement:[{"@type":"ListItem",item:{"@id":"https://lihautan.com",name:"Homepage"},name:"Homepage",position:1},{"@type":"ListItem",item:{"@id":"https%3A%2F%2Flihautan.com%2Fgit-gudder",name:e[0]},name:e[0],position:2}]})}<\/script>`;document.title=a=e[0]+" | Tan Li Hau";let ue=e[2],pe=[];for(let a=0;a<ue.length;a+=1)pe[a]=ce(oe(e,ue,a));z=new Q({});let Ee=e[2],ve=[];for(let a=0;a<Ee.length;a+=1)ve[a]=ie(re(e,Ee,a));const be=e[5].default,ye=function(e,a,t,r){if(e){const o=n(e,a,t,r);return e[0](o)}}(be,e,e[4],null);return he=new ee({}),fe=new te({}),{c(){t=m("meta"),r=m("meta"),o=m("meta"),c=m("meta"),i=m("meta"),g=m("meta"),I=m("meta"),D=m("meta"),A=m("meta"),P=m("meta"),T=m("meta");for(let e=0;e<pe.length;e+=1)pe[e].c();S=m("meta"),L=m("meta"),x=E(),G=E(),M=p(),H=m("a"),R=u("Skip to content"),U=p(),F(z.$$.fragment),V=p(),W=m("main"),K=m("h1"),J=u(e[0]),X=p();for(let e=0;e<ve.length;e+=1)ve[e].c();Z=p(),ae=m("article"),ye&&ye.c(),ne=p(),se=m("footer"),F(he.$$.fragment),le=p(),F(fe.$$.fragment),this.h()},l(a){const n=function(e,a=document.body){return Array.from(a.querySelectorAll(e))}('[data-svelte="svelte-15e3uyc"]',document.head);t=y(n,"META",{name:!0,content:!0}),r=y(n,"META",{name:!0,content:!0}),o=y(n,"META",{name:!0,content:!0}),c=y(n,"META",{name:!0,content:!0}),i=y(n,"META",{name:!0,content:!0}),g=y(n,"META",{name:!0,content:!0}),I=y(n,"META",{name:!0,content:!0}),D=y(n,"META",{name:!0,content:!0}),A=y(n,"META",{name:!0,content:!0}),P=y(n,"META",{name:!0,content:!0}),T=y(n,"META",{name:!0,content:!0});for(let e=0;e<pe.length;e+=1)pe[e].l(n);S=y(n,"META",{itemprop:!0,content:!0}),L=y(n,"META",{itemprop:!0,content:!0}),x=E(),G=E(),n.forEach(f),M=C(a),H=y(a,"A",{href:!0,class:!0});var s=b(H);R=w(s,"Skip to content"),s.forEach(f),U=C(a),B(z.$$.fragment,a),V=C(a),W=y(a,"MAIN",{id:!0,class:!0});var h=b(W);K=y(h,"H1",{});var l=b(K);J=w(l,e[0]),l.forEach(f),X=C(h);for(let e=0;e<ve.length;e+=1)ve[e].l(h);Z=C(h),ae=y(h,"ARTICLE",{});var d=b(ae);ye&&ye.l(d),d.forEach(f),h.forEach(f),ne=C(a),se=y(a,"FOOTER",{class:!0});var m=b(se);B(he.$$.fragment,m),le=C(m),B(fe.$$.fragment,m),m.forEach(f),this.h()},h(){v(t,"name","description"),v(t,"content",e[1]),v(r,"name","image"),v(r,"content",null),v(o,"name","og:image"),v(o,"content",null),v(c,"name","og:title"),v(c,"content",e[0]),v(i,"name","og:description"),v(i,"content",e[1]),v(g,"name","og:type"),v(g,"content","website"),v(I,"name","twitter:card"),v(I,"content","summary_large_image"),v(D,"name","twitter:creator"),v(D,"content","@lihautan"),v(A,"name","twitter:title"),v(A,"content",e[0]),v(P,"name","twitter:description"),v(P,"content",e[1]),v(T,"name","twitter:image"),v(T,"content",null),v(S,"itemprop","url"),v(S,"content","https%3A%2F%2Flihautan.com%2Fgit-gudder"),v(L,"itemprop","image"),v(L,"content",null),$=new k(x),N=new k(G),v(H,"href","#content"),v(H,"class","skip svelte-9tqnza"),v(W,"id","content"),v(W,"class","blog svelte-9tqnza"),v(se,"class","svelte-9tqnza")},m(e,a){h(document.head,t),h(document.head,r),h(document.head,o),h(document.head,c),h(document.head,i),h(document.head,g),h(document.head,I),h(document.head,D),h(document.head,A),h(document.head,P),h(document.head,T);for(let e=0;e<pe.length;e+=1)pe[e].m(document.head,null);h(document.head,S),h(document.head,L),$.m(me,document.head),h(document.head,x),N.m(ge,document.head),h(document.head,G),l(e,M,a),l(e,H,a),h(H,R),l(e,U,a),Y(z,e,a),l(e,V,a),l(e,W,a),h(W,K),h(K,J),h(W,X);for(let e=0;e<ve.length;e+=1)ve[e].m(W,null);h(W,Z),h(W,ae),ye&&ye.m(ae,null),l(e,ne,a),l(e,se,a),Y(he,se,null),h(se,le),Y(fe,se,null),de=!0},p(e,[r]){if((!de||1&r)&&a!==(a=e[0]+" | Tan Li Hau")&&(document.title=a),(!de||2&r)&&v(t,"content",e[1]),(!de||1&r)&&v(c,"content",e[0]),(!de||2&r)&&v(i,"content",e[1]),(!de||1&r)&&v(A,"content",e[0]),(!de||2&r)&&v(P,"content",e[1]),4&r){let a;for(ue=e[2],a=0;a<ue.length;a+=1){const t=oe(e,ue,a);pe[a]?pe[a].p(t,r):(pe[a]=ce(t),pe[a].c(),pe[a].m(S.parentNode,S))}for(;a<pe.length;a+=1)pe[a].d(1);pe.length=ue.length}if((!de||3&r)&&me!==(me=`<script type="application/ld+json">${JSON.stringify({"@context":"https://schema.org","@type":"Article",author:e[3],copyrightHolder:e[3],copyrightYear:"2020",creator:e[3],publisher:e[3],description:e[1],headline:e[0],name:e[0],inLanguage:"en"})}<\/script>`)&&$.p(me),(!de||1&r)&&ge!==(ge=`<script type="application/ld+json">${JSON.stringify({"@context":"https://schema.org","@type":"BreadcrumbList",description:"Breadcrumbs list",name:"Breadcrumbs",itemListElement:[{"@type":"ListItem",item:{"@id":"https://lihautan.com",name:"Homepage"},name:"Homepage",position:1},{"@type":"ListItem",item:{"@id":"https%3A%2F%2Flihautan.com%2Fgit-gudder",name:e[0]},name:e[0],position:2}]})}<\/script>`)&&N.p(ge),(!de||1&r)&&O(J,e[0]),4&r){let a;for(Ee=e[2],a=0;a<Ee.length;a+=1){const t=re(e,Ee,a);ve[a]?ve[a].p(t,r):(ve[a]=ie(t),ve[a].c(),ve[a].m(W,Z))}for(;a<ve.length;a+=1)ve[a].d(1);ve.length=Ee.length}ye&&ye.p&&16&r&&s(ye,be,e,e[4],r,null,null)},i(e){de||(j(z.$$.fragment,e),j(ye,e),j(he.$$.fragment,e),j(fe.$$.fragment,e),de=!0)},o(e){q(z.$$.fragment,e),q(ye,e),q(he.$$.fragment,e),q(fe.$$.fragment,e),de=!1},d(e){f(t),f(r),f(o),f(c),f(i),f(g),f(I),f(D),f(A),f(P),f(T),d(pe,e),f(S),f(L),f(x),e&&$.d(),f(G),e&&N.d(),e&&f(M),e&&f(H),e&&f(U),_(z,e),e&&f(V),e&&f(W),d(ve,e),ye&&ye.d(e),e&&f(ne),e&&f(se),_(he),_(fe)}}}function se(e,a,t){let{title:r=""}=a,{description:o=""}=a,{tags:c=[]}=a;const i={"@type":"Person",name:"Tan Li Hau"};let{$$slots:n={},$$scope:s}=a;return e.$set=e=>{"title"in e&&t(0,r=e.title),"description"in e&&t(1,o=e.description),"tags"in e&&t(2,c=e.tags),"$$scope"in e&&t(4,s=e.$$scope)},[r,o,c,i,s,n]}class he extends K{constructor(e){super(),W(this,e,se,ne,i,{title:0,description:1,tags:2})}}function le(a){let t,r,o,c,i,n,s,d,g,E,O,I,k,D,A,P,T,S,L,$,x,N,G,M,H,R,U,z,j,q,F,B,Y,_,V,W,K,J,Q,X,Z,ee,ae,te,re,oe,ce,ie,ne,se,he,le,fe,de,me,ge,ue,pe,Ee,ve,be,ye,we,Ce,Oe,Ie,ke,De,Ae,Pe,Te,Se,Le,$e,xe,Ne,Ge,Me,He,Re,Ue,ze,je,qe,Fe,Be,Ye,_e,Ve,We,Ke,Je,Qe,Xe,Ze,ea,aa,ta,ra,oa,ca,ia,na,sa,ha,la,fa,da,ma,ga,ua,pa,Ea,va,ba,ya,wa,Ca,Oa,Ia,ka,Da,Aa,Pa,Ta,Sa,La,$a,xa,Na,Ga,Ma,Ha,Ra,Ua,za,ja,qa,Fa,Ba,Ya,_a,Va,Wa,Ka,Ja,Qa,Xa,Za,et,at,tt,rt,ot,ct,it,nt,st,ht,lt,ft,dt,mt,gt,ut,pt,Et,vt,bt,yt,wt,Ct,Ot,It,kt,Dt,At,Pt,Tt,St,Lt,$t,xt,Nt,Gt,Mt,Ht,Rt,Ut,zt,jt,qt,Ft,Bt,Yt,_t,Vt,Wt,Kt,Jt,Qt,Xt,Zt,er,ar,tr,rr,or,cr,ir,nr,sr,hr,lr,fr,dr,mr,gr,ur,pr,Er,vr,br,yr,wr,Cr,Or,Ir,kr,Dr,Ar,Pr,Tr,Sr,Lr,$r,xr,Nr,Gr,Mr,Hr,Rr,Ur,zr,jr,qr,Fr,Br,Yr,_r,Vr,Wr,Kr,Jr,Qr,Xr,Zr,eo,ao,to,ro,oo,co,io,no,so,ho,lo,fo,mo,go,uo,po,Eo,vo,bo,yo,wo,Co,Oo,Io,ko,Do,Ao,Po,To,So,Lo,$o,xo,No,Go,Mo,Ho,Ro,Uo,zo,jo,qo,Fo,Bo,Yo,_o,Vo,Wo,Ko,Jo,Qo,Xo,Zo,ec,ac,tc,rc,oc,cc,ic,nc,sc,hc,lc,fc,dc,mc,gc,uc,pc,Ec,vc,bc,yc,wc,Cc,Oc,Ic,kc,Dc,Ac,Pc,Tc,Sc,Lc,$c,xc,Nc,Gc,Mc,Hc,Rc,Uc,zc,jc,qc,Fc,Bc,Yc,_c,Vc,Wc,Kc,Jc,Qc,Xc,Zc,ei,ai,ti,ri,oi,ci,ii,ni,si,hi,li,fi,di,mi,gi,ui,pi,Ei,vi,bi,yi,wi,Ci,Oi,Ii,ki,Di,Ai,Pi,Ti,Si,Li,$i,xi,Ni,Gi,Mi,Hi,Ri,Ui,zi,ji,qi,Fi,Bi,Yi,_i,Vi,Wi,Ki,Ji,Qi,Xi,Zi,en,an,tn,rn,on,cn,nn,sn,hn,ln,fn,dn,mn,gn,un,pn,En,vn,bn,yn,wn,Cn,On,In,kn,Dn,An,Pn,Tn,Sn,Ln,$n,xn,Nn,Gn,Mn,Hn,Rn,Un,zn,jn,qn,Fn,Bn,Yn,_n,Vn,Wn,Kn,Jn,Qn,Xn,Zn,es,as,ts,rs,os,cs,is,ns,ss,hs,ls,fs,ds,ms,gs,us,ps,Es,vs,bs,ys,ws,Cs,Os,Is,ks,Ds,As,Ps,Ts,Ss,Ls,$s,xs,Ns,Gs,Ms,Hs,Rs,Us,zs,js,qs,Fs,Bs,Ys,_s,Vs,Ws,Ks,Js,Qs,Xs,Zs,eh,ah,th,rh,oh,ch,ih,nh,sh,hh,lh,fh,dh,mh,gh,uh,ph,Eh,vh,bh,yh,wh,Ch,Oh,Ih,kh,Dh,Ah,Ph,Th,Sh,Lh,$h,xh,Nh,Gh,Mh,Hh,Rh,Uh,zh,jh,qh,Fh,Bh,Yh,_h,Vh,Wh,Kh,Jh,Qh,Xh,Zh,el,al,tl,rl,ol,cl,il,nl,sl,hl,ll,fl,dl,ml,gl,ul,pl,El,vl,bl,yl,wl,Cl,Ol,Il,kl,Dl,Al,Pl,Tl,Sl,Ll,$l,xl,Nl,Gl,Ml,Hl,Rl,Ul,zl,jl,ql,Fl,Bl,Yl,_l,Vl,Wl,Kl,Jl,Ql,Xl,Zl,ef,af,tf,rf,of,cf,nf,sf,hf,lf,ff,df,mf,gf,uf,pf,Ef,vf,bf,yf,wf,Cf,Of,If,kf,Df,Af,Pf,Tf,Sf,Lf,$f,xf,Nf,Gf,Mf,Hf,Rf,Uf,zf,jf,qf,Ff,Bf,Yf,_f,Vf,Wf,Kf,Jf,Qf,Xf,Zf,ed,ad,td,rd,od,cd,id,nd,sd,hd,ld,fd,dd,md,gd,ud,pd,Ed,vd,bd,yd,wd,Cd,Od,Id,kd,Dd,Ad,Pd,Td,Sd,Ld,$d,xd,Nd,Gd,Md,Hd,Rd,Ud,zd,jd,qd,Fd,Bd,Yd,_d,Vd,Wd,Kd,Jd,Qd,Xd,Zd,em,am,tm,rm,om,cm,im,nm,sm,hm,lm,fm,dm,mm,gm,um,pm,Em,vm,bm,ym,wm,Cm,Om,Im,km,Dm,Am,Pm,Tm,Sm,Lm,$m,xm,Nm,Gm,Mm,Hm,Rm,Um,zm,jm,qm,Fm,Bm,Ym,_m,Vm,Wm,Km,Jm,Qm,Xm,Zm,eg,ag,tg,rg,og,cg,ig,ng,sg,hg,lg,fg,dg,mg,gg,ug,pg,Eg,vg,bg,yg,wg,Cg,Og,Ig,kg,Dg,Ag,Pg,Tg,Sg,Lg,$g,xg,Ng,Gg,Mg,Hg,Rg,Ug,zg,jg,qg,Fg,Bg,Yg,_g,Vg,Wg,Kg,Jg,Qg,Xg,Zg,eu,au,tu,ru,ou,cu,iu,nu,su,hu,lu,fu,du,mu,gu,uu,pu,Eu,vu,bu,yu,wu,Cu,Ou,Iu,ku,Du,Au,Pu,Tu,Su,Lu,$u,xu,Nu,Gu,Mu,Hu,Ru,Uu,zu,ju,qu,Fu,Bu,Yu,_u,Vu,Wu,Ku,Ju,Qu,Xu,Zu,ep,ap,tp,rp,op,cp,ip,np,sp,hp,lp,fp,dp,mp,gp,up,pp,Ep,vp,bp,yp,wp,Cp,Op,Ip,kp,Dp,Ap,Pp,Tp,Sp,Lp,$p,xp,Np,Gp,Mp,Hp,Rp,Up,zp,jp,qp,Fp,Bp,Yp,_p,Vp,Wp,Kp,Jp,Qp,Xp,Zp,eE,aE,tE,rE,oE,cE,iE;return{c(){t=m("section"),r=m("ul"),o=m("li"),c=m("a"),i=u("Disclaimer"),n=m("li"),s=m("a"),d=u("git merge"),g=m("ul"),E=m("li"),O=m("a"),I=u("Fast-forward merge"),k=m("li"),D=m("a"),A=u("Non Fast-forward merge"),P=m("li"),T=m("a"),S=u("git pull"),L=m("li"),$=m("a"),x=u("git reset"),N=m("li"),G=m("a"),M=u("git cherry-pick"),H=m("li"),R=m("a"),U=u("git revert"),z=m("li"),j=m("a"),q=u("git rebase"),F=m("ul"),B=m("li"),Y=m("a"),_=u("git rebase --interactive"),V=m("ul"),W=m("li"),K=m("a"),J=u("pick"),Q=m("li"),X=m("a"),Z=u("drop"),ee=m("li"),ae=m("a"),te=u("squash & fixup"),re=m("li"),oe=m("a"),ce=u("break"),ie=m("li"),ne=m("a"),se=u("edit"),he=m("li"),le=m("a"),fe=u("git pull --rebase"),de=m("li"),me=m("a"),ge=u("git rebase a shared branch"),ue=m("li"),pe=m("a"),Ee=u("git log"),ve=m("ul"),be=m("li"),ye=m("a"),we=u("--since, --after, --until, --before"),Ce=m("li"),Oe=m("a"),Ie=u("--grep"),ke=m("li"),De=m("a"),Ae=u("--invert-grep"),Pe=m("li"),Te=m("a"),Se=u("--all-match"),Le=m("li"),$e=m("a"),xe=u("--min-parents, --max-parents, --merges, --no-merges"),Ne=m("li"),Ge=m("a"),Me=u("--first-parent"),He=m("li"),Re=m("a"),Ue=u("git reflog"),ze=m("li"),je=m("a"),qe=u("git bisect"),Fe=m("li"),Be=m("a"),Ye=u("Summary"),_e=p(),Ve=m("p"),We=u("This week in React Knowledgeable, I did a sharing on Git commands."),Ke=p(),Je=m("p"),Qe=u("The title of the talk was called "),Xe=m("strong"),Ze=u('"Git Gudder"'),ea=u(', because almost a year ago I did a lightning sharing on "Git Gud", '),aa=m("em"),ta=u("(Get Good)"),ra=u(', this follow up sharing used the comparative of "Git Gud", therefore, "Git Gudder".'),oa=p(),ca=m("blockquote"),ia=m("p"),na=u('Will there be a "Git Guddest"? 🤔'),sa=p(),ha=m("section"),la=m("h2"),fa=m("a"),da=u("Disclaimer"),ma=p(),ga=m("p"),ua=u("I am by no means a Git master or anywhere near mastering Git. I do google or "),pa=m("a"),Ea=u("refer to the docs"),va=u(" whenever I am unsure of the commands. In this talk, I listed out all the common history manipulation commands Git provides. I hoped that, with it, we are aware of what is available in our toolbox. So, we can look for it whenever we need it."),ba=p(),ya=m("section"),wa=m("h2"),Ca=m("a"),Oa=u("git merge"),Ia=p(),ka=m("p"),Da=u("There's 2 kind of "),Aa=m("code"),Pa=u("git merge"),Ta=u(", the "),Sa=m("strong"),La=u("fast-forward"),$a=u(" and "),xa=m("strong"),Na=u("non fast-forward"),Ga=u("."),Ma=p(),Ha=m("section"),Ra=m("h3"),Ua=m("a"),za=u("Fast-forward merge"),ja=p(),qa=m("p"),Fa=u("Merging "),Ba=m("code"),Ya=u("master"),_a=u(" into "),Va=m("code"),Wa=u("branch A"),Ka=u(":"),Ja=p(),Qa=m("p"),Xa=m("img"),Za=p(),et=m("div"),at=u("Fast-forward merge"),tt=p(),rt=m("section"),ot=m("h3"),ct=m("a"),it=u("Non Fast-forward merge"),nt=p(),st=m("p"),ht=u("Merging "),lt=m("code"),ft=u("master"),dt=u(" into "),mt=m("code"),gt=u("branch A"),ut=u(":"),pt=p(),Et=m("p"),vt=m("img"),bt=p(),yt=m("div"),wt=u("Non fast-forward merge"),Ct=p(),Ot=m("p"),It=u("Non fast-forward merge will create an extra commit that merges 2 branches."),kt=p(),Dt=m("section"),At=m("h3"),Pt=m("a"),Tt=u("git pull"),St=p(),Lt=m("p"),$t=u("By default, "),xt=m("code"),Nt=u("git pull"),Gt=u(" is "),Mt=m("code"),Ht=u("git fetch origin branch"),Rt=u(" + "),Ut=m("code"),zt=u("git merge origin/branch"),jt=u("."),qt=p(),Ft=m("p"),Bt=m("img"),Yt=p(),_t=m("div"),Vt=u("git pull"),Wt=p(),Kt=m("section"),Jt=m("h2"),Qt=m("a"),Xt=u("git reset"),Zt=p(),er=m("p"),ar=m("code"),tr=u("git reset --hard"),rr=u(" allows you to change the reference of where your branch is pointing at."),or=p(),cr=m("p"),ir=m("code"),nr=u("git checkout branch-b"),sr=u(", "),hr=m("code"),lr=u("git reset --hard branch-a"),fr=u(", "),dr=m("code"),mr=u("git reset --hard #d"),gr=u(":"),ur=p(),pr=m("p"),Er=m("img"),vr=p(),br=m("div"),yr=u("git reset"),wr=p(),Cr=m("section"),Or=m("h2"),Ir=m("a"),kr=u("git cherry-pick"),Dr=p(),Ar=m("p"),Pr=u("cherry-pick allows you to pick commits from some other branches, tags, or refs."),Tr=p(),Sr=m("p"),Lr=m("code"),$r=u("git checkout branch-b"),xr=u(", "),Nr=m("code"),Gr=u("git cherry-pick branch-a"),Mr=u(":"),Hr=p(),Rr=m("p"),Ur=m("img"),zr=p(),jr=m("div"),qr=u("git cherry-pick"),Fr=p(),Br=m("section"),Yr=m("h2"),_r=m("a"),Vr=u("git revert"),Wr=p(),Kr=m("p"),Jr=m("code"),Qr=u("git revert"),Xr=u(" creates a new commit that reverses the change of the commit that you are reverting."),Zr=p(),eo=m("p"),ao=u("For example, if you accidentally merged "),to=m("code"),ro=u("feat/a"),oo=u(" into "),co=m("code"),io=u("master"),no=u(" branch, you can "),so=m("code"),ho=u("git checkout master"),lo=u(", "),fo=m("code"),mo=u("git revert #1"),go=u(":"),uo=p(),po=m("p"),Eo=m("img"),vo=p(),bo=m("div"),yo=u("git revert"),wo=p(),Co=m("p"),Oo=u("If you know merge master into your "),Io=m("code"),ko=u("feat/a"),Do=u(" branch, you would noticed that all the changes in the branch is gone, because the merge is a fast-forward merge, that includes the revert commit made in the branch:"),Ao=p(),Po=m("p"),To=m("img"),So=p(),Lo=m("div"),$o=u("Merging `master` into `feat/a`"),xo=p(),No=m("p"),Go=u("If you want to recover the changes made in "),Mo=m("code"),Ho=u("feat/a"),Ro=u(", you can "),Uo=m("code"),zo=u("revert"),jo=u(" the "),qo=m("code"),Fo=u("revert"),Bo=u(":"),Yo=p(),_o=m("p"),Vo=m("code"),Wo=u("git revert ~#1"),Ko=u(":"),Jo=p(),Qo=m("p"),Xo=m("img"),Zo=p(),ec=m("div"),ac=u("git revert the revert"),tc=p(),rc=m("p"),oc=u("Now, when you are ready to merge your "),cc=m("code"),ic=u("feat/a"),nc=u(" branch into "),sc=m("code"),hc=u("master"),lc=u(", you get the all the changes in "),fc=m("code"),dc=u("feat/a"),mc=u(", a commit that revert all that, and a commit that reverts the revert commit, which meant, you still have all the changes in "),gc=m("code"),uc=u("feat/a"),pc=u(" in "),Ec=m("code"),vc=u("master"),bc=u(":"),yc=p(),wc=m("p"),Cc=m("img"),Oc=p(),Ic=m("div"),kc=u("Merging changes back to master"),Dc=p(),Ac=m("section"),Pc=m("h2"),Tc=m("a"),Sc=u("git rebase"),Lc=p(),$c=m("p"),xc=m("code"),Nc=u("git rebase"),Gc=u(' allows you to "move" commits to a different "base".'),Mc=p(),Hc=m("p"),Rc=u("For example, you branched out "),Uc=m("code"),zc=u("branch-a"),jc=u(" from "),qc=m("code"),Fc=u("master"),Bc=u(" a while ago, and "),Yc=m("code"),_c=u("master"),Vc=u(" has made a few more commits. But if you merge your branch into master now, it would be a non fast-forward merge, creating an extra commit to the history. If you want a clean, one-line history, you can do a "),Wc=m("code"),Kc=u("rebase"),Jc=u(", replaying commits that you have made in "),Qc=m("code"),Xc=u("branch-a"),Zc=u(" on top of the latest "),ei=m("code"),ai=u("master"),ti=u("."),ri=p(),oi=m("p"),ci=m("code"),ii=u("git checkout branch-a"),ni=u(", "),si=m("code"),hi=u("git rebase master"),li=u(":"),fi=p(),di=m("p"),mi=m("img"),gi=p(),ui=m("div"),pi=u("git rebase"),Ei=p(),vi=m("p"),bi=m("code"),yi=u("git rebase"),wi=u(" does not have to be on top of the branch that you branched out, you can rebase to anywhere:"),Ci=p(),Oi=m("p"),Ii=m("code"),ki=u("git checkout branch-a"),Di=u(", "),Ai=m("code"),Pi=u("git rebase --onto branch-b master branch-a"),Ti=u(":"),Si=p(),Li=m("p"),$i=m("img"),xi=p(),Ni=m("div"),Gi=u("git rebase"),Mi=p(),Hi=m("p"),Ri=u("There's 3 reference point you should know when doing a git rebase:"),Ui=p(),zi=m("ul"),ji=m("li"),qi=m("code"),Fi=u("<new base>"),Bi=p(),Yi=m("li"),_i=m("code"),Vi=u("<upstream>"),Wi=p(),Ki=m("li"),Ji=m("code"),Qi=u("<branch>"),Xi=p(),Zi=m("p"),en=m("picture"),an=m("source"),tn=m("source"),rn=m("img"),on=p(),cn=m("div"),nn=u("git rebase"),sn=p(),hn=m("p"),ln=u("Here are a few things you should know:"),fn=p(),dn=m("ul"),mn=m("li"),gn=m("code"),un=u("git rebase"),pn=u(" will replay the commits from "),En=m("code"),vn=u("<upstream>"),bn=u(" to "),yn=m("code"),wn=u("<branch>"),Cn=u(" onto "),On=m("code"),In=u("<new base>"),kn=u("."),Dn=p(),An=m("li"),Pn=u("If you specify "),Tn=m("code"),Sn=u("<upstream>"),Ln=u(" as a branch name, "),$n=m("code"),xn=u("git rebase"),Nn=u(" will replay commits from the common ancestor of "),Gn=m("code"),Mn=u("<upstream>"),Hn=u(" and "),Rn=m("code"),Un=u("<branch>"),zn=u(" to "),jn=m("code"),qn=u("<branch>"),Fn=u("."),Bn=p(),Yn=m("li"),_n=u("If you do not specify "),Vn=m("code"),Wn=u("<branch>"),Kn=u(", the default is the "),Jn=m("code"),Qn=u("HEAD"),Xn=u(", current commit you are at now."),Zn=p(),es=m("li"),as=u("If you do not specify "),ts=m("code"),rs=u("--onto <new base>"),os=u(", the new base will be default to "),cs=m("code"),is=u("<upsttream>"),ns=u(", that's why "),ss=m("code"),hs=u("git rebase master"),ls=u(" is equivalent to "),fs=m("code"),ds=u("git rebase --onto master master"),ms=u("."),gs=p(),us=m("li"),ps=u("If you do not specify "),Es=m("code"),vs=u("<upstream>"),bs=u(", it will be the upstream of the current branch. So "),ys=m("code"),ws=u("git rebase"),Cs=u(" is equivalent to "),Os=m("code"),Is=u("git rebase <origin/current-branch>"),ks=u("."),Ds=p(),As=m("section"),Ps=m("h3"),Ts=m("a"),Ss=u("git rebase --interactive"),Ls=p(),$s=m("p"),xs=m("code"),Ns=u("git rebase"),Gs=u(" has an interactive mode, which allows you to specify instructions while replaying commits during a rebase."),Ms=p(),Hs=m("p"),Rs=m("picture"),Us=m("source"),zs=m("source"),js=m("img"),qs=p(),Fs=m("div"),Bs=u("git rebase interactive"),Ys=p(),_s=m("p"),Vs=u("When you run "),Ws=m("code"),Ks=u("git rebase --interactive"),Js=u(", git will prompt you with an editor to edit the instructions. In it, you will see a list of commits that will be replayed:"),Qs=p(),Xs=m("pre"),Zs=p(),eh=m("section"),ah=m("h4"),th=m("a"),rh=u("pick"),oh=p(),ch=m("p"),ih=u("The default instruction. Will just use the commit while replaying:"),nh=p(),sh=m("p"),hh=m("picture"),lh=m("source"),fh=m("source"),dh=m("img"),mh=p(),gh=m("pre"),uh=p(),ph=m("section"),Eh=m("h4"),vh=m("a"),bh=u("drop"),yh=p(),wh=m("p"),Ch=u("Drop will omit the commit:"),Oh=p(),Ih=m("p"),kh=m("picture"),Dh=m("source"),Ah=m("source"),Ph=m("img"),Th=p(),Sh=m("pre"),Lh=p(),$h=m("section"),xh=m("h4"),Nh=m("a"),Gh=u("squash & fixup"),Mh=p(),Hh=m("p"),Rh=u("Squash & Fixup will combine your commit with the previous commit, the only difference is that with "),Uh=m("code"),zh=u("squash"),jh=u(", git will prompt you to edit the commit message of the combined commit, while "),qh=m("code"),Fh=u("fixup"),Bh=u(" will drop the commit of the "),Yh=m("code"),_h=u("fixup"),Vh=u("ed commit."),Wh=p(),Kh=m("p"),Jh=m("picture"),Qh=m("source"),Xh=m("source"),Zh=m("img"),el=p(),al=m("pre"),tl=p(),rl=m("section"),ol=m("h4"),cl=m("a"),il=u("break"),nl=p(),sl=m("p"),hl=u("Pause the rebase. You can do add more commits here if you want. When you are done, make sure that your workspace and stage is clean, run "),ll=m("code"),fl=u("git rebase --continue"),dl=u(" to continue."),ml=p(),gl=m("p"),ul=m("picture"),pl=m("source"),El=m("source"),vl=m("img"),bl=p(),yl=m("pre"),wl=p(),Cl=m("section"),Ol=m("h4"),Il=m("a"),kl=u("edit"),Dl=p(),Al=m("p"),Pl=u("Pause the rebase at the commit that you are editing, before the commit has been commited. You can add, remove or ammend your files before continue the rebase process."),Tl=p(),Sl=m("p"),Ll=m("picture"),$l=m("source"),xl=m("source"),Nl=m("img"),Gl=p(),Ml=m("pre"),Hl=p(),Rl=m("section"),Ul=m("h3"),zl=m("a"),jl=u("git pull --rebase"),ql=p(),Fl=m("p"),Bl=u("There's a rebase mode for git pull, where it will be "),Yl=m("code"),_l=u("git fetch origin branch"),Vl=u(" + "),Wl=m("code"),Kl=u("git rebase origin/branch"),Jl=u("."),Ql=p(),Xl=m("p"),Zl=m("img"),ef=p(),af=m("div"),tf=u("git pull --rebase"),rf=p(),of=m("section"),cf=m("h3"),nf=m("a"),sf=u("git rebase a shared branch"),hf=p(),lf=m("p"),ff=u("Say "),df=m("code"),mf=u("x"),gf=u(" and "),uf=m("code"),pf=u("y"),Ef=u(" are working on the "),vf=m("code"),bf=u("feat/a"),yf=u(" branch."),wf=p(),Cf=m("p"),Of=m("picture"),If=m("source"),kf=m("source"),Df=m("img"),Af=p(),Pf=m("p"),Tf=m("code"),Sf=u("x"),Lf=u(" decided to rebase the "),$f=m("code"),xf=u("feat/a"),Nf=u(" branch to squash and drop some commits:"),Gf=p(),Mf=m("p"),Hf=m("picture"),Rf=m("source"),Uf=m("source"),zf=m("img"),jf=p(),qf=m("p"),Ff=u("While "),Bf=m("code"),Yf=u("x"),_f=u(" had done that, that was just a part of the whole picture. Because the "),Vf=m("code"),Wf=u("rebase"),Kf=u(" on his local machine changed the git history on his local copy only."),Jf=p(),Qf=m("p"),Xf=m("picture"),Zf=m("source"),ed=m("source"),ad=m("img"),td=p(),rd=m("p"),od=u("To make the change on the remote server as well, "),cd=m("code"),id=u("x"),nd=u(" forced push his branch to the remote server. ("),sd=m("strong"),hd=u("Note:"),ld=u(" You can push without "),fd=m("code"),dd=u("--force"),md=u(" if the origin branch cannot fast-forward merge your local branch)"),gd=p(),ud=m("p"),pd=u("While "),Ed=m("code"),vd=u("y"),bd=u(" on the other hand, did not know about the "),yd=m("code"),wd=u("rebase"),Cd=u(", so when "),Od=m("code"),Id=u("y"),kd=u(" pulled the code, it ended up with a messed up merged of a messed up git history:"),Dd=p(),Ad=m("p"),Pd=m("picture"),Td=m("source"),Sd=m("source"),Ld=m("img"),$d=p(),xd=m("p"),Nd=u("In most cases, there would be a merge conflict, because "),Gd=m("code"),Md=u("x"),Hd=u(" and "),Rd=m("code"),Ud=u("y"),zd=u("'s branch would have made changes on the same file."),jd=p(),qd=m("p"),Fd=u("So, the correct way, if the rebase is necessary, is to notify "),Bd=m("code"),Yd=u("y"),_d=u(" about the rebase, so that "),Vd=m("code"),Wd=u("y"),Kd=u(" can "),Jd=m("code"),Qd=u("git reset --hard"),Xd=u(" his branch to the remote branch."),Zd=p(),em=m("p"),am=m("picture"),tm=m("source"),rm=m("source"),om=m("img"),cm=p(),im=m("p"),nm=u("If unfortunately, at the same time, "),sm=m("code"),hm=u("y"),lm=u(" has made more commits to his local branch, he would have to "),fm=m("code"),dm=u("git rebase"),mm=u(" the new changes onto the remote branch, or "),gm=m("code"),um=u("git cherry-pick"),pm=u(" the new changes after the "),Em=m("code"),vm=u("git reset --hard"),bm=u("."),ym=p(),wm=m("p"),Cm=u("In the companies that I have worked with, forbidden a "),Om=m("code"),Im=u("rebase"),km=u(" on a common branch, especially the "),Dm=m("code"),Am=u("master"),Pm=u(" branch."),Tm=p(),Sm=m("section"),Lm=m("h2"),$m=m("a"),xm=u("git log"),Nm=p(),Gm=m("p"),Mm=u("The go-to command to look at your git history. There's a few options that is worth mentioning, that allow us to search through the sea of commits:"),Hm=p(),Rm=m("section"),Um=m("h3"),zm=m("a"),jm=u("--since, --after, --until, --before"),qm=p(),Fm=m("p"),Bm=u("You can filter out commits within a specific timeframe"),Ym=p(),_m=m("section"),Vm=m("h3"),Wm=m("a"),Km=u("--grep"),Jm=p(),Qm=m("p"),Xm=u("You can filter out commits based on commit message"),Zm=p(),eg=m("section"),ag=m("h3"),tg=m("a"),rg=u("--invert-grep"),og=p(),cg=m("p");ig=u("You can filter out commits that does not match the "),ng=m("code"),sg=u("--grep"),hg=p(),lg=m("section"),fg=m("h3"),dg=m("a"),mg=u("--all-match"),gg=p(),ug=m("p"),pg=m("code"),Eg=u("--grep"),vg=u(" is a "),bg=m("code"),yg=u("OR"),wg=u(" filter, "),Cg=m("code"),Og=u("--all-match"),Ig=u(" make it a "),kg=m("code"),Dg=u("AND"),Ag=u(" filter"),Pg=p(),Tg=m("section"),Sg=m("h3"),Lg=m("a"),$g=u("--min-parents, --max-parents, --merges, --no-merges"),xg=p(),Ng=m("p"),Gg=u("You can specify commits with the number of parents. A simple merge commit has 2 parent, so "),Mg=m("code"),Hg=u("--merge"),Rg=u(" is equivalent to "),Ug=m("code"),zg=u("--min-parents=2"),jg=u("."),qg=p(),Fg=m("section"),Bg=m("h3"),Yg=m("a"),_g=u("--first-parent"),Vg=p(),Wg=m("p"),Kg=u("You can follow only the first parent commit upon seeing a merge commit. This is especially useful when you have merged of branches in, "),Jg=m("code"),Qg=u("--first-parent"),Xg=u(" allow you to filter out only the merge commit and the commit you have made on the current branch."),Zg=p(),eu=m("section"),au=m("h2"),tu=m("a"),ru=u("git reflog"),ou=p(),cu=m("p"),iu=u("The reference log shows you all the "),nu=m("code"),su=u("HEAD"),hu=u(" position you have been to. This is especially useful when you have "),lu=m("code"),fu=u("reset --hard"),du=u(" or "),mu=m("code"),gu=u("rebase"),uu=u(", you can still find back the commit reference that you were at previously, so you can recover them."),pu=p(),Eu=m("section"),vu=m("h2"),bu=m("a"),yu=u("git bisect"),wu=p(),Cu=m("p"),Ou=u("This is a useful command that I am looking forward to use it."),Iu=p(),ku=m("p"),Du=u("Often times when you noticed something has changed / break / less optimised, yet you do not know when this change was introduced into your repository. "),Au=m("code"),Pu=u("git bisect"),Tu=u(" allows you to do binary search on the history, so that you can quickly pin down the commit where the change was introduced."),Su=p(),Lu=m("pre"),$u=p(),xu=m("p"),Nu=u("Once you've specified at least one "),Gu=m("code"),Mu=u("bad"),Hu=u(" and one "),Ru=m("code"),Uu=u("good"),zu=u(" commit, "),ju=m("code"),qu=u("git bisect"),Fu=u(" will find and checkout to a commit in the middle of that range between "),Bu=m("code"),Yu=u("bad"),_u=u(" and "),Vu=m("code"),Wu=u("good"),Ku=u(" and greets you with:"),Ju=p(),Qu=m("pre"),Xu=p(),Zu=m("p"),ep=u("You can know test / verify / profile your code, and specify whether the current commit is a "),ap=m("code"),tp=u("good"),rp=u(" commit or a "),op=m("code"),cp=u("bad"),ip=u(" commit:"),np=p(),sp=m("pre"),hp=p(),lp=m("p"),fp=u("Continue doing it until eventually there's no more commit to inspect. "),dp=m("code"),mp=u("git bisect"),gp=u(" will print out the description of the first bad commit."),up=p(),pp=m("section"),Ep=m("h2"),vp=m("a"),bp=u("Summary"),yp=p(),wp=m("p"),Cp=u("We've gone through the following git commands:"),Op=p(),Ip=m("ul"),kp=m("li"),Dp=u("git merge"),Ap=p(),Pp=m("li"),Tp=u("git reset"),Sp=p(),Lp=m("li"),$p=u("git cherry-pick"),xp=p(),Np=m("li"),Gp=u("git revert"),Mp=p(),Hp=m("li"),Rp=u("git rebase"),Up=p(),zp=m("li"),jp=u("git log"),qp=p(),Fp=m("li"),Bp=u("git reflog"),Yp=p(),_p=m("li"),Vp=u("git bisect"),Wp=p(),Kp=m("p"),Jp=u("Hopefully we are now "),Qp=m("code"),Xp=u("git gudder"),Zp=u(" than before!"),eE=p(),aE=m("hr"),tE=p(),rE=m("p"),oE=u("Related topic: "),cE=m("a"),iE=u("Git commits went missing after a rebase"),this.h()},l(e){t=y(e,"SECTION",{});var a=b(t);r=y(a,"UL",{class:!0,id:!0,role:!0,"aria-label":!0});var h=b(r);o=y(h,"LI",{});var l=b(o);c=y(l,"A",{href:!0});var m=b(c);i=w(m,"Disclaimer"),m.forEach(f),l.forEach(f),n=y(h,"LI",{});var u=b(n);s=y(u,"A",{href:!0});var p=b(s);d=w(p,"git merge"),p.forEach(f),u.forEach(f),g=y(h,"UL",{});var v=b(g);E=y(v,"LI",{});var nE=b(E);O=y(nE,"A",{href:!0});var sE=b(O);I=w(sE,"Fast-forward merge"),sE.forEach(f),nE.forEach(f),k=y(v,"LI",{});var hE=b(k);D=y(hE,"A",{href:!0});var lE=b(D);A=w(lE,"Non Fast-forward merge"),lE.forEach(f),hE.forEach(f),P=y(v,"LI",{});var fE=b(P);T=y(fE,"A",{href:!0});var dE=b(T);S=w(dE,"git pull"),dE.forEach(f),fE.forEach(f),v.forEach(f),L=y(h,"LI",{});var mE=b(L);$=y(mE,"A",{href:!0});var gE=b($);x=w(gE,"git reset"),gE.forEach(f),mE.forEach(f),N=y(h,"LI",{});var uE=b(N);G=y(uE,"A",{href:!0});var pE=b(G);M=w(pE,"git cherry-pick"),pE.forEach(f),uE.forEach(f),H=y(h,"LI",{});var EE=b(H);R=y(EE,"A",{href:!0});var vE=b(R);U=w(vE,"git revert"),vE.forEach(f),EE.forEach(f),z=y(h,"LI",{});var bE=b(z);j=y(bE,"A",{href:!0});var yE=b(j);q=w(yE,"git rebase"),yE.forEach(f),bE.forEach(f),F=y(h,"UL",{});var wE=b(F);B=y(wE,"LI",{});var CE=b(B);Y=y(CE,"A",{href:!0});var OE=b(Y);_=w(OE,"git rebase --interactive"),OE.forEach(f),CE.forEach(f),V=y(wE,"UL",{});var IE=b(V);W=y(IE,"LI",{});var kE=b(W);K=y(kE,"A",{href:!0});var DE=b(K);J=w(DE,"pick"),DE.forEach(f),kE.forEach(f),Q=y(IE,"LI",{});var AE=b(Q);X=y(AE,"A",{href:!0});var PE=b(X);Z=w(PE,"drop"),PE.forEach(f),AE.forEach(f),ee=y(IE,"LI",{});var TE=b(ee);ae=y(TE,"A",{href:!0});var SE=b(ae);te=w(SE,"squash & fixup"),SE.forEach(f),TE.forEach(f),re=y(IE,"LI",{});var LE=b(re);oe=y(LE,"A",{href:!0});var $E=b(oe);ce=w($E,"break"),$E.forEach(f),LE.forEach(f),ie=y(IE,"LI",{});var xE=b(ie);ne=y(xE,"A",{href:!0});var NE=b(ne);se=w(NE,"edit"),NE.forEach(f),xE.forEach(f),IE.forEach(f),he=y(wE,"LI",{});var GE=b(he);le=y(GE,"A",{href:!0});var ME=b(le);fe=w(ME,"git pull --rebase"),ME.forEach(f),GE.forEach(f),de=y(wE,"LI",{});var HE=b(de);me=y(HE,"A",{href:!0});var RE=b(me);ge=w(RE,"git rebase a shared branch"),RE.forEach(f),HE.forEach(f),wE.forEach(f),ue=y(h,"LI",{});var UE=b(ue);pe=y(UE,"A",{href:!0});var zE=b(pe);Ee=w(zE,"git log"),zE.forEach(f),UE.forEach(f),ve=y(h,"UL",{});var jE=b(ve);be=y(jE,"LI",{});var qE=b(be);ye=y(qE,"A",{href:!0});var FE=b(ye);we=w(FE,"--since, --after, --until, --before"),FE.forEach(f),qE.forEach(f),Ce=y(jE,"LI",{});var BE=b(Ce);Oe=y(BE,"A",{href:!0});var YE=b(Oe);Ie=w(YE,"--grep"),YE.forEach(f),BE.forEach(f),ke=y(jE,"LI",{});var _E=b(ke);De=y(_E,"A",{href:!0});var VE=b(De);Ae=w(VE,"--invert-grep"),VE.forEach(f),_E.forEach(f),Pe=y(jE,"LI",{});var WE=b(Pe);Te=y(WE,"A",{href:!0});var KE=b(Te);Se=w(KE,"--all-match"),KE.forEach(f),WE.forEach(f),Le=y(jE,"LI",{});var JE=b(Le);$e=y(JE,"A",{href:!0});var QE=b($e);xe=w(QE,"--min-parents, --max-parents, --merges, --no-merges"),QE.forEach(f),JE.forEach(f),Ne=y(jE,"LI",{});var XE=b(Ne);Ge=y(XE,"A",{href:!0});var ZE=b(Ge);Me=w(ZE,"--first-parent"),ZE.forEach(f),XE.forEach(f),jE.forEach(f),He=y(h,"LI",{});var ev=b(He);Re=y(ev,"A",{href:!0});var av=b(Re);Ue=w(av,"git reflog"),av.forEach(f),ev.forEach(f),ze=y(h,"LI",{});var tv=b(ze);je=y(tv,"A",{href:!0});var rv=b(je);qe=w(rv,"git bisect"),rv.forEach(f),tv.forEach(f),Fe=y(h,"LI",{});var ov=b(Fe);Be=y(ov,"A",{href:!0});var cv=b(Be);Ye=w(cv,"Summary"),cv.forEach(f),ov.forEach(f),h.forEach(f),a.forEach(f),_e=C(e),Ve=y(e,"P",{});var iv=b(Ve);We=w(iv,"This week in React Knowledgeable, I did a sharing on Git commands."),iv.forEach(f),Ke=C(e),Je=y(e,"P",{});var nv=b(Je);Qe=w(nv,"The title of the talk was called "),Xe=y(nv,"STRONG",{});var sv=b(Xe);Ze=w(sv,'"Git Gudder"'),sv.forEach(f),ea=w(nv,', because almost a year ago I did a lightning sharing on "Git Gud", '),aa=y(nv,"EM",{});var hv=b(aa);ta=w(hv,"(Get Good)"),hv.forEach(f),ra=w(nv,', this follow up sharing used the comparative of "Git Gud", therefore, "Git Gudder".'),nv.forEach(f),oa=C(e),ca=y(e,"BLOCKQUOTE",{});var lv=b(ca);ia=y(lv,"P",{});var fv=b(ia);na=w(fv,'Will there be a "Git Guddest"? 🤔'),fv.forEach(f),lv.forEach(f),sa=C(e),ha=y(e,"SECTION",{});var dv=b(ha);la=y(dv,"H2",{});var mv=b(la);fa=y(mv,"A",{href:!0,id:!0});var gv=b(fa);da=w(gv,"Disclaimer"),gv.forEach(f),mv.forEach(f),ma=C(dv),ga=y(dv,"P",{});var uv=b(ga);ua=w(uv,"I am by no means a Git master or anywhere near mastering Git. I do google or "),pa=y(uv,"A",{href:!0,rel:!0});var pv=b(pa);Ea=w(pv,"refer to the docs"),pv.forEach(f),va=w(uv," whenever I am unsure of the commands. In this talk, I listed out all the common history manipulation commands Git provides. I hoped that, with it, we are aware of what is available in our toolbox. So, we can look for it whenever we need it."),uv.forEach(f),dv.forEach(f),ba=C(e),ya=y(e,"SECTION",{});var Ev=b(ya);wa=y(Ev,"H2",{});var vv=b(wa);Ca=y(vv,"A",{href:!0,id:!0});var bv=b(Ca);Oa=w(bv,"git merge"),bv.forEach(f),vv.forEach(f),Ia=C(Ev),ka=y(Ev,"P",{});var yv=b(ka);Da=w(yv,"There's 2 kind of "),Aa=y(yv,"CODE",{});var wv=b(Aa);Pa=w(wv,"git merge"),wv.forEach(f),Ta=w(yv,", the "),Sa=y(yv,"STRONG",{});var Cv=b(Sa);La=w(Cv,"fast-forward"),Cv.forEach(f),$a=w(yv," and "),xa=y(yv,"STRONG",{});var Ov=b(xa);Na=w(Ov,"non fast-forward"),Ov.forEach(f),Ga=w(yv,"."),yv.forEach(f),Ev.forEach(f),Ma=C(e),Ha=y(e,"SECTION",{});var Iv=b(Ha);Ra=y(Iv,"H3",{});var kv=b(Ra);Ua=y(kv,"A",{href:!0,id:!0});var Dv=b(Ua);za=w(Dv,"Fast-forward merge"),Dv.forEach(f),kv.forEach(f),ja=C(Iv),qa=y(Iv,"P",{});var Av=b(qa);Fa=w(Av,"Merging "),Ba=y(Av,"CODE",{});var Pv=b(Ba);Ya=w(Pv,"master"),Pv.forEach(f),_a=w(Av," into "),Va=y(Av,"CODE",{});var Tv=b(Va);Wa=w(Tv,"branch A"),Tv.forEach(f),Ka=w(Av,":"),Av.forEach(f),Ja=C(Iv),Qa=y(Iv,"P",{});var Sv=b(Qa);Xa=y(Sv,"IMG",{title:!0,alt:!0,"data-src":!0,loading:!0}),Sv.forEach(f),Za=C(Iv),et=y(Iv,"DIV",{class:!0});var Lv=b(et);at=w(Lv,"Fast-forward merge"),Lv.forEach(f),Iv.forEach(f),tt=C(e),rt=y(e,"SECTION",{});var $v=b(rt);ot=y($v,"H3",{});var xv=b(ot);ct=y(xv,"A",{href:!0,id:!0});var Nv=b(ct);it=w(Nv,"Non Fast-forward merge"),Nv.forEach(f),xv.forEach(f),nt=C($v),st=y($v,"P",{});var Gv=b(st);ht=w(Gv,"Merging "),lt=y(Gv,"CODE",{});var Mv=b(lt);ft=w(Mv,"master"),Mv.forEach(f),dt=w(Gv," into "),mt=y(Gv,"CODE",{});var Hv=b(mt);gt=w(Hv,"branch A"),Hv.forEach(f),ut=w(Gv,":"),Gv.forEach(f),pt=C($v),Et=y($v,"P",{});var Rv=b(Et);vt=y(Rv,"IMG",{title:!0,alt:!0,"data-src":!0,loading:!0}),Rv.forEach(f),bt=C($v),yt=y($v,"DIV",{class:!0});var Uv=b(yt);wt=w(Uv,"Non fast-forward merge"),Uv.forEach(f),Ct=C($v),Ot=y($v,"P",{});var zv=b(Ot);It=w(zv,"Non fast-forward merge will create an extra commit that merges 2 branches."),zv.forEach(f),$v.forEach(f),kt=C(e),Dt=y(e,"SECTION",{});var jv=b(Dt);At=y(jv,"H3",{});var qv=b(At);Pt=y(qv,"A",{href:!0,id:!0});var Fv=b(Pt);Tt=w(Fv,"git pull"),Fv.forEach(f),qv.forEach(f),St=C(jv),Lt=y(jv,"P",{});var Bv=b(Lt);$t=w(Bv,"By default, "),xt=y(Bv,"CODE",{});var Yv=b(xt);Nt=w(Yv,"git pull"),Yv.forEach(f),Gt=w(Bv," is "),Mt=y(Bv,"CODE",{});var _v=b(Mt);Ht=w(_v,"git fetch origin branch"),_v.forEach(f),Rt=w(Bv," + "),Ut=y(Bv,"CODE",{});var Vv=b(Ut);zt=w(Vv,"git merge origin/branch"),Vv.forEach(f),jt=w(Bv,"."),Bv.forEach(f),qt=C(jv),Ft=y(jv,"P",{});var Wv=b(Ft);Bt=y(Wv,"IMG",{title:!0,alt:!0,"data-src":!0,loading:!0}),Wv.forEach(f),Yt=C(jv),_t=y(jv,"DIV",{class:!0});var Kv=b(_t);Vt=w(Kv,"git pull"),Kv.forEach(f),jv.forEach(f),Wt=C(e),Kt=y(e,"SECTION",{});var Jv=b(Kt);Jt=y(Jv,"H2",{});var Qv=b(Jt);Qt=y(Qv,"A",{href:!0,id:!0});var Xv=b(Qt);Xt=w(Xv,"git reset"),Xv.forEach(f),Qv.forEach(f),Zt=C(Jv),er=y(Jv,"P",{});var Zv=b(er);ar=y(Zv,"CODE",{});var eb=b(ar);tr=w(eb,"git reset --hard"),eb.forEach(f),rr=w(Zv," allows you to change the reference of where your branch is pointing at."),Zv.forEach(f),or=C(Jv),cr=y(Jv,"P",{});var ab=b(cr);ir=y(ab,"CODE",{});var tb=b(ir);nr=w(tb,"git checkout branch-b"),tb.forEach(f),sr=w(ab,", "),hr=y(ab,"CODE",{});var rb=b(hr);lr=w(rb,"git reset --hard branch-a"),rb.forEach(f),fr=w(ab,", "),dr=y(ab,"CODE",{});var ob=b(dr);mr=w(ob,"git reset --hard #d"),ob.forEach(f),gr=w(ab,":"),ab.forEach(f),ur=C(Jv),pr=y(Jv,"P",{});var cb=b(pr);Er=y(cb,"IMG",{title:!0,alt:!0,"data-src":!0,loading:!0}),cb.forEach(f),vr=C(Jv),br=y(Jv,"DIV",{class:!0});var ib=b(br);yr=w(ib,"git reset"),ib.forEach(f),Jv.forEach(f),wr=C(e),Cr=y(e,"SECTION",{});var nb=b(Cr);Or=y(nb,"H2",{});var sb=b(Or);Ir=y(sb,"A",{href:!0,id:!0});var hb=b(Ir);kr=w(hb,"git cherry-pick"),hb.forEach(f),sb.forEach(f),Dr=C(nb),Ar=y(nb,"P",{});var lb=b(Ar);Pr=w(lb,"cherry-pick allows you to pick commits from some other branches, tags, or refs."),lb.forEach(f),Tr=C(nb),Sr=y(nb,"P",{});var fb=b(Sr);Lr=y(fb,"CODE",{});var db=b(Lr);$r=w(db,"git checkout branch-b"),db.forEach(f),xr=w(fb,", "),Nr=y(fb,"CODE",{});var mb=b(Nr);Gr=w(mb,"git cherry-pick branch-a"),mb.forEach(f),Mr=w(fb,":"),fb.forEach(f),Hr=C(nb),Rr=y(nb,"P",{});var gb=b(Rr);Ur=y(gb,"IMG",{title:!0,alt:!0,"data-src":!0,loading:!0}),gb.forEach(f),zr=C(nb),jr=y(nb,"DIV",{class:!0});var ub=b(jr);qr=w(ub,"git cherry-pick"),ub.forEach(f),nb.forEach(f),Fr=C(e),Br=y(e,"SECTION",{});var pb=b(Br);Yr=y(pb,"H2",{});var Eb=b(Yr);_r=y(Eb,"A",{href:!0,id:!0});var vb=b(_r);Vr=w(vb,"git revert"),vb.forEach(f),Eb.forEach(f),Wr=C(pb),Kr=y(pb,"P",{});var bb=b(Kr);Jr=y(bb,"CODE",{});var yb=b(Jr);Qr=w(yb,"git revert"),yb.forEach(f),Xr=w(bb," creates a new commit that reverses the change of the commit that you are reverting."),bb.forEach(f),Zr=C(pb),eo=y(pb,"P",{});var wb=b(eo);ao=w(wb,"For example, if you accidentally merged "),to=y(wb,"CODE",{});var Cb=b(to);ro=w(Cb,"feat/a"),Cb.forEach(f),oo=w(wb," into "),co=y(wb,"CODE",{});var Ob=b(co);io=w(Ob,"master"),Ob.forEach(f),no=w(wb," branch, you can "),so=y(wb,"CODE",{});var Ib=b(so);ho=w(Ib,"git checkout master"),Ib.forEach(f),lo=w(wb,", "),fo=y(wb,"CODE",{});var kb=b(fo);mo=w(kb,"git revert #1"),kb.forEach(f),go=w(wb,":"),wb.forEach(f),uo=C(pb),po=y(pb,"P",{});var Db=b(po);Eo=y(Db,"IMG",{title:!0,alt:!0,"data-src":!0,loading:!0}),Db.forEach(f),vo=C(pb),bo=y(pb,"DIV",{class:!0});var Ab=b(bo);yo=w(Ab,"git revert"),Ab.forEach(f),wo=C(pb),Co=y(pb,"P",{});var Pb=b(Co);Oo=w(Pb,"If you know merge master into your "),Io=y(Pb,"CODE",{});var Tb=b(Io);ko=w(Tb,"feat/a"),Tb.forEach(f),Do=w(Pb," branch, you would noticed that all the changes in the branch is gone, because the merge is a fast-forward merge, that includes the revert commit made in the branch:"),Pb.forEach(f),Ao=C(pb),Po=y(pb,"P",{});var Sb=b(Po);To=y(Sb,"IMG",{title:!0,alt:!0,"data-src":!0,loading:!0}),Sb.forEach(f),So=C(pb),Lo=y(pb,"DIV",{class:!0});var Lb=b(Lo);$o=w(Lb,"Merging `master` into `feat/a`"),Lb.forEach(f),xo=C(pb),No=y(pb,"P",{});var $b=b(No);Go=w($b,"If you want to recover the changes made in "),Mo=y($b,"CODE",{});var xb=b(Mo);Ho=w(xb,"feat/a"),xb.forEach(f),Ro=w($b,", you can "),Uo=y($b,"CODE",{});var Nb=b(Uo);zo=w(Nb,"revert"),Nb.forEach(f),jo=w($b," the "),qo=y($b,"CODE",{});var Gb=b(qo);Fo=w(Gb,"revert"),Gb.forEach(f),Bo=w($b,":"),$b.forEach(f),Yo=C(pb),_o=y(pb,"P",{});var Mb=b(_o);Vo=y(Mb,"CODE",{});var Hb=b(Vo);Wo=w(Hb,"git revert ~#1"),Hb.forEach(f),Ko=w(Mb,":"),Mb.forEach(f),Jo=C(pb),Qo=y(pb,"P",{});var Rb=b(Qo);Xo=y(Rb,"IMG",{title:!0,alt:!0,"data-src":!0,loading:!0}),Rb.forEach(f),Zo=C(pb),ec=y(pb,"DIV",{class:!0});var Ub=b(ec);ac=w(Ub,"git revert the revert"),Ub.forEach(f),tc=C(pb),rc=y(pb,"P",{});var zb=b(rc);oc=w(zb,"Now, when you are ready to merge your "),cc=y(zb,"CODE",{});var jb=b(cc);ic=w(jb,"feat/a"),jb.forEach(f),nc=w(zb," branch into "),sc=y(zb,"CODE",{});var qb=b(sc);hc=w(qb,"master"),qb.forEach(f),lc=w(zb,", you get the all the changes in "),fc=y(zb,"CODE",{});var Fb=b(fc);dc=w(Fb,"feat/a"),Fb.forEach(f),mc=w(zb,", a commit that revert all that, and a commit that reverts the revert commit, which meant, you still have all the changes in "),gc=y(zb,"CODE",{});var Bb=b(gc);uc=w(Bb,"feat/a"),Bb.forEach(f),pc=w(zb," in "),Ec=y(zb,"CODE",{});var Yb=b(Ec);vc=w(Yb,"master"),Yb.forEach(f),bc=w(zb,":"),zb.forEach(f),yc=C(pb),wc=y(pb,"P",{});var _b=b(wc);Cc=y(_b,"IMG",{title:!0,alt:!0,"data-src":!0,loading:!0}),_b.forEach(f),Oc=C(pb),Ic=y(pb,"DIV",{class:!0});var Vb=b(Ic);kc=w(Vb,"Merging changes back to master"),Vb.forEach(f),pb.forEach(f),Dc=C(e),Ac=y(e,"SECTION",{});var Wb=b(Ac);Pc=y(Wb,"H2",{});var Kb=b(Pc);Tc=y(Kb,"A",{href:!0,id:!0});var Jb=b(Tc);Sc=w(Jb,"git rebase"),Jb.forEach(f),Kb.forEach(f),Lc=C(Wb),$c=y(Wb,"P",{});var Qb=b($c);xc=y(Qb,"CODE",{});var Xb=b(xc);Nc=w(Xb,"git rebase"),Xb.forEach(f),Gc=w(Qb,' allows you to "move" commits to a different "base".'),Qb.forEach(f),Mc=C(Wb),Hc=y(Wb,"P",{});var Zb=b(Hc);Rc=w(Zb,"For example, you branched out "),Uc=y(Zb,"CODE",{});var ey=b(Uc);zc=w(ey,"branch-a"),ey.forEach(f),jc=w(Zb," from "),qc=y(Zb,"CODE",{});var ay=b(qc);Fc=w(ay,"master"),ay.forEach(f),Bc=w(Zb," a while ago, and "),Yc=y(Zb,"CODE",{});var ty=b(Yc);_c=w(ty,"master"),ty.forEach(f),Vc=w(Zb," has made a few more commits. But if you merge your branch into master now, it would be a non fast-forward merge, creating an extra commit to the history. If you want a clean, one-line history, you can do a "),Wc=y(Zb,"CODE",{});var ry=b(Wc);Kc=w(ry,"rebase"),ry.forEach(f),Jc=w(Zb,", replaying commits that you have made in "),Qc=y(Zb,"CODE",{});var oy=b(Qc);Xc=w(oy,"branch-a"),oy.forEach(f),Zc=w(Zb," on top of the latest "),ei=y(Zb,"CODE",{});var cy=b(ei);ai=w(cy,"master"),cy.forEach(f),ti=w(Zb,"."),Zb.forEach(f),ri=C(Wb),oi=y(Wb,"P",{});var iy=b(oi);ci=y(iy,"CODE",{});var ny=b(ci);ii=w(ny,"git checkout branch-a"),ny.forEach(f),ni=w(iy,", "),si=y(iy,"CODE",{});var sy=b(si);hi=w(sy,"git rebase master"),sy.forEach(f),li=w(iy,":"),iy.forEach(f),fi=C(Wb),di=y(Wb,"P",{});var hy=b(di);mi=y(hy,"IMG",{title:!0,alt:!0,"data-src":!0,loading:!0}),hy.forEach(f),gi=C(Wb),ui=y(Wb,"DIV",{class:!0});var ly=b(ui);pi=w(ly,"git rebase"),ly.forEach(f),Ei=C(Wb),vi=y(Wb,"P",{});var fy=b(vi);bi=y(fy,"CODE",{});var dy=b(bi);yi=w(dy,"git rebase"),dy.forEach(f),wi=w(fy," does not have to be on top of the branch that you branched out, you can rebase to anywhere:"),fy.forEach(f),Ci=C(Wb),Oi=y(Wb,"P",{});var my=b(Oi);Ii=y(my,"CODE",{});var gy=b(Ii);ki=w(gy,"git checkout branch-a"),gy.forEach(f),Di=w(my,", "),Ai=y(my,"CODE",{});var uy=b(Ai);Pi=w(uy,"git rebase --onto branch-b master branch-a"),uy.forEach(f),Ti=w(my,":"),my.forEach(f),Si=C(Wb),Li=y(Wb,"P",{});var py=b(Li);$i=y(py,"IMG",{title:!0,alt:!0,"data-src":!0,loading:!0}),py.forEach(f),xi=C(Wb),Ni=y(Wb,"DIV",{class:!0});var Ey=b(Ni);Gi=w(Ey,"git rebase"),Ey.forEach(f),Mi=C(Wb),Hi=y(Wb,"P",{});var vy=b(Hi);Ri=w(vy,"There's 3 reference point you should know when doing a git rebase:"),vy.forEach(f),Ui=C(Wb),zi=y(Wb,"UL",{});var by=b(zi);ji=y(by,"LI",{});var yy=b(ji);qi=y(yy,"CODE",{});var wy=b(qi);Fi=w(wy,"<new base>"),wy.forEach(f),yy.forEach(f),Bi=C(by),Yi=y(by,"LI",{});var Cy=b(Yi);_i=y(Cy,"CODE",{});var Oy=b(_i);Vi=w(Oy,"<upstream>"),Oy.forEach(f),Cy.forEach(f),Wi=C(by),Ki=y(by,"LI",{});var Iy=b(Ki);Ji=y(Iy,"CODE",{});var ky=b(Ji);Qi=w(ky,"<branch>"),ky.forEach(f),Iy.forEach(f),by.forEach(f),Xi=C(Wb),Zi=y(Wb,"P",{});var Dy=b(Zi);en=y(Dy,"PICTURE",{});var Ay=b(en);an=y(Ay,"SOURCE",{type:!0,srcset:!0}),tn=y(Ay,"SOURCE",{type:!0,srcset:!0}),rn=y(Ay,"IMG",{title:!0,alt:!0,"data-src":!0,loading:!0}),Ay.forEach(f),Dy.forEach(f),on=C(Wb),cn=y(Wb,"DIV",{class:!0});var Py=b(cn);nn=w(Py,"git rebase"),Py.forEach(f),sn=C(Wb),hn=y(Wb,"P",{});var Ty=b(hn);ln=w(Ty,"Here are a few things you should know:"),Ty.forEach(f),fn=C(Wb),dn=y(Wb,"UL",{});var Sy=b(dn);mn=y(Sy,"LI",{});var Ly=b(mn);gn=y(Ly,"CODE",{});var $y=b(gn);un=w($y,"git rebase"),$y.forEach(f),pn=w(Ly," will replay the commits from "),En=y(Ly,"CODE",{});var xy=b(En);vn=w(xy,"<upstream>"),xy.forEach(f),bn=w(Ly," to "),yn=y(Ly,"CODE",{});var Ny=b(yn);wn=w(Ny,"<branch>"),Ny.forEach(f),Cn=w(Ly," onto "),On=y(Ly,"CODE",{});var Gy=b(On);In=w(Gy,"<new base>"),Gy.forEach(f),kn=w(Ly,"."),Ly.forEach(f),Dn=C(Sy),An=y(Sy,"LI",{});var My=b(An);Pn=w(My,"If you specify "),Tn=y(My,"CODE",{});var Hy=b(Tn);Sn=w(Hy,"<upstream>"),Hy.forEach(f),Ln=w(My," as a branch name, "),$n=y(My,"CODE",{});var Ry=b($n);xn=w(Ry,"git rebase"),Ry.forEach(f),Nn=w(My," will replay commits from the common ancestor of "),Gn=y(My,"CODE",{});var Uy=b(Gn);Mn=w(Uy,"<upstream>"),Uy.forEach(f),Hn=w(My," and "),Rn=y(My,"CODE",{});var zy=b(Rn);Un=w(zy,"<branch>"),zy.forEach(f),zn=w(My," to "),jn=y(My,"CODE",{});var jy=b(jn);qn=w(jy,"<branch>"),jy.forEach(f),Fn=w(My,"."),My.forEach(f),Bn=C(Sy),Yn=y(Sy,"LI",{});var qy=b(Yn);_n=w(qy,"If you do not specify "),Vn=y(qy,"CODE",{});var Fy=b(Vn);Wn=w(Fy,"<branch>"),Fy.forEach(f),Kn=w(qy,", the default is the "),Jn=y(qy,"CODE",{});var By=b(Jn);Qn=w(By,"HEAD"),By.forEach(f),Xn=w(qy,", current commit you are at now."),qy.forEach(f),Zn=C(Sy),es=y(Sy,"LI",{});var Yy=b(es);as=w(Yy,"If you do not specify "),ts=y(Yy,"CODE",{});var _y=b(ts);rs=w(_y,"--onto <new base>"),_y.forEach(f),os=w(Yy,", the new base will be default to "),cs=y(Yy,"CODE",{});var Vy=b(cs);is=w(Vy,"<upsttream>"),Vy.forEach(f),ns=w(Yy,", that's why "),ss=y(Yy,"CODE",{});var Wy=b(ss);hs=w(Wy,"git rebase master"),Wy.forEach(f),ls=w(Yy," is equivalent to "),fs=y(Yy,"CODE",{});var Ky=b(fs);ds=w(Ky,"git rebase --onto master master"),Ky.forEach(f),ms=w(Yy,"."),Yy.forEach(f),gs=C(Sy),us=y(Sy,"LI",{});var Jy=b(us);ps=w(Jy,"If you do not specify "),Es=y(Jy,"CODE",{});var Qy=b(Es);vs=w(Qy,"<upstream>"),Qy.forEach(f),bs=w(Jy,", it will be the upstream of the current branch. So "),ys=y(Jy,"CODE",{});var Xy=b(ys);ws=w(Xy,"git rebase"),Xy.forEach(f),Cs=w(Jy," is equivalent to "),Os=y(Jy,"CODE",{});var Zy=b(Os);Is=w(Zy,"git rebase <origin/current-branch>"),Zy.forEach(f),ks=w(Jy,"."),Jy.forEach(f),Sy.forEach(f),Wb.forEach(f),Ds=C(e),As=y(e,"SECTION",{});var ew=b(As);Ps=y(ew,"H3",{});var aw=b(Ps);Ts=y(aw,"A",{href:!0,id:!0});var tw=b(Ts);Ss=w(tw,"git rebase --interactive"),tw.forEach(f),aw.forEach(f),Ls=C(ew),$s=y(ew,"P",{});var rw=b($s);xs=y(rw,"CODE",{});var ow=b(xs);Ns=w(ow,"git rebase"),ow.forEach(f),Gs=w(rw," has an interactive mode, which allows you to specify instructions while replaying commits during a rebase."),rw.forEach(f),Ms=C(ew),Hs=y(ew,"P",{});var cw=b(Hs);Rs=y(cw,"PICTURE",{});var iw=b(Rs);Us=y(iw,"SOURCE",{type:!0,srcset:!0}),zs=y(iw,"SOURCE",{type:!0,srcset:!0}),js=y(iw,"IMG",{title:!0,alt:!0,"data-src":!0,loading:!0}),iw.forEach(f),cw.forEach(f),qs=C(ew),Fs=y(ew,"DIV",{class:!0});var nw=b(Fs);Bs=w(nw,"git rebase interactive"),nw.forEach(f),Ys=C(ew),_s=y(ew,"P",{});var sw=b(_s);Vs=w(sw,"When you run "),Ws=y(sw,"CODE",{});var hw=b(Ws);Ks=w(hw,"git rebase --interactive"),hw.forEach(f),Js=w(sw,", git will prompt you with an editor to edit the instructions. In it, you will see a list of commits that will be replayed:"),sw.forEach(f),Qs=C(ew),Xs=y(ew,"PRE",{class:!0}),b(Xs).forEach(f),ew.forEach(f),Zs=C(e),eh=y(e,"SECTION",{});var lw=b(eh);ah=y(lw,"H4",{});var fw=b(ah);th=y(fw,"A",{href:!0,id:!0});var dw=b(th);rh=w(dw,"pick"),dw.forEach(f),fw.forEach(f),oh=C(lw),ch=y(lw,"P",{});var mw=b(ch);ih=w(mw,"The default instruction. Will just use the commit while replaying:"),mw.forEach(f),nh=C(lw),sh=y(lw,"P",{});var gw=b(sh);hh=y(gw,"PICTURE",{});var uw=b(hh);lh=y(uw,"SOURCE",{type:!0,srcset:!0}),fh=y(uw,"SOURCE",{type:!0,srcset:!0}),dh=y(uw,"IMG",{title:!0,alt:!0,"data-src":!0,loading:!0}),uw.forEach(f),gw.forEach(f),mh=C(lw),gh=y(lw,"PRE",{class:!0}),b(gh).forEach(f),lw.forEach(f),uh=C(e),ph=y(e,"SECTION",{});var pw=b(ph);Eh=y(pw,"H4",{});var Ew=b(Eh);vh=y(Ew,"A",{href:!0,id:!0});var vw=b(vh);bh=w(vw,"drop"),vw.forEach(f),Ew.forEach(f),yh=C(pw),wh=y(pw,"P",{});var bw=b(wh);Ch=w(bw,"Drop will omit the commit:"),bw.forEach(f),Oh=C(pw),Ih=y(pw,"P",{});var yw=b(Ih);kh=y(yw,"PICTURE",{});var ww=b(kh);Dh=y(ww,"SOURCE",{type:!0,srcset:!0}),Ah=y(ww,"SOURCE",{type:!0,srcset:!0}),Ph=y(ww,"IMG",{title:!0,alt:!0,"data-src":!0,loading:!0}),ww.forEach(f),yw.forEach(f),Th=C(pw),Sh=y(pw,"PRE",{class:!0}),b(Sh).forEach(f),pw.forEach(f),Lh=C(e),$h=y(e,"SECTION",{});var Cw=b($h);xh=y(Cw,"H4",{});var Ow=b(xh);Nh=y(Ow,"A",{href:!0,id:!0});var Iw=b(Nh);Gh=w(Iw,"squash & fixup"),Iw.forEach(f),Ow.forEach(f),Mh=C(Cw),Hh=y(Cw,"P",{});var kw=b(Hh);Rh=w(kw,"Squash & Fixup will combine your commit with the previous commit, the only difference is that with "),Uh=y(kw,"CODE",{});var Dw=b(Uh);zh=w(Dw,"squash"),Dw.forEach(f),jh=w(kw,", git will prompt you to edit the commit message of the combined commit, while "),qh=y(kw,"CODE",{});var Aw=b(qh);Fh=w(Aw,"fixup"),Aw.forEach(f),Bh=w(kw," will drop the commit of the "),Yh=y(kw,"CODE",{});var Pw=b(Yh);_h=w(Pw,"fixup"),Pw.forEach(f),Vh=w(kw,"ed commit."),kw.forEach(f),Wh=C(Cw),Kh=y(Cw,"P",{});var Tw=b(Kh);Jh=y(Tw,"PICTURE",{});var Sw=b(Jh);Qh=y(Sw,"SOURCE",{type:!0,srcset:!0}),Xh=y(Sw,"SOURCE",{type:!0,srcset:!0}),Zh=y(Sw,"IMG",{title:!0,alt:!0,"data-src":!0,loading:!0}),Sw.forEach(f),Tw.forEach(f),el=C(Cw),al=y(Cw,"PRE",{class:!0}),b(al).forEach(f),Cw.forEach(f),tl=C(e),rl=y(e,"SECTION",{});var Lw=b(rl);ol=y(Lw,"H4",{});var $w=b(ol);cl=y($w,"A",{href:!0,id:!0});var xw=b(cl);il=w(xw,"break"),xw.forEach(f),$w.forEach(f),nl=C(Lw),sl=y(Lw,"P",{});var Nw=b(sl);hl=w(Nw,"Pause the rebase. You can do add more commits here if you want. When you are done, make sure that your workspace and stage is clean, run "),ll=y(Nw,"CODE",{});var Gw=b(ll);fl=w(Gw,"git rebase --continue"),Gw.forEach(f),dl=w(Nw," to continue."),Nw.forEach(f),ml=C(Lw),gl=y(Lw,"P",{});var Mw=b(gl);ul=y(Mw,"PICTURE",{});var Hw=b(ul);pl=y(Hw,"SOURCE",{type:!0,srcset:!0}),El=y(Hw,"SOURCE",{type:!0,srcset:!0}),vl=y(Hw,"IMG",{title:!0,alt:!0,"data-src":!0,loading:!0}),Hw.forEach(f),Mw.forEach(f),bl=C(Lw),yl=y(Lw,"PRE",{class:!0}),b(yl).forEach(f),Lw.forEach(f),wl=C(e),Cl=y(e,"SECTION",{});var Rw=b(Cl);Ol=y(Rw,"H4",{});var Uw=b(Ol);Il=y(Uw,"A",{href:!0,id:!0});var zw=b(Il);kl=w(zw,"edit"),zw.forEach(f),Uw.forEach(f),Dl=C(Rw),Al=y(Rw,"P",{});var jw=b(Al);Pl=w(jw,"Pause the rebase at the commit that you are editing, before the commit has been commited. You can add, remove or ammend your files before continue the rebase process."),jw.forEach(f),Tl=C(Rw),Sl=y(Rw,"P",{});var qw=b(Sl);Ll=y(qw,"PICTURE",{});var Fw=b(Ll);$l=y(Fw,"SOURCE",{type:!0,srcset:!0}),xl=y(Fw,"SOURCE",{type:!0,srcset:!0}),Nl=y(Fw,"IMG",{title:!0,alt:!0,"data-src":!0,loading:!0}),Fw.forEach(f),qw.forEach(f),Gl=C(Rw),Ml=y(Rw,"PRE",{class:!0}),b(Ml).forEach(f),Rw.forEach(f),Hl=C(e),Rl=y(e,"SECTION",{});var Bw=b(Rl);Ul=y(Bw,"H3",{});var Yw=b(Ul);zl=y(Yw,"A",{href:!0,id:!0});var _w=b(zl);jl=w(_w,"git pull --rebase"),_w.forEach(f),Yw.forEach(f),ql=C(Bw),Fl=y(Bw,"P",{});var Vw=b(Fl);Bl=w(Vw,"There's a rebase mode for git pull, where it will be "),Yl=y(Vw,"CODE",{});var Ww=b(Yl);_l=w(Ww,"git fetch origin branch"),Ww.forEach(f),Vl=w(Vw," + "),Wl=y(Vw,"CODE",{});var Kw=b(Wl);Kl=w(Kw,"git rebase origin/branch"),Kw.forEach(f),Jl=w(Vw,"."),Vw.forEach(f),Ql=C(Bw),Xl=y(Bw,"P",{});var Jw=b(Xl);Zl=y(Jw,"IMG",{title:!0,alt:!0,"data-src":!0,loading:!0}),Jw.forEach(f),ef=C(Bw),af=y(Bw,"DIV",{class:!0});var Qw=b(af);tf=w(Qw,"git pull --rebase"),Qw.forEach(f),Bw.forEach(f),rf=C(e),of=y(e,"SECTION",{});var Xw=b(of);cf=y(Xw,"H3",{});var Zw=b(cf);nf=y(Zw,"A",{href:!0,id:!0});var eC=b(nf);sf=w(eC,"git rebase a shared branch"),eC.forEach(f),Zw.forEach(f),hf=C(Xw),lf=y(Xw,"P",{});var aC=b(lf);ff=w(aC,"Say "),df=y(aC,"CODE",{});var tC=b(df);mf=w(tC,"x"),tC.forEach(f),gf=w(aC," and "),uf=y(aC,"CODE",{});var rC=b(uf);pf=w(rC,"y"),rC.forEach(f),Ef=w(aC," are working on the "),vf=y(aC,"CODE",{});var oC=b(vf);bf=w(oC,"feat/a"),oC.forEach(f),yf=w(aC," branch."),aC.forEach(f),wf=C(Xw),Cf=y(Xw,"P",{});var cC=b(Cf);Of=y(cC,"PICTURE",{});var iC=b(Of);If=y(iC,"SOURCE",{type:!0,srcset:!0}),kf=y(iC,"SOURCE",{type:!0,srcset:!0}),Df=y(iC,"IMG",{title:!0,alt:!0,"data-src":!0,loading:!0}),iC.forEach(f),cC.forEach(f),Af=C(Xw),Pf=y(Xw,"P",{});var nC=b(Pf);Tf=y(nC,"CODE",{});var sC=b(Tf);Sf=w(sC,"x"),sC.forEach(f),Lf=w(nC," decided to rebase the "),$f=y(nC,"CODE",{});var hC=b($f);xf=w(hC,"feat/a"),hC.forEach(f),Nf=w(nC," branch to squash and drop some commits:"),nC.forEach(f),Gf=C(Xw),Mf=y(Xw,"P",{});var lC=b(Mf);Hf=y(lC,"PICTURE",{});var fC=b(Hf);Rf=y(fC,"SOURCE",{type:!0,srcset:!0}),Uf=y(fC,"SOURCE",{type:!0,srcset:!0}),zf=y(fC,"IMG",{title:!0,alt:!0,"data-src":!0,loading:!0}),fC.forEach(f),lC.forEach(f),jf=C(Xw),qf=y(Xw,"P",{});var dC=b(qf);Ff=w(dC,"While "),Bf=y(dC,"CODE",{});var mC=b(Bf);Yf=w(mC,"x"),mC.forEach(f),_f=w(dC," had done that, that was just a part of the whole picture. Because the "),Vf=y(dC,"CODE",{});var gC=b(Vf);Wf=w(gC,"rebase"),gC.forEach(f),Kf=w(dC," on his local machine changed the git history on his local copy only."),dC.forEach(f),Jf=C(Xw),Qf=y(Xw,"P",{});var uC=b(Qf);Xf=y(uC,"PICTURE",{});var pC=b(Xf);Zf=y(pC,"SOURCE",{type:!0,srcset:!0}),ed=y(pC,"SOURCE",{type:!0,srcset:!0}),ad=y(pC,"IMG",{title:!0,alt:!0,"data-src":!0,loading:!0}),pC.forEach(f),uC.forEach(f),td=C(Xw),rd=y(Xw,"P",{});var EC=b(rd);od=w(EC,"To make the change on the remote server as well, "),cd=y(EC,"CODE",{});var vC=b(cd);id=w(vC,"x"),vC.forEach(f),nd=w(EC," forced push his branch to the remote server. ("),sd=y(EC,"STRONG",{});var bC=b(sd);hd=w(bC,"Note:"),bC.forEach(f),ld=w(EC," You can push without "),fd=y(EC,"CODE",{});var yC=b(fd);dd=w(yC,"--force"),yC.forEach(f),md=w(EC," if the origin branch cannot fast-forward merge your local branch)"),EC.forEach(f),gd=C(Xw),ud=y(Xw,"P",{});var wC=b(ud);pd=w(wC,"While "),Ed=y(wC,"CODE",{});var CC=b(Ed);vd=w(CC,"y"),CC.forEach(f),bd=w(wC," on the other hand, did not know about the "),yd=y(wC,"CODE",{});var OC=b(yd);wd=w(OC,"rebase"),OC.forEach(f),Cd=w(wC,", so when "),Od=y(wC,"CODE",{});var IC=b(Od);Id=w(IC,"y"),IC.forEach(f),kd=w(wC," pulled the code, it ended up with a messed up merged of a messed up git history:"),wC.forEach(f),Dd=C(Xw),Ad=y(Xw,"P",{});var kC=b(Ad);Pd=y(kC,"PICTURE",{});var DC=b(Pd);Td=y(DC,"SOURCE",{type:!0,srcset:!0}),Sd=y(DC,"SOURCE",{type:!0,srcset:!0}),Ld=y(DC,"IMG",{title:!0,alt:!0,"data-src":!0,loading:!0}),DC.forEach(f),kC.forEach(f),$d=C(Xw),xd=y(Xw,"P",{});var AC=b(xd);Nd=w(AC,"In most cases, there would be a merge conflict, because "),Gd=y(AC,"CODE",{});var PC=b(Gd);Md=w(PC,"x"),PC.forEach(f),Hd=w(AC," and "),Rd=y(AC,"CODE",{});var TC=b(Rd);Ud=w(TC,"y"),TC.forEach(f),zd=w(AC,"'s branch would have made changes on the same file."),AC.forEach(f),jd=C(Xw),qd=y(Xw,"P",{});var SC=b(qd);Fd=w(SC,"So, the correct way, if the rebase is necessary, is to notify "),Bd=y(SC,"CODE",{});var LC=b(Bd);Yd=w(LC,"y"),LC.forEach(f),_d=w(SC," about the rebase, so that "),Vd=y(SC,"CODE",{});var $C=b(Vd);Wd=w($C,"y"),$C.forEach(f),Kd=w(SC," can "),Jd=y(SC,"CODE",{});var xC=b(Jd);Qd=w(xC,"git reset --hard"),xC.forEach(f),Xd=w(SC," his branch to the remote branch."),SC.forEach(f),Zd=C(Xw),em=y(Xw,"P",{});var NC=b(em);am=y(NC,"PICTURE",{});var GC=b(am);tm=y(GC,"SOURCE",{type:!0,srcset:!0}),rm=y(GC,"SOURCE",{type:!0,srcset:!0}),om=y(GC,"IMG",{title:!0,alt:!0,"data-src":!0,loading:!0}),GC.forEach(f),NC.forEach(f),cm=C(Xw),im=y(Xw,"P",{});var MC=b(im);nm=w(MC,"If unfortunately, at the same time, "),sm=y(MC,"CODE",{});var HC=b(sm);hm=w(HC,"y"),HC.forEach(f),lm=w(MC," has made more commits to his local branch, he would have to "),fm=y(MC,"CODE",{});var RC=b(fm);dm=w(RC,"git rebase"),RC.forEach(f),mm=w(MC," the new changes onto the remote branch, or "),gm=y(MC,"CODE",{});var UC=b(gm);um=w(UC,"git cherry-pick"),UC.forEach(f),pm=w(MC," the new changes after the "),Em=y(MC,"CODE",{});var zC=b(Em);vm=w(zC,"git reset --hard"),zC.forEach(f),bm=w(MC,"."),MC.forEach(f),ym=C(Xw),wm=y(Xw,"P",{});var jC=b(wm);Cm=w(jC,"In the companies that I have worked with, forbidden a "),Om=y(jC,"CODE",{});var qC=b(Om);Im=w(qC,"rebase"),qC.forEach(f),km=w(jC," on a common branch, especially the "),Dm=y(jC,"CODE",{});var FC=b(Dm);Am=w(FC,"master"),FC.forEach(f),Pm=w(jC," branch."),jC.forEach(f),Xw.forEach(f),Tm=C(e),Sm=y(e,"SECTION",{});var BC=b(Sm);Lm=y(BC,"H2",{});var YC=b(Lm);$m=y(YC,"A",{href:!0,id:!0});var _C=b($m);xm=w(_C,"git log"),_C.forEach(f),YC.forEach(f),Nm=C(BC),Gm=y(BC,"P",{});var VC=b(Gm);Mm=w(VC,"The go-to command to look at your git history. There's a few options that is worth mentioning, that allow us to search through the sea of commits:"),VC.forEach(f),BC.forEach(f),Hm=C(e),Rm=y(e,"SECTION",{});var WC=b(Rm);Um=y(WC,"H3",{});var KC=b(Um);zm=y(KC,"A",{href:!0,id:!0});var JC=b(zm);jm=w(JC,"--since, --after, --until, --before"),JC.forEach(f),KC.forEach(f),qm=C(WC),Fm=y(WC,"P",{});var QC=b(Fm);Bm=w(QC,"You can filter out commits within a specific timeframe"),QC.forEach(f),WC.forEach(f),Ym=C(e),_m=y(e,"SECTION",{});var XC=b(_m);Vm=y(XC,"H3",{});var ZC=b(Vm);Wm=y(ZC,"A",{href:!0,id:!0});var eO=b(Wm);Km=w(eO,"--grep"),eO.forEach(f),ZC.forEach(f),Jm=C(XC),Qm=y(XC,"P",{});var aO=b(Qm);Xm=w(aO,"You can filter out commits based on commit message"),aO.forEach(f),XC.forEach(f),Zm=C(e),eg=y(e,"SECTION",{});var tO=b(eg);ag=y(tO,"H3",{});var rO=b(ag);tg=y(rO,"A",{href:!0,id:!0});var oO=b(tg);rg=w(oO,"--invert-grep"),oO.forEach(f),rO.forEach(f),og=C(tO),cg=y(tO,"P",{});var cO=b(cg);ig=w(cO,"You can filter out commits that does not match the "),ng=y(cO,"CODE",{});var iO=b(ng);sg=w(iO,"--grep"),iO.forEach(f),cO.forEach(f),tO.forEach(f),hg=C(e),lg=y(e,"SECTION",{});var nO=b(lg);fg=y(nO,"H3",{});var sO=b(fg);dg=y(sO,"A",{href:!0,id:!0});var hO=b(dg);mg=w(hO,"--all-match"),hO.forEach(f),sO.forEach(f),gg=C(nO),ug=y(nO,"P",{});var lO=b(ug);pg=y(lO,"CODE",{});var fO=b(pg);Eg=w(fO,"--grep"),fO.forEach(f),vg=w(lO," is a "),bg=y(lO,"CODE",{});var dO=b(bg);yg=w(dO,"OR"),dO.forEach(f),wg=w(lO," filter, "),Cg=y(lO,"CODE",{});var mO=b(Cg);Og=w(mO,"--all-match"),mO.forEach(f),Ig=w(lO," make it a "),kg=y(lO,"CODE",{});var gO=b(kg);Dg=w(gO,"AND"),gO.forEach(f),Ag=w(lO," filter"),lO.forEach(f),nO.forEach(f),Pg=C(e),Tg=y(e,"SECTION",{});var uO=b(Tg);Sg=y(uO,"H3",{});var pO=b(Sg);Lg=y(pO,"A",{href:!0,id:!0});var EO=b(Lg);$g=w(EO,"--min-parents, --max-parents, --merges, --no-merges"),EO.forEach(f),pO.forEach(f),xg=C(uO),Ng=y(uO,"P",{});var vO=b(Ng);Gg=w(vO,"You can specify commits with the number of parents. A simple merge commit has 2 parent, so "),Mg=y(vO,"CODE",{});var bO=b(Mg);Hg=w(bO,"--merge"),bO.forEach(f),Rg=w(vO," is equivalent to "),Ug=y(vO,"CODE",{});var yO=b(Ug);zg=w(yO,"--min-parents=2"),yO.forEach(f),jg=w(vO,"."),vO.forEach(f),uO.forEach(f),qg=C(e),Fg=y(e,"SECTION",{});var wO=b(Fg);Bg=y(wO,"H3",{});var CO=b(Bg);Yg=y(CO,"A",{href:!0,id:!0});var OO=b(Yg);_g=w(OO,"--first-parent"),OO.forEach(f),CO.forEach(f),Vg=C(wO),Wg=y(wO,"P",{});var IO=b(Wg);Kg=w(IO,"You can follow only the first parent commit upon seeing a merge commit. This is especially useful when you have merged of branches in, "),Jg=y(IO,"CODE",{});var kO=b(Jg);Qg=w(kO,"--first-parent"),kO.forEach(f),Xg=w(IO," allow you to filter out only the merge commit and the commit you have made on the current branch."),IO.forEach(f),wO.forEach(f),Zg=C(e),eu=y(e,"SECTION",{});var DO=b(eu);au=y(DO,"H2",{});var AO=b(au);tu=y(AO,"A",{href:!0,id:!0});var PO=b(tu);ru=w(PO,"git reflog"),PO.forEach(f),AO.forEach(f),ou=C(DO),cu=y(DO,"P",{});var TO=b(cu);iu=w(TO,"The reference log shows you all the "),nu=y(TO,"CODE",{});var SO=b(nu);su=w(SO,"HEAD"),SO.forEach(f),hu=w(TO," position you have been to. This is especially useful when you have "),lu=y(TO,"CODE",{});var LO=b(lu);fu=w(LO,"reset --hard"),LO.forEach(f),du=w(TO," or "),mu=y(TO,"CODE",{});var $O=b(mu);gu=w($O,"rebase"),$O.forEach(f),uu=w(TO,", you can still find back the commit reference that you were at previously, so you can recover them."),TO.forEach(f),DO.forEach(f),pu=C(e),Eu=y(e,"SECTION",{});var xO=b(Eu);vu=y(xO,"H2",{});var NO=b(vu);bu=y(NO,"A",{href:!0,id:!0});var GO=b(bu);yu=w(GO,"git bisect"),GO.forEach(f),NO.forEach(f),wu=C(xO),Cu=y(xO,"P",{});var MO=b(Cu);Ou=w(MO,"This is a useful command that I am looking forward to use it."),MO.forEach(f),Iu=C(xO),ku=y(xO,"P",{});var HO=b(ku);Du=w(HO,"Often times when you noticed something has changed / break / less optimised, yet you do not know when this change was introduced into your repository. "),Au=y(HO,"CODE",{});var RO=b(Au);Pu=w(RO,"git bisect"),RO.forEach(f),Tu=w(HO," allows you to do binary search on the history, so that you can quickly pin down the commit where the change was introduced."),HO.forEach(f),Su=C(xO),Lu=y(xO,"PRE",{class:!0}),b(Lu).forEach(f),$u=C(xO),xu=y(xO,"P",{});var UO=b(xu);Nu=w(UO,"Once you've specified at least one "),Gu=y(UO,"CODE",{});var zO=b(Gu);Mu=w(zO,"bad"),zO.forEach(f),Hu=w(UO," and one "),Ru=y(UO,"CODE",{});var jO=b(Ru);Uu=w(jO,"good"),jO.forEach(f),zu=w(UO," commit, "),ju=y(UO,"CODE",{});var qO=b(ju);qu=w(qO,"git bisect"),qO.forEach(f),Fu=w(UO," will find and checkout to a commit in the middle of that range between "),Bu=y(UO,"CODE",{});var FO=b(Bu);Yu=w(FO,"bad"),FO.forEach(f),_u=w(UO," and "),Vu=y(UO,"CODE",{});var BO=b(Vu);Wu=w(BO,"good"),BO.forEach(f),Ku=w(UO," and greets you with:"),UO.forEach(f),Ju=C(xO),Qu=y(xO,"PRE",{class:!0}),b(Qu).forEach(f),Xu=C(xO),Zu=y(xO,"P",{});var YO=b(Zu);ep=w(YO,"You can know test / verify / profile your code, and specify whether the current commit is a "),ap=y(YO,"CODE",{});var _O=b(ap);tp=w(_O,"good"),_O.forEach(f),rp=w(YO," commit or a "),op=y(YO,"CODE",{});var VO=b(op);cp=w(VO,"bad"),VO.forEach(f),ip=w(YO," commit:"),YO.forEach(f),np=C(xO),sp=y(xO,"PRE",{class:!0}),b(sp).forEach(f),hp=C(xO),lp=y(xO,"P",{});var WO=b(lp);fp=w(WO,"Continue doing it until eventually there's no more commit to inspect. "),dp=y(WO,"CODE",{});var KO=b(dp);mp=w(KO,"git bisect"),KO.forEach(f),gp=w(WO," will print out the description of the first bad commit."),WO.forEach(f),xO.forEach(f),up=C(e),pp=y(e,"SECTION",{});var JO=b(pp);Ep=y(JO,"H2",{});var QO=b(Ep);vp=y(QO,"A",{href:!0,id:!0});var XO=b(vp);bp=w(XO,"Summary"),XO.forEach(f),QO.forEach(f),yp=C(JO),wp=y(JO,"P",{});var ZO=b(wp);Cp=w(ZO,"We've gone through the following git commands:"),ZO.forEach(f),Op=C(JO),Ip=y(JO,"UL",{});var eI=b(Ip);kp=y(eI,"LI",{});var aI=b(kp);Dp=w(aI,"git merge"),aI.forEach(f),Ap=C(eI),Pp=y(eI,"LI",{});var tI=b(Pp);Tp=w(tI,"git reset"),tI.forEach(f),Sp=C(eI),Lp=y(eI,"LI",{});var rI=b(Lp);$p=w(rI,"git cherry-pick"),rI.forEach(f),xp=C(eI),Np=y(eI,"LI",{});var oI=b(Np);Gp=w(oI,"git revert"),oI.forEach(f),Mp=C(eI),Hp=y(eI,"LI",{});var cI=b(Hp);Rp=w(cI,"git rebase"),cI.forEach(f),Up=C(eI),zp=y(eI,"LI",{});var iI=b(zp);jp=w(iI,"git log"),iI.forEach(f),qp=C(eI),Fp=y(eI,"LI",{});var nI=b(Fp);Bp=w(nI,"git reflog"),nI.forEach(f),Yp=C(eI),_p=y(eI,"LI",{});var sI=b(_p);Vp=w(sI,"git bisect"),sI.forEach(f),eI.forEach(f),Wp=C(JO),Kp=y(JO,"P",{});var hI=b(Kp);Jp=w(hI,"Hopefully we are now "),Qp=y(hI,"CODE",{});var lI=b(Qp);Xp=w(lI,"git gudder"),lI.forEach(f),Zp=w(hI," than before!"),hI.forEach(f),eE=C(JO),aE=y(JO,"HR",{}),tE=C(JO),rE=y(JO,"P",{});var fI=b(rE);oE=w(fI,"Related topic: "),cE=y(fI,"A",{href:!0});var dI=b(cE);iE=w(dI,"Git commits went missing after a rebase"),dI.forEach(f),fI.forEach(f),JO.forEach(f),this.h()},h(){v(c,"href","#disclaimer"),v(s,"href","#git-merge"),v(O,"href","#fast-forward-merge"),v(D,"href","#non-fast-forward-merge"),v(T,"href","#git-pull"),v($,"href","#git-reset"),v(G,"href","#git-cherry-pick"),v(R,"href","#git-revert"),v(j,"href","#git-rebase"),v(Y,"href","#git-rebase-interactive"),v(K,"href","#pick"),v(X,"href","#drop"),v(ae,"href","#squash-fixup"),v(oe,"href","#break"),v(ne,"href","#edit"),v(le,"href","#git-pull-rebase"),v(me,"href","#git-rebase-a-shared-branch"),v(pe,"href","#git-log"),v(ye,"href","#since-after-until-before"),v(Oe,"href","#grep"),v(De,"href","#invert-grep"),v(Te,"href","#all-match"),v($e,"href","#min-parents-max-parents-merges-no-merges"),v(Ge,"href","#first-parent"),v(Re,"href","#git-reflog"),v(je,"href","#git-bisect"),v(Be,"href","#summary"),v(r,"class","sitemap"),v(r,"id","sitemap"),v(r,"role","navigation"),v(r,"aria-label","Table of Contents"),v(fa,"href","#disclaimer"),v(fa,"id","disclaimer"),v(pa,"href","https://git-scm.com"),v(pa,"rel","nofollow"),v(Ca,"href","#git-merge"),v(Ca,"id","git-merge"),v(Ua,"href","#fast-forward-merge"),v(Ua,"id","fast-forward-merge"),v(Xa,"title","null"),v(Xa,"alt","git-merge-ff"),v(Xa,"data-src","14b76240a1dacc59.gif"),v(Xa,"loading","lazy"),v(et,"class","caption svelte-koydfe"),v(ct,"href","#non-fast-forward-merge"),v(ct,"id","non-fast-forward-merge"),v(vt,"title","null"),v(vt,"alt","git-merge-non-ff"),v(vt,"data-src","610fbd9b1e091b6b.gif"),v(vt,"loading","lazy"),v(yt,"class","caption svelte-koydfe"),v(Pt,"href","#git-pull"),v(Pt,"id","git-pull"),v(Bt,"title","null"),v(Bt,"alt","git-pull"),v(Bt,"data-src","8abcb6ba74bc8300.gif"),v(Bt,"loading","lazy"),v(_t,"class","caption svelte-koydfe"),v(Qt,"href","#git-reset"),v(Qt,"id","git-reset"),v(Er,"title","null"),v(Er,"alt","git-reset"),v(Er,"data-src","6455262f1f1c176c.gif"),v(Er,"loading","lazy"),v(br,"class","caption svelte-koydfe"),v(Ir,"href","#git-cherry-pick"),v(Ir,"id","git-cherry-pick"),v(Ur,"title","null"),v(Ur,"alt","git-cherry-pick"),v(Ur,"data-src","43f5cfa399149816.gif"),v(Ur,"loading","lazy"),v(jr,"class","caption svelte-koydfe"),v(_r,"href","#git-revert"),v(_r,"id","git-revert"),v(Eo,"title","null"),v(Eo,"alt","git-revert"),v(Eo,"data-src","8f2e6d6d994d95d3.gif"),v(Eo,"loading","lazy"),v(bo,"class","caption svelte-koydfe"),v(To,"title","null"),v(To,"alt","git-revert-2"),v(To,"data-src","f911bb098d6b5bd0.gif"),v(To,"loading","lazy"),v(Lo,"class","caption svelte-koydfe"),v(Xo,"title","null"),v(Xo,"alt","git-revert-3"),v(Xo,"data-src","49e8e341afc972f0.gif"),v(Xo,"loading","lazy"),v(ec,"class","caption svelte-koydfe"),v(Cc,"title","null"),v(Cc,"alt","git-revert-4"),v(Cc,"data-src","949bbf6f9817c71a.gif"),v(Cc,"loading","lazy"),v(Ic,"class","caption svelte-koydfe"),v(Tc,"href","#git-rebase"),v(Tc,"id","git-rebase"),v(mi,"title","null"),v(mi,"alt","git-rebase"),v(mi,"data-src","475d4a996ddab5a8.gif"),v(mi,"loading","lazy"),v(ui,"class","caption svelte-koydfe"),v($i,"title","null"),v($i,"alt","git-rebase-2"),v($i,"data-src","6cff0833729fbadb.gif"),v($i,"loading","lazy"),v(Ni,"class","caption svelte-koydfe"),v(an,"type","image/webp"),v(an,"srcset","b2e7cead9fe8c5c8.webp"),v(tn,"type","image/jpeg"),v(tn,"srcset","b2e7cead9fe8c5c8.jpg"),v(rn,"title","null"),v(rn,"alt","git-rebase"),v(rn,"data-src","b2e7cead9fe8c5c8.jpg"),v(rn,"loading","lazy"),v(cn,"class","caption svelte-koydfe"),v(Ts,"href","#git-rebase-interactive"),v(Ts,"id","git-rebase-interactive"),v(Us,"type","image/webp"),v(Us,"srcset","f4f5e2a02869d046.webp"),v(zs,"type","image/jpeg"),v(zs,"srcset","f4f5e2a02869d046.png"),v(js,"title","null"),v(js,"alt","git-rebase-i-pick"),v(js,"data-src","f4f5e2a02869d046.png"),v(js,"loading","lazy"),v(Fs,"class","caption svelte-koydfe"),v(Xs,"class","language-null"),v(th,"href","#pick"),v(th,"id","pick"),v(lh,"type","image/webp"),v(lh,"srcset","f4f5e2a02869d046.webp"),v(fh,"type","image/jpeg"),v(fh,"srcset","f4f5e2a02869d046.png"),v(dh,"title","null"),v(dh,"alt","git-rebase-i-pick"),v(dh,"data-src","f4f5e2a02869d046.png"),v(dh,"loading","lazy"),v(gh,"class","language-null"),v(vh,"href","#drop"),v(vh,"id","drop"),v(Dh,"type","image/webp"),v(Dh,"srcset","355841674aa71990.webp"),v(Ah,"type","image/jpeg"),v(Ah,"srcset","355841674aa71990.png"),v(Ph,"title","null"),v(Ph,"alt","git-rebase-i-drop"),v(Ph,"data-src","355841674aa71990.png"),v(Ph,"loading","lazy"),v(Sh,"class","language-null"),v(Nh,"href","#squash-fixup"),v(Nh,"id","squash-fixup"),v(Qh,"type","image/webp"),v(Qh,"srcset","fd3eb938981581e2.webp"),v(Xh,"type","image/jpeg"),v(Xh,"srcset","fd3eb938981581e2.png"),v(Zh,"title","null"),v(Zh,"alt","git-rebase-i-squash"),v(Zh,"data-src","fd3eb938981581e2.png"),v(Zh,"loading","lazy"),v(al,"class","language-null"),v(cl,"href","#break"),v(cl,"id","break"),v(pl,"type","image/webp"),v(pl,"srcset","2b060f92d0e23b63.webp"),v(El,"type","image/jpeg"),v(El,"srcset","2b060f92d0e23b63.png"),v(vl,"title","null"),v(vl,"alt","git-rebase-i-break"),v(vl,"data-src","2b060f92d0e23b63.png"),v(vl,"loading","lazy"),v(yl,"class","language-null"),v(Il,"href","#edit"),v(Il,"id","edit"),v($l,"type","image/webp"),v($l,"srcset","2b060f92d0e23b63.webp"),v(xl,"type","image/jpeg"),v(xl,"srcset","2b060f92d0e23b63.png"),v(Nl,"title","null"),v(Nl,"alt","git-rebase-i-edit"),v(Nl,"data-src","2b060f92d0e23b63.png"),v(Nl,"loading","lazy"),v(Ml,"class","language-null"),v(zl,"href","#git-pull-rebase"),v(zl,"id","git-pull-rebase"),v(Zl,"title","null"),v(Zl,"alt","git-pull-rebase"),v(Zl,"data-src","34921f7344aa46e5.gif"),v(Zl,"loading","lazy"),v(af,"class","caption svelte-koydfe"),v(nf,"href","#git-rebase-a-shared-branch"),v(nf,"id","git-rebase-a-shared-branch"),v(If,"type","image/webp"),v(If,"srcset","c7dedf32afca356b.webp"),v(kf,"type","image/jpeg"),v(kf,"srcset","c7dedf32afca356b.png"),v(Df,"title","null"),v(Df,"alt","git-rebase-w"),v(Df,"data-src","c7dedf32afca356b.png"),v(Df,"loading","lazy"),v(Rf,"type","image/webp"),v(Rf,"srcset","34ca5606390b28f5.webp"),v(Uf,"type","image/jpeg"),v(Uf,"srcset","34ca5606390b28f5.png"),v(zf,"title","null"),v(zf,"alt","git-rebase-w-2"),v(zf,"data-src","34ca5606390b28f5.png"),v(zf,"loading","lazy"),v(Zf,"type","image/webp"),v(Zf,"srcset","ae144be0681b4ed4.webp"),v(ed,"type","image/jpeg"),v(ed,"srcset","ae144be0681b4ed4.png"),v(ad,"title","null"),v(ad,"alt","git-rebase-w-3"),v(ad,"data-src","ae144be0681b4ed4.png"),v(ad,"loading","lazy"),v(Td,"type","image/webp"),v(Td,"srcset","c6f5adaa2d62d6a0.webp"),v(Sd,"type","image/jpeg"),v(Sd,"srcset","c6f5adaa2d62d6a0.png"),v(Ld,"title","null"),v(Ld,"alt","git-rebase-w-4"),v(Ld,"data-src","c6f5adaa2d62d6a0.png"),v(Ld,"loading","lazy"),v(tm,"type","image/webp"),v(tm,"srcset","89a51a224ed20d86.webp"),v(rm,"type","image/jpeg"),v(rm,"srcset","89a51a224ed20d86.png"),v(om,"title","null"),v(om,"alt","git-rebase-w-5"),v(om,"data-src","89a51a224ed20d86.png"),v(om,"loading","lazy"),v($m,"href","#git-log"),v($m,"id","git-log"),v(zm,"href","#since-after-until-before"),v(zm,"id","since-after-until-before"),v(Wm,"href","#grep"),v(Wm,"id","grep"),v(tg,"href","#invert-grep"),v(tg,"id","invert-grep"),v(dg,"href","#all-match"),v(dg,"id","all-match"),v(Lg,"href","#min-parents-max-parents-merges-no-merges"),v(Lg,"id","min-parents-max-parents-merges-no-merges"),v(Yg,"href","#first-parent"),v(Yg,"id","first-parent"),v(tu,"href","#git-reflog"),v(tu,"id","git-reflog"),v(bu,"href","#git-bisect"),v(bu,"id","git-bisect"),v(Lu,"class","language-sh"),v(Qu,"class","language-null"),v(sp,"class","language-sh"),v(vp,"href","#summary"),v(vp,"id","summary"),v(cE,"href","/commit-went-missing-after-rebase/")},m(e,a){l(e,t,a),h(t,r),h(r,o),h(o,c),h(c,i),h(r,n),h(n,s),h(s,d),h(r,g),h(g,E),h(E,O),h(O,I),h(g,k),h(k,D),h(D,A),h(g,P),h(P,T),h(T,S),h(r,L),h(L,$),h($,x),h(r,N),h(N,G),h(G,M),h(r,H),h(H,R),h(R,U),h(r,z),h(z,j),h(j,q),h(r,F),h(F,B),h(B,Y),h(Y,_),h(F,V),h(V,W),h(W,K),h(K,J),h(V,Q),h(Q,X),h(X,Z),h(V,ee),h(ee,ae),h(ae,te),h(V,re),h(re,oe),h(oe,ce),h(V,ie),h(ie,ne),h(ne,se),h(F,he),h(he,le),h(le,fe),h(F,de),h(de,me),h(me,ge),h(r,ue),h(ue,pe),h(pe,Ee),h(r,ve),h(ve,be),h(be,ye),h(ye,we),h(ve,Ce),h(Ce,Oe),h(Oe,Ie),h(ve,ke),h(ke,De),h(De,Ae),h(ve,Pe),h(Pe,Te),h(Te,Se),h(ve,Le),h(Le,$e),h($e,xe),h(ve,Ne),h(Ne,Ge),h(Ge,Me),h(r,He),h(He,Re),h(Re,Ue),h(r,ze),h(ze,je),h(je,qe),h(r,Fe),h(Fe,Be),h(Be,Ye),l(e,_e,a),l(e,Ve,a),h(Ve,We),l(e,Ke,a),l(e,Je,a),h(Je,Qe),h(Je,Xe),h(Xe,Ze),h(Je,ea),h(Je,aa),h(aa,ta),h(Je,ra),l(e,oa,a),l(e,ca,a),h(ca,ia),h(ia,na),l(e,sa,a),l(e,ha,a),h(ha,la),h(la,fa),h(fa,da),h(ha,ma),h(ha,ga),h(ga,ua),h(ga,pa),h(pa,Ea),h(ga,va),l(e,ba,a),l(e,ya,a),h(ya,wa),h(wa,Ca),h(Ca,Oa),h(ya,Ia),h(ya,ka),h(ka,Da),h(ka,Aa),h(Aa,Pa),h(ka,Ta),h(ka,Sa),h(Sa,La),h(ka,$a),h(ka,xa),h(xa,Na),h(ka,Ga),l(e,Ma,a),l(e,Ha,a),h(Ha,Ra),h(Ra,Ua),h(Ua,za),h(Ha,ja),h(Ha,qa),h(qa,Fa),h(qa,Ba),h(Ba,Ya),h(qa,_a),h(qa,Va),h(Va,Wa),h(qa,Ka),h(Ha,Ja),h(Ha,Qa),h(Qa,Xa),h(Ha,Za),h(Ha,et),h(et,at),l(e,tt,a),l(e,rt,a),h(rt,ot),h(ot,ct),h(ct,it),h(rt,nt),h(rt,st),h(st,ht),h(st,lt),h(lt,ft),h(st,dt),h(st,mt),h(mt,gt),h(st,ut),h(rt,pt),h(rt,Et),h(Et,vt),h(rt,bt),h(rt,yt),h(yt,wt),h(rt,Ct),h(rt,Ot),h(Ot,It),l(e,kt,a),l(e,Dt,a),h(Dt,At),h(At,Pt),h(Pt,Tt),h(Dt,St),h(Dt,Lt),h(Lt,$t),h(Lt,xt),h(xt,Nt),h(Lt,Gt),h(Lt,Mt),h(Mt,Ht),h(Lt,Rt),h(Lt,Ut),h(Ut,zt),h(Lt,jt),h(Dt,qt),h(Dt,Ft),h(Ft,Bt),h(Dt,Yt),h(Dt,_t),h(_t,Vt),l(e,Wt,a),l(e,Kt,a),h(Kt,Jt),h(Jt,Qt),h(Qt,Xt),h(Kt,Zt),h(Kt,er),h(er,ar),h(ar,tr),h(er,rr),h(Kt,or),h(Kt,cr),h(cr,ir),h(ir,nr),h(cr,sr),h(cr,hr),h(hr,lr),h(cr,fr),h(cr,dr),h(dr,mr),h(cr,gr),h(Kt,ur),h(Kt,pr),h(pr,Er),h(Kt,vr),h(Kt,br),h(br,yr),l(e,wr,a),l(e,Cr,a),h(Cr,Or),h(Or,Ir),h(Ir,kr),h(Cr,Dr),h(Cr,Ar),h(Ar,Pr),h(Cr,Tr),h(Cr,Sr),h(Sr,Lr),h(Lr,$r),h(Sr,xr),h(Sr,Nr),h(Nr,Gr),h(Sr,Mr),h(Cr,Hr),h(Cr,Rr),h(Rr,Ur),h(Cr,zr),h(Cr,jr),h(jr,qr),l(e,Fr,a),l(e,Br,a),h(Br,Yr),h(Yr,_r),h(_r,Vr),h(Br,Wr),h(Br,Kr),h(Kr,Jr),h(Jr,Qr),h(Kr,Xr),h(Br,Zr),h(Br,eo),h(eo,ao),h(eo,to),h(to,ro),h(eo,oo),h(eo,co),h(co,io),h(eo,no),h(eo,so),h(so,ho),h(eo,lo),h(eo,fo),h(fo,mo),h(eo,go),h(Br,uo),h(Br,po),h(po,Eo),h(Br,vo),h(Br,bo),h(bo,yo),h(Br,wo),h(Br,Co),h(Co,Oo),h(Co,Io),h(Io,ko),h(Co,Do),h(Br,Ao),h(Br,Po),h(Po,To),h(Br,So),h(Br,Lo),h(Lo,$o),h(Br,xo),h(Br,No),h(No,Go),h(No,Mo),h(Mo,Ho),h(No,Ro),h(No,Uo),h(Uo,zo),h(No,jo),h(No,qo),h(qo,Fo),h(No,Bo),h(Br,Yo),h(Br,_o),h(_o,Vo),h(Vo,Wo),h(_o,Ko),h(Br,Jo),h(Br,Qo),h(Qo,Xo),h(Br,Zo),h(Br,ec),h(ec,ac),h(Br,tc),h(Br,rc),h(rc,oc),h(rc,cc),h(cc,ic),h(rc,nc),h(rc,sc),h(sc,hc),h(rc,lc),h(rc,fc),h(fc,dc),h(rc,mc),h(rc,gc),h(gc,uc),h(rc,pc),h(rc,Ec),h(Ec,vc),h(rc,bc),h(Br,yc),h(Br,wc),h(wc,Cc),h(Br,Oc),h(Br,Ic),h(Ic,kc),l(e,Dc,a),l(e,Ac,a),h(Ac,Pc),h(Pc,Tc),h(Tc,Sc),h(Ac,Lc),h(Ac,$c),h($c,xc),h(xc,Nc),h($c,Gc),h(Ac,Mc),h(Ac,Hc),h(Hc,Rc),h(Hc,Uc),h(Uc,zc),h(Hc,jc),h(Hc,qc),h(qc,Fc),h(Hc,Bc),h(Hc,Yc),h(Yc,_c),h(Hc,Vc),h(Hc,Wc),h(Wc,Kc),h(Hc,Jc),h(Hc,Qc),h(Qc,Xc),h(Hc,Zc),h(Hc,ei),h(ei,ai),h(Hc,ti),h(Ac,ri),h(Ac,oi),h(oi,ci),h(ci,ii),h(oi,ni),h(oi,si),h(si,hi),h(oi,li),h(Ac,fi),h(Ac,di),h(di,mi),h(Ac,gi),h(Ac,ui),h(ui,pi),h(Ac,Ei),h(Ac,vi),h(vi,bi),h(bi,yi),h(vi,wi),h(Ac,Ci),h(Ac,Oi),h(Oi,Ii),h(Ii,ki),h(Oi,Di),h(Oi,Ai),h(Ai,Pi),h(Oi,Ti),h(Ac,Si),h(Ac,Li),h(Li,$i),h(Ac,xi),h(Ac,Ni),h(Ni,Gi),h(Ac,Mi),h(Ac,Hi),h(Hi,Ri),h(Ac,Ui),h(Ac,zi),h(zi,ji),h(ji,qi),h(qi,Fi),h(zi,Bi),h(zi,Yi),h(Yi,_i),h(_i,Vi),h(zi,Wi),h(zi,Ki),h(Ki,Ji),h(Ji,Qi),h(Ac,Xi),h(Ac,Zi),h(Zi,en),h(en,an),h(en,tn),h(en,rn),h(Ac,on),h(Ac,cn),h(cn,nn),h(Ac,sn),h(Ac,hn),h(hn,ln),h(Ac,fn),h(Ac,dn),h(dn,mn),h(mn,gn),h(gn,un),h(mn,pn),h(mn,En),h(En,vn),h(mn,bn),h(mn,yn),h(yn,wn),h(mn,Cn),h(mn,On),h(On,In),h(mn,kn),h(dn,Dn),h(dn,An),h(An,Pn),h(An,Tn),h(Tn,Sn),h(An,Ln),h(An,$n),h($n,xn),h(An,Nn),h(An,Gn),h(Gn,Mn),h(An,Hn),h(An,Rn),h(Rn,Un),h(An,zn),h(An,jn),h(jn,qn),h(An,Fn),h(dn,Bn),h(dn,Yn),h(Yn,_n),h(Yn,Vn),h(Vn,Wn),h(Yn,Kn),h(Yn,Jn),h(Jn,Qn),h(Yn,Xn),h(dn,Zn),h(dn,es),h(es,as),h(es,ts),h(ts,rs),h(es,os),h(es,cs),h(cs,is),h(es,ns),h(es,ss),h(ss,hs),h(es,ls),h(es,fs),h(fs,ds),h(es,ms),h(dn,gs),h(dn,us),h(us,ps),h(us,Es),h(Es,vs),h(us,bs),h(us,ys),h(ys,ws),h(us,Cs),h(us,Os),h(Os,Is),h(us,ks),l(e,Ds,a),l(e,As,a),h(As,Ps),h(Ps,Ts),h(Ts,Ss),h(As,Ls),h(As,$s),h($s,xs),h(xs,Ns),h($s,Gs),h(As,Ms),h(As,Hs),h(Hs,Rs),h(Rs,Us),h(Rs,zs),h(Rs,js),h(As,qs),h(As,Fs),h(Fs,Bs),h(As,Ys),h(As,_s),h(_s,Vs),h(_s,Ws),h(Ws,Ks),h(_s,Js),h(As,Qs),h(As,Xs),Xs.innerHTML='\n<code class="language-">pick #2 commit msg 2\npick #3 commit msg 3\npick #4 commit msg 4\npick #5 commit msg 5\npick #6 commit msg 6\n\n# Rebase #1..#6 onto #1 (5 commands)\n#\n# Commands:\n# p, pick = use commit\n# r, reword = use commit, but edit the commit message\n# e, edit = use commit, but stop for amending\n...</code>',l(e,Zs,a),l(e,eh,a),h(eh,ah),h(ah,th),h(th,rh),h(eh,oh),h(eh,ch),h(ch,ih),h(eh,nh),h(eh,sh),h(sh,hh),h(hh,lh),h(hh,fh),h(hh,dh),h(eh,mh),h(eh,gh),gh.innerHTML='\n<code class="language-">pick #2 commit msg 2\npick #3 commit msg 3\npick #4 commit msg 4\npick #5 commit msg 5\npick #6 commit msg 6</code>',l(e,uh,a),l(e,ph,a),h(ph,Eh),h(Eh,vh),h(vh,bh),h(ph,yh),h(ph,wh),h(wh,Ch),h(ph,Oh),h(ph,Ih),h(Ih,kh),h(kh,Dh),h(kh,Ah),h(kh,Ph),h(ph,Th),h(ph,Sh),Sh.innerHTML='\n<code class="language-">pick #2 commit msg 2\ndrop #3 commit msg 3\npick #4 commit msg 4\npick #5 commit msg 5\npick #6 commit msg 6</code>',l(e,Lh,a),l(e,$h,a),h($h,xh),h(xh,Nh),h(Nh,Gh),h($h,Mh),h($h,Hh),h(Hh,Rh),h(Hh,Uh),h(Uh,zh),h(Hh,jh),h(Hh,qh),h(qh,Fh),h(Hh,Bh),h(Hh,Yh),h(Yh,_h),h(Hh,Vh),h($h,Wh),h($h,Kh),h(Kh,Jh),h(Jh,Qh),h(Jh,Xh),h(Jh,Zh),h($h,el),h($h,al),al.innerHTML='\n<code class="language-">pick   #2 commit msg 2\nsquash #3 commit msg 3\npick   #4 commit msg 4\nfixup  #5 commit msg 5\npick   #6 commit msg 6</code>',l(e,tl,a),l(e,rl,a),h(rl,ol),h(ol,cl),h(cl,il),h(rl,nl),h(rl,sl),h(sl,hl),h(sl,ll),h(ll,fl),h(sl,dl),h(rl,ml),h(rl,gl),h(gl,ul),h(ul,pl),h(ul,El),h(ul,vl),h(rl,bl),h(rl,yl),yl.innerHTML='\n<code class="language-">pick   #2 commit msg 2\npick   #3 commit msg 3\nbreak\npick   #4 commit msg 4\npick   #5 commit msg 5\npick   #6 commit msg 6</code>',l(e,wl,a),l(e,Cl,a),h(Cl,Ol),h(Ol,Il),h(Il,kl),h(Cl,Dl),h(Cl,Al),h(Al,Pl),h(Cl,Tl),h(Cl,Sl),h(Sl,Ll),h(Ll,$l),h(Ll,xl),h(Ll,Nl),h(Cl,Gl),h(Cl,Ml),Ml.innerHTML='\n<code class="language-">pick   #2 commit msg 2\nedit   #3 commit msg 3\npick   #4 commit msg 4\npick   #5 commit msg 5\npick   #6 commit msg 6</code>',l(e,Hl,a),l(e,Rl,a),h(Rl,Ul),h(Ul,zl),h(zl,jl),h(Rl,ql),h(Rl,Fl),h(Fl,Bl),h(Fl,Yl),h(Yl,_l),h(Fl,Vl),h(Fl,Wl),h(Wl,Kl),h(Fl,Jl),h(Rl,Ql),h(Rl,Xl),h(Xl,Zl),h(Rl,ef),h(Rl,af),h(af,tf),l(e,rf,a),l(e,of,a),h(of,cf),h(cf,nf),h(nf,sf),h(of,hf),h(of,lf),h(lf,ff),h(lf,df),h(df,mf),h(lf,gf),h(lf,uf),h(uf,pf),h(lf,Ef),h(lf,vf),h(vf,bf),h(lf,yf),h(of,wf),h(of,Cf),h(Cf,Of),h(Of,If),h(Of,kf),h(Of,Df),h(of,Af),h(of,Pf),h(Pf,Tf),h(Tf,Sf),h(Pf,Lf),h(Pf,$f),h($f,xf),h(Pf,Nf),h(of,Gf),h(of,Mf),h(Mf,Hf),h(Hf,Rf),h(Hf,Uf),h(Hf,zf),h(of,jf),h(of,qf),h(qf,Ff),h(qf,Bf),h(Bf,Yf),h(qf,_f),h(qf,Vf),h(Vf,Wf),h(qf,Kf),h(of,Jf),h(of,Qf),h(Qf,Xf),h(Xf,Zf),h(Xf,ed),h(Xf,ad),h(of,td),h(of,rd),h(rd,od),h(rd,cd),h(cd,id),h(rd,nd),h(rd,sd),h(sd,hd),h(rd,ld),h(rd,fd),h(fd,dd),h(rd,md),h(of,gd),h(of,ud),h(ud,pd),h(ud,Ed),h(Ed,vd),h(ud,bd),h(ud,yd),h(yd,wd),h(ud,Cd),h(ud,Od),h(Od,Id),h(ud,kd),h(of,Dd),h(of,Ad),h(Ad,Pd),h(Pd,Td),h(Pd,Sd),h(Pd,Ld),h(of,$d),h(of,xd),h(xd,Nd),h(xd,Gd),h(Gd,Md),h(xd,Hd),h(xd,Rd),h(Rd,Ud),h(xd,zd),h(of,jd),h(of,qd),h(qd,Fd),h(qd,Bd),h(Bd,Yd),h(qd,_d),h(qd,Vd),h(Vd,Wd),h(qd,Kd),h(qd,Jd),h(Jd,Qd),h(qd,Xd),h(of,Zd),h(of,em),h(em,am),h(am,tm),h(am,rm),h(am,om),h(of,cm),h(of,im),h(im,nm),h(im,sm),h(sm,hm),h(im,lm),h(im,fm),h(fm,dm),h(im,mm),h(im,gm),h(gm,um),h(im,pm),h(im,Em),h(Em,vm),h(im,bm),h(of,ym),h(of,wm),h(wm,Cm),h(wm,Om),h(Om,Im),h(wm,km),h(wm,Dm),h(Dm,Am),h(wm,Pm),l(e,Tm,a),l(e,Sm,a),h(Sm,Lm),h(Lm,$m),h($m,xm),h(Sm,Nm),h(Sm,Gm),h(Gm,Mm),l(e,Hm,a),l(e,Rm,a),h(Rm,Um),h(Um,zm),h(zm,jm),h(Rm,qm),h(Rm,Fm),h(Fm,Bm),l(e,Ym,a),l(e,_m,a),h(_m,Vm),h(Vm,Wm),h(Wm,Km),h(_m,Jm),h(_m,Qm),h(Qm,Xm),l(e,Zm,a);l(e,eg,a),h(eg,ag),h(ag,tg),h(tg,rg),h(eg,og),h(eg,cg),h(cg,ig),h(cg,ng),h(ng,sg),l(e,hg,a),l(e,lg,a),h(lg,fg),h(fg,dg),h(dg,mg),h(lg,gg),h(lg,ug),h(ug,pg),h(pg,Eg),h(ug,vg),h(ug,bg),h(bg,yg),h(ug,wg),h(ug,Cg),h(Cg,Og),h(ug,Ig),h(ug,kg),h(kg,Dg),h(ug,Ag),l(e,Pg,a),l(e,Tg,a),h(Tg,Sg),h(Sg,Lg),h(Lg,$g),h(Tg,xg),h(Tg,Ng),h(Ng,Gg),h(Ng,Mg),h(Mg,Hg),h(Ng,Rg),h(Ng,Ug),h(Ug,zg),h(Ng,jg),l(e,qg,a),l(e,Fg,a),h(Fg,Bg),h(Bg,Yg),h(Yg,_g),h(Fg,Vg),h(Fg,Wg),h(Wg,Kg),h(Wg,Jg),h(Jg,Qg),h(Wg,Xg),l(e,Zg,a),l(e,eu,a),h(eu,au),h(au,tu),h(tu,ru),h(eu,ou),h(eu,cu),h(cu,iu),h(cu,nu),h(nu,su),h(cu,hu),h(cu,lu),h(lu,fu),h(cu,du),h(cu,mu),h(mu,gu),h(cu,uu),l(e,pu,a),l(e,Eu,a),h(Eu,vu),h(vu,bu),h(bu,yu),h(Eu,wu),h(Eu,Cu),h(Cu,Ou),h(Eu,Iu),h(Eu,ku),h(ku,Du),h(ku,Au),h(Au,Pu),h(ku,Tu),h(Eu,Su),h(Eu,Lu),Lu.innerHTML='<code class="language-sh">$ git bisect start # starts the bisect session\n$ git bisect bad v2.5.1 # specify the commit you know is bad\n$ git bisect good v2.6.13 # specify the commit you knew were good</code>',h(Eu,$u),h(Eu,xu),h(xu,Nu),h(xu,Gu),h(Gu,Mu),h(xu,Hu),h(xu,Ru),h(Ru,Uu),h(xu,zu),h(xu,ju),h(ju,qu),h(xu,Fu),h(xu,Bu),h(Bu,Yu),h(xu,_u),h(xu,Vu),h(Vu,Wu),h(xu,Ku),h(Eu,Ju),h(Eu,Qu),Qu.innerHTML='\n<code class="language-">Bisecting: 675 revisions left to test after this (roughly 10 steps)</code>',h(Eu,Xu),h(Eu,Zu),h(Zu,ep),h(Zu,ap),h(ap,tp),h(Zu,rp),h(Zu,op),h(op,cp),h(Zu,ip),h(Eu,np),h(Eu,sp),sp.innerHTML='<code class="language-sh"># if it is a good commit\n$ git bisect good\n\n# if it is a bad commit\n$ git bisect bad</code>',h(Eu,hp),h(Eu,lp),h(lp,fp),h(lp,dp),h(dp,mp),h(lp,gp),l(e,up,a),l(e,pp,a),h(pp,Ep),h(Ep,vp),h(vp,bp),h(pp,yp),h(pp,wp),h(wp,Cp),h(pp,Op),h(pp,Ip),h(Ip,kp),h(kp,Dp),h(Ip,Ap),h(Ip,Pp),h(Pp,Tp),h(Ip,Sp),h(Ip,Lp),h(Lp,$p),h(Ip,xp),h(Ip,Np),h(Np,Gp),h(Ip,Mp),h(Ip,Hp),h(Hp,Rp),h(Ip,Up),h(Ip,zp),h(zp,jp),h(Ip,qp),h(Ip,Fp),h(Fp,Bp),h(Ip,Yp),h(Ip,_p),h(_p,Vp),h(pp,Wp),h(pp,Kp),h(Kp,Jp),h(Kp,Qp),h(Qp,Xp),h(Kp,Zp),h(pp,eE),h(pp,aE),h(pp,tE),h(pp,rE),h(rE,oE),h(rE,cE),h(cE,iE)},p:e,d(e){e&&f(t),e&&f(_e),e&&f(Ve),e&&f(Ke),e&&f(Je),e&&f(oa),e&&f(ca),e&&f(sa),e&&f(ha),e&&f(ba),e&&f(ya),e&&f(Ma),e&&f(Ha),e&&f(tt),e&&f(rt),e&&f(kt),e&&f(Dt),e&&f(Wt),e&&f(Kt),e&&f(wr),e&&f(Cr),e&&f(Fr),e&&f(Br),e&&f(Dc),e&&f(Ac),e&&f(Ds),e&&f(As),e&&f(Zs),e&&f(eh),e&&f(uh),e&&f(ph),e&&f(Lh),e&&f($h),e&&f(tl),e&&f(rl),e&&f(wl),e&&f(Cl),e&&f(Hl),e&&f(Rl),e&&f(rf),e&&f(of),e&&f(Tm),e&&f(Sm),e&&f(Hm),e&&f(Rm),e&&f(Ym),e&&f(_m),e&&f(Zm),e&&f(eg),e&&f(hg),e&&f(lg),e&&f(Pg),e&&f(Tg),e&&f(qg),e&&f(Fg),e&&f(Zg),e&&f(eu),e&&f(pu),e&&f(Eu),e&&f(up),e&&f(pp)}}}function fe(e){let t,r;const o=[de];let c={$$slots:{default:[le]},$$scope:{ctx:e}};for(let e=0;e<o.length;e+=1)c=a(c,o[e]);return t=new he({props:c}),{c(){F(t.$$.fragment)},l(e){B(t.$$.fragment,e)},m(e,a){Y(t,e,a),r=!0},p(e,[a]){const r=0&a?function(e,a){const t={},r={},o={$$scope:1};let c=e.length;for(;c--;){const i=e[c],n=a[c];if(n){for(const e in i)e in n||(r[e]=1);for(const e in n)o[e]||(t[e]=n[e],o[e]=1);e[c]=n}else for(const e in i)o[e]=1}for(const e in r)e in t||(t[e]=void 0);return t}(o,[(c=de,"object"==typeof c&&null!==c?c:{})]):{};var c;1&a&&(r.$$scope={dirty:a,ctx:e}),t.$set(r)},i(e){r||(j(t.$$.fragment,e),r=!0)},o(e){q(t.$$.fragment,e),r=!1},d(e){_(t,e)}}}const de={title:"Git Gudder",venue:"Shopee SG",venueLink:"https://www.google.com.sg/maps/place/Shopee+Building/@1.2923933,103.7860786,19z/data=!3m1!4b1!4m5!3m4!1s0x31da1b803e3bae77:0x154e17d66760912b!8m2!3d1.2923933!4d103.7866258",occasion:"React Knowledgeable Week 41",occasionLink:"https://github.com/Shopee/shopee-react-knowledgeable/issues/129",slides:"https://slides.com/tanhauhau/git-gudder",date:"2019-08-30",slug:"git-gudder",type:"talk"};class me extends K{constructor(e){super(),W(this,e,null,fe,i,{})}}setTimeout(()=>{new me({target:document.querySelector("#app"),hydrate:!0});if(document.querySelector(".twitter-tweet")){const e=document.createElement("script");e.async=!0,e.src="https://platform.twitter.com/widgets.js",e.charset="utf-8",document.body.appendChild(e)}if("loading"in HTMLImageElement.prototype){document.querySelectorAll('img[loading="lazy"]').forEach(e=>{e.src=e.dataset.src})}else{const e=document.createElement("script");e.src="https://cdnjs.cloudflare.com/ajax/libs/lazysizes/5.1.2/lazysizes.min.js",document.body.appendChild(e)}},3e3);
