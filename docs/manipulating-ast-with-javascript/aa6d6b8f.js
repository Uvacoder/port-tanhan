function n(){}function a(n,a){for(const s in a)n[s]=a[s];return n}function s(n){return n()}function t(){return Object.create(null)}function e(n){n.forEach(s)}function o(n){return"function"==typeof n}function p(n,a){return n!=n?a==a:n!==a||n&&"object"==typeof n||"function"==typeof n}function c(n,s,t,e){return n[1]&&e?a(t.ctx.slice(),n[1](e(s))):t.ctx}function r(n,a,s,t,e,o,p){const r=function(n,a,s,t){if(n[2]&&t){const e=n[2](t(s));if(void 0===a.dirty)return e;if("object"==typeof e){const n=[],s=Math.max(a.dirty.length,e.length);for(let t=0;t<s;t+=1)n[t]=a.dirty[t]|e[t];return n}return a.dirty|e}return a.dirty}(a,t,e,o);if(r){const e=c(a,s,t,p);n.p(e,r)}}function i(n,a){n.appendChild(a)}function l(n,a,s){n.insertBefore(a,s||null)}function u(n){n.parentNode.removeChild(n)}function k(n,a){for(let s=0;s<n.length;s+=1)n[s]&&n[s].d(a)}function h(n){return document.createElement(n)}function f(n){return document.createElementNS("http://www.w3.org/2000/svg",n)}function d(n){return document.createTextNode(n)}function m(){return d(" ")}function g(){return d("")}function v(n,a,s){null==s?n.removeAttribute(a):n.getAttribute(a)!==s&&n.setAttribute(a,s)}function y(n){return Array.from(n.childNodes)}function w(n,a,s,t){for(let t=0;t<n.length;t+=1){const e=n[t];if(e.nodeName===a){let a=0;const o=[];for(;a<e.attributes.length;){const n=e.attributes[a++];s[n.name]||o.push(n.name)}for(let n=0;n<o.length;n++)e.removeAttribute(o[n]);return n.splice(t,1)[0]}}return t?f(a):h(a)}function E(n,a){for(let s=0;s<n.length;s+=1){const t=n[s];if(3===t.nodeType)return t.data=""+a,n.splice(s,1)[0]}return d(a)}function b(n){return E(n," ")}function T(n,a){a=""+a,n.wholeText!==a&&(n.data=a)}function A(n,a){n.value=null==a?"":a}function S(n,a,s,t){n.style.setProperty(a,s,t?"important":"")}class x{constructor(n=null){this.a=n,this.e=this.n=null}m(n,a,s=null){this.e||(this.e=h(a.nodeName),this.t=a,this.h(n)),this.i(s)}h(n){this.e.innerHTML=n,this.n=Array.from(this.e.childNodes)}i(n){for(let a=0;a<this.n.length;a+=1)l(this.t,this.n[a],n)}p(n){this.d(),this.h(n),this.i(this.a)}d(){this.n.forEach(u)}}let j;function P(n){j=n}function I(n){(function(){if(!j)throw new Error("Function called outside component initialization");return j})().$$.on_mount.push(n)}const L=[],M=[],C=[],N=[],$=Promise.resolve();let O=!1;function H(n){C.push(n)}let R=!1;const D=new Set;function B(){if(!R){R=!0;do{for(let n=0;n<L.length;n+=1){const a=L[n];P(a),F(a.$$)}for(L.length=0;M.length;)M.pop()();for(let n=0;n<C.length;n+=1){const a=C[n];D.has(a)||(D.add(a),a())}C.length=0}while(L.length);for(;N.length;)N.pop()();O=!1,R=!1,D.clear()}}function F(n){if(null!==n.fragment){n.update(),e(n.before_update);const a=n.dirty;n.dirty=[-1],n.fragment&&n.fragment.p(n.ctx,a),n.after_update.forEach(H)}}const _=new Set;function z(n,a){n&&n.i&&(_.delete(n),n.i(a))}function J(n,a,s,t){if(n&&n.o){if(_.has(n))return;_.add(n),(void 0).c.push(()=>{_.delete(n),t&&(s&&n.d(1),t())}),n.o(a)}}function U(n){n&&n.c()}function W(n,a){n&&n.l(a)}function G(n,a,t){const{fragment:p,on_mount:c,on_destroy:r,after_update:i}=n.$$;p&&p.m(a,t),H(()=>{const a=c.map(s).filter(o);r?r.push(...a):e(a),n.$$.on_mount=[]}),i.forEach(H)}function Y(n,a){const s=n.$$;null!==s.fragment&&(e(s.on_destroy),s.fragment&&s.fragment.d(a),s.on_destroy=s.fragment=null,s.ctx=[])}function q(n,a){-1===n.$$.dirty[0]&&(L.push(n),O||(O=!0,$.then(B)),n.$$.dirty.fill(0)),n.$$.dirty[a/31|0]|=1<<a%31}function K(a,s,o,p,c,r,i=[-1]){const l=j;P(a);const k=s.props||{},h=a.$$={fragment:null,ctx:null,props:r,update:n,not_equal:c,bound:t(),on_mount:[],on_destroy:[],before_update:[],after_update:[],context:new Map(l?l.$$.context:[]),callbacks:t(),dirty:i};let f=!1;if(h.ctx=o?o(a,k,(n,s,...t)=>{const e=t.length?t[0]:s;return h.ctx&&c(h.ctx[n],h.ctx[n]=e)&&(h.bound[n]&&h.bound[n](e),f&&q(a,n)),s}):[],h.update(),f=!0,e(h.before_update),h.fragment=!!p&&p(h.ctx),s.target){if(s.hydrate){const n=y(s.target);h.fragment&&h.fragment.l(n),n.forEach(u)}else h.fragment&&h.fragment.c();s.intro&&z(a.$$.fragment),G(a,s.target,s.anchor),B()}P(l)}class V{$destroy(){Y(this,1),this.$destroy=n}$on(n,a){const s=this.$$.callbacks[n]||(this.$$.callbacks[n]=[]);return s.push(a),()=>{const n=s.indexOf(a);-1!==n&&s.splice(n,1)}}$set(){}}function Q(a){let s,t,e,o,p,c,r,k,g,T,A,S,x,j,P,I,L,M,C,N,$,O,H,R,D,B,F,_,z,J,U,W,G,Y,q;return{c(){s=h("header"),t=h("nav"),e=h("ul"),o=h("li"),p=h("a"),c=d("Tan Li Hau"),r=m(),k=h("li"),g=h("a"),T=d("About"),A=m(),S=h("li"),x=h("a"),j=d("Writings"),P=m(),I=h("li"),L=h("a"),M=d("Talks"),C=m(),N=h("li"),$=h("a"),O=d("Notes"),H=m(),R=h("li"),D=h("a"),B=d("Newsletter"),F=m(),_=h("li"),z=h("a"),J=f("svg"),U=f("path"),W=m(),G=h("a"),Y=f("svg"),q=f("path"),this.h()},l(n){s=w(n,"HEADER",{class:!0});var a=y(s);t=w(a,"NAV",{});var i=y(t);e=w(i,"UL",{class:!0});var l=y(e);o=w(l,"LI",{class:!0});var h=y(o);p=w(h,"A",{href:!0,class:!0});var f=y(p);c=E(f,"Tan Li Hau"),f.forEach(u),h.forEach(u),r=b(l),k=w(l,"LI",{class:!0});var d=y(k);g=w(d,"A",{href:!0,class:!0});var m=y(g);T=E(m,"About"),m.forEach(u),d.forEach(u),A=b(l),S=w(l,"LI",{class:!0});var v=y(S);x=w(v,"A",{href:!0,class:!0});var K=y(x);j=E(K,"Writings"),K.forEach(u),v.forEach(u),P=b(l),I=w(l,"LI",{class:!0});var V=y(I);L=w(V,"A",{href:!0,class:!0});var Q=y(L);M=E(Q,"Talks"),Q.forEach(u),V.forEach(u),C=b(l),N=w(l,"LI",{class:!0});var Z=y(N);$=w(Z,"A",{href:!0,class:!0});var X=y($);O=E(X,"Notes"),X.forEach(u),Z.forEach(u),H=b(l),R=w(l,"LI",{class:!0});var nn=y(R);D=w(nn,"A",{href:!0,class:!0});var an=y(D);B=E(an,"Newsletter"),an.forEach(u),nn.forEach(u),F=b(l),_=w(l,"LI",{class:!0});var sn=y(_);z=w(sn,"A",{"aria-label":!0,href:!0,class:!0});var tn=y(z);J=w(tn,"svg",{viewBox:!0,width:!0,height:!0,class:!0},1);var en=y(J);U=w(en,"path",{d:!0},1),y(U).forEach(u),en.forEach(u),tn.forEach(u),W=b(sn),G=w(sn,"A",{"aria-label":!0,href:!0,class:!0});var on=y(G);Y=w(on,"svg",{viewBox:!0,width:!0,height:!0,class:!0},1);var pn=y(Y);q=w(pn,"path",{d:!0},1),y(q).forEach(u),pn.forEach(u),on.forEach(u),sn.forEach(u),l.forEach(u),i.forEach(u),a.forEach(u),this.h()},h(){v(p,"href","/"),v(p,"class","svelte-f3e4uo"),v(o,"class","svelte-f3e4uo"),v(g,"href","/about"),v(g,"class","svelte-f3e4uo"),v(k,"class","svelte-f3e4uo"),v(x,"href","/blogs"),v(x,"class","svelte-f3e4uo"),v(S,"class","svelte-f3e4uo"),v(L,"href","/talks"),v(L,"class","svelte-f3e4uo"),v(I,"class","svelte-f3e4uo"),v($,"href","/notes"),v($,"class","svelte-f3e4uo"),v(N,"class","svelte-f3e4uo"),v(D,"href","/newsletter"),v(D,"class","svelte-f3e4uo"),v(R,"class","svelte-f3e4uo"),v(U,"d","M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66\n    10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5\n    4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"),v(J,"viewBox","0 0 24 24"),v(J,"width","1em"),v(J,"height","1em"),v(J,"class","svelte-f3e4uo"),v(z,"aria-label","Twitter account"),v(z,"href","https://twitter.com/lihautan"),v(z,"class","svelte-f3e4uo"),v(q,"d","M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0\n    0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07\n    5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65\n    5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42\n    3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"),v(Y,"viewBox","0 0 24 24"),v(Y,"width","1em"),v(Y,"height","1em"),v(Y,"class","svelte-f3e4uo"),v(G,"aria-label","Github account"),v(G,"href","https://github.com/tanhauhau"),v(G,"class","svelte-f3e4uo"),v(_,"class","social svelte-f3e4uo"),v(e,"class","svelte-f3e4uo"),v(s,"class","svelte-f3e4uo")},m(n,a){l(n,s,a),i(s,t),i(t,e),i(e,o),i(o,p),i(p,c),i(e,r),i(e,k),i(k,g),i(g,T),i(e,A),i(e,S),i(S,x),i(x,j),i(e,P),i(e,I),i(I,L),i(L,M),i(e,C),i(e,N),i(N,$),i($,O),i(e,H),i(e,R),i(R,D),i(D,B),i(e,F),i(e,_),i(_,z),i(z,J),i(J,U),i(_,W),i(_,G),i(G,Y),i(Y,q)},p:n,i:n,o:n,d(n){n&&u(s)}}}class Z extends V{constructor(n){super(),K(this,n,null,Q,p,{})}}function X(a){let s,t,e,o,p,c,r,k,f,g,T,S,x,j,P,I,L,M,C,N;return{c(){s=h("div"),t=h("h1"),e=d("Subscribe to my newsletter"),o=m(),p=h("h2"),c=d("Get the latest blog posts and project updates delivered right to your inbox"),r=m(),k=h("form"),f=h("div"),g=h("input"),T=m(),S=h("input"),j=m(),P=h("input"),I=m(),L=h("p"),M=d("Powered by Buttondown."),this.h()},l(n){s=w(n,"DIV",{class:!0});var a=y(s);t=w(a,"H1",{});var i=y(t);e=E(i,"Subscribe to my newsletter"),i.forEach(u),o=b(a),p=w(a,"H2",{class:!0});var l=y(p);c=E(l,"Get the latest blog posts and project updates delivered right to your inbox"),l.forEach(u),r=b(a),k=w(a,"FORM",{action:!0,method:!0,target:!0,onsubmit:!0,class:!0});var h=y(k);f=w(h,"DIV",{class:!0});var d=y(f);g=w(d,"INPUT",{type:!0,name:!0,id:!0,"aria-label":!0,placeholder:!0,class:!0}),T=b(d),S=w(d,"INPUT",{type:!0,value:!0,disabled:!0,class:!0}),d.forEach(u),j=b(h),P=w(h,"INPUT",{type:!0,value:!0,name:!0,class:!0}),I=b(h),L=w(h,"P",{class:!0});var m=y(L);M=E(m,"Powered by Buttondown."),m.forEach(u),h.forEach(u),a.forEach(u),this.h()},h(){v(p,"class","svelte-1k1s1co"),v(g,"type","email"),v(g,"name","email"),v(g,"id","bd-email"),v(g,"aria-label","email address"),v(g,"placeholder","youremail@example.com"),v(g,"class","svelte-1k1s1co"),v(S,"type","submit"),S.value="Subscribe",S.disabled=x=!a[0],v(S,"class","svelte-1k1s1co"),v(f,"class","form-item svelte-1k1s1co"),v(P,"type","hidden"),P.value="1",v(P,"name","embed"),v(P,"class","svelte-1k1s1co"),v(L,"class","svelte-1k1s1co"),v(k,"action","https://buttondown.email/api/emails/embed-subscribe/lihautan"),v(k,"method","post"),v(k,"target","popupwindow"),v(k,"onsubmit","window.open('https://buttondown.email/lihautan', 'popupwindow')"),v(k,"class","embeddable-buttondown-form"),v(s,"class","form svelte-1k1s1co")},m(n,u){var h,d,m,v;l(n,s,u),i(s,t),i(t,e),i(s,o),i(s,p),i(p,c),i(s,r),i(s,k),i(k,f),i(f,g),A(g,a[0]),i(f,T),i(f,S),i(k,j),i(k,P),i(k,I),i(k,L),i(L,M),C||(h=g,d="input",m=a[1],h.addEventListener(d,m,v),N=()=>h.removeEventListener(d,m,v),C=!0)},p(n,[a]){1&a&&g.value!==n[0]&&A(g,n[0]),1&a&&x!==(x=!n[0])&&(S.disabled=x)},i:n,o:n,d(n){n&&u(s),C=!1,N()}}}function nn(n,a,s){let t;return[t,function(){t=this.value,s(0,t)}]}class an extends V{constructor(n){super(),K(this,n,nn,X,p,{})}}function sn(n){return I(()=>(setTimeout(()=>{if(window.innerWidth>1080){const n=document.createElement("script");n.async=!0,n.type="text/javascript",n.src="//cdn.carbonads.com/carbon.js?serve=CE7ITK3E&placement=lihautancom",n.id="_carbonads_js",document.body.appendChild(n)}},5e3),()=>{try{const n=document.getElementById("carbonads");n.parentNode.removeChild(n)}catch(n){}})),[]}class tn extends V{constructor(n){super(),K(this,n,sn,null,p,{})}}var en="https://lihautan.com/manipulating-ast-with-javascript/assets/hero-twitter-b36b194e.jpg";function on(n,a,s){const t=n.slice();return t[6]=a[s],t}function pn(n,a,s){const t=n.slice();return t[6]=a[s],t}function cn(n){let a,s;return{c(){a=h("meta"),this.h()},l(n){a=w(n,"META",{name:!0,content:!0}),this.h()},h(){v(a,"name","keywords"),v(a,"content",s=n[6])},m(n,s){l(n,a,s)},p(n,t){4&t&&s!==(s=n[6])&&v(a,"content",s)},d(n){n&&u(a)}}}function rn(n){let a,s,t=n[6]+"";return{c(){a=h("span"),s=d(t),this.h()},l(n){a=w(n,"SPAN",{class:!0});var e=y(a);s=E(e,t),e.forEach(u),this.h()},h(){v(a,"class","svelte-9tqnza")},m(n,t){l(n,a,t),i(a,s)},p(n,a){4&a&&t!==(t=n[6]+"")&&T(s,t)},d(n){n&&u(a)}}}function ln(n){let a,s,t,e,o,p,f,A,S,j,P,I,L,M,C,N,$,O,H,R,D,B,F,_,q,K,V,Q,X,nn,sn,ln,un,kn,hn,fn,dn=`<script type="application/ld+json">${JSON.stringify({"@context":"https://schema.org","@type":"Article",author:n[3],copyrightHolder:n[3],copyrightYear:"2020",creator:n[3],publisher:n[3],description:n[1],headline:n[0],name:n[0],inLanguage:"en"})}<\/script>`,mn=`<script type="application/ld+json">${JSON.stringify({"@context":"https://schema.org","@type":"BreadcrumbList",description:"Breadcrumbs list",name:"Breadcrumbs",itemListElement:[{"@type":"ListItem",item:{"@id":"https://lihautan.com",name:"Homepage"},position:1},{"@type":"ListItem",item:{"@id":"https%3A%2F%2Flihautan.com%2Fmanipulating-ast-with-javascript",name:n[0]},position:2}]})}<\/script>`;document.title=a=n[0]+" | Tan Li Hau";let gn=n[2],vn=[];for(let a=0;a<gn.length;a+=1)vn[a]=cn(pn(n,gn,a));F=new Z({});let yn=n[2],wn=[];for(let a=0;a<yn.length;a+=1)wn[a]=rn(on(n,yn,a));const En=n[5].default,bn=function(n,a,s,t){if(n){const e=c(n,a,s,t);return n[0](e)}}(En,n,n[4],null);return un=new an({}),hn=new tn({}),{c(){s=h("meta"),t=h("meta"),e=h("meta"),o=h("meta"),p=h("meta"),f=h("meta"),A=h("meta"),S=h("meta"),j=h("meta"),P=h("meta"),I=h("meta");for(let n=0;n<vn.length;n+=1)vn[n].c();L=h("meta"),M=h("meta"),N=g(),O=g(),H=m(),R=h("a"),D=d("Skip to content"),B=m(),U(F.$$.fragment),_=m(),q=h("main"),K=h("h1"),V=d(n[0]),Q=m();for(let n=0;n<wn.length;n+=1)wn[n].c();X=m(),nn=h("article"),bn&&bn.c(),sn=m(),ln=h("footer"),U(un.$$.fragment),kn=m(),U(hn.$$.fragment),this.h()},l(a){const c=function(n,a=document.body){return Array.from(a.querySelectorAll(n))}('[data-svelte="svelte-n0q11s"]',document.head);s=w(c,"META",{name:!0,content:!0}),t=w(c,"META",{name:!0,content:!0}),e=w(c,"META",{name:!0,content:!0}),o=w(c,"META",{name:!0,content:!0}),p=w(c,"META",{name:!0,content:!0}),f=w(c,"META",{name:!0,content:!0}),A=w(c,"META",{name:!0,content:!0}),S=w(c,"META",{name:!0,content:!0}),j=w(c,"META",{name:!0,content:!0}),P=w(c,"META",{name:!0,content:!0}),I=w(c,"META",{name:!0,content:!0});for(let n=0;n<vn.length;n+=1)vn[n].l(c);L=w(c,"META",{itemprop:!0,content:!0}),M=w(c,"META",{itemprop:!0,content:!0}),N=g(),O=g(),c.forEach(u),H=b(a),R=w(a,"A",{href:!0,class:!0});var r=y(R);D=E(r,"Skip to content"),r.forEach(u),B=b(a),W(F.$$.fragment,a),_=b(a),q=w(a,"MAIN",{id:!0,class:!0});var i=y(q);K=w(i,"H1",{});var l=y(K);V=E(l,n[0]),l.forEach(u),Q=b(i);for(let n=0;n<wn.length;n+=1)wn[n].l(i);X=b(i),nn=w(i,"ARTICLE",{});var k=y(nn);bn&&bn.l(k),k.forEach(u),i.forEach(u),sn=b(a),ln=w(a,"FOOTER",{class:!0});var h=y(ln);W(un.$$.fragment,h),kn=b(h),W(hn.$$.fragment,h),h.forEach(u),this.h()},h(){v(s,"name","description"),v(s,"content",n[1]),v(t,"name","image"),v(t,"content",en),v(e,"name","og:image"),v(e,"content",en),v(o,"name","og:title"),v(o,"content",n[0]),v(p,"name","og:description"),v(p,"content",n[1]),v(f,"name","og:type"),v(f,"content","website"),v(A,"name","twitter:card"),v(A,"content","summary_large_image"),v(S,"name","twitter:creator"),v(S,"content","@lihautan"),v(j,"name","twitter:title"),v(j,"content",n[0]),v(P,"name","twitter:description"),v(P,"content",n[1]),v(I,"name","twitter:image"),v(I,"content",en),v(L,"itemprop","url"),v(L,"content","https%3A%2F%2Flihautan.com%2Fmanipulating-ast-with-javascript"),v(M,"itemprop","image"),v(M,"content",en),C=new x(N),$=new x(O),v(R,"href","#content"),v(R,"class","skip svelte-9tqnza"),v(q,"id","content"),v(q,"class","blog svelte-9tqnza"),v(ln,"class","svelte-9tqnza")},m(n,a){i(document.head,s),i(document.head,t),i(document.head,e),i(document.head,o),i(document.head,p),i(document.head,f),i(document.head,A),i(document.head,S),i(document.head,j),i(document.head,P),i(document.head,I);for(let n=0;n<vn.length;n+=1)vn[n].m(document.head,null);i(document.head,L),i(document.head,M),C.m(dn,document.head),i(document.head,N),$.m(mn,document.head),i(document.head,O),l(n,H,a),l(n,R,a),i(R,D),l(n,B,a),G(F,n,a),l(n,_,a),l(n,q,a),i(q,K),i(K,V),i(q,Q);for(let n=0;n<wn.length;n+=1)wn[n].m(q,null);i(q,X),i(q,nn),bn&&bn.m(nn,null),l(n,sn,a),l(n,ln,a),G(un,ln,null),i(ln,kn),G(hn,ln,null),fn=!0},p(n,[t]){if((!fn||1&t)&&a!==(a=n[0]+" | Tan Li Hau")&&(document.title=a),(!fn||2&t)&&v(s,"content",n[1]),(!fn||1&t)&&v(o,"content",n[0]),(!fn||2&t)&&v(p,"content",n[1]),(!fn||1&t)&&v(j,"content",n[0]),(!fn||2&t)&&v(P,"content",n[1]),4&t){let a;for(gn=n[2],a=0;a<gn.length;a+=1){const s=pn(n,gn,a);vn[a]?vn[a].p(s,t):(vn[a]=cn(s),vn[a].c(),vn[a].m(L.parentNode,L))}for(;a<vn.length;a+=1)vn[a].d(1);vn.length=gn.length}if((!fn||3&t)&&dn!==(dn=`<script type="application/ld+json">${JSON.stringify({"@context":"https://schema.org","@type":"Article",author:n[3],copyrightHolder:n[3],copyrightYear:"2020",creator:n[3],publisher:n[3],description:n[1],headline:n[0],name:n[0],inLanguage:"en"})}<\/script>`)&&C.p(dn),(!fn||1&t)&&mn!==(mn=`<script type="application/ld+json">${JSON.stringify({"@context":"https://schema.org","@type":"BreadcrumbList",description:"Breadcrumbs list",name:"Breadcrumbs",itemListElement:[{"@type":"ListItem",item:{"@id":"https://lihautan.com",name:"Homepage"},position:1},{"@type":"ListItem",item:{"@id":"https%3A%2F%2Flihautan.com%2Fmanipulating-ast-with-javascript",name:n[0]},position:2}]})}<\/script>`)&&$.p(mn),(!fn||1&t)&&T(V,n[0]),4&t){let a;for(yn=n[2],a=0;a<yn.length;a+=1){const s=on(n,yn,a);wn[a]?wn[a].p(s,t):(wn[a]=rn(s),wn[a].c(),wn[a].m(q,X))}for(;a<wn.length;a+=1)wn[a].d(1);wn.length=yn.length}bn&&bn.p&&16&t&&r(bn,En,n,n[4],t,null,null)},i(n){fn||(z(F.$$.fragment,n),z(bn,n),z(un.$$.fragment,n),z(hn.$$.fragment,n),fn=!0)},o(n){J(F.$$.fragment,n),J(bn,n),J(un.$$.fragment,n),J(hn.$$.fragment,n),fn=!1},d(n){u(s),u(t),u(e),u(o),u(p),u(f),u(A),u(S),u(j),u(P),u(I),k(vn,n),u(L),u(M),u(N),n&&C.d(),u(O),n&&$.d(),n&&u(H),n&&u(R),n&&u(B),Y(F,n),n&&u(_),n&&u(q),k(wn,n),bn&&bn.d(n),n&&u(sn),n&&u(ln),Y(un),Y(hn)}}}function un(n,a,s){let{title:t=""}=a,{description:e=""}=a,{tags:o=[]}=a;const p={"@type":"Person",name:"Tan Li Hau"};let{$$slots:c={},$$scope:r}=a;return n.$set=n=>{"title"in n&&s(0,t=n.title),"description"in n&&s(1,e=n.description),"tags"in n&&s(2,o=n.tags),"$$scope"in n&&s(4,r=n.$$scope)},[t,e,o,p,r,c]}class kn extends V{constructor(n){super(),K(this,n,un,ln,p,{title:0,description:1,tags:2})}}function hn(a){let s,t,e,o,p,c,r,k,f,g,T,A,x,j,P,I,L,M,C,N,$,O,H,R,D,B,F,_,z,J,U,W,G,Y,q,K,V,Q,Z,X,nn,an,sn,tn,en,on,pn,cn,rn,ln,un,kn,hn,fn,dn,mn,gn,vn,yn,wn,En,bn,Tn,An,Sn,xn,jn,Pn,In,Ln,Mn,Cn,Nn,$n,On,Hn,Rn,Dn,Bn,Fn,_n,zn,Jn,Un,Wn,Gn,Yn,qn,Kn,Vn,Qn,Zn,Xn,na,aa,sa,ta,ea,oa,pa,ca,ra,ia,la,ua,ka,ha,fa,da,ma,ga,va,ya,wa,Ea,ba,Ta,Aa,Sa,xa,ja,Pa,Ia,La,Ma,Ca,Na,$a,Oa,Ha,Ra,Da,Ba,Fa,_a,za,Ja,Ua,Wa,Ga,Ya,qa,Ka,Va,Qa,Za,Xa,ns,as,ss,ts,es,os,ps,cs,rs,is,ls,us,ks,hs,fs,ds,ms,gs,vs,ys,ws,Es,bs,Ts,As,Ss,xs,js,Ps,Is,Ls,Ms,Cs,Ns,$s,Os,Hs,Rs,Ds,Bs,Fs,_s,zs,Js,Us,Ws,Gs,Ys,qs,Ks,Vs,Qs,Zs,Xs,nt,at,st,tt,et,ot,pt,ct,rt,it,lt,ut,kt,ht,ft,dt,mt,gt,vt,yt,wt,Et,bt,Tt,At,St,xt,jt,Pt,It,Lt,Mt,Ct,Nt,$t,Ot,Ht,Rt,Dt,Bt,Ft,_t,zt,Jt,Ut,Wt,Gt,Yt,qt,Kt,Vt,Qt,Zt,Xt,ne,ae,se,te,ee,oe,pe,ce,re,ie,le,ue,ke,he,fe,de,me,ge,ve,ye,we,Ee,be,Te,Ae,Se,xe,je,Pe,Ie,Le,Me,Ce,Ne,$e,Oe,He,Re,De,Be,Fe,_e,ze,Je,Ue,We,Ge,Ye,qe,Ke,Ve,Qe,Ze,Xe,no,ao,so,to,eo,oo,po,co,ro,io,lo,uo,ko,ho,fo,mo,go,vo,yo,wo,Eo,bo,To,Ao,So,xo,jo,Po,Io,Lo,Mo,Co,No,$o,Oo,Ho,Ro,Do,Bo,Fo,_o,zo,Jo,Uo,Wo,Go,Yo,qo,Ko,Vo,Qo,Zo,Xo,np,ap,sp,tp,ep,op,pp,cp,rp,ip,lp,up,kp,hp,fp,dp,mp,gp,vp,yp,wp,Ep,bp,Tp,Ap,Sp,xp,jp,Pp,Ip,Lp,Mp,Cp,Np,$p,Op,Hp,Rp,Dp,Bp,Fp,_p,zp,Jp,Up,Wp,Gp,Yp,qp,Kp,Vp,Qp,Zp,Xp,nc,ac,sc,tc,ec,oc,pc,cc,rc,ic,lc,uc,kc,hc,fc,dc,mc,gc,vc,yc,wc,Ec,bc,Tc,Ac,Sc,xc,jc,Pc,Ic,Lc,Mc,Cc,Nc,$c,Oc,Hc,Rc,Dc,Bc,Fc,_c,zc,Jc,Uc,Wc,Gc,Yc,qc,Kc,Vc,Qc,Zc,Xc,nr,ar,sr,tr,er,or,pr,cr,rr,ir,lr,ur,kr,hr,fr,dr,mr,gr,vr,yr,wr,Er,br,Tr,Ar,Sr,xr,jr,Pr,Ir,Lr,Mr,Cr,Nr,$r,Or,Hr,Rr,Dr,Br,Fr,_r,zr,Jr,Ur,Wr,Gr,Yr,qr,Kr,Vr,Qr,Zr,Xr,ni,ai,si,ti,ei,oi,pi,ci,ri,ii,li,ui,ki,hi,fi,di,mi,gi,vi,yi,wi,Ei,bi,Ti,Ai,Si,xi,ji,Pi,Ii,Li,Mi,Ci,Ni,$i,Oi,Hi,Ri,Di,Bi,Fi,_i,zi,Ji,Ui,Wi,Gi,Yi,qi,Ki,Vi,Qi,Zi,Xi,nl,al,sl,tl,el,ol,pl,cl,rl,il,ll,ul,kl,hl,fl,dl,ml,gl,vl,yl,wl,El,bl,Tl,Al,Sl,xl,jl,Pl,Il,Ll,Ml,Cl,Nl,$l,Ol,Hl,Rl,Dl,Bl,Fl,_l,zl,Jl,Ul,Wl,Gl,Yl,ql,Kl,Vl,Ql,Zl,Xl,nu,au,su,tu,eu,ou,pu,cu,ru,iu,lu,uu,ku,hu,fu,du,mu,gu,vu,yu,wu,Eu,bu,Tu,Au,Su,xu,ju,Pu,Iu,Lu,Mu,Cu,Nu,$u,Ou,Hu,Ru,Du,Bu,Fu,_u,zu;return{c(){s=h("section"),t=h("ul"),e=h("li"),o=h("a"),p=d("The parsers"),c=h("li"),r=h("a"),k=d("Traversing an AST"),f=h("li"),g=h("a"),T=d("Manipulating AST"),A=h("ul"),x=h("li"),j=h("a"),P=d("Adding a node"),I=h("li"),L=h("a"),M=d("Replacing a node"),C=h("li"),N=h("a"),$=d("Removing a node"),O=h("li"),H=h("a"),R=d("Targeting a node"),D=h("li"),B=h("a"),F=d("Creating a node"),_=h("li"),z=h("a"),J=d("Summary"),U=h("li"),W=h("a"),G=d("Further Readings"),Y=m(),q=h("p"),K=d("Previously, I've talked about "),V=h("a"),Q=d("how to write a babel transformation"),Z=d(", and I went one step deeper into "),X=h("a"),nn=d("Babel"),an=d(", by "),sn=h("a"),tn=d("showing how you can create a custom JavaScript syntax"),en=d(", I demonstrated how Babel parses your code into AST, transforms it and generates back into code."),on=m(),pn=h("p"),cn=d("Armed with the knowledge and experience of playing the JavaScript AST with Babel, let's take a look at how we can generalize this knowledge into other languages as well."),rn=m(),ln=h("blockquote"),un=h("p"),kn=d('When I refer to "other languages", I am actually referring to popular frontend languages, for example: '),hn=h("a"),fn=d("JavaScript"),dn=d(", "),mn=h("a"),gn=d("TypeScript"),vn=d(", "),yn=h("a"),wn=d("Sass"),En=d(", "),bn=h("a"),Tn=d("CSS"),An=d(", "),Sn=h("a"),xn=d("HTML"),jn=d(", "),Pn=h("a"),In=d("markdown"),Ln=d("..."),Mn=m(),Cn=h("p"),Nn=d("Of course, it does not limit to just frontend languages. It's just that it's easier to find a parser for these languages written in JavaScript than other languages, say C++ or Java."),$n=m(),On=h("section"),Hn=h("h2"),Rn=h("a"),Dn=d("The parsers"),Bn=m(),Fn=h("p"),_n=d("Like how we use Babel to do parsing and generating JavaScript, there are other libraries out there to help us with parsing and generating our language."),zn=m(),Jn=h("p"),Un=d("One easy trick to find these libraries is through "),Wn=h("a"),Gn=d("https://astexplorer.net/"),Yn=d("."),qn=m(),Kn=h("p"),Vn=h("img"),Qn=m(),Zn=h("p"),Xn=d("After you choose a language, you would see a list of parsers you can use to parse your language. For example, if you choose "),na=h("strong"),aa=d("HTML"),sa=d(", there's "),ta=h("a"),ea=d("htmlparser2"),oa=d(", "),pa=h("a"),ca=d("hyntax"),ra=d(", "),ia=h("a"),la=d("parse5"),ua=d("... And when you choose one of the parsers, you can immediately see how the AST looks like on the right panel and the Github link to the parser on the top right."),ka=m(),ha=h("p"),fa=h("picture"),da=h("source"),ma=h("source"),ga=h("img"),va=m(),ya=h("p"),wa=d("Here is a un-exhaustive list of parsers, and it's "),Ea=h("code"),ba=d("parse"),Ta=d(" and "),Aa=h("code"),Sa=d("generate"),xa=d(" methods:"),ja=m(),Pa=h("div"),Ia=h("table"),La=h("thead"),Ma=h("tr"),Ca=h("th"),Na=d("Language"),$a=m(),Oa=h("th"),Ha=d("Parser"),Ra=m(),Da=h("th"),Ba=h("code"),Fa=d("parse"),_a=m(),za=h("th"),Ja=h("code"),Ua=d("generate"),Wa=m(),Ga=h("tbody"),Ya=h("tr"),qa=h("td"),Ka=d("HTML"),Va=m(),Qa=h("td"),Za=h("a"),Xa=d("parse5"),ns=m(),as=h("td"),ss=h("a"),ts=h("code"),es=d("parse5.parse(str)"),os=m(),ps=h("td"),cs=h("a"),rs=h("code"),is=d("parse5.serialize(ast)"),ls=m(),us=h("tr"),ks=h("td"),hs=d("Markdown"),fs=m(),ds=h("td"),ms=h("a"),gs=d("remark"),vs=m(),ys=h("td"),ws=h("a"),Es=h("code"),bs=d("unified().use(remarkParse)"),Ts=m(),As=h("td"),Ss=h("a"),xs=h("code"),js=d("unified().use(remarkStringify)"),Ps=m(),Is=h("tr"),Ls=h("td"),Ms=d("CSS"),Cs=m(),Ns=h("td"),$s=h("a"),Os=d("css-tree"),Hs=m(),Rs=h("td"),Ds=h("a"),Bs=h("code"),Fs=d("csstree.parse(str)"),_s=m(),zs=h("td"),Js=h("a"),Us=h("code"),Ws=d("csstree.generate(ast)"),Gs=m(),Ys=h("tr"),qs=h("td"),Ks=d("Sass"),Vs=m(),Qs=h("td"),Zs=h("a"),Xs=d("sast"),nt=m(),at=h("td"),st=h("a"),tt=h("code"),et=d("sast.parse(str)"),ot=m(),pt=h("td"),ct=h("a"),rt=h("code"),it=d("sast.stringify(ast)"),lt=m(),ut=h("tr"),kt=h("td"),ht=d("JavaScript"),ft=m(),dt=h("td"),mt=h("a"),gt=d("babel"),vt=m(),yt=h("td"),wt=h("a"),Et=h("code"),bt=d("babel.parse(str)"),Tt=m(),At=h("td"),St=h("a"),xt=h("code"),jt=d("babel.generate(ast)"),Pt=m(),It=h("tr"),Lt=h("td"),Mt=d("TypeScript"),Ct=m(),Nt=h("td"),$t=h("a"),Ot=d("TypeScript"),Ht=m(),Rt=h("td"),Dt=h("a"),Bt=h("code"),Ft=d("ts.createSourceFile(str)"),_t=m(),zt=h("td"),Jt=h("a"),Ut=h("code"),Wt=d("ts.createPrinter().printFile(ast)"),Gt=m(),Yt=h("p"),qt=d("As you can see most parsers provide both parsing and generating methods."),Kt=m(),Vt=h("p"),Qt=d("So in general, you can have the following as a template to write your code transformation code:"),Zt=m(),Xt=h("pre"),ne=m(),ae=h("p"),se=d("You can, of course, transforming AST of one language to AST of another language, for example: Sass ➡️ CSS, Markdown ➡️ HTML, and use the generator of another language to generate out the code."),te=m(),ee=h("pre"),oe=m(),pe=h("p"),ce=d("Now armed with this template, let's talk about the more "),re=h("em"),ie=d("magical"),le=d(" stuff, "),ue=h("em"),ke=d("the transform function"),he=d("."),fe=m(),de=h("section"),me=h("h2"),ge=h("a"),ve=d("Traversing an AST"),ye=m(),we=h("p"),Ee=d("As the name AST suggests, AST uses a tree data structure. To hone the skills of manipulating AST, we need to recall our long distant memory of "),be=h("em"),Te=d('"Algorithm 101"'),Ae=d(", the "),Se=h("strong"),xe=d("depth-first search (DFS)"),je=d(" tree traversal algorithm."),Pe=m(),Ie=h("p"),Le=h("a"),Me=d("Vaidehi Joshi"),Ce=d(" wrote an amazing article on "),Ne=h("a"),$e=d("demystifying Depth-First Search"),Oe=d(", I don't think I can explain any better, so if you want to recap on depth-first search, please go and read "),He=h("a"),Re=d("her article"),De=d(" before we continue."),Be=m(),Fe=h("p"),_e=d("Now you have a clearer idea of how depth-first search works, a depth-first search on an AST would look something like this:"),ze=m(),Je=h("pre"),Ue=m(),We=h("p"),Ge=d("We can then fill up the "),Ye=h("code"),qe=d("TODO"),Ke=d(" with our manipulation code."),Ve=m(),Qe=h("p"),Ze=d("If we find ourselves needing to do multiple traversals, with different AST manipulation, we would soon realize that mixing AST manipulation code with the traversal code is "),Xe=h("em"),no=d("not clean enough"),ao=d(". Naturally, you would realize "),so=h("em"),to=d("it is cleaner"),eo=d(" to pass in a callback function that gets called every time we visit a node:"),oo=m(),po=h("pre"),co=m(),ro=h("p"),io=d("The "),lo=h("code"),uo=d("visit"),ko=d(" function is now generic enough that you can use it for any AST:"),ho=m(),fo=h("pre"),mo=m(),go=h("p"),vo=d("Naturally, you would think that having the information of the parent node, and the key / index of the current node would be useful to have in the callback function:"),yo=m(),wo=h("pre"),Eo=m(),bo=h("p"),To=d("Now, we might think to ourselves, I dont want to get callback for every node visited, I just need callback for a certain node. You might be tempted to add a condition in the "),Ao=h("code"),So=d("visit"),xo=d(" function:"),jo=m(),Po=h("pre"),Io=m(),Lo=h("p"),Mo=d("But you think twice: "),Co=h("em"),No=d("what if someone else wants to use "),$o=h("code"),Oo=d("visit"),Ho=d(" but with a different condition for callback?"),Ro=m(),Do=h("p"),Bo=d("For most of the time, you want to callback only to a certain types of node. In that case, instead of passing in a callback function, you can pass in a map of node type to their respective callback functions:"),Fo=m(),_o=h("pre"),zo=m(),Jo=h("p"),Uo=d("At this point, you maybe realize, "),Wo=h("em"),Go=d("hey, this looks so much like one of those AST traversing libraries!"),Yo=d(" And yes, this is how they get implemented."),qo=m(),Ko=h("p"),Vo=d("Now we can traverse the AST, and find the node that we are interested in, so the next step is to manipulate them."),Qo=m(),Zo=h("section"),Xo=h("h2"),np=h("a"),ap=d("Manipulating AST"),sp=m(),tp=h("p"),ep=d("Manipulating the AST can be categorized into 3 different operations:"),op=m(),pp=h("ul"),cp=h("li"),rp=d("Adding a node"),ip=m(),lp=h("li"),up=d("Replacing a node"),kp=m(),hp=h("li"),fp=d("Removing a node"),dp=m(),mp=h("section"),gp=h("h3"),vp=h("a"),yp=d("Adding a node"),wp=m(),Ep=h("p"),bp=d("To add a node, you can assign it to a keyed property of your node:"),Tp=m(),Ap=h("pre"),Sp=m(),xp=h("p"),jp=d("or push the new node, if the keyed property is an array:"),Pp=m(),Ip=h("pre"),Lp=m(),Mp=h("p"),Cp=d("To add a node as a sibling, you may need to access the node's parent:"),Np=m(),$p=h("pre"),Op=m(),Hp=h("section"),Rp=h("h3"),Dp=h("a"),Bp=d("Replacing a node"),Fp=m(),_p=h("p"),zp=d("To replace the current node to another node, update the key property of the current node's parent:"),Jp=m(),Up=h("pre"),Wp=m(),Gp=h("p"),Yp=d("If the key property of the parent is an array:"),qp=m(),Kp=h("pre"),Vp=m(),Qp=h("section"),Zp=h("h3"),Xp=h("a"),nc=d("Removing a node"),ac=m(),sc=h("p"),tc=d("To remove the current node, delete the key property of the current node's parent:"),ec=m(),oc=h("pre"),pc=m(),cc=h("p"),rc=d("If the key property of the parent is an array:"),ic=m(),lc=h("pre"),uc=m(),kc=h("blockquote"),hc=h("p"),fc=d("The operations of "),dc=h("strong"),mc=d("adding"),gc=d(", "),vc=h("strong"),yc=d("replacing"),wc=d(", and "),Ec=h("strong"),bc=d("removing"),Tc=d(" nodes are so common that, they are usually implemented as a util function."),Ac=m(),Sc=h("p"),xc=d("However, there's "),jc=h("strong"),Pc=d("one important step"),Ic=d(" that I did not cover: after you mutate the node, you need to make sure that the traversal still works fine."),Lc=m(),Mc=h("p"),Cc=d("For a node that is a property of a key of its parent, adding, replacing and removing them are usually fine. Except for the replace operation, you might need to revisit the "),Nc=h("em"),$c=d('"current node"'),Oc=d(", which is the "),Hc=h("em"),Rc=d("new replacing node"),Dc=d("."),Bc=m(),Fc=h("p"),_c=d("However, for node that are in an array, you need to take special care to update the array index of the loop:"),zc=m(),Jc=h("pre"),Uc=m(),Wc=h("p"),Gc=d("But how do you know that the current node was removed?"),Yc=m(),qc=h("p"),Kc=d("Well, knowing when a node got removed is sometimes a secret that lies within the "),Vc=h("code"),Qc=d("remove"),Zc=d(" util function from the tree traversal library."),Xc=m(),nr=h("p"),ar=d("It could be as simple as setting a flag when you call "),sr=h("code"),tr=d("remove"),er=d(":"),or=m(),pr=h("pre"),cr=m(),rr=h("p"),ir=d("But sometimes, instead of having to import the "),lr=h("code"),ur=d("remove"),kr=d(" util from the tree traversal library, the "),hr=h("code"),fr=d("remove"),dr=d(" function is available in "),mr=h("code"),gr=d("this"),vr=d(" of the "),yr=h("code"),wr=d("visitCallback"),Er=d(":"),br=m(),Tr=h("pre"),Ar=m(),Sr=h("p"),xr=d("Now you learned the 3 basic operations of manipulating the AST, you maybe wonder how exactly is to use these basic operations to write a codemod or an AST transform plugin?"),jr=m(),Pr=h("p"),Ir=d("Well, in my "),Lr=h("a"),Mr=d("step-by-step guide"),Cr=d(", I've explained that, you can use AST explorer like "),Nr=h("a"),$r=d("http://astexplorer.net/"),Or=d(" or "),Hr=h("a"),Rr=d("Babel AST Explorer"),Dr=d(" to help you."),Br=m(),Fr=h("p"),_r=d("You need to:"),zr=m(),Jr=h("ul"),Ur=h("li"),Wr=h("strong"),Gr=d("Know how the part of the code you want to change look like in the AST"),Yr=d(", so you can target the specific type of the node, and"),qr=m(),Kr=h("li"),Vr=h("strong"),Qr=d("Know how does the final output you wish to see look like in the AST"),Zr=d(", so you know what nodes to create, update or remove."),Xr=m(),ni=h("p"),ai=d("So we are going to elaborate more on these 2 steps specifically."),si=m(),ti=h("section"),ei=h("h2"),oi=h("a"),pi=d("Targeting a node"),ci=m(),ri=h("p"),ii=d("Node targeting, most of the times, is just a lot of "),li=h("code"),ui=d("==="),ki=d("."),hi=m(),fi=h("p"),di=d("For example, if you want to target a "),mi=h("code"),gi=d("<figure>"),vi=d(" with a class "),yi=h("code"),wi=d("foo"),Ei=d(" that contains an "),bi=h("code"),Ti=d("<img>"),Ai=d(" and a "),Si=h("code"),xi=d("<figcaption>"),ji=d(" in "),Pi=h("a"),Ii=d("htmlparser2"),Li=d(":"),Mi=m(),Ci=h("pre"),Ni=m(),$i=h("p"),Oi=d("You need to check:"),Hi=m(),Ri=h("pre"),Di=m(),Bi=h("p"),Fi=d("To make it less verbose, we can refactor each check into reusable functions:"),_i=m(),zi=h("pre"),Ji=m(),Ui=h("section"),Wi=h("h2"),Gi=h("a"),Yi=d("Creating a node"),qi=m(),Ki=h("p"),Vi=d("There are a few ways you can create an AST node."),Qi=m(),Zi=h("p"),Xi=d("The simplest and crudest way is to "),nl=h("strong"),al=d("manually create the node object"),sl=d(". Most of the time, the node object is a JavaScript object. So you can just create them manually:"),tl=m(),el=h("pre"),ol=m(),pl=h("p"),cl=d("It may become unwieldy when creating large, complex AST nodes, so sometimes library decides to provide builder functions, like "),rl=h("a"),il=d("@babel/types"),ll=d(" to simplify node creation and provide default values:"),ul=m(),kl=h("pre"),hl=m(),fl=h("p"),dl=d("It looked more concise and tidier, but it is hard to comprehend and grasp what node it is creating."),ml=m(),gl=h("p"),vl=d("So, a better way of creating complex AST node, is to use the "),yl=h("code"),wl=d("parse"),El=d(" function + "),bl=h("code"),Tl=d("string"),Al=d(":"),Sl=m(),xl=h("pre"),jl=m(),Pl=h("p"),Il=d("For Babel, there's an amazing util called "),Ll=h("a"),Ml=d("@babel/template"),Cl=d(", where you can use "),Nl=h("a"),$l=d("template literals"),Ol=d(" to create AST node:"),Hl=m(),Rl=h("pre"),Dl=m(),Bl=h("section"),Fl=h("h2"),_l=h("a"),zl=d("Summary"),Jl=m(),Ul=h("p"),Wl=d("We've gone through:"),Gl=m(),Yl=h("ul"),ql=h("li"),Kl=d("How to traverse an AST, using depth-first search algorithm,"),Vl=m(),Ql=h("li"),Zl=d("The 3 basic AST manipulations, addition, replacement, and removal,"),Xl=m(),nu=h("li"),au=d("How to target a node in AST, and"),su=m(),tu=h("li"),eu=d("How to create an AST node"),ou=m(),pu=h("section"),cu=h("h2"),ru=h("a"),iu=d("Further Readings"),lu=m(),uu=h("p"),ku=h("a"),hu=d("Dinesh (@flexdinesh)"),fu=m(),du=h("a"),mu=d("tweeted"),gu=d(" his pocket collection of AST resources:"),vu=m(),yu=h("ul"),wu=h("li"),Eu=h("a"),bu=d("Code Transformation and Linting with ASTs"),Tu=m(),Au=h("li"),Su=h("a"),xu=d("Write your own code transform for fun and profit"),ju=m(),Pu=h("li"),Iu=h("a"),Lu=d("Understanding ASTs by Building Your Own Babel Plugin"),Mu=m(),Cu=h("li"),Nu=h("a"),$u=d("Writing your first Babel Plugin"),Ou=m(),Hu=h("li"),Ru=h("a"),Du=d("This is how I build Babel plug-ins"),Bu=m(),Fu=h("li"),_u=h("a"),zu=d("Writing My First Babel Plugin"),this.h()},l(n){s=w(n,"SECTION",{});var a=y(s);t=w(a,"UL",{class:!0,id:!0,role:!0,"aria-label":!0});var i=y(t);e=w(i,"LI",{});var l=y(e);o=w(l,"A",{href:!0});var h=y(o);p=E(h,"The parsers"),h.forEach(u),l.forEach(u),c=w(i,"LI",{});var d=y(c);r=w(d,"A",{href:!0});var m=y(r);k=E(m,"Traversing an AST"),m.forEach(u),d.forEach(u),f=w(i,"LI",{});var v=y(f);g=w(v,"A",{href:!0});var S=y(g);T=E(S,"Manipulating AST"),S.forEach(u),v.forEach(u),A=w(i,"UL",{});var Ju=y(A);x=w(Ju,"LI",{});var Uu=y(x);j=w(Uu,"A",{href:!0});var Wu=y(j);P=E(Wu,"Adding a node"),Wu.forEach(u),Uu.forEach(u),I=w(Ju,"LI",{});var Gu=y(I);L=w(Gu,"A",{href:!0});var Yu=y(L);M=E(Yu,"Replacing a node"),Yu.forEach(u),Gu.forEach(u),C=w(Ju,"LI",{});var qu=y(C);N=w(qu,"A",{href:!0});var Ku=y(N);$=E(Ku,"Removing a node"),Ku.forEach(u),qu.forEach(u),Ju.forEach(u),O=w(i,"LI",{});var Vu=y(O);H=w(Vu,"A",{href:!0});var Qu=y(H);R=E(Qu,"Targeting a node"),Qu.forEach(u),Vu.forEach(u),D=w(i,"LI",{});var Zu=y(D);B=w(Zu,"A",{href:!0});var Xu=y(B);F=E(Xu,"Creating a node"),Xu.forEach(u),Zu.forEach(u),_=w(i,"LI",{});var nk=y(_);z=w(nk,"A",{href:!0});var ak=y(z);J=E(ak,"Summary"),ak.forEach(u),nk.forEach(u),U=w(i,"LI",{});var sk=y(U);W=w(sk,"A",{href:!0});var tk=y(W);G=E(tk,"Further Readings"),tk.forEach(u),sk.forEach(u),i.forEach(u),a.forEach(u),Y=b(n),q=w(n,"P",{});var ek=y(q);K=E(ek,"Previously, I've talked about "),V=w(ek,"A",{href:!0});var ok=y(V);Q=E(ok,"how to write a babel transformation"),ok.forEach(u),Z=E(ek,", and I went one step deeper into "),X=w(ek,"A",{href:!0,rel:!0});var pk=y(X);nn=E(pk,"Babel"),pk.forEach(u),an=E(ek,", by "),sn=w(ek,"A",{href:!0});var ck=y(sn);tn=E(ck,"showing how you can create a custom JavaScript syntax"),ck.forEach(u),en=E(ek,", I demonstrated how Babel parses your code into AST, transforms it and generates back into code."),ek.forEach(u),on=b(n),pn=w(n,"P",{});var rk=y(pn);cn=E(rk,"Armed with the knowledge and experience of playing the JavaScript AST with Babel, let's take a look at how we can generalize this knowledge into other languages as well."),rk.forEach(u),rn=b(n),ln=w(n,"BLOCKQUOTE",{});var ik=y(ln);un=w(ik,"P",{});var lk=y(un);kn=E(lk,'When I refer to "other languages", I am actually referring to popular frontend languages, for example: '),hn=w(lk,"A",{href:!0,rel:!0});var uk=y(hn);fn=E(uk,"JavaScript"),uk.forEach(u),dn=E(lk,", "),mn=w(lk,"A",{href:!0,rel:!0});var kk=y(mn);gn=E(kk,"TypeScript"),kk.forEach(u),vn=E(lk,", "),yn=w(lk,"A",{href:!0,rel:!0});var hk=y(yn);wn=E(hk,"Sass"),hk.forEach(u),En=E(lk,", "),bn=w(lk,"A",{href:!0,rel:!0});var fk=y(bn);Tn=E(fk,"CSS"),fk.forEach(u),An=E(lk,", "),Sn=w(lk,"A",{href:!0,rel:!0});var dk=y(Sn);xn=E(dk,"HTML"),dk.forEach(u),jn=E(lk,", "),Pn=w(lk,"A",{href:!0,rel:!0});var mk=y(Pn);In=E(mk,"markdown"),mk.forEach(u),Ln=E(lk,"..."),lk.forEach(u),Mn=b(ik),Cn=w(ik,"P",{});var gk=y(Cn);Nn=E(gk,"Of course, it does not limit to just frontend languages. It's just that it's easier to find a parser for these languages written in JavaScript than other languages, say C++ or Java."),gk.forEach(u),ik.forEach(u),$n=b(n),On=w(n,"SECTION",{});var vk=y(On);Hn=w(vk,"H2",{});var yk=y(Hn);Rn=w(yk,"A",{href:!0,id:!0});var wk=y(Rn);Dn=E(wk,"The parsers"),wk.forEach(u),yk.forEach(u),Bn=b(vk),Fn=w(vk,"P",{});var Ek=y(Fn);_n=E(Ek,"Like how we use Babel to do parsing and generating JavaScript, there are other libraries out there to help us with parsing and generating our language."),Ek.forEach(u),zn=b(vk),Jn=w(vk,"P",{});var bk=y(Jn);Un=E(bk,"One easy trick to find these libraries is through "),Wn=w(bk,"A",{href:!0,rel:!0});var Tk=y(Wn);Gn=E(Tk,"https://astexplorer.net/"),Tk.forEach(u),Yn=E(bk,"."),bk.forEach(u),qn=b(vk),Kn=w(vk,"P",{});var Ak=y(Kn);Vn=w(Ak,"IMG",{title:!0,alt:!0,"data-src":!0,loading:!0}),Ak.forEach(u),Qn=b(vk),Zn=w(vk,"P",{});var Sk=y(Zn);Xn=E(Sk,"After you choose a language, you would see a list of parsers you can use to parse your language. For example, if you choose "),na=w(Sk,"STRONG",{});var xk=y(na);aa=E(xk,"HTML"),xk.forEach(u),sa=E(Sk,", there's "),ta=w(Sk,"A",{href:!0,rel:!0});var jk=y(ta);ea=E(jk,"htmlparser2"),jk.forEach(u),oa=E(Sk,", "),pa=w(Sk,"A",{href:!0,rel:!0});var Pk=y(pa);ca=E(Pk,"hyntax"),Pk.forEach(u),ra=E(Sk,", "),ia=w(Sk,"A",{href:!0,rel:!0});var Ik=y(ia);la=E(Ik,"parse5"),Ik.forEach(u),ua=E(Sk,"... And when you choose one of the parsers, you can immediately see how the AST looks like on the right panel and the Github link to the parser on the top right."),Sk.forEach(u),ka=b(vk),ha=w(vk,"P",{});var Lk=y(ha);fa=w(Lk,"PICTURE",{});var Mk=y(fa);da=w(Mk,"SOURCE",{type:!0,srcset:!0}),ma=w(Mk,"SOURCE",{type:!0,srcset:!0}),ga=w(Mk,"IMG",{title:!0,alt:!0,"data-src":!0,loading:!0}),Mk.forEach(u),Lk.forEach(u),va=b(vk),ya=w(vk,"P",{});var Ck=y(ya);wa=E(Ck,"Here is a un-exhaustive list of parsers, and it's "),Ea=w(Ck,"CODE",{});var Nk=y(Ea);ba=E(Nk,"parse"),Nk.forEach(u),Ta=E(Ck," and "),Aa=w(Ck,"CODE",{});var $k=y(Aa);Sa=E($k,"generate"),$k.forEach(u),xa=E(Ck," methods:"),Ck.forEach(u),ja=b(vk),Pa=w(vk,"DIV",{style:!0});var Ok=y(Pa);Ia=w(Ok,"TABLE",{});var Hk=y(Ia);La=w(Hk,"THEAD",{});var Rk=y(La);Ma=w(Rk,"TR",{});var Dk=y(Ma);Ca=w(Dk,"TH",{});var Bk=y(Ca);Na=E(Bk,"Language"),Bk.forEach(u),$a=b(Dk),Oa=w(Dk,"TH",{});var Fk=y(Oa);Ha=E(Fk,"Parser"),Fk.forEach(u),Ra=b(Dk),Da=w(Dk,"TH",{});var _k=y(Da);Ba=w(_k,"CODE",{class:!0});var zk=y(Ba);Fa=E(zk,"parse"),zk.forEach(u),_k.forEach(u),_a=b(Dk),za=w(Dk,"TH",{});var Jk=y(za);Ja=w(Jk,"CODE",{class:!0});var Uk=y(Ja);Ua=E(Uk,"generate"),Uk.forEach(u),Jk.forEach(u),Dk.forEach(u),Rk.forEach(u),Wa=b(Hk),Ga=w(Hk,"TBODY",{});var Wk=y(Ga);Ya=w(Wk,"TR",{});var Gk=y(Ya);qa=w(Gk,"TD",{});var Yk=y(qa);Ka=E(Yk,"HTML"),Yk.forEach(u),Va=b(Gk),Qa=w(Gk,"TD",{});var qk=y(Qa);Za=w(qk,"A",{href:!0});var Kk=y(Za);Xa=E(Kk,"parse5"),Kk.forEach(u),qk.forEach(u),ns=b(Gk),as=w(Gk,"TD",{});var Vk=y(as);ss=w(Vk,"A",{href:!0});var Qk=y(ss);ts=w(Qk,"CODE",{class:!0});var Zk=y(ts);es=E(Zk,"parse5.parse(str)"),Zk.forEach(u),Qk.forEach(u),Vk.forEach(u),os=b(Gk),ps=w(Gk,"TD",{});var Xk=y(ps);cs=w(Xk,"A",{href:!0});var nh=y(cs);rs=w(nh,"CODE",{class:!0});var ah=y(rs);is=E(ah,"parse5.serialize(ast)"),ah.forEach(u),nh.forEach(u),Xk.forEach(u),Gk.forEach(u),ls=b(Wk),us=w(Wk,"TR",{});var sh=y(us);ks=w(sh,"TD",{});var th=y(ks);hs=E(th,"Markdown"),th.forEach(u),fs=b(sh),ds=w(sh,"TD",{});var eh=y(ds);ms=w(eh,"A",{href:!0});var oh=y(ms);gs=E(oh,"remark"),oh.forEach(u),eh.forEach(u),vs=b(sh),ys=w(sh,"TD",{});var ph=y(ys);ws=w(ph,"A",{href:!0});var ch=y(ws);Es=w(ch,"CODE",{class:!0});var rh=y(Es);bs=E(rh,"unified().use(remarkParse)"),rh.forEach(u),ch.forEach(u),ph.forEach(u),Ts=b(sh),As=w(sh,"TD",{});var ih=y(As);Ss=w(ih,"A",{href:!0});var lh=y(Ss);xs=w(lh,"CODE",{class:!0});var uh=y(xs);js=E(uh,"unified().use(remarkStringify)"),uh.forEach(u),lh.forEach(u),ih.forEach(u),sh.forEach(u),Ps=b(Wk),Is=w(Wk,"TR",{});var kh=y(Is);Ls=w(kh,"TD",{});var hh=y(Ls);Ms=E(hh,"CSS"),hh.forEach(u),Cs=b(kh),Ns=w(kh,"TD",{});var fh=y(Ns);$s=w(fh,"A",{href:!0});var dh=y($s);Os=E(dh,"css-tree"),dh.forEach(u),fh.forEach(u),Hs=b(kh),Rs=w(kh,"TD",{});var mh=y(Rs);Ds=w(mh,"A",{href:!0});var gh=y(Ds);Bs=w(gh,"CODE",{class:!0});var vh=y(Bs);Fs=E(vh,"csstree.parse(str)"),vh.forEach(u),gh.forEach(u),mh.forEach(u),_s=b(kh),zs=w(kh,"TD",{});var yh=y(zs);Js=w(yh,"A",{href:!0});var wh=y(Js);Us=w(wh,"CODE",{class:!0});var Eh=y(Us);Ws=E(Eh,"csstree.generate(ast)"),Eh.forEach(u),wh.forEach(u),yh.forEach(u),kh.forEach(u),Gs=b(Wk),Ys=w(Wk,"TR",{});var bh=y(Ys);qs=w(bh,"TD",{});var Th=y(qs);Ks=E(Th,"Sass"),Th.forEach(u),Vs=b(bh),Qs=w(bh,"TD",{});var Ah=y(Qs);Zs=w(Ah,"A",{href:!0});var Sh=y(Zs);Xs=E(Sh,"sast"),Sh.forEach(u),Ah.forEach(u),nt=b(bh),at=w(bh,"TD",{});var xh=y(at);st=w(xh,"A",{href:!0});var jh=y(st);tt=w(jh,"CODE",{class:!0});var Ph=y(tt);et=E(Ph,"sast.parse(str)"),Ph.forEach(u),jh.forEach(u),xh.forEach(u),ot=b(bh),pt=w(bh,"TD",{});var Ih=y(pt);ct=w(Ih,"A",{href:!0});var Lh=y(ct);rt=w(Lh,"CODE",{class:!0});var Mh=y(rt);it=E(Mh,"sast.stringify(ast)"),Mh.forEach(u),Lh.forEach(u),Ih.forEach(u),bh.forEach(u),lt=b(Wk),ut=w(Wk,"TR",{});var Ch=y(ut);kt=w(Ch,"TD",{});var Nh=y(kt);ht=E(Nh,"JavaScript"),Nh.forEach(u),ft=b(Ch),dt=w(Ch,"TD",{});var $h=y(dt);mt=w($h,"A",{href:!0});var Oh=y(mt);gt=E(Oh,"babel"),Oh.forEach(u),$h.forEach(u),vt=b(Ch),yt=w(Ch,"TD",{});var Hh=y(yt);wt=w(Hh,"A",{href:!0});var Rh=y(wt);Et=w(Rh,"CODE",{class:!0});var Dh=y(Et);bt=E(Dh,"babel.parse(str)"),Dh.forEach(u),Rh.forEach(u),Hh.forEach(u),Tt=b(Ch),At=w(Ch,"TD",{});var Bh=y(At);St=w(Bh,"A",{href:!0});var Fh=y(St);xt=w(Fh,"CODE",{class:!0});var _h=y(xt);jt=E(_h,"babel.generate(ast)"),_h.forEach(u),Fh.forEach(u),Bh.forEach(u),Ch.forEach(u),Pt=b(Wk),It=w(Wk,"TR",{});var zh=y(It);Lt=w(zh,"TD",{});var Jh=y(Lt);Mt=E(Jh,"TypeScript"),Jh.forEach(u),Ct=b(zh),Nt=w(zh,"TD",{});var Uh=y(Nt);$t=w(Uh,"A",{href:!0});var Wh=y($t);Ot=E(Wh,"TypeScript"),Wh.forEach(u),Uh.forEach(u),Ht=b(zh),Rt=w(zh,"TD",{});var Gh=y(Rt);Dt=w(Gh,"A",{href:!0});var Yh=y(Dt);Bt=w(Yh,"CODE",{class:!0});var qh=y(Bt);Ft=E(qh,"ts.createSourceFile(str)"),qh.forEach(u),Yh.forEach(u),Gh.forEach(u),_t=b(zh),zt=w(zh,"TD",{});var Kh=y(zt);Jt=w(Kh,"A",{href:!0});var Vh=y(Jt);Ut=w(Vh,"CODE",{class:!0});var Qh=y(Ut);Wt=E(Qh,"ts.createPrinter().printFile(ast)"),Qh.forEach(u),Vh.forEach(u),Kh.forEach(u),zh.forEach(u),Wk.forEach(u),Hk.forEach(u),Ok.forEach(u),Gt=b(vk),Yt=w(vk,"P",{});var Zh=y(Yt);qt=E(Zh,"As you can see most parsers provide both parsing and generating methods."),Zh.forEach(u),Kt=b(vk),Vt=w(vk,"P",{});var Xh=y(Vt);Qt=E(Xh,"So in general, you can have the following as a template to write your code transformation code:"),Xh.forEach(u),Zt=b(vk),Xt=w(vk,"PRE",{class:!0}),y(Xt).forEach(u),ne=b(vk),ae=w(vk,"P",{});var nf=y(ae);se=E(nf,"You can, of course, transforming AST of one language to AST of another language, for example: Sass ➡️ CSS, Markdown ➡️ HTML, and use the generator of another language to generate out the code."),nf.forEach(u),te=b(vk),ee=w(vk,"PRE",{class:!0}),y(ee).forEach(u),oe=b(vk),pe=w(vk,"P",{});var af=y(pe);ce=E(af,"Now armed with this template, let's talk about the more "),re=w(af,"EM",{});var sf=y(re);ie=E(sf,"magical"),sf.forEach(u),le=E(af," stuff, "),ue=w(af,"EM",{});var tf=y(ue);ke=E(tf,"the transform function"),tf.forEach(u),he=E(af,"."),af.forEach(u),vk.forEach(u),fe=b(n),de=w(n,"SECTION",{});var ef=y(de);me=w(ef,"H2",{});var of=y(me);ge=w(of,"A",{href:!0,id:!0});var pf=y(ge);ve=E(pf,"Traversing an AST"),pf.forEach(u),of.forEach(u),ye=b(ef),we=w(ef,"P",{});var cf=y(we);Ee=E(cf,"As the name AST suggests, AST uses a tree data structure. To hone the skills of manipulating AST, we need to recall our long distant memory of "),be=w(cf,"EM",{});var rf=y(be);Te=E(rf,'"Algorithm 101"'),rf.forEach(u),Ae=E(cf,", the "),Se=w(cf,"STRONG",{});var lf=y(Se);xe=E(lf,"depth-first search (DFS)"),lf.forEach(u),je=E(cf," tree traversal algorithm."),cf.forEach(u),Pe=b(ef),Ie=w(ef,"P",{});var uf=y(Ie);Le=w(uf,"A",{href:!0,rel:!0});var kf=y(Le);Me=E(kf,"Vaidehi Joshi"),kf.forEach(u),Ce=E(uf," wrote an amazing article on "),Ne=w(uf,"A",{href:!0,rel:!0});var hf=y(Ne);$e=E(hf,"demystifying Depth-First Search"),hf.forEach(u),Oe=E(uf,", I don't think I can explain any better, so if you want to recap on depth-first search, please go and read "),He=w(uf,"A",{href:!0,rel:!0});var ff=y(He);Re=E(ff,"her article"),ff.forEach(u),De=E(uf," before we continue."),uf.forEach(u),Be=b(ef),Fe=w(ef,"P",{});var df=y(Fe);_e=E(df,"Now you have a clearer idea of how depth-first search works, a depth-first search on an AST would look something like this:"),df.forEach(u),ze=b(ef),Je=w(ef,"PRE",{class:!0}),y(Je).forEach(u),Ue=b(ef),We=w(ef,"P",{});var mf=y(We);Ge=E(mf,"We can then fill up the "),Ye=w(mf,"CODE",{});var gf=y(Ye);qe=E(gf,"TODO"),gf.forEach(u),Ke=E(mf," with our manipulation code."),mf.forEach(u),Ve=b(ef),Qe=w(ef,"P",{});var vf=y(Qe);Ze=E(vf,"If we find ourselves needing to do multiple traversals, with different AST manipulation, we would soon realize that mixing AST manipulation code with the traversal code is "),Xe=w(vf,"EM",{});var yf=y(Xe);no=E(yf,"not clean enough"),yf.forEach(u),ao=E(vf,". Naturally, you would realize "),so=w(vf,"EM",{});var wf=y(so);to=E(wf,"it is cleaner"),wf.forEach(u),eo=E(vf," to pass in a callback function that gets called every time we visit a node:"),vf.forEach(u),oo=b(ef),po=w(ef,"PRE",{class:!0}),y(po).forEach(u),co=b(ef),ro=w(ef,"P",{});var Ef=y(ro);io=E(Ef,"The "),lo=w(Ef,"CODE",{});var bf=y(lo);uo=E(bf,"visit"),bf.forEach(u),ko=E(Ef," function is now generic enough that you can use it for any AST:"),Ef.forEach(u),ho=b(ef),fo=w(ef,"PRE",{class:!0}),y(fo).forEach(u),mo=b(ef),go=w(ef,"P",{});var Tf=y(go);vo=E(Tf,"Naturally, you would think that having the information of the parent node, and the key / index of the current node would be useful to have in the callback function:"),Tf.forEach(u),yo=b(ef),wo=w(ef,"PRE",{class:!0}),y(wo).forEach(u),Eo=b(ef),bo=w(ef,"P",{});var Af=y(bo);To=E(Af,"Now, we might think to ourselves, I dont want to get callback for every node visited, I just need callback for a certain node. You might be tempted to add a condition in the "),Ao=w(Af,"CODE",{});var Sf=y(Ao);So=E(Sf,"visit"),Sf.forEach(u),xo=E(Af," function:"),Af.forEach(u),jo=b(ef),Po=w(ef,"PRE",{class:!0}),y(Po).forEach(u),Io=b(ef),Lo=w(ef,"P",{});var xf=y(Lo);Mo=E(xf,"But you think twice: "),Co=w(xf,"EM",{});var jf=y(Co);No=E(jf,"what if someone else wants to use "),$o=w(jf,"CODE",{});var Pf=y($o);Oo=E(Pf,"visit"),Pf.forEach(u),Ho=E(jf," but with a different condition for callback?"),jf.forEach(u),xf.forEach(u),Ro=b(ef),Do=w(ef,"P",{});var If=y(Do);Bo=E(If,"For most of the time, you want to callback only to a certain types of node. In that case, instead of passing in a callback function, you can pass in a map of node type to their respective callback functions:"),If.forEach(u),Fo=b(ef),_o=w(ef,"PRE",{class:!0}),y(_o).forEach(u),zo=b(ef),Jo=w(ef,"P",{});var Lf=y(Jo);Uo=E(Lf,"At this point, you maybe realize, "),Wo=w(Lf,"EM",{});var Mf=y(Wo);Go=E(Mf,"hey, this looks so much like one of those AST traversing libraries!"),Mf.forEach(u),Yo=E(Lf," And yes, this is how they get implemented."),Lf.forEach(u),qo=b(ef),Ko=w(ef,"P",{});var Cf=y(Ko);Vo=E(Cf,"Now we can traverse the AST, and find the node that we are interested in, so the next step is to manipulate them."),Cf.forEach(u),ef.forEach(u),Qo=b(n),Zo=w(n,"SECTION",{});var Nf=y(Zo);Xo=w(Nf,"H2",{});var $f=y(Xo);np=w($f,"A",{href:!0,id:!0});var Of=y(np);ap=E(Of,"Manipulating AST"),Of.forEach(u),$f.forEach(u),sp=b(Nf),tp=w(Nf,"P",{});var Hf=y(tp);ep=E(Hf,"Manipulating the AST can be categorized into 3 different operations:"),Hf.forEach(u),op=b(Nf),pp=w(Nf,"UL",{});var Rf=y(pp);cp=w(Rf,"LI",{});var Df=y(cp);rp=E(Df,"Adding a node"),Df.forEach(u),ip=b(Rf),lp=w(Rf,"LI",{});var Bf=y(lp);up=E(Bf,"Replacing a node"),Bf.forEach(u),kp=b(Rf),hp=w(Rf,"LI",{});var Ff=y(hp);fp=E(Ff,"Removing a node"),Ff.forEach(u),Rf.forEach(u),Nf.forEach(u),dp=b(n),mp=w(n,"SECTION",{});var _f=y(mp);gp=w(_f,"H3",{});var zf=y(gp);vp=w(zf,"A",{href:!0,id:!0});var Jf=y(vp);yp=E(Jf,"Adding a node"),Jf.forEach(u),zf.forEach(u),wp=b(_f),Ep=w(_f,"P",{});var Uf=y(Ep);bp=E(Uf,"To add a node, you can assign it to a keyed property of your node:"),Uf.forEach(u),Tp=b(_f),Ap=w(_f,"PRE",{class:!0}),y(Ap).forEach(u),Sp=b(_f),xp=w(_f,"P",{});var Wf=y(xp);jp=E(Wf,"or push the new node, if the keyed property is an array:"),Wf.forEach(u),Pp=b(_f),Ip=w(_f,"PRE",{class:!0}),y(Ip).forEach(u),Lp=b(_f),Mp=w(_f,"P",{});var Gf=y(Mp);Cp=E(Gf,"To add a node as a sibling, you may need to access the node's parent:"),Gf.forEach(u),Np=b(_f),$p=w(_f,"PRE",{class:!0}),y($p).forEach(u),_f.forEach(u),Op=b(n),Hp=w(n,"SECTION",{});var Yf=y(Hp);Rp=w(Yf,"H3",{});var qf=y(Rp);Dp=w(qf,"A",{href:!0,id:!0});var Kf=y(Dp);Bp=E(Kf,"Replacing a node"),Kf.forEach(u),qf.forEach(u),Fp=b(Yf),_p=w(Yf,"P",{});var Vf=y(_p);zp=E(Vf,"To replace the current node to another node, update the key property of the current node's parent:"),Vf.forEach(u),Jp=b(Yf),Up=w(Yf,"PRE",{class:!0}),y(Up).forEach(u),Wp=b(Yf),Gp=w(Yf,"P",{});var Qf=y(Gp);Yp=E(Qf,"If the key property of the parent is an array:"),Qf.forEach(u),qp=b(Yf),Kp=w(Yf,"PRE",{class:!0}),y(Kp).forEach(u),Yf.forEach(u),Vp=b(n),Qp=w(n,"SECTION",{});var Zf=y(Qp);Zp=w(Zf,"H3",{});var Xf=y(Zp);Xp=w(Xf,"A",{href:!0,id:!0});var nd=y(Xp);nc=E(nd,"Removing a node"),nd.forEach(u),Xf.forEach(u),ac=b(Zf),sc=w(Zf,"P",{});var ad=y(sc);tc=E(ad,"To remove the current node, delete the key property of the current node's parent:"),ad.forEach(u),ec=b(Zf),oc=w(Zf,"PRE",{class:!0}),y(oc).forEach(u),pc=b(Zf),cc=w(Zf,"P",{});var sd=y(cc);rc=E(sd,"If the key property of the parent is an array:"),sd.forEach(u),ic=b(Zf),lc=w(Zf,"PRE",{class:!0}),y(lc).forEach(u),uc=b(Zf),kc=w(Zf,"BLOCKQUOTE",{});var td=y(kc);hc=w(td,"P",{});var ed=y(hc);fc=E(ed,"The operations of "),dc=w(ed,"STRONG",{});var od=y(dc);mc=E(od,"adding"),od.forEach(u),gc=E(ed,", "),vc=w(ed,"STRONG",{});var pd=y(vc);yc=E(pd,"replacing"),pd.forEach(u),wc=E(ed,", and "),Ec=w(ed,"STRONG",{});var cd=y(Ec);bc=E(cd,"removing"),cd.forEach(u),Tc=E(ed," nodes are so common that, they are usually implemented as a util function."),ed.forEach(u),td.forEach(u),Ac=b(Zf),Sc=w(Zf,"P",{});var rd=y(Sc);xc=E(rd,"However, there's "),jc=w(rd,"STRONG",{});var id=y(jc);Pc=E(id,"one important step"),id.forEach(u),Ic=E(rd," that I did not cover: after you mutate the node, you need to make sure that the traversal still works fine."),rd.forEach(u),Lc=b(Zf),Mc=w(Zf,"P",{});var ld=y(Mc);Cc=E(ld,"For a node that is a property of a key of its parent, adding, replacing and removing them are usually fine. Except for the replace operation, you might need to revisit the "),Nc=w(ld,"EM",{});var ud=y(Nc);$c=E(ud,'"current node"'),ud.forEach(u),Oc=E(ld,", which is the "),Hc=w(ld,"EM",{});var kd=y(Hc);Rc=E(kd,"new replacing node"),kd.forEach(u),Dc=E(ld,"."),ld.forEach(u),Bc=b(Zf),Fc=w(Zf,"P",{});var hd=y(Fc);_c=E(hd,"However, for node that are in an array, you need to take special care to update the array index of the loop:"),hd.forEach(u),zc=b(Zf),Jc=w(Zf,"PRE",{class:!0}),y(Jc).forEach(u),Uc=b(Zf),Wc=w(Zf,"P",{});var fd=y(Wc);Gc=E(fd,"But how do you know that the current node was removed?"),fd.forEach(u),Yc=b(Zf),qc=w(Zf,"P",{});var dd=y(qc);Kc=E(dd,"Well, knowing when a node got removed is sometimes a secret that lies within the "),Vc=w(dd,"CODE",{});var md=y(Vc);Qc=E(md,"remove"),md.forEach(u),Zc=E(dd," util function from the tree traversal library."),dd.forEach(u),Xc=b(Zf),nr=w(Zf,"P",{});var gd=y(nr);ar=E(gd,"It could be as simple as setting a flag when you call "),sr=w(gd,"CODE",{});var vd=y(sr);tr=E(vd,"remove"),vd.forEach(u),er=E(gd,":"),gd.forEach(u),or=b(Zf),pr=w(Zf,"PRE",{class:!0}),y(pr).forEach(u),cr=b(Zf),rr=w(Zf,"P",{});var yd=y(rr);ir=E(yd,"But sometimes, instead of having to import the "),lr=w(yd,"CODE",{});var wd=y(lr);ur=E(wd,"remove"),wd.forEach(u),kr=E(yd," util from the tree traversal library, the "),hr=w(yd,"CODE",{});var Ed=y(hr);fr=E(Ed,"remove"),Ed.forEach(u),dr=E(yd," function is available in "),mr=w(yd,"CODE",{});var bd=y(mr);gr=E(bd,"this"),bd.forEach(u),vr=E(yd," of the "),yr=w(yd,"CODE",{});var Td=y(yr);wr=E(Td,"visitCallback"),Td.forEach(u),Er=E(yd,":"),yd.forEach(u),br=b(Zf),Tr=w(Zf,"PRE",{class:!0}),y(Tr).forEach(u),Ar=b(Zf),Sr=w(Zf,"P",{});var Ad=y(Sr);xr=E(Ad,"Now you learned the 3 basic operations of manipulating the AST, you maybe wonder how exactly is to use these basic operations to write a codemod or an AST transform plugin?"),Ad.forEach(u),jr=b(Zf),Pr=w(Zf,"P",{});var Sd=y(Pr);Ir=E(Sd,"Well, in my "),Lr=w(Sd,"A",{href:!0});var xd=y(Lr);Mr=E(xd,"step-by-step guide"),xd.forEach(u),Cr=E(Sd,", I've explained that, you can use AST explorer like "),Nr=w(Sd,"A",{href:!0,rel:!0});var jd=y(Nr);$r=E(jd,"http://astexplorer.net/"),jd.forEach(u),Or=E(Sd," or "),Hr=w(Sd,"A",{href:!0,rel:!0});var Pd=y(Hr);Rr=E(Pd,"Babel AST Explorer"),Pd.forEach(u),Dr=E(Sd," to help you."),Sd.forEach(u),Br=b(Zf),Fr=w(Zf,"P",{});var Id=y(Fr);_r=E(Id,"You need to:"),Id.forEach(u),zr=b(Zf),Jr=w(Zf,"UL",{});var Ld=y(Jr);Ur=w(Ld,"LI",{});var Md=y(Ur);Wr=w(Md,"STRONG",{});var Cd=y(Wr);Gr=E(Cd,"Know how the part of the code you want to change look like in the AST"),Cd.forEach(u),Yr=E(Md,", so you can target the specific type of the node, and"),Md.forEach(u),qr=b(Ld),Kr=w(Ld,"LI",{});var Nd=y(Kr);Vr=w(Nd,"STRONG",{});var $d=y(Vr);Qr=E($d,"Know how does the final output you wish to see look like in the AST"),$d.forEach(u),Zr=E(Nd,", so you know what nodes to create, update or remove."),Nd.forEach(u),Ld.forEach(u),Xr=b(Zf),ni=w(Zf,"P",{});var Od=y(ni);ai=E(Od,"So we are going to elaborate more on these 2 steps specifically."),Od.forEach(u),Zf.forEach(u),si=b(n),ti=w(n,"SECTION",{});var Hd=y(ti);ei=w(Hd,"H2",{});var Rd=y(ei);oi=w(Rd,"A",{href:!0,id:!0});var Dd=y(oi);pi=E(Dd,"Targeting a node"),Dd.forEach(u),Rd.forEach(u),ci=b(Hd),ri=w(Hd,"P",{});var Bd=y(ri);ii=E(Bd,"Node targeting, most of the times, is just a lot of "),li=w(Bd,"CODE",{});var Fd=y(li);ui=E(Fd,"==="),Fd.forEach(u),ki=E(Bd,"."),Bd.forEach(u),hi=b(Hd),fi=w(Hd,"P",{});var _d=y(fi);di=E(_d,"For example, if you want to target a "),mi=w(_d,"CODE",{});var zd=y(mi);gi=E(zd,"<figure>"),zd.forEach(u),vi=E(_d," with a class "),yi=w(_d,"CODE",{});var Jd=y(yi);wi=E(Jd,"foo"),Jd.forEach(u),Ei=E(_d," that contains an "),bi=w(_d,"CODE",{});var Ud=y(bi);Ti=E(Ud,"<img>"),Ud.forEach(u),Ai=E(_d," and a "),Si=w(_d,"CODE",{});var Wd=y(Si);xi=E(Wd,"<figcaption>"),Wd.forEach(u),ji=E(_d," in "),Pi=w(_d,"A",{href:!0,rel:!0});var Gd=y(Pi);Ii=E(Gd,"htmlparser2"),Gd.forEach(u),Li=E(_d,":"),_d.forEach(u),Mi=b(Hd),Ci=w(Hd,"PRE",{class:!0}),y(Ci).forEach(u),Ni=b(Hd),$i=w(Hd,"P",{});var Yd=y($i);Oi=E(Yd,"You need to check:"),Yd.forEach(u),Hi=b(Hd),Ri=w(Hd,"PRE",{class:!0}),y(Ri).forEach(u),Di=b(Hd),Bi=w(Hd,"P",{});var qd=y(Bi);Fi=E(qd,"To make it less verbose, we can refactor each check into reusable functions:"),qd.forEach(u),_i=b(Hd),zi=w(Hd,"PRE",{class:!0}),y(zi).forEach(u),Hd.forEach(u),Ji=b(n),Ui=w(n,"SECTION",{});var Kd=y(Ui);Wi=w(Kd,"H2",{});var Vd=y(Wi);Gi=w(Vd,"A",{href:!0,id:!0});var Qd=y(Gi);Yi=E(Qd,"Creating a node"),Qd.forEach(u),Vd.forEach(u),qi=b(Kd),Ki=w(Kd,"P",{});var Zd=y(Ki);Vi=E(Zd,"There are a few ways you can create an AST node."),Zd.forEach(u),Qi=b(Kd),Zi=w(Kd,"P",{});var Xd=y(Zi);Xi=E(Xd,"The simplest and crudest way is to "),nl=w(Xd,"STRONG",{});var nm=y(nl);al=E(nm,"manually create the node object"),nm.forEach(u),sl=E(Xd,". Most of the time, the node object is a JavaScript object. So you can just create them manually:"),Xd.forEach(u),tl=b(Kd),el=w(Kd,"PRE",{class:!0}),y(el).forEach(u),ol=b(Kd),pl=w(Kd,"P",{});var am=y(pl);cl=E(am,"It may become unwieldy when creating large, complex AST nodes, so sometimes library decides to provide builder functions, like "),rl=w(am,"A",{href:!0,rel:!0});var sm=y(rl);il=E(sm,"@babel/types"),sm.forEach(u),ll=E(am," to simplify node creation and provide default values:"),am.forEach(u),ul=b(Kd),kl=w(Kd,"PRE",{class:!0}),y(kl).forEach(u),hl=b(Kd),fl=w(Kd,"P",{});var tm=y(fl);dl=E(tm,"It looked more concise and tidier, but it is hard to comprehend and grasp what node it is creating."),tm.forEach(u),ml=b(Kd),gl=w(Kd,"P",{});var em=y(gl);vl=E(em,"So, a better way of creating complex AST node, is to use the "),yl=w(em,"CODE",{});var om=y(yl);wl=E(om,"parse"),om.forEach(u),El=E(em," function + "),bl=w(em,"CODE",{});var pm=y(bl);Tl=E(pm,"string"),pm.forEach(u),Al=E(em,":"),em.forEach(u),Sl=b(Kd),xl=w(Kd,"PRE",{class:!0}),y(xl).forEach(u),jl=b(Kd),Pl=w(Kd,"P",{});var cm=y(Pl);Il=E(cm,"For Babel, there's an amazing util called "),Ll=w(cm,"A",{href:!0,rel:!0});var rm=y(Ll);Ml=E(rm,"@babel/template"),rm.forEach(u),Cl=E(cm,", where you can use "),Nl=w(cm,"A",{href:!0,rel:!0});var im=y(Nl);$l=E(im,"template literals"),im.forEach(u),Ol=E(cm," to create AST node:"),cm.forEach(u),Hl=b(Kd),Rl=w(Kd,"PRE",{class:!0}),y(Rl).forEach(u),Kd.forEach(u),Dl=b(n),Bl=w(n,"SECTION",{});var lm=y(Bl);Fl=w(lm,"H2",{});var um=y(Fl);_l=w(um,"A",{href:!0,id:!0});var km=y(_l);zl=E(km,"Summary"),km.forEach(u),um.forEach(u),Jl=b(lm),Ul=w(lm,"P",{});var hm=y(Ul);Wl=E(hm,"We've gone through:"),hm.forEach(u),Gl=b(lm),Yl=w(lm,"UL",{});var fm=y(Yl);ql=w(fm,"LI",{});var dm=y(ql);Kl=E(dm,"How to traverse an AST, using depth-first search algorithm,"),dm.forEach(u),Vl=b(fm),Ql=w(fm,"LI",{});var mm=y(Ql);Zl=E(mm,"The 3 basic AST manipulations, addition, replacement, and removal,"),mm.forEach(u),Xl=b(fm),nu=w(fm,"LI",{});var gm=y(nu);au=E(gm,"How to target a node in AST, and"),gm.forEach(u),su=b(fm),tu=w(fm,"LI",{});var vm=y(tu);eu=E(vm,"How to create an AST node"),vm.forEach(u),fm.forEach(u),lm.forEach(u),ou=b(n),pu=w(n,"SECTION",{});var ym=y(pu);cu=w(ym,"H2",{});var wm=y(cu);ru=w(wm,"A",{href:!0,id:!0});var Em=y(ru);iu=E(Em,"Further Readings"),Em.forEach(u),wm.forEach(u),lu=b(ym),uu=w(ym,"P",{});var bm=y(uu);ku=w(bm,"A",{href:!0,rel:!0});var Tm=y(ku);hu=E(Tm,"Dinesh (@flexdinesh)"),Tm.forEach(u),fu=b(bm),du=w(bm,"A",{href:!0,rel:!0});var Am=y(du);mu=E(Am,"tweeted"),Am.forEach(u),gu=E(bm," his pocket collection of AST resources:"),bm.forEach(u),vu=b(ym),yu=w(ym,"UL",{});var Sm=y(yu);wu=w(Sm,"LI",{});var xm=y(wu);Eu=w(xm,"A",{href:!0,rel:!0});var jm=y(Eu);bu=E(jm,"Code Transformation and Linting with ASTs"),jm.forEach(u),xm.forEach(u),Tu=b(Sm),Au=w(Sm,"LI",{});var Pm=y(Au);Su=w(Pm,"A",{href:!0,rel:!0});var Im=y(Su);xu=E(Im,"Write your own code transform for fun and profit"),Im.forEach(u),Pm.forEach(u),ju=b(Sm),Pu=w(Sm,"LI",{});var Lm=y(Pu);Iu=w(Lm,"A",{href:!0,rel:!0});var Mm=y(Iu);Lu=E(Mm,"Understanding ASTs by Building Your Own Babel Plugin"),Mm.forEach(u),Lm.forEach(u),Mu=b(Sm),Cu=w(Sm,"LI",{});var Cm=y(Cu);Nu=w(Cm,"A",{href:!0,rel:!0});var Nm=y(Nu);$u=E(Nm,"Writing your first Babel Plugin"),Nm.forEach(u),Cm.forEach(u),Ou=b(Sm),Hu=w(Sm,"LI",{});var $m=y(Hu);Ru=w($m,"A",{href:!0,rel:!0});var Om=y(Ru);Du=E(Om,"This is how I build Babel plug-ins"),Om.forEach(u),$m.forEach(u),Bu=b(Sm),Fu=w(Sm,"LI",{});var Hm=y(Fu);_u=w(Hm,"A",{href:!0,rel:!0});var Rm=y(_u);zu=E(Rm,"Writing My First Babel Plugin"),Rm.forEach(u),Hm.forEach(u),Sm.forEach(u),ym.forEach(u),this.h()},h(){v(o,"href","#the-parsers"),v(r,"href","#traversing-an-ast"),v(g,"href","#manipulating-ast"),v(j,"href","#adding-a-node"),v(L,"href","#replacing-a-node"),v(N,"href","#removing-a-node"),v(H,"href","#targeting-a-node"),v(B,"href","#creating-a-node"),v(z,"href","#summary"),v(W,"href","#further-readings"),v(t,"class","sitemap"),v(t,"id","sitemap"),v(t,"role","navigation"),v(t,"aria-label","Table of Contents"),v(V,"href","/step-by-step-guide-for-writing-a-babel-transformation"),v(X,"href","https://babeljs.io/"),v(X,"rel","nofollow"),v(sn,"href","/creating-custom-javascript-syntax-with-babel"),v(hn,"href","https://www.ecma-international.org/publications/standards/Ecma-262.htm"),v(hn,"rel","nofollow"),v(mn,"href","http://typescriptlang.org/"),v(mn,"rel","nofollow"),v(yn,"href","https://sass-lang.com/"),v(yn,"rel","nofollow"),v(bn,"href","https://www.w3.org/Style/CSS/"),v(bn,"rel","nofollow"),v(Sn,"href","https://www.w3.org/html/"),v(Sn,"rel","nofollow"),v(Pn,"href","https://en.wikipedia.org/wiki/Markdown"),v(Pn,"rel","nofollow"),v(Rn,"href","#the-parsers"),v(Rn,"id","the-parsers"),v(Wn,"href","https://astexplorer.net/"),v(Wn,"rel","nofollow"),v(Vn,"title","null"),v(Vn,"alt","ast explorer"),v(Vn,"data-src","b581a0310d989fe0.gif"),v(Vn,"loading","lazy"),v(ta,"href","https://github.com/fb55/htmlparser2"),v(ta,"rel","nofollow"),v(pa,"href","https://github.com/nik-garmash/hyntax"),v(pa,"rel","nofollow"),v(ia,"href","https://github.com/inikulin/parse5"),v(ia,"rel","nofollow"),v(da,"type","image/webp"),v(da,"srcset","25aa4cbe5d6607fb.webp"),v(ma,"type","image/jpeg"),v(ma,"srcset","25aa4cbe5d6607fb.png"),v(ga,"title","null"),v(ga,"alt","ast explorer"),v(ga,"data-src","25aa4cbe5d6607fb.png"),v(ga,"loading","lazy"),v(Ba,"class","language-text"),v(Ja,"class","language-text"),v(Za,"href","https://github.com/inikulin/parse5/tree/master/packages/parse5"),v(ts,"class","language-text"),v(ss,"href","https://github.com/inikulin/parse5/blob/master/packages/parse5/docs/index.md#parse"),v(rs,"class","language-text"),v(cs,"href","https://github.com/inikulin/parse5/blob/master/packages/parse5/docs/index.md#serialize"),v(ms,"href","https://github.com/remarkjs/remark"),v(Es,"class","language-text"),v(ws,"href","https://github.com/remarkjs/remark/tree/master/packages/remark-parse"),v(xs,"class","language-text"),v(Ss,"href","https://github.com/remarkjs/remark/tree/master/packages/remark-stringify"),v($s,"href","https://github.com/csstree/csstree"),v(Bs,"class","language-text"),v(Ds,"href","https://github.com/csstree/csstree/blob/master/docs/parsing.md"),v(Us,"class","language-text"),v(Js,"href","https://github.com/csstree/csstree/blob/master/docs/generate.md"),v(Zs,"href","https://github.com/shawnbot/sast"),v(tt,"class","language-text"),v(st,"href","https://github.com/shawnbot/sast#sastparsesource--options-"),v(rt,"class","language-text"),v(ct,"href","https://github.com/shawnbot/sast#saststringifynode-"),v(mt,"href","https://babeljs.io/"),v(Et,"class","language-text"),v(wt,"href","https://babeljs.io/docs/en/babel-parser#babelparserparsecode-options"),v(xt,"class","language-text"),v(St,"href","https://babeljs.io/docs/en/babel-generator"),v($t,"href","http://typescriptlang.org/"),v(Bt,"class","language-text"),v(Dt,"href","https://github.com/microsoft/TypeScript/wiki/Using-the-Compiler-API#creating-and-printing-a-typescript-ast"),v(Ut,"class","language-text"),v(Jt,"href","https://github.com/microsoft/TypeScript/wiki/Using-the-Compiler-API#creating-and-printing-a-typescript-ast"),S(Pa,"overflow","auto"),S(Pa,"margin-bottom","2em"),v(Xt,"class","language-js"),v(ee,"class","language-js"),v(ge,"href","#traversing-an-ast"),v(ge,"id","traversing-an-ast"),v(Le,"href","https://twitter.com/vaidehijoshi"),v(Le,"rel","nofollow"),v(Ne,"href","https://medium.com/basecs/demystifying-depth-first-search-a7c14cccf056"),v(Ne,"rel","nofollow"),v(He,"href","https://medium.com/basecs/demystifying-depth-first-search-a7c14cccf056"),v(He,"rel","nofollow"),v(Je,"class","language-js"),v(po,"class","language-js"),v(fo,"class","language-js"),v(wo,"class","language-js"),v(Po,"class","language-js"),v(_o,"class","language-js"),v(np,"href","#manipulating-ast"),v(np,"id","manipulating-ast"),v(vp,"href","#adding-a-node"),v(vp,"id","adding-a-node"),v(Ap,"class","language-js"),v(Ip,"class","language-js"),v($p,"class","language-js"),v(Dp,"href","#replacing-a-node"),v(Dp,"id","replacing-a-node"),v(Up,"class","language-js"),v(Kp,"class","language-js"),v(Xp,"href","#removing-a-node"),v(Xp,"id","removing-a-node"),v(oc,"class","language-js"),v(lc,"class","language-js"),v(Jc,"class","language-js"),v(pr,"class","language-js"),v(Tr,"class","language-js"),v(Lr,"href","/step-by-step-guide-for-writing-a-babel-transformation"),v(Nr,"href","http://astexplorer.net/"),v(Nr,"rel","nofollow"),v(Hr,"href","https://lihautan.com/babel-ast-explorer"),v(Hr,"rel","nofollow"),v(oi,"href","#targeting-a-node"),v(oi,"id","targeting-a-node"),v(Pi,"href","https://github.com/fb55/htmlparser2"),v(Pi,"rel","nofollow"),v(Ci,"class","language-html"),v(Ri,"class","language-js"),v(zi,"class","language-js"),v(Gi,"href","#creating-a-node"),v(Gi,"id","creating-a-node"),v(el,"class","language-js"),v(rl,"href","https://babeljs.io/docs/en/babel-types"),v(rl,"rel","nofollow"),v(kl,"class","language-js"),v(xl,"class","language-js"),v(Ll,"href","https://babeljs.io/docs/en/babel-template"),v(Ll,"rel","nofollow"),v(Nl,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"),v(Nl,"rel","nofollow"),v(Rl,"class","language-js"),v(_l,"href","#summary"),v(_l,"id","summary"),v(ru,"href","#further-readings"),v(ru,"id","further-readings"),v(ku,"href","https://twitter.com/flexdinesh"),v(ku,"rel","nofollow"),v(du,"href","https://twitter.com/flexdinesh/status/1196680010343432192"),v(du,"rel","nofollow"),v(Eu,"href","https://frontendmasters.com/courses/linting-asts/"),v(Eu,"rel","nofollow"),v(Su,"href","https://kentcdodds.com/blog/write-your-own-code-transform/"),v(Su,"rel","nofollow"),v(Iu,"href","https://www.sitepoint.com/understanding-asts-building-babel-plugin/"),v(Iu,"rel","nofollow"),v(Nu,"href","https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#toc-writing-your-first-babel-plugin"),v(Nu,"rel","nofollow"),v(Ru,"href","https://medium.com/the-guild/this-is-how-i-build-babel-plug-ins-b0a13dcd0352"),v(Ru,"rel","nofollow"),v(_u,"href","https://varunzxzx.github.io/blog/writing-babel-plugin"),v(_u,"rel","nofollow")},m(n,a){l(n,s,a),i(s,t),i(t,e),i(e,o),i(o,p),i(t,c),i(c,r),i(r,k),i(t,f),i(f,g),i(g,T),i(t,A),i(A,x),i(x,j),i(j,P),i(A,I),i(I,L),i(L,M),i(A,C),i(C,N),i(N,$),i(t,O),i(O,H),i(H,R),i(t,D),i(D,B),i(B,F),i(t,_),i(_,z),i(z,J),i(t,U),i(U,W),i(W,G),l(n,Y,a),l(n,q,a),i(q,K),i(q,V),i(V,Q),i(q,Z),i(q,X),i(X,nn),i(q,an),i(q,sn),i(sn,tn),i(q,en),l(n,on,a),l(n,pn,a),i(pn,cn),l(n,rn,a),l(n,ln,a),i(ln,un),i(un,kn),i(un,hn),i(hn,fn),i(un,dn),i(un,mn),i(mn,gn),i(un,vn),i(un,yn),i(yn,wn),i(un,En),i(un,bn),i(bn,Tn),i(un,An),i(un,Sn),i(Sn,xn),i(un,jn),i(un,Pn),i(Pn,In),i(un,Ln),i(ln,Mn),i(ln,Cn),i(Cn,Nn),l(n,$n,a),l(n,On,a),i(On,Hn),i(Hn,Rn),i(Rn,Dn),i(On,Bn),i(On,Fn),i(Fn,_n),i(On,zn),i(On,Jn),i(Jn,Un),i(Jn,Wn),i(Wn,Gn),i(Jn,Yn),i(On,qn),i(On,Kn),i(Kn,Vn),i(On,Qn),i(On,Zn),i(Zn,Xn),i(Zn,na),i(na,aa),i(Zn,sa),i(Zn,ta),i(ta,ea),i(Zn,oa),i(Zn,pa),i(pa,ca),i(Zn,ra),i(Zn,ia),i(ia,la),i(Zn,ua),i(On,ka),i(On,ha),i(ha,fa),i(fa,da),i(fa,ma),i(fa,ga),i(On,va),i(On,ya),i(ya,wa),i(ya,Ea),i(Ea,ba),i(ya,Ta),i(ya,Aa),i(Aa,Sa),i(ya,xa),i(On,ja),i(On,Pa),i(Pa,Ia),i(Ia,La),i(La,Ma),i(Ma,Ca),i(Ca,Na),i(Ma,$a),i(Ma,Oa),i(Oa,Ha),i(Ma,Ra),i(Ma,Da),i(Da,Ba),i(Ba,Fa),i(Ma,_a),i(Ma,za),i(za,Ja),i(Ja,Ua),i(Ia,Wa),i(Ia,Ga),i(Ga,Ya),i(Ya,qa),i(qa,Ka),i(Ya,Va),i(Ya,Qa),i(Qa,Za),i(Za,Xa),i(Ya,ns),i(Ya,as),i(as,ss),i(ss,ts),i(ts,es),i(Ya,os),i(Ya,ps),i(ps,cs),i(cs,rs),i(rs,is),i(Ga,ls),i(Ga,us),i(us,ks),i(ks,hs),i(us,fs),i(us,ds),i(ds,ms),i(ms,gs),i(us,vs),i(us,ys),i(ys,ws),i(ws,Es),i(Es,bs),i(us,Ts),i(us,As),i(As,Ss),i(Ss,xs),i(xs,js),i(Ga,Ps),i(Ga,Is),i(Is,Ls),i(Ls,Ms),i(Is,Cs),i(Is,Ns),i(Ns,$s),i($s,Os),i(Is,Hs),i(Is,Rs),i(Rs,Ds),i(Ds,Bs),i(Bs,Fs),i(Is,_s),i(Is,zs),i(zs,Js),i(Js,Us),i(Us,Ws),i(Ga,Gs),i(Ga,Ys),i(Ys,qs),i(qs,Ks),i(Ys,Vs),i(Ys,Qs),i(Qs,Zs),i(Zs,Xs),i(Ys,nt),i(Ys,at),i(at,st),i(st,tt),i(tt,et),i(Ys,ot),i(Ys,pt),i(pt,ct),i(ct,rt),i(rt,it),i(Ga,lt),i(Ga,ut),i(ut,kt),i(kt,ht),i(ut,ft),i(ut,dt),i(dt,mt),i(mt,gt),i(ut,vt),i(ut,yt),i(yt,wt),i(wt,Et),i(Et,bt),i(ut,Tt),i(ut,At),i(At,St),i(St,xt),i(xt,jt),i(Ga,Pt),i(Ga,It),i(It,Lt),i(Lt,Mt),i(It,Ct),i(It,Nt),i(Nt,$t),i($t,Ot),i(It,Ht),i(It,Rt),i(Rt,Dt),i(Dt,Bt),i(Bt,Ft),i(It,_t),i(It,zt),i(zt,Jt),i(Jt,Ut),i(Ut,Wt),i(On,Gt),i(On,Yt),i(Yt,qt),i(On,Kt),i(On,Vt),i(Vt,Qt),i(On,Zt),i(On,Xt),Xt.innerHTML='<code class="language-js"><span class="token keyword">const</span> code <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">\'/file/to/code\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token function">parserMethod</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// the magical transform function</span>\n<span class="token comment">// usually not a pure function</span>\n<span class="token function">transform</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> output <span class="token operator">=</span> <span class="token function">generatorMethod</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span><span class="token punctuation">;</span>\nfs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token string">\'/file/to/output\'</span><span class="token punctuation">,</span> output<span class="token punctuation">,</span> <span class="token string">\'utf8\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>',i(On,ne),i(On,ae),i(ae,se),i(On,te),i(On,ee),ee.innerHTML='<code class="language-js"><span class="token keyword">const</span> lang1 <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">\'/file/to/code\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token function">parserMethodLang1</span><span class="token punctuation">(</span>lang1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// the magical transform function</span>\n<span class="token comment">// usually not a pure function</span>\n<span class="token function">transformLang1ToLang2</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> lang2 <span class="token operator">=</span> <span class="token function">generatorMethodLang2</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span><span class="token punctuation">;</span>\nfs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token string">\'/file/to/output\'</span><span class="token punctuation">,</span> lang2<span class="token punctuation">,</span> <span class="token string">\'utf8\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>',i(On,oe),i(On,pe),i(pe,ce),i(pe,re),i(re,ie),i(pe,le),i(pe,ue),i(ue,ke),i(pe,he),l(n,fe,a),l(n,de,a),i(de,me),i(me,ge),i(ge,ve),i(de,ye),i(de,we),i(we,Ee),i(we,be),i(be,Te),i(we,Ae),i(we,Se),i(Se,xe),i(we,je),i(de,Pe),i(de,Ie),i(Ie,Le),i(Le,Me),i(Ie,Ce),i(Ie,Ne),i(Ne,$e),i(Ie,Oe),i(Ie,He),i(He,Re),i(Ie,De),i(de,Be),i(de,Fe),i(Fe,_e),i(de,ze),i(de,Je),Je.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token parameter">ast</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// TODO: do something with this node</span>\n\n  <span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token keyword">const</span> child <span class="token operator">=</span> ast<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token comment">// could be an array of nodes or just a node</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> child<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n        <span class="token function">visit</span><span class="token punctuation">(</span>child<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">&#125;</span>\n    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNode</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n      <span class="token function">visit</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span>\n  <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span>\n\n<span class="token keyword">function</span> <span class="token function">isNode</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// probably need more check,</span>\n  <span class="token comment">// for example,</span>\n  <span class="token comment">// if the node contains certain properties</span>\n  <span class="token keyword">return</span> <span class="token keyword">typeof</span> node <span class="token operator">===</span> <span class="token string">\'object\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',i(de,Ue),i(de,We),i(We,Ge),i(We,Ye),i(Ye,qe),i(We,Ke),i(de,Ve),i(de,Qe),i(Qe,Ze),i(Qe,Xe),i(Xe,no),i(Qe,ao),i(Qe,so),i(so,to),i(Qe,eo),i(de,oo),i(de,po),po.innerHTML='<code class="language-js"><span class="token comment">// highlight-next-line</span>\n<span class="token keyword">function</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token parameter">ast<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// highlight-next-line</span>\n  <span class="token function">callback</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token keyword">const</span> child <span class="token operator">=</span> ast<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> child<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n        <span class="token comment">// highlight-next-line</span>\n        <span class="token function">visit</span><span class="token punctuation">(</span>child<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">&#125;</span>\n    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNode</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n      <span class="token comment">// highlight-next-line</span>\n      <span class="token function">visit</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span>\n  <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span>\n\n<span class="token keyword">function</span> <span class="token function">isNode</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// probably need more check,</span>\n  <span class="token comment">// for example,</span>\n  <span class="token comment">// if the node contains certain properties</span>\n  <span class="token keyword">return</span> <span class="token keyword">typeof</span> node <span class="token operator">===</span> <span class="token string">\'object\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',i(de,co),i(de,ro),i(ro,io),i(ro,lo),i(lo,uo),i(ro,ko),i(de,ho),i(de,fo),fo.innerHTML='<code class="language-js"><span class="token function">visit</span><span class="token punctuation">(</span>htmlAst<span class="token punctuation">,</span> <span class="token parameter">htmlAstNode</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">/*...*/</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">visit</span><span class="token punctuation">(</span>cssAst<span class="token punctuation">,</span> <span class="token parameter">cssAstNode</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">/*...*/</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>',i(de,mo),i(de,go),i(go,vo),i(de,yo),i(de,wo),wo.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token parameter">ast<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// highlight-next-line</span>\n  <span class="token keyword">function</span> <span class="token function">_visit</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> key<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token comment">// highlight-next-line</span>\n    <span class="token function">callback</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> key<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n      <span class="token keyword">const</span> child <span class="token operator">=</span> node<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> child<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n          <span class="token comment">// highlight-next-line</span>\n          <span class="token function">_visit</span><span class="token punctuation">(</span>child<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> node<span class="token punctuation">,</span> key<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">&#125;</span>\n      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNode</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n        <span class="token comment">// highlight-next-line</span>\n        <span class="token function">_visit</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> node<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">&#125;</span>\n    <span class="token punctuation">&#125;</span>\n  <span class="token punctuation">&#125;</span>\n  <span class="token comment">// highlight-next-line</span>\n  <span class="token function">_visit</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',i(de,Eo),i(de,bo),i(bo,To),i(bo,Ao),i(Ao,So),i(bo,xo),i(de,jo),i(de,Po),Po.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token parameter">ast<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">function</span> <span class="token function">_visit</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> key<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token comment">// highlight-next-line</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">someCondition</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n      <span class="token function">callback</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> key<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span>\n    <span class="token operator">...</span></code>',i(de,Io),i(de,Lo),i(Lo,Mo),i(Lo,Co),i(Co,No),i(Co,$o),i($o,Oo),i(Co,Ho),i(de,Ro),i(de,Do),i(Do,Bo),i(de,Fo),i(de,_o),_o.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token parameter">ast<span class="token punctuation">,</span> callbackMap</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">function</span> <span class="token function">_visit</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> key<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token comment">// highlight-start</span>\n    <span class="token keyword">const</span> nodeType <span class="token operator">=</span> <span class="token function">getNodeType</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>nodeType <span class="token keyword">in</span> callbackMap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n      callbackMap<span class="token punctuation">[</span>nodeType<span class="token punctuation">]</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> key<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span>\n    <span class="token comment">// highlight-end</span>\n    <span class="token operator">...</span>\n  <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span>\n\n<span class="token function">visit</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>\n  <span class="token function">Identifier</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> key<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token comment">// do something</span>\n  <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code>',i(de,zo),i(de,Jo),i(Jo,Uo),i(Jo,Wo),i(Wo,Go),i(Jo,Yo),i(de,qo),i(de,Ko),i(Ko,Vo),l(n,Qo,a),l(n,Zo,a),i(Zo,Xo),i(Xo,np),i(np,ap),i(Zo,sp),i(Zo,tp),i(tp,ep),i(Zo,op),i(Zo,pp),i(pp,cp),i(cp,rp),i(pp,ip),i(pp,lp),i(lp,up),i(pp,kp),i(pp,hp),i(hp,fp),l(n,dp,a),l(n,mp,a),i(mp,gp),i(gp,vp),i(vp,yp),i(mp,wp),i(mp,Ep),i(Ep,bp),i(mp,Tp),i(mp,Ap),Ap.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">visitCallback</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> key<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  node<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token function">createNewNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',i(mp,Sp),i(mp,xp),i(xp,jp),i(mp,Pp),i(mp,Ip),Ip.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">visitCallback</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> key<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  node<span class="token punctuation">.</span>foo<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">createNewNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',i(mp,Lp),i(mp,Mp),i(Mp,Cp),i(mp,Np),i(mp,$p),$p.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">visitCallback</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> key<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// add as first sibling</span>\n  parent<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token function">createNewNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// add as last sibling</span>\n  parent<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">createNewNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// add as next sibling</span>\n  parent<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">createNewNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// add as prev sibling</span>\n  parent<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">createNewNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',l(n,Op,a),l(n,Hp,a),i(Hp,Rp),i(Rp,Dp),i(Dp,Bp),i(Hp,Fp),i(Hp,_p),i(_p,zp),i(Hp,Jp),i(Hp,Up),Up.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">visitCallback</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> key<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  parent<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">updatedNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',i(Hp,Wp),i(Hp,Gp),i(Gp,Yp),i(Hp,qp),i(Hp,Kp),Kp.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">visitCallback</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> key<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  parent<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">updatedNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',l(n,Vp,a),l(n,Qp,a),i(Qp,Zp),i(Zp,Xp),i(Xp,nc),i(Qp,ac),i(Qp,sc),i(sc,tc),i(Qp,ec),i(Qp,oc),oc.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">visitCallback</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> key<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">delete</span> parent<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',i(Qp,pc),i(Qp,cc),i(cc,rc),i(Qp,ic),i(Qp,lc),lc.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">visitCallback</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> key<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  parent<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',i(Qp,uc),i(Qp,kc),i(kc,hc),i(hc,fc),i(hc,dc),i(dc,mc),i(hc,gc),i(hc,vc),i(vc,yc),i(hc,wc),i(hc,Ec),i(Ec,bc),i(hc,Tc),i(Qp,Ac),i(Qp,Sc),i(Sc,xc),i(Sc,jc),i(jc,Pc),i(Sc,Ic),i(Qp,Lc),i(Qp,Mc),i(Mc,Cc),i(Mc,Nc),i(Nc,$c),i(Mc,Oc),i(Mc,Hc),i(Hc,Rc),i(Mc,Dc),i(Qp,Bc),i(Qp,Fc),i(Fc,_c),i(Qp,zc),i(Qp,Jc),Jc.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token parameter">ast<span class="token punctuation">,</span> callbackMap</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">function</span> <span class="token function">_visit</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> key<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token comment">// ...</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> child<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n        <span class="token function">_visit</span><span class="token punctuation">(</span>child<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> node<span class="token punctuation">,</span> key<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// highlight-start</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasRemoved</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n          <span class="token comment">// offset the index</span>\n          j<span class="token operator">--</span><span class="token punctuation">;</span>\n        <span class="token punctuation">&#125;</span>\n        <span class="token comment">// highlight-end</span>\n      <span class="token punctuation">&#125;</span>\n    <span class="token punctuation">&#125;</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span></code>',i(Qp,Uc),i(Qp,Wc),i(Wc,Gc),i(Qp,Yc),i(Qp,qc),i(qc,Kc),i(qc,Vc),i(Vc,Qc),i(qc,Zc),i(Qp,Xc),i(Qp,nr),i(nr,ar),i(nr,sr),i(sr,tr),i(nr,er),i(Qp,or),i(Qp,pr),pr.innerHTML='<code class="language-js"><span class="token comment">// highlight-start</span>\n<span class="token keyword">let</span> _hasRemoved <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  _hasRemoved <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token comment">// proceed to remove current node</span>\n<span class="token punctuation">&#125;</span>\n<span class="token keyword">function</span> <span class="token function">hasRemoved</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">let</span> result <span class="token operator">=</span> _hasRemoved<span class="token punctuation">;</span>\n  <span class="token comment">// reset back</span>\n  _hasRemoved <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span>\n<span class="token comment">// highlight-end</span>\n\n<span class="token comment">// function _visit(...) &#123; ...</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> child<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token function">_visit</span><span class="token punctuation">(</span>child<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> node<span class="token punctuation">,</span> key<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// highlight-next-line</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasRemoved</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span>\n\n<span class="token comment">// ...somewhere in your visitCallback</span>\n<span class="token keyword">function</span> <span class="token function">visitCallback</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> key<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// highlight-next-line</span>\n  <span class="token function">remove</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',i(Qp,cr),i(Qp,rr),i(rr,ir),i(rr,lr),i(lr,ur),i(rr,kr),i(rr,hr),i(hr,fr),i(rr,dr),i(rr,mr),i(mr,gr),i(rr,vr),i(rr,yr),i(yr,wr),i(rr,Er),i(Qp,br),i(Qp,Tr),Tr.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token parameter">ast<span class="token punctuation">,</span> callbackMap</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">function</span> <span class="token function">_visit</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> key<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token comment">// highlight-start</span>\n    <span class="token keyword">let</span> _hasRemoved <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> _this <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n      <span class="token comment">// don\'t need to take in &#96;node&#96; and &#96;parent&#96;,</span>\n      <span class="token comment">// because it know exactly what they are</span>\n      <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n        _hasRemoved <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token comment">// proceed to remove current node</span>\n      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n    <span class="token comment">// highlight-end</span>\n\n    <span class="token comment">// ...</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>nodeType <span class="token keyword">in</span> callbackMap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n      <span class="token comment">// highlight-next-line</span>\n      callbackMap<span class="token punctuation">[</span>nodeType<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>_this<span class="token punctuation">,</span> node<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> key<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span>\n  <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span>\n\n<span class="token comment">// ...somewhere in your visitCallback</span>\n<span class="token keyword">function</span> <span class="token function">visitCallback</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> key<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// highlight-next-line</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',i(Qp,Ar),i(Qp,Sr),i(Sr,xr),i(Qp,jr),i(Qp,Pr),i(Pr,Ir),i(Pr,Lr),i(Lr,Mr),i(Pr,Cr),i(Pr,Nr),i(Nr,$r),i(Pr,Or),i(Pr,Hr),i(Hr,Rr),i(Pr,Dr),i(Qp,Br),i(Qp,Fr),i(Fr,_r),i(Qp,zr),i(Qp,Jr),i(Jr,Ur),i(Ur,Wr),i(Wr,Gr),i(Ur,Yr),i(Jr,qr),i(Jr,Kr),i(Kr,Vr),i(Vr,Qr),i(Kr,Zr),i(Qp,Xr),i(Qp,ni),i(ni,ai),l(n,si,a),l(n,ti,a),i(ti,ei),i(ei,oi),i(oi,pi),i(ti,ci),i(ti,ri),i(ri,ii),i(ri,li),i(li,ui),i(ri,ki),i(ti,hi),i(ti,fi),i(fi,di),i(fi,mi),i(mi,gi),i(fi,vi),i(fi,yi),i(yi,wi),i(fi,Ei),i(fi,bi),i(bi,Ti),i(fi,Ai),i(fi,Si),i(Si,xi),i(fi,ji),i(fi,Pi),i(Pi,Ii),i(fi,Li),i(ti,Mi),i(ti,Ci),Ci.innerHTML='<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figure</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>foo<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figcaption</span><span class="token punctuation">></span></span>lorem ipsum<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figcaption</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figure</span><span class="token punctuation">></span></span></code>',i(ti,Ni),i(ti,$i),i($i,Oi),i(ti,Hi),i(ti,Ri),Ri.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>\n    <span class="token comment">/* 1. is node &lt;figure> */</span>\n    node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">\'tag\'</span> <span class="token operator">&amp;&amp;</span>\n    node<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">\'figure\'</span> <span class="token operator">&amp;&amp;</span>\n    <span class="token comment">/* 2. is node contain class &#96;foo&#96; */</span>\n    node<span class="token punctuation">.</span>attribs<span class="token punctuation">.</span>class <span class="token operator">===</span> <span class="token string">\'foo\'</span> <span class="token operator">&amp;&amp;</span>\n    <span class="token comment">/* 3. is node children contain &lt;img> */</span>\n    node<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>\n      <span class="token parameter">child</span> <span class="token operator">=></span> child<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">\'tag\'</span> <span class="token operator">&amp;&amp;</span> child<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">\'img\'</span>\n    <span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span>\n    <span class="token comment">/* 4. is node children contain &lt;figcaption> */</span>\n    node<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>\n      <span class="token parameter">child</span> <span class="token operator">=></span> child<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">\'tag\'</span> <span class="token operator">&amp;&amp;</span> child<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">\'figcaption\'</span>\n    <span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword">undefined</span>\n  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token comment">// do something</span>\n  <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span></code>',i(ti,Di),i(ti,Bi),i(Bi,Fi),i(ti,_i),i(ti,zi),zi.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">isTag</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">return</span> node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">\'tag\'</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>name <span class="token operator">===</span> name<span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span>\n<span class="token keyword">function</span> <span class="token function">hasAttr</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">return</span> node<span class="token punctuation">.</span>attribs<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> value<span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span>\n<span class="token keyword">function</span> <span class="token function">hasChild</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">return</span> node<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span>\n<span class="token keyword">function</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>\n    <span class="token comment">/* 1. is node &lt;figure> */</span>\n    <span class="token comment">// highlight-next-line</span>\n    <span class="token function">isTag</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token string">\'figure\'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n    <span class="token comment">/* 2. is node contain class &#96;foo&#96; */</span>\n    <span class="token comment">// highlight-next-line</span>\n    <span class="token function">hasAttr</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token string">\'class\'</span><span class="token punctuation">,</span> <span class="token string">\'foo\'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n    <span class="token comment">/* 3. is node children contain &lt;img> */</span>\n    <span class="token comment">// highlight-next-line</span>\n    <span class="token function">hasChild</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token operator">=></span> <span class="token function">isTag</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> <span class="token string">\'img\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n    <span class="token comment">/* 4. is node children contain &lt;figcaption> */</span>\n    <span class="token comment">// highlight-next-line</span>\n    <span class="token function">hasChild</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token operator">=></span> <span class="token function">isTag</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> <span class="token string">\'figcaption\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token comment">// do something</span>\n  <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span></code>',l(n,Ji,a),l(n,Ui,a),i(Ui,Wi),i(Wi,Gi),i(Gi,Yi),i(Ui,qi),i(Ui,Ki),i(Ki,Vi),i(Ui,Qi),i(Ui,Zi),i(Zi,Xi),i(Zi,nl),i(nl,al),i(Zi,sl),i(Ui,tl),i(Ui,el),el.innerHTML='<code class="language-js"><span class="token keyword">const</span> newNode <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  type<span class="token punctuation">:</span> <span class="token string">\'Identifier\'</span><span class="token punctuation">,</span>\n  name<span class="token punctuation">:</span> <span class="token string">\'foo\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',i(Ui,ol),i(Ui,pl),i(pl,cl),i(pl,rl),i(rl,il),i(pl,ll),i(Ui,ul),i(Ui,kl),kl.innerHTML='<code class="language-js"><span class="token keyword">const</span> newNode <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">identifier</span><span class="token punctuation">(</span><span class="token string">\'foo\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> newNode2 <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">functionDeclaration</span><span class="token punctuation">(</span>\n  <span class="token string">\'bar\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span>t<span class="token punctuation">.</span><span class="token function">identifier</span><span class="token punctuation">(</span><span class="token string">\'foo\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span>\n    t<span class="token punctuation">.</span><span class="token function">expressionStatement</span><span class="token punctuation">(</span>\n      t<span class="token punctuation">.</span><span class="token function">callExpression</span><span class="token punctuation">(</span>\n        t<span class="token punctuation">.</span><span class="token function">memberExpression</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">identifier</span><span class="token punctuation">(</span><span class="token string">\'console\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">identifier</span><span class="token punctuation">(</span><span class="token string">\'log\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">[</span>t<span class="token punctuation">.</span><span class="token function">identifier</span><span class="token punctuation">(</span><span class="token string">\'foo\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    t<span class="token punctuation">.</span><span class="token function">returnStatement</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">identifier</span><span class="token punctuation">(</span><span class="token string">\'foo\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code>',i(Ui,hl),i(Ui,fl),i(fl,dl),i(Ui,ml),i(Ui,gl),i(gl,vl),i(gl,yl),i(yl,wl),i(gl,El),i(gl,bl),i(bl,Tl),i(gl,Al),i(Ui,Sl),i(Ui,xl),xl.innerHTML='<code class="language-js"><span class="token keyword">const</span> newNode2 <span class="token operator">=</span> babelParser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">\n  function bar(foo) &#123;\n    console.log(foo);\n    return foo;\n  &#125;\n</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>program<span class="token punctuation">.</span>body<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> newNode3 <span class="token operator">=</span> cssTree<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>\n  <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">\n  .foo &#123;\n    color: red;\n  &#125;\n</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#123;</span> context<span class="token punctuation">:</span> <span class="token string">\'rule\'</span> <span class="token punctuation">&#125;</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code>',i(Ui,jl),i(Ui,Pl),i(Pl,Il),i(Pl,Ll),i(Ll,Ml),i(Pl,Cl),i(Pl,Nl),i(Nl,$l),i(Pl,Ol),i(Ui,Hl),i(Ui,Rl),Rl.innerHTML='<code class="language-js"><span class="token keyword">const</span> newNode4 <span class="token operator">=</span> template<span class="token punctuation">.</span>statement<span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">\n  console.log(foo);\n</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span>\n\n<span class="token comment">// placeholder can be an AST node or string</span>\n<span class="token keyword">const</span> newNode5 <span class="token operator">=</span> template<span class="token punctuation">.</span>statement<span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">\n  function bar(foo) &#123;\n    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>newNode4<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">\n    alert("</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token string">\'hello world\'</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">")\n    return foo;\n  &#125;\n</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span></code>',l(n,Dl,a),l(n,Bl,a),i(Bl,Fl),i(Fl,_l),i(_l,zl),i(Bl,Jl),i(Bl,Ul),i(Ul,Wl),i(Bl,Gl),i(Bl,Yl),i(Yl,ql),i(ql,Kl),i(Yl,Vl),i(Yl,Ql),i(Ql,Zl),i(Yl,Xl),i(Yl,nu),i(nu,au),i(Yl,su),i(Yl,tu),i(tu,eu),l(n,ou,a),l(n,pu,a),i(pu,cu),i(cu,ru),i(ru,iu),i(pu,lu),i(pu,uu),i(uu,ku),i(ku,hu),i(uu,fu),i(uu,du),i(du,mu),i(uu,gu),i(pu,vu),i(pu,yu),i(yu,wu),i(wu,Eu),i(Eu,bu),i(yu,Tu),i(yu,Au),i(Au,Su),i(Su,xu),i(yu,ju),i(yu,Pu),i(Pu,Iu),i(Iu,Lu),i(yu,Mu),i(yu,Cu),i(Cu,Nu),i(Nu,$u),i(yu,Ou),i(yu,Hu),i(Hu,Ru),i(Ru,Du),i(yu,Bu),i(yu,Fu),i(Fu,_u),i(_u,zu)},p:n,d(n){n&&u(s),n&&u(Y),n&&u(q),n&&u(on),n&&u(pn),n&&u(rn),n&&u(ln),n&&u($n),n&&u(On),n&&u(fe),n&&u(de),n&&u(Qo),n&&u(Zo),n&&u(dp),n&&u(mp),n&&u(Op),n&&u(Hp),n&&u(Vp),n&&u(Qp),n&&u(si),n&&u(ti),n&&u(Ji),n&&u(Ui),n&&u(Dl),n&&u(Bl),n&&u(ou),n&&u(pu)}}}function fn(n){let s,t;const e=[dn];let o={$$slots:{default:[hn]},$$scope:{ctx:n}};for(let n=0;n<e.length;n+=1)o=a(o,e[n]);return s=new kn({props:o}),{c(){U(s.$$.fragment)},l(n){W(s.$$.fragment,n)},m(n,a){G(s,n,a),t=!0},p(n,[a]){const t=0&a?function(n,a){const s={},t={},e={$$scope:1};let o=n.length;for(;o--;){const p=n[o],c=a[o];if(c){for(const n in p)n in c||(t[n]=1);for(const n in c)e[n]||(s[n]=c[n],e[n]=1);n[o]=c}else for(const n in p)e[n]=1}for(const n in t)n in s||(s[n]=void 0);return s}(e,[(o=dn,"object"==typeof o&&null!==o?o:{})]):{};var o;1&a&&(t.$$scope={dirty:a,ctx:n}),s.$set(t)},i(n){t||(z(s.$$.fragment,n),t=!0)},o(n){J(s.$$.fragment,n),t=!1},d(n){Y(s,n)}}}const dn={title:"Manipulating AST with JavaScript",date:"2019-11-22T08:00:00Z",description:"Manipulating AST is not that hard anyway",tags:["JavaScript","ast","transform","depth-first-search","dfs"],series:"AST",slug:"manipulating-ast-with-javascript",type:"blog"};class mn extends V{constructor(n){super(),K(this,n,null,fn,p,{})}}setTimeout(()=>{new mn({target:document.querySelector("#app"),hydrate:!0});if(document.querySelector(".twitter-tweet")){const n=document.createElement("script");n.async=!0,n.src="https://platform.twitter.com/widgets.js",n.charset="utf-8",document.body.appendChild(n)}},3e3);
