/* generated by Svelte v3.24.0 */
import {
	SvelteComponent,
	add_flush_callback,
	append,
	attr,
	bind,
	binding_callbacks,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	empty,
	init,
	insert,
	listen,
	mount_component,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from "/svelte/internal.js";

import Folder from "/components/Folder.js";

function add_css() {
	var style = element("style");
	style.id = "svelte-1dp3jor-style";
	style.textContent = "div.svelte-1dp3jor{margin-top:8px;cursor:pointer}";
	append(document.head, style);
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

// (13:0) {#each examples as example}
function create_each_block(ctx) {
	let div;
	let t0_value = /*example*/ ctx[6].code + "";
	let t0;
	let t1;
	let mounted;
	let dispose;

	function click_handler(...args) {
		return /*click_handler*/ ctx[4](/*example*/ ctx[6], ...args);
	}

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			attr(div, "class", "svelte-1dp3jor");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, t1);

			if (!mounted) {
				dispose = listen(div, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*examples*/ 2 && t0_value !== (t0_value = /*example*/ ctx[6].code + "")) set_data(t0, t0_value);
		},
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let folder_1;
	let updating_highlightedPath;
	let t;
	let each_1_anchor;
	let current;

	function folder_1_highlightedPath_binding(value) {
		/*folder_1_highlightedPath_binding*/ ctx[3].call(null, value);
	}

	let folder_1_props = { folder: /*folder*/ ctx[0] };

	if (/*highlightedPath*/ ctx[2] !== void 0) {
		folder_1_props.highlightedPath = /*highlightedPath*/ ctx[2];
	}

	folder_1 = new Folder({ props: folder_1_props });
	binding_callbacks.push(() => bind(folder_1, "highlightedPath", folder_1_highlightedPath_binding));
	let each_value = /*examples*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			create_component(folder_1.$$.fragment);
			t = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			mount_component(folder_1, target, anchor);
			insert(target, t, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const folder_1_changes = {};
			if (dirty & /*folder*/ 1) folder_1_changes.folder = /*folder*/ ctx[0];

			if (!updating_highlightedPath && dirty & /*highlightedPath*/ 4) {
				updating_highlightedPath = true;
				folder_1_changes.highlightedPath = /*highlightedPath*/ ctx[2];
				add_flush_callback(() => updating_highlightedPath = false);
			}

			folder_1.$set(folder_1_changes);

			if (dirty & /*highlightedPath, examples*/ 6) {
				each_value = /*examples*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i(local) {
			if (current) return;
			transition_in(folder_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(folder_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(folder_1, detaching);
			if (detaching) detach(t);
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { folder = [] } = $$props;
	let { examples = [] } = $$props;
	let highlightedPath;
	let step = -1;

	function folder_1_highlightedPath_binding(value) {
		highlightedPath = value;
		$$invalidate(2, highlightedPath);
	}

	const click_handler = example => $$invalidate(2, highlightedPath = example.target);

	$$self.$set = $$props => {
		if ("folder" in $$props) $$invalidate(0, folder = $$props.folder);
		if ("examples" in $$props) $$invalidate(1, examples = $$props.examples);
	};

	return [
		folder,
		examples,
		highlightedPath,
		folder_1_highlightedPath_binding,
		click_handler
	];
}

class ResolveExample extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-1dp3jor-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, { folder: 0, examples: 1 });
	}
}

export default ResolveExample;