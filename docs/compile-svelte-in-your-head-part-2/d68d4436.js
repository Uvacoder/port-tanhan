function a(){}function n(a,n){for(const s in n)a[s]=n[s];return a}function s(a){return a()}function t(){return Object.create(null)}function e(a){a.forEach(s)}function o(a){return"function"==typeof a}function c(a,n){return a!=a?n==n:a!==n||a&&"object"==typeof a||"function"==typeof a}function p(a,s,t,e){return a[1]&&e?n(t.ctx.slice(),a[1](e(s))):t.ctx}function r(a,n,s,t,e,o,c){const r=function(a,n,s,t){if(a[2]&&t){const e=a[2](t(s));if(void 0===n.dirty)return e;if("object"==typeof e){const a=[],s=Math.max(n.dirty.length,e.length);for(let t=0;t<s;t+=1)a[t]=n.dirty[t]|e[t];return a}return n.dirty|e}return n.dirty}(n,t,e,o);if(r){const e=p(n,s,t,c);a.p(e,r)}}function i(a,n){a.appendChild(n)}function l(a,n,s){a.insertBefore(n,s||null)}function u(a){a.parentNode.removeChild(a)}function h(a,n){for(let s=0;s<a.length;s+=1)a[s]&&a[s].d(n)}function d(a){return document.createElement(a)}function f(a){return document.createElementNS("http://www.w3.org/2000/svg",a)}function k(a){return document.createTextNode(a)}function v(){return k(" ")}function m(){return k("")}function E(a,n,s){null==s?a.removeAttribute(n):a.getAttribute(n)!==s&&a.setAttribute(n,s)}function g(a){return Array.from(a.childNodes)}function b(a,n,s,t){for(let t=0;t<a.length;t+=1){const e=a[t];if(e.nodeName===n){let n=0;const o=[];for(;n<e.attributes.length;){const a=e.attributes[n++];s[a.name]||o.push(a.name)}for(let a=0;a<o.length;a++)e.removeAttribute(o[a]);return a.splice(t,1)[0]}}return t?f(n):d(n)}function $(a,n){for(let s=0;s<a.length;s+=1){const t=a[s];if(3===t.nodeType)return t.data=""+n,a.splice(s,1)[0]}return k(n)}function y(a){return $(a," ")}function w(a,n){n=""+n,a.wholeText!==n&&(a.data=n)}function O(a,n){a.value=null==n?"":n}class S{constructor(a=null){this.a=a,this.e=this.n=null}m(a,n,s=null){this.e||(this.e=d(n.nodeName),this.t=n,this.h(a)),this.i(s)}h(a){this.e.innerHTML=a,this.n=Array.from(this.e.childNodes)}i(a){for(let n=0;n<this.n.length;n+=1)l(this.t,this.n[n],a)}p(a){this.d(),this.h(a),this.i(this.a)}d(){this.n.forEach(u)}}let T;function L(a){T=a}function N(a){(function(){if(!T)throw new Error("Function called outside component initialization");return T})().$$.on_mount.push(a)}const P=[],x=[],C=[],D=[],A=Promise.resolve();let I=!1;function j(a){C.push(a)}let R=!1;const M=new Set;function H(){if(!R){R=!0;do{for(let a=0;a<P.length;a+=1){const n=P[a];L(n),_(n.$$)}for(P.length=0;x.length;)x.pop()();for(let a=0;a<C.length;a+=1){const n=C[a];M.has(n)||(M.add(n),n())}C.length=0}while(P.length);for(;D.length;)D.pop()();I=!1,R=!1,M.clear()}}function _(a){if(null!==a.fragment){a.update(),e(a.before_update);const n=a.dirty;a.dirty=[-1],a.fragment&&a.fragment.p(a.ctx,n),a.after_update.forEach(j)}}const U=new Set;function q(a,n){a&&a.i&&(U.delete(a),a.i(n))}function G(a,n,s,t){if(a&&a.o){if(U.has(a))return;U.add(a),(void 0).c.push(()=>{U.delete(a),t&&(s&&a.d(1),t())}),a.o(n)}}function B(a){a&&a.c()}function F(a,n){a&&a.l(n)}function J(a,n,t){const{fragment:c,on_mount:p,on_destroy:r,after_update:i}=a.$$;c&&c.m(n,t),j(()=>{const n=p.map(s).filter(o);r?r.push(...n):e(n),a.$$.on_mount=[]}),i.forEach(j)}function z(a,n){const s=a.$$;null!==s.fragment&&(e(s.on_destroy),s.fragment&&s.fragment.d(n),s.on_destroy=s.fragment=null,s.ctx=[])}function W(a,n){-1===a.$$.dirty[0]&&(P.push(a),I||(I=!0,A.then(H)),a.$$.dirty.fill(0)),a.$$.dirty[n/31|0]|=1<<n%31}function Y(n,s,o,c,p,r,i=[-1]){const l=T;L(n);const h=s.props||{},d=n.$$={fragment:null,ctx:null,props:r,update:a,not_equal:p,bound:t(),on_mount:[],on_destroy:[],before_update:[],after_update:[],context:new Map(l?l.$$.context:[]),callbacks:t(),dirty:i};let f=!1;if(d.ctx=o?o(n,h,(a,s,...t)=>{const e=t.length?t[0]:s;return d.ctx&&p(d.ctx[a],d.ctx[a]=e)&&(d.bound[a]&&d.bound[a](e),f&&W(n,a)),s}):[],d.update(),f=!0,e(d.before_update),d.fragment=!!c&&c(d.ctx),s.target){if(s.hydrate){const a=g(s.target);d.fragment&&d.fragment.l(a),a.forEach(u)}else d.fragment&&d.fragment.c();s.intro&&q(n.$$.fragment),J(n,s.target,s.anchor),H()}L(l)}class V{$destroy(){z(this,1),this.$destroy=a}$on(a,n){const s=this.$$.callbacks[a]||(this.$$.callbacks[a]=[]);return s.push(n),()=>{const a=s.indexOf(n);-1!==a&&s.splice(a,1)}}$set(){}}function K(n){let s,t,e,o,c,p,r,h,m,w,O,S,T,L,N,P,x,C,D,A,I,j,R,M,H,_,U,q,G,B,F,J,z,W,Y;return{c(){s=d("header"),t=d("nav"),e=d("ul"),o=d("li"),c=d("a"),p=k("Tan Li Hau"),r=v(),h=d("li"),m=d("a"),w=k("About"),O=v(),S=d("li"),T=d("a"),L=k("Writings"),N=v(),P=d("li"),x=d("a"),C=k("Talks"),D=v(),A=d("li"),I=d("a"),j=k("Notes"),R=v(),M=d("li"),H=d("a"),_=k("Newsletter"),U=v(),q=d("li"),G=d("a"),B=f("svg"),F=f("path"),J=v(),z=d("a"),W=f("svg"),Y=f("path"),this.h()},l(a){s=b(a,"HEADER",{class:!0});var n=g(s);t=b(n,"NAV",{});var i=g(t);e=b(i,"UL",{class:!0});var l=g(e);o=b(l,"LI",{class:!0});var d=g(o);c=b(d,"A",{href:!0,class:!0});var f=g(c);p=$(f,"Tan Li Hau"),f.forEach(u),d.forEach(u),r=y(l),h=b(l,"LI",{class:!0});var k=g(h);m=b(k,"A",{href:!0,class:!0});var v=g(m);w=$(v,"About"),v.forEach(u),k.forEach(u),O=y(l),S=b(l,"LI",{class:!0});var E=g(S);T=b(E,"A",{href:!0,class:!0});var V=g(T);L=$(V,"Writings"),V.forEach(u),E.forEach(u),N=y(l),P=b(l,"LI",{class:!0});var K=g(P);x=b(K,"A",{href:!0,class:!0});var Z=g(x);C=$(Z,"Talks"),Z.forEach(u),K.forEach(u),D=y(l),A=b(l,"LI",{class:!0});var Q=g(A);I=b(Q,"A",{href:!0,class:!0});var X=g(I);j=$(X,"Notes"),X.forEach(u),Q.forEach(u),R=y(l),M=b(l,"LI",{class:!0});var aa=g(M);H=b(aa,"A",{href:!0,class:!0});var na=g(H);_=$(na,"Newsletter"),na.forEach(u),aa.forEach(u),U=y(l),q=b(l,"LI",{class:!0});var sa=g(q);G=b(sa,"A",{"aria-label":!0,href:!0,class:!0});var ta=g(G);B=b(ta,"svg",{viewBox:!0,width:!0,height:!0,class:!0},1);var ea=g(B);F=b(ea,"path",{d:!0},1),g(F).forEach(u),ea.forEach(u),ta.forEach(u),J=y(sa),z=b(sa,"A",{"aria-label":!0,href:!0,class:!0});var oa=g(z);W=b(oa,"svg",{viewBox:!0,width:!0,height:!0,class:!0},1);var ca=g(W);Y=b(ca,"path",{d:!0},1),g(Y).forEach(u),ca.forEach(u),oa.forEach(u),sa.forEach(u),l.forEach(u),i.forEach(u),n.forEach(u),this.h()},h(){E(c,"href","/"),E(c,"class","svelte-f3e4uo"),E(o,"class","svelte-f3e4uo"),E(m,"href","/about"),E(m,"class","svelte-f3e4uo"),E(h,"class","svelte-f3e4uo"),E(T,"href","/blogs"),E(T,"class","svelte-f3e4uo"),E(S,"class","svelte-f3e4uo"),E(x,"href","/talks"),E(x,"class","svelte-f3e4uo"),E(P,"class","svelte-f3e4uo"),E(I,"href","/notes"),E(I,"class","svelte-f3e4uo"),E(A,"class","svelte-f3e4uo"),E(H,"href","/newsletter"),E(H,"class","svelte-f3e4uo"),E(M,"class","svelte-f3e4uo"),E(F,"d","M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66\n    10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5\n    4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"),E(B,"viewBox","0 0 24 24"),E(B,"width","1em"),E(B,"height","1em"),E(B,"class","svelte-f3e4uo"),E(G,"aria-label","Twitter account"),E(G,"href","https://twitter.com/lihautan"),E(G,"class","svelte-f3e4uo"),E(Y,"d","M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0\n    0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07\n    5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65\n    5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42\n    3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"),E(W,"viewBox","0 0 24 24"),E(W,"width","1em"),E(W,"height","1em"),E(W,"class","svelte-f3e4uo"),E(z,"aria-label","Github account"),E(z,"href","https://github.com/tanhauhau"),E(z,"class","svelte-f3e4uo"),E(q,"class","social svelte-f3e4uo"),E(e,"class","svelte-f3e4uo"),E(s,"class","svelte-f3e4uo")},m(a,n){l(a,s,n),i(s,t),i(t,e),i(e,o),i(o,c),i(c,p),i(e,r),i(e,h),i(h,m),i(m,w),i(e,O),i(e,S),i(S,T),i(T,L),i(e,N),i(e,P),i(P,x),i(x,C),i(e,D),i(e,A),i(A,I),i(I,j),i(e,R),i(e,M),i(M,H),i(H,_),i(e,U),i(e,q),i(q,G),i(G,B),i(B,F),i(q,J),i(q,z),i(z,W),i(W,Y)},p:a,i:a,o:a,d(a){a&&u(s)}}}class Z extends V{constructor(a){super(),Y(this,a,null,K,c,{})}}function Q(n){let s,t,e,o,c,p,r,h,f,m,w,S,T,L,N,P,x,C,D,A;return{c(){s=d("div"),t=d("h1"),e=k("Subscribe to my newsletter"),o=v(),c=d("h2"),p=k("Get the latest blog posts and project updates delivered right to your inbox"),r=v(),h=d("form"),f=d("div"),m=d("input"),w=v(),S=d("input"),L=v(),N=d("input"),P=v(),x=d("p"),C=k("Powered by Buttondown."),this.h()},l(a){s=b(a,"DIV",{class:!0});var n=g(s);t=b(n,"H1",{});var i=g(t);e=$(i,"Subscribe to my newsletter"),i.forEach(u),o=y(n),c=b(n,"H2",{class:!0});var l=g(c);p=$(l,"Get the latest blog posts and project updates delivered right to your inbox"),l.forEach(u),r=y(n),h=b(n,"FORM",{action:!0,method:!0,target:!0,onsubmit:!0,class:!0});var d=g(h);f=b(d,"DIV",{class:!0});var k=g(f);m=b(k,"INPUT",{type:!0,name:!0,id:!0,"aria-label":!0,placeholder:!0,class:!0}),w=y(k),S=b(k,"INPUT",{type:!0,value:!0,disabled:!0,class:!0}),k.forEach(u),L=y(d),N=b(d,"INPUT",{type:!0,value:!0,name:!0,class:!0}),P=y(d),x=b(d,"P",{class:!0});var v=g(x);C=$(v,"Powered by Buttondown."),v.forEach(u),d.forEach(u),n.forEach(u),this.h()},h(){E(c,"class","svelte-1k1s1co"),E(m,"type","email"),E(m,"name","email"),E(m,"id","bd-email"),E(m,"aria-label","email address"),E(m,"placeholder","youremail@example.com"),E(m,"class","svelte-1k1s1co"),E(S,"type","submit"),S.value="Subscribe",S.disabled=T=!n[0],E(S,"class","svelte-1k1s1co"),E(f,"class","form-item svelte-1k1s1co"),E(N,"type","hidden"),N.value="1",E(N,"name","embed"),E(N,"class","svelte-1k1s1co"),E(x,"class","svelte-1k1s1co"),E(h,"action","https://buttondown.email/api/emails/embed-subscribe/lihautan"),E(h,"method","post"),E(h,"target","popupwindow"),E(h,"onsubmit","window.open('https://buttondown.email/lihautan', 'popupwindow')"),E(h,"class","embeddable-buttondown-form"),E(s,"class","form svelte-1k1s1co")},m(a,u){var d,k,v,E;l(a,s,u),i(s,t),i(t,e),i(s,o),i(s,c),i(c,p),i(s,r),i(s,h),i(h,f),i(f,m),O(m,n[0]),i(f,w),i(f,S),i(h,L),i(h,N),i(h,P),i(h,x),i(x,C),D||(d=m,k="input",v=n[1],d.addEventListener(k,v,E),A=()=>d.removeEventListener(k,v,E),D=!0)},p(a,[n]){1&n&&m.value!==a[0]&&O(m,a[0]),1&n&&T!==(T=!a[0])&&(S.disabled=T)},i:a,o:a,d(a){a&&u(s),D=!1,A()}}}function X(a,n,s){let t;return[t,function(){t=this.value,s(0,t)}]}class aa extends V{constructor(a){super(),Y(this,a,X,Q,c,{})}}function na(a){return N(()=>(setTimeout(()=>{if(window.innerWidth>1080){const a=document.createElement("script");a.async=!0,a.type="text/javascript",a.src="//cdn.carbonads.com/carbon.js?serve=CE7ITK3E&placement=lihautancom",a.id="_carbonads_js",document.body.appendChild(a)}},5e3),()=>{try{const a=document.getElementById("carbonads");a.parentNode.removeChild(a)}catch(a){}})),[]}class sa extends V{constructor(a){super(),Y(this,a,na,null,c,{})}}var ta="https://lihautan.com/compile-svelte-in-your-head-part-2/assets/hero-twitter-2914f5b9.jpg";function ea(a,n,s){const t=a.slice();return t[6]=n[s],t}function oa(a,n,s){const t=a.slice();return t[6]=n[s],t}function ca(a){let n,s;return{c(){n=d("meta"),this.h()},l(a){n=b(a,"META",{name:!0,content:!0}),this.h()},h(){E(n,"name","keywords"),E(n,"content",s=a[6])},m(a,s){l(a,n,s)},p(a,t){4&t&&s!==(s=a[6])&&E(n,"content",s)},d(a){a&&u(n)}}}function pa(a){let n,s,t=a[6]+"";return{c(){n=d("span"),s=k(t),this.h()},l(a){n=b(a,"SPAN",{class:!0});var e=g(n);s=$(e,t),e.forEach(u),this.h()},h(){E(n,"class","svelte-9tqnza")},m(a,t){l(a,n,t),i(n,s)},p(a,n){4&n&&t!==(t=a[6]+"")&&w(s,t)},d(a){a&&u(n)}}}function ra(a){let n,s,t,e,o,c,f,O,T,L,N,P,x,C,D,A,I,j,R,M,H,_,U,W,Y,V,K,Q,X,na,ra,ia,la,ua,ha,da,fa,ka,va,ma=`<script type="application/ld+json">${JSON.stringify({"@context":"https://schema.org","@type":"Article",author:a[3],copyrightHolder:a[3],copyrightYear:"2020",creator:a[3],publisher:a[3],description:a[1],headline:a[0],name:a[0],inLanguage:"en"})}<\/script>`,Ea=`<script type="application/ld+json">${JSON.stringify({"@context":"https://schema.org","@type":"BreadcrumbList",description:"Breadcrumbs list",name:"Breadcrumbs",itemListElement:[{"@type":"ListItem",item:{"@id":"https://lihautan.com",name:"Homepage"},position:1},{"@type":"ListItem",item:{"@id":"https%3A%2F%2Flihautan.com%2Fcompile-svelte-in-your-head-part-2",name:a[0]},position:2}]})}<\/script>`;document.title=n=a[0]+" | Tan Li Hau";let ga=a[2],ba=[];for(let n=0;n<ga.length;n+=1)ba[n]=ca(oa(a,ga,n));U=new Z({});let $a=a[2],ya=[];for(let n=0;n<$a.length;n+=1)ya[n]=pa(ea(a,$a,n));const wa=a[5].default,Oa=function(a,n,s,t){if(a){const e=p(a,n,s,t);return a[0](e)}}(wa,a,a[4],null);return la=new aa({}),ha=new sa({}),{c(){s=d("meta"),t=d("meta"),e=d("meta"),o=d("meta"),c=d("meta"),f=d("meta"),O=d("meta"),T=d("meta"),L=d("meta"),N=d("meta"),P=d("meta");for(let a=0;a<ba.length;a+=1)ba[a].c();x=d("meta"),C=d("meta"),A=m(),j=m(),R=v(),M=d("a"),H=k("Skip to content"),_=v(),B(U.$$.fragment),W=v(),Y=d("main"),V=d("h1"),K=k(a[0]),Q=v();for(let a=0;a<ya.length;a+=1)ya[a].c();X=v(),na=d("article"),Oa&&Oa.c(),ra=v(),ia=d("footer"),B(la.$$.fragment),ua=v(),B(ha.$$.fragment),da=v(),ka=m(),this.h()},l(n){const p=function(a,n=document.body){return Array.from(n.querySelectorAll(a))}('[data-svelte="svelte-n0q11s"]',document.head);s=b(p,"META",{name:!0,content:!0}),t=b(p,"META",{name:!0,content:!0}),e=b(p,"META",{name:!0,content:!0}),o=b(p,"META",{name:!0,content:!0}),c=b(p,"META",{name:!0,content:!0}),f=b(p,"META",{name:!0,content:!0}),O=b(p,"META",{name:!0,content:!0}),T=b(p,"META",{name:!0,content:!0}),L=b(p,"META",{name:!0,content:!0}),N=b(p,"META",{name:!0,content:!0}),P=b(p,"META",{name:!0,content:!0});for(let a=0;a<ba.length;a+=1)ba[a].l(p);x=b(p,"META",{itemprop:!0,content:!0}),C=b(p,"META",{itemprop:!0,content:!0}),A=m(),j=m(),p.forEach(u),R=y(n),M=b(n,"A",{href:!0,class:!0});var r=g(M);H=$(r,"Skip to content"),r.forEach(u),_=y(n),F(U.$$.fragment,n),W=y(n),Y=b(n,"MAIN",{id:!0,class:!0});var i=g(Y);V=b(i,"H1",{});var l=g(V);K=$(l,a[0]),l.forEach(u),Q=y(i);for(let a=0;a<ya.length;a+=1)ya[a].l(i);X=y(i),na=b(i,"ARTICLE",{});var h=g(na);Oa&&Oa.l(h),h.forEach(u),i.forEach(u),ra=y(n),ia=b(n,"FOOTER",{class:!0});var d=g(ia);F(la.$$.fragment,d),ua=y(d),F(ha.$$.fragment,d),d.forEach(u),da=y(n),ka=m(),this.h()},h(){E(s,"name","description"),E(s,"content",a[1]),E(t,"name","image"),E(t,"content",ta),E(e,"name","og:image"),E(e,"content",ta),E(o,"name","og:title"),E(o,"content",a[0]),E(c,"name","og:description"),E(c,"content",a[1]),E(f,"name","og:type"),E(f,"content","website"),E(O,"name","twitter:card"),E(O,"content","summary_large_image"),E(T,"name","twitter:creator"),E(T,"content","@lihautan"),E(L,"name","twitter:title"),E(L,"content",a[0]),E(N,"name","twitter:description"),E(N,"content",a[1]),E(P,"name","twitter:image"),E(P,"content",ta),E(x,"itemprop","url"),E(x,"content","https%3A%2F%2Flihautan.com%2Fcompile-svelte-in-your-head-part-2"),E(C,"itemprop","image"),E(C,"content",ta),D=new S(A),I=new S(j),E(M,"href","#content"),E(M,"class","skip svelte-9tqnza"),E(Y,"id","content"),E(Y,"class","blog svelte-9tqnza"),E(ia,"class","svelte-9tqnza"),fa=new S(ka)},m(a,n){i(document.head,s),i(document.head,t),i(document.head,e),i(document.head,o),i(document.head,c),i(document.head,f),i(document.head,O),i(document.head,T),i(document.head,L),i(document.head,N),i(document.head,P);for(let a=0;a<ba.length;a+=1)ba[a].m(document.head,null);i(document.head,x),i(document.head,C),D.m(ma,document.head),i(document.head,A),I.m(Ea,document.head),i(document.head,j),l(a,R,n),l(a,M,n),i(M,H),l(a,_,n),J(U,a,n),l(a,W,n),l(a,Y,n),i(Y,V),i(V,K),i(Y,Q);for(let a=0;a<ya.length;a+=1)ya[a].m(Y,null);i(Y,X),i(Y,na),Oa&&Oa.m(na,null),l(a,ra,n),l(a,ia,n),J(la,ia,null),i(ia,ua),J(ha,ia,null),l(a,da,n),fa.m('<script async defer src="https://platform.twitter.com/widgets.js" charset="utf-8"><\/script>',a,n),l(a,ka,n),va=!0},p(a,[t]){if((!va||1&t)&&n!==(n=a[0]+" | Tan Li Hau")&&(document.title=n),(!va||2&t)&&E(s,"content",a[1]),(!va||1&t)&&E(o,"content",a[0]),(!va||2&t)&&E(c,"content",a[1]),(!va||1&t)&&E(L,"content",a[0]),(!va||2&t)&&E(N,"content",a[1]),4&t){let n;for(ga=a[2],n=0;n<ga.length;n+=1){const s=oa(a,ga,n);ba[n]?ba[n].p(s,t):(ba[n]=ca(s),ba[n].c(),ba[n].m(x.parentNode,x))}for(;n<ba.length;n+=1)ba[n].d(1);ba.length=ga.length}if((!va||3&t)&&ma!==(ma=`<script type="application/ld+json">${JSON.stringify({"@context":"https://schema.org","@type":"Article",author:a[3],copyrightHolder:a[3],copyrightYear:"2020",creator:a[3],publisher:a[3],description:a[1],headline:a[0],name:a[0],inLanguage:"en"})}<\/script>`)&&D.p(ma),(!va||1&t)&&Ea!==(Ea=`<script type="application/ld+json">${JSON.stringify({"@context":"https://schema.org","@type":"BreadcrumbList",description:"Breadcrumbs list",name:"Breadcrumbs",itemListElement:[{"@type":"ListItem",item:{"@id":"https://lihautan.com",name:"Homepage"},position:1},{"@type":"ListItem",item:{"@id":"https%3A%2F%2Flihautan.com%2Fcompile-svelte-in-your-head-part-2",name:a[0]},position:2}]})}<\/script>`)&&I.p(Ea),(!va||1&t)&&w(K,a[0]),4&t){let n;for($a=a[2],n=0;n<$a.length;n+=1){const s=ea(a,$a,n);ya[n]?ya[n].p(s,t):(ya[n]=pa(s),ya[n].c(),ya[n].m(Y,X))}for(;n<ya.length;n+=1)ya[n].d(1);ya.length=$a.length}Oa&&Oa.p&&16&t&&r(Oa,wa,a,a[4],t,null,null)},i(a){va||(q(U.$$.fragment,a),q(Oa,a),q(la.$$.fragment,a),q(ha.$$.fragment,a),va=!0)},o(a){G(U.$$.fragment,a),G(Oa,a),G(la.$$.fragment,a),G(ha.$$.fragment,a),va=!1},d(a){u(s),u(t),u(e),u(o),u(c),u(f),u(O),u(T),u(L),u(N),u(P),h(ba,a),u(x),u(C),u(A),a&&D.d(),u(j),a&&I.d(),a&&u(R),a&&u(M),a&&u(_),z(U,a),a&&u(W),a&&u(Y),h(ya,a),Oa&&Oa.d(a),a&&u(ra),a&&u(ia),z(la),z(ha),a&&u(da),a&&u(ka),a&&fa.d()}}}function ia(a,n,s){let{title:t=""}=n,{description:e=""}=n,{tags:o=[]}=n;const c={"@type":"Person",name:"Tan Li Hau"};let{$$slots:p={},$$scope:r}=n;return a.$set=a=>{"title"in a&&s(0,t=a.title),"description"in a&&s(1,e=a.description),"tags"in a&&s(2,o=a.tags),"$$scope"in a&&s(4,r=a.$$scope)},[t,e,o,c,r,p]}class la extends V{constructor(a){super(),Y(this,a,ia,ra,c,{title:0,description:1,tags:2})}}function ua(n){let s,t,e,o,c,p,r,h,f,m,w,O,S,T,L,N,P,x,C,D,A,I,j,R,M,H,_,U,q,G,B,F,J,z,W,Y,V,K,Z,Q,X,aa,na,sa,ta,ea,oa,ca,pa,ra,ia,la,ua,ha,da,fa,ka,va,ma,Ea,ga,ba,$a,ya,wa,Oa,Sa,Ta,La,Na,Pa,xa,Ca,Da,Aa,Ia,ja,Ra,Ma,Ha,_a,Ua,qa,Ga,Ba,Fa,Ja,za,Wa,Ya,Va,Ka,Za,Qa,Xa,an,nn,sn,tn,en,on,cn,pn,rn,ln,un,hn,dn,fn,kn,vn,mn,En,gn,bn,$n,yn,wn,On,Sn,Tn,Ln,Nn,Pn,xn,Cn,Dn,An,In,jn,Rn,Mn,Hn,_n,Un,qn,Gn,Bn,Fn,Jn,zn,Wn,Yn,Vn,Kn,Zn,Qn,Xn,as,ns,ss,ts,es,os,cs,ps,rs,is,ls,us,hs,ds,fs,ks,vs,ms,Es,gs,bs,$s,ys,ws,Os,Ss,Ts,Ls,Ns,Ps,xs,Cs,Ds,As,Is,js,Rs,Ms,Hs,_s,Us,qs,Gs,Bs,Fs,Js,zs,Ws,Ys,Vs,Ks,Zs,Qs,Xs,at,nt,st,tt,et,ot,ct,pt,rt,it,lt,ut,ht,dt,ft,kt,vt,mt,Et,gt,bt,$t,yt,wt,Ot,St,Tt,Lt,Nt,Pt,xt,Ct,Dt,At,It,jt,Rt,Mt,Ht,_t,Ut,qt,Gt,Bt,Ft,Jt,zt,Wt,Yt,Vt,Kt,Zt,Qt,Xt,ae,ne,se,te,ee,oe,ce,pe,re,ie,le,ue,he,de,fe,ke,ve,me,Ee,ge,be,$e,ye,we,Oe,Se,Te,Le,Ne,Pe,xe,Ce,De,Ae,Ie,je,Re,Me,He,_e,Ue,qe,Ge,Be,Fe,Je,ze,We,Ye,Ve,Ke,Ze,Qe,Xe,ao,no,so,to,eo,oo,co,po,ro,io,lo,uo,ho,fo,ko,vo,mo,Eo,go,bo,$o,yo,wo,Oo,So,To,Lo,No,Po,xo,Co,Do,Ao,Io,jo,Ro,Mo,Ho,_o,Uo,qo,Go,Bo,Fo,Jo,zo,Wo,Yo,Vo,Ko,Zo,Qo,Xo,ac,nc,sc,tc,ec,oc,cc,pc,rc,ic,lc,uc,hc,dc,fc,kc,vc,mc,Ec,gc,bc,$c,yc,wc,Oc,Sc,Tc,Lc,Nc,Pc,xc,Cc,Dc,Ac,Ic,jc,Rc,Mc,Hc,_c,Uc,qc,Gc,Bc,Fc,Jc,zc,Wc,Yc,Vc,Kc,Zc,Qc,Xc,ap,np,sp,tp,ep,op,cp,pp,rp,ip,lp,up,hp,dp,fp,kp,vp,mp,Ep,gp,bp,$p,yp,wp,Op,Sp,Tp,Lp,Np,Pp,xp,Cp,Dp,Ap,Ip,jp,Rp,Mp,Hp,_p,Up,qp,Gp,Bp,Fp,Jp,zp,Wp,Yp,Vp,Kp,Zp,Qp,Xp,ar,nr,sr,tr,er,or,cr,pr,rr,ir,lr,ur,hr,dr,fr,kr,vr,mr,Er,gr,br,$r,yr,wr,Or,Sr,Tr,Lr,Nr,Pr,xr,Cr,Dr,Ar,Ir,jr,Rr,Mr,Hr,_r,Ur,qr,Gr,Br,Fr,Jr,zr,Wr,Yr,Vr,Kr,Zr,Qr,Xr,ai,ni,si,ti,ei,oi,ci,pi,ri,ii,li,ui,hi,di,fi,ki,vi,mi,Ei,gi,bi,$i,yi,wi,Oi,Si,Ti,Li,Ni,Pi,xi,Ci,Di,Ai,Ii,ji,Ri,Mi,Hi,_i,Ui,qi,Gi,Bi,Fi,Ji,zi,Wi,Yi,Vi,Ki,Zi,Qi,Xi,al,nl,sl,tl,el,ol,cl,pl,rl,il,ll,ul,hl,dl,fl,kl,vl,ml,El,gl,bl,$l,yl,wl,Ol,Sl,Tl,Ll,Nl,Pl,xl,Cl,Dl,Al,Il,jl,Rl,Ml,Hl,_l,Ul,ql,Gl,Bl,Fl,Jl,zl,Wl,Yl,Vl,Kl,Zl,Ql,Xl,au,nu,su,tu,eu,ou,cu,pu,ru,iu,lu,uu,hu,du,fu,ku,vu,mu,Eu,gu,bu,$u,yu,wu,Ou,Su,Tu,Lu,Nu,Pu,xu,Cu,Du,Au,Iu,ju,Ru,Mu,Hu,_u,Uu,qu,Gu,Bu,Fu,Ju,zu,Wu,Yu,Vu,Ku,Zu,Qu,Xu,ah,nh,sh,th,eh,oh,ch,ph,rh,ih,lh,uh,hh,dh,fh,kh,vh,mh,Eh,gh,bh,$h,yh,wh,Oh,Sh,Th,Lh,Nh,Ph,xh,Ch,Dh,Ah,Ih,jh,Rh,Mh,Hh,_h,Uh,qh,Gh,Bh,Fh,Jh,zh,Wh,Yh,Vh,Kh,Zh,Qh,Xh,ad,nd,sd,td,ed,od,cd,pd,rd,id,ld,ud,hd,dd,fd,kd,vd,md,Ed,gd,bd,$d,yd,wd,Od,Sd,Td,Ld,Nd,Pd,xd,Cd,Dd,Ad,Id,jd,Rd,Md,Hd,_d,Ud,qd,Gd,Bd,Fd,Jd,zd,Wd,Yd,Vd,Kd,Zd,Qd,Xd,af,nf,sf,tf,ef,of,cf,pf,rf,lf,uf,hf,df,ff,kf,vf,mf,Ef,gf,bf,$f,yf,wf,Of,Sf,Tf,Lf,Nf,Pf,xf,Cf,Df,Af,If,jf,Rf,Mf,Hf,_f,Uf,qf,Gf,Bf,Ff,Jf,zf,Wf,Yf,Vf,Kf,Zf,Qf,Xf,ak,nk,sk,tk,ek,ok,ck,pk,rk,ik,lk,uk,hk,dk,fk,kk,vk,mk,Ek,gk,bk,$k,yk,wk,Ok,Sk,Tk,Lk,Nk,Pk,xk,Ck,Dk,Ak,Ik,jk,Rk,Mk,Hk,_k,Uk,qk,Gk,Bk,Fk,Jk,zk,Wk,Yk,Vk,Kk,Zk,Qk,Xk,av,nv,sv,tv,ev,ov,cv,pv,rv,iv,lv,uv,hv,dv,fv,kv,vv,mv,Ev,gv,bv,$v,yv,wv,Ov,Sv,Tv,Lv,Nv,Pv,xv,Cv,Dv,Av,Iv,jv,Rv,Mv,Hv,_v,Uv,qv,Gv,Bv,Fv,Jv,zv,Wv,Yv,Vv,Kv,Zv,Qv,Xv,am,nm,sm,tm,em,om,cm,pm,rm,im,lm,um,hm,dm,fm,km,vm,mm,Em,gm,bm,$m,ym,wm,Om,Sm,Tm,Lm,Nm,Pm,xm,Cm,Dm,Am,Im,jm,Rm,Mm,Hm,_m,Um,qm,Gm,Bm,Fm,Jm,zm,Wm,Ym,Vm,Km,Zm,Qm,Xm,aE,nE,sE,tE,eE,oE,cE,pE,rE,iE,lE,uE,hE,dE,fE,kE,vE,mE,EE,gE,bE,$E,yE,wE,OE,SE,TE,LE,NE,PE,xE,CE,DE,AE,IE,jE,RE,ME,HE,_E,UE,qE,GE,BE,FE,JE,zE,WE,YE,VE,KE,ZE,QE,XE,ag,ng,sg,tg,eg,og,cg,pg,rg,ig,lg,ug,hg,dg,fg,kg,vg,mg,Eg,gg,bg,$g,yg,wg,Og,Sg,Tg,Lg,Ng,Pg,xg,Cg,Dg,Ag,Ig,jg,Rg,Mg,Hg,_g,Ug,qg,Gg,Bg,Fg,Jg,zg,Wg,Yg,Vg,Kg,Zg,Qg,Xg,ab,nb,sb,tb,eb,ob,cb,pb,rb,ib,lb,ub,hb,db,fb,kb,vb,mb,Eb,gb,bb,$b,yb,wb,Ob,Sb,Tb,Lb,Nb,Pb,xb,Cb,Db,Ab,Ib,jb,Rb,Mb,Hb,_b,Ub,qb,Gb,Bb,Fb,Jb,zb,Wb,Yb,Vb,Kb,Zb,Qb,Xb,a$,n$,s$,t$,e$,o$,c$,p$,r$,i$,l$,u$,h$,d$,f$,k$,v$,m$,E$,g$,b$,$$,y$,w$,O$,S$,T$,L$,N$,P$,x$,C$,D$,A$,I$,j$,R$,M$,H$,_$,U$,q$,G$,B$,F$,J$,z$,W$,Y$,V$,K$,Z$,Q$,X$,ay,ny,sy,ty,ey,oy,cy,py,ry,iy,ly,uy,hy,dy,fy,ky,vy,my,Ey,gy,by,$y,yy,wy,Oy,Sy,Ty,Ly,Ny,Py,xy,Cy,Dy,Ay,Iy,jy,Ry,My,Hy,_y,Uy,qy,Gy,By,Fy,Jy,zy,Wy,Yy,Vy,Ky,Zy,Qy,Xy,aw,nw,sw,tw,ew,ow;return{c(){s=d("section"),t=d("ul"),e=d("li"),o=d("a"),c=k("Pre v3.16.0"),p=d("ul"),r=d("li"),h=d("a"),f=k("\\$\\$.ctx"),m=d("li"),w=d("a"),O=k("\\$\\$.dirty"),S=d("li"),T=d("a"),L=k("\\$\\$invalidate"),N=d("li"),P=d("a"),x=k("schedule_update"),C=d("ul"),D=d("li"),A=d("a"),I=k("tl/dr:"),j=d("li"),R=d("a"),M=k("v3.16.0"),H=d("ul"),_=d("li"),U=d("a"),q=k("Bitmask"),G=d("li"),B=d("a"),F=k("Bitmask in Svelte"),J=d("ul"),z=d("li"),W=d("a"),Y=k("Destructuring  "),V=d("li"),K=d("a"),Z=k("tl/dr:"),Q=d("li"),X=d("a"),aa=k("Reactive Declaration"),na=d("ul"),sa=d("ul"),ta=d("li"),ea=d("a"),oa=k("1. Execution of all reactive declarations and statements are batched"),ca=d("li"),pa=d("a"),ra=k("2. The value of reactive variable outside of reactive declarations and statements may not be up to date"),ia=d("li"),la=d("a"),ua=k("Sorting of reactive declarations and statements"),ha=d("li"),da=d("a"),fa=k("Reactive variable that is not reactive"),ka=d("li"),va=d("a"),ma=k("Summary"),Ea=d("ul"),ga=d("ul"),ba=d("li"),$a=d("a"),ya=k("1. Svelte keeps track of which variables are dirty and batched the DOM updates."),wa=d("li"),Oa=d("a"),Sa=k("2. Using bitmask, Svelte able to generate a more compact compiled code."),Ta=d("li"),La=d("a"),Na=k("3. Reactive declarations and statements are executed in batch, just like DOM updates"),Pa=d("li"),xa=d("a"),Ca=k("Closing Note"),Da=d("li"),Aa=d("a"),Ia=k("Further Resources"),ja=v(),Ra=d("p"),Ma=d("strong"),Ha=k("⬅ ⬅  Previously in "),_a=d("a"),Ua=k("Part 1"),qa=k("."),Ga=v(),Ba=d("p"),Fa=d("a"),Ja=k("Previously"),za=k(", when I mentioned the "),Wa=d("code"),Ya=k("$$invalidate"),Va=k(" function, I explained that the "),Ka=d("code"),Za=k("$$invalidate"),Qa=k(" function works conceptually like the following:"),Xa=v(),an=d("pre"),nn=v(),sn=d("p"),tn=k("but that's not the exact implementation of the "),en=d("code"),on=k("$$invaldiate"),cn=k(" function. So in this article, we are going to look at how "),pn=d("code"),rn=k("$$invalidate"),ln=k(" is implemented in Svelte."),un=v(),hn=d("p"),dn=k("At the point of writing, Svelte is at "),fn=d("a"),kn=k("v3.20.1"),vn=k("."),mn=v(),En=d("section"),gn=d("h2"),bn=d("a"),$n=k("Pre v3.16.0"),yn=v(),wn=d("p"),On=k("There's a big optimisation that changes the underlying implementation of the "),Sn=d("code"),Tn=k("$$invalidate"),Ln=k(" function in "),Nn=d("a"),Pn=k("v3.16.0"),xn=k(", namely in "),Cn=d("a"),Dn=k("#3945"),An=k(". The underlying concept doesn't change, but it'll be much easier to understand about "),In=d("code"),jn=k("$$invalidate"),Rn=k(" prior the change and learn about the optimisation change separately."),Mn=v(),Hn=d("p"),_n=k("Let's explain some of the variables that you are going to see, some of which was introduced in "),Un=d("a"),qn=k("Part 1"),Gn=k(":"),Bn=v(),Fn=d("section"),Jn=d("h3"),zn=d("a"),Wn=k("\\$\\$.ctx"),Yn=v(),Vn=d("p"),Kn=k("There's no official name for it. You can call it "),Zn=d("strong"),Qn=k("context"),Xn=k(" as it is the context which the template is based on to render onto the DOM."),as=v(),ns=d("p"),ss=k("I called it "),ts=d("a"),es=k("instance variables"),os=k(". As it is a JavaScript Object that contains all the variables that you:"),cs=v(),ps=d("ul"),rs=d("li"),is=k("declared in the "),ls=d("code"),us=k("<script>"),hs=k(" tag"),ds=v(),fs=d("li"),ks=k("mutated or reassigned"),vs=v(),ms=d("li"),Es=k("referenced in the template"),gs=v(),bs=d("p"),$s=k("that belongs to a component instance."),ys=v(),ws=d("p"),Os=k("The instance variables themselves can be of a primitive value, object, array or function."),Ss=v(),Ts=d("p"),Ls=k("The "),Ns=d("code"),Ps=k("instance"),xs=k(" function creates and returns the "),Cs=d("code"),Ds=k("ctx"),As=k(" object."),Is=v(),js=d("p"),Rs=k("Functions declared in the "),Ms=d("code"),Hs=k("<script>"),_s=k(" tag will refer to the instance variable that is scoped withn the "),Us=d("code"),qs=k("instance"),Gs=k(" function closure:"),Bs=v(),Fs=d("pre"),Js=v(),zs=d("p"),Ws=d("a"),Ys=k("Svelte REPL"),Vs=v(),Ks=d("pre"),Zs=v(),Qs=d("p"),Xs=k("Whenever a new instance of a component is created, the "),at=d("code"),nt=k("instance"),st=k(" function is called and the "),tt=d("code"),et=k("ctx"),ot=k(" object is created and captured within a new closure scope."),ct=v(),pt=d("section"),rt=d("h3"),it=d("a"),lt=k("\\$\\$.dirty"),ut=v(),ht=d("p"),dt=d("code"),ft=k("$$.dirty"),kt=k(" is a object that is used to track which instance variable had just changed and needs to be updated onto the DOM."),vt=v(),mt=d("p"),Et=k("For example, in the following Svelte component:"),gt=v(),bt=d("pre"),$t=v(),yt=d("p"),wt=d("a"),Ot=k("Svelte REPL"),St=v(),Tt=d("p"),Lt=k("The initial "),Nt=d("code"),Pt=k("$$.dirty"),xt=k(" is "),Ct=d("code"),Dt=k("null"),At=k(" ("),It=d("a"),jt=k("source code"),Rt=k(")."),Mt=v(),Ht=d("p"),_t=k("If you clicked on the "),Ut=d("strong"),qt=k('"+ Agility"'),Gt=k(" button, "),Bt=d("code"),Ft=k("$$.dirty"),Jt=k(" will turn into:"),zt=v(),Wt=d("pre"),Yt=v(),Vt=d("p"),Kt=k("If you clicked on the "),Zt=d("strong"),Qt=k('"Level Up"'),Xt=k(" button, "),ae=d("code"),ne=k("$$.dirty"),se=k(" will turn into:"),te=v(),ee=d("pre"),oe=v(),ce=d("p"),pe=d("code"),re=k("$$.dirty"),ie=k(" is useful for Svelte, so that it doesn't update the DOM unnecessarily."),le=v(),ue=d("p"),he=k("If you looked at the "),de=d("strong"),fe=k("p (u_p_date)"),ke=k(" function of the compiled code, you will see Svelte checks whether a variable is marked in "),ve=d("code"),me=k("$$.dirty"),Ee=k(", before updating the DOM."),ge=v(),be=d("pre"),$e=v(),ye=d("p"),we=k("After Svelte updates the DOM, the "),Oe=d("code"),Se=k("$$.dirty"),Te=k(" is set back to "),Le=d("code"),Ne=k("null"),Pe=k(" to indicate all changes has been applied onto the DOM."),xe=v(),Ce=d("section"),De=d("h3"),Ae=d("a"),Ie=k("\\$\\$invalidate"),je=v(),Re=d("p"),Me=d("code"),He=k("$$invalidate"),_e=k(" is the secret behind reactivity in Svelte."),Ue=v(),qe=d("p"),Ge=k("Whenever a variable is"),Be=v(),Fe=d("ul"),Je=d("li"),ze=k("reassigned "),We=d("code"),Ye=k("(foo = 1)"),Ve=v(),Ke=d("li"),Ze=k("mutated "),Qe=d("code"),Xe=k("(foo.bar = 1)"),ao=v(),no=d("p"),so=k("Svelte will wrap the assignment or update around with the "),to=d("code"),eo=k("$$invalidate"),oo=k(" function:"),co=v(),po=d("pre"),ro=v(),io=d("p"),lo=k("the "),uo=d("code"),ho=k("$$invalidate"),fo=k(" function will:"),ko=v(),vo=d("ol"),mo=d("li"),Eo=k("update the variable in "),go=d("code"),bo=k("$$.ctx"),$o=v(),yo=d("li"),wo=k("mark the variable in "),Oo=d("code"),So=k("$$.dirty"),To=v(),Lo=d("li"),No=k("schedule an update"),Po=v(),xo=d("li"),Co=k("return the value of the assignment or update expression"),Do=v(),Ao=d("pre"),Io=v(),jo=d("p"),Ro=d("a"),Mo=k("Source code"),Ho=v(),_o=d("p"),Uo=k("One interesting note about the function "),qo=d("code"),Go=k("$$invalidate"),Bo=k(" is that, it wraps around the assignment or update expression and returns what the expression evaluates to."),Fo=v(),Jo=d("p"),zo=k("This makes "),Wo=d("code"),Yo=k("$$invalidate"),Vo=k(" chainable:"),Ko=v(),Zo=d("pre"),Qo=v(),Xo=d("p"),ac=k("It seemed complex when there's a lot of assignment or update expressions in 1 statement! 🙈"),nc=v(),sc=d("p"),tc=k("The 2nd argument of "),ec=d("code"),oc=k("$$invalidate"),cc=k(" is the assignment or update expressions verbatim. But if it contains any assignment or update sub-expressions, we recursively wrap it with "),pc=d("code"),rc=k("$$invalidate"),ic=k("."),lc=v(),uc=d("p"),hc=k("In case where the assignment expression changes a property of an object, we pass the object in as a 3rd argument of the "),dc=d("code"),fc=k("$$invalidate"),kc=k(" function, eg:"),vc=v(),mc=d("pre"),Ec=v(),gc=d("p"),bc=k("So that, we update the "),$c=d("code"),yc=k('"obj"'),wc=k(" variable to "),Oc=d("code"),Sc=k("obj"),Tc=k(" instead of the value of the 2nd argument, "),Lc=d("code"),Nc=k('"hello"'),Pc=k("."),xc=v(),Cc=d("section"),Dc=d("h3"),Ac=d("a"),Ic=k("schedule_update"),jc=v(),Rc=d("p"),Mc=d("code"),Hc=k("schedule_update"),_c=k(" schedules Svelte to update the DOM with the changes made thus far."),Uc=v(),qc=d("p"),Gc=k("Svelte, at the point of writing ("),Bc=d("a"),Fc=k("v3.20.1"),Jc=k("), uses "),zc=d("a"),Wc=k("microtask queue"),Yc=k(" to batch change updates. The actual DOM update happens in the next microtask, so that any synchronous "),Vc=d("code"),Kc=k("$$invalidate"),Zc=k(" operations that happen within the same task get batched into the next DOM update."),Qc=v(),Xc=d("p"),ap=k("To schedule a next microtask, Svelte uses the Promise callback."),np=v(),sp=d("pre"),tp=v(),ep=d("p"),op=k("In "),cp=d("code"),pp=k("flush"),rp=k(", we call update for each component marked dirty:"),ip=v(),lp=d("pre"),up=v(),hp=d("p"),dp=d("a"),fp=k("Source code"),kp=v(),vp=d("p"),mp=k("So, if you write a Svelte component like this:"),Ep=v(),gp=d("pre"),bp=v(),$p=d("p"),yp=d("a"),wp=k("Svelte REPL"),Op=v(),Sp=d("p"),Tp=k("The DOM update for the "),Lp=d("code"),Np=k("givenName"),Pp=k(" and "),xp=d("code"),Cp=k("familyName"),Dp=k(" happens in the same microtask:"),Ap=v(),Ip=d("ol"),jp=d("li"),Rp=k("Click on the "),Mp=d("strong"),Hp=k('"Update"'),_p=k(" to call the "),Up=d("code"),qp=k("update"),Gp=k(" function"),Bp=v(),Fp=d("li"),Jp=d("code"),zp=k("$$invalidate('givenName', givenName = 'Li Hau')"),Wp=v(),Yp=d("li"),Vp=k("Mark the variable "),Kp=d("code"),Zp=k("givenName"),Qp=k(" dirty, "),Xp=d("code"),ar=k("$$.dirty['givenName'] = true"),nr=v(),sr=d("li"),tr=k("Schedule an update, "),er=d("code"),or=k("schedule_update()"),cr=v(),pr=d("li"),rr=k("Since it's the first update in the call stack, push the "),ir=d("code"),lr=k("flush"),ur=k(" function into the microtask queue"),hr=v(),dr=d("li"),fr=d("code"),kr=k("$$invalidate('familyName', familyName = 'Tan')"),vr=v(),mr=d("li"),Er=k("Mark the variable "),gr=d("code"),br=k("familyName"),$r=k(" dirty, "),yr=d("code"),wr=k("$$.dirty['familyName'] = true"),Or=v(),Sr=d("li"),Tr=k("Schedule an update, "),Lr=d("code"),Nr=k("schedule_update()"),Pr=v(),xr=d("li"),Cr=k("Since "),Dr=d("code"),Ar=k("update_scheduled = true"),Ir=k(", do nothing."),jr=v(),Rr=d("li"),Mr=d("strong"),Hr=k("-- End of task --"),_r=v(),Ur=d("li"),qr=d("strong"),Gr=k("-- Start of microtask--"),Br=v(),Fr=d("li"),Jr=d("code"),zr=k("flush()"),Wr=k(" calls "),Yr=d("code"),Vr=k("update()"),Kr=k(" for each component marked dirty"),Zr=v(),Qr=d("li"),Xr=k("Calls "),ai=d("code"),ni=k("$$.fragment.p($$.dirty, $$.ctx)"),si=k("."),ti=d("ul"),ei=d("li"),oi=d("code"),ci=k("$$.dirty"),pi=k(" is now "),ri=d("code"),ii=k("{ givenName: true, familyName: true }"),li=v(),ui=d("li"),hi=d("code"),di=k("$$.ctx"),fi=k(" is now "),ki=d("code"),vi=k("{ givenName: 'Li Hau', familyName: 'Tan' }"),mi=v(),Ei=d("li"),gi=k("In "),bi=d("code"),$i=k("function p(dirty, ctx)"),yi=k(","),wi=d("ul"),Oi=d("li"),Si=k("Update the 1st text node to "),Ti=d("code"),Li=k("$$.ctx['givenName']"),Ni=k(" if "),Pi=d("code"),xi=k("$$.dirty['givenName'] === true"),Ci=v(),Di=d("li"),Ai=k("Update the 2nd text node to "),Ii=d("code"),ji=k("$$.ctx['familyName']"),Ri=k(" if "),Mi=d("code"),Hi=k("$$.dirty['familyName'] === true"),_i=v(),Ui=d("li"),qi=k("Resets the "),Gi=d("code"),Bi=k("$$.dirty"),Fi=k(" to "),Ji=d("code"),zi=k("null"),Wi=v(),Yi=d("li"),Vi=k("..."),Ki=v(),Zi=d("li"),Qi=d("strong"),Xi=k("-- End of microtask--"),al=v(),nl=d("section"),sl=d("h4"),tl=d("a"),el=k("tl/dr:"),ol=v(),cl=d("ul"),pl=d("li"),rl=k("For each assignment or update, Svelte calls "),il=d("code"),ll=k("$$invalidate"),ul=k(" to update the variable in "),hl=d("code"),dl=k("$$.ctx"),fl=k(" and mark the variable dirty in "),kl=d("code"),vl=k("$$.dirty"),ml=k("."),El=v(),gl=d("li"),bl=k("The acutal DOM update is batched into the next microtask queue."),$l=v(),yl=d("li"),wl=k("To update the DOM for each component, the component "),Ol=d("code"),Sl=k("$$.fragment.p($$.diry, $$.ctx)"),Tl=k(" is called."),Ll=v(),Nl=d("li"),Pl=k("After the DOM update, the "),xl=d("code"),Cl=k("$$.dirty"),Dl=k(" is reset to "),Al=d("code"),Il=k("null"),jl=k("."),Rl=v(),Ml=d("section"),Hl=d("h2"),_l=d("a"),Ul=k("v3.16.0"),ql=v(),Gl=d("p"),Bl=k("One big change in v3.16.0 is the PR "),Fl=d("a"),Jl=k("#3945"),zl=k(", namely "),Wl=d("strong"),Yl=k("bitmask-based change tracking"),Vl=k("."),Kl=v(),Zl=d("p"),Ql=k("Instead of marking the variable dirty using an object:"),Xl=v(),au=d("pre"),nu=v(),su=d("p"),tu=k("Svelte assign each variable an index:"),eu=v(),ou=d("pre"),cu=v(),pu=d("p"),ru=k("and uses "),iu=d("a"),lu=k("bitmask"),uu=k(" to store the dirty information:"),hu=v(),du=d("pre"),fu=v(),ku=d("p"),vu=k("which is far more compact than the previous compiled code."),mu=v(),Eu=d("section"),gu=d("h3"),bu=d("a"),$u=k("Bitmask"),yu=v(),wu=d("p"),Ou=k("For those who don't understand, allow me to quickly explain what it is."),Su=v(),Tu=d("p"),Lu=k("Of course, if you want to learn more about it, feel free to read a more detailed explanation, like "),Nu=d("a"),Pu=k("this"),xu=k(" and "),Cu=d("a"),Du=k("this"),Au=k("."),Iu=v(),ju=d("p"),Ru=k("The most compact way of representing a group of "),Mu=d("code"),Hu=k("true"),_u=k(" or "),Uu=d("code"),qu=k("false"),Gu=k(" is to use bits. If the bit is "),Bu=d("code"),Fu=k("1"),Ju=k(" it is "),zu=d("code"),Wu=k("true"),Yu=k(" and if it is "),Vu=d("code"),Ku=k("0"),Zu=k(" it is "),Qu=d("code"),Xu=k("false"),ah=k("."),nh=v(),sh=d("p"),th=k("A number can be represented in binary, "),eh=d("strong"),oh=k("5"),ch=k(" is "),ph=d("code"),rh=k("0b0101"),ih=k(" in binary."),lh=v(),uh=d("p"),hh=k("If "),dh=d("strong"),fh=k("5"),kh=k(" is represented in a 4-bit binary, then it can store 4 boolean values, with the 0th and 2nd bit as "),vh=d("code"),mh=k("true"),Eh=k(" and 1st and 3rd bit as "),gh=d("code"),bh=k("false"),$h=k(", (reading from the right to left, from "),yh=d("a"),wh=k("least significant bit"),Oh=k(" to the "),Sh=d("a"),Th=k("most significant bit"),Lh=k(")."),Nh=v(),Ph=d("p"),xh=d("strong"),Ch=k("How many boolean values can a number store?"),Dh=v(),Ah=d("p"),Ih=k("That depends on the language, a 16-bit integer in Java can store 16 boolean values."),jh=v(),Rh=d("p"),Mh=k("In JavaScript, numbers can are "),Hh=d("a"),_h=k("represented in 64 bits"),Uh=k(". However, when using "),qh=d("a"),Gh=k("bitwise operations"),Bh=k(" on the number, JavaScript will treat the number as 32 bits."),Fh=v(),Jh=d("p"),zh=k("To inspect or modify the boolean value stored in a number, we use "),Wh=d("a"),Yh=k("bitwise operations"),Vh=k("."),Kh=v(),Zh=d("pre"),Qh=v(),Xh=d("p"),ad=k("The 2nd operand we use in the bitwise operation, is like a "),nd=d("a"),sd=k("mask"),td=k(" that allow us to target a specific bit in the 1st number, that stores our boolean values."),ed=v(),od=d("p"),cd=k("We call the mask, "),pd=d("strong"),rd=k("bitmask"),id=k("."),ld=v(),ud=d("section"),hd=d("h3"),dd=d("a"),fd=k("Bitmask in Svelte"),kd=v(),vd=d("p"),md=k("As mentioned earlier, we assign each variable an index:"),Ed=v(),gd=d("pre"),bd=v(),$d=d("p"),yd=k("So instead of returning the instance variable as an JavaScript Object, we now return it as an JavaScript Array:"),wd=v(),Od=d("pre"),Sd=v(),Td=d("p"),Ld=k("The variable is accessed via "),Nd=d("strong"),Pd=k("index"),xd=k(", "),Cd=d("code"),Dd=k("$$.ctx[index]"),Ad=k(", instead of "),Id=d("strong"),jd=k("variable name"),Rd=k(":"),Md=v(),Hd=d("pre"),_d=v(),Ud=d("p"),qd=k("The "),Gd=d("code"),Bd=k("$$invalidate"),Fd=k(" function works the same, except it takes in "),Jd=d("strong"),zd=k("index"),Wd=k(" instead of "),Yd=d("strong"),Vd=k("variable name"),Kd=k(":"),Zd=v(),Qd=d("pre"),Xd=v(),af=d("p"),nf=d("code"),sf=k("$$.dirty"),tf=k(" now stores a list of numbers. Each number carries 31 boolean values, each boolean value indicates whether the variable of that index is dirty or not."),ef=v();of=d("p"),cf=k("To set a variable as dirty, we use bitwise operation:"),pf=v(),rf=d("pre"),lf=v(),uf=d("p"),hf=k("And to verify whether a variable is dirty, we use bitwise operation too!"),df=v(),ff=d("pre"),kf=v(),vf=d("p"),mf=k("With using bitmask, "),Ef=d("code"),gf=k("$$.dirty"),bf=k(" is now reset to "),$f=d("code"),yf=k("[-1]"),wf=k(" instead of "),Of=d("code"),Sf=k("null"),Tf=k("."),Lf=v(),Nf=d("p"),Pf=d("strong"),xf=k("Trivia:"),Cf=v(),Df=d("code"),Af=k("-1"),If=k(" is "),jf=d("code"),Rf=k("0b1111_1111"),Mf=k(" in binary, where all the bits are "),Hf=d("code"),_f=k("1"),Uf=k("."),qf=v(),Gf=d("section"),Bf=d("h4"),Ff=d("a"),Jf=k("Destructuring "),zf=d("strong"),Wf=k("$$.dirty"),Yf=v(),Vf=d("p"),Kf=k("One code-size optimisation that Svelte does is to always destructure the "),Zf=d("code"),Qf=k("dirty"),Xf=k(" array in the "),ak=d("strong"),nk=k("u_p_date function"),sk=k(" if there's less than 32 variables, since we will always access "),tk=d("code"),ek=k("dirty[0]"),ok=k(" anyway:"),ck=v(),pk=d("pre"),rk=v(),ik=d("section"),lk=d("h4"),uk=d("a"),hk=k("tl/dr:"),dk=v(),fk=d("ul"),kk=d("li"),vk=k("The underlying mechanism for "),mk=d("code"),Ek=k("$$invalidate"),gk=k(" and "),bk=d("code"),$k=k("schedule_update"),yk=k(" does not change"),wk=v(),Ok=d("li"),Sk=k("Using bitmask, the compiled code is much compact"),Tk=v(),Lk=d("section"),Nk=d("h2"),Pk=d("a"),xk=k("Reactive Declaration"),Ck=v(),Dk=d("p"),Ak=k("Svelte allow us to declare reactive values via the "),Ik=d("a"),jk=k("labeled statement"),Rk=k(", "),Mk=d("code"),Hk=k("$:"),_k=v(),Uk=d("pre"),qk=v(),Gk=d("p"),Bk=d("a"),Fk=k("Svelte REPL"),Jk=v(),zk=d("p"),Wk=k("If you look at the compiled output, you would find out that the declarative statements appeared in the "),Yk=d("a"),Vk=d("code"),Kk=k("instance"),Zk=k(" function"),Qk=k(":"),Xk=v(),av=d("pre"),nv=v(),sv=d("p"),tv=k("Try reorder the reactive declarations and observe the change in the compiled output:"),ev=v(),ov=d("pre"),cv=v(),pv=d("p"),rv=d("a"),iv=k("Svelte REPL"),lv=v(),uv=d("pre"),hv=v(),dv=d("p"),fv=k("Some observations:"),kv=v(),vv=d("ul"),mv=d("li"),Ev=k("When there are reactive declarations, Svelte defines a custom "),gv=d("code"),bv=k("$$.update"),$v=k(" method."),yv=d("ul"),wv=d("li"),Ov=d("code"),Sv=k("$$.update"),Tv=k(" is a "),Lv=d("a"),Nv=k("no-op function"),Pv=k(" by default. (See "),xv=d("a"),Cv=k("src/runtime/internal/Component.ts"),Dv=k(")"),Av=v(),Iv=d("li"),jv=k("Svelte uses "),Rv=d("code"),Mv=k("$$invalidate"),Hv=k(" to update the value of a reactive variable too."),_v=v(),Uv=d("li"),qv=k("Svelte sorts the reactive declarations and statements, based on the dependency relationship between the declarations and statements"),Gv=d("ul"),Bv=d("li"),Fv=d("code"),Jv=k("quadrupled"),zv=k(" depends on "),Wv=d("code"),Yv=k("doubled"),Vv=k(", so "),Kv=d("code"),Zv=k("quadrupled"),Qv=k(" is evaluated and "),Xv=d("code"),am=k("$$invalidate"),nm=k("d after "),sm=d("code"),tm=k("doubled"),em=k("."),om=v(),cm=d("p"),pm=k("Since all reactive declarations and statements are grouped into the "),rm=d("code"),im=k("$$.update"),lm=k(" method, and also the fact that Svelte will sort the declarations and statements according to their dependency relationship, it is irrelevant of the location or the order you declared them."),um=v(),hm=d("p"),dm=k("The following component still works:"),fm=v(),km=d("pre"),vm=v(),mm=d("p"),Em=d("a"),gm=k("Svelte REPL"),bm=v(),$m=d("p"),ym=d("strong"),wm=k("The next thing you may ask, when is "),Om=d("code"),Sm=k("$$.update"),Tm=k(" being called?"),Lm=v(),Nm=d("p"),Pm=k("Remember the "),xm=d("code"),Cm=k("update"),Dm=k(" function that gets called in the "),Am=d("code"),Im=k("flush"),jm=k(" function?"),Rm=v(),Mm=d("p"),Hm=k("I put a "),_m=d("code"),Um=k("NOTE:"),qm=k(" comment saying that it will be important later. Well, it is important now."),Gm=v(),Bm=d("pre"),Fm=v(),Jm=d("p"),zm=k("The "),Wm=d("code"),Ym=k("$$.update"),Vm=k(" function gets called "),Km=d("strong"),Zm=k("in the same microtask"),Qm=k(" with the DOM update, right before we called the "),Xm=d("code"),aE=k("$$.fragment.p()"),nE=k(" to update the DOM."),sE=v(),tE=d("p"),eE=k("The implication of the above fact is"),oE=v(),cE=d("section"),pE=d("h4"),rE=d("a"),iE=k("1. Execution of all reactive declarations and statements are batched"),lE=v(),uE=d("p"),hE=k("Just as how DOM updates are batched, reactive declarations and statements are batched too!"),dE=v(),fE=d("pre"),kE=v(),vE=d("p"),mE=d("a"),EE=k("Svelte REPL"),gE=v(),bE=d("p"),$E=k("When "),yE=d("code"),wE=k("update()"),OE=k(" get called,"),SE=v(),TE=d("ol"),LE=d("li"),NE=k("Similar to the "),PE=d("a"),xE=k("flow described above"),CE=k(", "),DE=d("code"),AE=k("$$invalidate"),IE=k(" both "),jE=d("strong"),RE=k('"givenName"'),ME=k(" and "),HE=d("strong"),_E=k('"familyName"'),UE=k(", and schedules an update"),qE=v(),GE=d("li"),BE=d("strong"),FE=k("-- End of task --"),JE=v(),zE=d("li"),WE=d("strong"),YE=k("-- Start of microtask--"),VE=v(),KE=d("li"),ZE=d("code"),QE=k("flush()"),XE=k(" calls "),ag=d("code"),ng=k("update()"),sg=k(" for each component marked dirty"),tg=v(),eg=d("li"),og=k("Runs "),cg=d("code"),pg=k("$$.update()"),rg=d("ul"),ig=d("li"),lg=k("As "),ug=d("strong"),hg=k('"givenName"'),dg=k(" and "),fg=d("strong"),kg=k('"familyName"'),vg=k(" has changed, evaluates and "),mg=d("code"),Eg=k("$$invalidate"),gg=v(),bg=d("strong"),$g=k('"name"'),yg=v(),wg=d("li"),Og=k("As "),Sg=d("strong"),Tg=k('"name"'),Lg=k(" has changed, executes "),Ng=d("code"),Pg=k("console.log('name', name);"),xg=v(),Cg=d("li"),Dg=k("Calls "),Ag=d("code"),Ig=k("$$.fragment.p(...)"),jg=k(" to update the DOM."),Rg=v(),Mg=d("p"),Hg=k("As you can see, even though we've updated "),_g=d("code"),Ug=k("givenName"),qg=k(" and "),Gg=d("code"),Bg=k("familyName"),Fg=k(", we only evaluate "),Jg=d("code"),zg=k("name"),Wg=k(" and executes "),Yg=d("code"),Vg=k("console.log('name', name)"),Kg=v(),Zg=d("strong"),Qg=k("once"),Xg=k(" instead of twice:"),ab=v(),nb=d("pre"),sb=v(),tb=d("section"),eb=d("h4"),ob=d("a"),cb=k("2. The value of reactive variable outside of reactive declarations and statements may not be up to date"),pb=v(),rb=d("p"),ib=k("Because the reactive declarations and statements are batched and executed in the next microtask, you can't expect the value to be updated synchronously."),lb=v(),ub=d("pre"),hb=v(),db=d("p"),fb=d("a"),kb=k("Svelte REPL"),vb=v(),mb=d("p"),Eb=k("Instead, you "),gb=d("strong"),bb=k("have to"),$b=k(" refer the reactive variable in another reactive declaration or statement:"),yb=v(),wb=d("pre"),Ob=v(),Sb=d("section"),Tb=d("h3"),Lb=d("a"),Nb=k("Sorting of reactive declarations and statements"),Pb=v(),xb=d("p"),Cb=k("Svelte tries to preserve the order of reactive declarations and statements as they are declared as much as possible."),Db=v(),Ab=d("p"),Ib=k("However, if one reactive declaration or statement refers to a variable that was defined by another reactive declaration, then, "),jb=d("strong"),Rb=k("it will be inserted after the latter reactive declaration"),Mb=k(":"),Hb=v(),_b=d("pre"),Ub=v(),qb=d("section"),Gb=d("h3"),Bb=d("a"),Fb=k("Reactive variable that is not reactive"),Jb=v(),zb=d("p"),Wb=k("The Svelte compiler tracks all the variables declared in the "),Yb=d("code"),Vb=k("<script>"),Kb=k(" tag."),Zb=v(),Qb=d("p"),Xb=k("If all the variables of a reactive declaration or statement refers to, never gets mutated or reassigned, then the reactive declaration or statement will not be added into "),a$=d("code"),n$=k("$$.update"),s$=k("."),t$=v(),e$=d("p"),o$=k("For example:"),c$=v(),p$=d("pre"),r$=v(),i$=d("p"),l$=d("a"),u$=k("Svelte REPL"),h$=v(),d$=d("p"),f$=k("Since, "),k$=d("code"),v$=k("count"),m$=k(" never gets mutated or reassigned, Svelte optimises the compiled output by not defining "),E$=d("code"),g$=k("$$self.$$.update"),b$=k("."),$$=v(),y$=d("pre"),w$=v(),O$=d("section"),S$=d("h2"),T$=d("a"),L$=k("Summary"),N$=v(),P$=d("section"),x$=d("h4"),C$=d("a"),D$=k("1. Svelte keeps track of which variables are dirty and batched the DOM updates."),A$=v(),I$=d("section"),j$=d("h4"),R$=d("a"),M$=k("2. Using bitmask, Svelte able to generate a more compact compiled code."),H$=v(),_$=d("section"),U$=d("h4"),q$=d("a"),G$=k("3. Reactive declarations and statements are executed in batch, just like DOM updates"),B$=v(),F$=d("section"),J$=d("h2"),z$=d("a"),W$=k("Closing Note"),Y$=v(),V$=d("p"),K$=k("If you wish to know more, "),Z$=d("a"),Q$=k("follow me on Twitter"),X$=k("."),ay=v(),ny=d("p"),sy=k("I'll post it on Twitter when the next part is ready, where I'll be covering "),ty=d("a"),ey=k("logic blocks"),oy=k(", "),cy=d("a"),py=k("slots"),ry=k(", "),iy=d("a"),ly=k("context"),uy=k(", and many others."),hy=v(),dy=d("p"),fy=d("strong"),ky=k("⬅ ⬅  Previously in "),vy=d("a"),my=k("Part 1"),Ey=k("."),gy=v(),by=d("p"),$y=d("strong"),yy=k("➡ ➡  Continue reading on "),wy=d("a"),Oy=k("Part 3"),Sy=k("."),Ty=v(),Ly=d("section"),Ny=d("h2"),Py=d("a"),xy=k("Further Resources"),Cy=v(),Dy=d("ul"),Ay=d("li"),Iy=k("Rich Harris shares about "),jy=d("a"),Ry=k("Bitmask Tracking at Svelte Society NYC"),My=k("."),Hy=v(),_y=d("li"),Uy=k("Svelte Tutorial - "),qy=d("a"),Gy=k("Reactivity"),By=v(),Fy=d("a"),Jy=k("https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/"),zy=v(),Wy=d("li"),Yy=d("a"),Vy=k("The Art of Bitmasking"),Ky=k(" by Shakib Ahmed"),Zy=v(),Qy=d("li"),Xy=d("a"),aw=k("Bitmasks: A very esoteric (and impractical) way of managing booleans"),nw=k(" by Basti Ortiz"),sw=v(),tw=d("li"),ew=d("a"),ow=k("MDN: Bitwise Operators"),this.h()},l(a){s=b(a,"SECTION",{});var n=g(s);t=b(n,"UL",{class:!0,id:!0,role:!0,"aria-label":!0});var i=g(t);e=b(i,"LI",{});var l=g(e);o=b(l,"A",{href:!0});var d=g(o);c=$(d,"Pre v3.16.0"),d.forEach(u),l.forEach(u),p=b(i,"UL",{});var k=g(p);r=b(k,"LI",{});var v=g(r);h=b(v,"A",{href:!0});var E=g(h);f=$(E,"\\$\\$.ctx"),E.forEach(u),v.forEach(u),m=b(k,"LI",{});var cw=g(m);w=b(cw,"A",{href:!0});var pw=g(w);O=$(pw,"\\$\\$.dirty"),pw.forEach(u),cw.forEach(u),S=b(k,"LI",{});var rw=g(S);T=b(rw,"A",{href:!0});var iw=g(T);L=$(iw,"\\$\\$invalidate"),iw.forEach(u),rw.forEach(u),N=b(k,"LI",{});var lw=g(N);P=b(lw,"A",{href:!0});var uw=g(P);x=$(uw,"schedule_update"),uw.forEach(u),lw.forEach(u),C=b(k,"UL",{});var hw=g(C);D=b(hw,"LI",{});var dw=g(D);A=b(dw,"A",{href:!0});var fw=g(A);I=$(fw,"tl/dr:"),fw.forEach(u),dw.forEach(u),hw.forEach(u),k.forEach(u),j=b(i,"LI",{});var kw=g(j);R=b(kw,"A",{href:!0});var vw=g(R);M=$(vw,"v3.16.0"),vw.forEach(u),kw.forEach(u),H=b(i,"UL",{});var mw=g(H);_=b(mw,"LI",{});var Ew=g(_);U=b(Ew,"A",{href:!0});var gw=g(U);q=$(gw,"Bitmask"),gw.forEach(u),Ew.forEach(u),G=b(mw,"LI",{});var bw=g(G);B=b(bw,"A",{href:!0});var $w=g(B);F=$($w,"Bitmask in Svelte"),$w.forEach(u),bw.forEach(u),J=b(mw,"UL",{});var yw=g(J);z=b(yw,"LI",{});var ww=g(z);W=b(ww,"A",{href:!0});var Ow=g(W);Y=$(Ow,"Destructuring  "),Ow.forEach(u),ww.forEach(u),V=b(yw,"LI",{});var Sw=g(V);K=b(Sw,"A",{href:!0});var Tw=g(K);Z=$(Tw,"tl/dr:"),Tw.forEach(u),Sw.forEach(u),yw.forEach(u),mw.forEach(u),Q=b(i,"LI",{});var Lw=g(Q);X=b(Lw,"A",{href:!0});var Nw=g(X);aa=$(Nw,"Reactive Declaration"),Nw.forEach(u),Lw.forEach(u),na=b(i,"UL",{});var Pw=g(na);sa=b(Pw,"UL",{});var xw=g(sa);ta=b(xw,"LI",{});var Cw=g(ta);ea=b(Cw,"A",{href:!0});var Dw=g(ea);oa=$(Dw,"1. Execution of all reactive declarations and statements are batched"),Dw.forEach(u),Cw.forEach(u),ca=b(xw,"LI",{});var Aw=g(ca);pa=b(Aw,"A",{href:!0});var Iw=g(pa);ra=$(Iw,"2. The value of reactive variable outside of reactive declarations and statements may not be up to date"),Iw.forEach(u),Aw.forEach(u),xw.forEach(u),ia=b(Pw,"LI",{});var jw=g(ia);la=b(jw,"A",{href:!0});var Rw=g(la);ua=$(Rw,"Sorting of reactive declarations and statements"),Rw.forEach(u),jw.forEach(u),ha=b(Pw,"LI",{});var Mw=g(ha);da=b(Mw,"A",{href:!0});var Hw=g(da);fa=$(Hw,"Reactive variable that is not reactive"),Hw.forEach(u),Mw.forEach(u),Pw.forEach(u),ka=b(i,"LI",{});var _w=g(ka);va=b(_w,"A",{href:!0});var Uw=g(va);ma=$(Uw,"Summary"),Uw.forEach(u),_w.forEach(u),Ea=b(i,"UL",{});var qw=g(Ea);ga=b(qw,"UL",{});var Gw=g(ga);ba=b(Gw,"LI",{});var Bw=g(ba);$a=b(Bw,"A",{href:!0});var Fw=g($a);ya=$(Fw,"1. Svelte keeps track of which variables are dirty and batched the DOM updates."),Fw.forEach(u),Bw.forEach(u),wa=b(Gw,"LI",{});var Jw=g(wa);Oa=b(Jw,"A",{href:!0});var zw=g(Oa);Sa=$(zw,"2. Using bitmask, Svelte able to generate a more compact compiled code."),zw.forEach(u),Jw.forEach(u),Ta=b(Gw,"LI",{});var Ww=g(Ta);La=b(Ww,"A",{href:!0});var Yw=g(La);Na=$(Yw,"3. Reactive declarations and statements are executed in batch, just like DOM updates"),Yw.forEach(u),Ww.forEach(u),Gw.forEach(u),qw.forEach(u),Pa=b(i,"LI",{});var Vw=g(Pa);xa=b(Vw,"A",{href:!0});var Kw=g(xa);Ca=$(Kw,"Closing Note"),Kw.forEach(u),Vw.forEach(u),Da=b(i,"LI",{});var Zw=g(Da);Aa=b(Zw,"A",{href:!0});var Qw=g(Aa);Ia=$(Qw,"Further Resources"),Qw.forEach(u),Zw.forEach(u),i.forEach(u),n.forEach(u),ja=y(a),Ra=b(a,"P",{});var Xw=g(Ra);Ma=b(Xw,"STRONG",{});var aO=g(Ma);Ha=$(aO,"⬅ ⬅  Previously in "),_a=b(aO,"A",{href:!0});var nO=g(_a);Ua=$(nO,"Part 1"),nO.forEach(u),qa=$(aO,"."),aO.forEach(u),Xw.forEach(u),Ga=y(a),Ba=b(a,"P",{});var sO=g(Ba);Fa=b(sO,"A",{href:!0});var tO=g(Fa);Ja=$(tO,"Previously"),tO.forEach(u),za=$(sO,", when I mentioned the "),Wa=b(sO,"CODE",{});var eO=g(Wa);Ya=$(eO,"$$invalidate"),eO.forEach(u),Va=$(sO," function, I explained that the "),Ka=b(sO,"CODE",{});var oO=g(Ka);Za=$(oO,"$$invalidate"),oO.forEach(u),Qa=$(sO," function works conceptually like the following:"),sO.forEach(u),Xa=y(a),an=b(a,"PRE",{class:!0}),g(an).forEach(u),nn=y(a),sn=b(a,"P",{});var cO=g(sn);tn=$(cO,"but that's not the exact implementation of the "),en=b(cO,"CODE",{});var pO=g(en);on=$(pO,"$$invaldiate"),pO.forEach(u),cn=$(cO," function. So in this article, we are going to look at how "),pn=b(cO,"CODE",{});var rO=g(pn);rn=$(rO,"$$invalidate"),rO.forEach(u),ln=$(cO," is implemented in Svelte."),cO.forEach(u),un=y(a),hn=b(a,"P",{});var iO=g(hn);dn=$(iO,"At the point of writing, Svelte is at "),fn=b(iO,"A",{href:!0,rel:!0});var lO=g(fn);kn=$(lO,"v3.20.1"),lO.forEach(u),vn=$(iO,"."),iO.forEach(u),mn=y(a),En=b(a,"SECTION",{});var uO=g(En);gn=b(uO,"H2",{});var hO=g(gn);bn=b(hO,"A",{href:!0,id:!0});var dO=g(bn);$n=$(dO,"Pre v3.16.0"),dO.forEach(u),hO.forEach(u),yn=y(uO),wn=b(uO,"P",{});var fO=g(wn);On=$(fO,"There's a big optimisation that changes the underlying implementation of the "),Sn=b(fO,"CODE",{});var kO=g(Sn);Tn=$(kO,"$$invalidate"),kO.forEach(u),Ln=$(fO," function in "),Nn=b(fO,"A",{href:!0,rel:!0});var vO=g(Nn);Pn=$(vO,"v3.16.0"),vO.forEach(u),xn=$(fO,", namely in "),Cn=b(fO,"A",{href:!0,rel:!0});var mO=g(Cn);Dn=$(mO,"#3945"),mO.forEach(u),An=$(fO,". The underlying concept doesn't change, but it'll be much easier to understand about "),In=b(fO,"CODE",{});var EO=g(In);jn=$(EO,"$$invalidate"),EO.forEach(u),Rn=$(fO," prior the change and learn about the optimisation change separately."),fO.forEach(u),Mn=y(uO),Hn=b(uO,"P",{});var gO=g(Hn);_n=$(gO,"Let's explain some of the variables that you are going to see, some of which was introduced in "),Un=b(gO,"A",{href:!0});var bO=g(Un);qn=$(bO,"Part 1"),bO.forEach(u),Gn=$(gO,":"),gO.forEach(u),uO.forEach(u),Bn=y(a),Fn=b(a,"SECTION",{});var $O=g(Fn);Jn=b($O,"H3",{});var yO=g(Jn);zn=b(yO,"A",{href:!0,id:!0});var wO=g(zn);Wn=$(wO,"\\$\\$.ctx"),wO.forEach(u),yO.forEach(u),Yn=y($O),Vn=b($O,"P",{});var OO=g(Vn);Kn=$(OO,"There's no official name for it. You can call it "),Zn=b(OO,"STRONG",{});var SO=g(Zn);Qn=$(SO,"context"),SO.forEach(u),Xn=$(OO," as it is the context which the template is based on to render onto the DOM."),OO.forEach(u),as=y($O),ns=b($O,"P",{});var TO=g(ns);ss=$(TO,"I called it "),ts=b(TO,"A",{href:!0});var LO=g(ts);es=$(LO,"instance variables"),LO.forEach(u),os=$(TO,". As it is a JavaScript Object that contains all the variables that you:"),TO.forEach(u),cs=y($O),ps=b($O,"UL",{});var NO=g(ps);rs=b(NO,"LI",{});var PO=g(rs);is=$(PO,"declared in the "),ls=b(PO,"CODE",{});var xO=g(ls);us=$(xO,"<script>"),xO.forEach(u),hs=$(PO," tag"),PO.forEach(u),ds=y(NO),fs=b(NO,"LI",{});var CO=g(fs);ks=$(CO,"mutated or reassigned"),CO.forEach(u),vs=y(NO),ms=b(NO,"LI",{});var DO=g(ms);Es=$(DO,"referenced in the template"),DO.forEach(u),NO.forEach(u),gs=y($O),bs=b($O,"P",{});var AO=g(bs);$s=$(AO,"that belongs to a component instance."),AO.forEach(u),ys=y($O),ws=b($O,"P",{});var IO=g(ws);Os=$(IO,"The instance variables themselves can be of a primitive value, object, array or function."),IO.forEach(u),Ss=y($O),Ts=b($O,"P",{});var jO=g(Ts);Ls=$(jO,"The "),Ns=b(jO,"CODE",{});var RO=g(Ns);Ps=$(RO,"instance"),RO.forEach(u),xs=$(jO," function creates and returns the "),Cs=b(jO,"CODE",{});var MO=g(Cs);Ds=$(MO,"ctx"),MO.forEach(u),As=$(jO," object."),jO.forEach(u),Is=y($O),js=b($O,"P",{});var HO=g(js);Rs=$(HO,"Functions declared in the "),Ms=b(HO,"CODE",{});var _O=g(Ms);Hs=$(_O,"<script>"),_O.forEach(u),_s=$(HO," tag will refer to the instance variable that is scoped withn the "),Us=b(HO,"CODE",{});var UO=g(Us);qs=$(UO,"instance"),UO.forEach(u),Gs=$(HO," function closure:"),HO.forEach(u),Bs=y($O),Fs=b($O,"PRE",{class:!0}),g(Fs).forEach(u),Js=y($O),zs=b($O,"P",{});var qO=g(zs);Ws=b(qO,"A",{href:!0,rel:!0});var GO=g(Ws);Ys=$(GO,"Svelte REPL"),GO.forEach(u),qO.forEach(u),Vs=y($O),Ks=b($O,"PRE",{class:!0}),g(Ks).forEach(u),Zs=y($O),Qs=b($O,"P",{});var BO=g(Qs);Xs=$(BO,"Whenever a new instance of a component is created, the "),at=b(BO,"CODE",{});var FO=g(at);nt=$(FO,"instance"),FO.forEach(u),st=$(BO," function is called and the "),tt=b(BO,"CODE",{});var JO=g(tt);et=$(JO,"ctx"),JO.forEach(u),ot=$(BO," object is created and captured within a new closure scope."),BO.forEach(u),$O.forEach(u),ct=y(a),pt=b(a,"SECTION",{});var zO=g(pt);rt=b(zO,"H3",{});var WO=g(rt);it=b(WO,"A",{href:!0,id:!0});var YO=g(it);lt=$(YO,"\\$\\$.dirty"),YO.forEach(u),WO.forEach(u),ut=y(zO),ht=b(zO,"P",{});var VO=g(ht);dt=b(VO,"CODE",{});var KO=g(dt);ft=$(KO,"$$.dirty"),KO.forEach(u),kt=$(VO," is a object that is used to track which instance variable had just changed and needs to be updated onto the DOM."),VO.forEach(u),vt=y(zO),mt=b(zO,"P",{});var ZO=g(mt);Et=$(ZO,"For example, in the following Svelte component:"),ZO.forEach(u),gt=y(zO),bt=b(zO,"PRE",{class:!0}),g(bt).forEach(u),$t=y(zO),yt=b(zO,"P",{});var QO=g(yt);wt=b(QO,"A",{href:!0,rel:!0});var XO=g(wt);Ot=$(XO,"Svelte REPL"),XO.forEach(u),QO.forEach(u),St=y(zO),Tt=b(zO,"P",{});var aS=g(Tt);Lt=$(aS,"The initial "),Nt=b(aS,"CODE",{});var nS=g(Nt);Pt=$(nS,"$$.dirty"),nS.forEach(u),xt=$(aS," is "),Ct=b(aS,"CODE",{});var sS=g(Ct);Dt=$(sS,"null"),sS.forEach(u),At=$(aS," ("),It=b(aS,"A",{href:!0,rel:!0});var tS=g(It);jt=$(tS,"source code"),tS.forEach(u),Rt=$(aS,")."),aS.forEach(u),Mt=y(zO),Ht=b(zO,"P",{});var eS=g(Ht);_t=$(eS,"If you clicked on the "),Ut=b(eS,"STRONG",{});var oS=g(Ut);qt=$(oS,'"+ Agility"'),oS.forEach(u),Gt=$(eS," button, "),Bt=b(eS,"CODE",{});var cS=g(Bt);Ft=$(cS,"$$.dirty"),cS.forEach(u),Jt=$(eS," will turn into:"),eS.forEach(u),zt=y(zO),Wt=b(zO,"PRE",{class:!0}),g(Wt).forEach(u),Yt=y(zO),Vt=b(zO,"P",{});var pS=g(Vt);Kt=$(pS,"If you clicked on the "),Zt=b(pS,"STRONG",{});var rS=g(Zt);Qt=$(rS,'"Level Up"'),rS.forEach(u),Xt=$(pS," button, "),ae=b(pS,"CODE",{});var iS=g(ae);ne=$(iS,"$$.dirty"),iS.forEach(u),se=$(pS," will turn into:"),pS.forEach(u),te=y(zO),ee=b(zO,"PRE",{class:!0}),g(ee).forEach(u),oe=y(zO),ce=b(zO,"P",{});var lS=g(ce);pe=b(lS,"CODE",{});var uS=g(pe);re=$(uS,"$$.dirty"),uS.forEach(u),ie=$(lS," is useful for Svelte, so that it doesn't update the DOM unnecessarily."),lS.forEach(u),le=y(zO),ue=b(zO,"P",{});var hS=g(ue);he=$(hS,"If you looked at the "),de=b(hS,"STRONG",{});var dS=g(de);fe=$(dS,"p (u_p_date)"),dS.forEach(u),ke=$(hS," function of the compiled code, you will see Svelte checks whether a variable is marked in "),ve=b(hS,"CODE",{});var fS=g(ve);me=$(fS,"$$.dirty"),fS.forEach(u),Ee=$(hS,", before updating the DOM."),hS.forEach(u),ge=y(zO),be=b(zO,"PRE",{class:!0}),g(be).forEach(u),$e=y(zO),ye=b(zO,"P",{});var kS=g(ye);we=$(kS,"After Svelte updates the DOM, the "),Oe=b(kS,"CODE",{});var vS=g(Oe);Se=$(vS,"$$.dirty"),vS.forEach(u),Te=$(kS," is set back to "),Le=b(kS,"CODE",{});var mS=g(Le);Ne=$(mS,"null"),mS.forEach(u),Pe=$(kS," to indicate all changes has been applied onto the DOM."),kS.forEach(u),zO.forEach(u),xe=y(a),Ce=b(a,"SECTION",{});var ES=g(Ce);De=b(ES,"H3",{});var gS=g(De);Ae=b(gS,"A",{href:!0,id:!0});var bS=g(Ae);Ie=$(bS,"\\$\\$invalidate"),bS.forEach(u),gS.forEach(u),je=y(ES),Re=b(ES,"P",{});var $S=g(Re);Me=b($S,"CODE",{});var yS=g(Me);He=$(yS,"$$invalidate"),yS.forEach(u),_e=$($S," is the secret behind reactivity in Svelte."),$S.forEach(u),Ue=y(ES),qe=b(ES,"P",{});var wS=g(qe);Ge=$(wS,"Whenever a variable is"),wS.forEach(u),Be=y(ES),Fe=b(ES,"UL",{});var OS=g(Fe);Je=b(OS,"LI",{});var SS=g(Je);ze=$(SS,"reassigned "),We=b(SS,"CODE",{});var TS=g(We);Ye=$(TS,"(foo = 1)"),TS.forEach(u),SS.forEach(u),Ve=y(OS),Ke=b(OS,"LI",{});var LS=g(Ke);Ze=$(LS,"mutated "),Qe=b(LS,"CODE",{});var NS=g(Qe);Xe=$(NS,"(foo.bar = 1)"),NS.forEach(u),LS.forEach(u),OS.forEach(u),ao=y(ES),no=b(ES,"P",{});var PS=g(no);so=$(PS,"Svelte will wrap the assignment or update around with the "),to=b(PS,"CODE",{});var xS=g(to);eo=$(xS,"$$invalidate"),xS.forEach(u),oo=$(PS," function:"),PS.forEach(u),co=y(ES),po=b(ES,"PRE",{class:!0}),g(po).forEach(u),ro=y(ES),io=b(ES,"P",{});var CS=g(io);lo=$(CS,"the "),uo=b(CS,"CODE",{});var DS=g(uo);ho=$(DS,"$$invalidate"),DS.forEach(u),fo=$(CS," function will:"),CS.forEach(u),ko=y(ES),vo=b(ES,"OL",{});var AS=g(vo);mo=b(AS,"LI",{});var IS=g(mo);Eo=$(IS,"update the variable in "),go=b(IS,"CODE",{});var jS=g(go);bo=$(jS,"$$.ctx"),jS.forEach(u),IS.forEach(u),$o=y(AS),yo=b(AS,"LI",{});var RS=g(yo);wo=$(RS,"mark the variable in "),Oo=b(RS,"CODE",{});var MS=g(Oo);So=$(MS,"$$.dirty"),MS.forEach(u),RS.forEach(u),To=y(AS),Lo=b(AS,"LI",{});var HS=g(Lo);No=$(HS,"schedule an update"),HS.forEach(u),Po=y(AS),xo=b(AS,"LI",{});var _S=g(xo);Co=$(_S,"return the value of the assignment or update expression"),_S.forEach(u),AS.forEach(u),Do=y(ES),Ao=b(ES,"PRE",{class:!0}),g(Ao).forEach(u),Io=y(ES),jo=b(ES,"P",{});var US=g(jo);Ro=b(US,"A",{href:!0,rel:!0});var qS=g(Ro);Mo=$(qS,"Source code"),qS.forEach(u),US.forEach(u),Ho=y(ES),_o=b(ES,"P",{});var GS=g(_o);Uo=$(GS,"One interesting note about the function "),qo=b(GS,"CODE",{});var BS=g(qo);Go=$(BS,"$$invalidate"),BS.forEach(u),Bo=$(GS," is that, it wraps around the assignment or update expression and returns what the expression evaluates to."),GS.forEach(u),Fo=y(ES),Jo=b(ES,"P",{});var FS=g(Jo);zo=$(FS,"This makes "),Wo=b(FS,"CODE",{});var JS=g(Wo);Yo=$(JS,"$$invalidate"),JS.forEach(u),Vo=$(FS," chainable:"),FS.forEach(u),Ko=y(ES),Zo=b(ES,"PRE",{class:!0}),g(Zo).forEach(u),Qo=y(ES),Xo=b(ES,"P",{});var zS=g(Xo);ac=$(zS,"It seemed complex when there's a lot of assignment or update expressions in 1 statement! 🙈"),zS.forEach(u),nc=y(ES),sc=b(ES,"P",{});var WS=g(sc);tc=$(WS,"The 2nd argument of "),ec=b(WS,"CODE",{});var YS=g(ec);oc=$(YS,"$$invalidate"),YS.forEach(u),cc=$(WS," is the assignment or update expressions verbatim. But if it contains any assignment or update sub-expressions, we recursively wrap it with "),pc=b(WS,"CODE",{});var VS=g(pc);rc=$(VS,"$$invalidate"),VS.forEach(u),ic=$(WS,"."),WS.forEach(u),lc=y(ES),uc=b(ES,"P",{});var KS=g(uc);hc=$(KS,"In case where the assignment expression changes a property of an object, we pass the object in as a 3rd argument of the "),dc=b(KS,"CODE",{});var ZS=g(dc);fc=$(ZS,"$$invalidate"),ZS.forEach(u),kc=$(KS," function, eg:"),KS.forEach(u),vc=y(ES),mc=b(ES,"PRE",{class:!0}),g(mc).forEach(u),Ec=y(ES),gc=b(ES,"P",{});var QS=g(gc);bc=$(QS,"So that, we update the "),$c=b(QS,"CODE",{});var XS=g($c);yc=$(XS,'"obj"'),XS.forEach(u),wc=$(QS," variable to "),Oc=b(QS,"CODE",{});var aT=g(Oc);Sc=$(aT,"obj"),aT.forEach(u),Tc=$(QS," instead of the value of the 2nd argument, "),Lc=b(QS,"CODE",{});var nT=g(Lc);Nc=$(nT,'"hello"'),nT.forEach(u),Pc=$(QS,"."),QS.forEach(u),ES.forEach(u),xc=y(a),Cc=b(a,"SECTION",{});var sT=g(Cc);Dc=b(sT,"H3",{});var tT=g(Dc);Ac=b(tT,"A",{href:!0,id:!0});var eT=g(Ac);Ic=$(eT,"schedule_update"),eT.forEach(u),tT.forEach(u),jc=y(sT),Rc=b(sT,"P",{});var oT=g(Rc);Mc=b(oT,"CODE",{});var cT=g(Mc);Hc=$(cT,"schedule_update"),cT.forEach(u),_c=$(oT," schedules Svelte to update the DOM with the changes made thus far."),oT.forEach(u),Uc=y(sT),qc=b(sT,"P",{});var pT=g(qc);Gc=$(pT,"Svelte, at the point of writing ("),Bc=b(pT,"A",{href:!0,rel:!0});var rT=g(Bc);Fc=$(rT,"v3.20.1"),rT.forEach(u),Jc=$(pT,"), uses "),zc=b(pT,"A",{href:!0,rel:!0});var iT=g(zc);Wc=$(iT,"microtask queue"),iT.forEach(u),Yc=$(pT," to batch change updates. The actual DOM update happens in the next microtask, so that any synchronous "),Vc=b(pT,"CODE",{});var lT=g(Vc);Kc=$(lT,"$$invalidate"),lT.forEach(u),Zc=$(pT," operations that happen within the same task get batched into the next DOM update."),pT.forEach(u),Qc=y(sT),Xc=b(sT,"P",{});var uT=g(Xc);ap=$(uT,"To schedule a next microtask, Svelte uses the Promise callback."),uT.forEach(u),np=y(sT),sp=b(sT,"PRE",{class:!0}),g(sp).forEach(u),tp=y(sT),ep=b(sT,"P",{});var hT=g(ep);op=$(hT,"In "),cp=b(hT,"CODE",{});var dT=g(cp);pp=$(dT,"flush"),dT.forEach(u),rp=$(hT,", we call update for each component marked dirty:"),hT.forEach(u),ip=y(sT),lp=b(sT,"PRE",{class:!0}),g(lp).forEach(u),up=y(sT),hp=b(sT,"P",{});var fT=g(hp);dp=b(fT,"A",{href:!0,rel:!0});var kT=g(dp);fp=$(kT,"Source code"),kT.forEach(u),fT.forEach(u),kp=y(sT),vp=b(sT,"P",{});var vT=g(vp);mp=$(vT,"So, if you write a Svelte component like this:"),vT.forEach(u),Ep=y(sT),gp=b(sT,"PRE",{class:!0}),g(gp).forEach(u),bp=y(sT),$p=b(sT,"P",{});var mT=g($p);yp=b(mT,"A",{href:!0,rel:!0});var ET=g(yp);wp=$(ET,"Svelte REPL"),ET.forEach(u),mT.forEach(u),Op=y(sT),Sp=b(sT,"P",{});var gT=g(Sp);Tp=$(gT,"The DOM update for the "),Lp=b(gT,"CODE",{});var bT=g(Lp);Np=$(bT,"givenName"),bT.forEach(u),Pp=$(gT," and "),xp=b(gT,"CODE",{});var $T=g(xp);Cp=$($T,"familyName"),$T.forEach(u),Dp=$(gT," happens in the same microtask:"),gT.forEach(u),Ap=y(sT),Ip=b(sT,"OL",{});var yT=g(Ip);jp=b(yT,"LI",{});var wT=g(jp);Rp=$(wT,"Click on the "),Mp=b(wT,"STRONG",{});var OT=g(Mp);Hp=$(OT,'"Update"'),OT.forEach(u),_p=$(wT," to call the "),Up=b(wT,"CODE",{});var ST=g(Up);qp=$(ST,"update"),ST.forEach(u),Gp=$(wT," function"),wT.forEach(u),Bp=y(yT),Fp=b(yT,"LI",{});var TT=g(Fp);Jp=b(TT,"CODE",{});var LT=g(Jp);zp=$(LT,"$$invalidate('givenName', givenName = 'Li Hau')"),LT.forEach(u),TT.forEach(u),Wp=y(yT),Yp=b(yT,"LI",{});var NT=g(Yp);Vp=$(NT,"Mark the variable "),Kp=b(NT,"CODE",{});var PT=g(Kp);Zp=$(PT,"givenName"),PT.forEach(u),Qp=$(NT," dirty, "),Xp=b(NT,"CODE",{});var xT=g(Xp);ar=$(xT,"$$.dirty['givenName'] = true"),xT.forEach(u),NT.forEach(u),nr=y(yT),sr=b(yT,"LI",{});var CT=g(sr);tr=$(CT,"Schedule an update, "),er=b(CT,"CODE",{});var DT=g(er);or=$(DT,"schedule_update()"),DT.forEach(u),CT.forEach(u),cr=y(yT),pr=b(yT,"LI",{});var AT=g(pr);rr=$(AT,"Since it's the first update in the call stack, push the "),ir=b(AT,"CODE",{});var IT=g(ir);lr=$(IT,"flush"),IT.forEach(u),ur=$(AT," function into the microtask queue"),AT.forEach(u),hr=y(yT),dr=b(yT,"LI",{});var jT=g(dr);fr=b(jT,"CODE",{});var RT=g(fr);kr=$(RT,"$$invalidate('familyName', familyName = 'Tan')"),RT.forEach(u),jT.forEach(u),vr=y(yT),mr=b(yT,"LI",{});var MT=g(mr);Er=$(MT,"Mark the variable "),gr=b(MT,"CODE",{});var HT=g(gr);br=$(HT,"familyName"),HT.forEach(u),$r=$(MT," dirty, "),yr=b(MT,"CODE",{});var _T=g(yr);wr=$(_T,"$$.dirty['familyName'] = true"),_T.forEach(u),MT.forEach(u),Or=y(yT),Sr=b(yT,"LI",{});var UT=g(Sr);Tr=$(UT,"Schedule an update, "),Lr=b(UT,"CODE",{});var qT=g(Lr);Nr=$(qT,"schedule_update()"),qT.forEach(u),UT.forEach(u),Pr=y(yT),xr=b(yT,"LI",{});var GT=g(xr);Cr=$(GT,"Since "),Dr=b(GT,"CODE",{});var BT=g(Dr);Ar=$(BT,"update_scheduled = true"),BT.forEach(u),Ir=$(GT,", do nothing."),GT.forEach(u),jr=y(yT),Rr=b(yT,"LI",{});var FT=g(Rr);Mr=b(FT,"STRONG",{});var JT=g(Mr);Hr=$(JT,"-- End of task --"),JT.forEach(u),FT.forEach(u),_r=y(yT),Ur=b(yT,"LI",{});var zT=g(Ur);qr=b(zT,"STRONG",{});var WT=g(qr);Gr=$(WT,"-- Start of microtask--"),WT.forEach(u),zT.forEach(u),Br=y(yT),Fr=b(yT,"LI",{});var YT=g(Fr);Jr=b(YT,"CODE",{});var VT=g(Jr);zr=$(VT,"flush()"),VT.forEach(u),Wr=$(YT," calls "),Yr=b(YT,"CODE",{});var KT=g(Yr);Vr=$(KT,"update()"),KT.forEach(u),Kr=$(YT," for each component marked dirty"),YT.forEach(u),Zr=y(yT),Qr=b(yT,"LI",{});var ZT=g(Qr);Xr=$(ZT,"Calls "),ai=b(ZT,"CODE",{});var QT=g(ai);ni=$(QT,"$$.fragment.p($$.dirty, $$.ctx)"),QT.forEach(u),si=$(ZT,"."),ti=b(ZT,"UL",{});var XT=g(ti);ei=b(XT,"LI",{});var aL=g(ei);oi=b(aL,"CODE",{});var nL=g(oi);ci=$(nL,"$$.dirty"),nL.forEach(u),pi=$(aL," is now "),ri=b(aL,"CODE",{});var sL=g(ri);ii=$(sL,"{ givenName: true, familyName: true }"),sL.forEach(u),aL.forEach(u),li=y(XT),ui=b(XT,"LI",{});var tL=g(ui);hi=b(tL,"CODE",{});var eL=g(hi);di=$(eL,"$$.ctx"),eL.forEach(u),fi=$(tL," is now "),ki=b(tL,"CODE",{});var oL=g(ki);vi=$(oL,"{ givenName: 'Li Hau', familyName: 'Tan' }"),oL.forEach(u),tL.forEach(u),XT.forEach(u),ZT.forEach(u),mi=y(yT),Ei=b(yT,"LI",{});var cL=g(Ei);gi=$(cL,"In "),bi=b(cL,"CODE",{});var pL=g(bi);$i=$(pL,"function p(dirty, ctx)"),pL.forEach(u),yi=$(cL,","),wi=b(cL,"UL",{});var rL=g(wi);Oi=b(rL,"LI",{});var iL=g(Oi);Si=$(iL,"Update the 1st text node to "),Ti=b(iL,"CODE",{});var lL=g(Ti);Li=$(lL,"$$.ctx['givenName']"),lL.forEach(u),Ni=$(iL," if "),Pi=b(iL,"CODE",{});var uL=g(Pi);xi=$(uL,"$$.dirty['givenName'] === true"),uL.forEach(u),iL.forEach(u),Ci=y(rL),Di=b(rL,"LI",{});var hL=g(Di);Ai=$(hL,"Update the 2nd text node to "),Ii=b(hL,"CODE",{});var dL=g(Ii);ji=$(dL,"$$.ctx['familyName']"),dL.forEach(u),Ri=$(hL," if "),Mi=b(hL,"CODE",{});var fL=g(Mi);Hi=$(fL,"$$.dirty['familyName'] === true"),fL.forEach(u),hL.forEach(u),rL.forEach(u),cL.forEach(u),_i=y(yT),Ui=b(yT,"LI",{});var kL=g(Ui);qi=$(kL,"Resets the "),Gi=b(kL,"CODE",{});var vL=g(Gi);Bi=$(vL,"$$.dirty"),vL.forEach(u),Fi=$(kL," to "),Ji=b(kL,"CODE",{});var mL=g(Ji);zi=$(mL,"null"),mL.forEach(u),kL.forEach(u),Wi=y(yT),Yi=b(yT,"LI",{});var EL=g(Yi);Vi=$(EL,"..."),EL.forEach(u),Ki=y(yT),Zi=b(yT,"LI",{});var gL=g(Zi);Qi=b(gL,"STRONG",{});var bL=g(Qi);Xi=$(bL,"-- End of microtask--"),bL.forEach(u),gL.forEach(u),yT.forEach(u),sT.forEach(u),al=y(a),nl=b(a,"SECTION",{});var $L=g(nl);sl=b($L,"H4",{});var yL=g(sl);tl=b(yL,"A",{href:!0,id:!0});var wL=g(tl);el=$(wL,"tl/dr:"),wL.forEach(u),yL.forEach(u),ol=y($L),cl=b($L,"UL",{});var OL=g(cl);pl=b(OL,"LI",{});var SL=g(pl);rl=$(SL,"For each assignment or update, Svelte calls "),il=b(SL,"CODE",{});var TL=g(il);ll=$(TL,"$$invalidate"),TL.forEach(u),ul=$(SL," to update the variable in "),hl=b(SL,"CODE",{});var LL=g(hl);dl=$(LL,"$$.ctx"),LL.forEach(u),fl=$(SL," and mark the variable dirty in "),kl=b(SL,"CODE",{});var NL=g(kl);vl=$(NL,"$$.dirty"),NL.forEach(u),ml=$(SL,"."),SL.forEach(u),El=y(OL),gl=b(OL,"LI",{});var PL=g(gl);bl=$(PL,"The acutal DOM update is batched into the next microtask queue."),PL.forEach(u),$l=y(OL),yl=b(OL,"LI",{});var xL=g(yl);wl=$(xL,"To update the DOM for each component, the component "),Ol=b(xL,"CODE",{});var CL=g(Ol);Sl=$(CL,"$$.fragment.p($$.diry, $$.ctx)"),CL.forEach(u),Tl=$(xL," is called."),xL.forEach(u),Ll=y(OL),Nl=b(OL,"LI",{});var DL=g(Nl);Pl=$(DL,"After the DOM update, the "),xl=b(DL,"CODE",{});var AL=g(xl);Cl=$(AL,"$$.dirty"),AL.forEach(u),Dl=$(DL," is reset to "),Al=b(DL,"CODE",{});var IL=g(Al);Il=$(IL,"null"),IL.forEach(u),jl=$(DL,"."),DL.forEach(u),OL.forEach(u),$L.forEach(u),Rl=y(a),Ml=b(a,"SECTION",{});var jL=g(Ml);Hl=b(jL,"H2",{});var RL=g(Hl);_l=b(RL,"A",{href:!0,id:!0});var ML=g(_l);Ul=$(ML,"v3.16.0"),ML.forEach(u),RL.forEach(u),ql=y(jL),Gl=b(jL,"P",{});var HL=g(Gl);Bl=$(HL,"One big change in v3.16.0 is the PR "),Fl=b(HL,"A",{href:!0,rel:!0});var _L=g(Fl);Jl=$(_L,"#3945"),_L.forEach(u),zl=$(HL,", namely "),Wl=b(HL,"STRONG",{});var UL=g(Wl);Yl=$(UL,"bitmask-based change tracking"),UL.forEach(u),Vl=$(HL,"."),HL.forEach(u),Kl=y(jL),Zl=b(jL,"P",{});var qL=g(Zl);Ql=$(qL,"Instead of marking the variable dirty using an object:"),qL.forEach(u),Xl=y(jL),au=b(jL,"PRE",{class:!0}),g(au).forEach(u),nu=y(jL),su=b(jL,"P",{});var GL=g(su);tu=$(GL,"Svelte assign each variable an index:"),GL.forEach(u),eu=y(jL),ou=b(jL,"PRE",{class:!0}),g(ou).forEach(u),cu=y(jL),pu=b(jL,"P",{});var BL=g(pu);ru=$(BL,"and uses "),iu=b(BL,"A",{href:!0,rel:!0});var FL=g(iu);lu=$(FL,"bitmask"),FL.forEach(u),uu=$(BL," to store the dirty information:"),BL.forEach(u),hu=y(jL),du=b(jL,"PRE",{class:!0}),g(du).forEach(u),fu=y(jL),ku=b(jL,"P",{});var JL=g(ku);vu=$(JL,"which is far more compact than the previous compiled code."),JL.forEach(u),jL.forEach(u),mu=y(a),Eu=b(a,"SECTION",{});var zL=g(Eu);gu=b(zL,"H3",{});var WL=g(gu);bu=b(WL,"A",{href:!0,id:!0});var YL=g(bu);$u=$(YL,"Bitmask"),YL.forEach(u),WL.forEach(u),yu=y(zL),wu=b(zL,"P",{});var VL=g(wu);Ou=$(VL,"For those who don't understand, allow me to quickly explain what it is."),VL.forEach(u),Su=y(zL),Tu=b(zL,"P",{});var KL=g(Tu);Lu=$(KL,"Of course, if you want to learn more about it, feel free to read a more detailed explanation, like "),Nu=b(KL,"A",{href:!0,rel:!0});var ZL=g(Nu);Pu=$(ZL,"this"),ZL.forEach(u),xu=$(KL," and "),Cu=b(KL,"A",{href:!0,rel:!0});var QL=g(Cu);Du=$(QL,"this"),QL.forEach(u),Au=$(KL,"."),KL.forEach(u),Iu=y(zL),ju=b(zL,"P",{});var XL=g(ju);Ru=$(XL,"The most compact way of representing a group of "),Mu=b(XL,"CODE",{});var aN=g(Mu);Hu=$(aN,"true"),aN.forEach(u),_u=$(XL," or "),Uu=b(XL,"CODE",{});var nN=g(Uu);qu=$(nN,"false"),nN.forEach(u),Gu=$(XL," is to use bits. If the bit is "),Bu=b(XL,"CODE",{});var sN=g(Bu);Fu=$(sN,"1"),sN.forEach(u),Ju=$(XL," it is "),zu=b(XL,"CODE",{});var tN=g(zu);Wu=$(tN,"true"),tN.forEach(u),Yu=$(XL," and if it is "),Vu=b(XL,"CODE",{});var eN=g(Vu);Ku=$(eN,"0"),eN.forEach(u),Zu=$(XL," it is "),Qu=b(XL,"CODE",{});var oN=g(Qu);Xu=$(oN,"false"),oN.forEach(u),ah=$(XL,"."),XL.forEach(u),nh=y(zL),sh=b(zL,"P",{});var cN=g(sh);th=$(cN,"A number can be represented in binary, "),eh=b(cN,"STRONG",{});var pN=g(eh);oh=$(pN,"5"),pN.forEach(u),ch=$(cN," is "),ph=b(cN,"CODE",{});var rN=g(ph);rh=$(rN,"0b0101"),rN.forEach(u),ih=$(cN," in binary."),cN.forEach(u),lh=y(zL),uh=b(zL,"P",{});var iN=g(uh);hh=$(iN,"If "),dh=b(iN,"STRONG",{});var lN=g(dh);fh=$(lN,"5"),lN.forEach(u),kh=$(iN," is represented in a 4-bit binary, then it can store 4 boolean values, with the 0th and 2nd bit as "),vh=b(iN,"CODE",{});var uN=g(vh);mh=$(uN,"true"),uN.forEach(u),Eh=$(iN," and 1st and 3rd bit as "),gh=b(iN,"CODE",{});var hN=g(gh);bh=$(hN,"false"),hN.forEach(u),$h=$(iN,", (reading from the right to left, from "),yh=b(iN,"A",{href:!0,rel:!0});var dN=g(yh);wh=$(dN,"least significant bit"),dN.forEach(u),Oh=$(iN," to the "),Sh=b(iN,"A",{href:!0,rel:!0});var fN=g(Sh);Th=$(fN,"most significant bit"),fN.forEach(u),Lh=$(iN,")."),iN.forEach(u),Nh=y(zL),Ph=b(zL,"P",{});var kN=g(Ph);xh=b(kN,"STRONG",{});var vN=g(xh);Ch=$(vN,"How many boolean values can a number store?"),vN.forEach(u),kN.forEach(u),Dh=y(zL),Ah=b(zL,"P",{});var mN=g(Ah);Ih=$(mN,"That depends on the language, a 16-bit integer in Java can store 16 boolean values."),mN.forEach(u),jh=y(zL),Rh=b(zL,"P",{});var EN=g(Rh);Mh=$(EN,"In JavaScript, numbers can are "),Hh=b(EN,"A",{href:!0,rel:!0});var gN=g(Hh);_h=$(gN,"represented in 64 bits"),gN.forEach(u),Uh=$(EN,". However, when using "),qh=b(EN,"A",{href:!0,rel:!0});var bN=g(qh);Gh=$(bN,"bitwise operations"),bN.forEach(u),Bh=$(EN," on the number, JavaScript will treat the number as 32 bits."),EN.forEach(u),Fh=y(zL),Jh=b(zL,"P",{});var $N=g(Jh);zh=$($N,"To inspect or modify the boolean value stored in a number, we use "),Wh=b($N,"A",{href:!0,rel:!0});var yN=g(Wh);Yh=$(yN,"bitwise operations"),yN.forEach(u),Vh=$($N,"."),$N.forEach(u),Kh=y(zL),Zh=b(zL,"PRE",{class:!0}),g(Zh).forEach(u),Qh=y(zL),Xh=b(zL,"P",{});var wN=g(Xh);ad=$(wN,"The 2nd operand we use in the bitwise operation, is like a "),nd=b(wN,"A",{href:!0,rel:!0});var ON=g(nd);sd=$(ON,"mask"),ON.forEach(u),td=$(wN," that allow us to target a specific bit in the 1st number, that stores our boolean values."),wN.forEach(u),ed=y(zL),od=b(zL,"P",{});var SN=g(od);cd=$(SN,"We call the mask, "),pd=b(SN,"STRONG",{});var TN=g(pd);rd=$(TN,"bitmask"),TN.forEach(u),id=$(SN,"."),SN.forEach(u),zL.forEach(u),ld=y(a),ud=b(a,"SECTION",{});var LN=g(ud);hd=b(LN,"H3",{});var NN=g(hd);dd=b(NN,"A",{href:!0,id:!0});var PN=g(dd);fd=$(PN,"Bitmask in Svelte"),PN.forEach(u),NN.forEach(u),kd=y(LN),vd=b(LN,"P",{});var xN=g(vd);md=$(xN,"As mentioned earlier, we assign each variable an index:"),xN.forEach(u),Ed=y(LN),gd=b(LN,"PRE",{class:!0}),g(gd).forEach(u),bd=y(LN),$d=b(LN,"P",{});var CN=g($d);yd=$(CN,"So instead of returning the instance variable as an JavaScript Object, we now return it as an JavaScript Array:"),CN.forEach(u),wd=y(LN),Od=b(LN,"PRE",{class:!0}),g(Od).forEach(u),Sd=y(LN),Td=b(LN,"P",{});var DN=g(Td);Ld=$(DN,"The variable is accessed via "),Nd=b(DN,"STRONG",{});var AN=g(Nd);Pd=$(AN,"index"),AN.forEach(u),xd=$(DN,", "),Cd=b(DN,"CODE",{});var IN=g(Cd);Dd=$(IN,"$$.ctx[index]"),IN.forEach(u),Ad=$(DN,", instead of "),Id=b(DN,"STRONG",{});var jN=g(Id);jd=$(jN,"variable name"),jN.forEach(u),Rd=$(DN,":"),DN.forEach(u),Md=y(LN),Hd=b(LN,"PRE",{class:!0}),g(Hd).forEach(u),_d=y(LN),Ud=b(LN,"P",{});var RN=g(Ud);qd=$(RN,"The "),Gd=b(RN,"CODE",{});var MN=g(Gd);Bd=$(MN,"$$invalidate"),MN.forEach(u),Fd=$(RN," function works the same, except it takes in "),Jd=b(RN,"STRONG",{});var HN=g(Jd);zd=$(HN,"index"),HN.forEach(u),Wd=$(RN," instead of "),Yd=b(RN,"STRONG",{});var _N=g(Yd);Vd=$(_N,"variable name"),_N.forEach(u),Kd=$(RN,":"),RN.forEach(u),Zd=y(LN),Qd=b(LN,"PRE",{class:!0}),g(Qd).forEach(u),Xd=y(LN),af=b(LN,"P",{});var UN=g(af);nf=b(UN,"CODE",{});var qN=g(nf);sf=$(qN,"$$.dirty"),qN.forEach(u),tf=$(UN," now stores a list of numbers. Each number carries 31 boolean values, each boolean value indicates whether the variable of that index is dirty or not."),UN.forEach(u),ef=y(LN),of=b(LN,"P",{});var GN=g(of);cf=$(GN,"To set a variable as dirty, we use bitwise operation:"),GN.forEach(u),pf=y(LN),rf=b(LN,"PRE",{class:!0}),g(rf).forEach(u),lf=y(LN),uf=b(LN,"P",{});var BN=g(uf);hf=$(BN,"And to verify whether a variable is dirty, we use bitwise operation too!"),BN.forEach(u),df=y(LN),ff=b(LN,"PRE",{class:!0}),g(ff).forEach(u),kf=y(LN),vf=b(LN,"P",{});var FN=g(vf);mf=$(FN,"With using bitmask, "),Ef=b(FN,"CODE",{});var JN=g(Ef);gf=$(JN,"$$.dirty"),JN.forEach(u),bf=$(FN," is now reset to "),$f=b(FN,"CODE",{});var zN=g($f);yf=$(zN,"[-1]"),zN.forEach(u),wf=$(FN," instead of "),Of=b(FN,"CODE",{});var WN=g(Of);Sf=$(WN,"null"),WN.forEach(u),Tf=$(FN,"."),FN.forEach(u),Lf=y(LN),Nf=b(LN,"P",{});var YN=g(Nf);Pf=b(YN,"STRONG",{});var VN=g(Pf);xf=$(VN,"Trivia:"),VN.forEach(u),Cf=y(YN),Df=b(YN,"CODE",{});var KN=g(Df);Af=$(KN,"-1"),KN.forEach(u),If=$(YN," is "),jf=b(YN,"CODE",{});var ZN=g(jf);Rf=$(ZN,"0b1111_1111"),ZN.forEach(u),Mf=$(YN," in binary, where all the bits are "),Hf=b(YN,"CODE",{});var QN=g(Hf);_f=$(QN,"1"),QN.forEach(u),Uf=$(YN,"."),YN.forEach(u),LN.forEach(u),qf=y(a),Gf=b(a,"SECTION",{});var XN=g(Gf);Bf=b(XN,"H4",{});var aP=g(Bf);Ff=b(aP,"A",{href:!0,id:!0});var nP=g(Ff);Jf=$(nP,"Destructuring "),zf=b(nP,"STRONG",{});var sP=g(zf);Wf=$(sP,"$$.dirty"),sP.forEach(u),nP.forEach(u),aP.forEach(u),Yf=y(XN),Vf=b(XN,"P",{});var tP=g(Vf);Kf=$(tP,"One code-size optimisation that Svelte does is to always destructure the "),Zf=b(tP,"CODE",{});var eP=g(Zf);Qf=$(eP,"dirty"),eP.forEach(u),Xf=$(tP," array in the "),ak=b(tP,"STRONG",{});var oP=g(ak);nk=$(oP,"u_p_date function"),oP.forEach(u),sk=$(tP," if there's less than 32 variables, since we will always access "),tk=b(tP,"CODE",{});var cP=g(tk);ek=$(cP,"dirty[0]"),cP.forEach(u),ok=$(tP," anyway:"),tP.forEach(u),ck=y(XN),pk=b(XN,"PRE",{class:!0}),g(pk).forEach(u),XN.forEach(u),rk=y(a),ik=b(a,"SECTION",{});var pP=g(ik);lk=b(pP,"H4",{});var rP=g(lk);uk=b(rP,"A",{href:!0,id:!0});var iP=g(uk);hk=$(iP,"tl/dr:"),iP.forEach(u),rP.forEach(u),dk=y(pP),fk=b(pP,"UL",{});var lP=g(fk);kk=b(lP,"LI",{});var uP=g(kk);vk=$(uP,"The underlying mechanism for "),mk=b(uP,"CODE",{});var hP=g(mk);Ek=$(hP,"$$invalidate"),hP.forEach(u),gk=$(uP," and "),bk=b(uP,"CODE",{});var dP=g(bk);$k=$(dP,"schedule_update"),dP.forEach(u),yk=$(uP," does not change"),uP.forEach(u),wk=y(lP),Ok=b(lP,"LI",{});var fP=g(Ok);Sk=$(fP,"Using bitmask, the compiled code is much compact"),fP.forEach(u),lP.forEach(u),pP.forEach(u),Tk=y(a),Lk=b(a,"SECTION",{});var kP=g(Lk);Nk=b(kP,"H2",{});var vP=g(Nk);Pk=b(vP,"A",{href:!0,id:!0});var mP=g(Pk);xk=$(mP,"Reactive Declaration"),mP.forEach(u),vP.forEach(u),Ck=y(kP),Dk=b(kP,"P",{});var EP=g(Dk);Ak=$(EP,"Svelte allow us to declare reactive values via the "),Ik=b(EP,"A",{href:!0,rel:!0});var gP=g(Ik);jk=$(gP,"labeled statement"),gP.forEach(u),Rk=$(EP,", "),Mk=b(EP,"CODE",{});var bP=g(Mk);Hk=$(bP,"$:"),bP.forEach(u),EP.forEach(u),_k=y(kP),Uk=b(kP,"PRE",{class:!0}),g(Uk).forEach(u),qk=y(kP),Gk=b(kP,"P",{});var $P=g(Gk);Bk=b($P,"A",{href:!0,rel:!0});var yP=g(Bk);Fk=$(yP,"Svelte REPL"),yP.forEach(u),$P.forEach(u),Jk=y(kP),zk=b(kP,"P",{});var wP=g(zk);Wk=$(wP,"If you look at the compiled output, you would find out that the declarative statements appeared in the "),Yk=b(wP,"A",{href:!0});var OP=g(Yk);Vk=b(OP,"CODE",{});var SP=g(Vk);Kk=$(SP,"instance"),SP.forEach(u),Zk=$(OP," function"),OP.forEach(u),Qk=$(wP,":"),wP.forEach(u),Xk=y(kP),av=b(kP,"PRE",{class:!0}),g(av).forEach(u),nv=y(kP),sv=b(kP,"P",{});var TP=g(sv);tv=$(TP,"Try reorder the reactive declarations and observe the change in the compiled output:"),TP.forEach(u),ev=y(kP),ov=b(kP,"PRE",{class:!0}),g(ov).forEach(u),cv=y(kP),pv=b(kP,"P",{});var LP=g(pv);rv=b(LP,"A",{href:!0,rel:!0});var NP=g(rv);iv=$(NP,"Svelte REPL"),NP.forEach(u),LP.forEach(u),lv=y(kP),uv=b(kP,"PRE",{class:!0}),g(uv).forEach(u),hv=y(kP),dv=b(kP,"P",{});var PP=g(dv);fv=$(PP,"Some observations:"),PP.forEach(u),kv=y(kP),vv=b(kP,"UL",{});var xP=g(vv);mv=b(xP,"LI",{});var CP=g(mv);Ev=$(CP,"When there are reactive declarations, Svelte defines a custom "),gv=b(CP,"CODE",{});var DP=g(gv);bv=$(DP,"$$.update"),DP.forEach(u),$v=$(CP," method."),yv=b(CP,"UL",{});var AP=g(yv);wv=b(AP,"LI",{});var IP=g(wv);Ov=b(IP,"CODE",{});var jP=g(Ov);Sv=$(jP,"$$.update"),jP.forEach(u),Tv=$(IP," is a "),Lv=b(IP,"A",{href:!0,rel:!0});var RP=g(Lv);Nv=$(RP,"no-op function"),RP.forEach(u),Pv=$(IP," by default. (See "),xv=b(IP,"A",{href:!0,rel:!0});var MP=g(xv);Cv=$(MP,"src/runtime/internal/Component.ts"),MP.forEach(u),Dv=$(IP,")"),IP.forEach(u),AP.forEach(u),CP.forEach(u),Av=y(xP),Iv=b(xP,"LI",{});var HP=g(Iv);jv=$(HP,"Svelte uses "),Rv=b(HP,"CODE",{});var _P=g(Rv);Mv=$(_P,"$$invalidate"),_P.forEach(u),Hv=$(HP," to update the value of a reactive variable too."),HP.forEach(u),_v=y(xP),Uv=b(xP,"LI",{});var UP=g(Uv);qv=$(UP,"Svelte sorts the reactive declarations and statements, based on the dependency relationship between the declarations and statements"),Gv=b(UP,"UL",{});var qP=g(Gv);Bv=b(qP,"LI",{});var GP=g(Bv);Fv=b(GP,"CODE",{});var BP=g(Fv);Jv=$(BP,"quadrupled"),BP.forEach(u),zv=$(GP," depends on "),Wv=b(GP,"CODE",{});var FP=g(Wv);Yv=$(FP,"doubled"),FP.forEach(u),Vv=$(GP,", so "),Kv=b(GP,"CODE",{});var JP=g(Kv);Zv=$(JP,"quadrupled"),JP.forEach(u),Qv=$(GP," is evaluated and "),Xv=b(GP,"CODE",{});var zP=g(Xv);am=$(zP,"$$invalidate"),zP.forEach(u),nm=$(GP,"d after "),sm=b(GP,"CODE",{});var WP=g(sm);tm=$(WP,"doubled"),WP.forEach(u),em=$(GP,"."),GP.forEach(u),qP.forEach(u),UP.forEach(u),xP.forEach(u),om=y(kP),cm=b(kP,"P",{});var YP=g(cm);pm=$(YP,"Since all reactive declarations and statements are grouped into the "),rm=b(YP,"CODE",{});var VP=g(rm);im=$(VP,"$$.update"),VP.forEach(u),lm=$(YP," method, and also the fact that Svelte will sort the declarations and statements according to their dependency relationship, it is irrelevant of the location or the order you declared them."),YP.forEach(u),um=y(kP),hm=b(kP,"P",{});var KP=g(hm);dm=$(KP,"The following component still works:"),KP.forEach(u),fm=y(kP),km=b(kP,"PRE",{class:!0}),g(km).forEach(u),vm=y(kP),mm=b(kP,"P",{});var ZP=g(mm);Em=b(ZP,"A",{href:!0,rel:!0});var QP=g(Em);gm=$(QP,"Svelte REPL"),QP.forEach(u),ZP.forEach(u),bm=y(kP),$m=b(kP,"P",{});var XP=g($m);ym=b(XP,"STRONG",{});var ax=g(ym);wm=$(ax,"The next thing you may ask, when is "),Om=b(ax,"CODE",{});var nx=g(Om);Sm=$(nx,"$$.update"),nx.forEach(u),Tm=$(ax," being called?"),ax.forEach(u),XP.forEach(u),Lm=y(kP),Nm=b(kP,"P",{});var sx=g(Nm);Pm=$(sx,"Remember the "),xm=b(sx,"CODE",{});var tx=g(xm);Cm=$(tx,"update"),tx.forEach(u),Dm=$(sx," function that gets called in the "),Am=b(sx,"CODE",{});var ex=g(Am);Im=$(ex,"flush"),ex.forEach(u),jm=$(sx," function?"),sx.forEach(u),Rm=y(kP),Mm=b(kP,"P",{});var ox=g(Mm);Hm=$(ox,"I put a "),_m=b(ox,"CODE",{});var cx=g(_m);Um=$(cx,"NOTE:"),cx.forEach(u),qm=$(ox," comment saying that it will be important later. Well, it is important now."),ox.forEach(u),Gm=y(kP),Bm=b(kP,"PRE",{class:!0}),g(Bm).forEach(u),Fm=y(kP),Jm=b(kP,"P",{});var px=g(Jm);zm=$(px,"The "),Wm=b(px,"CODE",{});var rx=g(Wm);Ym=$(rx,"$$.update"),rx.forEach(u),Vm=$(px," function gets called "),Km=b(px,"STRONG",{});var ix=g(Km);Zm=$(ix,"in the same microtask"),ix.forEach(u),Qm=$(px," with the DOM update, right before we called the "),Xm=b(px,"CODE",{});var lx=g(Xm);aE=$(lx,"$$.fragment.p()"),lx.forEach(u),nE=$(px," to update the DOM."),px.forEach(u),sE=y(kP),tE=b(kP,"P",{});var ux=g(tE);eE=$(ux,"The implication of the above fact is"),ux.forEach(u),kP.forEach(u),oE=y(a),cE=b(a,"SECTION",{});var hx=g(cE);pE=b(hx,"H4",{});var dx=g(pE);rE=b(dx,"A",{href:!0,id:!0});var fx=g(rE);iE=$(fx,"1. Execution of all reactive declarations and statements are batched"),fx.forEach(u),dx.forEach(u),lE=y(hx),uE=b(hx,"P",{});var kx=g(uE);hE=$(kx,"Just as how DOM updates are batched, reactive declarations and statements are batched too!"),kx.forEach(u),dE=y(hx),fE=b(hx,"PRE",{class:!0}),g(fE).forEach(u),kE=y(hx),vE=b(hx,"P",{});var vx=g(vE);mE=b(vx,"A",{href:!0,rel:!0});var mx=g(mE);EE=$(mx,"Svelte REPL"),mx.forEach(u),vx.forEach(u),gE=y(hx),bE=b(hx,"P",{});var Ex=g(bE);$E=$(Ex,"When "),yE=b(Ex,"CODE",{});var gx=g(yE);wE=$(gx,"update()"),gx.forEach(u),OE=$(Ex," get called,"),Ex.forEach(u),SE=y(hx),TE=b(hx,"OL",{});var bx=g(TE);LE=b(bx,"LI",{});var $x=g(LE);NE=$($x,"Similar to the "),PE=b($x,"A",{href:!0});var yx=g(PE);xE=$(yx,"flow described above"),yx.forEach(u),CE=$($x,", "),DE=b($x,"CODE",{});var wx=g(DE);AE=$(wx,"$$invalidate"),wx.forEach(u),IE=$($x," both "),jE=b($x,"STRONG",{});var Ox=g(jE);RE=$(Ox,'"givenName"'),Ox.forEach(u),ME=$($x," and "),HE=b($x,"STRONG",{});var Sx=g(HE);_E=$(Sx,'"familyName"'),Sx.forEach(u),UE=$($x,", and schedules an update"),$x.forEach(u),qE=y(bx),GE=b(bx,"LI",{});var Tx=g(GE);BE=b(Tx,"STRONG",{});var Lx=g(BE);FE=$(Lx,"-- End of task --"),Lx.forEach(u),Tx.forEach(u),JE=y(bx),zE=b(bx,"LI",{});var Nx=g(zE);WE=b(Nx,"STRONG",{});var Px=g(WE);YE=$(Px,"-- Start of microtask--"),Px.forEach(u),Nx.forEach(u),VE=y(bx),KE=b(bx,"LI",{});var xx=g(KE);ZE=b(xx,"CODE",{});var Cx=g(ZE);QE=$(Cx,"flush()"),Cx.forEach(u),XE=$(xx," calls "),ag=b(xx,"CODE",{});var Dx=g(ag);ng=$(Dx,"update()"),Dx.forEach(u),sg=$(xx," for each component marked dirty"),xx.forEach(u),tg=y(bx),eg=b(bx,"LI",{});var Ax=g(eg);og=$(Ax,"Runs "),cg=b(Ax,"CODE",{});var Ix=g(cg);pg=$(Ix,"$$.update()"),Ix.forEach(u),rg=b(Ax,"UL",{});var jx=g(rg);ig=b(jx,"LI",{});var Rx=g(ig);lg=$(Rx,"As "),ug=b(Rx,"STRONG",{});var Mx=g(ug);hg=$(Mx,'"givenName"'),Mx.forEach(u),dg=$(Rx," and "),fg=b(Rx,"STRONG",{});var Hx=g(fg);kg=$(Hx,'"familyName"'),Hx.forEach(u),vg=$(Rx," has changed, evaluates and "),mg=b(Rx,"CODE",{});var _x=g(mg);Eg=$(_x,"$$invalidate"),_x.forEach(u),gg=y(Rx),bg=b(Rx,"STRONG",{});var Ux=g(bg);$g=$(Ux,'"name"'),Ux.forEach(u),Rx.forEach(u),yg=y(jx),wg=b(jx,"LI",{});var qx=g(wg);Og=$(qx,"As "),Sg=b(qx,"STRONG",{});var Gx=g(Sg);Tg=$(Gx,'"name"'),Gx.forEach(u),Lg=$(qx," has changed, executes "),Ng=b(qx,"CODE",{});var Bx=g(Ng);Pg=$(Bx,"console.log('name', name);"),Bx.forEach(u),qx.forEach(u),jx.forEach(u),Ax.forEach(u),xg=y(bx),Cg=b(bx,"LI",{});var Fx=g(Cg);Dg=$(Fx,"Calls "),Ag=b(Fx,"CODE",{});var Jx=g(Ag);Ig=$(Jx,"$$.fragment.p(...)"),Jx.forEach(u),jg=$(Fx," to update the DOM."),Fx.forEach(u),bx.forEach(u),Rg=y(hx),Mg=b(hx,"P",{});var zx=g(Mg);Hg=$(zx,"As you can see, even though we've updated "),_g=b(zx,"CODE",{});var Wx=g(_g);Ug=$(Wx,"givenName"),Wx.forEach(u),qg=$(zx," and "),Gg=b(zx,"CODE",{});var Yx=g(Gg);Bg=$(Yx,"familyName"),Yx.forEach(u),Fg=$(zx,", we only evaluate "),Jg=b(zx,"CODE",{});var Vx=g(Jg);zg=$(Vx,"name"),Vx.forEach(u),Wg=$(zx," and executes "),Yg=b(zx,"CODE",{});var Kx=g(Yg);Vg=$(Kx,"console.log('name', name)"),Kx.forEach(u),Kg=y(zx),Zg=b(zx,"STRONG",{});var Zx=g(Zg);Qg=$(Zx,"once"),Zx.forEach(u),Xg=$(zx," instead of twice:"),zx.forEach(u),ab=y(hx),nb=b(hx,"PRE",{class:!0}),g(nb).forEach(u),hx.forEach(u),sb=y(a),tb=b(a,"SECTION",{});var Qx=g(tb);eb=b(Qx,"H4",{});var Xx=g(eb);ob=b(Xx,"A",{href:!0,id:!0});var aC=g(ob);cb=$(aC,"2. The value of reactive variable outside of reactive declarations and statements may not be up to date"),aC.forEach(u),Xx.forEach(u),pb=y(Qx),rb=b(Qx,"P",{});var nC=g(rb);ib=$(nC,"Because the reactive declarations and statements are batched and executed in the next microtask, you can't expect the value to be updated synchronously."),nC.forEach(u),lb=y(Qx),ub=b(Qx,"PRE",{class:!0}),g(ub).forEach(u),hb=y(Qx),db=b(Qx,"P",{});var sC=g(db);fb=b(sC,"A",{href:!0,rel:!0});var tC=g(fb);kb=$(tC,"Svelte REPL"),tC.forEach(u),sC.forEach(u),vb=y(Qx),mb=b(Qx,"P",{});var eC=g(mb);Eb=$(eC,"Instead, you "),gb=b(eC,"STRONG",{});var oC=g(gb);bb=$(oC,"have to"),oC.forEach(u),$b=$(eC," refer the reactive variable in another reactive declaration or statement:"),eC.forEach(u),yb=y(Qx),wb=b(Qx,"PRE",{class:!0}),g(wb).forEach(u),Qx.forEach(u),Ob=y(a),Sb=b(a,"SECTION",{});var cC=g(Sb);Tb=b(cC,"H3",{});var pC=g(Tb);Lb=b(pC,"A",{href:!0,id:!0});var rC=g(Lb);Nb=$(rC,"Sorting of reactive declarations and statements"),rC.forEach(u),pC.forEach(u),Pb=y(cC),xb=b(cC,"P",{});var iC=g(xb);Cb=$(iC,"Svelte tries to preserve the order of reactive declarations and statements as they are declared as much as possible."),iC.forEach(u),Db=y(cC),Ab=b(cC,"P",{});var lC=g(Ab);Ib=$(lC,"However, if one reactive declaration or statement refers to a variable that was defined by another reactive declaration, then, "),jb=b(lC,"STRONG",{});var uC=g(jb);Rb=$(uC,"it will be inserted after the latter reactive declaration"),uC.forEach(u),Mb=$(lC,":"),lC.forEach(u),Hb=y(cC),_b=b(cC,"PRE",{class:!0}),g(_b).forEach(u),cC.forEach(u),Ub=y(a),qb=b(a,"SECTION",{});var hC=g(qb);Gb=b(hC,"H3",{});var dC=g(Gb);Bb=b(dC,"A",{href:!0,id:!0});var fC=g(Bb);Fb=$(fC,"Reactive variable that is not reactive"),fC.forEach(u),dC.forEach(u),Jb=y(hC),zb=b(hC,"P",{});var kC=g(zb);Wb=$(kC,"The Svelte compiler tracks all the variables declared in the "),Yb=b(kC,"CODE",{});var vC=g(Yb);Vb=$(vC,"<script>"),vC.forEach(u),Kb=$(kC," tag."),kC.forEach(u),Zb=y(hC),Qb=b(hC,"P",{});var mC=g(Qb);Xb=$(mC,"If all the variables of a reactive declaration or statement refers to, never gets mutated or reassigned, then the reactive declaration or statement will not be added into "),a$=b(mC,"CODE",{});var EC=g(a$);n$=$(EC,"$$.update"),EC.forEach(u),s$=$(mC,"."),mC.forEach(u),t$=y(hC),e$=b(hC,"P",{});var gC=g(e$);o$=$(gC,"For example:"),gC.forEach(u),c$=y(hC),p$=b(hC,"PRE",{class:!0}),g(p$).forEach(u),r$=y(hC),i$=b(hC,"P",{});var bC=g(i$);l$=b(bC,"A",{href:!0,rel:!0});var $C=g(l$);u$=$($C,"Svelte REPL"),$C.forEach(u),bC.forEach(u),h$=y(hC),d$=b(hC,"P",{});var yC=g(d$);f$=$(yC,"Since, "),k$=b(yC,"CODE",{});var wC=g(k$);v$=$(wC,"count"),wC.forEach(u),m$=$(yC," never gets mutated or reassigned, Svelte optimises the compiled output by not defining "),E$=b(yC,"CODE",{});var OC=g(E$);g$=$(OC,"$$self.$$.update"),OC.forEach(u),b$=$(yC,"."),yC.forEach(u),$$=y(hC),y$=b(hC,"PRE",{class:!0}),g(y$).forEach(u),hC.forEach(u),w$=y(a),O$=b(a,"SECTION",{});var SC=g(O$);S$=b(SC,"H2",{});var TC=g(S$);T$=b(TC,"A",{href:!0,id:!0});var LC=g(T$);L$=$(LC,"Summary"),LC.forEach(u),TC.forEach(u),SC.forEach(u),N$=y(a),P$=b(a,"SECTION",{});var NC=g(P$);x$=b(NC,"H4",{});var PC=g(x$);C$=b(PC,"A",{href:!0,id:!0});var xC=g(C$);D$=$(xC,"1. Svelte keeps track of which variables are dirty and batched the DOM updates."),xC.forEach(u),PC.forEach(u),NC.forEach(u),A$=y(a),I$=b(a,"SECTION",{});var CC=g(I$);j$=b(CC,"H4",{});var DC=g(j$);R$=b(DC,"A",{href:!0,id:!0});var AC=g(R$);M$=$(AC,"2. Using bitmask, Svelte able to generate a more compact compiled code."),AC.forEach(u),DC.forEach(u),CC.forEach(u),H$=y(a),_$=b(a,"SECTION",{});var IC=g(_$);U$=b(IC,"H4",{});var jC=g(U$);q$=b(jC,"A",{href:!0,id:!0});var RC=g(q$);G$=$(RC,"3. Reactive declarations and statements are executed in batch, just like DOM updates"),RC.forEach(u),jC.forEach(u),IC.forEach(u),B$=y(a),F$=b(a,"SECTION",{});var MC=g(F$);J$=b(MC,"H2",{});var HC=g(J$);z$=b(HC,"A",{href:!0,id:!0});var _C=g(z$);W$=$(_C,"Closing Note"),_C.forEach(u),HC.forEach(u),Y$=y(MC),V$=b(MC,"P",{});var UC=g(V$);K$=$(UC,"If you wish to know more, "),Z$=b(UC,"A",{href:!0,rel:!0});var qC=g(Z$);Q$=$(qC,"follow me on Twitter"),qC.forEach(u),X$=$(UC,"."),UC.forEach(u),ay=y(MC),ny=b(MC,"P",{});var GC=g(ny);sy=$(GC,"I'll post it on Twitter when the next part is ready, where I'll be covering "),ty=b(GC,"A",{href:!0,rel:!0});var BC=g(ty);ey=$(BC,"logic blocks"),BC.forEach(u),oy=$(GC,", "),cy=b(GC,"A",{href:!0,rel:!0});var FC=g(cy);py=$(FC,"slots"),FC.forEach(u),ry=$(GC,", "),iy=b(GC,"A",{href:!0,rel:!0});var JC=g(iy);ly=$(JC,"context"),JC.forEach(u),uy=$(GC,", and many others."),GC.forEach(u),hy=y(MC),dy=b(MC,"P",{});var zC=g(dy);fy=b(zC,"STRONG",{});var WC=g(fy);ky=$(WC,"⬅ ⬅  Previously in "),vy=b(WC,"A",{href:!0});var YC=g(vy);my=$(YC,"Part 1"),YC.forEach(u),Ey=$(WC,"."),WC.forEach(u),zC.forEach(u),gy=y(MC),by=b(MC,"P",{});var VC=g(by);$y=b(VC,"STRONG",{});var KC=g($y);yy=$(KC,"➡ ➡  Continue reading on "),wy=b(KC,"A",{href:!0});var ZC=g(wy);Oy=$(ZC,"Part 3"),ZC.forEach(u),Sy=$(KC,"."),KC.forEach(u),VC.forEach(u),MC.forEach(u),Ty=y(a),Ly=b(a,"SECTION",{});var QC=g(Ly);Ny=b(QC,"H2",{});var XC=g(Ny);Py=b(XC,"A",{href:!0,id:!0});var aD=g(Py);xy=$(aD,"Further Resources"),aD.forEach(u),XC.forEach(u),Cy=y(QC),Dy=b(QC,"UL",{});var nD=g(Dy);Ay=b(nD,"LI",{});var sD=g(Ay);Iy=$(sD,"Rich Harris shares about "),jy=b(sD,"A",{href:!0,rel:!0});var tD=g(jy);Ry=$(tD,"Bitmask Tracking at Svelte Society NYC"),tD.forEach(u),My=$(sD,"."),sD.forEach(u),Hy=y(nD),_y=b(nD,"LI",{});var eD=g(_y);Uy=$(eD,"Svelte Tutorial - "),qy=b(eD,"A",{href:!0,rel:!0});var oD=g(qy);Gy=$(oD,"Reactivity"),oD.forEach(u),By=y(eD),Fy=b(eD,"A",{href:!0,rel:!0});var cD=g(Fy);Jy=$(cD,"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/"),cD.forEach(u),eD.forEach(u),zy=y(nD),Wy=b(nD,"LI",{});var pD=g(Wy);Yy=b(pD,"A",{href:!0,rel:!0});var rD=g(Yy);Vy=$(rD,"The Art of Bitmasking"),rD.forEach(u),Ky=$(pD," by Shakib Ahmed"),pD.forEach(u),Zy=y(nD),Qy=b(nD,"LI",{});var iD=g(Qy);Xy=b(iD,"A",{href:!0,rel:!0});var lD=g(Xy);aw=$(lD,"Bitmasks: A very esoteric (and impractical) way of managing booleans"),lD.forEach(u),nw=$(iD," by Basti Ortiz"),iD.forEach(u),sw=y(nD),tw=b(nD,"LI",{});var uD=g(tw);ew=b(uD,"A",{href:!0,rel:!0});var hD=g(ew);ow=$(hD,"MDN: Bitwise Operators"),hD.forEach(u),uD.forEach(u),nD.forEach(u),QC.forEach(u),this.h()},h(){E(o,"href","#pre-v"),E(h,"href","#ctx"),E(w,"href","#dirty"),E(T,"href","#invalidate"),E(P,"href","#schedule-update"),E(A,"href","#tl-dr"),E(R,"href","#v"),E(U,"href","#bitmask"),E(B,"href","#bitmask-in-svelte"),E(W,"href","#destructuring"),E(K,"href","#tl-dr"),E(X,"href","#reactive-declaration"),E(ea,"href","#execution-of-all-reactive-declarations-and-statements-are-batched"),E(pa,"href","#the-value-of-reactive-variable-outside-of-reactive-declarations-and-statements-may-not-be-up-to-date"),E(la,"href","#sorting-of-reactive-declarations-and-statements"),E(da,"href","#reactive-variable-that-is-not-reactive"),E(va,"href","#summary"),E($a,"href","#svelte-keeps-track-of-which-variables-are-dirty-and-batched-the-dom-updates"),E(Oa,"href","#using-bitmask-svelte-able-to-generate-a-more-compact-compiled-code"),E(La,"href","#reactive-declarations-and-statements-are-executed-in-batch-just-like-dom-updates"),E(xa,"href","#closing-note"),E(Aa,"href","#further-resources"),E(t,"class","sitemap"),E(t,"id","sitemap"),E(t,"role","navigation"),E(t,"aria-label","Table of Contents"),E(_a,"href","/compile-svelte-in-your-head-part-1/"),E(Fa,"href","/compile-svelte-in-your-head-part-1/"),E(an,"class","language-js"),E(fn,"href","https://github.com/sveltejs/svelte/blob/v3.20.1/CHANGELOG.md#3201"),E(fn,"rel","nofollow"),E(bn,"href","#pre-v"),E(bn,"id","pre-v"),E(Nn,"href","https://github.com/sveltejs/svelte/blob/master/CHANGELOG.md#3160"),E(Nn,"rel","nofollow"),E(Cn,"href","https://github.com/sveltejs/svelte/pull/3945"),E(Cn,"rel","nofollow"),E(Un,"href","/compile-svelte-in-your-head-part-1"),E(zn,"href","#ctx"),E(zn,"id","ctx"),E(ts,"href","/compile-svelte-in-your-head-part-1#instance-variable"),E(Fs,"class","language-svelte"),E(Ws,"href","https://svelte.dev/repl/5b12ff52c2874f4dbb6405d9133b34da?version=3.20.1"),E(Ws,"rel","nofollow"),E(Ks,"class","language-js"),E(it,"href","#dirty"),E(it,"id","dirty"),E(bt,"class","language-svelte"),E(wt,"href","https://svelte.dev/repl/da579d0113b44f01b2b94893dce21487?version=3.20.1"),E(wt,"rel","nofollow"),E(It,"href","https://github.com/sveltejs/svelte/blob/v3.15.0/src/runtime/internal/Component.ts#L124"),E(It,"rel","nofollow"),E(Wt,"class","language-js"),E(ee,"class","language-js"),E(be,"class","language-js"),E(Ae,"href","#invalidate"),E(Ae,"id","invalidate"),E(po,"class","language-js"),E(Ao,"class","language-js"),E(Ro,"href","https://github.com/sveltejs/svelte/blob/v3.15.0/src/runtime/internal/Component.ts#L130-L136"),E(Ro,"rel","nofollow"),E(Zo,"class","language-js"),E(mc,"class","language-js"),E(Ac,"href","#schedule-update"),E(Ac,"id","schedule-update"),E(Bc,"href","https://github.com/sveltejs/svelte/blob/v3.20.1/CHANGELOG.md#3201"),E(Bc,"rel","nofollow"),E(zc,"href","https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/"),E(zc,"rel","nofollow"),E(sp,"class","language-js"),E(lp,"class","language-js"),E(dp,"href","https://github.com/sveltejs/svelte/blob/v3.15.0/src/runtime/internal/scheduler.ts#L14"),E(dp,"rel","nofollow"),E(gp,"class","language-svelte"),E(yp,"href","https://svelte.dev/repl/761a0a6cc2834afb842942e1d23875b1?version=3.20.1"),E(yp,"rel","nofollow"),E(tl,"href","#tl-dr"),E(tl,"id","tl-dr"),E(_l,"href","#v"),E(_l,"id","v"),E(Fl,"href","https://github.com/sveltejs/svelte/pull/3945"),E(Fl,"rel","nofollow"),E(au,"class","language-js"),E(ou,"class","language-js"),E(iu,"href","https://en.wikipedia.org/wiki/Mask_(computing)"),E(iu,"rel","nofollow"),E(du,"class","language-js"),E(bu,"href","#bitmask"),E(bu,"id","bitmask"),E(Nu,"href","https://blog.bitsrc.io/the-art-of-bitmasking-ec58ab1b4c03"),E(Nu,"rel","nofollow"),E(Cu,"href","https://dev.to/somedood/bitmasks-a-very-esoteric-and-impractical-way-of-managing-booleans-1hlf"),E(Cu,"rel","nofollow"),E(yh,"href","https://en.wikipedia.org/wiki/Bit_numbering#Least_significant_bit"),E(yh,"rel","nofollow"),E(Sh,"href","https://en.wikipedia.org/wiki/Bit_numbering#Most_significant_bit"),E(Sh,"rel","nofollow"),E(Hh,"href","https://2ality.com/2012/04/number-encoding.html"),E(Hh,"rel","nofollow"),E(qh,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators"),E(qh,"rel","nofollow"),E(Wh,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators"),E(Wh,"rel","nofollow"),E(Zh,"class","language-js"),E(nd,"href","https://en.wikipedia.org/wiki/Mask_(computing)"),E(nd,"rel","nofollow"),E(dd,"href","#bitmask-in-svelte"),E(dd,"id","bitmask-in-svelte"),E(gd,"class","language-js"),E(Od,"class","language-js"),E(Hd,"class","language-js"),E(Qd,"class","language-js"),E(rf,"class","language-js"),E(ff,"class","language-js"),E(Ff,"href","#destructuring"),E(Ff,"id","destructuring"),E(pk,"class","language-js"),E(uk,"href","#tl-dr"),E(uk,"id","tl-dr"),E(Pk,"href","#reactive-declaration"),E(Pk,"id","reactive-declaration"),E(Ik,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label"),E(Ik,"rel","nofollow"),E(Uk,"class","language-svelte"),E(Bk,"href","https://svelte.dev/repl/e37329dd126448b2aa0679c08993f9a8?version=3.20.1"),E(Bk,"rel","nofollow"),E(Yk,"href","/compile-svelte-in-your-head-part-1/#instanceself-props-invalidate"),E(av,"class","language-js"),E(ov,"class","language-svelte"),E(rv,"href","https://svelte.dev/repl/fc6995856489402d90291c4c30952939?version=3.20.1"),E(rv,"rel","nofollow"),E(uv,"class","language-js"),E(Lv,"href","https://en.wikipedia.org/wiki/NOP_(code)"),E(Lv,"rel","nofollow"),E(xv,"href","https://github.com/sveltejs/svelte/blob/v3.20.1/src/runtime/internal/Component.ts#L111"),E(xv,"rel","nofollow"),E(km,"class","language-svelte"),E(Em,"href","https://svelte.dev/repl/fc6995856489402d90291c4c30952939?version=3.20.1"),E(Em,"rel","nofollow"),E(Bm,"class","language-js"),E(rE,"href","#execution-of-all-reactive-declarations-and-statements-are-batched"),E(rE,"id","execution-of-all-reactive-declarations-and-statements-are-batched"),E(fE,"class","language-svelte"),E(mE,"href","https://svelte.dev/repl/941195f1cd5248e9bd14613f9513ad1d?version=3.20.1"),E(mE,"rel","nofollow"),E(PE,"href","#schedule_update"),E(nb,"class","language-js"),E(ob,"href","#the-value-of-reactive-variable-outside-of-reactive-declarations-and-statements-may-not-be-up-to-date"),E(ob,"id","the-value-of-reactive-variable-outside-of-reactive-declarations-and-statements-may-not-be-up-to-date"),E(ub,"class","language-svelte"),E(fb,"href","https://svelte.dev/repl/437548d5c7044cb59bfd0c8a0f4c725d?version=3.20.1"),E(fb,"rel","nofollow"),E(wb,"class","language-svelte"),E(Lb,"href","#sorting-of-reactive-declarations-and-statements"),E(Lb,"id","sorting-of-reactive-declarations-and-statements"),E(_b,"class","language-js"),E(Bb,"href","#reactive-variable-that-is-not-reactive"),E(Bb,"id","reactive-variable-that-is-not-reactive"),E(p$,"class","language-svelte"),E(l$,"href","https://svelte.dev/repl/af86472e1f494cfea2efa494f63fff08?version=3.20.1"),E(l$,"rel","nofollow"),E(y$,"class","language-js"),E(T$,"href","#summary"),E(T$,"id","summary"),E(C$,"href","#svelte-keeps-track-of-which-variables-are-dirty-and-batched-the-dom-updates"),E(C$,"id","svelte-keeps-track-of-which-variables-are-dirty-and-batched-the-dom-updates"),E(R$,"href","#using-bitmask-svelte-able-to-generate-a-more-compact-compiled-code"),E(R$,"id","using-bitmask-svelte-able-to-generate-a-more-compact-compiled-code"),E(q$,"href","#reactive-declarations-and-statements-are-executed-in-batch-just-like-dom-updates"),E(q$,"id","reactive-declarations-and-statements-are-executed-in-batch-just-like-dom-updates"),E(z$,"href","#closing-note"),E(z$,"id","closing-note"),E(Z$,"href","https://twitter.com/lihautan"),E(Z$,"rel","nofollow"),E(ty,"href","https://svelte.dev/tutorial/if-blocks"),E(ty,"rel","nofollow"),E(cy,"href","https://svelte.dev/tutorial/slots"),E(cy,"rel","nofollow"),E(iy,"href","https://svelte.dev/tutorial/context-api"),E(iy,"rel","nofollow"),E(vy,"href","/compile-svelte-in-your-head-part-1/"),E(wy,"href","/compile-svelte-in-your-head-part-3/"),E(Py,"href","#further-resources"),E(Py,"id","further-resources"),E(jy,"href","https://www.youtube.com/watch?v=zq6PpM5t3z0&t=2530s"),E(jy,"rel","nofollow"),E(qy,"href","https://svelte.dev/tutorial/reactive-assignments"),E(qy,"rel","nofollow"),E(Fy,"href","https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/"),E(Fy,"rel","nofollow"),E(Yy,"href","https://blog.bitsrc.io/the-art-of-bitmasking-ec58ab1b4c03"),E(Yy,"rel","nofollow"),E(Xy,"href","https://dev.to/somedood/bitmasks-a-very-esoteric-and-impractical-way-of-managing-booleans-1hlf"),E(Xy,"rel","nofollow"),E(ew,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators"),E(ew,"rel","nofollow")},m(a,n){l(a,s,n),i(s,t),i(t,e),i(e,o),i(o,c),i(t,p),i(p,r),i(r,h),i(h,f),i(p,m),i(m,w),i(w,O),i(p,S),i(S,T),i(T,L),i(p,N),i(N,P),i(P,x),i(p,C),i(C,D),i(D,A),i(A,I),i(t,j),i(j,R),i(R,M),i(t,H),i(H,_),i(_,U),i(U,q),i(H,G),i(G,B),i(B,F),i(H,J),i(J,z),i(z,W),i(W,Y),i(J,V),i(V,K),i(K,Z),i(t,Q),i(Q,X),i(X,aa),i(t,na),i(na,sa),i(sa,ta),i(ta,ea),i(ea,oa),i(sa,ca),i(ca,pa),i(pa,ra),i(na,ia),i(ia,la),i(la,ua),i(na,ha),i(ha,da),i(da,fa),i(t,ka),i(ka,va),i(va,ma),i(t,Ea),i(Ea,ga),i(ga,ba),i(ba,$a),i($a,ya),i(ga,wa),i(wa,Oa),i(Oa,Sa),i(ga,Ta),i(Ta,La),i(La,Na),i(t,Pa),i(Pa,xa),i(xa,Ca),i(t,Da),i(Da,Aa),i(Aa,Ia),l(a,ja,n),l(a,Ra,n),i(Ra,Ma),i(Ma,Ha),i(Ma,_a),i(_a,Ua),i(Ma,qa),l(a,Ga,n),l(a,Ba,n),i(Ba,Fa),i(Fa,Ja),i(Ba,za),i(Ba,Wa),i(Wa,Ya),i(Ba,Va),i(Ba,Ka),i(Ka,Za),i(Ba,Qa),l(a,Xa,n),l(a,an,n),an.innerHTML='<code class="language-js"><span class="token comment">// conceptually...</span>\n<span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token function">instance</span><span class="token punctuation">(</span><span class="token comment">/*...*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> fragment <span class="token operator">=</span> <span class="token function">create_fragment</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// to track which variable has changed</span>\n<span class="token keyword">const</span> dirty <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">$$invalidate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">variable<span class="token punctuation">,</span> newValue</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// update ctx</span>\n  ctx<span class="token punctuation">[</span>variable<span class="token punctuation">]</span> <span class="token operator">=</span> newValue<span class="token punctuation">;</span>\n  <span class="token comment">// mark variable as dirty</span>\n  dirty<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>variable<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// schedules update for the component</span>\n  <span class="token function">scheduleUpdate</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// gets called when update is scheduled</span>\n<span class="token keyword">function</span> <span class="token function">flushUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// update the fragment</span>\n  fragment<span class="token punctuation">.</span><span class="token function">p</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> dirty<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// clear the dirty</span>\n  dirty<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',l(a,nn,n),l(a,sn,n),i(sn,tn),i(sn,en),i(en,on),i(sn,cn),i(sn,pn),i(pn,rn),i(sn,ln),l(a,un,n),l(a,hn,n),i(hn,dn),i(hn,fn),i(fn,kn),i(hn,vn),l(a,mn,n),l(a,En,n),i(En,gn),i(gn,bn),i(bn,$n),i(En,yn),i(En,wn),i(wn,On),i(wn,Sn),i(Sn,Tn),i(wn,Ln),i(wn,Nn),i(Nn,Pn),i(wn,xn),i(wn,Cn),i(Cn,Dn),i(wn,An),i(wn,In),i(In,jn),i(wn,Rn),i(En,Mn),i(En,Hn),i(Hn,_n),i(Hn,Un),i(Un,qn),i(Hn,Gn),l(a,Bn,n),l(a,Fn,n),i(Fn,Jn),i(Jn,zn),i(zn,Wn),i(Fn,Yn),i(Fn,Vn),i(Vn,Kn),i(Vn,Zn),i(Zn,Qn),i(Vn,Xn),i(Fn,as),i(Fn,ns),i(ns,ss),i(ns,ts),i(ts,es),i(ns,os),i(Fn,cs),i(Fn,ps),i(ps,rs),i(rs,is),i(rs,ls),i(ls,us),i(rs,hs),i(ps,ds),i(ps,fs),i(fs,ks),i(ps,vs),i(ps,ms),i(ms,Es),i(Fn,gs),i(Fn,bs),i(bs,$s),i(Fn,ys),i(Fn,ws),i(ws,Os),i(Fn,Ss),i(Fn,Ts),i(Ts,Ls),i(Ts,Ns),i(Ns,Ps),i(Ts,xs),i(Ts,Cs),i(Cs,Ds),i(Ts,As),i(Fn,Is),i(Fn,js),i(js,Rs),i(js,Ms),i(Ms,Hs),i(js,_s),i(js,Us),i(Us,qs),i(js,Gs),i(Fn,Bs),i(Fn,Fs),Fs.innerHTML='<code class="language-svelte">&lt;script&gt;\n  let name = &#39;world&#39;;\n  function update() &#123;\n    name = &#39;Svelte&#39;;\n  &#125;\n&lt;/script&gt;\n&lt;button on:click=&#123;update&#125;&gt;&#123;name&#125;&lt;/button&gt;</code>',i(Fn,Js),i(Fn,zs),i(zs,Ws),i(Ws,Ys),i(Fn,Vs),i(Fn,Ks),Ks.innerHTML='<code class="language-js"><span class="token comment">// ...</span>\n<span class="token keyword">function</span> <span class="token function">instance</span><span class="token punctuation">(</span><span class="token parameter">$$self<span class="token punctuation">,</span> $$props<span class="token punctuation">,</span> $$invalidate</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">\'world\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'name\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">\'Svelte\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> update <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span>\n\n<span class="token comment">// ...some where in &#96;create_fragment&#96;</span>\nctx<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// logs &#96;world&#96; scoped in the &#96;instance&#96; closure</span></code>',i(Fn,Zs),i(Fn,Qs),i(Qs,Xs),i(Qs,at),i(at,nt),i(Qs,st),i(Qs,tt),i(tt,et),i(Qs,ot),l(a,ct,n),l(a,pt,n),i(pt,rt),i(rt,it),i(it,lt),i(pt,ut),i(pt,ht),i(ht,dt),i(dt,ft),i(ht,kt),i(pt,vt),i(pt,mt),i(mt,Et),i(pt,gt),i(pt,bt),bt.innerHTML='<code class="language-svelte">&lt;script&gt;\n  let agility = 0;\n  let power = 0;\n  function incrementAgility() &#123;\n    agility ++;\n  &#125;\n  function incrementPower() &#123;\n    power ++;\n  &#125;\n  function levelUp() &#123;\n    agility += 5;\n    power += 7;\n  &#125;\n&lt;/script&gt;\n\nAgility: &#123;agility&#125;\nPower: &#123;power&#125;\nStats: &#123;agility * power&#125;\n\n&lt;button on:click=&#123;incrementAgility&#125;&gt;+ Agility&lt;/button&gt;\n&lt;button on:click=&#123;incrementPower&#125;&gt;+ Power&lt;/button&gt;\n&lt;button on:click=&#123;levelUp&#125;&gt;Level Up&lt;/button&gt;</code>',i(pt,$t),i(pt,yt),i(yt,wt),i(wt,Ot),i(pt,St),i(pt,Tt),i(Tt,Lt),i(Tt,Nt),i(Nt,Pt),i(Tt,xt),i(Tt,Ct),i(Ct,Dt),i(Tt,At),i(Tt,It),i(It,jt),i(Tt,Rt),i(pt,Mt),i(pt,Ht),i(Ht,_t),i(Ht,Ut),i(Ut,qt),i(Ht,Gt),i(Ht,Bt),i(Bt,Ft),i(Ht,Jt),i(pt,zt),i(pt,Wt),Wt.innerHTML='<code class="language-js"><span class="token punctuation">&#123;</span> agility<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code>',i(pt,Yt),i(pt,Vt),i(Vt,Kt),i(Vt,Zt),i(Zt,Qt),i(Vt,Xt),i(Vt,ae),i(ae,ne),i(Vt,se),i(pt,te),i(pt,ee),ee.innerHTML='<code class="language-js"><span class="token punctuation">&#123;</span> agility<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> power<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span></code>',i(pt,oe),i(pt,ce),i(ce,pe),i(pe,re),i(ce,ie),i(pt,le),i(pt,ue),i(ue,he),i(ue,de),i(de,fe),i(ue,ke),i(ue,ve),i(ve,me),i(ue,Ee),i(pt,ge),i(pt,be),be.innerHTML='<code class="language-js"><span class="token comment">// NOTE: $$.dirty is passed into the &#96;p&#96; function as &#96;changed&#96;</span>\n<span class="token function">p</span><span class="token punctuation">(</span><span class="token parameter">changed<span class="token punctuation">,</span> ctx</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// checked if agility has changed before update the agility text</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>changed<span class="token punctuation">.</span>agility<span class="token punctuation">)</span> <span class="token function">set_data</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> ctx<span class="token punctuation">.</span>agility<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>changed<span class="token punctuation">.</span>power<span class="token punctuation">)</span> <span class="token function">set_data</span><span class="token punctuation">(</span>t3<span class="token punctuation">,</span> ctx<span class="token punctuation">.</span>power<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// if either agility or power has changed, update the stats text</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>changed<span class="token punctuation">.</span>agility <span class="token operator">||</span> changed<span class="token punctuation">.</span>power<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> t5_value <span class="token operator">!==</span> <span class="token punctuation">(</span>t5_value <span class="token operator">=</span> ctx<span class="token punctuation">.</span>agility <span class="token operator">*</span> ctx<span class="token punctuation">.</span>power <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">set_data</span><span class="token punctuation">(</span>t5<span class="token punctuation">,</span> t5_value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',i(pt,$e),i(pt,ye),i(ye,we),i(ye,Oe),i(Oe,Se),i(ye,Te),i(ye,Le),i(Le,Ne),i(ye,Pe),l(a,xe,n),l(a,Ce,n),i(Ce,De),i(De,Ae),i(Ae,Ie),i(Ce,je),i(Ce,Re),i(Re,Me),i(Me,He),i(Re,_e),i(Ce,Ue),i(Ce,qe),i(qe,Ge),i(Ce,Be),i(Ce,Fe),i(Fe,Je),i(Je,ze),i(Je,We),i(We,Ye),i(Fe,Ve),i(Fe,Ke),i(Ke,Ze),i(Ke,Qe),i(Qe,Xe),i(Ce,ao),i(Ce,no),i(no,so),i(no,to),i(to,eo),i(no,oo),i(Ce,co),i(Ce,po),po.innerHTML='<code class="language-js">name <span class="token operator">=</span> <span class="token string">\'Svelte\'</span><span class="token punctuation">;</span>\ncount<span class="token operator">++</span><span class="token punctuation">;</span>\nfoo<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\nbar <span class="token operator">=</span> baz <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n<span class="token comment">// compiled into</span>\n<span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'name\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">\'Svelte\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'count\'</span><span class="token punctuation">,</span> count<span class="token operator">++</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'foo\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>foo<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> foo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'bar\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>bar <span class="token operator">=</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'baz\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>baz <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>',i(Ce,ro),i(Ce,io),i(io,lo),i(io,uo),i(uo,ho),i(io,fo),i(Ce,ko),i(Ce,vo),i(vo,mo),i(mo,Eo),i(mo,go),i(go,bo),i(vo,$o),i(vo,yo),i(yo,wo),i(yo,Oo),i(Oo,So),i(vo,To),i(vo,Lo),i(Lo,No),i(vo,Po),i(vo,xo),i(xo,Co),i(Ce,Do),i(Ce,Ao),Ao.innerHTML='<code class="language-js"><span class="token comment">// src/runtime/internal/Component.ts</span>\n<span class="token keyword">const</span> <span class="token function-variable function">$$invalidate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> ret<span class="token punctuation">,</span> value <span class="token operator">=</span> ret</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>$$<span class="token punctuation">.</span>ctx <span class="token operator">&amp;&amp;</span> <span class="token function">not_equal</span><span class="token punctuation">(</span>$$<span class="token punctuation">.</span>ctx<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token comment">// 1. update the variable in $$.ctx</span>\n    $$<span class="token punctuation">.</span>ctx<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>\n    <span class="token comment">// ...</span>\n    <span class="token comment">// 2a. mark the variable in $$.dirty</span>\n    <span class="token function">make_dirty</span><span class="token punctuation">(</span>component<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n  <span class="token comment">// 4. return the value of the assignment or update expression</span>\n  <span class="token keyword">return</span> ret<span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// src/runtime/internal/Component.ts</span>\n<span class="token keyword">function</span> <span class="token function">make_dirty</span><span class="token punctuation">(</span><span class="token parameter">component<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>component<span class="token punctuation">.</span>$$<span class="token punctuation">.</span>dirty<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    dirty_components<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 3. schedule an update</span>\n    <span class="token function">schedule_update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// initialise $$.dirty</span>\n    component<span class="token punctuation">.</span>$$<span class="token punctuation">.</span>dirty <span class="token operator">=</span> <span class="token function">blank_object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n  <span class="token comment">// 2b. mark the variable in $$.dirty</span>\n  component<span class="token punctuation">.</span>$$<span class="token punctuation">.</span>dirty<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',i(Ce,Io),i(Ce,jo),i(jo,Ro),i(Ro,Mo),i(Ce,Ho),i(Ce,_o),i(_o,Uo),i(_o,qo),i(qo,Go),i(_o,Bo),i(Ce,Fo),i(Ce,Jo),i(Jo,zo),i(Jo,Wo),i(Wo,Yo),i(Jo,Vo),i(Ce,Ko),i(Ce,Zo),Zo.innerHTML='<code class="language-js">obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  b<span class="token punctuation">:</span> <span class="token punctuation">(</span>foo <span class="token operator">=</span> bar<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n\nobj<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token string">\'hello\'</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">(</span><span class="token punctuation">&#123;</span> a<span class="token punctuation">:</span> c <span class="token operator">=</span> d<span class="token operator">++</span><span class="token punctuation">,</span> b <span class="token punctuation">&#125;</span> <span class="token operator">=</span> baz <span class="token operator">=</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// assuming all variables are referenced in the template</span>\n<span class="token comment">// the above compiles into</span>\n\n<span class="token function">$$invalidate</span><span class="token punctuation">(</span>\n  <span class="token string">\'obj\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span>obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n    b<span class="token punctuation">:</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'foo\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>foo <span class="token operator">=</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'bar\'</span><span class="token punctuation">,</span> bar<span class="token operator">++</span><span class="token punctuation">,</span> bar<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'obj\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token string">\'hello\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">$$invalidate</span><span class="token punctuation">(</span>\n  <span class="token string">\'c\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> a<span class="token punctuation">:</span> c <span class="token operator">=</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'d\'</span><span class="token punctuation">,</span> d<span class="token operator">++</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">,</span> b <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'baz\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>baz <span class="token operator">=</span> obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  c<span class="token punctuation">,</span>\n  <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'b\'</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code>',i(Ce,Qo),i(Ce,Xo),i(Xo,ac),i(Ce,nc),i(Ce,sc),i(sc,tc),i(sc,ec),i(ec,oc),i(sc,cc),i(sc,pc),i(pc,rc),i(sc,ic),i(Ce,lc),i(Ce,uc),i(uc,hc),i(uc,dc),i(dc,fc),i(uc,kc),i(Ce,vc),i(Ce,mc),mc.innerHTML='<code class="language-js">obj<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token string">\'hello\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// compiles into</span>\n<span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'obj\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token string">\'hello\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// - it invalidates &#96;obj&#96;</span>\n<span class="token comment">// - it returns the evaluated value of the expression &#96;obj.c = \'hello\'&#96;, which is \'hello\'</span></code>',i(Ce,Ec),i(Ce,gc),i(gc,bc),i(gc,$c),i($c,yc),i(gc,wc),i(gc,Oc),i(Oc,Sc),i(gc,Tc),i(gc,Lc),i(Lc,Nc),i(gc,Pc),l(a,xc,n),l(a,Cc,n),i(Cc,Dc),i(Dc,Ac),i(Ac,Ic),i(Cc,jc),i(Cc,Rc),i(Rc,Mc),i(Mc,Hc),i(Rc,_c),i(Cc,Uc),i(Cc,qc),i(qc,Gc),i(qc,Bc),i(Bc,Fc),i(qc,Jc),i(qc,zc),i(zc,Wc),i(qc,Yc),i(qc,Vc),i(Vc,Kc),i(qc,Zc),i(Cc,Qc),i(Cc,Xc),i(Xc,ap),i(Cc,np),i(Cc,sp),sp.innerHTML='<code class="language-js"><span class="token comment">// src/runtime/internal/scheduler.ts</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">schedule_update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>update_scheduled<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    update_scheduled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token comment">// NOTE: &#96;flush&#96; will do the DOM update</span>\n    <span class="token comment">// we push it into the microtask queue</span>\n    <span class="token comment">// highlight-next-line</span>\n    resolved_promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>flush<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span></code>',i(Cc,tp),i(Cc,ep),i(ep,op),i(ep,cp),i(cp,pp),i(ep,rp),i(Cc,ip),i(Cc,lp),lp.innerHTML='<code class="language-js"><span class="token comment">// src/runtime/internal/scheduler.ts</span>\n<span class="token keyword">function</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// ...</span>\n  <span class="token comment">// for each componnet in &#96;dirty_components&#96;</span>\n  <span class="token comment">// highlight-start</span>\n  <span class="token function">update</span><span class="token punctuation">(</span>component<span class="token punctuation">.</span>$$<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// highlight-end</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">&#125;</span>\n\n<span class="token comment">// src/runtime/internal/scheduler.ts</span>\n<span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">$$</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>$$<span class="token punctuation">.</span>fragment <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token comment">// NOTE: this will be important later</span>\n    $$<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>$$<span class="token punctuation">.</span>dirty<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">run_all</span><span class="token punctuation">(</span>$$<span class="token punctuation">.</span>before_update<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// calls the &#96;p&#96; function</span>\n    <span class="token comment">// highlight-next-line</span>\n    $$<span class="token punctuation">.</span>fragment <span class="token operator">&amp;&amp;</span> $$<span class="token punctuation">.</span>fragment<span class="token punctuation">.</span><span class="token function">p</span><span class="token punctuation">(</span>$$<span class="token punctuation">.</span>dirty<span class="token punctuation">,</span> $$<span class="token punctuation">.</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// resets &#96;$$.dirty&#96;</span>\n    $$<span class="token punctuation">.</span>dirty <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n    $$<span class="token punctuation">.</span>after_update<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>add_render_callback<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span></code>',i(Cc,up),i(Cc,hp),i(hp,dp),i(dp,fp),i(Cc,kp),i(Cc,vp),i(vp,mp),i(Cc,Ep),i(Cc,gp),gp.innerHTML='<code class="language-svelte">&lt;script&gt;\n  let givenName, familyName;\n  function update() &#123;\n    givenName = &#39;Li Hau&#39;;\n    familyName = &#39;Tan&#39;;\n  &#125;\n&lt;/script&gt;\nName: &#123;familyName&#125; &#123;givenName&#125;\n\n&lt;button on:click=&#123;update&#125;&gt;Update&lt;/button&gt;</code>',i(Cc,bp),i(Cc,$p),i($p,yp),i(yp,wp),i(Cc,Op),i(Cc,Sp),i(Sp,Tp),i(Sp,Lp),i(Lp,Np),i(Sp,Pp),i(Sp,xp),i(xp,Cp),i(Sp,Dp),i(Cc,Ap),i(Cc,Ip),i(Ip,jp),i(jp,Rp),i(jp,Mp),i(Mp,Hp),i(jp,_p),i(jp,Up),i(Up,qp),i(jp,Gp),i(Ip,Bp),i(Ip,Fp),i(Fp,Jp),i(Jp,zp),i(Ip,Wp),i(Ip,Yp),i(Yp,Vp),i(Yp,Kp),i(Kp,Zp),i(Yp,Qp),i(Yp,Xp),i(Xp,ar),i(Ip,nr),i(Ip,sr),i(sr,tr),i(sr,er),i(er,or),i(Ip,cr),i(Ip,pr),i(pr,rr),i(pr,ir),i(ir,lr),i(pr,ur),i(Ip,hr),i(Ip,dr),i(dr,fr),i(fr,kr),i(Ip,vr),i(Ip,mr),i(mr,Er),i(mr,gr),i(gr,br),i(mr,$r),i(mr,yr),i(yr,wr),i(Ip,Or),i(Ip,Sr),i(Sr,Tr),i(Sr,Lr),i(Lr,Nr),i(Ip,Pr),i(Ip,xr),i(xr,Cr),i(xr,Dr),i(Dr,Ar),i(xr,Ir),i(Ip,jr),i(Ip,Rr),i(Rr,Mr),i(Mr,Hr),i(Ip,_r),i(Ip,Ur),i(Ur,qr),i(qr,Gr),i(Ip,Br),i(Ip,Fr),i(Fr,Jr),i(Jr,zr),i(Fr,Wr),i(Fr,Yr),i(Yr,Vr),i(Fr,Kr),i(Ip,Zr),i(Ip,Qr),i(Qr,Xr),i(Qr,ai),i(ai,ni),i(Qr,si),i(Qr,ti),i(ti,ei),i(ei,oi),i(oi,ci),i(ei,pi),i(ei,ri),i(ri,ii),i(ti,li),i(ti,ui),i(ui,hi),i(hi,di),i(ui,fi),i(ui,ki),i(ki,vi),i(Ip,mi),i(Ip,Ei),i(Ei,gi),i(Ei,bi),i(bi,$i),i(Ei,yi),i(Ei,wi),i(wi,Oi),i(Oi,Si),i(Oi,Ti),i(Ti,Li),i(Oi,Ni),i(Oi,Pi),i(Pi,xi),i(wi,Ci),i(wi,Di),i(Di,Ai),i(Di,Ii),i(Ii,ji),i(Di,Ri),i(Di,Mi),i(Mi,Hi),i(Ip,_i),i(Ip,Ui),i(Ui,qi),i(Ui,Gi),i(Gi,Bi),i(Ui,Fi),i(Ui,Ji),i(Ji,zi),i(Ip,Wi),i(Ip,Yi),i(Yi,Vi),i(Ip,Ki),i(Ip,Zi),i(Zi,Qi),i(Qi,Xi),l(a,al,n),l(a,nl,n),i(nl,sl),i(sl,tl),i(tl,el),i(nl,ol),i(nl,cl),i(cl,pl),i(pl,rl),i(pl,il),i(il,ll),i(pl,ul),i(pl,hl),i(hl,dl),i(pl,fl),i(pl,kl),i(kl,vl),i(pl,ml),i(cl,El),i(cl,gl),i(gl,bl),i(cl,$l),i(cl,yl),i(yl,wl),i(yl,Ol),i(Ol,Sl),i(yl,Tl),i(cl,Ll),i(cl,Nl),i(Nl,Pl),i(Nl,xl),i(xl,Cl),i(Nl,Dl),i(Nl,Al),i(Al,Il),i(Nl,jl),l(a,Rl,n),l(a,Ml,n),i(Ml,Hl),i(Hl,_l),i(_l,Ul),i(Ml,ql),i(Ml,Gl),i(Gl,Bl),i(Gl,Fl),i(Fl,Jl),i(Gl,zl),i(Gl,Wl),i(Wl,Yl),i(Gl,Vl),i(Ml,Kl),i(Ml,Zl),i(Zl,Ql),i(Ml,Xl),i(Ml,au),au.innerHTML='<code class="language-js">$$<span class="token punctuation">.</span>diry <span class="token operator">=</span> <span class="token punctuation">&#123;</span> givenName<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> familyName<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',i(Ml,nu),i(Ml,su),i(su,tu),i(Ml,eu),i(Ml,ou),ou.innerHTML='<code class="language-js">givenName <span class="token operator">-</span><span class="token operator">></span> <span class="token number">0</span>\nfamilyName <span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span></code>',i(Ml,cu),i(Ml,pu),i(pu,ru),i(pu,iu),i(iu,lu),i(pu,uu),i(Ml,hu),i(Ml,du),du.innerHTML='<code class="language-js">$$<span class="token punctuation">.</span>dirty <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0b0000_0011</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// the 0th and 1st bit marked true</span></code>',i(Ml,fu),i(Ml,ku),i(ku,vu),l(a,mu,n),l(a,Eu,n),i(Eu,gu),i(gu,bu),i(bu,$u),i(Eu,yu),i(Eu,wu),i(wu,Ou),i(Eu,Su),i(Eu,Tu),i(Tu,Lu),i(Tu,Nu),i(Nu,Pu),i(Tu,xu),i(Tu,Cu),i(Cu,Du),i(Tu,Au),i(Eu,Iu),i(Eu,ju),i(ju,Ru),i(ju,Mu),i(Mu,Hu),i(ju,_u),i(ju,Uu),i(Uu,qu),i(ju,Gu),i(ju,Bu),i(Bu,Fu),i(ju,Ju),i(ju,zu),i(zu,Wu),i(ju,Yu),i(ju,Vu),i(Vu,Ku),i(ju,Zu),i(ju,Qu),i(Qu,Xu),i(ju,ah),i(Eu,nh),i(Eu,sh),i(sh,th),i(sh,eh),i(eh,oh),i(sh,ch),i(sh,ph),i(ph,rh),i(sh,ih),i(Eu,lh),i(Eu,uh),i(uh,hh),i(uh,dh),i(dh,fh),i(uh,kh),i(uh,vh),i(vh,mh),i(uh,Eh),i(uh,gh),i(gh,bh),i(uh,$h),i(uh,yh),i(yh,wh),i(uh,Oh),i(uh,Sh),i(Sh,Th),i(uh,Lh),i(Eu,Nh),i(Eu,Ph),i(Ph,xh),i(xh,Ch),i(Eu,Dh),i(Eu,Ah),i(Ah,Ih),i(Eu,jh),i(Eu,Rh),i(Rh,Mh),i(Rh,Hh),i(Hh,_h),i(Rh,Uh),i(Rh,qh),i(qh,Gh),i(Rh,Bh),i(Eu,Fh),i(Eu,Jh),i(Jh,zh),i(Jh,Wh),i(Wh,Yh),i(Jh,Vh),i(Eu,Kh),i(Eu,Zh),Zh.innerHTML='<code class="language-js"><span class="token comment">// set 1st boolean to true</span>\n<span class="token number">0b0101</span> <span class="token operator">|</span> <span class="token number">0b0010</span> <span class="token operator">=</span> <span class="token number">0b0111</span><span class="token punctuation">;</span>\n\n<span class="token comment">// set 2nd boolean to false</span>\n<span class="token number">0b0101</span> <span class="token operator">&amp;</span> <span class="token number">0b1011</span> <span class="token operator">=</span> <span class="token number">0b0001</span><span class="token punctuation">;</span>\n\n<span class="token comment">// is 2nd boolean true?</span>\n<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0b0101</span> <span class="token operator">&amp;</span> <span class="token number">0b0100</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n<span class="token comment">// NOTE: You can test multiple boolean values at once</span>\n<span class="token comment">// is 2nd and 3rd boolean true?</span>\n<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0b0101</span> <span class="token operator">&amp;</span> <span class="token number">0b1100</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">;</span></code>',i(Eu,Qh),i(Eu,Xh),i(Xh,ad),i(Xh,nd),i(nd,sd),i(Xh,td),i(Eu,ed),i(Eu,od),i(od,cd),i(od,pd),i(pd,rd),i(od,id),l(a,ld,n),l(a,ud,n),i(ud,hd),i(hd,dd),i(dd,fd),i(ud,kd),i(ud,vd),i(vd,md),i(ud,Ed),i(ud,gd),gd.innerHTML='<code class="language-js">givenName <span class="token operator">-</span><span class="token operator">></span> <span class="token number">0</span>\nfirstName <span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span></code>',i(ud,bd),i(ud,$d),i($d,yd),i(ud,wd),i(ud,Od),Od.innerHTML='<code class="language-js"><span class="token comment">// Previous</span>\n<span class="token keyword">function</span> <span class="token function">instance</span><span class="token punctuation">(</span><span class="token parameter">$$self<span class="token punctuation">,</span> $$props<span class="token punctuation">,</span> $$invalidate</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// ...</span>\n  <span class="token comment">// highlight-next-line</span>\n  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> givenName<span class="token punctuation">,</span> familyName <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span>\n<span class="token comment">// Now</span>\n<span class="token keyword">function</span> <span class="token function">instance</span><span class="token punctuation">(</span><span class="token parameter">$$self<span class="token punctuation">,</span> $$props<span class="token punctuation">,</span> $$invalidate</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// ...</span>\n  <span class="token comment">// highlight-next-line</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span>givenName<span class="token punctuation">,</span> familyName<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',i(ud,Sd),i(ud,Td),i(Td,Ld),i(Td,Nd),i(Nd,Pd),i(Td,xd),i(Td,Cd),i(Cd,Dd),i(Td,Ad),i(Td,Id),i(Id,jd),i(Td,Rd),i(ud,Md),i(ud,Hd);Hd.innerHTML='<code class="language-js"><span class="token comment">// Previous</span>\n$$<span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>givenName <span class="token operator">+</span> $$<span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>familyName<span class="token punctuation">;</span>\n<span class="token comment">// Now</span>\n$$<span class="token punctuation">.</span>ctx<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> $$<span class="token punctuation">.</span>ctx<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code>',i(ud,_d),i(ud,Ud),i(Ud,qd),i(Ud,Gd),i(Gd,Bd),i(Ud,Fd),i(Ud,Jd),i(Jd,zd),i(Ud,Wd),i(Ud,Yd),i(Yd,Vd),i(Ud,Kd),i(ud,Zd),i(ud,Qd),Qd.innerHTML='<code class="language-js"><span class="token comment">// Previous</span>\n<span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'givenName\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>givenName <span class="token operator">=</span> <span class="token string">\'Li Hau\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Now</span>\n<span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>givenName <span class="token operator">=</span> <span class="token string">\'Li Hau\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>',i(ud,Xd),i(ud,af),i(af,nf),i(nf,sf),i(af,tf),i(ud,ef),i(ud,of),i(of,cf),i(ud,pf),i(ud,rf),rf.innerHTML='<code class="language-js"><span class="token comment">// Previous</span>\n$$<span class="token punctuation">.</span>dirty<span class="token punctuation">[</span><span class="token string">\'givenName\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token comment">// Now</span>\n$$<span class="token punctuation">.</span>dirty<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span></code>',i(ud,lf),i(ud,uf),i(uf,hf),i(ud,df),i(ud,ff),ff.innerHTML='<code class="language-js"><span class="token comment">// Previous</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>$dirty<span class="token punctuation">.</span>givenName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>$dirty<span class="token punctuation">.</span>givenName <span class="token operator">&amp;&amp;</span> $dirty<span class="token punctuation">.</span>familyName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span>\n\n<span class="token comment">// Now</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>$dirty<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>$dirty<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span></code>',i(ud,kf),i(ud,vf),i(vf,mf),i(vf,Ef),i(Ef,gf),i(vf,bf),i(vf,$f),i($f,yf),i(vf,wf),i(vf,Of),i(Of,Sf),i(vf,Tf),i(ud,Lf),i(ud,Nf),i(Nf,Pf),i(Pf,xf),i(Nf,Cf),i(Nf,Df),i(Df,Af),i(Nf,If),i(Nf,jf),i(jf,Rf),i(Nf,Mf),i(Nf,Hf),i(Hf,_f),i(Nf,Uf),l(a,qf,n),l(a,Gf,n),i(Gf,Bf),i(Bf,Ff),i(Ff,Jf),i(Ff,zf),i(zf,Wf),i(Gf,Yf),i(Gf,Vf),i(Vf,Kf),i(Vf,Zf),i(Zf,Qf),i(Vf,Xf),i(Vf,ak),i(ak,nk),i(Vf,sk),i(Vf,tk),i(tk,ek),i(Vf,ok),i(Gf,ck),i(Gf,pk),pk.innerHTML='<code class="language-js"><span class="token comment">// If less than 32 variables,</span>\n<span class="token comment">// Instead of having &#96;dirty[0]&#96; all the time,</span>\np<span class="token punctuation">:</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> dirty<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>dirty<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>dirty<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span>\n<span class="token comment">// Svelte optimises the compiled code by </span>\n<span class="token comment">// destruct the array in the arguments</span>\np<span class="token punctuation">:</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token punctuation">[</span>dirty<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>dirty <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>dirty <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span>\n\n<span class="token comment">// If more than or equal to 32 variables</span>\np<span class="token punctuation">:</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> dirty<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>dirty<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>dirty<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span></code>',l(a,rk,n),l(a,ik,n),i(ik,lk),i(lk,uk),i(uk,hk),i(ik,dk),i(ik,fk),i(fk,kk),i(kk,vk),i(kk,mk),i(mk,Ek),i(kk,gk),i(kk,bk),i(bk,$k),i(kk,yk),i(fk,wk),i(fk,Ok),i(Ok,Sk),l(a,Tk,n),l(a,Lk,n),i(Lk,Nk),i(Nk,Pk),i(Pk,xk),i(Lk,Ck),i(Lk,Dk),i(Dk,Ak),i(Dk,Ik),i(Ik,jk),i(Dk,Rk),i(Dk,Mk),i(Mk,Hk),i(Lk,_k),i(Lk,Uk),Uk.innerHTML='<code class="language-svelte">&lt;script&gt;\n  export let count = 0;\n  // &#96;doubled&#96;, &#96;tripled&#96;, &#96;quadrupled&#96; are reactive\n  // highlight-start\n  $: doubled = count * 2;\n  $: tripled = count * 3;\n  $: quadrupled = doubled * 2;\n  // highlight-end\n&lt;/script&gt;\n\n&#123;doubled&#125; &#123;tripled&#125; &#123;quadrupled&#125;</code>',i(Lk,qk),i(Lk,Gk),i(Gk,Bk),i(Bk,Fk),i(Lk,Jk),i(Lk,zk),i(zk,Wk),i(zk,Yk),i(Yk,Vk),i(Vk,Kk),i(Yk,Zk),i(zk,Qk),i(Lk,Xk),i(Lk,av),av.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">instance</span><span class="token punctuation">(</span><span class="token parameter">$$self<span class="token punctuation">,</span> $$props<span class="token punctuation">,</span> $$invalidate</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// ...</span>\n\n  <span class="token comment">// highlight-start</span>\n\t$$self<span class="token punctuation">.</span>$$<span class="token punctuation">.</span><span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>$$self<span class="token punctuation">.</span>$$<span class="token punctuation">.</span>dirty <span class="token operator">&amp;</span> <span class="token comment">/*count*/</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n\t\t\t$<span class="token punctuation">:</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> doubled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">&#125;</span>\n\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>$$self<span class="token punctuation">.</span>$$<span class="token punctuation">.</span>dirty <span class="token operator">&amp;</span> <span class="token comment">/*count*/</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n\t\t\t$<span class="token punctuation">:</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> tripled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">&#125;</span>\n\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>$$self<span class="token punctuation">.</span>$$<span class="token punctuation">.</span>dirty <span class="token operator">&amp;</span> <span class="token comment">/*doubled*/</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n\t\t\t$<span class="token punctuation">:</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> quadrupled <span class="token operator">=</span> doubled <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">&#125;</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n  <span class="token comment">// highlight-end</span>\n\n\t<span class="token keyword">return</span> <span class="token punctuation">[</span>doubled<span class="token punctuation">,</span> tripled<span class="token punctuation">,</span> quadrupled<span class="token punctuation">,</span> count<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',i(Lk,nv),i(Lk,sv),i(sv,tv),i(Lk,ev),i(Lk,ov),ov.innerHTML='<code class="language-svelte">&lt;script&gt;\n  export let count = 0;\n  // NOTE: move &#96;quadrupled&#96; before &#96;doubled&#96;\n  // highlight-start\n  $: quadrupled = doubled * 2;\n  $: doubled = count * 2;\n  // highlight-end\n  $: tripled = count * 3;\n&lt;/script&gt;</code>',i(Lk,cv),i(Lk,pv),i(pv,rv),i(rv,iv),i(Lk,lv),i(Lk,uv),uv.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">instance</span><span class="token punctuation">(</span><span class="token parameter">$$self<span class="token punctuation">,</span> $$props<span class="token punctuation">,</span> $$invalidate</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n\t<span class="token comment">// ...</span>\n\n\t$$self<span class="token punctuation">.</span>$$<span class="token punctuation">.</span><span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n\t\t<span class="token comment">// NOTE: &#96;quadrupled&#96; invalidates after &#96;doubled&#96;</span>\n\t\t<span class="token comment">// highlight-start</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>$$self<span class="token punctuation">.</span>$$<span class="token punctuation">.</span>dirty <span class="token operator">&amp;</span> <span class="token comment">/*count*/</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n\t\t\t$<span class="token punctuation">:</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>doubled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">&#125;</span>\n\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>$$self<span class="token punctuation">.</span>$$<span class="token punctuation">.</span>dirty <span class="token operator">&amp;</span> <span class="token comment">/*doubled*/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n\t\t\t$<span class="token punctuation">:</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>quadrupled <span class="token operator">=</span> doubled <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">&#125;</span>\n\t\t<span class="token comment">// highlight-end</span>\n\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>$$self<span class="token punctuation">.</span>$$<span class="token punctuation">.</span>dirty <span class="token operator">&amp;</span> <span class="token comment">/*count*/</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n\t\t\t$<span class="token punctuation">:</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>tripled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">&#125;</span>\n\t<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">return</span> <span class="token punctuation">[</span>doubled<span class="token punctuation">,</span> tripled<span class="token punctuation">,</span> quadrupled<span class="token punctuation">,</span> count<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',i(Lk,hv),i(Lk,dv),i(dv,fv),i(Lk,kv),i(Lk,vv),i(vv,mv),i(mv,Ev),i(mv,gv),i(gv,bv),i(mv,$v),i(mv,yv),i(yv,wv),i(wv,Ov),i(Ov,Sv),i(wv,Tv),i(wv,Lv),i(Lv,Nv),i(wv,Pv),i(wv,xv),i(xv,Cv),i(wv,Dv),i(vv,Av),i(vv,Iv),i(Iv,jv),i(Iv,Rv),i(Rv,Mv),i(Iv,Hv),i(vv,_v),i(vv,Uv),i(Uv,qv),i(Uv,Gv),i(Gv,Bv),i(Bv,Fv),i(Fv,Jv),i(Bv,zv),i(Bv,Wv),i(Wv,Yv),i(Bv,Vv),i(Bv,Kv),i(Kv,Zv),i(Bv,Qv),i(Bv,Xv),i(Xv,am),i(Bv,nm),i(Bv,sm),i(sm,tm),i(Bv,em),i(Lk,om),i(Lk,cm),i(cm,pm),i(cm,rm),i(rm,im),i(cm,lm),i(Lk,um),i(Lk,hm),i(hm,dm),i(Lk,fm),i(Lk,km),km.innerHTML='<code class="language-svelte">&lt;script&gt;\n// NOTE: use &#96;count&#96; in a reactive declaration before &#96;count&#96; is declared\n$: doubled = count * 2;\nlet count = 1;\n&lt;/script&gt;\n\n&#123;count&#125; * 2 = &#123;doubled&#125;</code>',i(Lk,vm),i(Lk,mm),i(mm,Em),i(Em,gm),i(Lk,bm),i(Lk,$m),i($m,ym),i(ym,wm),i(ym,Om),i(Om,Sm),i(ym,Tm),i(Lk,Lm),i(Lk,Nm),i(Nm,Pm),i(Nm,xm),i(xm,Cm),i(Nm,Dm),i(Nm,Am),i(Am,Im),i(Nm,jm),i(Lk,Rm),i(Lk,Mm),i(Mm,Hm),i(Mm,_m),i(_m,Um),i(Mm,qm),i(Lk,Gm),i(Lk,Bm),Bm.innerHTML='<code class="language-js"><span class="token comment">// src/runtime/internal/scheduler.ts</span>\n<span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">$$</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>$$<span class="token punctuation">.</span>fragment <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token comment">// NOTE: this is important now!</span>\n    <span class="token comment">// highlight-next-line</span>\n    $$<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>$$<span class="token punctuation">.</span>dirty<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">run_all</span><span class="token punctuation">(</span>$$<span class="token punctuation">.</span>before_update<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// calls the &#96;p&#96; function</span>\n    $$<span class="token punctuation">.</span>fragment <span class="token operator">&amp;&amp;</span> $$<span class="token punctuation">.</span>fragment<span class="token punctuation">.</span><span class="token function">p</span><span class="token punctuation">(</span>$$<span class="token punctuation">.</span>dirty<span class="token punctuation">,</span> $$<span class="token punctuation">.</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span></code>',i(Lk,Fm),i(Lk,Jm),i(Jm,zm),i(Jm,Wm),i(Wm,Ym),i(Jm,Vm),i(Jm,Km),i(Km,Zm),i(Jm,Qm),i(Jm,Xm),i(Xm,aE),i(Jm,nE),i(Lk,sE),i(Lk,tE),i(tE,eE),l(a,oE,n),l(a,cE,n),i(cE,pE),i(pE,rE),i(rE,iE),i(cE,lE),i(cE,uE),i(uE,hE),i(cE,dE),i(cE,fE),fE.innerHTML='<code class="language-svelte">&lt;script&gt;\n  let givenName = &#39;&#39;, familyName = &#39;&#39;;\n  function update() &#123;\n    givenName = &#39;Li Hau&#39;;\n    familyName = &#39;Tan&#39;;\n  &#125;\n  $: name = givenName + &quot; &quot; + familyName;\n  $: console.log(&#39;name&#39;, name);\n&lt;/script&gt;</code>',i(cE,kE),i(cE,vE),i(vE,mE),i(mE,EE),i(cE,gE),i(cE,bE),i(bE,$E),i(bE,yE),i(yE,wE),i(bE,OE),i(cE,SE),i(cE,TE),i(TE,LE),i(LE,NE),i(LE,PE),i(PE,xE),i(LE,CE),i(LE,DE),i(DE,AE),i(LE,IE),i(LE,jE),i(jE,RE),i(LE,ME),i(LE,HE),i(HE,_E),i(LE,UE),i(TE,qE),i(TE,GE),i(GE,BE),i(BE,FE),i(TE,JE),i(TE,zE),i(zE,WE),i(WE,YE),i(TE,VE),i(TE,KE),i(KE,ZE),i(ZE,QE),i(KE,XE),i(KE,ag),i(ag,ng),i(KE,sg),i(TE,tg),i(TE,eg),i(eg,og),i(eg,cg),i(cg,pg),i(eg,rg),i(rg,ig),i(ig,lg),i(ig,ug),i(ug,hg),i(ig,dg),i(ig,fg),i(fg,kg),i(ig,vg),i(ig,mg),i(mg,Eg),i(ig,gg),i(ig,bg),i(bg,$g),i(rg,yg),i(rg,wg),i(wg,Og),i(wg,Sg),i(Sg,Tg),i(wg,Lg),i(wg,Ng),i(Ng,Pg),i(TE,xg),i(TE,Cg),i(Cg,Dg),i(Cg,Ag),i(Ag,Ig),i(Cg,jg),i(cE,Rg),i(cE,Mg),i(Mg,Hg),i(Mg,_g),i(_g,Ug),i(Mg,qg),i(Mg,Gg),i(Gg,Bg),i(Mg,Fg),i(Mg,Jg),i(Jg,zg),i(Mg,Wg),i(Mg,Yg),i(Yg,Vg),i(Mg,Kg),i(Mg,Zg),i(Zg,Qg),i(Mg,Xg),i(cE,ab),i(cE,nb),nb.innerHTML='<code class="language-js"><span class="token comment">// Instead of</span>\n<span class="token comment">// #1 &#96;givenName = \'Li Hau\'</span>\nname <span class="token operator">=</span> <span class="token string">\'Li Hau\'</span> <span class="token operator">+</span> <span class="token string">\' \'</span> <span class="token operator">+</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Li Hau \'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// #2 &#96;familyName = \'Tan\'</span>\nname <span class="token operator">=</span> <span class="token string">\'Li Hau\'</span> <span class="token operator">+</span> <span class="token string">\' \'</span> <span class="token operator">+</span> <span class="token string">\'Tan\'</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Li Hau Tan\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Reactive declarations and statements are batched</span>\n<span class="token comment">// #1 &#96;givenName = \'Li Hau\'</span>\n<span class="token comment">// #2 &#96;familyName = \'Tan\'</span>\nname <span class="token operator">=</span> <span class="token string">\'Li Hau\'</span> <span class="token operator">+</span> <span class="token string">\' \'</span> <span class="token operator">+</span> <span class="token string">\'Tan\'</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Li Hau Tan\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>',l(a,sb,n),l(a,tb,n),i(tb,eb),i(eb,ob),i(ob,cb),i(tb,pb),i(tb,rb),i(rb,ib),i(tb,lb),i(tb,ub),ub.innerHTML='<code class="language-svelte">&lt;script&gt;\n  let givenName = &#39;&#39;, familyName = &#39;&#39;;\n  function update() &#123;\n    givenName = &#39;Li Hau&#39;;\n    familyName = &#39;Tan&#39;;\n    // highlight-next-line\n    console.log(&#39;name&#39;, name); // Logs &#39;&#39;\n  &#125;\n  $: name = givenName + &quot; &quot; + familyName;\n&lt;/script&gt;</code>',i(tb,hb),i(tb,db),i(db,fb),i(fb,kb),i(tb,vb),i(tb,mb),i(mb,Eb),i(mb,gb),i(gb,bb),i(mb,$b),i(tb,yb),i(tb,wb),wb.innerHTML='<code class="language-svelte">&lt;script&gt;\n  let givenName = &#39;&#39;, familyName = &#39;&#39;;\n  function update() &#123;\n    givenName = &#39;Li Hau&#39;;\n    familyName = &#39;Tan&#39;;\n  &#125;\n  $: name = givenName + &quot; &quot; + familyName;\n  // highlight-next-line\n  $: console.log(&#39;name&#39;, name); // Logs &#39;Li Hau Tan&#39;\n&lt;/script&gt;</code>',l(a,Ob,n),l(a,Sb,n),i(Sb,Tb),i(Tb,Lb),i(Lb,Nb),i(Sb,Pb),i(Sb,xb),i(xb,Cb),i(Sb,Db),i(Sb,Ab),i(Ab,Ib),i(Ab,jb),i(jb,Rb),i(Ab,Mb),i(Sb,Hb),i(Sb,_b),_b.innerHTML='<code class="language-js"><span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token comment">// NOTE: refers to &#96;doubled&#96;</span>\n$<span class="token punctuation">:</span> quadrupled <span class="token operator">=</span> doubled <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token comment">// NOTE: defined &#96;doubled&#96;</span>\n$<span class="token punctuation">:</span> doubled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>\n\n<span class="token comment">// compiles into:</span>\n\n$$self<span class="token punctuation">.</span>$$<span class="token punctuation">.</span><span class="token function-variable function">update</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// ...</span>\n  $<span class="token punctuation">:</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token comment">/* doubled */</span><span class="token punctuation">,</span> doubled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  $<span class="token punctuation">:</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token comment">/* quadrupled */</span><span class="token punctuation">,</span> quadrupled <span class="token operator">=</span> doubled <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">&#125;</span></code>',l(a,Ub,n),l(a,qb,n),i(qb,Gb),i(Gb,Bb),i(Bb,Fb),i(qb,Jb),i(qb,zb),i(zb,Wb),i(zb,Yb),i(Yb,Vb),i(zb,Kb),i(qb,Zb),i(qb,Qb),i(Qb,Xb),i(Qb,a$),i(a$,n$),i(Qb,s$),i(qb,t$),i(qb,e$),i(e$,o$),i(qb,c$),i(qb,p$),p$.innerHTML='<code class="language-svelte">&lt;script&gt;\n  let count = 0;\n  $: doubled = count * 2;\n&lt;/script&gt;\n&#123; count &#125; x 2 = &#123;doubled&#125;</code>',i(qb,r$),i(qb,i$),i(i$,l$),i(l$,u$),i(qb,h$),i(qb,d$),i(d$,f$),i(d$,k$),i(k$,v$),i(d$,m$),i(d$,E$),i(E$,g$),i(d$,b$),i(qb,$$),i(qb,y$),y$.innerHTML='<code class="language-js"><span class="token comment">// ...</span>\n<span class="token keyword">function</span> <span class="token function">instance</span><span class="token punctuation">(</span><span class="token parameter">$$self<span class="token punctuation">,</span> $$props<span class="token punctuation">,</span> $$invalidate</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">let</span> doubled<span class="token punctuation">;</span>\n  $<span class="token punctuation">:</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>doubled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span>doubled<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',l(a,w$,n),l(a,O$,n),i(O$,S$),i(S$,T$),i(T$,L$),l(a,N$,n),l(a,P$,n),i(P$,x$),i(x$,C$),i(C$,D$),l(a,A$,n),l(a,I$,n),i(I$,j$),i(j$,R$),i(R$,M$),l(a,H$,n),l(a,_$,n),i(_$,U$),i(U$,q$),i(q$,G$),l(a,B$,n),l(a,F$,n),i(F$,J$),i(J$,z$),i(z$,W$),i(F$,Y$),i(F$,V$),i(V$,K$),i(V$,Z$),i(Z$,Q$),i(V$,X$),i(F$,ay),i(F$,ny),i(ny,sy),i(ny,ty),i(ty,ey),i(ny,oy),i(ny,cy),i(cy,py),i(ny,ry),i(ny,iy),i(iy,ly),i(ny,uy),i(F$,hy),i(F$,dy),i(dy,fy),i(fy,ky),i(fy,vy),i(vy,my),i(fy,Ey),i(F$,gy),i(F$,by),i(by,$y),i($y,yy),i($y,wy),i(wy,Oy),i($y,Sy),l(a,Ty,n),l(a,Ly,n),i(Ly,Ny),i(Ny,Py),i(Py,xy),i(Ly,Cy),i(Ly,Dy),i(Dy,Ay),i(Ay,Iy),i(Ay,jy),i(jy,Ry),i(Ay,My),i(Dy,Hy),i(Dy,_y),i(_y,Uy),i(_y,qy),i(qy,Gy),i(_y,By),i(_y,Fy),i(Fy,Jy),i(Dy,zy),i(Dy,Wy),i(Wy,Yy),i(Yy,Vy),i(Wy,Ky),i(Dy,Zy),i(Dy,Qy),i(Qy,Xy),i(Xy,aw),i(Qy,nw),i(Dy,sw),i(Dy,tw),i(tw,ew),i(ew,ow)},p:a,d(a){a&&u(s),a&&u(ja),a&&u(Ra),a&&u(Ga),a&&u(Ba),a&&u(Xa),a&&u(an),a&&u(nn),a&&u(sn),a&&u(un),a&&u(hn),a&&u(mn),a&&u(En),a&&u(Bn),a&&u(Fn),a&&u(ct),a&&u(pt),a&&u(xe),a&&u(Ce),a&&u(xc),a&&u(Cc),a&&u(al),a&&u(nl),a&&u(Rl),a&&u(Ml),a&&u(mu),a&&u(Eu),a&&u(ld),a&&u(ud),a&&u(qf),a&&u(Gf),a&&u(rk),a&&u(ik),a&&u(Tk),a&&u(Lk),a&&u(oE),a&&u(cE),a&&u(sb),a&&u(tb),a&&u(Ob),a&&u(Sb),a&&u(Ub),a&&u(qb),a&&u(w$),a&&u(O$),a&&u(N$),a&&u(P$),a&&u(A$),a&&u(I$),a&&u(H$),a&&u(_$),a&&u(B$),a&&u(F$),a&&u(Ty),a&&u(Ly)}}}function ha(a){let s,t;const e=[da];let o={$$slots:{default:[ua]},$$scope:{ctx:a}};for(let a=0;a<e.length;a+=1)o=n(o,e[a]);return s=new la({props:o}),{c(){B(s.$$.fragment)},l(a){F(s.$$.fragment,a)},m(a,n){J(s,a,n),t=!0},p(a,[n]){const t=0&n?function(a,n){const s={},t={},e={$$scope:1};let o=a.length;for(;o--;){const c=a[o],p=n[o];if(p){for(const a in c)a in p||(t[a]=1);for(const a in p)e[a]||(s[a]=p[a],e[a]=1);a[o]=p}else for(const a in c)e[a]=1}for(const a in t)a in s||(s[a]=void 0);return s}(e,[(o=da,"object"==typeof o&&null!==o?o:{})]):{};var o;1&n&&(t.$$scope={dirty:n,ctx:a}),s.$set(t)},i(a){t||(q(s.$$.fragment,a),t=!0)},o(a){G(s.$$.fragment,a),t=!1},d(a){z(s,a)}}}const da={title:"Compile Svelte in your head (Part 2)",date:"2020-03-22T08:00:00Z",tags:["Svelte","JavaScript"],series:"Compile Svelte in your head",slug:"compile-svelte-in-your-head-part-2",type:"blog"};class fa extends V{constructor(a){super(),Y(this,a,null,ha,c,{})}}setTimeout(()=>{new fa({target:document.querySelector("#app"),hydrate:!0})},3e3);
