function a(){}function n(a,n){for(const s in n)a[s]=n[s];return a}function s(a){return a()}function t(){return Object.create(null)}function e(a){a.forEach(s)}function o(a){return"function"==typeof a}function p(a,n){return a!=a?n==n:a!==n||a&&"object"==typeof a||"function"==typeof a}function c(a,s,t,e){return a[1]&&e?n(t.ctx.slice(),a[1](e(s))):t.ctx}function r(a,n,s,t,e,o,p){const r=function(a,n,s,t){if(a[2]&&t){const e=a[2](t(s));if(void 0===n.dirty)return e;if("object"==typeof e){const a=[],s=Math.max(n.dirty.length,e.length);for(let t=0;t<s;t+=1)a[t]=n.dirty[t]|e[t];return a}return n.dirty|e}return n.dirty}(n,t,e,o);if(r){const e=c(n,s,t,p);a.p(e,r)}}function l(a,n){a.appendChild(n)}function i(a,n,s){a.insertBefore(n,s||null)}function u(a){a.parentNode.removeChild(a)}function k(a,n){for(let s=0;s<a.length;s+=1)a[s]&&a[s].d(n)}function h(a){return document.createElement(a)}function d(a){return document.createElementNS("http://www.w3.org/2000/svg",a)}function f(a){return document.createTextNode(a)}function m(){return f(" ")}function v(){return f("")}function g(a,n,s){null==s?a.removeAttribute(n):a.getAttribute(n)!==s&&a.setAttribute(n,s)}function E(a){return Array.from(a.childNodes)}function b(a,n,s,t){for(let t=0;t<a.length;t+=1){const e=a[t];if(e.nodeName===n){let n=0;const o=[];for(;n<e.attributes.length;){const a=e.attributes[n++];s[a.name]||o.push(a.name)}for(let a=0;a<o.length;a++)e.removeAttribute(o[a]);return a.splice(t,1)[0]}}return t?d(n):h(n)}function y(a,n){for(let s=0;s<a.length;s+=1){const t=a[s];if(3===t.nodeType)return t.data=""+n,a.splice(s,1)[0]}return f(n)}function $(a){return y(a," ")}function w(a,n){n=""+n,a.wholeText!==n&&(a.data=n)}function O(a,n){a.value=null==n?"":n}class S{constructor(a=null){this.a=a,this.e=this.n=null}m(a,n,s=null){this.e||(this.e=h(n.nodeName),this.t=n,this.h(a)),this.i(s)}h(a){this.e.innerHTML=a,this.n=Array.from(this.e.childNodes)}i(a){for(let n=0;n<this.n.length;n+=1)i(this.t,this.n[n],a)}p(a){this.d(),this.h(a),this.i(this.a)}d(){this.n.forEach(u)}}let T;function L(a){T=a}function N(a){(function(){if(!T)throw new Error("Function called outside component initialization");return T})().$$.on_mount.push(a)}const P=[],x=[],C=[],D=[],A=Promise.resolve();let I=!1;function j(a){C.push(a)}let R=!1;const M=new Set;function H(){if(!R){R=!0;do{for(let a=0;a<P.length;a+=1){const n=P[a];L(n),_(n.$$)}for(P.length=0;x.length;)x.pop()();for(let a=0;a<C.length;a+=1){const n=C[a];M.has(n)||(M.add(n),n())}C.length=0}while(P.length);for(;D.length;)D.pop()();I=!1,R=!1,M.clear()}}function _(a){if(null!==a.fragment){a.update(),e(a.before_update);const n=a.dirty;a.dirty=[-1],a.fragment&&a.fragment.p(a.ctx,n),a.after_update.forEach(j)}}const U=new Set;function G(a,n){a&&a.i&&(U.delete(a),a.i(n))}function q(a,n,s,t){if(a&&a.o){if(U.has(a))return;U.add(a),(void 0).c.push(()=>{U.delete(a),t&&(s&&a.d(1),t())}),a.o(n)}}function B(a){a&&a.c()}function z(a,n){a&&a.l(n)}function F(a,n,t){const{fragment:p,on_mount:c,on_destroy:r,after_update:l}=a.$$;p&&p.m(n,t),j(()=>{const n=c.map(s).filter(o);r?r.push(...n):e(n),a.$$.on_mount=[]}),l.forEach(j)}function J(a,n){const s=a.$$;null!==s.fragment&&(e(s.on_destroy),s.fragment&&s.fragment.d(n),s.on_destroy=s.fragment=null,s.ctx=[])}function W(a,n){-1===a.$$.dirty[0]&&(P.push(a),I||(I=!0,A.then(H)),a.$$.dirty.fill(0)),a.$$.dirty[n/31|0]|=1<<n%31}function Y(n,s,o,p,c,r,l=[-1]){const i=T;L(n);const k=s.props||{},h=n.$$={fragment:null,ctx:null,props:r,update:a,not_equal:c,bound:t(),on_mount:[],on_destroy:[],before_update:[],after_update:[],context:new Map(i?i.$$.context:[]),callbacks:t(),dirty:l};let d=!1;if(h.ctx=o?o(n,k,(a,s,...t)=>{const e=t.length?t[0]:s;return h.ctx&&c(h.ctx[a],h.ctx[a]=e)&&(h.bound[a]&&h.bound[a](e),d&&W(n,a)),s}):[],h.update(),d=!0,e(h.before_update),h.fragment=!!p&&p(h.ctx),s.target){if(s.hydrate){const a=E(s.target);h.fragment&&h.fragment.l(a),a.forEach(u)}else h.fragment&&h.fragment.c();s.intro&&G(n.$$.fragment),F(n,s.target,s.anchor),H()}L(i)}class V{$destroy(){J(this,1),this.$destroy=a}$on(a,n){const s=this.$$.callbacks[a]||(this.$$.callbacks[a]=[]);return s.push(n),()=>{const a=s.indexOf(n);-1!==a&&s.splice(a,1)}}$set(){}}function K(n){let s,t,e,o,p,c,r,k,v,w,O,S,T,L,N,P,x,C,D,A,I,j,R,M,H,_,U,G,q,B,z,F,J,W,Y;return{c(){s=h("header"),t=h("nav"),e=h("ul"),o=h("li"),p=h("a"),c=f("Tan Li Hau"),r=m(),k=h("li"),v=h("a"),w=f("About"),O=m(),S=h("li"),T=h("a"),L=f("Writings"),N=m(),P=h("li"),x=h("a"),C=f("Talks"),D=m(),A=h("li"),I=h("a"),j=f("Notes"),R=m(),M=h("li"),H=h("a"),_=f("Newsletter"),U=m(),G=h("li"),q=h("a"),B=d("svg"),z=d("path"),F=m(),J=h("a"),W=d("svg"),Y=d("path"),this.h()},l(a){s=b(a,"HEADER",{class:!0});var n=E(s);t=b(n,"NAV",{});var l=E(t);e=b(l,"UL",{class:!0});var i=E(e);o=b(i,"LI",{class:!0});var h=E(o);p=b(h,"A",{href:!0,class:!0});var d=E(p);c=y(d,"Tan Li Hau"),d.forEach(u),h.forEach(u),r=$(i),k=b(i,"LI",{class:!0});var f=E(k);v=b(f,"A",{href:!0,class:!0});var m=E(v);w=y(m,"About"),m.forEach(u),f.forEach(u),O=$(i),S=b(i,"LI",{class:!0});var g=E(S);T=b(g,"A",{href:!0,class:!0});var V=E(T);L=y(V,"Writings"),V.forEach(u),g.forEach(u),N=$(i),P=b(i,"LI",{class:!0});var K=E(P);x=b(K,"A",{href:!0,class:!0});var Z=E(x);C=y(Z,"Talks"),Z.forEach(u),K.forEach(u),D=$(i),A=b(i,"LI",{class:!0});var Q=E(A);I=b(Q,"A",{href:!0,class:!0});var X=E(I);j=y(X,"Notes"),X.forEach(u),Q.forEach(u),R=$(i),M=b(i,"LI",{class:!0});var aa=E(M);H=b(aa,"A",{href:!0,class:!0});var na=E(H);_=y(na,"Newsletter"),na.forEach(u),aa.forEach(u),U=$(i),G=b(i,"LI",{class:!0});var sa=E(G);q=b(sa,"A",{"aria-label":!0,href:!0,class:!0});var ta=E(q);B=b(ta,"svg",{viewBox:!0,width:!0,height:!0,class:!0},1);var ea=E(B);z=b(ea,"path",{d:!0},1),E(z).forEach(u),ea.forEach(u),ta.forEach(u),F=$(sa),J=b(sa,"A",{"aria-label":!0,href:!0,class:!0});var oa=E(J);W=b(oa,"svg",{viewBox:!0,width:!0,height:!0,class:!0},1);var pa=E(W);Y=b(pa,"path",{d:!0},1),E(Y).forEach(u),pa.forEach(u),oa.forEach(u),sa.forEach(u),i.forEach(u),l.forEach(u),n.forEach(u),this.h()},h(){g(p,"href","/"),g(p,"class","svelte-f3e4uo"),g(o,"class","svelte-f3e4uo"),g(v,"href","/about"),g(v,"class","svelte-f3e4uo"),g(k,"class","svelte-f3e4uo"),g(T,"href","/blogs"),g(T,"class","svelte-f3e4uo"),g(S,"class","svelte-f3e4uo"),g(x,"href","/talks"),g(x,"class","svelte-f3e4uo"),g(P,"class","svelte-f3e4uo"),g(I,"href","/notes"),g(I,"class","svelte-f3e4uo"),g(A,"class","svelte-f3e4uo"),g(H,"href","/newsletter"),g(H,"class","svelte-f3e4uo"),g(M,"class","svelte-f3e4uo"),g(z,"d","M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66\n    10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5\n    4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"),g(B,"viewBox","0 0 24 24"),g(B,"width","1em"),g(B,"height","1em"),g(B,"class","svelte-f3e4uo"),g(q,"aria-label","Twitter account"),g(q,"href","https://twitter.com/lihautan"),g(q,"class","svelte-f3e4uo"),g(Y,"d","M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0\n    0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07\n    5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65\n    5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42\n    3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"),g(W,"viewBox","0 0 24 24"),g(W,"width","1em"),g(W,"height","1em"),g(W,"class","svelte-f3e4uo"),g(J,"aria-label","Github account"),g(J,"href","https://github.com/tanhauhau"),g(J,"class","svelte-f3e4uo"),g(G,"class","social svelte-f3e4uo"),g(e,"class","svelte-f3e4uo"),g(s,"class","svelte-f3e4uo")},m(a,n){i(a,s,n),l(s,t),l(t,e),l(e,o),l(o,p),l(p,c),l(e,r),l(e,k),l(k,v),l(v,w),l(e,O),l(e,S),l(S,T),l(T,L),l(e,N),l(e,P),l(P,x),l(x,C),l(e,D),l(e,A),l(A,I),l(I,j),l(e,R),l(e,M),l(M,H),l(H,_),l(e,U),l(e,G),l(G,q),l(q,B),l(B,z),l(G,F),l(G,J),l(J,W),l(W,Y)},p:a,i:a,o:a,d(a){a&&u(s)}}}class Z extends V{constructor(a){super(),Y(this,a,null,K,p,{})}}function Q(n){let s,t,e,o,p,c,r,k,d,v,w,S,T,L,N,P,x,C,D,A;return{c(){s=h("div"),t=h("h1"),e=f("Subscribe to my newsletter"),o=m(),p=h("h2"),c=f("Get the latest blog posts and project updates delivered right to your inbox"),r=m(),k=h("form"),d=h("div"),v=h("input"),w=m(),S=h("input"),L=m(),N=h("input"),P=m(),x=h("p"),C=f("Powered by Buttondown."),this.h()},l(a){s=b(a,"DIV",{class:!0});var n=E(s);t=b(n,"H1",{});var l=E(t);e=y(l,"Subscribe to my newsletter"),l.forEach(u),o=$(n),p=b(n,"H2",{class:!0});var i=E(p);c=y(i,"Get the latest blog posts and project updates delivered right to your inbox"),i.forEach(u),r=$(n),k=b(n,"FORM",{action:!0,method:!0,target:!0,onsubmit:!0,class:!0});var h=E(k);d=b(h,"DIV",{class:!0});var f=E(d);v=b(f,"INPUT",{type:!0,name:!0,id:!0,"aria-label":!0,placeholder:!0,class:!0}),w=$(f),S=b(f,"INPUT",{type:!0,value:!0,disabled:!0,class:!0}),f.forEach(u),L=$(h),N=b(h,"INPUT",{type:!0,value:!0,name:!0,class:!0}),P=$(h),x=b(h,"P",{class:!0});var m=E(x);C=y(m,"Powered by Buttondown."),m.forEach(u),h.forEach(u),n.forEach(u),this.h()},h(){g(p,"class","svelte-1k1s1co"),g(v,"type","email"),g(v,"name","email"),g(v,"id","bd-email"),g(v,"aria-label","email address"),g(v,"placeholder","youremail@example.com"),g(v,"class","svelte-1k1s1co"),g(S,"type","submit"),S.value="Subscribe",S.disabled=T=!n[0],g(S,"class","svelte-1k1s1co"),g(d,"class","form-item svelte-1k1s1co"),g(N,"type","hidden"),N.value="1",g(N,"name","embed"),g(N,"class","svelte-1k1s1co"),g(x,"class","svelte-1k1s1co"),g(k,"action","https://buttondown.email/api/emails/embed-subscribe/lihautan"),g(k,"method","post"),g(k,"target","popupwindow"),g(k,"onsubmit","window.open('https://buttondown.email/lihautan', 'popupwindow')"),g(k,"class","embeddable-buttondown-form"),g(s,"class","form svelte-1k1s1co")},m(a,u){var h,f,m,g;i(a,s,u),l(s,t),l(t,e),l(s,o),l(s,p),l(p,c),l(s,r),l(s,k),l(k,d),l(d,v),O(v,n[0]),l(d,w),l(d,S),l(k,L),l(k,N),l(k,P),l(k,x),l(x,C),D||(h=v,f="input",m=n[1],h.addEventListener(f,m,g),A=()=>h.removeEventListener(f,m,g),D=!0)},p(a,[n]){1&n&&v.value!==a[0]&&O(v,a[0]),1&n&&T!==(T=!a[0])&&(S.disabled=T)},i:a,o:a,d(a){a&&u(s),D=!1,A()}}}function X(a,n,s){let t;return[t,function(){t=this.value,s(0,t)}]}class aa extends V{constructor(a){super(),Y(this,a,X,Q,p,{})}}function na(a){return N(()=>(setTimeout(()=>{if(window.innerWidth>1080){const a=document.createElement("script");a.async=!0,a.type="text/javascript",a.src="//cdn.carbonads.com/carbon.js?serve=CE7ITK3E&placement=lihautancom",a.id="_carbonads_js",document.body.appendChild(a)}},5e3),()=>{try{const a=document.getElementById("carbonads");a.parentNode.removeChild(a)}catch(a){}})),[]}class sa extends V{constructor(a){super(),Y(this,a,na,null,p,{})}}var ta="https://lihautan.com/compile-svelte-in-your-head-part-2/assets/hero-twitter-2914f5b9.jpg";function ea(a,n,s){const t=a.slice();return t[6]=n[s],t}function oa(a,n,s){const t=a.slice();return t[6]=n[s],t}function pa(a){let n,s;return{c(){n=h("meta"),this.h()},l(a){n=b(a,"META",{name:!0,content:!0}),this.h()},h(){g(n,"name","keywords"),g(n,"content",s=a[6])},m(a,s){i(a,n,s)},p(a,t){4&t&&s!==(s=a[6])&&g(n,"content",s)},d(a){a&&u(n)}}}function ca(a){let n,s,t=a[6]+"";return{c(){n=h("span"),s=f(t),this.h()},l(a){n=b(a,"SPAN",{class:!0});var e=E(n);s=y(e,t),e.forEach(u),this.h()},h(){g(n,"class","svelte-9tqnza")},m(a,t){i(a,n,t),l(n,s)},p(a,n){4&n&&t!==(t=a[6]+"")&&w(s,t)},d(a){a&&u(n)}}}function ra(a){let n,s,t,e,o,p,d,O,T,L,N,P,x,C,D,A,I,j,R,M,H,_,U,W,Y,V,K,Q,X,na,ra,la,ia,ua,ka,ha,da=`<script type="application/ld+json">${JSON.stringify({"@context":"https://schema.org","@type":"Article",author:a[3],copyrightHolder:a[3],copyrightYear:"2020",creator:a[3],publisher:a[3],description:a[1],headline:a[0],name:a[0],inLanguage:"en"})}<\/script>`,fa=`<script type="application/ld+json">${JSON.stringify({"@context":"https://schema.org","@type":"BreadcrumbList",description:"Breadcrumbs list",name:"Breadcrumbs",itemListElement:[{"@type":"ListItem",item:{"@id":"https://lihautan.com",name:"Homepage"},name:"Homepage",position:1},{"@type":"ListItem",item:{"@id":"https%3A%2F%2Flihautan.com%2Fcompile-svelte-in-your-head-part-2",name:a[0]},name:a[0],position:2}]})}<\/script>`;document.title=n=a[0]+" | Tan Li Hau";let ma=a[2],va=[];for(let n=0;n<ma.length;n+=1)va[n]=pa(oa(a,ma,n));U=new Z({});let ga=a[2],Ea=[];for(let n=0;n<ga.length;n+=1)Ea[n]=ca(ea(a,ga,n));const ba=a[5].default,ya=function(a,n,s,t){if(a){const e=c(a,n,s,t);return a[0](e)}}(ba,a,a[4],null);return ia=new aa({}),ka=new sa({}),{c(){s=h("meta"),t=h("meta"),e=h("meta"),o=h("meta"),p=h("meta"),d=h("meta"),O=h("meta"),T=h("meta"),L=h("meta"),N=h("meta"),P=h("meta");for(let a=0;a<va.length;a+=1)va[a].c();x=h("meta"),C=h("meta"),A=v(),j=v(),R=m(),M=h("a"),H=f("Skip to content"),_=m(),B(U.$$.fragment),W=m(),Y=h("main"),V=h("h1"),K=f(a[0]),Q=m();for(let a=0;a<Ea.length;a+=1)Ea[a].c();X=m(),na=h("article"),ya&&ya.c(),ra=m(),la=h("footer"),B(ia.$$.fragment),ua=m(),B(ka.$$.fragment),this.h()},l(n){const c=function(a,n=document.body){return Array.from(n.querySelectorAll(a))}('[data-svelte="svelte-15e3uyc"]',document.head);s=b(c,"META",{name:!0,content:!0}),t=b(c,"META",{name:!0,content:!0}),e=b(c,"META",{name:!0,content:!0}),o=b(c,"META",{name:!0,content:!0}),p=b(c,"META",{name:!0,content:!0}),d=b(c,"META",{name:!0,content:!0}),O=b(c,"META",{name:!0,content:!0}),T=b(c,"META",{name:!0,content:!0}),L=b(c,"META",{name:!0,content:!0}),N=b(c,"META",{name:!0,content:!0}),P=b(c,"META",{name:!0,content:!0});for(let a=0;a<va.length;a+=1)va[a].l(c);x=b(c,"META",{itemprop:!0,content:!0}),C=b(c,"META",{itemprop:!0,content:!0}),A=v(),j=v(),c.forEach(u),R=$(n),M=b(n,"A",{href:!0,class:!0});var r=E(M);H=y(r,"Skip to content"),r.forEach(u),_=$(n),z(U.$$.fragment,n),W=$(n),Y=b(n,"MAIN",{id:!0,class:!0});var l=E(Y);V=b(l,"H1",{});var i=E(V);K=y(i,a[0]),i.forEach(u),Q=$(l);for(let a=0;a<Ea.length;a+=1)Ea[a].l(l);X=$(l),na=b(l,"ARTICLE",{});var k=E(na);ya&&ya.l(k),k.forEach(u),l.forEach(u),ra=$(n),la=b(n,"FOOTER",{class:!0});var h=E(la);z(ia.$$.fragment,h),ua=$(h),z(ka.$$.fragment,h),h.forEach(u),this.h()},h(){g(s,"name","description"),g(s,"content",a[1]),g(t,"name","image"),g(t,"content",ta),g(e,"name","og:image"),g(e,"content",ta),g(o,"name","og:title"),g(o,"content",a[0]),g(p,"name","og:description"),g(p,"content",a[1]),g(d,"name","og:type"),g(d,"content","website"),g(O,"name","twitter:card"),g(O,"content","summary_large_image"),g(T,"name","twitter:creator"),g(T,"content","@lihautan"),g(L,"name","twitter:title"),g(L,"content",a[0]),g(N,"name","twitter:description"),g(N,"content",a[1]),g(P,"name","twitter:image"),g(P,"content",ta),g(x,"itemprop","url"),g(x,"content","https%3A%2F%2Flihautan.com%2Fcompile-svelte-in-your-head-part-2"),g(C,"itemprop","image"),g(C,"content",ta),D=new S(A),I=new S(j),g(M,"href","#content"),g(M,"class","skip svelte-9tqnza"),g(Y,"id","content"),g(Y,"class","blog svelte-9tqnza"),g(la,"class","svelte-9tqnza")},m(a,n){l(document.head,s),l(document.head,t),l(document.head,e),l(document.head,o),l(document.head,p),l(document.head,d),l(document.head,O),l(document.head,T),l(document.head,L),l(document.head,N),l(document.head,P);for(let a=0;a<va.length;a+=1)va[a].m(document.head,null);l(document.head,x),l(document.head,C),D.m(da,document.head),l(document.head,A),I.m(fa,document.head),l(document.head,j),i(a,R,n),i(a,M,n),l(M,H),i(a,_,n),F(U,a,n),i(a,W,n),i(a,Y,n),l(Y,V),l(V,K),l(Y,Q);for(let a=0;a<Ea.length;a+=1)Ea[a].m(Y,null);l(Y,X),l(Y,na),ya&&ya.m(na,null),i(a,ra,n),i(a,la,n),F(ia,la,null),l(la,ua),F(ka,la,null),ha=!0},p(a,[t]){if((!ha||1&t)&&n!==(n=a[0]+" | Tan Li Hau")&&(document.title=n),(!ha||2&t)&&g(s,"content",a[1]),(!ha||1&t)&&g(o,"content",a[0]),(!ha||2&t)&&g(p,"content",a[1]),(!ha||1&t)&&g(L,"content",a[0]),(!ha||2&t)&&g(N,"content",a[1]),4&t){let n;for(ma=a[2],n=0;n<ma.length;n+=1){const s=oa(a,ma,n);va[n]?va[n].p(s,t):(va[n]=pa(s),va[n].c(),va[n].m(x.parentNode,x))}for(;n<va.length;n+=1)va[n].d(1);va.length=ma.length}if((!ha||3&t)&&da!==(da=`<script type="application/ld+json">${JSON.stringify({"@context":"https://schema.org","@type":"Article",author:a[3],copyrightHolder:a[3],copyrightYear:"2020",creator:a[3],publisher:a[3],description:a[1],headline:a[0],name:a[0],inLanguage:"en"})}<\/script>`)&&D.p(da),(!ha||1&t)&&fa!==(fa=`<script type="application/ld+json">${JSON.stringify({"@context":"https://schema.org","@type":"BreadcrumbList",description:"Breadcrumbs list",name:"Breadcrumbs",itemListElement:[{"@type":"ListItem",item:{"@id":"https://lihautan.com",name:"Homepage"},name:"Homepage",position:1},{"@type":"ListItem",item:{"@id":"https%3A%2F%2Flihautan.com%2Fcompile-svelte-in-your-head-part-2",name:a[0]},name:a[0],position:2}]})}<\/script>`)&&I.p(fa),(!ha||1&t)&&w(K,a[0]),4&t){let n;for(ga=a[2],n=0;n<ga.length;n+=1){const s=ea(a,ga,n);Ea[n]?Ea[n].p(s,t):(Ea[n]=ca(s),Ea[n].c(),Ea[n].m(Y,X))}for(;n<Ea.length;n+=1)Ea[n].d(1);Ea.length=ga.length}ya&&ya.p&&16&t&&r(ya,ba,a,a[4],t,null,null)},i(a){ha||(G(U.$$.fragment,a),G(ya,a),G(ia.$$.fragment,a),G(ka.$$.fragment,a),ha=!0)},o(a){q(U.$$.fragment,a),q(ya,a),q(ia.$$.fragment,a),q(ka.$$.fragment,a),ha=!1},d(a){u(s),u(t),u(e),u(o),u(p),u(d),u(O),u(T),u(L),u(N),u(P),k(va,a),u(x),u(C),u(A),a&&D.d(),u(j),a&&I.d(),a&&u(R),a&&u(M),a&&u(_),J(U,a),a&&u(W),a&&u(Y),k(Ea,a),ya&&ya.d(a),a&&u(ra),a&&u(la),J(ia),J(ka)}}}function la(a,n,s){let{title:t=""}=n,{description:e=""}=n,{tags:o=[]}=n;const p={"@type":"Person",name:"Tan Li Hau"};let{$$slots:c={},$$scope:r}=n;return a.$set=a=>{"title"in a&&s(0,t=a.title),"description"in a&&s(1,e=a.description),"tags"in a&&s(2,o=a.tags),"$$scope"in a&&s(4,r=a.$$scope)},[t,e,o,p,r,c]}class ia extends V{constructor(a){super(),Y(this,a,la,ra,p,{title:0,description:1,tags:2})}}function ua(n){let s,t,e,o,p,c,r,k,d,v,w,O,S,T,L,N,P,x,C,D,A,I,j,R,M,H,_,U,G,q,B,z,F,J,W,Y,V,K,Z,Q,X,aa,na,sa,ta,ea,oa,pa,ca,ra,la,ia,ua,ka,ha,da,fa,ma,va,ga,Ea,ba,ya,$a,wa,Oa,Sa,Ta,La,Na,Pa,xa,Ca,Da,Aa,Ia,ja,Ra,Ma,Ha,_a,Ua,Ga,qa,Ba,za,Fa,Ja,Wa,Ya,Va,Ka,Za,Qa,Xa,an,nn,sn,tn,en,on,pn,cn,rn,ln,un,kn,hn,dn,fn,mn,vn,gn,En,bn,yn,$n,wn,On,Sn,Tn,Ln,Nn,Pn,xn,Cn,Dn,An,In,jn,Rn,Mn,Hn,_n,Un,Gn,qn,Bn,zn,Fn,Jn,Wn,Yn,Vn,Kn,Zn,Qn,Xn,as,ns,ss,ts,es,os,ps,cs,rs,ls,is,us,ks,hs,ds,fs,ms,vs,gs,Es,bs,ys,$s,ws,Os,Ss,Ts,Ls,Ns,Ps,xs,Cs,Ds,As,Is,js,Rs,Ms,Hs,_s,Us,Gs,qs,Bs,zs,Fs,Js,Ws,Ys,Vs,Ks,Zs,Qs,Xs,at,nt,st,tt,et,ot,pt,ct,rt,lt,it,ut,kt,ht,dt,ft,mt,vt,gt,Et,bt,yt,$t,wt,Ot,St,Tt,Lt,Nt,Pt,xt,Ct,Dt,At,It,jt,Rt,Mt,Ht,_t,Ut,Gt,qt,Bt,zt,Ft,Jt,Wt,Yt,Vt,Kt,Zt,Qt,Xt,ae,ne,se,te,ee,oe,pe,ce,re,le,ie,ue,ke,he,de,fe,me,ve,ge,Ee,be,ye,$e,we,Oe,Se,Te,Le,Ne,Pe,xe,Ce,De,Ae,Ie,je,Re,Me,He,_e,Ue,Ge,qe,Be,ze,Fe,Je,We,Ye,Ve,Ke,Ze,Qe,Xe,ao,no,so,to,eo,oo,po,co,ro,lo,io,uo,ko,ho,fo,mo,vo,go,Eo,bo,yo,$o,wo,Oo,So,To,Lo,No,Po,xo,Co,Do,Ao,Io,jo,Ro,Mo,Ho,_o,Uo,Go,qo,Bo,zo,Fo,Jo,Wo,Yo,Vo,Ko,Zo,Qo,Xo,ap,np,sp,tp,ep,op,pp,cp,rp,lp,ip,up,kp,hp,dp,fp,mp,vp,gp,Ep,bp,yp,$p,wp,Op,Sp,Tp,Lp,Np,Pp,xp,Cp,Dp,Ap,Ip,jp,Rp,Mp,Hp,_p,Up,Gp,qp,Bp,zp,Fp,Jp,Wp,Yp,Vp,Kp,Zp,Qp,Xp,ac,nc,sc,tc,ec,oc,pc,cc,rc,lc,ic,uc,kc,hc,dc,fc,mc,vc,gc,Ec,bc,yc,$c,wc,Oc,Sc,Tc,Lc,Nc,Pc,xc,Cc,Dc,Ac,Ic,jc,Rc,Mc,Hc,_c,Uc,Gc,qc,Bc,zc,Fc,Jc,Wc,Yc,Vc,Kc,Zc,Qc,Xc,ar,nr,sr,tr,er,or,pr,cr,rr,lr,ir,ur,kr,hr,dr,fr,mr,vr,gr,Er,br,yr,$r,wr,Or,Sr,Tr,Lr,Nr,Pr,xr,Cr,Dr,Ar,Ir,jr,Rr,Mr,Hr,_r,Ur,Gr,qr,Br,zr,Fr,Jr,Wr,Yr,Vr,Kr,Zr,Qr,Xr,al,nl,sl,tl,el,ol,pl,cl,rl,ll,il,ul,kl,hl,dl,fl,ml,vl,gl,El,bl,yl,$l,wl,Ol,Sl,Tl,Ll,Nl,Pl,xl,Cl,Dl,Al,Il,jl,Rl,Ml,Hl,_l,Ul,Gl,ql,Bl,zl,Fl,Jl,Wl,Yl,Vl,Kl,Zl,Ql,Xl,ai,ni,si,ti,ei,oi,pi,ci,ri,li,ii,ui,ki,hi,di,fi,mi,vi,gi,Ei,bi,yi,$i,wi,Oi,Si,Ti,Li,Ni,Pi,xi,Ci,Di,Ai,Ii,ji,Ri,Mi,Hi,_i,Ui,Gi,qi,Bi,zi,Fi,Ji,Wi,Yi,Vi,Ki,Zi,Qi,Xi,au,nu,su,tu,eu,ou,pu,cu,ru,lu,iu,uu,ku,hu,du,fu,mu,vu,gu,Eu,bu,yu,$u,wu,Ou,Su,Tu,Lu,Nu,Pu,xu,Cu,Du,Au,Iu,ju,Ru,Mu,Hu,_u,Uu,Gu,qu,Bu,zu,Fu,Ju,Wu,Yu,Vu,Ku,Zu,Qu,Xu,ak,nk,sk,tk,ek,ok,pk,ck,rk,lk,ik,uk,kk,hk,dk,fk,mk,vk,gk,Ek,bk,yk,$k,wk,Ok,Sk,Tk,Lk,Nk,Pk,xk,Ck,Dk,Ak,Ik,jk,Rk,Mk,Hk,_k,Uk,Gk,qk,Bk,zk,Fk,Jk,Wk,Yk,Vk,Kk,Zk,Qk,Xk,ah,nh,sh,th,eh,oh,ph,ch,rh,lh,ih,uh,kh,hh,dh,fh,mh,vh,gh,Eh,bh,yh,$h,wh,Oh,Sh,Th,Lh,Nh,Ph,xh,Ch,Dh,Ah,Ih,jh,Rh,Mh,Hh,_h,Uh,Gh,qh,Bh,zh,Fh,Jh,Wh,Yh,Vh,Kh,Zh,Qh,Xh,ad,nd,sd,td,ed,od,pd,cd,rd,ld,id,ud,kd,hd,dd,fd,md,vd,gd,Ed,bd,yd,$d,wd,Od,Sd,Td,Ld,Nd,Pd,xd,Cd,Dd,Ad,Id,jd,Rd,Md,Hd,_d,Ud,Gd,qd,Bd,zd,Fd,Jd,Wd,Yd,Vd,Kd,Zd,Qd,Xd,af,nf,sf,tf,ef,of,pf,cf,rf,lf,uf,kf,hf,df,ff,mf,vf,gf,Ef,bf,yf,$f,wf,Of,Sf,Tf,Lf,Nf,Pf,xf,Cf,Df,Af,If,jf,Rf,Mf,Hf,_f,Uf,Gf,qf,Bf,zf,Ff,Jf,Wf,Yf,Vf,Kf,Zf,Qf,Xf,am,nm,sm,tm,em,om,pm,cm,rm,lm,im,um,km,hm,dm,fm,mm,vm,gm,Em,bm,ym,$m,wm,Om,Sm,Tm,Lm,Nm,Pm,xm,Cm,Dm,Am,Im,jm,Rm,Mm,Hm,_m,Um,Gm,qm,Bm,zm,Fm,Jm,Wm,Ym,Vm,Km,Zm,Qm,Xm,av,nv,sv,tv,ev,ov,pv,cv,rv,lv,iv,uv,kv,hv,dv,fv,mv,vv,gv,Ev,bv,yv,$v,wv,Ov,Sv,Tv,Lv,Nv,Pv,xv,Cv,Dv,Av,Iv,jv,Rv,Mv,Hv,_v,Uv,Gv,qv,Bv,zv,Fv,Jv,Wv,Yv,Vv,Kv,Zv,Qv,Xv,ag,ng,sg,tg,eg,og,pg,cg,rg,lg,ig,ug,kg,hg,dg,fg,mg,vg,gg,Eg,bg,yg,$g,wg,Og,Sg,Tg,Lg,Ng,Pg,xg,Cg,Dg,Ag,Ig,jg,Rg,Mg,Hg,_g,Ug,Gg,qg,Bg,zg,Fg,Jg,Wg,Yg,Vg,Kg,Zg,Qg,Xg,aE,nE,sE,tE,eE,oE,pE,cE,rE,lE,iE,uE,kE,hE,dE,fE,mE,vE,gE,EE,bE,yE,$E,wE,OE,SE,TE,LE,NE,PE,xE,CE,DE,AE,IE,jE,RE,ME,HE,_E,UE,GE,qE,BE,zE,FE,JE,WE,YE,VE,KE,ZE,QE,XE,ab,nb,sb,tb,eb,ob,pb,cb,rb,lb,ib,ub,kb,hb,db,fb,mb,vb,gb,Eb,bb,yb,$b,wb,Ob,Sb,Tb,Lb,Nb,Pb,xb,Cb,Db,Ab,Ib,jb,Rb,Mb,Hb,_b,Ub,Gb,qb,Bb,zb,Fb,Jb,Wb,Yb,Vb,Kb,Zb,Qb,Xb,ay,ny,sy,ty,ey,oy,py,cy,ry,ly,iy,uy,ky,hy,dy,fy,my,vy,gy,Ey,by,yy,$y,wy,Oy,Sy,Ty,Ly,Ny,Py,xy,Cy,Dy,Ay,Iy,jy,Ry,My,Hy,_y,Uy,Gy,qy,By,zy,Fy,Jy,Wy,Yy,Vy,Ky,Zy,Qy,Xy,a$,n$,s$,t$,e$,o$,p$,c$,r$,l$,i$,u$,k$,h$,d$,f$,m$,v$,g$,E$,b$,y$,$$,w$,O$,S$,T$,L$,N$,P$,x$,C$,D$,A$,I$,j$,R$,M$,H$,_$,U$,G$,q$,B$,z$,F$,J$,W$,Y$,V$,K$,Z$,Q$,X$,aw,nw,sw,tw,ew,ow;return{c(){s=h("section"),t=h("ul"),e=h("li"),o=h("a"),p=f("Pre v3.16.0"),c=h("ul"),r=h("li"),k=h("a"),d=f("\\$\\$.ctx"),v=h("li"),w=h("a"),O=f("\\$\\$.dirty"),S=h("li"),T=h("a"),L=f("\\$\\$invalidate"),N=h("li"),P=h("a"),x=f("schedule_update"),C=h("ul"),D=h("li"),A=h("a"),I=f("tl/dr:"),j=h("li"),R=h("a"),M=f("v3.16.0"),H=h("ul"),_=h("li"),U=h("a"),G=f("Bitmask"),q=h("li"),B=h("a"),z=f("Bitmask in Svelte"),F=h("ul"),J=h("li"),W=h("a"),Y=f("Destructuring  "),V=h("li"),K=h("a"),Z=f("tl/dr:"),Q=h("li"),X=h("a"),aa=f("Reactive Declaration"),na=h("ul"),sa=h("ul"),ta=h("li"),ea=h("a"),oa=f("1. Execution of all reactive declarations and statements are batched"),pa=h("li"),ca=h("a"),ra=f("2. The value of reactive variable outside of reactive declarations and statements may not be up to date"),la=h("li"),ia=h("a"),ua=f("Sorting of reactive declarations and statements"),ka=h("li"),ha=h("a"),da=f("Reactive variable that is not reactive"),fa=h("li"),ma=h("a"),va=f("Summary"),ga=h("ul"),Ea=h("ul"),ba=h("li"),ya=h("a"),$a=f("1. Svelte keeps track of which variables are dirty and batched the DOM updates."),wa=h("li"),Oa=h("a"),Sa=f("2. Using bitmask, Svelte able to generate a more compact compiled code."),Ta=h("li"),La=h("a"),Na=f("3. Reactive declarations and statements are executed in batch, just like DOM updates"),Pa=h("li"),xa=h("a"),Ca=f("Closing Note"),Da=h("li"),Aa=h("a"),Ia=f("Further Resources"),ja=m(),Ra=h("p"),Ma=h("strong"),Ha=f("⬅ ⬅  Previously in "),_a=h("a"),Ua=f("Part 1"),Ga=f("."),qa=m(),Ba=h("p"),za=h("a"),Fa=f("Previously"),Ja=f(", when I mentioned the "),Wa=h("code"),Ya=f("$$invalidate"),Va=f(" function, I explained that the "),Ka=h("code"),Za=f("$$invalidate"),Qa=f(" function works conceptually like the following:"),Xa=m(),an=h("pre"),nn=m(),sn=h("p"),tn=f("but that's not the exact implementation of the "),en=h("code"),on=f("$$invaldiate"),pn=f(" function. So in this article, we are going to look at how "),cn=h("code"),rn=f("$$invalidate"),ln=f(" is implemented in Svelte."),un=m(),kn=h("p"),hn=f("At the point of writing, Svelte is at "),dn=h("a"),fn=f("v3.20.1"),mn=f("."),vn=m(),gn=h("section"),En=h("h2"),bn=h("a"),yn=f("Pre v3.16.0"),$n=m(),wn=h("p"),On=f("There's a big optimisation that changes the underlying implementation of the "),Sn=h("code"),Tn=f("$$invalidate"),Ln=f(" function in "),Nn=h("a"),Pn=f("v3.16.0"),xn=f(", namely in "),Cn=h("a"),Dn=f("#3945"),An=f(". The underlying concept doesn't change, but it'll be much easier to understand about "),In=h("code"),jn=f("$$invalidate"),Rn=f(" prior the change and learn about the optimisation change separately."),Mn=m(),Hn=h("p"),_n=f("Let's explain some of the variables that you are going to see, some of which was introduced in "),Un=h("a"),Gn=f("Part 1"),qn=f(":"),Bn=m(),zn=h("section"),Fn=h("h3"),Jn=h("a"),Wn=f("\\$\\$.ctx"),Yn=m(),Vn=h("p"),Kn=f("There's no official name for it. You can call it "),Zn=h("strong"),Qn=f("context"),Xn=f(" as it is the context which the template is based on to render onto the DOM."),as=m(),ns=h("p"),ss=f("I called it "),ts=h("a"),es=f("instance variables"),os=f(". As it is a JavaScript Object that contains all the variables that you:"),ps=m(),cs=h("ul"),rs=h("li"),ls=f("declared in the "),is=h("code"),us=f("<script>"),ks=f(" tag"),hs=m(),ds=h("li"),fs=f("mutated or reassigned"),ms=m(),vs=h("li"),gs=f("referenced in the template"),Es=m(),bs=h("p"),ys=f("that belongs to a component instance."),$s=m(),ws=h("p"),Os=f("The instance variables themselves can be of a primitive value, object, array or function."),Ss=m(),Ts=h("p"),Ls=f("The "),Ns=h("code"),Ps=f("instance"),xs=f(" function creates and returns the "),Cs=h("code"),Ds=f("ctx"),As=f(" object."),Is=m(),js=h("p"),Rs=f("Functions declared in the "),Ms=h("code"),Hs=f("<script>"),_s=f(" tag will refer to the instance variable that is scoped withn the "),Us=h("code"),Gs=f("instance"),qs=f(" function closure:"),Bs=m(),zs=h("pre"),Fs=m(),Js=h("p"),Ws=h("a"),Ys=f("Svelte REPL"),Vs=m(),Ks=h("pre"),Zs=m(),Qs=h("p"),Xs=f("Whenever a new instance of a component is created, the "),at=h("code"),nt=f("instance"),st=f(" function is called and the "),tt=h("code"),et=f("ctx"),ot=f(" object is created and captured within a new closure scope."),pt=m(),ct=h("section"),rt=h("h3"),lt=h("a"),it=f("\\$\\$.dirty"),ut=m(),kt=h("p"),ht=h("code"),dt=f("$$.dirty"),ft=f(" is a object that is used to track which instance variable had just changed and needs to be updated onto the DOM."),mt=m(),vt=h("p"),gt=f("For example, in the following Svelte component:"),Et=m(),bt=h("pre"),yt=m(),$t=h("p"),wt=h("a"),Ot=f("Svelte REPL"),St=m(),Tt=h("p"),Lt=f("The initial "),Nt=h("code"),Pt=f("$$.dirty"),xt=f(" is "),Ct=h("code"),Dt=f("null"),At=f(" ("),It=h("a"),jt=f("source code"),Rt=f(")."),Mt=m(),Ht=h("p"),_t=f("If you clicked on the "),Ut=h("strong"),Gt=f('"+ Agility"'),qt=f(" button, "),Bt=h("code"),zt=f("$$.dirty"),Ft=f(" will turn into:"),Jt=m(),Wt=h("pre"),Yt=m(),Vt=h("p"),Kt=f("If you clicked on the "),Zt=h("strong"),Qt=f('"Level Up"'),Xt=f(" button, "),ae=h("code"),ne=f("$$.dirty"),se=f(" will turn into:"),te=m(),ee=h("pre"),oe=m(),pe=h("p"),ce=h("code"),re=f("$$.dirty"),le=f(" is useful for Svelte, so that it doesn't update the DOM unnecessarily."),ie=m(),ue=h("p"),ke=f("If you looked at the "),he=h("strong"),de=f("p (u_p_date)"),fe=f(" function of the compiled code, you will see Svelte checks whether a variable is marked in "),me=h("code"),ve=f("$$.dirty"),ge=f(", before updating the DOM."),Ee=m(),be=h("pre"),ye=m(),$e=h("p"),we=f("After Svelte updates the DOM, the "),Oe=h("code"),Se=f("$$.dirty"),Te=f(" is set back to "),Le=h("code"),Ne=f("null"),Pe=f(" to indicate all changes has been applied onto the DOM."),xe=m(),Ce=h("section"),De=h("h3"),Ae=h("a"),Ie=f("\\$\\$invalidate"),je=m(),Re=h("p"),Me=h("code"),He=f("$$invalidate"),_e=f(" is the secret behind reactivity in Svelte."),Ue=m(),Ge=h("p"),qe=f("Whenever a variable is"),Be=m(),ze=h("ul"),Fe=h("li"),Je=f("reassigned "),We=h("code"),Ye=f("(foo = 1)"),Ve=m(),Ke=h("li"),Ze=f("mutated "),Qe=h("code"),Xe=f("(foo.bar = 1)"),ao=m(),no=h("p"),so=f("Svelte will wrap the assignment or update around with the "),to=h("code"),eo=f("$$invalidate"),oo=f(" function:"),po=m(),co=h("pre"),ro=m(),lo=h("p"),io=f("the "),uo=h("code"),ko=f("$$invalidate"),ho=f(" function will:"),fo=m(),mo=h("ol"),vo=h("li"),go=f("update the variable in "),Eo=h("code"),bo=f("$$.ctx"),yo=m(),$o=h("li"),wo=f("mark the variable in "),Oo=h("code"),So=f("$$.dirty"),To=m(),Lo=h("li"),No=f("schedule an update"),Po=m(),xo=h("li"),Co=f("return the value of the assignment or update expression"),Do=m(),Ao=h("pre"),Io=m(),jo=h("p"),Ro=h("a"),Mo=f("Source code"),Ho=m(),_o=h("p"),Uo=f("One interesting note about the function "),Go=h("code"),qo=f("$$invalidate"),Bo=f(" is that, it wraps around the assignment or update expression and returns what the expression evaluates to."),zo=m(),Fo=h("p"),Jo=f("This makes "),Wo=h("code"),Yo=f("$$invalidate"),Vo=f(" chainable:"),Ko=m(),Zo=h("pre"),Qo=m(),Xo=h("p"),ap=f("It seemed complex when there's a lot of assignment or update expressions in 1 statement! 🙈"),np=m(),sp=h("p"),tp=f("The 2nd argument of "),ep=h("code"),op=f("$$invalidate"),pp=f(" is the assignment or update expressions verbatim. But if it contains any assignment or update sub-expressions, we recursively wrap it with "),cp=h("code"),rp=f("$$invalidate"),lp=f("."),ip=m(),up=h("p"),kp=f("In case where the assignment expression changes a property of an object, we pass the object in as a 3rd argument of the "),hp=h("code"),dp=f("$$invalidate"),fp=f(" function, eg:"),mp=m(),vp=h("pre"),gp=m(),Ep=h("p"),bp=f("So that, we update the "),yp=h("code"),$p=f('"obj"'),wp=f(" variable to "),Op=h("code"),Sp=f("obj"),Tp=f(" instead of the value of the 2nd argument, "),Lp=h("code"),Np=f('"hello"'),Pp=f("."),xp=m(),Cp=h("section"),Dp=h("h3"),Ap=h("a"),Ip=f("schedule_update"),jp=m(),Rp=h("p"),Mp=h("code"),Hp=f("schedule_update"),_p=f(" schedules Svelte to update the DOM with the changes made thus far."),Up=m(),Gp=h("p"),qp=f("Svelte, at the point of writing ("),Bp=h("a"),zp=f("v3.20.1"),Fp=f("), uses "),Jp=h("a"),Wp=f("microtask queue"),Yp=f(" to batch change updates. The actual DOM update happens in the next microtask, so that any synchronous "),Vp=h("code"),Kp=f("$$invalidate"),Zp=f(" operations that happen within the same task get batched into the next DOM update."),Qp=m(),Xp=h("p"),ac=f("To schedule a next microtask, Svelte uses the Promise callback."),nc=m(),sc=h("pre"),tc=m(),ec=h("p"),oc=f("In "),pc=h("code"),cc=f("flush"),rc=f(", we call update for each component marked dirty:"),lc=m(),ic=h("pre"),uc=m(),kc=h("p"),hc=h("a"),dc=f("Source code"),fc=m(),mc=h("p"),vc=f("So, if you write a Svelte component like this:"),gc=m(),Ec=h("pre"),bc=m(),yc=h("p"),$c=h("a"),wc=f("Svelte REPL"),Oc=m(),Sc=h("p"),Tc=f("The DOM update for the "),Lc=h("code"),Nc=f("givenName"),Pc=f(" and "),xc=h("code"),Cc=f("familyName"),Dc=f(" happens in the same microtask:"),Ac=m(),Ic=h("ol"),jc=h("li"),Rc=f("Click on the "),Mc=h("strong"),Hc=f('"Update"'),_c=f(" to call the "),Uc=h("code"),Gc=f("update"),qc=f(" function"),Bc=m(),zc=h("li"),Fc=h("code"),Jc=f("$$invalidate('givenName', givenName = 'Li Hau')"),Wc=m(),Yc=h("li"),Vc=f("Mark the variable "),Kc=h("code"),Zc=f("givenName"),Qc=f(" dirty, "),Xc=h("code"),ar=f("$$.dirty['givenName'] = true"),nr=m(),sr=h("li"),tr=f("Schedule an update, "),er=h("code"),or=f("schedule_update()"),pr=m(),cr=h("li"),rr=f("Since it's the first update in the call stack, push the "),lr=h("code"),ir=f("flush"),ur=f(" function into the microtask queue"),kr=m(),hr=h("li"),dr=h("code"),fr=f("$$invalidate('familyName', familyName = 'Tan')"),mr=m(),vr=h("li"),gr=f("Mark the variable "),Er=h("code"),br=f("familyName"),yr=f(" dirty, "),$r=h("code"),wr=f("$$.dirty['familyName'] = true"),Or=m(),Sr=h("li"),Tr=f("Schedule an update, "),Lr=h("code"),Nr=f("schedule_update()"),Pr=m(),xr=h("li"),Cr=f("Since "),Dr=h("code"),Ar=f("update_scheduled = true"),Ir=f(", do nothing."),jr=m(),Rr=h("li"),Mr=h("strong"),Hr=f("-- End of task --"),_r=m(),Ur=h("li"),Gr=h("strong"),qr=f("-- Start of microtask--"),Br=m(),zr=h("li"),Fr=h("code"),Jr=f("flush()"),Wr=f(" calls "),Yr=h("code"),Vr=f("update()"),Kr=f(" for each component marked dirty"),Zr=m(),Qr=h("li"),Xr=f("Calls "),al=h("code"),nl=f("$$.fragment.p($$.dirty, $$.ctx)"),sl=f("."),tl=h("ul"),el=h("li"),ol=h("code"),pl=f("$$.dirty"),cl=f(" is now "),rl=h("code"),ll=f("{ givenName: true, familyName: true }"),il=m(),ul=h("li"),kl=h("code"),hl=f("$$.ctx"),dl=f(" is now "),fl=h("code"),ml=f("{ givenName: 'Li Hau', familyName: 'Tan' }"),vl=m(),gl=h("li"),El=f("In "),bl=h("code"),yl=f("function p(dirty, ctx)"),$l=f(","),wl=h("ul"),Ol=h("li"),Sl=f("Update the 1st text node to "),Tl=h("code"),Ll=f("$$.ctx['givenName']"),Nl=f(" if "),Pl=h("code"),xl=f("$$.dirty['givenName'] === true"),Cl=m(),Dl=h("li"),Al=f("Update the 2nd text node to "),Il=h("code"),jl=f("$$.ctx['familyName']"),Rl=f(" if "),Ml=h("code"),Hl=f("$$.dirty['familyName'] === true"),_l=m(),Ul=h("li"),Gl=f("Resets the "),ql=h("code"),Bl=f("$$.dirty"),zl=f(" to "),Fl=h("code"),Jl=f("null"),Wl=m(),Yl=h("li"),Vl=f("..."),Kl=m(),Zl=h("li"),Ql=h("strong"),Xl=f("-- End of microtask--"),ai=m(),ni=h("section"),si=h("h4"),ti=h("a"),ei=f("tl/dr:"),oi=m(),pi=h("ul"),ci=h("li"),ri=f("For each assignment or update, Svelte calls "),li=h("code"),ii=f("$$invalidate"),ui=f(" to update the variable in "),ki=h("code"),hi=f("$$.ctx"),di=f(" and mark the variable dirty in "),fi=h("code"),mi=f("$$.dirty"),vi=f("."),gi=m(),Ei=h("li"),bi=f("The acutal DOM update is batched into the next microtask queue."),yi=m(),$i=h("li"),wi=f("To update the DOM for each component, the component "),Oi=h("code"),Si=f("$$.fragment.p($$.diry, $$.ctx)"),Ti=f(" is called."),Li=m(),Ni=h("li"),Pi=f("After the DOM update, the "),xi=h("code"),Ci=f("$$.dirty"),Di=f(" is reset to "),Ai=h("code"),Ii=f("null"),ji=f("."),Ri=m(),Mi=h("section"),Hi=h("h2"),_i=h("a"),Ui=f("v3.16.0"),Gi=m(),qi=h("p"),Bi=f("One big change in v3.16.0 is the PR "),zi=h("a"),Fi=f("#3945"),Ji=f(", namely "),Wi=h("strong"),Yi=f("bitmask-based change tracking"),Vi=f("."),Ki=m(),Zi=h("p"),Qi=f("Instead of marking the variable dirty using an object:"),Xi=m(),au=h("pre"),nu=m(),su=h("p"),tu=f("Svelte assign each variable an index:"),eu=m(),ou=h("pre"),pu=m(),cu=h("p"),ru=f("and uses "),lu=h("a"),iu=f("bitmask"),uu=f(" to store the dirty information:"),ku=m(),hu=h("pre"),du=m(),fu=h("p"),mu=f("which is far more compact than the previous compiled code."),vu=m(),gu=h("section"),Eu=h("h3"),bu=h("a"),yu=f("Bitmask"),$u=m(),wu=h("p"),Ou=f("For those who don't understand, allow me to quickly explain what it is."),Su=m(),Tu=h("p"),Lu=f("Of course, if you want to learn more about it, feel free to read a more detailed explanation, like "),Nu=h("a"),Pu=f("this"),xu=f(" and "),Cu=h("a"),Du=f("this"),Au=f("."),Iu=m(),ju=h("p"),Ru=f("The most compact way of representing a group of "),Mu=h("code"),Hu=f("true"),_u=f(" or "),Uu=h("code"),Gu=f("false"),qu=f(" is to use bits. If the bit is "),Bu=h("code"),zu=f("1"),Fu=f(" it is "),Ju=h("code"),Wu=f("true"),Yu=f(" and if it is "),Vu=h("code"),Ku=f("0"),Zu=f(" it is "),Qu=h("code"),Xu=f("false"),ak=f("."),nk=m(),sk=h("p"),tk=f("A number can be represented in binary, "),ek=h("strong"),ok=f("5"),pk=f(" is "),ck=h("code"),rk=f("0b0101"),lk=f(" in binary."),ik=m(),uk=h("p"),kk=f("If "),hk=h("strong"),dk=f("5"),fk=f(" is represented in a 4-bit binary, then it can store 4 boolean values, with the 0th and 2nd bit as "),mk=h("code"),vk=f("true"),gk=f(" and 1st and 3rd bit as "),Ek=h("code"),bk=f("false"),yk=f(", (reading from the right to left, from "),$k=h("a"),wk=f("least significant bit"),Ok=f(" to the "),Sk=h("a"),Tk=f("most significant bit"),Lk=f(")."),Nk=m(),Pk=h("p"),xk=h("strong"),Ck=f("How many boolean values can a number store?"),Dk=m(),Ak=h("p"),Ik=f("That depends on the language, a 16-bit integer in Java can store 16 boolean values."),jk=m(),Rk=h("p"),Mk=f("In JavaScript, numbers can are "),Hk=h("a"),_k=f("represented in 64 bits"),Uk=f(". However, when using "),Gk=h("a"),qk=f("bitwise operations"),Bk=f(" on the number, JavaScript will treat the number as 32 bits."),zk=m(),Fk=h("p"),Jk=f("To inspect or modify the boolean value stored in a number, we use "),Wk=h("a"),Yk=f("bitwise operations"),Vk=f("."),Kk=m(),Zk=h("pre"),Qk=m(),Xk=h("p"),ah=f("The 2nd operand we use in the bitwise operation, is like a "),nh=h("a"),sh=f("mask"),th=f(" that allow us to target a specific bit in the 1st number, that stores our boolean values."),eh=m(),oh=h("p"),ph=f("We call the mask, "),ch=h("strong"),rh=f("bitmask"),lh=f("."),ih=m(),uh=h("section"),kh=h("h3"),hh=h("a"),dh=f("Bitmask in Svelte"),fh=m(),mh=h("p"),vh=f("As mentioned earlier, we assign each variable an index:"),gh=m(),Eh=h("pre"),bh=m(),yh=h("p"),$h=f("So instead of returning the instance variable as an JavaScript Object, we now return it as an JavaScript Array:"),wh=m(),Oh=h("pre"),Sh=m(),Th=h("p"),Lh=f("The variable is accessed via "),Nh=h("strong"),Ph=f("index"),xh=f(", "),Ch=h("code"),Dh=f("$$.ctx[index]"),Ah=f(", instead of "),Ih=h("strong"),jh=f("variable name"),Rh=f(":"),Mh=m(),Hh=h("pre"),_h=m(),Uh=h("p"),Gh=f("The "),qh=h("code"),Bh=f("$$invalidate"),zh=f(" function works the same, except it takes in "),Fh=h("strong"),Jh=f("index"),Wh=f(" instead of "),Yh=h("strong"),Vh=f("variable name"),Kh=f(":"),Zh=m(),Qh=h("pre"),Xh=m(),ad=h("p"),nd=h("code"),sd=f("$$.dirty"),td=f(" now stores a list of numbers. Each number carries 31 boolean values, each boolean value indicates whether the variable of that index is dirty or not."),ed=m();od=h("p"),pd=f("To set a variable as dirty, we use bitwise operation:"),cd=m(),rd=h("pre"),ld=m(),id=h("p"),ud=f("And to verify whether a variable is dirty, we use bitwise operation too!"),kd=m(),hd=h("pre"),dd=m(),fd=h("p"),md=f("With using bitmask, "),vd=h("code"),gd=f("$$.dirty"),Ed=f(" is now reset to "),bd=h("code"),yd=f("[-1]"),$d=f(" instead of "),wd=h("code"),Od=f("null"),Sd=f("."),Td=m(),Ld=h("p"),Nd=h("strong"),Pd=f("Trivia:"),xd=m(),Cd=h("code"),Dd=f("-1"),Ad=f(" is "),Id=h("code"),jd=f("0b1111_1111"),Rd=f(" in binary, where all the bits are "),Md=h("code"),Hd=f("1"),_d=f("."),Ud=m(),Gd=h("section"),qd=h("h4"),Bd=h("a"),zd=f("Destructuring "),Fd=h("strong"),Jd=f("$$.dirty"),Wd=m(),Yd=h("p"),Vd=f("One code-size optimisation that Svelte does is to always destructure the "),Kd=h("code"),Zd=f("dirty"),Qd=f(" array in the "),Xd=h("strong"),af=f("u_p_date function"),nf=f(" if there's less than 32 variables, since we will always access "),sf=h("code"),tf=f("dirty[0]"),ef=f(" anyway:"),of=m(),pf=h("pre"),cf=m(),rf=h("section"),lf=h("h4"),uf=h("a"),kf=f("tl/dr:"),hf=m(),df=h("ul"),ff=h("li"),mf=f("The underlying mechanism for "),vf=h("code"),gf=f("$$invalidate"),Ef=f(" and "),bf=h("code"),yf=f("schedule_update"),$f=f(" does not change"),wf=m(),Of=h("li"),Sf=f("Using bitmask, the compiled code is much compact"),Tf=m(),Lf=h("section"),Nf=h("h2"),Pf=h("a"),xf=f("Reactive Declaration"),Cf=m(),Df=h("p"),Af=f("Svelte allow us to declare reactive values via the "),If=h("a"),jf=f("labeled statement"),Rf=f(", "),Mf=h("code"),Hf=f("$:"),_f=m(),Uf=h("pre"),Gf=m(),qf=h("p"),Bf=h("a"),zf=f("Svelte REPL"),Ff=m(),Jf=h("p"),Wf=f("If you look at the compiled output, you would find out that the declarative statements appeared in the "),Yf=h("a"),Vf=h("code"),Kf=f("instance"),Zf=f(" function"),Qf=f(":"),Xf=m(),am=h("pre"),nm=m(),sm=h("p"),tm=f("Try reorder the reactive declarations and observe the change in the compiled output:"),em=m(),om=h("pre"),pm=m(),cm=h("p"),rm=h("a"),lm=f("Svelte REPL"),im=m(),um=h("pre"),km=m(),hm=h("p"),dm=f("Some observations:"),fm=m(),mm=h("ul"),vm=h("li"),gm=f("When there are reactive declarations, Svelte defines a custom "),Em=h("code"),bm=f("$$.update"),ym=f(" method."),$m=h("ul"),wm=h("li"),Om=h("code"),Sm=f("$$.update"),Tm=f(" is a "),Lm=h("a"),Nm=f("no-op function"),Pm=f(" by default. (See "),xm=h("a"),Cm=f("src/runtime/internal/Component.ts"),Dm=f(")"),Am=m(),Im=h("li"),jm=f("Svelte uses "),Rm=h("code"),Mm=f("$$invalidate"),Hm=f(" to update the value of a reactive variable too."),_m=m(),Um=h("li"),Gm=f("Svelte sorts the reactive declarations and statements, based on the dependency relationship between the declarations and statements"),qm=h("ul"),Bm=h("li"),zm=h("code"),Fm=f("quadrupled"),Jm=f(" depends on "),Wm=h("code"),Ym=f("doubled"),Vm=f(", so "),Km=h("code"),Zm=f("quadrupled"),Qm=f(" is evaluated and "),Xm=h("code"),av=f("$$invalidate"),nv=f("d after "),sv=h("code"),tv=f("doubled"),ev=f("."),ov=m(),pv=h("p"),cv=f("Since all reactive declarations and statements are grouped into the "),rv=h("code"),lv=f("$$.update"),iv=f(" method, and also the fact that Svelte will sort the declarations and statements according to their dependency relationship, it is irrelevant of the location or the order you declared them."),uv=m(),kv=h("p"),hv=f("The following component still works:"),dv=m(),fv=h("pre"),mv=m(),vv=h("p"),gv=h("a"),Ev=f("Svelte REPL"),bv=m(),yv=h("p"),$v=h("strong"),wv=f("The next thing you may ask, when is "),Ov=h("code"),Sv=f("$$.update"),Tv=f(" being called?"),Lv=m(),Nv=h("p"),Pv=f("Remember the "),xv=h("code"),Cv=f("update"),Dv=f(" function that gets called in the "),Av=h("code"),Iv=f("flush"),jv=f(" function?"),Rv=m(),Mv=h("p"),Hv=f("I put a "),_v=h("code"),Uv=f("NOTE:"),Gv=f(" comment saying that it will be important later. Well, it is important now."),qv=m(),Bv=h("pre"),zv=m(),Fv=h("p"),Jv=f("The "),Wv=h("code"),Yv=f("$$.update"),Vv=f(" function gets called "),Kv=h("strong"),Zv=f("in the same microtask"),Qv=f(" with the DOM update, right before we called the "),Xv=h("code"),ag=f("$$.fragment.p()"),ng=f(" to update the DOM."),sg=m(),tg=h("p"),eg=f("The implication of the above fact is"),og=m(),pg=h("section"),cg=h("h4"),rg=h("a"),lg=f("1. Execution of all reactive declarations and statements are batched"),ig=m(),ug=h("p"),kg=f("Just as how DOM updates are batched, reactive declarations and statements are batched too!"),hg=m(),dg=h("pre"),fg=m(),mg=h("p"),vg=h("a"),gg=f("Svelte REPL"),Eg=m(),bg=h("p"),yg=f("When "),$g=h("code"),wg=f("update()"),Og=f(" get called,"),Sg=m(),Tg=h("ol"),Lg=h("li"),Ng=f("Similar to the "),Pg=h("a"),xg=f("flow described above"),Cg=f(", "),Dg=h("code"),Ag=f("$$invalidate"),Ig=f(" both "),jg=h("strong"),Rg=f('"givenName"'),Mg=f(" and "),Hg=h("strong"),_g=f('"familyName"'),Ug=f(", and schedules an update"),Gg=m(),qg=h("li"),Bg=h("strong"),zg=f("-- End of task --"),Fg=m(),Jg=h("li"),Wg=h("strong"),Yg=f("-- Start of microtask--"),Vg=m(),Kg=h("li"),Zg=h("code"),Qg=f("flush()"),Xg=f(" calls "),aE=h("code"),nE=f("update()"),sE=f(" for each component marked dirty"),tE=m(),eE=h("li"),oE=f("Runs "),pE=h("code"),cE=f("$$.update()"),rE=h("ul"),lE=h("li"),iE=f("As "),uE=h("strong"),kE=f('"givenName"'),hE=f(" and "),dE=h("strong"),fE=f('"familyName"'),mE=f(" has changed, evaluates and "),vE=h("code"),gE=f("$$invalidate"),EE=m(),bE=h("strong"),yE=f('"name"'),$E=m(),wE=h("li"),OE=f("As "),SE=h("strong"),TE=f('"name"'),LE=f(" has changed, executes "),NE=h("code"),PE=f("console.log('name', name);"),xE=m(),CE=h("li"),DE=f("Calls "),AE=h("code"),IE=f("$$.fragment.p(...)"),jE=f(" to update the DOM."),RE=m(),ME=h("p"),HE=f("As you can see, even though we've updated "),_E=h("code"),UE=f("givenName"),GE=f(" and "),qE=h("code"),BE=f("familyName"),zE=f(", we only evaluate "),FE=h("code"),JE=f("name"),WE=f(" and executes "),YE=h("code"),VE=f("console.log('name', name)"),KE=m(),ZE=h("strong"),QE=f("once"),XE=f(" instead of twice:"),ab=m(),nb=h("pre"),sb=m(),tb=h("section"),eb=h("h4"),ob=h("a"),pb=f("2. The value of reactive variable outside of reactive declarations and statements may not be up to date"),cb=m(),rb=h("p"),lb=f("Because the reactive declarations and statements are batched and executed in the next microtask, you can't expect the value to be updated synchronously."),ib=m(),ub=h("pre"),kb=m(),hb=h("p"),db=h("a"),fb=f("Svelte REPL"),mb=m(),vb=h("p"),gb=f("Instead, you "),Eb=h("strong"),bb=f("have to"),yb=f(" refer the reactive variable in another reactive declaration or statement:"),$b=m(),wb=h("pre"),Ob=m(),Sb=h("section"),Tb=h("h3"),Lb=h("a"),Nb=f("Sorting of reactive declarations and statements"),Pb=m(),xb=h("p"),Cb=f("Svelte tries to preserve the order of reactive declarations and statements as they are declared as much as possible."),Db=m(),Ab=h("p"),Ib=f("However, if one reactive declaration or statement refers to a variable that was defined by another reactive declaration, then, "),jb=h("strong"),Rb=f("it will be inserted after the latter reactive declaration"),Mb=f(":"),Hb=m(),_b=h("pre"),Ub=m(),Gb=h("section"),qb=h("h3"),Bb=h("a"),zb=f("Reactive variable that is not reactive"),Fb=m(),Jb=h("p"),Wb=f("The Svelte compiler tracks all the variables declared in the "),Yb=h("code"),Vb=f("<script>"),Kb=f(" tag."),Zb=m(),Qb=h("p"),Xb=f("If all the variables of a reactive declaration or statement refers to, never gets mutated or reassigned, then the reactive declaration or statement will not be added into "),ay=h("code"),ny=f("$$.update"),sy=f("."),ty=m(),ey=h("p"),oy=f("For example:"),py=m(),cy=h("pre"),ry=m(),ly=h("p"),iy=h("a"),uy=f("Svelte REPL"),ky=m(),hy=h("p"),dy=f("Since, "),fy=h("code"),my=f("count"),vy=f(" never gets mutated or reassigned, Svelte optimises the compiled output by not defining "),gy=h("code"),Ey=f("$$self.$$.update"),by=f("."),yy=m(),$y=h("pre"),wy=m(),Oy=h("section"),Sy=h("h2"),Ty=h("a"),Ly=f("Summary"),Ny=m(),Py=h("section"),xy=h("h4"),Cy=h("a"),Dy=f("1. Svelte keeps track of which variables are dirty and batched the DOM updates."),Ay=m(),Iy=h("section"),jy=h("h4"),Ry=h("a"),My=f("2. Using bitmask, Svelte able to generate a more compact compiled code."),Hy=m(),_y=h("section"),Uy=h("h4"),Gy=h("a"),qy=f("3. Reactive declarations and statements are executed in batch, just like DOM updates"),By=m(),zy=h("section"),Fy=h("h2"),Jy=h("a"),Wy=f("Closing Note"),Yy=m(),Vy=h("p"),Ky=f("If you wish to know more, "),Zy=h("a"),Qy=f("follow me on Twitter"),Xy=f("."),a$=m(),n$=h("p"),s$=f("I'll post it on Twitter when the next part is ready, where I'll be covering "),t$=h("a"),e$=f("logic blocks"),o$=f(", "),p$=h("a"),c$=f("slots"),r$=f(", "),l$=h("a"),i$=f("context"),u$=f(", and many others."),k$=m(),h$=h("p"),d$=h("strong"),f$=f("⬅ ⬅  Previously in "),m$=h("a"),v$=f("Part 1"),g$=f("."),E$=m(),b$=h("p"),y$=h("strong"),$$=f("➡ ➡  Continue reading on "),w$=h("a"),O$=f("Part 3"),S$=f("."),T$=m(),L$=h("section"),N$=h("h2"),P$=h("a"),x$=f("Further Resources"),C$=m(),D$=h("ul"),A$=h("li"),I$=f("Rich Harris shares about "),j$=h("a"),R$=f("Bitmask Tracking at Svelte Society NYC"),M$=f("."),H$=m(),_$=h("li"),U$=f("Svelte Tutorial - "),G$=h("a"),q$=f("Reactivity"),B$=m(),z$=h("a"),F$=f("https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/"),J$=m(),W$=h("li"),Y$=h("a"),V$=f("The Art of Bitmasking"),K$=f(" by Shakib Ahmed"),Z$=m(),Q$=h("li"),X$=h("a"),aw=f("Bitmasks: A very esoteric (and impractical) way of managing booleans"),nw=f(" by Basti Ortiz"),sw=m(),tw=h("li"),ew=h("a"),ow=f("MDN: Bitwise Operators"),this.h()},l(a){s=b(a,"SECTION",{});var n=E(s);t=b(n,"UL",{class:!0,id:!0,role:!0,"aria-label":!0});var l=E(t);e=b(l,"LI",{});var i=E(e);o=b(i,"A",{href:!0});var h=E(o);p=y(h,"Pre v3.16.0"),h.forEach(u),i.forEach(u),c=b(l,"UL",{});var f=E(c);r=b(f,"LI",{});var m=E(r);k=b(m,"A",{href:!0});var g=E(k);d=y(g,"\\$\\$.ctx"),g.forEach(u),m.forEach(u),v=b(f,"LI",{});var pw=E(v);w=b(pw,"A",{href:!0});var cw=E(w);O=y(cw,"\\$\\$.dirty"),cw.forEach(u),pw.forEach(u),S=b(f,"LI",{});var rw=E(S);T=b(rw,"A",{href:!0});var lw=E(T);L=y(lw,"\\$\\$invalidate"),lw.forEach(u),rw.forEach(u),N=b(f,"LI",{});var iw=E(N);P=b(iw,"A",{href:!0});var uw=E(P);x=y(uw,"schedule_update"),uw.forEach(u),iw.forEach(u),C=b(f,"UL",{});var kw=E(C);D=b(kw,"LI",{});var hw=E(D);A=b(hw,"A",{href:!0});var dw=E(A);I=y(dw,"tl/dr:"),dw.forEach(u),hw.forEach(u),kw.forEach(u),f.forEach(u),j=b(l,"LI",{});var fw=E(j);R=b(fw,"A",{href:!0});var mw=E(R);M=y(mw,"v3.16.0"),mw.forEach(u),fw.forEach(u),H=b(l,"UL",{});var vw=E(H);_=b(vw,"LI",{});var gw=E(_);U=b(gw,"A",{href:!0});var Ew=E(U);G=y(Ew,"Bitmask"),Ew.forEach(u),gw.forEach(u),q=b(vw,"LI",{});var bw=E(q);B=b(bw,"A",{href:!0});var yw=E(B);z=y(yw,"Bitmask in Svelte"),yw.forEach(u),bw.forEach(u),F=b(vw,"UL",{});var $w=E(F);J=b($w,"LI",{});var ww=E(J);W=b(ww,"A",{href:!0});var Ow=E(W);Y=y(Ow,"Destructuring  "),Ow.forEach(u),ww.forEach(u),V=b($w,"LI",{});var Sw=E(V);K=b(Sw,"A",{href:!0});var Tw=E(K);Z=y(Tw,"tl/dr:"),Tw.forEach(u),Sw.forEach(u),$w.forEach(u),vw.forEach(u),Q=b(l,"LI",{});var Lw=E(Q);X=b(Lw,"A",{href:!0});var Nw=E(X);aa=y(Nw,"Reactive Declaration"),Nw.forEach(u),Lw.forEach(u),na=b(l,"UL",{});var Pw=E(na);sa=b(Pw,"UL",{});var xw=E(sa);ta=b(xw,"LI",{});var Cw=E(ta);ea=b(Cw,"A",{href:!0});var Dw=E(ea);oa=y(Dw,"1. Execution of all reactive declarations and statements are batched"),Dw.forEach(u),Cw.forEach(u),pa=b(xw,"LI",{});var Aw=E(pa);ca=b(Aw,"A",{href:!0});var Iw=E(ca);ra=y(Iw,"2. The value of reactive variable outside of reactive declarations and statements may not be up to date"),Iw.forEach(u),Aw.forEach(u),xw.forEach(u),la=b(Pw,"LI",{});var jw=E(la);ia=b(jw,"A",{href:!0});var Rw=E(ia);ua=y(Rw,"Sorting of reactive declarations and statements"),Rw.forEach(u),jw.forEach(u),ka=b(Pw,"LI",{});var Mw=E(ka);ha=b(Mw,"A",{href:!0});var Hw=E(ha);da=y(Hw,"Reactive variable that is not reactive"),Hw.forEach(u),Mw.forEach(u),Pw.forEach(u),fa=b(l,"LI",{});var _w=E(fa);ma=b(_w,"A",{href:!0});var Uw=E(ma);va=y(Uw,"Summary"),Uw.forEach(u),_w.forEach(u),ga=b(l,"UL",{});var Gw=E(ga);Ea=b(Gw,"UL",{});var qw=E(Ea);ba=b(qw,"LI",{});var Bw=E(ba);ya=b(Bw,"A",{href:!0});var zw=E(ya);$a=y(zw,"1. Svelte keeps track of which variables are dirty and batched the DOM updates."),zw.forEach(u),Bw.forEach(u),wa=b(qw,"LI",{});var Fw=E(wa);Oa=b(Fw,"A",{href:!0});var Jw=E(Oa);Sa=y(Jw,"2. Using bitmask, Svelte able to generate a more compact compiled code."),Jw.forEach(u),Fw.forEach(u),Ta=b(qw,"LI",{});var Ww=E(Ta);La=b(Ww,"A",{href:!0});var Yw=E(La);Na=y(Yw,"3. Reactive declarations and statements are executed in batch, just like DOM updates"),Yw.forEach(u),Ww.forEach(u),qw.forEach(u),Gw.forEach(u),Pa=b(l,"LI",{});var Vw=E(Pa);xa=b(Vw,"A",{href:!0});var Kw=E(xa);Ca=y(Kw,"Closing Note"),Kw.forEach(u),Vw.forEach(u),Da=b(l,"LI",{});var Zw=E(Da);Aa=b(Zw,"A",{href:!0});var Qw=E(Aa);Ia=y(Qw,"Further Resources"),Qw.forEach(u),Zw.forEach(u),l.forEach(u),n.forEach(u),ja=$(a),Ra=b(a,"P",{});var Xw=E(Ra);Ma=b(Xw,"STRONG",{});var aO=E(Ma);Ha=y(aO,"⬅ ⬅  Previously in "),_a=b(aO,"A",{href:!0});var nO=E(_a);Ua=y(nO,"Part 1"),nO.forEach(u),Ga=y(aO,"."),aO.forEach(u),Xw.forEach(u),qa=$(a),Ba=b(a,"P",{});var sO=E(Ba);za=b(sO,"A",{href:!0});var tO=E(za);Fa=y(tO,"Previously"),tO.forEach(u),Ja=y(sO,", when I mentioned the "),Wa=b(sO,"CODE",{});var eO=E(Wa);Ya=y(eO,"$$invalidate"),eO.forEach(u),Va=y(sO," function, I explained that the "),Ka=b(sO,"CODE",{});var oO=E(Ka);Za=y(oO,"$$invalidate"),oO.forEach(u),Qa=y(sO," function works conceptually like the following:"),sO.forEach(u),Xa=$(a),an=b(a,"PRE",{class:!0}),E(an).forEach(u),nn=$(a),sn=b(a,"P",{});var pO=E(sn);tn=y(pO,"but that's not the exact implementation of the "),en=b(pO,"CODE",{});var cO=E(en);on=y(cO,"$$invaldiate"),cO.forEach(u),pn=y(pO," function. So in this article, we are going to look at how "),cn=b(pO,"CODE",{});var rO=E(cn);rn=y(rO,"$$invalidate"),rO.forEach(u),ln=y(pO," is implemented in Svelte."),pO.forEach(u),un=$(a),kn=b(a,"P",{});var lO=E(kn);hn=y(lO,"At the point of writing, Svelte is at "),dn=b(lO,"A",{href:!0,rel:!0});var iO=E(dn);fn=y(iO,"v3.20.1"),iO.forEach(u),mn=y(lO,"."),lO.forEach(u),vn=$(a),gn=b(a,"SECTION",{});var uO=E(gn);En=b(uO,"H2",{});var kO=E(En);bn=b(kO,"A",{href:!0,id:!0});var hO=E(bn);yn=y(hO,"Pre v3.16.0"),hO.forEach(u),kO.forEach(u),$n=$(uO),wn=b(uO,"P",{});var dO=E(wn);On=y(dO,"There's a big optimisation that changes the underlying implementation of the "),Sn=b(dO,"CODE",{});var fO=E(Sn);Tn=y(fO,"$$invalidate"),fO.forEach(u),Ln=y(dO," function in "),Nn=b(dO,"A",{href:!0,rel:!0});var mO=E(Nn);Pn=y(mO,"v3.16.0"),mO.forEach(u),xn=y(dO,", namely in "),Cn=b(dO,"A",{href:!0,rel:!0});var vO=E(Cn);Dn=y(vO,"#3945"),vO.forEach(u),An=y(dO,". The underlying concept doesn't change, but it'll be much easier to understand about "),In=b(dO,"CODE",{});var gO=E(In);jn=y(gO,"$$invalidate"),gO.forEach(u),Rn=y(dO," prior the change and learn about the optimisation change separately."),dO.forEach(u),Mn=$(uO),Hn=b(uO,"P",{});var EO=E(Hn);_n=y(EO,"Let's explain some of the variables that you are going to see, some of which was introduced in "),Un=b(EO,"A",{href:!0});var bO=E(Un);Gn=y(bO,"Part 1"),bO.forEach(u),qn=y(EO,":"),EO.forEach(u),uO.forEach(u),Bn=$(a),zn=b(a,"SECTION",{});var yO=E(zn);Fn=b(yO,"H3",{});var $O=E(Fn);Jn=b($O,"A",{href:!0,id:!0});var wO=E(Jn);Wn=y(wO,"\\$\\$.ctx"),wO.forEach(u),$O.forEach(u),Yn=$(yO),Vn=b(yO,"P",{});var OO=E(Vn);Kn=y(OO,"There's no official name for it. You can call it "),Zn=b(OO,"STRONG",{});var SO=E(Zn);Qn=y(SO,"context"),SO.forEach(u),Xn=y(OO," as it is the context which the template is based on to render onto the DOM."),OO.forEach(u),as=$(yO),ns=b(yO,"P",{});var TO=E(ns);ss=y(TO,"I called it "),ts=b(TO,"A",{href:!0});var LO=E(ts);es=y(LO,"instance variables"),LO.forEach(u),os=y(TO,". As it is a JavaScript Object that contains all the variables that you:"),TO.forEach(u),ps=$(yO),cs=b(yO,"UL",{});var NO=E(cs);rs=b(NO,"LI",{});var PO=E(rs);ls=y(PO,"declared in the "),is=b(PO,"CODE",{});var xO=E(is);us=y(xO,"<script>"),xO.forEach(u),ks=y(PO," tag"),PO.forEach(u),hs=$(NO),ds=b(NO,"LI",{});var CO=E(ds);fs=y(CO,"mutated or reassigned"),CO.forEach(u),ms=$(NO),vs=b(NO,"LI",{});var DO=E(vs);gs=y(DO,"referenced in the template"),DO.forEach(u),NO.forEach(u),Es=$(yO),bs=b(yO,"P",{});var AO=E(bs);ys=y(AO,"that belongs to a component instance."),AO.forEach(u),$s=$(yO),ws=b(yO,"P",{});var IO=E(ws);Os=y(IO,"The instance variables themselves can be of a primitive value, object, array or function."),IO.forEach(u),Ss=$(yO),Ts=b(yO,"P",{});var jO=E(Ts);Ls=y(jO,"The "),Ns=b(jO,"CODE",{});var RO=E(Ns);Ps=y(RO,"instance"),RO.forEach(u),xs=y(jO," function creates and returns the "),Cs=b(jO,"CODE",{});var MO=E(Cs);Ds=y(MO,"ctx"),MO.forEach(u),As=y(jO," object."),jO.forEach(u),Is=$(yO),js=b(yO,"P",{});var HO=E(js);Rs=y(HO,"Functions declared in the "),Ms=b(HO,"CODE",{});var _O=E(Ms);Hs=y(_O,"<script>"),_O.forEach(u),_s=y(HO," tag will refer to the instance variable that is scoped withn the "),Us=b(HO,"CODE",{});var UO=E(Us);Gs=y(UO,"instance"),UO.forEach(u),qs=y(HO," function closure:"),HO.forEach(u),Bs=$(yO),zs=b(yO,"PRE",{class:!0}),E(zs).forEach(u),Fs=$(yO),Js=b(yO,"P",{});var GO=E(Js);Ws=b(GO,"A",{href:!0,rel:!0});var qO=E(Ws);Ys=y(qO,"Svelte REPL"),qO.forEach(u),GO.forEach(u),Vs=$(yO),Ks=b(yO,"PRE",{class:!0}),E(Ks).forEach(u),Zs=$(yO),Qs=b(yO,"P",{});var BO=E(Qs);Xs=y(BO,"Whenever a new instance of a component is created, the "),at=b(BO,"CODE",{});var zO=E(at);nt=y(zO,"instance"),zO.forEach(u),st=y(BO," function is called and the "),tt=b(BO,"CODE",{});var FO=E(tt);et=y(FO,"ctx"),FO.forEach(u),ot=y(BO," object is created and captured within a new closure scope."),BO.forEach(u),yO.forEach(u),pt=$(a),ct=b(a,"SECTION",{});var JO=E(ct);rt=b(JO,"H3",{});var WO=E(rt);lt=b(WO,"A",{href:!0,id:!0});var YO=E(lt);it=y(YO,"\\$\\$.dirty"),YO.forEach(u),WO.forEach(u),ut=$(JO),kt=b(JO,"P",{});var VO=E(kt);ht=b(VO,"CODE",{});var KO=E(ht);dt=y(KO,"$$.dirty"),KO.forEach(u),ft=y(VO," is a object that is used to track which instance variable had just changed and needs to be updated onto the DOM."),VO.forEach(u),mt=$(JO),vt=b(JO,"P",{});var ZO=E(vt);gt=y(ZO,"For example, in the following Svelte component:"),ZO.forEach(u),Et=$(JO),bt=b(JO,"PRE",{class:!0}),E(bt).forEach(u),yt=$(JO),$t=b(JO,"P",{});var QO=E($t);wt=b(QO,"A",{href:!0,rel:!0});var XO=E(wt);Ot=y(XO,"Svelte REPL"),XO.forEach(u),QO.forEach(u),St=$(JO),Tt=b(JO,"P",{});var aS=E(Tt);Lt=y(aS,"The initial "),Nt=b(aS,"CODE",{});var nS=E(Nt);Pt=y(nS,"$$.dirty"),nS.forEach(u),xt=y(aS," is "),Ct=b(aS,"CODE",{});var sS=E(Ct);Dt=y(sS,"null"),sS.forEach(u),At=y(aS," ("),It=b(aS,"A",{href:!0,rel:!0});var tS=E(It);jt=y(tS,"source code"),tS.forEach(u),Rt=y(aS,")."),aS.forEach(u),Mt=$(JO),Ht=b(JO,"P",{});var eS=E(Ht);_t=y(eS,"If you clicked on the "),Ut=b(eS,"STRONG",{});var oS=E(Ut);Gt=y(oS,'"+ Agility"'),oS.forEach(u),qt=y(eS," button, "),Bt=b(eS,"CODE",{});var pS=E(Bt);zt=y(pS,"$$.dirty"),pS.forEach(u),Ft=y(eS," will turn into:"),eS.forEach(u),Jt=$(JO),Wt=b(JO,"PRE",{class:!0}),E(Wt).forEach(u),Yt=$(JO),Vt=b(JO,"P",{});var cS=E(Vt);Kt=y(cS,"If you clicked on the "),Zt=b(cS,"STRONG",{});var rS=E(Zt);Qt=y(rS,'"Level Up"'),rS.forEach(u),Xt=y(cS," button, "),ae=b(cS,"CODE",{});var lS=E(ae);ne=y(lS,"$$.dirty"),lS.forEach(u),se=y(cS," will turn into:"),cS.forEach(u),te=$(JO),ee=b(JO,"PRE",{class:!0}),E(ee).forEach(u),oe=$(JO),pe=b(JO,"P",{});var iS=E(pe);ce=b(iS,"CODE",{});var uS=E(ce);re=y(uS,"$$.dirty"),uS.forEach(u),le=y(iS," is useful for Svelte, so that it doesn't update the DOM unnecessarily."),iS.forEach(u),ie=$(JO),ue=b(JO,"P",{});var kS=E(ue);ke=y(kS,"If you looked at the "),he=b(kS,"STRONG",{});var hS=E(he);de=y(hS,"p (u_p_date)"),hS.forEach(u),fe=y(kS," function of the compiled code, you will see Svelte checks whether a variable is marked in "),me=b(kS,"CODE",{});var dS=E(me);ve=y(dS,"$$.dirty"),dS.forEach(u),ge=y(kS,", before updating the DOM."),kS.forEach(u),Ee=$(JO),be=b(JO,"PRE",{class:!0}),E(be).forEach(u),ye=$(JO),$e=b(JO,"P",{});var fS=E($e);we=y(fS,"After Svelte updates the DOM, the "),Oe=b(fS,"CODE",{});var mS=E(Oe);Se=y(mS,"$$.dirty"),mS.forEach(u),Te=y(fS," is set back to "),Le=b(fS,"CODE",{});var vS=E(Le);Ne=y(vS,"null"),vS.forEach(u),Pe=y(fS," to indicate all changes has been applied onto the DOM."),fS.forEach(u),JO.forEach(u),xe=$(a),Ce=b(a,"SECTION",{});var gS=E(Ce);De=b(gS,"H3",{});var ES=E(De);Ae=b(ES,"A",{href:!0,id:!0});var bS=E(Ae);Ie=y(bS,"\\$\\$invalidate"),bS.forEach(u),ES.forEach(u),je=$(gS),Re=b(gS,"P",{});var yS=E(Re);Me=b(yS,"CODE",{});var $S=E(Me);He=y($S,"$$invalidate"),$S.forEach(u),_e=y(yS," is the secret behind reactivity in Svelte."),yS.forEach(u),Ue=$(gS),Ge=b(gS,"P",{});var wS=E(Ge);qe=y(wS,"Whenever a variable is"),wS.forEach(u),Be=$(gS),ze=b(gS,"UL",{});var OS=E(ze);Fe=b(OS,"LI",{});var SS=E(Fe);Je=y(SS,"reassigned "),We=b(SS,"CODE",{});var TS=E(We);Ye=y(TS,"(foo = 1)"),TS.forEach(u),SS.forEach(u),Ve=$(OS),Ke=b(OS,"LI",{});var LS=E(Ke);Ze=y(LS,"mutated "),Qe=b(LS,"CODE",{});var NS=E(Qe);Xe=y(NS,"(foo.bar = 1)"),NS.forEach(u),LS.forEach(u),OS.forEach(u),ao=$(gS),no=b(gS,"P",{});var PS=E(no);so=y(PS,"Svelte will wrap the assignment or update around with the "),to=b(PS,"CODE",{});var xS=E(to);eo=y(xS,"$$invalidate"),xS.forEach(u),oo=y(PS," function:"),PS.forEach(u),po=$(gS),co=b(gS,"PRE",{class:!0}),E(co).forEach(u),ro=$(gS),lo=b(gS,"P",{});var CS=E(lo);io=y(CS,"the "),uo=b(CS,"CODE",{});var DS=E(uo);ko=y(DS,"$$invalidate"),DS.forEach(u),ho=y(CS," function will:"),CS.forEach(u),fo=$(gS),mo=b(gS,"OL",{});var AS=E(mo);vo=b(AS,"LI",{});var IS=E(vo);go=y(IS,"update the variable in "),Eo=b(IS,"CODE",{});var jS=E(Eo);bo=y(jS,"$$.ctx"),jS.forEach(u),IS.forEach(u),yo=$(AS),$o=b(AS,"LI",{});var RS=E($o);wo=y(RS,"mark the variable in "),Oo=b(RS,"CODE",{});var MS=E(Oo);So=y(MS,"$$.dirty"),MS.forEach(u),RS.forEach(u),To=$(AS),Lo=b(AS,"LI",{});var HS=E(Lo);No=y(HS,"schedule an update"),HS.forEach(u),Po=$(AS),xo=b(AS,"LI",{});var _S=E(xo);Co=y(_S,"return the value of the assignment or update expression"),_S.forEach(u),AS.forEach(u),Do=$(gS),Ao=b(gS,"PRE",{class:!0}),E(Ao).forEach(u),Io=$(gS),jo=b(gS,"P",{});var US=E(jo);Ro=b(US,"A",{href:!0,rel:!0});var GS=E(Ro);Mo=y(GS,"Source code"),GS.forEach(u),US.forEach(u),Ho=$(gS),_o=b(gS,"P",{});var qS=E(_o);Uo=y(qS,"One interesting note about the function "),Go=b(qS,"CODE",{});var BS=E(Go);qo=y(BS,"$$invalidate"),BS.forEach(u),Bo=y(qS," is that, it wraps around the assignment or update expression and returns what the expression evaluates to."),qS.forEach(u),zo=$(gS),Fo=b(gS,"P",{});var zS=E(Fo);Jo=y(zS,"This makes "),Wo=b(zS,"CODE",{});var FS=E(Wo);Yo=y(FS,"$$invalidate"),FS.forEach(u),Vo=y(zS," chainable:"),zS.forEach(u),Ko=$(gS),Zo=b(gS,"PRE",{class:!0}),E(Zo).forEach(u),Qo=$(gS),Xo=b(gS,"P",{});var JS=E(Xo);ap=y(JS,"It seemed complex when there's a lot of assignment or update expressions in 1 statement! 🙈"),JS.forEach(u),np=$(gS),sp=b(gS,"P",{});var WS=E(sp);tp=y(WS,"The 2nd argument of "),ep=b(WS,"CODE",{});var YS=E(ep);op=y(YS,"$$invalidate"),YS.forEach(u),pp=y(WS," is the assignment or update expressions verbatim. But if it contains any assignment or update sub-expressions, we recursively wrap it with "),cp=b(WS,"CODE",{});var VS=E(cp);rp=y(VS,"$$invalidate"),VS.forEach(u),lp=y(WS,"."),WS.forEach(u),ip=$(gS),up=b(gS,"P",{});var KS=E(up);kp=y(KS,"In case where the assignment expression changes a property of an object, we pass the object in as a 3rd argument of the "),hp=b(KS,"CODE",{});var ZS=E(hp);dp=y(ZS,"$$invalidate"),ZS.forEach(u),fp=y(KS," function, eg:"),KS.forEach(u),mp=$(gS),vp=b(gS,"PRE",{class:!0}),E(vp).forEach(u),gp=$(gS),Ep=b(gS,"P",{});var QS=E(Ep);bp=y(QS,"So that, we update the "),yp=b(QS,"CODE",{});var XS=E(yp);$p=y(XS,'"obj"'),XS.forEach(u),wp=y(QS," variable to "),Op=b(QS,"CODE",{});var aT=E(Op);Sp=y(aT,"obj"),aT.forEach(u),Tp=y(QS," instead of the value of the 2nd argument, "),Lp=b(QS,"CODE",{});var nT=E(Lp);Np=y(nT,'"hello"'),nT.forEach(u),Pp=y(QS,"."),QS.forEach(u),gS.forEach(u),xp=$(a),Cp=b(a,"SECTION",{});var sT=E(Cp);Dp=b(sT,"H3",{});var tT=E(Dp);Ap=b(tT,"A",{href:!0,id:!0});var eT=E(Ap);Ip=y(eT,"schedule_update"),eT.forEach(u),tT.forEach(u),jp=$(sT),Rp=b(sT,"P",{});var oT=E(Rp);Mp=b(oT,"CODE",{});var pT=E(Mp);Hp=y(pT,"schedule_update"),pT.forEach(u),_p=y(oT," schedules Svelte to update the DOM with the changes made thus far."),oT.forEach(u),Up=$(sT),Gp=b(sT,"P",{});var cT=E(Gp);qp=y(cT,"Svelte, at the point of writing ("),Bp=b(cT,"A",{href:!0,rel:!0});var rT=E(Bp);zp=y(rT,"v3.20.1"),rT.forEach(u),Fp=y(cT,"), uses "),Jp=b(cT,"A",{href:!0,rel:!0});var lT=E(Jp);Wp=y(lT,"microtask queue"),lT.forEach(u),Yp=y(cT," to batch change updates. The actual DOM update happens in the next microtask, so that any synchronous "),Vp=b(cT,"CODE",{});var iT=E(Vp);Kp=y(iT,"$$invalidate"),iT.forEach(u),Zp=y(cT," operations that happen within the same task get batched into the next DOM update."),cT.forEach(u),Qp=$(sT),Xp=b(sT,"P",{});var uT=E(Xp);ac=y(uT,"To schedule a next microtask, Svelte uses the Promise callback."),uT.forEach(u),nc=$(sT),sc=b(sT,"PRE",{class:!0}),E(sc).forEach(u),tc=$(sT),ec=b(sT,"P",{});var kT=E(ec);oc=y(kT,"In "),pc=b(kT,"CODE",{});var hT=E(pc);cc=y(hT,"flush"),hT.forEach(u),rc=y(kT,", we call update for each component marked dirty:"),kT.forEach(u),lc=$(sT),ic=b(sT,"PRE",{class:!0}),E(ic).forEach(u),uc=$(sT),kc=b(sT,"P",{});var dT=E(kc);hc=b(dT,"A",{href:!0,rel:!0});var fT=E(hc);dc=y(fT,"Source code"),fT.forEach(u),dT.forEach(u),fc=$(sT),mc=b(sT,"P",{});var mT=E(mc);vc=y(mT,"So, if you write a Svelte component like this:"),mT.forEach(u),gc=$(sT),Ec=b(sT,"PRE",{class:!0}),E(Ec).forEach(u),bc=$(sT),yc=b(sT,"P",{});var vT=E(yc);$c=b(vT,"A",{href:!0,rel:!0});var gT=E($c);wc=y(gT,"Svelte REPL"),gT.forEach(u),vT.forEach(u),Oc=$(sT),Sc=b(sT,"P",{});var ET=E(Sc);Tc=y(ET,"The DOM update for the "),Lc=b(ET,"CODE",{});var bT=E(Lc);Nc=y(bT,"givenName"),bT.forEach(u),Pc=y(ET," and "),xc=b(ET,"CODE",{});var yT=E(xc);Cc=y(yT,"familyName"),yT.forEach(u),Dc=y(ET," happens in the same microtask:"),ET.forEach(u),Ac=$(sT),Ic=b(sT,"OL",{});var $T=E(Ic);jc=b($T,"LI",{});var wT=E(jc);Rc=y(wT,"Click on the "),Mc=b(wT,"STRONG",{});var OT=E(Mc);Hc=y(OT,'"Update"'),OT.forEach(u),_c=y(wT," to call the "),Uc=b(wT,"CODE",{});var ST=E(Uc);Gc=y(ST,"update"),ST.forEach(u),qc=y(wT," function"),wT.forEach(u),Bc=$($T),zc=b($T,"LI",{});var TT=E(zc);Fc=b(TT,"CODE",{});var LT=E(Fc);Jc=y(LT,"$$invalidate('givenName', givenName = 'Li Hau')"),LT.forEach(u),TT.forEach(u),Wc=$($T),Yc=b($T,"LI",{});var NT=E(Yc);Vc=y(NT,"Mark the variable "),Kc=b(NT,"CODE",{});var PT=E(Kc);Zc=y(PT,"givenName"),PT.forEach(u),Qc=y(NT," dirty, "),Xc=b(NT,"CODE",{});var xT=E(Xc);ar=y(xT,"$$.dirty['givenName'] = true"),xT.forEach(u),NT.forEach(u),nr=$($T),sr=b($T,"LI",{});var CT=E(sr);tr=y(CT,"Schedule an update, "),er=b(CT,"CODE",{});var DT=E(er);or=y(DT,"schedule_update()"),DT.forEach(u),CT.forEach(u),pr=$($T),cr=b($T,"LI",{});var AT=E(cr);rr=y(AT,"Since it's the first update in the call stack, push the "),lr=b(AT,"CODE",{});var IT=E(lr);ir=y(IT,"flush"),IT.forEach(u),ur=y(AT," function into the microtask queue"),AT.forEach(u),kr=$($T),hr=b($T,"LI",{});var jT=E(hr);dr=b(jT,"CODE",{});var RT=E(dr);fr=y(RT,"$$invalidate('familyName', familyName = 'Tan')"),RT.forEach(u),jT.forEach(u),mr=$($T),vr=b($T,"LI",{});var MT=E(vr);gr=y(MT,"Mark the variable "),Er=b(MT,"CODE",{});var HT=E(Er);br=y(HT,"familyName"),HT.forEach(u),yr=y(MT," dirty, "),$r=b(MT,"CODE",{});var _T=E($r);wr=y(_T,"$$.dirty['familyName'] = true"),_T.forEach(u),MT.forEach(u),Or=$($T),Sr=b($T,"LI",{});var UT=E(Sr);Tr=y(UT,"Schedule an update, "),Lr=b(UT,"CODE",{});var GT=E(Lr);Nr=y(GT,"schedule_update()"),GT.forEach(u),UT.forEach(u),Pr=$($T),xr=b($T,"LI",{});var qT=E(xr);Cr=y(qT,"Since "),Dr=b(qT,"CODE",{});var BT=E(Dr);Ar=y(BT,"update_scheduled = true"),BT.forEach(u),Ir=y(qT,", do nothing."),qT.forEach(u),jr=$($T),Rr=b($T,"LI",{});var zT=E(Rr);Mr=b(zT,"STRONG",{});var FT=E(Mr);Hr=y(FT,"-- End of task --"),FT.forEach(u),zT.forEach(u),_r=$($T),Ur=b($T,"LI",{});var JT=E(Ur);Gr=b(JT,"STRONG",{});var WT=E(Gr);qr=y(WT,"-- Start of microtask--"),WT.forEach(u),JT.forEach(u),Br=$($T),zr=b($T,"LI",{});var YT=E(zr);Fr=b(YT,"CODE",{});var VT=E(Fr);Jr=y(VT,"flush()"),VT.forEach(u),Wr=y(YT," calls "),Yr=b(YT,"CODE",{});var KT=E(Yr);Vr=y(KT,"update()"),KT.forEach(u),Kr=y(YT," for each component marked dirty"),YT.forEach(u),Zr=$($T),Qr=b($T,"LI",{});var ZT=E(Qr);Xr=y(ZT,"Calls "),al=b(ZT,"CODE",{});var QT=E(al);nl=y(QT,"$$.fragment.p($$.dirty, $$.ctx)"),QT.forEach(u),sl=y(ZT,"."),tl=b(ZT,"UL",{});var XT=E(tl);el=b(XT,"LI",{});var aL=E(el);ol=b(aL,"CODE",{});var nL=E(ol);pl=y(nL,"$$.dirty"),nL.forEach(u),cl=y(aL," is now "),rl=b(aL,"CODE",{});var sL=E(rl);ll=y(sL,"{ givenName: true, familyName: true }"),sL.forEach(u),aL.forEach(u),il=$(XT),ul=b(XT,"LI",{});var tL=E(ul);kl=b(tL,"CODE",{});var eL=E(kl);hl=y(eL,"$$.ctx"),eL.forEach(u),dl=y(tL," is now "),fl=b(tL,"CODE",{});var oL=E(fl);ml=y(oL,"{ givenName: 'Li Hau', familyName: 'Tan' }"),oL.forEach(u),tL.forEach(u),XT.forEach(u),ZT.forEach(u),vl=$($T),gl=b($T,"LI",{});var pL=E(gl);El=y(pL,"In "),bl=b(pL,"CODE",{});var cL=E(bl);yl=y(cL,"function p(dirty, ctx)"),cL.forEach(u),$l=y(pL,","),wl=b(pL,"UL",{});var rL=E(wl);Ol=b(rL,"LI",{});var lL=E(Ol);Sl=y(lL,"Update the 1st text node to "),Tl=b(lL,"CODE",{});var iL=E(Tl);Ll=y(iL,"$$.ctx['givenName']"),iL.forEach(u),Nl=y(lL," if "),Pl=b(lL,"CODE",{});var uL=E(Pl);xl=y(uL,"$$.dirty['givenName'] === true"),uL.forEach(u),lL.forEach(u),Cl=$(rL),Dl=b(rL,"LI",{});var kL=E(Dl);Al=y(kL,"Update the 2nd text node to "),Il=b(kL,"CODE",{});var hL=E(Il);jl=y(hL,"$$.ctx['familyName']"),hL.forEach(u),Rl=y(kL," if "),Ml=b(kL,"CODE",{});var dL=E(Ml);Hl=y(dL,"$$.dirty['familyName'] === true"),dL.forEach(u),kL.forEach(u),rL.forEach(u),pL.forEach(u),_l=$($T),Ul=b($T,"LI",{});var fL=E(Ul);Gl=y(fL,"Resets the "),ql=b(fL,"CODE",{});var mL=E(ql);Bl=y(mL,"$$.dirty"),mL.forEach(u),zl=y(fL," to "),Fl=b(fL,"CODE",{});var vL=E(Fl);Jl=y(vL,"null"),vL.forEach(u),fL.forEach(u),Wl=$($T),Yl=b($T,"LI",{});var gL=E(Yl);Vl=y(gL,"..."),gL.forEach(u),Kl=$($T),Zl=b($T,"LI",{});var EL=E(Zl);Ql=b(EL,"STRONG",{});var bL=E(Ql);Xl=y(bL,"-- End of microtask--"),bL.forEach(u),EL.forEach(u),$T.forEach(u),sT.forEach(u),ai=$(a),ni=b(a,"SECTION",{});var yL=E(ni);si=b(yL,"H4",{});var $L=E(si);ti=b($L,"A",{href:!0,id:!0});var wL=E(ti);ei=y(wL,"tl/dr:"),wL.forEach(u),$L.forEach(u),oi=$(yL),pi=b(yL,"UL",{});var OL=E(pi);ci=b(OL,"LI",{});var SL=E(ci);ri=y(SL,"For each assignment or update, Svelte calls "),li=b(SL,"CODE",{});var TL=E(li);ii=y(TL,"$$invalidate"),TL.forEach(u),ui=y(SL," to update the variable in "),ki=b(SL,"CODE",{});var LL=E(ki);hi=y(LL,"$$.ctx"),LL.forEach(u),di=y(SL," and mark the variable dirty in "),fi=b(SL,"CODE",{});var NL=E(fi);mi=y(NL,"$$.dirty"),NL.forEach(u),vi=y(SL,"."),SL.forEach(u),gi=$(OL),Ei=b(OL,"LI",{});var PL=E(Ei);bi=y(PL,"The acutal DOM update is batched into the next microtask queue."),PL.forEach(u),yi=$(OL),$i=b(OL,"LI",{});var xL=E($i);wi=y(xL,"To update the DOM for each component, the component "),Oi=b(xL,"CODE",{});var CL=E(Oi);Si=y(CL,"$$.fragment.p($$.diry, $$.ctx)"),CL.forEach(u),Ti=y(xL," is called."),xL.forEach(u),Li=$(OL),Ni=b(OL,"LI",{});var DL=E(Ni);Pi=y(DL,"After the DOM update, the "),xi=b(DL,"CODE",{});var AL=E(xi);Ci=y(AL,"$$.dirty"),AL.forEach(u),Di=y(DL," is reset to "),Ai=b(DL,"CODE",{});var IL=E(Ai);Ii=y(IL,"null"),IL.forEach(u),ji=y(DL,"."),DL.forEach(u),OL.forEach(u),yL.forEach(u),Ri=$(a),Mi=b(a,"SECTION",{});var jL=E(Mi);Hi=b(jL,"H2",{});var RL=E(Hi);_i=b(RL,"A",{href:!0,id:!0});var ML=E(_i);Ui=y(ML,"v3.16.0"),ML.forEach(u),RL.forEach(u),Gi=$(jL),qi=b(jL,"P",{});var HL=E(qi);Bi=y(HL,"One big change in v3.16.0 is the PR "),zi=b(HL,"A",{href:!0,rel:!0});var _L=E(zi);Fi=y(_L,"#3945"),_L.forEach(u),Ji=y(HL,", namely "),Wi=b(HL,"STRONG",{});var UL=E(Wi);Yi=y(UL,"bitmask-based change tracking"),UL.forEach(u),Vi=y(HL,"."),HL.forEach(u),Ki=$(jL),Zi=b(jL,"P",{});var GL=E(Zi);Qi=y(GL,"Instead of marking the variable dirty using an object:"),GL.forEach(u),Xi=$(jL),au=b(jL,"PRE",{class:!0}),E(au).forEach(u),nu=$(jL),su=b(jL,"P",{});var qL=E(su);tu=y(qL,"Svelte assign each variable an index:"),qL.forEach(u),eu=$(jL),ou=b(jL,"PRE",{class:!0}),E(ou).forEach(u),pu=$(jL),cu=b(jL,"P",{});var BL=E(cu);ru=y(BL,"and uses "),lu=b(BL,"A",{href:!0,rel:!0});var zL=E(lu);iu=y(zL,"bitmask"),zL.forEach(u),uu=y(BL," to store the dirty information:"),BL.forEach(u),ku=$(jL),hu=b(jL,"PRE",{class:!0}),E(hu).forEach(u),du=$(jL),fu=b(jL,"P",{});var FL=E(fu);mu=y(FL,"which is far more compact than the previous compiled code."),FL.forEach(u),jL.forEach(u),vu=$(a),gu=b(a,"SECTION",{});var JL=E(gu);Eu=b(JL,"H3",{});var WL=E(Eu);bu=b(WL,"A",{href:!0,id:!0});var YL=E(bu);yu=y(YL,"Bitmask"),YL.forEach(u),WL.forEach(u),$u=$(JL),wu=b(JL,"P",{});var VL=E(wu);Ou=y(VL,"For those who don't understand, allow me to quickly explain what it is."),VL.forEach(u),Su=$(JL),Tu=b(JL,"P",{});var KL=E(Tu);Lu=y(KL,"Of course, if you want to learn more about it, feel free to read a more detailed explanation, like "),Nu=b(KL,"A",{href:!0,rel:!0});var ZL=E(Nu);Pu=y(ZL,"this"),ZL.forEach(u),xu=y(KL," and "),Cu=b(KL,"A",{href:!0,rel:!0});var QL=E(Cu);Du=y(QL,"this"),QL.forEach(u),Au=y(KL,"."),KL.forEach(u),Iu=$(JL),ju=b(JL,"P",{});var XL=E(ju);Ru=y(XL,"The most compact way of representing a group of "),Mu=b(XL,"CODE",{});var aN=E(Mu);Hu=y(aN,"true"),aN.forEach(u),_u=y(XL," or "),Uu=b(XL,"CODE",{});var nN=E(Uu);Gu=y(nN,"false"),nN.forEach(u),qu=y(XL," is to use bits. If the bit is "),Bu=b(XL,"CODE",{});var sN=E(Bu);zu=y(sN,"1"),sN.forEach(u),Fu=y(XL," it is "),Ju=b(XL,"CODE",{});var tN=E(Ju);Wu=y(tN,"true"),tN.forEach(u),Yu=y(XL," and if it is "),Vu=b(XL,"CODE",{});var eN=E(Vu);Ku=y(eN,"0"),eN.forEach(u),Zu=y(XL," it is "),Qu=b(XL,"CODE",{});var oN=E(Qu);Xu=y(oN,"false"),oN.forEach(u),ak=y(XL,"."),XL.forEach(u),nk=$(JL),sk=b(JL,"P",{});var pN=E(sk);tk=y(pN,"A number can be represented in binary, "),ek=b(pN,"STRONG",{});var cN=E(ek);ok=y(cN,"5"),cN.forEach(u),pk=y(pN," is "),ck=b(pN,"CODE",{});var rN=E(ck);rk=y(rN,"0b0101"),rN.forEach(u),lk=y(pN," in binary."),pN.forEach(u),ik=$(JL),uk=b(JL,"P",{});var lN=E(uk);kk=y(lN,"If "),hk=b(lN,"STRONG",{});var iN=E(hk);dk=y(iN,"5"),iN.forEach(u),fk=y(lN," is represented in a 4-bit binary, then it can store 4 boolean values, with the 0th and 2nd bit as "),mk=b(lN,"CODE",{});var uN=E(mk);vk=y(uN,"true"),uN.forEach(u),gk=y(lN," and 1st and 3rd bit as "),Ek=b(lN,"CODE",{});var kN=E(Ek);bk=y(kN,"false"),kN.forEach(u),yk=y(lN,", (reading from the right to left, from "),$k=b(lN,"A",{href:!0,rel:!0});var hN=E($k);wk=y(hN,"least significant bit"),hN.forEach(u),Ok=y(lN," to the "),Sk=b(lN,"A",{href:!0,rel:!0});var dN=E(Sk);Tk=y(dN,"most significant bit"),dN.forEach(u),Lk=y(lN,")."),lN.forEach(u),Nk=$(JL),Pk=b(JL,"P",{});var fN=E(Pk);xk=b(fN,"STRONG",{});var mN=E(xk);Ck=y(mN,"How many boolean values can a number store?"),mN.forEach(u),fN.forEach(u),Dk=$(JL),Ak=b(JL,"P",{});var vN=E(Ak);Ik=y(vN,"That depends on the language, a 16-bit integer in Java can store 16 boolean values."),vN.forEach(u),jk=$(JL),Rk=b(JL,"P",{});var gN=E(Rk);Mk=y(gN,"In JavaScript, numbers can are "),Hk=b(gN,"A",{href:!0,rel:!0});var EN=E(Hk);_k=y(EN,"represented in 64 bits"),EN.forEach(u),Uk=y(gN,". However, when using "),Gk=b(gN,"A",{href:!0,rel:!0});var bN=E(Gk);qk=y(bN,"bitwise operations"),bN.forEach(u),Bk=y(gN," on the number, JavaScript will treat the number as 32 bits."),gN.forEach(u),zk=$(JL),Fk=b(JL,"P",{});var yN=E(Fk);Jk=y(yN,"To inspect or modify the boolean value stored in a number, we use "),Wk=b(yN,"A",{href:!0,rel:!0});var $N=E(Wk);Yk=y($N,"bitwise operations"),$N.forEach(u),Vk=y(yN,"."),yN.forEach(u),Kk=$(JL),Zk=b(JL,"PRE",{class:!0}),E(Zk).forEach(u),Qk=$(JL),Xk=b(JL,"P",{});var wN=E(Xk);ah=y(wN,"The 2nd operand we use in the bitwise operation, is like a "),nh=b(wN,"A",{href:!0,rel:!0});var ON=E(nh);sh=y(ON,"mask"),ON.forEach(u),th=y(wN," that allow us to target a specific bit in the 1st number, that stores our boolean values."),wN.forEach(u),eh=$(JL),oh=b(JL,"P",{});var SN=E(oh);ph=y(SN,"We call the mask, "),ch=b(SN,"STRONG",{});var TN=E(ch);rh=y(TN,"bitmask"),TN.forEach(u),lh=y(SN,"."),SN.forEach(u),JL.forEach(u),ih=$(a),uh=b(a,"SECTION",{});var LN=E(uh);kh=b(LN,"H3",{});var NN=E(kh);hh=b(NN,"A",{href:!0,id:!0});var PN=E(hh);dh=y(PN,"Bitmask in Svelte"),PN.forEach(u),NN.forEach(u),fh=$(LN),mh=b(LN,"P",{});var xN=E(mh);vh=y(xN,"As mentioned earlier, we assign each variable an index:"),xN.forEach(u),gh=$(LN),Eh=b(LN,"PRE",{class:!0}),E(Eh).forEach(u),bh=$(LN),yh=b(LN,"P",{});var CN=E(yh);$h=y(CN,"So instead of returning the instance variable as an JavaScript Object, we now return it as an JavaScript Array:"),CN.forEach(u),wh=$(LN),Oh=b(LN,"PRE",{class:!0}),E(Oh).forEach(u),Sh=$(LN),Th=b(LN,"P",{});var DN=E(Th);Lh=y(DN,"The variable is accessed via "),Nh=b(DN,"STRONG",{});var AN=E(Nh);Ph=y(AN,"index"),AN.forEach(u),xh=y(DN,", "),Ch=b(DN,"CODE",{});var IN=E(Ch);Dh=y(IN,"$$.ctx[index]"),IN.forEach(u),Ah=y(DN,", instead of "),Ih=b(DN,"STRONG",{});var jN=E(Ih);jh=y(jN,"variable name"),jN.forEach(u),Rh=y(DN,":"),DN.forEach(u),Mh=$(LN),Hh=b(LN,"PRE",{class:!0}),E(Hh).forEach(u),_h=$(LN),Uh=b(LN,"P",{});var RN=E(Uh);Gh=y(RN,"The "),qh=b(RN,"CODE",{});var MN=E(qh);Bh=y(MN,"$$invalidate"),MN.forEach(u),zh=y(RN," function works the same, except it takes in "),Fh=b(RN,"STRONG",{});var HN=E(Fh);Jh=y(HN,"index"),HN.forEach(u),Wh=y(RN," instead of "),Yh=b(RN,"STRONG",{});var _N=E(Yh);Vh=y(_N,"variable name"),_N.forEach(u),Kh=y(RN,":"),RN.forEach(u),Zh=$(LN),Qh=b(LN,"PRE",{class:!0}),E(Qh).forEach(u),Xh=$(LN),ad=b(LN,"P",{});var UN=E(ad);nd=b(UN,"CODE",{});var GN=E(nd);sd=y(GN,"$$.dirty"),GN.forEach(u),td=y(UN," now stores a list of numbers. Each number carries 31 boolean values, each boolean value indicates whether the variable of that index is dirty or not."),UN.forEach(u),ed=$(LN),od=b(LN,"P",{});var qN=E(od);pd=y(qN,"To set a variable as dirty, we use bitwise operation:"),qN.forEach(u),cd=$(LN),rd=b(LN,"PRE",{class:!0}),E(rd).forEach(u),ld=$(LN),id=b(LN,"P",{});var BN=E(id);ud=y(BN,"And to verify whether a variable is dirty, we use bitwise operation too!"),BN.forEach(u),kd=$(LN),hd=b(LN,"PRE",{class:!0}),E(hd).forEach(u),dd=$(LN),fd=b(LN,"P",{});var zN=E(fd);md=y(zN,"With using bitmask, "),vd=b(zN,"CODE",{});var FN=E(vd);gd=y(FN,"$$.dirty"),FN.forEach(u),Ed=y(zN," is now reset to "),bd=b(zN,"CODE",{});var JN=E(bd);yd=y(JN,"[-1]"),JN.forEach(u),$d=y(zN," instead of "),wd=b(zN,"CODE",{});var WN=E(wd);Od=y(WN,"null"),WN.forEach(u),Sd=y(zN,"."),zN.forEach(u),Td=$(LN),Ld=b(LN,"P",{});var YN=E(Ld);Nd=b(YN,"STRONG",{});var VN=E(Nd);Pd=y(VN,"Trivia:"),VN.forEach(u),xd=$(YN),Cd=b(YN,"CODE",{});var KN=E(Cd);Dd=y(KN,"-1"),KN.forEach(u),Ad=y(YN," is "),Id=b(YN,"CODE",{});var ZN=E(Id);jd=y(ZN,"0b1111_1111"),ZN.forEach(u),Rd=y(YN," in binary, where all the bits are "),Md=b(YN,"CODE",{});var QN=E(Md);Hd=y(QN,"1"),QN.forEach(u),_d=y(YN,"."),YN.forEach(u),LN.forEach(u),Ud=$(a),Gd=b(a,"SECTION",{});var XN=E(Gd);qd=b(XN,"H4",{});var aP=E(qd);Bd=b(aP,"A",{href:!0,id:!0});var nP=E(Bd);zd=y(nP,"Destructuring "),Fd=b(nP,"STRONG",{});var sP=E(Fd);Jd=y(sP,"$$.dirty"),sP.forEach(u),nP.forEach(u),aP.forEach(u),Wd=$(XN),Yd=b(XN,"P",{});var tP=E(Yd);Vd=y(tP,"One code-size optimisation that Svelte does is to always destructure the "),Kd=b(tP,"CODE",{});var eP=E(Kd);Zd=y(eP,"dirty"),eP.forEach(u),Qd=y(tP," array in the "),Xd=b(tP,"STRONG",{});var oP=E(Xd);af=y(oP,"u_p_date function"),oP.forEach(u),nf=y(tP," if there's less than 32 variables, since we will always access "),sf=b(tP,"CODE",{});var pP=E(sf);tf=y(pP,"dirty[0]"),pP.forEach(u),ef=y(tP," anyway:"),tP.forEach(u),of=$(XN),pf=b(XN,"PRE",{class:!0}),E(pf).forEach(u),XN.forEach(u),cf=$(a),rf=b(a,"SECTION",{});var cP=E(rf);lf=b(cP,"H4",{});var rP=E(lf);uf=b(rP,"A",{href:!0,id:!0});var lP=E(uf);kf=y(lP,"tl/dr:"),lP.forEach(u),rP.forEach(u),hf=$(cP),df=b(cP,"UL",{});var iP=E(df);ff=b(iP,"LI",{});var uP=E(ff);mf=y(uP,"The underlying mechanism for "),vf=b(uP,"CODE",{});var kP=E(vf);gf=y(kP,"$$invalidate"),kP.forEach(u),Ef=y(uP," and "),bf=b(uP,"CODE",{});var hP=E(bf);yf=y(hP,"schedule_update"),hP.forEach(u),$f=y(uP," does not change"),uP.forEach(u),wf=$(iP),Of=b(iP,"LI",{});var dP=E(Of);Sf=y(dP,"Using bitmask, the compiled code is much compact"),dP.forEach(u),iP.forEach(u),cP.forEach(u),Tf=$(a),Lf=b(a,"SECTION",{});var fP=E(Lf);Nf=b(fP,"H2",{});var mP=E(Nf);Pf=b(mP,"A",{href:!0,id:!0});var vP=E(Pf);xf=y(vP,"Reactive Declaration"),vP.forEach(u),mP.forEach(u),Cf=$(fP),Df=b(fP,"P",{});var gP=E(Df);Af=y(gP,"Svelte allow us to declare reactive values via the "),If=b(gP,"A",{href:!0,rel:!0});var EP=E(If);jf=y(EP,"labeled statement"),EP.forEach(u),Rf=y(gP,", "),Mf=b(gP,"CODE",{});var bP=E(Mf);Hf=y(bP,"$:"),bP.forEach(u),gP.forEach(u),_f=$(fP),Uf=b(fP,"PRE",{class:!0}),E(Uf).forEach(u),Gf=$(fP),qf=b(fP,"P",{});var yP=E(qf);Bf=b(yP,"A",{href:!0,rel:!0});var $P=E(Bf);zf=y($P,"Svelte REPL"),$P.forEach(u),yP.forEach(u),Ff=$(fP),Jf=b(fP,"P",{});var wP=E(Jf);Wf=y(wP,"If you look at the compiled output, you would find out that the declarative statements appeared in the "),Yf=b(wP,"A",{href:!0});var OP=E(Yf);Vf=b(OP,"CODE",{});var SP=E(Vf);Kf=y(SP,"instance"),SP.forEach(u),Zf=y(OP," function"),OP.forEach(u),Qf=y(wP,":"),wP.forEach(u),Xf=$(fP),am=b(fP,"PRE",{class:!0}),E(am).forEach(u),nm=$(fP),sm=b(fP,"P",{});var TP=E(sm);tm=y(TP,"Try reorder the reactive declarations and observe the change in the compiled output:"),TP.forEach(u),em=$(fP),om=b(fP,"PRE",{class:!0}),E(om).forEach(u),pm=$(fP),cm=b(fP,"P",{});var LP=E(cm);rm=b(LP,"A",{href:!0,rel:!0});var NP=E(rm);lm=y(NP,"Svelte REPL"),NP.forEach(u),LP.forEach(u),im=$(fP),um=b(fP,"PRE",{class:!0}),E(um).forEach(u),km=$(fP),hm=b(fP,"P",{});var PP=E(hm);dm=y(PP,"Some observations:"),PP.forEach(u),fm=$(fP),mm=b(fP,"UL",{});var xP=E(mm);vm=b(xP,"LI",{});var CP=E(vm);gm=y(CP,"When there are reactive declarations, Svelte defines a custom "),Em=b(CP,"CODE",{});var DP=E(Em);bm=y(DP,"$$.update"),DP.forEach(u),ym=y(CP," method."),$m=b(CP,"UL",{});var AP=E($m);wm=b(AP,"LI",{});var IP=E(wm);Om=b(IP,"CODE",{});var jP=E(Om);Sm=y(jP,"$$.update"),jP.forEach(u),Tm=y(IP," is a "),Lm=b(IP,"A",{href:!0,rel:!0});var RP=E(Lm);Nm=y(RP,"no-op function"),RP.forEach(u),Pm=y(IP," by default. (See "),xm=b(IP,"A",{href:!0,rel:!0});var MP=E(xm);Cm=y(MP,"src/runtime/internal/Component.ts"),MP.forEach(u),Dm=y(IP,")"),IP.forEach(u),AP.forEach(u),CP.forEach(u),Am=$(xP),Im=b(xP,"LI",{});var HP=E(Im);jm=y(HP,"Svelte uses "),Rm=b(HP,"CODE",{});var _P=E(Rm);Mm=y(_P,"$$invalidate"),_P.forEach(u),Hm=y(HP," to update the value of a reactive variable too."),HP.forEach(u),_m=$(xP),Um=b(xP,"LI",{});var UP=E(Um);Gm=y(UP,"Svelte sorts the reactive declarations and statements, based on the dependency relationship between the declarations and statements"),qm=b(UP,"UL",{});var GP=E(qm);Bm=b(GP,"LI",{});var qP=E(Bm);zm=b(qP,"CODE",{});var BP=E(zm);Fm=y(BP,"quadrupled"),BP.forEach(u),Jm=y(qP," depends on "),Wm=b(qP,"CODE",{});var zP=E(Wm);Ym=y(zP,"doubled"),zP.forEach(u),Vm=y(qP,", so "),Km=b(qP,"CODE",{});var FP=E(Km);Zm=y(FP,"quadrupled"),FP.forEach(u),Qm=y(qP," is evaluated and "),Xm=b(qP,"CODE",{});var JP=E(Xm);av=y(JP,"$$invalidate"),JP.forEach(u),nv=y(qP,"d after "),sv=b(qP,"CODE",{});var WP=E(sv);tv=y(WP,"doubled"),WP.forEach(u),ev=y(qP,"."),qP.forEach(u),GP.forEach(u),UP.forEach(u),xP.forEach(u),ov=$(fP),pv=b(fP,"P",{});var YP=E(pv);cv=y(YP,"Since all reactive declarations and statements are grouped into the "),rv=b(YP,"CODE",{});var VP=E(rv);lv=y(VP,"$$.update"),VP.forEach(u),iv=y(YP," method, and also the fact that Svelte will sort the declarations and statements according to their dependency relationship, it is irrelevant of the location or the order you declared them."),YP.forEach(u),uv=$(fP),kv=b(fP,"P",{});var KP=E(kv);hv=y(KP,"The following component still works:"),KP.forEach(u),dv=$(fP),fv=b(fP,"PRE",{class:!0}),E(fv).forEach(u),mv=$(fP),vv=b(fP,"P",{});var ZP=E(vv);gv=b(ZP,"A",{href:!0,rel:!0});var QP=E(gv);Ev=y(QP,"Svelte REPL"),QP.forEach(u),ZP.forEach(u),bv=$(fP),yv=b(fP,"P",{});var XP=E(yv);$v=b(XP,"STRONG",{});var ax=E($v);wv=y(ax,"The next thing you may ask, when is "),Ov=b(ax,"CODE",{});var nx=E(Ov);Sv=y(nx,"$$.update"),nx.forEach(u),Tv=y(ax," being called?"),ax.forEach(u),XP.forEach(u),Lv=$(fP),Nv=b(fP,"P",{});var sx=E(Nv);Pv=y(sx,"Remember the "),xv=b(sx,"CODE",{});var tx=E(xv);Cv=y(tx,"update"),tx.forEach(u),Dv=y(sx," function that gets called in the "),Av=b(sx,"CODE",{});var ex=E(Av);Iv=y(ex,"flush"),ex.forEach(u),jv=y(sx," function?"),sx.forEach(u),Rv=$(fP),Mv=b(fP,"P",{});var ox=E(Mv);Hv=y(ox,"I put a "),_v=b(ox,"CODE",{});var px=E(_v);Uv=y(px,"NOTE:"),px.forEach(u),Gv=y(ox," comment saying that it will be important later. Well, it is important now."),ox.forEach(u),qv=$(fP),Bv=b(fP,"PRE",{class:!0}),E(Bv).forEach(u),zv=$(fP),Fv=b(fP,"P",{});var cx=E(Fv);Jv=y(cx,"The "),Wv=b(cx,"CODE",{});var rx=E(Wv);Yv=y(rx,"$$.update"),rx.forEach(u),Vv=y(cx," function gets called "),Kv=b(cx,"STRONG",{});var lx=E(Kv);Zv=y(lx,"in the same microtask"),lx.forEach(u),Qv=y(cx," with the DOM update, right before we called the "),Xv=b(cx,"CODE",{});var ix=E(Xv);ag=y(ix,"$$.fragment.p()"),ix.forEach(u),ng=y(cx," to update the DOM."),cx.forEach(u),sg=$(fP),tg=b(fP,"P",{});var ux=E(tg);eg=y(ux,"The implication of the above fact is"),ux.forEach(u),fP.forEach(u),og=$(a),pg=b(a,"SECTION",{});var kx=E(pg);cg=b(kx,"H4",{});var hx=E(cg);rg=b(hx,"A",{href:!0,id:!0});var dx=E(rg);lg=y(dx,"1. Execution of all reactive declarations and statements are batched"),dx.forEach(u),hx.forEach(u),ig=$(kx),ug=b(kx,"P",{});var fx=E(ug);kg=y(fx,"Just as how DOM updates are batched, reactive declarations and statements are batched too!"),fx.forEach(u),hg=$(kx),dg=b(kx,"PRE",{class:!0}),E(dg).forEach(u),fg=$(kx),mg=b(kx,"P",{});var mx=E(mg);vg=b(mx,"A",{href:!0,rel:!0});var vx=E(vg);gg=y(vx,"Svelte REPL"),vx.forEach(u),mx.forEach(u),Eg=$(kx),bg=b(kx,"P",{});var gx=E(bg);yg=y(gx,"When "),$g=b(gx,"CODE",{});var Ex=E($g);wg=y(Ex,"update()"),Ex.forEach(u),Og=y(gx," get called,"),gx.forEach(u),Sg=$(kx),Tg=b(kx,"OL",{});var bx=E(Tg);Lg=b(bx,"LI",{});var yx=E(Lg);Ng=y(yx,"Similar to the "),Pg=b(yx,"A",{href:!0});var $x=E(Pg);xg=y($x,"flow described above"),$x.forEach(u),Cg=y(yx,", "),Dg=b(yx,"CODE",{});var wx=E(Dg);Ag=y(wx,"$$invalidate"),wx.forEach(u),Ig=y(yx," both "),jg=b(yx,"STRONG",{});var Ox=E(jg);Rg=y(Ox,'"givenName"'),Ox.forEach(u),Mg=y(yx," and "),Hg=b(yx,"STRONG",{});var Sx=E(Hg);_g=y(Sx,'"familyName"'),Sx.forEach(u),Ug=y(yx,", and schedules an update"),yx.forEach(u),Gg=$(bx),qg=b(bx,"LI",{});var Tx=E(qg);Bg=b(Tx,"STRONG",{});var Lx=E(Bg);zg=y(Lx,"-- End of task --"),Lx.forEach(u),Tx.forEach(u),Fg=$(bx),Jg=b(bx,"LI",{});var Nx=E(Jg);Wg=b(Nx,"STRONG",{});var Px=E(Wg);Yg=y(Px,"-- Start of microtask--"),Px.forEach(u),Nx.forEach(u),Vg=$(bx),Kg=b(bx,"LI",{});var xx=E(Kg);Zg=b(xx,"CODE",{});var Cx=E(Zg);Qg=y(Cx,"flush()"),Cx.forEach(u),Xg=y(xx," calls "),aE=b(xx,"CODE",{});var Dx=E(aE);nE=y(Dx,"update()"),Dx.forEach(u),sE=y(xx," for each component marked dirty"),xx.forEach(u),tE=$(bx),eE=b(bx,"LI",{});var Ax=E(eE);oE=y(Ax,"Runs "),pE=b(Ax,"CODE",{});var Ix=E(pE);cE=y(Ix,"$$.update()"),Ix.forEach(u),rE=b(Ax,"UL",{});var jx=E(rE);lE=b(jx,"LI",{});var Rx=E(lE);iE=y(Rx,"As "),uE=b(Rx,"STRONG",{});var Mx=E(uE);kE=y(Mx,'"givenName"'),Mx.forEach(u),hE=y(Rx," and "),dE=b(Rx,"STRONG",{});var Hx=E(dE);fE=y(Hx,'"familyName"'),Hx.forEach(u),mE=y(Rx," has changed, evaluates and "),vE=b(Rx,"CODE",{});var _x=E(vE);gE=y(_x,"$$invalidate"),_x.forEach(u),EE=$(Rx),bE=b(Rx,"STRONG",{});var Ux=E(bE);yE=y(Ux,'"name"'),Ux.forEach(u),Rx.forEach(u),$E=$(jx),wE=b(jx,"LI",{});var Gx=E(wE);OE=y(Gx,"As "),SE=b(Gx,"STRONG",{});var qx=E(SE);TE=y(qx,'"name"'),qx.forEach(u),LE=y(Gx," has changed, executes "),NE=b(Gx,"CODE",{});var Bx=E(NE);PE=y(Bx,"console.log('name', name);"),Bx.forEach(u),Gx.forEach(u),jx.forEach(u),Ax.forEach(u),xE=$(bx),CE=b(bx,"LI",{});var zx=E(CE);DE=y(zx,"Calls "),AE=b(zx,"CODE",{});var Fx=E(AE);IE=y(Fx,"$$.fragment.p(...)"),Fx.forEach(u),jE=y(zx," to update the DOM."),zx.forEach(u),bx.forEach(u),RE=$(kx),ME=b(kx,"P",{});var Jx=E(ME);HE=y(Jx,"As you can see, even though we've updated "),_E=b(Jx,"CODE",{});var Wx=E(_E);UE=y(Wx,"givenName"),Wx.forEach(u),GE=y(Jx," and "),qE=b(Jx,"CODE",{});var Yx=E(qE);BE=y(Yx,"familyName"),Yx.forEach(u),zE=y(Jx,", we only evaluate "),FE=b(Jx,"CODE",{});var Vx=E(FE);JE=y(Vx,"name"),Vx.forEach(u),WE=y(Jx," and executes "),YE=b(Jx,"CODE",{});var Kx=E(YE);VE=y(Kx,"console.log('name', name)"),Kx.forEach(u),KE=$(Jx),ZE=b(Jx,"STRONG",{});var Zx=E(ZE);QE=y(Zx,"once"),Zx.forEach(u),XE=y(Jx," instead of twice:"),Jx.forEach(u),ab=$(kx),nb=b(kx,"PRE",{class:!0}),E(nb).forEach(u),kx.forEach(u),sb=$(a),tb=b(a,"SECTION",{});var Qx=E(tb);eb=b(Qx,"H4",{});var Xx=E(eb);ob=b(Xx,"A",{href:!0,id:!0});var aC=E(ob);pb=y(aC,"2. The value of reactive variable outside of reactive declarations and statements may not be up to date"),aC.forEach(u),Xx.forEach(u),cb=$(Qx),rb=b(Qx,"P",{});var nC=E(rb);lb=y(nC,"Because the reactive declarations and statements are batched and executed in the next microtask, you can't expect the value to be updated synchronously."),nC.forEach(u),ib=$(Qx),ub=b(Qx,"PRE",{class:!0}),E(ub).forEach(u),kb=$(Qx),hb=b(Qx,"P",{});var sC=E(hb);db=b(sC,"A",{href:!0,rel:!0});var tC=E(db);fb=y(tC,"Svelte REPL"),tC.forEach(u),sC.forEach(u),mb=$(Qx),vb=b(Qx,"P",{});var eC=E(vb);gb=y(eC,"Instead, you "),Eb=b(eC,"STRONG",{});var oC=E(Eb);bb=y(oC,"have to"),oC.forEach(u),yb=y(eC," refer the reactive variable in another reactive declaration or statement:"),eC.forEach(u),$b=$(Qx),wb=b(Qx,"PRE",{class:!0}),E(wb).forEach(u),Qx.forEach(u),Ob=$(a),Sb=b(a,"SECTION",{});var pC=E(Sb);Tb=b(pC,"H3",{});var cC=E(Tb);Lb=b(cC,"A",{href:!0,id:!0});var rC=E(Lb);Nb=y(rC,"Sorting of reactive declarations and statements"),rC.forEach(u),cC.forEach(u),Pb=$(pC),xb=b(pC,"P",{});var lC=E(xb);Cb=y(lC,"Svelte tries to preserve the order of reactive declarations and statements as they are declared as much as possible."),lC.forEach(u),Db=$(pC),Ab=b(pC,"P",{});var iC=E(Ab);Ib=y(iC,"However, if one reactive declaration or statement refers to a variable that was defined by another reactive declaration, then, "),jb=b(iC,"STRONG",{});var uC=E(jb);Rb=y(uC,"it will be inserted after the latter reactive declaration"),uC.forEach(u),Mb=y(iC,":"),iC.forEach(u),Hb=$(pC),_b=b(pC,"PRE",{class:!0}),E(_b).forEach(u),pC.forEach(u),Ub=$(a),Gb=b(a,"SECTION",{});var kC=E(Gb);qb=b(kC,"H3",{});var hC=E(qb);Bb=b(hC,"A",{href:!0,id:!0});var dC=E(Bb);zb=y(dC,"Reactive variable that is not reactive"),dC.forEach(u),hC.forEach(u),Fb=$(kC),Jb=b(kC,"P",{});var fC=E(Jb);Wb=y(fC,"The Svelte compiler tracks all the variables declared in the "),Yb=b(fC,"CODE",{});var mC=E(Yb);Vb=y(mC,"<script>"),mC.forEach(u),Kb=y(fC," tag."),fC.forEach(u),Zb=$(kC),Qb=b(kC,"P",{});var vC=E(Qb);Xb=y(vC,"If all the variables of a reactive declaration or statement refers to, never gets mutated or reassigned, then the reactive declaration or statement will not be added into "),ay=b(vC,"CODE",{});var gC=E(ay);ny=y(gC,"$$.update"),gC.forEach(u),sy=y(vC,"."),vC.forEach(u),ty=$(kC),ey=b(kC,"P",{});var EC=E(ey);oy=y(EC,"For example:"),EC.forEach(u),py=$(kC),cy=b(kC,"PRE",{class:!0}),E(cy).forEach(u),ry=$(kC),ly=b(kC,"P",{});var bC=E(ly);iy=b(bC,"A",{href:!0,rel:!0});var yC=E(iy);uy=y(yC,"Svelte REPL"),yC.forEach(u),bC.forEach(u),ky=$(kC),hy=b(kC,"P",{});var $C=E(hy);dy=y($C,"Since, "),fy=b($C,"CODE",{});var wC=E(fy);my=y(wC,"count"),wC.forEach(u),vy=y($C," never gets mutated or reassigned, Svelte optimises the compiled output by not defining "),gy=b($C,"CODE",{});var OC=E(gy);Ey=y(OC,"$$self.$$.update"),OC.forEach(u),by=y($C,"."),$C.forEach(u),yy=$(kC),$y=b(kC,"PRE",{class:!0}),E($y).forEach(u),kC.forEach(u),wy=$(a),Oy=b(a,"SECTION",{});var SC=E(Oy);Sy=b(SC,"H2",{});var TC=E(Sy);Ty=b(TC,"A",{href:!0,id:!0});var LC=E(Ty);Ly=y(LC,"Summary"),LC.forEach(u),TC.forEach(u),SC.forEach(u),Ny=$(a),Py=b(a,"SECTION",{});var NC=E(Py);xy=b(NC,"H4",{});var PC=E(xy);Cy=b(PC,"A",{href:!0,id:!0});var xC=E(Cy);Dy=y(xC,"1. Svelte keeps track of which variables are dirty and batched the DOM updates."),xC.forEach(u),PC.forEach(u),NC.forEach(u),Ay=$(a),Iy=b(a,"SECTION",{});var CC=E(Iy);jy=b(CC,"H4",{});var DC=E(jy);Ry=b(DC,"A",{href:!0,id:!0});var AC=E(Ry);My=y(AC,"2. Using bitmask, Svelte able to generate a more compact compiled code."),AC.forEach(u),DC.forEach(u),CC.forEach(u),Hy=$(a),_y=b(a,"SECTION",{});var IC=E(_y);Uy=b(IC,"H4",{});var jC=E(Uy);Gy=b(jC,"A",{href:!0,id:!0});var RC=E(Gy);qy=y(RC,"3. Reactive declarations and statements are executed in batch, just like DOM updates"),RC.forEach(u),jC.forEach(u),IC.forEach(u),By=$(a),zy=b(a,"SECTION",{});var MC=E(zy);Fy=b(MC,"H2",{});var HC=E(Fy);Jy=b(HC,"A",{href:!0,id:!0});var _C=E(Jy);Wy=y(_C,"Closing Note"),_C.forEach(u),HC.forEach(u),Yy=$(MC),Vy=b(MC,"P",{});var UC=E(Vy);Ky=y(UC,"If you wish to know more, "),Zy=b(UC,"A",{href:!0,rel:!0});var GC=E(Zy);Qy=y(GC,"follow me on Twitter"),GC.forEach(u),Xy=y(UC,"."),UC.forEach(u),a$=$(MC),n$=b(MC,"P",{});var qC=E(n$);s$=y(qC,"I'll post it on Twitter when the next part is ready, where I'll be covering "),t$=b(qC,"A",{href:!0,rel:!0});var BC=E(t$);e$=y(BC,"logic blocks"),BC.forEach(u),o$=y(qC,", "),p$=b(qC,"A",{href:!0,rel:!0});var zC=E(p$);c$=y(zC,"slots"),zC.forEach(u),r$=y(qC,", "),l$=b(qC,"A",{href:!0,rel:!0});var FC=E(l$);i$=y(FC,"context"),FC.forEach(u),u$=y(qC,", and many others."),qC.forEach(u),k$=$(MC),h$=b(MC,"P",{});var JC=E(h$);d$=b(JC,"STRONG",{});var WC=E(d$);f$=y(WC,"⬅ ⬅  Previously in "),m$=b(WC,"A",{href:!0});var YC=E(m$);v$=y(YC,"Part 1"),YC.forEach(u),g$=y(WC,"."),WC.forEach(u),JC.forEach(u),E$=$(MC),b$=b(MC,"P",{});var VC=E(b$);y$=b(VC,"STRONG",{});var KC=E(y$);$$=y(KC,"➡ ➡  Continue reading on "),w$=b(KC,"A",{href:!0});var ZC=E(w$);O$=y(ZC,"Part 3"),ZC.forEach(u),S$=y(KC,"."),KC.forEach(u),VC.forEach(u),MC.forEach(u),T$=$(a),L$=b(a,"SECTION",{});var QC=E(L$);N$=b(QC,"H2",{});var XC=E(N$);P$=b(XC,"A",{href:!0,id:!0});var aD=E(P$);x$=y(aD,"Further Resources"),aD.forEach(u),XC.forEach(u),C$=$(QC),D$=b(QC,"UL",{});var nD=E(D$);A$=b(nD,"LI",{});var sD=E(A$);I$=y(sD,"Rich Harris shares about "),j$=b(sD,"A",{href:!0,rel:!0});var tD=E(j$);R$=y(tD,"Bitmask Tracking at Svelte Society NYC"),tD.forEach(u),M$=y(sD,"."),sD.forEach(u),H$=$(nD),_$=b(nD,"LI",{});var eD=E(_$);U$=y(eD,"Svelte Tutorial - "),G$=b(eD,"A",{href:!0,rel:!0});var oD=E(G$);q$=y(oD,"Reactivity"),oD.forEach(u),B$=$(eD),z$=b(eD,"A",{href:!0,rel:!0});var pD=E(z$);F$=y(pD,"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/"),pD.forEach(u),eD.forEach(u),J$=$(nD),W$=b(nD,"LI",{});var cD=E(W$);Y$=b(cD,"A",{href:!0,rel:!0});var rD=E(Y$);V$=y(rD,"The Art of Bitmasking"),rD.forEach(u),K$=y(cD," by Shakib Ahmed"),cD.forEach(u),Z$=$(nD),Q$=b(nD,"LI",{});var lD=E(Q$);X$=b(lD,"A",{href:!0,rel:!0});var iD=E(X$);aw=y(iD,"Bitmasks: A very esoteric (and impractical) way of managing booleans"),iD.forEach(u),nw=y(lD," by Basti Ortiz"),lD.forEach(u),sw=$(nD),tw=b(nD,"LI",{});var uD=E(tw);ew=b(uD,"A",{href:!0,rel:!0});var kD=E(ew);ow=y(kD,"MDN: Bitwise Operators"),kD.forEach(u),uD.forEach(u),nD.forEach(u),QC.forEach(u),this.h()},h(){g(o,"href","#pre-v"),g(k,"href","#ctx"),g(w,"href","#dirty"),g(T,"href","#invalidate"),g(P,"href","#schedule-update"),g(A,"href","#tl-dr"),g(R,"href","#v"),g(U,"href","#bitmask"),g(B,"href","#bitmask-in-svelte"),g(W,"href","#destructuring"),g(K,"href","#tl-dr"),g(X,"href","#reactive-declaration"),g(ea,"href","#execution-of-all-reactive-declarations-and-statements-are-batched"),g(ca,"href","#the-value-of-reactive-variable-outside-of-reactive-declarations-and-statements-may-not-be-up-to-date"),g(ia,"href","#sorting-of-reactive-declarations-and-statements"),g(ha,"href","#reactive-variable-that-is-not-reactive"),g(ma,"href","#summary"),g(ya,"href","#svelte-keeps-track-of-which-variables-are-dirty-and-batched-the-dom-updates"),g(Oa,"href","#using-bitmask-svelte-able-to-generate-a-more-compact-compiled-code"),g(La,"href","#reactive-declarations-and-statements-are-executed-in-batch-just-like-dom-updates"),g(xa,"href","#closing-note"),g(Aa,"href","#further-resources"),g(t,"class","sitemap"),g(t,"id","sitemap"),g(t,"role","navigation"),g(t,"aria-label","Table of Contents"),g(_a,"href","/compile-svelte-in-your-head-part-1/"),g(za,"href","/compile-svelte-in-your-head-part-1/"),g(an,"class","language-js"),g(dn,"href","https://github.com/sveltejs/svelte/blob/v3.20.1/CHANGELOG.md#3201"),g(dn,"rel","nofollow"),g(bn,"href","#pre-v"),g(bn,"id","pre-v"),g(Nn,"href","https://github.com/sveltejs/svelte/blob/master/CHANGELOG.md#3160"),g(Nn,"rel","nofollow"),g(Cn,"href","https://github.com/sveltejs/svelte/pull/3945"),g(Cn,"rel","nofollow"),g(Un,"href","/compile-svelte-in-your-head-part-1"),g(Jn,"href","#ctx"),g(Jn,"id","ctx"),g(ts,"href","/compile-svelte-in-your-head-part-1#instance-variable"),g(zs,"class","language-svelte"),g(Ws,"href","https://svelte.dev/repl/5b12ff52c2874f4dbb6405d9133b34da?version=3.20.1"),g(Ws,"rel","nofollow"),g(Ks,"class","language-js"),g(lt,"href","#dirty"),g(lt,"id","dirty"),g(bt,"class","language-svelte"),g(wt,"href","https://svelte.dev/repl/da579d0113b44f01b2b94893dce21487?version=3.20.1"),g(wt,"rel","nofollow"),g(It,"href","https://github.com/sveltejs/svelte/blob/v3.15.0/src/runtime/internal/Component.ts#L124"),g(It,"rel","nofollow"),g(Wt,"class","language-js"),g(ee,"class","language-js"),g(be,"class","language-js"),g(Ae,"href","#invalidate"),g(Ae,"id","invalidate"),g(co,"class","language-js"),g(Ao,"class","language-js"),g(Ro,"href","https://github.com/sveltejs/svelte/blob/v3.15.0/src/runtime/internal/Component.ts#L130-L136"),g(Ro,"rel","nofollow"),g(Zo,"class","language-js"),g(vp,"class","language-js"),g(Ap,"href","#schedule-update"),g(Ap,"id","schedule-update"),g(Bp,"href","https://github.com/sveltejs/svelte/blob/v3.20.1/CHANGELOG.md#3201"),g(Bp,"rel","nofollow"),g(Jp,"href","https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/"),g(Jp,"rel","nofollow"),g(sc,"class","language-js"),g(ic,"class","language-js"),g(hc,"href","https://github.com/sveltejs/svelte/blob/v3.15.0/src/runtime/internal/scheduler.ts#L14"),g(hc,"rel","nofollow"),g(Ec,"class","language-svelte"),g($c,"href","https://svelte.dev/repl/761a0a6cc2834afb842942e1d23875b1?version=3.20.1"),g($c,"rel","nofollow"),g(ti,"href","#tl-dr"),g(ti,"id","tl-dr"),g(_i,"href","#v"),g(_i,"id","v"),g(zi,"href","https://github.com/sveltejs/svelte/pull/3945"),g(zi,"rel","nofollow"),g(au,"class","language-js"),g(ou,"class","language-js"),g(lu,"href","https://en.wikipedia.org/wiki/Mask_(computing)"),g(lu,"rel","nofollow"),g(hu,"class","language-js"),g(bu,"href","#bitmask"),g(bu,"id","bitmask"),g(Nu,"href","https://blog.bitsrc.io/the-art-of-bitmasking-ec58ab1b4c03"),g(Nu,"rel","nofollow"),g(Cu,"href","https://dev.to/somedood/bitmasks-a-very-esoteric-and-impractical-way-of-managing-booleans-1hlf"),g(Cu,"rel","nofollow"),g($k,"href","https://en.wikipedia.org/wiki/Bit_numbering#Least_significant_bit"),g($k,"rel","nofollow"),g(Sk,"href","https://en.wikipedia.org/wiki/Bit_numbering#Most_significant_bit"),g(Sk,"rel","nofollow"),g(Hk,"href","https://2ality.com/2012/04/number-encoding.html"),g(Hk,"rel","nofollow"),g(Gk,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators"),g(Gk,"rel","nofollow"),g(Wk,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators"),g(Wk,"rel","nofollow"),g(Zk,"class","language-js"),g(nh,"href","https://en.wikipedia.org/wiki/Mask_(computing)"),g(nh,"rel","nofollow"),g(hh,"href","#bitmask-in-svelte"),g(hh,"id","bitmask-in-svelte"),g(Eh,"class","language-js"),g(Oh,"class","language-js"),g(Hh,"class","language-js"),g(Qh,"class","language-js"),g(rd,"class","language-js"),g(hd,"class","language-js"),g(Bd,"href","#destructuring"),g(Bd,"id","destructuring"),g(pf,"class","language-js"),g(uf,"href","#tl-dr"),g(uf,"id","tl-dr"),g(Pf,"href","#reactive-declaration"),g(Pf,"id","reactive-declaration"),g(If,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label"),g(If,"rel","nofollow"),g(Uf,"class","language-svelte"),g(Bf,"href","https://svelte.dev/repl/e37329dd126448b2aa0679c08993f9a8?version=3.20.1"),g(Bf,"rel","nofollow"),g(Yf,"href","/compile-svelte-in-your-head-part-1/#instanceself-props-invalidate"),g(am,"class","language-js"),g(om,"class","language-svelte"),g(rm,"href","https://svelte.dev/repl/fc6995856489402d90291c4c30952939?version=3.20.1"),g(rm,"rel","nofollow"),g(um,"class","language-js"),g(Lm,"href","https://en.wikipedia.org/wiki/NOP_(code)"),g(Lm,"rel","nofollow"),g(xm,"href","https://github.com/sveltejs/svelte/blob/v3.20.1/src/runtime/internal/Component.ts#L111"),g(xm,"rel","nofollow"),g(fv,"class","language-svelte"),g(gv,"href","https://svelte.dev/repl/fc6995856489402d90291c4c30952939?version=3.20.1"),g(gv,"rel","nofollow"),g(Bv,"class","language-js"),g(rg,"href","#execution-of-all-reactive-declarations-and-statements-are-batched"),g(rg,"id","execution-of-all-reactive-declarations-and-statements-are-batched"),g(dg,"class","language-svelte"),g(vg,"href","https://svelte.dev/repl/941195f1cd5248e9bd14613f9513ad1d?version=3.20.1"),g(vg,"rel","nofollow"),g(Pg,"href","#schedule_update"),g(nb,"class","language-js"),g(ob,"href","#the-value-of-reactive-variable-outside-of-reactive-declarations-and-statements-may-not-be-up-to-date"),g(ob,"id","the-value-of-reactive-variable-outside-of-reactive-declarations-and-statements-may-not-be-up-to-date"),g(ub,"class","language-svelte"),g(db,"href","https://svelte.dev/repl/437548d5c7044cb59bfd0c8a0f4c725d?version=3.20.1"),g(db,"rel","nofollow"),g(wb,"class","language-svelte"),g(Lb,"href","#sorting-of-reactive-declarations-and-statements"),g(Lb,"id","sorting-of-reactive-declarations-and-statements"),g(_b,"class","language-js"),g(Bb,"href","#reactive-variable-that-is-not-reactive"),g(Bb,"id","reactive-variable-that-is-not-reactive"),g(cy,"class","language-svelte"),g(iy,"href","https://svelte.dev/repl/af86472e1f494cfea2efa494f63fff08?version=3.20.1"),g(iy,"rel","nofollow"),g($y,"class","language-js"),g(Ty,"href","#summary"),g(Ty,"id","summary"),g(Cy,"href","#svelte-keeps-track-of-which-variables-are-dirty-and-batched-the-dom-updates"),g(Cy,"id","svelte-keeps-track-of-which-variables-are-dirty-and-batched-the-dom-updates"),g(Ry,"href","#using-bitmask-svelte-able-to-generate-a-more-compact-compiled-code"),g(Ry,"id","using-bitmask-svelte-able-to-generate-a-more-compact-compiled-code"),g(Gy,"href","#reactive-declarations-and-statements-are-executed-in-batch-just-like-dom-updates"),g(Gy,"id","reactive-declarations-and-statements-are-executed-in-batch-just-like-dom-updates"),g(Jy,"href","#closing-note"),g(Jy,"id","closing-note"),g(Zy,"href","https://twitter.com/lihautan"),g(Zy,"rel","nofollow"),g(t$,"href","https://svelte.dev/tutorial/if-blocks"),g(t$,"rel","nofollow"),g(p$,"href","https://svelte.dev/tutorial/slots"),g(p$,"rel","nofollow"),g(l$,"href","https://svelte.dev/tutorial/context-api"),g(l$,"rel","nofollow"),g(m$,"href","/compile-svelte-in-your-head-part-1/"),g(w$,"href","/compile-svelte-in-your-head-part-3/"),g(P$,"href","#further-resources"),g(P$,"id","further-resources"),g(j$,"href","https://www.youtube.com/watch?v=zq6PpM5t3z0&t=2530s"),g(j$,"rel","nofollow"),g(G$,"href","https://svelte.dev/tutorial/reactive-assignments"),g(G$,"rel","nofollow"),g(z$,"href","https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/"),g(z$,"rel","nofollow"),g(Y$,"href","https://blog.bitsrc.io/the-art-of-bitmasking-ec58ab1b4c03"),g(Y$,"rel","nofollow"),g(X$,"href","https://dev.to/somedood/bitmasks-a-very-esoteric-and-impractical-way-of-managing-booleans-1hlf"),g(X$,"rel","nofollow"),g(ew,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators"),g(ew,"rel","nofollow")},m(a,n){i(a,s,n),l(s,t),l(t,e),l(e,o),l(o,p),l(t,c),l(c,r),l(r,k),l(k,d),l(c,v),l(v,w),l(w,O),l(c,S),l(S,T),l(T,L),l(c,N),l(N,P),l(P,x),l(c,C),l(C,D),l(D,A),l(A,I),l(t,j),l(j,R),l(R,M),l(t,H),l(H,_),l(_,U),l(U,G),l(H,q),l(q,B),l(B,z),l(H,F),l(F,J),l(J,W),l(W,Y),l(F,V),l(V,K),l(K,Z),l(t,Q),l(Q,X),l(X,aa),l(t,na),l(na,sa),l(sa,ta),l(ta,ea),l(ea,oa),l(sa,pa),l(pa,ca),l(ca,ra),l(na,la),l(la,ia),l(ia,ua),l(na,ka),l(ka,ha),l(ha,da),l(t,fa),l(fa,ma),l(ma,va),l(t,ga),l(ga,Ea),l(Ea,ba),l(ba,ya),l(ya,$a),l(Ea,wa),l(wa,Oa),l(Oa,Sa),l(Ea,Ta),l(Ta,La),l(La,Na),l(t,Pa),l(Pa,xa),l(xa,Ca),l(t,Da),l(Da,Aa),l(Aa,Ia),i(a,ja,n),i(a,Ra,n),l(Ra,Ma),l(Ma,Ha),l(Ma,_a),l(_a,Ua),l(Ma,Ga),i(a,qa,n),i(a,Ba,n),l(Ba,za),l(za,Fa),l(Ba,Ja),l(Ba,Wa),l(Wa,Ya),l(Ba,Va),l(Ba,Ka),l(Ka,Za),l(Ba,Qa),i(a,Xa,n),i(a,an,n),an.innerHTML='<code class="language-js"><span class="token comment">// conceptually...</span>\n<span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token function">instance</span><span class="token punctuation">(</span><span class="token comment">/*...*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> fragment <span class="token operator">=</span> <span class="token function">create_fragment</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// to track which variable has changed</span>\n<span class="token keyword">const</span> dirty <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">$$invalidate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">variable<span class="token punctuation">,</span> newValue</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// update ctx</span>\n  ctx<span class="token punctuation">[</span>variable<span class="token punctuation">]</span> <span class="token operator">=</span> newValue<span class="token punctuation">;</span>\n  <span class="token comment">// mark variable as dirty</span>\n  dirty<span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span>variable<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// schedules update for the component</span>\n  <span class="token function">scheduleUpdate</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// gets called when update is scheduled</span>\n<span class="token keyword">function</span> <span class="token function">flushUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// update the fragment</span>\n  fragment<span class="token punctuation">.</span><span class="token method function property-access">p</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> dirty<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// clear the dirty</span>\n  dirty<span class="token punctuation">.</span><span class="token method function property-access">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',i(a,nn,n),i(a,sn,n),l(sn,tn),l(sn,en),l(en,on),l(sn,pn),l(sn,cn),l(cn,rn),l(sn,ln),i(a,un,n),i(a,kn,n),l(kn,hn),l(kn,dn),l(dn,fn),l(kn,mn),i(a,vn,n),i(a,gn,n),l(gn,En),l(En,bn),l(bn,yn),l(gn,$n),l(gn,wn),l(wn,On),l(wn,Sn),l(Sn,Tn),l(wn,Ln),l(wn,Nn),l(Nn,Pn),l(wn,xn),l(wn,Cn),l(Cn,Dn),l(wn,An),l(wn,In),l(In,jn),l(wn,Rn),l(gn,Mn),l(gn,Hn),l(Hn,_n),l(Hn,Un),l(Un,Gn),l(Hn,qn),i(a,Bn,n),i(a,zn,n),l(zn,Fn),l(Fn,Jn),l(Jn,Wn),l(zn,Yn),l(zn,Vn),l(Vn,Kn),l(Vn,Zn),l(Zn,Qn),l(Vn,Xn),l(zn,as),l(zn,ns),l(ns,ss),l(ns,ts),l(ts,es),l(ns,os),l(zn,ps),l(zn,cs),l(cs,rs),l(rs,ls),l(rs,is),l(is,us),l(rs,ks),l(cs,hs),l(cs,ds),l(ds,fs),l(cs,ms),l(cs,vs),l(vs,gs),l(zn,Es),l(zn,bs),l(bs,ys),l(zn,$s),l(zn,ws),l(ws,Os),l(zn,Ss),l(zn,Ts),l(Ts,Ls),l(Ts,Ns),l(Ns,Ps),l(Ts,xs),l(Ts,Cs),l(Cs,Ds),l(Ts,As),l(zn,Is),l(zn,js),l(js,Rs),l(js,Ms),l(Ms,Hs),l(js,_s),l(js,Us),l(Us,Gs),l(js,qs),l(zn,Bs),l(zn,zs),zs.innerHTML='<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">\'world\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    name <span class="token operator">=</span> <span class="token string">\'Svelte\'</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>update<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code>',l(zn,Fs),l(zn,Js),l(Js,Ws),l(Ws,Ys),l(zn,Vs),l(zn,Ks),Ks.innerHTML='<code class="language-js"><span class="token comment">// ...</span>\n<span class="token keyword">function</span> <span class="token function">instance</span><span class="token punctuation">(</span><span class="token parameter">$$self<span class="token punctuation">,</span> $$props<span class="token punctuation">,</span> $$invalidate</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">\'world\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'name\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">\'Svelte\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> update <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span>\n\n<span class="token comment">// ...some where in &#96;create_fragment&#96;</span>\nctx<span class="token punctuation">.</span><span class="token method function property-access">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// logs &#96;world&#96; scoped in the &#96;instance&#96; closure</span></code>',l(zn,Zs),l(zn,Qs),l(Qs,Xs),l(Qs,at),l(at,nt),l(Qs,st),l(Qs,tt),l(tt,et),l(Qs,ot),i(a,pt,n),i(a,ct,n),l(ct,rt),l(rt,lt),l(lt,it),l(ct,ut),l(ct,kt),l(kt,ht),l(ht,dt),l(kt,ft),l(ct,mt),l(ct,vt),l(vt,gt),l(ct,Et),l(ct,bt),bt.innerHTML='<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">let</span> agility <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> power <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">function</span> <span class="token function">incrementAgility</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    agility <span class="token operator">++</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n  <span class="token keyword">function</span> <span class="token function">incrementPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    power <span class="token operator">++</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n  <span class="token keyword">function</span> <span class="token function">levelUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    agility <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n    power <span class="token operator">+=</span> <span class="token number">7</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\nAgility: <span class="token language-javascript"><span class="token punctuation">&#123;</span>agility<span class="token punctuation">&#125;</span></span>\nPower: <span class="token language-javascript"><span class="token punctuation">&#123;</span>power<span class="token punctuation">&#125;</span></span>\nStats: <span class="token language-javascript"><span class="token punctuation">&#123;</span>agility <span class="token operator">*</span> power<span class="token punctuation">&#125;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>incrementAgility<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>+ Agility<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>incrementPower<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>+ Power<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>levelUp<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Level Up<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code>',l(ct,yt),l(ct,$t),l($t,wt),l(wt,Ot),l(ct,St),l(ct,Tt),l(Tt,Lt),l(Tt,Nt),l(Nt,Pt),l(Tt,xt),l(Tt,Ct),l(Ct,Dt),l(Tt,At),l(Tt,It),l(It,jt),l(Tt,Rt),l(ct,Mt),l(ct,Ht),l(Ht,_t),l(Ht,Ut),l(Ut,Gt),l(Ht,qt),l(Ht,Bt),l(Bt,zt),l(Ht,Ft),l(ct,Jt),l(ct,Wt),Wt.innerHTML='<code class="language-js"><span class="token punctuation">&#123;</span> agility<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code>',l(ct,Yt),l(ct,Vt),l(Vt,Kt),l(Vt,Zt),l(Zt,Qt),l(Vt,Xt),l(Vt,ae),l(ae,ne),l(Vt,se),l(ct,te),l(ct,ee),ee.innerHTML='<code class="language-js"><span class="token punctuation">&#123;</span> agility<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> power<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span></code>',l(ct,oe),l(ct,pe),l(pe,ce),l(ce,re),l(pe,le),l(ct,ie),l(ct,ue),l(ue,ke),l(ue,he),l(he,de),l(ue,fe),l(ue,me),l(me,ve),l(ue,ge),l(ct,Ee),l(ct,be),be.innerHTML='<code class="language-js"><span class="token comment">// NOTE: $$.dirty is passed into the &#96;p&#96; function as &#96;changed&#96;</span>\n<span class="token function">p</span><span class="token punctuation">(</span><span class="token parameter">changed<span class="token punctuation">,</span> ctx</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// checked if agility has changed before update the agility text</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>changed<span class="token punctuation">.</span><span class="token property-access">agility</span><span class="token punctuation">)</span> <span class="token function">set_data</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> ctx<span class="token punctuation">.</span><span class="token property-access">agility</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>changed<span class="token punctuation">.</span><span class="token property-access">power</span><span class="token punctuation">)</span> <span class="token function">set_data</span><span class="token punctuation">(</span>t3<span class="token punctuation">,</span> ctx<span class="token punctuation">.</span><span class="token property-access">power</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// if either agility or power has changed, update the stats text</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>changed<span class="token punctuation">.</span><span class="token property-access">agility</span> <span class="token operator">||</span> changed<span class="token punctuation">.</span><span class="token property-access">power</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> t5_value <span class="token operator">!==</span> <span class="token punctuation">(</span>t5_value <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token property-access">agility</span> <span class="token operator">*</span> ctx<span class="token punctuation">.</span><span class="token property-access">power</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">set_data</span><span class="token punctuation">(</span>t5<span class="token punctuation">,</span> t5_value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',l(ct,ye),l(ct,$e),l($e,we),l($e,Oe),l(Oe,Se),l($e,Te),l($e,Le),l(Le,Ne),l($e,Pe),i(a,xe,n),i(a,Ce,n),l(Ce,De),l(De,Ae),l(Ae,Ie),l(Ce,je),l(Ce,Re),l(Re,Me),l(Me,He),l(Re,_e),l(Ce,Ue),l(Ce,Ge),l(Ge,qe),l(Ce,Be),l(Ce,ze),l(ze,Fe),l(Fe,Je),l(Fe,We),l(We,Ye),l(ze,Ve),l(ze,Ke),l(Ke,Ze),l(Ke,Qe),l(Qe,Xe),l(Ce,ao),l(Ce,no),l(no,so),l(no,to),l(to,eo),l(no,oo),l(Ce,po),l(Ce,co),co.innerHTML='<code class="language-js">name <span class="token operator">=</span> <span class="token string">\'Svelte\'</span><span class="token punctuation">;</span>\ncount<span class="token operator">++</span><span class="token punctuation">;</span>\nfoo<span class="token punctuation">.</span><span class="token property-access">a</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\nbar <span class="token operator">=</span> baz <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n<span class="token comment">// compiled into</span>\n<span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'name\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">\'Svelte\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'count\'</span><span class="token punctuation">,</span> count<span class="token operator">++</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'foo\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>foo<span class="token punctuation">.</span><span class="token property-access">a</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> foo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'bar\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>bar <span class="token operator">=</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'baz\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>baz <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>',l(Ce,ro),l(Ce,lo),l(lo,io),l(lo,uo),l(uo,ko),l(lo,ho),l(Ce,fo),l(Ce,mo),l(mo,vo),l(vo,go),l(vo,Eo),l(Eo,bo),l(mo,yo),l(mo,$o),l($o,wo),l($o,Oo),l(Oo,So),l(mo,To),l(mo,Lo),l(Lo,No),l(mo,Po),l(mo,xo),l(xo,Co),l(Ce,Do),l(Ce,Ao),Ao.innerHTML='<code class="language-js"><span class="token comment">// src/runtime/internal/Component.ts</span>\n<span class="token keyword">const</span> <span class="token function-variable function">$$invalidate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> ret<span class="token punctuation">,</span> value <span class="token operator">=</span> ret</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>$$<span class="token punctuation">.</span><span class="token property-access">ctx</span> <span class="token operator">&amp;&amp;</span> <span class="token function">not_equal</span><span class="token punctuation">(</span>$$<span class="token punctuation">.</span><span class="token property-access">ctx</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token comment">// 1. update the variable in $$.ctx</span>\n    $$<span class="token punctuation">.</span><span class="token property-access">ctx</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>\n    <span class="token comment">// ...</span>\n    <span class="token comment">// 2a. mark the variable in $$.dirty</span>\n    <span class="token function">make_dirty</span><span class="token punctuation">(</span>component<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n  <span class="token comment">// 4. return the value of the assignment or update expression</span>\n  <span class="token keyword">return</span> ret<span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// src/runtime/internal/Component.ts</span>\n<span class="token keyword">function</span> <span class="token function">make_dirty</span><span class="token punctuation">(</span><span class="token parameter">component<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>component<span class="token punctuation">.</span><span class="token property-access">$$</span><span class="token punctuation">.</span><span class="token property-access">dirty</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    dirty_components<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 3. schedule an update</span>\n    <span class="token function">schedule_update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// initialise $$.dirty</span>\n    component<span class="token punctuation">.</span><span class="token property-access">$$</span><span class="token punctuation">.</span><span class="token property-access">dirty</span> <span class="token operator">=</span> <span class="token function">blank_object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n  <span class="token comment">// 2b. mark the variable in $$.dirty</span>\n  component<span class="token punctuation">.</span><span class="token property-access">$$</span><span class="token punctuation">.</span><span class="token property-access">dirty</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',l(Ce,Io),l(Ce,jo),l(jo,Ro),l(Ro,Mo),l(Ce,Ho),l(Ce,_o),l(_o,Uo),l(_o,Go),l(Go,qo),l(_o,Bo),l(Ce,zo),l(Ce,Fo),l(Fo,Jo),l(Fo,Wo),l(Wo,Yo),l(Fo,Vo),l(Ce,Ko),l(Ce,Zo),Zo.innerHTML='<code class="language-js">obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  b<span class="token punctuation">:</span> <span class="token punctuation">(</span>foo <span class="token operator">=</span> bar<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n\nobj<span class="token punctuation">.</span><span class="token property-access">c</span> <span class="token operator">=</span> <span class="token string">\'hello\'</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">(</span><span class="token punctuation">&#123;</span> a<span class="token punctuation">:</span> c <span class="token operator">=</span> d<span class="token operator">++</span><span class="token punctuation">,</span> b <span class="token punctuation">&#125;</span> <span class="token operator">=</span> baz <span class="token operator">=</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// assuming all variables are referenced in the template</span>\n<span class="token comment">// the above compiles into</span>\n\n<span class="token function">$$invalidate</span><span class="token punctuation">(</span>\n  <span class="token string">\'obj\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span>obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n    b<span class="token punctuation">:</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'foo\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>foo <span class="token operator">=</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'bar\'</span><span class="token punctuation">,</span> bar<span class="token operator">++</span><span class="token punctuation">,</span> bar<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'obj\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token property-access">c</span> <span class="token operator">=</span> <span class="token string">\'hello\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">$$invalidate</span><span class="token punctuation">(</span>\n  <span class="token string">\'c\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> a<span class="token punctuation">:</span> c <span class="token operator">=</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'d\'</span><span class="token punctuation">,</span> d<span class="token operator">++</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">,</span> b <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'baz\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>baz <span class="token operator">=</span> obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  c<span class="token punctuation">,</span>\n  <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'b\'</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code>',l(Ce,Qo),l(Ce,Xo),l(Xo,ap),l(Ce,np),l(Ce,sp),l(sp,tp),l(sp,ep),l(ep,op),l(sp,pp),l(sp,cp),l(cp,rp),l(sp,lp),l(Ce,ip),l(Ce,up),l(up,kp),l(up,hp),l(hp,dp),l(up,fp),l(Ce,mp),l(Ce,vp),vp.innerHTML='<code class="language-js">obj<span class="token punctuation">.</span><span class="token property-access">c</span> <span class="token operator">=</span> <span class="token string">\'hello\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// compiles into</span>\n<span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'obj\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token property-access">c</span> <span class="token operator">=</span> <span class="token string">\'hello\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// - it invalidates &#96;obj&#96;</span>\n<span class="token comment">// - it returns the evaluated value of the expression &#96;obj.c = \'hello\'&#96;, which is \'hello\'</span></code>',l(Ce,gp),l(Ce,Ep),l(Ep,bp),l(Ep,yp),l(yp,$p),l(Ep,wp),l(Ep,Op),l(Op,Sp),l(Ep,Tp),l(Ep,Lp),l(Lp,Np),l(Ep,Pp),i(a,xp,n),i(a,Cp,n),l(Cp,Dp),l(Dp,Ap),l(Ap,Ip),l(Cp,jp),l(Cp,Rp),l(Rp,Mp),l(Mp,Hp),l(Rp,_p),l(Cp,Up),l(Cp,Gp),l(Gp,qp),l(Gp,Bp),l(Bp,zp),l(Gp,Fp),l(Gp,Jp),l(Jp,Wp),l(Gp,Yp),l(Gp,Vp),l(Vp,Kp),l(Gp,Zp),l(Cp,Qp),l(Cp,Xp),l(Xp,ac),l(Cp,nc),l(Cp,sc),sc.innerHTML='<code class="language-js"><span class="token comment">// src/runtime/internal/scheduler.ts</span>\n<span class="token keyword module">export</span> <span class="token keyword">function</span> <span class="token function">schedule_update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>update_scheduled<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    update_scheduled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token comment">// NOTE: &#96;flush&#96; will do the DOM update</span>\n    <span class="token comment">// we push it into the microtask queue</span>\n    <span class="token comment">// highlight-next-line</span>\n    resolved_promise<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span>flush<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span></code>',l(Cp,tc),l(Cp,ec),l(ec,oc),l(ec,pc),l(pc,cc),l(ec,rc),l(Cp,lc),l(Cp,ic),ic.innerHTML='<code class="language-js"><span class="token comment">// src/runtime/internal/scheduler.ts</span>\n<span class="token keyword">function</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// ...</span>\n  <span class="token comment">// for each componnet in &#96;dirty_components&#96;</span>\n  <span class="token comment">// highlight-start</span>\n  <span class="token function">update</span><span class="token punctuation">(</span>component<span class="token punctuation">.</span><span class="token property-access">$$</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// highlight-end</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">&#125;</span>\n\n<span class="token comment">// src/runtime/internal/scheduler.ts</span>\n<span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">$$</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>$$<span class="token punctuation">.</span><span class="token property-access">fragment</span> <span class="token operator">!==</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token comment">// NOTE: this will be important later</span>\n    $$<span class="token punctuation">.</span><span class="token method function property-access">update</span><span class="token punctuation">(</span>$$<span class="token punctuation">.</span><span class="token property-access">dirty</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">run_all</span><span class="token punctuation">(</span>$$<span class="token punctuation">.</span><span class="token property-access">before_update</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// calls the &#96;p&#96; function</span>\n    <span class="token comment">// highlight-next-line</span>\n    $$<span class="token punctuation">.</span><span class="token property-access">fragment</span> <span class="token operator">&amp;&amp;</span> $$<span class="token punctuation">.</span><span class="token property-access">fragment</span><span class="token punctuation">.</span><span class="token method function property-access">p</span><span class="token punctuation">(</span>$$<span class="token punctuation">.</span><span class="token property-access">dirty</span><span class="token punctuation">,</span> $$<span class="token punctuation">.</span><span class="token property-access">ctx</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// resets &#96;$$.dirty&#96;</span>\n    $$<span class="token punctuation">.</span><span class="token property-access">dirty</span> <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n\n    $$<span class="token punctuation">.</span><span class="token property-access">after_update</span><span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span>add_render_callback<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span></code>',l(Cp,uc),l(Cp,kc),l(kc,hc),l(hc,dc),l(Cp,fc),l(Cp,mc),l(mc,vc),l(Cp,gc),l(Cp,Ec),Ec.innerHTML='<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">let</span> givenName<span class="token punctuation">,</span> familyName<span class="token punctuation">;</span>\n  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    givenName <span class="token operator">=</span> <span class="token string">\'Li Hau\'</span><span class="token punctuation">;</span>\n    familyName <span class="token operator">=</span> <span class="token string">\'Tan\'</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\nName: <span class="token language-javascript"><span class="token punctuation">&#123;</span>familyName<span class="token punctuation">&#125;</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>givenName<span class="token punctuation">&#125;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>update<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Update<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code>',l(Cp,bc),l(Cp,yc),l(yc,$c),l($c,wc),l(Cp,Oc),l(Cp,Sc),l(Sc,Tc),l(Sc,Lc),l(Lc,Nc),l(Sc,Pc),l(Sc,xc),l(xc,Cc),l(Sc,Dc),l(Cp,Ac),l(Cp,Ic),l(Ic,jc),l(jc,Rc),l(jc,Mc),l(Mc,Hc),l(jc,_c),l(jc,Uc),l(Uc,Gc),l(jc,qc),l(Ic,Bc),l(Ic,zc),l(zc,Fc),l(Fc,Jc),l(Ic,Wc),l(Ic,Yc),l(Yc,Vc),l(Yc,Kc),l(Kc,Zc),l(Yc,Qc),l(Yc,Xc),l(Xc,ar),l(Ic,nr),l(Ic,sr),l(sr,tr),l(sr,er),l(er,or),l(Ic,pr),l(Ic,cr),l(cr,rr),l(cr,lr),l(lr,ir),l(cr,ur),l(Ic,kr),l(Ic,hr),l(hr,dr),l(dr,fr),l(Ic,mr),l(Ic,vr),l(vr,gr),l(vr,Er),l(Er,br),l(vr,yr),l(vr,$r),l($r,wr),l(Ic,Or),l(Ic,Sr),l(Sr,Tr),l(Sr,Lr),l(Lr,Nr),l(Ic,Pr),l(Ic,xr),l(xr,Cr),l(xr,Dr),l(Dr,Ar),l(xr,Ir),l(Ic,jr),l(Ic,Rr),l(Rr,Mr),l(Mr,Hr),l(Ic,_r),l(Ic,Ur),l(Ur,Gr),l(Gr,qr),l(Ic,Br),l(Ic,zr),l(zr,Fr),l(Fr,Jr),l(zr,Wr),l(zr,Yr),l(Yr,Vr),l(zr,Kr),l(Ic,Zr),l(Ic,Qr),l(Qr,Xr),l(Qr,al),l(al,nl),l(Qr,sl),l(Qr,tl),l(tl,el),l(el,ol),l(ol,pl),l(el,cl),l(el,rl),l(rl,ll),l(tl,il),l(tl,ul),l(ul,kl),l(kl,hl),l(ul,dl),l(ul,fl),l(fl,ml),l(Ic,vl),l(Ic,gl),l(gl,El),l(gl,bl),l(bl,yl),l(gl,$l),l(gl,wl),l(wl,Ol),l(Ol,Sl),l(Ol,Tl),l(Tl,Ll),l(Ol,Nl),l(Ol,Pl),l(Pl,xl),l(wl,Cl),l(wl,Dl),l(Dl,Al),l(Dl,Il),l(Il,jl),l(Dl,Rl),l(Dl,Ml),l(Ml,Hl),l(Ic,_l),l(Ic,Ul),l(Ul,Gl),l(Ul,ql),l(ql,Bl),l(Ul,zl),l(Ul,Fl),l(Fl,Jl),l(Ic,Wl),l(Ic,Yl),l(Yl,Vl),l(Ic,Kl),l(Ic,Zl),l(Zl,Ql),l(Ql,Xl),i(a,ai,n),i(a,ni,n),l(ni,si),l(si,ti),l(ti,ei),l(ni,oi),l(ni,pi),l(pi,ci),l(ci,ri),l(ci,li),l(li,ii),l(ci,ui),l(ci,ki),l(ki,hi),l(ci,di),l(ci,fi),l(fi,mi),l(ci,vi),l(pi,gi),l(pi,Ei),l(Ei,bi),l(pi,yi),l(pi,$i),l($i,wi),l($i,Oi),l(Oi,Si),l($i,Ti),l(pi,Li),l(pi,Ni),l(Ni,Pi),l(Ni,xi),l(xi,Ci),l(Ni,Di),l(Ni,Ai),l(Ai,Ii),l(Ni,ji),i(a,Ri,n),i(a,Mi,n),l(Mi,Hi),l(Hi,_i),l(_i,Ui),l(Mi,Gi),l(Mi,qi),l(qi,Bi),l(qi,zi),l(zi,Fi),l(qi,Ji),l(qi,Wi),l(Wi,Yi),l(qi,Vi),l(Mi,Ki),l(Mi,Zi),l(Zi,Qi),l(Mi,Xi),l(Mi,au),au.innerHTML='<code class="language-js">$$<span class="token punctuation">.</span><span class="token property-access">diry</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> givenName<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> familyName<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',l(Mi,nu),l(Mi,su),l(su,tu),l(Mi,eu),l(Mi,ou),ou.innerHTML='<code class="language-js">givenName <span class="token operator">-</span><span class="token operator">></span> <span class="token number">0</span>\nfamilyName <span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span></code>',l(Mi,pu),l(Mi,cu),l(cu,ru),l(cu,lu),l(lu,iu),l(cu,uu),l(Mi,ku),l(Mi,hu),hu.innerHTML='<code class="language-js">$$<span class="token punctuation">.</span><span class="token property-access">dirty</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0b0000_0011</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// the 0th and 1st bit marked true</span></code>',l(Mi,du),l(Mi,fu),l(fu,mu),i(a,vu,n),i(a,gu,n),l(gu,Eu),l(Eu,bu),l(bu,yu),l(gu,$u),l(gu,wu),l(wu,Ou),l(gu,Su),l(gu,Tu),l(Tu,Lu),l(Tu,Nu),l(Nu,Pu),l(Tu,xu),l(Tu,Cu),l(Cu,Du),l(Tu,Au),l(gu,Iu),l(gu,ju),l(ju,Ru),l(ju,Mu),l(Mu,Hu),l(ju,_u),l(ju,Uu),l(Uu,Gu),l(ju,qu),l(ju,Bu),l(Bu,zu),l(ju,Fu),l(ju,Ju),l(Ju,Wu),l(ju,Yu),l(ju,Vu),l(Vu,Ku),l(ju,Zu),l(ju,Qu),l(Qu,Xu),l(ju,ak),l(gu,nk),l(gu,sk),l(sk,tk),l(sk,ek),l(ek,ok),l(sk,pk),l(sk,ck),l(ck,rk),l(sk,lk),l(gu,ik),l(gu,uk),l(uk,kk),l(uk,hk),l(hk,dk),l(uk,fk),l(uk,mk),l(mk,vk),l(uk,gk),l(uk,Ek),l(Ek,bk),l(uk,yk),l(uk,$k),l($k,wk),l(uk,Ok),l(uk,Sk),l(Sk,Tk),l(uk,Lk),l(gu,Nk),l(gu,Pk),l(Pk,xk),l(xk,Ck),l(gu,Dk),l(gu,Ak),l(Ak,Ik),l(gu,jk),l(gu,Rk),l(Rk,Mk),l(Rk,Hk),l(Hk,_k),l(Rk,Uk),l(Rk,Gk),l(Gk,qk),l(Rk,Bk),l(gu,zk),l(gu,Fk),l(Fk,Jk),l(Fk,Wk),l(Wk,Yk),l(Fk,Vk),l(gu,Kk),l(gu,Zk),Zk.innerHTML='<code class="language-js"><span class="token comment">// set 1st boolean to true</span>\n<span class="token number">0b0101</span> <span class="token operator">|</span> <span class="token number">0b0010</span> <span class="token operator">=</span> <span class="token number">0b0111</span><span class="token punctuation">;</span>\n\n<span class="token comment">// set 2nd boolean to false</span>\n<span class="token number">0b0101</span> <span class="token operator">&amp;</span> <span class="token number">0b1011</span> <span class="token operator">=</span> <span class="token number">0b0001</span><span class="token punctuation">;</span>\n\n<span class="token comment">// is 2nd boolean true?</span>\n<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0b0101</span> <span class="token operator">&amp;</span> <span class="token number">0b0100</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n<span class="token comment">// NOTE: You can test multiple boolean values at once</span>\n<span class="token comment">// is 2nd and 3rd boolean true?</span>\n<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0b0101</span> <span class="token operator">&amp;</span> <span class="token number">0b1100</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">;</span></code>',l(gu,Qk),l(gu,Xk),l(Xk,ah),l(Xk,nh),l(nh,sh),l(Xk,th),l(gu,eh),l(gu,oh),l(oh,ph),l(oh,ch),l(ch,rh),l(oh,lh),i(a,ih,n),i(a,uh,n),l(uh,kh),l(kh,hh),l(hh,dh),l(uh,fh),l(uh,mh),l(mh,vh),l(uh,gh),l(uh,Eh),Eh.innerHTML='<code class="language-js">givenName <span class="token operator">-</span><span class="token operator">></span> <span class="token number">0</span>\nfirstName <span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span></code>',l(uh,bh),l(uh,yh),l(yh,$h),l(uh,wh),l(uh,Oh),Oh.innerHTML='<code class="language-js"><span class="token comment">// Previous</span>\n<span class="token keyword">function</span> <span class="token function">instance</span><span class="token punctuation">(</span><span class="token parameter">$$self<span class="token punctuation">,</span> $$props<span class="token punctuation">,</span> $$invalidate</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// ...</span>\n  <span class="token comment">// highlight-next-line</span>\n  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> givenName<span class="token punctuation">,</span> familyName <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span>\n<span class="token comment">// Now</span>\n<span class="token keyword">function</span> <span class="token function">instance</span><span class="token punctuation">(</span><span class="token parameter">$$self<span class="token punctuation">,</span> $$props<span class="token punctuation">,</span> $$invalidate</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// ...</span>\n  <span class="token comment">// highlight-next-line</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span>givenName<span class="token punctuation">,</span> familyName<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',l(uh,Sh),l(uh,Th),l(Th,Lh),l(Th,Nh),l(Nh,Ph),l(Th,xh),l(Th,Ch),l(Ch,Dh),l(Th,Ah),l(Th,Ih),l(Ih,jh),l(Th,Rh),l(uh,Mh),l(uh,Hh);Hh.innerHTML='<code class="language-js"><span class="token comment">// Previous</span>\n$$<span class="token punctuation">.</span><span class="token property-access">ctx</span><span class="token punctuation">.</span><span class="token property-access">givenName</span> <span class="token operator">+</span> $$<span class="token punctuation">.</span><span class="token property-access">ctx</span><span class="token punctuation">.</span><span class="token property-access">familyName</span><span class="token punctuation">;</span>\n<span class="token comment">// Now</span>\n$$<span class="token punctuation">.</span><span class="token property-access">ctx</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> $$<span class="token punctuation">.</span><span class="token property-access">ctx</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code>',l(uh,_h),l(uh,Uh),l(Uh,Gh),l(Uh,qh),l(qh,Bh),l(Uh,zh),l(Uh,Fh),l(Fh,Jh),l(Uh,Wh),l(Uh,Yh),l(Yh,Vh),l(Uh,Kh),l(uh,Zh),l(uh,Qh),Qh.innerHTML='<code class="language-js"><span class="token comment">// Previous</span>\n<span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'givenName\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>givenName <span class="token operator">=</span> <span class="token string">\'Li Hau\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Now</span>\n<span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>givenName <span class="token operator">=</span> <span class="token string">\'Li Hau\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>',l(uh,Xh),l(uh,ad),l(ad,nd),l(nd,sd),l(ad,td),l(uh,ed),l(uh,od),l(od,pd),l(uh,cd),l(uh,rd),rd.innerHTML='<code class="language-js"><span class="token comment">// Previous</span>\n$$<span class="token punctuation">.</span><span class="token property-access">dirty</span><span class="token punctuation">[</span><span class="token string">\'givenName\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token comment">// Now</span>\n$$<span class="token punctuation">.</span><span class="token property-access">dirty</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span></code>',l(uh,ld),l(uh,id),l(id,ud),l(uh,kd),l(uh,hd),hd.innerHTML='<code class="language-js"><span class="token comment">// Previous</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>$dirty<span class="token punctuation">.</span><span class="token property-access">givenName</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>$dirty<span class="token punctuation">.</span><span class="token property-access">givenName</span> <span class="token operator">&amp;&amp;</span> $dirty<span class="token punctuation">.</span><span class="token property-access">familyName</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span>\n\n<span class="token comment">// Now</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>$dirty<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>$dirty<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span></code>',l(uh,dd),l(uh,fd),l(fd,md),l(fd,vd),l(vd,gd),l(fd,Ed),l(fd,bd),l(bd,yd),l(fd,$d),l(fd,wd),l(wd,Od),l(fd,Sd),l(uh,Td),l(uh,Ld),l(Ld,Nd),l(Nd,Pd),l(Ld,xd),l(Ld,Cd),l(Cd,Dd),l(Ld,Ad),l(Ld,Id),l(Id,jd),l(Ld,Rd),l(Ld,Md),l(Md,Hd),l(Ld,_d),i(a,Ud,n),i(a,Gd,n),l(Gd,qd),l(qd,Bd),l(Bd,zd),l(Bd,Fd),l(Fd,Jd),l(Gd,Wd),l(Gd,Yd),l(Yd,Vd),l(Yd,Kd),l(Kd,Zd),l(Yd,Qd),l(Yd,Xd),l(Xd,af),l(Yd,nf),l(Yd,sf),l(sf,tf),l(Yd,ef),l(Gd,of),l(Gd,pf),pf.innerHTML='<code class="language-js"><span class="token comment">// If less than 32 variables,</span>\n<span class="token comment">// Instead of having &#96;dirty[0]&#96; all the time,</span>\np<span class="token punctuation">:</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> dirty<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>dirty<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>dirty<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span>\n<span class="token comment">// Svelte optimises the compiled code by </span>\n<span class="token comment">// destruct the array in the arguments</span>\np<span class="token punctuation">:</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token punctuation">[</span>dirty<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>dirty <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>dirty <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span>\n\n<span class="token comment">// If more than or equal to 32 variables</span>\np<span class="token punctuation">:</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> dirty<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>dirty<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>dirty<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span></code>',i(a,cf,n),i(a,rf,n),l(rf,lf),l(lf,uf),l(uf,kf),l(rf,hf),l(rf,df),l(df,ff),l(ff,mf),l(ff,vf),l(vf,gf),l(ff,Ef),l(ff,bf),l(bf,yf),l(ff,$f),l(df,wf),l(df,Of),l(Of,Sf),i(a,Tf,n),i(a,Lf,n),l(Lf,Nf),l(Nf,Pf),l(Pf,xf),l(Lf,Cf),l(Lf,Df),l(Df,Af),l(Df,If),l(If,jf),l(Df,Rf),l(Df,Mf),l(Mf,Hf),l(Lf,_f),l(Lf,Uf),Uf.innerHTML='<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">export</span> <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token comment">// &#96;doubled&#96;, &#96;tripled&#96;, &#96;quadrupled&#96; are reactive</span>\n  <span class="token comment">// highlight-start</span>\n  $<span class="token punctuation">:</span> doubled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>\n  $<span class="token punctuation">:</span> tripled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>\n  $<span class="token punctuation">:</span> quadrupled <span class="token operator">=</span> doubled <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>\n  <span class="token comment">// highlight-end</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token language-javascript"><span class="token punctuation">&#123;</span>doubled<span class="token punctuation">&#125;</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>tripled<span class="token punctuation">&#125;</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>quadrupled<span class="token punctuation">&#125;</span></span></code>',l(Lf,Gf),l(Lf,qf),l(qf,Bf),l(Bf,zf),l(Lf,Ff),l(Lf,Jf),l(Jf,Wf),l(Jf,Yf),l(Yf,Vf),l(Vf,Kf),l(Yf,Zf),l(Jf,Qf),l(Lf,Xf),l(Lf,am),am.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">instance</span><span class="token punctuation">(</span><span class="token parameter">$$self<span class="token punctuation">,</span> $$props<span class="token punctuation">,</span> $$invalidate</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// ...</span>\n\n  <span class="token comment">// highlight-start</span>\n\t$$self<span class="token punctuation">.</span><span class="token property-access">$$</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">update</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">&#123;</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>$$self<span class="token punctuation">.</span><span class="token property-access">$$</span><span class="token punctuation">.</span><span class="token property-access">dirty</span> <span class="token operator">&amp;</span> <span class="token comment">/*count*/</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n\t\t\t$<span class="token punctuation">:</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> doubled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">&#125;</span>\n\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>$$self<span class="token punctuation">.</span><span class="token property-access">$$</span><span class="token punctuation">.</span><span class="token property-access">dirty</span> <span class="token operator">&amp;</span> <span class="token comment">/*count*/</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n\t\t\t$<span class="token punctuation">:</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> tripled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">&#125;</span>\n\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>$$self<span class="token punctuation">.</span><span class="token property-access">$$</span><span class="token punctuation">.</span><span class="token property-access">dirty</span> <span class="token operator">&amp;</span> <span class="token comment">/*doubled*/</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n\t\t\t$<span class="token punctuation">:</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> quadrupled <span class="token operator">=</span> doubled <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">&#125;</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n  <span class="token comment">// highlight-end</span>\n\n\t<span class="token keyword">return</span> <span class="token punctuation">[</span>doubled<span class="token punctuation">,</span> tripled<span class="token punctuation">,</span> quadrupled<span class="token punctuation">,</span> count<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',l(Lf,nm),l(Lf,sm),l(sm,tm),l(Lf,em),l(Lf,om),om.innerHTML='<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">export</span> <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token comment">// NOTE: move &#96;quadrupled&#96; before &#96;doubled&#96;</span>\n  <span class="token comment">// highlight-start</span>\n  $<span class="token punctuation">:</span> quadrupled <span class="token operator">=</span> doubled <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>\n  $<span class="token punctuation">:</span> doubled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>\n  <span class="token comment">// highlight-end</span>\n  $<span class="token punctuation">:</span> tripled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code>',l(Lf,pm),l(Lf,cm),l(cm,rm),l(rm,lm),l(Lf,im),l(Lf,um),um.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">instance</span><span class="token punctuation">(</span><span class="token parameter">$$self<span class="token punctuation">,</span> $$props<span class="token punctuation">,</span> $$invalidate</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n\t<span class="token comment">// ...</span>\n\n\t$$self<span class="token punctuation">.</span><span class="token property-access">$$</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">update</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">&#123;</span>\n\t\t<span class="token comment">// NOTE: &#96;quadrupled&#96; invalidates after &#96;doubled&#96;</span>\n\t\t<span class="token comment">// highlight-start</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>$$self<span class="token punctuation">.</span><span class="token property-access">$$</span><span class="token punctuation">.</span><span class="token property-access">dirty</span> <span class="token operator">&amp;</span> <span class="token comment">/*count*/</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n\t\t\t$<span class="token punctuation">:</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>doubled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">&#125;</span>\n\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>$$self<span class="token punctuation">.</span><span class="token property-access">$$</span><span class="token punctuation">.</span><span class="token property-access">dirty</span> <span class="token operator">&amp;</span> <span class="token comment">/*doubled*/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n\t\t\t$<span class="token punctuation">:</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>quadrupled <span class="token operator">=</span> doubled <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">&#125;</span>\n\t\t<span class="token comment">// highlight-end</span>\n\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>$$self<span class="token punctuation">.</span><span class="token property-access">$$</span><span class="token punctuation">.</span><span class="token property-access">dirty</span> <span class="token operator">&amp;</span> <span class="token comment">/*count*/</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n\t\t\t$<span class="token punctuation">:</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>tripled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">&#125;</span>\n\t<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">return</span> <span class="token punctuation">[</span>doubled<span class="token punctuation">,</span> tripled<span class="token punctuation">,</span> quadrupled<span class="token punctuation">,</span> count<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',l(Lf,km),l(Lf,hm),l(hm,dm),l(Lf,fm),l(Lf,mm),l(mm,vm),l(vm,gm),l(vm,Em),l(Em,bm),l(vm,ym),l(vm,$m),l($m,wm),l(wm,Om),l(Om,Sm),l(wm,Tm),l(wm,Lm),l(Lm,Nm),l(wm,Pm),l(wm,xm),l(xm,Cm),l(wm,Dm),l(mm,Am),l(mm,Im),l(Im,jm),l(Im,Rm),l(Rm,Mm),l(Im,Hm),l(mm,_m),l(mm,Um),l(Um,Gm),l(Um,qm),l(qm,Bm),l(Bm,zm),l(zm,Fm),l(Bm,Jm),l(Bm,Wm),l(Wm,Ym),l(Bm,Vm),l(Bm,Km),l(Km,Zm),l(Bm,Qm),l(Bm,Xm),l(Xm,av),l(Bm,nv),l(Bm,sv),l(sv,tv),l(Bm,ev),l(Lf,ov),l(Lf,pv),l(pv,cv),l(pv,rv),l(rv,lv),l(pv,iv),l(Lf,uv),l(Lf,kv),l(kv,hv),l(Lf,dv),l(Lf,fv),fv.innerHTML='<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token comment">// NOTE: use &#96;count&#96; in a reactive declaration before &#96;count&#96; is declared</span>\n$<span class="token punctuation">:</span> doubled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token language-javascript"><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span></span> * 2 = <span class="token language-javascript"><span class="token punctuation">&#123;</span>doubled<span class="token punctuation">&#125;</span></span></code>',l(Lf,mv),l(Lf,vv),l(vv,gv),l(gv,Ev),l(Lf,bv),l(Lf,yv),l(yv,$v),l($v,wv),l($v,Ov),l(Ov,Sv),l($v,Tv),l(Lf,Lv),l(Lf,Nv),l(Nv,Pv),l(Nv,xv),l(xv,Cv),l(Nv,Dv),l(Nv,Av),l(Av,Iv),l(Nv,jv),l(Lf,Rv),l(Lf,Mv),l(Mv,Hv),l(Mv,_v),l(_v,Uv),l(Mv,Gv),l(Lf,qv),l(Lf,Bv),Bv.innerHTML='<code class="language-js"><span class="token comment">// src/runtime/internal/scheduler.ts</span>\n<span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">$$</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>$$<span class="token punctuation">.</span><span class="token property-access">fragment</span> <span class="token operator">!==</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token comment">// NOTE: this is important now!</span>\n    <span class="token comment">// highlight-next-line</span>\n    $$<span class="token punctuation">.</span><span class="token method function property-access">update</span><span class="token punctuation">(</span>$$<span class="token punctuation">.</span><span class="token property-access">dirty</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">run_all</span><span class="token punctuation">(</span>$$<span class="token punctuation">.</span><span class="token property-access">before_update</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// calls the &#96;p&#96; function</span>\n    $$<span class="token punctuation">.</span><span class="token property-access">fragment</span> <span class="token operator">&amp;&amp;</span> $$<span class="token punctuation">.</span><span class="token property-access">fragment</span><span class="token punctuation">.</span><span class="token method function property-access">p</span><span class="token punctuation">(</span>$$<span class="token punctuation">.</span><span class="token property-access">dirty</span><span class="token punctuation">,</span> $$<span class="token punctuation">.</span><span class="token property-access">ctx</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span></code>',l(Lf,zv),l(Lf,Fv),l(Fv,Jv),l(Fv,Wv),l(Wv,Yv),l(Fv,Vv),l(Fv,Kv),l(Kv,Zv),l(Fv,Qv),l(Fv,Xv),l(Xv,ag),l(Fv,ng),l(Lf,sg),l(Lf,tg),l(tg,eg),i(a,og,n),i(a,pg,n),l(pg,cg),l(cg,rg),l(rg,lg),l(pg,ig),l(pg,ug),l(ug,kg),l(pg,hg),l(pg,dg),dg.innerHTML='<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">let</span> givenName <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> familyName <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    givenName <span class="token operator">=</span> <span class="token string">\'Li Hau\'</span><span class="token punctuation">;</span>\n    familyName <span class="token operator">=</span> <span class="token string">\'Tan\'</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n  $<span class="token punctuation">:</span> name <span class="token operator">=</span> givenName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> familyName<span class="token punctuation">;</span>\n  $<span class="token punctuation">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'name\'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code>',l(pg,fg),l(pg,mg),l(mg,vg),l(vg,gg),l(pg,Eg),l(pg,bg),l(bg,yg),l(bg,$g),l($g,wg),l(bg,Og),l(pg,Sg),l(pg,Tg),l(Tg,Lg),l(Lg,Ng),l(Lg,Pg),l(Pg,xg),l(Lg,Cg),l(Lg,Dg),l(Dg,Ag),l(Lg,Ig),l(Lg,jg),l(jg,Rg),l(Lg,Mg),l(Lg,Hg),l(Hg,_g),l(Lg,Ug),l(Tg,Gg),l(Tg,qg),l(qg,Bg),l(Bg,zg),l(Tg,Fg),l(Tg,Jg),l(Jg,Wg),l(Wg,Yg),l(Tg,Vg),l(Tg,Kg),l(Kg,Zg),l(Zg,Qg),l(Kg,Xg),l(Kg,aE),l(aE,nE),l(Kg,sE),l(Tg,tE),l(Tg,eE),l(eE,oE),l(eE,pE),l(pE,cE),l(eE,rE),l(rE,lE),l(lE,iE),l(lE,uE),l(uE,kE),l(lE,hE),l(lE,dE),l(dE,fE),l(lE,mE),l(lE,vE),l(vE,gE),l(lE,EE),l(lE,bE),l(bE,yE),l(rE,$E),l(rE,wE),l(wE,OE),l(wE,SE),l(SE,TE),l(wE,LE),l(wE,NE),l(NE,PE),l(Tg,xE),l(Tg,CE),l(CE,DE),l(CE,AE),l(AE,IE),l(CE,jE),l(pg,RE),l(pg,ME),l(ME,HE),l(ME,_E),l(_E,UE),l(ME,GE),l(ME,qE),l(qE,BE),l(ME,zE),l(ME,FE),l(FE,JE),l(ME,WE),l(ME,YE),l(YE,VE),l(ME,KE),l(ME,ZE),l(ZE,QE),l(ME,XE),l(pg,ab),l(pg,nb),nb.innerHTML='<code class="language-js"><span class="token comment">// Instead of</span>\n<span class="token comment">// #1 &#96;givenName = \'Li Hau\'</span>\nname <span class="token operator">=</span> <span class="token string">\'Li Hau\'</span> <span class="token operator">+</span> <span class="token string">\' \'</span> <span class="token operator">+</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'Li Hau \'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// #2 &#96;familyName = \'Tan\'</span>\nname <span class="token operator">=</span> <span class="token string">\'Li Hau\'</span> <span class="token operator">+</span> <span class="token string">\' \'</span> <span class="token operator">+</span> <span class="token string">\'Tan\'</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'Li Hau Tan\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Reactive declarations and statements are batched</span>\n<span class="token comment">// #1 &#96;givenName = \'Li Hau\'</span>\n<span class="token comment">// #2 &#96;familyName = \'Tan\'</span>\nname <span class="token operator">=</span> <span class="token string">\'Li Hau\'</span> <span class="token operator">+</span> <span class="token string">\' \'</span> <span class="token operator">+</span> <span class="token string">\'Tan\'</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'Li Hau Tan\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>',i(a,sb,n),i(a,tb,n),l(tb,eb),l(eb,ob),l(ob,pb),l(tb,cb),l(tb,rb),l(rb,lb),l(tb,ib),l(tb,ub),ub.innerHTML='<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">let</span> givenName <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> familyName <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    givenName <span class="token operator">=</span> <span class="token string">\'Li Hau\'</span><span class="token punctuation">;</span>\n    familyName <span class="token operator">=</span> <span class="token string">\'Tan\'</span><span class="token punctuation">;</span>\n    <span class="token comment">// highlight-next-line</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'name\'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Logs \'\'</span>\n  <span class="token punctuation">&#125;</span>\n  $<span class="token punctuation">:</span> name <span class="token operator">=</span> givenName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> familyName<span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code>',l(tb,kb),l(tb,hb),l(hb,db),l(db,fb),l(tb,mb),l(tb,vb),l(vb,gb),l(vb,Eb),l(Eb,bb),l(vb,yb),l(tb,$b),l(tb,wb),wb.innerHTML='<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">let</span> givenName <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">,</span> familyName <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    givenName <span class="token operator">=</span> <span class="token string">\'Li Hau\'</span><span class="token punctuation">;</span>\n    familyName <span class="token operator">=</span> <span class="token string">\'Tan\'</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n  $<span class="token punctuation">:</span> name <span class="token operator">=</span> givenName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> familyName<span class="token punctuation">;</span>\n  <span class="token comment">// highlight-next-line</span>\n  $<span class="token punctuation">:</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'name\'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Logs \'Li Hau Tan\'</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code>',i(a,Ob,n),i(a,Sb,n),l(Sb,Tb),l(Tb,Lb),l(Lb,Nb),l(Sb,Pb),l(Sb,xb),l(xb,Cb),l(Sb,Db),l(Sb,Ab),l(Ab,Ib),l(Ab,jb),l(jb,Rb),l(Ab,Mb),l(Sb,Hb),l(Sb,_b),_b.innerHTML='<code class="language-js"><span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token comment">// NOTE: refers to &#96;doubled&#96;</span>\n$<span class="token punctuation">:</span> quadrupled <span class="token operator">=</span> doubled <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token comment">// NOTE: defined &#96;doubled&#96;</span>\n$<span class="token punctuation">:</span> doubled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>\n\n<span class="token comment">// compiles into:</span>\n\n$$self<span class="token punctuation">.</span><span class="token property-access">$$</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">update</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// ...</span>\n  $<span class="token punctuation">:</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token comment">/* doubled */</span><span class="token punctuation">,</span> doubled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  $<span class="token punctuation">:</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token comment">/* quadrupled */</span><span class="token punctuation">,</span> quadrupled <span class="token operator">=</span> doubled <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">&#125;</span></code>',i(a,Ub,n),i(a,Gb,n),l(Gb,qb),l(qb,Bb),l(Bb,zb),l(Gb,Fb),l(Gb,Jb),l(Jb,Wb),l(Jb,Yb),l(Yb,Vb),l(Jb,Kb),l(Gb,Zb),l(Gb,Qb),l(Qb,Xb),l(Qb,ay),l(ay,ny),l(Qb,sy),l(Gb,ty),l(Gb,ey),l(ey,oy),l(Gb,py),l(Gb,cy),cy.innerHTML='<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  $<span class="token punctuation">:</span> doubled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">&#123;</span> count <span class="token punctuation">&#125;</span></span> x 2 = <span class="token language-javascript"><span class="token punctuation">&#123;</span>doubled<span class="token punctuation">&#125;</span></span></code>',l(Gb,ry),l(Gb,ly),l(ly,iy),l(iy,uy),l(Gb,ky),l(Gb,hy),l(hy,dy),l(hy,fy),l(fy,my),l(hy,vy),l(hy,gy),l(gy,Ey),l(hy,by),l(Gb,yy),l(Gb,$y),$y.innerHTML='<code class="language-js"><span class="token comment">// ...</span>\n<span class="token keyword">function</span> <span class="token function">instance</span><span class="token punctuation">(</span><span class="token parameter">$$self<span class="token punctuation">,</span> $$props<span class="token punctuation">,</span> $$invalidate</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">let</span> doubled<span class="token punctuation">;</span>\n  $<span class="token punctuation">:</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>doubled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span>doubled<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',i(a,wy,n),i(a,Oy,n),l(Oy,Sy),l(Sy,Ty),l(Ty,Ly),i(a,Ny,n),i(a,Py,n),l(Py,xy),l(xy,Cy),l(Cy,Dy),i(a,Ay,n),i(a,Iy,n),l(Iy,jy),l(jy,Ry),l(Ry,My),i(a,Hy,n),i(a,_y,n),l(_y,Uy),l(Uy,Gy),l(Gy,qy),i(a,By,n),i(a,zy,n),l(zy,Fy),l(Fy,Jy),l(Jy,Wy),l(zy,Yy),l(zy,Vy),l(Vy,Ky),l(Vy,Zy),l(Zy,Qy),l(Vy,Xy),l(zy,a$),l(zy,n$),l(n$,s$),l(n$,t$),l(t$,e$),l(n$,o$),l(n$,p$),l(p$,c$),l(n$,r$),l(n$,l$),l(l$,i$),l(n$,u$),l(zy,k$),l(zy,h$),l(h$,d$),l(d$,f$),l(d$,m$),l(m$,v$),l(d$,g$),l(zy,E$),l(zy,b$),l(b$,y$),l(y$,$$),l(y$,w$),l(w$,O$),l(y$,S$),i(a,T$,n),i(a,L$,n),l(L$,N$),l(N$,P$),l(P$,x$),l(L$,C$),l(L$,D$),l(D$,A$),l(A$,I$),l(A$,j$),l(j$,R$),l(A$,M$),l(D$,H$),l(D$,_$),l(_$,U$),l(_$,G$),l(G$,q$),l(_$,B$),l(_$,z$),l(z$,F$),l(D$,J$),l(D$,W$),l(W$,Y$),l(Y$,V$),l(W$,K$),l(D$,Z$),l(D$,Q$),l(Q$,X$),l(X$,aw),l(Q$,nw),l(D$,sw),l(D$,tw),l(tw,ew),l(ew,ow)},p:a,d(a){a&&u(s),a&&u(ja),a&&u(Ra),a&&u(qa),a&&u(Ba),a&&u(Xa),a&&u(an),a&&u(nn),a&&u(sn),a&&u(un),a&&u(kn),a&&u(vn),a&&u(gn),a&&u(Bn),a&&u(zn),a&&u(pt),a&&u(ct),a&&u(xe),a&&u(Ce),a&&u(xp),a&&u(Cp),a&&u(ai),a&&u(ni),a&&u(Ri),a&&u(Mi),a&&u(vu),a&&u(gu),a&&u(ih),a&&u(uh),a&&u(Ud),a&&u(Gd),a&&u(cf),a&&u(rf),a&&u(Tf),a&&u(Lf),a&&u(og),a&&u(pg),a&&u(sb),a&&u(tb),a&&u(Ob),a&&u(Sb),a&&u(Ub),a&&u(Gb),a&&u(wy),a&&u(Oy),a&&u(Ny),a&&u(Py),a&&u(Ay),a&&u(Iy),a&&u(Hy),a&&u(_y),a&&u(By),a&&u(zy),a&&u(T$),a&&u(L$)}}}function ka(a){let s,t;const e=[ha];let o={$$slots:{default:[ua]},$$scope:{ctx:a}};for(let a=0;a<e.length;a+=1)o=n(o,e[a]);return s=new ia({props:o}),{c(){B(s.$$.fragment)},l(a){z(s.$$.fragment,a)},m(a,n){F(s,a,n),t=!0},p(a,[n]){const t=0&n?function(a,n){const s={},t={},e={$$scope:1};let o=a.length;for(;o--;){const p=a[o],c=n[o];if(c){for(const a in p)a in c||(t[a]=1);for(const a in c)e[a]||(s[a]=c[a],e[a]=1);a[o]=c}else for(const a in p)e[a]=1}for(const a in t)a in s||(s[a]=void 0);return s}(e,[(o=ha,"object"==typeof o&&null!==o?o:{})]):{};var o;1&n&&(t.$$scope={dirty:n,ctx:a}),s.$set(t)},i(a){t||(G(s.$$.fragment,a),t=!0)},o(a){q(s.$$.fragment,a),t=!1},d(a){J(s,a)}}}const ha={title:"Compile Svelte in your head (Part 2)",date:"2020-03-22T08:00:00Z",tags:["Svelte","JavaScript"],series:"Compile Svelte in your head",slug:"compile-svelte-in-your-head-part-2",type:"blog"};class da extends V{constructor(a){super(),Y(this,a,null,ka,p,{})}}setTimeout(()=>{new da({target:document.querySelector("#app"),hydrate:!0});if(document.querySelector(".twitter-tweet")){const a=document.createElement("script");a.async=!0,a.src="https://platform.twitter.com/widgets.js",a.charset="utf-8",document.body.appendChild(a)}if("loading"in HTMLImageElement.prototype){document.querySelectorAll('img[loading="lazy"]').forEach(a=>{a.src=a.dataset.src})}else{const a=document.createElement("script");a.src="https://cdnjs.cloudflare.com/ajax/libs/lazysizes/5.1.2/lazysizes.min.js",document.body.appendChild(a)}},3e3);
