function a(){}function n(a,n){for(const s in n)a[s]=n[s];return a}function s(a){return a()}function t(){return Object.create(null)}function e(a){a.forEach(s)}function o(a){return"function"==typeof a}function c(a,n){return a!=a?n==n:a!==n||a&&"object"==typeof a||"function"==typeof a}function p(a,s,t,e){return a[1]&&e?n(t.ctx.slice(),a[1](e(s))):t.ctx}function r(a,n,s,t,e,o,c){const r=function(a,n,s,t){if(a[2]&&t){const e=a[2](t(s));if(void 0===n.dirty)return e;if("object"==typeof e){const a=[],s=Math.max(n.dirty.length,e.length);for(let t=0;t<s;t+=1)a[t]=n.dirty[t]|e[t];return a}return n.dirty|e}return n.dirty}(n,t,e,o);if(r){const e=p(n,s,t,c);a.p(e,r)}}function l(a,n){a.appendChild(n)}function i(a,n,s){a.insertBefore(n,s||null)}function u(a){a.parentNode.removeChild(a)}function h(a,n){for(let s=0;s<a.length;s+=1)a[s]&&a[s].d(n)}function d(a){return document.createElement(a)}function f(a){return document.createElementNS("http://www.w3.org/2000/svg",a)}function k(a){return document.createTextNode(a)}function m(){return k(" ")}function v(){return k("")}function E(a,n,s){null==s?a.removeAttribute(n):a.getAttribute(n)!==s&&a.setAttribute(n,s)}function g(a){return Array.from(a.childNodes)}function b(a,n,s,t){for(let t=0;t<a.length;t+=1){const e=a[t];if(e.nodeName===n){let n=0;const o=[];for(;n<e.attributes.length;){const a=e.attributes[n++];s[a.name]||o.push(a.name)}for(let a=0;a<o.length;a++)e.removeAttribute(o[a]);return a.splice(t,1)[0]}}return t?f(n):d(n)}function $(a,n){for(let s=0;s<a.length;s+=1){const t=a[s];if(3===t.nodeType)return t.data=""+n,a.splice(s,1)[0]}return k(n)}function y(a){return $(a," ")}function w(a,n){n=""+n,a.wholeText!==n&&(a.data=n)}function O(a,n){a.value=null==n?"":n}class S{constructor(a=null){this.a=a,this.e=this.n=null}m(a,n,s=null){this.e||(this.e=d(n.nodeName),this.t=n,this.h(a)),this.i(s)}h(a){this.e.innerHTML=a,this.n=Array.from(this.e.childNodes)}i(a){for(let n=0;n<this.n.length;n+=1)i(this.t,this.n[n],a)}p(a){this.d(),this.h(a),this.i(this.a)}d(){this.n.forEach(u)}}let T;function L(a){T=a}function N(a){(function(){if(!T)throw new Error("Function called outside component initialization");return T})().$$.on_mount.push(a)}const P=[],x=[],C=[],D=[],A=Promise.resolve();let I=!1;function j(a){C.push(a)}let R=!1;const M=new Set;function H(){if(!R){R=!0;do{for(let a=0;a<P.length;a+=1){const n=P[a];L(n),_(n.$$)}for(P.length=0;x.length;)x.pop()();for(let a=0;a<C.length;a+=1){const n=C[a];M.has(n)||(M.add(n),n())}C.length=0}while(P.length);for(;D.length;)D.pop()();I=!1,R=!1,M.clear()}}function _(a){if(null!==a.fragment){a.update(),e(a.before_update);const n=a.dirty;a.dirty=[-1],a.fragment&&a.fragment.p(a.ctx,n),a.after_update.forEach(j)}}const q=new Set;function U(a,n){a&&a.i&&(q.delete(a),a.i(n))}function G(a,n,s,t){if(a&&a.o){if(q.has(a))return;q.add(a),(void 0).c.push(()=>{q.delete(a),t&&(s&&a.d(1),t())}),a.o(n)}}function B(a){a&&a.c()}function F(a,n){a&&a.l(n)}function J(a,n,t){const{fragment:c,on_mount:p,on_destroy:r,after_update:l}=a.$$;c&&c.m(n,t),j(()=>{const n=p.map(s).filter(o);r?r.push(...n):e(n),a.$$.on_mount=[]}),l.forEach(j)}function z(a,n){const s=a.$$;null!==s.fragment&&(e(s.on_destroy),s.fragment&&s.fragment.d(n),s.on_destroy=s.fragment=null,s.ctx=[])}function W(a,n){-1===a.$$.dirty[0]&&(P.push(a),I||(I=!0,A.then(H)),a.$$.dirty.fill(0)),a.$$.dirty[n/31|0]|=1<<n%31}function Y(n,s,o,c,p,r,l=[-1]){const i=T;L(n);const h=s.props||{},d=n.$$={fragment:null,ctx:null,props:r,update:a,not_equal:p,bound:t(),on_mount:[],on_destroy:[],before_update:[],after_update:[],context:new Map(i?i.$$.context:[]),callbacks:t(),dirty:l};let f=!1;if(d.ctx=o?o(n,h,(a,s,...t)=>{const e=t.length?t[0]:s;return d.ctx&&p(d.ctx[a],d.ctx[a]=e)&&(d.bound[a]&&d.bound[a](e),f&&W(n,a)),s}):[],d.update(),f=!0,e(d.before_update),d.fragment=!!c&&c(d.ctx),s.target){if(s.hydrate){const a=g(s.target);d.fragment&&d.fragment.l(a),a.forEach(u)}else d.fragment&&d.fragment.c();s.intro&&U(n.$$.fragment),J(n,s.target,s.anchor),H()}L(i)}class V{$destroy(){z(this,1),this.$destroy=a}$on(a,n){const s=this.$$.callbacks[a]||(this.$$.callbacks[a]=[]);return s.push(n),()=>{const a=s.indexOf(n);-1!==a&&s.splice(a,1)}}$set(){}}function K(n){let s,t,e,o,c,p,r,h,v,w,O,S,T,L,N,P,x,C,D,A,I,j,R,M,H,_,q,U,G,B,F,J,z,W,Y;return{c(){s=d("header"),t=d("nav"),e=d("ul"),o=d("li"),c=d("a"),p=k("Tan Li Hau"),r=m(),h=d("li"),v=d("a"),w=k("About"),O=m(),S=d("li"),T=d("a"),L=k("Writings"),N=m(),P=d("li"),x=d("a"),C=k("Talks"),D=m(),A=d("li"),I=d("a"),j=k("Notes"),R=m(),M=d("li"),H=d("a"),_=k("Newsletter"),q=m(),U=d("li"),G=d("a"),B=f("svg"),F=f("path"),J=m(),z=d("a"),W=f("svg"),Y=f("path"),this.h()},l(a){s=b(a,"HEADER",{class:!0});var n=g(s);t=b(n,"NAV",{});var l=g(t);e=b(l,"UL",{class:!0});var i=g(e);o=b(i,"LI",{class:!0});var d=g(o);c=b(d,"A",{href:!0,class:!0});var f=g(c);p=$(f,"Tan Li Hau"),f.forEach(u),d.forEach(u),r=y(i),h=b(i,"LI",{class:!0});var k=g(h);v=b(k,"A",{href:!0,class:!0});var m=g(v);w=$(m,"About"),m.forEach(u),k.forEach(u),O=y(i),S=b(i,"LI",{class:!0});var E=g(S);T=b(E,"A",{href:!0,class:!0});var V=g(T);L=$(V,"Writings"),V.forEach(u),E.forEach(u),N=y(i),P=b(i,"LI",{class:!0});var K=g(P);x=b(K,"A",{href:!0,class:!0});var Z=g(x);C=$(Z,"Talks"),Z.forEach(u),K.forEach(u),D=y(i),A=b(i,"LI",{class:!0});var Q=g(A);I=b(Q,"A",{href:!0,class:!0});var X=g(I);j=$(X,"Notes"),X.forEach(u),Q.forEach(u),R=y(i),M=b(i,"LI",{class:!0});var aa=g(M);H=b(aa,"A",{href:!0,class:!0});var na=g(H);_=$(na,"Newsletter"),na.forEach(u),aa.forEach(u),q=y(i),U=b(i,"LI",{class:!0});var sa=g(U);G=b(sa,"A",{"aria-label":!0,href:!0,class:!0});var ta=g(G);B=b(ta,"svg",{viewBox:!0,width:!0,height:!0,class:!0},1);var ea=g(B);F=b(ea,"path",{d:!0},1),g(F).forEach(u),ea.forEach(u),ta.forEach(u),J=y(sa),z=b(sa,"A",{"aria-label":!0,href:!0,class:!0});var oa=g(z);W=b(oa,"svg",{viewBox:!0,width:!0,height:!0,class:!0},1);var ca=g(W);Y=b(ca,"path",{d:!0},1),g(Y).forEach(u),ca.forEach(u),oa.forEach(u),sa.forEach(u),i.forEach(u),l.forEach(u),n.forEach(u),this.h()},h(){E(c,"href","/"),E(c,"class","svelte-f3e4uo"),E(o,"class","svelte-f3e4uo"),E(v,"href","/about"),E(v,"class","svelte-f3e4uo"),E(h,"class","svelte-f3e4uo"),E(T,"href","/blogs"),E(T,"class","svelte-f3e4uo"),E(S,"class","svelte-f3e4uo"),E(x,"href","/talks"),E(x,"class","svelte-f3e4uo"),E(P,"class","svelte-f3e4uo"),E(I,"href","/notes"),E(I,"class","svelte-f3e4uo"),E(A,"class","svelte-f3e4uo"),E(H,"href","/newsletter"),E(H,"class","svelte-f3e4uo"),E(M,"class","svelte-f3e4uo"),E(F,"d","M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66\n    10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5\n    4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"),E(B,"viewBox","0 0 24 24"),E(B,"width","1em"),E(B,"height","1em"),E(B,"class","svelte-f3e4uo"),E(G,"aria-label","Twitter account"),E(G,"href","https://twitter.com/lihautan"),E(G,"class","svelte-f3e4uo"),E(Y,"d","M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0\n    0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07\n    5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65\n    5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42\n    3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"),E(W,"viewBox","0 0 24 24"),E(W,"width","1em"),E(W,"height","1em"),E(W,"class","svelte-f3e4uo"),E(z,"aria-label","Github account"),E(z,"href","https://github.com/tanhauhau"),E(z,"class","svelte-f3e4uo"),E(U,"class","social svelte-f3e4uo"),E(e,"class","svelte-f3e4uo"),E(s,"class","svelte-f3e4uo")},m(a,n){i(a,s,n),l(s,t),l(t,e),l(e,o),l(o,c),l(c,p),l(e,r),l(e,h),l(h,v),l(v,w),l(e,O),l(e,S),l(S,T),l(T,L),l(e,N),l(e,P),l(P,x),l(x,C),l(e,D),l(e,A),l(A,I),l(I,j),l(e,R),l(e,M),l(M,H),l(H,_),l(e,q),l(e,U),l(U,G),l(G,B),l(B,F),l(U,J),l(U,z),l(z,W),l(W,Y)},p:a,i:a,o:a,d(a){a&&u(s)}}}class Z extends V{constructor(a){super(),Y(this,a,null,K,c,{})}}function Q(n){let s,t,e,o,c,p,r,h,f,v,w,S,T,L,N,P,x,C,D,A;return{c(){s=d("div"),t=d("h1"),e=k("Subscribe to my newsletter"),o=m(),c=d("h2"),p=k("Get the latest blog posts and project updates delivered right to your inbox"),r=m(),h=d("form"),f=d("div"),v=d("input"),w=m(),S=d("input"),L=m(),N=d("input"),P=m(),x=d("p"),C=k("Powered by Buttondown."),this.h()},l(a){s=b(a,"DIV",{class:!0});var n=g(s);t=b(n,"H1",{});var l=g(t);e=$(l,"Subscribe to my newsletter"),l.forEach(u),o=y(n),c=b(n,"H2",{class:!0});var i=g(c);p=$(i,"Get the latest blog posts and project updates delivered right to your inbox"),i.forEach(u),r=y(n),h=b(n,"FORM",{action:!0,method:!0,target:!0,onsubmit:!0,class:!0});var d=g(h);f=b(d,"DIV",{class:!0});var k=g(f);v=b(k,"INPUT",{type:!0,name:!0,id:!0,"aria-label":!0,placeholder:!0,class:!0}),w=y(k),S=b(k,"INPUT",{type:!0,value:!0,disabled:!0,class:!0}),k.forEach(u),L=y(d),N=b(d,"INPUT",{type:!0,value:!0,name:!0,class:!0}),P=y(d),x=b(d,"P",{class:!0});var m=g(x);C=$(m,"Powered by Buttondown."),m.forEach(u),d.forEach(u),n.forEach(u),this.h()},h(){E(c,"class","svelte-1k1s1co"),E(v,"type","email"),E(v,"name","email"),E(v,"id","bd-email"),E(v,"aria-label","email address"),E(v,"placeholder","youremail@example.com"),E(v,"class","svelte-1k1s1co"),E(S,"type","submit"),S.value="Subscribe",S.disabled=T=!n[0],E(S,"class","svelte-1k1s1co"),E(f,"class","form-item svelte-1k1s1co"),E(N,"type","hidden"),N.value="1",E(N,"name","embed"),E(N,"class","svelte-1k1s1co"),E(x,"class","svelte-1k1s1co"),E(h,"action","https://buttondown.email/api/emails/embed-subscribe/lihautan"),E(h,"method","post"),E(h,"target","popupwindow"),E(h,"onsubmit","window.open('https://buttondown.email/lihautan', 'popupwindow')"),E(h,"class","embeddable-buttondown-form"),E(s,"class","form svelte-1k1s1co")},m(a,u){var d,k,m,E;i(a,s,u),l(s,t),l(t,e),l(s,o),l(s,c),l(c,p),l(s,r),l(s,h),l(h,f),l(f,v),O(v,n[0]),l(f,w),l(f,S),l(h,L),l(h,N),l(h,P),l(h,x),l(x,C),D||(d=v,k="input",m=n[1],d.addEventListener(k,m,E),A=()=>d.removeEventListener(k,m,E),D=!0)},p(a,[n]){1&n&&v.value!==a[0]&&O(v,a[0]),1&n&&T!==(T=!a[0])&&(S.disabled=T)},i:a,o:a,d(a){a&&u(s),D=!1,A()}}}function X(a,n,s){let t;return[t,function(){t=this.value,s(0,t)}]}class aa extends V{constructor(a){super(),Y(this,a,X,Q,c,{})}}function na(a){return N(()=>(setTimeout(()=>{if(window.innerWidth>1080){const a=document.createElement("script");a.async=!0,a.type="text/javascript",a.src="//cdn.carbonads.com/carbon.js?serve=CE7ITK3E&placement=lihautancom",a.id="_carbonads_js",document.body.appendChild(a)}},5e3),()=>{try{const a=document.getElementById("carbonads");a.parentNode.removeChild(a)}catch(a){}})),[]}class sa extends V{constructor(a){super(),Y(this,a,na,null,c,{})}}var ta="https://lihautan.com/compile-svelte-in-your-head-part-2/assets/hero-twitter-2914f5b9.jpg";function ea(a,n,s){const t=a.slice();return t[6]=n[s],t}function oa(a,n,s){const t=a.slice();return t[6]=n[s],t}function ca(a){let n,s;return{c(){n=d("meta"),this.h()},l(a){n=b(a,"META",{name:!0,content:!0}),this.h()},h(){E(n,"name","keywords"),E(n,"content",s=a[6])},m(a,s){i(a,n,s)},p(a,t){4&t&&s!==(s=a[6])&&E(n,"content",s)},d(a){a&&u(n)}}}function pa(a){let n,s,t=a[6]+"";return{c(){n=d("span"),s=k(t),this.h()},l(a){n=b(a,"SPAN",{class:!0});var e=g(n);s=$(e,t),e.forEach(u),this.h()},h(){E(n,"class","svelte-9tqnza")},m(a,t){i(a,n,t),l(n,s)},p(a,n){4&n&&t!==(t=a[6]+"")&&w(s,t)},d(a){a&&u(n)}}}function ra(a){let n,s,t,e,o,c,f,O,T,L,N,P,x,C,D,A,I,j,R,M,H,_,q,W,Y,V,K,Q,X,na,ra,la,ia,ua,ha,da,fa=`<script type="application/ld+json">${JSON.stringify({"@context":"https://schema.org","@type":"Article",author:a[3],copyrightHolder:a[3],copyrightYear:"2020",creator:a[3],publisher:a[3],description:a[1],headline:a[0],name:a[0],inLanguage:"en"})}<\/script>`,ka=`<script type="application/ld+json">${JSON.stringify({"@context":"https://schema.org","@type":"BreadcrumbList",description:"Breadcrumbs list",name:"Breadcrumbs",itemListElement:[{"@type":"ListItem",item:{"@id":"https://lihautan.com",name:"Homepage"},position:1},{"@type":"ListItem",item:{"@id":"https%3A%2F%2Flihautan.com%2Fcompile-svelte-in-your-head-part-2",name:a[0]},position:2}]})}<\/script>`;document.title=n=a[0]+" | Tan Li Hau";let ma=a[2],va=[];for(let n=0;n<ma.length;n+=1)va[n]=ca(oa(a,ma,n));q=new Z({});let Ea=a[2],ga=[];for(let n=0;n<Ea.length;n+=1)ga[n]=pa(ea(a,Ea,n));const ba=a[5].default,$a=function(a,n,s,t){if(a){const e=p(a,n,s,t);return a[0](e)}}(ba,a,a[4],null);return ia=new aa({}),ha=new sa({}),{c(){s=d("meta"),t=d("meta"),e=d("meta"),o=d("meta"),c=d("meta"),f=d("meta"),O=d("meta"),T=d("meta"),L=d("meta"),N=d("meta"),P=d("meta");for(let a=0;a<va.length;a+=1)va[a].c();x=d("meta"),C=d("meta"),A=v(),j=v(),R=m(),M=d("a"),H=k("Skip to content"),_=m(),B(q.$$.fragment),W=m(),Y=d("main"),V=d("h1"),K=k(a[0]),Q=m();for(let a=0;a<ga.length;a+=1)ga[a].c();X=m(),na=d("article"),$a&&$a.c(),ra=m(),la=d("footer"),B(ia.$$.fragment),ua=m(),B(ha.$$.fragment),this.h()},l(n){const p=function(a,n=document.body){return Array.from(n.querySelectorAll(a))}('[data-svelte="svelte-n0q11s"]',document.head);s=b(p,"META",{name:!0,content:!0}),t=b(p,"META",{name:!0,content:!0}),e=b(p,"META",{name:!0,content:!0}),o=b(p,"META",{name:!0,content:!0}),c=b(p,"META",{name:!0,content:!0}),f=b(p,"META",{name:!0,content:!0}),O=b(p,"META",{name:!0,content:!0}),T=b(p,"META",{name:!0,content:!0}),L=b(p,"META",{name:!0,content:!0}),N=b(p,"META",{name:!0,content:!0}),P=b(p,"META",{name:!0,content:!0});for(let a=0;a<va.length;a+=1)va[a].l(p);x=b(p,"META",{itemprop:!0,content:!0}),C=b(p,"META",{itemprop:!0,content:!0}),A=v(),j=v(),p.forEach(u),R=y(n),M=b(n,"A",{href:!0,class:!0});var r=g(M);H=$(r,"Skip to content"),r.forEach(u),_=y(n),F(q.$$.fragment,n),W=y(n),Y=b(n,"MAIN",{id:!0,class:!0});var l=g(Y);V=b(l,"H1",{});var i=g(V);K=$(i,a[0]),i.forEach(u),Q=y(l);for(let a=0;a<ga.length;a+=1)ga[a].l(l);X=y(l),na=b(l,"ARTICLE",{});var h=g(na);$a&&$a.l(h),h.forEach(u),l.forEach(u),ra=y(n),la=b(n,"FOOTER",{class:!0});var d=g(la);F(ia.$$.fragment,d),ua=y(d),F(ha.$$.fragment,d),d.forEach(u),this.h()},h(){E(s,"name","description"),E(s,"content",a[1]),E(t,"name","image"),E(t,"content",ta),E(e,"name","og:image"),E(e,"content",ta),E(o,"name","og:title"),E(o,"content",a[0]),E(c,"name","og:description"),E(c,"content",a[1]),E(f,"name","og:type"),E(f,"content","website"),E(O,"name","twitter:card"),E(O,"content","summary_large_image"),E(T,"name","twitter:creator"),E(T,"content","@lihautan"),E(L,"name","twitter:title"),E(L,"content",a[0]),E(N,"name","twitter:description"),E(N,"content",a[1]),E(P,"name","twitter:image"),E(P,"content",ta),E(x,"itemprop","url"),E(x,"content","https%3A%2F%2Flihautan.com%2Fcompile-svelte-in-your-head-part-2"),E(C,"itemprop","image"),E(C,"content",ta),D=new S(A),I=new S(j),E(M,"href","#content"),E(M,"class","skip svelte-9tqnza"),E(Y,"id","content"),E(Y,"class","blog svelte-9tqnza"),E(la,"class","svelte-9tqnza")},m(a,n){l(document.head,s),l(document.head,t),l(document.head,e),l(document.head,o),l(document.head,c),l(document.head,f),l(document.head,O),l(document.head,T),l(document.head,L),l(document.head,N),l(document.head,P);for(let a=0;a<va.length;a+=1)va[a].m(document.head,null);l(document.head,x),l(document.head,C),D.m(fa,document.head),l(document.head,A),I.m(ka,document.head),l(document.head,j),i(a,R,n),i(a,M,n),l(M,H),i(a,_,n),J(q,a,n),i(a,W,n),i(a,Y,n),l(Y,V),l(V,K),l(Y,Q);for(let a=0;a<ga.length;a+=1)ga[a].m(Y,null);l(Y,X),l(Y,na),$a&&$a.m(na,null),i(a,ra,n),i(a,la,n),J(ia,la,null),l(la,ua),J(ha,la,null),da=!0},p(a,[t]){if((!da||1&t)&&n!==(n=a[0]+" | Tan Li Hau")&&(document.title=n),(!da||2&t)&&E(s,"content",a[1]),(!da||1&t)&&E(o,"content",a[0]),(!da||2&t)&&E(c,"content",a[1]),(!da||1&t)&&E(L,"content",a[0]),(!da||2&t)&&E(N,"content",a[1]),4&t){let n;for(ma=a[2],n=0;n<ma.length;n+=1){const s=oa(a,ma,n);va[n]?va[n].p(s,t):(va[n]=ca(s),va[n].c(),va[n].m(x.parentNode,x))}for(;n<va.length;n+=1)va[n].d(1);va.length=ma.length}if((!da||3&t)&&fa!==(fa=`<script type="application/ld+json">${JSON.stringify({"@context":"https://schema.org","@type":"Article",author:a[3],copyrightHolder:a[3],copyrightYear:"2020",creator:a[3],publisher:a[3],description:a[1],headline:a[0],name:a[0],inLanguage:"en"})}<\/script>`)&&D.p(fa),(!da||1&t)&&ka!==(ka=`<script type="application/ld+json">${JSON.stringify({"@context":"https://schema.org","@type":"BreadcrumbList",description:"Breadcrumbs list",name:"Breadcrumbs",itemListElement:[{"@type":"ListItem",item:{"@id":"https://lihautan.com",name:"Homepage"},position:1},{"@type":"ListItem",item:{"@id":"https%3A%2F%2Flihautan.com%2Fcompile-svelte-in-your-head-part-2",name:a[0]},position:2}]})}<\/script>`)&&I.p(ka),(!da||1&t)&&w(K,a[0]),4&t){let n;for(Ea=a[2],n=0;n<Ea.length;n+=1){const s=ea(a,Ea,n);ga[n]?ga[n].p(s,t):(ga[n]=pa(s),ga[n].c(),ga[n].m(Y,X))}for(;n<ga.length;n+=1)ga[n].d(1);ga.length=Ea.length}$a&&$a.p&&16&t&&r($a,ba,a,a[4],t,null,null)},i(a){da||(U(q.$$.fragment,a),U($a,a),U(ia.$$.fragment,a),U(ha.$$.fragment,a),da=!0)},o(a){G(q.$$.fragment,a),G($a,a),G(ia.$$.fragment,a),G(ha.$$.fragment,a),da=!1},d(a){u(s),u(t),u(e),u(o),u(c),u(f),u(O),u(T),u(L),u(N),u(P),h(va,a),u(x),u(C),u(A),a&&D.d(),u(j),a&&I.d(),a&&u(R),a&&u(M),a&&u(_),z(q,a),a&&u(W),a&&u(Y),h(ga,a),$a&&$a.d(a),a&&u(ra),a&&u(la),z(ia),z(ha)}}}function la(a,n,s){let{title:t=""}=n,{description:e=""}=n,{tags:o=[]}=n;const c={"@type":"Person",name:"Tan Li Hau"};let{$$slots:p={},$$scope:r}=n;return a.$set=a=>{"title"in a&&s(0,t=a.title),"description"in a&&s(1,e=a.description),"tags"in a&&s(2,o=a.tags),"$$scope"in a&&s(4,r=a.$$scope)},[t,e,o,c,r,p]}class ia extends V{constructor(a){super(),Y(this,a,la,ra,c,{title:0,description:1,tags:2})}}function ua(n){let s,t,e,o,c,p,r,h,f,v,w,O,S,T,L,N,P,x,C,D,A,I,j,R,M,H,_,q,U,G,B,F,J,z,W,Y,V,K,Z,Q,X,aa,na,sa,ta,ea,oa,ca,pa,ra,la,ia,ua,ha,da,fa,ka,ma,va,Ea,ga,ba,$a,ya,wa,Oa,Sa,Ta,La,Na,Pa,xa,Ca,Da,Aa,Ia,ja,Ra,Ma,Ha,_a,qa,Ua,Ga,Ba,Fa,Ja,za,Wa,Ya,Va,Ka,Za,Qa,Xa,an,nn,sn,tn,en,on,cn,pn,rn,ln,un,hn,dn,fn,kn,mn,vn,En,gn,bn,$n,yn,wn,On,Sn,Tn,Ln,Nn,Pn,xn,Cn,Dn,An,In,jn,Rn,Mn,Hn,_n,qn,Un,Gn,Bn,Fn,Jn,zn,Wn,Yn,Vn,Kn,Zn,Qn,Xn,as,ns,ss,ts,es,os,cs,ps,rs,ls,is,us,hs,ds,fs,ks,ms,vs,Es,gs,bs,$s,ys,ws,Os,Ss,Ts,Ls,Ns,Ps,xs,Cs,Ds,As,Is,js,Rs,Ms,Hs,_s,qs,Us,Gs,Bs,Fs,Js,zs,Ws,Ys,Vs,Ks,Zs,Qs,Xs,at,nt,st,tt,et,ot,ct,pt,rt,lt,it,ut,ht,dt,ft,kt,mt,vt,Et,gt,bt,$t,yt,wt,Ot,St,Tt,Lt,Nt,Pt,xt,Ct,Dt,At,It,jt,Rt,Mt,Ht,_t,qt,Ut,Gt,Bt,Ft,Jt,zt,Wt,Yt,Vt,Kt,Zt,Qt,Xt,ae,ne,se,te,ee,oe,ce,pe,re,le,ie,ue,he,de,fe,ke,me,ve,Ee,ge,be,$e,ye,we,Oe,Se,Te,Le,Ne,Pe,xe,Ce,De,Ae,Ie,je,Re,Me,He,_e,qe,Ue,Ge,Be,Fe,Je,ze,We,Ye,Ve,Ke,Ze,Qe,Xe,ao,no,so,to,eo,oo,co,po,ro,lo,io,uo,ho,fo,ko,mo,vo,Eo,go,bo,$o,yo,wo,Oo,So,To,Lo,No,Po,xo,Co,Do,Ao,Io,jo,Ro,Mo,Ho,_o,qo,Uo,Go,Bo,Fo,Jo,zo,Wo,Yo,Vo,Ko,Zo,Qo,Xo,ac,nc,sc,tc,ec,oc,cc,pc,rc,lc,ic,uc,hc,dc,fc,kc,mc,vc,Ec,gc,bc,$c,yc,wc,Oc,Sc,Tc,Lc,Nc,Pc,xc,Cc,Dc,Ac,Ic,jc,Rc,Mc,Hc,_c,qc,Uc,Gc,Bc,Fc,Jc,zc,Wc,Yc,Vc,Kc,Zc,Qc,Xc,ap,np,sp,tp,ep,op,cp,pp,rp,lp,ip,up,hp,dp,fp,kp,mp,vp,Ep,gp,bp,$p,yp,wp,Op,Sp,Tp,Lp,Np,Pp,xp,Cp,Dp,Ap,Ip,jp,Rp,Mp,Hp,_p,qp,Up,Gp,Bp,Fp,Jp,zp,Wp,Yp,Vp,Kp,Zp,Qp,Xp,ar,nr,sr,tr,er,or,cr,pr,rr,lr,ir,ur,hr,dr,fr,kr,mr,vr,Er,gr,br,$r,yr,wr,Or,Sr,Tr,Lr,Nr,Pr,xr,Cr,Dr,Ar,Ir,jr,Rr,Mr,Hr,_r,qr,Ur,Gr,Br,Fr,Jr,zr,Wr,Yr,Vr,Kr,Zr,Qr,Xr,al,nl,sl,tl,el,ol,cl,pl,rl,ll,il,ul,hl,dl,fl,kl,ml,vl,El,gl,bl,$l,yl,wl,Ol,Sl,Tl,Ll,Nl,Pl,xl,Cl,Dl,Al,Il,jl,Rl,Ml,Hl,_l,ql,Ul,Gl,Bl,Fl,Jl,zl,Wl,Yl,Vl,Kl,Zl,Ql,Xl,ai,ni,si,ti,ei,oi,ci,pi,ri,li,ii,ui,hi,di,fi,ki,mi,vi,Ei,gi,bi,$i,yi,wi,Oi,Si,Ti,Li,Ni,Pi,xi,Ci,Di,Ai,Ii,ji,Ri,Mi,Hi,_i,qi,Ui,Gi,Bi,Fi,Ji,zi,Wi,Yi,Vi,Ki,Zi,Qi,Xi,au,nu,su,tu,eu,ou,cu,pu,ru,lu,iu,uu,hu,du,fu,ku,mu,vu,Eu,gu,bu,$u,yu,wu,Ou,Su,Tu,Lu,Nu,Pu,xu,Cu,Du,Au,Iu,ju,Ru,Mu,Hu,_u,qu,Uu,Gu,Bu,Fu,Ju,zu,Wu,Yu,Vu,Ku,Zu,Qu,Xu,ah,nh,sh,th,eh,oh,ch,ph,rh,lh,ih,uh,hh,dh,fh,kh,mh,vh,Eh,gh,bh,$h,yh,wh,Oh,Sh,Th,Lh,Nh,Ph,xh,Ch,Dh,Ah,Ih,jh,Rh,Mh,Hh,_h,qh,Uh,Gh,Bh,Fh,Jh,zh,Wh,Yh,Vh,Kh,Zh,Qh,Xh,ad,nd,sd,td,ed,od,cd,pd,rd,ld,id,ud,hd,dd,fd,kd,md,vd,Ed,gd,bd,$d,yd,wd,Od,Sd,Td,Ld,Nd,Pd,xd,Cd,Dd,Ad,Id,jd,Rd,Md,Hd,_d,qd,Ud,Gd,Bd,Fd,Jd,zd,Wd,Yd,Vd,Kd,Zd,Qd,Xd,af,nf,sf,tf,ef,of,cf,pf,rf,lf,uf,hf,df,ff,kf,mf,vf,Ef,gf,bf,$f,yf,wf,Of,Sf,Tf,Lf,Nf,Pf,xf,Cf,Df,Af,If,jf,Rf,Mf,Hf,_f,qf,Uf,Gf,Bf,Ff,Jf,zf,Wf,Yf,Vf,Kf,Zf,Qf,Xf,ak,nk,sk,tk,ek,ok,ck,pk,rk,lk,ik,uk,hk,dk,fk,kk,mk,vk,Ek,gk,bk,$k,yk,wk,Ok,Sk,Tk,Lk,Nk,Pk,xk,Ck,Dk,Ak,Ik,jk,Rk,Mk,Hk,_k,qk,Uk,Gk,Bk,Fk,Jk,zk,Wk,Yk,Vk,Kk,Zk,Qk,Xk,am,nm,sm,tm,em,om,cm,pm,rm,lm,im,um,hm,dm,fm,km,mm,vm,Em,gm,bm,$m,ym,wm,Om,Sm,Tm,Lm,Nm,Pm,xm,Cm,Dm,Am,Im,jm,Rm,Mm,Hm,_m,qm,Um,Gm,Bm,Fm,Jm,zm,Wm,Ym,Vm,Km,Zm,Qm,Xm,av,nv,sv,tv,ev,ov,cv,pv,rv,lv,iv,uv,hv,dv,fv,kv,mv,vv,Ev,gv,bv,$v,yv,wv,Ov,Sv,Tv,Lv,Nv,Pv,xv,Cv,Dv,Av,Iv,jv,Rv,Mv,Hv,_v,qv,Uv,Gv,Bv,Fv,Jv,zv,Wv,Yv,Vv,Kv,Zv,Qv,Xv,aE,nE,sE,tE,eE,oE,cE,pE,rE,lE,iE,uE,hE,dE,fE,kE,mE,vE,EE,gE,bE,$E,yE,wE,OE,SE,TE,LE,NE,PE,xE,CE,DE,AE,IE,jE,RE,ME,HE,_E,qE,UE,GE,BE,FE,JE,zE,WE,YE,VE,KE,ZE,QE,XE,ag,ng,sg,tg,eg,og,cg,pg,rg,lg,ig,ug,hg,dg,fg,kg,mg,vg,Eg,gg,bg,$g,yg,wg,Og,Sg,Tg,Lg,Ng,Pg,xg,Cg,Dg,Ag,Ig,jg,Rg,Mg,Hg,_g,qg,Ug,Gg,Bg,Fg,Jg,zg,Wg,Yg,Vg,Kg,Zg,Qg,Xg,ab,nb,sb,tb,eb,ob,cb,pb,rb,lb,ib,ub,hb,db,fb,kb,mb,vb,Eb,gb,bb,$b,yb,wb,Ob,Sb,Tb,Lb,Nb,Pb,xb,Cb,Db,Ab,Ib,jb,Rb,Mb,Hb,_b,qb,Ub,Gb,Bb,Fb,Jb,zb,Wb,Yb,Vb,Kb,Zb,Qb,Xb,a$,n$,s$,t$,e$,o$,c$,p$,r$,l$,i$,u$,h$,d$,f$,k$,m$,v$,E$,g$,b$,$$,y$,w$,O$,S$,T$,L$,N$,P$,x$,C$,D$,A$,I$,j$,R$,M$,H$,_$,q$,U$,G$,B$,F$,J$,z$,W$,Y$,V$,K$,Z$,Q$,X$,ay,ny,sy,ty,ey,oy,cy,py,ry,ly,iy,uy,hy,dy,fy,ky,my,vy,Ey,gy,by,$y,yy,wy,Oy,Sy,Ty,Ly,Ny,Py,xy,Cy,Dy,Ay,Iy,jy,Ry,My,Hy,_y,qy,Uy,Gy,By,Fy,Jy,zy,Wy,Yy,Vy,Ky,Zy,Qy,Xy,aw,nw,sw,tw,ew,ow;return{c(){s=d("section"),t=d("ul"),e=d("li"),o=d("a"),c=k("Pre v3.16.0"),p=d("ul"),r=d("li"),h=d("a"),f=k("\\$\\$.ctx"),v=d("li"),w=d("a"),O=k("\\$\\$.dirty"),S=d("li"),T=d("a"),L=k("\\$\\$invalidate"),N=d("li"),P=d("a"),x=k("schedule_update"),C=d("ul"),D=d("li"),A=d("a"),I=k("tl/dr:"),j=d("li"),R=d("a"),M=k("v3.16.0"),H=d("ul"),_=d("li"),q=d("a"),U=k("Bitmask"),G=d("li"),B=d("a"),F=k("Bitmask in Svelte"),J=d("ul"),z=d("li"),W=d("a"),Y=k("Destructuring  "),V=d("li"),K=d("a"),Z=k("tl/dr:"),Q=d("li"),X=d("a"),aa=k("Reactive Declaration"),na=d("ul"),sa=d("ul"),ta=d("li"),ea=d("a"),oa=k("1. Execution of all reactive declarations and statements are batched"),ca=d("li"),pa=d("a"),ra=k("2. The value of reactive variable outside of reactive declarations and statements may not be up to date"),la=d("li"),ia=d("a"),ua=k("Sorting of reactive declarations and statements"),ha=d("li"),da=d("a"),fa=k("Reactive variable that is not reactive"),ka=d("li"),ma=d("a"),va=k("Summary"),Ea=d("ul"),ga=d("ul"),ba=d("li"),$a=d("a"),ya=k("1. Svelte keeps track of which variables are dirty and batched the DOM updates."),wa=d("li"),Oa=d("a"),Sa=k("2. Using bitmask, Svelte able to generate a more compact compiled code."),Ta=d("li"),La=d("a"),Na=k("3. Reactive declarations and statements are executed in batch, just like DOM updates"),Pa=d("li"),xa=d("a"),Ca=k("Closing Note"),Da=d("li"),Aa=d("a"),Ia=k("Further Resources"),ja=m(),Ra=d("p"),Ma=d("strong"),Ha=k("⬅ ⬅  Previously in "),_a=d("a"),qa=k("Part 1"),Ua=k("."),Ga=m(),Ba=d("p"),Fa=d("a"),Ja=k("Previously"),za=k(", when I mentioned the "),Wa=d("code"),Ya=k("$$invalidate"),Va=k(" function, I explained that the "),Ka=d("code"),Za=k("$$invalidate"),Qa=k(" function works conceptually like the following:"),Xa=m(),an=d("pre"),nn=m(),sn=d("p"),tn=k("but that's not the exact implementation of the "),en=d("code"),on=k("$$invaldiate"),cn=k(" function. So in this article, we are going to look at how "),pn=d("code"),rn=k("$$invalidate"),ln=k(" is implemented in Svelte."),un=m(),hn=d("p"),dn=k("At the point of writing, Svelte is at "),fn=d("a"),kn=k("v3.20.1"),mn=k("."),vn=m(),En=d("section"),gn=d("h2"),bn=d("a"),$n=k("Pre v3.16.0"),yn=m(),wn=d("p"),On=k("There's a big optimisation that changes the underlying implementation of the "),Sn=d("code"),Tn=k("$$invalidate"),Ln=k(" function in "),Nn=d("a"),Pn=k("v3.16.0"),xn=k(", namely in "),Cn=d("a"),Dn=k("#3945"),An=k(". The underlying concept doesn't change, but it'll be much easier to understand about "),In=d("code"),jn=k("$$invalidate"),Rn=k(" prior the change and learn about the optimisation change separately."),Mn=m(),Hn=d("p"),_n=k("Let's explain some of the variables that you are going to see, some of which was introduced in "),qn=d("a"),Un=k("Part 1"),Gn=k(":"),Bn=m(),Fn=d("section"),Jn=d("h3"),zn=d("a"),Wn=k("\\$\\$.ctx"),Yn=m(),Vn=d("p"),Kn=k("There's no official name for it. You can call it "),Zn=d("strong"),Qn=k("context"),Xn=k(" as it is the context which the template is based on to render onto the DOM."),as=m(),ns=d("p"),ss=k("I called it "),ts=d("a"),es=k("instance variables"),os=k(". As it is a JavaScript Object that contains all the variables that you:"),cs=m(),ps=d("ul"),rs=d("li"),ls=k("declared in the "),is=d("code"),us=k("<script>"),hs=k(" tag"),ds=m(),fs=d("li"),ks=k("mutated or reassigned"),ms=m(),vs=d("li"),Es=k("referenced in the template"),gs=m(),bs=d("p"),$s=k("that belongs to a component instance."),ys=m(),ws=d("p"),Os=k("The instance variables themselves can be of a primitive value, object, array or function."),Ss=m(),Ts=d("p"),Ls=k("The "),Ns=d("code"),Ps=k("instance"),xs=k(" function creates and returns the "),Cs=d("code"),Ds=k("ctx"),As=k(" object."),Is=m(),js=d("p"),Rs=k("Functions declared in the "),Ms=d("code"),Hs=k("<script>"),_s=k(" tag will refer to the instance variable that is scoped withn the "),qs=d("code"),Us=k("instance"),Gs=k(" function closure:"),Bs=m(),Fs=d("pre"),Js=m(),zs=d("p"),Ws=d("a"),Ys=k("Svelte REPL"),Vs=m(),Ks=d("pre"),Zs=m(),Qs=d("p"),Xs=k("Whenever a new instance of a component is created, the "),at=d("code"),nt=k("instance"),st=k(" function is called and the "),tt=d("code"),et=k("ctx"),ot=k(" object is created and captured within a new closure scope."),ct=m(),pt=d("section"),rt=d("h3"),lt=d("a"),it=k("\\$\\$.dirty"),ut=m(),ht=d("p"),dt=d("code"),ft=k("$$.dirty"),kt=k(" is a object that is used to track which instance variable had just changed and needs to be updated onto the DOM."),mt=m(),vt=d("p"),Et=k("For example, in the following Svelte component:"),gt=m(),bt=d("pre"),$t=m(),yt=d("p"),wt=d("a"),Ot=k("Svelte REPL"),St=m(),Tt=d("p"),Lt=k("The initial "),Nt=d("code"),Pt=k("$$.dirty"),xt=k(" is "),Ct=d("code"),Dt=k("null"),At=k(" ("),It=d("a"),jt=k("source code"),Rt=k(")."),Mt=m(),Ht=d("p"),_t=k("If you clicked on the "),qt=d("strong"),Ut=k('"+ Agility"'),Gt=k(" button, "),Bt=d("code"),Ft=k("$$.dirty"),Jt=k(" will turn into:"),zt=m(),Wt=d("pre"),Yt=m(),Vt=d("p"),Kt=k("If you clicked on the "),Zt=d("strong"),Qt=k('"Level Up"'),Xt=k(" button, "),ae=d("code"),ne=k("$$.dirty"),se=k(" will turn into:"),te=m(),ee=d("pre"),oe=m(),ce=d("p"),pe=d("code"),re=k("$$.dirty"),le=k(" is useful for Svelte, so that it doesn't update the DOM unnecessarily."),ie=m(),ue=d("p"),he=k("If you looked at the "),de=d("strong"),fe=k("p (u_p_date)"),ke=k(" function of the compiled code, you will see Svelte checks whether a variable is marked in "),me=d("code"),ve=k("$$.dirty"),Ee=k(", before updating the DOM."),ge=m(),be=d("pre"),$e=m(),ye=d("p"),we=k("After Svelte updates the DOM, the "),Oe=d("code"),Se=k("$$.dirty"),Te=k(" is set back to "),Le=d("code"),Ne=k("null"),Pe=k(" to indicate all changes has been applied onto the DOM."),xe=m(),Ce=d("section"),De=d("h3"),Ae=d("a"),Ie=k("\\$\\$invalidate"),je=m(),Re=d("p"),Me=d("code"),He=k("$$invalidate"),_e=k(" is the secret behind reactivity in Svelte."),qe=m(),Ue=d("p"),Ge=k("Whenever a variable is"),Be=m(),Fe=d("ul"),Je=d("li"),ze=k("reassigned "),We=d("code"),Ye=k("(foo = 1)"),Ve=m(),Ke=d("li"),Ze=k("mutated "),Qe=d("code"),Xe=k("(foo.bar = 1)"),ao=m(),no=d("p"),so=k("Svelte will wrap the assignment or update around with the "),to=d("code"),eo=k("$$invalidate"),oo=k(" function:"),co=m(),po=d("pre"),ro=m(),lo=d("p"),io=k("the "),uo=d("code"),ho=k("$$invalidate"),fo=k(" function will:"),ko=m(),mo=d("ol"),vo=d("li"),Eo=k("update the variable in "),go=d("code"),bo=k("$$.ctx"),$o=m(),yo=d("li"),wo=k("mark the variable in "),Oo=d("code"),So=k("$$.dirty"),To=m(),Lo=d("li"),No=k("schedule an update"),Po=m(),xo=d("li"),Co=k("return the value of the assignment or update expression"),Do=m(),Ao=d("pre"),Io=m(),jo=d("p"),Ro=d("a"),Mo=k("Source code"),Ho=m(),_o=d("p"),qo=k("One interesting note about the function "),Uo=d("code"),Go=k("$$invalidate"),Bo=k(" is that, it wraps around the assignment or update expression and returns what the expression evaluates to."),Fo=m(),Jo=d("p"),zo=k("This makes "),Wo=d("code"),Yo=k("$$invalidate"),Vo=k(" chainable:"),Ko=m(),Zo=d("pre"),Qo=m(),Xo=d("p"),ac=k("It seemed complex when there's a lot of assignment or update expressions in 1 statement! 🙈"),nc=m(),sc=d("p"),tc=k("The 2nd argument of "),ec=d("code"),oc=k("$$invalidate"),cc=k(" is the assignment or update expressions verbatim. But if it contains any assignment or update sub-expressions, we recursively wrap it with "),pc=d("code"),rc=k("$$invalidate"),lc=k("."),ic=m(),uc=d("p"),hc=k("In case where the assignment expression changes a property of an object, we pass the object in as a 3rd argument of the "),dc=d("code"),fc=k("$$invalidate"),kc=k(" function, eg:"),mc=m(),vc=d("pre"),Ec=m(),gc=d("p"),bc=k("So that, we update the "),$c=d("code"),yc=k('"obj"'),wc=k(" variable to "),Oc=d("code"),Sc=k("obj"),Tc=k(" instead of the value of the 2nd argument, "),Lc=d("code"),Nc=k('"hello"'),Pc=k("."),xc=m(),Cc=d("section"),Dc=d("h3"),Ac=d("a"),Ic=k("schedule_update"),jc=m(),Rc=d("p"),Mc=d("code"),Hc=k("schedule_update"),_c=k(" schedules Svelte to update the DOM with the changes made thus far."),qc=m(),Uc=d("p"),Gc=k("Svelte, at the point of writing ("),Bc=d("a"),Fc=k("v3.20.1"),Jc=k("), uses "),zc=d("a"),Wc=k("microtask queue"),Yc=k(" to batch change updates. The actual DOM update happens in the next microtask, so that any synchronous "),Vc=d("code"),Kc=k("$$invalidate"),Zc=k(" operations that happen within the same task get batched into the next DOM update."),Qc=m(),Xc=d("p"),ap=k("To schedule a next microtask, Svelte uses the Promise callback."),np=m(),sp=d("pre"),tp=m(),ep=d("p"),op=k("In "),cp=d("code"),pp=k("flush"),rp=k(", we call update for each component marked dirty:"),lp=m(),ip=d("pre"),up=m(),hp=d("p"),dp=d("a"),fp=k("Source code"),kp=m(),mp=d("p"),vp=k("So, if you write a Svelte component like this:"),Ep=m(),gp=d("pre"),bp=m(),$p=d("p"),yp=d("a"),wp=k("Svelte REPL"),Op=m(),Sp=d("p"),Tp=k("The DOM update for the "),Lp=d("code"),Np=k("givenName"),Pp=k(" and "),xp=d("code"),Cp=k("familyName"),Dp=k(" happens in the same microtask:"),Ap=m(),Ip=d("ol"),jp=d("li"),Rp=k("Click on the "),Mp=d("strong"),Hp=k('"Update"'),_p=k(" to call the "),qp=d("code"),Up=k("update"),Gp=k(" function"),Bp=m(),Fp=d("li"),Jp=d("code"),zp=k("$$invalidate('givenName', givenName = 'Li Hau')"),Wp=m(),Yp=d("li"),Vp=k("Mark the variable "),Kp=d("code"),Zp=k("givenName"),Qp=k(" dirty, "),Xp=d("code"),ar=k("$$.dirty['givenName'] = true"),nr=m(),sr=d("li"),tr=k("Schedule an update, "),er=d("code"),or=k("schedule_update()"),cr=m(),pr=d("li"),rr=k("Since it's the first update in the call stack, push the "),lr=d("code"),ir=k("flush"),ur=k(" function into the microtask queue"),hr=m(),dr=d("li"),fr=d("code"),kr=k("$$invalidate('familyName', familyName = 'Tan')"),mr=m(),vr=d("li"),Er=k("Mark the variable "),gr=d("code"),br=k("familyName"),$r=k(" dirty, "),yr=d("code"),wr=k("$$.dirty['familyName'] = true"),Or=m(),Sr=d("li"),Tr=k("Schedule an update, "),Lr=d("code"),Nr=k("schedule_update()"),Pr=m(),xr=d("li"),Cr=k("Since "),Dr=d("code"),Ar=k("update_scheduled = true"),Ir=k(", do nothing."),jr=m(),Rr=d("li"),Mr=d("strong"),Hr=k("-- End of task --"),_r=m(),qr=d("li"),Ur=d("strong"),Gr=k("-- Start of microtask--"),Br=m(),Fr=d("li"),Jr=d("code"),zr=k("flush()"),Wr=k(" calls "),Yr=d("code"),Vr=k("update()"),Kr=k(" for each component marked dirty"),Zr=m(),Qr=d("li"),Xr=k("Calls "),al=d("code"),nl=k("$$.fragment.p($$.dirty, $$.ctx)"),sl=k("."),tl=d("ul"),el=d("li"),ol=d("code"),cl=k("$$.dirty"),pl=k(" is now "),rl=d("code"),ll=k("{ givenName: true, familyName: true }"),il=m(),ul=d("li"),hl=d("code"),dl=k("$$.ctx"),fl=k(" is now "),kl=d("code"),ml=k("{ givenName: 'Li Hau', familyName: 'Tan' }"),vl=m(),El=d("li"),gl=k("In "),bl=d("code"),$l=k("function p(dirty, ctx)"),yl=k(","),wl=d("ul"),Ol=d("li"),Sl=k("Update the 1st text node to "),Tl=d("code"),Ll=k("$$.ctx['givenName']"),Nl=k(" if "),Pl=d("code"),xl=k("$$.dirty['givenName'] === true"),Cl=m(),Dl=d("li"),Al=k("Update the 2nd text node to "),Il=d("code"),jl=k("$$.ctx['familyName']"),Rl=k(" if "),Ml=d("code"),Hl=k("$$.dirty['familyName'] === true"),_l=m(),ql=d("li"),Ul=k("Resets the "),Gl=d("code"),Bl=k("$$.dirty"),Fl=k(" to "),Jl=d("code"),zl=k("null"),Wl=m(),Yl=d("li"),Vl=k("..."),Kl=m(),Zl=d("li"),Ql=d("strong"),Xl=k("-- End of microtask--"),ai=m(),ni=d("section"),si=d("h4"),ti=d("a"),ei=k("tl/dr:"),oi=m(),ci=d("ul"),pi=d("li"),ri=k("For each assignment or update, Svelte calls "),li=d("code"),ii=k("$$invalidate"),ui=k(" to update the variable in "),hi=d("code"),di=k("$$.ctx"),fi=k(" and mark the variable dirty in "),ki=d("code"),mi=k("$$.dirty"),vi=k("."),Ei=m(),gi=d("li"),bi=k("The acutal DOM update is batched into the next microtask queue."),$i=m(),yi=d("li"),wi=k("To update the DOM for each component, the component "),Oi=d("code"),Si=k("$$.fragment.p($$.diry, $$.ctx)"),Ti=k(" is called."),Li=m(),Ni=d("li"),Pi=k("After the DOM update, the "),xi=d("code"),Ci=k("$$.dirty"),Di=k(" is reset to "),Ai=d("code"),Ii=k("null"),ji=k("."),Ri=m(),Mi=d("section"),Hi=d("h2"),_i=d("a"),qi=k("v3.16.0"),Ui=m(),Gi=d("p"),Bi=k("One big change in v3.16.0 is the PR "),Fi=d("a"),Ji=k("#3945"),zi=k(", namely "),Wi=d("strong"),Yi=k("bitmask-based change tracking"),Vi=k("."),Ki=m(),Zi=d("p"),Qi=k("Instead of marking the variable dirty using an object:"),Xi=m(),au=d("pre"),nu=m(),su=d("p"),tu=k("Svelte assign each variable an index:"),eu=m(),ou=d("pre"),cu=m(),pu=d("p"),ru=k("and uses "),lu=d("a"),iu=k("bitmask"),uu=k(" to store the dirty information:"),hu=m(),du=d("pre"),fu=m(),ku=d("p"),mu=k("which is far more compact than the previous compiled code."),vu=m(),Eu=d("section"),gu=d("h3"),bu=d("a"),$u=k("Bitmask"),yu=m(),wu=d("p"),Ou=k("For those who don't understand, allow me to quickly explain what it is."),Su=m(),Tu=d("p"),Lu=k("Of course, if you want to learn more about it, feel free to read a more detailed explanation, like "),Nu=d("a"),Pu=k("this"),xu=k(" and "),Cu=d("a"),Du=k("this"),Au=k("."),Iu=m(),ju=d("p"),Ru=k("The most compact way of representing a group of "),Mu=d("code"),Hu=k("true"),_u=k(" or "),qu=d("code"),Uu=k("false"),Gu=k(" is to use bits. If the bit is "),Bu=d("code"),Fu=k("1"),Ju=k(" it is "),zu=d("code"),Wu=k("true"),Yu=k(" and if it is "),Vu=d("code"),Ku=k("0"),Zu=k(" it is "),Qu=d("code"),Xu=k("false"),ah=k("."),nh=m(),sh=d("p"),th=k("A number can be represented in binary, "),eh=d("strong"),oh=k("5"),ch=k(" is "),ph=d("code"),rh=k("0b0101"),lh=k(" in binary."),ih=m(),uh=d("p"),hh=k("If "),dh=d("strong"),fh=k("5"),kh=k(" is represented in a 4-bit binary, then it can store 4 boolean values, with the 0th and 2nd bit as "),mh=d("code"),vh=k("true"),Eh=k(" and 1st and 3rd bit as "),gh=d("code"),bh=k("false"),$h=k(", (reading from the right to left, from "),yh=d("a"),wh=k("least significant bit"),Oh=k(" to the "),Sh=d("a"),Th=k("most significant bit"),Lh=k(")."),Nh=m(),Ph=d("p"),xh=d("strong"),Ch=k("How many boolean values can a number store?"),Dh=m(),Ah=d("p"),Ih=k("That depends on the language, a 16-bit integer in Java can store 16 boolean values."),jh=m(),Rh=d("p"),Mh=k("In JavaScript, numbers can are "),Hh=d("a"),_h=k("represented in 64 bits"),qh=k(". However, when using "),Uh=d("a"),Gh=k("bitwise operations"),Bh=k(" on the number, JavaScript will treat the number as 32 bits."),Fh=m(),Jh=d("p"),zh=k("To inspect or modify the boolean value stored in a number, we use "),Wh=d("a"),Yh=k("bitwise operations"),Vh=k("."),Kh=m(),Zh=d("pre"),Qh=m(),Xh=d("p"),ad=k("The 2nd operand we use in the bitwise operation, is like a "),nd=d("a"),sd=k("mask"),td=k(" that allow us to target a specific bit in the 1st number, that stores our boolean values."),ed=m(),od=d("p"),cd=k("We call the mask, "),pd=d("strong"),rd=k("bitmask"),ld=k("."),id=m(),ud=d("section"),hd=d("h3"),dd=d("a"),fd=k("Bitmask in Svelte"),kd=m(),md=d("p"),vd=k("As mentioned earlier, we assign each variable an index:"),Ed=m(),gd=d("pre"),bd=m(),$d=d("p"),yd=k("So instead of returning the instance variable as an JavaScript Object, we now return it as an JavaScript Array:"),wd=m(),Od=d("pre"),Sd=m(),Td=d("p"),Ld=k("The variable is accessed via "),Nd=d("strong"),Pd=k("index"),xd=k(", "),Cd=d("code"),Dd=k("$$.ctx[index]"),Ad=k(", instead of "),Id=d("strong"),jd=k("variable name"),Rd=k(":"),Md=m(),Hd=d("pre"),_d=m(),qd=d("p"),Ud=k("The "),Gd=d("code"),Bd=k("$$invalidate"),Fd=k(" function works the same, except it takes in "),Jd=d("strong"),zd=k("index"),Wd=k(" instead of "),Yd=d("strong"),Vd=k("variable name"),Kd=k(":"),Zd=m(),Qd=d("pre"),Xd=m(),af=d("p"),nf=d("code"),sf=k("$$.dirty"),tf=k(" now stores a list of numbers. Each number carries 31 boolean values, each boolean value indicates whether the variable of that index is dirty or not."),ef=m();of=d("p"),cf=k("To set a variable as dirty, we use bitwise operation:"),pf=m(),rf=d("pre"),lf=m(),uf=d("p"),hf=k("And to verify whether a variable is dirty, we use bitwise operation too!"),df=m(),ff=d("pre"),kf=m(),mf=d("p"),vf=k("With using bitmask, "),Ef=d("code"),gf=k("$$.dirty"),bf=k(" is now reset to "),$f=d("code"),yf=k("[-1]"),wf=k(" instead of "),Of=d("code"),Sf=k("null"),Tf=k("."),Lf=m(),Nf=d("p"),Pf=d("strong"),xf=k("Trivia:"),Cf=m(),Df=d("code"),Af=k("-1"),If=k(" is "),jf=d("code"),Rf=k("0b1111_1111"),Mf=k(" in binary, where all the bits are "),Hf=d("code"),_f=k("1"),qf=k("."),Uf=m(),Gf=d("section"),Bf=d("h4"),Ff=d("a"),Jf=k("Destructuring "),zf=d("strong"),Wf=k("$$.dirty"),Yf=m(),Vf=d("p"),Kf=k("One code-size optimisation that Svelte does is to always destructure the "),Zf=d("code"),Qf=k("dirty"),Xf=k(" array in the "),ak=d("strong"),nk=k("u_p_date function"),sk=k(" if there's less than 32 variables, since we will always access "),tk=d("code"),ek=k("dirty[0]"),ok=k(" anyway:"),ck=m(),pk=d("pre"),rk=m(),lk=d("section"),ik=d("h4"),uk=d("a"),hk=k("tl/dr:"),dk=m(),fk=d("ul"),kk=d("li"),mk=k("The underlying mechanism for "),vk=d("code"),Ek=k("$$invalidate"),gk=k(" and "),bk=d("code"),$k=k("schedule_update"),yk=k(" does not change"),wk=m(),Ok=d("li"),Sk=k("Using bitmask, the compiled code is much compact"),Tk=m(),Lk=d("section"),Nk=d("h2"),Pk=d("a"),xk=k("Reactive Declaration"),Ck=m(),Dk=d("p"),Ak=k("Svelte allow us to declare reactive values via the "),Ik=d("a"),jk=k("labeled statement"),Rk=k(", "),Mk=d("code"),Hk=k("$:"),_k=m(),qk=d("pre"),Uk=m(),Gk=d("p"),Bk=d("a"),Fk=k("Svelte REPL"),Jk=m(),zk=d("p"),Wk=k("If you look at the compiled output, you would find out that the declarative statements appeared in the "),Yk=d("a"),Vk=d("code"),Kk=k("instance"),Zk=k(" function"),Qk=k(":"),Xk=m(),am=d("pre"),nm=m(),sm=d("p"),tm=k("Try reorder the reactive declarations and observe the change in the compiled output:"),em=m(),om=d("pre"),cm=m(),pm=d("p"),rm=d("a"),lm=k("Svelte REPL"),im=m(),um=d("pre"),hm=m(),dm=d("p"),fm=k("Some observations:"),km=m(),mm=d("ul"),vm=d("li"),Em=k("When there are reactive declarations, Svelte defines a custom "),gm=d("code"),bm=k("$$.update"),$m=k(" method."),ym=d("ul"),wm=d("li"),Om=d("code"),Sm=k("$$.update"),Tm=k(" is a "),Lm=d("a"),Nm=k("no-op function"),Pm=k(" by default. (See "),xm=d("a"),Cm=k("src/runtime/internal/Component.ts"),Dm=k(")"),Am=m(),Im=d("li"),jm=k("Svelte uses "),Rm=d("code"),Mm=k("$$invalidate"),Hm=k(" to update the value of a reactive variable too."),_m=m(),qm=d("li"),Um=k("Svelte sorts the reactive declarations and statements, based on the dependency relationship between the declarations and statements"),Gm=d("ul"),Bm=d("li"),Fm=d("code"),Jm=k("quadrupled"),zm=k(" depends on "),Wm=d("code"),Ym=k("doubled"),Vm=k(", so "),Km=d("code"),Zm=k("quadrupled"),Qm=k(" is evaluated and "),Xm=d("code"),av=k("$$invalidate"),nv=k("d after "),sv=d("code"),tv=k("doubled"),ev=k("."),ov=m(),cv=d("p"),pv=k("Since all reactive declarations and statements are grouped into the "),rv=d("code"),lv=k("$$.update"),iv=k(" method, and also the fact that Svelte will sort the declarations and statements according to their dependency relationship, it is irrelevant of the location or the order you declared them."),uv=m(),hv=d("p"),dv=k("The following component still works:"),fv=m(),kv=d("pre"),mv=m(),vv=d("p"),Ev=d("a"),gv=k("Svelte REPL"),bv=m(),$v=d("p"),yv=d("strong"),wv=k("The next thing you may ask, when is "),Ov=d("code"),Sv=k("$$.update"),Tv=k(" being called?"),Lv=m(),Nv=d("p"),Pv=k("Remember the "),xv=d("code"),Cv=k("update"),Dv=k(" function that gets called in the "),Av=d("code"),Iv=k("flush"),jv=k(" function?"),Rv=m(),Mv=d("p"),Hv=k("I put a "),_v=d("code"),qv=k("NOTE:"),Uv=k(" comment saying that it will be important later. Well, it is important now."),Gv=m(),Bv=d("pre"),Fv=m(),Jv=d("p"),zv=k("The "),Wv=d("code"),Yv=k("$$.update"),Vv=k(" function gets called "),Kv=d("strong"),Zv=k("in the same microtask"),Qv=k(" with the DOM update, right before we called the "),Xv=d("code"),aE=k("$$.fragment.p()"),nE=k(" to update the DOM."),sE=m(),tE=d("p"),eE=k("The implication of the above fact is"),oE=m(),cE=d("section"),pE=d("h4"),rE=d("a"),lE=k("1. Execution of all reactive declarations and statements are batched"),iE=m(),uE=d("p"),hE=k("Just as how DOM updates are batched, reactive declarations and statements are batched too!"),dE=m(),fE=d("pre"),kE=m(),mE=d("p"),vE=d("a"),EE=k("Svelte REPL"),gE=m(),bE=d("p"),$E=k("When "),yE=d("code"),wE=k("update()"),OE=k(" get called,"),SE=m(),TE=d("ol"),LE=d("li"),NE=k("Similar to the "),PE=d("a"),xE=k("flow described above"),CE=k(", "),DE=d("code"),AE=k("$$invalidate"),IE=k(" both "),jE=d("strong"),RE=k('"givenName"'),ME=k(" and "),HE=d("strong"),_E=k('"familyName"'),qE=k(", and schedules an update"),UE=m(),GE=d("li"),BE=d("strong"),FE=k("-- End of task --"),JE=m(),zE=d("li"),WE=d("strong"),YE=k("-- Start of microtask--"),VE=m(),KE=d("li"),ZE=d("code"),QE=k("flush()"),XE=k(" calls "),ag=d("code"),ng=k("update()"),sg=k(" for each component marked dirty"),tg=m(),eg=d("li"),og=k("Runs "),cg=d("code"),pg=k("$$.update()"),rg=d("ul"),lg=d("li"),ig=k("As "),ug=d("strong"),hg=k('"givenName"'),dg=k(" and "),fg=d("strong"),kg=k('"familyName"'),mg=k(" has changed, evaluates and "),vg=d("code"),Eg=k("$$invalidate"),gg=m(),bg=d("strong"),$g=k('"name"'),yg=m(),wg=d("li"),Og=k("As "),Sg=d("strong"),Tg=k('"name"'),Lg=k(" has changed, executes "),Ng=d("code"),Pg=k("console.log('name', name);"),xg=m(),Cg=d("li"),Dg=k("Calls "),Ag=d("code"),Ig=k("$$.fragment.p(...)"),jg=k(" to update the DOM."),Rg=m(),Mg=d("p"),Hg=k("As you can see, even though we've updated "),_g=d("code"),qg=k("givenName"),Ug=k(" and "),Gg=d("code"),Bg=k("familyName"),Fg=k(", we only evaluate "),Jg=d("code"),zg=k("name"),Wg=k(" and executes "),Yg=d("code"),Vg=k("console.log('name', name)"),Kg=m(),Zg=d("strong"),Qg=k("once"),Xg=k(" instead of twice:"),ab=m(),nb=d("pre"),sb=m(),tb=d("section"),eb=d("h4"),ob=d("a"),cb=k("2. The value of reactive variable outside of reactive declarations and statements may not be up to date"),pb=m(),rb=d("p"),lb=k("Because the reactive declarations and statements are batched and executed in the next microtask, you can't expect the value to be updated synchronously."),ib=m(),ub=d("pre"),hb=m(),db=d("p"),fb=d("a"),kb=k("Svelte REPL"),mb=m(),vb=d("p"),Eb=k("Instead, you "),gb=d("strong"),bb=k("have to"),$b=k(" refer the reactive variable in another reactive declaration or statement:"),yb=m(),wb=d("pre"),Ob=m(),Sb=d("section"),Tb=d("h3"),Lb=d("a"),Nb=k("Sorting of reactive declarations and statements"),Pb=m(),xb=d("p"),Cb=k("Svelte tries to preserve the order of reactive declarations and statements as they are declared as much as possible."),Db=m(),Ab=d("p"),Ib=k("However, if one reactive declaration or statement refers to a variable that was defined by another reactive declaration, then, "),jb=d("strong"),Rb=k("it will be inserted after the latter reactive declaration"),Mb=k(":"),Hb=m(),_b=d("pre"),qb=m(),Ub=d("section"),Gb=d("h3"),Bb=d("a"),Fb=k("Reactive variable that is not reactive"),Jb=m(),zb=d("p"),Wb=k("The Svelte compiler tracks all the variables declared in the "),Yb=d("code"),Vb=k("<script>"),Kb=k(" tag."),Zb=m(),Qb=d("p"),Xb=k("If all the variables of a reactive declaration or statement refers to, never gets mutated or reassigned, then the reactive declaration or statement will not be added into "),a$=d("code"),n$=k("$$.update"),s$=k("."),t$=m(),e$=d("p"),o$=k("For example:"),c$=m(),p$=d("pre"),r$=m(),l$=d("p"),i$=d("a"),u$=k("Svelte REPL"),h$=m(),d$=d("p"),f$=k("Since, "),k$=d("code"),m$=k("count"),v$=k(" never gets mutated or reassigned, Svelte optimises the compiled output by not defining "),E$=d("code"),g$=k("$$self.$$.update"),b$=k("."),$$=m(),y$=d("pre"),w$=m(),O$=d("section"),S$=d("h2"),T$=d("a"),L$=k("Summary"),N$=m(),P$=d("section"),x$=d("h4"),C$=d("a"),D$=k("1. Svelte keeps track of which variables are dirty and batched the DOM updates."),A$=m(),I$=d("section"),j$=d("h4"),R$=d("a"),M$=k("2. Using bitmask, Svelte able to generate a more compact compiled code."),H$=m(),_$=d("section"),q$=d("h4"),U$=d("a"),G$=k("3. Reactive declarations and statements are executed in batch, just like DOM updates"),B$=m(),F$=d("section"),J$=d("h2"),z$=d("a"),W$=k("Closing Note"),Y$=m(),V$=d("p"),K$=k("If you wish to know more, "),Z$=d("a"),Q$=k("follow me on Twitter"),X$=k("."),ay=m(),ny=d("p"),sy=k("I'll post it on Twitter when the next part is ready, where I'll be covering "),ty=d("a"),ey=k("logic blocks"),oy=k(", "),cy=d("a"),py=k("slots"),ry=k(", "),ly=d("a"),iy=k("context"),uy=k(", and many others."),hy=m(),dy=d("p"),fy=d("strong"),ky=k("⬅ ⬅  Previously in "),my=d("a"),vy=k("Part 1"),Ey=k("."),gy=m(),by=d("p"),$y=d("strong"),yy=k("➡ ➡  Continue reading on "),wy=d("a"),Oy=k("Part 3"),Sy=k("."),Ty=m(),Ly=d("section"),Ny=d("h2"),Py=d("a"),xy=k("Further Resources"),Cy=m(),Dy=d("ul"),Ay=d("li"),Iy=k("Rich Harris shares about "),jy=d("a"),Ry=k("Bitmask Tracking at Svelte Society NYC"),My=k("."),Hy=m(),_y=d("li"),qy=k("Svelte Tutorial - "),Uy=d("a"),Gy=k("Reactivity"),By=m(),Fy=d("a"),Jy=k("https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/"),zy=m(),Wy=d("li"),Yy=d("a"),Vy=k("The Art of Bitmasking"),Ky=k(" by Shakib Ahmed"),Zy=m(),Qy=d("li"),Xy=d("a"),aw=k("Bitmasks: A very esoteric (and impractical) way of managing booleans"),nw=k(" by Basti Ortiz"),sw=m(),tw=d("li"),ew=d("a"),ow=k("MDN: Bitwise Operators"),this.h()},l(a){s=b(a,"SECTION",{});var n=g(s);t=b(n,"UL",{class:!0,id:!0,role:!0,"aria-label":!0});var l=g(t);e=b(l,"LI",{});var i=g(e);o=b(i,"A",{href:!0});var d=g(o);c=$(d,"Pre v3.16.0"),d.forEach(u),i.forEach(u),p=b(l,"UL",{});var k=g(p);r=b(k,"LI",{});var m=g(r);h=b(m,"A",{href:!0});var E=g(h);f=$(E,"\\$\\$.ctx"),E.forEach(u),m.forEach(u),v=b(k,"LI",{});var cw=g(v);w=b(cw,"A",{href:!0});var pw=g(w);O=$(pw,"\\$\\$.dirty"),pw.forEach(u),cw.forEach(u),S=b(k,"LI",{});var rw=g(S);T=b(rw,"A",{href:!0});var lw=g(T);L=$(lw,"\\$\\$invalidate"),lw.forEach(u),rw.forEach(u),N=b(k,"LI",{});var iw=g(N);P=b(iw,"A",{href:!0});var uw=g(P);x=$(uw,"schedule_update"),uw.forEach(u),iw.forEach(u),C=b(k,"UL",{});var hw=g(C);D=b(hw,"LI",{});var dw=g(D);A=b(dw,"A",{href:!0});var fw=g(A);I=$(fw,"tl/dr:"),fw.forEach(u),dw.forEach(u),hw.forEach(u),k.forEach(u),j=b(l,"LI",{});var kw=g(j);R=b(kw,"A",{href:!0});var mw=g(R);M=$(mw,"v3.16.0"),mw.forEach(u),kw.forEach(u),H=b(l,"UL",{});var vw=g(H);_=b(vw,"LI",{});var Ew=g(_);q=b(Ew,"A",{href:!0});var gw=g(q);U=$(gw,"Bitmask"),gw.forEach(u),Ew.forEach(u),G=b(vw,"LI",{});var bw=g(G);B=b(bw,"A",{href:!0});var $w=g(B);F=$($w,"Bitmask in Svelte"),$w.forEach(u),bw.forEach(u),J=b(vw,"UL",{});var yw=g(J);z=b(yw,"LI",{});var ww=g(z);W=b(ww,"A",{href:!0});var Ow=g(W);Y=$(Ow,"Destructuring  "),Ow.forEach(u),ww.forEach(u),V=b(yw,"LI",{});var Sw=g(V);K=b(Sw,"A",{href:!0});var Tw=g(K);Z=$(Tw,"tl/dr:"),Tw.forEach(u),Sw.forEach(u),yw.forEach(u),vw.forEach(u),Q=b(l,"LI",{});var Lw=g(Q);X=b(Lw,"A",{href:!0});var Nw=g(X);aa=$(Nw,"Reactive Declaration"),Nw.forEach(u),Lw.forEach(u),na=b(l,"UL",{});var Pw=g(na);sa=b(Pw,"UL",{});var xw=g(sa);ta=b(xw,"LI",{});var Cw=g(ta);ea=b(Cw,"A",{href:!0});var Dw=g(ea);oa=$(Dw,"1. Execution of all reactive declarations and statements are batched"),Dw.forEach(u),Cw.forEach(u),ca=b(xw,"LI",{});var Aw=g(ca);pa=b(Aw,"A",{href:!0});var Iw=g(pa);ra=$(Iw,"2. The value of reactive variable outside of reactive declarations and statements may not be up to date"),Iw.forEach(u),Aw.forEach(u),xw.forEach(u),la=b(Pw,"LI",{});var jw=g(la);ia=b(jw,"A",{href:!0});var Rw=g(ia);ua=$(Rw,"Sorting of reactive declarations and statements"),Rw.forEach(u),jw.forEach(u),ha=b(Pw,"LI",{});var Mw=g(ha);da=b(Mw,"A",{href:!0});var Hw=g(da);fa=$(Hw,"Reactive variable that is not reactive"),Hw.forEach(u),Mw.forEach(u),Pw.forEach(u),ka=b(l,"LI",{});var _w=g(ka);ma=b(_w,"A",{href:!0});var qw=g(ma);va=$(qw,"Summary"),qw.forEach(u),_w.forEach(u),Ea=b(l,"UL",{});var Uw=g(Ea);ga=b(Uw,"UL",{});var Gw=g(ga);ba=b(Gw,"LI",{});var Bw=g(ba);$a=b(Bw,"A",{href:!0});var Fw=g($a);ya=$(Fw,"1. Svelte keeps track of which variables are dirty and batched the DOM updates."),Fw.forEach(u),Bw.forEach(u),wa=b(Gw,"LI",{});var Jw=g(wa);Oa=b(Jw,"A",{href:!0});var zw=g(Oa);Sa=$(zw,"2. Using bitmask, Svelte able to generate a more compact compiled code."),zw.forEach(u),Jw.forEach(u),Ta=b(Gw,"LI",{});var Ww=g(Ta);La=b(Ww,"A",{href:!0});var Yw=g(La);Na=$(Yw,"3. Reactive declarations and statements are executed in batch, just like DOM updates"),Yw.forEach(u),Ww.forEach(u),Gw.forEach(u),Uw.forEach(u),Pa=b(l,"LI",{});var Vw=g(Pa);xa=b(Vw,"A",{href:!0});var Kw=g(xa);Ca=$(Kw,"Closing Note"),Kw.forEach(u),Vw.forEach(u),Da=b(l,"LI",{});var Zw=g(Da);Aa=b(Zw,"A",{href:!0});var Qw=g(Aa);Ia=$(Qw,"Further Resources"),Qw.forEach(u),Zw.forEach(u),l.forEach(u),n.forEach(u),ja=y(a),Ra=b(a,"P",{});var Xw=g(Ra);Ma=b(Xw,"STRONG",{});var aO=g(Ma);Ha=$(aO,"⬅ ⬅  Previously in "),_a=b(aO,"A",{href:!0});var nO=g(_a);qa=$(nO,"Part 1"),nO.forEach(u),Ua=$(aO,"."),aO.forEach(u),Xw.forEach(u),Ga=y(a),Ba=b(a,"P",{});var sO=g(Ba);Fa=b(sO,"A",{href:!0});var tO=g(Fa);Ja=$(tO,"Previously"),tO.forEach(u),za=$(sO,", when I mentioned the "),Wa=b(sO,"CODE",{});var eO=g(Wa);Ya=$(eO,"$$invalidate"),eO.forEach(u),Va=$(sO," function, I explained that the "),Ka=b(sO,"CODE",{});var oO=g(Ka);Za=$(oO,"$$invalidate"),oO.forEach(u),Qa=$(sO," function works conceptually like the following:"),sO.forEach(u),Xa=y(a),an=b(a,"PRE",{class:!0}),g(an).forEach(u),nn=y(a),sn=b(a,"P",{});var cO=g(sn);tn=$(cO,"but that's not the exact implementation of the "),en=b(cO,"CODE",{});var pO=g(en);on=$(pO,"$$invaldiate"),pO.forEach(u),cn=$(cO," function. So in this article, we are going to look at how "),pn=b(cO,"CODE",{});var rO=g(pn);rn=$(rO,"$$invalidate"),rO.forEach(u),ln=$(cO," is implemented in Svelte."),cO.forEach(u),un=y(a),hn=b(a,"P",{});var lO=g(hn);dn=$(lO,"At the point of writing, Svelte is at "),fn=b(lO,"A",{href:!0,rel:!0});var iO=g(fn);kn=$(iO,"v3.20.1"),iO.forEach(u),mn=$(lO,"."),lO.forEach(u),vn=y(a),En=b(a,"SECTION",{});var uO=g(En);gn=b(uO,"H2",{});var hO=g(gn);bn=b(hO,"A",{href:!0,id:!0});var dO=g(bn);$n=$(dO,"Pre v3.16.0"),dO.forEach(u),hO.forEach(u),yn=y(uO),wn=b(uO,"P",{});var fO=g(wn);On=$(fO,"There's a big optimisation that changes the underlying implementation of the "),Sn=b(fO,"CODE",{});var kO=g(Sn);Tn=$(kO,"$$invalidate"),kO.forEach(u),Ln=$(fO," function in "),Nn=b(fO,"A",{href:!0,rel:!0});var mO=g(Nn);Pn=$(mO,"v3.16.0"),mO.forEach(u),xn=$(fO,", namely in "),Cn=b(fO,"A",{href:!0,rel:!0});var vO=g(Cn);Dn=$(vO,"#3945"),vO.forEach(u),An=$(fO,". The underlying concept doesn't change, but it'll be much easier to understand about "),In=b(fO,"CODE",{});var EO=g(In);jn=$(EO,"$$invalidate"),EO.forEach(u),Rn=$(fO," prior the change and learn about the optimisation change separately."),fO.forEach(u),Mn=y(uO),Hn=b(uO,"P",{});var gO=g(Hn);_n=$(gO,"Let's explain some of the variables that you are going to see, some of which was introduced in "),qn=b(gO,"A",{href:!0});var bO=g(qn);Un=$(bO,"Part 1"),bO.forEach(u),Gn=$(gO,":"),gO.forEach(u),uO.forEach(u),Bn=y(a),Fn=b(a,"SECTION",{});var $O=g(Fn);Jn=b($O,"H3",{});var yO=g(Jn);zn=b(yO,"A",{href:!0,id:!0});var wO=g(zn);Wn=$(wO,"\\$\\$.ctx"),wO.forEach(u),yO.forEach(u),Yn=y($O),Vn=b($O,"P",{});var OO=g(Vn);Kn=$(OO,"There's no official name for it. You can call it "),Zn=b(OO,"STRONG",{});var SO=g(Zn);Qn=$(SO,"context"),SO.forEach(u),Xn=$(OO," as it is the context which the template is based on to render onto the DOM."),OO.forEach(u),as=y($O),ns=b($O,"P",{});var TO=g(ns);ss=$(TO,"I called it "),ts=b(TO,"A",{href:!0});var LO=g(ts);es=$(LO,"instance variables"),LO.forEach(u),os=$(TO,". As it is a JavaScript Object that contains all the variables that you:"),TO.forEach(u),cs=y($O),ps=b($O,"UL",{});var NO=g(ps);rs=b(NO,"LI",{});var PO=g(rs);ls=$(PO,"declared in the "),is=b(PO,"CODE",{});var xO=g(is);us=$(xO,"<script>"),xO.forEach(u),hs=$(PO," tag"),PO.forEach(u),ds=y(NO),fs=b(NO,"LI",{});var CO=g(fs);ks=$(CO,"mutated or reassigned"),CO.forEach(u),ms=y(NO),vs=b(NO,"LI",{});var DO=g(vs);Es=$(DO,"referenced in the template"),DO.forEach(u),NO.forEach(u),gs=y($O),bs=b($O,"P",{});var AO=g(bs);$s=$(AO,"that belongs to a component instance."),AO.forEach(u),ys=y($O),ws=b($O,"P",{});var IO=g(ws);Os=$(IO,"The instance variables themselves can be of a primitive value, object, array or function."),IO.forEach(u),Ss=y($O),Ts=b($O,"P",{});var jO=g(Ts);Ls=$(jO,"The "),Ns=b(jO,"CODE",{});var RO=g(Ns);Ps=$(RO,"instance"),RO.forEach(u),xs=$(jO," function creates and returns the "),Cs=b(jO,"CODE",{});var MO=g(Cs);Ds=$(MO,"ctx"),MO.forEach(u),As=$(jO," object."),jO.forEach(u),Is=y($O),js=b($O,"P",{});var HO=g(js);Rs=$(HO,"Functions declared in the "),Ms=b(HO,"CODE",{});var _O=g(Ms);Hs=$(_O,"<script>"),_O.forEach(u),_s=$(HO," tag will refer to the instance variable that is scoped withn the "),qs=b(HO,"CODE",{});var qO=g(qs);Us=$(qO,"instance"),qO.forEach(u),Gs=$(HO," function closure:"),HO.forEach(u),Bs=y($O),Fs=b($O,"PRE",{class:!0}),g(Fs).forEach(u),Js=y($O),zs=b($O,"P",{});var UO=g(zs);Ws=b(UO,"A",{href:!0,rel:!0});var GO=g(Ws);Ys=$(GO,"Svelte REPL"),GO.forEach(u),UO.forEach(u),Vs=y($O),Ks=b($O,"PRE",{class:!0}),g(Ks).forEach(u),Zs=y($O),Qs=b($O,"P",{});var BO=g(Qs);Xs=$(BO,"Whenever a new instance of a component is created, the "),at=b(BO,"CODE",{});var FO=g(at);nt=$(FO,"instance"),FO.forEach(u),st=$(BO," function is called and the "),tt=b(BO,"CODE",{});var JO=g(tt);et=$(JO,"ctx"),JO.forEach(u),ot=$(BO," object is created and captured within a new closure scope."),BO.forEach(u),$O.forEach(u),ct=y(a),pt=b(a,"SECTION",{});var zO=g(pt);rt=b(zO,"H3",{});var WO=g(rt);lt=b(WO,"A",{href:!0,id:!0});var YO=g(lt);it=$(YO,"\\$\\$.dirty"),YO.forEach(u),WO.forEach(u),ut=y(zO),ht=b(zO,"P",{});var VO=g(ht);dt=b(VO,"CODE",{});var KO=g(dt);ft=$(KO,"$$.dirty"),KO.forEach(u),kt=$(VO," is a object that is used to track which instance variable had just changed and needs to be updated onto the DOM."),VO.forEach(u),mt=y(zO),vt=b(zO,"P",{});var ZO=g(vt);Et=$(ZO,"For example, in the following Svelte component:"),ZO.forEach(u),gt=y(zO),bt=b(zO,"PRE",{class:!0}),g(bt).forEach(u),$t=y(zO),yt=b(zO,"P",{});var QO=g(yt);wt=b(QO,"A",{href:!0,rel:!0});var XO=g(wt);Ot=$(XO,"Svelte REPL"),XO.forEach(u),QO.forEach(u),St=y(zO),Tt=b(zO,"P",{});var aS=g(Tt);Lt=$(aS,"The initial "),Nt=b(aS,"CODE",{});var nS=g(Nt);Pt=$(nS,"$$.dirty"),nS.forEach(u),xt=$(aS," is "),Ct=b(aS,"CODE",{});var sS=g(Ct);Dt=$(sS,"null"),sS.forEach(u),At=$(aS," ("),It=b(aS,"A",{href:!0,rel:!0});var tS=g(It);jt=$(tS,"source code"),tS.forEach(u),Rt=$(aS,")."),aS.forEach(u),Mt=y(zO),Ht=b(zO,"P",{});var eS=g(Ht);_t=$(eS,"If you clicked on the "),qt=b(eS,"STRONG",{});var oS=g(qt);Ut=$(oS,'"+ Agility"'),oS.forEach(u),Gt=$(eS," button, "),Bt=b(eS,"CODE",{});var cS=g(Bt);Ft=$(cS,"$$.dirty"),cS.forEach(u),Jt=$(eS," will turn into:"),eS.forEach(u),zt=y(zO),Wt=b(zO,"PRE",{class:!0}),g(Wt).forEach(u),Yt=y(zO),Vt=b(zO,"P",{});var pS=g(Vt);Kt=$(pS,"If you clicked on the "),Zt=b(pS,"STRONG",{});var rS=g(Zt);Qt=$(rS,'"Level Up"'),rS.forEach(u),Xt=$(pS," button, "),ae=b(pS,"CODE",{});var lS=g(ae);ne=$(lS,"$$.dirty"),lS.forEach(u),se=$(pS," will turn into:"),pS.forEach(u),te=y(zO),ee=b(zO,"PRE",{class:!0}),g(ee).forEach(u),oe=y(zO),ce=b(zO,"P",{});var iS=g(ce);pe=b(iS,"CODE",{});var uS=g(pe);re=$(uS,"$$.dirty"),uS.forEach(u),le=$(iS," is useful for Svelte, so that it doesn't update the DOM unnecessarily."),iS.forEach(u),ie=y(zO),ue=b(zO,"P",{});var hS=g(ue);he=$(hS,"If you looked at the "),de=b(hS,"STRONG",{});var dS=g(de);fe=$(dS,"p (u_p_date)"),dS.forEach(u),ke=$(hS," function of the compiled code, you will see Svelte checks whether a variable is marked in "),me=b(hS,"CODE",{});var fS=g(me);ve=$(fS,"$$.dirty"),fS.forEach(u),Ee=$(hS,", before updating the DOM."),hS.forEach(u),ge=y(zO),be=b(zO,"PRE",{class:!0}),g(be).forEach(u),$e=y(zO),ye=b(zO,"P",{});var kS=g(ye);we=$(kS,"After Svelte updates the DOM, the "),Oe=b(kS,"CODE",{});var mS=g(Oe);Se=$(mS,"$$.dirty"),mS.forEach(u),Te=$(kS," is set back to "),Le=b(kS,"CODE",{});var vS=g(Le);Ne=$(vS,"null"),vS.forEach(u),Pe=$(kS," to indicate all changes has been applied onto the DOM."),kS.forEach(u),zO.forEach(u),xe=y(a),Ce=b(a,"SECTION",{});var ES=g(Ce);De=b(ES,"H3",{});var gS=g(De);Ae=b(gS,"A",{href:!0,id:!0});var bS=g(Ae);Ie=$(bS,"\\$\\$invalidate"),bS.forEach(u),gS.forEach(u),je=y(ES),Re=b(ES,"P",{});var $S=g(Re);Me=b($S,"CODE",{});var yS=g(Me);He=$(yS,"$$invalidate"),yS.forEach(u),_e=$($S," is the secret behind reactivity in Svelte."),$S.forEach(u),qe=y(ES),Ue=b(ES,"P",{});var wS=g(Ue);Ge=$(wS,"Whenever a variable is"),wS.forEach(u),Be=y(ES),Fe=b(ES,"UL",{});var OS=g(Fe);Je=b(OS,"LI",{});var SS=g(Je);ze=$(SS,"reassigned "),We=b(SS,"CODE",{});var TS=g(We);Ye=$(TS,"(foo = 1)"),TS.forEach(u),SS.forEach(u),Ve=y(OS),Ke=b(OS,"LI",{});var LS=g(Ke);Ze=$(LS,"mutated "),Qe=b(LS,"CODE",{});var NS=g(Qe);Xe=$(NS,"(foo.bar = 1)"),NS.forEach(u),LS.forEach(u),OS.forEach(u),ao=y(ES),no=b(ES,"P",{});var PS=g(no);so=$(PS,"Svelte will wrap the assignment or update around with the "),to=b(PS,"CODE",{});var xS=g(to);eo=$(xS,"$$invalidate"),xS.forEach(u),oo=$(PS," function:"),PS.forEach(u),co=y(ES),po=b(ES,"PRE",{class:!0}),g(po).forEach(u),ro=y(ES),lo=b(ES,"P",{});var CS=g(lo);io=$(CS,"the "),uo=b(CS,"CODE",{});var DS=g(uo);ho=$(DS,"$$invalidate"),DS.forEach(u),fo=$(CS," function will:"),CS.forEach(u),ko=y(ES),mo=b(ES,"OL",{});var AS=g(mo);vo=b(AS,"LI",{});var IS=g(vo);Eo=$(IS,"update the variable in "),go=b(IS,"CODE",{});var jS=g(go);bo=$(jS,"$$.ctx"),jS.forEach(u),IS.forEach(u),$o=y(AS),yo=b(AS,"LI",{});var RS=g(yo);wo=$(RS,"mark the variable in "),Oo=b(RS,"CODE",{});var MS=g(Oo);So=$(MS,"$$.dirty"),MS.forEach(u),RS.forEach(u),To=y(AS),Lo=b(AS,"LI",{});var HS=g(Lo);No=$(HS,"schedule an update"),HS.forEach(u),Po=y(AS),xo=b(AS,"LI",{});var _S=g(xo);Co=$(_S,"return the value of the assignment or update expression"),_S.forEach(u),AS.forEach(u),Do=y(ES),Ao=b(ES,"PRE",{class:!0}),g(Ao).forEach(u),Io=y(ES),jo=b(ES,"P",{});var qS=g(jo);Ro=b(qS,"A",{href:!0,rel:!0});var US=g(Ro);Mo=$(US,"Source code"),US.forEach(u),qS.forEach(u),Ho=y(ES),_o=b(ES,"P",{});var GS=g(_o);qo=$(GS,"One interesting note about the function "),Uo=b(GS,"CODE",{});var BS=g(Uo);Go=$(BS,"$$invalidate"),BS.forEach(u),Bo=$(GS," is that, it wraps around the assignment or update expression and returns what the expression evaluates to."),GS.forEach(u),Fo=y(ES),Jo=b(ES,"P",{});var FS=g(Jo);zo=$(FS,"This makes "),Wo=b(FS,"CODE",{});var JS=g(Wo);Yo=$(JS,"$$invalidate"),JS.forEach(u),Vo=$(FS," chainable:"),FS.forEach(u),Ko=y(ES),Zo=b(ES,"PRE",{class:!0}),g(Zo).forEach(u),Qo=y(ES),Xo=b(ES,"P",{});var zS=g(Xo);ac=$(zS,"It seemed complex when there's a lot of assignment or update expressions in 1 statement! 🙈"),zS.forEach(u),nc=y(ES),sc=b(ES,"P",{});var WS=g(sc);tc=$(WS,"The 2nd argument of "),ec=b(WS,"CODE",{});var YS=g(ec);oc=$(YS,"$$invalidate"),YS.forEach(u),cc=$(WS," is the assignment or update expressions verbatim. But if it contains any assignment or update sub-expressions, we recursively wrap it with "),pc=b(WS,"CODE",{});var VS=g(pc);rc=$(VS,"$$invalidate"),VS.forEach(u),lc=$(WS,"."),WS.forEach(u),ic=y(ES),uc=b(ES,"P",{});var KS=g(uc);hc=$(KS,"In case where the assignment expression changes a property of an object, we pass the object in as a 3rd argument of the "),dc=b(KS,"CODE",{});var ZS=g(dc);fc=$(ZS,"$$invalidate"),ZS.forEach(u),kc=$(KS," function, eg:"),KS.forEach(u),mc=y(ES),vc=b(ES,"PRE",{class:!0}),g(vc).forEach(u),Ec=y(ES),gc=b(ES,"P",{});var QS=g(gc);bc=$(QS,"So that, we update the "),$c=b(QS,"CODE",{});var XS=g($c);yc=$(XS,'"obj"'),XS.forEach(u),wc=$(QS," variable to "),Oc=b(QS,"CODE",{});var aT=g(Oc);Sc=$(aT,"obj"),aT.forEach(u),Tc=$(QS," instead of the value of the 2nd argument, "),Lc=b(QS,"CODE",{});var nT=g(Lc);Nc=$(nT,'"hello"'),nT.forEach(u),Pc=$(QS,"."),QS.forEach(u),ES.forEach(u),xc=y(a),Cc=b(a,"SECTION",{});var sT=g(Cc);Dc=b(sT,"H3",{});var tT=g(Dc);Ac=b(tT,"A",{href:!0,id:!0});var eT=g(Ac);Ic=$(eT,"schedule_update"),eT.forEach(u),tT.forEach(u),jc=y(sT),Rc=b(sT,"P",{});var oT=g(Rc);Mc=b(oT,"CODE",{});var cT=g(Mc);Hc=$(cT,"schedule_update"),cT.forEach(u),_c=$(oT," schedules Svelte to update the DOM with the changes made thus far."),oT.forEach(u),qc=y(sT),Uc=b(sT,"P",{});var pT=g(Uc);Gc=$(pT,"Svelte, at the point of writing ("),Bc=b(pT,"A",{href:!0,rel:!0});var rT=g(Bc);Fc=$(rT,"v3.20.1"),rT.forEach(u),Jc=$(pT,"), uses "),zc=b(pT,"A",{href:!0,rel:!0});var lT=g(zc);Wc=$(lT,"microtask queue"),lT.forEach(u),Yc=$(pT," to batch change updates. The actual DOM update happens in the next microtask, so that any synchronous "),Vc=b(pT,"CODE",{});var iT=g(Vc);Kc=$(iT,"$$invalidate"),iT.forEach(u),Zc=$(pT," operations that happen within the same task get batched into the next DOM update."),pT.forEach(u),Qc=y(sT),Xc=b(sT,"P",{});var uT=g(Xc);ap=$(uT,"To schedule a next microtask, Svelte uses the Promise callback."),uT.forEach(u),np=y(sT),sp=b(sT,"PRE",{class:!0}),g(sp).forEach(u),tp=y(sT),ep=b(sT,"P",{});var hT=g(ep);op=$(hT,"In "),cp=b(hT,"CODE",{});var dT=g(cp);pp=$(dT,"flush"),dT.forEach(u),rp=$(hT,", we call update for each component marked dirty:"),hT.forEach(u),lp=y(sT),ip=b(sT,"PRE",{class:!0}),g(ip).forEach(u),up=y(sT),hp=b(sT,"P",{});var fT=g(hp);dp=b(fT,"A",{href:!0,rel:!0});var kT=g(dp);fp=$(kT,"Source code"),kT.forEach(u),fT.forEach(u),kp=y(sT),mp=b(sT,"P",{});var mT=g(mp);vp=$(mT,"So, if you write a Svelte component like this:"),mT.forEach(u),Ep=y(sT),gp=b(sT,"PRE",{class:!0}),g(gp).forEach(u),bp=y(sT),$p=b(sT,"P",{});var vT=g($p);yp=b(vT,"A",{href:!0,rel:!0});var ET=g(yp);wp=$(ET,"Svelte REPL"),ET.forEach(u),vT.forEach(u),Op=y(sT),Sp=b(sT,"P",{});var gT=g(Sp);Tp=$(gT,"The DOM update for the "),Lp=b(gT,"CODE",{});var bT=g(Lp);Np=$(bT,"givenName"),bT.forEach(u),Pp=$(gT," and "),xp=b(gT,"CODE",{});var $T=g(xp);Cp=$($T,"familyName"),$T.forEach(u),Dp=$(gT," happens in the same microtask:"),gT.forEach(u),Ap=y(sT),Ip=b(sT,"OL",{});var yT=g(Ip);jp=b(yT,"LI",{});var wT=g(jp);Rp=$(wT,"Click on the "),Mp=b(wT,"STRONG",{});var OT=g(Mp);Hp=$(OT,'"Update"'),OT.forEach(u),_p=$(wT," to call the "),qp=b(wT,"CODE",{});var ST=g(qp);Up=$(ST,"update"),ST.forEach(u),Gp=$(wT," function"),wT.forEach(u),Bp=y(yT),Fp=b(yT,"LI",{});var TT=g(Fp);Jp=b(TT,"CODE",{});var LT=g(Jp);zp=$(LT,"$$invalidate('givenName', givenName = 'Li Hau')"),LT.forEach(u),TT.forEach(u),Wp=y(yT),Yp=b(yT,"LI",{});var NT=g(Yp);Vp=$(NT,"Mark the variable "),Kp=b(NT,"CODE",{});var PT=g(Kp);Zp=$(PT,"givenName"),PT.forEach(u),Qp=$(NT," dirty, "),Xp=b(NT,"CODE",{});var xT=g(Xp);ar=$(xT,"$$.dirty['givenName'] = true"),xT.forEach(u),NT.forEach(u),nr=y(yT),sr=b(yT,"LI",{});var CT=g(sr);tr=$(CT,"Schedule an update, "),er=b(CT,"CODE",{});var DT=g(er);or=$(DT,"schedule_update()"),DT.forEach(u),CT.forEach(u),cr=y(yT),pr=b(yT,"LI",{});var AT=g(pr);rr=$(AT,"Since it's the first update in the call stack, push the "),lr=b(AT,"CODE",{});var IT=g(lr);ir=$(IT,"flush"),IT.forEach(u),ur=$(AT," function into the microtask queue"),AT.forEach(u),hr=y(yT),dr=b(yT,"LI",{});var jT=g(dr);fr=b(jT,"CODE",{});var RT=g(fr);kr=$(RT,"$$invalidate('familyName', familyName = 'Tan')"),RT.forEach(u),jT.forEach(u),mr=y(yT),vr=b(yT,"LI",{});var MT=g(vr);Er=$(MT,"Mark the variable "),gr=b(MT,"CODE",{});var HT=g(gr);br=$(HT,"familyName"),HT.forEach(u),$r=$(MT," dirty, "),yr=b(MT,"CODE",{});var _T=g(yr);wr=$(_T,"$$.dirty['familyName'] = true"),_T.forEach(u),MT.forEach(u),Or=y(yT),Sr=b(yT,"LI",{});var qT=g(Sr);Tr=$(qT,"Schedule an update, "),Lr=b(qT,"CODE",{});var UT=g(Lr);Nr=$(UT,"schedule_update()"),UT.forEach(u),qT.forEach(u),Pr=y(yT),xr=b(yT,"LI",{});var GT=g(xr);Cr=$(GT,"Since "),Dr=b(GT,"CODE",{});var BT=g(Dr);Ar=$(BT,"update_scheduled = true"),BT.forEach(u),Ir=$(GT,", do nothing."),GT.forEach(u),jr=y(yT),Rr=b(yT,"LI",{});var FT=g(Rr);Mr=b(FT,"STRONG",{});var JT=g(Mr);Hr=$(JT,"-- End of task --"),JT.forEach(u),FT.forEach(u),_r=y(yT),qr=b(yT,"LI",{});var zT=g(qr);Ur=b(zT,"STRONG",{});var WT=g(Ur);Gr=$(WT,"-- Start of microtask--"),WT.forEach(u),zT.forEach(u),Br=y(yT),Fr=b(yT,"LI",{});var YT=g(Fr);Jr=b(YT,"CODE",{});var VT=g(Jr);zr=$(VT,"flush()"),VT.forEach(u),Wr=$(YT," calls "),Yr=b(YT,"CODE",{});var KT=g(Yr);Vr=$(KT,"update()"),KT.forEach(u),Kr=$(YT," for each component marked dirty"),YT.forEach(u),Zr=y(yT),Qr=b(yT,"LI",{});var ZT=g(Qr);Xr=$(ZT,"Calls "),al=b(ZT,"CODE",{});var QT=g(al);nl=$(QT,"$$.fragment.p($$.dirty, $$.ctx)"),QT.forEach(u),sl=$(ZT,"."),tl=b(ZT,"UL",{});var XT=g(tl);el=b(XT,"LI",{});var aL=g(el);ol=b(aL,"CODE",{});var nL=g(ol);cl=$(nL,"$$.dirty"),nL.forEach(u),pl=$(aL," is now "),rl=b(aL,"CODE",{});var sL=g(rl);ll=$(sL,"{ givenName: true, familyName: true }"),sL.forEach(u),aL.forEach(u),il=y(XT),ul=b(XT,"LI",{});var tL=g(ul);hl=b(tL,"CODE",{});var eL=g(hl);dl=$(eL,"$$.ctx"),eL.forEach(u),fl=$(tL," is now "),kl=b(tL,"CODE",{});var oL=g(kl);ml=$(oL,"{ givenName: 'Li Hau', familyName: 'Tan' }"),oL.forEach(u),tL.forEach(u),XT.forEach(u),ZT.forEach(u),vl=y(yT),El=b(yT,"LI",{});var cL=g(El);gl=$(cL,"In "),bl=b(cL,"CODE",{});var pL=g(bl);$l=$(pL,"function p(dirty, ctx)"),pL.forEach(u),yl=$(cL,","),wl=b(cL,"UL",{});var rL=g(wl);Ol=b(rL,"LI",{});var lL=g(Ol);Sl=$(lL,"Update the 1st text node to "),Tl=b(lL,"CODE",{});var iL=g(Tl);Ll=$(iL,"$$.ctx['givenName']"),iL.forEach(u),Nl=$(lL," if "),Pl=b(lL,"CODE",{});var uL=g(Pl);xl=$(uL,"$$.dirty['givenName'] === true"),uL.forEach(u),lL.forEach(u),Cl=y(rL),Dl=b(rL,"LI",{});var hL=g(Dl);Al=$(hL,"Update the 2nd text node to "),Il=b(hL,"CODE",{});var dL=g(Il);jl=$(dL,"$$.ctx['familyName']"),dL.forEach(u),Rl=$(hL," if "),Ml=b(hL,"CODE",{});var fL=g(Ml);Hl=$(fL,"$$.dirty['familyName'] === true"),fL.forEach(u),hL.forEach(u),rL.forEach(u),cL.forEach(u),_l=y(yT),ql=b(yT,"LI",{});var kL=g(ql);Ul=$(kL,"Resets the "),Gl=b(kL,"CODE",{});var mL=g(Gl);Bl=$(mL,"$$.dirty"),mL.forEach(u),Fl=$(kL," to "),Jl=b(kL,"CODE",{});var vL=g(Jl);zl=$(vL,"null"),vL.forEach(u),kL.forEach(u),Wl=y(yT),Yl=b(yT,"LI",{});var EL=g(Yl);Vl=$(EL,"..."),EL.forEach(u),Kl=y(yT),Zl=b(yT,"LI",{});var gL=g(Zl);Ql=b(gL,"STRONG",{});var bL=g(Ql);Xl=$(bL,"-- End of microtask--"),bL.forEach(u),gL.forEach(u),yT.forEach(u),sT.forEach(u),ai=y(a),ni=b(a,"SECTION",{});var $L=g(ni);si=b($L,"H4",{});var yL=g(si);ti=b(yL,"A",{href:!0,id:!0});var wL=g(ti);ei=$(wL,"tl/dr:"),wL.forEach(u),yL.forEach(u),oi=y($L),ci=b($L,"UL",{});var OL=g(ci);pi=b(OL,"LI",{});var SL=g(pi);ri=$(SL,"For each assignment or update, Svelte calls "),li=b(SL,"CODE",{});var TL=g(li);ii=$(TL,"$$invalidate"),TL.forEach(u),ui=$(SL," to update the variable in "),hi=b(SL,"CODE",{});var LL=g(hi);di=$(LL,"$$.ctx"),LL.forEach(u),fi=$(SL," and mark the variable dirty in "),ki=b(SL,"CODE",{});var NL=g(ki);mi=$(NL,"$$.dirty"),NL.forEach(u),vi=$(SL,"."),SL.forEach(u),Ei=y(OL),gi=b(OL,"LI",{});var PL=g(gi);bi=$(PL,"The acutal DOM update is batched into the next microtask queue."),PL.forEach(u),$i=y(OL),yi=b(OL,"LI",{});var xL=g(yi);wi=$(xL,"To update the DOM for each component, the component "),Oi=b(xL,"CODE",{});var CL=g(Oi);Si=$(CL,"$$.fragment.p($$.diry, $$.ctx)"),CL.forEach(u),Ti=$(xL," is called."),xL.forEach(u),Li=y(OL),Ni=b(OL,"LI",{});var DL=g(Ni);Pi=$(DL,"After the DOM update, the "),xi=b(DL,"CODE",{});var AL=g(xi);Ci=$(AL,"$$.dirty"),AL.forEach(u),Di=$(DL," is reset to "),Ai=b(DL,"CODE",{});var IL=g(Ai);Ii=$(IL,"null"),IL.forEach(u),ji=$(DL,"."),DL.forEach(u),OL.forEach(u),$L.forEach(u),Ri=y(a),Mi=b(a,"SECTION",{});var jL=g(Mi);Hi=b(jL,"H2",{});var RL=g(Hi);_i=b(RL,"A",{href:!0,id:!0});var ML=g(_i);qi=$(ML,"v3.16.0"),ML.forEach(u),RL.forEach(u),Ui=y(jL),Gi=b(jL,"P",{});var HL=g(Gi);Bi=$(HL,"One big change in v3.16.0 is the PR "),Fi=b(HL,"A",{href:!0,rel:!0});var _L=g(Fi);Ji=$(_L,"#3945"),_L.forEach(u),zi=$(HL,", namely "),Wi=b(HL,"STRONG",{});var qL=g(Wi);Yi=$(qL,"bitmask-based change tracking"),qL.forEach(u),Vi=$(HL,"."),HL.forEach(u),Ki=y(jL),Zi=b(jL,"P",{});var UL=g(Zi);Qi=$(UL,"Instead of marking the variable dirty using an object:"),UL.forEach(u),Xi=y(jL),au=b(jL,"PRE",{class:!0}),g(au).forEach(u),nu=y(jL),su=b(jL,"P",{});var GL=g(su);tu=$(GL,"Svelte assign each variable an index:"),GL.forEach(u),eu=y(jL),ou=b(jL,"PRE",{class:!0}),g(ou).forEach(u),cu=y(jL),pu=b(jL,"P",{});var BL=g(pu);ru=$(BL,"and uses "),lu=b(BL,"A",{href:!0,rel:!0});var FL=g(lu);iu=$(FL,"bitmask"),FL.forEach(u),uu=$(BL," to store the dirty information:"),BL.forEach(u),hu=y(jL),du=b(jL,"PRE",{class:!0}),g(du).forEach(u),fu=y(jL),ku=b(jL,"P",{});var JL=g(ku);mu=$(JL,"which is far more compact than the previous compiled code."),JL.forEach(u),jL.forEach(u),vu=y(a),Eu=b(a,"SECTION",{});var zL=g(Eu);gu=b(zL,"H3",{});var WL=g(gu);bu=b(WL,"A",{href:!0,id:!0});var YL=g(bu);$u=$(YL,"Bitmask"),YL.forEach(u),WL.forEach(u),yu=y(zL),wu=b(zL,"P",{});var VL=g(wu);Ou=$(VL,"For those who don't understand, allow me to quickly explain what it is."),VL.forEach(u),Su=y(zL),Tu=b(zL,"P",{});var KL=g(Tu);Lu=$(KL,"Of course, if you want to learn more about it, feel free to read a more detailed explanation, like "),Nu=b(KL,"A",{href:!0,rel:!0});var ZL=g(Nu);Pu=$(ZL,"this"),ZL.forEach(u),xu=$(KL," and "),Cu=b(KL,"A",{href:!0,rel:!0});var QL=g(Cu);Du=$(QL,"this"),QL.forEach(u),Au=$(KL,"."),KL.forEach(u),Iu=y(zL),ju=b(zL,"P",{});var XL=g(ju);Ru=$(XL,"The most compact way of representing a group of "),Mu=b(XL,"CODE",{});var aN=g(Mu);Hu=$(aN,"true"),aN.forEach(u),_u=$(XL," or "),qu=b(XL,"CODE",{});var nN=g(qu);Uu=$(nN,"false"),nN.forEach(u),Gu=$(XL," is to use bits. If the bit is "),Bu=b(XL,"CODE",{});var sN=g(Bu);Fu=$(sN,"1"),sN.forEach(u),Ju=$(XL," it is "),zu=b(XL,"CODE",{});var tN=g(zu);Wu=$(tN,"true"),tN.forEach(u),Yu=$(XL," and if it is "),Vu=b(XL,"CODE",{});var eN=g(Vu);Ku=$(eN,"0"),eN.forEach(u),Zu=$(XL," it is "),Qu=b(XL,"CODE",{});var oN=g(Qu);Xu=$(oN,"false"),oN.forEach(u),ah=$(XL,"."),XL.forEach(u),nh=y(zL),sh=b(zL,"P",{});var cN=g(sh);th=$(cN,"A number can be represented in binary, "),eh=b(cN,"STRONG",{});var pN=g(eh);oh=$(pN,"5"),pN.forEach(u),ch=$(cN," is "),ph=b(cN,"CODE",{});var rN=g(ph);rh=$(rN,"0b0101"),rN.forEach(u),lh=$(cN," in binary."),cN.forEach(u),ih=y(zL),uh=b(zL,"P",{});var lN=g(uh);hh=$(lN,"If "),dh=b(lN,"STRONG",{});var iN=g(dh);fh=$(iN,"5"),iN.forEach(u),kh=$(lN," is represented in a 4-bit binary, then it can store 4 boolean values, with the 0th and 2nd bit as "),mh=b(lN,"CODE",{});var uN=g(mh);vh=$(uN,"true"),uN.forEach(u),Eh=$(lN," and 1st and 3rd bit as "),gh=b(lN,"CODE",{});var hN=g(gh);bh=$(hN,"false"),hN.forEach(u),$h=$(lN,", (reading from the right to left, from "),yh=b(lN,"A",{href:!0,rel:!0});var dN=g(yh);wh=$(dN,"least significant bit"),dN.forEach(u),Oh=$(lN," to the "),Sh=b(lN,"A",{href:!0,rel:!0});var fN=g(Sh);Th=$(fN,"most significant bit"),fN.forEach(u),Lh=$(lN,")."),lN.forEach(u),Nh=y(zL),Ph=b(zL,"P",{});var kN=g(Ph);xh=b(kN,"STRONG",{});var mN=g(xh);Ch=$(mN,"How many boolean values can a number store?"),mN.forEach(u),kN.forEach(u),Dh=y(zL),Ah=b(zL,"P",{});var vN=g(Ah);Ih=$(vN,"That depends on the language, a 16-bit integer in Java can store 16 boolean values."),vN.forEach(u),jh=y(zL),Rh=b(zL,"P",{});var EN=g(Rh);Mh=$(EN,"In JavaScript, numbers can are "),Hh=b(EN,"A",{href:!0,rel:!0});var gN=g(Hh);_h=$(gN,"represented in 64 bits"),gN.forEach(u),qh=$(EN,". However, when using "),Uh=b(EN,"A",{href:!0,rel:!0});var bN=g(Uh);Gh=$(bN,"bitwise operations"),bN.forEach(u),Bh=$(EN," on the number, JavaScript will treat the number as 32 bits."),EN.forEach(u),Fh=y(zL),Jh=b(zL,"P",{});var $N=g(Jh);zh=$($N,"To inspect or modify the boolean value stored in a number, we use "),Wh=b($N,"A",{href:!0,rel:!0});var yN=g(Wh);Yh=$(yN,"bitwise operations"),yN.forEach(u),Vh=$($N,"."),$N.forEach(u),Kh=y(zL),Zh=b(zL,"PRE",{class:!0}),g(Zh).forEach(u),Qh=y(zL),Xh=b(zL,"P",{});var wN=g(Xh);ad=$(wN,"The 2nd operand we use in the bitwise operation, is like a "),nd=b(wN,"A",{href:!0,rel:!0});var ON=g(nd);sd=$(ON,"mask"),ON.forEach(u),td=$(wN," that allow us to target a specific bit in the 1st number, that stores our boolean values."),wN.forEach(u),ed=y(zL),od=b(zL,"P",{});var SN=g(od);cd=$(SN,"We call the mask, "),pd=b(SN,"STRONG",{});var TN=g(pd);rd=$(TN,"bitmask"),TN.forEach(u),ld=$(SN,"."),SN.forEach(u),zL.forEach(u),id=y(a),ud=b(a,"SECTION",{});var LN=g(ud);hd=b(LN,"H3",{});var NN=g(hd);dd=b(NN,"A",{href:!0,id:!0});var PN=g(dd);fd=$(PN,"Bitmask in Svelte"),PN.forEach(u),NN.forEach(u),kd=y(LN),md=b(LN,"P",{});var xN=g(md);vd=$(xN,"As mentioned earlier, we assign each variable an index:"),xN.forEach(u),Ed=y(LN),gd=b(LN,"PRE",{class:!0}),g(gd).forEach(u),bd=y(LN),$d=b(LN,"P",{});var CN=g($d);yd=$(CN,"So instead of returning the instance variable as an JavaScript Object, we now return it as an JavaScript Array:"),CN.forEach(u),wd=y(LN),Od=b(LN,"PRE",{class:!0}),g(Od).forEach(u),Sd=y(LN),Td=b(LN,"P",{});var DN=g(Td);Ld=$(DN,"The variable is accessed via "),Nd=b(DN,"STRONG",{});var AN=g(Nd);Pd=$(AN,"index"),AN.forEach(u),xd=$(DN,", "),Cd=b(DN,"CODE",{});var IN=g(Cd);Dd=$(IN,"$$.ctx[index]"),IN.forEach(u),Ad=$(DN,", instead of "),Id=b(DN,"STRONG",{});var jN=g(Id);jd=$(jN,"variable name"),jN.forEach(u),Rd=$(DN,":"),DN.forEach(u),Md=y(LN),Hd=b(LN,"PRE",{class:!0}),g(Hd).forEach(u),_d=y(LN),qd=b(LN,"P",{});var RN=g(qd);Ud=$(RN,"The "),Gd=b(RN,"CODE",{});var MN=g(Gd);Bd=$(MN,"$$invalidate"),MN.forEach(u),Fd=$(RN," function works the same, except it takes in "),Jd=b(RN,"STRONG",{});var HN=g(Jd);zd=$(HN,"index"),HN.forEach(u),Wd=$(RN," instead of "),Yd=b(RN,"STRONG",{});var _N=g(Yd);Vd=$(_N,"variable name"),_N.forEach(u),Kd=$(RN,":"),RN.forEach(u),Zd=y(LN),Qd=b(LN,"PRE",{class:!0}),g(Qd).forEach(u),Xd=y(LN),af=b(LN,"P",{});var qN=g(af);nf=b(qN,"CODE",{});var UN=g(nf);sf=$(UN,"$$.dirty"),UN.forEach(u),tf=$(qN," now stores a list of numbers. Each number carries 31 boolean values, each boolean value indicates whether the variable of that index is dirty or not."),qN.forEach(u),ef=y(LN),of=b(LN,"P",{});var GN=g(of);cf=$(GN,"To set a variable as dirty, we use bitwise operation:"),GN.forEach(u),pf=y(LN),rf=b(LN,"PRE",{class:!0}),g(rf).forEach(u),lf=y(LN),uf=b(LN,"P",{});var BN=g(uf);hf=$(BN,"And to verify whether a variable is dirty, we use bitwise operation too!"),BN.forEach(u),df=y(LN),ff=b(LN,"PRE",{class:!0}),g(ff).forEach(u),kf=y(LN),mf=b(LN,"P",{});var FN=g(mf);vf=$(FN,"With using bitmask, "),Ef=b(FN,"CODE",{});var JN=g(Ef);gf=$(JN,"$$.dirty"),JN.forEach(u),bf=$(FN," is now reset to "),$f=b(FN,"CODE",{});var zN=g($f);yf=$(zN,"[-1]"),zN.forEach(u),wf=$(FN," instead of "),Of=b(FN,"CODE",{});var WN=g(Of);Sf=$(WN,"null"),WN.forEach(u),Tf=$(FN,"."),FN.forEach(u),Lf=y(LN),Nf=b(LN,"P",{});var YN=g(Nf);Pf=b(YN,"STRONG",{});var VN=g(Pf);xf=$(VN,"Trivia:"),VN.forEach(u),Cf=y(YN),Df=b(YN,"CODE",{});var KN=g(Df);Af=$(KN,"-1"),KN.forEach(u),If=$(YN," is "),jf=b(YN,"CODE",{});var ZN=g(jf);Rf=$(ZN,"0b1111_1111"),ZN.forEach(u),Mf=$(YN," in binary, where all the bits are "),Hf=b(YN,"CODE",{});var QN=g(Hf);_f=$(QN,"1"),QN.forEach(u),qf=$(YN,"."),YN.forEach(u),LN.forEach(u),Uf=y(a),Gf=b(a,"SECTION",{});var XN=g(Gf);Bf=b(XN,"H4",{});var aP=g(Bf);Ff=b(aP,"A",{href:!0,id:!0});var nP=g(Ff);Jf=$(nP,"Destructuring "),zf=b(nP,"STRONG",{});var sP=g(zf);Wf=$(sP,"$$.dirty"),sP.forEach(u),nP.forEach(u),aP.forEach(u),Yf=y(XN),Vf=b(XN,"P",{});var tP=g(Vf);Kf=$(tP,"One code-size optimisation that Svelte does is to always destructure the "),Zf=b(tP,"CODE",{});var eP=g(Zf);Qf=$(eP,"dirty"),eP.forEach(u),Xf=$(tP," array in the "),ak=b(tP,"STRONG",{});var oP=g(ak);nk=$(oP,"u_p_date function"),oP.forEach(u),sk=$(tP," if there's less than 32 variables, since we will always access "),tk=b(tP,"CODE",{});var cP=g(tk);ek=$(cP,"dirty[0]"),cP.forEach(u),ok=$(tP," anyway:"),tP.forEach(u),ck=y(XN),pk=b(XN,"PRE",{class:!0}),g(pk).forEach(u),XN.forEach(u),rk=y(a),lk=b(a,"SECTION",{});var pP=g(lk);ik=b(pP,"H4",{});var rP=g(ik);uk=b(rP,"A",{href:!0,id:!0});var lP=g(uk);hk=$(lP,"tl/dr:"),lP.forEach(u),rP.forEach(u),dk=y(pP),fk=b(pP,"UL",{});var iP=g(fk);kk=b(iP,"LI",{});var uP=g(kk);mk=$(uP,"The underlying mechanism for "),vk=b(uP,"CODE",{});var hP=g(vk);Ek=$(hP,"$$invalidate"),hP.forEach(u),gk=$(uP," and "),bk=b(uP,"CODE",{});var dP=g(bk);$k=$(dP,"schedule_update"),dP.forEach(u),yk=$(uP," does not change"),uP.forEach(u),wk=y(iP),Ok=b(iP,"LI",{});var fP=g(Ok);Sk=$(fP,"Using bitmask, the compiled code is much compact"),fP.forEach(u),iP.forEach(u),pP.forEach(u),Tk=y(a),Lk=b(a,"SECTION",{});var kP=g(Lk);Nk=b(kP,"H2",{});var mP=g(Nk);Pk=b(mP,"A",{href:!0,id:!0});var vP=g(Pk);xk=$(vP,"Reactive Declaration"),vP.forEach(u),mP.forEach(u),Ck=y(kP),Dk=b(kP,"P",{});var EP=g(Dk);Ak=$(EP,"Svelte allow us to declare reactive values via the "),Ik=b(EP,"A",{href:!0,rel:!0});var gP=g(Ik);jk=$(gP,"labeled statement"),gP.forEach(u),Rk=$(EP,", "),Mk=b(EP,"CODE",{});var bP=g(Mk);Hk=$(bP,"$:"),bP.forEach(u),EP.forEach(u),_k=y(kP),qk=b(kP,"PRE",{class:!0}),g(qk).forEach(u),Uk=y(kP),Gk=b(kP,"P",{});var $P=g(Gk);Bk=b($P,"A",{href:!0,rel:!0});var yP=g(Bk);Fk=$(yP,"Svelte REPL"),yP.forEach(u),$P.forEach(u),Jk=y(kP),zk=b(kP,"P",{});var wP=g(zk);Wk=$(wP,"If you look at the compiled output, you would find out that the declarative statements appeared in the "),Yk=b(wP,"A",{href:!0});var OP=g(Yk);Vk=b(OP,"CODE",{});var SP=g(Vk);Kk=$(SP,"instance"),SP.forEach(u),Zk=$(OP," function"),OP.forEach(u),Qk=$(wP,":"),wP.forEach(u),Xk=y(kP),am=b(kP,"PRE",{class:!0}),g(am).forEach(u),nm=y(kP),sm=b(kP,"P",{});var TP=g(sm);tm=$(TP,"Try reorder the reactive declarations and observe the change in the compiled output:"),TP.forEach(u),em=y(kP),om=b(kP,"PRE",{class:!0}),g(om).forEach(u),cm=y(kP),pm=b(kP,"P",{});var LP=g(pm);rm=b(LP,"A",{href:!0,rel:!0});var NP=g(rm);lm=$(NP,"Svelte REPL"),NP.forEach(u),LP.forEach(u),im=y(kP),um=b(kP,"PRE",{class:!0}),g(um).forEach(u),hm=y(kP),dm=b(kP,"P",{});var PP=g(dm);fm=$(PP,"Some observations:"),PP.forEach(u),km=y(kP),mm=b(kP,"UL",{});var xP=g(mm);vm=b(xP,"LI",{});var CP=g(vm);Em=$(CP,"When there are reactive declarations, Svelte defines a custom "),gm=b(CP,"CODE",{});var DP=g(gm);bm=$(DP,"$$.update"),DP.forEach(u),$m=$(CP," method."),ym=b(CP,"UL",{});var AP=g(ym);wm=b(AP,"LI",{});var IP=g(wm);Om=b(IP,"CODE",{});var jP=g(Om);Sm=$(jP,"$$.update"),jP.forEach(u),Tm=$(IP," is a "),Lm=b(IP,"A",{href:!0,rel:!0});var RP=g(Lm);Nm=$(RP,"no-op function"),RP.forEach(u),Pm=$(IP," by default. (See "),xm=b(IP,"A",{href:!0,rel:!0});var MP=g(xm);Cm=$(MP,"src/runtime/internal/Component.ts"),MP.forEach(u),Dm=$(IP,")"),IP.forEach(u),AP.forEach(u),CP.forEach(u),Am=y(xP),Im=b(xP,"LI",{});var HP=g(Im);jm=$(HP,"Svelte uses "),Rm=b(HP,"CODE",{});var _P=g(Rm);Mm=$(_P,"$$invalidate"),_P.forEach(u),Hm=$(HP," to update the value of a reactive variable too."),HP.forEach(u),_m=y(xP),qm=b(xP,"LI",{});var qP=g(qm);Um=$(qP,"Svelte sorts the reactive declarations and statements, based on the dependency relationship between the declarations and statements"),Gm=b(qP,"UL",{});var UP=g(Gm);Bm=b(UP,"LI",{});var GP=g(Bm);Fm=b(GP,"CODE",{});var BP=g(Fm);Jm=$(BP,"quadrupled"),BP.forEach(u),zm=$(GP," depends on "),Wm=b(GP,"CODE",{});var FP=g(Wm);Ym=$(FP,"doubled"),FP.forEach(u),Vm=$(GP,", so "),Km=b(GP,"CODE",{});var JP=g(Km);Zm=$(JP,"quadrupled"),JP.forEach(u),Qm=$(GP," is evaluated and "),Xm=b(GP,"CODE",{});var zP=g(Xm);av=$(zP,"$$invalidate"),zP.forEach(u),nv=$(GP,"d after "),sv=b(GP,"CODE",{});var WP=g(sv);tv=$(WP,"doubled"),WP.forEach(u),ev=$(GP,"."),GP.forEach(u),UP.forEach(u),qP.forEach(u),xP.forEach(u),ov=y(kP),cv=b(kP,"P",{});var YP=g(cv);pv=$(YP,"Since all reactive declarations and statements are grouped into the "),rv=b(YP,"CODE",{});var VP=g(rv);lv=$(VP,"$$.update"),VP.forEach(u),iv=$(YP," method, and also the fact that Svelte will sort the declarations and statements according to their dependency relationship, it is irrelevant of the location or the order you declared them."),YP.forEach(u),uv=y(kP),hv=b(kP,"P",{});var KP=g(hv);dv=$(KP,"The following component still works:"),KP.forEach(u),fv=y(kP),kv=b(kP,"PRE",{class:!0}),g(kv).forEach(u),mv=y(kP),vv=b(kP,"P",{});var ZP=g(vv);Ev=b(ZP,"A",{href:!0,rel:!0});var QP=g(Ev);gv=$(QP,"Svelte REPL"),QP.forEach(u),ZP.forEach(u),bv=y(kP),$v=b(kP,"P",{});var XP=g($v);yv=b(XP,"STRONG",{});var ax=g(yv);wv=$(ax,"The next thing you may ask, when is "),Ov=b(ax,"CODE",{});var nx=g(Ov);Sv=$(nx,"$$.update"),nx.forEach(u),Tv=$(ax," being called?"),ax.forEach(u),XP.forEach(u),Lv=y(kP),Nv=b(kP,"P",{});var sx=g(Nv);Pv=$(sx,"Remember the "),xv=b(sx,"CODE",{});var tx=g(xv);Cv=$(tx,"update"),tx.forEach(u),Dv=$(sx," function that gets called in the "),Av=b(sx,"CODE",{});var ex=g(Av);Iv=$(ex,"flush"),ex.forEach(u),jv=$(sx," function?"),sx.forEach(u),Rv=y(kP),Mv=b(kP,"P",{});var ox=g(Mv);Hv=$(ox,"I put a "),_v=b(ox,"CODE",{});var cx=g(_v);qv=$(cx,"NOTE:"),cx.forEach(u),Uv=$(ox," comment saying that it will be important later. Well, it is important now."),ox.forEach(u),Gv=y(kP),Bv=b(kP,"PRE",{class:!0}),g(Bv).forEach(u),Fv=y(kP),Jv=b(kP,"P",{});var px=g(Jv);zv=$(px,"The "),Wv=b(px,"CODE",{});var rx=g(Wv);Yv=$(rx,"$$.update"),rx.forEach(u),Vv=$(px," function gets called "),Kv=b(px,"STRONG",{});var lx=g(Kv);Zv=$(lx,"in the same microtask"),lx.forEach(u),Qv=$(px," with the DOM update, right before we called the "),Xv=b(px,"CODE",{});var ix=g(Xv);aE=$(ix,"$$.fragment.p()"),ix.forEach(u),nE=$(px," to update the DOM."),px.forEach(u),sE=y(kP),tE=b(kP,"P",{});var ux=g(tE);eE=$(ux,"The implication of the above fact is"),ux.forEach(u),kP.forEach(u),oE=y(a),cE=b(a,"SECTION",{});var hx=g(cE);pE=b(hx,"H4",{});var dx=g(pE);rE=b(dx,"A",{href:!0,id:!0});var fx=g(rE);lE=$(fx,"1. Execution of all reactive declarations and statements are batched"),fx.forEach(u),dx.forEach(u),iE=y(hx),uE=b(hx,"P",{});var kx=g(uE);hE=$(kx,"Just as how DOM updates are batched, reactive declarations and statements are batched too!"),kx.forEach(u),dE=y(hx),fE=b(hx,"PRE",{class:!0}),g(fE).forEach(u),kE=y(hx),mE=b(hx,"P",{});var mx=g(mE);vE=b(mx,"A",{href:!0,rel:!0});var vx=g(vE);EE=$(vx,"Svelte REPL"),vx.forEach(u),mx.forEach(u),gE=y(hx),bE=b(hx,"P",{});var Ex=g(bE);$E=$(Ex,"When "),yE=b(Ex,"CODE",{});var gx=g(yE);wE=$(gx,"update()"),gx.forEach(u),OE=$(Ex," get called,"),Ex.forEach(u),SE=y(hx),TE=b(hx,"OL",{});var bx=g(TE);LE=b(bx,"LI",{});var $x=g(LE);NE=$($x,"Similar to the "),PE=b($x,"A",{href:!0});var yx=g(PE);xE=$(yx,"flow described above"),yx.forEach(u),CE=$($x,", "),DE=b($x,"CODE",{});var wx=g(DE);AE=$(wx,"$$invalidate"),wx.forEach(u),IE=$($x," both "),jE=b($x,"STRONG",{});var Ox=g(jE);RE=$(Ox,'"givenName"'),Ox.forEach(u),ME=$($x," and "),HE=b($x,"STRONG",{});var Sx=g(HE);_E=$(Sx,'"familyName"'),Sx.forEach(u),qE=$($x,", and schedules an update"),$x.forEach(u),UE=y(bx),GE=b(bx,"LI",{});var Tx=g(GE);BE=b(Tx,"STRONG",{});var Lx=g(BE);FE=$(Lx,"-- End of task --"),Lx.forEach(u),Tx.forEach(u),JE=y(bx),zE=b(bx,"LI",{});var Nx=g(zE);WE=b(Nx,"STRONG",{});var Px=g(WE);YE=$(Px,"-- Start of microtask--"),Px.forEach(u),Nx.forEach(u),VE=y(bx),KE=b(bx,"LI",{});var xx=g(KE);ZE=b(xx,"CODE",{});var Cx=g(ZE);QE=$(Cx,"flush()"),Cx.forEach(u),XE=$(xx," calls "),ag=b(xx,"CODE",{});var Dx=g(ag);ng=$(Dx,"update()"),Dx.forEach(u),sg=$(xx," for each component marked dirty"),xx.forEach(u),tg=y(bx),eg=b(bx,"LI",{});var Ax=g(eg);og=$(Ax,"Runs "),cg=b(Ax,"CODE",{});var Ix=g(cg);pg=$(Ix,"$$.update()"),Ix.forEach(u),rg=b(Ax,"UL",{});var jx=g(rg);lg=b(jx,"LI",{});var Rx=g(lg);ig=$(Rx,"As "),ug=b(Rx,"STRONG",{});var Mx=g(ug);hg=$(Mx,'"givenName"'),Mx.forEach(u),dg=$(Rx," and "),fg=b(Rx,"STRONG",{});var Hx=g(fg);kg=$(Hx,'"familyName"'),Hx.forEach(u),mg=$(Rx," has changed, evaluates and "),vg=b(Rx,"CODE",{});var _x=g(vg);Eg=$(_x,"$$invalidate"),_x.forEach(u),gg=y(Rx),bg=b(Rx,"STRONG",{});var qx=g(bg);$g=$(qx,'"name"'),qx.forEach(u),Rx.forEach(u),yg=y(jx),wg=b(jx,"LI",{});var Ux=g(wg);Og=$(Ux,"As "),Sg=b(Ux,"STRONG",{});var Gx=g(Sg);Tg=$(Gx,'"name"'),Gx.forEach(u),Lg=$(Ux," has changed, executes "),Ng=b(Ux,"CODE",{});var Bx=g(Ng);Pg=$(Bx,"console.log('name', name);"),Bx.forEach(u),Ux.forEach(u),jx.forEach(u),Ax.forEach(u),xg=y(bx),Cg=b(bx,"LI",{});var Fx=g(Cg);Dg=$(Fx,"Calls "),Ag=b(Fx,"CODE",{});var Jx=g(Ag);Ig=$(Jx,"$$.fragment.p(...)"),Jx.forEach(u),jg=$(Fx," to update the DOM."),Fx.forEach(u),bx.forEach(u),Rg=y(hx),Mg=b(hx,"P",{});var zx=g(Mg);Hg=$(zx,"As you can see, even though we've updated "),_g=b(zx,"CODE",{});var Wx=g(_g);qg=$(Wx,"givenName"),Wx.forEach(u),Ug=$(zx," and "),Gg=b(zx,"CODE",{});var Yx=g(Gg);Bg=$(Yx,"familyName"),Yx.forEach(u),Fg=$(zx,", we only evaluate "),Jg=b(zx,"CODE",{});var Vx=g(Jg);zg=$(Vx,"name"),Vx.forEach(u),Wg=$(zx," and executes "),Yg=b(zx,"CODE",{});var Kx=g(Yg);Vg=$(Kx,"console.log('name', name)"),Kx.forEach(u),Kg=y(zx),Zg=b(zx,"STRONG",{});var Zx=g(Zg);Qg=$(Zx,"once"),Zx.forEach(u),Xg=$(zx," instead of twice:"),zx.forEach(u),ab=y(hx),nb=b(hx,"PRE",{class:!0}),g(nb).forEach(u),hx.forEach(u),sb=y(a),tb=b(a,"SECTION",{});var Qx=g(tb);eb=b(Qx,"H4",{});var Xx=g(eb);ob=b(Xx,"A",{href:!0,id:!0});var aC=g(ob);cb=$(aC,"2. The value of reactive variable outside of reactive declarations and statements may not be up to date"),aC.forEach(u),Xx.forEach(u),pb=y(Qx),rb=b(Qx,"P",{});var nC=g(rb);lb=$(nC,"Because the reactive declarations and statements are batched and executed in the next microtask, you can't expect the value to be updated synchronously."),nC.forEach(u),ib=y(Qx),ub=b(Qx,"PRE",{class:!0}),g(ub).forEach(u),hb=y(Qx),db=b(Qx,"P",{});var sC=g(db);fb=b(sC,"A",{href:!0,rel:!0});var tC=g(fb);kb=$(tC,"Svelte REPL"),tC.forEach(u),sC.forEach(u),mb=y(Qx),vb=b(Qx,"P",{});var eC=g(vb);Eb=$(eC,"Instead, you "),gb=b(eC,"STRONG",{});var oC=g(gb);bb=$(oC,"have to"),oC.forEach(u),$b=$(eC," refer the reactive variable in another reactive declaration or statement:"),eC.forEach(u),yb=y(Qx),wb=b(Qx,"PRE",{class:!0}),g(wb).forEach(u),Qx.forEach(u),Ob=y(a),Sb=b(a,"SECTION",{});var cC=g(Sb);Tb=b(cC,"H3",{});var pC=g(Tb);Lb=b(pC,"A",{href:!0,id:!0});var rC=g(Lb);Nb=$(rC,"Sorting of reactive declarations and statements"),rC.forEach(u),pC.forEach(u),Pb=y(cC),xb=b(cC,"P",{});var lC=g(xb);Cb=$(lC,"Svelte tries to preserve the order of reactive declarations and statements as they are declared as much as possible."),lC.forEach(u),Db=y(cC),Ab=b(cC,"P",{});var iC=g(Ab);Ib=$(iC,"However, if one reactive declaration or statement refers to a variable that was defined by another reactive declaration, then, "),jb=b(iC,"STRONG",{});var uC=g(jb);Rb=$(uC,"it will be inserted after the latter reactive declaration"),uC.forEach(u),Mb=$(iC,":"),iC.forEach(u),Hb=y(cC),_b=b(cC,"PRE",{class:!0}),g(_b).forEach(u),cC.forEach(u),qb=y(a),Ub=b(a,"SECTION",{});var hC=g(Ub);Gb=b(hC,"H3",{});var dC=g(Gb);Bb=b(dC,"A",{href:!0,id:!0});var fC=g(Bb);Fb=$(fC,"Reactive variable that is not reactive"),fC.forEach(u),dC.forEach(u),Jb=y(hC),zb=b(hC,"P",{});var kC=g(zb);Wb=$(kC,"The Svelte compiler tracks all the variables declared in the "),Yb=b(kC,"CODE",{});var mC=g(Yb);Vb=$(mC,"<script>"),mC.forEach(u),Kb=$(kC," tag."),kC.forEach(u),Zb=y(hC),Qb=b(hC,"P",{});var vC=g(Qb);Xb=$(vC,"If all the variables of a reactive declaration or statement refers to, never gets mutated or reassigned, then the reactive declaration or statement will not be added into "),a$=b(vC,"CODE",{});var EC=g(a$);n$=$(EC,"$$.update"),EC.forEach(u),s$=$(vC,"."),vC.forEach(u),t$=y(hC),e$=b(hC,"P",{});var gC=g(e$);o$=$(gC,"For example:"),gC.forEach(u),c$=y(hC),p$=b(hC,"PRE",{class:!0}),g(p$).forEach(u),r$=y(hC),l$=b(hC,"P",{});var bC=g(l$);i$=b(bC,"A",{href:!0,rel:!0});var $C=g(i$);u$=$($C,"Svelte REPL"),$C.forEach(u),bC.forEach(u),h$=y(hC),d$=b(hC,"P",{});var yC=g(d$);f$=$(yC,"Since, "),k$=b(yC,"CODE",{});var wC=g(k$);m$=$(wC,"count"),wC.forEach(u),v$=$(yC," never gets mutated or reassigned, Svelte optimises the compiled output by not defining "),E$=b(yC,"CODE",{});var OC=g(E$);g$=$(OC,"$$self.$$.update"),OC.forEach(u),b$=$(yC,"."),yC.forEach(u),$$=y(hC),y$=b(hC,"PRE",{class:!0}),g(y$).forEach(u),hC.forEach(u),w$=y(a),O$=b(a,"SECTION",{});var SC=g(O$);S$=b(SC,"H2",{});var TC=g(S$);T$=b(TC,"A",{href:!0,id:!0});var LC=g(T$);L$=$(LC,"Summary"),LC.forEach(u),TC.forEach(u),SC.forEach(u),N$=y(a),P$=b(a,"SECTION",{});var NC=g(P$);x$=b(NC,"H4",{});var PC=g(x$);C$=b(PC,"A",{href:!0,id:!0});var xC=g(C$);D$=$(xC,"1. Svelte keeps track of which variables are dirty and batched the DOM updates."),xC.forEach(u),PC.forEach(u),NC.forEach(u),A$=y(a),I$=b(a,"SECTION",{});var CC=g(I$);j$=b(CC,"H4",{});var DC=g(j$);R$=b(DC,"A",{href:!0,id:!0});var AC=g(R$);M$=$(AC,"2. Using bitmask, Svelte able to generate a more compact compiled code."),AC.forEach(u),DC.forEach(u),CC.forEach(u),H$=y(a),_$=b(a,"SECTION",{});var IC=g(_$);q$=b(IC,"H4",{});var jC=g(q$);U$=b(jC,"A",{href:!0,id:!0});var RC=g(U$);G$=$(RC,"3. Reactive declarations and statements are executed in batch, just like DOM updates"),RC.forEach(u),jC.forEach(u),IC.forEach(u),B$=y(a),F$=b(a,"SECTION",{});var MC=g(F$);J$=b(MC,"H2",{});var HC=g(J$);z$=b(HC,"A",{href:!0,id:!0});var _C=g(z$);W$=$(_C,"Closing Note"),_C.forEach(u),HC.forEach(u),Y$=y(MC),V$=b(MC,"P",{});var qC=g(V$);K$=$(qC,"If you wish to know more, "),Z$=b(qC,"A",{href:!0,rel:!0});var UC=g(Z$);Q$=$(UC,"follow me on Twitter"),UC.forEach(u),X$=$(qC,"."),qC.forEach(u),ay=y(MC),ny=b(MC,"P",{});var GC=g(ny);sy=$(GC,"I'll post it on Twitter when the next part is ready, where I'll be covering "),ty=b(GC,"A",{href:!0,rel:!0});var BC=g(ty);ey=$(BC,"logic blocks"),BC.forEach(u),oy=$(GC,", "),cy=b(GC,"A",{href:!0,rel:!0});var FC=g(cy);py=$(FC,"slots"),FC.forEach(u),ry=$(GC,", "),ly=b(GC,"A",{href:!0,rel:!0});var JC=g(ly);iy=$(JC,"context"),JC.forEach(u),uy=$(GC,", and many others."),GC.forEach(u),hy=y(MC),dy=b(MC,"P",{});var zC=g(dy);fy=b(zC,"STRONG",{});var WC=g(fy);ky=$(WC,"⬅ ⬅  Previously in "),my=b(WC,"A",{href:!0});var YC=g(my);vy=$(YC,"Part 1"),YC.forEach(u),Ey=$(WC,"."),WC.forEach(u),zC.forEach(u),gy=y(MC),by=b(MC,"P",{});var VC=g(by);$y=b(VC,"STRONG",{});var KC=g($y);yy=$(KC,"➡ ➡  Continue reading on "),wy=b(KC,"A",{href:!0});var ZC=g(wy);Oy=$(ZC,"Part 3"),ZC.forEach(u),Sy=$(KC,"."),KC.forEach(u),VC.forEach(u),MC.forEach(u),Ty=y(a),Ly=b(a,"SECTION",{});var QC=g(Ly);Ny=b(QC,"H2",{});var XC=g(Ny);Py=b(XC,"A",{href:!0,id:!0});var aD=g(Py);xy=$(aD,"Further Resources"),aD.forEach(u),XC.forEach(u),Cy=y(QC),Dy=b(QC,"UL",{});var nD=g(Dy);Ay=b(nD,"LI",{});var sD=g(Ay);Iy=$(sD,"Rich Harris shares about "),jy=b(sD,"A",{href:!0,rel:!0});var tD=g(jy);Ry=$(tD,"Bitmask Tracking at Svelte Society NYC"),tD.forEach(u),My=$(sD,"."),sD.forEach(u),Hy=y(nD),_y=b(nD,"LI",{});var eD=g(_y);qy=$(eD,"Svelte Tutorial - "),Uy=b(eD,"A",{href:!0,rel:!0});var oD=g(Uy);Gy=$(oD,"Reactivity"),oD.forEach(u),By=y(eD),Fy=b(eD,"A",{href:!0,rel:!0});var cD=g(Fy);Jy=$(cD,"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/"),cD.forEach(u),eD.forEach(u),zy=y(nD),Wy=b(nD,"LI",{});var pD=g(Wy);Yy=b(pD,"A",{href:!0,rel:!0});var rD=g(Yy);Vy=$(rD,"The Art of Bitmasking"),rD.forEach(u),Ky=$(pD," by Shakib Ahmed"),pD.forEach(u),Zy=y(nD),Qy=b(nD,"LI",{});var lD=g(Qy);Xy=b(lD,"A",{href:!0,rel:!0});var iD=g(Xy);aw=$(iD,"Bitmasks: A very esoteric (and impractical) way of managing booleans"),iD.forEach(u),nw=$(lD," by Basti Ortiz"),lD.forEach(u),sw=y(nD),tw=b(nD,"LI",{});var uD=g(tw);ew=b(uD,"A",{href:!0,rel:!0});var hD=g(ew);ow=$(hD,"MDN: Bitwise Operators"),hD.forEach(u),uD.forEach(u),nD.forEach(u),QC.forEach(u),this.h()},h(){E(o,"href","#pre-v"),E(h,"href","#ctx"),E(w,"href","#dirty"),E(T,"href","#invalidate"),E(P,"href","#schedule-update"),E(A,"href","#tl-dr"),E(R,"href","#v"),E(q,"href","#bitmask"),E(B,"href","#bitmask-in-svelte"),E(W,"href","#destructuring"),E(K,"href","#tl-dr"),E(X,"href","#reactive-declaration"),E(ea,"href","#execution-of-all-reactive-declarations-and-statements-are-batched"),E(pa,"href","#the-value-of-reactive-variable-outside-of-reactive-declarations-and-statements-may-not-be-up-to-date"),E(ia,"href","#sorting-of-reactive-declarations-and-statements"),E(da,"href","#reactive-variable-that-is-not-reactive"),E(ma,"href","#summary"),E($a,"href","#svelte-keeps-track-of-which-variables-are-dirty-and-batched-the-dom-updates"),E(Oa,"href","#using-bitmask-svelte-able-to-generate-a-more-compact-compiled-code"),E(La,"href","#reactive-declarations-and-statements-are-executed-in-batch-just-like-dom-updates"),E(xa,"href","#closing-note"),E(Aa,"href","#further-resources"),E(t,"class","sitemap"),E(t,"id","sitemap"),E(t,"role","navigation"),E(t,"aria-label","Table of Contents"),E(_a,"href","/compile-svelte-in-your-head-part-1/"),E(Fa,"href","/compile-svelte-in-your-head-part-1/"),E(an,"class","language-js"),E(fn,"href","https://github.com/sveltejs/svelte/blob/v3.20.1/CHANGELOG.md#3201"),E(fn,"rel","nofollow"),E(bn,"href","#pre-v"),E(bn,"id","pre-v"),E(Nn,"href","https://github.com/sveltejs/svelte/blob/master/CHANGELOG.md#3160"),E(Nn,"rel","nofollow"),E(Cn,"href","https://github.com/sveltejs/svelte/pull/3945"),E(Cn,"rel","nofollow"),E(qn,"href","/compile-svelte-in-your-head-part-1"),E(zn,"href","#ctx"),E(zn,"id","ctx"),E(ts,"href","/compile-svelte-in-your-head-part-1#instance-variable"),E(Fs,"class","language-svelte"),E(Ws,"href","https://svelte.dev/repl/5b12ff52c2874f4dbb6405d9133b34da?version=3.20.1"),E(Ws,"rel","nofollow"),E(Ks,"class","language-js"),E(lt,"href","#dirty"),E(lt,"id","dirty"),E(bt,"class","language-svelte"),E(wt,"href","https://svelte.dev/repl/da579d0113b44f01b2b94893dce21487?version=3.20.1"),E(wt,"rel","nofollow"),E(It,"href","https://github.com/sveltejs/svelte/blob/v3.15.0/src/runtime/internal/Component.ts#L124"),E(It,"rel","nofollow"),E(Wt,"class","language-js"),E(ee,"class","language-js"),E(be,"class","language-js"),E(Ae,"href","#invalidate"),E(Ae,"id","invalidate"),E(po,"class","language-js"),E(Ao,"class","language-js"),E(Ro,"href","https://github.com/sveltejs/svelte/blob/v3.15.0/src/runtime/internal/Component.ts#L130-L136"),E(Ro,"rel","nofollow"),E(Zo,"class","language-js"),E(vc,"class","language-js"),E(Ac,"href","#schedule-update"),E(Ac,"id","schedule-update"),E(Bc,"href","https://github.com/sveltejs/svelte/blob/v3.20.1/CHANGELOG.md#3201"),E(Bc,"rel","nofollow"),E(zc,"href","https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/"),E(zc,"rel","nofollow"),E(sp,"class","language-js"),E(ip,"class","language-js"),E(dp,"href","https://github.com/sveltejs/svelte/blob/v3.15.0/src/runtime/internal/scheduler.ts#L14"),E(dp,"rel","nofollow"),E(gp,"class","language-svelte"),E(yp,"href","https://svelte.dev/repl/761a0a6cc2834afb842942e1d23875b1?version=3.20.1"),E(yp,"rel","nofollow"),E(ti,"href","#tl-dr"),E(ti,"id","tl-dr"),E(_i,"href","#v"),E(_i,"id","v"),E(Fi,"href","https://github.com/sveltejs/svelte/pull/3945"),E(Fi,"rel","nofollow"),E(au,"class","language-js"),E(ou,"class","language-js"),E(lu,"href","https://en.wikipedia.org/wiki/Mask_(computing)"),E(lu,"rel","nofollow"),E(du,"class","language-js"),E(bu,"href","#bitmask"),E(bu,"id","bitmask"),E(Nu,"href","https://blog.bitsrc.io/the-art-of-bitmasking-ec58ab1b4c03"),E(Nu,"rel","nofollow"),E(Cu,"href","https://dev.to/somedood/bitmasks-a-very-esoteric-and-impractical-way-of-managing-booleans-1hlf"),E(Cu,"rel","nofollow"),E(yh,"href","https://en.wikipedia.org/wiki/Bit_numbering#Least_significant_bit"),E(yh,"rel","nofollow"),E(Sh,"href","https://en.wikipedia.org/wiki/Bit_numbering#Most_significant_bit"),E(Sh,"rel","nofollow"),E(Hh,"href","https://2ality.com/2012/04/number-encoding.html"),E(Hh,"rel","nofollow"),E(Uh,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators"),E(Uh,"rel","nofollow"),E(Wh,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators"),E(Wh,"rel","nofollow"),E(Zh,"class","language-js"),E(nd,"href","https://en.wikipedia.org/wiki/Mask_(computing)"),E(nd,"rel","nofollow"),E(dd,"href","#bitmask-in-svelte"),E(dd,"id","bitmask-in-svelte"),E(gd,"class","language-js"),E(Od,"class","language-js"),E(Hd,"class","language-js"),E(Qd,"class","language-js"),E(rf,"class","language-js"),E(ff,"class","language-js"),E(Ff,"href","#destructuring"),E(Ff,"id","destructuring"),E(pk,"class","language-js"),E(uk,"href","#tl-dr"),E(uk,"id","tl-dr"),E(Pk,"href","#reactive-declaration"),E(Pk,"id","reactive-declaration"),E(Ik,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label"),E(Ik,"rel","nofollow"),E(qk,"class","language-svelte"),E(Bk,"href","https://svelte.dev/repl/e37329dd126448b2aa0679c08993f9a8?version=3.20.1"),E(Bk,"rel","nofollow"),E(Yk,"href","/compile-svelte-in-your-head-part-1/#instanceself-props-invalidate"),E(am,"class","language-js"),E(om,"class","language-svelte"),E(rm,"href","https://svelte.dev/repl/fc6995856489402d90291c4c30952939?version=3.20.1"),E(rm,"rel","nofollow"),E(um,"class","language-js"),E(Lm,"href","https://en.wikipedia.org/wiki/NOP_(code)"),E(Lm,"rel","nofollow"),E(xm,"href","https://github.com/sveltejs/svelte/blob/v3.20.1/src/runtime/internal/Component.ts#L111"),E(xm,"rel","nofollow"),E(kv,"class","language-svelte"),E(Ev,"href","https://svelte.dev/repl/fc6995856489402d90291c4c30952939?version=3.20.1"),E(Ev,"rel","nofollow"),E(Bv,"class","language-js"),E(rE,"href","#execution-of-all-reactive-declarations-and-statements-are-batched"),E(rE,"id","execution-of-all-reactive-declarations-and-statements-are-batched"),E(fE,"class","language-svelte"),E(vE,"href","https://svelte.dev/repl/941195f1cd5248e9bd14613f9513ad1d?version=3.20.1"),E(vE,"rel","nofollow"),E(PE,"href","#schedule_update"),E(nb,"class","language-js"),E(ob,"href","#the-value-of-reactive-variable-outside-of-reactive-declarations-and-statements-may-not-be-up-to-date"),E(ob,"id","the-value-of-reactive-variable-outside-of-reactive-declarations-and-statements-may-not-be-up-to-date"),E(ub,"class","language-svelte"),E(fb,"href","https://svelte.dev/repl/437548d5c7044cb59bfd0c8a0f4c725d?version=3.20.1"),E(fb,"rel","nofollow"),E(wb,"class","language-svelte"),E(Lb,"href","#sorting-of-reactive-declarations-and-statements"),E(Lb,"id","sorting-of-reactive-declarations-and-statements"),E(_b,"class","language-js"),E(Bb,"href","#reactive-variable-that-is-not-reactive"),E(Bb,"id","reactive-variable-that-is-not-reactive"),E(p$,"class","language-svelte"),E(i$,"href","https://svelte.dev/repl/af86472e1f494cfea2efa494f63fff08?version=3.20.1"),E(i$,"rel","nofollow"),E(y$,"class","language-js"),E(T$,"href","#summary"),E(T$,"id","summary"),E(C$,"href","#svelte-keeps-track-of-which-variables-are-dirty-and-batched-the-dom-updates"),E(C$,"id","svelte-keeps-track-of-which-variables-are-dirty-and-batched-the-dom-updates"),E(R$,"href","#using-bitmask-svelte-able-to-generate-a-more-compact-compiled-code"),E(R$,"id","using-bitmask-svelte-able-to-generate-a-more-compact-compiled-code"),E(U$,"href","#reactive-declarations-and-statements-are-executed-in-batch-just-like-dom-updates"),E(U$,"id","reactive-declarations-and-statements-are-executed-in-batch-just-like-dom-updates"),E(z$,"href","#closing-note"),E(z$,"id","closing-note"),E(Z$,"href","https://twitter.com/lihautan"),E(Z$,"rel","nofollow"),E(ty,"href","https://svelte.dev/tutorial/if-blocks"),E(ty,"rel","nofollow"),E(cy,"href","https://svelte.dev/tutorial/slots"),E(cy,"rel","nofollow"),E(ly,"href","https://svelte.dev/tutorial/context-api"),E(ly,"rel","nofollow"),E(my,"href","/compile-svelte-in-your-head-part-1/"),E(wy,"href","/compile-svelte-in-your-head-part-3/"),E(Py,"href","#further-resources"),E(Py,"id","further-resources"),E(jy,"href","https://www.youtube.com/watch?v=zq6PpM5t3z0&t=2530s"),E(jy,"rel","nofollow"),E(Uy,"href","https://svelte.dev/tutorial/reactive-assignments"),E(Uy,"rel","nofollow"),E(Fy,"href","https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/"),E(Fy,"rel","nofollow"),E(Yy,"href","https://blog.bitsrc.io/the-art-of-bitmasking-ec58ab1b4c03"),E(Yy,"rel","nofollow"),E(Xy,"href","https://dev.to/somedood/bitmasks-a-very-esoteric-and-impractical-way-of-managing-booleans-1hlf"),E(Xy,"rel","nofollow"),E(ew,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators"),E(ew,"rel","nofollow")},m(a,n){i(a,s,n),l(s,t),l(t,e),l(e,o),l(o,c),l(t,p),l(p,r),l(r,h),l(h,f),l(p,v),l(v,w),l(w,O),l(p,S),l(S,T),l(T,L),l(p,N),l(N,P),l(P,x),l(p,C),l(C,D),l(D,A),l(A,I),l(t,j),l(j,R),l(R,M),l(t,H),l(H,_),l(_,q),l(q,U),l(H,G),l(G,B),l(B,F),l(H,J),l(J,z),l(z,W),l(W,Y),l(J,V),l(V,K),l(K,Z),l(t,Q),l(Q,X),l(X,aa),l(t,na),l(na,sa),l(sa,ta),l(ta,ea),l(ea,oa),l(sa,ca),l(ca,pa),l(pa,ra),l(na,la),l(la,ia),l(ia,ua),l(na,ha),l(ha,da),l(da,fa),l(t,ka),l(ka,ma),l(ma,va),l(t,Ea),l(Ea,ga),l(ga,ba),l(ba,$a),l($a,ya),l(ga,wa),l(wa,Oa),l(Oa,Sa),l(ga,Ta),l(Ta,La),l(La,Na),l(t,Pa),l(Pa,xa),l(xa,Ca),l(t,Da),l(Da,Aa),l(Aa,Ia),i(a,ja,n),i(a,Ra,n),l(Ra,Ma),l(Ma,Ha),l(Ma,_a),l(_a,qa),l(Ma,Ua),i(a,Ga,n),i(a,Ba,n),l(Ba,Fa),l(Fa,Ja),l(Ba,za),l(Ba,Wa),l(Wa,Ya),l(Ba,Va),l(Ba,Ka),l(Ka,Za),l(Ba,Qa),i(a,Xa,n),i(a,an,n),an.innerHTML='<code class="language-js"><span class="token comment">// conceptually...</span>\n<span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token function">instance</span><span class="token punctuation">(</span><span class="token comment">/*...*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> fragment <span class="token operator">=</span> <span class="token function">create_fragment</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// to track which variable has changed</span>\n<span class="token keyword">const</span> dirty <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">$$invalidate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">variable<span class="token punctuation">,</span> newValue</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// update ctx</span>\n  ctx<span class="token punctuation">[</span>variable<span class="token punctuation">]</span> <span class="token operator">=</span> newValue<span class="token punctuation">;</span>\n  <span class="token comment">// mark variable as dirty</span>\n  dirty<span class="token punctuation">.</span><span class="token method function property-access">add</span><span class="token punctuation">(</span>variable<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// schedules update for the component</span>\n  <span class="token function">scheduleUpdate</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// gets called when update is scheduled</span>\n<span class="token keyword">function</span> <span class="token function">flushUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// update the fragment</span>\n  fragment<span class="token punctuation">.</span><span class="token method function property-access">p</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> dirty<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// clear the dirty</span>\n  dirty<span class="token punctuation">.</span><span class="token method function property-access">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',i(a,nn,n),i(a,sn,n),l(sn,tn),l(sn,en),l(en,on),l(sn,cn),l(sn,pn),l(pn,rn),l(sn,ln),i(a,un,n),i(a,hn,n),l(hn,dn),l(hn,fn),l(fn,kn),l(hn,mn),i(a,vn,n),i(a,En,n),l(En,gn),l(gn,bn),l(bn,$n),l(En,yn),l(En,wn),l(wn,On),l(wn,Sn),l(Sn,Tn),l(wn,Ln),l(wn,Nn),l(Nn,Pn),l(wn,xn),l(wn,Cn),l(Cn,Dn),l(wn,An),l(wn,In),l(In,jn),l(wn,Rn),l(En,Mn),l(En,Hn),l(Hn,_n),l(Hn,qn),l(qn,Un),l(Hn,Gn),i(a,Bn,n),i(a,Fn,n),l(Fn,Jn),l(Jn,zn),l(zn,Wn),l(Fn,Yn),l(Fn,Vn),l(Vn,Kn),l(Vn,Zn),l(Zn,Qn),l(Vn,Xn),l(Fn,as),l(Fn,ns),l(ns,ss),l(ns,ts),l(ts,es),l(ns,os),l(Fn,cs),l(Fn,ps),l(ps,rs),l(rs,ls),l(rs,is),l(is,us),l(rs,hs),l(ps,ds),l(ps,fs),l(fs,ks),l(ps,ms),l(ps,vs),l(vs,Es),l(Fn,gs),l(Fn,bs),l(bs,$s),l(Fn,ys),l(Fn,ws),l(ws,Os),l(Fn,Ss),l(Fn,Ts),l(Ts,Ls),l(Ts,Ns),l(Ns,Ps),l(Ts,xs),l(Ts,Cs),l(Cs,Ds),l(Ts,As),l(Fn,Is),l(Fn,js),l(js,Rs),l(js,Ms),l(Ms,Hs),l(js,_s),l(js,qs),l(qs,Us),l(js,Gs),l(Fn,Bs),l(Fn,Fs),Fs.innerHTML='<code class="language-svelte">&lt;script&gt;\n  let name = &#39;world&#39;;\n  function update() &#123;\n    name = &#39;Svelte&#39;;\n  &#125;\n&lt;/script&gt;\n&lt;button on:click=&#123;update&#125;&gt;&#123;name&#125;&lt;/button&gt;</code>',l(Fn,Js),l(Fn,zs),l(zs,Ws),l(Ws,Ys),l(Fn,Vs),l(Fn,Ks),Ks.innerHTML='<code class="language-js"><span class="token comment">// ...</span>\n<span class="token keyword">function</span> <span class="token function">instance</span><span class="token punctuation">(</span><span class="token parameter">$$self<span class="token punctuation">,</span> $$props<span class="token punctuation">,</span> $$invalidate</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">\'world\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'name\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">\'Svelte\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> update <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span>\n\n<span class="token comment">// ...some where in &#96;create_fragment&#96;</span>\nctx<span class="token punctuation">.</span><span class="token method function property-access">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// logs &#96;world&#96; scoped in the &#96;instance&#96; closure</span></code>',l(Fn,Zs),l(Fn,Qs),l(Qs,Xs),l(Qs,at),l(at,nt),l(Qs,st),l(Qs,tt),l(tt,et),l(Qs,ot),i(a,ct,n),i(a,pt,n),l(pt,rt),l(rt,lt),l(lt,it),l(pt,ut),l(pt,ht),l(ht,dt),l(dt,ft),l(ht,kt),l(pt,mt),l(pt,vt),l(vt,Et),l(pt,gt),l(pt,bt),bt.innerHTML='<code class="language-svelte">&lt;script&gt;\n  let agility = 0;\n  let power = 0;\n  function incrementAgility() &#123;\n    agility ++;\n  &#125;\n  function incrementPower() &#123;\n    power ++;\n  &#125;\n  function levelUp() &#123;\n    agility += 5;\n    power += 7;\n  &#125;\n&lt;/script&gt;\n\nAgility: &#123;agility&#125;\nPower: &#123;power&#125;\nStats: &#123;agility * power&#125;\n\n&lt;button on:click=&#123;incrementAgility&#125;&gt;+ Agility&lt;/button&gt;\n&lt;button on:click=&#123;incrementPower&#125;&gt;+ Power&lt;/button&gt;\n&lt;button on:click=&#123;levelUp&#125;&gt;Level Up&lt;/button&gt;</code>',l(pt,$t),l(pt,yt),l(yt,wt),l(wt,Ot),l(pt,St),l(pt,Tt),l(Tt,Lt),l(Tt,Nt),l(Nt,Pt),l(Tt,xt),l(Tt,Ct),l(Ct,Dt),l(Tt,At),l(Tt,It),l(It,jt),l(Tt,Rt),l(pt,Mt),l(pt,Ht),l(Ht,_t),l(Ht,qt),l(qt,Ut),l(Ht,Gt),l(Ht,Bt),l(Bt,Ft),l(Ht,Jt),l(pt,zt),l(pt,Wt),Wt.innerHTML='<code class="language-js"><span class="token punctuation">&#123;</span> agility<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code>',l(pt,Yt),l(pt,Vt),l(Vt,Kt),l(Vt,Zt),l(Zt,Qt),l(Vt,Xt),l(Vt,ae),l(ae,ne),l(Vt,se),l(pt,te),l(pt,ee),ee.innerHTML='<code class="language-js"><span class="token punctuation">&#123;</span> agility<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> power<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span></code>',l(pt,oe),l(pt,ce),l(ce,pe),l(pe,re),l(ce,le),l(pt,ie),l(pt,ue),l(ue,he),l(ue,de),l(de,fe),l(ue,ke),l(ue,me),l(me,ve),l(ue,Ee),l(pt,ge),l(pt,be),be.innerHTML='<code class="language-js"><span class="token comment">// NOTE: $$.dirty is passed into the &#96;p&#96; function as &#96;changed&#96;</span>\n<span class="token function">p</span><span class="token punctuation">(</span><span class="token parameter">changed<span class="token punctuation">,</span> ctx</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// checked if agility has changed before update the agility text</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>changed<span class="token punctuation">.</span><span class="token property-access">agility</span><span class="token punctuation">)</span> <span class="token function">set_data</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> ctx<span class="token punctuation">.</span><span class="token property-access">agility</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>changed<span class="token punctuation">.</span><span class="token property-access">power</span><span class="token punctuation">)</span> <span class="token function">set_data</span><span class="token punctuation">(</span>t3<span class="token punctuation">,</span> ctx<span class="token punctuation">.</span><span class="token property-access">power</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// if either agility or power has changed, update the stats text</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>changed<span class="token punctuation">.</span><span class="token property-access">agility</span> <span class="token operator">||</span> changed<span class="token punctuation">.</span><span class="token property-access">power</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> t5_value <span class="token operator">!==</span> <span class="token punctuation">(</span>t5_value <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token property-access">agility</span> <span class="token operator">*</span> ctx<span class="token punctuation">.</span><span class="token property-access">power</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">set_data</span><span class="token punctuation">(</span>t5<span class="token punctuation">,</span> t5_value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',l(pt,$e),l(pt,ye),l(ye,we),l(ye,Oe),l(Oe,Se),l(ye,Te),l(ye,Le),l(Le,Ne),l(ye,Pe),i(a,xe,n),i(a,Ce,n),l(Ce,De),l(De,Ae),l(Ae,Ie),l(Ce,je),l(Ce,Re),l(Re,Me),l(Me,He),l(Re,_e),l(Ce,qe),l(Ce,Ue),l(Ue,Ge),l(Ce,Be),l(Ce,Fe),l(Fe,Je),l(Je,ze),l(Je,We),l(We,Ye),l(Fe,Ve),l(Fe,Ke),l(Ke,Ze),l(Ke,Qe),l(Qe,Xe),l(Ce,ao),l(Ce,no),l(no,so),l(no,to),l(to,eo),l(no,oo),l(Ce,co),l(Ce,po),po.innerHTML='<code class="language-js">name <span class="token operator">=</span> <span class="token string">\'Svelte\'</span><span class="token punctuation">;</span>\ncount<span class="token operator">++</span><span class="token punctuation">;</span>\nfoo<span class="token punctuation">.</span><span class="token property-access">a</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\nbar <span class="token operator">=</span> baz <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n<span class="token comment">// compiled into</span>\n<span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'name\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">\'Svelte\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'count\'</span><span class="token punctuation">,</span> count<span class="token operator">++</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'foo\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>foo<span class="token punctuation">.</span><span class="token property-access">a</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> foo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'bar\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>bar <span class="token operator">=</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'baz\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>baz <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>',l(Ce,ro),l(Ce,lo),l(lo,io),l(lo,uo),l(uo,ho),l(lo,fo),l(Ce,ko),l(Ce,mo),l(mo,vo),l(vo,Eo),l(vo,go),l(go,bo),l(mo,$o),l(mo,yo),l(yo,wo),l(yo,Oo),l(Oo,So),l(mo,To),l(mo,Lo),l(Lo,No),l(mo,Po),l(mo,xo),l(xo,Co),l(Ce,Do),l(Ce,Ao),Ao.innerHTML='<code class="language-js"><span class="token comment">// src/runtime/internal/Component.ts</span>\n<span class="token keyword">const</span> <span class="token function-variable function">$$invalidate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> ret<span class="token punctuation">,</span> value <span class="token operator">=</span> ret</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>$$<span class="token punctuation">.</span><span class="token property-access">ctx</span> <span class="token operator">&amp;&amp;</span> <span class="token function">not_equal</span><span class="token punctuation">(</span>$$<span class="token punctuation">.</span><span class="token property-access">ctx</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token comment">// 1. update the variable in $$.ctx</span>\n    $$<span class="token punctuation">.</span><span class="token property-access">ctx</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>\n    <span class="token comment">// ...</span>\n    <span class="token comment">// 2a. mark the variable in $$.dirty</span>\n    <span class="token function">make_dirty</span><span class="token punctuation">(</span>component<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n  <span class="token comment">// 4. return the value of the assignment or update expression</span>\n  <span class="token keyword">return</span> ret<span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// src/runtime/internal/Component.ts</span>\n<span class="token keyword">function</span> <span class="token function">make_dirty</span><span class="token punctuation">(</span><span class="token parameter">component<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>component<span class="token punctuation">.</span><span class="token property-access">$$</span><span class="token punctuation">.</span><span class="token property-access">dirty</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    dirty_components<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 3. schedule an update</span>\n    <span class="token function">schedule_update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// initialise $$.dirty</span>\n    component<span class="token punctuation">.</span><span class="token property-access">$$</span><span class="token punctuation">.</span><span class="token property-access">dirty</span> <span class="token operator">=</span> <span class="token function">blank_object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n  <span class="token comment">// 2b. mark the variable in $$.dirty</span>\n  component<span class="token punctuation">.</span><span class="token property-access">$$</span><span class="token punctuation">.</span><span class="token property-access">dirty</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',l(Ce,Io),l(Ce,jo),l(jo,Ro),l(Ro,Mo),l(Ce,Ho),l(Ce,_o),l(_o,qo),l(_o,Uo),l(Uo,Go),l(_o,Bo),l(Ce,Fo),l(Ce,Jo),l(Jo,zo),l(Jo,Wo),l(Wo,Yo),l(Jo,Vo),l(Ce,Ko),l(Ce,Zo),Zo.innerHTML='<code class="language-js">obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n  b<span class="token punctuation">:</span> <span class="token punctuation">(</span>foo <span class="token operator">=</span> bar<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n\nobj<span class="token punctuation">.</span><span class="token property-access">c</span> <span class="token operator">=</span> <span class="token string">\'hello\'</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">(</span><span class="token punctuation">&#123;</span> a<span class="token punctuation">:</span> c <span class="token operator">=</span> d<span class="token operator">++</span><span class="token punctuation">,</span> b <span class="token punctuation">&#125;</span> <span class="token operator">=</span> baz <span class="token operator">=</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// assuming all variables are referenced in the template</span>\n<span class="token comment">// the above compiles into</span>\n\n<span class="token function">$$invalidate</span><span class="token punctuation">(</span>\n  <span class="token string">\'obj\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span>obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n    b<span class="token punctuation">:</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'foo\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>foo <span class="token operator">=</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'bar\'</span><span class="token punctuation">,</span> bar<span class="token operator">++</span><span class="token punctuation">,</span> bar<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'obj\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token property-access">c</span> <span class="token operator">=</span> <span class="token string">\'hello\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">$$invalidate</span><span class="token punctuation">(</span>\n  <span class="token string">\'c\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> a<span class="token punctuation">:</span> c <span class="token operator">=</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'d\'</span><span class="token punctuation">,</span> d<span class="token operator">++</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">,</span> b <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'baz\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>baz <span class="token operator">=</span> obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  c<span class="token punctuation">,</span>\n  <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'b\'</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code>',l(Ce,Qo),l(Ce,Xo),l(Xo,ac),l(Ce,nc),l(Ce,sc),l(sc,tc),l(sc,ec),l(ec,oc),l(sc,cc),l(sc,pc),l(pc,rc),l(sc,lc),l(Ce,ic),l(Ce,uc),l(uc,hc),l(uc,dc),l(dc,fc),l(uc,kc),l(Ce,mc),l(Ce,vc),vc.innerHTML='<code class="language-js">obj<span class="token punctuation">.</span><span class="token property-access">c</span> <span class="token operator">=</span> <span class="token string">\'hello\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// compiles into</span>\n<span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'obj\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token property-access">c</span> <span class="token operator">=</span> <span class="token string">\'hello\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// - it invalidates &#96;obj&#96;</span>\n<span class="token comment">// - it returns the evaluated value of the expression &#96;obj.c = \'hello\'&#96;, which is \'hello\'</span></code>',l(Ce,Ec),l(Ce,gc),l(gc,bc),l(gc,$c),l($c,yc),l(gc,wc),l(gc,Oc),l(Oc,Sc),l(gc,Tc),l(gc,Lc),l(Lc,Nc),l(gc,Pc),i(a,xc,n),i(a,Cc,n),l(Cc,Dc),l(Dc,Ac),l(Ac,Ic),l(Cc,jc),l(Cc,Rc),l(Rc,Mc),l(Mc,Hc),l(Rc,_c),l(Cc,qc),l(Cc,Uc),l(Uc,Gc),l(Uc,Bc),l(Bc,Fc),l(Uc,Jc),l(Uc,zc),l(zc,Wc),l(Uc,Yc),l(Uc,Vc),l(Vc,Kc),l(Uc,Zc),l(Cc,Qc),l(Cc,Xc),l(Xc,ap),l(Cc,np),l(Cc,sp),sp.innerHTML='<code class="language-js"><span class="token comment">// src/runtime/internal/scheduler.ts</span>\n<span class="token keyword module">export</span> <span class="token keyword">function</span> <span class="token function">schedule_update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>update_scheduled<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    update_scheduled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token comment">// NOTE: &#96;flush&#96; will do the DOM update</span>\n    <span class="token comment">// we push it into the microtask queue</span>\n    <span class="token comment">// highlight-next-line</span>\n    resolved_promise<span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span>flush<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span></code>',l(Cc,tp),l(Cc,ep),l(ep,op),l(ep,cp),l(cp,pp),l(ep,rp),l(Cc,lp),l(Cc,ip),ip.innerHTML='<code class="language-js"><span class="token comment">// src/runtime/internal/scheduler.ts</span>\n<span class="token keyword">function</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// ...</span>\n  <span class="token comment">// for each componnet in &#96;dirty_components&#96;</span>\n  <span class="token comment">// highlight-start</span>\n  <span class="token function">update</span><span class="token punctuation">(</span>component<span class="token punctuation">.</span><span class="token property-access">$$</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// highlight-end</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">&#125;</span>\n\n<span class="token comment">// src/runtime/internal/scheduler.ts</span>\n<span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">$$</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>$$<span class="token punctuation">.</span><span class="token property-access">fragment</span> <span class="token operator">!==</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token comment">// NOTE: this will be important later</span>\n    $$<span class="token punctuation">.</span><span class="token method function property-access">update</span><span class="token punctuation">(</span>$$<span class="token punctuation">.</span><span class="token property-access">dirty</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">run_all</span><span class="token punctuation">(</span>$$<span class="token punctuation">.</span><span class="token property-access">before_update</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// calls the &#96;p&#96; function</span>\n    <span class="token comment">// highlight-next-line</span>\n    $$<span class="token punctuation">.</span><span class="token property-access">fragment</span> <span class="token operator">&amp;&amp;</span> $$<span class="token punctuation">.</span><span class="token property-access">fragment</span><span class="token punctuation">.</span><span class="token method function property-access">p</span><span class="token punctuation">(</span>$$<span class="token punctuation">.</span><span class="token property-access">dirty</span><span class="token punctuation">,</span> $$<span class="token punctuation">.</span><span class="token property-access">ctx</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// resets &#96;$$.dirty&#96;</span>\n    $$<span class="token punctuation">.</span><span class="token property-access">dirty</span> <span class="token operator">=</span> <span class="token keyword null nil">null</span><span class="token punctuation">;</span>\n\n    $$<span class="token punctuation">.</span><span class="token property-access">after_update</span><span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span>add_render_callback<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span></code>',l(Cc,up),l(Cc,hp),l(hp,dp),l(dp,fp),l(Cc,kp),l(Cc,mp),l(mp,vp),l(Cc,Ep),l(Cc,gp),gp.innerHTML='<code class="language-svelte">&lt;script&gt;\n  let givenName, familyName;\n  function update() &#123;\n    givenName = &#39;Li Hau&#39;;\n    familyName = &#39;Tan&#39;;\n  &#125;\n&lt;/script&gt;\nName: &#123;familyName&#125; &#123;givenName&#125;\n\n&lt;button on:click=&#123;update&#125;&gt;Update&lt;/button&gt;</code>',l(Cc,bp),l(Cc,$p),l($p,yp),l(yp,wp),l(Cc,Op),l(Cc,Sp),l(Sp,Tp),l(Sp,Lp),l(Lp,Np),l(Sp,Pp),l(Sp,xp),l(xp,Cp),l(Sp,Dp),l(Cc,Ap),l(Cc,Ip),l(Ip,jp),l(jp,Rp),l(jp,Mp),l(Mp,Hp),l(jp,_p),l(jp,qp),l(qp,Up),l(jp,Gp),l(Ip,Bp),l(Ip,Fp),l(Fp,Jp),l(Jp,zp),l(Ip,Wp),l(Ip,Yp),l(Yp,Vp),l(Yp,Kp),l(Kp,Zp),l(Yp,Qp),l(Yp,Xp),l(Xp,ar),l(Ip,nr),l(Ip,sr),l(sr,tr),l(sr,er),l(er,or),l(Ip,cr),l(Ip,pr),l(pr,rr),l(pr,lr),l(lr,ir),l(pr,ur),l(Ip,hr),l(Ip,dr),l(dr,fr),l(fr,kr),l(Ip,mr),l(Ip,vr),l(vr,Er),l(vr,gr),l(gr,br),l(vr,$r),l(vr,yr),l(yr,wr),l(Ip,Or),l(Ip,Sr),l(Sr,Tr),l(Sr,Lr),l(Lr,Nr),l(Ip,Pr),l(Ip,xr),l(xr,Cr),l(xr,Dr),l(Dr,Ar),l(xr,Ir),l(Ip,jr),l(Ip,Rr),l(Rr,Mr),l(Mr,Hr),l(Ip,_r),l(Ip,qr),l(qr,Ur),l(Ur,Gr),l(Ip,Br),l(Ip,Fr),l(Fr,Jr),l(Jr,zr),l(Fr,Wr),l(Fr,Yr),l(Yr,Vr),l(Fr,Kr),l(Ip,Zr),l(Ip,Qr),l(Qr,Xr),l(Qr,al),l(al,nl),l(Qr,sl),l(Qr,tl),l(tl,el),l(el,ol),l(ol,cl),l(el,pl),l(el,rl),l(rl,ll),l(tl,il),l(tl,ul),l(ul,hl),l(hl,dl),l(ul,fl),l(ul,kl),l(kl,ml),l(Ip,vl),l(Ip,El),l(El,gl),l(El,bl),l(bl,$l),l(El,yl),l(El,wl),l(wl,Ol),l(Ol,Sl),l(Ol,Tl),l(Tl,Ll),l(Ol,Nl),l(Ol,Pl),l(Pl,xl),l(wl,Cl),l(wl,Dl),l(Dl,Al),l(Dl,Il),l(Il,jl),l(Dl,Rl),l(Dl,Ml),l(Ml,Hl),l(Ip,_l),l(Ip,ql),l(ql,Ul),l(ql,Gl),l(Gl,Bl),l(ql,Fl),l(ql,Jl),l(Jl,zl),l(Ip,Wl),l(Ip,Yl),l(Yl,Vl),l(Ip,Kl),l(Ip,Zl),l(Zl,Ql),l(Ql,Xl),i(a,ai,n),i(a,ni,n),l(ni,si),l(si,ti),l(ti,ei),l(ni,oi),l(ni,ci),l(ci,pi),l(pi,ri),l(pi,li),l(li,ii),l(pi,ui),l(pi,hi),l(hi,di),l(pi,fi),l(pi,ki),l(ki,mi),l(pi,vi),l(ci,Ei),l(ci,gi),l(gi,bi),l(ci,$i),l(ci,yi),l(yi,wi),l(yi,Oi),l(Oi,Si),l(yi,Ti),l(ci,Li),l(ci,Ni),l(Ni,Pi),l(Ni,xi),l(xi,Ci),l(Ni,Di),l(Ni,Ai),l(Ai,Ii),l(Ni,ji),i(a,Ri,n),i(a,Mi,n),l(Mi,Hi),l(Hi,_i),l(_i,qi),l(Mi,Ui),l(Mi,Gi),l(Gi,Bi),l(Gi,Fi),l(Fi,Ji),l(Gi,zi),l(Gi,Wi),l(Wi,Yi),l(Gi,Vi),l(Mi,Ki),l(Mi,Zi),l(Zi,Qi),l(Mi,Xi),l(Mi,au),au.innerHTML='<code class="language-js">$$<span class="token punctuation">.</span><span class="token property-access">diry</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> givenName<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> familyName<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>',l(Mi,nu),l(Mi,su),l(su,tu),l(Mi,eu),l(Mi,ou),ou.innerHTML='<code class="language-js">givenName <span class="token operator">-</span><span class="token operator">></span> <span class="token number">0</span>\nfamilyName <span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span></code>',l(Mi,cu),l(Mi,pu),l(pu,ru),l(pu,lu),l(lu,iu),l(pu,uu),l(Mi,hu),l(Mi,du),du.innerHTML='<code class="language-js">$$<span class="token punctuation">.</span><span class="token property-access">dirty</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0b0000_0011</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// the 0th and 1st bit marked true</span></code>',l(Mi,fu),l(Mi,ku),l(ku,mu),i(a,vu,n),i(a,Eu,n),l(Eu,gu),l(gu,bu),l(bu,$u),l(Eu,yu),l(Eu,wu),l(wu,Ou),l(Eu,Su),l(Eu,Tu),l(Tu,Lu),l(Tu,Nu),l(Nu,Pu),l(Tu,xu),l(Tu,Cu),l(Cu,Du),l(Tu,Au),l(Eu,Iu),l(Eu,ju),l(ju,Ru),l(ju,Mu),l(Mu,Hu),l(ju,_u),l(ju,qu),l(qu,Uu),l(ju,Gu),l(ju,Bu),l(Bu,Fu),l(ju,Ju),l(ju,zu),l(zu,Wu),l(ju,Yu),l(ju,Vu),l(Vu,Ku),l(ju,Zu),l(ju,Qu),l(Qu,Xu),l(ju,ah),l(Eu,nh),l(Eu,sh),l(sh,th),l(sh,eh),l(eh,oh),l(sh,ch),l(sh,ph),l(ph,rh),l(sh,lh),l(Eu,ih),l(Eu,uh),l(uh,hh),l(uh,dh),l(dh,fh),l(uh,kh),l(uh,mh),l(mh,vh),l(uh,Eh),l(uh,gh),l(gh,bh),l(uh,$h),l(uh,yh),l(yh,wh),l(uh,Oh),l(uh,Sh),l(Sh,Th),l(uh,Lh),l(Eu,Nh),l(Eu,Ph),l(Ph,xh),l(xh,Ch),l(Eu,Dh),l(Eu,Ah),l(Ah,Ih),l(Eu,jh),l(Eu,Rh),l(Rh,Mh),l(Rh,Hh),l(Hh,_h),l(Rh,qh),l(Rh,Uh),l(Uh,Gh),l(Rh,Bh),l(Eu,Fh),l(Eu,Jh),l(Jh,zh),l(Jh,Wh),l(Wh,Yh),l(Jh,Vh),l(Eu,Kh),l(Eu,Zh),Zh.innerHTML='<code class="language-js"><span class="token comment">// set 1st boolean to true</span>\n<span class="token number">0b0101</span> <span class="token operator">|</span> <span class="token number">0b0010</span> <span class="token operator">=</span> <span class="token number">0b0111</span><span class="token punctuation">;</span>\n\n<span class="token comment">// set 2nd boolean to false</span>\n<span class="token number">0b0101</span> <span class="token operator">&amp;</span> <span class="token number">0b1011</span> <span class="token operator">=</span> <span class="token number">0b0001</span><span class="token punctuation">;</span>\n\n<span class="token comment">// is 2nd boolean true?</span>\n<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0b0101</span> <span class="token operator">&amp;</span> <span class="token number">0b0100</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n<span class="token comment">// NOTE: You can test multiple boolean values at once</span>\n<span class="token comment">// is 2nd and 3rd boolean true?</span>\n<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0b0101</span> <span class="token operator">&amp;</span> <span class="token number">0b1100</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">;</span></code>',l(Eu,Qh),l(Eu,Xh),l(Xh,ad),l(Xh,nd),l(nd,sd),l(Xh,td),l(Eu,ed),l(Eu,od),l(od,cd),l(od,pd),l(pd,rd),l(od,ld),i(a,id,n),i(a,ud,n),l(ud,hd),l(hd,dd),l(dd,fd),l(ud,kd),l(ud,md),l(md,vd),l(ud,Ed),l(ud,gd),gd.innerHTML='<code class="language-js">givenName <span class="token operator">-</span><span class="token operator">></span> <span class="token number">0</span>\nfirstName <span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span></code>',l(ud,bd),l(ud,$d),l($d,yd),l(ud,wd),l(ud,Od),Od.innerHTML='<code class="language-js"><span class="token comment">// Previous</span>\n<span class="token keyword">function</span> <span class="token function">instance</span><span class="token punctuation">(</span><span class="token parameter">$$self<span class="token punctuation">,</span> $$props<span class="token punctuation">,</span> $$invalidate</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// ...</span>\n  <span class="token comment">// highlight-next-line</span>\n  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> givenName<span class="token punctuation">,</span> familyName <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span>\n<span class="token comment">// Now</span>\n<span class="token keyword">function</span> <span class="token function">instance</span><span class="token punctuation">(</span><span class="token parameter">$$self<span class="token punctuation">,</span> $$props<span class="token punctuation">,</span> $$invalidate</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// ...</span>\n  <span class="token comment">// highlight-next-line</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span>givenName<span class="token punctuation">,</span> familyName<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',l(ud,Sd),l(ud,Td),l(Td,Ld),l(Td,Nd),l(Nd,Pd),l(Td,xd),l(Td,Cd),l(Cd,Dd),l(Td,Ad),l(Td,Id),l(Id,jd),l(Td,Rd),l(ud,Md),l(ud,Hd);Hd.innerHTML='<code class="language-js"><span class="token comment">// Previous</span>\n$$<span class="token punctuation">.</span><span class="token property-access">ctx</span><span class="token punctuation">.</span><span class="token property-access">givenName</span> <span class="token operator">+</span> $$<span class="token punctuation">.</span><span class="token property-access">ctx</span><span class="token punctuation">.</span><span class="token property-access">familyName</span><span class="token punctuation">;</span>\n<span class="token comment">// Now</span>\n$$<span class="token punctuation">.</span><span class="token property-access">ctx</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> $$<span class="token punctuation">.</span><span class="token property-access">ctx</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code>',l(ud,_d),l(ud,qd),l(qd,Ud),l(qd,Gd),l(Gd,Bd),l(qd,Fd),l(qd,Jd),l(Jd,zd),l(qd,Wd),l(qd,Yd),l(Yd,Vd),l(qd,Kd),l(ud,Zd),l(ud,Qd),Qd.innerHTML='<code class="language-js"><span class="token comment">// Previous</span>\n<span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token string">\'givenName\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>givenName <span class="token operator">=</span> <span class="token string">\'Li Hau\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Now</span>\n<span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>givenName <span class="token operator">=</span> <span class="token string">\'Li Hau\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>',l(ud,Xd),l(ud,af),l(af,nf),l(nf,sf),l(af,tf),l(ud,ef),l(ud,of),l(of,cf),l(ud,pf),l(ud,rf),rf.innerHTML='<code class="language-js"><span class="token comment">// Previous</span>\n$$<span class="token punctuation">.</span><span class="token property-access">dirty</span><span class="token punctuation">[</span><span class="token string">\'givenName\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token comment">// Now</span>\n$$<span class="token punctuation">.</span><span class="token property-access">dirty</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span></code>',l(ud,lf),l(ud,uf),l(uf,hf),l(ud,df),l(ud,ff),ff.innerHTML='<code class="language-js"><span class="token comment">// Previous</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>$dirty<span class="token punctuation">.</span><span class="token property-access">givenName</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>$dirty<span class="token punctuation">.</span><span class="token property-access">givenName</span> <span class="token operator">&amp;&amp;</span> $dirty<span class="token punctuation">.</span><span class="token property-access">familyName</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span>\n\n<span class="token comment">// Now</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>$dirty<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>$dirty<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span></code>',l(ud,kf),l(ud,mf),l(mf,vf),l(mf,Ef),l(Ef,gf),l(mf,bf),l(mf,$f),l($f,yf),l(mf,wf),l(mf,Of),l(Of,Sf),l(mf,Tf),l(ud,Lf),l(ud,Nf),l(Nf,Pf),l(Pf,xf),l(Nf,Cf),l(Nf,Df),l(Df,Af),l(Nf,If),l(Nf,jf),l(jf,Rf),l(Nf,Mf),l(Nf,Hf),l(Hf,_f),l(Nf,qf),i(a,Uf,n),i(a,Gf,n),l(Gf,Bf),l(Bf,Ff),l(Ff,Jf),l(Ff,zf),l(zf,Wf),l(Gf,Yf),l(Gf,Vf),l(Vf,Kf),l(Vf,Zf),l(Zf,Qf),l(Vf,Xf),l(Vf,ak),l(ak,nk),l(Vf,sk),l(Vf,tk),l(tk,ek),l(Vf,ok),l(Gf,ck),l(Gf,pk),pk.innerHTML='<code class="language-js"><span class="token comment">// If less than 32 variables,</span>\n<span class="token comment">// Instead of having &#96;dirty[0]&#96; all the time,</span>\np<span class="token punctuation">:</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> dirty<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>dirty<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>dirty<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span>\n<span class="token comment">// Svelte optimises the compiled code by </span>\n<span class="token comment">// destruct the array in the arguments</span>\np<span class="token punctuation">:</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token punctuation">[</span>dirty<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>dirty <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>dirty <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span>\n\n<span class="token comment">// If more than or equal to 32 variables</span>\np<span class="token punctuation">:</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> dirty<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>dirty<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>dirty<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span></code>',i(a,rk,n),i(a,lk,n),l(lk,ik),l(ik,uk),l(uk,hk),l(lk,dk),l(lk,fk),l(fk,kk),l(kk,mk),l(kk,vk),l(vk,Ek),l(kk,gk),l(kk,bk),l(bk,$k),l(kk,yk),l(fk,wk),l(fk,Ok),l(Ok,Sk),i(a,Tk,n),i(a,Lk,n),l(Lk,Nk),l(Nk,Pk),l(Pk,xk),l(Lk,Ck),l(Lk,Dk),l(Dk,Ak),l(Dk,Ik),l(Ik,jk),l(Dk,Rk),l(Dk,Mk),l(Mk,Hk),l(Lk,_k),l(Lk,qk),qk.innerHTML='<code class="language-svelte">&lt;script&gt;\n  export let count = 0;\n  // &#96;doubled&#96;, &#96;tripled&#96;, &#96;quadrupled&#96; are reactive\n  // highlight-start\n  $: doubled = count * 2;\n  $: tripled = count * 3;\n  $: quadrupled = doubled * 2;\n  // highlight-end\n&lt;/script&gt;\n\n&#123;doubled&#125; &#123;tripled&#125; &#123;quadrupled&#125;</code>',l(Lk,Uk),l(Lk,Gk),l(Gk,Bk),l(Bk,Fk),l(Lk,Jk),l(Lk,zk),l(zk,Wk),l(zk,Yk),l(Yk,Vk),l(Vk,Kk),l(Yk,Zk),l(zk,Qk),l(Lk,Xk),l(Lk,am),am.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">instance</span><span class="token punctuation">(</span><span class="token parameter">$$self<span class="token punctuation">,</span> $$props<span class="token punctuation">,</span> $$invalidate</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// ...</span>\n\n  <span class="token comment">// highlight-start</span>\n\t$$self<span class="token punctuation">.</span><span class="token property-access">$$</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">update</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">&#123;</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>$$self<span class="token punctuation">.</span><span class="token property-access">$$</span><span class="token punctuation">.</span><span class="token property-access">dirty</span> <span class="token operator">&amp;</span> <span class="token comment">/*count*/</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n\t\t\t$<span class="token punctuation">:</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> doubled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">&#125;</span>\n\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>$$self<span class="token punctuation">.</span><span class="token property-access">$$</span><span class="token punctuation">.</span><span class="token property-access">dirty</span> <span class="token operator">&amp;</span> <span class="token comment">/*count*/</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n\t\t\t$<span class="token punctuation">:</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> tripled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">&#125;</span>\n\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>$$self<span class="token punctuation">.</span><span class="token property-access">$$</span><span class="token punctuation">.</span><span class="token property-access">dirty</span> <span class="token operator">&amp;</span> <span class="token comment">/*doubled*/</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n\t\t\t$<span class="token punctuation">:</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> quadrupled <span class="token operator">=</span> doubled <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">&#125;</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n  <span class="token comment">// highlight-end</span>\n\n\t<span class="token keyword">return</span> <span class="token punctuation">[</span>doubled<span class="token punctuation">,</span> tripled<span class="token punctuation">,</span> quadrupled<span class="token punctuation">,</span> count<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',l(Lk,nm),l(Lk,sm),l(sm,tm),l(Lk,em),l(Lk,om),om.innerHTML='<code class="language-svelte">&lt;script&gt;\n  export let count = 0;\n  // NOTE: move &#96;quadrupled&#96; before &#96;doubled&#96;\n  // highlight-start\n  $: quadrupled = doubled * 2;\n  $: doubled = count * 2;\n  // highlight-end\n  $: tripled = count * 3;\n&lt;/script&gt;</code>',l(Lk,cm),l(Lk,pm),l(pm,rm),l(rm,lm),l(Lk,im),l(Lk,um),um.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">instance</span><span class="token punctuation">(</span><span class="token parameter">$$self<span class="token punctuation">,</span> $$props<span class="token punctuation">,</span> $$invalidate</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n\t<span class="token comment">// ...</span>\n\n\t$$self<span class="token punctuation">.</span><span class="token property-access">$$</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">update</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">&#123;</span>\n\t\t<span class="token comment">// NOTE: &#96;quadrupled&#96; invalidates after &#96;doubled&#96;</span>\n\t\t<span class="token comment">// highlight-start</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>$$self<span class="token punctuation">.</span><span class="token property-access">$$</span><span class="token punctuation">.</span><span class="token property-access">dirty</span> <span class="token operator">&amp;</span> <span class="token comment">/*count*/</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n\t\t\t$<span class="token punctuation">:</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>doubled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">&#125;</span>\n\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>$$self<span class="token punctuation">.</span><span class="token property-access">$$</span><span class="token punctuation">.</span><span class="token property-access">dirty</span> <span class="token operator">&amp;</span> <span class="token comment">/*doubled*/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n\t\t\t$<span class="token punctuation">:</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>quadrupled <span class="token operator">=</span> doubled <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">&#125;</span>\n\t\t<span class="token comment">// highlight-end</span>\n\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>$$self<span class="token punctuation">.</span><span class="token property-access">$$</span><span class="token punctuation">.</span><span class="token property-access">dirty</span> <span class="token operator">&amp;</span> <span class="token comment">/*count*/</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n\t\t\t$<span class="token punctuation">:</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>tripled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">&#125;</span>\n\t<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">return</span> <span class="token punctuation">[</span>doubled<span class="token punctuation">,</span> tripled<span class="token punctuation">,</span> quadrupled<span class="token punctuation">,</span> count<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',l(Lk,hm),l(Lk,dm),l(dm,fm),l(Lk,km),l(Lk,mm),l(mm,vm),l(vm,Em),l(vm,gm),l(gm,bm),l(vm,$m),l(vm,ym),l(ym,wm),l(wm,Om),l(Om,Sm),l(wm,Tm),l(wm,Lm),l(Lm,Nm),l(wm,Pm),l(wm,xm),l(xm,Cm),l(wm,Dm),l(mm,Am),l(mm,Im),l(Im,jm),l(Im,Rm),l(Rm,Mm),l(Im,Hm),l(mm,_m),l(mm,qm),l(qm,Um),l(qm,Gm),l(Gm,Bm),l(Bm,Fm),l(Fm,Jm),l(Bm,zm),l(Bm,Wm),l(Wm,Ym),l(Bm,Vm),l(Bm,Km),l(Km,Zm),l(Bm,Qm),l(Bm,Xm),l(Xm,av),l(Bm,nv),l(Bm,sv),l(sv,tv),l(Bm,ev),l(Lk,ov),l(Lk,cv),l(cv,pv),l(cv,rv),l(rv,lv),l(cv,iv),l(Lk,uv),l(Lk,hv),l(hv,dv),l(Lk,fv),l(Lk,kv),kv.innerHTML='<code class="language-svelte">&lt;script&gt;\n// NOTE: use &#96;count&#96; in a reactive declaration before &#96;count&#96; is declared\n$: doubled = count * 2;\nlet count = 1;\n&lt;/script&gt;\n\n&#123;count&#125; * 2 = &#123;doubled&#125;</code>',l(Lk,mv),l(Lk,vv),l(vv,Ev),l(Ev,gv),l(Lk,bv),l(Lk,$v),l($v,yv),l(yv,wv),l(yv,Ov),l(Ov,Sv),l(yv,Tv),l(Lk,Lv),l(Lk,Nv),l(Nv,Pv),l(Nv,xv),l(xv,Cv),l(Nv,Dv),l(Nv,Av),l(Av,Iv),l(Nv,jv),l(Lk,Rv),l(Lk,Mv),l(Mv,Hv),l(Mv,_v),l(_v,qv),l(Mv,Uv),l(Lk,Gv),l(Lk,Bv),Bv.innerHTML='<code class="language-js"><span class="token comment">// src/runtime/internal/scheduler.ts</span>\n<span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">$$</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>$$<span class="token punctuation">.</span><span class="token property-access">fragment</span> <span class="token operator">!==</span> <span class="token keyword null nil">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token comment">// NOTE: this is important now!</span>\n    <span class="token comment">// highlight-next-line</span>\n    $$<span class="token punctuation">.</span><span class="token method function property-access">update</span><span class="token punctuation">(</span>$$<span class="token punctuation">.</span><span class="token property-access">dirty</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">run_all</span><span class="token punctuation">(</span>$$<span class="token punctuation">.</span><span class="token property-access">before_update</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// calls the &#96;p&#96; function</span>\n    $$<span class="token punctuation">.</span><span class="token property-access">fragment</span> <span class="token operator">&amp;&amp;</span> $$<span class="token punctuation">.</span><span class="token property-access">fragment</span><span class="token punctuation">.</span><span class="token method function property-access">p</span><span class="token punctuation">(</span>$$<span class="token punctuation">.</span><span class="token property-access">dirty</span><span class="token punctuation">,</span> $$<span class="token punctuation">.</span><span class="token property-access">ctx</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span></code>',l(Lk,Fv),l(Lk,Jv),l(Jv,zv),l(Jv,Wv),l(Wv,Yv),l(Jv,Vv),l(Jv,Kv),l(Kv,Zv),l(Jv,Qv),l(Jv,Xv),l(Xv,aE),l(Jv,nE),l(Lk,sE),l(Lk,tE),l(tE,eE),i(a,oE,n),i(a,cE,n),l(cE,pE),l(pE,rE),l(rE,lE),l(cE,iE),l(cE,uE),l(uE,hE),l(cE,dE),l(cE,fE),fE.innerHTML='<code class="language-svelte">&lt;script&gt;\n  let givenName = &#39;&#39;, familyName = &#39;&#39;;\n  function update() &#123;\n    givenName = &#39;Li Hau&#39;;\n    familyName = &#39;Tan&#39;;\n  &#125;\n  $: name = givenName + &quot; &quot; + familyName;\n  $: console.log(&#39;name&#39;, name);\n&lt;/script&gt;</code>',l(cE,kE),l(cE,mE),l(mE,vE),l(vE,EE),l(cE,gE),l(cE,bE),l(bE,$E),l(bE,yE),l(yE,wE),l(bE,OE),l(cE,SE),l(cE,TE),l(TE,LE),l(LE,NE),l(LE,PE),l(PE,xE),l(LE,CE),l(LE,DE),l(DE,AE),l(LE,IE),l(LE,jE),l(jE,RE),l(LE,ME),l(LE,HE),l(HE,_E),l(LE,qE),l(TE,UE),l(TE,GE),l(GE,BE),l(BE,FE),l(TE,JE),l(TE,zE),l(zE,WE),l(WE,YE),l(TE,VE),l(TE,KE),l(KE,ZE),l(ZE,QE),l(KE,XE),l(KE,ag),l(ag,ng),l(KE,sg),l(TE,tg),l(TE,eg),l(eg,og),l(eg,cg),l(cg,pg),l(eg,rg),l(rg,lg),l(lg,ig),l(lg,ug),l(ug,hg),l(lg,dg),l(lg,fg),l(fg,kg),l(lg,mg),l(lg,vg),l(vg,Eg),l(lg,gg),l(lg,bg),l(bg,$g),l(rg,yg),l(rg,wg),l(wg,Og),l(wg,Sg),l(Sg,Tg),l(wg,Lg),l(wg,Ng),l(Ng,Pg),l(TE,xg),l(TE,Cg),l(Cg,Dg),l(Cg,Ag),l(Ag,Ig),l(Cg,jg),l(cE,Rg),l(cE,Mg),l(Mg,Hg),l(Mg,_g),l(_g,qg),l(Mg,Ug),l(Mg,Gg),l(Gg,Bg),l(Mg,Fg),l(Mg,Jg),l(Jg,zg),l(Mg,Wg),l(Mg,Yg),l(Yg,Vg),l(Mg,Kg),l(Mg,Zg),l(Zg,Qg),l(Mg,Xg),l(cE,ab),l(cE,nb),nb.innerHTML='<code class="language-js"><span class="token comment">// Instead of</span>\n<span class="token comment">// #1 &#96;givenName = \'Li Hau\'</span>\nname <span class="token operator">=</span> <span class="token string">\'Li Hau\'</span> <span class="token operator">+</span> <span class="token string">\' \'</span> <span class="token operator">+</span> <span class="token string">\'\'</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'Li Hau \'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// #2 &#96;familyName = \'Tan\'</span>\nname <span class="token operator">=</span> <span class="token string">\'Li Hau\'</span> <span class="token operator">+</span> <span class="token string">\' \'</span> <span class="token operator">+</span> <span class="token string">\'Tan\'</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'Li Hau Tan\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Reactive declarations and statements are batched</span>\n<span class="token comment">// #1 &#96;givenName = \'Li Hau\'</span>\n<span class="token comment">// #2 &#96;familyName = \'Tan\'</span>\nname <span class="token operator">=</span> <span class="token string">\'Li Hau\'</span> <span class="token operator">+</span> <span class="token string">\' \'</span> <span class="token operator">+</span> <span class="token string">\'Tan\'</span><span class="token punctuation">;</span>\n<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">\'Li Hau Tan\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>',i(a,sb,n),i(a,tb,n),l(tb,eb),l(eb,ob),l(ob,cb),l(tb,pb),l(tb,rb),l(rb,lb),l(tb,ib),l(tb,ub),ub.innerHTML='<code class="language-svelte">&lt;script&gt;\n  let givenName = &#39;&#39;, familyName = &#39;&#39;;\n  function update() &#123;\n    givenName = &#39;Li Hau&#39;;\n    familyName = &#39;Tan&#39;;\n    // highlight-next-line\n    console.log(&#39;name&#39;, name); // Logs &#39;&#39;\n  &#125;\n  $: name = givenName + &quot; &quot; + familyName;\n&lt;/script&gt;</code>',l(tb,hb),l(tb,db),l(db,fb),l(fb,kb),l(tb,mb),l(tb,vb),l(vb,Eb),l(vb,gb),l(gb,bb),l(vb,$b),l(tb,yb),l(tb,wb),wb.innerHTML='<code class="language-svelte">&lt;script&gt;\n  let givenName = &#39;&#39;, familyName = &#39;&#39;;\n  function update() &#123;\n    givenName = &#39;Li Hau&#39;;\n    familyName = &#39;Tan&#39;;\n  &#125;\n  $: name = givenName + &quot; &quot; + familyName;\n  // highlight-next-line\n  $: console.log(&#39;name&#39;, name); // Logs &#39;Li Hau Tan&#39;\n&lt;/script&gt;</code>',i(a,Ob,n),i(a,Sb,n),l(Sb,Tb),l(Tb,Lb),l(Lb,Nb),l(Sb,Pb),l(Sb,xb),l(xb,Cb),l(Sb,Db),l(Sb,Ab),l(Ab,Ib),l(Ab,jb),l(jb,Rb),l(Ab,Mb),l(Sb,Hb),l(Sb,_b),_b.innerHTML='<code class="language-js"><span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token comment">// NOTE: refers to &#96;doubled&#96;</span>\n$<span class="token punctuation">:</span> quadrupled <span class="token operator">=</span> doubled <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token comment">// NOTE: defined &#96;doubled&#96;</span>\n$<span class="token punctuation">:</span> doubled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>\n\n<span class="token comment">// compiles into:</span>\n\n$$self<span class="token punctuation">.</span><span class="token property-access">$$</span><span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">update</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// ...</span>\n  $<span class="token punctuation">:</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token comment">/* doubled */</span><span class="token punctuation">,</span> doubled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  $<span class="token punctuation">:</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token comment">/* quadrupled */</span><span class="token punctuation">,</span> quadrupled <span class="token operator">=</span> doubled <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">&#125;</span></code>',i(a,qb,n),i(a,Ub,n),l(Ub,Gb),l(Gb,Bb),l(Bb,Fb),l(Ub,Jb),l(Ub,zb),l(zb,Wb),l(zb,Yb),l(Yb,Vb),l(zb,Kb),l(Ub,Zb),l(Ub,Qb),l(Qb,Xb),l(Qb,a$),l(a$,n$),l(Qb,s$),l(Ub,t$),l(Ub,e$),l(e$,o$),l(Ub,c$),l(Ub,p$),p$.innerHTML='<code class="language-svelte">&lt;script&gt;\n  let count = 0;\n  $: doubled = count * 2;\n&lt;/script&gt;\n&#123; count &#125; x 2 = &#123;doubled&#125;</code>',l(Ub,r$),l(Ub,l$),l(l$,i$),l(i$,u$),l(Ub,h$),l(Ub,d$),l(d$,f$),l(d$,k$),l(k$,m$),l(d$,v$),l(d$,E$),l(E$,g$),l(d$,b$),l(Ub,$$),l(Ub,y$),y$.innerHTML='<code class="language-js"><span class="token comment">// ...</span>\n<span class="token keyword">function</span> <span class="token function">instance</span><span class="token punctuation">(</span><span class="token parameter">$$self<span class="token punctuation">,</span> $$props<span class="token punctuation">,</span> $$invalidate</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">let</span> doubled<span class="token punctuation">;</span>\n  $<span class="token punctuation">:</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>doubled <span class="token operator">=</span> count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span>doubled<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',i(a,w$,n),i(a,O$,n),l(O$,S$),l(S$,T$),l(T$,L$),i(a,N$,n),i(a,P$,n),l(P$,x$),l(x$,C$),l(C$,D$),i(a,A$,n),i(a,I$,n),l(I$,j$),l(j$,R$),l(R$,M$),i(a,H$,n),i(a,_$,n),l(_$,q$),l(q$,U$),l(U$,G$),i(a,B$,n),i(a,F$,n),l(F$,J$),l(J$,z$),l(z$,W$),l(F$,Y$),l(F$,V$),l(V$,K$),l(V$,Z$),l(Z$,Q$),l(V$,X$),l(F$,ay),l(F$,ny),l(ny,sy),l(ny,ty),l(ty,ey),l(ny,oy),l(ny,cy),l(cy,py),l(ny,ry),l(ny,ly),l(ly,iy),l(ny,uy),l(F$,hy),l(F$,dy),l(dy,fy),l(fy,ky),l(fy,my),l(my,vy),l(fy,Ey),l(F$,gy),l(F$,by),l(by,$y),l($y,yy),l($y,wy),l(wy,Oy),l($y,Sy),i(a,Ty,n),i(a,Ly,n),l(Ly,Ny),l(Ny,Py),l(Py,xy),l(Ly,Cy),l(Ly,Dy),l(Dy,Ay),l(Ay,Iy),l(Ay,jy),l(jy,Ry),l(Ay,My),l(Dy,Hy),l(Dy,_y),l(_y,qy),l(_y,Uy),l(Uy,Gy),l(_y,By),l(_y,Fy),l(Fy,Jy),l(Dy,zy),l(Dy,Wy),l(Wy,Yy),l(Yy,Vy),l(Wy,Ky),l(Dy,Zy),l(Dy,Qy),l(Qy,Xy),l(Xy,aw),l(Qy,nw),l(Dy,sw),l(Dy,tw),l(tw,ew),l(ew,ow)},p:a,d(a){a&&u(s),a&&u(ja),a&&u(Ra),a&&u(Ga),a&&u(Ba),a&&u(Xa),a&&u(an),a&&u(nn),a&&u(sn),a&&u(un),a&&u(hn),a&&u(vn),a&&u(En),a&&u(Bn),a&&u(Fn),a&&u(ct),a&&u(pt),a&&u(xe),a&&u(Ce),a&&u(xc),a&&u(Cc),a&&u(ai),a&&u(ni),a&&u(Ri),a&&u(Mi),a&&u(vu),a&&u(Eu),a&&u(id),a&&u(ud),a&&u(Uf),a&&u(Gf),a&&u(rk),a&&u(lk),a&&u(Tk),a&&u(Lk),a&&u(oE),a&&u(cE),a&&u(sb),a&&u(tb),a&&u(Ob),a&&u(Sb),a&&u(qb),a&&u(Ub),a&&u(w$),a&&u(O$),a&&u(N$),a&&u(P$),a&&u(A$),a&&u(I$),a&&u(H$),a&&u(_$),a&&u(B$),a&&u(F$),a&&u(Ty),a&&u(Ly)}}}function ha(a){let s,t;const e=[da];let o={$$slots:{default:[ua]},$$scope:{ctx:a}};for(let a=0;a<e.length;a+=1)o=n(o,e[a]);return s=new ia({props:o}),{c(){B(s.$$.fragment)},l(a){F(s.$$.fragment,a)},m(a,n){J(s,a,n),t=!0},p(a,[n]){const t=0&n?function(a,n){const s={},t={},e={$$scope:1};let o=a.length;for(;o--;){const c=a[o],p=n[o];if(p){for(const a in c)a in p||(t[a]=1);for(const a in p)e[a]||(s[a]=p[a],e[a]=1);a[o]=p}else for(const a in c)e[a]=1}for(const a in t)a in s||(s[a]=void 0);return s}(e,[(o=da,"object"==typeof o&&null!==o?o:{})]):{};var o;1&n&&(t.$$scope={dirty:n,ctx:a}),s.$set(t)},i(a){t||(U(s.$$.fragment,a),t=!0)},o(a){G(s.$$.fragment,a),t=!1},d(a){z(s,a)}}}const da={title:"Compile Svelte in your head (Part 2)",date:"2020-03-22T08:00:00Z",tags:["Svelte","JavaScript"],series:"Compile Svelte in your head",slug:"compile-svelte-in-your-head-part-2",type:"blog"};class fa extends V{constructor(a){super(),Y(this,a,null,ha,c,{})}}setTimeout(()=>{new fa({target:document.querySelector("#app"),hydrate:!0});if(document.querySelector(".twitter-tweet")){const a=document.createElement("script");a.async=!0,a.src="https://platform.twitter.com/widgets.js",a.charset="utf-8",document.body.appendChild(a)}},3e3);
