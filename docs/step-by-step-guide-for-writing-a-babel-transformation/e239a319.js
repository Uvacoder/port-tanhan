function n(){}function a(n,a){for(const t in a)n[t]=a[t];return n}function t(n){return n()}function s(){return Object.create(null)}function e(n){n.forEach(t)}function o(n){return"function"==typeof n}function c(n,a){return n!=n?a==a:n!==a||n&&"object"==typeof n||"function"==typeof n}function p(n,t,s,e){return n[1]&&e?a(s.ctx.slice(),n[1](e(t))):s.ctx}function r(n,a,t,s,e,o,c){const r=function(n,a,t,s){if(n[2]&&s){const e=n[2](s(t));if(void 0===a.dirty)return e;if("object"==typeof e){const n=[],t=Math.max(a.dirty.length,e.length);for(let s=0;s<t;s+=1)n[s]=a.dirty[s]|e[s];return n}return a.dirty|e}return a.dirty}(a,s,e,o);if(r){const e=p(a,t,s,c);n.p(e,r)}}function i(n,a){n.appendChild(a)}function l(n,a,t){n.insertBefore(a,t||null)}function u(n){n.parentNode.removeChild(n)}function h(n,a){for(let t=0;t<n.length;t+=1)n[t]&&n[t].d(a)}function f(n){return document.createElement(n)}function d(n){return document.createElementNS("http://www.w3.org/2000/svg",n)}function k(n){return document.createTextNode(n)}function m(){return k(" ")}function b(){return k("")}function g(n,a,t){null==t?n.removeAttribute(a):n.getAttribute(a)!==t&&n.setAttribute(a,t)}function v(n){return Array.from(n.childNodes)}function w(n,a,t,s){for(let s=0;s<n.length;s+=1){const e=n[s];if(e.nodeName===a){let a=0;const o=[];for(;a<e.attributes.length;){const n=e.attributes[a++];t[n.name]||o.push(n.name)}for(let n=0;n<o.length;n++)e.removeAttribute(o[n]);return n.splice(s,1)[0]}}return s?d(a):f(a)}function E(n,a){for(let t=0;t<n.length;t+=1){const s=n[t];if(3===s.nodeType)return s.data=""+a,n.splice(t,1)[0]}return k(a)}function y(n){return E(n," ")}function A(n,a){a=""+a,n.wholeText!==a&&(n.data=a)}function S(n,a){n.value=null==a?"":a}class I{constructor(n=null){this.a=n,this.e=this.n=null}m(n,a,t=null){this.e||(this.e=f(a.nodeName),this.t=a,this.h(n)),this.i(t)}h(n){this.e.innerHTML=n,this.n=Array.from(this.e.childNodes)}i(n){for(let a=0;a<this.n.length;a+=1)l(this.t,this.n[a],n)}p(n){this.d(),this.h(n),this.i(this.a)}d(){this.n.forEach(u)}}let T;function C(n){T=n}function L(n){(function(){if(!T)throw new Error("Function called outside component initialization");return T})().$$.on_mount.push(n)}const x=[],O=[],P=[],j=[],H=Promise.resolve();let $=!1;function D(n){P.push(n)}let W=!1;const R=new Set;function M(){if(!W){W=!0;do{for(let n=0;n<x.length;n+=1){const a=x[n];C(a),N(a.$$)}for(x.length=0;O.length;)O.pop()();for(let n=0;n<P.length;n+=1){const a=P[n];R.has(a)||(R.add(a),a())}P.length=0}while(x.length);for(;j.length;)j.pop()();$=!1,W=!1,R.clear()}}function N(n){if(null!==n.fragment){n.update(),e(n.before_update);const a=n.dirty;n.dirty=[-1],n.fragment&&n.fragment.p(n.ctx,a),n.after_update.forEach(D)}}const B=new Set;function J(n,a){n&&n.i&&(B.delete(n),n.i(a))}function G(n,a,t,s){if(n&&n.o){if(B.has(n))return;B.add(n),(void 0).c.push(()=>{B.delete(n),s&&(t&&n.d(1),s())}),n.o(a)}}function U(n){n&&n.c()}function V(n,a){n&&n.l(a)}function F(n,a,s){const{fragment:c,on_mount:p,on_destroy:r,after_update:i}=n.$$;c&&c.m(a,s),D(()=>{const a=p.map(t).filter(o);r?r.push(...a):e(a),n.$$.on_mount=[]}),i.forEach(D)}function Z(n,a){const t=n.$$;null!==t.fragment&&(e(t.on_destroy),t.fragment&&t.fragment.d(a),t.on_destroy=t.fragment=null,t.ctx=[])}function K(n,a){-1===n.$$.dirty[0]&&(x.push(n),$||($=!0,H.then(M)),n.$$.dirty.fill(0)),n.$$.dirty[a/31|0]|=1<<a%31}function Y(a,t,o,c,p,r,i=[-1]){const l=T;C(a);const h=t.props||{},f=a.$$={fragment:null,ctx:null,props:r,update:n,not_equal:p,bound:s(),on_mount:[],on_destroy:[],before_update:[],after_update:[],context:new Map(l?l.$$.context:[]),callbacks:s(),dirty:i};let d=!1;if(f.ctx=o?o(a,h,(n,t,...s)=>{const e=s.length?s[0]:t;return f.ctx&&p(f.ctx[n],f.ctx[n]=e)&&(f.bound[n]&&f.bound[n](e),d&&K(a,n)),t}):[],f.update(),d=!0,e(f.before_update),f.fragment=!!c&&c(f.ctx),t.target){if(t.hydrate){const n=v(t.target);f.fragment&&f.fragment.l(n),n.forEach(u)}else f.fragment&&f.fragment.c();t.intro&&J(a.$$.fragment),F(a,t.target,t.anchor),M()}C(l)}class _{$destroy(){Z(this,1),this.$destroy=n}$on(n,a){const t=this.$$.callbacks[n]||(this.$$.callbacks[n]=[]);return t.push(a),()=>{const n=t.indexOf(a);-1!==n&&t.splice(n,1)}}$set(){}}function X(a){let t,s,e,o,c,p,r,h,b,A,S,I,T,C,L,x,O,P,j,H,$,D,W,R,M,N,B,J,G,U,V,F,Z,K,Y;return{c(){t=f("header"),s=f("nav"),e=f("ul"),o=f("li"),c=f("a"),p=k("Tan Li Hau"),r=m(),h=f("li"),b=f("a"),A=k("About"),S=m(),I=f("li"),T=f("a"),C=k("Writings"),L=m(),x=f("li"),O=f("a"),P=k("Talks"),j=m(),H=f("li"),$=f("a"),D=k("Notes"),W=m(),R=f("li"),M=f("a"),N=k("Newsletter"),B=m(),J=f("li"),G=f("a"),U=d("svg"),V=d("path"),F=m(),Z=f("a"),K=d("svg"),Y=d("path"),this.h()},l(n){t=w(n,"HEADER",{class:!0});var a=v(t);s=w(a,"NAV",{});var i=v(s);e=w(i,"UL",{class:!0});var l=v(e);o=w(l,"LI",{class:!0});var f=v(o);c=w(f,"A",{href:!0,class:!0});var d=v(c);p=E(d,"Tan Li Hau"),d.forEach(u),f.forEach(u),r=y(l),h=w(l,"LI",{class:!0});var k=v(h);b=w(k,"A",{href:!0,class:!0});var m=v(b);A=E(m,"About"),m.forEach(u),k.forEach(u),S=y(l),I=w(l,"LI",{class:!0});var g=v(I);T=w(g,"A",{href:!0,class:!0});var _=v(T);C=E(_,"Writings"),_.forEach(u),g.forEach(u),L=y(l),x=w(l,"LI",{class:!0});var X=v(x);O=w(X,"A",{href:!0,class:!0});var q=v(O);P=E(q,"Talks"),q.forEach(u),X.forEach(u),j=y(l),H=w(l,"LI",{class:!0});var z=v(H);$=w(z,"A",{href:!0,class:!0});var Q=v($);D=E(Q,"Notes"),Q.forEach(u),z.forEach(u),W=y(l),R=w(l,"LI",{class:!0});var nn=v(R);M=w(nn,"A",{href:!0,class:!0});var an=v(M);N=E(an,"Newsletter"),an.forEach(u),nn.forEach(u),B=y(l),J=w(l,"LI",{class:!0});var tn=v(J);G=w(tn,"A",{"aria-label":!0,href:!0,class:!0});var sn=v(G);U=w(sn,"svg",{viewBox:!0,width:!0,height:!0,class:!0},1);var en=v(U);V=w(en,"path",{d:!0},1),v(V).forEach(u),en.forEach(u),sn.forEach(u),F=y(tn),Z=w(tn,"A",{"aria-label":!0,href:!0,class:!0});var on=v(Z);K=w(on,"svg",{viewBox:!0,width:!0,height:!0,class:!0},1);var cn=v(K);Y=w(cn,"path",{d:!0},1),v(Y).forEach(u),cn.forEach(u),on.forEach(u),tn.forEach(u),l.forEach(u),i.forEach(u),a.forEach(u),this.h()},h(){g(c,"href","/"),g(c,"class","svelte-f3e4uo"),g(o,"class","svelte-f3e4uo"),g(b,"href","/about"),g(b,"class","svelte-f3e4uo"),g(h,"class","svelte-f3e4uo"),g(T,"href","/blogs"),g(T,"class","svelte-f3e4uo"),g(I,"class","svelte-f3e4uo"),g(O,"href","/talks"),g(O,"class","svelte-f3e4uo"),g(x,"class","svelte-f3e4uo"),g($,"href","/notes"),g($,"class","svelte-f3e4uo"),g(H,"class","svelte-f3e4uo"),g(M,"href","/newsletter"),g(M,"class","svelte-f3e4uo"),g(R,"class","svelte-f3e4uo"),g(V,"d","M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66\n    10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5\n    4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"),g(U,"viewBox","0 0 24 24"),g(U,"width","1em"),g(U,"height","1em"),g(U,"class","svelte-f3e4uo"),g(G,"aria-label","Twitter account"),g(G,"href","https://twitter.com/lihautan"),g(G,"class","svelte-f3e4uo"),g(Y,"d","M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0\n    0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07\n    5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65\n    5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42\n    3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"),g(K,"viewBox","0 0 24 24"),g(K,"width","1em"),g(K,"height","1em"),g(K,"class","svelte-f3e4uo"),g(Z,"aria-label","Github account"),g(Z,"href","https://github.com/tanhauhau"),g(Z,"class","svelte-f3e4uo"),g(J,"class","social svelte-f3e4uo"),g(e,"class","svelte-f3e4uo"),g(t,"class","svelte-f3e4uo")},m(n,a){l(n,t,a),i(t,s),i(s,e),i(e,o),i(o,c),i(c,p),i(e,r),i(e,h),i(h,b),i(b,A),i(e,S),i(e,I),i(I,T),i(T,C),i(e,L),i(e,x),i(x,O),i(O,P),i(e,j),i(e,H),i(H,$),i($,D),i(e,W),i(e,R),i(R,M),i(M,N),i(e,B),i(e,J),i(J,G),i(G,U),i(U,V),i(J,F),i(J,Z),i(Z,K),i(K,Y)},p:n,i:n,o:n,d(n){n&&u(t)}}}class q extends _{constructor(n){super(),Y(this,n,null,X,c,{})}}function z(a){let t,s,e,o,c,p,r,h,d,b,A,I,T,C,L,x,O,P,j,H;return{c(){t=f("div"),s=f("h1"),e=k("Subscribe to my newsletter"),o=m(),c=f("h2"),p=k("Get the latest blog posts and project updates delivered right to your inbox"),r=m(),h=f("form"),d=f("div"),b=f("input"),A=m(),I=f("input"),C=m(),L=f("input"),x=m(),O=f("p"),P=k("Powered by Buttondown."),this.h()},l(n){t=w(n,"DIV",{class:!0});var a=v(t);s=w(a,"H1",{});var i=v(s);e=E(i,"Subscribe to my newsletter"),i.forEach(u),o=y(a),c=w(a,"H2",{class:!0});var l=v(c);p=E(l,"Get the latest blog posts and project updates delivered right to your inbox"),l.forEach(u),r=y(a),h=w(a,"FORM",{action:!0,method:!0,target:!0,onsubmit:!0,class:!0});var f=v(h);d=w(f,"DIV",{class:!0});var k=v(d);b=w(k,"INPUT",{type:!0,name:!0,id:!0,"aria-label":!0,placeholder:!0,class:!0}),A=y(k),I=w(k,"INPUT",{type:!0,value:!0,disabled:!0,class:!0}),k.forEach(u),C=y(f),L=w(f,"INPUT",{type:!0,value:!0,name:!0,class:!0}),x=y(f),O=w(f,"P",{class:!0});var m=v(O);P=E(m,"Powered by Buttondown."),m.forEach(u),f.forEach(u),a.forEach(u),this.h()},h(){g(c,"class","svelte-1k1s1co"),g(b,"type","email"),g(b,"name","email"),g(b,"id","bd-email"),g(b,"aria-label","email address"),g(b,"placeholder","youremail@example.com"),g(b,"class","svelte-1k1s1co"),g(I,"type","submit"),I.value="Subscribe",I.disabled=T=!a[0],g(I,"class","svelte-1k1s1co"),g(d,"class","form-item svelte-1k1s1co"),g(L,"type","hidden"),L.value="1",g(L,"name","embed"),g(L,"class","svelte-1k1s1co"),g(O,"class","svelte-1k1s1co"),g(h,"action","https://buttondown.email/api/emails/embed-subscribe/lihautan"),g(h,"method","post"),g(h,"target","popupwindow"),g(h,"onsubmit","window.open('https://buttondown.email/lihautan', 'popupwindow')"),g(h,"class","embeddable-buttondown-form"),g(t,"class","form svelte-1k1s1co")},m(n,u){var f,k,m,g;l(n,t,u),i(t,s),i(s,e),i(t,o),i(t,c),i(c,p),i(t,r),i(t,h),i(h,d),i(d,b),S(b,a[0]),i(d,A),i(d,I),i(h,C),i(h,L),i(h,x),i(h,O),i(O,P),j||(f=b,k="input",m=a[1],f.addEventListener(k,m,g),H=()=>f.removeEventListener(k,m,g),j=!0)},p(n,[a]){1&a&&b.value!==n[0]&&S(b,n[0]),1&a&&T!==(T=!n[0])&&(I.disabled=T)},i:n,o:n,d(n){n&&u(t),j=!1,H()}}}function Q(n,a,t){let s;return[s,function(){s=this.value,t(0,s)}]}class nn extends _{constructor(n){super(),Y(this,n,Q,z,c,{})}}function an(n){return L(()=>(setTimeout(()=>{if(window.innerWidth>1080){const n=document.createElement("script");n.async=!0,n.type="text/javascript",n.src="//cdn.carbonads.com/carbon.js?serve=CE7ITK3E&placement=lihautancom",n.id="_carbonads_js",document.body.appendChild(n)}},5e3),()=>{try{const n=document.getElementById("carbonads");n.parentNode.removeChild(n)}catch(n){}})),[]}class tn extends _{constructor(n){super(),Y(this,n,an,null,c,{})}}var sn="https://lihautan.com/step-by-step-guide-for-writing-a-babel-transformation/assets/hero-twitter-7e567f5d.jpg";function en(n,a,t){const s=n.slice();return s[6]=a[t],s}function on(n,a,t){const s=n.slice();return s[6]=a[t],s}function cn(n){let a,t;return{c(){a=f("meta"),this.h()},l(n){a=w(n,"META",{name:!0,content:!0}),this.h()},h(){g(a,"name","keywords"),g(a,"content",t=n[6])},m(n,t){l(n,a,t)},p(n,s){4&s&&t!==(t=n[6])&&g(a,"content",t)},d(n){n&&u(a)}}}function pn(n){let a,t,s=n[6]+"";return{c(){a=f("span"),t=k(s),this.h()},l(n){a=w(n,"SPAN",{class:!0});var e=v(a);t=E(e,s),e.forEach(u),this.h()},h(){g(a,"class","svelte-9tqnza")},m(n,s){l(n,a,s),i(a,t)},p(n,a){4&a&&s!==(s=n[6]+"")&&A(t,s)},d(n){n&&u(a)}}}function rn(n){let a,t,s,e,o,c,d,S,T,C,L,x,O,P,j,H,$,D,W,R,M,N,B,K,Y,_,X,z,Q,an,rn,ln,un,hn,fn,dn,kn,mn,bn,gn=`<script type="application/ld+json">${JSON.stringify({"@context":"https://schema.org","@type":"Article",author:n[3],copyrightHolder:n[3],copyrightYear:"2020",creator:n[3],publisher:n[3],description:n[1],headline:n[0],name:n[0],inLanguage:"en"})}<\/script>`,vn=`<script type="application/ld+json">${JSON.stringify({"@context":"https://schema.org","@type":"BreadcrumbList",description:"Breadcrumbs list",name:"Breadcrumbs",itemListElement:[{"@type":"ListItem",item:{"@id":"https://lihautan.com",name:"Homepage"},position:1},{"@type":"ListItem",item:{"@id":"https%3A%2F%2Flihautan.com%2Fstep-by-step-guide-for-writing-a-babel-transformation",name:n[0]},position:2}]})}<\/script>`;document.title=a=n[0]+" | Tan Li Hau";let wn=n[2],En=[];for(let a=0;a<wn.length;a+=1)En[a]=cn(on(n,wn,a));B=new q({});let yn=n[2],An=[];for(let a=0;a<yn.length;a+=1)An[a]=pn(en(n,yn,a));const Sn=n[5].default,In=function(n,a,t,s){if(n){const e=p(n,a,t,s);return n[0](e)}}(Sn,n,n[4],null);return un=new nn({}),fn=new tn({}),{c(){t=f("meta"),s=f("meta"),e=f("meta"),o=f("meta"),c=f("meta"),d=f("meta"),S=f("meta"),T=f("meta"),C=f("meta"),L=f("meta"),x=f("meta");for(let n=0;n<En.length;n+=1)En[n].c();O=f("meta"),P=f("meta"),H=b(),D=b(),W=m(),R=f("a"),M=k("Skip to content"),N=m(),U(B.$$.fragment),K=m(),Y=f("main"),_=f("h1"),X=k(n[0]),z=m();for(let n=0;n<An.length;n+=1)An[n].c();Q=m(),an=f("article"),In&&In.c(),rn=m(),ln=f("footer"),U(un.$$.fragment),hn=m(),U(fn.$$.fragment),dn=m(),mn=b(),this.h()},l(a){const p=function(n,a=document.body){return Array.from(a.querySelectorAll(n))}('[data-svelte="svelte-n0q11s"]',document.head);t=w(p,"META",{name:!0,content:!0}),s=w(p,"META",{name:!0,content:!0}),e=w(p,"META",{name:!0,content:!0}),o=w(p,"META",{name:!0,content:!0}),c=w(p,"META",{name:!0,content:!0}),d=w(p,"META",{name:!0,content:!0}),S=w(p,"META",{name:!0,content:!0}),T=w(p,"META",{name:!0,content:!0}),C=w(p,"META",{name:!0,content:!0}),L=w(p,"META",{name:!0,content:!0}),x=w(p,"META",{name:!0,content:!0});for(let n=0;n<En.length;n+=1)En[n].l(p);O=w(p,"META",{itemprop:!0,content:!0}),P=w(p,"META",{itemprop:!0,content:!0}),H=b(),D=b(),p.forEach(u),W=y(a),R=w(a,"A",{href:!0,class:!0});var r=v(R);M=E(r,"Skip to content"),r.forEach(u),N=y(a),V(B.$$.fragment,a),K=y(a),Y=w(a,"MAIN",{id:!0,class:!0});var i=v(Y);_=w(i,"H1",{});var l=v(_);X=E(l,n[0]),l.forEach(u),z=y(i);for(let n=0;n<An.length;n+=1)An[n].l(i);Q=y(i),an=w(i,"ARTICLE",{});var h=v(an);In&&In.l(h),h.forEach(u),i.forEach(u),rn=y(a),ln=w(a,"FOOTER",{class:!0});var f=v(ln);V(un.$$.fragment,f),hn=y(f),V(fn.$$.fragment,f),f.forEach(u),dn=y(a),mn=b(),this.h()},h(){g(t,"name","description"),g(t,"content",n[1]),g(s,"name","image"),g(s,"content",sn),g(e,"name","og:image"),g(e,"content",sn),g(o,"name","og:title"),g(o,"content",n[0]),g(c,"name","og:description"),g(c,"content",n[1]),g(d,"name","og:type"),g(d,"content","website"),g(S,"name","twitter:card"),g(S,"content","summary_large_image"),g(T,"name","twitter:creator"),g(T,"content","@lihautan"),g(C,"name","twitter:title"),g(C,"content",n[0]),g(L,"name","twitter:description"),g(L,"content",n[1]),g(x,"name","twitter:image"),g(x,"content",sn),g(O,"itemprop","url"),g(O,"content","https%3A%2F%2Flihautan.com%2Fstep-by-step-guide-for-writing-a-babel-transformation"),g(P,"itemprop","image"),g(P,"content",sn),j=new I(H),$=new I(D),g(R,"href","#content"),g(R,"class","skip svelte-9tqnza"),g(Y,"id","content"),g(Y,"class","blog svelte-9tqnza"),g(ln,"class","svelte-9tqnza"),kn=new I(mn)},m(n,a){i(document.head,t),i(document.head,s),i(document.head,e),i(document.head,o),i(document.head,c),i(document.head,d),i(document.head,S),i(document.head,T),i(document.head,C),i(document.head,L),i(document.head,x);for(let n=0;n<En.length;n+=1)En[n].m(document.head,null);i(document.head,O),i(document.head,P),j.m(gn,document.head),i(document.head,H),$.m(vn,document.head),i(document.head,D),l(n,W,a),l(n,R,a),i(R,M),l(n,N,a),F(B,n,a),l(n,K,a),l(n,Y,a),i(Y,_),i(_,X),i(Y,z);for(let n=0;n<An.length;n+=1)An[n].m(Y,null);i(Y,Q),i(Y,an),In&&In.m(an,null),l(n,rn,a),l(n,ln,a),F(un,ln,null),i(ln,hn),F(fn,ln,null),l(n,dn,a),kn.m('<script async defer src="https://platform.twitter.com/widgets.js" charset="utf-8"><\/script>',n,a),l(n,mn,a),bn=!0},p(n,[s]){if((!bn||1&s)&&a!==(a=n[0]+" | Tan Li Hau")&&(document.title=a),(!bn||2&s)&&g(t,"content",n[1]),(!bn||1&s)&&g(o,"content",n[0]),(!bn||2&s)&&g(c,"content",n[1]),(!bn||1&s)&&g(C,"content",n[0]),(!bn||2&s)&&g(L,"content",n[1]),4&s){let a;for(wn=n[2],a=0;a<wn.length;a+=1){const t=on(n,wn,a);En[a]?En[a].p(t,s):(En[a]=cn(t),En[a].c(),En[a].m(O.parentNode,O))}for(;a<En.length;a+=1)En[a].d(1);En.length=wn.length}if((!bn||3&s)&&gn!==(gn=`<script type="application/ld+json">${JSON.stringify({"@context":"https://schema.org","@type":"Article",author:n[3],copyrightHolder:n[3],copyrightYear:"2020",creator:n[3],publisher:n[3],description:n[1],headline:n[0],name:n[0],inLanguage:"en"})}<\/script>`)&&j.p(gn),(!bn||1&s)&&vn!==(vn=`<script type="application/ld+json">${JSON.stringify({"@context":"https://schema.org","@type":"BreadcrumbList",description:"Breadcrumbs list",name:"Breadcrumbs",itemListElement:[{"@type":"ListItem",item:{"@id":"https://lihautan.com",name:"Homepage"},position:1},{"@type":"ListItem",item:{"@id":"https%3A%2F%2Flihautan.com%2Fstep-by-step-guide-for-writing-a-babel-transformation",name:n[0]},position:2}]})}<\/script>`)&&$.p(vn),(!bn||1&s)&&A(X,n[0]),4&s){let a;for(yn=n[2],a=0;a<yn.length;a+=1){const t=en(n,yn,a);An[a]?An[a].p(t,s):(An[a]=pn(t),An[a].c(),An[a].m(Y,Q))}for(;a<An.length;a+=1)An[a].d(1);An.length=yn.length}In&&In.p&&16&s&&r(In,Sn,n,n[4],s,null,null)},i(n){bn||(J(B.$$.fragment,n),J(In,n),J(un.$$.fragment,n),J(fn.$$.fragment,n),bn=!0)},o(n){G(B.$$.fragment,n),G(In,n),G(un.$$.fragment,n),G(fn.$$.fragment,n),bn=!1},d(n){u(t),u(s),u(e),u(o),u(c),u(d),u(S),u(T),u(C),u(L),u(x),h(En,n),u(O),u(P),u(H),n&&j.d(),u(D),n&&$.d(),n&&u(W),n&&u(R),n&&u(N),Z(B,n),n&&u(K),n&&u(Y),h(An,n),In&&In.d(n),n&&u(rn),n&&u(ln),Z(un),Z(fn),n&&u(dn),n&&u(mn),n&&kn.d()}}}function ln(n,a,t){let{title:s=""}=a,{description:e=""}=a,{tags:o=[]}=a;const c={"@type":"Person",name:"Tan Li Hau"};let{$$slots:p={},$$scope:r}=a;return n.$set=n=>{"title"in n&&t(0,s=n.title),"description"in n&&t(1,e=n.description),"tags"in n&&t(2,o=n.tags),"$$scope"in n&&t(4,r=n.$$scope)},[s,e,o,c,r,p]}class un extends _{constructor(n){super(),Y(this,n,ln,rn,c,{title:0,description:1,tags:2})}}function hn(a){let t,s,e,o,c,p,r,h,d,b,A,S,I,T,C,L,x,O,P,j,H,$,D,W,R,M,N,B,J,G,U,V,F,Z,K,Y,_,X,q,z,Q,nn,an,tn,sn,en,on,cn,pn,rn,ln,un,hn,fn,dn,kn,mn,bn,gn,vn,wn,En,yn,An,Sn,In,Tn,Cn,Ln,xn,On,Pn,jn,Hn,$n,Dn,Wn,Rn,Mn,Nn,Bn,Jn,Gn,Un,Vn,Fn,Zn,Kn,Yn,_n,Xn,qn,zn,Qn,na,aa,ta,sa,ea,oa,ca,pa,ra,ia,la,ua,ha,fa,da,ka,ma,ba,ga,va,wa,Ea,ya,Aa,Sa,Ia,Ta,Ca,La,xa,Oa,Pa,ja,Ha,$a,Da,Wa,Ra,Ma,Na,Ba,Ja,Ga,Ua,Va,Fa,Za,Ka,Ya,_a,Xa,qa,za,Qa,nt,at,tt,st,et,ot,ct,pt,rt,it,lt,ut,ht,ft,dt,kt,mt,bt,gt,vt,wt,Et,yt,At,St,It,Tt,Ct,Lt,xt,Ot,Pt,jt,Ht,$t,Dt,Wt,Rt,Mt,Nt,Bt,Jt,Gt,Ut,Vt,Ft,Zt,Kt,Yt,_t,Xt,qt,zt,Qt,ns,as,ts,ss,es,os,cs,ps,rs,is,ls,us,hs,fs,ds,ks,ms,bs,gs,vs,ws,Es,ys,As,Ss,Is,Ts,Cs,Ls,xs,Os,Ps,js,Hs,$s,Ds,Ws,Rs,Ms,Ns,Bs,Js,Gs,Us,Vs,Fs,Zs,Ks,Ys,_s,Xs,qs,zs,Qs,ne,ae,te,se,ee,oe,ce,pe,re,ie,le,ue,he,fe,de,ke,me,be,ge,ve,we,Ee,ye,Ae,Se,Ie,Te,Ce,Le,xe,Oe,Pe,je,He,$e,De,We,Re,Me,Ne,Be,Je,Ge,Ue,Ve,Fe,Ze,Ke,Ye,_e,Xe,qe,ze,Qe,no,ao,to,so,eo,oo,co,po,ro,io,lo,uo,ho,fo,ko,mo,bo,go,vo,wo,Eo,yo,Ao,So,Io,To,Co,Lo,xo,Oo,Po,jo,Ho,$o,Do,Wo,Ro,Mo,No,Bo,Jo,Go,Uo,Vo,Fo,Zo,Ko,Yo,_o,Xo,qo,zo,Qo,nc,ac,tc,sc,ec,oc,cc,pc,rc,ic,lc,uc,hc,fc,dc,kc,mc,bc,gc,vc,wc,Ec,yc,Ac,Sc,Ic,Tc,Cc,Lc,xc,Oc,Pc,jc,Hc,$c,Dc,Wc,Rc,Mc,Nc,Bc,Jc,Gc,Uc,Vc,Fc,Zc,Kc,Yc,_c,Xc,qc,zc,Qc,np,ap,tp,sp,ep,op,cp,pp,rp,ip,lp,up,hp,fp,dp,kp,mp,bp,gp,vp,wp,Ep,yp,Ap,Sp,Ip,Tp,Cp,Lp,xp,Op,Pp,jp,Hp,$p,Dp,Wp,Rp,Mp,Np,Bp,Jp,Gp,Up,Vp,Fp,Zp,Kp,Yp,_p,Xp,qp,zp,Qp,nr,ar,tr,sr,er,or,cr,pr,rr,ir,lr,ur,hr,fr,dr,kr,mr,br,gr,vr,wr,Er,yr,Ar,Sr,Ir,Tr,Cr,Lr,xr,Or,Pr,jr,Hr,$r,Dr,Wr,Rr,Mr,Nr,Br,Jr,Gr,Ur,Vr,Fr,Zr,Kr,Yr,_r,Xr,qr,zr,Qr,ni,ai,ti,si,ei,oi,ci,pi,ri,ii,li,ui,hi,fi,di,ki,mi,bi,gi,vi,wi,Ei,yi,Ai,Si,Ii,Ti,Ci,Li,xi,Oi,Pi,ji,Hi,$i,Di,Wi,Ri,Mi,Ni,Bi,Ji,Gi,Ui,Vi,Fi,Zi,Ki,Yi,_i,Xi,qi,zi,Qi,nl,al,tl,sl,el,ol,cl,pl,rl,il,ll,ul,hl,fl,dl,kl,ml,bl,gl,vl,wl,El,yl,Al,Sl,Il,Tl,Cl,Ll,xl,Ol,Pl,jl,Hl,$l,Dl,Wl,Rl,Ml,Nl,Bl,Jl,Gl,Ul,Vl,Fl,Zl,Kl,Yl,_l,Xl,ql,zl,Ql,nu,au,tu,su,eu,ou,cu,pu,ru,iu,lu,uu,hu,fu,du,ku,mu,bu,gu,vu,wu,Eu,yu,Au,Su,Iu,Tu,Cu,Lu,xu,Ou,Pu,ju,Hu,$u,Du,Wu,Ru,Mu,Nu,Bu,Ju,Gu,Uu,Vu,Fu,Zu,Ku,Yu,_u,Xu,qu,zu,Qu,nh,ah,th,sh,eh,oh,ch,ph,rh,ih,lh,uh,hh,fh,dh;return{c(){t=f("section"),s=f("ul"),e=f("li"),o=f("a"),c=k("What is babel?"),p=f("ul"),r=f("li"),h=f("a"),d=k("What is Abstract Syntax Tree (AST)?"),b=f("li"),A=f("a"),S=k("How to use babel to transform code"),I=f("ul"),T=f("li"),C=f("a"),L=k("1. Have in mind what you want to transform from and transform into"),x=f("li"),O=f("a"),P=k("2. Know what to target on the AST"),j=f("li"),H=f("a"),$=k("3. Know how the transformed AST looks like"),D=f("li"),W=f("a"),R=k("4. Write code"),M=f("ul"),N=f("li"),B=f("a"),J=k("Transforming variable name"),G=f("li"),U=f("a"),V=k("Transforming strings"),F=f("li"),Z=f("a"),K=k("Summary"),Y=f("li"),_=f("a"),X=k("Further resources"),q=f("li"),z=f("a"),Q=k("Reference"),nn=m(),an=f("p"),tn=k("Today, I will share a step-by-step guide for writing a custom "),sn=f("a"),en=k("babel"),on=k(" transformation. You can use this technique to write your own automated code modifications, refactoring and code generation."),cn=m(),pn=f("section"),rn=f("h2"),ln=f("a"),un=k("What is babel?"),hn=m(),fn=f("p"),dn=f("a"),kn=k("Babel"),mn=k(" is a JavaScript compiler that is mainly used to convert ECMAScript 2015+ code into backward compatible version of JavaScript in current and older browsers or environments. Babel uses a "),bn=f("a"),gn=k("plugin system"),vn=k(" to do code transformation, so anyone can write their own transformation plugin for babel."),wn=m(),En=f("p"),yn=k("Before you get started writing a transformation plugin for babel, you would need to know what is an "),An=f("a"),Sn=k("Abstract Syntax Tree (AST)"),In=k("."),Tn=m(),Cn=f("section"),Ln=f("h3"),xn=f("a"),On=k("What is Abstract Syntax Tree (AST)?"),Pn=m(),jn=f("p"),Hn=k("I am not sure I can explain this better than the amazing articles out there on the web:"),$n=m(),Dn=f("ul"),Wn=f("li"),Rn=f("a"),Mn=k("Leveling Up One’s Parsing Game With ASTs"),Nn=k(" by "),Bn=f("a"),Jn=k("Vaidehi Joshi"),Gn=k(" * "),Un=f("em"),Vn=k("(Highly recommend this one! 👍)"),Fn=m(),Zn=f("li"),Kn=k("Wikipedia's "),Yn=f("a"),_n=k("Abstract syntax tree"),Xn=m(),qn=f("li"),zn=f("a"),Qn=k("What is an Abstract Syntax Tree"),na=k(" by "),aa=f("a"),ta=k("Chidume Nnamdi"),sa=m(),ea=f("p"),oa=k("To summarize, AST is a tree representation of your code. In the case of JavaScript, the JavaScript AST follows the "),ca=f("a"),pa=k("estree specification"),ra=k("."),ia=m(),la=f("p"),ua=k("AST represents your code, the structure and the meaning of your code. So it allows the compiler like "),ha=f("a"),fa=k("babel"),da=k(" to understand the code and make specific meaningful transformation to it."),ka=m(),ma=f("p"),ba=k("So now you know what is AST, let's write a custom babel transformation to modify your code using AST."),ga=m(),va=f("section"),wa=f("h2"),Ea=f("a"),ya=k("How to use babel to transform code"),Aa=m(),Sa=f("p"),Ia=k("The following is the general template of using babel to do code transformation:"),Ta=m(),Ca=f("pre"),La=m(),xa=f("blockquote"),Oa=f("p"),Pa=k("You would need to install "),ja=f("a"),Ha=k("@babel/core"),$a=k(" to run this. "),Da=f("code"),Wa=k("@babel/parser"),Ra=k(", "),Ma=f("code"),Na=k("@babel/traverse"),Ba=k(", "),Ja=f("code"),Ga=k("@babel/generator"),Ua=k(" are all dependencies of "),Va=f("code"),Fa=k("@babel/core"),Za=k(", so installing "),Ka=f("code"),Ya=k("@babel/core"),_a=k(" would suffice."),Xa=m(),qa=f("p"),za=k("So the general idea is to parse your code to AST, transform the AST, and then generate code from the transformed AST."),Qa=m(),nt=f("pre"),at=m(),tt=f("p"),st=k("However, we can use another API from "),et=f("code"),ot=k("babel"),ct=k(" to do all the above:"),pt=m(),rt=f("pre"),it=m(),lt=f("p"),ut=k("Now, you have written your first "),ht=f("a"),ft=k("babel transform plugin"),dt=k(" that replace all variable named "),kt=f("code"),mt=k("n"),bt=k(" to "),gt=f("code"),vt=k("x"),wt=k(", how cool is that?!"),Et=m(),yt=f("blockquote"),At=f("p"),St=k("Extract out the function "),It=f("code"),Tt=k("myCustomPlugin"),Ct=k(" to a new file and export it. "),Lt=f("a"),xt=k("Package and publish your file as a npm package"),Ot=k(" and you can proudly say you have published a babel plugin! 🎉🎉"),Pt=m(),jt=f("p"),Ht=k("At this point, you must have thought: "),$t=f("em"),Dt=k('"Yes I\'ve just written a babel plugin, but I have no idea how it works..."'),Wt=k(", so fret not, let's dive in on how you can write the babel transformation plugin yourself!"),Rt=m(),Mt=f("p"),Nt=k("So, here is the step-by-step guide to do it:"),Bt=m(),Jt=f("section"),Gt=f("h3"),Ut=f("a"),Vt=k("1. Have in mind what you want to transform from and transform into"),Ft=m(),Zt=f("p"),Kt=k("In this example, I want to prank my colleague by creating a babel plugin that will:"),Yt=m(),_t=f("ul"),Xt=f("li"),qt=k("reverse all the variables' and functions' names"),zt=m(),Qt=f("li"),ns=k("split out string into individual characters"),as=m(),ts=f("pre"),ss=m(),es=f("p"),os=k("into"),cs=m(),ps=f("pre"),rs=m(),is=f("p"),ls=k("Well, we have to keep the "),us=f("code"),hs=k("console.log"),fs=k(", so that even the code is hardly readable, it is still working fine. "),ds=f("em"),ks=k("(I wouldn't want to break the production code!)"),ms=m(),bs=f("section"),gs=f("h3"),vs=f("a"),ws=k("2. Know what to target on the AST"),Es=m(),ys=f("p"),As=k("Head down to a "),Ss=f("a"),Is=k("babel AST explorer"),Ts=k(", click on different parts of the code and see where / how it is represented on the AST:"),Cs=m(),Ls=f("p"),xs=f("picture"),Os=f("source"),Ps=f("source"),js=f("img"),$s=m(),Ds=f("p"),Ws=k("If this is your first time seeing the AST, play around with it for a little while and get the sense of how is it look like, and get to know the names of the node on the AST with respect to your code."),Rs=m(),Ms=f("p"),Ns=k("So, now we know that we need to target:"),Bs=m(),Js=f("ul"),Gs=f("li"),Us=f("strong"),Vs=k("Identifier"),Fs=k(" for variable and function names"),Zs=m(),Ks=f("li"),Ys=f("strong"),_s=k("StringLiteral"),Xs=k(" for the string."),qs=m(),zs=f("section"),Qs=f("h3"),ne=f("a"),ae=k("3. Know how the transformed AST looks like"),te=m(),se=f("p"),ee=k("Head down to the "),oe=f("a"),ce=k("babel AST explorer"),pe=k(" again, but this time around with the output code you want to generate."),re=m(),ie=f("p"),le=f("picture"),ue=f("source"),he=f("source"),fe=f("img"),ke=m(),me=f("p"),be=k("Play around and think how you can transform from the previous AST to the current AST."),ge=m(),ve=f("p"),we=k("For example, you can see that "),Ee=f("code"),ye=k("'H' + 'e' + 'l' + 'l' + 'o' + ' ' + eman"),Ae=k(" is formed by nested "),Se=f("code"),Ie=k("BinaryExpression"),Te=k(" with "),Ce=f("code"),Le=k("StringLiteral"),xe=k("."),Oe=m(),Pe=f("section"),je=f("h3"),He=f("a"),$e=k("4. Write code"),De=m(),We=f("p"),Re=k("Now look at our code again:"),Me=m(),Ne=f("pre"),Be=m(),Je=f("p"),Ge=k("The transformation uses "),Ue=f("a"),Ve=k("the visitor pattern"),Fe=k("."),Ze=m(),Ke=f("p"),Ye=k("During the traversal phase, babel will do a "),_e=f("a"),Xe=k("depth-first search traversal"),qe=k(" and visit each node in the AST. You can specify a callback method in the visitor, such that while visiting the node, babel will call the callback method with the node it is currently visiting."),ze=m(),Qe=f("p"),no=k("In the visitor object, you can specify the name of the node you want to be "),ao=f("code"),to=k("callback"),so=k("ed:"),eo=m(),oo=f("pre"),co=m(),po=f("p"),ro=k('Run it and you will see that "string literal" and "identifier" is being called whenever babel encounters it:'),io=m(),lo=f("pre"),uo=m(),ho=f("hr"),fo=m(),ko=f("p"),mo=k("Before we continue, let's look at the parameter of "),bo=f("code"),go=k("Identifer(path) {}"),vo=k(". It says "),wo=f("code"),Eo=k("path"),yo=k(" instead of "),Ao=f("code"),So=k("node"),Io=k(", what is the difference between "),To=f("code"),Co=k("path"),Lo=k(" and "),xo=f("code"),Oo=k("node"),Po=k("? 🤷‍"),jo=m(),Ho=f("p"),$o=k("In babel, "),Do=f("code"),Wo=k("path"),Ro=k(" is an abstraction above "),Mo=f("code"),No=k("node"),Bo=k(", it provides the link between nodes, ie the "),Jo=f("code"),Go=k("parent"),Uo=k(" of the node, as well as information such as the "),Vo=f("code"),Fo=k("scope"),Zo=k(", "),Ko=f("code"),Yo=k("context"),_o=k(", etc. Besides, the "),Xo=f("code"),qo=k("path"),zo=k(" provides method such as "),Qo=f("code"),nc=k("replaceWith"),ac=k(", "),tc=f("code"),sc=k("insertBefore"),ec=k(", "),oc=f("code"),cc=k("remove"),pc=k(", etc that will update and reflect on the underlying AST node."),rc=m(),ic=f("blockquote"),lc=f("p"),uc=k("You can read more detail about "),hc=f("code"),fc=k("path"),dc=k(" in "),kc=f("a"),mc=k("Jamie Kyle"),bc=k("'s "),gc=f("a"),vc=k("babel handbook"),wc=m(),Ec=f("hr"),yc=m(),Ac=f("p"),Sc=k("So let's continue writing our babel plugin."),Ic=m(),Tc=f("section"),Cc=f("h4"),Lc=f("a"),xc=k("Transforming variable name"),Oc=m(),Pc=f("p"),jc=k("As we can see from the "),Hc=f("a"),$c=k("AST explorer"),Dc=k(", the name of the "),Wc=f("code"),Rc=k("Identifier"),Mc=k(" is stored in the property called "),Nc=f("code"),Bc=k("name"),Jc=k(", so what we will do is to reverse the "),Gc=f("code"),Uc=k("name"),Vc=k("."),Fc=m(),Zc=f("pre"),Kc=m(),Yc=f("p"),_c=k("Run it and you will see:"),Xc=m(),qc=f("pre"),zc=m(),Qc=f("p"),np=k("We are almost there, except we've accidentally reversed "),ap=f("code"),tp=k("console.log"),sp=k(" as well. How can we prevent that?"),ep=m(),op=f("p"),cp=k("Take a look at the AST again:"),pp=m(),rp=f("p"),ip=f("picture"),lp=f("source"),up=f("source"),hp=f("img"),dp=m(),kp=f("p"),mp=f("code"),bp=k("console.log"),gp=k(" is part of the "),vp=f("code"),wp=k("MemberExpression"),Ep=k(", with the "),yp=f("code"),Ap=k("object"),Sp=k(" as "),Ip=f("code"),Tp=k('"console"'),Cp=k(" and "),Lp=f("code"),xp=k("property"),Op=k(" as "),Pp=f("code"),jp=k('"log"'),Hp=k("."),$p=m(),Dp=f("p"),Wp=k("So let's check that if our current "),Rp=f("code"),Mp=k("Identifier"),Np=k(" is within this "),Bp=f("code"),Jp=k("MemberExpression"),Gp=k(" and we will not reverse the name:"),Up=m(),Vp=f("pre"),Fp=m(),Zp=f("p"),Kp=k("And yes, now you get it right!"),Yp=m(),_p=f("pre"),Xp=m(),qp=f("p"),zp=k("So, why do we have to check whether the "),Qp=f("code"),nr=k("Identifier"),ar=k("'s parent is not a "),tr=f("code"),sr=k("console.log"),er=m(),or=f("code"),cr=k("MemberExpression"),pr=k("? Why don't we just compare whether the current "),rr=f("code"),ir=k("Identifier.name === 'console' || Identifier.name === 'log'"),lr=k("?"),ur=m(),hr=f("p"),fr=k("You can do that, except that it will not reverse the variable name if it is named "),dr=f("code"),kr=k("console"),mr=k(" or "),br=f("code"),gr=k("log"),vr=k(":"),wr=m(),Er=f("pre"),yr=m(),Ar=f("blockquote"),Sr=f("p"),Ir=k("So, how do I know the method "),Tr=f("code"),Cr=k("isMemberExpression"),Lr=k(" and "),xr=f("code"),Or=k("isIdentifier"),Pr=k("? Well, all the node types specified in the "),jr=f("a"),Hr=k("@babel/types"),$r=k(" have the "),Dr=f("code"),Wr=k("isXxxx"),Rr=k(" validator function counterpart, eg: "),Mr=f("code"),Nr=k("anyTypeAnnotation"),Br=k(" function will have a "),Jr=f("code"),Gr=k("isAnyTypeAnnotation"),Ur=k(" validator. If you want to know the exhaustive list of the validator functions, you can head over "),Vr=f("a"),Fr=k("to the actual source code"),Zr=k("."),Kr=m(),Yr=f("section"),_r=f("h4"),Xr=f("a"),qr=k("Transforming strings"),zr=m(),Qr=f("p"),ni=k("The next step is to generate a nested "),ai=f("code"),ti=k("BinaryExpression"),si=k(" out of "),ei=f("code"),oi=k("StringLiteral"),ci=k("."),pi=m(),ri=f("p"),ii=k("To create an AST node, you can use the utility function from "),li=f("a"),ui=f("code"),hi=k("@babel/types"),fi=k(". "),di=f("code"),ki=k("@babel/types"),mi=k(" is also available via "),bi=f("code"),gi=k("babel.types"),vi=k(" from "),wi=f("code"),Ei=k("@babel/core"),yi=k("."),Ai=m(),Si=f("pre"),Ii=m(),Ti=f("p"),Ci=k("So, we split the content of the "),Li=f("code"),xi=k("StringLiteral"),Oi=k(", which is in "),Pi=f("code"),ji=k("path.node.value"),Hi=k(", make each character a "),$i=f("code"),Di=k("StringLiteral"),Wi=k(", and combine them with "),Ri=f("code"),Mi=k("BinaryExpression"),Ni=k(". Finally, we replace the "),Bi=f("code"),Ji=k("StringLiteral"),Gi=k(" with the newly created node."),Ui=m(),Vi=f("p"),Fi=k("...And that's it! Except, we ran into Stack Overflow 😅:"),Zi=m(),Ki=f("pre"),Yi=m(),_i=f("p"),Xi=k("Why 🤷‍ ?"),qi=m(),zi=f("p"),Qi=k("Well, that's because for each "),nl=f("code"),al=k("StringLiteral"),tl=k(" we created more "),sl=f("code"),el=k("StringLiteral"),ol=k(", and in each of those "),cl=f("code"),pl=k("StringLiteral"),rl=k(', we are "creating" more '),il=f("code"),ll=k("StringLiteral"),ul=k(". Although we will replace a "),hl=f("code"),fl=k("StringLiteral"),dl=k(" with another "),kl=f("code"),ml=k("StringLiteral"),bl=k(", babel will treat it as a new node and will visit the newly created "),gl=f("code"),vl=k("StringLiteral"),wl=k(", thus the infinite recursive and stack overflow."),El=m(),yl=f("p"),Al=k("So, how do we tell babel that once we replaced the "),Sl=f("code"),Il=k("StringLiteral"),Tl=k(" with the "),Cl=f("code"),Ll=k("newNode"),xl=k(", babel can stop and don't have to go down and visit the newly created node anymore?"),Ol=m(),Pl=f("p"),jl=k("We can use "),Hl=f("code"),$l=k("path.skip()"),Dl=k(" to skip traversing the children of the current path:"),Wl=m(),Rl=f("pre"),Ml=m(),Nl=f("p"),Bl=k("...And yes it works now with now stack overflow!"),Jl=m(),Gl=f("section"),Ul=f("h2"),Vl=f("a"),Fl=k("Summary"),Zl=m(),Kl=f("p"),Yl=k("So, here we have it, our first code transformation with babel:"),_l=m(),Xl=f("pre"),ql=m(),zl=f("p"),Ql=k("A summary of the steps on how we get here:"),nu=m(),au=f("ol"),tu=f("li"),su=k("Have in mind what you want to transform from and transform into"),eu=m(),ou=f("li"),cu=k("Know what to target on the AST"),pu=m(),ru=f("li"),iu=k("Know how the transformed AST looks like"),lu=m(),uu=f("li"),hu=k("Write code"),fu=m(),du=f("section"),ku=f("h2"),mu=f("a"),bu=k("Further resources"),gu=m(),vu=f("p"),wu=k("If you are interested to learn more, "),Eu=f("a"),yu=k("babel's Github repo"),Au=k(" is always the best place to find out more code examples of writing a babel transformation."),Su=m(),Iu=f("p"),Tu=k("Head down to "),Cu=f("a"),Lu=k("https://github.com/babel/babel"),xu=k(", and look for "),Ou=f("code"),Pu=k("babel-plugin-transform-*"),ju=k(" or "),Hu=f("code"),$u=k("babel-plugin-proposal-*"),Du=k(" folders, they are all babel transformation plugin, where you can find code on how babel "),Wu=f("a"),Ru=k("transform the nullish coalescing operator"),Mu=k(", "),Nu=f("a"),Bu=k("optional chaining"),Ju=k(" and many more."),Gu=m(),Uu=f("section"),Vu=f("h2"),Fu=f("a"),Zu=k("Reference"),Ku=m(),Yu=f("ul"),_u=f("li"),Xu=f("a"),qu=k("Babel docs"),zu=k(" & "),Qu=f("a"),nh=k("Github repo"),ah=m(),th=f("li"),sh=f("a"),eh=k("Babel Handbook"),oh=k(" by "),ch=f("a"),ph=k("Jamie Kyle"),rh=m(),ih=f("li"),lh=f("a"),uh=k("Leveling Up One’s Parsing Game With ASTs"),hh=k(" by "),fh=f("a"),dh=k("Vaidehi Joshi"),this.h()},l(n){t=w(n,"SECTION",{});var a=v(t);s=w(a,"UL",{class:!0,id:!0,role:!0,"aria-label":!0});var i=v(s);e=w(i,"LI",{});var l=v(e);o=w(l,"A",{href:!0});var f=v(o);c=E(f,"What is babel?"),f.forEach(u),l.forEach(u),p=w(i,"UL",{});var k=v(p);r=w(k,"LI",{});var m=v(r);h=w(m,"A",{href:!0});var g=v(h);d=E(g,"What is Abstract Syntax Tree (AST)?"),g.forEach(u),m.forEach(u),k.forEach(u),b=w(i,"LI",{});var Hs=v(b);A=w(Hs,"A",{href:!0});var de=v(A);S=E(de,"How to use babel to transform code"),de.forEach(u),Hs.forEach(u),I=w(i,"UL",{});var fp=v(I);T=w(fp,"LI",{});var kh=v(T);C=w(kh,"A",{href:!0});var mh=v(C);L=E(mh,"1. Have in mind what you want to transform from and transform into"),mh.forEach(u),kh.forEach(u),x=w(fp,"LI",{});var bh=v(x);O=w(bh,"A",{href:!0});var gh=v(O);P=E(gh,"2. Know what to target on the AST"),gh.forEach(u),bh.forEach(u),j=w(fp,"LI",{});var vh=v(j);H=w(vh,"A",{href:!0});var wh=v(H);$=E(wh,"3. Know how the transformed AST looks like"),wh.forEach(u),vh.forEach(u),D=w(fp,"LI",{});var Eh=v(D);W=w(Eh,"A",{href:!0});var yh=v(W);R=E(yh,"4. Write code"),yh.forEach(u),Eh.forEach(u),M=w(fp,"UL",{});var Ah=v(M);N=w(Ah,"LI",{});var Sh=v(N);B=w(Sh,"A",{href:!0});var Ih=v(B);J=E(Ih,"Transforming variable name"),Ih.forEach(u),Sh.forEach(u),G=w(Ah,"LI",{});var Th=v(G);U=w(Th,"A",{href:!0});var Ch=v(U);V=E(Ch,"Transforming strings"),Ch.forEach(u),Th.forEach(u),Ah.forEach(u),fp.forEach(u),F=w(i,"LI",{});var Lh=v(F);Z=w(Lh,"A",{href:!0});var xh=v(Z);K=E(xh,"Summary"),xh.forEach(u),Lh.forEach(u),Y=w(i,"LI",{});var Oh=v(Y);_=w(Oh,"A",{href:!0});var Ph=v(_);X=E(Ph,"Further resources"),Ph.forEach(u),Oh.forEach(u),q=w(i,"LI",{});var jh=v(q);z=w(jh,"A",{href:!0});var Hh=v(z);Q=E(Hh,"Reference"),Hh.forEach(u),jh.forEach(u),i.forEach(u),a.forEach(u),nn=y(n),an=w(n,"P",{});var $h=v(an);tn=E($h,"Today, I will share a step-by-step guide for writing a custom "),sn=w($h,"A",{href:!0,rel:!0});var Dh=v(sn);en=E(Dh,"babel"),Dh.forEach(u),on=E($h," transformation. You can use this technique to write your own automated code modifications, refactoring and code generation."),$h.forEach(u),cn=y(n),pn=w(n,"SECTION",{});var Wh=v(pn);rn=w(Wh,"H2",{});var Rh=v(rn);ln=w(Rh,"A",{href:!0,id:!0});var Mh=v(ln);un=E(Mh,"What is babel?"),Mh.forEach(u),Rh.forEach(u),hn=y(Wh),fn=w(Wh,"P",{});var Nh=v(fn);dn=w(Nh,"A",{href:!0,rel:!0});var Bh=v(dn);kn=E(Bh,"Babel"),Bh.forEach(u),mn=E(Nh," is a JavaScript compiler that is mainly used to convert ECMAScript 2015+ code into backward compatible version of JavaScript in current and older browsers or environments. Babel uses a "),bn=w(Nh,"A",{href:!0,rel:!0});var Jh=v(bn);gn=E(Jh,"plugin system"),Jh.forEach(u),vn=E(Nh," to do code transformation, so anyone can write their own transformation plugin for babel."),Nh.forEach(u),wn=y(Wh),En=w(Wh,"P",{});var Gh=v(En);yn=E(Gh,"Before you get started writing a transformation plugin for babel, you would need to know what is an "),An=w(Gh,"A",{href:!0,rel:!0});var Uh=v(An);Sn=E(Uh,"Abstract Syntax Tree (AST)"),Uh.forEach(u),In=E(Gh,"."),Gh.forEach(u),Wh.forEach(u),Tn=y(n),Cn=w(n,"SECTION",{});var Vh=v(Cn);Ln=w(Vh,"H3",{});var Fh=v(Ln);xn=w(Fh,"A",{href:!0,id:!0});var Zh=v(xn);On=E(Zh,"What is Abstract Syntax Tree (AST)?"),Zh.forEach(u),Fh.forEach(u),Pn=y(Vh),jn=w(Vh,"P",{});var Kh=v(jn);Hn=E(Kh,"I am not sure I can explain this better than the amazing articles out there on the web:"),Kh.forEach(u),$n=y(Vh),Dn=w(Vh,"UL",{});var Yh=v(Dn);Wn=w(Yh,"LI",{});var _h=v(Wn);Rn=w(_h,"A",{href:!0,rel:!0});var Xh=v(Rn);Mn=E(Xh,"Leveling Up One’s Parsing Game With ASTs"),Xh.forEach(u),Nn=E(_h," by "),Bn=w(_h,"A",{href:!0,rel:!0});var qh=v(Bn);Jn=E(qh,"Vaidehi Joshi"),qh.forEach(u),Gn=E(_h," * "),Un=w(_h,"EM",{});var zh=v(Un);Vn=E(zh,"(Highly recommend this one! 👍)"),zh.forEach(u),_h.forEach(u),Fn=y(Yh),Zn=w(Yh,"LI",{});var Qh=v(Zn);Kn=E(Qh,"Wikipedia's "),Yn=w(Qh,"A",{href:!0,rel:!0});var nf=v(Yn);_n=E(nf,"Abstract syntax tree"),nf.forEach(u),Qh.forEach(u),Xn=y(Yh),qn=w(Yh,"LI",{});var af=v(qn);zn=w(af,"A",{href:!0,rel:!0});var tf=v(zn);Qn=E(tf,"What is an Abstract Syntax Tree"),tf.forEach(u),na=E(af," by "),aa=w(af,"A",{href:!0,rel:!0});var sf=v(aa);ta=E(sf,"Chidume Nnamdi"),sf.forEach(u),af.forEach(u),Yh.forEach(u),sa=y(Vh),ea=w(Vh,"P",{});var ef=v(ea);oa=E(ef,"To summarize, AST is a tree representation of your code. In the case of JavaScript, the JavaScript AST follows the "),ca=w(ef,"A",{href:!0,rel:!0});var of=v(ca);pa=E(of,"estree specification"),of.forEach(u),ra=E(ef,"."),ef.forEach(u),ia=y(Vh),la=w(Vh,"P",{});var cf=v(la);ua=E(cf,"AST represents your code, the structure and the meaning of your code. So it allows the compiler like "),ha=w(cf,"A",{href:!0,rel:!0});var pf=v(ha);fa=E(pf,"babel"),pf.forEach(u),da=E(cf," to understand the code and make specific meaningful transformation to it."),cf.forEach(u),ka=y(Vh),ma=w(Vh,"P",{});var rf=v(ma);ba=E(rf,"So now you know what is AST, let's write a custom babel transformation to modify your code using AST."),rf.forEach(u),Vh.forEach(u),ga=y(n),va=w(n,"SECTION",{});var lf=v(va);wa=w(lf,"H2",{});var uf=v(wa);Ea=w(uf,"A",{href:!0,id:!0});var hf=v(Ea);ya=E(hf,"How to use babel to transform code"),hf.forEach(u),uf.forEach(u),Aa=y(lf),Sa=w(lf,"P",{});var ff=v(Sa);Ia=E(ff,"The following is the general template of using babel to do code transformation:"),ff.forEach(u),Ta=y(lf),Ca=w(lf,"PRE",{class:!0}),v(Ca).forEach(u),La=y(lf),xa=w(lf,"BLOCKQUOTE",{});var df=v(xa);Oa=w(df,"P",{});var kf=v(Oa);Pa=E(kf,"You would need to install "),ja=w(kf,"A",{href:!0,rel:!0});var mf=v(ja);Ha=E(mf,"@babel/core"),mf.forEach(u),$a=E(kf," to run this. "),Da=w(kf,"CODE",{});var bf=v(Da);Wa=E(bf,"@babel/parser"),bf.forEach(u),Ra=E(kf,", "),Ma=w(kf,"CODE",{});var gf=v(Ma);Na=E(gf,"@babel/traverse"),gf.forEach(u),Ba=E(kf,", "),Ja=w(kf,"CODE",{});var vf=v(Ja);Ga=E(vf,"@babel/generator"),vf.forEach(u),Ua=E(kf," are all dependencies of "),Va=w(kf,"CODE",{});var wf=v(Va);Fa=E(wf,"@babel/core"),wf.forEach(u),Za=E(kf,", so installing "),Ka=w(kf,"CODE",{});var Ef=v(Ka);Ya=E(Ef,"@babel/core"),Ef.forEach(u),_a=E(kf," would suffice."),kf.forEach(u),df.forEach(u),Xa=y(lf),qa=w(lf,"P",{});var yf=v(qa);za=E(yf,"So the general idea is to parse your code to AST, transform the AST, and then generate code from the transformed AST."),yf.forEach(u),Qa=y(lf),nt=w(lf,"PRE",{class:!0}),v(nt).forEach(u),at=y(lf),tt=w(lf,"P",{});var Af=v(tt);st=E(Af,"However, we can use another API from "),et=w(Af,"CODE",{});var Sf=v(et);ot=E(Sf,"babel"),Sf.forEach(u),ct=E(Af," to do all the above:"),Af.forEach(u),pt=y(lf),rt=w(lf,"PRE",{class:!0}),v(rt).forEach(u),it=y(lf),lt=w(lf,"P",{});var If=v(lt);ut=E(If,"Now, you have written your first "),ht=w(If,"A",{href:!0,rel:!0});var Tf=v(ht);ft=E(Tf,"babel transform plugin"),Tf.forEach(u),dt=E(If," that replace all variable named "),kt=w(If,"CODE",{});var Cf=v(kt);mt=E(Cf,"n"),Cf.forEach(u),bt=E(If," to "),gt=w(If,"CODE",{});var Lf=v(gt);vt=E(Lf,"x"),Lf.forEach(u),wt=E(If,", how cool is that?!"),If.forEach(u),Et=y(lf),yt=w(lf,"BLOCKQUOTE",{});var xf=v(yt);At=w(xf,"P",{});var Of=v(At);St=E(Of,"Extract out the function "),It=w(Of,"CODE",{});var Pf=v(It);Tt=E(Pf,"myCustomPlugin"),Pf.forEach(u),Ct=E(Of," to a new file and export it. "),Lt=w(Of,"A",{href:!0,rel:!0});var jf=v(Lt);xt=E(jf,"Package and publish your file as a npm package"),jf.forEach(u),Ot=E(Of," and you can proudly say you have published a babel plugin! 🎉🎉"),Of.forEach(u),xf.forEach(u),Pt=y(lf),jt=w(lf,"P",{});var Hf=v(jt);Ht=E(Hf,"At this point, you must have thought: "),$t=w(Hf,"EM",{});var $f=v($t);Dt=E($f,'"Yes I\'ve just written a babel plugin, but I have no idea how it works..."'),$f.forEach(u),Wt=E(Hf,", so fret not, let's dive in on how you can write the babel transformation plugin yourself!"),Hf.forEach(u),Rt=y(lf),Mt=w(lf,"P",{});var Df=v(Mt);Nt=E(Df,"So, here is the step-by-step guide to do it:"),Df.forEach(u),lf.forEach(u),Bt=y(n),Jt=w(n,"SECTION",{});var Wf=v(Jt);Gt=w(Wf,"H3",{});var Rf=v(Gt);Ut=w(Rf,"A",{href:!0,id:!0});var Mf=v(Ut);Vt=E(Mf,"1. Have in mind what you want to transform from and transform into"),Mf.forEach(u),Rf.forEach(u),Ft=y(Wf),Zt=w(Wf,"P",{});var Nf=v(Zt);Kt=E(Nf,"In this example, I want to prank my colleague by creating a babel plugin that will:"),Nf.forEach(u),Yt=y(Wf),_t=w(Wf,"UL",{});var Bf=v(_t);Xt=w(Bf,"LI",{});var Jf=v(Xt);qt=E(Jf,"reverse all the variables' and functions' names"),Jf.forEach(u),zt=y(Bf),Qt=w(Bf,"LI",{});var Gf=v(Qt);ns=E(Gf,"split out string into individual characters"),Gf.forEach(u),Bf.forEach(u),as=y(Wf),ts=w(Wf,"PRE",{class:!0}),v(ts).forEach(u),ss=y(Wf),es=w(Wf,"P",{});var Uf=v(es);os=E(Uf,"into"),Uf.forEach(u),cs=y(Wf),ps=w(Wf,"PRE",{class:!0}),v(ps).forEach(u),rs=y(Wf),is=w(Wf,"P",{});var Vf=v(is);ls=E(Vf,"Well, we have to keep the "),us=w(Vf,"CODE",{});var Ff=v(us);hs=E(Ff,"console.log"),Ff.forEach(u),fs=E(Vf,", so that even the code is hardly readable, it is still working fine. "),ds=w(Vf,"EM",{});var Zf=v(ds);ks=E(Zf,"(I wouldn't want to break the production code!)"),Zf.forEach(u),Vf.forEach(u),Wf.forEach(u),ms=y(n),bs=w(n,"SECTION",{});var Kf=v(bs);gs=w(Kf,"H3",{});var Yf=v(gs);vs=w(Yf,"A",{href:!0,id:!0});var _f=v(vs);ws=E(_f,"2. Know what to target on the AST"),_f.forEach(u),Yf.forEach(u),Es=y(Kf),ys=w(Kf,"P",{});var Xf=v(ys);As=E(Xf,"Head down to a "),Ss=w(Xf,"A",{href:!0,rel:!0});var qf=v(Ss);Is=E(qf,"babel AST explorer"),qf.forEach(u),Ts=E(Xf,", click on different parts of the code and see where / how it is represented on the AST:"),Xf.forEach(u),Cs=y(Kf),Ls=w(Kf,"P",{});var zf=v(Ls);xs=w(zf,"PICTURE",{});var Qf=v(xs);Os=w(Qf,"SOURCE",{type:!0,srcset:!0}),Ps=w(Qf,"SOURCE",{type:!0,srcset:!0}),js=w(Qf,"IMG",{alt:!0,src:!0}),Qf.forEach(u),zf.forEach(u),$s=y(Kf),Ds=w(Kf,"P",{});var nd=v(Ds);Ws=E(nd,"If this is your first time seeing the AST, play around with it for a little while and get the sense of how is it look like, and get to know the names of the node on the AST with respect to your code."),nd.forEach(u),Rs=y(Kf),Ms=w(Kf,"P",{});var ad=v(Ms);Ns=E(ad,"So, now we know that we need to target:"),ad.forEach(u),Bs=y(Kf),Js=w(Kf,"UL",{});var td=v(Js);Gs=w(td,"LI",{});var sd=v(Gs);Us=w(sd,"STRONG",{});var ed=v(Us);Vs=E(ed,"Identifier"),ed.forEach(u),Fs=E(sd," for variable and function names"),sd.forEach(u),Zs=y(td),Ks=w(td,"LI",{});var od=v(Ks);Ys=w(od,"STRONG",{});var cd=v(Ys);_s=E(cd,"StringLiteral"),cd.forEach(u),Xs=E(od," for the string."),od.forEach(u),td.forEach(u),Kf.forEach(u),qs=y(n),zs=w(n,"SECTION",{});var pd=v(zs);Qs=w(pd,"H3",{});var rd=v(Qs);ne=w(rd,"A",{href:!0,id:!0});var id=v(ne);ae=E(id,"3. Know how the transformed AST looks like"),id.forEach(u),rd.forEach(u),te=y(pd),se=w(pd,"P",{});var ld=v(se);ee=E(ld,"Head down to the "),oe=w(ld,"A",{href:!0,rel:!0});var ud=v(oe);ce=E(ud,"babel AST explorer"),ud.forEach(u),pe=E(ld," again, but this time around with the output code you want to generate."),ld.forEach(u),re=y(pd),ie=w(pd,"P",{});var hd=v(ie);le=w(hd,"PICTURE",{});var fd=v(le);ue=w(fd,"SOURCE",{type:!0,srcset:!0}),he=w(fd,"SOURCE",{type:!0,srcset:!0}),fe=w(fd,"IMG",{alt:!0,src:!0}),fd.forEach(u),hd.forEach(u),ke=y(pd),me=w(pd,"P",{});var dd=v(me);be=E(dd,"Play around and think how you can transform from the previous AST to the current AST."),dd.forEach(u),ge=y(pd),ve=w(pd,"P",{});var kd=v(ve);we=E(kd,"For example, you can see that "),Ee=w(kd,"CODE",{});var md=v(Ee);ye=E(md,"'H' + 'e' + 'l' + 'l' + 'o' + ' ' + eman"),md.forEach(u),Ae=E(kd," is formed by nested "),Se=w(kd,"CODE",{});var bd=v(Se);Ie=E(bd,"BinaryExpression"),bd.forEach(u),Te=E(kd," with "),Ce=w(kd,"CODE",{});var gd=v(Ce);Le=E(gd,"StringLiteral"),gd.forEach(u),xe=E(kd,"."),kd.forEach(u),pd.forEach(u),Oe=y(n),Pe=w(n,"SECTION",{});var vd=v(Pe);je=w(vd,"H3",{});var wd=v(je);He=w(wd,"A",{href:!0,id:!0});var Ed=v(He);$e=E(Ed,"4. Write code"),Ed.forEach(u),wd.forEach(u),De=y(vd),We=w(vd,"P",{});var yd=v(We);Re=E(yd,"Now look at our code again:"),yd.forEach(u),Me=y(vd),Ne=w(vd,"PRE",{class:!0}),v(Ne).forEach(u),Be=y(vd),Je=w(vd,"P",{});var Ad=v(Je);Ge=E(Ad,"The transformation uses "),Ue=w(Ad,"A",{href:!0,rel:!0});var Sd=v(Ue);Ve=E(Sd,"the visitor pattern"),Sd.forEach(u),Fe=E(Ad,"."),Ad.forEach(u),Ze=y(vd),Ke=w(vd,"P",{});var Id=v(Ke);Ye=E(Id,"During the traversal phase, babel will do a "),_e=w(Id,"A",{href:!0,rel:!0});var Td=v(_e);Xe=E(Td,"depth-first search traversal"),Td.forEach(u),qe=E(Id," and visit each node in the AST. You can specify a callback method in the visitor, such that while visiting the node, babel will call the callback method with the node it is currently visiting."),Id.forEach(u),ze=y(vd),Qe=w(vd,"P",{});var Cd=v(Qe);no=E(Cd,"In the visitor object, you can specify the name of the node you want to be "),ao=w(Cd,"CODE",{});var Ld=v(ao);to=E(Ld,"callback"),Ld.forEach(u),so=E(Cd,"ed:"),Cd.forEach(u),eo=y(vd),oo=w(vd,"PRE",{class:!0}),v(oo).forEach(u),co=y(vd),po=w(vd,"P",{});var xd=v(po);ro=E(xd,'Run it and you will see that "string literal" and "identifier" is being called whenever babel encounters it:'),xd.forEach(u),io=y(vd),lo=w(vd,"PRE",{class:!0}),v(lo).forEach(u),uo=y(vd),ho=w(vd,"HR",{}),fo=y(vd),ko=w(vd,"P",{});var Od=v(ko);mo=E(Od,"Before we continue, let's look at the parameter of "),bo=w(Od,"CODE",{});var Pd=v(bo);go=E(Pd,"Identifer(path) {}"),Pd.forEach(u),vo=E(Od,". It says "),wo=w(Od,"CODE",{});var jd=v(wo);Eo=E(jd,"path"),jd.forEach(u),yo=E(Od," instead of "),Ao=w(Od,"CODE",{});var Hd=v(Ao);So=E(Hd,"node"),Hd.forEach(u),Io=E(Od,", what is the difference between "),To=w(Od,"CODE",{});var $d=v(To);Co=E($d,"path"),$d.forEach(u),Lo=E(Od," and "),xo=w(Od,"CODE",{});var Dd=v(xo);Oo=E(Dd,"node"),Dd.forEach(u),Po=E(Od,"? 🤷‍"),Od.forEach(u),jo=y(vd),Ho=w(vd,"P",{});var Wd=v(Ho);$o=E(Wd,"In babel, "),Do=w(Wd,"CODE",{});var Rd=v(Do);Wo=E(Rd,"path"),Rd.forEach(u),Ro=E(Wd," is an abstraction above "),Mo=w(Wd,"CODE",{});var Md=v(Mo);No=E(Md,"node"),Md.forEach(u),Bo=E(Wd,", it provides the link between nodes, ie the "),Jo=w(Wd,"CODE",{});var Nd=v(Jo);Go=E(Nd,"parent"),Nd.forEach(u),Uo=E(Wd," of the node, as well as information such as the "),Vo=w(Wd,"CODE",{});var Bd=v(Vo);Fo=E(Bd,"scope"),Bd.forEach(u),Zo=E(Wd,", "),Ko=w(Wd,"CODE",{});var Jd=v(Ko);Yo=E(Jd,"context"),Jd.forEach(u),_o=E(Wd,", etc. Besides, the "),Xo=w(Wd,"CODE",{});var Gd=v(Xo);qo=E(Gd,"path"),Gd.forEach(u),zo=E(Wd," provides method such as "),Qo=w(Wd,"CODE",{});var Ud=v(Qo);nc=E(Ud,"replaceWith"),Ud.forEach(u),ac=E(Wd,", "),tc=w(Wd,"CODE",{});var Vd=v(tc);sc=E(Vd,"insertBefore"),Vd.forEach(u),ec=E(Wd,", "),oc=w(Wd,"CODE",{});var Fd=v(oc);cc=E(Fd,"remove"),Fd.forEach(u),pc=E(Wd,", etc that will update and reflect on the underlying AST node."),Wd.forEach(u),rc=y(vd),ic=w(vd,"BLOCKQUOTE",{});var Zd=v(ic);lc=w(Zd,"P",{});var Kd=v(lc);uc=E(Kd,"You can read more detail about "),hc=w(Kd,"CODE",{});var Yd=v(hc);fc=E(Yd,"path"),Yd.forEach(u),dc=E(Kd," in "),kc=w(Kd,"A",{href:!0,rel:!0});var _d=v(kc);mc=E(_d,"Jamie Kyle"),_d.forEach(u),bc=E(Kd,"'s "),gc=w(Kd,"A",{href:!0,rel:!0});var Xd=v(gc);vc=E(Xd,"babel handbook"),Xd.forEach(u),Kd.forEach(u),Zd.forEach(u),wc=y(vd),Ec=w(vd,"HR",{}),yc=y(vd),Ac=w(vd,"P",{});var qd=v(Ac);Sc=E(qd,"So let's continue writing our babel plugin."),qd.forEach(u),vd.forEach(u),Ic=y(n),Tc=w(n,"SECTION",{});var zd=v(Tc);Cc=w(zd,"H4",{});var Qd=v(Cc);Lc=w(Qd,"A",{href:!0,id:!0});var nk=v(Lc);xc=E(nk,"Transforming variable name"),nk.forEach(u),Qd.forEach(u),Oc=y(zd),Pc=w(zd,"P",{});var ak=v(Pc);jc=E(ak,"As we can see from the "),Hc=w(ak,"A",{href:!0,rel:!0});var tk=v(Hc);$c=E(tk,"AST explorer"),tk.forEach(u),Dc=E(ak,", the name of the "),Wc=w(ak,"CODE",{});var sk=v(Wc);Rc=E(sk,"Identifier"),sk.forEach(u),Mc=E(ak," is stored in the property called "),Nc=w(ak,"CODE",{});var ek=v(Nc);Bc=E(ek,"name"),ek.forEach(u),Jc=E(ak,", so what we will do is to reverse the "),Gc=w(ak,"CODE",{});var ok=v(Gc);Uc=E(ok,"name"),ok.forEach(u),Vc=E(ak,"."),ak.forEach(u),Fc=y(zd),Zc=w(zd,"PRE",{class:!0}),v(Zc).forEach(u),Kc=y(zd),Yc=w(zd,"P",{});var ck=v(Yc);_c=E(ck,"Run it and you will see:"),ck.forEach(u),Xc=y(zd),qc=w(zd,"PRE",{class:!0}),v(qc).forEach(u),zc=y(zd),Qc=w(zd,"P",{});var pk=v(Qc);np=E(pk,"We are almost there, except we've accidentally reversed "),ap=w(pk,"CODE",{});var rk=v(ap);tp=E(rk,"console.log"),rk.forEach(u),sp=E(pk," as well. How can we prevent that?"),pk.forEach(u),ep=y(zd),op=w(zd,"P",{});var ik=v(op);cp=E(ik,"Take a look at the AST again:"),ik.forEach(u),pp=y(zd),rp=w(zd,"P",{});var lk=v(rp);ip=w(lk,"PICTURE",{});var uk=v(ip);lp=w(uk,"SOURCE",{type:!0,srcset:!0}),up=w(uk,"SOURCE",{type:!0,srcset:!0}),hp=w(uk,"IMG",{alt:!0,src:!0}),uk.forEach(u),lk.forEach(u),dp=y(zd),kp=w(zd,"P",{});var hk=v(kp);mp=w(hk,"CODE",{});var fk=v(mp);bp=E(fk,"console.log"),fk.forEach(u),gp=E(hk," is part of the "),vp=w(hk,"CODE",{});var dk=v(vp);wp=E(dk,"MemberExpression"),dk.forEach(u),Ep=E(hk,", with the "),yp=w(hk,"CODE",{});var kk=v(yp);Ap=E(kk,"object"),kk.forEach(u),Sp=E(hk," as "),Ip=w(hk,"CODE",{});var mk=v(Ip);Tp=E(mk,'"console"'),mk.forEach(u),Cp=E(hk," and "),Lp=w(hk,"CODE",{});var bk=v(Lp);xp=E(bk,"property"),bk.forEach(u),Op=E(hk," as "),Pp=w(hk,"CODE",{});var gk=v(Pp);jp=E(gk,'"log"'),gk.forEach(u),Hp=E(hk,"."),hk.forEach(u),$p=y(zd),Dp=w(zd,"P",{});var vk=v(Dp);Wp=E(vk,"So let's check that if our current "),Rp=w(vk,"CODE",{});var wk=v(Rp);Mp=E(wk,"Identifier"),wk.forEach(u),Np=E(vk," is within this "),Bp=w(vk,"CODE",{});var Ek=v(Bp);Jp=E(Ek,"MemberExpression"),Ek.forEach(u),Gp=E(vk," and we will not reverse the name:"),vk.forEach(u),Up=y(zd),Vp=w(zd,"PRE",{class:!0}),v(Vp).forEach(u),Fp=y(zd),Zp=w(zd,"P",{});var yk=v(Zp);Kp=E(yk,"And yes, now you get it right!"),yk.forEach(u),Yp=y(zd),_p=w(zd,"PRE",{class:!0}),v(_p).forEach(u),Xp=y(zd),qp=w(zd,"P",{});var Ak=v(qp);zp=E(Ak,"So, why do we have to check whether the "),Qp=w(Ak,"CODE",{});var Sk=v(Qp);nr=E(Sk,"Identifier"),Sk.forEach(u),ar=E(Ak,"'s parent is not a "),tr=w(Ak,"CODE",{});var Ik=v(tr);sr=E(Ik,"console.log"),Ik.forEach(u),er=y(Ak),or=w(Ak,"CODE",{});var Tk=v(or);cr=E(Tk,"MemberExpression"),Tk.forEach(u),pr=E(Ak,"? Why don't we just compare whether the current "),rr=w(Ak,"CODE",{});var Ck=v(rr);ir=E(Ck,"Identifier.name === 'console' || Identifier.name === 'log'"),Ck.forEach(u),lr=E(Ak,"?"),Ak.forEach(u),ur=y(zd),hr=w(zd,"P",{});var Lk=v(hr);fr=E(Lk,"You can do that, except that it will not reverse the variable name if it is named "),dr=w(Lk,"CODE",{});var xk=v(dr);kr=E(xk,"console"),xk.forEach(u),mr=E(Lk," or "),br=w(Lk,"CODE",{});var Ok=v(br);gr=E(Ok,"log"),Ok.forEach(u),vr=E(Lk,":"),Lk.forEach(u),wr=y(zd),Er=w(zd,"PRE",{class:!0}),v(Er).forEach(u),yr=y(zd),Ar=w(zd,"BLOCKQUOTE",{});var Pk=v(Ar);Sr=w(Pk,"P",{});var jk=v(Sr);Ir=E(jk,"So, how do I know the method "),Tr=w(jk,"CODE",{});var Hk=v(Tr);Cr=E(Hk,"isMemberExpression"),Hk.forEach(u),Lr=E(jk," and "),xr=w(jk,"CODE",{});var $k=v(xr);Or=E($k,"isIdentifier"),$k.forEach(u),Pr=E(jk,"? Well, all the node types specified in the "),jr=w(jk,"A",{href:!0,rel:!0});var Dk=v(jr);Hr=E(Dk,"@babel/types"),Dk.forEach(u),$r=E(jk," have the "),Dr=w(jk,"CODE",{});var Wk=v(Dr);Wr=E(Wk,"isXxxx"),Wk.forEach(u),Rr=E(jk," validator function counterpart, eg: "),Mr=w(jk,"CODE",{});var Rk=v(Mr);Nr=E(Rk,"anyTypeAnnotation"),Rk.forEach(u),Br=E(jk," function will have a "),Jr=w(jk,"CODE",{});var Mk=v(Jr);Gr=E(Mk,"isAnyTypeAnnotation"),Mk.forEach(u),Ur=E(jk," validator. If you want to know the exhaustive list of the validator functions, you can head over "),Vr=w(jk,"A",{href:!0,rel:!0});var Nk=v(Vr);Fr=E(Nk,"to the actual source code"),Nk.forEach(u),Zr=E(jk,"."),jk.forEach(u),Pk.forEach(u),zd.forEach(u),Kr=y(n),Yr=w(n,"SECTION",{});var Bk=v(Yr);_r=w(Bk,"H4",{});var Jk=v(_r);Xr=w(Jk,"A",{href:!0,id:!0});var Gk=v(Xr);qr=E(Gk,"Transforming strings"),Gk.forEach(u),Jk.forEach(u),zr=y(Bk),Qr=w(Bk,"P",{});var Uk=v(Qr);ni=E(Uk,"The next step is to generate a nested "),ai=w(Uk,"CODE",{});var Vk=v(ai);ti=E(Vk,"BinaryExpression"),Vk.forEach(u),si=E(Uk," out of "),ei=w(Uk,"CODE",{});var Fk=v(ei);oi=E(Fk,"StringLiteral"),Fk.forEach(u),ci=E(Uk,"."),Uk.forEach(u),pi=y(Bk),ri=w(Bk,"P",{});var Zk=v(ri);ii=E(Zk,"To create an AST node, you can use the utility function from "),li=w(Zk,"A",{href:!0,rel:!0});var Kk=v(li);ui=w(Kk,"CODE",{});var Yk=v(ui);hi=E(Yk,"@babel/types"),Yk.forEach(u),Kk.forEach(u),fi=E(Zk,". "),di=w(Zk,"CODE",{});var _k=v(di);ki=E(_k,"@babel/types"),_k.forEach(u),mi=E(Zk," is also available via "),bi=w(Zk,"CODE",{});var Xk=v(bi);gi=E(Xk,"babel.types"),Xk.forEach(u),vi=E(Zk," from "),wi=w(Zk,"CODE",{});var qk=v(wi);Ei=E(qk,"@babel/core"),qk.forEach(u),yi=E(Zk,"."),Zk.forEach(u),Ai=y(Bk),Si=w(Bk,"PRE",{class:!0}),v(Si).forEach(u),Ii=y(Bk),Ti=w(Bk,"P",{});var zk=v(Ti);Ci=E(zk,"So, we split the content of the "),Li=w(zk,"CODE",{});var Qk=v(Li);xi=E(Qk,"StringLiteral"),Qk.forEach(u),Oi=E(zk,", which is in "),Pi=w(zk,"CODE",{});var nm=v(Pi);ji=E(nm,"path.node.value"),nm.forEach(u),Hi=E(zk,", make each character a "),$i=w(zk,"CODE",{});var am=v($i);Di=E(am,"StringLiteral"),am.forEach(u),Wi=E(zk,", and combine them with "),Ri=w(zk,"CODE",{});var tm=v(Ri);Mi=E(tm,"BinaryExpression"),tm.forEach(u),Ni=E(zk,". Finally, we replace the "),Bi=w(zk,"CODE",{});var sm=v(Bi);Ji=E(sm,"StringLiteral"),sm.forEach(u),Gi=E(zk," with the newly created node."),zk.forEach(u),Ui=y(Bk),Vi=w(Bk,"P",{});var em=v(Vi);Fi=E(em,"...And that's it! Except, we ran into Stack Overflow 😅:"),em.forEach(u),Zi=y(Bk),Ki=w(Bk,"PRE",{class:!0}),v(Ki).forEach(u),Yi=y(Bk),_i=w(Bk,"P",{});var om=v(_i);Xi=E(om,"Why 🤷‍ ?"),om.forEach(u),qi=y(Bk),zi=w(Bk,"P",{});var cm=v(zi);Qi=E(cm,"Well, that's because for each "),nl=w(cm,"CODE",{});var pm=v(nl);al=E(pm,"StringLiteral"),pm.forEach(u),tl=E(cm," we created more "),sl=w(cm,"CODE",{});var rm=v(sl);el=E(rm,"StringLiteral"),rm.forEach(u),ol=E(cm,", and in each of those "),cl=w(cm,"CODE",{});var im=v(cl);pl=E(im,"StringLiteral"),im.forEach(u),rl=E(cm,', we are "creating" more '),il=w(cm,"CODE",{});var lm=v(il);ll=E(lm,"StringLiteral"),lm.forEach(u),ul=E(cm,". Although we will replace a "),hl=w(cm,"CODE",{});var um=v(hl);fl=E(um,"StringLiteral"),um.forEach(u),dl=E(cm," with another "),kl=w(cm,"CODE",{});var hm=v(kl);ml=E(hm,"StringLiteral"),hm.forEach(u),bl=E(cm,", babel will treat it as a new node and will visit the newly created "),gl=w(cm,"CODE",{});var fm=v(gl);vl=E(fm,"StringLiteral"),fm.forEach(u),wl=E(cm,", thus the infinite recursive and stack overflow."),cm.forEach(u),El=y(Bk),yl=w(Bk,"P",{});var dm=v(yl);Al=E(dm,"So, how do we tell babel that once we replaced the "),Sl=w(dm,"CODE",{});var km=v(Sl);Il=E(km,"StringLiteral"),km.forEach(u),Tl=E(dm," with the "),Cl=w(dm,"CODE",{});var mm=v(Cl);Ll=E(mm,"newNode"),mm.forEach(u),xl=E(dm,", babel can stop and don't have to go down and visit the newly created node anymore?"),dm.forEach(u),Ol=y(Bk),Pl=w(Bk,"P",{});var bm=v(Pl);jl=E(bm,"We can use "),Hl=w(bm,"CODE",{});var gm=v(Hl);$l=E(gm,"path.skip()"),gm.forEach(u),Dl=E(bm," to skip traversing the children of the current path:"),bm.forEach(u),Wl=y(Bk),Rl=w(Bk,"PRE",{class:!0}),v(Rl).forEach(u),Ml=y(Bk),Nl=w(Bk,"P",{});var vm=v(Nl);Bl=E(vm,"...And yes it works now with now stack overflow!"),vm.forEach(u),Bk.forEach(u),Jl=y(n),Gl=w(n,"SECTION",{});var wm=v(Gl);Ul=w(wm,"H2",{});var Em=v(Ul);Vl=w(Em,"A",{href:!0,id:!0});var ym=v(Vl);Fl=E(ym,"Summary"),ym.forEach(u),Em.forEach(u),Zl=y(wm),Kl=w(wm,"P",{});var Am=v(Kl);Yl=E(Am,"So, here we have it, our first code transformation with babel:"),Am.forEach(u),_l=y(wm),Xl=w(wm,"PRE",{class:!0}),v(Xl).forEach(u),ql=y(wm),zl=w(wm,"P",{});var Sm=v(zl);Ql=E(Sm,"A summary of the steps on how we get here:"),Sm.forEach(u),nu=y(wm),au=w(wm,"OL",{});var Im=v(au);tu=w(Im,"LI",{});var Tm=v(tu);su=E(Tm,"Have in mind what you want to transform from and transform into"),Tm.forEach(u),eu=y(Im),ou=w(Im,"LI",{});var Cm=v(ou);cu=E(Cm,"Know what to target on the AST"),Cm.forEach(u),pu=y(Im),ru=w(Im,"LI",{});var Lm=v(ru);iu=E(Lm,"Know how the transformed AST looks like"),Lm.forEach(u),lu=y(Im),uu=w(Im,"LI",{});var xm=v(uu);hu=E(xm,"Write code"),xm.forEach(u),Im.forEach(u),wm.forEach(u),fu=y(n),du=w(n,"SECTION",{});var Om=v(du);ku=w(Om,"H2",{});var Pm=v(ku);mu=w(Pm,"A",{href:!0,id:!0});var jm=v(mu);bu=E(jm,"Further resources"),jm.forEach(u),Pm.forEach(u),gu=y(Om),vu=w(Om,"P",{});var Hm=v(vu);wu=E(Hm,"If you are interested to learn more, "),Eu=w(Hm,"A",{href:!0,rel:!0});var $m=v(Eu);yu=E($m,"babel's Github repo"),$m.forEach(u),Au=E(Hm," is always the best place to find out more code examples of writing a babel transformation."),Hm.forEach(u),Su=y(Om),Iu=w(Om,"P",{});var Dm=v(Iu);Tu=E(Dm,"Head down to "),Cu=w(Dm,"A",{href:!0,rel:!0});var Wm=v(Cu);Lu=E(Wm,"https://github.com/babel/babel"),Wm.forEach(u),xu=E(Dm,", and look for "),Ou=w(Dm,"CODE",{});var Rm=v(Ou);Pu=E(Rm,"babel-plugin-transform-*"),Rm.forEach(u),ju=E(Dm," or "),Hu=w(Dm,"CODE",{});var Mm=v(Hu);$u=E(Mm,"babel-plugin-proposal-*"),Mm.forEach(u),Du=E(Dm," folders, they are all babel transformation plugin, where you can find code on how babel "),Wu=w(Dm,"A",{href:!0,rel:!0});var Nm=v(Wu);Ru=E(Nm,"transform the nullish coalescing operator"),Nm.forEach(u),Mu=E(Dm,", "),Nu=w(Dm,"A",{href:!0,rel:!0});var Bm=v(Nu);Bu=E(Bm,"optional chaining"),Bm.forEach(u),Ju=E(Dm," and many more."),Dm.forEach(u),Om.forEach(u),Gu=y(n),Uu=w(n,"SECTION",{});var Jm=v(Uu);Vu=w(Jm,"H2",{});var Gm=v(Vu);Fu=w(Gm,"A",{href:!0,id:!0});var Um=v(Fu);Zu=E(Um,"Reference"),Um.forEach(u),Gm.forEach(u),Ku=y(Jm),Yu=w(Jm,"UL",{});var Vm=v(Yu);_u=w(Vm,"LI",{});var Fm=v(_u);Xu=w(Fm,"A",{href:!0,rel:!0});var Zm=v(Xu);qu=E(Zm,"Babel docs"),Zm.forEach(u),zu=E(Fm," & "),Qu=w(Fm,"A",{href:!0,rel:!0});var Km=v(Qu);nh=E(Km,"Github repo"),Km.forEach(u),Fm.forEach(u),ah=y(Vm),th=w(Vm,"LI",{});var Ym=v(th);sh=w(Ym,"A",{href:!0,rel:!0});var _m=v(sh);eh=E(_m,"Babel Handbook"),_m.forEach(u),oh=E(Ym," by "),ch=w(Ym,"A",{href:!0,rel:!0});var Xm=v(ch);ph=E(Xm,"Jamie Kyle"),Xm.forEach(u),Ym.forEach(u),rh=y(Vm),ih=w(Vm,"LI",{});var qm=v(ih);lh=w(qm,"A",{href:!0,rel:!0});var zm=v(lh);uh=E(zm,"Leveling Up One’s Parsing Game With ASTs"),zm.forEach(u),hh=E(qm," by "),fh=w(qm,"A",{href:!0,rel:!0});var Qm=v(fh);dh=E(Qm,"Vaidehi Joshi"),Qm.forEach(u),qm.forEach(u),Vm.forEach(u),Jm.forEach(u),this.h()},h(){g(o,"href","#what-is-babel"),g(h,"href","#what-is-abstract-syntax-tree-ast"),g(A,"href","#how-to-use-babel-to-transform-code"),g(C,"href","#have-in-mind-what-you-want-to-transform-from-and-transform-into"),g(O,"href","#know-what-to-target-on-the-ast"),g(H,"href","#know-how-the-transformed-ast-looks-like"),g(W,"href","#write-code"),g(B,"href","#transforming-variable-name"),g(U,"href","#transforming-strings"),g(Z,"href","#summary"),g(_,"href","#further-resources"),g(z,"href","#reference"),g(s,"class","sitemap"),g(s,"id","sitemap"),g(s,"role","navigation"),g(s,"aria-label","Table of Contents"),g(sn,"href","https://babeljs.io/docs/en/babel-core"),g(sn,"rel","nofollow"),g(ln,"href","#what-is-babel"),g(ln,"id","what-is-babel"),g(dn,"href","https://babeljs.io/docs/en/"),g(dn,"rel","nofollow"),g(bn,"href","https://babeljs.io/docs/en/plugins"),g(bn,"rel","nofollow"),g(An,"href","https://en.wikipedia.org/wiki/Abstract_syntax_tree"),g(An,"rel","nofollow"),g(xn,"href","#what-is-abstract-syntax-tree-ast"),g(xn,"id","what-is-abstract-syntax-tree-ast"),g(Rn,"href","https://medium.com/basecs/leveling-up-ones-parsing-game-with-asts-d7a6fc2400ff"),g(Rn,"rel","nofollow"),g(Bn,"href","https://twitter.com/vaidehijoshi"),g(Bn,"rel","nofollow"),g(Yn,"href","https://en.wikipedia.org/wiki/Abstract_syntax_tree"),g(Yn,"rel","nofollow"),g(zn,"href","https://blog.bitsrc.io/what-is-an-abstract-syntax-tree-7502b71bde27"),g(zn,"rel","nofollow"),g(aa,"href","https://twitter.com/ngArchangel"),g(aa,"rel","nofollow"),g(ca,"href","https://github.com/estree/estree"),g(ca,"rel","nofollow"),g(ha,"href","https://babeljs.io"),g(ha,"rel","nofollow"),g(Ea,"href","#how-to-use-babel-to-transform-code"),g(Ea,"id","how-to-use-babel-to-transform-code"),g(Ca,"class","language-js"),g(ja,"href","https://www.npmjs.com/package/@babel/core"),g(ja,"rel","nofollow"),g(nt,"class","language-null"),g(rt,"class","language-js"),g(ht,"href","https://babeljs.io/docs/en/plugins"),g(ht,"rel","nofollow"),g(Lt,"href","https://medium.com/@bretcameron/how-to-publish-your-first-npm-package-b224296fc57b"),g(Lt,"rel","nofollow"),g(Ut,"href","#have-in-mind-what-you-want-to-transform-from-and-transform-into"),g(Ut,"id","have-in-mind-what-you-want-to-transform-from-and-transform-into"),g(ts,"class","language-js"),g(ps,"class","language-js"),g(vs,"href","#know-what-to-target-on-the-ast"),g(vs,"id","know-what-to-target-on-the-ast"),g(Ss,"href","https://lihautan.com/babel-ast-explorer/#?eyJiYWJlbFNldHRpbmdzIjp7InZlcnNpb24iOiI3LjQuNSJ9LCJ0cmVlU2V0dGluZ3MiOnsiaGlkZUVtcHR5Ijp0cnVlLCJoaWRlTG9jYXRpb24iOnRydWUsImhpZGVUeXBlIjp0cnVlfSwiY29kZSI6ImZ1bmN0aW9uIGdyZWV0KG5hbWUpIHtcbiAgcmV0dXJuICdIZWxsbyAnICsgbmFtZTtcbn1cblxuY29uc29sZS5sb2coZ3JlZXQoJ3RhbmhhdWhhdScpKTsgLy8gSGVsbG8gdGFuaGF1aGF1In0="),g(Ss,"rel","nofollow"),g(Os,"type","image/webp"),g(Os,"srcset","bacd2ed2088b43ce.webp"),g(Ps,"type","image/jpeg"),g(Ps,"srcset","bacd2ed2088b43ce.png"),g(js,"alt","targeting"),js.src!==(Hs="bacd2ed2088b43ce.png")&&g(js,"src","bacd2ed2088b43ce.png"),g(ne,"href","#know-how-the-transformed-ast-looks-like"),g(ne,"id","know-how-the-transformed-ast-looks-like"),g(oe,"href","https://lihautan.com/babel-ast-explorer/#?eyJiYWJlbFNldHRpbmdzIjp7InZlcnNpb24iOiI3LjQuNSJ9LCJ0cmVlU2V0dGluZ3MiOnsiaGlkZUVtcHR5Ijp0cnVlLCJoaWRlTG9jYXRpb24iOnRydWUsImhpZGVUeXBlIjp0cnVlLCJoaWRlQ29tbWVudHMiOnRydWV9LCJjb2RlIjoiZnVuY3Rpb24gdGVlcmcoZW1hbikge1xuICByZXR1cm4gXCJIXCIgKyBcImVcIiArIFwibFwiICsgXCJsXCIgKyBcIm9cIiArIFwiIFwiICsgZW1hbjtcbn1cblxuY29uc29sZS5sb2codGVlcmcoXCJ0XCIgKyBcImFcIiArIFwiblwiICsgXCJoXCIgKyBcImFcIiArIFwidVwiICsgXCJoXCIgKyBcImFcIiArIFwidVwiKSk7IC8vIEhlbGxvIHRhbmhhdWhhdVxuIn0="),g(oe,"rel","nofollow"),g(ue,"type","image/webp"),g(ue,"srcset","1b4b7b8861eb17f0.webp"),g(he,"type","image/jpeg"),g(he,"srcset","1b4b7b8861eb17f0.png"),g(fe,"alt","output"),fe.src!==(de="1b4b7b8861eb17f0.png")&&g(fe,"src","1b4b7b8861eb17f0.png"),g(He,"href","#write-code"),g(He,"id","write-code"),g(Ne,"class","language-js"),g(Ue,"href","https://en.wikipedia.org/wiki/Visitor_pattern"),g(Ue,"rel","nofollow"),g(_e,"href","https://en.wikipedia.org/wiki/Depth-first_search"),g(_e,"rel","nofollow"),g(oo,"class","language-js"),g(lo,"class","language-null"),g(kc,"href","https://jamie.build"),g(kc,"rel","nofollow"),g(gc,"href","https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#paths"),g(gc,"rel","nofollow"),g(Lc,"href","#transforming-variable-name"),g(Lc,"id","transforming-variable-name"),g(Hc,"href","https://lihautan.com/babel-ast-explorer/#?eyJiYWJlbFNldHRpbmdzIjp7InZlcnNpb24iOiI3LjQuNSJ9LCJ0cmVlU2V0dGluZ3MiOnsiaGlkZUVtcHR5Ijp0cnVlLCJoaWRlTG9jYXRpb24iOnRydWUsImhpZGVUeXBlIjp0cnVlfSwiY29kZSI6ImZ1bmN0aW9uIGdyZWV0KG5hbWUpIHtcbiAgcmV0dXJuICdIZWxsbyAnICsgbmFtZTtcbn1cblxuY29uc29sZS5sb2coZ3JlZXQoJ3RhbmhhdWhhdScpKTsgLy8gSGVsbG8gdGFuaGF1aGF1In0="),g(Hc,"rel","nofollow"),g(Zc,"class","language-js"),g(qc,"class","language-js"),g(lp,"type","image/webp"),g(lp,"srcset","aa140e7ffe777036.webp"),g(up,"type","image/jpeg"),g(up,"srcset","aa140e7ffe777036.png"),g(hp,"alt","member expression"),hp.src!==(fp="aa140e7ffe777036.png")&&g(hp,"src","aa140e7ffe777036.png"),g(Vp,"class","language-js"),g(_p,"class","language-js"),g(Er,"class","language-js"),g(jr,"href","https://babeljs.io/docs/en/babel-types"),g(jr,"rel","nofollow"),g(Vr,"href","https://github.com/babel/babel/blob/master/packages/babel-types/src/validators/generated/index.js"),g(Vr,"rel","nofollow"),g(Xr,"href","#transforming-strings"),g(Xr,"id","transforming-strings"),g(li,"href","https://babeljs.io/docs/en/babel-types"),g(li,"rel","nofollow"),g(Si,"class","language-js"),g(Ki,"class","language-null"),g(Rl,"class","language-js"),g(Vl,"href","#summary"),g(Vl,"id","summary"),g(Xl,"class","language-js"),g(mu,"href","#further-resources"),g(mu,"id","further-resources"),g(Eu,"href","https://github.com/babel/babel/tree/master/packages"),g(Eu,"rel","nofollow"),g(Cu,"href","https://github.com/babel/babel/tree/master/packages"),g(Cu,"rel","nofollow"),g(Wu,"href","https://github.com/babel/babel/tree/master/packages/babel-plugin-proposal-nullish-coalescing-operator"),g(Wu,"rel","nofollow"),g(Nu,"href","https://github.com/babel/babel/tree/master/packages/babel-plugin-proposal-optional-chaining"),g(Nu,"rel","nofollow"),g(Fu,"href","#reference"),g(Fu,"id","reference"),g(Xu,"href","https://babeljs.io/docs/en/"),g(Xu,"rel","nofollow"),g(Qu,"href","https://github.com/babel/babel"),g(Qu,"rel","nofollow"),g(sh,"href","https://github.com/jamiebuilds/babel-handbook"),g(sh,"rel","nofollow"),g(ch,"href","https://jamie.build/"),g(ch,"rel","nofollow"),g(lh,"href","https://medium.com/basecs/leveling-up-ones-parsing-game-with-asts-d7a6fc2400ff"),g(lh,"rel","nofollow"),g(fh,"href","https://twitter.com/vaidehijoshi"),g(fh,"rel","nofollow")},m(n,a){l(n,t,a),i(t,s),i(s,e),i(e,o),i(o,c),i(s,p),i(p,r),i(r,h),i(h,d),i(s,b),i(b,A),i(A,S),i(s,I),i(I,T),i(T,C),i(C,L),i(I,x),i(x,O),i(O,P),i(I,j),i(j,H),i(H,$),i(I,D),i(D,W),i(W,R),i(I,M),i(M,N),i(N,B),i(B,J),i(M,G),i(G,U),i(U,V),i(s,F),i(F,Z),i(Z,K),i(s,Y),i(Y,_),i(_,X),i(s,q),i(q,z),i(z,Q),l(n,nn,a),l(n,an,a),i(an,tn),i(an,sn),i(sn,en),i(an,on),l(n,cn,a),l(n,pn,a),i(pn,rn),i(rn,ln),i(ln,un),i(pn,hn),i(pn,fn),i(fn,dn),i(dn,kn),i(fn,mn),i(fn,bn),i(bn,gn),i(fn,vn),i(pn,wn),i(pn,En),i(En,yn),i(En,An),i(An,Sn),i(En,In),l(n,Tn,a),l(n,Cn,a),i(Cn,Ln),i(Ln,xn),i(xn,On),i(Cn,Pn),i(Cn,jn),i(jn,Hn),i(Cn,$n),i(Cn,Dn),i(Dn,Wn),i(Wn,Rn),i(Rn,Mn),i(Wn,Nn),i(Wn,Bn),i(Bn,Jn),i(Wn,Gn),i(Wn,Un),i(Un,Vn),i(Dn,Fn),i(Dn,Zn),i(Zn,Kn),i(Zn,Yn),i(Yn,_n),i(Dn,Xn),i(Dn,qn),i(qn,zn),i(zn,Qn),i(qn,na),i(qn,aa),i(aa,ta),i(Cn,sa),i(Cn,ea),i(ea,oa),i(ea,ca),i(ca,pa),i(ea,ra),i(Cn,ia),i(Cn,la),i(la,ua),i(la,ha),i(ha,fa),i(la,da),i(Cn,ka),i(Cn,ma),i(ma,ba),l(n,ga,a),l(n,va,a),i(va,wa),i(wa,Ea),i(Ea,ya),i(va,Aa),i(va,Sa),i(Sa,Ia),i(va,Ta),i(va,Ca),Ca.innerHTML='<code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> parse <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">\'@babel/parser\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> traverse <span class="token keyword">from</span> <span class="token string">\'@babel/traverse\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> generate <span class="token keyword">from</span> <span class="token string">\'@babel/generator\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> code <span class="token operator">=</span> <span class="token string">\'const n = 1\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// parse the code -> ast</span>\n<span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// transform the ast</span>\n<span class="token function">traverse</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>\n  <span class="token function">enter</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token comment">// in this example change all the variable &#96;n&#96; to &#96;x&#96;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">isIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token punctuation">:</span> <span class="token string">\'n\'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n      path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">\'x\'</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// generate code &lt;- ast</span>\n<span class="token keyword">const</span> output <span class="token operator">=</span> <span class="token function">generate</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \'const x = 1;\'</span></code>',i(va,La),i(va,xa),i(xa,Oa),i(Oa,Pa),i(Oa,ja),i(ja,Ha),i(Oa,$a),i(Oa,Da),i(Da,Wa),i(Oa,Ra),i(Oa,Ma),i(Ma,Na),i(Oa,Ba),i(Oa,Ja),i(Ja,Ga),i(Oa,Ua),i(Oa,Va),i(Va,Fa),i(Oa,Za),i(Oa,Ka),i(Ka,Ya),i(Oa,_a),i(va,Xa),i(va,qa),i(qa,za),i(va,Qa),i(va,nt),nt.innerHTML='\n<code class="language-">code -&gt; AST -&gt; transformed AST -&gt; transformed code</code>',i(va,at),i(va,tt),i(tt,st),i(tt,et),i(et,ot),i(tt,ct),i(va,pt),i(va,rt),rt.innerHTML='<code class="language-js"><span class="token keyword">import</span> babel <span class="token keyword">from</span> <span class="token string">\'@babel/core\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> code <span class="token operator">=</span> <span class="token string">\'const n = 1\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> output <span class="token operator">=</span> babel<span class="token punctuation">.</span><span class="token function">transformSync</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// your first babel plugin 😎😎</span>\n    <span class="token keyword">function</span> <span class="token function">myCustomPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>\n        visitor<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>\n          <span class="token function">Identifier</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n            <span class="token comment">// in this example change all the variable &#96;n&#96; to &#96;x&#96;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">isIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token punctuation">:</span> <span class="token string">\'n\'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n              path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">\'x\'</span><span class="token punctuation">;</span>\n            <span class="token punctuation">&#125;</span>\n          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \'const x = 1;\'</span></code>',i(va,it),i(va,lt),i(lt,ut),i(lt,ht),i(ht,ft),i(lt,dt),i(lt,kt),i(kt,mt),i(lt,bt),i(lt,gt),i(gt,vt),i(lt,wt),i(va,Et),i(va,yt),i(yt,At),i(At,St),i(At,It),i(It,Tt),i(At,Ct),i(At,Lt),i(Lt,xt),i(At,Ot),i(va,Pt),i(va,jt),i(jt,Ht),i(jt,$t),i($t,Dt),i(jt,Wt),i(va,Rt),i(va,Mt),i(Mt,Nt),l(n,Bt,a),l(n,Jt,a),i(Jt,Gt),i(Gt,Ut),i(Ut,Vt),i(Jt,Ft),i(Jt,Zt),i(Zt,Kt),i(Jt,Yt),i(Jt,_t),i(_t,Xt),i(Xt,qt),i(_t,zt),i(_t,Qt),i(Qt,ns),i(Jt,as),i(Jt,ts),ts.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">return</span> <span class="token string">\'Hello \'</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token string">\'tanhauhau\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello tanhauhau</span></code>',i(Jt,ss),i(Jt,es),i(es,os),i(Jt,cs),i(Jt,ps),ps.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">teerg</span><span class="token punctuation">(</span><span class="token parameter">eman</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">return</span> <span class="token string">\'H\'</span> <span class="token operator">+</span> <span class="token string">\'e\'</span> <span class="token operator">+</span> <span class="token string">\'l\'</span> <span class="token operator">+</span> <span class="token string">\'l\'</span> <span class="token operator">+</span> <span class="token string">\'o\'</span> <span class="token operator">+</span> <span class="token string">\' \'</span> <span class="token operator">+</span> eman<span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">teerg</span><span class="token punctuation">(</span><span class="token string">\'t\'</span> <span class="token operator">+</span> <span class="token string">\'a\'</span> <span class="token operator">+</span> <span class="token string">\'n\'</span> <span class="token operator">+</span> <span class="token string">\'h\'</span> <span class="token operator">+</span> <span class="token string">\'a\'</span> <span class="token operator">+</span> <span class="token string">\'u\'</span> <span class="token operator">+</span> <span class="token string">\'h\'</span> <span class="token operator">+</span> <span class="token string">\'a\'</span> <span class="token operator">+</span> <span class="token string">\'u\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello tanhauhau</span></code>',i(Jt,rs),i(Jt,is),i(is,ls),i(is,us),i(us,hs),i(is,fs),i(is,ds),i(ds,ks),l(n,ms,a),l(n,bs,a),i(bs,gs),i(gs,vs),i(vs,ws),i(bs,Es),i(bs,ys),i(ys,As),i(ys,Ss),i(Ss,Is),i(ys,Ts),i(bs,Cs),i(bs,Ls),i(Ls,xs),i(xs,Os),i(xs,Ps),i(xs,js),i(bs,$s),i(bs,Ds),i(Ds,Ws),i(bs,Rs),i(bs,Ms),i(Ms,Ns),i(bs,Bs),i(bs,Js),i(Js,Gs),i(Gs,Us),i(Us,Vs),i(Gs,Fs),i(Js,Zs),i(Js,Ks),i(Ks,Ys),i(Ys,_s),i(Ks,Xs),l(n,qs,a),l(n,zs,a),i(zs,Qs),i(Qs,ne),i(ne,ae),i(zs,te),i(zs,se),i(se,ee),i(se,oe),i(oe,ce),i(se,pe),i(zs,re),i(zs,ie),i(ie,le),i(le,ue),i(le,he),i(le,fe),i(zs,ke),i(zs,me),i(me,be),i(zs,ge),i(zs,ve),i(ve,we),i(ve,Ee),i(Ee,ye),i(ve,Ae),i(ve,Se),i(Se,Ie),i(ve,Te),i(ve,Ce),i(Ce,Le),i(ve,xe),l(n,Oe,a),l(n,Pe,a),i(Pe,je),i(je,He),i(He,$e),i(Pe,De),i(Pe,We),i(We,Re),i(Pe,Me),i(Pe,Ne),Ne.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">myCustomPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>\n    <span class="token comment">// highlight-start</span>\n    visitor<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>\n      <span class="token function">Identifier</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n        <span class="token comment">// ...</span>\n      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n    <span class="token comment">// highlight-end</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',i(Pe,Be),i(Pe,Je),i(Je,Ge),i(Je,Ue),i(Ue,Ve),i(Je,Fe),i(Pe,Ze),i(Pe,Ke),i(Ke,Ye),i(Ke,_e),i(_e,Xe),i(Ke,qe),i(Pe,ze),i(Pe,Qe),i(Qe,no),i(Qe,ao),i(ao,to),i(Qe,so),i(Pe,eo),i(Pe,oo),oo.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">myCustomPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>\n    visitor<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>\n      <span class="token function">Identifier</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'identifier\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n      <span class="token function">StringLiteral</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'string literal\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',i(Pe,co),i(Pe,po),i(po,ro),i(Pe,io),i(Pe,lo),lo.innerHTML='\n<code class="language-">identifier\nidentifier\nstring literal\nidentifier\nidentifier\nidentifier\nidentifier\nstring literal</code>',i(Pe,uo),i(Pe,ho),i(Pe,fo),i(Pe,ko),i(ko,mo),i(ko,bo),i(bo,go),i(ko,vo),i(ko,wo),i(wo,Eo),i(ko,yo),i(ko,Ao),i(Ao,So),i(ko,Io),i(ko,To),i(To,Co),i(ko,Lo),i(ko,xo),i(xo,Oo),i(ko,Po),i(Pe,jo),i(Pe,Ho),i(Ho,$o),i(Ho,Do),i(Do,Wo),i(Ho,Ro),i(Ho,Mo),i(Mo,No),i(Ho,Bo),i(Ho,Jo),i(Jo,Go),i(Ho,Uo),i(Ho,Vo),i(Vo,Fo),i(Ho,Zo),i(Ho,Ko),i(Ko,Yo),i(Ho,_o),i(Ho,Xo),i(Xo,qo),i(Ho,zo),i(Ho,Qo),i(Qo,nc),i(Ho,ac),i(Ho,tc),i(tc,sc),i(Ho,ec),i(Ho,oc),i(oc,cc),i(Ho,pc),i(Pe,rc),i(Pe,ic),i(ic,lc),i(lc,uc),i(lc,hc),i(hc,fc),i(lc,dc),i(lc,kc),i(kc,mc),i(lc,bc),i(lc,gc),i(gc,vc),i(Pe,wc),i(Pe,Ec),i(Pe,yc),i(Pe,Ac),i(Ac,Sc),l(n,Ic,a),l(n,Tc,a),i(Tc,Cc),i(Cc,Lc),i(Lc,xc),i(Tc,Oc),i(Tc,Pc),i(Pc,jc),i(Pc,Hc),i(Hc,$c),i(Pc,Dc),i(Pc,Wc),i(Wc,Rc),i(Pc,Mc),i(Pc,Nc),i(Nc,Bc),i(Pc,Jc),i(Pc,Gc),i(Gc,Uc),i(Pc,Vc),i(Tc,Fc),i(Tc,Zc),Zc.innerHTML='<code class="language-js"><span class="token function">Identifier</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>name <span class="token operator">=</span> path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>name\n    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',i(Tc,Kc),i(Tc,Yc),i(Yc,_c),i(Tc,Xc),i(Tc,qc),qc.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">teerg</span><span class="token punctuation">(</span><span class="token parameter">eman</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">return</span> <span class="token string">\'Hello \'</span> <span class="token operator">+</span> eman<span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span>\n\nelosnoc<span class="token punctuation">.</span><span class="token function">gol</span><span class="token punctuation">(</span><span class="token function">teerg</span><span class="token punctuation">(</span><span class="token string">\'tanhauhau\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello tanhauhau</span></code>',i(Tc,zc),i(Tc,Qc),i(Qc,np),i(Qc,ap),i(ap,tp),i(Qc,sp),i(Tc,ep),i(Tc,op),i(op,cp),i(Tc,pp),i(Tc,rp),i(rp,ip),i(ip,lp),i(ip,up),i(ip,hp),i(Tc,dp),i(Tc,kp),i(kp,mp),i(mp,bp),i(kp,gp),i(kp,vp),i(vp,wp),i(kp,Ep),i(kp,yp),i(yp,Ap),i(kp,Sp),i(kp,Ip),i(Ip,Tp),i(kp,Cp),i(kp,Lp),i(Lp,xp),i(kp,Op),i(kp,Pp),i(Pp,jp),i(kp,Hp),i(Tc,$p),i(Tc,Dp),i(Dp,Wp),i(Dp,Rp),i(Rp,Mp),i(Dp,Np),i(Dp,Bp),i(Bp,Jp),i(Dp,Gp),i(Tc,Up),i(Tc,Vp),Vp.innerHTML='<code class="language-js"><span class="token function">Identifier</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>\n    <span class="token operator">!</span><span class="token punctuation">(</span>\n      path<span class="token punctuation">.</span>parentPath<span class="token punctuation">.</span><span class="token function">isMemberExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n      path<span class="token punctuation">.</span>parentPath\n        <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">\'object\'</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">isIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token punctuation">:</span> <span class="token string">\'console\'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n      path<span class="token punctuation">.</span>parentPath<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">\'property\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token punctuation">:</span> <span class="token string">\'log\'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n   path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>name <span class="token operator">=</span> path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>name\n     <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span>\n     <span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n     <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span></code>',i(Tc,Fp),i(Tc,Zp),i(Zp,Kp),i(Tc,Yp),i(Tc,_p),_p.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">teerg</span><span class="token punctuation">(</span><span class="token parameter">eman</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">return</span> <span class="token string">\'Hello \'</span> <span class="token operator">+</span> eman<span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">teerg</span><span class="token punctuation">(</span><span class="token string">\'tanhauhau\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello tanhauhau</span></code>',i(Tc,Xp),i(Tc,qp),i(qp,zp),i(qp,Qp),i(Qp,nr),i(qp,ar),i(qp,tr),i(tr,sr),i(qp,er),i(qp,or),i(or,cr),i(qp,pr),i(qp,rr),i(rr,ir),i(qp,lr),i(Tc,ur),i(Tc,hr),i(hr,fr),i(hr,dr),i(dr,kr),i(hr,mr),i(hr,br),i(br,gr),i(hr,vr),i(Tc,wr),i(Tc,Er),Er.innerHTML='<code class="language-js"><span class="token keyword">const</span> log <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code>',i(Tc,yr),i(Tc,Ar),i(Ar,Sr),i(Sr,Ir),i(Sr,Tr),i(Tr,Cr),i(Sr,Lr),i(Sr,xr),i(xr,Or),i(Sr,Pr),i(Sr,jr),i(jr,Hr),i(Sr,$r),i(Sr,Dr),i(Dr,Wr),i(Sr,Rr),i(Sr,Mr),i(Mr,Nr),i(Sr,Br),i(Sr,Jr),i(Jr,Gr),i(Sr,Ur),i(Sr,Vr),i(Vr,Fr),i(Sr,Zr),l(n,Kr,a),l(n,Yr,a),i(Yr,_r),i(_r,Xr),i(Xr,qr),i(Yr,zr),i(Yr,Qr),i(Qr,ni),i(Qr,ai),i(ai,ti),i(Qr,si),i(Qr,ei),i(ei,oi),i(Qr,ci),i(Yr,pi),i(Yr,ri),i(ri,ii),i(ri,li),i(li,ui),i(ui,hi),i(ri,fi),i(ri,di),i(di,ki),i(ri,mi),i(ri,bi),i(bi,gi),i(ri,vi),i(ri,wi),i(wi,Ei),i(ri,yi),i(Yr,Ai),i(Yr,Si),Si.innerHTML='<code class="language-js"><span class="token function">StringLiteral</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">const</span> newNode <span class="token operator">=</span> path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>value\n    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=></span> babel<span class="token punctuation">.</span>types<span class="token punctuation">.</span><span class="token function">stringLiteral</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> curr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n      <span class="token keyword">return</span> babel<span class="token punctuation">.</span>types<span class="token punctuation">.</span><span class="token function">binaryExpression</span><span class="token punctuation">(</span><span class="token string">\'+\'</span><span class="token punctuation">,</span> prev<span class="token punctuation">,</span> curr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  path<span class="token punctuation">.</span><span class="token function">replaceWith</span><span class="token punctuation">(</span>newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',i(Yr,Ii),i(Yr,Ti),i(Ti,Ci),i(Ti,Li),i(Li,xi),i(Ti,Oi),i(Ti,Pi),i(Pi,ji),i(Ti,Hi),i(Ti,$i),i($i,Di),i(Ti,Wi),i(Ti,Ri),i(Ri,Mi),i(Ti,Ni),i(Ti,Bi),i(Bi,Ji),i(Ti,Gi),i(Yr,Ui),i(Yr,Vi),i(Vi,Fi),i(Yr,Zi),i(Yr,Ki),Ki.innerHTML='\n<code class="language-">RangeError: Maximum call stack size exceeded</code>',i(Yr,Yi),i(Yr,_i),i(_i,Xi),i(Yr,qi),i(Yr,zi),i(zi,Qi),i(zi,nl),i(nl,al),i(zi,tl),i(zi,sl),i(sl,el),i(zi,ol),i(zi,cl),i(cl,pl),i(zi,rl),i(zi,il),i(il,ll),i(zi,ul),i(zi,hl),i(hl,fl),i(zi,dl),i(zi,kl),i(kl,ml),i(zi,bl),i(zi,gl),i(gl,vl),i(zi,wl),i(Yr,El),i(Yr,yl),i(yl,Al),i(yl,Sl),i(Sl,Il),i(yl,Tl),i(yl,Cl),i(Cl,Ll),i(yl,xl),i(Yr,Ol),i(Yr,Pl),i(Pl,jl),i(Pl,Hl),i(Hl,$l),i(Pl,Dl),i(Yr,Wl),i(Yr,Rl),Rl.innerHTML='<code class="language-js"><span class="token function">StringLiteral</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">const</span> newNode <span class="token operator">=</span> path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>value\n    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=></span> babel<span class="token punctuation">.</span>types<span class="token punctuation">.</span><span class="token function">stringLiteral</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> curr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n      <span class="token keyword">return</span> babel<span class="token punctuation">.</span>types<span class="token punctuation">.</span><span class="token function">binaryExpression</span><span class="token punctuation">(</span><span class="token string">\'+\'</span><span class="token punctuation">,</span> prev<span class="token punctuation">,</span> curr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  path<span class="token punctuation">.</span><span class="token function">replaceWith</span><span class="token punctuation">(</span>newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// highlight-next-line</span>\n  path<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',i(Yr,Ml),i(Yr,Nl),i(Nl,Bl),l(n,Jl,a),l(n,Gl,a),i(Gl,Ul),i(Ul,Vl),i(Vl,Fl),i(Gl,Zl),i(Gl,Kl),i(Kl,Yl),i(Gl,_l),i(Gl,Xl),Xl.innerHTML='<code class="language-js"><span class="token keyword">const</span> babel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@babel/core\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> code <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">\nfunction greet(name) &#123;\n  return \'Hello \' + name;\n&#125;\nconsole.log(greet(\'tanhauhau\')); // Hello tanhauhau\n</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> output <span class="token operator">=</span> babel<span class="token punctuation">.</span><span class="token function">transformSync</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">function</span> <span class="token function">myCustomPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>\n        visitor<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>\n          <span class="token function">StringLiteral</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n            <span class="token keyword">const</span> concat <span class="token operator">=</span> path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>value\n              <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span>\n              <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=></span> babel<span class="token punctuation">.</span>types<span class="token punctuation">.</span><span class="token function">stringLiteral</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>\n              <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> curr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n                <span class="token keyword">return</span> babel<span class="token punctuation">.</span>types<span class="token punctuation">.</span><span class="token function">binaryExpression</span><span class="token punctuation">(</span><span class="token string">\'+\'</span><span class="token punctuation">,</span> prev<span class="token punctuation">,</span> curr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            path<span class="token punctuation">.</span><span class="token function">replaceWith</span><span class="token punctuation">(</span>concat<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            path<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n          <span class="token function">Identifier</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>\n              <span class="token operator">!</span><span class="token punctuation">(</span>\n                path<span class="token punctuation">.</span>parentPath<span class="token punctuation">.</span><span class="token function">isMemberExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n                path<span class="token punctuation">.</span>parentPath\n                  <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">\'object\'</span><span class="token punctuation">)</span>\n                  <span class="token punctuation">.</span><span class="token function">isIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token punctuation">:</span> <span class="token string">\'console\'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n                path<span class="token punctuation">.</span>parentPath<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">\'property\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token punctuation">:</span> <span class="token string">\'log\'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n              <span class="token punctuation">)</span>\n            <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n              path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>name <span class="token operator">=</span> path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>name\n                <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">&#125;</span>\n          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span></code>',i(Gl,ql),i(Gl,zl),i(zl,Ql),i(Gl,nu),i(Gl,au),i(au,tu),i(tu,su),i(au,eu),i(au,ou),i(ou,cu),i(au,pu),i(au,ru),i(ru,iu),i(au,lu),i(au,uu),i(uu,hu),l(n,fu,a),l(n,du,a),i(du,ku),i(ku,mu),i(mu,bu),i(du,gu),i(du,vu),i(vu,wu),i(vu,Eu),i(Eu,yu),i(vu,Au),i(du,Su),i(du,Iu),i(Iu,Tu),i(Iu,Cu),i(Cu,Lu),i(Iu,xu),i(Iu,Ou),i(Ou,Pu),i(Iu,ju),i(Iu,Hu),i(Hu,$u),i(Iu,Du),i(Iu,Wu),i(Wu,Ru),i(Iu,Mu),i(Iu,Nu),i(Nu,Bu),i(Iu,Ju),l(n,Gu,a),l(n,Uu,a),i(Uu,Vu),i(Vu,Fu),i(Fu,Zu),i(Uu,Ku),i(Uu,Yu),i(Yu,_u),i(_u,Xu),i(Xu,qu),i(_u,zu),i(_u,Qu),i(Qu,nh),i(Yu,ah),i(Yu,th),i(th,sh),i(sh,eh),i(th,oh),i(th,ch),i(ch,ph),i(Yu,rh),i(Yu,ih),i(ih,lh),i(lh,uh),i(ih,hh),i(ih,fh),i(fh,dh)},p:n,d(n){n&&u(t),n&&u(nn),n&&u(an),n&&u(cn),n&&u(pn),n&&u(Tn),n&&u(Cn),n&&u(ga),n&&u(va),n&&u(Bt),n&&u(Jt),n&&u(ms),n&&u(bs),n&&u(qs),n&&u(zs),n&&u(Oe),n&&u(Pe),n&&u(Ic),n&&u(Tc),n&&u(Kr),n&&u(Yr),n&&u(Jl),n&&u(Gl),n&&u(fu),n&&u(du),n&&u(Gu),n&&u(Uu)}}}function fn(n){let t,s;const e=[dn];let o={$$slots:{default:[hn]},$$scope:{ctx:n}};for(let n=0;n<e.length;n+=1)o=a(o,e[n]);return t=new un({props:o}),{c(){U(t.$$.fragment)},l(n){V(t.$$.fragment,n)},m(n,a){F(t,n,a),s=!0},p(n,[a]){const s=0&a?function(n,a){const t={},s={},e={$$scope:1};let o=n.length;for(;o--;){const c=n[o],p=a[o];if(p){for(const n in c)n in p||(s[n]=1);for(const n in p)e[n]||(t[n]=p[n],e[n]=1);n[o]=p}else for(const n in c)e[n]=1}for(const n in s)n in t||(t[n]=void 0);return t}(e,[(o=dn,"object"==typeof o&&null!==o?o:{})]):{};var o;1&a&&(s.$$scope={dirty:a,ctx:n}),t.$set(s)},i(n){s||(J(t.$$.fragment,n),s=!0)},o(n){G(t.$$.fragment,n),s=!1},d(n){Z(t,n)}}}const dn={title:"Step-by-step guide for writing a custom babel transformation",date:"2019-09-12T08:00:00Z",tags:["JavaScript","babel","ast","transform"],description:"Writing your first babel plugin",series:"Intermediate Babel",slug:"step-by-step-guide-for-writing-a-babel-transformation",type:"blog"};class kn extends _{constructor(n){super(),Y(this,n,null,fn,c,{})}}setTimeout(()=>{new kn({target:document.querySelector("#app"),hydrate:!0})},3e3);
