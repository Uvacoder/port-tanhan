function n(){}function a(n,a){for(const t in a)n[t]=a[t];return n}function t(n){return n()}function s(){return Object.create(null)}function e(n){n.forEach(t)}function o(n){return"function"==typeof n}function c(n,a){return n!=n?a==a:n!==a||n&&"object"==typeof n||"function"==typeof n}function p(n,t,s,e){return n[1]&&e?a(s.ctx.slice(),n[1](e(t))):s.ctx}function r(n,a,t,s,e,o,c){const r=function(n,a,t,s){if(n[2]&&s){const e=n[2](s(t));if(void 0===a.dirty)return e;if("object"==typeof e){const n=[],t=Math.max(a.dirty.length,e.length);for(let s=0;s<t;s+=1)n[s]=a.dirty[s]|e[s];return n}return a.dirty|e}return a.dirty}(a,s,e,o);if(r){const e=p(a,t,s,c);n.p(e,r)}}function i(n,a){n.appendChild(a)}function l(n,a,t){n.insertBefore(a,t||null)}function u(n){n.parentNode.removeChild(n)}function h(n,a){for(let t=0;t<n.length;t+=1)n[t]&&n[t].d(a)}function f(n){return document.createElement(n)}function d(n){return document.createElementNS("http://www.w3.org/2000/svg",n)}function k(n){return document.createTextNode(n)}function m(){return k(" ")}function b(){return k("")}function g(n,a,t){null==t?n.removeAttribute(a):n.getAttribute(a)!==t&&n.setAttribute(a,t)}function v(n){return Array.from(n.childNodes)}function w(n,a,t,s){for(let s=0;s<n.length;s+=1){const e=n[s];if(e.nodeName===a){let a=0;const o=[];for(;a<e.attributes.length;){const n=e.attributes[a++];t[n.name]||o.push(n.name)}for(let n=0;n<o.length;n++)e.removeAttribute(o[n]);return n.splice(s,1)[0]}}return s?d(a):f(a)}function E(n,a){for(let t=0;t<n.length;t+=1){const s=n[t];if(3===s.nodeType)return s.data=""+a,n.splice(t,1)[0]}return k(a)}function y(n){return E(n," ")}function A(n,a){a=""+a,n.wholeText!==a&&(n.data=a)}function S(n,a){n.value=null==a?"":a}class I{constructor(n=null){this.a=n,this.e=this.n=null}m(n,a,t=null){this.e||(this.e=f(a.nodeName),this.t=a,this.h(n)),this.i(t)}h(n){this.e.innerHTML=n,this.n=Array.from(this.e.childNodes)}i(n){for(let a=0;a<this.n.length;a+=1)l(this.t,this.n[a],n)}p(n){this.d(),this.h(n),this.i(this.a)}d(){this.n.forEach(u)}}let T;function C(n){T=n}function L(n){(function(){if(!T)throw new Error("Function called outside component initialization");return T})().$$.on_mount.push(n)}const x=[],O=[],P=[],j=[],H=Promise.resolve();let $=!1;function D(n){P.push(n)}let W=!1;const R=new Set;function M(){if(!W){W=!0;do{for(let n=0;n<x.length;n+=1){const a=x[n];C(a),N(a.$$)}for(x.length=0;O.length;)O.pop()();for(let n=0;n<P.length;n+=1){const a=P[n];R.has(a)||(R.add(a),a())}P.length=0}while(x.length);for(;j.length;)j.pop()();$=!1,W=!1,R.clear()}}function N(n){if(null!==n.fragment){n.update(),e(n.before_update);const a=n.dirty;n.dirty=[-1],n.fragment&&n.fragment.p(n.ctx,a),n.after_update.forEach(D)}}const B=new Set;function J(n,a){n&&n.i&&(B.delete(n),n.i(a))}function G(n,a,t,s){if(n&&n.o){if(B.has(n))return;B.add(n),(void 0).c.push(()=>{B.delete(n),s&&(t&&n.d(1),s())}),n.o(a)}}function U(n){n&&n.c()}function V(n,a){n&&n.l(a)}function F(n,a,s){const{fragment:c,on_mount:p,on_destroy:r,after_update:i}=n.$$;c&&c.m(a,s),D(()=>{const a=p.map(t).filter(o);r?r.push(...a):e(a),n.$$.on_mount=[]}),i.forEach(D)}function Z(n,a){const t=n.$$;null!==t.fragment&&(e(t.on_destroy),t.fragment&&t.fragment.d(a),t.on_destroy=t.fragment=null,t.ctx=[])}function K(n,a){-1===n.$$.dirty[0]&&(x.push(n),$||($=!0,H.then(M)),n.$$.dirty.fill(0)),n.$$.dirty[a/31|0]|=1<<a%31}function Y(a,t,o,c,p,r,i=[-1]){const l=T;C(a);const h=t.props||{},f=a.$$={fragment:null,ctx:null,props:r,update:n,not_equal:p,bound:s(),on_mount:[],on_destroy:[],before_update:[],after_update:[],context:new Map(l?l.$$.context:[]),callbacks:s(),dirty:i};let d=!1;if(f.ctx=o?o(a,h,(n,t,...s)=>{const e=s.length?s[0]:t;return f.ctx&&p(f.ctx[n],f.ctx[n]=e)&&(f.bound[n]&&f.bound[n](e),d&&K(a,n)),t}):[],f.update(),d=!0,e(f.before_update),f.fragment=!!c&&c(f.ctx),t.target){if(t.hydrate){const n=v(t.target);f.fragment&&f.fragment.l(n),n.forEach(u)}else f.fragment&&f.fragment.c();t.intro&&J(a.$$.fragment),F(a,t.target,t.anchor),M()}C(l)}class _{$destroy(){Z(this,1),this.$destroy=n}$on(n,a){const t=this.$$.callbacks[n]||(this.$$.callbacks[n]=[]);return t.push(a),()=>{const n=t.indexOf(a);-1!==n&&t.splice(n,1)}}$set(){}}function X(a){let t,s,e,o,c,p,r,h,b,A,S,I,T,C,L,x,O,P,j,H,$,D,W,R,M,N,B,J,G,U,V,F,Z,K,Y;return{c(){t=f("header"),s=f("nav"),e=f("ul"),o=f("li"),c=f("a"),p=k("Tan Li Hau"),r=m(),h=f("li"),b=f("a"),A=k("About"),S=m(),I=f("li"),T=f("a"),C=k("Writings"),L=m(),x=f("li"),O=f("a"),P=k("Talks"),j=m(),H=f("li"),$=f("a"),D=k("Notes"),W=m(),R=f("li"),M=f("a"),N=k("Newsletter"),B=m(),J=f("li"),G=f("a"),U=d("svg"),V=d("path"),F=m(),Z=f("a"),K=d("svg"),Y=d("path"),this.h()},l(n){t=w(n,"HEADER",{class:!0});var a=v(t);s=w(a,"NAV",{});var i=v(s);e=w(i,"UL",{class:!0});var l=v(e);o=w(l,"LI",{class:!0});var f=v(o);c=w(f,"A",{href:!0,class:!0});var d=v(c);p=E(d,"Tan Li Hau"),d.forEach(u),f.forEach(u),r=y(l),h=w(l,"LI",{class:!0});var k=v(h);b=w(k,"A",{href:!0,class:!0});var m=v(b);A=E(m,"About"),m.forEach(u),k.forEach(u),S=y(l),I=w(l,"LI",{class:!0});var g=v(I);T=w(g,"A",{href:!0,class:!0});var _=v(T);C=E(_,"Writings"),_.forEach(u),g.forEach(u),L=y(l),x=w(l,"LI",{class:!0});var X=v(x);O=w(X,"A",{href:!0,class:!0});var z=v(O);P=E(z,"Talks"),z.forEach(u),X.forEach(u),j=y(l),H=w(l,"LI",{class:!0});var q=v(H);$=w(q,"A",{href:!0,class:!0});var Q=v($);D=E(Q,"Notes"),Q.forEach(u),q.forEach(u),W=y(l),R=w(l,"LI",{class:!0});var nn=v(R);M=w(nn,"A",{href:!0,class:!0});var an=v(M);N=E(an,"Newsletter"),an.forEach(u),nn.forEach(u),B=y(l),J=w(l,"LI",{class:!0});var tn=v(J);G=w(tn,"A",{"aria-label":!0,href:!0,class:!0});var sn=v(G);U=w(sn,"svg",{viewBox:!0,width:!0,height:!0,class:!0},1);var en=v(U);V=w(en,"path",{d:!0},1),v(V).forEach(u),en.forEach(u),sn.forEach(u),F=y(tn),Z=w(tn,"A",{"aria-label":!0,href:!0,class:!0});var on=v(Z);K=w(on,"svg",{viewBox:!0,width:!0,height:!0,class:!0},1);var cn=v(K);Y=w(cn,"path",{d:!0},1),v(Y).forEach(u),cn.forEach(u),on.forEach(u),tn.forEach(u),l.forEach(u),i.forEach(u),a.forEach(u),this.h()},h(){g(c,"href","/"),g(c,"class","svelte-f3e4uo"),g(o,"class","svelte-f3e4uo"),g(b,"href","/about"),g(b,"class","svelte-f3e4uo"),g(h,"class","svelte-f3e4uo"),g(T,"href","/blogs"),g(T,"class","svelte-f3e4uo"),g(I,"class","svelte-f3e4uo"),g(O,"href","/talks"),g(O,"class","svelte-f3e4uo"),g(x,"class","svelte-f3e4uo"),g($,"href","/notes"),g($,"class","svelte-f3e4uo"),g(H,"class","svelte-f3e4uo"),g(M,"href","/newsletter"),g(M,"class","svelte-f3e4uo"),g(R,"class","svelte-f3e4uo"),g(V,"d","M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66\n    10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5\n    4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"),g(U,"viewBox","0 0 24 24"),g(U,"width","1em"),g(U,"height","1em"),g(U,"class","svelte-f3e4uo"),g(G,"aria-label","Twitter account"),g(G,"href","https://twitter.com/lihautan"),g(G,"class","svelte-f3e4uo"),g(Y,"d","M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0\n    0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07\n    5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65\n    5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42\n    3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"),g(K,"viewBox","0 0 24 24"),g(K,"width","1em"),g(K,"height","1em"),g(K,"class","svelte-f3e4uo"),g(Z,"aria-label","Github account"),g(Z,"href","https://github.com/tanhauhau"),g(Z,"class","svelte-f3e4uo"),g(J,"class","social svelte-f3e4uo"),g(e,"class","svelte-f3e4uo"),g(t,"class","svelte-f3e4uo")},m(n,a){l(n,t,a),i(t,s),i(s,e),i(e,o),i(o,c),i(c,p),i(e,r),i(e,h),i(h,b),i(b,A),i(e,S),i(e,I),i(I,T),i(T,C),i(e,L),i(e,x),i(x,O),i(O,P),i(e,j),i(e,H),i(H,$),i($,D),i(e,W),i(e,R),i(R,M),i(M,N),i(e,B),i(e,J),i(J,G),i(G,U),i(U,V),i(J,F),i(J,Z),i(Z,K),i(K,Y)},p:n,i:n,o:n,d(n){n&&u(t)}}}class z extends _{constructor(n){super(),Y(this,n,null,X,c,{})}}function q(a){let t,s,e,o,c,p,r,h,d,b,A,I,T,C,L,x,O,P,j,H;return{c(){t=f("div"),s=f("h1"),e=k("Subscribe to my newsletter"),o=m(),c=f("h2"),p=k("Get the latest blog posts and project updates delivered right to your inbox"),r=m(),h=f("form"),d=f("div"),b=f("input"),A=m(),I=f("input"),C=m(),L=f("input"),x=m(),O=f("p"),P=k("Powered by Buttondown."),this.h()},l(n){t=w(n,"DIV",{class:!0});var a=v(t);s=w(a,"H1",{});var i=v(s);e=E(i,"Subscribe to my newsletter"),i.forEach(u),o=y(a),c=w(a,"H2",{class:!0});var l=v(c);p=E(l,"Get the latest blog posts and project updates delivered right to your inbox"),l.forEach(u),r=y(a),h=w(a,"FORM",{action:!0,method:!0,target:!0,onsubmit:!0,class:!0});var f=v(h);d=w(f,"DIV",{class:!0});var k=v(d);b=w(k,"INPUT",{type:!0,name:!0,id:!0,"aria-label":!0,placeholder:!0,class:!0}),A=y(k),I=w(k,"INPUT",{type:!0,value:!0,disabled:!0,class:!0}),k.forEach(u),C=y(f),L=w(f,"INPUT",{type:!0,value:!0,name:!0,class:!0}),x=y(f),O=w(f,"P",{class:!0});var m=v(O);P=E(m,"Powered by Buttondown."),m.forEach(u),f.forEach(u),a.forEach(u),this.h()},h(){g(c,"class","svelte-1k1s1co"),g(b,"type","email"),g(b,"name","email"),g(b,"id","bd-email"),g(b,"aria-label","email address"),g(b,"placeholder","youremail@example.com"),g(b,"class","svelte-1k1s1co"),g(I,"type","submit"),I.value="Subscribe",I.disabled=T=!a[0],g(I,"class","svelte-1k1s1co"),g(d,"class","form-item svelte-1k1s1co"),g(L,"type","hidden"),L.value="1",g(L,"name","embed"),g(L,"class","svelte-1k1s1co"),g(O,"class","svelte-1k1s1co"),g(h,"action","https://buttondown.email/api/emails/embed-subscribe/lihautan"),g(h,"method","post"),g(h,"target","popupwindow"),g(h,"onsubmit","window.open('https://buttondown.email/lihautan', 'popupwindow')"),g(h,"class","embeddable-buttondown-form"),g(t,"class","form svelte-1k1s1co")},m(n,u){var f,k,m,g;l(n,t,u),i(t,s),i(s,e),i(t,o),i(t,c),i(c,p),i(t,r),i(t,h),i(h,d),i(d,b),S(b,a[0]),i(d,A),i(d,I),i(h,C),i(h,L),i(h,x),i(h,O),i(O,P),j||(f=b,k="input",m=a[1],f.addEventListener(k,m,g),H=()=>f.removeEventListener(k,m,g),j=!0)},p(n,[a]){1&a&&b.value!==n[0]&&S(b,n[0]),1&a&&T!==(T=!n[0])&&(I.disabled=T)},i:n,o:n,d(n){n&&u(t),j=!1,H()}}}function Q(n,a,t){let s;return[s,function(){s=this.value,t(0,s)}]}class nn extends _{constructor(n){super(),Y(this,n,Q,q,c,{})}}function an(n){return L(()=>(setTimeout(()=>{if(window.innerWidth>1080){const n=document.createElement("script");n.async=!0,n.type="text/javascript",n.src="//cdn.carbonads.com/carbon.js?serve=CE7ITK3E&placement=lihautancom",n.id="_carbonads_js",document.body.appendChild(n)}},5e3),()=>{try{const n=document.getElementById("carbonads");n.parentNode.removeChild(n)}catch(n){}})),[]}class tn extends _{constructor(n){super(),Y(this,n,an,null,c,{})}}var sn="https://lihautan.com/step-by-step-guide-for-writing-a-babel-transformation/assets/hero-twitter-7e567f5d.jpg";function en(n,a,t){const s=n.slice();return s[6]=a[t],s}function on(n,a,t){const s=n.slice();return s[6]=a[t],s}function cn(n){let a,t;return{c(){a=f("meta"),this.h()},l(n){a=w(n,"META",{name:!0,content:!0}),this.h()},h(){g(a,"name","keywords"),g(a,"content",t=n[6])},m(n,t){l(n,a,t)},p(n,s){4&s&&t!==(t=n[6])&&g(a,"content",t)},d(n){n&&u(a)}}}function pn(n){let a,t,s=n[6]+"";return{c(){a=f("span"),t=k(s),this.h()},l(n){a=w(n,"SPAN",{class:!0});var e=v(a);t=E(e,s),e.forEach(u),this.h()},h(){g(a,"class","svelte-9tqnza")},m(n,s){l(n,a,s),i(a,t)},p(n,a){4&a&&s!==(s=n[6]+"")&&A(t,s)},d(n){n&&u(a)}}}function rn(n){let a,t,s,e,o,c,d,S,T,C,L,x,O,P,j,H,$,D,W,R,M,N,B,K,Y,_,X,q,Q,an,rn,ln,un,hn,fn,dn,kn,mn,bn,gn=`<script type="application/ld+json">${JSON.stringify({"@context":"https://schema.org","@type":"Article",author:n[3],copyrightHolder:n[3],copyrightYear:"2020",creator:n[3],publisher:n[3],description:n[1],headline:n[0],name:n[0],inLanguage:"en"})}<\/script>`,vn=`<script type="application/ld+json">${JSON.stringify({"@context":"https://schema.org","@type":"BreadcrumbList",description:"Breadcrumbs list",name:"Breadcrumbs",itemListElement:[{"@type":"ListItem",item:{"@id":"https://lihautan.com",name:"Homepage"},position:1},{"@type":"ListItem",item:{"@id":"https%3A%2F%2Flihautan.com%2Fstep-by-step-guide-for-writing-a-babel-transformation",name:n[0]},position:2}]})}<\/script>`;document.title=a=n[0]+" | Tan Li Hau";let wn=n[2],En=[];for(let a=0;a<wn.length;a+=1)En[a]=cn(on(n,wn,a));B=new z({});let yn=n[2],An=[];for(let a=0;a<yn.length;a+=1)An[a]=pn(en(n,yn,a));const Sn=n[5].default,In=function(n,a,t,s){if(n){const e=p(n,a,t,s);return n[0](e)}}(Sn,n,n[4],null);return un=new nn({}),fn=new tn({}),{c(){t=f("meta"),s=f("meta"),e=f("meta"),o=f("meta"),c=f("meta"),d=f("meta"),S=f("meta"),T=f("meta"),C=f("meta"),L=f("meta"),x=f("meta");for(let n=0;n<En.length;n+=1)En[n].c();O=f("meta"),P=f("meta"),H=b(),D=b(),W=m(),R=f("a"),M=k("Skip to content"),N=m(),U(B.$$.fragment),K=m(),Y=f("main"),_=f("h1"),X=k(n[0]),q=m();for(let n=0;n<An.length;n+=1)An[n].c();Q=m(),an=f("article"),In&&In.c(),rn=m(),ln=f("footer"),U(un.$$.fragment),hn=m(),U(fn.$$.fragment),dn=m(),mn=b(),this.h()},l(a){const p=function(n,a=document.body){return Array.from(a.querySelectorAll(n))}('[data-svelte="svelte-n0q11s"]',document.head);t=w(p,"META",{name:!0,content:!0}),s=w(p,"META",{name:!0,content:!0}),e=w(p,"META",{name:!0,content:!0}),o=w(p,"META",{name:!0,content:!0}),c=w(p,"META",{name:!0,content:!0}),d=w(p,"META",{name:!0,content:!0}),S=w(p,"META",{name:!0,content:!0}),T=w(p,"META",{name:!0,content:!0}),C=w(p,"META",{name:!0,content:!0}),L=w(p,"META",{name:!0,content:!0}),x=w(p,"META",{name:!0,content:!0});for(let n=0;n<En.length;n+=1)En[n].l(p);O=w(p,"META",{itemprop:!0,content:!0}),P=w(p,"META",{itemprop:!0,content:!0}),H=b(),D=b(),p.forEach(u),W=y(a),R=w(a,"A",{href:!0,class:!0});var r=v(R);M=E(r,"Skip to content"),r.forEach(u),N=y(a),V(B.$$.fragment,a),K=y(a),Y=w(a,"MAIN",{id:!0,class:!0});var i=v(Y);_=w(i,"H1",{});var l=v(_);X=E(l,n[0]),l.forEach(u),q=y(i);for(let n=0;n<An.length;n+=1)An[n].l(i);Q=y(i),an=w(i,"ARTICLE",{});var h=v(an);In&&In.l(h),h.forEach(u),i.forEach(u),rn=y(a),ln=w(a,"FOOTER",{class:!0});var f=v(ln);V(un.$$.fragment,f),hn=y(f),V(fn.$$.fragment,f),f.forEach(u),dn=y(a),mn=b(),this.h()},h(){g(t,"name","description"),g(t,"content",n[1]),g(s,"name","image"),g(s,"content",sn),g(e,"name","og:image"),g(e,"content",sn),g(o,"name","og:title"),g(o,"content",n[0]),g(c,"name","og:description"),g(c,"content",n[1]),g(d,"name","og:type"),g(d,"content","website"),g(S,"name","twitter:card"),g(S,"content","summary_large_image"),g(T,"name","twitter:creator"),g(T,"content","@lihautan"),g(C,"name","twitter:title"),g(C,"content",n[0]),g(L,"name","twitter:description"),g(L,"content",n[1]),g(x,"name","twitter:image"),g(x,"content",sn),g(O,"itemprop","url"),g(O,"content","https%3A%2F%2Flihautan.com%2Fstep-by-step-guide-for-writing-a-babel-transformation"),g(P,"itemprop","image"),g(P,"content",sn),j=new I(H),$=new I(D),g(R,"href","#content"),g(R,"class","skip svelte-9tqnza"),g(Y,"id","content"),g(Y,"class","blog svelte-9tqnza"),g(ln,"class","svelte-9tqnza"),kn=new I(mn)},m(n,a){i(document.head,t),i(document.head,s),i(document.head,e),i(document.head,o),i(document.head,c),i(document.head,d),i(document.head,S),i(document.head,T),i(document.head,C),i(document.head,L),i(document.head,x);for(let n=0;n<En.length;n+=1)En[n].m(document.head,null);i(document.head,O),i(document.head,P),j.m(gn,document.head),i(document.head,H),$.m(vn,document.head),i(document.head,D),l(n,W,a),l(n,R,a),i(R,M),l(n,N,a),F(B,n,a),l(n,K,a),l(n,Y,a),i(Y,_),i(_,X),i(Y,q);for(let n=0;n<An.length;n+=1)An[n].m(Y,null);i(Y,Q),i(Y,an),In&&In.m(an,null),l(n,rn,a),l(n,ln,a),F(un,ln,null),i(ln,hn),F(fn,ln,null),l(n,dn,a),kn.m('<script async defer src="https://platform.twitter.com/widgets.js" charset="utf-8"><\/script>',n,a),l(n,mn,a),bn=!0},p(n,[s]){if((!bn||1&s)&&a!==(a=n[0]+" | Tan Li Hau")&&(document.title=a),(!bn||2&s)&&g(t,"content",n[1]),(!bn||1&s)&&g(o,"content",n[0]),(!bn||2&s)&&g(c,"content",n[1]),(!bn||1&s)&&g(C,"content",n[0]),(!bn||2&s)&&g(L,"content",n[1]),4&s){let a;for(wn=n[2],a=0;a<wn.length;a+=1){const t=on(n,wn,a);En[a]?En[a].p(t,s):(En[a]=cn(t),En[a].c(),En[a].m(O.parentNode,O))}for(;a<En.length;a+=1)En[a].d(1);En.length=wn.length}if((!bn||3&s)&&gn!==(gn=`<script type="application/ld+json">${JSON.stringify({"@context":"https://schema.org","@type":"Article",author:n[3],copyrightHolder:n[3],copyrightYear:"2020",creator:n[3],publisher:n[3],description:n[1],headline:n[0],name:n[0],inLanguage:"en"})}<\/script>`)&&j.p(gn),(!bn||1&s)&&vn!==(vn=`<script type="application/ld+json">${JSON.stringify({"@context":"https://schema.org","@type":"BreadcrumbList",description:"Breadcrumbs list",name:"Breadcrumbs",itemListElement:[{"@type":"ListItem",item:{"@id":"https://lihautan.com",name:"Homepage"},position:1},{"@type":"ListItem",item:{"@id":"https%3A%2F%2Flihautan.com%2Fstep-by-step-guide-for-writing-a-babel-transformation",name:n[0]},position:2}]})}<\/script>`)&&$.p(vn),(!bn||1&s)&&A(X,n[0]),4&s){let a;for(yn=n[2],a=0;a<yn.length;a+=1){const t=en(n,yn,a);An[a]?An[a].p(t,s):(An[a]=pn(t),An[a].c(),An[a].m(Y,Q))}for(;a<An.length;a+=1)An[a].d(1);An.length=yn.length}In&&In.p&&16&s&&r(In,Sn,n,n[4],s,null,null)},i(n){bn||(J(B.$$.fragment,n),J(In,n),J(un.$$.fragment,n),J(fn.$$.fragment,n),bn=!0)},o(n){G(B.$$.fragment,n),G(In,n),G(un.$$.fragment,n),G(fn.$$.fragment,n),bn=!1},d(n){u(t),u(s),u(e),u(o),u(c),u(d),u(S),u(T),u(C),u(L),u(x),h(En,n),u(O),u(P),u(H),n&&j.d(),u(D),n&&$.d(),n&&u(W),n&&u(R),n&&u(N),Z(B,n),n&&u(K),n&&u(Y),h(An,n),In&&In.d(n),n&&u(rn),n&&u(ln),Z(un),Z(fn),n&&u(dn),n&&u(mn),n&&kn.d()}}}function ln(n,a,t){let{title:s=""}=a,{description:e=""}=a,{tags:o=[]}=a;const c={"@type":"Person",name:"Tan Li Hau"};let{$$slots:p={},$$scope:r}=a;return n.$set=n=>{"title"in n&&t(0,s=n.title),"description"in n&&t(1,e=n.description),"tags"in n&&t(2,o=n.tags),"$$scope"in n&&t(4,r=n.$$scope)},[s,e,o,c,r,p]}class un extends _{constructor(n){super(),Y(this,n,ln,rn,c,{title:0,description:1,tags:2})}}function hn(a){let t,s,e,o,c,p,r,h,d,b,A,S,I,T,C,L,x,O,P,j,H,$,D,W,R,M,N,B,J,G,U,V,F,Z,K,Y,_,X,z,q,Q,nn,an,tn,sn,en,on,cn,pn,rn,ln,un,hn,fn,dn,kn,mn,bn,gn,vn,wn,En,yn,An,Sn,In,Tn,Cn,Ln,xn,On,Pn,jn,Hn,$n,Dn,Wn,Rn,Mn,Nn,Bn,Jn,Gn,Un,Vn,Fn,Zn,Kn,Yn,_n,Xn,zn,qn,Qn,na,aa,ta,sa,ea,oa,ca,pa,ra,ia,la,ua,ha,fa,da,ka,ma,ba,ga,va,wa,Ea,ya,Aa,Sa,Ia,Ta,Ca,La,xa,Oa,Pa,ja,Ha,$a,Da,Wa,Ra,Ma,Na,Ba,Ja,Ga,Ua,Va,Fa,Za,Ka,Ya,_a,Xa,za,qa,Qa,nt,at,tt,st,et,ot,ct,pt,rt,it,lt,ut,ht,ft,dt,kt,mt,bt,gt,vt,wt,Et,yt,At,St,It,Tt,Ct,Lt,xt,Ot,Pt,jt,Ht,$t,Dt,Wt,Rt,Mt,Nt,Bt,Jt,Gt,Ut,Vt,Ft,Zt,Kt,Yt,_t,Xt,zt,qt,Qt,ns,as,ts,ss,es,os,cs,ps,rs,is,ls,us,hs,fs,ds,ks,ms,bs,gs,vs,ws,Es,ys,As,Ss,Is,Ts,Cs,Ls,xs,Os,Ps,js,Hs,$s,Ds,Ws,Rs,Ms,Ns,Bs,Js,Gs,Us,Vs,Fs,Zs,Ks,Ys,_s,Xs,zs,qs,Qs,ne,ae,te,se,ee,oe,ce,pe,re,ie,le,ue,he,fe,de,ke,me,be,ge,ve,we,Ee,ye,Ae,Se,Ie,Te,Ce,Le,xe,Oe,Pe,je,He,$e,De,We,Re,Me,Ne,Be,Je,Ge,Ue,Ve,Fe,Ze,Ke,Ye,_e,Xe,ze,qe,Qe,no,ao,to,so,eo,oo,co,po,ro,io,lo,uo,ho,fo,ko,mo,bo,go,vo,wo,Eo,yo,Ao,So,Io,To,Co,Lo,xo,Oo,Po,jo,Ho,$o,Do,Wo,Ro,Mo,No,Bo,Jo,Go,Uo,Vo,Fo,Zo,Ko,Yo,_o,Xo,zo,qo,Qo,nc,ac,tc,sc,ec,oc,cc,pc,rc,ic,lc,uc,hc,fc,dc,kc,mc,bc,gc,vc,wc,Ec,yc,Ac,Sc,Ic,Tc,Cc,Lc,xc,Oc,Pc,jc,Hc,$c,Dc,Wc,Rc,Mc,Nc,Bc,Jc,Gc,Uc,Vc,Fc,Zc,Kc,Yc,_c,Xc,zc,qc,Qc,np,ap,tp,sp,ep,op,cp,pp,rp,ip,lp,up,hp,fp,dp,kp,mp,bp,gp,vp,wp,Ep,yp,Ap,Sp,Ip,Tp,Cp,Lp,xp,Op,Pp,jp,Hp,$p,Dp,Wp,Rp,Mp,Np,Bp,Jp,Gp,Up,Vp,Fp,Zp,Kp,Yp,_p,Xp,zp,qp,Qp,nr,ar,tr,sr,er,or,cr,pr,rr,ir,lr,ur,hr,fr,dr,kr,mr,br,gr,vr,wr,Er,yr,Ar,Sr,Ir,Tr,Cr,Lr,xr,Or,Pr,jr,Hr,$r,Dr,Wr,Rr,Mr,Nr,Br,Jr,Gr,Ur,Vr,Fr,Zr,Kr,Yr,_r,Xr,zr,qr,Qr,ni,ai,ti,si,ei,oi,ci,pi,ri,ii,li,ui,hi,fi,di,ki,mi,bi,gi,vi,wi,Ei,yi,Ai,Si,Ii,Ti,Ci,Li,xi,Oi,Pi,ji,Hi,$i,Di,Wi,Ri,Mi,Ni,Bi,Ji,Gi,Ui,Vi,Fi,Zi,Ki,Yi,_i,Xi,zi,qi,Qi,nl,al,tl,sl,el,ol,cl,pl,rl,il,ll,ul,hl,fl,dl,kl,ml,bl,gl,vl,wl,El,yl,Al,Sl,Il,Tl,Cl,Ll,xl,Ol,Pl,jl,Hl,$l,Dl,Wl,Rl,Ml,Nl,Bl,Jl,Gl,Ul,Vl,Fl,Zl,Kl,Yl,_l,Xl,zl,ql,Ql,nu,au,tu,su,eu,ou,cu,pu,ru,iu,lu,uu,hu,fu,du,ku,mu,bu,gu,vu,wu,Eu,yu,Au,Su,Iu,Tu,Cu,Lu,xu,Ou,Pu,ju,Hu,$u,Du,Wu,Ru,Mu,Nu,Bu,Ju,Gu,Uu,Vu,Fu,Zu,Ku,Yu,_u,Xu,zu,qu,Qu,nh,ah,th,sh,eh,oh,ch,ph,rh,ih,lh,uh;return{c(){t=f("section"),s=f("ul"),e=f("li"),o=f("a"),c=k("What is babel?"),p=f("ul"),r=f("li"),h=f("a"),d=k("What is Abstract Syntax Tree (AST)?"),b=f("li"),A=f("a"),S=k("How to use babel to transform code"),I=f("ul"),T=f("li"),C=f("a"),L=k("1. Have in mind what you want to transform from and transform into"),x=f("li"),O=f("a"),P=k("2. Know what to target on the AST"),j=f("li"),H=f("a"),$=k("3. Know how the transformed AST looks like"),D=f("li"),W=f("a"),R=k("4. Write code"),M=f("ul"),N=f("li"),B=f("a"),J=k("Transforming variable name"),G=f("li"),U=f("a"),V=k("Transforming strings"),F=f("li"),Z=f("a"),K=k("Summary"),Y=f("li"),_=f("a"),X=k("Further resources"),z=f("li"),q=f("a"),Q=k("Reference"),nn=m(),an=f("p"),tn=k("Today, I will share a step-by-step guide for writing a custom "),sn=f("a"),en=k("babel"),on=k(" transformation. You can use this technique to write your own automated code modifications, refactoring and code generation."),cn=m(),pn=f("section"),rn=f("h2"),ln=f("a"),un=k("What is babel?"),hn=m(),fn=f("p"),dn=f("a"),kn=k("Babel"),mn=k(" is a JavaScript compiler that is mainly used to convert ECMAScript 2015+ code into backward compatible version of JavaScript in current and older browsers or environments. Babel uses a "),bn=f("a"),gn=k("plugin system"),vn=k(" to do code transformation, so anyone can write their own transformation plugin for babel."),wn=m(),En=f("p"),yn=k("Before you get started writing a transformation plugin for babel, you would need to know what is an "),An=f("a"),Sn=k("Abstract Syntax Tree (AST)"),In=k("."),Tn=m(),Cn=f("section"),Ln=f("h3"),xn=f("a"),On=k("What is Abstract Syntax Tree (AST)?"),Pn=m(),jn=f("p"),Hn=k("I am not sure I can explain this better than the amazing articles out there on the web:"),$n=m(),Dn=f("ul"),Wn=f("li"),Rn=f("a"),Mn=k("Leveling Up One’s Parsing Game With ASTs"),Nn=k(" by "),Bn=f("a"),Jn=k("Vaidehi Joshi"),Gn=k(" * "),Un=f("em"),Vn=k("(Highly recommend this one! 👍)"),Fn=m(),Zn=f("li"),Kn=k("Wikipedia's "),Yn=f("a"),_n=k("Abstract syntax tree"),Xn=m(),zn=f("li"),qn=f("a"),Qn=k("What is an Abstract Syntax Tree"),na=k(" by "),aa=f("a"),ta=k("Chidume Nnamdi"),sa=m(),ea=f("p"),oa=k("To summarize, AST is a tree representation of your code. In the case of JavaScript, the JavaScript AST follows the "),ca=f("a"),pa=k("estree specification"),ra=k("."),ia=m(),la=f("p"),ua=k("AST represents your code, the structure and the meaning of your code. So it allows the compiler like "),ha=f("a"),fa=k("babel"),da=k(" to understand the code and make specific meaningful transformation to it."),ka=m(),ma=f("p"),ba=k("So now you know what is AST, let's write a custom babel transformation to modify your code using AST."),ga=m(),va=f("section"),wa=f("h2"),Ea=f("a"),ya=k("How to use babel to transform code"),Aa=m(),Sa=f("p"),Ia=k("The following is the general template of using babel to do code transformation:"),Ta=m(),Ca=f("pre"),La=m(),xa=f("blockquote"),Oa=f("p"),Pa=k("You would need to install "),ja=f("a"),Ha=k("@babel/core"),$a=k(" to run this. "),Da=f("code"),Wa=k("@babel/parser"),Ra=k(", "),Ma=f("code"),Na=k("@babel/traverse"),Ba=k(", "),Ja=f("code"),Ga=k("@babel/generator"),Ua=k(" are all dependencies of "),Va=f("code"),Fa=k("@babel/core"),Za=k(", so installing "),Ka=f("code"),Ya=k("@babel/core"),_a=k(" would suffice."),Xa=m(),za=f("p"),qa=k("So the general idea is to parse your code to AST, transform the AST, and then generate code from the transformed AST."),Qa=m(),nt=f("pre"),at=m(),tt=f("p"),st=k("However, we can use another API from "),et=f("code"),ot=k("babel"),ct=k(" to do all the above:"),pt=m(),rt=f("pre"),it=m(),lt=f("p"),ut=k("Now, you have written your first "),ht=f("a"),ft=k("babel transform plugin"),dt=k(" that replace all variable named "),kt=f("code"),mt=k("n"),bt=k(" to "),gt=f("code"),vt=k("x"),wt=k(", how cool is that?!"),Et=m(),yt=f("blockquote"),At=f("p"),St=k("Extract out the function "),It=f("code"),Tt=k("myCustomPlugin"),Ct=k(" to a new file and export it. "),Lt=f("a"),xt=k("Package and publish your file as a npm package"),Ot=k(" and you can proudly say you have published a babel plugin! 🎉🎉"),Pt=m(),jt=f("p"),Ht=k("At this point, you must have thought: "),$t=f("em"),Dt=k('"Yes I\'ve just written a babel plugin, but I have no idea how it works..."'),Wt=k(", so fret not, let's dive in on how you can write the babel transformation plugin yourself!"),Rt=m(),Mt=f("p"),Nt=k("So, here is the step-by-step guide to do it:"),Bt=m(),Jt=f("section"),Gt=f("h3"),Ut=f("a"),Vt=k("1. Have in mind what you want to transform from and transform into"),Ft=m(),Zt=f("p"),Kt=k("In this example, I want to prank my colleague by creating a babel plugin that will:"),Yt=m(),_t=f("ul"),Xt=f("li"),zt=k("reverse all the variables' and functions' names"),qt=m(),Qt=f("li"),ns=k("split out string into individual characters"),as=m(),ts=f("pre"),ss=m(),es=f("p"),os=k("into"),cs=m(),ps=f("pre"),rs=m(),is=f("p"),ls=k("Well, we have to keep the "),us=f("code"),hs=k("console.log"),fs=k(", so that even the code is hardly readable, it is still working fine. "),ds=f("em"),ks=k("(I wouldn't want to break the production code!)"),ms=m(),bs=f("section"),gs=f("h3"),vs=f("a"),ws=k("2. Know what to target on the AST"),Es=m(),ys=f("p"),As=k("Head down to a "),Ss=f("a"),Is=k("babel AST explorer"),Ts=k(", click on different parts of the code and see where / how it is represented on the AST:"),Cs=m(),Ls=f("p"),xs=f("picture"),Os=f("source"),Ps=f("source"),js=f("img"),Hs=m(),$s=f("p"),Ds=k("If this is your first time seeing the AST, play around with it for a little while and get the sense of how is it look like, and get to know the names of the node on the AST with respect to your code."),Ws=m(),Rs=f("p"),Ms=k("So, now we know that we need to target:"),Ns=m(),Bs=f("ul"),Js=f("li"),Gs=f("strong"),Us=k("Identifier"),Vs=k(" for variable and function names"),Fs=m(),Zs=f("li"),Ks=f("strong"),Ys=k("StringLiteral"),_s=k(" for the string."),Xs=m(),zs=f("section"),qs=f("h3"),Qs=f("a"),ne=k("3. Know how the transformed AST looks like"),ae=m(),te=f("p"),se=k("Head down to the "),ee=f("a"),oe=k("babel AST explorer"),ce=k(" again, but this time around with the output code you want to generate."),pe=m(),re=f("p"),ie=f("picture"),le=f("source"),ue=f("source"),he=f("img"),fe=m(),de=f("p"),ke=k("Play around and think how you can transform from the previous AST to the current AST."),me=m(),be=f("p"),ge=k("For example, you can see that "),ve=f("code"),we=k("'H' + 'e' + 'l' + 'l' + 'o' + ' ' + eman"),Ee=k(" is formed by nested "),ye=f("code"),Ae=k("BinaryExpression"),Se=k(" with "),Ie=f("code"),Te=k("StringLiteral"),Ce=k("."),Le=m(),xe=f("section"),Oe=f("h3"),Pe=f("a"),je=k("4. Write code"),He=m(),$e=f("p"),De=k("Now look at our code again:"),We=m(),Re=f("pre"),Me=m(),Ne=f("p"),Be=k("The transformation uses "),Je=f("a"),Ge=k("the visitor pattern"),Ue=k("."),Ve=m(),Fe=f("p"),Ze=k("During the traversal phase, babel will do a "),Ke=f("a"),Ye=k("depth-first search traversal"),_e=k(" and visit each node in the AST. You can specify a callback method in the visitor, such that while visiting the node, babel will call the callback method with the node it is currently visiting."),Xe=m(),ze=f("p"),qe=k("In the visitor object, you can specify the name of the node you want to be "),Qe=f("code"),no=k("callback"),ao=k("ed:"),to=m(),so=f("pre"),eo=m(),oo=f("p"),co=k('Run it and you will see that "string literal" and "identifier" is being called whenever babel encounters it:'),po=m(),ro=f("pre"),io=m(),lo=f("hr"),uo=m(),ho=f("p"),fo=k("Before we continue, let's look at the parameter of "),ko=f("code"),mo=k("Identifer(path) {}"),bo=k(". It says "),go=f("code"),vo=k("path"),wo=k(" instead of "),Eo=f("code"),yo=k("node"),Ao=k(", what is the difference between "),So=f("code"),Io=k("path"),To=k(" and "),Co=f("code"),Lo=k("node"),xo=k("? 🤷‍"),Oo=m(),Po=f("p"),jo=k("In babel, "),Ho=f("code"),$o=k("path"),Do=k(" is an abstraction above "),Wo=f("code"),Ro=k("node"),Mo=k(", it provides the link between nodes, ie the "),No=f("code"),Bo=k("parent"),Jo=k(" of the node, as well as information such as the "),Go=f("code"),Uo=k("scope"),Vo=k(", "),Fo=f("code"),Zo=k("context"),Ko=k(", etc. Besides, the "),Yo=f("code"),_o=k("path"),Xo=k(" provides method such as "),zo=f("code"),qo=k("replaceWith"),Qo=k(", "),nc=f("code"),ac=k("insertBefore"),tc=k(", "),sc=f("code"),ec=k("remove"),oc=k(", etc that will update and reflect on the underlying AST node."),cc=m(),pc=f("blockquote"),rc=f("p"),ic=k("You can read more detail about "),lc=f("code"),uc=k("path"),hc=k(" in "),fc=f("a"),dc=k("Jamie Kyle"),kc=k("'s "),mc=f("a"),bc=k("babel handbook"),gc=m(),vc=f("hr"),wc=m(),Ec=f("p"),yc=k("So let's continue writing our babel plugin."),Ac=m(),Sc=f("section"),Ic=f("h4"),Tc=f("a"),Cc=k("Transforming variable name"),Lc=m(),xc=f("p"),Oc=k("As we can see from the "),Pc=f("a"),jc=k("AST explorer"),Hc=k(", the name of the "),$c=f("code"),Dc=k("Identifier"),Wc=k(" is stored in the property called "),Rc=f("code"),Mc=k("name"),Nc=k(", so what we will do is to reverse the "),Bc=f("code"),Jc=k("name"),Gc=k("."),Uc=m(),Vc=f("pre"),Fc=m(),Zc=f("p"),Kc=k("Run it and you will see:"),Yc=m(),_c=f("pre"),Xc=m(),zc=f("p"),qc=k("We are almost there, except we've accidentally reversed "),Qc=f("code"),np=k("console.log"),ap=k(" as well. How can we prevent that?"),tp=m(),sp=f("p"),ep=k("Take a look at the AST again:"),op=m(),cp=f("p"),pp=f("picture"),rp=f("source"),ip=f("source"),lp=f("img"),up=m(),hp=f("p"),fp=f("code"),dp=k("console.log"),kp=k(" is part of the "),mp=f("code"),bp=k("MemberExpression"),gp=k(", with the "),vp=f("code"),wp=k("object"),Ep=k(" as "),yp=f("code"),Ap=k('"console"'),Sp=k(" and "),Ip=f("code"),Tp=k("property"),Cp=k(" as "),Lp=f("code"),xp=k('"log"'),Op=k("."),Pp=m(),jp=f("p"),Hp=k("So let's check that if our current "),$p=f("code"),Dp=k("Identifier"),Wp=k(" is within this "),Rp=f("code"),Mp=k("MemberExpression"),Np=k(" and we will not reverse the name:"),Bp=m(),Jp=f("pre"),Gp=m(),Up=f("p"),Vp=k("And yes, now you get it right!"),Fp=m(),Zp=f("pre"),Kp=m(),Yp=f("p"),_p=k("So, why do we have to check whether the "),Xp=f("code"),zp=k("Identifier"),qp=k("'s parent is not a "),Qp=f("code"),nr=k("console.log"),ar=m(),tr=f("code"),sr=k("MemberExpression"),er=k("? Why don't we just compare whether the current "),or=f("code"),cr=k("Identifier.name === 'console' || Identifier.name === 'log'"),pr=k("?"),rr=m(),ir=f("p"),lr=k("You can do that, except that it will not reverse the variable name if it is named "),ur=f("code"),hr=k("console"),fr=k(" or "),dr=f("code"),kr=k("log"),mr=k(":"),br=m(),gr=f("pre"),vr=m(),wr=f("blockquote"),Er=f("p"),yr=k("So, how do I know the method "),Ar=f("code"),Sr=k("isMemberExpression"),Ir=k(" and "),Tr=f("code"),Cr=k("isIdentifier"),Lr=k("? Well, all the node types specified in the "),xr=f("a"),Or=k("@babel/types"),Pr=k(" have the "),jr=f("code"),Hr=k("isXxxx"),$r=k(" validator function counterpart, eg: "),Dr=f("code"),Wr=k("anyTypeAnnotation"),Rr=k(" function will have a "),Mr=f("code"),Nr=k("isAnyTypeAnnotation"),Br=k(" validator. If you want to know the exhaustive list of the validator functions, you can head over "),Jr=f("a"),Gr=k("to the actual source code"),Ur=k("."),Vr=m(),Fr=f("section"),Zr=f("h4"),Kr=f("a"),Yr=k("Transforming strings"),_r=m(),Xr=f("p"),zr=k("The next step is to generate a nested "),qr=f("code"),Qr=k("BinaryExpression"),ni=k(" out of "),ai=f("code"),ti=k("StringLiteral"),si=k("."),ei=m(),oi=f("p"),ci=k("To create an AST node, you can use the utility function from "),pi=f("a"),ri=f("code"),ii=k("@babel/types"),li=k(". "),ui=f("code"),hi=k("@babel/types"),fi=k(" is also available via "),di=f("code"),ki=k("babel.types"),mi=k(" from "),bi=f("code"),gi=k("@babel/core"),vi=k("."),wi=m(),Ei=f("pre"),yi=m(),Ai=f("p"),Si=k("So, we split the content of the "),Ii=f("code"),Ti=k("StringLiteral"),Ci=k(", which is in "),Li=f("code"),xi=k("path.node.value"),Oi=k(", make each character a "),Pi=f("code"),ji=k("StringLiteral"),Hi=k(", and combine them with "),$i=f("code"),Di=k("BinaryExpression"),Wi=k(". Finally, we replace the "),Ri=f("code"),Mi=k("StringLiteral"),Ni=k(" with the newly created node."),Bi=m(),Ji=f("p"),Gi=k("...And that's it! Except, we ran into Stack Overflow 😅:"),Ui=m(),Vi=f("pre"),Fi=m(),Zi=f("p"),Ki=k("Why 🤷‍ ?"),Yi=m(),_i=f("p"),Xi=k("Well, that's because for each "),zi=f("code"),qi=k("StringLiteral"),Qi=k(" we created more "),nl=f("code"),al=k("StringLiteral"),tl=k(", and in each of those "),sl=f("code"),el=k("StringLiteral"),ol=k(', we are "creating" more '),cl=f("code"),pl=k("StringLiteral"),rl=k(". Although we will replace a "),il=f("code"),ll=k("StringLiteral"),ul=k(" with another "),hl=f("code"),fl=k("StringLiteral"),dl=k(", babel will treat it as a new node and will visit the newly created "),kl=f("code"),ml=k("StringLiteral"),bl=k(", thus the infinite recursive and stack overflow."),gl=m(),vl=f("p"),wl=k("So, how do we tell babel that once we replaced the "),El=f("code"),yl=k("StringLiteral"),Al=k(" with the "),Sl=f("code"),Il=k("newNode"),Tl=k(", babel can stop and don't have to go down and visit the newly created node anymore?"),Cl=m(),Ll=f("p"),xl=k("We can use "),Ol=f("code"),Pl=k("path.skip()"),jl=k(" to skip traversing the children of the current path:"),Hl=m(),$l=f("pre"),Dl=m(),Wl=f("p"),Rl=k("...And yes it works now with now stack overflow!"),Ml=m(),Nl=f("section"),Bl=f("h2"),Jl=f("a"),Gl=k("Summary"),Ul=m(),Vl=f("p"),Fl=k("So, here we have it, our first code transformation with babel:"),Zl=m(),Kl=f("pre"),Yl=m(),_l=f("p"),Xl=k("A summary of the steps on how we get here:"),zl=m(),ql=f("ol"),Ql=f("li"),nu=k("Have in mind what you want to transform from and transform into"),au=m(),tu=f("li"),su=k("Know what to target on the AST"),eu=m(),ou=f("li"),cu=k("Know how the transformed AST looks like"),pu=m(),ru=f("li"),iu=k("Write code"),lu=m(),uu=f("section"),hu=f("h2"),fu=f("a"),du=k("Further resources"),ku=m(),mu=f("p"),bu=k("If you are interested to learn more, "),gu=f("a"),vu=k("babel's Github repo"),wu=k(" is always the best place to find out more code examples of writing a babel transformation."),Eu=m(),yu=f("p"),Au=k("Head down to "),Su=f("a"),Iu=k("https://github.com/babel/babel"),Tu=k(", and look for "),Cu=f("code"),Lu=k("babel-plugin-transform-*"),xu=k(" or "),Ou=f("code"),Pu=k("babel-plugin-proposal-*"),ju=k(" folders, they are all babel transformation plugin, where you can find code on how babel "),Hu=f("a"),$u=k("transform the nullish coalescing operator"),Du=k(", "),Wu=f("a"),Ru=k("optional chaining"),Mu=k(" and many more."),Nu=m(),Bu=f("section"),Ju=f("h2"),Gu=f("a"),Uu=k("Reference"),Vu=m(),Fu=f("ul"),Zu=f("li"),Ku=f("a"),Yu=k("Babel docs"),_u=k(" & "),Xu=f("a"),zu=k("Github repo"),qu=m(),Qu=f("li"),nh=f("a"),ah=k("Babel Handbook"),th=k(" by "),sh=f("a"),eh=k("Jamie Kyle"),oh=m(),ch=f("li"),ph=f("a"),rh=k("Leveling Up One’s Parsing Game With ASTs"),ih=k(" by "),lh=f("a"),uh=k("Vaidehi Joshi"),this.h()},l(n){t=w(n,"SECTION",{});var a=v(t);s=w(a,"UL",{class:!0,id:!0,role:!0,"aria-label":!0});var i=v(s);e=w(i,"LI",{});var l=v(e);o=w(l,"A",{href:!0});var f=v(o);c=E(f,"What is babel?"),f.forEach(u),l.forEach(u),p=w(i,"UL",{});var k=v(p);r=w(k,"LI",{});var m=v(r);h=w(m,"A",{href:!0});var g=v(h);d=E(g,"What is Abstract Syntax Tree (AST)?"),g.forEach(u),m.forEach(u),k.forEach(u),b=w(i,"LI",{});var hh=v(b);A=w(hh,"A",{href:!0});var fh=v(A);S=E(fh,"How to use babel to transform code"),fh.forEach(u),hh.forEach(u),I=w(i,"UL",{});var dh=v(I);T=w(dh,"LI",{});var kh=v(T);C=w(kh,"A",{href:!0});var mh=v(C);L=E(mh,"1. Have in mind what you want to transform from and transform into"),mh.forEach(u),kh.forEach(u),x=w(dh,"LI",{});var bh=v(x);O=w(bh,"A",{href:!0});var gh=v(O);P=E(gh,"2. Know what to target on the AST"),gh.forEach(u),bh.forEach(u),j=w(dh,"LI",{});var vh=v(j);H=w(vh,"A",{href:!0});var wh=v(H);$=E(wh,"3. Know how the transformed AST looks like"),wh.forEach(u),vh.forEach(u),D=w(dh,"LI",{});var Eh=v(D);W=w(Eh,"A",{href:!0});var yh=v(W);R=E(yh,"4. Write code"),yh.forEach(u),Eh.forEach(u),M=w(dh,"UL",{});var Ah=v(M);N=w(Ah,"LI",{});var Sh=v(N);B=w(Sh,"A",{href:!0});var Ih=v(B);J=E(Ih,"Transforming variable name"),Ih.forEach(u),Sh.forEach(u),G=w(Ah,"LI",{});var Th=v(G);U=w(Th,"A",{href:!0});var Ch=v(U);V=E(Ch,"Transforming strings"),Ch.forEach(u),Th.forEach(u),Ah.forEach(u),dh.forEach(u),F=w(i,"LI",{});var Lh=v(F);Z=w(Lh,"A",{href:!0});var xh=v(Z);K=E(xh,"Summary"),xh.forEach(u),Lh.forEach(u),Y=w(i,"LI",{});var Oh=v(Y);_=w(Oh,"A",{href:!0});var Ph=v(_);X=E(Ph,"Further resources"),Ph.forEach(u),Oh.forEach(u),z=w(i,"LI",{});var jh=v(z);q=w(jh,"A",{href:!0});var Hh=v(q);Q=E(Hh,"Reference"),Hh.forEach(u),jh.forEach(u),i.forEach(u),a.forEach(u),nn=y(n),an=w(n,"P",{});var $h=v(an);tn=E($h,"Today, I will share a step-by-step guide for writing a custom "),sn=w($h,"A",{href:!0,rel:!0});var Dh=v(sn);en=E(Dh,"babel"),Dh.forEach(u),on=E($h," transformation. You can use this technique to write your own automated code modifications, refactoring and code generation."),$h.forEach(u),cn=y(n),pn=w(n,"SECTION",{});var Wh=v(pn);rn=w(Wh,"H2",{});var Rh=v(rn);ln=w(Rh,"A",{href:!0,id:!0});var Mh=v(ln);un=E(Mh,"What is babel?"),Mh.forEach(u),Rh.forEach(u),hn=y(Wh),fn=w(Wh,"P",{});var Nh=v(fn);dn=w(Nh,"A",{href:!0,rel:!0});var Bh=v(dn);kn=E(Bh,"Babel"),Bh.forEach(u),mn=E(Nh," is a JavaScript compiler that is mainly used to convert ECMAScript 2015+ code into backward compatible version of JavaScript in current and older browsers or environments. Babel uses a "),bn=w(Nh,"A",{href:!0,rel:!0});var Jh=v(bn);gn=E(Jh,"plugin system"),Jh.forEach(u),vn=E(Nh," to do code transformation, so anyone can write their own transformation plugin for babel."),Nh.forEach(u),wn=y(Wh),En=w(Wh,"P",{});var Gh=v(En);yn=E(Gh,"Before you get started writing a transformation plugin for babel, you would need to know what is an "),An=w(Gh,"A",{href:!0,rel:!0});var Uh=v(An);Sn=E(Uh,"Abstract Syntax Tree (AST)"),Uh.forEach(u),In=E(Gh,"."),Gh.forEach(u),Wh.forEach(u),Tn=y(n),Cn=w(n,"SECTION",{});var Vh=v(Cn);Ln=w(Vh,"H3",{});var Fh=v(Ln);xn=w(Fh,"A",{href:!0,id:!0});var Zh=v(xn);On=E(Zh,"What is Abstract Syntax Tree (AST)?"),Zh.forEach(u),Fh.forEach(u),Pn=y(Vh),jn=w(Vh,"P",{});var Kh=v(jn);Hn=E(Kh,"I am not sure I can explain this better than the amazing articles out there on the web:"),Kh.forEach(u),$n=y(Vh),Dn=w(Vh,"UL",{});var Yh=v(Dn);Wn=w(Yh,"LI",{});var _h=v(Wn);Rn=w(_h,"A",{href:!0,rel:!0});var Xh=v(Rn);Mn=E(Xh,"Leveling Up One’s Parsing Game With ASTs"),Xh.forEach(u),Nn=E(_h," by "),Bn=w(_h,"A",{href:!0,rel:!0});var zh=v(Bn);Jn=E(zh,"Vaidehi Joshi"),zh.forEach(u),Gn=E(_h," * "),Un=w(_h,"EM",{});var qh=v(Un);Vn=E(qh,"(Highly recommend this one! 👍)"),qh.forEach(u),_h.forEach(u),Fn=y(Yh),Zn=w(Yh,"LI",{});var Qh=v(Zn);Kn=E(Qh,"Wikipedia's "),Yn=w(Qh,"A",{href:!0,rel:!0});var nf=v(Yn);_n=E(nf,"Abstract syntax tree"),nf.forEach(u),Qh.forEach(u),Xn=y(Yh),zn=w(Yh,"LI",{});var af=v(zn);qn=w(af,"A",{href:!0,rel:!0});var tf=v(qn);Qn=E(tf,"What is an Abstract Syntax Tree"),tf.forEach(u),na=E(af," by "),aa=w(af,"A",{href:!0,rel:!0});var sf=v(aa);ta=E(sf,"Chidume Nnamdi"),sf.forEach(u),af.forEach(u),Yh.forEach(u),sa=y(Vh),ea=w(Vh,"P",{});var ef=v(ea);oa=E(ef,"To summarize, AST is a tree representation of your code. In the case of JavaScript, the JavaScript AST follows the "),ca=w(ef,"A",{href:!0,rel:!0});var of=v(ca);pa=E(of,"estree specification"),of.forEach(u),ra=E(ef,"."),ef.forEach(u),ia=y(Vh),la=w(Vh,"P",{});var cf=v(la);ua=E(cf,"AST represents your code, the structure and the meaning of your code. So it allows the compiler like "),ha=w(cf,"A",{href:!0,rel:!0});var pf=v(ha);fa=E(pf,"babel"),pf.forEach(u),da=E(cf," to understand the code and make specific meaningful transformation to it."),cf.forEach(u),ka=y(Vh),ma=w(Vh,"P",{});var rf=v(ma);ba=E(rf,"So now you know what is AST, let's write a custom babel transformation to modify your code using AST."),rf.forEach(u),Vh.forEach(u),ga=y(n),va=w(n,"SECTION",{});var lf=v(va);wa=w(lf,"H2",{});var uf=v(wa);Ea=w(uf,"A",{href:!0,id:!0});var hf=v(Ea);ya=E(hf,"How to use babel to transform code"),hf.forEach(u),uf.forEach(u),Aa=y(lf),Sa=w(lf,"P",{});var ff=v(Sa);Ia=E(ff,"The following is the general template of using babel to do code transformation:"),ff.forEach(u),Ta=y(lf),Ca=w(lf,"PRE",{class:!0}),v(Ca).forEach(u),La=y(lf),xa=w(lf,"BLOCKQUOTE",{});var df=v(xa);Oa=w(df,"P",{});var kf=v(Oa);Pa=E(kf,"You would need to install "),ja=w(kf,"A",{href:!0,rel:!0});var mf=v(ja);Ha=E(mf,"@babel/core"),mf.forEach(u),$a=E(kf," to run this. "),Da=w(kf,"CODE",{});var bf=v(Da);Wa=E(bf,"@babel/parser"),bf.forEach(u),Ra=E(kf,", "),Ma=w(kf,"CODE",{});var gf=v(Ma);Na=E(gf,"@babel/traverse"),gf.forEach(u),Ba=E(kf,", "),Ja=w(kf,"CODE",{});var vf=v(Ja);Ga=E(vf,"@babel/generator"),vf.forEach(u),Ua=E(kf," are all dependencies of "),Va=w(kf,"CODE",{});var wf=v(Va);Fa=E(wf,"@babel/core"),wf.forEach(u),Za=E(kf,", so installing "),Ka=w(kf,"CODE",{});var Ef=v(Ka);Ya=E(Ef,"@babel/core"),Ef.forEach(u),_a=E(kf," would suffice."),kf.forEach(u),df.forEach(u),Xa=y(lf),za=w(lf,"P",{});var yf=v(za);qa=E(yf,"So the general idea is to parse your code to AST, transform the AST, and then generate code from the transformed AST."),yf.forEach(u),Qa=y(lf),nt=w(lf,"PRE",{class:!0}),v(nt).forEach(u),at=y(lf),tt=w(lf,"P",{});var Af=v(tt);st=E(Af,"However, we can use another API from "),et=w(Af,"CODE",{});var Sf=v(et);ot=E(Sf,"babel"),Sf.forEach(u),ct=E(Af," to do all the above:"),Af.forEach(u),pt=y(lf),rt=w(lf,"PRE",{class:!0}),v(rt).forEach(u),it=y(lf),lt=w(lf,"P",{});var If=v(lt);ut=E(If,"Now, you have written your first "),ht=w(If,"A",{href:!0,rel:!0});var Tf=v(ht);ft=E(Tf,"babel transform plugin"),Tf.forEach(u),dt=E(If," that replace all variable named "),kt=w(If,"CODE",{});var Cf=v(kt);mt=E(Cf,"n"),Cf.forEach(u),bt=E(If," to "),gt=w(If,"CODE",{});var Lf=v(gt);vt=E(Lf,"x"),Lf.forEach(u),wt=E(If,", how cool is that?!"),If.forEach(u),Et=y(lf),yt=w(lf,"BLOCKQUOTE",{});var xf=v(yt);At=w(xf,"P",{});var Of=v(At);St=E(Of,"Extract out the function "),It=w(Of,"CODE",{});var Pf=v(It);Tt=E(Pf,"myCustomPlugin"),Pf.forEach(u),Ct=E(Of," to a new file and export it. "),Lt=w(Of,"A",{href:!0,rel:!0});var jf=v(Lt);xt=E(jf,"Package and publish your file as a npm package"),jf.forEach(u),Ot=E(Of," and you can proudly say you have published a babel plugin! 🎉🎉"),Of.forEach(u),xf.forEach(u),Pt=y(lf),jt=w(lf,"P",{});var Hf=v(jt);Ht=E(Hf,"At this point, you must have thought: "),$t=w(Hf,"EM",{});var $f=v($t);Dt=E($f,'"Yes I\'ve just written a babel plugin, but I have no idea how it works..."'),$f.forEach(u),Wt=E(Hf,", so fret not, let's dive in on how you can write the babel transformation plugin yourself!"),Hf.forEach(u),Rt=y(lf),Mt=w(lf,"P",{});var Df=v(Mt);Nt=E(Df,"So, here is the step-by-step guide to do it:"),Df.forEach(u),lf.forEach(u),Bt=y(n),Jt=w(n,"SECTION",{});var Wf=v(Jt);Gt=w(Wf,"H3",{});var Rf=v(Gt);Ut=w(Rf,"A",{href:!0,id:!0});var Mf=v(Ut);Vt=E(Mf,"1. Have in mind what you want to transform from and transform into"),Mf.forEach(u),Rf.forEach(u),Ft=y(Wf),Zt=w(Wf,"P",{});var Nf=v(Zt);Kt=E(Nf,"In this example, I want to prank my colleague by creating a babel plugin that will:"),Nf.forEach(u),Yt=y(Wf),_t=w(Wf,"UL",{});var Bf=v(_t);Xt=w(Bf,"LI",{});var Jf=v(Xt);zt=E(Jf,"reverse all the variables' and functions' names"),Jf.forEach(u),qt=y(Bf),Qt=w(Bf,"LI",{});var Gf=v(Qt);ns=E(Gf,"split out string into individual characters"),Gf.forEach(u),Bf.forEach(u),as=y(Wf),ts=w(Wf,"PRE",{class:!0}),v(ts).forEach(u),ss=y(Wf),es=w(Wf,"P",{});var Uf=v(es);os=E(Uf,"into"),Uf.forEach(u),cs=y(Wf),ps=w(Wf,"PRE",{class:!0}),v(ps).forEach(u),rs=y(Wf),is=w(Wf,"P",{});var Vf=v(is);ls=E(Vf,"Well, we have to keep the "),us=w(Vf,"CODE",{});var Ff=v(us);hs=E(Ff,"console.log"),Ff.forEach(u),fs=E(Vf,", so that even the code is hardly readable, it is still working fine. "),ds=w(Vf,"EM",{});var Zf=v(ds);ks=E(Zf,"(I wouldn't want to break the production code!)"),Zf.forEach(u),Vf.forEach(u),Wf.forEach(u),ms=y(n),bs=w(n,"SECTION",{});var Kf=v(bs);gs=w(Kf,"H3",{});var Yf=v(gs);vs=w(Yf,"A",{href:!0,id:!0});var _f=v(vs);ws=E(_f,"2. Know what to target on the AST"),_f.forEach(u),Yf.forEach(u),Es=y(Kf),ys=w(Kf,"P",{});var Xf=v(ys);As=E(Xf,"Head down to a "),Ss=w(Xf,"A",{href:!0,rel:!0});var zf=v(Ss);Is=E(zf,"babel AST explorer"),zf.forEach(u),Ts=E(Xf,", click on different parts of the code and see where / how it is represented on the AST:"),Xf.forEach(u),Cs=y(Kf),Ls=w(Kf,"P",{});var qf=v(Ls);xs=w(qf,"PICTURE",{});var Qf=v(xs);Os=w(Qf,"SOURCE",{type:!0,srcset:!0}),Ps=w(Qf,"SOURCE",{type:!0,srcset:!0}),js=w(Qf,"IMG",{title:!0,alt:!0,"data-src":!0,loading:!0}),Qf.forEach(u),qf.forEach(u),Hs=y(Kf),$s=w(Kf,"P",{});var nd=v($s);Ds=E(nd,"If this is your first time seeing the AST, play around with it for a little while and get the sense of how is it look like, and get to know the names of the node on the AST with respect to your code."),nd.forEach(u),Ws=y(Kf),Rs=w(Kf,"P",{});var ad=v(Rs);Ms=E(ad,"So, now we know that we need to target:"),ad.forEach(u),Ns=y(Kf),Bs=w(Kf,"UL",{});var td=v(Bs);Js=w(td,"LI",{});var sd=v(Js);Gs=w(sd,"STRONG",{});var ed=v(Gs);Us=E(ed,"Identifier"),ed.forEach(u),Vs=E(sd," for variable and function names"),sd.forEach(u),Fs=y(td),Zs=w(td,"LI",{});var od=v(Zs);Ks=w(od,"STRONG",{});var cd=v(Ks);Ys=E(cd,"StringLiteral"),cd.forEach(u),_s=E(od," for the string."),od.forEach(u),td.forEach(u),Kf.forEach(u),Xs=y(n),zs=w(n,"SECTION",{});var pd=v(zs);qs=w(pd,"H3",{});var rd=v(qs);Qs=w(rd,"A",{href:!0,id:!0});var id=v(Qs);ne=E(id,"3. Know how the transformed AST looks like"),id.forEach(u),rd.forEach(u),ae=y(pd),te=w(pd,"P",{});var ld=v(te);se=E(ld,"Head down to the "),ee=w(ld,"A",{href:!0,rel:!0});var ud=v(ee);oe=E(ud,"babel AST explorer"),ud.forEach(u),ce=E(ld," again, but this time around with the output code you want to generate."),ld.forEach(u),pe=y(pd),re=w(pd,"P",{});var hd=v(re);ie=w(hd,"PICTURE",{});var fd=v(ie);le=w(fd,"SOURCE",{type:!0,srcset:!0}),ue=w(fd,"SOURCE",{type:!0,srcset:!0}),he=w(fd,"IMG",{title:!0,alt:!0,"data-src":!0,loading:!0}),fd.forEach(u),hd.forEach(u),fe=y(pd),de=w(pd,"P",{});var dd=v(de);ke=E(dd,"Play around and think how you can transform from the previous AST to the current AST."),dd.forEach(u),me=y(pd),be=w(pd,"P",{});var kd=v(be);ge=E(kd,"For example, you can see that "),ve=w(kd,"CODE",{});var md=v(ve);we=E(md,"'H' + 'e' + 'l' + 'l' + 'o' + ' ' + eman"),md.forEach(u),Ee=E(kd," is formed by nested "),ye=w(kd,"CODE",{});var bd=v(ye);Ae=E(bd,"BinaryExpression"),bd.forEach(u),Se=E(kd," with "),Ie=w(kd,"CODE",{});var gd=v(Ie);Te=E(gd,"StringLiteral"),gd.forEach(u),Ce=E(kd,"."),kd.forEach(u),pd.forEach(u),Le=y(n),xe=w(n,"SECTION",{});var vd=v(xe);Oe=w(vd,"H3",{});var wd=v(Oe);Pe=w(wd,"A",{href:!0,id:!0});var Ed=v(Pe);je=E(Ed,"4. Write code"),Ed.forEach(u),wd.forEach(u),He=y(vd),$e=w(vd,"P",{});var yd=v($e);De=E(yd,"Now look at our code again:"),yd.forEach(u),We=y(vd),Re=w(vd,"PRE",{class:!0}),v(Re).forEach(u),Me=y(vd),Ne=w(vd,"P",{});var Ad=v(Ne);Be=E(Ad,"The transformation uses "),Je=w(Ad,"A",{href:!0,rel:!0});var Sd=v(Je);Ge=E(Sd,"the visitor pattern"),Sd.forEach(u),Ue=E(Ad,"."),Ad.forEach(u),Ve=y(vd),Fe=w(vd,"P",{});var Id=v(Fe);Ze=E(Id,"During the traversal phase, babel will do a "),Ke=w(Id,"A",{href:!0,rel:!0});var Td=v(Ke);Ye=E(Td,"depth-first search traversal"),Td.forEach(u),_e=E(Id," and visit each node in the AST. You can specify a callback method in the visitor, such that while visiting the node, babel will call the callback method with the node it is currently visiting."),Id.forEach(u),Xe=y(vd),ze=w(vd,"P",{});var Cd=v(ze);qe=E(Cd,"In the visitor object, you can specify the name of the node you want to be "),Qe=w(Cd,"CODE",{});var Ld=v(Qe);no=E(Ld,"callback"),Ld.forEach(u),ao=E(Cd,"ed:"),Cd.forEach(u),to=y(vd),so=w(vd,"PRE",{class:!0}),v(so).forEach(u),eo=y(vd),oo=w(vd,"P",{});var xd=v(oo);co=E(xd,'Run it and you will see that "string literal" and "identifier" is being called whenever babel encounters it:'),xd.forEach(u),po=y(vd),ro=w(vd,"PRE",{class:!0}),v(ro).forEach(u),io=y(vd),lo=w(vd,"HR",{}),uo=y(vd),ho=w(vd,"P",{});var Od=v(ho);fo=E(Od,"Before we continue, let's look at the parameter of "),ko=w(Od,"CODE",{});var Pd=v(ko);mo=E(Pd,"Identifer(path) {}"),Pd.forEach(u),bo=E(Od,". It says "),go=w(Od,"CODE",{});var jd=v(go);vo=E(jd,"path"),jd.forEach(u),wo=E(Od," instead of "),Eo=w(Od,"CODE",{});var Hd=v(Eo);yo=E(Hd,"node"),Hd.forEach(u),Ao=E(Od,", what is the difference between "),So=w(Od,"CODE",{});var $d=v(So);Io=E($d,"path"),$d.forEach(u),To=E(Od," and "),Co=w(Od,"CODE",{});var Dd=v(Co);Lo=E(Dd,"node"),Dd.forEach(u),xo=E(Od,"? 🤷‍"),Od.forEach(u),Oo=y(vd),Po=w(vd,"P",{});var Wd=v(Po);jo=E(Wd,"In babel, "),Ho=w(Wd,"CODE",{});var Rd=v(Ho);$o=E(Rd,"path"),Rd.forEach(u),Do=E(Wd," is an abstraction above "),Wo=w(Wd,"CODE",{});var Md=v(Wo);Ro=E(Md,"node"),Md.forEach(u),Mo=E(Wd,", it provides the link between nodes, ie the "),No=w(Wd,"CODE",{});var Nd=v(No);Bo=E(Nd,"parent"),Nd.forEach(u),Jo=E(Wd," of the node, as well as information such as the "),Go=w(Wd,"CODE",{});var Bd=v(Go);Uo=E(Bd,"scope"),Bd.forEach(u),Vo=E(Wd,", "),Fo=w(Wd,"CODE",{});var Jd=v(Fo);Zo=E(Jd,"context"),Jd.forEach(u),Ko=E(Wd,", etc. Besides, the "),Yo=w(Wd,"CODE",{});var Gd=v(Yo);_o=E(Gd,"path"),Gd.forEach(u),Xo=E(Wd," provides method such as "),zo=w(Wd,"CODE",{});var Ud=v(zo);qo=E(Ud,"replaceWith"),Ud.forEach(u),Qo=E(Wd,", "),nc=w(Wd,"CODE",{});var Vd=v(nc);ac=E(Vd,"insertBefore"),Vd.forEach(u),tc=E(Wd,", "),sc=w(Wd,"CODE",{});var Fd=v(sc);ec=E(Fd,"remove"),Fd.forEach(u),oc=E(Wd,", etc that will update and reflect on the underlying AST node."),Wd.forEach(u),cc=y(vd),pc=w(vd,"BLOCKQUOTE",{});var Zd=v(pc);rc=w(Zd,"P",{});var Kd=v(rc);ic=E(Kd,"You can read more detail about "),lc=w(Kd,"CODE",{});var Yd=v(lc);uc=E(Yd,"path"),Yd.forEach(u),hc=E(Kd," in "),fc=w(Kd,"A",{href:!0,rel:!0});var _d=v(fc);dc=E(_d,"Jamie Kyle"),_d.forEach(u),kc=E(Kd,"'s "),mc=w(Kd,"A",{href:!0,rel:!0});var Xd=v(mc);bc=E(Xd,"babel handbook"),Xd.forEach(u),Kd.forEach(u),Zd.forEach(u),gc=y(vd),vc=w(vd,"HR",{}),wc=y(vd),Ec=w(vd,"P",{});var zd=v(Ec);yc=E(zd,"So let's continue writing our babel plugin."),zd.forEach(u),vd.forEach(u),Ac=y(n),Sc=w(n,"SECTION",{});var qd=v(Sc);Ic=w(qd,"H4",{});var Qd=v(Ic);Tc=w(Qd,"A",{href:!0,id:!0});var nk=v(Tc);Cc=E(nk,"Transforming variable name"),nk.forEach(u),Qd.forEach(u),Lc=y(qd),xc=w(qd,"P",{});var ak=v(xc);Oc=E(ak,"As we can see from the "),Pc=w(ak,"A",{href:!0,rel:!0});var tk=v(Pc);jc=E(tk,"AST explorer"),tk.forEach(u),Hc=E(ak,", the name of the "),$c=w(ak,"CODE",{});var sk=v($c);Dc=E(sk,"Identifier"),sk.forEach(u),Wc=E(ak," is stored in the property called "),Rc=w(ak,"CODE",{});var ek=v(Rc);Mc=E(ek,"name"),ek.forEach(u),Nc=E(ak,", so what we will do is to reverse the "),Bc=w(ak,"CODE",{});var ok=v(Bc);Jc=E(ok,"name"),ok.forEach(u),Gc=E(ak,"."),ak.forEach(u),Uc=y(qd),Vc=w(qd,"PRE",{class:!0}),v(Vc).forEach(u),Fc=y(qd),Zc=w(qd,"P",{});var ck=v(Zc);Kc=E(ck,"Run it and you will see:"),ck.forEach(u),Yc=y(qd),_c=w(qd,"PRE",{class:!0}),v(_c).forEach(u),Xc=y(qd),zc=w(qd,"P",{});var pk=v(zc);qc=E(pk,"We are almost there, except we've accidentally reversed "),Qc=w(pk,"CODE",{});var rk=v(Qc);np=E(rk,"console.log"),rk.forEach(u),ap=E(pk," as well. How can we prevent that?"),pk.forEach(u),tp=y(qd),sp=w(qd,"P",{});var ik=v(sp);ep=E(ik,"Take a look at the AST again:"),ik.forEach(u),op=y(qd),cp=w(qd,"P",{});var lk=v(cp);pp=w(lk,"PICTURE",{});var uk=v(pp);rp=w(uk,"SOURCE",{type:!0,srcset:!0}),ip=w(uk,"SOURCE",{type:!0,srcset:!0}),lp=w(uk,"IMG",{title:!0,alt:!0,"data-src":!0,loading:!0}),uk.forEach(u),lk.forEach(u),up=y(qd),hp=w(qd,"P",{});var hk=v(hp);fp=w(hk,"CODE",{});var fk=v(fp);dp=E(fk,"console.log"),fk.forEach(u),kp=E(hk," is part of the "),mp=w(hk,"CODE",{});var dk=v(mp);bp=E(dk,"MemberExpression"),dk.forEach(u),gp=E(hk,", with the "),vp=w(hk,"CODE",{});var kk=v(vp);wp=E(kk,"object"),kk.forEach(u),Ep=E(hk," as "),yp=w(hk,"CODE",{});var mk=v(yp);Ap=E(mk,'"console"'),mk.forEach(u),Sp=E(hk," and "),Ip=w(hk,"CODE",{});var bk=v(Ip);Tp=E(bk,"property"),bk.forEach(u),Cp=E(hk," as "),Lp=w(hk,"CODE",{});var gk=v(Lp);xp=E(gk,'"log"'),gk.forEach(u),Op=E(hk,"."),hk.forEach(u),Pp=y(qd),jp=w(qd,"P",{});var vk=v(jp);Hp=E(vk,"So let's check that if our current "),$p=w(vk,"CODE",{});var wk=v($p);Dp=E(wk,"Identifier"),wk.forEach(u),Wp=E(vk," is within this "),Rp=w(vk,"CODE",{});var Ek=v(Rp);Mp=E(Ek,"MemberExpression"),Ek.forEach(u),Np=E(vk," and we will not reverse the name:"),vk.forEach(u),Bp=y(qd),Jp=w(qd,"PRE",{class:!0}),v(Jp).forEach(u),Gp=y(qd),Up=w(qd,"P",{});var yk=v(Up);Vp=E(yk,"And yes, now you get it right!"),yk.forEach(u),Fp=y(qd),Zp=w(qd,"PRE",{class:!0}),v(Zp).forEach(u),Kp=y(qd),Yp=w(qd,"P",{});var Ak=v(Yp);_p=E(Ak,"So, why do we have to check whether the "),Xp=w(Ak,"CODE",{});var Sk=v(Xp);zp=E(Sk,"Identifier"),Sk.forEach(u),qp=E(Ak,"'s parent is not a "),Qp=w(Ak,"CODE",{});var Ik=v(Qp);nr=E(Ik,"console.log"),Ik.forEach(u),ar=y(Ak),tr=w(Ak,"CODE",{});var Tk=v(tr);sr=E(Tk,"MemberExpression"),Tk.forEach(u),er=E(Ak,"? Why don't we just compare whether the current "),or=w(Ak,"CODE",{});var Ck=v(or);cr=E(Ck,"Identifier.name === 'console' || Identifier.name === 'log'"),Ck.forEach(u),pr=E(Ak,"?"),Ak.forEach(u),rr=y(qd),ir=w(qd,"P",{});var Lk=v(ir);lr=E(Lk,"You can do that, except that it will not reverse the variable name if it is named "),ur=w(Lk,"CODE",{});var xk=v(ur);hr=E(xk,"console"),xk.forEach(u),fr=E(Lk," or "),dr=w(Lk,"CODE",{});var Ok=v(dr);kr=E(Ok,"log"),Ok.forEach(u),mr=E(Lk,":"),Lk.forEach(u),br=y(qd),gr=w(qd,"PRE",{class:!0}),v(gr).forEach(u),vr=y(qd),wr=w(qd,"BLOCKQUOTE",{});var Pk=v(wr);Er=w(Pk,"P",{});var jk=v(Er);yr=E(jk,"So, how do I know the method "),Ar=w(jk,"CODE",{});var Hk=v(Ar);Sr=E(Hk,"isMemberExpression"),Hk.forEach(u),Ir=E(jk," and "),Tr=w(jk,"CODE",{});var $k=v(Tr);Cr=E($k,"isIdentifier"),$k.forEach(u),Lr=E(jk,"? Well, all the node types specified in the "),xr=w(jk,"A",{href:!0,rel:!0});var Dk=v(xr);Or=E(Dk,"@babel/types"),Dk.forEach(u),Pr=E(jk," have the "),jr=w(jk,"CODE",{});var Wk=v(jr);Hr=E(Wk,"isXxxx"),Wk.forEach(u),$r=E(jk," validator function counterpart, eg: "),Dr=w(jk,"CODE",{});var Rk=v(Dr);Wr=E(Rk,"anyTypeAnnotation"),Rk.forEach(u),Rr=E(jk," function will have a "),Mr=w(jk,"CODE",{});var Mk=v(Mr);Nr=E(Mk,"isAnyTypeAnnotation"),Mk.forEach(u),Br=E(jk," validator. If you want to know the exhaustive list of the validator functions, you can head over "),Jr=w(jk,"A",{href:!0,rel:!0});var Nk=v(Jr);Gr=E(Nk,"to the actual source code"),Nk.forEach(u),Ur=E(jk,"."),jk.forEach(u),Pk.forEach(u),qd.forEach(u),Vr=y(n),Fr=w(n,"SECTION",{});var Bk=v(Fr);Zr=w(Bk,"H4",{});var Jk=v(Zr);Kr=w(Jk,"A",{href:!0,id:!0});var Gk=v(Kr);Yr=E(Gk,"Transforming strings"),Gk.forEach(u),Jk.forEach(u),_r=y(Bk),Xr=w(Bk,"P",{});var Uk=v(Xr);zr=E(Uk,"The next step is to generate a nested "),qr=w(Uk,"CODE",{});var Vk=v(qr);Qr=E(Vk,"BinaryExpression"),Vk.forEach(u),ni=E(Uk," out of "),ai=w(Uk,"CODE",{});var Fk=v(ai);ti=E(Fk,"StringLiteral"),Fk.forEach(u),si=E(Uk,"."),Uk.forEach(u),ei=y(Bk),oi=w(Bk,"P",{});var Zk=v(oi);ci=E(Zk,"To create an AST node, you can use the utility function from "),pi=w(Zk,"A",{href:!0,rel:!0});var Kk=v(pi);ri=w(Kk,"CODE",{});var Yk=v(ri);ii=E(Yk,"@babel/types"),Yk.forEach(u),Kk.forEach(u),li=E(Zk,". "),ui=w(Zk,"CODE",{});var _k=v(ui);hi=E(_k,"@babel/types"),_k.forEach(u),fi=E(Zk," is also available via "),di=w(Zk,"CODE",{});var Xk=v(di);ki=E(Xk,"babel.types"),Xk.forEach(u),mi=E(Zk," from "),bi=w(Zk,"CODE",{});var zk=v(bi);gi=E(zk,"@babel/core"),zk.forEach(u),vi=E(Zk,"."),Zk.forEach(u),wi=y(Bk),Ei=w(Bk,"PRE",{class:!0}),v(Ei).forEach(u),yi=y(Bk),Ai=w(Bk,"P",{});var qk=v(Ai);Si=E(qk,"So, we split the content of the "),Ii=w(qk,"CODE",{});var Qk=v(Ii);Ti=E(Qk,"StringLiteral"),Qk.forEach(u),Ci=E(qk,", which is in "),Li=w(qk,"CODE",{});var nm=v(Li);xi=E(nm,"path.node.value"),nm.forEach(u),Oi=E(qk,", make each character a "),Pi=w(qk,"CODE",{});var am=v(Pi);ji=E(am,"StringLiteral"),am.forEach(u),Hi=E(qk,", and combine them with "),$i=w(qk,"CODE",{});var tm=v($i);Di=E(tm,"BinaryExpression"),tm.forEach(u),Wi=E(qk,". Finally, we replace the "),Ri=w(qk,"CODE",{});var sm=v(Ri);Mi=E(sm,"StringLiteral"),sm.forEach(u),Ni=E(qk," with the newly created node."),qk.forEach(u),Bi=y(Bk),Ji=w(Bk,"P",{});var em=v(Ji);Gi=E(em,"...And that's it! Except, we ran into Stack Overflow 😅:"),em.forEach(u),Ui=y(Bk),Vi=w(Bk,"PRE",{class:!0}),v(Vi).forEach(u),Fi=y(Bk),Zi=w(Bk,"P",{});var om=v(Zi);Ki=E(om,"Why 🤷‍ ?"),om.forEach(u),Yi=y(Bk),_i=w(Bk,"P",{});var cm=v(_i);Xi=E(cm,"Well, that's because for each "),zi=w(cm,"CODE",{});var pm=v(zi);qi=E(pm,"StringLiteral"),pm.forEach(u),Qi=E(cm," we created more "),nl=w(cm,"CODE",{});var rm=v(nl);al=E(rm,"StringLiteral"),rm.forEach(u),tl=E(cm,", and in each of those "),sl=w(cm,"CODE",{});var im=v(sl);el=E(im,"StringLiteral"),im.forEach(u),ol=E(cm,', we are "creating" more '),cl=w(cm,"CODE",{});var lm=v(cl);pl=E(lm,"StringLiteral"),lm.forEach(u),rl=E(cm,". Although we will replace a "),il=w(cm,"CODE",{});var um=v(il);ll=E(um,"StringLiteral"),um.forEach(u),ul=E(cm," with another "),hl=w(cm,"CODE",{});var hm=v(hl);fl=E(hm,"StringLiteral"),hm.forEach(u),dl=E(cm,", babel will treat it as a new node and will visit the newly created "),kl=w(cm,"CODE",{});var fm=v(kl);ml=E(fm,"StringLiteral"),fm.forEach(u),bl=E(cm,", thus the infinite recursive and stack overflow."),cm.forEach(u),gl=y(Bk),vl=w(Bk,"P",{});var dm=v(vl);wl=E(dm,"So, how do we tell babel that once we replaced the "),El=w(dm,"CODE",{});var km=v(El);yl=E(km,"StringLiteral"),km.forEach(u),Al=E(dm," with the "),Sl=w(dm,"CODE",{});var mm=v(Sl);Il=E(mm,"newNode"),mm.forEach(u),Tl=E(dm,", babel can stop and don't have to go down and visit the newly created node anymore?"),dm.forEach(u),Cl=y(Bk),Ll=w(Bk,"P",{});var bm=v(Ll);xl=E(bm,"We can use "),Ol=w(bm,"CODE",{});var gm=v(Ol);Pl=E(gm,"path.skip()"),gm.forEach(u),jl=E(bm," to skip traversing the children of the current path:"),bm.forEach(u),Hl=y(Bk),$l=w(Bk,"PRE",{class:!0}),v($l).forEach(u),Dl=y(Bk),Wl=w(Bk,"P",{});var vm=v(Wl);Rl=E(vm,"...And yes it works now with now stack overflow!"),vm.forEach(u),Bk.forEach(u),Ml=y(n),Nl=w(n,"SECTION",{});var wm=v(Nl);Bl=w(wm,"H2",{});var Em=v(Bl);Jl=w(Em,"A",{href:!0,id:!0});var ym=v(Jl);Gl=E(ym,"Summary"),ym.forEach(u),Em.forEach(u),Ul=y(wm),Vl=w(wm,"P",{});var Am=v(Vl);Fl=E(Am,"So, here we have it, our first code transformation with babel:"),Am.forEach(u),Zl=y(wm),Kl=w(wm,"PRE",{class:!0}),v(Kl).forEach(u),Yl=y(wm),_l=w(wm,"P",{});var Sm=v(_l);Xl=E(Sm,"A summary of the steps on how we get here:"),Sm.forEach(u),zl=y(wm),ql=w(wm,"OL",{});var Im=v(ql);Ql=w(Im,"LI",{});var Tm=v(Ql);nu=E(Tm,"Have in mind what you want to transform from and transform into"),Tm.forEach(u),au=y(Im),tu=w(Im,"LI",{});var Cm=v(tu);su=E(Cm,"Know what to target on the AST"),Cm.forEach(u),eu=y(Im),ou=w(Im,"LI",{});var Lm=v(ou);cu=E(Lm,"Know how the transformed AST looks like"),Lm.forEach(u),pu=y(Im),ru=w(Im,"LI",{});var xm=v(ru);iu=E(xm,"Write code"),xm.forEach(u),Im.forEach(u),wm.forEach(u),lu=y(n),uu=w(n,"SECTION",{});var Om=v(uu);hu=w(Om,"H2",{});var Pm=v(hu);fu=w(Pm,"A",{href:!0,id:!0});var jm=v(fu);du=E(jm,"Further resources"),jm.forEach(u),Pm.forEach(u),ku=y(Om),mu=w(Om,"P",{});var Hm=v(mu);bu=E(Hm,"If you are interested to learn more, "),gu=w(Hm,"A",{href:!0,rel:!0});var $m=v(gu);vu=E($m,"babel's Github repo"),$m.forEach(u),wu=E(Hm," is always the best place to find out more code examples of writing a babel transformation."),Hm.forEach(u),Eu=y(Om),yu=w(Om,"P",{});var Dm=v(yu);Au=E(Dm,"Head down to "),Su=w(Dm,"A",{href:!0,rel:!0});var Wm=v(Su);Iu=E(Wm,"https://github.com/babel/babel"),Wm.forEach(u),Tu=E(Dm,", and look for "),Cu=w(Dm,"CODE",{});var Rm=v(Cu);Lu=E(Rm,"babel-plugin-transform-*"),Rm.forEach(u),xu=E(Dm," or "),Ou=w(Dm,"CODE",{});var Mm=v(Ou);Pu=E(Mm,"babel-plugin-proposal-*"),Mm.forEach(u),ju=E(Dm," folders, they are all babel transformation plugin, where you can find code on how babel "),Hu=w(Dm,"A",{href:!0,rel:!0});var Nm=v(Hu);$u=E(Nm,"transform the nullish coalescing operator"),Nm.forEach(u),Du=E(Dm,", "),Wu=w(Dm,"A",{href:!0,rel:!0});var Bm=v(Wu);Ru=E(Bm,"optional chaining"),Bm.forEach(u),Mu=E(Dm," and many more."),Dm.forEach(u),Om.forEach(u),Nu=y(n),Bu=w(n,"SECTION",{});var Jm=v(Bu);Ju=w(Jm,"H2",{});var Gm=v(Ju);Gu=w(Gm,"A",{href:!0,id:!0});var Um=v(Gu);Uu=E(Um,"Reference"),Um.forEach(u),Gm.forEach(u),Vu=y(Jm),Fu=w(Jm,"UL",{});var Vm=v(Fu);Zu=w(Vm,"LI",{});var Fm=v(Zu);Ku=w(Fm,"A",{href:!0,rel:!0});var Zm=v(Ku);Yu=E(Zm,"Babel docs"),Zm.forEach(u),_u=E(Fm," & "),Xu=w(Fm,"A",{href:!0,rel:!0});var Km=v(Xu);zu=E(Km,"Github repo"),Km.forEach(u),Fm.forEach(u),qu=y(Vm),Qu=w(Vm,"LI",{});var Ym=v(Qu);nh=w(Ym,"A",{href:!0,rel:!0});var _m=v(nh);ah=E(_m,"Babel Handbook"),_m.forEach(u),th=E(Ym," by "),sh=w(Ym,"A",{href:!0,rel:!0});var Xm=v(sh);eh=E(Xm,"Jamie Kyle"),Xm.forEach(u),Ym.forEach(u),oh=y(Vm),ch=w(Vm,"LI",{});var zm=v(ch);ph=w(zm,"A",{href:!0,rel:!0});var qm=v(ph);rh=E(qm,"Leveling Up One’s Parsing Game With ASTs"),qm.forEach(u),ih=E(zm," by "),lh=w(zm,"A",{href:!0,rel:!0});var Qm=v(lh);uh=E(Qm,"Vaidehi Joshi"),Qm.forEach(u),zm.forEach(u),Vm.forEach(u),Jm.forEach(u),this.h()},h(){g(o,"href","#what-is-babel"),g(h,"href","#what-is-abstract-syntax-tree-ast"),g(A,"href","#how-to-use-babel-to-transform-code"),g(C,"href","#have-in-mind-what-you-want-to-transform-from-and-transform-into"),g(O,"href","#know-what-to-target-on-the-ast"),g(H,"href","#know-how-the-transformed-ast-looks-like"),g(W,"href","#write-code"),g(B,"href","#transforming-variable-name"),g(U,"href","#transforming-strings"),g(Z,"href","#summary"),g(_,"href","#further-resources"),g(q,"href","#reference"),g(s,"class","sitemap"),g(s,"id","sitemap"),g(s,"role","navigation"),g(s,"aria-label","Table of Contents"),g(sn,"href","https://babeljs.io/docs/en/babel-core"),g(sn,"rel","nofollow"),g(ln,"href","#what-is-babel"),g(ln,"id","what-is-babel"),g(dn,"href","https://babeljs.io/docs/en/"),g(dn,"rel","nofollow"),g(bn,"href","https://babeljs.io/docs/en/plugins"),g(bn,"rel","nofollow"),g(An,"href","https://en.wikipedia.org/wiki/Abstract_syntax_tree"),g(An,"rel","nofollow"),g(xn,"href","#what-is-abstract-syntax-tree-ast"),g(xn,"id","what-is-abstract-syntax-tree-ast"),g(Rn,"href","https://medium.com/basecs/leveling-up-ones-parsing-game-with-asts-d7a6fc2400ff"),g(Rn,"rel","nofollow"),g(Bn,"href","https://twitter.com/vaidehijoshi"),g(Bn,"rel","nofollow"),g(Yn,"href","https://en.wikipedia.org/wiki/Abstract_syntax_tree"),g(Yn,"rel","nofollow"),g(qn,"href","https://blog.bitsrc.io/what-is-an-abstract-syntax-tree-7502b71bde27"),g(qn,"rel","nofollow"),g(aa,"href","https://twitter.com/ngArchangel"),g(aa,"rel","nofollow"),g(ca,"href","https://github.com/estree/estree"),g(ca,"rel","nofollow"),g(ha,"href","https://babeljs.io"),g(ha,"rel","nofollow"),g(Ea,"href","#how-to-use-babel-to-transform-code"),g(Ea,"id","how-to-use-babel-to-transform-code"),g(Ca,"class","language-js"),g(ja,"href","https://www.npmjs.com/package/@babel/core"),g(ja,"rel","nofollow"),g(nt,"class","language-null"),g(rt,"class","language-js"),g(ht,"href","https://babeljs.io/docs/en/plugins"),g(ht,"rel","nofollow"),g(Lt,"href","https://medium.com/@bretcameron/how-to-publish-your-first-npm-package-b224296fc57b"),g(Lt,"rel","nofollow"),g(Ut,"href","#have-in-mind-what-you-want-to-transform-from-and-transform-into"),g(Ut,"id","have-in-mind-what-you-want-to-transform-from-and-transform-into"),g(ts,"class","language-js"),g(ps,"class","language-js"),g(vs,"href","#know-what-to-target-on-the-ast"),g(vs,"id","know-what-to-target-on-the-ast"),g(Ss,"href","https://lihautan.com/babel-ast-explorer/#?eyJiYWJlbFNldHRpbmdzIjp7InZlcnNpb24iOiI3LjQuNSJ9LCJ0cmVlU2V0dGluZ3MiOnsiaGlkZUVtcHR5Ijp0cnVlLCJoaWRlTG9jYXRpb24iOnRydWUsImhpZGVUeXBlIjp0cnVlfSwiY29kZSI6ImZ1bmN0aW9uIGdyZWV0KG5hbWUpIHtcbiAgcmV0dXJuICdIZWxsbyAnICsgbmFtZTtcbn1cblxuY29uc29sZS5sb2coZ3JlZXQoJ3RhbmhhdWhhdScpKTsgLy8gSGVsbG8gdGFuaGF1aGF1In0="),g(Ss,"rel","nofollow"),g(Os,"type","image/webp"),g(Os,"srcset","bacd2ed2088b43ce.webp"),g(Ps,"type","image/jpeg"),g(Ps,"srcset","bacd2ed2088b43ce.png"),g(js,"title","Selecting the code on the left and see the corresponding part of the AST light up on the right"),g(js,"alt","targeting"),g(js,"data-src","bacd2ed2088b43ce.png"),g(js,"loading","lazy"),g(Qs,"href","#know-how-the-transformed-ast-looks-like"),g(Qs,"id","know-how-the-transformed-ast-looks-like"),g(ee,"href","https://lihautan.com/babel-ast-explorer/#?eyJiYWJlbFNldHRpbmdzIjp7InZlcnNpb24iOiI3LjQuNSJ9LCJ0cmVlU2V0dGluZ3MiOnsiaGlkZUVtcHR5Ijp0cnVlLCJoaWRlTG9jYXRpb24iOnRydWUsImhpZGVUeXBlIjp0cnVlLCJoaWRlQ29tbWVudHMiOnRydWV9LCJjb2RlIjoiZnVuY3Rpb24gdGVlcmcoZW1hbikge1xuICByZXR1cm4gXCJIXCIgKyBcImVcIiArIFwibFwiICsgXCJsXCIgKyBcIm9cIiArIFwiIFwiICsgZW1hbjtcbn1cblxuY29uc29sZS5sb2codGVlcmcoXCJ0XCIgKyBcImFcIiArIFwiblwiICsgXCJoXCIgKyBcImFcIiArIFwidVwiICsgXCJoXCIgKyBcImFcIiArIFwidVwiKSk7IC8vIEhlbGxvIHRhbmhhdWhhdVxuIn0="),g(ee,"rel","nofollow"),g(le,"type","image/webp"),g(le,"srcset","1b4b7b8861eb17f0.webp"),g(ue,"type","image/jpeg"),g(ue,"srcset","1b4b7b8861eb17f0.png"),g(he,"title","You can see that what used to be a `StringLiteral` is now a nested `BinaryExpression`"),g(he,"alt","output"),g(he,"data-src","1b4b7b8861eb17f0.png"),g(he,"loading","lazy"),g(Pe,"href","#write-code"),g(Pe,"id","write-code"),g(Re,"class","language-js"),g(Je,"href","https://en.wikipedia.org/wiki/Visitor_pattern"),g(Je,"rel","nofollow"),g(Ke,"href","https://en.wikipedia.org/wiki/Depth-first_search"),g(Ke,"rel","nofollow"),g(so,"class","language-js"),g(ro,"class","language-null"),g(fc,"href","https://jamie.build"),g(fc,"rel","nofollow"),g(mc,"href","https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#paths"),g(mc,"rel","nofollow"),g(Tc,"href","#transforming-variable-name"),g(Tc,"id","transforming-variable-name"),g(Pc,"href","https://lihautan.com/babel-ast-explorer/#?eyJiYWJlbFNldHRpbmdzIjp7InZlcnNpb24iOiI3LjQuNSJ9LCJ0cmVlU2V0dGluZ3MiOnsiaGlkZUVtcHR5Ijp0cnVlLCJoaWRlTG9jYXRpb24iOnRydWUsImhpZGVUeXBlIjp0cnVlfSwiY29kZSI6ImZ1bmN0aW9uIGdyZWV0KG5hbWUpIHtcbiAgcmV0dXJuICdIZWxsbyAnICsgbmFtZTtcbn1cblxuY29uc29sZS5sb2coZ3JlZXQoJ3RhbmhhdWhhdScpKTsgLy8gSGVsbG8gdGFuaGF1aGF1In0="),g(Pc,"rel","nofollow"),g(Vc,"class","language-js"),g(_c,"class","language-js"),g(rp,"type","image/webp"),g(rp,"srcset","aa140e7ffe777036.webp"),g(ip,"type","image/jpeg"),g(ip,"srcset","aa140e7ffe777036.png"),g(lp,"title","null"),g(lp,"alt","member expression"),g(lp,"data-src","aa140e7ffe777036.png"),g(lp,"loading","lazy"),g(Jp,"class","language-js"),g(Zp,"class","language-js"),g(gr,"class","language-js"),g(xr,"href","https://babeljs.io/docs/en/babel-types"),g(xr,"rel","nofollow"),g(Jr,"href","https://github.com/babel/babel/blob/master/packages/babel-types/src/validators/generated/index.js"),g(Jr,"rel","nofollow"),g(Kr,"href","#transforming-strings"),g(Kr,"id","transforming-strings"),g(pi,"href","https://babeljs.io/docs/en/babel-types"),g(pi,"rel","nofollow"),g(Ei,"class","language-js"),g(Vi,"class","language-null"),g($l,"class","language-js"),g(Jl,"href","#summary"),g(Jl,"id","summary"),g(Kl,"class","language-js"),g(fu,"href","#further-resources"),g(fu,"id","further-resources"),g(gu,"href","https://github.com/babel/babel/tree/master/packages"),g(gu,"rel","nofollow"),g(Su,"href","https://github.com/babel/babel/tree/master/packages"),g(Su,"rel","nofollow"),g(Hu,"href","https://github.com/babel/babel/tree/master/packages/babel-plugin-proposal-nullish-coalescing-operator"),g(Hu,"rel","nofollow"),g(Wu,"href","https://github.com/babel/babel/tree/master/packages/babel-plugin-proposal-optional-chaining"),g(Wu,"rel","nofollow"),g(Gu,"href","#reference"),g(Gu,"id","reference"),g(Ku,"href","https://babeljs.io/docs/en/"),g(Ku,"rel","nofollow"),g(Xu,"href","https://github.com/babel/babel"),g(Xu,"rel","nofollow"),g(nh,"href","https://github.com/jamiebuilds/babel-handbook"),g(nh,"rel","nofollow"),g(sh,"href","https://jamie.build/"),g(sh,"rel","nofollow"),g(ph,"href","https://medium.com/basecs/leveling-up-ones-parsing-game-with-asts-d7a6fc2400ff"),g(ph,"rel","nofollow"),g(lh,"href","https://twitter.com/vaidehijoshi"),g(lh,"rel","nofollow")},m(n,a){l(n,t,a),i(t,s),i(s,e),i(e,o),i(o,c),i(s,p),i(p,r),i(r,h),i(h,d),i(s,b),i(b,A),i(A,S),i(s,I),i(I,T),i(T,C),i(C,L),i(I,x),i(x,O),i(O,P),i(I,j),i(j,H),i(H,$),i(I,D),i(D,W),i(W,R),i(I,M),i(M,N),i(N,B),i(B,J),i(M,G),i(G,U),i(U,V),i(s,F),i(F,Z),i(Z,K),i(s,Y),i(Y,_),i(_,X),i(s,z),i(z,q),i(q,Q),l(n,nn,a),l(n,an,a),i(an,tn),i(an,sn),i(sn,en),i(an,on),l(n,cn,a),l(n,pn,a),i(pn,rn),i(rn,ln),i(ln,un),i(pn,hn),i(pn,fn),i(fn,dn),i(dn,kn),i(fn,mn),i(fn,bn),i(bn,gn),i(fn,vn),i(pn,wn),i(pn,En),i(En,yn),i(En,An),i(An,Sn),i(En,In),l(n,Tn,a),l(n,Cn,a),i(Cn,Ln),i(Ln,xn),i(xn,On),i(Cn,Pn),i(Cn,jn),i(jn,Hn),i(Cn,$n),i(Cn,Dn),i(Dn,Wn),i(Wn,Rn),i(Rn,Mn),i(Wn,Nn),i(Wn,Bn),i(Bn,Jn),i(Wn,Gn),i(Wn,Un),i(Un,Vn),i(Dn,Fn),i(Dn,Zn),i(Zn,Kn),i(Zn,Yn),i(Yn,_n),i(Dn,Xn),i(Dn,zn),i(zn,qn),i(qn,Qn),i(zn,na),i(zn,aa),i(aa,ta),i(Cn,sa),i(Cn,ea),i(ea,oa),i(ea,ca),i(ca,pa),i(ea,ra),i(Cn,ia),i(Cn,la),i(la,ua),i(la,ha),i(ha,fa),i(la,da),i(Cn,ka),i(Cn,ma),i(ma,ba),l(n,ga,a),l(n,va,a),i(va,wa),i(wa,Ea),i(Ea,ya),i(va,Aa),i(va,Sa),i(Sa,Ia),i(va,Ta),i(va,Ca),Ca.innerHTML='<code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> parse <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">\'@babel/parser\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> traverse <span class="token keyword">from</span> <span class="token string">\'@babel/traverse\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> generate <span class="token keyword">from</span> <span class="token string">\'@babel/generator\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> code <span class="token operator">=</span> <span class="token string">\'const n = 1\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// parse the code -> ast</span>\n<span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// transform the ast</span>\n<span class="token function">traverse</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>\n  <span class="token function">enter</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token comment">// in this example change all the variable &#96;n&#96; to &#96;x&#96;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">isIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token punctuation">:</span> <span class="token string">\'n\'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n      path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">\'x\'</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// generate code &lt;- ast</span>\n<span class="token keyword">const</span> output <span class="token operator">=</span> <span class="token function">generate</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \'const x = 1;\'</span></code>',i(va,La),i(va,xa),i(xa,Oa),i(Oa,Pa),i(Oa,ja),i(ja,Ha),i(Oa,$a),i(Oa,Da),i(Da,Wa),i(Oa,Ra),i(Oa,Ma),i(Ma,Na),i(Oa,Ba),i(Oa,Ja),i(Ja,Ga),i(Oa,Ua),i(Oa,Va),i(Va,Fa),i(Oa,Za),i(Oa,Ka),i(Ka,Ya),i(Oa,_a),i(va,Xa),i(va,za),i(za,qa),i(va,Qa),i(va,nt),nt.innerHTML='\n<code class="language-">code -&gt; AST -&gt; transformed AST -&gt; transformed code</code>',i(va,at),i(va,tt),i(tt,st),i(tt,et),i(et,ot),i(tt,ct),i(va,pt),i(va,rt),rt.innerHTML='<code class="language-js"><span class="token keyword">import</span> babel <span class="token keyword">from</span> <span class="token string">\'@babel/core\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> code <span class="token operator">=</span> <span class="token string">\'const n = 1\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> output <span class="token operator">=</span> babel<span class="token punctuation">.</span><span class="token function">transformSync</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// your first babel plugin 😎😎</span>\n    <span class="token keyword">function</span> <span class="token function">myCustomPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>\n        visitor<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>\n          <span class="token function">Identifier</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n            <span class="token comment">// in this example change all the variable &#96;n&#96; to &#96;x&#96;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">isIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token punctuation">:</span> <span class="token string">\'n\'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n              path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">\'x\'</span><span class="token punctuation">;</span>\n            <span class="token punctuation">&#125;</span>\n          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \'const x = 1;\'</span></code>',i(va,it),i(va,lt),i(lt,ut),i(lt,ht),i(ht,ft),i(lt,dt),i(lt,kt),i(kt,mt),i(lt,bt),i(lt,gt),i(gt,vt),i(lt,wt),i(va,Et),i(va,yt),i(yt,At),i(At,St),i(At,It),i(It,Tt),i(At,Ct),i(At,Lt),i(Lt,xt),i(At,Ot),i(va,Pt),i(va,jt),i(jt,Ht),i(jt,$t),i($t,Dt),i(jt,Wt),i(va,Rt),i(va,Mt),i(Mt,Nt),l(n,Bt,a),l(n,Jt,a),i(Jt,Gt),i(Gt,Ut),i(Ut,Vt),i(Jt,Ft),i(Jt,Zt),i(Zt,Kt),i(Jt,Yt),i(Jt,_t),i(_t,Xt),i(Xt,zt),i(_t,qt),i(_t,Qt),i(Qt,ns),i(Jt,as),i(Jt,ts),ts.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">return</span> <span class="token string">\'Hello \'</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token string">\'tanhauhau\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello tanhauhau</span></code>',i(Jt,ss),i(Jt,es),i(es,os),i(Jt,cs),i(Jt,ps),ps.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">teerg</span><span class="token punctuation">(</span><span class="token parameter">eman</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">return</span> <span class="token string">\'H\'</span> <span class="token operator">+</span> <span class="token string">\'e\'</span> <span class="token operator">+</span> <span class="token string">\'l\'</span> <span class="token operator">+</span> <span class="token string">\'l\'</span> <span class="token operator">+</span> <span class="token string">\'o\'</span> <span class="token operator">+</span> <span class="token string">\' \'</span> <span class="token operator">+</span> eman<span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">teerg</span><span class="token punctuation">(</span><span class="token string">\'t\'</span> <span class="token operator">+</span> <span class="token string">\'a\'</span> <span class="token operator">+</span> <span class="token string">\'n\'</span> <span class="token operator">+</span> <span class="token string">\'h\'</span> <span class="token operator">+</span> <span class="token string">\'a\'</span> <span class="token operator">+</span> <span class="token string">\'u\'</span> <span class="token operator">+</span> <span class="token string">\'h\'</span> <span class="token operator">+</span> <span class="token string">\'a\'</span> <span class="token operator">+</span> <span class="token string">\'u\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello tanhauhau</span></code>',i(Jt,rs),i(Jt,is),i(is,ls),i(is,us),i(us,hs),i(is,fs),i(is,ds),i(ds,ks),l(n,ms,a),l(n,bs,a),i(bs,gs),i(gs,vs),i(vs,ws),i(bs,Es),i(bs,ys),i(ys,As),i(ys,Ss),i(Ss,Is),i(ys,Ts),i(bs,Cs),i(bs,Ls),i(Ls,xs),i(xs,Os),i(xs,Ps),i(xs,js),i(bs,Hs),i(bs,$s),i($s,Ds),i(bs,Ws),i(bs,Rs),i(Rs,Ms),i(bs,Ns),i(bs,Bs),i(Bs,Js),i(Js,Gs),i(Gs,Us),i(Js,Vs),i(Bs,Fs),i(Bs,Zs),i(Zs,Ks),i(Ks,Ys),i(Zs,_s),l(n,Xs,a),l(n,zs,a),i(zs,qs),i(qs,Qs),i(Qs,ne),i(zs,ae),i(zs,te),i(te,se),i(te,ee),i(ee,oe),i(te,ce),i(zs,pe),i(zs,re),i(re,ie),i(ie,le),i(ie,ue),i(ie,he),i(zs,fe),i(zs,de),i(de,ke),i(zs,me),i(zs,be),i(be,ge),i(be,ve),i(ve,we),i(be,Ee),i(be,ye),i(ye,Ae),i(be,Se),i(be,Ie),i(Ie,Te),i(be,Ce),l(n,Le,a),l(n,xe,a),i(xe,Oe),i(Oe,Pe),i(Pe,je),i(xe,He),i(xe,$e),i($e,De),i(xe,We),i(xe,Re),Re.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">myCustomPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>\n    <span class="token comment">// highlight-start</span>\n    visitor<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>\n      <span class="token function">Identifier</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n        <span class="token comment">// ...</span>\n      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n    <span class="token comment">// highlight-end</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',i(xe,Me),i(xe,Ne),i(Ne,Be),i(Ne,Je),i(Je,Ge),i(Ne,Ue),i(xe,Ve),i(xe,Fe),i(Fe,Ze),i(Fe,Ke),i(Ke,Ye),i(Fe,_e),i(xe,Xe),i(xe,ze),i(ze,qe),i(ze,Qe),i(Qe,no),i(ze,ao),i(xe,to),i(xe,so),so.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">myCustomPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>\n    visitor<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>\n      <span class="token function">Identifier</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'identifier\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n      <span class="token function">StringLiteral</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'string literal\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',i(xe,eo),i(xe,oo),i(oo,co),i(xe,po),i(xe,ro),ro.innerHTML='\n<code class="language-">identifier\nidentifier\nstring literal\nidentifier\nidentifier\nidentifier\nidentifier\nstring literal</code>',i(xe,io),i(xe,lo),i(xe,uo),i(xe,ho),i(ho,fo),i(ho,ko),i(ko,mo),i(ho,bo),i(ho,go),i(go,vo),i(ho,wo),i(ho,Eo),i(Eo,yo),i(ho,Ao),i(ho,So),i(So,Io),i(ho,To),i(ho,Co),i(Co,Lo),i(ho,xo),i(xe,Oo),i(xe,Po),i(Po,jo),i(Po,Ho),i(Ho,$o),i(Po,Do),i(Po,Wo),i(Wo,Ro),i(Po,Mo),i(Po,No),i(No,Bo),i(Po,Jo),i(Po,Go),i(Go,Uo),i(Po,Vo),i(Po,Fo),i(Fo,Zo),i(Po,Ko),i(Po,Yo),i(Yo,_o),i(Po,Xo),i(Po,zo),i(zo,qo),i(Po,Qo),i(Po,nc),i(nc,ac),i(Po,tc),i(Po,sc),i(sc,ec),i(Po,oc),i(xe,cc),i(xe,pc),i(pc,rc),i(rc,ic),i(rc,lc),i(lc,uc),i(rc,hc),i(rc,fc),i(fc,dc),i(rc,kc),i(rc,mc),i(mc,bc),i(xe,gc),i(xe,vc),i(xe,wc),i(xe,Ec),i(Ec,yc),l(n,Ac,a),l(n,Sc,a),i(Sc,Ic),i(Ic,Tc),i(Tc,Cc),i(Sc,Lc),i(Sc,xc),i(xc,Oc),i(xc,Pc),i(Pc,jc),i(xc,Hc),i(xc,$c),i($c,Dc),i(xc,Wc),i(xc,Rc),i(Rc,Mc),i(xc,Nc),i(xc,Bc),i(Bc,Jc),i(xc,Gc),i(Sc,Uc),i(Sc,Vc),Vc.innerHTML='<code class="language-js"><span class="token function">Identifier</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>name <span class="token operator">=</span> path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>name\n    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',i(Sc,Fc),i(Sc,Zc),i(Zc,Kc),i(Sc,Yc),i(Sc,_c),_c.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">teerg</span><span class="token punctuation">(</span><span class="token parameter">eman</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">return</span> <span class="token string">\'Hello \'</span> <span class="token operator">+</span> eman<span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span>\n\nelosnoc<span class="token punctuation">.</span><span class="token function">gol</span><span class="token punctuation">(</span><span class="token function">teerg</span><span class="token punctuation">(</span><span class="token string">\'tanhauhau\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello tanhauhau</span></code>',i(Sc,Xc),i(Sc,zc),i(zc,qc),i(zc,Qc),i(Qc,np),i(zc,ap),i(Sc,tp),i(Sc,sp),i(sp,ep),i(Sc,op),i(Sc,cp),i(cp,pp),i(pp,rp),i(pp,ip),i(pp,lp),i(Sc,up),i(Sc,hp),i(hp,fp),i(fp,dp),i(hp,kp),i(hp,mp),i(mp,bp),i(hp,gp),i(hp,vp),i(vp,wp),i(hp,Ep),i(hp,yp),i(yp,Ap),i(hp,Sp),i(hp,Ip),i(Ip,Tp),i(hp,Cp),i(hp,Lp),i(Lp,xp),i(hp,Op),i(Sc,Pp),i(Sc,jp),i(jp,Hp),i(jp,$p),i($p,Dp),i(jp,Wp),i(jp,Rp),i(Rp,Mp),i(jp,Np),i(Sc,Bp),i(Sc,Jp),Jp.innerHTML='<code class="language-js"><span class="token function">Identifier</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>\n    <span class="token operator">!</span><span class="token punctuation">(</span>\n      path<span class="token punctuation">.</span>parentPath<span class="token punctuation">.</span><span class="token function">isMemberExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n      path<span class="token punctuation">.</span>parentPath\n        <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">\'object\'</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">isIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token punctuation">:</span> <span class="token string">\'console\'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n      path<span class="token punctuation">.</span>parentPath<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">\'property\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token punctuation">:</span> <span class="token string">\'log\'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n   path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>name <span class="token operator">=</span> path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>name\n     <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span>\n     <span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n     <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span></code>',i(Sc,Gp),i(Sc,Up),i(Up,Vp),i(Sc,Fp),i(Sc,Zp),Zp.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">teerg</span><span class="token punctuation">(</span><span class="token parameter">eman</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">return</span> <span class="token string">\'Hello \'</span> <span class="token operator">+</span> eman<span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">teerg</span><span class="token punctuation">(</span><span class="token string">\'tanhauhau\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello tanhauhau</span></code>',i(Sc,Kp),i(Sc,Yp),i(Yp,_p),i(Yp,Xp),i(Xp,zp),i(Yp,qp),i(Yp,Qp),i(Qp,nr),i(Yp,ar),i(Yp,tr),i(tr,sr),i(Yp,er),i(Yp,or),i(or,cr),i(Yp,pr),i(Sc,rr),i(Sc,ir),i(ir,lr),i(ir,ur),i(ur,hr),i(ir,fr),i(ir,dr),i(dr,kr),i(ir,mr),i(Sc,br),i(Sc,gr),gr.innerHTML='<code class="language-js"><span class="token keyword">const</span> log <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code>',i(Sc,vr),i(Sc,wr),i(wr,Er),i(Er,yr),i(Er,Ar),i(Ar,Sr),i(Er,Ir),i(Er,Tr),i(Tr,Cr),i(Er,Lr),i(Er,xr),i(xr,Or),i(Er,Pr),i(Er,jr),i(jr,Hr),i(Er,$r),i(Er,Dr),i(Dr,Wr),i(Er,Rr),i(Er,Mr),i(Mr,Nr),i(Er,Br),i(Er,Jr),i(Jr,Gr),i(Er,Ur),l(n,Vr,a),l(n,Fr,a),i(Fr,Zr),i(Zr,Kr),i(Kr,Yr),i(Fr,_r),i(Fr,Xr),i(Xr,zr),i(Xr,qr),i(qr,Qr),i(Xr,ni),i(Xr,ai),i(ai,ti),i(Xr,si),i(Fr,ei),i(Fr,oi),i(oi,ci),i(oi,pi),i(pi,ri),i(ri,ii),i(oi,li),i(oi,ui),i(ui,hi),i(oi,fi),i(oi,di),i(di,ki),i(oi,mi),i(oi,bi),i(bi,gi),i(oi,vi),i(Fr,wi),i(Fr,Ei),Ei.innerHTML='<code class="language-js"><span class="token function">StringLiteral</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">const</span> newNode <span class="token operator">=</span> path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>value\n    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=></span> babel<span class="token punctuation">.</span>types<span class="token punctuation">.</span><span class="token function">stringLiteral</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> curr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n      <span class="token keyword">return</span> babel<span class="token punctuation">.</span>types<span class="token punctuation">.</span><span class="token function">binaryExpression</span><span class="token punctuation">(</span><span class="token string">\'+\'</span><span class="token punctuation">,</span> prev<span class="token punctuation">,</span> curr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  path<span class="token punctuation">.</span><span class="token function">replaceWith</span><span class="token punctuation">(</span>newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',i(Fr,yi),i(Fr,Ai),i(Ai,Si),i(Ai,Ii),i(Ii,Ti),i(Ai,Ci),i(Ai,Li),i(Li,xi),i(Ai,Oi),i(Ai,Pi),i(Pi,ji),i(Ai,Hi),i(Ai,$i),i($i,Di),i(Ai,Wi),i(Ai,Ri),i(Ri,Mi),i(Ai,Ni),i(Fr,Bi),i(Fr,Ji),i(Ji,Gi),i(Fr,Ui),i(Fr,Vi),Vi.innerHTML='\n<code class="language-">RangeError: Maximum call stack size exceeded</code>',i(Fr,Fi),i(Fr,Zi),i(Zi,Ki),i(Fr,Yi),i(Fr,_i),i(_i,Xi),i(_i,zi),i(zi,qi),i(_i,Qi),i(_i,nl),i(nl,al),i(_i,tl),i(_i,sl),i(sl,el),i(_i,ol),i(_i,cl),i(cl,pl),i(_i,rl),i(_i,il),i(il,ll),i(_i,ul),i(_i,hl),i(hl,fl),i(_i,dl),i(_i,kl),i(kl,ml),i(_i,bl),i(Fr,gl),i(Fr,vl),i(vl,wl),i(vl,El),i(El,yl),i(vl,Al),i(vl,Sl),i(Sl,Il),i(vl,Tl),i(Fr,Cl),i(Fr,Ll),i(Ll,xl),i(Ll,Ol),i(Ol,Pl),i(Ll,jl),i(Fr,Hl),i(Fr,$l),$l.innerHTML='<code class="language-js"><span class="token function">StringLiteral</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">const</span> newNode <span class="token operator">=</span> path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>value\n    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=></span> babel<span class="token punctuation">.</span>types<span class="token punctuation">.</span><span class="token function">stringLiteral</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> curr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n      <span class="token keyword">return</span> babel<span class="token punctuation">.</span>types<span class="token punctuation">.</span><span class="token function">binaryExpression</span><span class="token punctuation">(</span><span class="token string">\'+\'</span><span class="token punctuation">,</span> prev<span class="token punctuation">,</span> curr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  path<span class="token punctuation">.</span><span class="token function">replaceWith</span><span class="token punctuation">(</span>newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// highlight-next-line</span>\n  path<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',i(Fr,Dl),i(Fr,Wl),i(Wl,Rl),l(n,Ml,a),l(n,Nl,a),i(Nl,Bl),i(Bl,Jl),i(Jl,Gl),i(Nl,Ul),i(Nl,Vl),i(Vl,Fl),i(Nl,Zl),i(Nl,Kl),Kl.innerHTML='<code class="language-js"><span class="token keyword">const</span> babel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@babel/core\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> code <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">\nfunction greet(name) &#123;\n  return \'Hello \' + name;\n&#125;\nconsole.log(greet(\'tanhauhau\')); // Hello tanhauhau\n</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> output <span class="token operator">=</span> babel<span class="token punctuation">.</span><span class="token function">transformSync</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>\n  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">function</span> <span class="token function">myCustomPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>\n        visitor<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>\n          <span class="token function">StringLiteral</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n            <span class="token keyword">const</span> concat <span class="token operator">=</span> path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>value\n              <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span>\n              <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=></span> babel<span class="token punctuation">.</span>types<span class="token punctuation">.</span><span class="token function">stringLiteral</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>\n              <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> curr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n                <span class="token keyword">return</span> babel<span class="token punctuation">.</span>types<span class="token punctuation">.</span><span class="token function">binaryExpression</span><span class="token punctuation">(</span><span class="token string">\'+\'</span><span class="token punctuation">,</span> prev<span class="token punctuation">,</span> curr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n              <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            path<span class="token punctuation">.</span><span class="token function">replaceWith</span><span class="token punctuation">(</span>concat<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            path<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n          <span class="token function">Identifier</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>\n              <span class="token operator">!</span><span class="token punctuation">(</span>\n                path<span class="token punctuation">.</span>parentPath<span class="token punctuation">.</span><span class="token function">isMemberExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n                path<span class="token punctuation">.</span>parentPath\n                  <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">\'object\'</span><span class="token punctuation">)</span>\n                  <span class="token punctuation">.</span><span class="token function">isIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token punctuation">:</span> <span class="token string">\'console\'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n                path<span class="token punctuation">.</span>parentPath<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">\'property\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token punctuation">:</span> <span class="token string">\'log\'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n              <span class="token punctuation">)</span>\n            <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n              path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>name <span class="token operator">=</span> path<span class="token punctuation">.</span>node<span class="token punctuation">.</span>name\n                <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">&#125;</span>\n          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span></code>',i(Nl,Yl),i(Nl,_l),i(_l,Xl),i(Nl,zl),i(Nl,ql),i(ql,Ql),i(Ql,nu),i(ql,au),i(ql,tu),i(tu,su),i(ql,eu),i(ql,ou),i(ou,cu),i(ql,pu),i(ql,ru),i(ru,iu),l(n,lu,a),l(n,uu,a),i(uu,hu),i(hu,fu),i(fu,du),i(uu,ku),i(uu,mu),i(mu,bu),i(mu,gu),i(gu,vu),i(mu,wu),i(uu,Eu),i(uu,yu),i(yu,Au),i(yu,Su),i(Su,Iu),i(yu,Tu),i(yu,Cu),i(Cu,Lu),i(yu,xu),i(yu,Ou),i(Ou,Pu),i(yu,ju),i(yu,Hu),i(Hu,$u),i(yu,Du),i(yu,Wu),i(Wu,Ru),i(yu,Mu),l(n,Nu,a),l(n,Bu,a),i(Bu,Ju),i(Ju,Gu),i(Gu,Uu),i(Bu,Vu),i(Bu,Fu),i(Fu,Zu),i(Zu,Ku),i(Ku,Yu),i(Zu,_u),i(Zu,Xu),i(Xu,zu),i(Fu,qu),i(Fu,Qu),i(Qu,nh),i(nh,ah),i(Qu,th),i(Qu,sh),i(sh,eh),i(Fu,oh),i(Fu,ch),i(ch,ph),i(ph,rh),i(ch,ih),i(ch,lh),i(lh,uh)},p:n,d(n){n&&u(t),n&&u(nn),n&&u(an),n&&u(cn),n&&u(pn),n&&u(Tn),n&&u(Cn),n&&u(ga),n&&u(va),n&&u(Bt),n&&u(Jt),n&&u(ms),n&&u(bs),n&&u(Xs),n&&u(zs),n&&u(Le),n&&u(xe),n&&u(Ac),n&&u(Sc),n&&u(Vr),n&&u(Fr),n&&u(Ml),n&&u(Nl),n&&u(lu),n&&u(uu),n&&u(Nu),n&&u(Bu)}}}function fn(n){let t,s;const e=[dn];let o={$$slots:{default:[hn]},$$scope:{ctx:n}};for(let n=0;n<e.length;n+=1)o=a(o,e[n]);return t=new un({props:o}),{c(){U(t.$$.fragment)},l(n){V(t.$$.fragment,n)},m(n,a){F(t,n,a),s=!0},p(n,[a]){const s=0&a?function(n,a){const t={},s={},e={$$scope:1};let o=n.length;for(;o--;){const c=n[o],p=a[o];if(p){for(const n in c)n in p||(s[n]=1);for(const n in p)e[n]||(t[n]=p[n],e[n]=1);n[o]=p}else for(const n in c)e[n]=1}for(const n in s)n in t||(t[n]=void 0);return t}(e,[(o=dn,"object"==typeof o&&null!==o?o:{})]):{};var o;1&a&&(s.$$scope={dirty:a,ctx:n}),t.$set(s)},i(n){s||(J(t.$$.fragment,n),s=!0)},o(n){G(t.$$.fragment,n),s=!1},d(n){Z(t,n)}}}const dn={title:"Step-by-step guide for writing a custom babel transformation",date:"2019-09-12T08:00:00Z",tags:["JavaScript","babel","ast","transform"],description:"Writing your first babel plugin",series:"Intermediate Babel",slug:"step-by-step-guide-for-writing-a-babel-transformation",type:"blog"};class kn extends _{constructor(n){super(),Y(this,n,null,fn,c,{})}}setTimeout(()=>{new kn({target:document.querySelector("#app"),hydrate:!0})},3e3);
