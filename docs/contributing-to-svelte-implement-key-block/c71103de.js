function n(){}function a(n,a){for(const s in a)n[s]=a[s];return n}function s(n){return n()}function t(){return Object.create(null)}function e(n){n.forEach(s)}function o(n){return"function"==typeof n}function p(n,a){return n!=n?a==a:n!==a||n&&"object"==typeof n||"function"==typeof n}function c(n,s,t,e){return n[1]&&e?a(t.ctx.slice(),n[1](e(s))):t.ctx}function r(n,a,s,t,e,o,p){const r=function(n,a,s,t){if(n[2]&&t){const e=n[2](t(s));if(void 0===a.dirty)return e;if("object"==typeof e){const n=[],s=Math.max(a.dirty.length,e.length);for(let t=0;t<s;t+=1)n[t]=a.dirty[t]|e[t];return n}return a.dirty|e}return a.dirty}(a,t,e,o);if(r){const e=c(a,s,t,p);n.p(e,r)}}function i(n,a){n.appendChild(a)}function l(n,a,s){n.insertBefore(a,s||null)}function u(n){n.parentNode.removeChild(n)}function k(n,a){for(let s=0;s<n.length;s+=1)n[s]&&n[s].d(a)}function h(n){return document.createElement(n)}function d(n){return document.createElementNS("http://www.w3.org/2000/svg",n)}function f(n){return document.createTextNode(n)}function m(){return f(" ")}function g(){return f("")}function v(n,a,s){null==s?n.removeAttribute(a):n.getAttribute(a)!==s&&n.setAttribute(a,s)}function E(n){return Array.from(n.childNodes)}function y(n,a,s,t){for(let t=0;t<n.length;t+=1){const e=n[t];if(e.nodeName===a){let a=0;const o=[];for(;a<e.attributes.length;){const n=e.attributes[a++];s[n.name]||o.push(n.name)}for(let n=0;n<o.length;n++)e.removeAttribute(o[n]);return n.splice(t,1)[0]}}return t?d(a):h(a)}function w(n,a){for(let s=0;s<n.length;s+=1){const t=n[s];if(3===t.nodeType)return t.data=""+a,n.splice(s,1)[0]}return f(a)}function b(n){return w(n," ")}function x(n,a){a=""+a,n.wholeText!==a&&(n.data=a)}function _(n,a){n.value=null==a?"":a}class C{constructor(n=null){this.a=n,this.e=this.n=null}m(n,a,s=null){this.e||(this.e=h(a.nodeName),this.t=a,this.h(n)),this.i(s)}h(n){this.e.innerHTML=n,this.n=Array.from(this.e.childNodes)}i(n){for(let a=0;a<this.n.length;a+=1)l(this.t,this.n[a],n)}p(n){this.d(),this.h(n),this.i(this.a)}d(){this.n.forEach(u)}}let T;function O(n){T=n}function S(n){(function(){if(!T)throw new Error("Function called outside component initialization");return T})().$$.on_mount.push(n)}const A=[],I=[],P=[],D=[],L=Promise.resolve();let j=!1;function $(n){P.push(n)}let R=!1;const H=new Set;function N(){if(!R){R=!0;do{for(let n=0;n<A.length;n+=1){const a=A[n];O(a),B(a.$$)}for(A.length=0;I.length;)I.pop()();for(let n=0;n<P.length;n+=1){const a=P[n];H.has(a)||(H.add(a),a())}P.length=0}while(A.length);for(;D.length;)D.pop()();j=!1,R=!1,H.clear()}}function B(n){if(null!==n.fragment){n.update(),e(n.before_update);const a=n.dirty;n.dirty=[-1],n.fragment&&n.fragment.p(n.ctx,a),n.after_update.forEach($)}}const M=new Set;function W(n,a){n&&n.i&&(M.delete(n),n.i(a))}function G(n,a,s,t){if(n&&n.o){if(M.has(n))return;M.add(n),(void 0).c.push(()=>{M.delete(n),t&&(s&&n.d(1),t())}),n.o(a)}}function K(n){n&&n.c()}function q(n,a){n&&n.l(a)}function U(n,a,t){const{fragment:p,on_mount:c,on_destroy:r,after_update:i}=n.$$;p&&p.m(a,t),$(()=>{const a=c.map(s).filter(o);r?r.push(...a):e(a),n.$$.on_mount=[]}),i.forEach($)}function F(n,a){const s=n.$$;null!==s.fragment&&(e(s.on_destroy),s.fragment&&s.fragment.d(a),s.on_destroy=s.fragment=null,s.ctx=[])}function J(n,a){-1===n.$$.dirty[0]&&(A.push(n),j||(j=!0,L.then(N)),n.$$.dirty.fill(0)),n.$$.dirty[a/31|0]|=1<<a%31}function z(a,s,o,p,c,r,i=[-1]){const l=T;O(a);const k=s.props||{},h=a.$$={fragment:null,ctx:null,props:r,update:n,not_equal:c,bound:t(),on_mount:[],on_destroy:[],before_update:[],after_update:[],context:new Map(l?l.$$.context:[]),callbacks:t(),dirty:i};let d=!1;if(h.ctx=o?o(a,k,(n,s,...t)=>{const e=t.length?t[0]:s;return h.ctx&&c(h.ctx[n],h.ctx[n]=e)&&(h.bound[n]&&h.bound[n](e),d&&J(a,n)),s}):[],h.update(),d=!0,e(h.before_update),h.fragment=!!p&&p(h.ctx),s.target){if(s.hydrate){const n=E(s.target);h.fragment&&h.fragment.l(n),n.forEach(u)}else h.fragment&&h.fragment.c();s.intro&&W(a.$$.fragment),U(a,s.target,s.anchor),N()}O(l)}class Y{$destroy(){F(this,1),this.$destroy=n}$on(n,a){const s=this.$$.callbacks[n]||(this.$$.callbacks[n]=[]);return s.push(a),()=>{const n=s.indexOf(a);-1!==n&&s.splice(n,1)}}$set(){}}function V(a){let s,t,e,o,p,c,r,k,g,x,_,C,T,O,S,A,I,P,D,L,j,$,R,H,N,B,M,W,G,K,q,U,F,J,z;return{c(){s=h("header"),t=h("nav"),e=h("ul"),o=h("li"),p=h("a"),c=f("Tan Li Hau"),r=m(),k=h("li"),g=h("a"),x=f("About"),_=m(),C=h("li"),T=h("a"),O=f("Writings"),S=m(),A=h("li"),I=h("a"),P=f("Talks"),D=m(),L=h("li"),j=h("a"),$=f("Notes"),R=m(),H=h("li"),N=h("a"),B=f("Newsletter"),M=m(),W=h("li"),G=h("a"),K=d("svg"),q=d("path"),U=m(),F=h("a"),J=d("svg"),z=d("path"),this.h()},l(n){s=y(n,"HEADER",{class:!0});var a=E(s);t=y(a,"NAV",{});var i=E(t);e=y(i,"UL",{class:!0});var l=E(e);o=y(l,"LI",{class:!0});var h=E(o);p=y(h,"A",{href:!0,class:!0});var d=E(p);c=w(d,"Tan Li Hau"),d.forEach(u),h.forEach(u),r=b(l),k=y(l,"LI",{class:!0});var f=E(k);g=y(f,"A",{href:!0,class:!0});var m=E(g);x=w(m,"About"),m.forEach(u),f.forEach(u),_=b(l),C=y(l,"LI",{class:!0});var v=E(C);T=y(v,"A",{href:!0,class:!0});var Y=E(T);O=w(Y,"Writings"),Y.forEach(u),v.forEach(u),S=b(l),A=y(l,"LI",{class:!0});var V=E(A);I=y(V,"A",{href:!0,class:!0});var Q=E(I);P=w(Q,"Talks"),Q.forEach(u),V.forEach(u),D=b(l),L=y(l,"LI",{class:!0});var Z=E(L);j=y(Z,"A",{href:!0,class:!0});var X=E(j);$=w(X,"Notes"),X.forEach(u),Z.forEach(u),R=b(l),H=y(l,"LI",{class:!0});var nn=E(H);N=y(nn,"A",{href:!0,class:!0});var an=E(N);B=w(an,"Newsletter"),an.forEach(u),nn.forEach(u),M=b(l),W=y(l,"LI",{class:!0});var sn=E(W);G=y(sn,"A",{"aria-label":!0,href:!0,class:!0});var tn=E(G);K=y(tn,"svg",{viewBox:!0,width:!0,height:!0,class:!0},1);var en=E(K);q=y(en,"path",{d:!0},1),E(q).forEach(u),en.forEach(u),tn.forEach(u),U=b(sn),F=y(sn,"A",{"aria-label":!0,href:!0,class:!0});var on=E(F);J=y(on,"svg",{viewBox:!0,width:!0,height:!0,class:!0},1);var pn=E(J);z=y(pn,"path",{d:!0},1),E(z).forEach(u),pn.forEach(u),on.forEach(u),sn.forEach(u),l.forEach(u),i.forEach(u),a.forEach(u),this.h()},h(){v(p,"href","/"),v(p,"class","svelte-f3e4uo"),v(o,"class","svelte-f3e4uo"),v(g,"href","/about"),v(g,"class","svelte-f3e4uo"),v(k,"class","svelte-f3e4uo"),v(T,"href","/blogs"),v(T,"class","svelte-f3e4uo"),v(C,"class","svelte-f3e4uo"),v(I,"href","/talks"),v(I,"class","svelte-f3e4uo"),v(A,"class","svelte-f3e4uo"),v(j,"href","/notes"),v(j,"class","svelte-f3e4uo"),v(L,"class","svelte-f3e4uo"),v(N,"href","/newsletter"),v(N,"class","svelte-f3e4uo"),v(H,"class","svelte-f3e4uo"),v(q,"d","M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66\n    10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5\n    4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"),v(K,"viewBox","0 0 24 24"),v(K,"width","1em"),v(K,"height","1em"),v(K,"class","svelte-f3e4uo"),v(G,"aria-label","Twitter account"),v(G,"href","https://twitter.com/lihautan"),v(G,"class","svelte-f3e4uo"),v(z,"d","M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0\n    0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07\n    5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65\n    5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42\n    3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"),v(J,"viewBox","0 0 24 24"),v(J,"width","1em"),v(J,"height","1em"),v(J,"class","svelte-f3e4uo"),v(F,"aria-label","Github account"),v(F,"href","https://github.com/tanhauhau"),v(F,"class","svelte-f3e4uo"),v(W,"class","social svelte-f3e4uo"),v(e,"class","svelte-f3e4uo"),v(s,"class","svelte-f3e4uo")},m(n,a){l(n,s,a),i(s,t),i(t,e),i(e,o),i(o,p),i(p,c),i(e,r),i(e,k),i(k,g),i(g,x),i(e,_),i(e,C),i(C,T),i(T,O),i(e,S),i(e,A),i(A,I),i(I,P),i(e,D),i(e,L),i(L,j),i(j,$),i(e,R),i(e,H),i(H,N),i(N,B),i(e,M),i(e,W),i(W,G),i(G,K),i(K,q),i(W,U),i(W,F),i(F,J),i(J,z)},p:n,i:n,o:n,d(n){n&&u(s)}}}class Q extends Y{constructor(n){super(),z(this,n,null,V,p,{})}}function Z(a){let s,t,e,o,p,c,r,k,d,g,x,C,T,O,S,A,I,P,D,L;return{c(){s=h("div"),t=h("h1"),e=f("Subscribe to my newsletter"),o=m(),p=h("h2"),c=f("Get the latest blog posts and project updates delivered right to your inbox"),r=m(),k=h("form"),d=h("div"),g=h("input"),x=m(),C=h("input"),O=m(),S=h("input"),A=m(),I=h("p"),P=f("Powered by Buttondown."),this.h()},l(n){s=y(n,"DIV",{class:!0});var a=E(s);t=y(a,"H1",{});var i=E(t);e=w(i,"Subscribe to my newsletter"),i.forEach(u),o=b(a),p=y(a,"H2",{class:!0});var l=E(p);c=w(l,"Get the latest blog posts and project updates delivered right to your inbox"),l.forEach(u),r=b(a),k=y(a,"FORM",{action:!0,method:!0,target:!0,onsubmit:!0,class:!0});var h=E(k);d=y(h,"DIV",{class:!0});var f=E(d);g=y(f,"INPUT",{type:!0,name:!0,id:!0,"aria-label":!0,placeholder:!0,class:!0}),x=b(f),C=y(f,"INPUT",{type:!0,value:!0,disabled:!0,class:!0}),f.forEach(u),O=b(h),S=y(h,"INPUT",{type:!0,value:!0,name:!0,class:!0}),A=b(h),I=y(h,"P",{class:!0});var m=E(I);P=w(m,"Powered by Buttondown."),m.forEach(u),h.forEach(u),a.forEach(u),this.h()},h(){v(p,"class","svelte-1k1s1co"),v(g,"type","email"),v(g,"name","email"),v(g,"id","bd-email"),v(g,"aria-label","email address"),v(g,"placeholder","youremail@example.com"),v(g,"class","svelte-1k1s1co"),v(C,"type","submit"),C.value="Subscribe",C.disabled=T=!a[0],v(C,"class","svelte-1k1s1co"),v(d,"class","form-item svelte-1k1s1co"),v(S,"type","hidden"),S.value="1",v(S,"name","embed"),v(S,"class","svelte-1k1s1co"),v(I,"class","svelte-1k1s1co"),v(k,"action","https://buttondown.email/api/emails/embed-subscribe/lihautan"),v(k,"method","post"),v(k,"target","popupwindow"),v(k,"onsubmit","window.open('https://buttondown.email/lihautan', 'popupwindow')"),v(k,"class","embeddable-buttondown-form"),v(s,"class","form svelte-1k1s1co")},m(n,u){var h,f,m,v;l(n,s,u),i(s,t),i(t,e),i(s,o),i(s,p),i(p,c),i(s,r),i(s,k),i(k,d),i(d,g),_(g,a[0]),i(d,x),i(d,C),i(k,O),i(k,S),i(k,A),i(k,I),i(I,P),D||(h=g,f="input",m=a[1],h.addEventListener(f,m,v),L=()=>h.removeEventListener(f,m,v),D=!0)},p(n,[a]){1&a&&g.value!==n[0]&&_(g,n[0]),1&a&&T!==(T=!n[0])&&(C.disabled=T)},i:n,o:n,d(n){n&&u(s),D=!1,L()}}}function X(n,a,s){let t;return[t,function(){t=this.value,s(0,t)}]}class nn extends Y{constructor(n){super(),z(this,n,X,Z,p,{})}}function an(n){return S(()=>(setTimeout(()=>{if(window.innerWidth>1080){const n=document.createElement("script");n.async=!0,n.type="text/javascript",n.src="//cdn.carbonads.com/carbon.js?serve=CE7ITK3E&placement=lihautancom",n.id="_carbonads_js",document.body.appendChild(n)}},5e3),()=>{try{const n=document.getElementById("carbonads");n.parentNode.removeChild(n)}catch(n){}})),[]}class sn extends Y{constructor(n){super(),z(this,n,an,null,p,{})}}var tn="https://lihautan.com/contributing-to-svelte-implement-key-block/assets/hero-twitter-14595226.jpg";function en(n,a,s){const t=n.slice();return t[6]=a[s],t}function on(n,a,s){const t=n.slice();return t[6]=a[s],t}function pn(n){let a,s;return{c(){a=h("meta"),this.h()},l(n){a=y(n,"META",{name:!0,content:!0}),this.h()},h(){v(a,"name","keywords"),v(a,"content",s=n[6])},m(n,s){l(n,a,s)},p(n,t){4&t&&s!==(s=n[6])&&v(a,"content",s)},d(n){n&&u(a)}}}function cn(n){let a,s,t=n[6]+"";return{c(){a=h("span"),s=f(t),this.h()},l(n){a=y(n,"SPAN",{class:!0});var e=E(a);s=w(e,t),e.forEach(u),this.h()},h(){v(a,"class","svelte-9tqnza")},m(n,t){l(n,a,t),i(a,s)},p(n,a){4&a&&t!==(t=n[6]+"")&&x(s,t)},d(n){n&&u(a)}}}function rn(n){let a,s,t,e,o,p,d,_,T,O,S,A,I,P,D,L,j,$,R,H,N,B,M,J,z,Y,V,Z,X,an,rn,ln,un,kn,hn,dn,fn=`<script type="application/ld+json">${JSON.stringify({"@context":"https://schema.org","@type":"Article",author:n[3],copyrightHolder:n[3],copyrightYear:"2020",creator:n[3],publisher:n[3],description:n[1],headline:n[0],name:n[0],inLanguage:"en"})}<\/script>`,mn=`<script type="application/ld+json">${JSON.stringify({"@context":"https://schema.org","@type":"BreadcrumbList",description:"Breadcrumbs list",name:"Breadcrumbs",itemListElement:[{"@type":"ListItem",item:{"@id":"https://lihautan.com",name:"Homepage"},name:"Homepage",position:1},{"@type":"ListItem",item:{"@id":"https%3A%2F%2Flihautan.com%2Fcontributing-to-svelte-implement-key-block",name:n[0]},name:n[0],position:2}]})}<\/script>`;document.title=a=n[0]+" | Tan Li Hau";let gn=n[2],vn=[];for(let a=0;a<gn.length;a+=1)vn[a]=pn(on(n,gn,a));M=new Q({});let En=n[2],yn=[];for(let a=0;a<En.length;a+=1)yn[a]=cn(en(n,En,a));const wn=n[5].default,bn=function(n,a,s,t){if(n){const e=c(n,a,s,t);return n[0](e)}}(wn,n,n[4],null);return un=new nn({}),hn=new sn({}),{c(){s=h("meta"),t=h("meta"),e=h("meta"),o=h("meta"),p=h("meta"),d=h("meta"),_=h("meta"),T=h("meta"),O=h("meta"),S=h("meta"),A=h("meta");for(let n=0;n<vn.length;n+=1)vn[n].c();I=h("meta"),P=h("meta"),L=g(),$=g(),R=m(),H=h("a"),N=f("Skip to content"),B=m(),K(M.$$.fragment),J=m(),z=h("main"),Y=h("h1"),V=f(n[0]),Z=m();for(let n=0;n<yn.length;n+=1)yn[n].c();X=m(),an=h("article"),bn&&bn.c(),rn=m(),ln=h("footer"),K(un.$$.fragment),kn=m(),K(hn.$$.fragment),this.h()},l(a){const c=function(n,a=document.body){return Array.from(a.querySelectorAll(n))}('[data-svelte="svelte-15e3uyc"]',document.head);s=y(c,"META",{name:!0,content:!0}),t=y(c,"META",{name:!0,content:!0}),e=y(c,"META",{name:!0,content:!0}),o=y(c,"META",{name:!0,content:!0}),p=y(c,"META",{name:!0,content:!0}),d=y(c,"META",{name:!0,content:!0}),_=y(c,"META",{name:!0,content:!0}),T=y(c,"META",{name:!0,content:!0}),O=y(c,"META",{name:!0,content:!0}),S=y(c,"META",{name:!0,content:!0}),A=y(c,"META",{name:!0,content:!0});for(let n=0;n<vn.length;n+=1)vn[n].l(c);I=y(c,"META",{itemprop:!0,content:!0}),P=y(c,"META",{itemprop:!0,content:!0}),L=g(),$=g(),c.forEach(u),R=b(a),H=y(a,"A",{href:!0,class:!0});var r=E(H);N=w(r,"Skip to content"),r.forEach(u),B=b(a),q(M.$$.fragment,a),J=b(a),z=y(a,"MAIN",{id:!0,class:!0});var i=E(z);Y=y(i,"H1",{});var l=E(Y);V=w(l,n[0]),l.forEach(u),Z=b(i);for(let n=0;n<yn.length;n+=1)yn[n].l(i);X=b(i),an=y(i,"ARTICLE",{});var k=E(an);bn&&bn.l(k),k.forEach(u),i.forEach(u),rn=b(a),ln=y(a,"FOOTER",{class:!0});var h=E(ln);q(un.$$.fragment,h),kn=b(h),q(hn.$$.fragment,h),h.forEach(u),this.h()},h(){v(s,"name","description"),v(s,"content",n[1]),v(t,"name","image"),v(t,"content",tn),v(e,"name","og:image"),v(e,"content",tn),v(o,"name","og:title"),v(o,"content",n[0]),v(p,"name","og:description"),v(p,"content",n[1]),v(d,"name","og:type"),v(d,"content","website"),v(_,"name","twitter:card"),v(_,"content","summary_large_image"),v(T,"name","twitter:creator"),v(T,"content","@lihautan"),v(O,"name","twitter:title"),v(O,"content",n[0]),v(S,"name","twitter:description"),v(S,"content",n[1]),v(A,"name","twitter:image"),v(A,"content",tn),v(I,"itemprop","url"),v(I,"content","https%3A%2F%2Flihautan.com%2Fcontributing-to-svelte-implement-key-block"),v(P,"itemprop","image"),v(P,"content",tn),D=new C(L),j=new C($),v(H,"href","#content"),v(H,"class","skip svelte-9tqnza"),v(z,"id","content"),v(z,"class","blog svelte-9tqnza"),v(ln,"class","svelte-9tqnza")},m(n,a){i(document.head,s),i(document.head,t),i(document.head,e),i(document.head,o),i(document.head,p),i(document.head,d),i(document.head,_),i(document.head,T),i(document.head,O),i(document.head,S),i(document.head,A);for(let n=0;n<vn.length;n+=1)vn[n].m(document.head,null);i(document.head,I),i(document.head,P),D.m(fn,document.head),i(document.head,L),j.m(mn,document.head),i(document.head,$),l(n,R,a),l(n,H,a),i(H,N),l(n,B,a),U(M,n,a),l(n,J,a),l(n,z,a),i(z,Y),i(Y,V),i(z,Z);for(let n=0;n<yn.length;n+=1)yn[n].m(z,null);i(z,X),i(z,an),bn&&bn.m(an,null),l(n,rn,a),l(n,ln,a),U(un,ln,null),i(ln,kn),U(hn,ln,null),dn=!0},p(n,[t]){if((!dn||1&t)&&a!==(a=n[0]+" | Tan Li Hau")&&(document.title=a),(!dn||2&t)&&v(s,"content",n[1]),(!dn||1&t)&&v(o,"content",n[0]),(!dn||2&t)&&v(p,"content",n[1]),(!dn||1&t)&&v(O,"content",n[0]),(!dn||2&t)&&v(S,"content",n[1]),4&t){let a;for(gn=n[2],a=0;a<gn.length;a+=1){const s=on(n,gn,a);vn[a]?vn[a].p(s,t):(vn[a]=pn(s),vn[a].c(),vn[a].m(I.parentNode,I))}for(;a<vn.length;a+=1)vn[a].d(1);vn.length=gn.length}if((!dn||3&t)&&fn!==(fn=`<script type="application/ld+json">${JSON.stringify({"@context":"https://schema.org","@type":"Article",author:n[3],copyrightHolder:n[3],copyrightYear:"2020",creator:n[3],publisher:n[3],description:n[1],headline:n[0],name:n[0],inLanguage:"en"})}<\/script>`)&&D.p(fn),(!dn||1&t)&&mn!==(mn=`<script type="application/ld+json">${JSON.stringify({"@context":"https://schema.org","@type":"BreadcrumbList",description:"Breadcrumbs list",name:"Breadcrumbs",itemListElement:[{"@type":"ListItem",item:{"@id":"https://lihautan.com",name:"Homepage"},name:"Homepage",position:1},{"@type":"ListItem",item:{"@id":"https%3A%2F%2Flihautan.com%2Fcontributing-to-svelte-implement-key-block",name:n[0]},name:n[0],position:2}]})}<\/script>`)&&j.p(mn),(!dn||1&t)&&x(V,n[0]),4&t){let a;for(En=n[2],a=0;a<En.length;a+=1){const s=en(n,En,a);yn[a]?yn[a].p(s,t):(yn[a]=cn(s),yn[a].c(),yn[a].m(z,X))}for(;a<yn.length;a+=1)yn[a].d(1);yn.length=En.length}bn&&bn.p&&16&t&&r(bn,wn,n,n[4],t,null,null)},i(n){dn||(W(M.$$.fragment,n),W(bn,n),W(un.$$.fragment,n),W(hn.$$.fragment,n),dn=!0)},o(n){G(M.$$.fragment,n),G(bn,n),G(un.$$.fragment,n),G(hn.$$.fragment,n),dn=!1},d(n){u(s),u(t),u(e),u(o),u(p),u(d),u(_),u(T),u(O),u(S),u(A),k(vn,n),u(I),u(P),u(L),n&&D.d(),u($),n&&j.d(),n&&u(R),n&&u(H),n&&u(B),F(M,n),n&&u(J),n&&u(z),k(yn,n),bn&&bn.d(n),n&&u(rn),n&&u(ln),F(un),F(hn)}}}function ln(n,a,s){let{title:t=""}=a,{description:e=""}=a,{tags:o=[]}=a;const p={"@type":"Person",name:"Tan Li Hau"};let{$$slots:c={},$$scope:r}=a;return n.$set=n=>{"title"in n&&s(0,t=n.title),"description"in n&&s(1,e=n.description),"tags"in n&&s(2,o=n.tags),"$$scope"in n&&s(4,r=n.$$scope)},[t,e,o,p,r,c]}class un extends Y{constructor(n){super(),z(this,n,ln,rn,p,{title:0,description:1,tags:2})}}function kn(a){let s,t,e,o,p,c,r,k,d,g,x,_,C,T,O,S,A,I,P,D,L,j,$,R,H,N,B,M,W,G,K,q,U,F,J,z,Y,V,Q,Z,X,nn,an,sn,tn,en,on,pn,cn,rn,ln,un,kn,hn,dn,fn,mn,gn,vn,En,yn,wn,bn,xn,_n,Cn,Tn,On,Sn,An,In,Pn,Dn,Ln,jn,$n,Rn,Hn,Nn,Bn,Mn,Wn,Gn,Kn,qn,Un,Fn,Jn,zn,Yn,Vn,Qn,Zn,Xn,na,aa,sa,ta,ea,oa,pa,ca,ra,ia,la,ua,ka,ha,da,fa,ma,ga,va,Ea,ya,wa,ba,xa,_a,Ca,Ta,Oa,Sa,Aa,Ia,Pa,Da,La,ja,$a,Ra,Ha,Na,Ba,Ma,Wa,Ga,Ka,qa,Ua,Fa,Ja,za,Ya,Va,Qa,Za,Xa,ns,as,ss,ts,es,os,ps,cs,rs,is,ls,us,ks,hs,ds,fs,ms,gs,vs,Es,ys,ws,bs,xs,_s,Cs,Ts,Os,Ss,As,Is,Ps,Ds,Ls,js,$s,Rs,Hs,Ns,Bs,Ms,Ws,Gs,Ks,qs,Us,Fs,Js,zs,Ys,Vs,Qs,Zs,Xs,nt,at,st,tt,et,ot,pt,ct,rt,it,lt,ut,kt,ht,dt,ft,mt,gt,vt,Et,yt,wt,bt,xt,_t,Ct,Tt,Ot,St,At,It,Pt,Dt,Lt,jt,$t,Rt,Ht,Nt,Bt,Mt,Wt,Gt,Kt,qt,Ut,Ft,Jt,zt,Yt,Vt,Qt,Zt,Xt,ne,ae,se,te,ee,oe,pe,ce,re,ie,le,ue,ke,he,de,fe,me,ge,ve,Ee,ye,we,be,xe,_e,Ce,Te,Oe,Se,Ae,Ie,Pe,De,Le,je,$e,Re,He,Ne,Be,Me,We,Ge,Ke,qe,Ue,Fe,Je,ze,Ye,Ve,Qe,Ze,Xe,no,ao,so,to,eo,oo,po,co,ro,io,lo,uo,ko,ho,fo,mo,go,vo,Eo,yo,wo,bo,xo,_o,Co,To,Oo,So,Ao,Io,Po,Do,Lo,jo,$o,Ro,Ho,No,Bo,Mo,Wo,Go,Ko,qo,Uo,Fo,Jo,zo,Yo,Vo,Qo,Zo,Xo,np,ap,sp,tp,ep,op,pp,cp,rp,ip,lp,up,kp,hp,dp,fp,mp,gp,vp,Ep,yp,wp,bp,xp,_p,Cp,Tp,Op,Sp,Ap,Ip,Pp,Dp,Lp,jp,$p,Rp,Hp,Np,Bp,Mp,Wp,Gp,Kp,qp,Up,Fp,Jp,zp,Yp,Vp,Qp,Zp,Xp,nc,ac,sc,tc,ec,oc,pc,cc,rc,ic,lc,uc,kc,hc,dc,fc,mc,gc,vc,Ec,yc,wc,bc,xc,_c,Cc,Tc,Oc,Sc,Ac,Ic,Pc,Dc,Lc,jc,$c,Rc,Hc,Nc,Bc,Mc,Wc,Gc,Kc,qc,Uc,Fc,Jc,zc,Yc,Vc,Qc,Zc,Xc,nr,ar,sr,tr,er,or,pr,cr,rr,ir,lr,ur,kr,hr,dr,fr,mr,gr,vr,Er,yr,wr,br,xr,_r,Cr,Tr,Or,Sr,Ar,Ir,Pr,Dr,Lr,jr,$r,Rr,Hr,Nr,Br,Mr,Wr,Gr,Kr,qr,Ur,Fr,Jr,zr,Yr,Vr,Qr,Zr,Xr,ni,ai,si,ti,ei,oi,pi,ci,ri,ii,li,ui,ki,hi,di,fi,mi,gi,vi,Ei,yi,wi,bi,xi,_i,Ci,Ti,Oi,Si,Ai,Ii,Pi,Di,Li,ji,$i,Ri,Hi,Ni,Bi,Mi,Wi,Gi,Ki,qi,Ui,Fi,Ji,zi,Yi,Vi,Qi,Zi,Xi,nl,al,sl,tl,el,ol,pl,cl,rl,il,ll,ul,kl,hl,dl,fl,ml,gl,vl,El,yl,wl,bl,xl,_l,Cl,Tl,Ol,Sl,Al,Il,Pl,Dl,Ll,jl,$l,Rl,Hl,Nl,Bl,Ml,Wl,Gl,Kl,ql,Ul,Fl,Jl,zl,Yl,Vl,Ql,Zl,Xl,nu,au,su,tu,eu,ou,pu,cu,ru,iu,lu,uu,ku,hu,du,fu,mu,gu,vu,Eu,yu,wu,bu,xu,_u,Cu,Tu,Ou,Su,Au,Iu,Pu,Du,Lu,ju,$u,Ru,Hu,Nu,Bu,Mu,Wu,Gu,Ku,qu,Uu,Fu,Ju,zu,Yu,Vu,Qu,Zu,Xu,nk,ak,sk,tk,ek,ok,pk,ck,rk,ik,lk,uk,kk,hk,dk,fk,mk,gk,vk,Ek,yk,wk,bk,xk,_k,Ck,Tk,Ok,Sk,Ak,Ik,Pk,Dk,Lk,jk,$k,Rk,Hk,Nk,Bk,Mk,Wk,Gk,Kk,qk,Uk,Fk,Jk,zk,Yk,Vk,Qk,Zk,Xk,nh,ah,sh,th,eh,oh,ph,ch,rh,ih,lh,uh,kh,hh,dh,fh,mh,gh,vh,Eh,yh,wh,bh,xh,_h,Ch,Th,Oh,Sh,Ah,Ih,Ph,Dh,Lh,jh,$h,Rh,Hh,Nh,Bh,Mh,Wh,Gh,Kh,qh,Uh,Fh,Jh,zh,Yh,Vh,Qh,Zh,Xh,nd,ad,sd,td,ed,od,pd,cd,rd,id,ld,ud,kd,hd,dd,fd,md,gd,vd,Ed,yd,wd,bd,xd,_d,Cd,Td,Od,Sd,Ad,Id,Pd,Dd,Ld,jd,$d,Rd,Hd,Nd,Bd,Md,Wd,Gd,Kd,qd,Ud,Fd,Jd,zd,Yd,Vd,Qd,Zd,Xd,nf,af,sf,tf,ef,of,pf,cf,rf,lf,uf,kf,hf,df,ff,mf,gf,vf,Ef,yf,wf,bf,xf,_f,Cf,Tf,Of,Sf,Af,If,Pf,Df,Lf,jf,$f,Rf,Hf,Nf,Bf,Mf,Wf,Gf,Kf,qf,Uf,Ff,Jf,zf,Yf,Vf,Qf,Zf,Xf,nm,am,sm,tm,em,om,pm,cm,rm,im,lm,um,km,hm,dm,fm,mm,gm,vm,Em,ym,wm,bm,xm,_m,Cm,Tm,Om,Sm,Am,Im,Pm,Dm,Lm,jm,$m,Rm,Hm,Nm,Bm,Mm,Wm,Gm,Km,qm,Um,Fm,Jm,zm,Ym,Vm,Qm,Zm,Xm,ng,ag,sg,tg,eg,og,pg,cg,rg,ig,lg,ug,kg,hg,dg,fg,mg,gg,vg,Eg,yg,wg,bg,xg,_g,Cg,Tg,Og,Sg,Ag,Ig,Pg,Dg,Lg,jg,$g,Rg,Hg,Ng,Bg,Mg,Wg,Gg,Kg,qg,Ug,Fg,Jg,zg,Yg,Vg,Qg,Zg,Xg,nv,av,sv,tv,ev,ov,pv,cv,rv,iv,lv,uv,kv,hv,dv,fv,mv,gv,vv,Ev,yv,wv,bv,xv,_v,Cv,Tv,Ov,Sv,Av,Iv,Pv,Dv,Lv,jv,$v,Rv,Hv,Nv,Bv,Mv,Wv;return{c(){s=h("section"),t=h("ul"),e=h("li"),o=h("a"),p=f("Background"),c=h("li"),r=h("a"),k=f("The motivation"),d=h("ul"),g=h("li"),x=h("a"),_=f("Transitions for reactive data change"),C=h("li"),T=h("a"),O=f("The implementation"),S=h("ul"),A=h("li"),I=h("a"),P=f("Parsing"),D=h("li"),L=h("a"),j=f("Tracking references and dependencies"),$=h("li"),R=h("a"),H=f("Creating code blocks & fragments"),N=h("li"),B=h("a"),M=f("Creating code for SSR"),W=h("li"),G=h("a"),K=f("Generate code"),q=h("li"),U=h("a"),F=f("A few other implementation consideration"),J=h("li"),z=h("a"),Y=f("The testing"),V=h("li"),Q=h("a"),Z=f("Closing Notes"),X=m(),nn=h("section"),an=h("h2"),sn=h("a"),tn=f("Background"),en=m(),on=h("p"),pn=f("Unlike the other contributing to Svelte posts ["),cn=h("a"),rn=f("1"),ln=f("] ["),un=h("a"),kn=f("2"),hn=f("], which I wrote it while implementing the fix, describing as detailed as possible, today I am going to share the process of how I implemented the "),dn=h("code"),fn=f("{#key}"),mn=f(" block retrospectively."),gn=m(),vn=h("p"),En=f("The implementation of the "),yn=h("code"),wn=f("{#key}"),bn=f(" block is much simpler, relative to "),xn=h("code"),_n=f("{#if}"),Cn=f(", "),Tn=h("code"),On=f("{#await}"),Sn=f(" or "),An=h("code"),In=f("{#each}"),Pn=f(". And I believe the process of implementing the "),Dn=h("code"),Ln=f("{#key}"),jn=f(" block helps paint the pratical side of "),$n=h("a"),Rn=f('"The Svelte Compiler Handbook"'),Hn=f(" or my "),Nn=h("a"),Bn=f('"Looking into the Svelte compiler" talk'),Mn=f("."),Wn=m(),Gn=h("section"),Kn=h("h2"),qn=h("a"),Un=f("The motivation"),Fn=m(),Jn=h("p"),zn=f("The idea of "),Yn=h("code"),Vn=f("{#key}"),Qn=f(" block starts with the feature request 2 years ago "),Zn=h("em"),Xn=f("(yea, it's that long)"),na=f(" for "),aa=h("strong"),sa=f("the ability to key a non-each component"),ta=f(", "),ea=h("a"),oa=f("GitHub issue #1469"),pa=f("."),ca=m(),ra=h("p"),ia=f("To "),la=h("code"),ua=f("key"),ka=f(" a component, is to force recreation of the component when the "),ha=h("code"),da=f("key"),fa=f(" changes."),ma=m(),ga=h("p"),va=f("And you see this ability of destroying and creating new components when using "),Ea=h("code"),ya=f("{#each}"),wa=f(" with "),ba=h("code"),xa=f("key"),_a=f(":"),Ca=m(),Ta=h("pre"),Oa=m(),Sa=h("p"),Aa=h("a"),Ia=f("REPL"),Pa=m(),Da=h("p"),La=f("When we call the function "),ja=h("code"),$a=f("update"),Ra=f(", we removed "),Ha=h("code"),Na=f("alice"),Ba=f(" from the "),Ma=h("code"),Wa=f("data"),Ga=f(" and we added "),Ka=h("code"),qa=f("bob"),Ua=f(". The net effect is still having a list of 1 item. However, instead of reusing the 1 "),Fa=h("code"),Ja=f("<div />"),za=f(" by updating "),Ya=h("code"),Va=f("{ item.name }"),Qa=f(" to "),Za=h("code"),Xa=f('"bob"'),ns=f(", Svelte removes and destroys the "),as=h("code"),ss=f("<div />"),ts=f(" and create a new "),es=h("code"),os=f("<div />"),ps=f(" for "),cs=h("code"),rs=f("bob"),is=f(". This is because of the "),ls=h("a"),us=f("key we specified to the "),ks=h("code"),hs=f("{#each}"),ds=f(" block"),fs=f(". Svelte will not reuse the "),ms=h("code"),gs=f("<div />"),vs=f(" because it was created with a different "),Es=h("code"),ys=f("key"),ws=f("."),bs=m(),xs=h("p"),_s=f("One of the benefits of having a key for "),Cs=h("code"),Ts=f("{#each}"),Os=f(" item is to be able to add transition to the item correctly. Without a "),Ss=h("code"),As=f("key"),Is=f(" to identify which item is added / removed, the transiion on a "),Ps=h("code"),Ds=f("{#each}"),Ls=f(" list will always applied to the last item, when the list grows or shrinks in length."),js=m(),$s=h("p"),Rs=h("a"),Hs=f("Try with and without the "),Ns=h("code"),Bs=f("key"),Ms=f(" in this REPL"),Ws=f(" to see the importance of having a "),Gs=h("code"),Ks=f("key"),qs=f("."),Us=m(),Fs=h("blockquote"),Js=h("p"),zs=f("This is similar to the "),Ys=h("code"),Vs=f("key"),Qs=f(" attribute of React, if you are familiar with React. "),Zs=h("a"),Xs=f("Check this out on how to remount a component with the "),nt=h("code"),at=f("key"),st=f(" attribute in React"),tt=f("."),et=m(),ot=h("p"),pt=f("However, the ability of having to "),ct=h("code"),rt=f("key"),it=f(" an element / component only exist for the "),lt=h("code"),ut=f("{#each}"),kt=f(" block. To workaround the constraint, it's common to use the "),ht=h("strong"),dt=f('"1-item keyed-each hack"'),ft=f(":"),mt=m(),gt=h("pre"),vt=m(),Et=h("p"),yt=f("The "),wt=h("code"),bt=f("<div />"),xt=f(" will be recreated if the "),_t=h("code"),Ct=f("key"),Tt=f(" has changed."),Ot=m(),St=h("section"),At=h("h3"),It=h("a"),Pt=f("Transitions for reactive data change"),Dt=m(),Lt=h("p"),jt=f("Another commonly brought up request, to "),$t=h("strong"),Rt=f("be able to apply "),Ht=h("code"),Nt=f("transition:"),Bt=f(" to an element when a reactive data changes"),Mt=f(" ("),Wt=h("a"),Gt=f("GitHub issue #5119"),Kt=f("):"),qt=m(),Ut=h("pre"),Ft=m(),Jt=h("p"),zt=f("This is another facet of the same issue."),Yt=m(),Vt=h("p"),Qt=f("We need an ability to transition the old element out, and transition a new element in when a data, or a "),Zt=h("code"),Xt=f("key"),ne=f(" changes."),ae=m(),se=h("p"),te=f("A workaround, again, is to use the "),ee=h("strong"),oe=f('"1-item keyed-each hack"'),pe=f(":"),ce=m(),re=h("pre"),ie=m(),le=h("p"),ue=f("So the proposal of the feature request was to have a "),ke=h("code"),he=f("{#key}"),de=f(" block:"),fe=m(),me=h("pre"),ge=m(),ve=h("p"),Ee=f("I've seen this issue months ago, and I passed the issue. I didn't think I know good enough to implement a new logic block. However, the issue recently resurfaced as someone commented on it recently. And this time, I felt I am ready, so here's my journey of implementing the "),ye=h("code"),we=f("{#key}"),be=f(" block."),xe=m(),_e=h("section"),Ce=h("h2"),Te=h("a"),Oe=f("The implementation"),Se=m(),Ae=h("p"),Ie=f("As explained in "),Pe=h("a"),De=f('"The Svelte Compiler Handbook"'),Le=f(", the Svelte compilation process can be broken into steps:"),je=m(),$e=h("ul"),Re=h("li"),He=f("Parsing"),Ne=m(),Be=h("li"),Me=f("Tracking references and dependencies"),We=m(),Ge=h("li"),Ke=f("Creating code blocks & fragments"),qe=m(),Ue=h("li"),Fe=f("Generate code"),Je=m(),ze=h("p"),Ye=f("Of course, that's the steps that we are going to work on as well."),Ve=m(),Qe=h("section"),Ze=h("h3"),Xe=h("a"),no=f("Parsing"),ao=m(),so=h("p"),to=f("The actual parsing starts "),eo=h("a"),oo=f("here in src/compiler/parse/index.ts"),po=f(":"),co=m(),ro=h("pre"),io=m(),lo=h("p"),uo=f("There are 4 states in the parser:"),ko=m(),ho=h("ul"),fo=h("li"),mo=h("strong"),go=f("fragment"),vo=f(" - in this state, we check the current character and determine which state we should proceed to"),Eo=m(),yo=h("li"),wo=h("strong"),bo=f("tag"),xo=f(" - we enter this state when we encounter "),_o=h("code"),Co=f("<"),To=f(" character. In this state, we are going to parse HTML tags (eg: "),Oo=h("code"),So=f("<p>"),Ao=f("), attributes (eg: "),Io=h("code"),Po=f("class"),Do=f(") and directives (eg: "),Lo=h("code"),jo=f("on:"),$o=f(")."),Ro=m(),Ho=h("li"),No=h("strong"),Bo=f("mustache"),Mo=f(" - we enter this state when we encounter "),Wo=h("code"),Go=f("{"),Ko=f(" character. In this state, we are going to parse expression, "),qo=h("code"),Uo=f("{ value }"),Fo=f(" and logic blocks "),Jo=h("code"),zo=f("{#if}"),Yo=m(),Vo=h("li"),Qo=h("strong"),Zo=f("text"),Xo=f(" - In this state, we are going to parse texts that are neither "),np=h("code"),ap=f("<"),sp=f(" nor "),tp=h("code"),ep=f("{"),op=f(", which includes whitespace, newlines, and texts!"),pp=m(),cp=h("p"),rp=f("To be able to parse the "),ip=h("code"),lp=f("{#key}"),up=f(" block, we are going to take a look at the "),kp=h("a"),hp=h("strong"),dp=f("mustache"),fp=f(" state function"),mp=f("."),gp=m(),vp=h("p"),Ep=f("The "),yp=h("code"),wp=f("{#key}"),bp=f(" block syntax is similar to "),xp=h("code"),_p=f("{#if}"),Cp=f(" without "),Tp=h("code"),Op=f("else"),Sp=f(", we take in an expression in the opening block and that's all:"),Ap=m(),Ip=h("pre"),Pp=m(),Dp=h("p"),Lp=f("So over here, when we encounter a "),jp=h("code"),$p=f("{#"),Rp=f(", we add a case to check if we are starting a "),Hp=h("code"),Np=f("{#key}"),Bp=f(" block:"),Mp=m(),Wp=h("pre"),Gp=m(),Kp=h("p"),qp=f("Similarly, for closing block "),Up=h("code"),Fp=f("{/"),Jp=f(", we are going to make sure that "),zp=h("code"),Yp=f("{#key}"),Vp=f(" closes with "),Qp=h("code"),Zp=f("{/key}"),Xp=f(":"),nc=m(),ac=h("pre"),sc=m(),tc=h("p"),ec=f("The next step is to read the JS expression. Since all logic blocks, "),oc=h("code"),pc=f("{#if}"),cc=f(", "),rc=h("code"),ic=f("{#each}"),lc=f(" and "),uc=h("code"),kc=f("{#await}"),hc=f(" will read the JS expression next, it is no different for "),dc=h("code"),fc=f("{#key}"),mc=f(" and it is already taken care of:"),gc=m(),vc=h("pre"),Ec=m(),yc=h("p"),wc=f("So, let's move on to the next step!"),bc=m(),xc=h("section"),_c=h("h3"),Cc=h("a"),Tc=f("Tracking references and dependencies"),Oc=m(),Sc=h("p"),Ac=f("If you noticed in the previous step, the type name we created for "),Ic=h("code"),Pc=f("{#key}"),Dc=f(" block is called "),Lc=h("code"),jc=f("KeyBlock"),$c=f("."),Rc=m(),Hc=h("p"),Nc=f("So, to keep the name consistent, we are going to create a "),Bc=h("code"),Mc=f("KeyBlock"),Wc=f(" class in "),Gc=h("code"),Kc=f("src/compiler/compile/nodes/KeyBlock.ts"),qc=f(":"),Uc=m(),Fc=h("pre"),Jc=m(),zc=h("p"),Yc=f("I've added comments annotating the code above, hopefully it's self-explanatory."),Vc=m(),Qc=h("p"),Zc=f("A few more points:"),Xc=m(),nr=h("ul"),ar=h("li"),sr=h("code"),tr=f("info"),er=f(" is the AST node we got from the parsing."),or=m(),pr=h("li"),cr=f("the "),rr=h("code"),ir=f("class Expression"),lr=f(" is constructed with the JavaScript AST of the expression and it is where we traverse the AST and marked the variables within the expression as "),ur=h("code"),kr=f("referenced: true"),hr=f("."),dr=m(),fr=h("li"),mr=h("code"),gr=f("map_children"),vr=f(" is used to map the "),Er=h("code"),yr=f("children"),wr=f(" of the "),br=h("code"),xr=f("KeyBlock"),_r=f(" AST node to the compile node."),Cr=m(),Tr=h("blockquote"),Or=h("p"),Sr=f('Pardon for my lack of "appropriate" naming to differentiate the nodes in the Svelte codebase.'),Ar=m(),Ir=h("p"),Pr=f("Throughout the Svelte compilation process, the node is transformed one to another, which in every step of the transformation, new analysis is performed, and new information are added."),Dr=m(),Lr=h("p"),jr=f("Here, I am going to call:"),$r=m(),Rr=h("ul"),Hr=h("li"),Nr=f("the node resulting from the parser: "),Br=h("strong"),Mr=f("AST node"),Wr=m(),Gr=h("li"),Kr=f("the node created by the "),qr=h("code"),Ur=f("Component"),Fr=f(", which extends from "),Jr=h("a"),zr=h("code"),Yr=f("compiler/compile/nodes/shared/Node.ts"),Vr=f(": "),Qr=h("strong"),Zr=f("compile node"),Xr=m(),ni=h("em"),ai=f("(because they are stored in the "),si=h("code"),ti=f("compile"),ei=f(" folder)"),oi=m(),pi=h("li"),ci=f("the node created by the "),ri=h("code"),ii=f("Renderer"),li=f(", which extends from "),ui=h("a"),ki=h("code"),hi=f("compiler/compile/render_dom/wrappers/shared/Wrapper.ts"),di=f(": "),fi=h("strong"),mi=f("render-dom Wrapper"),gi=m(),vi=h("em"),Ei=f("(also because they are stored in the "),yi=h("code"),wi=f("render_dom/wrappers"),bi=f(" folder)"),xi=m(),_i=h("p"),Ci=f("If you managed to keep up so far, you may be sensing where we are heading next."),Ti=m(),Oi=h("p"),Si=f("We need to add "),Ai=h("code"),Ii=f("KeyBlock"),Pi=f(" into "),Di=h("code"),Li=f("map_children"),ji=f(":"),$i=m(),Ri=h("pre"),Hi=m(),Ni=h("p"),Bi=f("Also, we need to add "),Mi=h("code"),Wi=f("KeyBlock"),Gi=f(" as one of the "),Ki=h("code"),qi=f("INode"),Ui=f(" type for TypeScript:"),Fi=m(),Ji=h("pre"),zi=m(),Yi=h("p"),Vi=f("And now, let's move on to implementing a "),Qi=h("strong"),Zi=f("render-dom Wrapper"),Xi=f(" for "),nl=h("code"),al=f("KeyBlock"),sl=f("."),tl=m(),el=h("section"),ol=h("h3"),pl=h("a"),cl=f("Creating code blocks & fragments"),rl=m(),il=h("p"),ll=f("At this point, we need to decide how the compiled JS should look like, it's time for us to "),ul=h("strong"),kl=f("reverse-compile Svelte in your head"),hl=f("!"),dl=m(),fl=h("p"),ml=f("If you've read my "),gl=h("a"),vl=f("Compile Svelte in your head (Part 4)"),El=f(", you've seen how we create a different "),yl=h("code"),wl=f("create_fragment"),bl=f(" function for each of the logic branches, so we can control the content within a logic branch as a whole."),xl=m(),_l=h("p"),Cl=f("Similarly, we can create a "),Tl=h("code"),Ol=f("create_fragment"),Sl=f(" function for the content of the "),Al=h("code"),Il=f("{#key}"),Pl=f(", then we can control when to create / mount / update / destroy the content."),Dl=m(),Ll=h("pre"),jl=m(),$l=h("p"),Rl=f("To use the "),Hl=h("code"),Nl=f("create_key_block"),Bl=f(":"),Ml=m(),Wl=h("pre"),Gl=m(),Kl=h("p"),ql=f("The next thing to do, is to place these statements in the right position:"),Ul=m(),Fl=h("pre"),Jl=m(),zl=h("p"),Yl=f("Now, the most important piece of the "),Vl=h("code"),Ql=f("{#key}"),Zl=f(" block, the logic to"),Xl=m(),nu=h("ul"),au=h("li"),su=f("check if the expression has changed"),tu=m(),eu=h("li"),ou=f("if so, recreate the elements inside the "),pu=h("code"),cu=f("{#key}"),ru=f(" block"),iu=m(),lu=h("pre"),uu=m(),ku=h("p"),hu=f("If there is transition in the content of the "),du=h("code"),fu=f("key_block"),mu=f(", we need extra code for the transition:"),gu=m(),vu=h("pre"),Eu=m(),yu=h("p"),wu=f("I am going to gloss over the details of how "),bu=h("code"),xu=f("outros"),_u=f(" / "),Cu=h("code"),Tu=f("intros"),Ou=f(' work, we will cover them in the later parts of "Compile Svelte in your head", so let\'s assume these code are up for the job.'),Su=m(),Au=h("p"),Iu=f("Now we have done the reverse-compile Svelte in your head, let's reverse the reverse, and write the render code for Svelte "),Pu=h("code"),Du=f("{#key}"),Lu=f(" block."),ju=m(),$u=h("p"),Ru=f("Here are some setup code for the render-dom Wrapper for "),Hu=h("code"),Nu=f("{#key}"),Bu=f(":"),Mu=m(),Wu=h("pre"),Gu=m(),Ku=h("p"),qu=f("A few more points:"),Uu=m(),Fu=h("ul"),Ju=h("li"),zu=f("the "),Yu=h("code"),Vu=f("block"),Qu=f(" in the "),Zu=h("code"),Xu=f("render"),nk=f(" method is the current "),ak=h("code"),sk=f("create_fragment"),tk=f(" function that the "),ek=h("code"),ok=f("{#key}"),pk=f(" block is in; "),ck=h("code"),rk=f("this.block"),ik=f(" is the new "),lk=h("code"),uk=f("create_fragment"),kk=f(" function that we created to put the content of the "),hk=h("code"),dk=f("{#key}"),fk=f(" block"),mk=h("ul"),gk=h("li"),vk=f("we named the new "),Ek=h("code"),yk=f("create_fragment"),wk=f(" function "),bk=h("code"),xk=f('"create_key_block"'),_k=m(),Ck=h("li"),Tk=f("to make sure there's no conflicting names, we use "),Ok=h("code"),Sk=f("renderer.component.get_unique_name()"),Ak=m(),Ik=h("li"),Pk=f("All "),Dk=h("strong"),Lk=f("render-dom wrappers"),jk=f(" has a property named "),$k=h("code"),Rk=f("var"),Hk=f(", which is the variable name referencing the element / block to be created by the "),Nk=h("strong"),Bk=f("render-dom wrapper"),Mk=f("."),Wk=h("ul"),Gk=h("li"),Kk=f("the "),qk=h("code"),Uk=f("var"),Fk=f(" name will be "),Jk=h("a"),zk=f("deconflicted by the Renderer"),Yk=m(),Vk=h("p"),Qk=f("Now, let's implement the "),Zk=h("code"),Xk=f("render"),nh=f(" method."),ah=m(),sh=h("p"),th=f("Firstly, render the children into "),eh=h("code"),oh=f("this.block"),ph=f(":"),ch=m(),rh=h("pre"),ih=m(),lh=h("p"),uh=f("We pass in "),kh=h("code"),hh=f("null"),dh=f(" as "),fh=h("code"),mh=f("parent_node"),gh=f(" and "),vh=h("code"),Eh=f("x`#nodes`"),yh=f(" as "),wh=h("code"),bh=f("parent_nodes"),xh=f(" to indicate that the children will be rendered at the root of the "),_h=h("code"),Ch=f("this.block"),Th=f("."),Oh=m(),Sh=h("hr"),Ah=m(),Ih=h("p"),Ph=f("If I am implementing the "),Dh=h("code"),Lh=f("render"),jh=f(" method of an Element render-dom Wrapper, and currently rendering the "),$h=h("code"),Rh=f("<div>"),Hh=f(" in the following code snippet:"),Nh=m(),Bh=h("pre"),Mh=m(),Wh=h("p"),Gh=f("then I will render the "),Kh=h("code"),qh=f("<span />"),Uh=f(" with:"),Fh=m(),Jh=h("pre"),zh=m(),Yh=h("p"),Vh=f("so the "),Qh=h("code"),Zh=f("<span />"),Xh=f(" will be inserted into the current "),nd=h("code"),ad=f("<div />"),sd=f(" and hydrate from the "),td=h("code"),ed=f("<div />");od=f("'s childNodes."),pd=m(),cd=h("hr"),rd=m(),id=h("p"),ld=f("Next, I am going to insert code into each of the fragment methods:"),ud=m(),kd=h("pre"),hd=m(),dd=h("p"),fd=f("A few more points:"),md=m(),gd=h("ul"),vd=h("li"),Ed=f("we push the code into respective methods of the "),yd=h("code"),wd=f("block"),bd=f(", eg: "),xd=h("code"),_d=f("init"),Cd=f(", "),Td=h("code"),Od=f("create"),Sd=f(", "),Ad=h("code"),Id=f("mount"),Pd=f(", ..."),Dd=m(),Ld=h("li"),jd=f("we use "),$d=h("a"),Rd=f("tagged templates"),Hd=f(", "),Nd=h("code"),Bd=f("b`...`"),Md=f(" to create a JavaScript AST node. The "),Wd=h("code"),Gd=f("b"),Kd=f(" tag function allow us to pass in JavaScript AST node as placeholder, so that is very convenient."),qd=h("ul"),Ud=h("li"),Fd=f("You can check out more about the "),Jd=h("code"),zd=f("b"),Yd=f(" tag function from "),Vd=h("a"),Qd=f("code-red"),Zd=m(),Xd=h("p"),nf=f("Now, to implement the dirty checking, we use "),af=h("code"),sf=f("this.dependencies"),tf=m(),ef=h("pre"),of=m(),pf=h("p"),cf=f("To determine whether our expression value has changed, we are going to compute the expression and compare it with "),rf=h("code"),lf=f("previous_key"),uf=f(" and determine whether it has changed."),kf=m(),hf=h("p"),df=f("Here's a recap of the compiled code that we've come up previously:"),ff=m(),mf=h("pre"),gf=m(),vf=h("p"),Ef=f("We start with declaring the variable, "),yf=h("code"),wf=f("previous_key"),bf=f(":"),xf=m(),_f=h("pre"),Cf=m(),Tf=h("p"),Of=h("code"),Sf=f("expression.manipulate(block)"),Af=f(" will convert the expression to refer to the "),If=h("code"),Pf=f("ctx"),Df=f(" variable, for example:"),Lf=m(),jf=h("pre"),$f=m(),Rf=h("p"),Hf=f("Next we are going to compare the new value and assign it to "),Nf=h("code"),Bf=f("previous_key"),Mf=f(" after that."),Wf=m(),Gf=h("pre"),Kf=m(),qf=h("p"),Uf=f("And to combine all of these, we have:"),Ff=m(),Jf=h("pre"),zf=m(),Yf=h("p"),Vf=f("We are using the "),Qf=h("code"),Zf=f("anchor"),Xf=f(" when we are mounting the new "),nm=h("code"),am=f("key_block"),sm=f(", you can check out "),tm=h("a"),em=f("Compile Svelte in your head Part 4: the extra text node"),om=f(", explaining why we need the anchor node, and here is how the anchor node being computed:"),pm=m(),cm=h("pre"),rm=m(),im=h("p"),lm=f("It could be the next sibling, or it could be a new "),um=h("code"),km=f("empty()"),hm=f(" text node created."),dm=m(),fm=h("p"),mm=f("Finally, if the content has transition, we need to add code for the transition as well:"),gm=m(),vm=h("pre"),Em=m(),ym=h("p"),wm=f("Where to place them? Well, I'll leave that as your exercise to figure that out. 😉"),bm=m(),xm=h("section"),_m=h("h3"),Cm=h("a"),Tm=f("Creating code for SSR"),Om=m(),Sm=h("p"),Am=f("For SSR, it is much simpler than for the "),Im=h("code"),Pm=f("dom"),Dm=f(". "),Lm=h("code"),jm=f("{#key}"),$m=f(" block has no special meaning in SSR, because, you will only render once in SSR:"),Rm=m(),Hm=h("pre"),Nm=m(),Bm=h("p"),Mm=f("☝️ That's all the code we need for SSR. We are rendering the children, passing down the "),Wm=h("code"),Gm=f("options"),Km=f(", and add no extra code for the "),qm=h("code"),Um=f("{#key}"),Fm=f(" block."),Jm=m(),zm=h("section"),Ym=h("h3"),Vm=h("a"),Qm=f("Generate code"),Zm=m(),Xm=h("p"),ng=f("Well, everything in this step is set up generic enough to handle most use case."),ag=m(),sg=h("p"),tg=f("So, nothing to change here. 🤷‍♂️"),eg=m(),og=h("section"),pg=h("h3"),cg=h("a"),rg=f("A few other implementation consideration"),ig=m(),lg=h("ul"),ug=h("li"),kg=f("What if the expression in the "),hg=h("code"),dg=f("{#key}"),fg=f(" block is not dynamic, do we give warnings? or optimise the output?"),mg=m(),gg=h("li"),vg=f("How will "),Eg=h("a"),yg=h("code"),wg=f("<svelte:options immutable={true}>"),bg=f(" affect the code output?"),xg=m(),_g=h("section"),Cg=h("h2"),Tg=h("a"),Og=f("The testing"),Sg=m(),Ag=h("p"),Ig=f('You\'ve seen me implementing test cases in the previous "Contributing to Svelte" articles ['),Pg=h("a"),Dg=f("1"),Lg=f("] ["),jg=h("a"),$g=f("2"),Rg=f("], here I am going to skip showing the implementation of the test cases, and probably point out some thoughts I had when coming up with tests:"),Hg=m(),Ng=h("ol"),Bg=h("li"),Mg=h("p"),Wg=h("strong"),Gg=f("Happy path:"),Kg=f(" changing the key expression should recreate the content"),qg=m(),Ug=h("li"),Fg=h("p"),Jg=h("strong"),zg=f("Happy path:"),Yg=f(" Transition when recreating the content should work ✨"),Vg=m(),Qg=h("li"),Zg=h("p"),Xg=h("strong"),nv=f("Possible edge case:"),av=f(" Changing variables other than the key expression should "),sv=h("strong"),tv=f("not"),ev=f(" recreate the content in "),ov=h("code"),pv=f("{#key}"),cv=m(),rv=h("pre"),iv=m(),lv=h("li"),uv=h("p"),kv=h("strong"),hv=f("Possible edge case:"),dv=f(" Changing the variables within the key expression but the result value of the key expression stay the same"),fv=m(),mv=h("pre"),gv=m(),vv=h("section"),Ev=h("h2"),yv=h("a"),wv=f("Closing Notes"),bv=m(),xv=h("p"),_v=f("You can read the "),Cv=h("a"),Tv=f("Pull Request #5397"),Ov=f(" to read the final implementation."),Sv=m(),Av=h("hr"),Iv=m(),Pv=h("p"),Dv=f("If you wish to learn more about Svelte, "),Lv=h("a"),jv=f("follow me on Twitter"),$v=f("."),Rv=m(),Hv=h("p"),Nv=f("If you have anything unclear about this article, find me on "),Bv=h("a"),Mv=f("Twitter"),Wv=f(" too!"),this.h()},l(n){s=y(n,"SECTION",{});var a=E(s);t=y(a,"UL",{class:!0,id:!0,role:!0,"aria-label":!0});var i=E(t);e=y(i,"LI",{});var l=E(e);o=y(l,"A",{href:!0});var h=E(o);p=w(h,"Background"),h.forEach(u),l.forEach(u),c=y(i,"LI",{});var f=E(c);r=y(f,"A",{href:!0});var m=E(r);k=w(m,"The motivation"),m.forEach(u),f.forEach(u),d=y(i,"UL",{});var v=E(d);g=y(v,"LI",{});var Gv=E(g);x=y(Gv,"A",{href:!0});var Kv=E(x);_=w(Kv,"Transitions for reactive data change"),Kv.forEach(u),Gv.forEach(u),v.forEach(u),C=y(i,"LI",{});var qv=E(C);T=y(qv,"A",{href:!0});var Uv=E(T);O=w(Uv,"The implementation"),Uv.forEach(u),qv.forEach(u),S=y(i,"UL",{});var Fv=E(S);A=y(Fv,"LI",{});var Jv=E(A);I=y(Jv,"A",{href:!0});var zv=E(I);P=w(zv,"Parsing"),zv.forEach(u),Jv.forEach(u),D=y(Fv,"LI",{});var Yv=E(D);L=y(Yv,"A",{href:!0});var Vv=E(L);j=w(Vv,"Tracking references and dependencies"),Vv.forEach(u),Yv.forEach(u),$=y(Fv,"LI",{});var Qv=E($);R=y(Qv,"A",{href:!0});var Zv=E(R);H=w(Zv,"Creating code blocks & fragments"),Zv.forEach(u),Qv.forEach(u),N=y(Fv,"LI",{});var Xv=E(N);B=y(Xv,"A",{href:!0});var nE=E(B);M=w(nE,"Creating code for SSR"),nE.forEach(u),Xv.forEach(u),W=y(Fv,"LI",{});var aE=E(W);G=y(aE,"A",{href:!0});var sE=E(G);K=w(sE,"Generate code"),sE.forEach(u),aE.forEach(u),q=y(Fv,"LI",{});var tE=E(q);U=y(tE,"A",{href:!0});var eE=E(U);F=w(eE,"A few other implementation consideration"),eE.forEach(u),tE.forEach(u),Fv.forEach(u),J=y(i,"LI",{});var oE=E(J);z=y(oE,"A",{href:!0});var pE=E(z);Y=w(pE,"The testing"),pE.forEach(u),oE.forEach(u),V=y(i,"LI",{});var cE=E(V);Q=y(cE,"A",{href:!0});var rE=E(Q);Z=w(rE,"Closing Notes"),rE.forEach(u),cE.forEach(u),i.forEach(u),a.forEach(u),X=b(n),nn=y(n,"SECTION",{});var iE=E(nn);an=y(iE,"H2",{});var lE=E(an);sn=y(lE,"A",{href:!0,id:!0});var uE=E(sn);tn=w(uE,"Background"),uE.forEach(u),lE.forEach(u),en=b(iE),on=y(iE,"P",{});var kE=E(on);pn=w(kE,"Unlike the other contributing to Svelte posts ["),cn=y(kE,"A",{href:!0});var hE=E(cn);rn=w(hE,"1"),hE.forEach(u),ln=w(kE,"] ["),un=y(kE,"A",{href:!0});var dE=E(un);kn=w(dE,"2"),dE.forEach(u),hn=w(kE,"], which I wrote it while implementing the fix, describing as detailed as possible, today I am going to share the process of how I implemented the "),dn=y(kE,"CODE",{});var fE=E(dn);fn=w(fE,"{#key}"),fE.forEach(u),mn=w(kE," block retrospectively."),kE.forEach(u),gn=b(iE),vn=y(iE,"P",{});var mE=E(vn);En=w(mE,"The implementation of the "),yn=y(mE,"CODE",{});var gE=E(yn);wn=w(gE,"{#key}"),gE.forEach(u),bn=w(mE," block is much simpler, relative to "),xn=y(mE,"CODE",{});var vE=E(xn);_n=w(vE,"{#if}"),vE.forEach(u),Cn=w(mE,", "),Tn=y(mE,"CODE",{});var EE=E(Tn);On=w(EE,"{#await}"),EE.forEach(u),Sn=w(mE," or "),An=y(mE,"CODE",{});var yE=E(An);In=w(yE,"{#each}"),yE.forEach(u),Pn=w(mE,". And I believe the process of implementing the "),Dn=y(mE,"CODE",{});var wE=E(Dn);Ln=w(wE,"{#key}"),wE.forEach(u),jn=w(mE," block helps paint the pratical side of "),$n=y(mE,"A",{href:!0});var bE=E($n);Rn=w(bE,'"The Svelte Compiler Handbook"'),bE.forEach(u),Hn=w(mE," or my "),Nn=y(mE,"A",{href:!0});var xE=E(Nn);Bn=w(xE,'"Looking into the Svelte compiler" talk'),xE.forEach(u),Mn=w(mE,"."),mE.forEach(u),iE.forEach(u),Wn=b(n),Gn=y(n,"SECTION",{});var _E=E(Gn);Kn=y(_E,"H2",{});var CE=E(Kn);qn=y(CE,"A",{href:!0,id:!0});var TE=E(qn);Un=w(TE,"The motivation"),TE.forEach(u),CE.forEach(u),Fn=b(_E),Jn=y(_E,"P",{});var OE=E(Jn);zn=w(OE,"The idea of "),Yn=y(OE,"CODE",{});var SE=E(Yn);Vn=w(SE,"{#key}"),SE.forEach(u),Qn=w(OE," block starts with the feature request 2 years ago "),Zn=y(OE,"EM",{});var AE=E(Zn);Xn=w(AE,"(yea, it's that long)"),AE.forEach(u),na=w(OE," for "),aa=y(OE,"STRONG",{});var IE=E(aa);sa=w(IE,"the ability to key a non-each component"),IE.forEach(u),ta=w(OE,", "),ea=y(OE,"A",{href:!0,rel:!0});var PE=E(ea);oa=w(PE,"GitHub issue #1469"),PE.forEach(u),pa=w(OE,"."),OE.forEach(u),ca=b(_E),ra=y(_E,"P",{});var DE=E(ra);ia=w(DE,"To "),la=y(DE,"CODE",{});var LE=E(la);ua=w(LE,"key"),LE.forEach(u),ka=w(DE," a component, is to force recreation of the component when the "),ha=y(DE,"CODE",{});var jE=E(ha);da=w(jE,"key"),jE.forEach(u),fa=w(DE," changes."),DE.forEach(u),ma=b(_E),ga=y(_E,"P",{});var $E=E(ga);va=w($E,"And you see this ability of destroying and creating new components when using "),Ea=y($E,"CODE",{});var RE=E(Ea);ya=w(RE,"{#each}"),RE.forEach(u),wa=w($E," with "),ba=y($E,"CODE",{});var HE=E(ba);xa=w(HE,"key"),HE.forEach(u),_a=w($E,":"),$E.forEach(u),Ca=b(_E),Ta=y(_E,"PRE",{class:!0}),E(Ta).forEach(u),Oa=b(_E),Sa=y(_E,"P",{});var NE=E(Sa);Aa=y(NE,"A",{href:!0,rel:!0});var BE=E(Aa);Ia=w(BE,"REPL"),BE.forEach(u),NE.forEach(u),Pa=b(_E),Da=y(_E,"P",{});var ME=E(Da);La=w(ME,"When we call the function "),ja=y(ME,"CODE",{});var WE=E(ja);$a=w(WE,"update"),WE.forEach(u),Ra=w(ME,", we removed "),Ha=y(ME,"CODE",{});var GE=E(Ha);Na=w(GE,"alice"),GE.forEach(u),Ba=w(ME," from the "),Ma=y(ME,"CODE",{});var KE=E(Ma);Wa=w(KE,"data"),KE.forEach(u),Ga=w(ME," and we added "),Ka=y(ME,"CODE",{});var qE=E(Ka);qa=w(qE,"bob"),qE.forEach(u),Ua=w(ME,". The net effect is still having a list of 1 item. However, instead of reusing the 1 "),Fa=y(ME,"CODE",{});var UE=E(Fa);Ja=w(UE,"<div />"),UE.forEach(u),za=w(ME," by updating "),Ya=y(ME,"CODE",{});var FE=E(Ya);Va=w(FE,"{ item.name }"),FE.forEach(u),Qa=w(ME," to "),Za=y(ME,"CODE",{});var JE=E(Za);Xa=w(JE,'"bob"'),JE.forEach(u),ns=w(ME,", Svelte removes and destroys the "),as=y(ME,"CODE",{});var zE=E(as);ss=w(zE,"<div />"),zE.forEach(u),ts=w(ME," and create a new "),es=y(ME,"CODE",{});var YE=E(es);os=w(YE,"<div />"),YE.forEach(u),ps=w(ME," for "),cs=y(ME,"CODE",{});var VE=E(cs);rs=w(VE,"bob"),VE.forEach(u),is=w(ME,". This is because of the "),ls=y(ME,"A",{href:!0,rel:!0});var QE=E(ls);us=w(QE,"key we specified to the "),ks=y(QE,"CODE",{});var ZE=E(ks);hs=w(ZE,"{#each}"),ZE.forEach(u),ds=w(QE," block"),QE.forEach(u),fs=w(ME,". Svelte will not reuse the "),ms=y(ME,"CODE",{});var XE=E(ms);gs=w(XE,"<div />"),XE.forEach(u),vs=w(ME," because it was created with a different "),Es=y(ME,"CODE",{});var ny=E(Es);ys=w(ny,"key"),ny.forEach(u),ws=w(ME,"."),ME.forEach(u),bs=b(_E),xs=y(_E,"P",{});var ay=E(xs);_s=w(ay,"One of the benefits of having a key for "),Cs=y(ay,"CODE",{});var sy=E(Cs);Ts=w(sy,"{#each}"),sy.forEach(u),Os=w(ay," item is to be able to add transition to the item correctly. Without a "),Ss=y(ay,"CODE",{});var ty=E(Ss);As=w(ty,"key"),ty.forEach(u),Is=w(ay," to identify which item is added / removed, the transiion on a "),Ps=y(ay,"CODE",{});var ey=E(Ps);Ds=w(ey,"{#each}"),ey.forEach(u),Ls=w(ay," list will always applied to the last item, when the list grows or shrinks in length."),ay.forEach(u),js=b(_E),$s=y(_E,"P",{});var oy=E($s);Rs=y(oy,"A",{href:!0,rel:!0});var py=E(Rs);Hs=w(py,"Try with and without the "),Ns=y(py,"CODE",{});var cy=E(Ns);Bs=w(cy,"key"),cy.forEach(u),Ms=w(py," in this REPL"),py.forEach(u),Ws=w(oy," to see the importance of having a "),Gs=y(oy,"CODE",{});var ry=E(Gs);Ks=w(ry,"key"),ry.forEach(u),qs=w(oy,"."),oy.forEach(u),Us=b(_E),Fs=y(_E,"BLOCKQUOTE",{});var iy=E(Fs);Js=y(iy,"P",{});var ly=E(Js);zs=w(ly,"This is similar to the "),Ys=y(ly,"CODE",{});var uy=E(Ys);Vs=w(uy,"key"),uy.forEach(u),Qs=w(ly," attribute of React, if you are familiar with React. "),Zs=y(ly,"A",{href:!0,rel:!0});var ky=E(Zs);Xs=w(ky,"Check this out on how to remount a component with the "),nt=y(ky,"CODE",{});var hy=E(nt);at=w(hy,"key"),hy.forEach(u),st=w(ky," attribute in React"),ky.forEach(u),tt=w(ly,"."),ly.forEach(u),iy.forEach(u),et=b(_E),ot=y(_E,"P",{});var dy=E(ot);pt=w(dy,"However, the ability of having to "),ct=y(dy,"CODE",{});var fy=E(ct);rt=w(fy,"key"),fy.forEach(u),it=w(dy," an element / component only exist for the "),lt=y(dy,"CODE",{});var my=E(lt);ut=w(my,"{#each}"),my.forEach(u),kt=w(dy," block. To workaround the constraint, it's common to use the "),ht=y(dy,"STRONG",{});var gy=E(ht);dt=w(gy,'"1-item keyed-each hack"'),gy.forEach(u),ft=w(dy,":"),dy.forEach(u),mt=b(_E),gt=y(_E,"PRE",{class:!0}),E(gt).forEach(u),vt=b(_E),Et=y(_E,"P",{});var vy=E(Et);yt=w(vy,"The "),wt=y(vy,"CODE",{});var Ey=E(wt);bt=w(Ey,"<div />"),Ey.forEach(u),xt=w(vy," will be recreated if the "),_t=y(vy,"CODE",{});var yy=E(_t);Ct=w(yy,"key"),yy.forEach(u),Tt=w(vy," has changed."),vy.forEach(u),_E.forEach(u),Ot=b(n),St=y(n,"SECTION",{});var wy=E(St);At=y(wy,"H3",{});var by=E(At);It=y(by,"A",{href:!0,id:!0});var xy=E(It);Pt=w(xy,"Transitions for reactive data change"),xy.forEach(u),by.forEach(u),Dt=b(wy),Lt=y(wy,"P",{});var _y=E(Lt);jt=w(_y,"Another commonly brought up request, to "),$t=y(_y,"STRONG",{});var Cy=E($t);Rt=w(Cy,"be able to apply "),Ht=y(Cy,"CODE",{});var Ty=E(Ht);Nt=w(Ty,"transition:"),Ty.forEach(u),Bt=w(Cy," to an element when a reactive data changes"),Cy.forEach(u),Mt=w(_y," ("),Wt=y(_y,"A",{href:!0,rel:!0});var Oy=E(Wt);Gt=w(Oy,"GitHub issue #5119"),Oy.forEach(u),Kt=w(_y,"):"),_y.forEach(u),qt=b(wy),Ut=y(wy,"PRE",{class:!0}),E(Ut).forEach(u),Ft=b(wy),Jt=y(wy,"P",{});var Sy=E(Jt);zt=w(Sy,"This is another facet of the same issue."),Sy.forEach(u),Yt=b(wy),Vt=y(wy,"P",{});var Ay=E(Vt);Qt=w(Ay,"We need an ability to transition the old element out, and transition a new element in when a data, or a "),Zt=y(Ay,"CODE",{});var Iy=E(Zt);Xt=w(Iy,"key"),Iy.forEach(u),ne=w(Ay," changes."),Ay.forEach(u),ae=b(wy),se=y(wy,"P",{});var Py=E(se);te=w(Py,"A workaround, again, is to use the "),ee=y(Py,"STRONG",{});var Dy=E(ee);oe=w(Dy,'"1-item keyed-each hack"'),Dy.forEach(u),pe=w(Py,":"),Py.forEach(u),ce=b(wy),re=y(wy,"PRE",{class:!0}),E(re).forEach(u),ie=b(wy),le=y(wy,"P",{});var Ly=E(le);ue=w(Ly,"So the proposal of the feature request was to have a "),ke=y(Ly,"CODE",{});var jy=E(ke);he=w(jy,"{#key}"),jy.forEach(u),de=w(Ly," block:"),Ly.forEach(u),fe=b(wy),me=y(wy,"PRE",{class:!0}),E(me).forEach(u),ge=b(wy),ve=y(wy,"P",{});var $y=E(ve);Ee=w($y,"I've seen this issue months ago, and I passed the issue. I didn't think I know good enough to implement a new logic block. However, the issue recently resurfaced as someone commented on it recently. And this time, I felt I am ready, so here's my journey of implementing the "),ye=y($y,"CODE",{});var Ry=E(ye);we=w(Ry,"{#key}"),Ry.forEach(u),be=w($y," block."),$y.forEach(u),wy.forEach(u),xe=b(n),_e=y(n,"SECTION",{});var Hy=E(_e);Ce=y(Hy,"H2",{});var Ny=E(Ce);Te=y(Ny,"A",{href:!0,id:!0});var By=E(Te);Oe=w(By,"The implementation"),By.forEach(u),Ny.forEach(u),Se=b(Hy),Ae=y(Hy,"P",{});var My=E(Ae);Ie=w(My,"As explained in "),Pe=y(My,"A",{href:!0});var Wy=E(Pe);De=w(Wy,'"The Svelte Compiler Handbook"'),Wy.forEach(u),Le=w(My,", the Svelte compilation process can be broken into steps:"),My.forEach(u),je=b(Hy),$e=y(Hy,"UL",{});var Gy=E($e);Re=y(Gy,"LI",{});var Ky=E(Re);He=w(Ky,"Parsing"),Ky.forEach(u),Ne=b(Gy),Be=y(Gy,"LI",{});var qy=E(Be);Me=w(qy,"Tracking references and dependencies"),qy.forEach(u),We=b(Gy),Ge=y(Gy,"LI",{});var Uy=E(Ge);Ke=w(Uy,"Creating code blocks & fragments"),Uy.forEach(u),qe=b(Gy),Ue=y(Gy,"LI",{});var Fy=E(Ue);Fe=w(Fy,"Generate code"),Fy.forEach(u),Gy.forEach(u),Je=b(Hy),ze=y(Hy,"P",{});var Jy=E(ze);Ye=w(Jy,"Of course, that's the steps that we are going to work on as well."),Jy.forEach(u),Hy.forEach(u),Ve=b(n),Qe=y(n,"SECTION",{});var zy=E(Qe);Ze=y(zy,"H3",{});var Yy=E(Ze);Xe=y(Yy,"A",{href:!0,id:!0});var Vy=E(Xe);no=w(Vy,"Parsing"),Vy.forEach(u),Yy.forEach(u),ao=b(zy),so=y(zy,"P",{});var Qy=E(so);to=w(Qy,"The actual parsing starts "),eo=y(Qy,"A",{href:!0,rel:!0});var Zy=E(eo);oo=w(Zy,"here in src/compiler/parse/index.ts"),Zy.forEach(u),po=w(Qy,":"),Qy.forEach(u),co=b(zy),ro=y(zy,"PRE",{class:!0}),E(ro).forEach(u),io=b(zy),lo=y(zy,"P",{});var Xy=E(lo);uo=w(Xy,"There are 4 states in the parser:"),Xy.forEach(u),ko=b(zy),ho=y(zy,"UL",{});var nw=E(ho);fo=y(nw,"LI",{});var aw=E(fo);mo=y(aw,"STRONG",{});var sw=E(mo);go=w(sw,"fragment"),sw.forEach(u),vo=w(aw," - in this state, we check the current character and determine which state we should proceed to"),aw.forEach(u),Eo=b(nw),yo=y(nw,"LI",{});var tw=E(yo);wo=y(tw,"STRONG",{});var ew=E(wo);bo=w(ew,"tag"),ew.forEach(u),xo=w(tw," - we enter this state when we encounter "),_o=y(tw,"CODE",{});var ow=E(_o);Co=w(ow,"<"),ow.forEach(u),To=w(tw," character. In this state, we are going to parse HTML tags (eg: "),Oo=y(tw,"CODE",{});var pw=E(Oo);So=w(pw,"<p>"),pw.forEach(u),Ao=w(tw,"), attributes (eg: "),Io=y(tw,"CODE",{});var cw=E(Io);Po=w(cw,"class"),cw.forEach(u),Do=w(tw,") and directives (eg: "),Lo=y(tw,"CODE",{});var rw=E(Lo);jo=w(rw,"on:"),rw.forEach(u),$o=w(tw,")."),tw.forEach(u),Ro=b(nw),Ho=y(nw,"LI",{});var iw=E(Ho);No=y(iw,"STRONG",{});var lw=E(No);Bo=w(lw,"mustache"),lw.forEach(u),Mo=w(iw," - we enter this state when we encounter "),Wo=y(iw,"CODE",{});var uw=E(Wo);Go=w(uw,"{"),uw.forEach(u),Ko=w(iw," character. In this state, we are going to parse expression, "),qo=y(iw,"CODE",{});var kw=E(qo);Uo=w(kw,"{ value }"),kw.forEach(u),Fo=w(iw," and logic blocks "),Jo=y(iw,"CODE",{});var hw=E(Jo);zo=w(hw,"{#if}"),hw.forEach(u),iw.forEach(u),Yo=b(nw),Vo=y(nw,"LI",{});var dw=E(Vo);Qo=y(dw,"STRONG",{});var fw=E(Qo);Zo=w(fw,"text"),fw.forEach(u),Xo=w(dw," - In this state, we are going to parse texts that are neither "),np=y(dw,"CODE",{});var mw=E(np);ap=w(mw,"<"),mw.forEach(u),sp=w(dw," nor "),tp=y(dw,"CODE",{});var gw=E(tp);ep=w(gw,"{"),gw.forEach(u),op=w(dw,", which includes whitespace, newlines, and texts!"),dw.forEach(u),nw.forEach(u),pp=b(zy),cp=y(zy,"P",{});var vw=E(cp);rp=w(vw,"To be able to parse the "),ip=y(vw,"CODE",{});var Ew=E(ip);lp=w(Ew,"{#key}"),Ew.forEach(u),up=w(vw," block, we are going to take a look at the "),kp=y(vw,"A",{href:!0,rel:!0});var yw=E(kp);hp=y(yw,"STRONG",{});var ww=E(hp);dp=w(ww,"mustache"),ww.forEach(u),fp=w(yw," state function"),yw.forEach(u),mp=w(vw,"."),vw.forEach(u),gp=b(zy),vp=y(zy,"P",{});var bw=E(vp);Ep=w(bw,"The "),yp=y(bw,"CODE",{});var xw=E(yp);wp=w(xw,"{#key}"),xw.forEach(u),bp=w(bw," block syntax is similar to "),xp=y(bw,"CODE",{});var _w=E(xp);_p=w(_w,"{#if}"),_w.forEach(u),Cp=w(bw," without "),Tp=y(bw,"CODE",{});var Cw=E(Tp);Op=w(Cw,"else"),Cw.forEach(u),Sp=w(bw,", we take in an expression in the opening block and that's all:"),bw.forEach(u),Ap=b(zy),Ip=y(zy,"PRE",{class:!0}),E(Ip).forEach(u),Pp=b(zy),Dp=y(zy,"P",{});var Tw=E(Dp);Lp=w(Tw,"So over here, when we encounter a "),jp=y(Tw,"CODE",{});var Ow=E(jp);$p=w(Ow,"{#"),Ow.forEach(u),Rp=w(Tw,", we add a case to check if we are starting a "),Hp=y(Tw,"CODE",{});var Sw=E(Hp);Np=w(Sw,"{#key}"),Sw.forEach(u),Bp=w(Tw," block:"),Tw.forEach(u),Mp=b(zy),Wp=y(zy,"PRE",{class:!0}),E(Wp).forEach(u),Gp=b(zy),Kp=y(zy,"P",{});var Aw=E(Kp);qp=w(Aw,"Similarly, for closing block "),Up=y(Aw,"CODE",{});var Iw=E(Up);Fp=w(Iw,"{/"),Iw.forEach(u),Jp=w(Aw,", we are going to make sure that "),zp=y(Aw,"CODE",{});var Pw=E(zp);Yp=w(Pw,"{#key}"),Pw.forEach(u),Vp=w(Aw," closes with "),Qp=y(Aw,"CODE",{});var Dw=E(Qp);Zp=w(Dw,"{/key}"),Dw.forEach(u),Xp=w(Aw,":"),Aw.forEach(u),nc=b(zy),ac=y(zy,"PRE",{class:!0}),E(ac).forEach(u),sc=b(zy),tc=y(zy,"P",{});var Lw=E(tc);ec=w(Lw,"The next step is to read the JS expression. Since all logic blocks, "),oc=y(Lw,"CODE",{});var jw=E(oc);pc=w(jw,"{#if}"),jw.forEach(u),cc=w(Lw,", "),rc=y(Lw,"CODE",{});var $w=E(rc);ic=w($w,"{#each}"),$w.forEach(u),lc=w(Lw," and "),uc=y(Lw,"CODE",{});var Rw=E(uc);kc=w(Rw,"{#await}"),Rw.forEach(u),hc=w(Lw," will read the JS expression next, it is no different for "),dc=y(Lw,"CODE",{});var Hw=E(dc);fc=w(Hw,"{#key}"),Hw.forEach(u),mc=w(Lw," and it is already taken care of:"),Lw.forEach(u),gc=b(zy),vc=y(zy,"PRE",{class:!0}),E(vc).forEach(u),Ec=b(zy),yc=y(zy,"P",{});var Nw=E(yc);wc=w(Nw,"So, let's move on to the next step!"),Nw.forEach(u),zy.forEach(u),bc=b(n),xc=y(n,"SECTION",{});var Bw=E(xc);_c=y(Bw,"H3",{});var Mw=E(_c);Cc=y(Mw,"A",{href:!0,id:!0});var Ww=E(Cc);Tc=w(Ww,"Tracking references and dependencies"),Ww.forEach(u),Mw.forEach(u),Oc=b(Bw),Sc=y(Bw,"P",{});var Gw=E(Sc);Ac=w(Gw,"If you noticed in the previous step, the type name we created for "),Ic=y(Gw,"CODE",{});var Kw=E(Ic);Pc=w(Kw,"{#key}"),Kw.forEach(u),Dc=w(Gw," block is called "),Lc=y(Gw,"CODE",{});var qw=E(Lc);jc=w(qw,"KeyBlock"),qw.forEach(u),$c=w(Gw,"."),Gw.forEach(u),Rc=b(Bw),Hc=y(Bw,"P",{});var Uw=E(Hc);Nc=w(Uw,"So, to keep the name consistent, we are going to create a "),Bc=y(Uw,"CODE",{});var Fw=E(Bc);Mc=w(Fw,"KeyBlock"),Fw.forEach(u),Wc=w(Uw," class in "),Gc=y(Uw,"CODE",{});var Jw=E(Gc);Kc=w(Jw,"src/compiler/compile/nodes/KeyBlock.ts"),Jw.forEach(u),qc=w(Uw,":"),Uw.forEach(u),Uc=b(Bw),Fc=y(Bw,"PRE",{class:!0}),E(Fc).forEach(u),Jc=b(Bw),zc=y(Bw,"P",{});var zw=E(zc);Yc=w(zw,"I've added comments annotating the code above, hopefully it's self-explanatory."),zw.forEach(u),Vc=b(Bw),Qc=y(Bw,"P",{});var Yw=E(Qc);Zc=w(Yw,"A few more points:"),Yw.forEach(u),Xc=b(Bw),nr=y(Bw,"UL",{});var Vw=E(nr);ar=y(Vw,"LI",{});var Qw=E(ar);sr=y(Qw,"CODE",{});var Zw=E(sr);tr=w(Zw,"info"),Zw.forEach(u),er=w(Qw," is the AST node we got from the parsing."),Qw.forEach(u),or=b(Vw),pr=y(Vw,"LI",{});var Xw=E(pr);cr=w(Xw,"the "),rr=y(Xw,"CODE",{});var nb=E(rr);ir=w(nb,"class Expression"),nb.forEach(u),lr=w(Xw," is constructed with the JavaScript AST of the expression and it is where we traverse the AST and marked the variables within the expression as "),ur=y(Xw,"CODE",{});var ab=E(ur);kr=w(ab,"referenced: true"),ab.forEach(u),hr=w(Xw,"."),Xw.forEach(u),dr=b(Vw),fr=y(Vw,"LI",{});var sb=E(fr);mr=y(sb,"CODE",{});var tb=E(mr);gr=w(tb,"map_children"),tb.forEach(u),vr=w(sb," is used to map the "),Er=y(sb,"CODE",{});var eb=E(Er);yr=w(eb,"children"),eb.forEach(u),wr=w(sb," of the "),br=y(sb,"CODE",{});var ob=E(br);xr=w(ob,"KeyBlock"),ob.forEach(u),_r=w(sb," AST node to the compile node."),sb.forEach(u),Vw.forEach(u),Cr=b(Bw),Tr=y(Bw,"BLOCKQUOTE",{});var pb=E(Tr);Or=y(pb,"P",{});var cb=E(Or);Sr=w(cb,'Pardon for my lack of "appropriate" naming to differentiate the nodes in the Svelte codebase.'),cb.forEach(u),Ar=b(pb),Ir=y(pb,"P",{});var rb=E(Ir);Pr=w(rb,"Throughout the Svelte compilation process, the node is transformed one to another, which in every step of the transformation, new analysis is performed, and new information are added."),rb.forEach(u),Dr=b(pb),Lr=y(pb,"P",{});var ib=E(Lr);jr=w(ib,"Here, I am going to call:"),ib.forEach(u),$r=b(pb),Rr=y(pb,"UL",{});var lb=E(Rr);Hr=y(lb,"LI",{});var ub=E(Hr);Nr=w(ub,"the node resulting from the parser: "),Br=y(ub,"STRONG",{});var kb=E(Br);Mr=w(kb,"AST node"),kb.forEach(u),ub.forEach(u),Wr=b(lb),Gr=y(lb,"LI",{});var hb=E(Gr);Kr=w(hb,"the node created by the "),qr=y(hb,"CODE",{});var db=E(qr);Ur=w(db,"Component"),db.forEach(u),Fr=w(hb,", which extends from "),Jr=y(hb,"A",{href:!0,rel:!0});var fb=E(Jr);zr=y(fb,"CODE",{});var mb=E(zr);Yr=w(mb,"compiler/compile/nodes/shared/Node.ts"),mb.forEach(u),fb.forEach(u),Vr=w(hb,": "),Qr=y(hb,"STRONG",{});var gb=E(Qr);Zr=w(gb,"compile node"),gb.forEach(u),Xr=b(hb),ni=y(hb,"EM",{});var vb=E(ni);ai=w(vb,"(because they are stored in the "),si=y(vb,"CODE",{});var Eb=E(si);ti=w(Eb,"compile"),Eb.forEach(u),ei=w(vb," folder)"),vb.forEach(u),hb.forEach(u),oi=b(lb),pi=y(lb,"LI",{});var yb=E(pi);ci=w(yb,"the node created by the "),ri=y(yb,"CODE",{});var wb=E(ri);ii=w(wb,"Renderer"),wb.forEach(u),li=w(yb,", which extends from "),ui=y(yb,"A",{href:!0,rel:!0});var bb=E(ui);ki=y(bb,"CODE",{});var xb=E(ki);hi=w(xb,"compiler/compile/render_dom/wrappers/shared/Wrapper.ts"),xb.forEach(u),bb.forEach(u),di=w(yb,": "),fi=y(yb,"STRONG",{});var _b=E(fi);mi=w(_b,"render-dom Wrapper"),_b.forEach(u),gi=b(yb),vi=y(yb,"EM",{});var Cb=E(vi);Ei=w(Cb,"(also because they are stored in the "),yi=y(Cb,"CODE",{});var Tb=E(yi);wi=w(Tb,"render_dom/wrappers"),Tb.forEach(u),bi=w(Cb," folder)"),Cb.forEach(u),yb.forEach(u),lb.forEach(u),pb.forEach(u),xi=b(Bw),_i=y(Bw,"P",{});var Ob=E(_i);Ci=w(Ob,"If you managed to keep up so far, you may be sensing where we are heading next."),Ob.forEach(u),Ti=b(Bw),Oi=y(Bw,"P",{});var Sb=E(Oi);Si=w(Sb,"We need to add "),Ai=y(Sb,"CODE",{});var Ab=E(Ai);Ii=w(Ab,"KeyBlock"),Ab.forEach(u),Pi=w(Sb," into "),Di=y(Sb,"CODE",{});var Ib=E(Di);Li=w(Ib,"map_children"),Ib.forEach(u),ji=w(Sb,":"),Sb.forEach(u),$i=b(Bw),Ri=y(Bw,"PRE",{class:!0}),E(Ri).forEach(u),Hi=b(Bw),Ni=y(Bw,"P",{});var Pb=E(Ni);Bi=w(Pb,"Also, we need to add "),Mi=y(Pb,"CODE",{});var Db=E(Mi);Wi=w(Db,"KeyBlock"),Db.forEach(u),Gi=w(Pb," as one of the "),Ki=y(Pb,"CODE",{});var Lb=E(Ki);qi=w(Lb,"INode"),Lb.forEach(u),Ui=w(Pb," type for TypeScript:"),Pb.forEach(u),Fi=b(Bw),Ji=y(Bw,"PRE",{class:!0}),E(Ji).forEach(u),zi=b(Bw),Yi=y(Bw,"P",{});var jb=E(Yi);Vi=w(jb,"And now, let's move on to implementing a "),Qi=y(jb,"STRONG",{});var $b=E(Qi);Zi=w($b,"render-dom Wrapper"),$b.forEach(u),Xi=w(jb," for "),nl=y(jb,"CODE",{});var Rb=E(nl);al=w(Rb,"KeyBlock"),Rb.forEach(u),sl=w(jb,"."),jb.forEach(u),Bw.forEach(u),tl=b(n),el=y(n,"SECTION",{});var Hb=E(el);ol=y(Hb,"H3",{});var Nb=E(ol);pl=y(Nb,"A",{href:!0,id:!0});var Bb=E(pl);cl=w(Bb,"Creating code blocks & fragments"),Bb.forEach(u),Nb.forEach(u),rl=b(Hb),il=y(Hb,"P",{});var Mb=E(il);ll=w(Mb,"At this point, we need to decide how the compiled JS should look like, it's time for us to "),ul=y(Mb,"STRONG",{});var Wb=E(ul);kl=w(Wb,"reverse-compile Svelte in your head"),Wb.forEach(u),hl=w(Mb,"!"),Mb.forEach(u),dl=b(Hb),fl=y(Hb,"P",{});var Gb=E(fl);ml=w(Gb,"If you've read my "),gl=y(Gb,"A",{href:!0});var Kb=E(gl);vl=w(Kb,"Compile Svelte in your head (Part 4)"),Kb.forEach(u),El=w(Gb,", you've seen how we create a different "),yl=y(Gb,"CODE",{});var qb=E(yl);wl=w(qb,"create_fragment"),qb.forEach(u),bl=w(Gb," function for each of the logic branches, so we can control the content within a logic branch as a whole."),Gb.forEach(u),xl=b(Hb),_l=y(Hb,"P",{});var Ub=E(_l);Cl=w(Ub,"Similarly, we can create a "),Tl=y(Ub,"CODE",{});var Fb=E(Tl);Ol=w(Fb,"create_fragment"),Fb.forEach(u),Sl=w(Ub," function for the content of the "),Al=y(Ub,"CODE",{});var Jb=E(Al);Il=w(Jb,"{#key}"),Jb.forEach(u),Pl=w(Ub,", then we can control when to create / mount / update / destroy the content."),Ub.forEach(u),Dl=b(Hb),Ll=y(Hb,"PRE",{class:!0}),E(Ll).forEach(u),jl=b(Hb),$l=y(Hb,"P",{});var zb=E($l);Rl=w(zb,"To use the "),Hl=y(zb,"CODE",{});var Yb=E(Hl);Nl=w(Yb,"create_key_block"),Yb.forEach(u),Bl=w(zb,":"),zb.forEach(u),Ml=b(Hb),Wl=y(Hb,"PRE",{class:!0}),E(Wl).forEach(u),Gl=b(Hb),Kl=y(Hb,"P",{});var Vb=E(Kl);ql=w(Vb,"The next thing to do, is to place these statements in the right position:"),Vb.forEach(u),Ul=b(Hb),Fl=y(Hb,"PRE",{class:!0}),E(Fl).forEach(u),Jl=b(Hb),zl=y(Hb,"P",{});var Qb=E(zl);Yl=w(Qb,"Now, the most important piece of the "),Vl=y(Qb,"CODE",{});var Zb=E(Vl);Ql=w(Zb,"{#key}"),Zb.forEach(u),Zl=w(Qb," block, the logic to"),Qb.forEach(u),Xl=b(Hb),nu=y(Hb,"UL",{});var Xb=E(nu);au=y(Xb,"LI",{});var nx=E(au);su=w(nx,"check if the expression has changed"),nx.forEach(u),tu=b(Xb),eu=y(Xb,"LI",{});var ax=E(eu);ou=w(ax,"if so, recreate the elements inside the "),pu=y(ax,"CODE",{});var sx=E(pu);cu=w(sx,"{#key}"),sx.forEach(u),ru=w(ax," block"),ax.forEach(u),Xb.forEach(u),iu=b(Hb),lu=y(Hb,"PRE",{class:!0}),E(lu).forEach(u),uu=b(Hb),ku=y(Hb,"P",{});var tx=E(ku);hu=w(tx,"If there is transition in the content of the "),du=y(tx,"CODE",{});var ex=E(du);fu=w(ex,"key_block"),ex.forEach(u),mu=w(tx,", we need extra code for the transition:"),tx.forEach(u),gu=b(Hb),vu=y(Hb,"PRE",{class:!0}),E(vu).forEach(u),Eu=b(Hb),yu=y(Hb,"P",{});var ox=E(yu);wu=w(ox,"I am going to gloss over the details of how "),bu=y(ox,"CODE",{});var px=E(bu);xu=w(px,"outros"),px.forEach(u),_u=w(ox," / "),Cu=y(ox,"CODE",{});var cx=E(Cu);Tu=w(cx,"intros"),cx.forEach(u),Ou=w(ox,' work, we will cover them in the later parts of "Compile Svelte in your head", so let\'s assume these code are up for the job.'),ox.forEach(u),Su=b(Hb),Au=y(Hb,"P",{});var rx=E(Au);Iu=w(rx,"Now we have done the reverse-compile Svelte in your head, let's reverse the reverse, and write the render code for Svelte "),Pu=y(rx,"CODE",{});var ix=E(Pu);Du=w(ix,"{#key}"),ix.forEach(u),Lu=w(rx," block."),rx.forEach(u),ju=b(Hb),$u=y(Hb,"P",{});var lx=E($u);Ru=w(lx,"Here are some setup code for the render-dom Wrapper for "),Hu=y(lx,"CODE",{});var ux=E(Hu);Nu=w(ux,"{#key}"),ux.forEach(u),Bu=w(lx,":"),lx.forEach(u),Mu=b(Hb),Wu=y(Hb,"PRE",{class:!0}),E(Wu).forEach(u),Gu=b(Hb),Ku=y(Hb,"P",{});var kx=E(Ku);qu=w(kx,"A few more points:"),kx.forEach(u),Uu=b(Hb),Fu=y(Hb,"UL",{});var hx=E(Fu);Ju=y(hx,"LI",{});var dx=E(Ju);zu=w(dx,"the "),Yu=y(dx,"CODE",{});var fx=E(Yu);Vu=w(fx,"block"),fx.forEach(u),Qu=w(dx," in the "),Zu=y(dx,"CODE",{});var mx=E(Zu);Xu=w(mx,"render"),mx.forEach(u),nk=w(dx," method is the current "),ak=y(dx,"CODE",{});var gx=E(ak);sk=w(gx,"create_fragment"),gx.forEach(u),tk=w(dx," function that the "),ek=y(dx,"CODE",{});var vx=E(ek);ok=w(vx,"{#key}"),vx.forEach(u),pk=w(dx," block is in; "),ck=y(dx,"CODE",{});var Ex=E(ck);rk=w(Ex,"this.block"),Ex.forEach(u),ik=w(dx," is the new "),lk=y(dx,"CODE",{});var yx=E(lk);uk=w(yx,"create_fragment"),yx.forEach(u),kk=w(dx," function that we created to put the content of the "),hk=y(dx,"CODE",{});var wx=E(hk);dk=w(wx,"{#key}"),wx.forEach(u),fk=w(dx," block"),mk=y(dx,"UL",{});var bx=E(mk);gk=y(bx,"LI",{});var xx=E(gk);vk=w(xx,"we named the new "),Ek=y(xx,"CODE",{});var _x=E(Ek);yk=w(_x,"create_fragment"),_x.forEach(u),wk=w(xx," function "),bk=y(xx,"CODE",{});var Cx=E(bk);xk=w(Cx,'"create_key_block"'),Cx.forEach(u),xx.forEach(u),_k=b(bx),Ck=y(bx,"LI",{});var Tx=E(Ck);Tk=w(Tx,"to make sure there's no conflicting names, we use "),Ok=y(Tx,"CODE",{});var Ox=E(Ok);Sk=w(Ox,"renderer.component.get_unique_name()"),Ox.forEach(u),Tx.forEach(u),bx.forEach(u),dx.forEach(u),Ak=b(hx),Ik=y(hx,"LI",{});var Sx=E(Ik);Pk=w(Sx,"All "),Dk=y(Sx,"STRONG",{});var Ax=E(Dk);Lk=w(Ax,"render-dom wrappers"),Ax.forEach(u),jk=w(Sx," has a property named "),$k=y(Sx,"CODE",{});var Ix=E($k);Rk=w(Ix,"var"),Ix.forEach(u),Hk=w(Sx,", which is the variable name referencing the element / block to be created by the "),Nk=y(Sx,"STRONG",{});var Px=E(Nk);Bk=w(Px,"render-dom wrapper"),Px.forEach(u),Mk=w(Sx,"."),Wk=y(Sx,"UL",{});var Dx=E(Wk);Gk=y(Dx,"LI",{});var Lx=E(Gk);Kk=w(Lx,"the "),qk=y(Lx,"CODE",{});var jx=E(qk);Uk=w(jx,"var"),jx.forEach(u),Fk=w(Lx," name will be "),Jk=y(Lx,"A",{href:!0,rel:!0});var $x=E(Jk);zk=w($x,"deconflicted by the Renderer"),$x.forEach(u),Lx.forEach(u),Dx.forEach(u),Sx.forEach(u),hx.forEach(u),Yk=b(Hb),Vk=y(Hb,"P",{});var Rx=E(Vk);Qk=w(Rx,"Now, let's implement the "),Zk=y(Rx,"CODE",{});var Hx=E(Zk);Xk=w(Hx,"render"),Hx.forEach(u),nh=w(Rx," method."),Rx.forEach(u),ah=b(Hb),sh=y(Hb,"P",{});var Nx=E(sh);th=w(Nx,"Firstly, render the children into "),eh=y(Nx,"CODE",{});var Bx=E(eh);oh=w(Bx,"this.block"),Bx.forEach(u),ph=w(Nx,":"),Nx.forEach(u),ch=b(Hb),rh=y(Hb,"PRE",{class:!0}),E(rh).forEach(u),ih=b(Hb),lh=y(Hb,"P",{});var Mx=E(lh);uh=w(Mx,"We pass in "),kh=y(Mx,"CODE",{});var Wx=E(kh);hh=w(Wx,"null"),Wx.forEach(u),dh=w(Mx," as "),fh=y(Mx,"CODE",{});var Gx=E(fh);mh=w(Gx,"parent_node"),Gx.forEach(u),gh=w(Mx," and "),vh=y(Mx,"CODE",{});var Kx=E(vh);Eh=w(Kx,"x`#nodes`"),Kx.forEach(u),yh=w(Mx," as "),wh=y(Mx,"CODE",{});var qx=E(wh);bh=w(qx,"parent_nodes"),qx.forEach(u),xh=w(Mx," to indicate that the children will be rendered at the root of the "),_h=y(Mx,"CODE",{});var Ux=E(_h);Ch=w(Ux,"this.block"),Ux.forEach(u),Th=w(Mx,"."),Mx.forEach(u),Oh=b(Hb),Sh=y(Hb,"HR",{}),Ah=b(Hb),Ih=y(Hb,"P",{});var Fx=E(Ih);Ph=w(Fx,"If I am implementing the "),Dh=y(Fx,"CODE",{});var Jx=E(Dh);Lh=w(Jx,"render"),Jx.forEach(u),jh=w(Fx," method of an Element render-dom Wrapper, and currently rendering the "),$h=y(Fx,"CODE",{});var zx=E($h);Rh=w(zx,"<div>"),zx.forEach(u),Hh=w(Fx," in the following code snippet:"),Fx.forEach(u),Nh=b(Hb),Bh=y(Hb,"PRE",{class:!0}),E(Bh).forEach(u),Mh=b(Hb),Wh=y(Hb,"P",{});var Yx=E(Wh);Gh=w(Yx,"then I will render the "),Kh=y(Yx,"CODE",{});var Vx=E(Kh);qh=w(Vx,"<span />"),Vx.forEach(u),Uh=w(Yx," with:"),Yx.forEach(u),Fh=b(Hb),Jh=y(Hb,"PRE",{class:!0}),E(Jh).forEach(u),zh=b(Hb),Yh=y(Hb,"P",{});var Qx=E(Yh);Vh=w(Qx,"so the "),Qh=y(Qx,"CODE",{});var Zx=E(Qh);Zh=w(Zx,"<span />"),Zx.forEach(u),Xh=w(Qx," will be inserted into the current "),nd=y(Qx,"CODE",{});var Xx=E(nd);ad=w(Xx,"<div />"),Xx.forEach(u),sd=w(Qx," and hydrate from the "),td=y(Qx,"CODE",{});var n_=E(td);ed=w(n_,"<div />"),n_.forEach(u),od=w(Qx,"'s childNodes."),Qx.forEach(u),pd=b(Hb),cd=y(Hb,"HR",{}),rd=b(Hb),id=y(Hb,"P",{});var a_=E(id);ld=w(a_,"Next, I am going to insert code into each of the fragment methods:"),a_.forEach(u),ud=b(Hb),kd=y(Hb,"PRE",{class:!0}),E(kd).forEach(u),hd=b(Hb),dd=y(Hb,"P",{});var s_=E(dd);fd=w(s_,"A few more points:"),s_.forEach(u),md=b(Hb),gd=y(Hb,"UL",{});var t_=E(gd);vd=y(t_,"LI",{});var e_=E(vd);Ed=w(e_,"we push the code into respective methods of the "),yd=y(e_,"CODE",{});var o_=E(yd);wd=w(o_,"block"),o_.forEach(u),bd=w(e_,", eg: "),xd=y(e_,"CODE",{});var p_=E(xd);_d=w(p_,"init"),p_.forEach(u),Cd=w(e_,", "),Td=y(e_,"CODE",{});var c_=E(Td);Od=w(c_,"create"),c_.forEach(u),Sd=w(e_,", "),Ad=y(e_,"CODE",{});var r_=E(Ad);Id=w(r_,"mount"),r_.forEach(u),Pd=w(e_,", ..."),e_.forEach(u),Dd=b(t_),Ld=y(t_,"LI",{});var i_=E(Ld);jd=w(i_,"we use "),$d=y(i_,"A",{href:!0,rel:!0});var l_=E($d);Rd=w(l_,"tagged templates"),l_.forEach(u),Hd=w(i_,", "),Nd=y(i_,"CODE",{});var u_=E(Nd);Bd=w(u_,"b`...`"),u_.forEach(u),Md=w(i_," to create a JavaScript AST node. The "),Wd=y(i_,"CODE",{});var k_=E(Wd);Gd=w(k_,"b"),k_.forEach(u),Kd=w(i_," tag function allow us to pass in JavaScript AST node as placeholder, so that is very convenient."),qd=y(i_,"UL",{});var h_=E(qd);Ud=y(h_,"LI",{});var d_=E(Ud);Fd=w(d_,"You can check out more about the "),Jd=y(d_,"CODE",{});var f_=E(Jd);zd=w(f_,"b"),f_.forEach(u),Yd=w(d_," tag function from "),Vd=y(d_,"A",{href:!0,rel:!0});var m_=E(Vd);Qd=w(m_,"code-red"),m_.forEach(u),d_.forEach(u),h_.forEach(u),i_.forEach(u),t_.forEach(u),Zd=b(Hb),Xd=y(Hb,"P",{});var g_=E(Xd);nf=w(g_,"Now, to implement the dirty checking, we use "),af=y(g_,"CODE",{});var v_=E(af);sf=w(v_,"this.dependencies"),v_.forEach(u),g_.forEach(u),tf=b(Hb),ef=y(Hb,"PRE",{class:!0}),E(ef).forEach(u),of=b(Hb),pf=y(Hb,"P",{});var E_=E(pf);cf=w(E_,"To determine whether our expression value has changed, we are going to compute the expression and compare it with "),rf=y(E_,"CODE",{});var y_=E(rf);lf=w(y_,"previous_key"),y_.forEach(u),uf=w(E_," and determine whether it has changed."),E_.forEach(u),kf=b(Hb),hf=y(Hb,"P",{});var w_=E(hf);df=w(w_,"Here's a recap of the compiled code that we've come up previously:"),w_.forEach(u),ff=b(Hb),mf=y(Hb,"PRE",{class:!0}),E(mf).forEach(u),gf=b(Hb),vf=y(Hb,"P",{});var b_=E(vf);Ef=w(b_,"We start with declaring the variable, "),yf=y(b_,"CODE",{});var x_=E(yf);wf=w(x_,"previous_key"),x_.forEach(u),bf=w(b_,":"),b_.forEach(u),xf=b(Hb),_f=y(Hb,"PRE",{class:!0}),E(_f).forEach(u),Cf=b(Hb),Tf=y(Hb,"P",{});var __=E(Tf);Of=y(__,"CODE",{});var C_=E(Of);Sf=w(C_,"expression.manipulate(block)"),C_.forEach(u),Af=w(__," will convert the expression to refer to the "),If=y(__,"CODE",{});var T_=E(If);Pf=w(T_,"ctx"),T_.forEach(u),Df=w(__," variable, for example:"),__.forEach(u),Lf=b(Hb),jf=y(Hb,"PRE",{class:!0}),E(jf).forEach(u),$f=b(Hb),Rf=y(Hb,"P",{});var O_=E(Rf);Hf=w(O_,"Next we are going to compare the new value and assign it to "),Nf=y(O_,"CODE",{});var S_=E(Nf);Bf=w(S_,"previous_key"),S_.forEach(u),Mf=w(O_," after that."),O_.forEach(u),Wf=b(Hb),Gf=y(Hb,"PRE",{class:!0}),E(Gf).forEach(u),Kf=b(Hb),qf=y(Hb,"P",{});var A_=E(qf);Uf=w(A_,"And to combine all of these, we have:"),A_.forEach(u),Ff=b(Hb),Jf=y(Hb,"PRE",{class:!0}),E(Jf).forEach(u),zf=b(Hb),Yf=y(Hb,"P",{});var I_=E(Yf);Vf=w(I_,"We are using the "),Qf=y(I_,"CODE",{});var P_=E(Qf);Zf=w(P_,"anchor"),P_.forEach(u),Xf=w(I_," when we are mounting the new "),nm=y(I_,"CODE",{});var D_=E(nm);am=w(D_,"key_block"),D_.forEach(u),sm=w(I_,", you can check out "),tm=y(I_,"A",{href:!0});var L_=E(tm);em=w(L_,"Compile Svelte in your head Part 4: the extra text node"),L_.forEach(u),om=w(I_,", explaining why we need the anchor node, and here is how the anchor node being computed:"),I_.forEach(u),pm=b(Hb),cm=y(Hb,"PRE",{class:!0}),E(cm).forEach(u),rm=b(Hb),im=y(Hb,"P",{});var j_=E(im);lm=w(j_,"It could be the next sibling, or it could be a new "),um=y(j_,"CODE",{});var $_=E(um);km=w($_,"empty()"),$_.forEach(u),hm=w(j_," text node created."),j_.forEach(u),dm=b(Hb),fm=y(Hb,"P",{});var R_=E(fm);mm=w(R_,"Finally, if the content has transition, we need to add code for the transition as well:"),R_.forEach(u),gm=b(Hb),vm=y(Hb,"PRE",{class:!0}),E(vm).forEach(u),Em=b(Hb),ym=y(Hb,"P",{});var H_=E(ym);wm=w(H_,"Where to place them? Well, I'll leave that as your exercise to figure that out. 😉"),H_.forEach(u),Hb.forEach(u),bm=b(n),xm=y(n,"SECTION",{});var N_=E(xm);_m=y(N_,"H3",{});var B_=E(_m);Cm=y(B_,"A",{href:!0,id:!0});var M_=E(Cm);Tm=w(M_,"Creating code for SSR"),M_.forEach(u),B_.forEach(u),Om=b(N_),Sm=y(N_,"P",{});var W_=E(Sm);Am=w(W_,"For SSR, it is much simpler than for the "),Im=y(W_,"CODE",{});var G_=E(Im);Pm=w(G_,"dom"),G_.forEach(u),Dm=w(W_,". "),Lm=y(W_,"CODE",{});var K_=E(Lm);jm=w(K_,"{#key}"),K_.forEach(u),$m=w(W_," block has no special meaning in SSR, because, you will only render once in SSR:"),W_.forEach(u),Rm=b(N_),Hm=y(N_,"PRE",{class:!0}),E(Hm).forEach(u),Nm=b(N_),Bm=y(N_,"P",{});var q_=E(Bm);Mm=w(q_,"☝️ That's all the code we need for SSR. We are rendering the children, passing down the "),Wm=y(q_,"CODE",{});var U_=E(Wm);Gm=w(U_,"options"),U_.forEach(u),Km=w(q_,", and add no extra code for the "),qm=y(q_,"CODE",{});var F_=E(qm);Um=w(F_,"{#key}"),F_.forEach(u),Fm=w(q_," block."),q_.forEach(u),N_.forEach(u),Jm=b(n),zm=y(n,"SECTION",{});var J_=E(zm);Ym=y(J_,"H3",{});var z_=E(Ym);Vm=y(z_,"A",{href:!0,id:!0});var Y_=E(Vm);Qm=w(Y_,"Generate code"),Y_.forEach(u),z_.forEach(u),Zm=b(J_),Xm=y(J_,"P",{});var V_=E(Xm);ng=w(V_,"Well, everything in this step is set up generic enough to handle most use case."),V_.forEach(u),ag=b(J_),sg=y(J_,"P",{});var Q_=E(sg);tg=w(Q_,"So, nothing to change here. 🤷‍♂️"),Q_.forEach(u),J_.forEach(u),eg=b(n),og=y(n,"SECTION",{});var Z_=E(og);pg=y(Z_,"H3",{});var X_=E(pg);cg=y(X_,"A",{href:!0,id:!0});var nC=E(cg);rg=w(nC,"A few other implementation consideration"),nC.forEach(u),X_.forEach(u),ig=b(Z_),lg=y(Z_,"UL",{});var aC=E(lg);ug=y(aC,"LI",{});var sC=E(ug);kg=w(sC,"What if the expression in the "),hg=y(sC,"CODE",{});var tC=E(hg);dg=w(tC,"{#key}"),tC.forEach(u),fg=w(sC," block is not dynamic, do we give warnings? or optimise the output?"),sC.forEach(u),mg=b(aC),gg=y(aC,"LI",{});var eC=E(gg);vg=w(eC,"How will "),Eg=y(eC,"A",{href:!0,rel:!0});var oC=E(Eg);yg=y(oC,"CODE",{});var pC=E(yg);wg=w(pC,"<svelte:options immutable={true}>"),pC.forEach(u),oC.forEach(u),bg=w(eC," affect the code output?"),eC.forEach(u),aC.forEach(u),Z_.forEach(u),xg=b(n),_g=y(n,"SECTION",{});var cC=E(_g);Cg=y(cC,"H2",{});var rC=E(Cg);Tg=y(rC,"A",{href:!0,id:!0});var iC=E(Tg);Og=w(iC,"The testing"),iC.forEach(u),rC.forEach(u),Sg=b(cC),Ag=y(cC,"P",{});var lC=E(Ag);Ig=w(lC,'You\'ve seen me implementing test cases in the previous "Contributing to Svelte" articles ['),Pg=y(lC,"A",{href:!0});var uC=E(Pg);Dg=w(uC,"1"),uC.forEach(u),Lg=w(lC,"] ["),jg=y(lC,"A",{href:!0});var kC=E(jg);$g=w(kC,"2"),kC.forEach(u),Rg=w(lC,"], here I am going to skip showing the implementation of the test cases, and probably point out some thoughts I had when coming up with tests:"),lC.forEach(u),Hg=b(cC),Ng=y(cC,"OL",{});var hC=E(Ng);Bg=y(hC,"LI",{});var dC=E(Bg);Mg=y(dC,"P",{});var fC=E(Mg);Wg=y(fC,"STRONG",{});var mC=E(Wg);Gg=w(mC,"Happy path:"),mC.forEach(u),Kg=w(fC," changing the key expression should recreate the content"),fC.forEach(u),dC.forEach(u),qg=b(hC),Ug=y(hC,"LI",{});var gC=E(Ug);Fg=y(gC,"P",{});var vC=E(Fg);Jg=y(vC,"STRONG",{});var EC=E(Jg);zg=w(EC,"Happy path:"),EC.forEach(u),Yg=w(vC," Transition when recreating the content should work ✨"),vC.forEach(u),gC.forEach(u),Vg=b(hC),Qg=y(hC,"LI",{});var yC=E(Qg);Zg=y(yC,"P",{});var wC=E(Zg);Xg=y(wC,"STRONG",{});var bC=E(Xg);nv=w(bC,"Possible edge case:"),bC.forEach(u),av=w(wC," Changing variables other than the key expression should "),sv=y(wC,"STRONG",{});var xC=E(sv);tv=w(xC,"not"),xC.forEach(u),ev=w(wC," recreate the content in "),ov=y(wC,"CODE",{});var _C=E(ov);pv=w(_C,"{#key}"),_C.forEach(u),wC.forEach(u),cv=b(yC),rv=y(yC,"PRE",{class:!0}),E(rv).forEach(u),yC.forEach(u),iv=b(hC),lv=y(hC,"LI",{});var CC=E(lv);uv=y(CC,"P",{});var TC=E(uv);kv=y(TC,"STRONG",{});var OC=E(kv);hv=w(OC,"Possible edge case:"),OC.forEach(u),dv=w(TC," Changing the variables within the key expression but the result value of the key expression stay the same"),TC.forEach(u),fv=b(CC),mv=y(CC,"PRE",{class:!0}),E(mv).forEach(u),CC.forEach(u),hC.forEach(u),cC.forEach(u),gv=b(n),vv=y(n,"SECTION",{});var SC=E(vv);Ev=y(SC,"H2",{});var AC=E(Ev);yv=y(AC,"A",{href:!0,id:!0});var IC=E(yv);wv=w(IC,"Closing Notes"),IC.forEach(u),AC.forEach(u),bv=b(SC),xv=y(SC,"P",{});var PC=E(xv);_v=w(PC,"You can read the "),Cv=y(PC,"A",{href:!0,rel:!0});var DC=E(Cv);Tv=w(DC,"Pull Request #5397"),DC.forEach(u),Ov=w(PC," to read the final implementation."),PC.forEach(u),Sv=b(SC),Av=y(SC,"HR",{}),Iv=b(SC),Pv=y(SC,"P",{});var LC=E(Pv);Dv=w(LC,"If you wish to learn more about Svelte, "),Lv=y(LC,"A",{href:!0,rel:!0});var jC=E(Lv);jv=w(jC,"follow me on Twitter"),jC.forEach(u),$v=w(LC,"."),LC.forEach(u),Rv=b(SC),Hv=y(SC,"P",{});var $C=E(Hv);Nv=w($C,"If you have anything unclear about this article, find me on "),Bv=y($C,"A",{href:!0,rel:!0});var RC=E(Bv);Mv=w(RC,"Twitter"),RC.forEach(u),Wv=w($C," too!"),$C.forEach(u),SC.forEach(u),this.h()},h(){v(o,"href","#background"),v(r,"href","#the-motivation"),v(x,"href","#transitions-for-reactive-data-change"),v(T,"href","#the-implementation"),v(I,"href","#parsing"),v(L,"href","#tracking-references-and-dependencies"),v(R,"href","#creating-code-blocks-fragments"),v(B,"href","#creating-code-for-ssr"),v(G,"href","#generate-code"),v(U,"href","#a-few-other-implementation-consideration"),v(z,"href","#the-testing"),v(Q,"href","#closing-notes"),v(t,"class","sitemap"),v(t,"id","sitemap"),v(t,"role","navigation"),v(t,"aria-label","Table of Contents"),v(sn,"href","#background"),v(sn,"id","background"),v(cn,"href","/contributing-to-svelte-fixing-issue-5012"),v(un,"href","/contributing-to-svelte-fixing-issue-4392"),v($n,"href","/the-svelte-compiler-handbook"),v(Nn,"href","/looking-into-the-svelte-compiler"),v(qn,"href","#the-motivation"),v(qn,"id","the-motivation"),v(ea,"href","https://github.com/sveltejs/svelte/issues/1469"),v(ea,"rel","nofollow"),v(Ta,"class","language-svelte"),v(Aa,"href","https://svelte.dev/repl/1be3a0b123aa4384853ff5abd103f9ae"),v(Aa,"rel","nofollow"),v(ls,"href","https://svelte.dev/tutorial/keyed-each-blocks"),v(ls,"rel","nofollow"),v(Rs,"href","https://svelte.dev/repl/b1f5815f8b5f4634afa9025492739fa4"),v(Rs,"rel","nofollow"),v(Zs,"href","https://www.nikgraf.com/blog/using-reacts-key-attribute-to-remount-a-component"),v(Zs,"rel","nofollow"),v(gt,"class","language-svelte"),v(It,"href","#transitions-for-reactive-data-change"),v(It,"id","transitions-for-reactive-data-change"),v(Wt,"href","https://github.com/sveltejs/svelte/issues/5119"),v(Wt,"rel","nofollow"),v(Ut,"class","language-svelte"),v(re,"class","language-svelte"),v(me,"class","language-null"),v(Te,"href","#the-implementation"),v(Te,"id","the-implementation"),v(Pe,"href","/the-svelte-compiler-handbook"),v(Xe,"href","#parsing"),v(Xe,"id","parsing"),v(eo,"href","https://github.com/sveltejs/svelte/blob/82dc26a31c37906153e07686b73d3af08dd50154/src/compiler/parse/index.ts#L51"),v(eo,"rel","nofollow"),v(ro,"class","language-js"),v(kp,"href","https://github.com/sveltejs/svelte/blob/82dc26a31c37906153e07686b73d3af08dd50154/src/compiler/parse/state/mustache.ts#L35"),v(kp,"rel","nofollow"),v(Ip,"class","language-svelte"),v(Wp,"class","language-diff-js"),v(ac,"class","language-diff-js"),v(vc,"class","language-js"),v(Cc,"href","#tracking-references-and-dependencies"),v(Cc,"id","tracking-references-and-dependencies"),v(Fc,"class","language-js"),v(Jr,"href","https://github.com/sveltejs/svelte/blob/caebe0deb80d959ad7c7b5276d7e017be71769c7/src/compiler/compile/nodes/shared/Node.ts"),v(Jr,"rel","nofollow"),v(ui,"href","https://github.com/sveltejs/svelte/blob/2b2f40d32ae36a94b77b69959494687073a3ebbc/src/compiler/compile/render_dom/wrappers/shared/Wrapper.ts#L7"),v(ui,"rel","nofollow"),v(Ri,"class","language-js"),v(Ji,"class","language-js"),v(pl,"href","#creating-code-blocks-fragments"),v(pl,"id","creating-code-blocks-fragments"),v(gl,"href","/compile-svelte-in-your-head-part-4"),v(Ll,"class","language-js"),v(Wl,"class","language-js"),v(Fl,"class","language-js"),v(lu,"class","language-js"),v(vu,"class","language-js"),v(Wu,"class","language-js"),v(Jk,"href","https://github.com/sveltejs/svelte/blob/8148a7a33444805320923e4c4e071f62dee3df6c/src/compiler/compile/render_dom/Block.ts#L118-L152"),v(Jk,"rel","nofollow"),v(rh,"class","language-js"),v(Bh,"class","language-html"),v(Jh,"class","language-js"),v(kd,"class","language-js"),v($d,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_templates"),v($d,"rel","nofollow"),v(Vd,"href","https://github.com/Rich-Harris/code-red"),v(Vd,"rel","nofollow"),v(ef,"class","language-js"),v(mf,"class","language-js"),v(_f,"class","language-js"),v(jf,"class","language-js"),v(Gf,"class","language-js"),v(Jf,"class","language-js"),v(tm,"href","/compile-svelte-in-your-head-part-4/#the-extra-text-node"),v(cm,"class","language-js"),v(vm,"class","language-js"),v(Cm,"href","#creating-code-for-ssr"),v(Cm,"id","creating-code-for-ssr"),v(Hm,"class","language-js"),v(Vm,"href","#generate-code"),v(Vm,"id","generate-code"),v(cg,"href","#a-few-other-implementation-consideration"),v(cg,"id","a-few-other-implementation-consideration"),v(Eg,"href","https://svelte.dev/docs#svelte_options"),v(Eg,"rel","nofollow"),v(Tg,"href","#the-testing"),v(Tg,"id","the-testing"),v(Pg,"href","/contributing-to-svelte-fixing-issue-5012"),v(jg,"href","/contributing-to-svelte-fixing-issue-4392"),v(rv,"class","language-svelte"),v(mv,"class","language-svelte"),v(yv,"href","#closing-notes"),v(yv,"id","closing-notes"),v(Cv,"href","https://github.com/sveltejs/svelte/pull/5397"),v(Cv,"rel","nofollow"),v(Lv,"href","https://twitter.com/lihautan"),v(Lv,"rel","nofollow"),v(Bv,"href","https://twitter.com/lihautan"),v(Bv,"rel","nofollow")},m(n,a){l(n,s,a),i(s,t),i(t,e),i(e,o),i(o,p),i(t,c),i(c,r),i(r,k),i(t,d),i(d,g),i(g,x),i(x,_),i(t,C),i(C,T),i(T,O),i(t,S),i(S,A),i(A,I),i(I,P),i(S,D),i(D,L),i(L,j),i(S,$),i($,R),i(R,H),i(S,N),i(N,B),i(B,M),i(S,W),i(W,G),i(G,K),i(S,q),i(q,U),i(U,F),i(t,J),i(J,z),i(z,Y),i(t,V),i(V,Q),i(Q,Z),l(n,X,a),l(n,nn,a),i(nn,an),i(an,sn),i(sn,tn),i(nn,en),i(nn,on),i(on,pn),i(on,cn),i(cn,rn),i(on,ln),i(on,un),i(un,kn),i(on,hn),i(on,dn),i(dn,fn),i(on,mn),i(nn,gn),i(nn,vn),i(vn,En),i(vn,yn),i(yn,wn),i(vn,bn),i(vn,xn),i(xn,_n),i(vn,Cn),i(vn,Tn),i(Tn,On),i(vn,Sn),i(vn,An),i(An,In),i(vn,Pn),i(vn,Dn),i(Dn,Ln),i(vn,jn),i(vn,$n),i($n,Rn),i(vn,Hn),i(vn,Nn),i(Nn,Bn),i(vn,Mn),l(n,Wn,a),l(n,Gn,a),i(Gn,Kn),i(Kn,qn),i(qn,Un),i(Gn,Fn),i(Gn,Jn),i(Jn,zn),i(Jn,Yn),i(Yn,Vn),i(Jn,Qn),i(Jn,Zn),i(Zn,Xn),i(Jn,na),i(Jn,aa),i(aa,sa),i(Jn,ta),i(Jn,ea),i(ea,oa),i(Jn,pa),i(Gn,ca),i(Gn,ra),i(ra,ia),i(ra,la),i(la,ua),i(ra,ka),i(ra,ha),i(ha,da),i(ra,fa),i(Gn,ma),i(Gn,ga),i(ga,va),i(ga,Ea),i(Ea,ya),i(ga,wa),i(ga,ba),i(ba,xa),i(ga,_a),i(Gn,Ca),i(Gn,Ta),Ta.innerHTML='<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">\'alice\'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">\'bob\'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">#each</span> <span class="token language-javascript">data </span><span class="token keyword">as</span> <span class="token language-javascript">item </span><span class="token language-javascript"><span class="token punctuation">(</span>item<span class="token punctuation">.</span>id<span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">&#123;</span> item<span class="token punctuation">.</span>name <span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span>each<span class="token punctuation">&#125;</span></span></code>',i(Gn,Oa),i(Gn,Sa),i(Sa,Aa),i(Aa,Ia),i(Gn,Pa),i(Gn,Da),i(Da,La),i(Da,ja),i(ja,$a),i(Da,Ra),i(Da,Ha),i(Ha,Na),i(Da,Ba),i(Da,Ma),i(Ma,Wa),i(Da,Ga),i(Da,Ka),i(Ka,qa),i(Da,Ua),i(Da,Fa),i(Fa,Ja),i(Da,za),i(Da,Ya),i(Ya,Va),i(Da,Qa),i(Da,Za),i(Za,Xa),i(Da,ns),i(Da,as),i(as,ss),i(Da,ts),i(Da,es),i(es,os),i(Da,ps),i(Da,cs),i(cs,rs),i(Da,is),i(Da,ls),i(ls,us),i(ls,ks),i(ks,hs),i(ls,ds),i(Da,fs),i(Da,ms),i(ms,gs),i(Da,vs),i(Da,Es),i(Es,ys),i(Da,ws),i(Gn,bs),i(Gn,xs),i(xs,_s),i(xs,Cs),i(Cs,Ts),i(xs,Os),i(xs,Ss),i(Ss,As),i(xs,Is),i(xs,Ps),i(Ps,Ds),i(xs,Ls),i(Gn,js),i(Gn,$s),i($s,Rs),i(Rs,Hs),i(Rs,Ns),i(Ns,Bs),i(Rs,Ms),i($s,Ws),i($s,Gs),i(Gs,Ks),i($s,qs),i(Gn,Us),i(Gn,Fs),i(Fs,Js),i(Js,zs),i(Js,Ys),i(Ys,Vs),i(Js,Qs),i(Js,Zs),i(Zs,Xs),i(Zs,nt),i(nt,at),i(Zs,st),i(Js,tt),i(Gn,et),i(Gn,ot),i(ot,pt),i(ot,ct),i(ct,rt),i(ot,it),i(ot,lt),i(lt,ut),i(ot,kt),i(ot,ht),i(ht,dt),i(ot,ft),i(Gn,mt),i(Gn,gt),gt.innerHTML='<code class="language-svelte"><span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">#each</span> <span class="token language-javascript">key </span><span class="token keyword">as</span> <span class="token language-javascript">k </span><span class="token language-javascript"><span class="token punctuation">(</span>k<span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">/></span></span>\n<span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span>each<span class="token punctuation">&#125;</span></span></code>',i(Gn,vt),i(Gn,Et),i(Et,yt),i(Et,wt),i(wt,bt),i(Et,xt),i(Et,_t),i(_t,Ct),i(Et,Tt),l(n,Ot,a),l(n,St,a),i(St,At),i(At,It),i(It,Pt),i(St,Dt),i(St,Lt),i(Lt,jt),i(Lt,$t),i($t,Rt),i($t,Ht),i(Ht,Nt),i($t,Bt),i(Lt,Mt),i(Lt,Wt),i(Wt,Gt),i(Lt,Kt),i(St,qt),i(St,Ut),Ut.innerHTML='<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> fade <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">\'svelte/transition\'</span>\n  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> count <span class="token operator">+=</span><span class="token number">1</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>handleClick<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>You clicked <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span> <span class="token attr-name"><span class="token namespace">transition:</span>fade</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span> times<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code>',i(St,Ft),i(St,Jt),i(Jt,zt),i(St,Yt),i(St,Vt),i(Vt,Qt),i(Vt,Zt),i(Zt,Xt),i(Vt,ne),i(St,ae),i(St,se),i(se,te),i(se,ee),i(ee,oe),i(se,pe),i(St,ce),i(St,re),re.innerHTML='<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> fade <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">\'svelte/transition\'</span>\n  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> count <span class="token operator">+=</span><span class="token number">1</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">on:</span>click=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>handleClick<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>You clicked\n  <span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">#each</span> <span class="token language-javascript"><span class="token punctuation">[</span>count<span class="token punctuation">]</span> </span><span class="token keyword">as</span> <span class="token language-javascript">count </span><span class="token language-javascript"><span class="token punctuation">(</span>count<span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span> <span class="token attr-name"><span class="token namespace">transition:</span>fade</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>\n  <span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span>each<span class="token punctuation">&#125;</span></span>\n times<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code>',i(St,ie),i(St,le),i(le,ue),i(le,ke),i(ke,he),i(le,de),i(St,fe),i(St,me),me.innerHTML='<code class="language-">&lt;p&gt;You clicked\n  &#123;#key count&#125;\n    &lt;strong transition:fade&gt;&#123;count&#125;&lt;/strong&gt;\n  &#123;/key&#125;\n times&lt;/p&gt;</code>',i(St,ge),i(St,ve),i(ve,Ee),i(ve,ye),i(ye,we),i(ve,be),l(n,xe,a),l(n,_e,a),i(_e,Ce),i(Ce,Te),i(Te,Oe),i(_e,Se),i(_e,Ae),i(Ae,Ie),i(Ae,Pe),i(Pe,De),i(Ae,Le),i(_e,je),i(_e,$e),i($e,Re),i(Re,He),i($e,Ne),i($e,Be),i(Be,Me),i($e,We),i($e,Ge),i(Ge,Ke),i($e,qe),i($e,Ue),i(Ue,Fe),i(_e,Je),i(_e,ze),i(ze,Ye),l(n,Ve,a),l(n,Qe,a),i(Qe,Ze),i(Ze,Xe),i(Xe,no),i(Qe,ao),i(Qe,so),i(so,to),i(so,eo),i(eo,oo),i(so,po),i(Qe,co),i(Qe,ro),ro.innerHTML='<code class="language-js"><span class="token keyword">let</span> state<span class="token punctuation">:</span> ParserState <span class="token operator">=</span> fragment<span class="token punctuation">;</span>\n\n<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>template<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  state <span class="token operator">=</span> <span class="token function">state</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">||</span> fragment<span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',i(Qe,io),i(Qe,lo),i(lo,uo),i(Qe,ko),i(Qe,ho),i(ho,fo),i(fo,mo),i(mo,go),i(fo,vo),i(ho,Eo),i(ho,yo),i(yo,wo),i(wo,bo),i(yo,xo),i(yo,_o),i(_o,Co),i(yo,To),i(yo,Oo),i(Oo,So),i(yo,Ao),i(yo,Io),i(Io,Po),i(yo,Do),i(yo,Lo),i(Lo,jo),i(yo,$o),i(ho,Ro),i(ho,Ho),i(Ho,No),i(No,Bo),i(Ho,Mo),i(Ho,Wo),i(Wo,Go),i(Ho,Ko),i(Ho,qo),i(qo,Uo),i(Ho,Fo),i(Ho,Jo),i(Jo,zo),i(ho,Yo),i(ho,Vo),i(Vo,Qo),i(Qo,Zo),i(Vo,Xo),i(Vo,np),i(np,ap),i(Vo,sp),i(Vo,tp),i(tp,ep),i(Vo,op),i(Qe,pp),i(Qe,cp),i(cp,rp),i(cp,ip),i(ip,lp),i(cp,up),i(cp,kp),i(kp,hp),i(hp,dp),i(kp,fp),i(cp,mp),i(Qe,gp),i(Qe,vp),i(vp,Ep),i(vp,yp),i(yp,wp),i(vp,bp),i(vp,xp),i(xp,_p),i(vp,Cp),i(vp,Tp),i(Tp,Op),i(vp,Sp),i(Qe,Ap),i(Qe,Ip),Ip.innerHTML='<code class="language-svelte"><span class="token language-javascript"><span class="token punctuation">&#123;</span>#key expression<span class="token punctuation">&#125;</span></span>\n   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">/></span></span>\n<span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span>key<span class="token punctuation">&#125;</span></span>\n\n<span class="token comment">&lt;!-- similar to --\x3e</span>\n<span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> expression<span class="token punctuation">&#125;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">/></span></span>\n<span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></code>',i(Qe,Pp),i(Qe,Dp),i(Dp,Lp),i(Dp,jp),i(jp,$p),i(Dp,Rp),i(Dp,Hp),i(Hp,Np),i(Dp,Bp),i(Qe,Mp),i(Qe,Wp),Wp.innerHTML='<code class="language-diff-js">// ...\n&#125; else if (parser.eat(#)) &#123;\n<span class="token unchanged language-js"><span class="token prefix unchanged"> </span> <span class="token comment">// if &#123;#if foo&#125;, &#123;#each foo&#125; or &#123;#await foo&#125;</span>\n<span class="token prefix unchanged"> </span> <span class="token keyword">let</span> type<span class="token punctuation">;</span>\n</span>\n<span class="token unchanged language-js"><span class="token prefix unchanged"> </span> <span class="token keyword">if</span> <span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">\'if\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n<span class="token prefix unchanged"> </span>   type <span class="token operator">=</span> <span class="token string">\'IfBlock\'</span><span class="token punctuation">;</span>\n<span class="token prefix unchanged"> </span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">\'each\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n<span class="token prefix unchanged"> </span>   type <span class="token operator">=</span> <span class="token string">\'EachBlock\'</span><span class="token punctuation">;</span>\n<span class="token prefix unchanged"> </span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">\'await\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n<span class="token prefix unchanged"> </span>   type <span class="token operator">=</span> <span class="token string">\'AwaitBlock\'</span><span class="token punctuation">;</span>\n</span><span class="token inserted-sign inserted language-js"><span class="token prefix inserted">+</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">\'key\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n<span class="token prefix inserted">+</span>    type <span class="token operator">=</span> <span class="token string">\'KeyBlock\'</span><span class="token punctuation">;</span>\n</span><span class="token unchanged language-js"><span class="token prefix unchanged"> </span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>\n<span class="token prefix unchanged"> </span>   parser<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n<span class="token prefix unchanged"> </span>     code<span class="token punctuation">:</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">expected-block-type</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">,</span>\n</span><span class="token deleted-sign deleted language-js"><span class="token prefix deleted">-</span>      message<span class="token punctuation">:</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">Expected if, each or await</span><span class="token template-punctuation string">&#96;</span></span>\n</span><span class="token inserted-sign inserted language-js"><span class="token prefix inserted">+</span>      message<span class="token punctuation">:</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">Expected if, each, await or key</span><span class="token template-punctuation string">&#96;</span></span>\n</span><span class="token unchanged language-js"><span class="token prefix unchanged"> </span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token prefix unchanged"> </span> <span class="token punctuation">&#125;</span></span></code>',i(Qe,Gp),i(Qe,Kp),i(Kp,qp),i(Kp,Up),i(Up,Fp),i(Kp,Jp),i(Kp,zp),i(zp,Yp),i(Kp,Vp),i(Kp,Qp),i(Qp,Zp),i(Kp,Xp),i(Qe,nc),i(Qe,ac),ac.innerHTML='<code class="language-diff-js">if (parser.eat(\'/\')) &#123;\n<span class="token unchanged language-js"><span class="token prefix unchanged"> </span> <span class="token keyword">let</span> block <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token prefix unchanged"> </span> <span class="token keyword">let</span> expected<span class="token punctuation">;</span>\n<span class="token prefix unchanged"> </span> <span class="token comment">// ...</span>\n<span class="token prefix unchanged"> </span> <span class="token keyword">if</span> <span class="token punctuation">(</span>block<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">\'IfBlock\'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n<span class="token prefix unchanged"> </span>   expected <span class="token operator">=</span> <span class="token string">\'if\'</span><span class="token punctuation">;</span>\n<span class="token prefix unchanged"> </span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>block<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">\'EachBlock\'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n<span class="token prefix unchanged"> </span>   expected <span class="token operator">=</span> <span class="token string">\'each\'</span><span class="token punctuation">;</span>\n<span class="token prefix unchanged"> </span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>block<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">\'AwaitBlock\'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n<span class="token prefix unchanged"> </span>   expected <span class="token operator">=</span> <span class="token string">\'await\'</span><span class="token punctuation">;</span>\n</span><span class="token inserted-sign inserted language-js"><span class="token prefix inserted">+</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>block<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">\'KeyBlock\'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n<span class="token prefix inserted">+</span>    expected <span class="token operator">=</span> <span class="token string">\'key\'</span><span class="token punctuation">;</span>\n</span><span class="token unchanged language-js"><span class="token prefix unchanged"> </span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>\n<span class="token prefix unchanged"> </span>   parser<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n<span class="token prefix unchanged"> </span>     code<span class="token punctuation">:</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">unexpected-block-close</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">,</span>\n<span class="token prefix unchanged"> </span>     message<span class="token punctuation">:</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">Unexpected block closing tag</span><span class="token template-punctuation string">&#96;</span></span>\n<span class="token prefix unchanged"> </span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token prefix unchanged"> </span> <span class="token punctuation">&#125;</span></span></code>',i(Qe,sc),i(Qe,tc),i(tc,ec),i(tc,oc),i(oc,pc),i(tc,cc),i(tc,rc),i(rc,ic),i(tc,lc),i(tc,uc),i(uc,kc),i(tc,hc),i(tc,dc),i(dc,fc),i(tc,mc),i(Qe,gc),i(Qe,vc),vc.innerHTML='<code class="language-js">parser<span class="token punctuation">.</span><span class="token function">require_whitespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// read the JS expression</span>\n<span class="prism-highlight-code-line"><span class="token keyword">const</span> expression <span class="token operator">=</span> <span class="token function">read_expression</span><span class="token punctuation">(</span>parser<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n\n<span class="token comment">// create the AST node</span>\n<span class="token keyword">const</span> block<span class="token punctuation">:</span> TemplateNode <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n\nparser<span class="token punctuation">.</span><span class="token function">allow_whitespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// other logic blocks specific syntax</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">\'EachBlock\'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// &#123;#each&#125; block specific syntax for &#123;#each list as item&#125;</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">&#125;</span></code>',i(Qe,Ec),i(Qe,yc),i(yc,wc),l(n,bc,a),l(n,xc,a),i(xc,_c),i(_c,Cc),i(Cc,Tc),i(xc,Oc),i(xc,Sc),i(Sc,Ac),i(Sc,Ic),i(Ic,Pc),i(Sc,Dc),i(Sc,Lc),i(Lc,jc),i(Sc,$c),i(xc,Rc),i(xc,Hc),i(Hc,Nc),i(Hc,Bc),i(Bc,Mc),i(Hc,Wc),i(Hc,Gc),i(Gc,Kc),i(Hc,qc),i(xc,Uc),i(xc,Fc),Fc.innerHTML='<code class="language-js"><span class="token keyword">import</span> Expression <span class="token keyword">from</span> <span class="token string">\'./shared/Expression\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> map_children <span class="token keyword">from</span> <span class="token string">\'./shared/map_children\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> AbstractBlock <span class="token keyword">from</span> <span class="token string">\'./shared/AbstractBlock\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">KeyBlock</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractBlock</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// for discriminant property for TypeScript to differentiate types</span>\n  type<span class="token punctuation">:</span> <span class="token string">\'KeyBlock\'</span><span class="token punctuation">;</span>\n\n  expression<span class="token punctuation">:</span> Expression<span class="token punctuation">;</span>\n\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">component<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> scope<span class="token punctuation">,</span> info</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>component<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> scope<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// create an Expression instance for the expression</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>expression <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Expression</span><span class="token punctuation">(</span>component<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> scope<span class="token punctuation">,</span> info<span class="token punctuation">.</span>expression<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// loop through children and create respective node instance</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token function">map_children</span><span class="token punctuation">(</span>component<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> scope<span class="token punctuation">,</span> info<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// simple validation: make sure the block is not empty</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">warn_if_empty_block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span></code>',i(xc,Jc),i(xc,zc),i(zc,Yc),i(xc,Vc),i(xc,Qc),i(Qc,Zc),i(xc,Xc),i(xc,nr),i(nr,ar),i(ar,sr),i(sr,tr),i(ar,er),i(nr,or),i(nr,pr),i(pr,cr),i(pr,rr),i(rr,ir),i(pr,lr),i(pr,ur),i(ur,kr),i(pr,hr),i(nr,dr),i(nr,fr),i(fr,mr),i(mr,gr),i(fr,vr),i(fr,Er),i(Er,yr),i(fr,wr),i(fr,br),i(br,xr),i(fr,_r),i(xc,Cr),i(xc,Tr),i(Tr,Or),i(Or,Sr),i(Tr,Ar),i(Tr,Ir),i(Ir,Pr),i(Tr,Dr),i(Tr,Lr),i(Lr,jr),i(Tr,$r),i(Tr,Rr),i(Rr,Hr),i(Hr,Nr),i(Hr,Br),i(Br,Mr),i(Rr,Wr),i(Rr,Gr),i(Gr,Kr),i(Gr,qr),i(qr,Ur),i(Gr,Fr),i(Gr,Jr),i(Jr,zr),i(zr,Yr),i(Gr,Vr),i(Gr,Qr),i(Qr,Zr),i(Gr,Xr),i(Gr,ni),i(ni,ai),i(ni,si),i(si,ti),i(ni,ei),i(Rr,oi),i(Rr,pi),i(pi,ci),i(pi,ri),i(ri,ii),i(pi,li),i(pi,ui),i(ui,ki),i(ki,hi),i(pi,di),i(pi,fi),i(fi,mi),i(pi,gi),i(pi,vi),i(vi,Ei),i(vi,yi),i(yi,wi),i(vi,bi),i(xc,xi),i(xc,_i),i(_i,Ci),i(xc,Ti),i(xc,Oi),i(Oi,Si),i(Oi,Ai),i(Ai,Ii),i(Oi,Pi),i(Oi,Di),i(Di,Li),i(Oi,ji),i(xc,$i),i(xc,Ri),Ri.innerHTML='<code class="language-js"><span class="token comment">// src/compiler/compile/nodes/shared/map_children.ts</span>\n<span class="token keyword">function</span> <span class="token function">get_constructor</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token keyword">case</span> <span class="token string">\'AwaitBlock\'</span><span class="token punctuation">:</span>\n      <span class="token keyword">return</span> AwaitBlock<span class="token punctuation">;</span>\n    <span class="token keyword">case</span> <span class="token string">\'Body\'</span><span class="token punctuation">:</span>\n      <span class="token keyword">return</span> Body<span class="token punctuation">;</span>\n    <span class="token comment">// ...</span>\n<span class="prism-highlight-code-line">    <span class="token keyword">case</span> <span class="token string">\'KeyBlock\'</span><span class="token punctuation">:</span></span>\n      <span class="token keyword">return</span> KeyBlock<span class="token punctuation">;</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span></code>',i(xc,Hi),i(xc,Ni),i(Ni,Bi),i(Ni,Mi),i(Mi,Wi),i(Ni,Gi),i(Ni,Ki),i(Ki,qi),i(Ni,Ui),i(xc,Fi),i(xc,Ji),Ji.innerHTML='<code class="language-js"><span class="token comment">// src/compiler/compile/nodes/interfaces.ts</span>\n<span class="token keyword">export</span> type INode <span class="token operator">=</span>\n  <span class="token operator">|</span> Action\n  <span class="token operator">|</span> Animation\n  <span class="token comment">// ...</span>\n<span class="prism-highlight-code-line">  <span class="token operator">|</span> KeyBlock<span class="token punctuation">;</span></span>\n<span class="token comment">// ...</span></code>',i(xc,zi),i(xc,Yi),i(Yi,Vi),i(Yi,Qi),i(Qi,Zi),i(Yi,Xi),i(Yi,nl),i(nl,al),i(Yi,sl),l(n,tl,a),l(n,el,a),i(el,ol),i(ol,pl),i(pl,cl),i(el,rl),i(el,il),i(il,ll),i(il,ul),i(ul,kl),i(il,hl),i(el,dl),i(el,fl),i(fl,ml),i(fl,gl),i(gl,vl),i(fl,El),i(fl,yl),i(yl,wl),i(fl,bl),i(el,xl),i(el,_l),i(_l,Cl),i(_l,Tl),i(Tl,Ol),i(_l,Sl),i(_l,Al),i(Al,Il),i(_l,Pl),i(el,Dl),i(el,Ll),Ll.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">create_key_block</span><span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// instructions to create / mount / update / destroy inner content of &#123;#key&#125;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>\n    <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n    <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n    <span class="token function">p</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n    <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',i(el,jl),i(el,$l),i($l,Rl),i($l,Hl),i(Hl,Nl),i($l,Bl),i(el,Ml),i(el,Wl),Wl.innerHTML='<code class="language-js"><span class="token keyword">const</span> key_block <span class="token operator">=</span> <span class="token function">create_key_block</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// create the elements for the &#123;#key&#125;</span>\nkey_block<span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// mount the elements in the &#123;#key&#125;</span>\nkey_block<span class="token punctuation">.</span><span class="token function">m</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// update the elements in the &#123;#key&#125;</span>\nkey_block<span class="token punctuation">.</span><span class="token function">p</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> dirty<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// destroy the elements in the &#123;#key&#125;</span>\nkey_block<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>detaching<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// intro &amp; outro the elements in the &#123;#key&#125;</span>\n<span class="token function">transition_in</span><span class="token punctuation">(</span>key_block<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">transition_out</span><span class="token punctuation">(</span>key_block<span class="token punctuation">)</span><span class="token punctuation">;</span></code>',i(el,Gl),i(el,Kl),i(Kl,ql),i(el,Ul),i(el,Fl),Fl.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">create_fragment</span><span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// init</span>\n  <span class="token keyword">let</span> key_block <span class="token operator">=</span> <span class="token function">create_key_block</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>\n    <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n      <span class="token comment">// create</span>\n      key_block<span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n    <span class="token function">m</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> anchor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n      <span class="token comment">// mount</span>\n      key_block<span class="token punctuation">.</span><span class="token function">m</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n    <span class="token function">p</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> dirty</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n      <span class="token comment">// update</span>\n      key_block<span class="token punctuation">.</span><span class="token function">p</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> dirty<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n    <span class="token function">i</span><span class="token punctuation">(</span><span class="token parameter">local</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n      <span class="token comment">// intro</span>\n      <span class="token function">transition_in</span><span class="token punctuation">(</span>key_block<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n    <span class="token function">o</span><span class="token punctuation">(</span><span class="token parameter">local</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n      <span class="token comment">// outro</span>\n      <span class="token function">transition_out</span><span class="token punctuation">(</span>key_block<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n    <span class="token function">d</span><span class="token punctuation">(</span><span class="token parameter">detaching</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n      <span class="token comment">// destroy</span>\n      key_block<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>detaching<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',i(el,Jl),i(el,zl),i(zl,Yl),i(zl,Vl),i(Vl,Ql),i(zl,Zl),i(el,Xl),i(el,nu),i(nu,au),i(au,su),i(nu,tu),i(nu,eu),i(eu,ou),i(eu,pu),i(pu,cu),i(eu,ru),i(el,iu),i(el,lu),lu.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">create_fragment</span><span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// we store the previous key expression value</span>\n  <span class="token keyword">let</span> previous_key <span class="token operator">=</span> value_of_the_key_expression<span class="token punctuation">;</span>\n  <span class="token comment">// ...</span>\n  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>\n    <span class="token comment">// ...</span>\n    <span class="token function">p</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> dirty</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>\n        <span class="token comment">// if the any variables within the key has changed, and</span>\n        dirty <span class="token operator">&amp;</span> dynamic_variables_in_key_expression <span class="token operator">&amp;&amp;</span>\n        <span class="token comment">// if the value of the key expression has changed</span>\n        previous_key <span class="token operator">!==</span> <span class="token punctuation">(</span>previous_key <span class="token operator">=</span> value_of_the_key_expression<span class="token punctuation">)</span>\n      <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n        <span class="token comment">// destroy the elements</span>\n        <span class="token comment">// detaching = 1 (true) to remove the elements immediately</span>\n        key_block<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// create a new key_block</span>\n        key_block <span class="token operator">=</span> <span class="token function">create_key_block</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        key_block<span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// mount the new key_block</span>\n        key_block<span class="token punctuation">.</span><span class="token function">m</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>\n        <span class="token comment">// if the key has not changed, make sure the content of &#123;#key&#125; is up to date</span>\n        key_block<span class="token punctuation">.</span><span class="token function">p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">&#125;</span>\n    <span class="token punctuation">&#125;</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span></code>',i(el,uu),i(el,ku),i(ku,hu),i(ku,du),i(du,fu),i(ku,mu),i(el,gu),i(el,vu),vu.innerHTML='<code class="language-js"><span class="token comment">// instead of key_block.d(1);</span>\n<span class="token function">group_outros</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">transition_out</span><span class="token punctuation">(</span>key_block<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> noop<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">check_outros</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// before key_block.m(...)</span>\n<span class="token function">transition_in</span><span class="token punctuation">(</span>key_block<span class="token punctuation">)</span><span class="token punctuation">;</span></code>',i(el,Eu),i(el,yu),i(yu,wu),i(yu,bu),i(bu,xu),i(yu,_u),i(yu,Cu),i(Cu,Tu),i(yu,Ou),i(el,Su),i(el,Au),i(Au,Iu),i(Au,Pu),i(Pu,Du),i(Au,Lu),i(el,ju),i(el,$u),i($u,Ru),i($u,Hu),i(Hu,Nu),i($u,Bu),i(el,Mu),i(el,Wu),Wu.innerHTML='<code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">KeyBlockWrapper</span> <span class="token keyword">extends</span> <span class="token class-name">Wrapper</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// ...</span>\n  <span class="token comment">// the &#96;key_block&#96; variable</span>\n  <span class="token keyword">var</span><span class="token punctuation">:</span> Identifier <span class="token operator">=</span> <span class="token punctuation">&#123;</span> type<span class="token punctuation">:</span> <span class="token string">\'Identifier\'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">\'key_block\'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">renderer<span class="token punctuation">:</span> Renderer<span class="token punctuation">,</span> block<span class="token punctuation">:</span> Block<span class="token punctuation">,</span> parent<span class="token punctuation">:</span> Wrapper<span class="token punctuation">,</span> node<span class="token punctuation">:</span> EachBlock<span class="token punctuation">,</span> strip_whitespace<span class="token punctuation">:</span> boolean<span class="token punctuation">,</span> next_sibling<span class="token punctuation">:</span> Wrapper</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>renderer<span class="token punctuation">,</span> block<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// deoptimisation, set flag indicate the content is not static</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cannot_use_innerhtml</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">not_static_content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// get all the dynamic variables within the expression</span>\n    <span class="token comment">// useful for later</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>dependencies <span class="token operator">=</span> node<span class="token punctuation">.</span>expression<span class="token punctuation">.</span><span class="token function">dynamic_dependencies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// create a new &#96;create_fragment&#96; function</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>block <span class="token operator">=</span> block<span class="token punctuation">.</span><span class="token function">child</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>\n      comment<span class="token punctuation">:</span> <span class="token function">create_debugging_comment</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> renderer<span class="token punctuation">.</span>component<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      name<span class="token punctuation">:</span> renderer<span class="token punctuation">.</span>component<span class="token punctuation">.</span><span class="token function">get_unique_name</span><span class="token punctuation">(</span><span class="token string">\'create_key_block\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      type<span class="token punctuation">:</span> <span class="token string">\'key\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    renderer<span class="token punctuation">.</span>blocks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// create render-dom Wrappers for the children</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>fragment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FragmentWrapper</span><span class="token punctuation">(</span>renderer<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>block<span class="token punctuation">,</span> node<span class="token punctuation">.</span>children<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> strip_whitespace<span class="token punctuation">,</span> next_sibling<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">block<span class="token punctuation">:</span> Block<span class="token punctuation">,</span> parent_node<span class="token punctuation">:</span> Identifier<span class="token punctuation">,</span> parent_nodes<span class="token punctuation">:</span> Identifier</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token comment">// NOTE: here is where we write the render code</span>\n  <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span></code>',i(el,Gu),i(el,Ku),i(Ku,qu),i(el,Uu),i(el,Fu),i(Fu,Ju),i(Ju,zu),i(Ju,Yu),i(Yu,Vu),i(Ju,Qu),i(Ju,Zu),i(Zu,Xu),i(Ju,nk),i(Ju,ak),i(ak,sk),i(Ju,tk),i(Ju,ek),i(ek,ok),i(Ju,pk),i(Ju,ck),i(ck,rk),i(Ju,ik),i(Ju,lk),i(lk,uk),i(Ju,kk),i(Ju,hk),i(hk,dk),i(Ju,fk),i(Ju,mk),i(mk,gk),i(gk,vk),i(gk,Ek),i(Ek,yk),i(gk,wk),i(gk,bk),i(bk,xk),i(mk,_k),i(mk,Ck),i(Ck,Tk),i(Ck,Ok),i(Ok,Sk),i(Fu,Ak),i(Fu,Ik),i(Ik,Pk),i(Ik,Dk),i(Dk,Lk),i(Ik,jk),i(Ik,$k),i($k,Rk),i(Ik,Hk),i(Ik,Nk),i(Nk,Bk),i(Ik,Mk),i(Ik,Wk),i(Wk,Gk),i(Gk,Kk),i(Gk,qk),i(qk,Uk),i(Gk,Fk),i(Gk,Jk),i(Jk,zk),i(el,Yk),i(el,Vk),i(Vk,Qk),i(Vk,Zk),i(Zk,Xk),i(Vk,nh),i(el,ah),i(el,sh),i(sh,th),i(sh,eh),i(eh,oh),i(sh,ph),i(el,ch),i(el,rh),rh.innerHTML='<code class="language-js"><span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">block<span class="token punctuation">:</span> Block<span class="token punctuation">,</span> parent_node<span class="token punctuation">:</span> Identifier<span class="token punctuation">,</span> parent_nodes<span class="token punctuation">:</span> Identifier</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n<span class="prism-highlight-code-line">  <span class="token keyword">this</span><span class="token punctuation">.</span>fragment<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span></span>\n<span class="prism-highlight-code-line">    <span class="token keyword">this</span><span class="token punctuation">.</span>block<span class="token punctuation">,</span></span>\n<span class="prism-highlight-code-line">    <span class="token keyword">null</span><span class="token punctuation">,</span></span>\n<span class="prism-highlight-code-line">    <span class="token punctuation">(</span>x<span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">#nodes</span><span class="token template-punctuation string">&#96;</span></span> <span class="token keyword">as</span> unknown<span class="token punctuation">)</span> <span class="token keyword">as</span> Identifier</span>\n<span class="prism-highlight-code-line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="token punctuation">&#125;</span></code>',i(el,ih),i(el,lh),i(lh,uh),i(lh,kh),i(kh,hh),i(lh,dh),i(lh,fh),i(fh,mh),i(lh,gh),i(lh,vh),i(vh,Eh),i(lh,yh),i(lh,wh),i(wh,bh),i(lh,xh),i(lh,_h),i(_h,Ch),i(lh,Th),i(el,Oh),i(el,Sh),i(el,Ah),i(el,Ih),i(Ih,Ph),i(Ih,Dh),i(Dh,Lh),i(Ih,jh),i(Ih,$h),i($h,Rh),i(Ih,Hh),i(el,Nh);i(el,Bh),Bh.innerHTML='<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token punctuation">/></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>',i(el,Mh),i(el,Wh),i(Wh,Gh),i(Wh,Kh),i(Kh,qh),i(Wh,Uh),i(el,Fh),i(el,Jh),Jh.innerHTML='<code class="language-js">spanWrapper<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>\n  block<span class="token punctuation">,</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>var<span class="token punctuation">,</span> <span class="token comment">// div\'s var</span>\n  x<span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>var<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.childNodes</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">,</span> <span class="token comment">// div.childNodes</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code>',i(el,zh),i(el,Yh),i(Yh,Vh),i(Yh,Qh),i(Qh,Zh),i(Yh,Xh),i(Yh,nd),i(nd,ad),i(Yh,sd),i(Yh,td),i(td,ed),i(Yh,od),i(el,pd),i(el,cd),i(el,rd),i(el,id),i(id,ld),i(el,ud),i(el,kd),kd.innerHTML='<code class="language-js"><span class="token comment">// let key_block = create_key_block(ctx);</span>\nblock<span class="token punctuation">.</span>chunks<span class="token punctuation">.</span>init<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>\n  b<span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">let </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>var<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>block<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">(#ctx)</span><span class="token template-punctuation string">&#96;</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// key_block.c();</span>\nblock<span class="token punctuation">.</span>chunks<span class="token punctuation">.</span>create<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>b<span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>var<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.c();</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// key_block.m(...);</span>\nblock<span class="token punctuation">.</span>chunks<span class="token punctuation">.</span>mount<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>\n  b<span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>var<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.m(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>parent_node <span class="token operator">||</span> <span class="token string">"#target"</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>parent_node <span class="token operator">?</span> <span class="token string">"null"</span> <span class="token punctuation">:</span> <span class="token string">"#anchor"</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">);</span><span class="token template-punctuation string">&#96;</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// key_block.p(...);</span>\nblock<span class="token punctuation">.</span>chunks<span class="token punctuation">.</span>update<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>\n  b<span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>var<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.p(#ctx, #dirty);</span><span class="token template-punctuation string">&#96;</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// key_block.d(...);</span>\nblock<span class="token punctuation">.</span>chunks<span class="token punctuation">.</span>destroy<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>b<span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>var<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.d(detaching)</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>',i(el,hd),i(el,dd),i(dd,fd),i(el,md),i(el,gd),i(gd,vd),i(vd,Ed),i(vd,yd),i(yd,wd),i(vd,bd),i(vd,xd),i(xd,_d),i(vd,Cd),i(vd,Td),i(Td,Od),i(vd,Sd),i(vd,Ad),i(Ad,Id),i(vd,Pd),i(gd,Dd),i(gd,Ld),i(Ld,jd),i(Ld,$d),i($d,Rd),i(Ld,Hd),i(Ld,Nd),i(Nd,Bd),i(Ld,Md),i(Ld,Wd),i(Wd,Gd),i(Ld,Kd),i(Ld,qd),i(qd,Ud),i(Ud,Fd),i(Ud,Jd),i(Jd,zd),i(Ud,Yd),i(Ud,Vd),i(Vd,Qd),i(el,Zd),i(el,Xd),i(Xd,nf),i(Xd,af),i(af,sf),i(el,tf),i(el,ef),ef.innerHTML='<code class="language-js"><span class="token keyword">const</span> is_dirty <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>renderer<span class="token punctuation">.</span><span class="token function">dirty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dependencies<span class="token punctuation">)</span><span class="token punctuation">;</span></code>',i(el,of),i(el,pf),i(pf,cf),i(pf,rf),i(rf,lf),i(pf,uf),i(el,kf),i(el,hf),i(hf,df),i(el,ff),i(el,mf),mf.innerHTML='<code class="language-js"><span class="token comment">// we store the previous key expression value</span>\n<span class="token keyword">let</span> previous_key <span class="token operator">=</span> value_of_the_key_expression<span class="token punctuation">;</span>\n<span class="token comment">// ...</span>\n<span class="token comment">// if the value of the key expression has changed</span>\nprevious_key <span class="token operator">!==</span> <span class="token punctuation">(</span>previous_key <span class="token operator">=</span> value_of_the_key_expression<span class="token punctuation">)</span></code>',i(el,gf),i(el,vf),i(vf,Ef),i(vf,yf),i(yf,wf),i(vf,bf),i(el,xf),i(el,_f),_f.innerHTML='<code class="language-js"><span class="token keyword">const</span> previous_key <span class="token operator">=</span> block<span class="token punctuation">.</span><span class="token function">get_unique_name</span><span class="token punctuation">(</span><span class="token string">\'previous_key\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> snippet <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span>expression<span class="token punctuation">.</span><span class="token function">manipulate</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">;</span>\nblock<span class="token punctuation">.</span><span class="token function">add_variable</span><span class="token punctuation">(</span>previous_key<span class="token punctuation">,</span> snippet<span class="token punctuation">)</span><span class="token punctuation">;</span></code>',i(el,Cf),i(el,Tf),i(Tf,Of),i(Of,Sf),i(Tf,Af),i(Tf,If),i(If,Pf),i(Tf,Df),i(el,Lf),i(el,jf),jf.innerHTML='<code class="language-js">human<span class="token punctuation">.</span>age <span class="token operator">+</span> limit\n<span class="token comment">// into something like</span>\nctx<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">+</span> ctx<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span></code>',i(el,$f),i(el,Rf),i(Rf,Hf),i(Rf,Nf),i(Nf,Bf),i(Rf,Mf),i(el,Wf),i(el,Gf),Gf.innerHTML='<code class="language-js"><span class="token keyword">const</span> has_change <span class="token operator">=</span> x<span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>previous_key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> !== (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>previous_key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>snippet<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)</span><span class="token template-punctuation string">&#96;</span></span></code>',i(el,Kf),i(el,qf),i(qf,Uf),i(el,Ff),i(el,Jf),Jf.innerHTML='<code class="language-js">block<span class="token punctuation">.</span>chunks<span class="token punctuation">.</span>update<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>b<span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">\n  if (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>is_dirty<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> &amp;&amp; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>has_change<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">) &#123;\n    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>var<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.d(1);\n    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>var<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>block<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">(#ctx);\n    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>var<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.c();\n    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>var<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.m(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get_update_mount_node</span><span class="token punctuation">(</span>anchor<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>anchor<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">);\n  &#125; else &#123;\n    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>var<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.p(#ctx, #dirty);\n  &#125;\n</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>',i(el,zf),i(el,Yf),i(Yf,Vf),i(Yf,Qf),i(Qf,Zf),i(Yf,Xf),i(Yf,nm),i(nm,am),i(Yf,sm),i(Yf,tm),i(tm,em),i(Yf,om),i(el,pm),i(el,cm),cm.innerHTML='<code class="language-js"><span class="token keyword">const</span> anchor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get_or_create_anchor</span><span class="token punctuation">(</span>block<span class="token punctuation">,</span> parent_node<span class="token punctuation">,</span> parent_nodes<span class="token punctuation">)</span><span class="token punctuation">;</span></code>',i(el,rm),i(el,im),i(im,lm),i(im,um),i(um,km),i(im,hm),i(el,dm),i(el,fm),i(fm,mm),i(el,gm),i(el,vm),vm.innerHTML='<code class="language-js"><span class="token keyword">const</span> has_transitions <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>block<span class="token punctuation">.</span>has_intro_method <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>block<span class="token punctuation">.</span>has_outro_method<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> transition_out <span class="token operator">=</span> b<span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">\n  @group_outros();\n  @transition_out(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>var<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, 1, 1, @noop);\n  @check_outros();\n</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> transition_in <span class="token operator">=</span> b<span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">\n  @transition_in(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>var<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">);\n</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span></code>',i(el,Em),i(el,ym),i(ym,wm),l(n,bm,a),l(n,xm,a),i(xm,_m),i(_m,Cm),i(Cm,Tm),i(xm,Om),i(xm,Sm),i(Sm,Am),i(Sm,Im),i(Im,Pm),i(Sm,Dm),i(Sm,Lm),i(Lm,jm),i(Sm,$m),i(xm,Rm),i(xm,Hm),Hm.innerHTML='<code class="language-js"><span class="token keyword">import</span> KeyBlock <span class="token keyword">from</span> <span class="token string">\'../../nodes/KeyBlock\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Renderer<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> RenderOptions <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">\'../Renderer\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">:</span> KeyBlock<span class="token punctuation">,</span> renderer<span class="token punctuation">:</span> Renderer<span class="token punctuation">,</span> options<span class="token punctuation">:</span> RenderOptions</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n\trenderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',i(xm,Nm),i(xm,Bm),i(Bm,Mm),i(Bm,Wm),i(Wm,Gm),i(Bm,Km),i(Bm,qm),i(qm,Um),i(Bm,Fm),l(n,Jm,a),l(n,zm,a),i(zm,Ym),i(Ym,Vm),i(Vm,Qm),i(zm,Zm),i(zm,Xm),i(Xm,ng),i(zm,ag),i(zm,sg),i(sg,tg),l(n,eg,a),l(n,og,a),i(og,pg),i(pg,cg),i(cg,rg),i(og,ig),i(og,lg),i(lg,ug),i(ug,kg),i(ug,hg),i(hg,dg),i(ug,fg),i(lg,mg),i(lg,gg),i(gg,vg),i(gg,Eg),i(Eg,yg),i(yg,wg),i(gg,bg),l(n,xg,a),l(n,_g,a),i(_g,Cg),i(Cg,Tg),i(Tg,Og),i(_g,Sg),i(_g,Ag),i(Ag,Ig),i(Ag,Pg),i(Pg,Dg),i(Ag,Lg),i(Ag,jg),i(jg,$g),i(Ag,Rg),i(_g,Hg),i(_g,Ng),i(Ng,Bg),i(Bg,Mg),i(Mg,Wg),i(Wg,Gg),i(Mg,Kg),i(Ng,qg),i(Ng,Ug),i(Ug,Fg),i(Fg,Jg),i(Jg,zg),i(Fg,Yg),i(Ng,Vg),i(Ng,Qg),i(Qg,Zg),i(Zg,Xg),i(Xg,nv),i(Zg,av),i(Zg,sv),i(sv,tv),i(Zg,ev),i(Zg,ov),i(ov,pv),i(Qg,cv),i(Qg,rv),rv.innerHTML='<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">let</span> reactive1<span class="token punctuation">;</span>\n  <span class="token keyword">let</span> reactive2<span class="token punctuation">;</span>\n  <span class="token keyword">let</span> key<span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token language-javascript"><span class="token punctuation">&#123;</span>#key key<span class="token punctuation">&#125;</span></span>\n   <span class="token language-javascript"><span class="token punctuation">&#123;</span>key<span class="token punctuation">&#125;</span></span> <span class="token language-javascript"><span class="token punctuation">&#123;</span>reactive1<span class="token punctuation">&#125;</span></span>\n<span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span>key<span class="token punctuation">&#125;</span></span>\n\n<span class="token language-javascript"><span class="token punctuation">&#123;</span>reactive2<span class="token punctuation">&#125;</span></span></code>',i(Ng,iv),i(Ng,lv),i(lv,uv),i(uv,kv),i(kv,hv),i(uv,dv),i(lv,fv),i(lv,mv),mv.innerHTML='<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n   <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n   <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n   <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n     a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n     b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n   <span class="token punctuation">&#125;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n<span class="token language-javascript"><span class="token punctuation">&#123;</span>#key a <span class="token operator">+</span> b<span class="token punctuation">&#125;</span></span>\n   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">/></span></span>\n<span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span>key<span class="token punctuation">&#125;</span></span></code>',l(n,gv,a),l(n,vv,a),i(vv,Ev),i(Ev,yv),i(yv,wv),i(vv,bv),i(vv,xv),i(xv,_v),i(xv,Cv),i(Cv,Tv),i(xv,Ov),i(vv,Sv),i(vv,Av),i(vv,Iv),i(vv,Pv),i(Pv,Dv),i(Pv,Lv),i(Lv,jv),i(Pv,$v),i(vv,Rv),i(vv,Hv),i(Hv,Nv),i(Hv,Bv),i(Bv,Mv),i(Hv,Wv)},p:n,d(n){n&&u(s),n&&u(X),n&&u(nn),n&&u(Wn),n&&u(Gn),n&&u(Ot),n&&u(St),n&&u(xe),n&&u(_e),n&&u(Ve),n&&u(Qe),n&&u(bc),n&&u(xc),n&&u(tl),n&&u(el),n&&u(bm),n&&u(xm),n&&u(Jm),n&&u(zm),n&&u(eg),n&&u(og),n&&u(xg),n&&u(_g),n&&u(gv),n&&u(vv)}}}function hn(n){let s,t;const e=[dn];let o={$$slots:{default:[kn]},$$scope:{ctx:n}};for(let n=0;n<e.length;n+=1)o=a(o,e[n]);return s=new un({props:o}),{c(){K(s.$$.fragment)},l(n){q(s.$$.fragment,n)},m(n,a){U(s,n,a),t=!0},p(n,[a]){const t=0&a?function(n,a){const s={},t={},e={$$scope:1};let o=n.length;for(;o--;){const p=n[o],c=a[o];if(c){for(const n in p)n in c||(t[n]=1);for(const n in c)e[n]||(s[n]=c[n],e[n]=1);n[o]=c}else for(const n in p)e[n]=1}for(const n in t)n in s||(s[n]=void 0);return s}(e,[(o=dn,"object"==typeof o&&null!==o?o:{})]):{};var o;1&a&&(t.$$scope={dirty:a,ctx:n}),s.$set(t)},i(n){t||(W(s.$$.fragment,n),t=!0)},o(n){G(s.$$.fragment,n),t=!1},d(n){F(s,n)}}}const dn={title:"Contributing to Svelte - Implement {#key}",date:"2020-09-27T08:00:00Z",tags:["Svelte","JavaScript","Open Source"],series:"Contributing to Svelte",description:"I am going to share an anecdote on how I implemented {#key} logic block in Svelte",slug:"contributing-to-svelte-implement-key-block",type:"blog"};class fn extends Y{constructor(n){super(),z(this,n,null,hn,p,{})}}setTimeout(()=>{new fn({target:document.querySelector("#app"),hydrate:!0});if(document.querySelector(".twitter-tweet")){const n=document.createElement("script");n.async=!0,n.src="https://platform.twitter.com/widgets.js",n.charset="utf-8",document.body.appendChild(n)}if("loading"in HTMLImageElement.prototype){document.querySelectorAll('img[loading="lazy"]').forEach(n=>{n.src=n.dataset.src})}else{const n=document.createElement("script");n.src="https://cdnjs.cloudflare.com/ajax/libs/lazysizes/5.1.2/lazysizes.min.js",document.body.appendChild(n)}},3e3);
