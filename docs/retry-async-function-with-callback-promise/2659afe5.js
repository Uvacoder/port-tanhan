function n(){}function a(n,a){for(const s in a)n[s]=a[s];return n}function s(n){return n()}function t(){return Object.create(null)}function e(n){n.forEach(s)}function o(n){return"function"==typeof n}function p(n,a){return n!=n?a==a:n!==a||n&&"object"==typeof n||"function"==typeof n}function c(n,s,t,e){return n[1]&&e?a(t.ctx.slice(),n[1](e(s))):t.ctx}function l(n,a,s,t,e,o,p){const l=function(n,a,s,t){if(n[2]&&t){const e=n[2](t(s));if(void 0===a.dirty)return e;if("object"==typeof e){const n=[],s=Math.max(a.dirty.length,e.length);for(let t=0;t<s;t+=1)n[t]=a.dirty[t]|e[t];return n}return a.dirty|e}return a.dirty}(a,t,e,o);if(l){const e=c(a,s,t,p);n.p(e,l)}}function u(n,a){n.appendChild(a)}function i(n,a,s){n.insertBefore(a,s||null)}function r(n){n.parentNode.removeChild(n)}function k(n,a){for(let s=0;s<n.length;s+=1)n[s]&&n[s].d(a)}function h(n){return document.createElement(n)}function f(n){return document.createElementNS("http://www.w3.org/2000/svg",n)}function d(n){return document.createTextNode(n)}function m(){return d(" ")}function g(){return d("")}function w(n,a,s){null==s?n.removeAttribute(a):n.getAttribute(a)!==s&&n.setAttribute(a,s)}function y(n){return Array.from(n.childNodes)}function E(n,a,s,t){for(let t=0;t<n.length;t+=1){const e=n[t];if(e.nodeName===a){let a=0;const o=[];for(;a<e.attributes.length;){const n=e.attributes[a++];s[n.name]||o.push(n.name)}for(let n=0;n<o.length;n++)e.removeAttribute(o[n]);return n.splice(t,1)[0]}}return t?f(a):h(a)}function v(n,a){for(let s=0;s<n.length;s+=1){const t=n[s];if(3===t.nodeType)return t.data=""+a,n.splice(s,1)[0]}return d(a)}function b(n){return v(n," ")}function P(n,a){a=""+a,n.wholeText!==a&&(n.data=a)}function j(n,a){n.value=null==a?"":a}class T{constructor(n=null){this.a=n,this.e=this.n=null}m(n,a,s=null){this.e||(this.e=h(a.nodeName),this.t=a,this.h(n)),this.i(s)}h(n){this.e.innerHTML=n,this.n=Array.from(this.e.childNodes)}i(n){for(let a=0;a<this.n.length;a+=1)i(this.t,this.n[a],n)}p(n){this.d(),this.h(n),this.i(this.a)}d(){this.n.forEach(r)}}let C;function O(n){C=n}function L(n){(function(){if(!C)throw new Error("Function called outside component initialization");return C})().$$.on_mount.push(n)}const A=[],$=[],D=[],x=[],M=Promise.resolve();let I=!1;function S(n){D.push(n)}let H=!1;const N=new Set;function F(){if(!H){H=!0;do{for(let n=0;n<A.length;n+=1){const a=A[n];O(a),R(a.$$)}for(A.length=0;$.length;)$.pop()();for(let n=0;n<D.length;n+=1){const a=D[n];N.has(a)||(N.add(a),a())}D.length=0}while(A.length);for(;x.length;)x.pop()();I=!1,H=!1,N.clear()}}function R(n){if(null!==n.fragment){n.update(),e(n.before_update);const a=n.dirty;n.dirty=[-1],n.fragment&&n.fragment.p(n.ctx,a),n.after_update.forEach(S)}}const W=new Set;function q(n,a){n&&n.i&&(W.delete(n),n.i(a))}function _(n,a,s,t){if(n&&n.o){if(W.has(n))return;W.add(n),(void 0).c.push(()=>{W.delete(n),t&&(s&&n.d(1),t())}),n.o(a)}}function J(n){n&&n.c()}function B(n,a){n&&n.l(a)}function U(n,a,t){const{fragment:p,on_mount:c,on_destroy:l,after_update:u}=n.$$;p&&p.m(a,t),S(()=>{const a=c.map(s).filter(o);l?l.push(...a):e(a),n.$$.on_mount=[]}),u.forEach(S)}function z(n,a){const s=n.$$;null!==s.fragment&&(e(s.on_destroy),s.fragment&&s.fragment.d(a),s.on_destroy=s.fragment=null,s.ctx=[])}function G(n,a){-1===n.$$.dirty[0]&&(A.push(n),I||(I=!0,M.then(F)),n.$$.dirty.fill(0)),n.$$.dirty[a/31|0]|=1<<a%31}function V(a,s,o,p,c,l,u=[-1]){const i=C;O(a);const k=s.props||{},h=a.$$={fragment:null,ctx:null,props:l,update:n,not_equal:c,bound:t(),on_mount:[],on_destroy:[],before_update:[],after_update:[],context:new Map(i?i.$$.context:[]),callbacks:t(),dirty:u};let f=!1;if(h.ctx=o?o(a,k,(n,s,...t)=>{const e=t.length?t[0]:s;return h.ctx&&c(h.ctx[n],h.ctx[n]=e)&&(h.bound[n]&&h.bound[n](e),f&&G(a,n)),s}):[],h.update(),f=!0,e(h.before_update),h.fragment=!!p&&p(h.ctx),s.target){if(s.hydrate){const n=y(s.target);h.fragment&&h.fragment.l(n),n.forEach(r)}else h.fragment&&h.fragment.c();s.intro&&q(a.$$.fragment),U(a,s.target,s.anchor),F()}O(i)}class Y{$destroy(){z(this,1),this.$destroy=n}$on(n,a){const s=this.$$.callbacks[n]||(this.$$.callbacks[n]=[]);return s.push(a),()=>{const n=s.indexOf(a);-1!==n&&s.splice(n,1)}}$set(){}}function K(a){let s,t,e,o,p,c,l,k,g,P,j,T,C,O,L,A,$,D,x,M,I,S,H,N,F,R,W,q,_,J,B,U,z,G,V;return{c(){s=h("header"),t=h("nav"),e=h("ul"),o=h("li"),p=h("a"),c=d("Tan Li Hau"),l=m(),k=h("li"),g=h("a"),P=d("About"),j=m(),T=h("li"),C=h("a"),O=d("Writings"),L=m(),A=h("li"),$=h("a"),D=d("Talks"),x=m(),M=h("li"),I=h("a"),S=d("Notes"),H=m(),N=h("li"),F=h("a"),R=d("Newsletter"),W=m(),q=h("li"),_=h("a"),J=f("svg"),B=f("path"),U=m(),z=h("a"),G=f("svg"),V=f("path"),this.h()},l(n){s=E(n,"HEADER",{class:!0});var a=y(s);t=E(a,"NAV",{});var u=y(t);e=E(u,"UL",{class:!0});var i=y(e);o=E(i,"LI",{class:!0});var h=y(o);p=E(h,"A",{href:!0,class:!0});var f=y(p);c=v(f,"Tan Li Hau"),f.forEach(r),h.forEach(r),l=b(i),k=E(i,"LI",{class:!0});var d=y(k);g=E(d,"A",{href:!0,class:!0});var m=y(g);P=v(m,"About"),m.forEach(r),d.forEach(r),j=b(i),T=E(i,"LI",{class:!0});var w=y(T);C=E(w,"A",{href:!0,class:!0});var Y=y(C);O=v(Y,"Writings"),Y.forEach(r),w.forEach(r),L=b(i),A=E(i,"LI",{class:!0});var K=y(A);$=E(K,"A",{href:!0,class:!0});var Z=y($);D=v(Z,"Talks"),Z.forEach(r),K.forEach(r),x=b(i),M=E(i,"LI",{class:!0});var Q=y(M);I=E(Q,"A",{href:!0,class:!0});var X=y(I);S=v(X,"Notes"),X.forEach(r),Q.forEach(r),H=b(i),N=E(i,"LI",{class:!0});var nn=y(N);F=E(nn,"A",{href:!0,class:!0});var an=y(F);R=v(an,"Newsletter"),an.forEach(r),nn.forEach(r),W=b(i),q=E(i,"LI",{class:!0});var sn=y(q);_=E(sn,"A",{"aria-label":!0,href:!0,class:!0});var tn=y(_);J=E(tn,"svg",{viewBox:!0,width:!0,height:!0,class:!0},1);var en=y(J);B=E(en,"path",{d:!0},1),y(B).forEach(r),en.forEach(r),tn.forEach(r),U=b(sn),z=E(sn,"A",{"aria-label":!0,href:!0,class:!0});var on=y(z);G=E(on,"svg",{viewBox:!0,width:!0,height:!0,class:!0},1);var pn=y(G);V=E(pn,"path",{d:!0},1),y(V).forEach(r),pn.forEach(r),on.forEach(r),sn.forEach(r),i.forEach(r),u.forEach(r),a.forEach(r),this.h()},h(){w(p,"href","/"),w(p,"class","svelte-f3e4uo"),w(o,"class","svelte-f3e4uo"),w(g,"href","/about"),w(g,"class","svelte-f3e4uo"),w(k,"class","svelte-f3e4uo"),w(C,"href","/blogs"),w(C,"class","svelte-f3e4uo"),w(T,"class","svelte-f3e4uo"),w($,"href","/talks"),w($,"class","svelte-f3e4uo"),w(A,"class","svelte-f3e4uo"),w(I,"href","/notes"),w(I,"class","svelte-f3e4uo"),w(M,"class","svelte-f3e4uo"),w(F,"href","/newsletter"),w(F,"class","svelte-f3e4uo"),w(N,"class","svelte-f3e4uo"),w(B,"d","M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66\n    10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5\n    4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"),w(J,"viewBox","0 0 24 24"),w(J,"width","1em"),w(J,"height","1em"),w(J,"class","svelte-f3e4uo"),w(_,"aria-label","Twitter account"),w(_,"href","https://twitter.com/lihautan"),w(_,"class","svelte-f3e4uo"),w(V,"d","M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0\n    0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07\n    5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65\n    5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42\n    3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"),w(G,"viewBox","0 0 24 24"),w(G,"width","1em"),w(G,"height","1em"),w(G,"class","svelte-f3e4uo"),w(z,"aria-label","Github account"),w(z,"href","https://github.com/tanhauhau"),w(z,"class","svelte-f3e4uo"),w(q,"class","social svelte-f3e4uo"),w(e,"class","svelte-f3e4uo"),w(s,"class","svelte-f3e4uo")},m(n,a){i(n,s,a),u(s,t),u(t,e),u(e,o),u(o,p),u(p,c),u(e,l),u(e,k),u(k,g),u(g,P),u(e,j),u(e,T),u(T,C),u(C,O),u(e,L),u(e,A),u(A,$),u($,D),u(e,x),u(e,M),u(M,I),u(I,S),u(e,H),u(e,N),u(N,F),u(F,R),u(e,W),u(e,q),u(q,_),u(_,J),u(J,B),u(q,U),u(q,z),u(z,G),u(G,V)},p:n,i:n,o:n,d(n){n&&r(s)}}}class Z extends Y{constructor(n){super(),V(this,n,null,K,p,{})}}function Q(a){let s,t,e,o,p,c,l,k,f,g,P,T,C,O,L,A,$,D,x,M;return{c(){s=h("div"),t=h("h1"),e=d("Subscribe to my newsletter"),o=m(),p=h("h2"),c=d("Get the latest blog posts and project updates delivered right to your inbox"),l=m(),k=h("form"),f=h("div"),g=h("input"),P=m(),T=h("input"),O=m(),L=h("input"),A=m(),$=h("p"),D=d("Powered by Buttondown."),this.h()},l(n){s=E(n,"DIV",{class:!0});var a=y(s);t=E(a,"H1",{});var u=y(t);e=v(u,"Subscribe to my newsletter"),u.forEach(r),o=b(a),p=E(a,"H2",{class:!0});var i=y(p);c=v(i,"Get the latest blog posts and project updates delivered right to your inbox"),i.forEach(r),l=b(a),k=E(a,"FORM",{action:!0,method:!0,target:!0,onsubmit:!0,class:!0});var h=y(k);f=E(h,"DIV",{class:!0});var d=y(f);g=E(d,"INPUT",{type:!0,name:!0,id:!0,"aria-label":!0,placeholder:!0,class:!0}),P=b(d),T=E(d,"INPUT",{type:!0,value:!0,disabled:!0,class:!0}),d.forEach(r),O=b(h),L=E(h,"INPUT",{type:!0,value:!0,name:!0,class:!0}),A=b(h),$=E(h,"P",{class:!0});var m=y($);D=v(m,"Powered by Buttondown."),m.forEach(r),h.forEach(r),a.forEach(r),this.h()},h(){w(p,"class","svelte-1k1s1co"),w(g,"type","email"),w(g,"name","email"),w(g,"id","bd-email"),w(g,"aria-label","email address"),w(g,"placeholder","youremail@example.com"),w(g,"class","svelte-1k1s1co"),w(T,"type","submit"),T.value="Subscribe",T.disabled=C=!a[0],w(T,"class","svelte-1k1s1co"),w(f,"class","form-item svelte-1k1s1co"),w(L,"type","hidden"),L.value="1",w(L,"name","embed"),w(L,"class","svelte-1k1s1co"),w($,"class","svelte-1k1s1co"),w(k,"action","https://buttondown.email/api/emails/embed-subscribe/lihautan"),w(k,"method","post"),w(k,"target","popupwindow"),w(k,"onsubmit","window.open('https://buttondown.email/lihautan', 'popupwindow')"),w(k,"class","embeddable-buttondown-form"),w(s,"class","form svelte-1k1s1co")},m(n,r){var h,d,m,w;i(n,s,r),u(s,t),u(t,e),u(s,o),u(s,p),u(p,c),u(s,l),u(s,k),u(k,f),u(f,g),j(g,a[0]),u(f,P),u(f,T),u(k,O),u(k,L),u(k,A),u(k,$),u($,D),x||(h=g,d="input",m=a[1],h.addEventListener(d,m,w),M=()=>h.removeEventListener(d,m,w),x=!0)},p(n,[a]){1&a&&g.value!==n[0]&&j(g,n[0]),1&a&&C!==(C=!n[0])&&(T.disabled=C)},i:n,o:n,d(n){n&&r(s),x=!1,M()}}}function X(n,a,s){let t;return[t,function(){t=this.value,s(0,t)}]}class nn extends Y{constructor(n){super(),V(this,n,X,Q,p,{})}}function an(n){return L(()=>(setTimeout(()=>{if(window.innerWidth>1080){const n=document.createElement("script");n.async=!0,n.type="text/javascript",n.src="//cdn.carbonads.com/carbon.js?serve=CE7ITK3E&placement=lihautancom",n.id="_carbonads_js",document.body.appendChild(n)}},5e3),()=>{try{const n=document.getElementById("carbonads");n.parentNode.removeChild(n)}catch(n){}})),[]}class sn extends Y{constructor(n){super(),V(this,n,an,null,p,{})}}var tn="https://lihautan.com/retry-async-function-with-callback-promise/assets/hero-twitter-3c52317b.jpg";function en(n,a,s){const t=n.slice();return t[6]=a[s],t}function on(n,a,s){const t=n.slice();return t[6]=a[s],t}function pn(n){let a,s;return{c(){a=h("meta"),this.h()},l(n){a=E(n,"META",{name:!0,content:!0}),this.h()},h(){w(a,"name","keywords"),w(a,"content",s=n[6])},m(n,s){i(n,a,s)},p(n,t){4&t&&s!==(s=n[6])&&w(a,"content",s)},d(n){n&&r(a)}}}function cn(n){let a,s,t=n[6]+"";return{c(){a=h("span"),s=d(t),this.h()},l(n){a=E(n,"SPAN",{class:!0});var e=y(a);s=v(e,t),e.forEach(r),this.h()},h(){w(a,"class","svelte-9tqnza")},m(n,t){i(n,a,t),u(a,s)},p(n,a){4&a&&t!==(t=n[6]+"")&&P(s,t)},d(n){n&&r(a)}}}function ln(n){let a,s,t,e,o,p,f,j,C,O,L,A,$,D,x,M,I,S,H,N,F,R,W,G,V,Y,K,Q,X,an,ln,un,rn,kn,hn,fn,dn,mn,gn,wn=`<script type="application/ld+json">${JSON.stringify({"@context":"https://schema.org","@type":"Article",author:n[3],copyrightHolder:n[3],copyrightYear:"2020",creator:n[3],publisher:n[3],description:n[1],headline:n[0],name:n[0],inLanguage:"en"})}<\/script>`,yn=`<script type="application/ld+json">${JSON.stringify({"@context":"https://schema.org","@type":"BreadcrumbList",description:"Breadcrumbs list",name:"Breadcrumbs",itemListElement:[{"@type":"ListItem",item:{"@id":"https://lihautan.com",name:"Homepage"},position:1},{"@type":"ListItem",item:{"@id":"https%3A%2F%2Flihautan.com%2Fretry-async-function-with-callback-promise",name:n[0]},position:2}]})}<\/script>`;document.title=a=n[0]+" | Tan Li Hau";let En=n[2],vn=[];for(let a=0;a<En.length;a+=1)vn[a]=pn(on(n,En,a));W=new Z({});let bn=n[2],Pn=[];for(let a=0;a<bn.length;a+=1)Pn[a]=cn(en(n,bn,a));const jn=n[5].default,Tn=function(n,a,s,t){if(n){const e=c(n,a,s,t);return n[0](e)}}(jn,n,n[4],null);return rn=new nn({}),hn=new sn({}),{c(){s=h("meta"),t=h("meta"),e=h("meta"),o=h("meta"),p=h("meta"),f=h("meta"),j=h("meta"),C=h("meta"),O=h("meta"),L=h("meta"),A=h("meta");for(let n=0;n<vn.length;n+=1)vn[n].c();$=h("meta"),D=h("meta"),M=g(),S=g(),H=m(),N=h("a"),F=d("Skip to content"),R=m(),J(W.$$.fragment),G=m(),V=h("main"),Y=h("h1"),K=d(n[0]),Q=m();for(let n=0;n<Pn.length;n+=1)Pn[n].c();X=m(),an=h("article"),Tn&&Tn.c(),ln=m(),un=h("footer"),J(rn.$$.fragment),kn=m(),J(hn.$$.fragment),fn=m(),mn=g(),this.h()},l(a){const c=function(n,a=document.body){return Array.from(a.querySelectorAll(n))}('[data-svelte="svelte-n0q11s"]',document.head);s=E(c,"META",{name:!0,content:!0}),t=E(c,"META",{name:!0,content:!0}),e=E(c,"META",{name:!0,content:!0}),o=E(c,"META",{name:!0,content:!0}),p=E(c,"META",{name:!0,content:!0}),f=E(c,"META",{name:!0,content:!0}),j=E(c,"META",{name:!0,content:!0}),C=E(c,"META",{name:!0,content:!0}),O=E(c,"META",{name:!0,content:!0}),L=E(c,"META",{name:!0,content:!0}),A=E(c,"META",{name:!0,content:!0});for(let n=0;n<vn.length;n+=1)vn[n].l(c);$=E(c,"META",{itemprop:!0,content:!0}),D=E(c,"META",{itemprop:!0,content:!0}),M=g(),S=g(),c.forEach(r),H=b(a),N=E(a,"A",{href:!0,class:!0});var l=y(N);F=v(l,"Skip to content"),l.forEach(r),R=b(a),B(W.$$.fragment,a),G=b(a),V=E(a,"MAIN",{id:!0,class:!0});var u=y(V);Y=E(u,"H1",{});var i=y(Y);K=v(i,n[0]),i.forEach(r),Q=b(u);for(let n=0;n<Pn.length;n+=1)Pn[n].l(u);X=b(u),an=E(u,"ARTICLE",{});var k=y(an);Tn&&Tn.l(k),k.forEach(r),u.forEach(r),ln=b(a),un=E(a,"FOOTER",{class:!0});var h=y(un);B(rn.$$.fragment,h),kn=b(h),B(hn.$$.fragment,h),h.forEach(r),fn=b(a),mn=g(),this.h()},h(){w(s,"name","description"),w(s,"content",n[1]),w(t,"name","image"),w(t,"content",tn),w(e,"name","og:image"),w(e,"content",tn),w(o,"name","og:title"),w(o,"content",n[0]),w(p,"name","og:description"),w(p,"content",n[1]),w(f,"name","og:type"),w(f,"content","website"),w(j,"name","twitter:card"),w(j,"content","summary_large_image"),w(C,"name","twitter:creator"),w(C,"content","@lihautan"),w(O,"name","twitter:title"),w(O,"content",n[0]),w(L,"name","twitter:description"),w(L,"content",n[1]),w(A,"name","twitter:image"),w(A,"content",tn),w($,"itemprop","url"),w($,"content","https%3A%2F%2Flihautan.com%2Fretry-async-function-with-callback-promise"),w(D,"itemprop","image"),w(D,"content",tn),x=new T(M),I=new T(S),w(N,"href","#content"),w(N,"class","skip svelte-9tqnza"),w(V,"id","content"),w(V,"class","blog svelte-9tqnza"),w(un,"class","svelte-9tqnza"),dn=new T(mn)},m(n,a){u(document.head,s),u(document.head,t),u(document.head,e),u(document.head,o),u(document.head,p),u(document.head,f),u(document.head,j),u(document.head,C),u(document.head,O),u(document.head,L),u(document.head,A);for(let n=0;n<vn.length;n+=1)vn[n].m(document.head,null);u(document.head,$),u(document.head,D),x.m(wn,document.head),u(document.head,M),I.m(yn,document.head),u(document.head,S),i(n,H,a),i(n,N,a),u(N,F),i(n,R,a),U(W,n,a),i(n,G,a),i(n,V,a),u(V,Y),u(Y,K),u(V,Q);for(let n=0;n<Pn.length;n+=1)Pn[n].m(V,null);u(V,X),u(V,an),Tn&&Tn.m(an,null),i(n,ln,a),i(n,un,a),U(rn,un,null),u(un,kn),U(hn,un,null),i(n,fn,a),dn.m('<script async defer src="https://platform.twitter.com/widgets.js" charset="utf-8"><\/script>',n,a),i(n,mn,a),gn=!0},p(n,[t]){if((!gn||1&t)&&a!==(a=n[0]+" | Tan Li Hau")&&(document.title=a),(!gn||2&t)&&w(s,"content",n[1]),(!gn||1&t)&&w(o,"content",n[0]),(!gn||2&t)&&w(p,"content",n[1]),(!gn||1&t)&&w(O,"content",n[0]),(!gn||2&t)&&w(L,"content",n[1]),4&t){let a;for(En=n[2],a=0;a<En.length;a+=1){const s=on(n,En,a);vn[a]?vn[a].p(s,t):(vn[a]=pn(s),vn[a].c(),vn[a].m($.parentNode,$))}for(;a<vn.length;a+=1)vn[a].d(1);vn.length=En.length}if((!gn||3&t)&&wn!==(wn=`<script type="application/ld+json">${JSON.stringify({"@context":"https://schema.org","@type":"Article",author:n[3],copyrightHolder:n[3],copyrightYear:"2020",creator:n[3],publisher:n[3],description:n[1],headline:n[0],name:n[0],inLanguage:"en"})}<\/script>`)&&x.p(wn),(!gn||1&t)&&yn!==(yn=`<script type="application/ld+json">${JSON.stringify({"@context":"https://schema.org","@type":"BreadcrumbList",description:"Breadcrumbs list",name:"Breadcrumbs",itemListElement:[{"@type":"ListItem",item:{"@id":"https://lihautan.com",name:"Homepage"},position:1},{"@type":"ListItem",item:{"@id":"https%3A%2F%2Flihautan.com%2Fretry-async-function-with-callback-promise",name:n[0]},position:2}]})}<\/script>`)&&I.p(yn),(!gn||1&t)&&P(K,n[0]),4&t){let a;for(bn=n[2],a=0;a<bn.length;a+=1){const s=en(n,bn,a);Pn[a]?Pn[a].p(s,t):(Pn[a]=cn(s),Pn[a].c(),Pn[a].m(V,X))}for(;a<Pn.length;a+=1)Pn[a].d(1);Pn.length=bn.length}Tn&&Tn.p&&16&t&&l(Tn,jn,n,n[4],t,null,null)},i(n){gn||(q(W.$$.fragment,n),q(Tn,n),q(rn.$$.fragment,n),q(hn.$$.fragment,n),gn=!0)},o(n){_(W.$$.fragment,n),_(Tn,n),_(rn.$$.fragment,n),_(hn.$$.fragment,n),gn=!1},d(n){r(s),r(t),r(e),r(o),r(p),r(f),r(j),r(C),r(O),r(L),r(A),k(vn,n),r($),r(D),r(M),n&&x.d(),r(S),n&&I.d(),n&&r(H),n&&r(N),n&&r(R),z(W,n),n&&r(G),n&&r(V),k(Pn,n),Tn&&Tn.d(n),n&&r(ln),n&&r(un),z(rn),z(hn),n&&r(fn),n&&r(mn),n&&dn.d()}}}function un(n,a,s){let{title:t=""}=a,{description:e=""}=a,{tags:o=[]}=a;const p={"@type":"Person",name:"Tan Li Hau"};let{$$slots:c={},$$scope:l}=a;return n.$set=n=>{"title"in n&&s(0,t=n.title),"description"in n&&s(1,e=n.description),"tags"in n&&s(2,o=n.tags),"$$scope"in n&&s(4,l=n.$$scope)},[t,e,o,p,l,c]}class rn extends Y{constructor(n){super(),V(this,n,un,ln,p,{title:0,description:1,tags:2})}}function kn(a){let s,t,e,o,p,c,l,k,f,g,P,j,T,C,O,L,A,$,D,x,M,I,S,H,N,F,R,W,q,_,J,B,U,z,G,V,Y,K,Z,Q,X,nn,an,sn,tn,en,on,pn,cn,ln,un,rn,kn,hn,fn,dn,mn,gn,wn,yn,En,vn,bn,Pn,jn,Tn,Cn,On,Ln,An,$n,Dn,xn,Mn,In,Sn,Hn,Nn,Fn,Rn,Wn,qn,_n,Jn,Bn,Un,zn,Gn,Vn,Yn,Kn,Zn,Qn,Xn,na,aa,sa,ta,ea,oa,pa,ca,la,ua,ia,ra,ka,ha,fa,da,ma,ga,wa,ya,Ea,va,ba,Pa,ja,Ta,Ca,Oa,La,Aa,$a,Da,xa,Ma,Ia,Sa,Ha,Na,Fa,Ra,Wa,qa,_a,Ja,Ba,Ua,za,Ga,Va,Ya,Ka,Za,Qa,Xa,ns,as,ss,ts,es,os,ps,cs,ls,us,is,rs,ks,hs,fs,ds,ms,gs,ws,ys,Es,vs,bs,Ps,js,Ts,Cs,Os,Ls,As,$s,Ds,xs,Ms,Is,Ss,Hs,Ns,Fs,Rs,Ws,qs,_s,Js,Bs,Us,zs,Gs,Vs,Ys,Ks,Zs,Qs,Xs,nt,at,st,tt,et,ot,pt,ct,lt,ut,it,rt,kt,ht,ft,dt,mt,gt,wt,yt,Et,vt,bt,Pt,jt,Tt,Ct,Ot,Lt,At,$t,Dt,xt,Mt,It,St,Ht,Nt,Ft,Rt,Wt,qt,_t,Jt,Bt,Ut,zt,Gt,Vt,Yt,Kt,Zt,Qt,Xt,ne,ae,se,te,ee,oe,pe,ce,le,ue,ie,re,ke,he,fe,de,me,ge,we,ye,Ee,ve,be,Pe,je,Te,Ce,Oe,Le,Ae,$e,De,xe,Me,Ie,Se,He,Ne,Fe,Re,We,qe,_e,Je,Be,Ue,ze,Ge,Ve,Ye,Ke,Ze,Qe,Xe,no,ao,so,to,eo,oo,po,co,lo,uo,io,ro,ko,ho,fo,mo,go,wo,yo,Eo,vo,bo,Po,jo,To,Co,Oo,Lo,Ao,$o,Do,xo,Mo,Io,So,Ho,No,Fo,Ro,Wo,qo,_o,Jo,Bo,Uo,zo,Go,Vo,Yo,Ko,Zo,Qo,Xo,np,ap,sp,tp,ep,op,pp,cp,lp,up,ip,rp,kp,hp,fp,dp,mp,gp,wp,yp,Ep,vp,bp,Pp,jp,Tp,Cp,Op,Lp,Ap,$p,Dp,xp,Mp,Ip,Sp,Hp,Np,Fp,Rp,Wp,qp,_p,Jp,Bp,Up,zp,Gp,Vp,Yp,Kp,Zp,Qp,Xp,nc,ac,sc,tc,ec,oc,pc,cc,lc,uc,ic,rc,kc,hc,fc,dc,mc,gc,wc,yc,Ec,vc,bc,Pc,jc,Tc,Cc,Oc,Lc,Ac,$c,Dc,xc,Mc,Ic,Sc,Hc,Nc,Fc,Rc,Wc,qc,_c,Jc,Bc,Uc,zc,Gc,Vc,Yc,Kc,Zc,Qc,Xc,nl,al,sl,tl,el,ol,pl,cl,ll,ul,il,rl,kl,hl,fl,dl,ml,gl,wl,yl,El,vl,bl,Pl,jl,Tl,Cl,Ol,Ll,Al,$l,Dl,xl,Ml,Il,Sl,Hl,Nl,Fl,Rl,Wl,ql,_l,Jl,Bl,Ul,zl,Gl,Vl,Yl,Kl,Zl,Ql,Xl,nu,au,su,tu,eu,ou,pu,cu,lu,uu,iu,ru,ku,hu,fu,du,mu,gu,wu,yu,Eu,vu,bu,Pu,ju,Tu,Cu,Ou,Lu,Au,$u,Du,xu,Mu,Iu,Su,Hu,Nu,Fu,Ru,Wu,qu,_u,Ju,Bu,Uu,zu,Gu,Vu,Yu,Ku,Zu,Qu,Xu,ni,ai,si,ti,ei,oi,pi,ci,li,ui,ii,ri,ki,hi,fi,di,mi,gi,wi,yi,Ei,vi,bi,Pi,ji,Ti,Ci,Oi,Li,Ai,$i,Di,xi,Mi,Ii,Si,Hi,Ni,Fi,Ri,Wi,qi,_i,Ji,Bi,Ui,zi,Gi,Vi,Yi,Ki,Zi,Qi,Xi,nr,ar,sr,tr,er,or;return{c(){s=h("section"),t=h("ul"),e=h("li"),o=h("a"),p=d("The callback pattern"),c=h("li"),l=h("a"),k=d("The promise chain"),f=h("li"),g=h("a"),P=d("Async await"),j=h("li"),T=h("a"),C=d("Testing"),O=h("li"),L=h("a"),A=d("Closing Note"),$=m(),D=h("p"),x=d("JavaScript is a single-threaded programming language, which means only one thing can happen at a time in a single thread."),M=m(),I=h("p"),S=d("That’s where asynchronous JavaScript comes into play. Using asynchronous JavaScript (such as callbacks, promises, and async/await), you can perform long network requests without blocking the main thread."),H=m(),N=h("p"),F=d("In this article, I'm going to show how you can retry an asynchronous function in JavaScript, using the callback pattern, promise chain pattern and async await. Also, I'll show you how to write test to verify it works."),R=m(),W=h("section"),q=h("h2"),_=h("a"),J=d("The callback pattern"),B=m(),U=h("p"),z=d("Let's take a look at retrying asynchronous function that takes in a callback function that follows "),G=h("a"),V=d("the callback convention"),Y=d(":"),K=m(),Z=h("ul"),Q=h("li"),X=d("The first argument of the callback function is an error object"),nn=m(),an=h("li"),sn=d("The second argument contains the callback results."),tn=m(),en=h("pre"),on=m(),pn=h("p"),cn=d("So we are going to implement the "),ln=h("code"),un=d("retry"),rn=d(" function, that takes in the asynchronous function to retry, "),kn=h("code"),hn=d("fn"),fn=d(" and a callback function, "),dn=h("code"),mn=d("cb"),gn=d(", that will be called when the function succeeded or failed after all the retry attempts."),wn=m(),yn=h("pre"),En=m(),vn=h("p"),bn=d("The first thing we are going to do is to call the function "),Pn=h("code"),jn=d("fn"),Tn=d(":"),Cn=m(),On=h("pre"),Ln=m(),An=h("p"),$n=d("We check if there's an error, if there's no error, we can call the "),Dn=h("code"),xn=d("cb"),Mn=d(" function to indicate the function succeeded. However, if there's an error, we are going to call the function again to retry."),In=m(),Sn=h("pre"),Hn=m(),Nn=h("p"),Fn=d("Let's retry at most 3 times:"),Rn=m(),Wn=h("pre"),qn=m(),_n=h("p"),Jn=d("Notice that it starts to get unwieldy as we are nesting more callback functions. It's hard to figure out which close bracket "),Bn=h("code"),Un=d("}"),zn=d(" is belong to without proper indentation."),Gn=m(),Vn=h("p"),Yn=d("This is the so-called "),Kn=h("a"),Zn=d('"Callback Hell"'),Qn=d(" in JavaScript."),Xn=m(),na=h("p"),aa=d("Let's make it more unbearable to prove the point by flipping the if case:"),sa=m(),ta=h("pre"),ea=m(),oa=h("p"),pa=d("Now can you tell which "),ca=h("code"),la=d("data"),ua=d(" is belong to which function?"),ia=m(),ra=h("p"),ka=d("Now, instead of always retry at most 3 times, we are going to retry at most "),ha=h("code"),fa=d("n"),da=d(" times."),ma=m(),ga=h("p"),wa=d("So we are going to introduce a new argument, "),ya=h("code"),Ea=d("n"),va=d(":"),ba=m(),Pa=h("pre"),ja=m(),Ta=h("p"),Ca=d("The function keeps going forever, until it reaches "),Oa=h("code"),La=d("n"),Aa=d(" attempt."),$a=m(),Da=h("p"),xa=d("If you stare at the code hard enough, you would notice that the code starts to repeat itself:"),Ma=m(),Ia=h("p"),Sa=h("picture"),Ha=h("source"),Na=h("source"),Fa=h("img"),Wa=m(),qa=h("p"),_a=d("Note that the code within the outer red square is the same as the code within the inner red square, which is the same as the inner inner red square ..."),Ja=m(),Ba=h("p"),Ua=d("So, let's extract the code within the red square out into a function and replace the red squares with the function:"),za=m(),Ga=h("pre"),Va=m(),Ya=h("p"),Ka=d("And there you go, retrying an asynchronous function with callback pattern."),Za=m(),Qa=h("p"),Xa=d("Does it work? Well, we have to test it to verify it. Stay till the end to see how we are going to write unit test to verify it."),ns=m(),as=h("section"),ss=h("h2"),ts=h("a"),es=d("The promise chain"),os=m(),ps=h("p"),cs=d("A "),ls=h("a"),us=d("Promise"),is=d(", according to MDN, object represents the eventual completion of an asynchronous operation, and its resulting value."),rs=m(),ks=h("p"),hs=d("A Promise object provides "),fs=h("code"),ds=d(".then"),ms=d(" and "),gs=h("code"),ws=d(".catch"),ys=d(" method, which takes in callback function to be called when the promise is resolved or rejected respectively. The "),Es=h("code"),vs=d(".then"),bs=d(" and "),Ps=h("code"),js=d(".catch"),Ts=d(" method then returns a new Promise of the return value of the callback function."),Cs=m(),Os=h("pre"),Ls=m(),As=h("p"),$s=d("The chaining of "),Ds=h("code"),xs=d(".then"),Ms=d(" and "),Is=h("code"),Ss=d(".catch"),Hs=d(" is a common pattern, called "),Ns=h("a"),Fs=d("Promise chaining"),Rs=d("."),Ws=m(),qs=h("p"),_s=d("Now, lets implement the "),Js=h("code"),Bs=d("retry"),Us=d(" function, which takes in the asynchronous function to retry, "),zs=h("code"),Gs=d("fn"),Vs=d(" and return a promise, which resolved when the function succeeded or resolved after failing all the retry attempts."),Ys=m(),Ks=h("pre"),Zs=m(),Qs=h("p"),Xs=d("The first thing we are going to do is to call the function "),nt=h("code"),at=d("fn"),st=d(":"),tt=m(),et=h("pre"),ot=m(),pt=h("p"),ct=d("We need to retry calling "),lt=h("code"),ut=d("fn"),it=d(" again, if the first "),rt=h("code"),kt=d("fn"),ht=d(" is rejected"),ft=m(),dt=h("pre"),mt=m(),gt=h("p"),wt=d("If that new promise rejected again, we retry by calling "),yt=h("code"),Et=d("fn"),vt=d(" again"),bt=m(),Pt=h("pre"),jt=m(),Tt=h("p"),Ct=d("The last promise "),Ot=h("em"),Lt=d("(promise#3)"),At=d(" will reject if the 3rd "),$t=h("code"),Dt=d("fn()"),xt=d(" attempt rejects, and resolve if any of the "),Mt=h("code"),It=d("fn()"),St=d(" attempts resolve."),Ht=m(),Nt=h("p"),Ft=d("The callback method within "),Rt=h("code"),Wt=d(".catch"),qt=d(" will be called only when the previous "),_t=h("code"),Jt=d("fn()"),Bt=d(" attempt rejects."),Ut=m(),zt=h("p"),Gt=d("We are going to return a rejected promise with the error indicating max retries has met, if the last promise "),Vt=h("code"),Yt=d("(promise#3)"),Kt=d(" rejected, and a resolved promise with the result from "),Zt=h("code"),Qt=d("fn()"),Xt=d("."),ne=m(),ae=h("pre"),se=m(),te=h("p"),ee=d("And we can make the code more concise, as the following two are equivalent, in terms of what is being resolved and rejected:"),oe=m(),pe=h("pre"),ce=m(),le=h("p"),ue=d("Also, we can substitute the variable "),ie=h("code"),re=d("promise3"),ke=d(" with it's promise chain value:"),he=m(),fe=h("pre"),de=m(),me=h("p"),ge=d("Now, instead of always retry at most 3 times, we are going to retry at most "),we=h("code"),ye=d("n"),Ee=d(" times."),ve=m(),be=h("p"),Pe=d("So we are going to introduce a new argument, "),je=h("code"),Te=d("n"),Ce=d(":"),Oe=m(),Le=h("pre"),Ae=m(),$e=h("p"),De=d("Instead of writing "),xe=h("code"),Me=d(".catch(() => fn())"),Ie=m(),Se=h("code"),He=d("n"),Ne=d(" number of times, we can build the Promise up using a for loop."),Fe=m(),Re=h("p"),We=h("strong"),qe=d("Assuming "),_e=h("code"),Je=d("n"),Be=d(" is always greater or equal to 1,"),Ue=m(),ze=h("pre"),Ge=m(),Ve=h("p"),Ye=d("What if "),Ke=h("code"),Ze=d("n"),Qe=d(" is "),Xe=h("code"),no=d("0"),ao=d(" or negative? We shouldn't call "),so=h("code"),to=d("fn()"),eo=d(" at all!"),oo=m(),po=h("pre"),co=m(),lo=h("p"),uo=d("Well, this maybe a little bit inelegant, having to execute the "),io=h("code"),ro=d("if (!promise) ... else ..."),ko=d(" on every loop, we can initialise the promise with a rejected promise, so that we can treat the 1st "),ho=h("code"),fo=d("fn()"),mo=d(" called as the 1st retry:"),go=m(),wo=h("pre"),yo=m(),Eo=h("p"),vo=d("And there you go, retrying an asynchronous function with promise chain."),bo=m(),Po=h("section"),jo=h("h2"),To=h("a"),Co=d("Async await"),Oo=m(),Lo=h("p"),Ao=d("When you use a promise, you need to use "),$o=h("code"),Do=d(".then"),xo=d(" to get the resolved value, and that happened asynchronously."),Mo=m(),Io=h("p"),So=d("Meaning, if you have"),Ho=m(),No=h("pre"),Fo=m(),Ro=h("p"),Wo=d("You would see"),qo=m(),_o=h("pre"),Jo=m(),Bo=h("p"),Uo=d("first, and then some time later,"),zo=m(),Go=h("pre"),Vo=m(),Yo=h("p"),Ko=d("This is because the function in the "),Zo=h("code"),Qo=d(".then"),Xo=d(" is called asynchronously, it is executed in a separate timeline of execution, so to speak."),np=m(),ap=h("p"),sp=d("And "),tp=h("code"),ep=d("async"),op=d(" + "),pp=h("code"),cp=d("await"),lp=d(" in JavaScript allow us to stitch multiple separate timeline of execution into disguisedly 1 timeline of execution flow."),up=m(),ip=h("p"),rp=d("Everytime when we "),kp=h("code"),hp=d("await"),fp=d(", we jump into a different asynchronous timeline."),dp=m(),mp=h("p"),gp=d("So, with the code with Promise + "),wp=h("code"),yp=d(".then"),Ep=d(":"),vp=m(),bp=h("pre"),Pp=m(),jp=h("p"),Tp=d("can be written in "),Cp=h("code"),Op=d("async"),Lp=d(" + "),Ap=h("code"),$p=d("await"),Dp=d(" in the following manner:"),xp=m(),Mp=h("pre"),Ip=m(),Sp=h("p"),Hp=d("Now, lets implement the "),Np=h("code"),Fp=d("retry"),Rp=d(" function using "),Wp=h("code"),qp=d("async"),_p=d(" + "),Jp=h("code"),Bp=d("await"),Up=d("."),zp=m(),Gp=h("pre"),Vp=m(),Yp=h("p"),Kp=d("The first thing we are going to do is to call the function "),Zp=h("code"),Qp=d("fn"),Xp=d(":"),nc=m(),ac=h("pre"),sc=m(),tc=h("p"),ec=d("We need to retry calling "),oc=h("code"),pc=d("fn"),cc=d(" again, if the first "),lc=h("code"),uc=d("fn"),ic=d(" is rejected. Instead of "),rc=h("code"),kc=d(".catch"),hc=d(", we use "),fc=h("code"),dc=d("await"),mc=d(" + "),gc=h("code"),wc=d("try catch"),yc=m(),Ec=h("pre"),vc=m(),bc=h("p"),Pc=d("If the 2nd "),jc=h("code"),Tc=d("fn()"),Cc=d(" rejected again, we retry by calling "),Oc=h("code"),Lc=d("fn"),Ac=d(" again"),$c=m(),Dc=h("pre"),xc=m(),Mc=h("p"),Ic=d("And if the last "),Sc=h("code"),Hc=d("fn()"),Nc=d(" rejected again, we are going to return a rejected promise with an error indicating max retries has met by throw the error"),Fc=m(),Rc=h("pre"),Wc=m(),qc=h("p"),_c=d("Now, if we need to return a Promise resolved with the resolved value from "),Jc=h("code"),Bc=d("fn()"),Uc=m(),zc=h("pre"),Gc=m(),Vc=h("p"),Yc=d("Since we are ending early in the "),Kc=h("code"),Zc=d("try"),Qc=d(" block, and we are not using the error from the "),Xc=h("code"),nl=d("catch"),al=d(" block, we can make the code less nested"),sl=m(),tl=h("pre"),el=m(),ol=h("p"),pl=d("Now, instead of always retry at most 3 times, we are going to retry at most "),cl=h("code"),ll=d("n"),ul=d(" times."),il=m(),rl=h("p"),kl=d("So we are going to introduce a new argument, "),hl=h("code"),fl=d("n"),dl=d(":"),ml=m(),gl=h("pre"),wl=m(),yl=h("p"),El=d("Instead of writing it "),vl=h("code"),bl=d("n"),Pl=d(" number of times, we can achieve it using a "),jl=h("code"),Tl=d("for"),Cl=d(" loop:"),Ol=m(),Ll=h("pre"),Al=m(),$l=h("p"),Dl=d("And there you go, retrying an asynchronous function using "),xl=h("code"),Ml=d("async"),Il=d(" + "),Sl=h("code"),Hl=d("await"),Nl=d("."),Fl=m(),Rl=h("section"),Wl=h("h2"),ql=h("a"),_l=d("Testing"),Jl=m(),Bl=h("p"),Ul=d("To test whether our "),zl=h("code"),Gl=d("retry"),Vl=d(" function works, we need to have a max number of retry in mind, say 3. And we need a function, "),Yl=h("code"),Kl=d("fn"),Zl=d(" that we can control when it succeed and when it failed."),Ql=m(),Xl=h("p"),nu=d("So we can have the following test cases:"),au=m(),su=h("ul"),tu=h("li"),eu=h("code"),ou=d("fn"),pu=d(" always succeed;"),cu=h("ul"),lu=h("li"),uu=d("verify "),iu=h("code"),ru=d("fn"),ku=d(" get called only 1 time"),hu=m(),fu=h("li"),du=d("verify we get the return value from the 1st attempt"),mu=m(),gu=h("li"),wu=h("code"),yu=d("fn"),Eu=d(" failed on 1st attempt, and succeed thereafter;"),vu=h("ul"),bu=h("li"),Pu=d("verify "),ju=h("code"),Tu=d("fn"),Cu=d(" get called only 2 times"),Ou=m(),Lu=h("li"),Au=d("verify we get the return value from the 2nd attempt"),$u=m(),Du=h("li"),xu=h("code"),Mu=d("fn"),Iu=d(" failed on 1st, 2nd attempt, and succeed thereafter;"),Su=h("ul"),Hu=h("li"),Nu=d("verify "),Fu=h("code"),Ru=d("fn"),Wu=d(" get called only 3 times"),qu=m(),_u=h("li"),Ju=d("verify we get the return value from the 3rd attempt"),Bu=m(),Uu=h("li"),zu=h("code"),Gu=d("fn"),Vu=d(" failed on 1st, 2nd, 3rd attempt, and succeed thereafter;"),Yu=h("ul"),Ku=h("li"),Zu=d("verify "),Qu=h("code"),Xu=d("fn"),ni=d(" get called only 3 times"),ai=m(),si=h("li"),ti=d("verify we get the max retry error"),ei=m(),oi=h("p"),pi=d("So, the key is to devise such "),ci=h("code"),li=d("fn"),ui=d(" that we can control when it succeed and when it failed."),ii=m(),ri=h("p"),ki=d("We can create a function that returns such function"),hi=m(),fi=h("pre"),di=m(),mi=h("p"),gi=d("The function takes in number indicating how many time the return function would fail, before succeeding thereafter"),wi=m(),yi=h("pre"),Ei=m(),vi=h("p"),bi=d("To know how many times the function is called, we can track it with a variable"),Pi=m(),ji=h("pre"),Ti=m(),Ci=h("p"),Oi=d("As long as the number of times called is less than the number of time it should fail, it will fail."),Li=m(),Ai=h("pre"),$i=m(),Di=h("p"),xi=d('Next, to verify the function get called a certain number of times, we can create a "spy" function:'),Mi=m(),Ii=h("pre"),Si=m(),Hi=h("p"),Ni=d("So, let's put all of them together:"),Fi=m(),Ri=h("pre"),Wi=m(),qi=h("section"),_i=h("h2"),Ji=h("a"),Bi=d("Closing Note"),Ui=m(),zi=h("p"),Gi=d("We've seen how we can retry an asynchronous function using the callback pattern, promise chain pattern and "),Vi=h("code"),Yi=d("async"),Ki=d(" + "),Zi=h("code"),Qi=d("await"),Xi=d("."),nr=m(),ar=h("p"),sr=d("Each of the 3 methods is important in its on right, albeit some is more verbose than another."),tr=m(),er=h("p"),or=d("Lastly, we also cover how to write test to verify our code, and also how to create the mock function to facilitate our test cases."),this.h()},l(n){s=E(n,"SECTION",{});var a=y(s);t=E(a,"UL",{class:!0,id:!0,role:!0,"aria-label":!0});var u=y(t);e=E(u,"LI",{});var i=y(e);o=E(i,"A",{href:!0});var h=y(o);p=v(h,"The callback pattern"),h.forEach(r),i.forEach(r),c=E(u,"LI",{});var d=y(c);l=E(d,"A",{href:!0});var m=y(l);k=v(m,"The promise chain"),m.forEach(r),d.forEach(r),f=E(u,"LI",{});var w=y(f);g=E(w,"A",{href:!0});var Ra=y(g);P=v(Ra,"Async await"),Ra.forEach(r),w.forEach(r),j=E(u,"LI",{});var pr=y(j);T=E(pr,"A",{href:!0});var cr=y(T);C=v(cr,"Testing"),cr.forEach(r),pr.forEach(r),O=E(u,"LI",{});var lr=y(O);L=E(lr,"A",{href:!0});var ur=y(L);A=v(ur,"Closing Note"),ur.forEach(r),lr.forEach(r),u.forEach(r),a.forEach(r),$=b(n),D=E(n,"P",{});var ir=y(D);x=v(ir,"JavaScript is a single-threaded programming language, which means only one thing can happen at a time in a single thread."),ir.forEach(r),M=b(n),I=E(n,"P",{});var rr=y(I);S=v(rr,"That’s where asynchronous JavaScript comes into play. Using asynchronous JavaScript (such as callbacks, promises, and async/await), you can perform long network requests without blocking the main thread."),rr.forEach(r),H=b(n),N=E(n,"P",{});var kr=y(N);F=v(kr,"In this article, I'm going to show how you can retry an asynchronous function in JavaScript, using the callback pattern, promise chain pattern and async await. Also, I'll show you how to write test to verify it works."),kr.forEach(r),R=b(n),W=E(n,"SECTION",{});var hr=y(W);q=E(hr,"H2",{});var fr=y(q);_=E(fr,"A",{href:!0,id:!0});var dr=y(_);J=v(dr,"The callback pattern"),dr.forEach(r),fr.forEach(r),B=b(hr),U=E(hr,"P",{});var mr=y(U);z=v(mr,"Let's take a look at retrying asynchronous function that takes in a callback function that follows "),G=E(mr,"A",{href:!0,rel:!0});var gr=y(G);V=v(gr,"the callback convention"),gr.forEach(r),Y=v(mr,":"),mr.forEach(r),K=b(hr),Z=E(hr,"UL",{});var wr=y(Z);Q=E(wr,"LI",{});var yr=y(Q);X=v(yr,"The first argument of the callback function is an error object"),yr.forEach(r),nn=b(wr),an=E(wr,"LI",{});var Er=y(an);sn=v(Er,"The second argument contains the callback results."),Er.forEach(r),wr.forEach(r),tn=b(hr),en=E(hr,"PRE",{class:!0}),y(en).forEach(r),on=b(hr),pn=E(hr,"P",{});var vr=y(pn);cn=v(vr,"So we are going to implement the "),ln=E(vr,"CODE",{});var br=y(ln);un=v(br,"retry"),br.forEach(r),rn=v(vr," function, that takes in the asynchronous function to retry, "),kn=E(vr,"CODE",{});var Pr=y(kn);hn=v(Pr,"fn"),Pr.forEach(r),fn=v(vr," and a callback function, "),dn=E(vr,"CODE",{});var jr=y(dn);mn=v(jr,"cb"),jr.forEach(r),gn=v(vr,", that will be called when the function succeeded or failed after all the retry attempts."),vr.forEach(r),wn=b(hr),yn=E(hr,"PRE",{class:!0}),y(yn).forEach(r),En=b(hr),vn=E(hr,"P",{});var Tr=y(vn);bn=v(Tr,"The first thing we are going to do is to call the function "),Pn=E(Tr,"CODE",{});var Cr=y(Pn);jn=v(Cr,"fn"),Cr.forEach(r),Tn=v(Tr,":"),Tr.forEach(r),Cn=b(hr),On=E(hr,"PRE",{class:!0}),y(On).forEach(r),Ln=b(hr),An=E(hr,"P",{});var Or=y(An);$n=v(Or,"We check if there's an error, if there's no error, we can call the "),Dn=E(Or,"CODE",{});var Lr=y(Dn);xn=v(Lr,"cb"),Lr.forEach(r),Mn=v(Or," function to indicate the function succeeded. However, if there's an error, we are going to call the function again to retry."),Or.forEach(r),In=b(hr),Sn=E(hr,"PRE",{class:!0}),y(Sn).forEach(r),Hn=b(hr),Nn=E(hr,"P",{});var Ar=y(Nn);Fn=v(Ar,"Let's retry at most 3 times:"),Ar.forEach(r),Rn=b(hr),Wn=E(hr,"PRE",{class:!0}),y(Wn).forEach(r),qn=b(hr),_n=E(hr,"P",{});var $r=y(_n);Jn=v($r,"Notice that it starts to get unwieldy as we are nesting more callback functions. It's hard to figure out which close bracket "),Bn=E($r,"CODE",{});var Dr=y(Bn);Un=v(Dr,"}"),Dr.forEach(r),zn=v($r," is belong to without proper indentation."),$r.forEach(r),Gn=b(hr),Vn=E(hr,"P",{});var xr=y(Vn);Yn=v(xr,"This is the so-called "),Kn=E(xr,"A",{href:!0,rel:!0});var Mr=y(Kn);Zn=v(Mr,'"Callback Hell"'),Mr.forEach(r),Qn=v(xr," in JavaScript."),xr.forEach(r),Xn=b(hr),na=E(hr,"P",{});var Ir=y(na);aa=v(Ir,"Let's make it more unbearable to prove the point by flipping the if case:"),Ir.forEach(r),sa=b(hr),ta=E(hr,"PRE",{class:!0}),y(ta).forEach(r),ea=b(hr),oa=E(hr,"P",{});var Sr=y(oa);pa=v(Sr,"Now can you tell which "),ca=E(Sr,"CODE",{});var Hr=y(ca);la=v(Hr,"data"),Hr.forEach(r),ua=v(Sr," is belong to which function?"),Sr.forEach(r),ia=b(hr),ra=E(hr,"P",{});var Nr=y(ra);ka=v(Nr,"Now, instead of always retry at most 3 times, we are going to retry at most "),ha=E(Nr,"CODE",{});var Fr=y(ha);fa=v(Fr,"n"),Fr.forEach(r),da=v(Nr," times."),Nr.forEach(r),ma=b(hr),ga=E(hr,"P",{});var Rr=y(ga);wa=v(Rr,"So we are going to introduce a new argument, "),ya=E(Rr,"CODE",{});var Wr=y(ya);Ea=v(Wr,"n"),Wr.forEach(r),va=v(Rr,":"),Rr.forEach(r),ba=b(hr),Pa=E(hr,"PRE",{class:!0}),y(Pa).forEach(r),ja=b(hr),Ta=E(hr,"P",{});var qr=y(Ta);Ca=v(qr,"The function keeps going forever, until it reaches "),Oa=E(qr,"CODE",{});var _r=y(Oa);La=v(_r,"n"),_r.forEach(r),Aa=v(qr," attempt."),qr.forEach(r),$a=b(hr),Da=E(hr,"P",{});var Jr=y(Da);xa=v(Jr,"If you stare at the code hard enough, you would notice that the code starts to repeat itself:"),Jr.forEach(r),Ma=b(hr),Ia=E(hr,"P",{});var Br=y(Ia);Sa=E(Br,"PICTURE",{});var Ur=y(Sa);Ha=E(Ur,"SOURCE",{type:!0,srcset:!0}),Na=E(Ur,"SOURCE",{type:!0,srcset:!0}),Fa=E(Ur,"IMG",{alt:!0,src:!0}),Ur.forEach(r),Br.forEach(r),Wa=b(hr),qa=E(hr,"P",{});var zr=y(qa);_a=v(zr,"Note that the code within the outer red square is the same as the code within the inner red square, which is the same as the inner inner red square ..."),zr.forEach(r),Ja=b(hr),Ba=E(hr,"P",{});var Gr=y(Ba);Ua=v(Gr,"So, let's extract the code within the red square out into a function and replace the red squares with the function:"),Gr.forEach(r),za=b(hr),Ga=E(hr,"PRE",{class:!0}),y(Ga).forEach(r),Va=b(hr),Ya=E(hr,"P",{});var Vr=y(Ya);Ka=v(Vr,"And there you go, retrying an asynchronous function with callback pattern."),Vr.forEach(r),Za=b(hr),Qa=E(hr,"P",{});var Yr=y(Qa);Xa=v(Yr,"Does it work? Well, we have to test it to verify it. Stay till the end to see how we are going to write unit test to verify it."),Yr.forEach(r),hr.forEach(r),ns=b(n),as=E(n,"SECTION",{});var Kr=y(as);ss=E(Kr,"H2",{});var Zr=y(ss);ts=E(Zr,"A",{href:!0,id:!0});var Qr=y(ts);es=v(Qr,"The promise chain"),Qr.forEach(r),Zr.forEach(r),os=b(Kr),ps=E(Kr,"P",{});var Xr=y(ps);cs=v(Xr,"A "),ls=E(Xr,"A",{href:!0,rel:!0});var nk=y(ls);us=v(nk,"Promise"),nk.forEach(r),is=v(Xr,", according to MDN, object represents the eventual completion of an asynchronous operation, and its resulting value."),Xr.forEach(r),rs=b(Kr),ks=E(Kr,"P",{});var ak=y(ks);hs=v(ak,"A Promise object provides "),fs=E(ak,"CODE",{});var sk=y(fs);ds=v(sk,".then"),sk.forEach(r),ms=v(ak," and "),gs=E(ak,"CODE",{});var tk=y(gs);ws=v(tk,".catch"),tk.forEach(r),ys=v(ak," method, which takes in callback function to be called when the promise is resolved or rejected respectively. The "),Es=E(ak,"CODE",{});var ek=y(Es);vs=v(ek,".then"),ek.forEach(r),bs=v(ak," and "),Ps=E(ak,"CODE",{});var ok=y(Ps);js=v(ok,".catch"),ok.forEach(r),Ts=v(ak," method then returns a new Promise of the return value of the callback function."),ak.forEach(r),Cs=b(Kr),Os=E(Kr,"PRE",{class:!0}),y(Os).forEach(r),Ls=b(Kr),As=E(Kr,"P",{});var pk=y(As);$s=v(pk,"The chaining of "),Ds=E(pk,"CODE",{});var ck=y(Ds);xs=v(ck,".then"),ck.forEach(r),Ms=v(pk," and "),Is=E(pk,"CODE",{});var lk=y(Is);Ss=v(lk,".catch"),lk.forEach(r),Hs=v(pk," is a common pattern, called "),Ns=E(pk,"A",{href:!0,rel:!0});var uk=y(Ns);Fs=v(uk,"Promise chaining"),uk.forEach(r),Rs=v(pk,"."),pk.forEach(r),Ws=b(Kr),qs=E(Kr,"P",{});var ik=y(qs);_s=v(ik,"Now, lets implement the "),Js=E(ik,"CODE",{});var rk=y(Js);Bs=v(rk,"retry"),rk.forEach(r),Us=v(ik," function, which takes in the asynchronous function to retry, "),zs=E(ik,"CODE",{});var kk=y(zs);Gs=v(kk,"fn"),kk.forEach(r),Vs=v(ik," and return a promise, which resolved when the function succeeded or resolved after failing all the retry attempts."),ik.forEach(r),Ys=b(Kr),Ks=E(Kr,"PRE",{class:!0}),y(Ks).forEach(r),Zs=b(Kr),Qs=E(Kr,"P",{});var hk=y(Qs);Xs=v(hk,"The first thing we are going to do is to call the function "),nt=E(hk,"CODE",{});var fk=y(nt);at=v(fk,"fn"),fk.forEach(r),st=v(hk,":"),hk.forEach(r),tt=b(Kr),et=E(Kr,"PRE",{class:!0}),y(et).forEach(r),ot=b(Kr),pt=E(Kr,"P",{});var dk=y(pt);ct=v(dk,"We need to retry calling "),lt=E(dk,"CODE",{});var mk=y(lt);ut=v(mk,"fn"),mk.forEach(r),it=v(dk," again, if the first "),rt=E(dk,"CODE",{});var gk=y(rt);kt=v(gk,"fn"),gk.forEach(r),ht=v(dk," is rejected"),dk.forEach(r),ft=b(Kr),dt=E(Kr,"PRE",{class:!0}),y(dt).forEach(r),mt=b(Kr),gt=E(Kr,"P",{});var wk=y(gt);wt=v(wk,"If that new promise rejected again, we retry by calling "),yt=E(wk,"CODE",{});var yk=y(yt);Et=v(yk,"fn"),yk.forEach(r),vt=v(wk," again"),wk.forEach(r),bt=b(Kr),Pt=E(Kr,"PRE",{class:!0}),y(Pt).forEach(r),jt=b(Kr),Tt=E(Kr,"P",{});var Ek=y(Tt);Ct=v(Ek,"The last promise "),Ot=E(Ek,"EM",{});var vk=y(Ot);Lt=v(vk,"(promise#3)"),vk.forEach(r),At=v(Ek," will reject if the 3rd "),$t=E(Ek,"CODE",{});var bk=y($t);Dt=v(bk,"fn()"),bk.forEach(r),xt=v(Ek," attempt rejects, and resolve if any of the "),Mt=E(Ek,"CODE",{});var Pk=y(Mt);It=v(Pk,"fn()"),Pk.forEach(r),St=v(Ek," attempts resolve."),Ek.forEach(r),Ht=b(Kr),Nt=E(Kr,"P",{});var jk=y(Nt);Ft=v(jk,"The callback method within "),Rt=E(jk,"CODE",{});var Tk=y(Rt);Wt=v(Tk,".catch"),Tk.forEach(r),qt=v(jk," will be called only when the previous "),_t=E(jk,"CODE",{});var Ck=y(_t);Jt=v(Ck,"fn()"),Ck.forEach(r),Bt=v(jk," attempt rejects."),jk.forEach(r),Ut=b(Kr),zt=E(Kr,"P",{});var Ok=y(zt);Gt=v(Ok,"We are going to return a rejected promise with the error indicating max retries has met, if the last promise "),Vt=E(Ok,"CODE",{});var Lk=y(Vt);Yt=v(Lk,"(promise#3)"),Lk.forEach(r),Kt=v(Ok," rejected, and a resolved promise with the result from "),Zt=E(Ok,"CODE",{});var Ak=y(Zt);Qt=v(Ak,"fn()"),Ak.forEach(r),Xt=v(Ok,"."),Ok.forEach(r),ne=b(Kr),ae=E(Kr,"PRE",{class:!0}),y(ae).forEach(r),se=b(Kr),te=E(Kr,"P",{});var $k=y(te);ee=v($k,"And we can make the code more concise, as the following two are equivalent, in terms of what is being resolved and rejected:"),$k.forEach(r),oe=b(Kr),pe=E(Kr,"PRE",{class:!0}),y(pe).forEach(r),ce=b(Kr),le=E(Kr,"P",{});var Dk=y(le);ue=v(Dk,"Also, we can substitute the variable "),ie=E(Dk,"CODE",{});var xk=y(ie);re=v(xk,"promise3"),xk.forEach(r),ke=v(Dk," with it's promise chain value:"),Dk.forEach(r),he=b(Kr),fe=E(Kr,"PRE",{class:!0}),y(fe).forEach(r),de=b(Kr),me=E(Kr,"P",{});var Mk=y(me);ge=v(Mk,"Now, instead of always retry at most 3 times, we are going to retry at most "),we=E(Mk,"CODE",{});var Ik=y(we);ye=v(Ik,"n"),Ik.forEach(r),Ee=v(Mk," times."),Mk.forEach(r),ve=b(Kr),be=E(Kr,"P",{});var Sk=y(be);Pe=v(Sk,"So we are going to introduce a new argument, "),je=E(Sk,"CODE",{});var Hk=y(je);Te=v(Hk,"n"),Hk.forEach(r),Ce=v(Sk,":"),Sk.forEach(r),Oe=b(Kr),Le=E(Kr,"PRE",{class:!0}),y(Le).forEach(r),Ae=b(Kr),$e=E(Kr,"P",{});var Nk=y($e);De=v(Nk,"Instead of writing "),xe=E(Nk,"CODE",{});var Fk=y(xe);Me=v(Fk,".catch(() => fn())"),Fk.forEach(r),Ie=b(Nk),Se=E(Nk,"CODE",{});var Rk=y(Se);He=v(Rk,"n"),Rk.forEach(r),Ne=v(Nk," number of times, we can build the Promise up using a for loop."),Nk.forEach(r),Fe=b(Kr),Re=E(Kr,"P",{});var Wk=y(Re);We=E(Wk,"STRONG",{});var qk=y(We);qe=v(qk,"Assuming "),_e=E(qk,"CODE",{});var _k=y(_e);Je=v(_k,"n"),_k.forEach(r),Be=v(qk," is always greater or equal to 1,"),qk.forEach(r),Wk.forEach(r),Ue=b(Kr),ze=E(Kr,"PRE",{class:!0}),y(ze).forEach(r),Ge=b(Kr),Ve=E(Kr,"P",{});var Jk=y(Ve);Ye=v(Jk,"What if "),Ke=E(Jk,"CODE",{});var Bk=y(Ke);Ze=v(Bk,"n"),Bk.forEach(r),Qe=v(Jk," is "),Xe=E(Jk,"CODE",{});var Uk=y(Xe);no=v(Uk,"0"),Uk.forEach(r),ao=v(Jk," or negative? We shouldn't call "),so=E(Jk,"CODE",{});var zk=y(so);to=v(zk,"fn()"),zk.forEach(r),eo=v(Jk," at all!"),Jk.forEach(r),oo=b(Kr),po=E(Kr,"PRE",{class:!0}),y(po).forEach(r),co=b(Kr),lo=E(Kr,"P",{});var Gk=y(lo);uo=v(Gk,"Well, this maybe a little bit inelegant, having to execute the "),io=E(Gk,"CODE",{});var Vk=y(io);ro=v(Vk,"if (!promise) ... else ..."),Vk.forEach(r),ko=v(Gk," on every loop, we can initialise the promise with a rejected promise, so that we can treat the 1st "),ho=E(Gk,"CODE",{});var Yk=y(ho);fo=v(Yk,"fn()"),Yk.forEach(r),mo=v(Gk," called as the 1st retry:"),Gk.forEach(r),go=b(Kr),wo=E(Kr,"PRE",{class:!0}),y(wo).forEach(r),yo=b(Kr),Eo=E(Kr,"P",{});var Kk=y(Eo);vo=v(Kk,"And there you go, retrying an asynchronous function with promise chain."),Kk.forEach(r),Kr.forEach(r),bo=b(n),Po=E(n,"SECTION",{});var Zk=y(Po);jo=E(Zk,"H2",{});var Qk=y(jo);To=E(Qk,"A",{href:!0,id:!0});var Xk=y(To);Co=v(Xk,"Async await"),Xk.forEach(r),Qk.forEach(r),Oo=b(Zk),Lo=E(Zk,"P",{});var nh=y(Lo);Ao=v(nh,"When you use a promise, you need to use "),$o=E(nh,"CODE",{});var ah=y($o);Do=v(ah,".then"),ah.forEach(r),xo=v(nh," to get the resolved value, and that happened asynchronously."),nh.forEach(r),Mo=b(Zk),Io=E(Zk,"P",{});var sh=y(Io);So=v(sh,"Meaning, if you have"),sh.forEach(r),Ho=b(Zk),No=E(Zk,"PRE",{class:!0}),y(No).forEach(r),Fo=b(Zk),Ro=E(Zk,"P",{});var th=y(Ro);Wo=v(th,"You would see"),th.forEach(r),qo=b(Zk),_o=E(Zk,"PRE",{class:!0}),y(_o).forEach(r),Jo=b(Zk),Bo=E(Zk,"P",{});var eh=y(Bo);Uo=v(eh,"first, and then some time later,"),eh.forEach(r),zo=b(Zk),Go=E(Zk,"PRE",{class:!0}),y(Go).forEach(r),Vo=b(Zk),Yo=E(Zk,"P",{});var oh=y(Yo);Ko=v(oh,"This is because the function in the "),Zo=E(oh,"CODE",{});var ph=y(Zo);Qo=v(ph,".then"),ph.forEach(r),Xo=v(oh," is called asynchronously, it is executed in a separate timeline of execution, so to speak."),oh.forEach(r),np=b(Zk),ap=E(Zk,"P",{});var ch=y(ap);sp=v(ch,"And "),tp=E(ch,"CODE",{});var lh=y(tp);ep=v(lh,"async"),lh.forEach(r),op=v(ch," + "),pp=E(ch,"CODE",{});var uh=y(pp);cp=v(uh,"await"),uh.forEach(r),lp=v(ch," in JavaScript allow us to stitch multiple separate timeline of execution into disguisedly 1 timeline of execution flow."),ch.forEach(r),up=b(Zk),ip=E(Zk,"P",{});var ih=y(ip);rp=v(ih,"Everytime when we "),kp=E(ih,"CODE",{});var rh=y(kp);hp=v(rh,"await"),rh.forEach(r),fp=v(ih,", we jump into a different asynchronous timeline."),ih.forEach(r),dp=b(Zk),mp=E(Zk,"P",{});var kh=y(mp);gp=v(kh,"So, with the code with Promise + "),wp=E(kh,"CODE",{});var hh=y(wp);yp=v(hh,".then"),hh.forEach(r),Ep=v(kh,":"),kh.forEach(r),vp=b(Zk),bp=E(Zk,"PRE",{class:!0}),y(bp).forEach(r),Pp=b(Zk),jp=E(Zk,"P",{});var fh=y(jp);Tp=v(fh,"can be written in "),Cp=E(fh,"CODE",{});var dh=y(Cp);Op=v(dh,"async"),dh.forEach(r),Lp=v(fh," + "),Ap=E(fh,"CODE",{});var mh=y(Ap);$p=v(mh,"await"),mh.forEach(r),Dp=v(fh," in the following manner:"),fh.forEach(r),xp=b(Zk),Mp=E(Zk,"PRE",{class:!0}),y(Mp).forEach(r),Ip=b(Zk),Sp=E(Zk,"P",{});var gh=y(Sp);Hp=v(gh,"Now, lets implement the "),Np=E(gh,"CODE",{});var wh=y(Np);Fp=v(wh,"retry"),wh.forEach(r),Rp=v(gh," function using "),Wp=E(gh,"CODE",{});var yh=y(Wp);qp=v(yh,"async"),yh.forEach(r),_p=v(gh," + "),Jp=E(gh,"CODE",{});var Eh=y(Jp);Bp=v(Eh,"await"),Eh.forEach(r),Up=v(gh,"."),gh.forEach(r),zp=b(Zk),Gp=E(Zk,"PRE",{class:!0}),y(Gp).forEach(r),Vp=b(Zk),Yp=E(Zk,"P",{});var vh=y(Yp);Kp=v(vh,"The first thing we are going to do is to call the function "),Zp=E(vh,"CODE",{});var bh=y(Zp);Qp=v(bh,"fn"),bh.forEach(r),Xp=v(vh,":"),vh.forEach(r),nc=b(Zk),ac=E(Zk,"PRE",{class:!0}),y(ac).forEach(r),sc=b(Zk),tc=E(Zk,"P",{});var Ph=y(tc);ec=v(Ph,"We need to retry calling "),oc=E(Ph,"CODE",{});var jh=y(oc);pc=v(jh,"fn"),jh.forEach(r),cc=v(Ph," again, if the first "),lc=E(Ph,"CODE",{});var Th=y(lc);uc=v(Th,"fn"),Th.forEach(r),ic=v(Ph," is rejected. Instead of "),rc=E(Ph,"CODE",{});var Ch=y(rc);kc=v(Ch,".catch"),Ch.forEach(r),hc=v(Ph,", we use "),fc=E(Ph,"CODE",{});var Oh=y(fc);dc=v(Oh,"await"),Oh.forEach(r),mc=v(Ph," + "),gc=E(Ph,"CODE",{});var Lh=y(gc);wc=v(Lh,"try catch"),Lh.forEach(r),Ph.forEach(r),yc=b(Zk),Ec=E(Zk,"PRE",{class:!0}),y(Ec).forEach(r),vc=b(Zk),bc=E(Zk,"P",{});var Ah=y(bc);Pc=v(Ah,"If the 2nd "),jc=E(Ah,"CODE",{});var $h=y(jc);Tc=v($h,"fn()"),$h.forEach(r),Cc=v(Ah," rejected again, we retry by calling "),Oc=E(Ah,"CODE",{});var Dh=y(Oc);Lc=v(Dh,"fn"),Dh.forEach(r),Ac=v(Ah," again"),Ah.forEach(r),$c=b(Zk),Dc=E(Zk,"PRE",{class:!0}),y(Dc).forEach(r),xc=b(Zk),Mc=E(Zk,"P",{});var xh=y(Mc);Ic=v(xh,"And if the last "),Sc=E(xh,"CODE",{});var Mh=y(Sc);Hc=v(Mh,"fn()"),Mh.forEach(r),Nc=v(xh," rejected again, we are going to return a rejected promise with an error indicating max retries has met by throw the error"),xh.forEach(r),Fc=b(Zk),Rc=E(Zk,"PRE",{class:!0}),y(Rc).forEach(r),Wc=b(Zk),qc=E(Zk,"P",{});var Ih=y(qc);_c=v(Ih,"Now, if we need to return a Promise resolved with the resolved value from "),Jc=E(Ih,"CODE",{});var Sh=y(Jc);Bc=v(Sh,"fn()"),Sh.forEach(r),Ih.forEach(r),Uc=b(Zk),zc=E(Zk,"PRE",{class:!0}),y(zc).forEach(r),Gc=b(Zk),Vc=E(Zk,"P",{});var Hh=y(Vc);Yc=v(Hh,"Since we are ending early in the "),Kc=E(Hh,"CODE",{});var Nh=y(Kc);Zc=v(Nh,"try"),Nh.forEach(r),Qc=v(Hh," block, and we are not using the error from the "),Xc=E(Hh,"CODE",{});var Fh=y(Xc);nl=v(Fh,"catch"),Fh.forEach(r),al=v(Hh," block, we can make the code less nested"),Hh.forEach(r),sl=b(Zk),tl=E(Zk,"PRE",{class:!0}),y(tl).forEach(r),el=b(Zk),ol=E(Zk,"P",{});var Rh=y(ol);pl=v(Rh,"Now, instead of always retry at most 3 times, we are going to retry at most "),cl=E(Rh,"CODE",{});var Wh=y(cl);ll=v(Wh,"n"),Wh.forEach(r),ul=v(Rh," times."),Rh.forEach(r),il=b(Zk),rl=E(Zk,"P",{});var qh=y(rl);kl=v(qh,"So we are going to introduce a new argument, "),hl=E(qh,"CODE",{});var _h=y(hl);fl=v(_h,"n"),_h.forEach(r),dl=v(qh,":"),qh.forEach(r),ml=b(Zk),gl=E(Zk,"PRE",{class:!0}),y(gl).forEach(r),wl=b(Zk),yl=E(Zk,"P",{});var Jh=y(yl);El=v(Jh,"Instead of writing it "),vl=E(Jh,"CODE",{});var Bh=y(vl);bl=v(Bh,"n"),Bh.forEach(r),Pl=v(Jh," number of times, we can achieve it using a "),jl=E(Jh,"CODE",{});var Uh=y(jl);Tl=v(Uh,"for"),Uh.forEach(r),Cl=v(Jh," loop:"),Jh.forEach(r),Ol=b(Zk),Ll=E(Zk,"PRE",{class:!0}),y(Ll).forEach(r),Al=b(Zk),$l=E(Zk,"P",{});var zh=y($l);Dl=v(zh,"And there you go, retrying an asynchronous function using "),xl=E(zh,"CODE",{});var Gh=y(xl);Ml=v(Gh,"async"),Gh.forEach(r),Il=v(zh," + "),Sl=E(zh,"CODE",{});var Vh=y(Sl);Hl=v(Vh,"await"),Vh.forEach(r),Nl=v(zh,"."),zh.forEach(r),Zk.forEach(r),Fl=b(n),Rl=E(n,"SECTION",{});var Yh=y(Rl);Wl=E(Yh,"H2",{});var Kh=y(Wl);ql=E(Kh,"A",{href:!0,id:!0});var Zh=y(ql);_l=v(Zh,"Testing"),Zh.forEach(r),Kh.forEach(r),Jl=b(Yh),Bl=E(Yh,"P",{});var Qh=y(Bl);Ul=v(Qh,"To test whether our "),zl=E(Qh,"CODE",{});var Xh=y(zl);Gl=v(Xh,"retry"),Xh.forEach(r),Vl=v(Qh," function works, we need to have a max number of retry in mind, say 3. And we need a function, "),Yl=E(Qh,"CODE",{});var nf=y(Yl);Kl=v(nf,"fn"),nf.forEach(r),Zl=v(Qh," that we can control when it succeed and when it failed."),Qh.forEach(r),Ql=b(Yh),Xl=E(Yh,"P",{});var af=y(Xl);nu=v(af,"So we can have the following test cases:"),af.forEach(r),au=b(Yh),su=E(Yh,"UL",{});var sf=y(su);tu=E(sf,"LI",{});var tf=y(tu);eu=E(tf,"CODE",{});var ef=y(eu);ou=v(ef,"fn"),ef.forEach(r),pu=v(tf," always succeed;"),cu=E(tf,"UL",{});var of=y(cu);lu=E(of,"LI",{});var pf=y(lu);uu=v(pf,"verify "),iu=E(pf,"CODE",{});var cf=y(iu);ru=v(cf,"fn"),cf.forEach(r),ku=v(pf," get called only 1 time"),pf.forEach(r),hu=b(of),fu=E(of,"LI",{});var lf=y(fu);du=v(lf,"verify we get the return value from the 1st attempt"),lf.forEach(r),of.forEach(r),tf.forEach(r),mu=b(sf),gu=E(sf,"LI",{});var uf=y(gu);wu=E(uf,"CODE",{});var rf=y(wu);yu=v(rf,"fn"),rf.forEach(r),Eu=v(uf," failed on 1st attempt, and succeed thereafter;"),vu=E(uf,"UL",{});var kf=y(vu);bu=E(kf,"LI",{});var hf=y(bu);Pu=v(hf,"verify "),ju=E(hf,"CODE",{});var ff=y(ju);Tu=v(ff,"fn"),ff.forEach(r),Cu=v(hf," get called only 2 times"),hf.forEach(r),Ou=b(kf),Lu=E(kf,"LI",{});var df=y(Lu);Au=v(df,"verify we get the return value from the 2nd attempt"),df.forEach(r),kf.forEach(r),uf.forEach(r),$u=b(sf),Du=E(sf,"LI",{});var mf=y(Du);xu=E(mf,"CODE",{});var gf=y(xu);Mu=v(gf,"fn"),gf.forEach(r),Iu=v(mf," failed on 1st, 2nd attempt, and succeed thereafter;"),Su=E(mf,"UL",{});var wf=y(Su);Hu=E(wf,"LI",{});var yf=y(Hu);Nu=v(yf,"verify "),Fu=E(yf,"CODE",{});var Ef=y(Fu);Ru=v(Ef,"fn"),Ef.forEach(r),Wu=v(yf," get called only 3 times"),yf.forEach(r),qu=b(wf),_u=E(wf,"LI",{});var vf=y(_u);Ju=v(vf,"verify we get the return value from the 3rd attempt"),vf.forEach(r),wf.forEach(r),mf.forEach(r),Bu=b(sf),Uu=E(sf,"LI",{});var bf=y(Uu);zu=E(bf,"CODE",{});var Pf=y(zu);Gu=v(Pf,"fn"),Pf.forEach(r),Vu=v(bf," failed on 1st, 2nd, 3rd attempt, and succeed thereafter;"),Yu=E(bf,"UL",{});var jf=y(Yu);Ku=E(jf,"LI",{});var Tf=y(Ku);Zu=v(Tf,"verify "),Qu=E(Tf,"CODE",{});var Cf=y(Qu);Xu=v(Cf,"fn"),Cf.forEach(r),ni=v(Tf," get called only 3 times"),Tf.forEach(r),ai=b(jf),si=E(jf,"LI",{});var Of=y(si);ti=v(Of,"verify we get the max retry error"),Of.forEach(r),jf.forEach(r),bf.forEach(r),sf.forEach(r),ei=b(Yh),oi=E(Yh,"P",{});var Lf=y(oi);pi=v(Lf,"So, the key is to devise such "),ci=E(Lf,"CODE",{});var Af=y(ci);li=v(Af,"fn"),Af.forEach(r),ui=v(Lf," that we can control when it succeed and when it failed."),Lf.forEach(r),ii=b(Yh),ri=E(Yh,"P",{});var $f=y(ri);ki=v($f,"We can create a function that returns such function"),$f.forEach(r),hi=b(Yh),fi=E(Yh,"PRE",{class:!0}),y(fi).forEach(r),di=b(Yh),mi=E(Yh,"P",{});var Df=y(mi);gi=v(Df,"The function takes in number indicating how many time the return function would fail, before succeeding thereafter"),Df.forEach(r),wi=b(Yh),yi=E(Yh,"PRE",{class:!0}),y(yi).forEach(r),Ei=b(Yh),vi=E(Yh,"P",{});var xf=y(vi);bi=v(xf,"To know how many times the function is called, we can track it with a variable"),xf.forEach(r),Pi=b(Yh),ji=E(Yh,"PRE",{class:!0}),y(ji).forEach(r),Ti=b(Yh),Ci=E(Yh,"P",{});var Mf=y(Ci);Oi=v(Mf,"As long as the number of times called is less than the number of time it should fail, it will fail."),Mf.forEach(r),Li=b(Yh),Ai=E(Yh,"PRE",{class:!0}),y(Ai).forEach(r),$i=b(Yh),Di=E(Yh,"P",{});var If=y(Di);xi=v(If,'Next, to verify the function get called a certain number of times, we can create a "spy" function:'),If.forEach(r),Mi=b(Yh),Ii=E(Yh,"PRE",{class:!0}),y(Ii).forEach(r),Si=b(Yh),Hi=E(Yh,"P",{});var Sf=y(Hi);Ni=v(Sf,"So, let's put all of them together:"),Sf.forEach(r),Fi=b(Yh),Ri=E(Yh,"PRE",{class:!0}),y(Ri).forEach(r),Yh.forEach(r),Wi=b(n),qi=E(n,"SECTION",{});var Hf=y(qi);_i=E(Hf,"H2",{});var Nf=y(_i);Ji=E(Nf,"A",{href:!0,id:!0});var Ff=y(Ji);Bi=v(Ff,"Closing Note"),Ff.forEach(r),Nf.forEach(r),Ui=b(Hf),zi=E(Hf,"P",{});var Rf=y(zi);Gi=v(Rf,"We've seen how we can retry an asynchronous function using the callback pattern, promise chain pattern and "),Vi=E(Rf,"CODE",{});var Wf=y(Vi);Yi=v(Wf,"async"),Wf.forEach(r),Ki=v(Rf," + "),Zi=E(Rf,"CODE",{});var qf=y(Zi);Qi=v(qf,"await"),qf.forEach(r),Xi=v(Rf,"."),Rf.forEach(r),nr=b(Hf),ar=E(Hf,"P",{});var _f=y(ar);sr=v(_f,"Each of the 3 methods is important in its on right, albeit some is more verbose than another."),_f.forEach(r),tr=b(Hf),er=E(Hf,"P",{});var Jf=y(er);or=v(Jf,"Lastly, we also cover how to write test to verify our code, and also how to create the mock function to facilitate our test cases."),Jf.forEach(r),Hf.forEach(r),this.h()},h(){w(o,"href","#the-callback-pattern"),w(l,"href","#the-promise-chain"),w(g,"href","#async-await"),w(T,"href","#testing"),w(L,"href","#closing-note"),w(t,"class","sitemap"),w(t,"id","sitemap"),w(t,"role","navigation"),w(t,"aria-label","Table of Contents"),w(_,"href","#the-callback-pattern"),w(_,"id","the-callback-pattern"),w(G,"href","https://gist.github.com/sunnycmf/b2ad4f80a3b627f04ff2"),w(G,"rel","nofollow"),w(en,"class","language-js"),w(yn,"class","language-js"),w(On,"class","language-js"),w(Sn,"class","language-js"),w(Wn,"class","language-js"),w(Kn,"href","http://callbackhell.com/"),w(Kn,"rel","nofollow"),w(ta,"class","language-js"),w(Pa,"class","language-js"),w(Ha,"type","image/webp"),w(Ha,"srcset","25ca4aff5059749c.webp"),w(Na,"type","image/jpeg"),w(Na,"srcset","25ca4aff5059749c.png"),w(Fa,"alt","recursive pattern"),Fa.src!==(Ra="25ca4aff5059749c.png")&&w(Fa,"src","25ca4aff5059749c.png"),w(Ga,"class","language-js"),w(ts,"href","#the-promise-chain"),w(ts,"id","the-promise-chain"),w(ls,"href","https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"),w(ls,"rel","nofollow"),w(Os,"class","language-js"),w(Ns,"href","https://www.javascripttutorial.net/es6/promise-chaining/"),w(Ns,"rel","nofollow"),w(Ks,"class","language-js"),w(et,"class","language-js"),w(dt,"class","language-js"),w(Pt,"class","language-js"),w(ae,"class","language-js"),w(pe,"class","language-js"),w(fe,"class","language-js"),w(Le,"class","language-js"),w(ze,"class","language-js"),w(po,"class","language-js"),w(wo,"class","language-js"),w(To,"href","#async-await"),w(To,"id","async-await"),w(No,"class","language-js"),w(_o,"class","language-js"),w(Go,"class","language-js"),w(bp,"class","language-js"),w(Mp,"class","language-js"),w(Gp,"class","language-js"),w(ac,"class","language-js"),w(Ec,"class","language-js"),w(Dc,"class","language-js"),w(Rc,"class","language-js"),w(zc,"class","language-js"),w(tl,"class","language-js"),w(gl,"class","language-js"),w(Ll,"class","language-js"),w(ql,"href","#testing"),w(ql,"id","testing"),w(fi,"class","language-js"),w(yi,"class","language-js"),w(ji,"class","language-js"),w(Ai,"class","language-js"),w(Ii,"class","language-js"),w(Ri,"class","language-js"),w(Ji,"href","#closing-note"),w(Ji,"id","closing-note")},m(n,a){i(n,s,a),u(s,t),u(t,e),u(e,o),u(o,p),u(t,c),u(c,l),u(l,k),u(t,f),u(f,g),u(g,P),u(t,j),u(j,T),u(T,C),u(t,O),u(O,L),u(L,A),i(n,$,a),i(n,D,a),u(D,x),i(n,M,a),i(n,I,a),u(I,S),i(n,H,a),i(n,N,a),u(N,F),i(n,R,a),i(n,W,a),u(W,q),u(q,_),u(_,J),u(W,B),u(W,U),u(U,z),u(U,G),u(G,V),u(U,Y),u(W,K),u(W,Z),u(Z,Q),u(Q,X),u(Z,nn),u(Z,an),u(an,sn),u(W,tn),u(W,en),en.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">&#125;</span></code>',u(W,on),u(W,pn),u(pn,cn),u(pn,ln),u(ln,un),u(pn,rn),u(pn,kn),u(kn,hn),u(pn,fn),u(pn,dn),u(dn,mn),u(pn,gn),u(W,wn),u(W,yn),yn.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">retry</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">//</span>\n<span class="token punctuation">&#125;</span></code>',u(W,En),u(W,vn),u(vn,bn),u(vn,Pn),u(Pn,jn),u(vn,Tn),u(W,Cn),u(W,On),On.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">retry</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// highlight-start</span>\n  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token comment">//</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// highlight-end</span>\n<span class="token punctuation">&#125;</span></code>',u(W,Ln),u(W,An),u(An,$n),u(An,Dn),u(Dn,xn),u(An,Mn),u(W,In),u(W,Sn),Sn.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">retry</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token comment">// highlight-start</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n      <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>\n      <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n        <span class="token comment">//</span>\n      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span>\n    <span class="token comment">// highlight-end</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',u(W,Hn),u(W,Nn),u(Nn,Fn),u(W,Rn),u(W,Wn),Wn.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">retry</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// 1st attempt</span>\n  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n      <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>\n      <span class="token comment">// 2nd attempt</span>\n      <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n          <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>\n          <span class="token comment">// 3rd attempt</span>\n          <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n              <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>\n              <span class="token comment">// failed for 3 times</span>\n              <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'Failed retrying 3 times\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">&#125;</span>\n          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">&#125;</span>\n      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',u(W,qn),u(W,_n),u(_n,Jn),u(_n,Bn),u(Bn,Un),u(_n,zn),u(W,Gn),u(W,Vn),u(Vn,Yn),u(Vn,Kn),u(Kn,Zn),u(Vn,Qn),u(W,Xn),u(W,na),u(na,aa),u(W,sa),u(W,ta),ta.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">retry</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// 1st attempt</span>\n  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n      <span class="token comment">// 2nd attempt</span>\n      <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n          <span class="token comment">// 3rd attempt</span>\n          <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n              <span class="token comment">// failed for 3 times</span>\n              <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'Failed retrying 3 times\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>\n              <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">&#125;</span>\n          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>\n          <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">&#125;</span>\n      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>\n      <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',u(W,ea),u(W,oa),u(oa,pa),u(oa,ca),u(ca,la),u(oa,ua),u(W,ia),u(W,ra),u(ra,ka),u(ra,ha),u(ha,fa),u(ra,da),u(W,ma),u(W,ga),u(ga,wa),u(ga,ya),u(ya,Ea),u(ga,va),u(W,ba),u(W,Pa),Pa.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">retry</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> n<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// highlight-next-line</span>\n  <span class="token keyword">let</span> attempt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 1st attempt</span>\n  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n      <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>\n      <span class="token comment">// highlight-start</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>attempt<span class="token operator">++</span> <span class="token operator">===</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n        <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">Failed retrying </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>n<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> times</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>\n        <span class="token comment">// highlight-end</span>\n        <span class="token comment">// 2nd attempt</span>\n        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n            <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>\n            <span class="token comment">// highlight-start</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>attempt<span class="token operator">++</span> <span class="token operator">===</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n              <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">Failed retrying </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>n<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> times</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>\n              <span class="token comment">// highlight-end</span>\n              <span class="token function">fn</span><span class="token punctuation">(</span><span class="token comment">/* this goes forever ...*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">&#125;</span>\n          <span class="token punctuation">&#125;</span>\n        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">&#125;</span>\n    <span class="token punctuation">&#125;</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',u(W,ja),u(W,Ta),u(Ta,Ca),u(Ta,Oa),u(Oa,La),u(Ta,Aa),u(W,$a),u(W,Da),u(Da,xa),u(W,Ma),u(W,Ia),u(Ia,Sa),u(Sa,Ha),u(Sa,Na),u(Sa,Fa),u(W,Wa),u(W,qa),u(qa,_a),u(W,Ja),u(W,Ba),u(Ba,Ua),u(W,za),u(W,Ga),Ga.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">retry</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> n<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">let</span> attempt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// highlight-start</span>\n  <span class="token keyword">function</span> <span class="token function">_retry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n        <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>attempt<span class="token operator">++</span> <span class="token operator">===</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n          <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">Failed retrying </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>n<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> times</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>\n          <span class="token function">_retry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">&#125;</span>\n      <span class="token punctuation">&#125;</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n\n  <span class="token function">_retry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// highlight-end</span>\n<span class="token punctuation">&#125;</span></code>',u(W,Va),u(W,Ya),u(Ya,Ka),u(W,Za),u(W,Qa),u(Qa,Xa),i(n,ns,a),i(n,as,a),u(as,ss),u(ss,ts),u(ts,es),u(as,os),u(as,ps),u(ps,cs),u(ps,ls),u(ls,us),u(ps,is),u(as,rs),u(as,ks),u(ks,hs),u(ks,fs),u(fs,ds),u(ks,ms),u(ks,gs),u(gs,ws),u(ks,ys),u(ks,Es),u(Es,vs),u(ks,bs),u(ks,Ps),u(Ps,js),u(ks,Ts),u(as,Cs),u(as,Os),Os.innerHTML='<code class="language-js"><span class="token function">getPromiseA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// a promise</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>handleA<span class="token punctuation">)</span> <span class="token comment">// returns a new promise</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>handleB<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns another new promise</span>\n\n<span class="token function">getPromiseB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// a promise</span>\n  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>handleA<span class="token punctuation">)</span> <span class="token comment">// returns a new promise</span>\n  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>handleB<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns another new promise</span></code>',u(as,Ls),u(as,As),u(As,$s),u(As,Ds),u(Ds,xs),u(As,Ms),u(As,Is),u(Is,Ss),u(As,Hs),u(As,Ns),u(Ns,Fs),u(As,Rs),u(as,Ws),u(as,qs),u(qs,_s),u(qs,Js),u(Js,Bs),u(qs,Us),u(qs,zs),u(zs,Gs),u(qs,Vs),u(as,Ys),u(as,Ks),Ks.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">retry</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">//</span>\n<span class="token punctuation">&#125;</span></code>',u(as,Zs),u(as,Qs),u(Qs,Xs),u(Qs,nt),u(nt,at),u(Qs,st),u(as,tt),u(as,et),et.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">retry</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// highlight-next-line</span>\n  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns a promise</span>\n<span class="token punctuation">&#125;</span></code>',u(as,ot),u(as,pt),u(pt,ct),u(pt,lt),u(lt,ut),u(pt,it),u(pt,rt),u(rt,kt),u(pt,ht),u(as,ft),u(as,dt),dt.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">retry</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// returns a promise</span>\n    <span class="token comment">// highlight-next-line</span>\n    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns a new promise</span>\n<span class="token punctuation">&#125;</span></code>',u(as,mt),u(as,gt),u(gt,wt),u(gt,yt),u(yt,Et),u(gt,vt),u(as,bt),u(as,Pt),Pt.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">retry</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// returns a promise (promise#1)</span>\n    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// returns a new promise (promise#2)</span>\n    <span class="token comment">// highlight-next-line</span>\n    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns yet a new promise (promise#3)</span>\n<span class="token punctuation">&#125;</span></code>',u(as,jt),u(as,Tt),u(Tt,Ct),u(Tt,Ot),u(Ot,Lt),u(Tt,At),u(Tt,$t),u($t,Dt),u(Tt,xt),u(Tt,Mt),u(Mt,It),u(Tt,St),u(as,Ht),u(as,Nt),u(Nt,Ft),u(Nt,Rt),u(Rt,Wt),u(Nt,qt),u(Nt,_t),u(_t,Jt),u(Nt,Bt),u(as,Ut),u(as,zt),u(zt,Gt),u(zt,Vt),u(Vt,Yt),u(zt,Kt),u(zt,Zt),u(Zt,Qt),u(zt,Xt),u(as,ne),u(as,ae),ae.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">retry</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">const</span> promise3 <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// returns a promise (promise#1)</span>\n    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// returns a new promise (promise#2)</span>\n    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns yet a new promise (promise#3)</span>\n\n  <span class="token keyword">return</span> promise3<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>\n    <span class="token parameter">data</span> <span class="token operator">=></span> data<span class="token punctuation">,</span> <span class="token comment">// resolved with the result from &#96;fn()&#96;</span>\n    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n      <span class="token comment">// reject with the max retry error</span>\n      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'Failed retrying 3 times\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',u(as,se),u(as,te),u(te,ee),u(as,oe),u(as,pe),pe.innerHTML='<code class="language-js">promise3<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>\n  <span class="token parameter">data</span> <span class="token operator">=></span> data<span class="token punctuation">,</span> <span class="token comment">// resolved with the result from &#96;fn()&#96;</span>\n  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n    <span class="token comment">// reject with the max retry error</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'Failed retrying 3 times\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// is equivalent to</span>\npromise3 <span class="token comment">// resolved with the result from &#96;fn()&#96;</span>\n  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n    <span class="token comment">// reject with the max retry error</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'Failed retrying 3 times\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>',u(as,ce),u(as,le),u(le,ue),u(le,ie),u(ie,re),u(le,ke),u(as,he),u(as,fe),fe.innerHTML='<code class="language-js"><span class="token comment">// prettier-ignore</span>\n<span class="token keyword">function</span> <span class="token function">retry</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// highlight-start</span>\n  <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// returns a promise (promise#1)</span>\n    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// returns a new promise (promise#2)</span>\n    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// returns yet a new promise (promise#3)</span>\n    <span class="token comment">// highlight-end</span>\n    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n      <span class="token comment">// reject with the max retry error</span>\n      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'Failed retrying 3 times\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',u(as,de),u(as,me),u(me,ge),u(me,we),u(we,ye),u(me,Ee),u(as,ve),u(as,be),u(be,Pe),u(be,je),u(je,Te),u(be,Ce),u(as,Oe),u(as,Le),Le.innerHTML='<code class="language-js"><span class="token comment">// prettier-ignore</span>\n<span class="token keyword">function</span> <span class="token function">retry</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// attempt #1</span>\n    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// attempt #2</span>\n    <span class="token comment">// ...</span>\n    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// attempt #n</span>\n    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">Failed retrying </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>n<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> times</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',u(as,Ae),u(as,$e),u($e,De),u($e,xe),u(xe,Me),u($e,Ie),u($e,Se),u(Se,He),u($e,Ne),u(as,Fe),u(as,Re),u(Re,We),u(We,qe),u(We,_e),u(_e,Je),u(We,Be),u(as,Ue),u(as,ze),ze.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">retry</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    promise <span class="token operator">=</span> promise<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n  promise<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">Failed retrying </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>n<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> times</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> promise<span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',u(as,Ge),u(as,Ve),u(Ve,Ye),u(Ve,Ke),u(Ke,Ze),u(Ve,Qe),u(Ve,Xe),u(Xe,no),u(Ve,ao),u(Ve,so),u(so,to),u(Ve,eo),u(as,oo),u(as,po),po.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">retry</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">let</span> promise<span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token comment">// highlight-start</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>promise<span class="token punctuation">)</span> promise <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">else</span> promise <span class="token operator">=</span> promise<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// highlight-end</span>\n  <span class="token punctuation">&#125;</span>\n  promise<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">Failed retrying </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>n<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> times</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> promise<span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',u(as,co),u(as,lo),u(lo,uo),u(lo,io),u(io,ro),u(lo,ko),u(lo,ho),u(ho,fo),u(lo,mo),u(as,go),u(as,wo),wo.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">retry</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// highlight-next-line</span>\n  <span class="token keyword">let</span> promise <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token comment">// highlight-next-line</span>\n    promise <span class="token operator">=</span> promise<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n  promise<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">Failed retrying </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>n<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> times</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> promise<span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',u(as,yo),u(as,Eo),u(Eo,vo),i(n,bo,a),i(n,Po,a),u(Po,jo),u(jo,To),u(To,Co),u(Po,Oo),u(Po,Lo),u(Lo,Ao),u(Lo,$o),u($o,Do),u(Lo,xo),u(Po,Mo),u(Po,Io),u(Io,So),u(Po,Ho),u(Po,No),No.innerHTML='<code class="language-js"><span class="token keyword">let</span> value<span class="token punctuation">;</span>\npromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n  value <span class="token operator">=</span> data<span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'resolved\'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'here\'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></code>',u(Po,Fo),u(Po,Ro),u(Ro,Wo),u(Po,qo),u(Po,_o),_o.innerHTML='<code class="language-js"><span class="token string">"here"</span> <span class="token keyword">undefined</span></code>',u(Po,Jo),u(Po,Bo),u(Bo,Uo),u(Po,zo),u(Po,Go),Go.innerHTML='<code class="language-js"><span class="token string">"resolved"</span> <span class="token string">"value"</span></code>',u(Po,Vo),u(Po,Yo),u(Yo,Ko),u(Yo,Zo),u(Zo,Qo),u(Yo,Xo),u(Po,np),u(Po,ap),u(ap,sp),u(ap,tp),u(tp,ep),u(ap,op),u(ap,pp),u(pp,cp),u(ap,lp),u(Po,up),u(Po,ip),u(ip,rp),u(ip,kp),u(kp,hp),u(ip,fp),u(Po,dp),u(Po,mp),u(mp,gp),u(mp,wp),u(wp,yp),u(mp,Ep),u(Po,vp),u(Po,bp),bp.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// timeline #1</span>\n  promise\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n      <span class="token comment">// timeline #2</span>\n      <span class="token keyword">return</span> <span class="token function">doSomething</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data2</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n      <span class="token comment">// timeline #3</span>\n      <span class="token function">doAnotherThing</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// timeline #1</span>\n<span class="token punctuation">&#125;</span></code>',u(Po,Pp),u(Po,jp),u(jp,Tp),u(jp,Cp),u(Cp,Op),u(jp,Lp),u(jp,Ap),u(Ap,$p),u(jp,Dp),u(Po,xp),u(Po,Mp),Mp.innerHTML='<code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// timeline #1</span>\n  <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">await</span> promise<span class="token punctuation">;</span>\n  <span class="token comment">// timeline #2</span>\n  <span class="token keyword">let</span> data2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">doSomething</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// timeline #3</span>\n  <span class="token function">doAnotherThing</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',u(Po,Ip),u(Po,Sp),u(Sp,Hp),u(Sp,Np),u(Np,Fp),u(Sp,Rp),u(Sp,Wp),u(Wp,qp),u(Sp,_p),u(Sp,Jp),u(Jp,Bp),u(Sp,Up),u(Po,zp),u(Po,Gp),Gp.innerHTML='<code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">retry</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">//</span>\n<span class="token punctuation">&#125;</span></code>',u(Po,Vp),u(Po,Yp),u(Yp,Kp),u(Yp,Zp),u(Zp,Qp),u(Yp,Xp),u(Po,nc),u(Po,ac),ac.innerHTML='<code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">retry</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// highlight-next-line</span>\n  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns a promise</span>\n<span class="token punctuation">&#125;</span></code>',u(Po,sc),u(Po,tc),u(tc,ec),u(tc,oc),u(oc,pc),u(tc,cc),u(tc,lc),u(lc,uc),u(tc,ic),u(tc,rc),u(rc,kc),u(tc,hc),u(tc,fc),u(fc,dc),u(tc,mc),u(tc,gc),u(gc,wc),u(Po,yc),u(Po,Ec),Ec.innerHTML='<code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">retry</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// highlight-next-line</span>\n  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>\n    <span class="token keyword">await</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// highlight-start</span>\n  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>\n    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span>\n  <span class="token comment">// highlight-end</span>\n<span class="token punctuation">&#125;</span></code>',u(Po,vc),u(Po,bc),u(bc,Pc),u(bc,jc),u(jc,Tc),u(bc,Cc),u(bc,Oc),u(Oc,Lc),u(bc,Ac),u(Po,$c),u(Po,Dc),Dc.innerHTML='<code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">retry</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>\n    <span class="token keyword">await</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>\n    <span class="token comment">// highlight-start</span>\n    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>\n      <span class="token keyword">await</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>\n      <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span>\n    <span class="token comment">// highlight-end</span>\n  <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span></code>',u(Po,xc),u(Po,Mc),u(Mc,Ic),u(Mc,Sc),u(Sc,Hc),u(Mc,Nc),u(Po,Fc),u(Po,Rc),Rc.innerHTML='<code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">retry</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>\n    <span class="token keyword">await</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>\n    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>\n      <span class="token keyword">await</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>\n      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>\n        <span class="token keyword">await</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>\n        <span class="token comment">// highlight-next-line</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'Failed retrying 3 times\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">&#125;</span>\n    <span class="token punctuation">&#125;</span>\n  <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span></code>',u(Po,Wc),u(Po,qc),u(qc,_c),u(qc,Jc),u(Jc,Bc),u(Po,Uc),u(Po,zc),zc.innerHTML='<code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">retry</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>\n    <span class="token comment">// highlight-next-line</span>\n    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>\n    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>\n      <span class="token comment">// highlight-next-line</span>\n      <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>\n      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>\n        <span class="token comment">// highlight-next-line</span>\n        <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'Failed retrying 3 times\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">&#125;</span>\n    <span class="token punctuation">&#125;</span>\n  <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span></code>',u(Po,Gc),u(Po,Vc),u(Vc,Yc),u(Vc,Kc),u(Kc,Zc),u(Vc,Qc),u(Vc,Xc),u(Xc,nl),u(Vc,al),u(Po,sl),u(Po,tl),tl.innerHTML='<code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">retry</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>\n    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>\n\n  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>\n    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>\n\n  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>\n    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>\n\n  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">\'Failed retrying 3 times\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',u(Po,el),u(Po,ol),u(ol,pl),u(ol,cl),u(cl,ll),u(ol,ul),u(Po,il),u(Po,rl),u(rl,kl),u(rl,hl),u(hl,fl),u(rl,dl),u(Po,ml),u(Po,gl),gl.innerHTML='<code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">retry</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>\n    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1st attempt</span>\n  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>\n\n  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>\n    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2nd attempt</span>\n  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>\n\n  <span class="token comment">// ...</span>\n\n  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>\n    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// nth attempt</span>\n  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>\n\n  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">Failed retrying </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>n<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> times</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',u(Po,wl),u(Po,yl),u(yl,El),u(yl,vl),u(vl,bl),u(yl,Pl),u(yl,jl),u(jl,Tl),u(yl,Cl),u(Po,Ol),u(Po,Ll),Ll.innerHTML='<code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">retry</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>\n      <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>\n  <span class="token punctuation">&#125;</span>\n\n  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">Failed retrying </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>n<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> times</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',u(Po,Al),u(Po,$l),u($l,Dl),u($l,xl),u(xl,Ml),u($l,Il),u($l,Sl),u(Sl,Hl),u($l,Nl),i(n,Fl,a),i(n,Rl,a),u(Rl,Wl),u(Wl,ql),u(ql,_l),u(Rl,Jl),u(Rl,Bl),u(Bl,Ul),u(Bl,zl),u(zl,Gl),u(Bl,Vl),u(Bl,Yl),u(Yl,Kl),u(Bl,Zl),u(Rl,Ql),u(Rl,Xl),u(Xl,nu),u(Rl,au),u(Rl,su),u(su,tu),u(tu,eu),u(eu,ou),u(tu,pu),u(tu,cu),u(cu,lu),u(lu,uu),u(lu,iu),u(iu,ru),u(lu,ku),u(cu,hu),u(cu,fu),u(fu,du),u(su,mu),u(su,gu),u(gu,wu),u(wu,yu),u(gu,Eu),u(gu,vu),u(vu,bu),u(bu,Pu),u(bu,ju),u(ju,Tu),u(bu,Cu),u(vu,Ou),u(vu,Lu),u(Lu,Au),u(su,$u),u(su,Du),u(Du,xu),u(xu,Mu),u(Du,Iu),u(Du,Su),u(Su,Hu),u(Hu,Nu),u(Hu,Fu),u(Fu,Ru),u(Hu,Wu),u(Su,qu),u(Su,_u),u(_u,Ju),u(su,Bu),u(su,Uu),u(Uu,zu),u(zu,Gu),u(Uu,Vu),u(Uu,Yu),u(Yu,Ku),u(Ku,Zu),u(Ku,Qu),u(Qu,Xu),u(Ku,ni),u(Yu,ai),u(Yu,si),u(si,ti),u(Rl,ei),u(Rl,oi),u(oi,pi),u(oi,ci),u(ci,li),u(oi,ui),u(Rl,ii),u(Rl,ri),u(ri,ki),u(Rl,hi),u(Rl,fi),fi.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">mockFnFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',u(Rl,di),u(Rl,mi),u(mi,gi),u(Rl,wi),u(Rl,yi),yi.innerHTML='<code class="language-js"><span class="token comment">// highlight-next-line</span>\n<span class="token keyword">function</span> <span class="token function">mockFnFactory</span><span class="token punctuation">(</span><span class="token parameter">numFailure</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',u(Rl,Ei),u(Rl,vi),u(vi,bi),u(Rl,Pi),u(Rl,ji),ji.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">mockFnFactory</span><span class="token punctuation">(</span><span class="token parameter">numFailure</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token comment">// highlight-next-line</span>\n  <span class="token keyword">let</span> numCalls <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token comment">// highlight-next-line</span>\n    numCalls<span class="token operator">++</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',u(Rl,Ti),u(Rl,Ci),u(Ci,Oi),u(Rl,Li),u(Rl,Ai),Ai.innerHTML='<code class="language-js"><span class="token comment">// calback version</span>\n<span class="token keyword">function</span> <span class="token function">mockFnFactory</span><span class="token punctuation">(</span><span class="token parameter">numFailure</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">let</span> numCalls <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    numCalls<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>numCalls <span class="token operator">&lt;=</span> numFailure<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>\n      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> numCalls<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span>\n\n<span class="token comment">// promise version</span>\n<span class="token keyword">function</span> <span class="token function">mockFnFactory</span><span class="token punctuation">(</span><span class="token parameter">numFailure</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">let</span> numCalls <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    numCalls<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>numCalls <span class="token operator">&lt;=</span> numFailure<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>\n      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>numCalls<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',u(Rl,$i),u(Rl,Di),u(Di,xi),u(Rl,Mi),u(Rl,Ii),Ii.innerHTML='<code class="language-js"><span class="token keyword">function</span> <span class="token function">spy</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">let</span> numCalled <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>\n    <span class="token function-variable function">fn</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n      numCalled<span class="token operator">++</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n    <span class="token function">getNumberOfTimesCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n      <span class="token keyword">return</span> numCalled<span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',u(Rl,Si),u(Rl,Hi),u(Hi,Ni),u(Rl,Fi),u(Rl,Ri),Ri.innerHTML='<code class="language-js"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">\'&#96;fn&#96; failed on 1st attempt, and succeed thereafter (callback based)\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token function">mockFnFactory</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> spied <span class="token operator">=</span> <span class="token function">spy</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// retry at most 3 times</span>\n  <span class="token function">retry</span><span class="token punctuation">(</span>spied<span class="token punctuation">.</span>fn<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n    <span class="token comment">// verify &#96;fn&#96; get called only 2 times</span>\n    <span class="token function">assert</span><span class="token punctuation">(</span>spied<span class="token punctuation">.</span><span class="token function">getNumberOfTimesCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// verify we get the return value from the 2nd attempt</span>\n    <span class="token function">assert</span><span class="token punctuation">(</span>data <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">\'&#96;fn&#96; failed on 1st attempt, and succeed thereafter (promise based)\'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token function">mockFnFactory</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> spied <span class="token operator">=</span> <span class="token function">spy</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// retry at most 3 times</span>\n  <span class="token function">retry</span><span class="token punctuation">(</span>spied<span class="token punctuation">.</span>fn<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>\n    <span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>\n      <span class="token comment">// verify &#96;fn&#96; get called only 2 times</span>\n      <span class="token function">assert</span><span class="token punctuation">(</span>spied<span class="token punctuation">.</span><span class="token function">getNumberOfTimesCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token comment">// verify we get the return value from the 2nd attempt</span>\n      <span class="token function">assert</span><span class="token punctuation">(</span>data <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>\n    <span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>',i(n,Wi,a),i(n,qi,a),u(qi,_i),u(_i,Ji),u(Ji,Bi),u(qi,Ui),u(qi,zi),u(zi,Gi),u(zi,Vi),u(Vi,Yi),u(zi,Ki),u(zi,Zi),u(Zi,Qi),u(zi,Xi),u(qi,nr),u(qi,ar),u(ar,sr),u(qi,tr),u(qi,er),u(er,or)},p:n,d(n){n&&r(s),n&&r($),n&&r(D),n&&r(M),n&&r(I),n&&r(H),n&&r(N),n&&r(R),n&&r(W),n&&r(ns),n&&r(as),n&&r(bo),n&&r(Po),n&&r(Fl),n&&r(Rl),n&&r(Wi),n&&r(qi)}}}function hn(n){let s,t;const e=[fn];let o={$$slots:{default:[kn]},$$scope:{ctx:n}};for(let n=0;n<e.length;n+=1)o=a(o,e[n]);return s=new rn({props:o}),{c(){J(s.$$.fragment)},l(n){B(s.$$.fragment,n)},m(n,a){U(s,n,a),t=!0},p(n,[a]){const t=0&a?function(n,a){const s={},t={},e={$$scope:1};let o=n.length;for(;o--;){const p=n[o],c=a[o];if(c){for(const n in p)n in c||(t[n]=1);for(const n in c)e[n]||(s[n]=c[n],e[n]=1);n[o]=c}else for(const n in p)e[n]=1}for(const n in t)n in s||(s[n]=void 0);return s}(e,[(o=fn,"object"==typeof o&&null!==o?o:{})]):{};var o;1&a&&(t.$$scope={dirty:a,ctx:n}),s.$set(t)},i(n){t||(q(s.$$.fragment,n),t=!0)},o(n){_(s.$$.fragment,n),t=!1},d(n){z(s,n)}}}const fn={title:"Retry asynchronous function using the callback pattern, promise chain and async await",date:"2020-06-21T08:00:00Z",tags:["JavaScript","Asynchronous","Problem Solving"],description:"How to retry asynchronous function using the callback pattern, promise chain and async await. Mental model for asynchronous JavaScript.",slug:"retry-async-function-with-callback-promise",type:"blog"};class dn extends Y{constructor(n){super(),V(this,n,null,hn,p,{})}}setTimeout(()=>{new dn({target:document.querySelector("#app"),hydrate:!0})},3e3);
