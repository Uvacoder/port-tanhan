{"version":3,"sources":["webpack:///./src/components/ArticleFooter.js","webpack:///./src/components/PostSeo.js","webpack:///./src/templates/blog-post.js"],"names":["ArticleFooter","url","style","marginBottom","rhythm","href","getGoodTweetLink","getBadTweetLink","encodeURIComponent","SEO","siteLanguage","meta","title","description","image","twitterImage","post","site","profilePicture","file","publicURL","metaDescription","siteMetadata","metaImage","siteUrl","metaKeywords","tags","split","htmlAttributes","lang","titleTemplate","name","content","property","author","concat","length","join","type","JSON","stringify","copyrightHolder","copyrightYear","creator","publisher","logo","datePublished","date","dateModified","lastUpdated","headline","inLanguage","mainEntityOfPage","itemListElement","item","position","BlogPostTemplate","props","blogRef","React","useRef","useEffect","current","querySelectorAll","forEach","script","window","eval","innerHTML","data","markdownRemark","siteTitle","pageContext","previous","next","heroImageUrl","heroTwitterImageUrl","isWip","fields","wip","location","frontmatter","excerpt","slug","scale","display","marginTop","fontStyle","marginLeft","ref","dangerouslySetInnerHTML","__html","html","flexWrap","justifyContent","listStyle","padding","to","rel","pageQuery"],"mappings":"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","file":"component---src-templates-blog-post-js-5f0a6659493f26e6ea5e.js","sourcesContent":["import React from 'react';\nimport { rhythm } from '../utils/typography';\n\nexport default function ArticleFooter({ url }) {\n  return (\n    <>\n      <hr\n        style={{\n          marginBottom: rhythm(1),\n        }}\n      />\n      <p>\n        Thank you for your time reading through this article.\n        <br />\n        It means a lot to me.\n      </p>\n      <p>\n        {' If you like what you have just read,'}\n        <br />\n        <a href={getGoodTweetLink(url)}>Tweet about it</a>\n        {' so I will write more related articles;'}\n        <br />\n        {'If you disagree or you have opinions about this article,'}\n        <br />\n        <a href={getBadTweetLink(url)}>Tweet about it too</a>\n        {' so I can take your suggestions and improve on it.'}\n      </p>\n    </>\n  );\n}\n\nfunction getGoodTweetLink(url) {\n  return `https://twitter.com/intent/tweet?text=${encodeURIComponent(\n    'Insightful article from @lihautan'\n  )}&url=${url}`;\n}\n\nfunction getBadTweetLink(url) {\n  return `https://twitter.com/intent/tweet?text=${encodeURIComponent(\n    \"I disgree with @lihautan's article\"\n  )}&url=${url}`;\n}\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport Helmet from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nfunction SEO({\n  siteLanguage = 'en',\n  meta = [],\n  title,\n  description,\n  image,\n  twitterImage,\n  url,\n  post,\n}) {\n  const {\n    site,\n    file: { publicURL: profilePicture },\n  } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n            siteUrl\n          }\n        }\n        file(\n          sourceInstanceName: { eq: \"assets\" }\n          relativePath: { eq: \"profile-pic.png\" }\n        ) {\n          publicURL\n        }\n      }\n    `\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n  const metaImage = `${site.siteMetadata.siteUrl}${twitterImage || image || profilePicture}`;\n  const metaKeywords = post.tags ? post.tags.split(',') : [];\n\n  return (\n    <>\n      <Helmet\n        htmlAttributes={{\n          lang: siteLanguage,\n        }}\n        title={title}\n        titleTemplate={`%s | ${site.siteMetadata.title}`}\n        meta={[\n          {\n            name: `description`,\n            content: metaDescription,\n          },\n          {\n            name: 'image',\n            content: metaImage,\n          },\n          {\n            property: 'og:image',\n            content: metaImage,\n          },\n          {\n            property: `og:title`,\n            content: title,\n          },\n          {\n            property: `og:description`,\n            content: metaDescription,\n          },\n          {\n            property: `og:type`,\n            content: `website`,\n          },\n          {\n            name: 'twitter:site',\n            content: '@lihautan',\n          },\n          {\n            name: `twitter:card`,\n            content: twitterImage ? 'summary_large_image' : `summary`,\n          },\n          {\n            name: `twitter:creator`,\n            content: site.siteMetadata.author,\n          },\n          {\n            name: `twitter:title`,\n            content: title,\n          },\n          {\n            name: `twitter:description`,\n            content: metaDescription,\n          },\n          {\n            name: `twitter:image`,\n            content: metaImage,\n          },\n        ]\n          .concat(\n            metaKeywords.length > 0\n              ? {\n                  name: `keywords`,\n                  content: metaKeywords.join(`, `),\n                }\n              : []\n          )\n          .concat(meta)}\n      />\n      <script type=\"application/ld+json\">\n        {JSON.stringify({\n          '@context': 'http://schema.org',\n          '@type': 'Article',\n          author: {\n            '@type': 'Person',\n            name: site.siteMetadata.author,\n          },\n          copyrightHolder: {\n            '@type': 'Person',\n            name: site.siteMetadata.author,\n          },\n          copyrightYear: '2019',\n          creator: {\n            '@type': 'Person',\n            name: site.siteMetadata.author,\n          },\n          publisher: {\n            '@type': 'Organization',\n            name: site.siteMetadata.author,\n            logo: {\n              '@type': 'ImageObject',\n              url: profilePicture,\n            },\n          },\n          datePublished: post.date,\n          dateModified: post.lastUpdated || post.date,\n          description: metaDescription,\n          headline: title,\n          inLanguage: siteLanguage,\n          url: `${site.siteMetadata.siteUrl}/${url}`,\n          name: title,\n          image: {\n            '@type': 'ImageObject',\n            url: metaImage,\n          },\n          mainEntityOfPage: `${site.siteMetadata.siteUrl}/${url}`,\n        })}\n      </script>\n      <script type=\"application/ld+json\">\n        {JSON.stringify({\n          '@context': 'http://schema.org',\n          '@type': 'BreadcrumbList',\n          description: 'Breadcrumbs list',\n          name: 'Breadcrumbs',\n          itemListElement: [\n            {\n              '@type': 'ListItem',\n              item: {\n                '@id': site.siteMetadata.siteUrl,\n                name: 'Homepage',\n              },\n              position: 1,\n            },\n            {\n              '@type': 'ListItem',\n              item: {\n                '@id': `${site.siteMetadata.siteUrl}/${url}`,\n                name: title,\n              },\n              position: 2,\n            },\n          ],\n        })}\n      </script>\n    </>\n  );\n}\n\nexport default SEO;\n","import React from 'react';\nimport { Link, graphql } from 'gatsby';\n\nimport Layout from '../components/layout';\nimport SEO from '../components/PostSeo';\nimport ArticleFooter from '../components/ArticleFooter';\nimport { rhythm, scale } from '../utils/typography';\n\nfunction BlogPostTemplate(props) {\n  // TODO: NOTE: this is making XSS possible.\n  // go figure out MDX so we dont need to manually execute scripts in the .md \n  const blogRef = React.useRef();\n  React.useEffect(() => {\n    const scripts = blogRef.current.querySelectorAll('script');\n    scripts.forEach(script => {\n      /* eslint-disable no-eval */\n      window.eval(script.innerHTML);\n    });\n  }, []);\n\n  const post = props.data.markdownRemark;\n  const siteTitle = props.data.site.siteMetadata.title;\n  const {\n    previous,\n    next,\n    heroImageUrl,\n    heroTwitterImageUrl,\n  } = props.pageContext;\n  const isWip = post.fields.wip;\n\n  return (\n    <Layout location={props.location} title={siteTitle}>\n      <SEO\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n        image={heroImageUrl}\n        twitterImage={heroTwitterImageUrl}\n        url={post.fields.slug}\n        post={post.frontmatter}\n      />\n      <h1>\n        {isWip ? 'WIP: ' : null}\n        {post.frontmatter.title}\n      </h1>\n      <p\n        style={{\n          ...scale(-1 / 5),\n          display: `block`,\n          marginBottom: rhythm(1),\n          marginTop: rhythm(-0.5),\n        }}\n      >\n        {post.frontmatter.date}\n        {post.frontmatter.lastUpdated && (\n          <span style={{ fontStyle: 'italic', marginLeft: rhythm(0.2) }}>\n            (Last updated: {post.frontmatter.lastUpdated})\n          </span>\n        )}\n      </p>\n      <div ref={blogRef} dangerouslySetInnerHTML={{ __html: post.html }} />\n      <ArticleFooter url={props.location.href} />\n      <hr\n        style={{\n          marginBottom: rhythm(1),\n        }}\n      />\n\n      <ul\n        style={{\n          display: `flex`,\n          flexWrap: `wrap`,\n          justifyContent: `space-between`,\n          listStyle: `none`,\n          padding: 0,\n        }}\n      >\n        <li>\n          {previous && (\n            <Link to={previous.fields.slug} rel=\"prev\">\n              ← {previous.frontmatter.title}\n            </Link>\n          )}\n        </li>\n        <li>\n          {next && (\n            <Link to={next.fields.slug} rel=\"next\">\n              {next.frontmatter.title} →\n            </Link>\n          )}\n        </li>\n      </ul>\n    </Layout>\n  );\n}\n\nexport default BlogPostTemplate;\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      fields {\n        slug\n        wip\n      }\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        lastUpdated(formatString: \"MMMM DD, YYYY\")\n        description\n        tags\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}