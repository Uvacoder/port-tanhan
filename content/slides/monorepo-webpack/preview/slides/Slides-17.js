/* generated by Svelte v3.24.0 */
import {
	SvelteComponent,
	attr,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "/svelte/internal.js";

import Folder from "/components/Folder.js";
import toFolder from "/components/toFolder.js";

function create_fragment(ctx) {
	let pre0;

	let raw0_value = `
<code class="language-sh">a -&gt; b -&gt; c -&gt; d</code>` + "";

	let t0;
	let folder_1;
	let t1;
	let pre1;

	let raw1_value = `
<code class="language-sh">a/node_modules/b/node_modules/c/node_modules/d</code>` + "";

	let current;
	folder_1 = new Folder({ props: { folder: /*folder*/ ctx[0] } });

	return {
		c() {
			pre0 = element("pre");
			t0 = space();
			create_component(folder_1.$$.fragment);
			t1 = space();
			pre1 = element("pre");
			attr(pre0, "class", "language-sh");
			attr(pre1, "class", "language-sh");
		},
		m(target, anchor) {
			insert(target, pre0, anchor);
			pre0.innerHTML = raw0_value;
			insert(target, t0, anchor);
			mount_component(folder_1, target, anchor);
			insert(target, t1, anchor);
			insert(target, pre1, anchor);
			pre1.innerHTML = raw1_value;
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(folder_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(folder_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(pre0);
			if (detaching) detach(t0);
			destroy_component(folder_1, detaching);
			if (detaching) detach(t1);
			if (detaching) detach(pre1);
		}
	};
}

function instance($$self) {
	const folder = toFolder`
+ a
  + node_modules
    + b
      + node_modules
        + c
          + node_modules
            + d
`;

	return [folder];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Component;