/* generated by Svelte v3.24.0 */
import {
	SvelteComponent,
	attr,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	space
} from "/svelte/internal.js";

function create_fragment(ctx) {
	let h2;
	let t1;
	let pre0;

	let raw0_value = `
<code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  resolve<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    symlinks<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    modules<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">'node_modules'</span><span class="token punctuation">,</span>
      <span class="token string">'/shopee/node_modules'</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">IfPeerSkipDevDependencyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">SymlinkAwarePlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code>` + "";

	let t2;
	let pre1;

	let raw1_value = `
<code class="language-js"><span class="token keyword">class</span> <span class="token class-name">SymlinkAwarePlugin</span> <span class="token punctuation">&#123;</span>
  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>normalModuleFactory<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token constant">PLUGIN_NAME</span><span class="token punctuation">,</span> <span class="token parameter">normalModuleFactory</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      normalModuleFactory<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>afterResolve<span class="token punctuation">.</span><span class="token function">tapAsync</span><span class="token punctuation">(</span>
        <span class="token constant">PLUGIN_NAME</span><span class="token punctuation">,</span>
        <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          <span class="token comment">// find the actual location from the symlink</span>
          data<span class="token punctuation">.</span>__actualLocation <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getActualLocation</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
      normalModuleFactory<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>createModule<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token constant">PLUGIN_NAME</span><span class="token punctuation">,</span> <span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SymlinkNormalModule</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">SymlinkNormalModule</span> <span class="token keyword">extends</span> <span class="token class-name">NormalModule</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>actualLocation <span class="token operator">=</span> data<span class="token punctuation">.</span>__actualLocation<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">identifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// return actual location instead of symlink location</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>actualLocation<span class="token punctuation">;</span>
    <span class="token comment">// return this.resource;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>` + "";

	return {
		c() {
			h2 = element("h2");
			h2.textContent = "üêõ Solution #2: SymlinkAwarePlugin";
			t1 = space();
			pre0 = element("pre");
			t2 = space();
			pre1 = element("pre");
			attr(pre0, "class", "language-js");
			attr(pre1, "class", "language-js");
		},
		m(target, anchor) {
			insert(target, h2, anchor);
			insert(target, t1, anchor);
			insert(target, pre0, anchor);
			pre0.innerHTML = raw0_value;
			insert(target, t2, anchor);
			insert(target, pre1, anchor);
			pre1.innerHTML = raw1_value;
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(h2);
			if (detaching) detach(t1);
			if (detaching) detach(pre0);
			if (detaching) detach(t2);
			if (detaching) detach(pre1);
		}
	};
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, create_fragment, safe_not_equal, {});
	}
}

export default Component;