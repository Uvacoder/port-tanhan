/* generated by Svelte v3.24.0 */
import {
	SvelteComponent,
	attr,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal
} from "/svelte/internal.js";

function create_fragment(ctx) {
	let pre;

	let raw_value = `
<code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">NAME</span> <span class="token operator">=</span> <span class="token string">'IfPeerSkipDevDependencyPlugin'</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">IfPeerSkipDevDependencyPlugin</span> <span class="token punctuation">&#123;</span>
  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">resolver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    resolver
      <span class="token punctuation">.</span><span class="token function">getHook</span><span class="token punctuation">(</span><span class="token string">'after-described-resolve'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">tapAsync</span><span class="token punctuation">(</span><span class="token constant">NAME</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> resolveContext<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>
          <span class="token function">isResolvingWithinNodeModules</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
          <span class="token function">isRequestInPeerDependenciesAndDevDependencies</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>
        <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token comment">// early end the resolver</span>
          <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">// continue the resolver</span>
        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">isResolvingWithinNodeModules</span><span class="token punctuation">(</span><span class="token parameter">request</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    request<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'./'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
    request<span class="token punctuation">.</span>relativePath <span class="token operator">===</span> <span class="token string">'./node_modules'</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">isRequestInPeerDependenciesAndDevDependencies</span><span class="token punctuation">(</span><span class="token parameter">request</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> peerDependencies <span class="token operator">=</span> request<span class="token punctuation">.</span>descriptionFileData<span class="token punctuation">.</span>peerDependencies<span class="token punctuation">;</span>
  <span class="token keyword">const</span> key <span class="token operator">=</span> request<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^\.\//</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> peerDependencies <span class="token operator">&amp;&amp;</span> key <span class="token keyword">in</span> peerDependencies<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>` + "";

	return {
		c() {
			pre = element("pre");
			attr(pre, "class", "language-js");
		},
		m(target, anchor) {
			insert(target, pre, anchor);
			pre.innerHTML = raw_value;
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(pre);
		}
	};
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, create_fragment, safe_not_equal, {});
	}
}

export default Component;