/* generated by Svelte v3.24.0 */
import {
	SvelteComponent,
	action_destroyer,
	attr,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal
} from "/svelte/internal.js";

function create_fragment(ctx) {
	let div;
	let observe_action;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			attr(div, "data-note", /*note*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (!mounted) {
				dispose = action_destroyer(observe_action = observe.call(null, div));
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*note*/ 1) {
				attr(div, "data-note", /*note*/ ctx[0]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

let options = {
	root: document.querySelector("#scrollArea"),
	rootMargin: "0px",
	threshold: 1
};

function callback(entries) {
	entries.forEach(entry => {
		if (entry.isIntersecting) {
			console.log(entry.target.getAttribute("data-note")?.trim());
		}
	});
}

let observer = new IntersectionObserver(callback, options);

function observe(elem) {
	observer.observe(elem);
}

function instance($$self, $$props, $$invalidate) {
	let { note } = $$props;

	$$self.$set = $$props => {
		if ("note" in $$props) $$invalidate(0, note = $$props.note);
	};

	return [note];
}

class Notes extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { note: 0 });
	}
}

export default Notes;