/* generated by Svelte v3.24.0 */
import {
	SvelteComponent,
	action_destroyer,
	add_render_callback,
	append,
	attr,
	check_outros,
	create_in_transition,
	create_out_transition,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	noop,
	run_all,
	safe_not_equal,
	space,
	toggle_class,
	transition_in,
	transition_out
} from "/svelte/internal.js";

import "/prismjs.js";
import { cubicIn, cubicOut } from "/svelte/easing.js";
import { fly, crossfade, fade } from "/svelte/transition.js";

function add_css() {
	var style = element("style");
	style.id = "svelte-sejowh-style";
	style.textContent = ".svelte-sejowh{transition:200ms ease-in}.container.svelte-sejowh{position:absolute;display:grid;place-content:center;height:100%;width:100%;top:0;left:0}.code.svelte-sejowh{font-family:\"Consolas\", \"Bitstream Vera Sans Mono\", \"Courier New\", Courier, monospace}.template.svelte-sejowh{position:absolute;bottom:50px;left:50%;transform:translateX(-50%);font-size:20px}.template-header.svelte-sejowh{margin-top:40px;margin-bottom:10px;font-weight:bold}.tab{width:1ch;display:inline-block}.hidden.svelte-sejowh{opacity:0}.moveUp.svelte-sejowh{transform:translateY(-200px)}.moveUp2.svelte-sejowh{transform:translateY(-60px)}.original.svelte-sejowh{color:blue}.change.svelte-sejowh{color:orange}";
	append(document.head, style);
}

// (100:0) {:else}
function create_else_block(ctx) {
	let div1;
	let div0;
	let span0;
	let t1;
	let span1;
	let span1_intro;
	let span1_outro;
	let t3;
	let span2;
	let t5;
	let span3;
	let span3_intro;
	let span3_outro;
	let t7;
	let span4;
	let current;

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			span0 = element("span");
			span0.textContent = "framework_magic(";
			t1 = space();
			span1 = element("span");
			span1.textContent = "view";
			t3 = space();
			span2 = element("span");
			span2.textContent = ",";
			t5 = space();
			span3 = element("span");
			span3.textContent = "view";
			t7 = space();
			span4 = element("span");
			span4.textContent = ")";
			attr(span0, "class", "svelte-sejowh");
			attr(span1, "class", "original svelte-sejowh");
			attr(span2, "class", "svelte-sejowh");
			attr(span3, "class", "change svelte-sejowh");
			attr(span4, "class", "svelte-sejowh");
			attr(div0, "class", "code svelte-sejowh");
			attr(div1, "class", "container svelte-sejowh");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, span0);
			append(div0, t1);
			append(div0, span1);
			append(div0, t3);
			append(div0, span2);
			append(div0, t5);
			append(div0, span3);
			append(div0, t7);
			append(div0, span4);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (span1_outro) span1_outro.end(1);
				if (!span1_intro) span1_intro = create_in_transition(span1, /*receive*/ ctx[3], { key: "view1" });
				span1_intro.start();
			});

			add_render_callback(() => {
				if (span3_outro) span3_outro.end(1);
				if (!span3_intro) span3_intro = create_in_transition(span3, /*receive*/ ctx[3], { key: "view2" });
				span3_intro.start();
			});

			current = true;
		},
		o(local) {
			if (span1_intro) span1_intro.invalidate();
			span1_outro = create_out_transition(span1, /*send*/ ctx[2], { key: "view1" });
			if (span3_intro) span3_intro.invalidate();
			span3_outro = create_out_transition(span3, /*send*/ ctx[2], { key: "view2" });
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (detaching && span1_outro) span1_outro.end();
			if (detaching && span3_outro) span3_outro.end();
		}
	};
}

// (92:22) 
function create_if_block_2(ctx) {
	let div1;
	let div0;
	let span0;
	let span0_intro;
	let span0_outro;
	let t1;
	let span1;
	let span1_intro;
	let span1_outro;
	let t3;
	let span2;
	let span2_intro;
	let span2_outro;
	let current;

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			span0 = element("span");
			span0.textContent = "view";
			t1 = space();
			span1 = element("span");
			span1.textContent = "->";
			t3 = space();
			span2 = element("span");
			span2.textContent = "view";
			attr(span0, "class", "original svelte-sejowh");
			attr(span1, "class", "svelte-sejowh");
			attr(span2, "class", "change svelte-sejowh");
			attr(div0, "class", "code svelte-sejowh");
			attr(div1, "class", "container svelte-sejowh");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, span0);
			append(div0, t1);
			append(div0, span1);
			append(div0, t3);
			append(div0, span2);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (span0_outro) span0_outro.end(1);
				if (!span0_intro) span0_intro = create_in_transition(span0, /*receive*/ ctx[3], { key: "view1" });
				span0_intro.start();
			});

			add_render_callback(() => {
				if (span1_outro) span1_outro.end(1);
				if (!span1_intro) span1_intro = create_in_transition(span1, /*receive*/ ctx[3], { key: "arrow" });
				span1_intro.start();
			});

			add_render_callback(() => {
				if (span2_outro) span2_outro.end(1);
				if (!span2_intro) span2_intro = create_in_transition(span2, /*receive*/ ctx[3], { key: "view2" });
				span2_intro.start();
			});

			current = true;
		},
		o(local) {
			if (span0_intro) span0_intro.invalidate();
			span0_outro = create_out_transition(span0, /*send*/ ctx[2], { key: "view1" });
			if (span1_intro) span1_intro.invalidate();
			span1_outro = create_out_transition(span1, /*send*/ ctx[2], { key: "arrow" });
			if (span2_intro) span2_intro.invalidate();
			span2_outro = create_out_transition(span2, /*send*/ ctx[2], { key: "view2" });
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (detaching && span0_outro) span0_outro.end();
			if (detaching && span1_outro) span1_outro.end();
			if (detaching && span2_outro) span2_outro.end();
		}
	};
}

// (42:0) {#if index < 7}
function create_if_block(ctx) {
	let div1;
	let div0;
	let span0;
	let span0_intro;
	let span0_outro;
	let t1;
	let span1;
	let t3;
	let span2;
	let t5;
	let span3;
	let t7;
	let div3;
	let div2;
	let span4;
	let span4_intro;
	let span4_outro;
	let t9;
	let span5;
	let t11;
	let span6;
	let t13;
	let span7;
	let t15;
	let div4;
	let current;
	let if_block = /*index*/ ctx[0] === 2 && create_if_block_1(ctx);

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			span0 = element("span");
			span0.textContent = "view";
			t1 = space();
			span1 = element("span");
			span1.textContent = "= fn(";
			t3 = space();
			span2 = element("span");
			span2.textContent = "state";
			t5 = space();
			span3 = element("span");
			span3.textContent = ")";
			t7 = space();
			div3 = element("div");
			div2 = element("div");
			span4 = element("span");
			span4.textContent = "view";
			t9 = space();
			span5 = element("span");
			span5.textContent = "= fn(";
			t11 = space();
			span6 = element("span");
			span6.textContent = "state";
			t13 = space();
			span7 = element("span");
			span7.textContent = ")";
			t15 = space();
			div4 = element("div");
			if (if_block) if_block.c();
			attr(span0, "class", "original svelte-sejowh");
			attr(span1, "class", "svelte-sejowh");
			toggle_class(span1, "hidden", /*index*/ ctx[0] >= 6);
			attr(span2, "class", "original svelte-sejowh");
			toggle_class(span2, "hidden", /*index*/ ctx[0] >= 6);
			attr(span3, "class", "svelte-sejowh");
			toggle_class(span3, "hidden", /*index*/ ctx[0] >= 6);
			attr(div0, "class", "code svelte-sejowh");
			toggle_class(div0, "moveUp", /*index*/ ctx[0] === 2);
			attr(div1, "class", "container svelte-sejowh");
			toggle_class(div1, "hidden", /*index*/ ctx[0] < 4);
			toggle_class(div1, "moveUp2", /*index*/ ctx[0] >= 4);
			attr(span4, "class", "original svelte-sejowh");
			toggle_class(span4, "change", /*index*/ ctx[0] >= 5);
			attr(span5, "class", "svelte-sejowh");
			toggle_class(span5, "hidden", /*index*/ ctx[0] === 0 || /*index*/ ctx[0] >= 6);
			attr(span6, "class", "original svelte-sejowh");
			toggle_class(span6, "hidden", /*index*/ ctx[0] === 0 || /*index*/ ctx[0] >= 6);
			toggle_class(span6, "change", /*index*/ ctx[0] >= 4);
			attr(span7, "class", "svelte-sejowh");
			toggle_class(span7, "hidden", /*index*/ ctx[0] === 0 || /*index*/ ctx[0] >= 6);
			attr(div2, "class", "code svelte-sejowh");
			toggle_class(div2, "moveUp", /*index*/ ctx[0] === 2);
			attr(div3, "class", "container svelte-sejowh");
			attr(div4, "class", "container svelte-sejowh");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, span0);
			append(div0, t1);
			append(div0, span1);
			append(div0, t3);
			append(div0, span2);
			append(div0, t5);
			append(div0, span3);
			insert(target, t7, anchor);
			insert(target, div3, anchor);
			append(div3, div2);
			append(div2, span4);
			append(div2, t9);
			append(div2, span5);
			append(div2, t11);
			append(div2, span6);
			append(div2, t13);
			append(div2, span7);
			insert(target, t15, anchor);
			insert(target, div4, anchor);
			if (if_block) if_block.m(div4, null);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*index*/ 1) {
				toggle_class(span1, "hidden", /*index*/ ctx[0] >= 6);
			}

			if (dirty & /*index*/ 1) {
				toggle_class(span2, "hidden", /*index*/ ctx[0] >= 6);
			}

			if (dirty & /*index*/ 1) {
				toggle_class(span3, "hidden", /*index*/ ctx[0] >= 6);
			}

			if (dirty & /*index*/ 1) {
				toggle_class(div0, "moveUp", /*index*/ ctx[0] === 2);
			}

			if (dirty & /*index*/ 1) {
				toggle_class(div1, "hidden", /*index*/ ctx[0] < 4);
			}

			if (dirty & /*index*/ 1) {
				toggle_class(div1, "moveUp2", /*index*/ ctx[0] >= 4);
			}

			if (dirty & /*index*/ 1) {
				toggle_class(span4, "change", /*index*/ ctx[0] >= 5);
			}

			if (dirty & /*index*/ 1) {
				toggle_class(span5, "hidden", /*index*/ ctx[0] === 0 || /*index*/ ctx[0] >= 6);
			}

			if (dirty & /*index*/ 1) {
				toggle_class(span6, "hidden", /*index*/ ctx[0] === 0 || /*index*/ ctx[0] >= 6);
			}

			if (dirty & /*index*/ 1) {
				toggle_class(span6, "change", /*index*/ ctx[0] >= 4);
			}

			if (dirty & /*index*/ 1) {
				toggle_class(span7, "hidden", /*index*/ ctx[0] === 0 || /*index*/ ctx[0] >= 6);
			}

			if (dirty & /*index*/ 1) {
				toggle_class(div2, "moveUp", /*index*/ ctx[0] === 2);
			}

			if (/*index*/ ctx[0] === 2) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*index*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div4, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (span0_outro) span0_outro.end(1);
				if (!span0_intro) span0_intro = create_in_transition(span0, /*receive*/ ctx[3], { key: "view1" });
				span0_intro.start();
			});

			add_render_callback(() => {
				if (span4_outro) span4_outro.end(1);
				if (!span4_intro) span4_intro = create_in_transition(span4, /*receive*/ ctx[3], { key: "view2" });
				span4_intro.start();
			});

			transition_in(if_block);
			current = true;
		},
		o(local) {
			if (span0_intro) span0_intro.invalidate();
			span0_outro = create_out_transition(span0, /*send*/ ctx[2], { key: "view1" });
			if (span4_intro) span4_intro.invalidate();
			span4_outro = create_out_transition(span4, /*send*/ ctx[2], { key: "view2" });
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (detaching && span0_outro) span0_outro.end();
			if (detaching) detach(t7);
			if (detaching) detach(div3);
			if (detaching && span4_outro) span4_outro.end();
			if (detaching) detach(t15);
			if (detaching) detach(div4);
			if (if_block) if_block.d();
		}
	};
}

// (60:2) {#if index === 2}
function create_if_block_1(ctx) {
	let div4;
	let div0;
	let div0_intro;
	let div0_outro;
	let t1;
	let div1;
	let prism_action;
	let div1_intro;
	let div1_outro;
	let t2;
	let div2;
	let div2_intro;
	let div2_outro;
	let t4;
	let div3;
	let prism_action_1;
	let div3_intro;
	let div3_outro;
	let current;
	let mounted;
	let dispose;

	return {
		c() {
			div4 = element("div");
			div0 = element("div");
			div0.textContent = "Template";
			t1 = space();
			div1 = element("div");
			t2 = space();
			div2 = element("div");
			div2.textContent = "JSX";
			t4 = space();
			div3 = element("div");
			attr(div0, "class", "template-header svelte-sejowh");
			attr(div1, "class", "svelte-sejowh");
			attr(div2, "class", "template-header svelte-sejowh");
			attr(div3, "class", "svelte-sejowh");
			attr(div4, "class", "template svelte-sejowh");
		},
		m(target, anchor) {
			insert(target, div4, anchor);
			append(div4, div0);
			append(div4, t1);
			append(div4, div1);
			append(div4, t2);
			append(div4, div2);
			append(div4, t4);
			append(div4, div3);
			current = true;

			if (!mounted) {
				dispose = [
					action_destroyer(prism_action = prism.call(null, div1, {
						code: `
<div>{count}</div>
<button on:click="doSomething">Click me</button>
  `,
						lang: Prism.languages.html
					})),
					action_destroyer(prism_action_1 = prism.call(null, div3, {
						code: `
function Component({ count, doSomething }) {
  return (
    <>
      <div>{count}</div>
      <button onClick={doSomething}>Click me</button>
    </>
  );
}`,
						lang: Prism.languages.javascript
					}))
				];

				mounted = true;
			}
		},
		p: noop,
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (div0_outro) div0_outro.end(1);
				if (!div0_intro) div0_intro = create_in_transition(div0, fly, { y: 50, easing: cubicIn, duration: 200 });
				div0_intro.start();
			});

			add_render_callback(() => {
				if (div1_outro) div1_outro.end(1);
				if (!div1_intro) div1_intro = create_in_transition(div1, fly, { y: 50, easing: cubicIn, duration: 200 });
				div1_intro.start();
			});

			add_render_callback(() => {
				if (div2_outro) div2_outro.end(1);

				if (!div2_intro) div2_intro = create_in_transition(div2, fly, {
					y: 50,
					easing: cubicIn,
					duration: 200,
					delay: 1000
				});

				div2_intro.start();
			});

			add_render_callback(() => {
				if (div3_outro) div3_outro.end(1);

				if (!div3_intro) div3_intro = create_in_transition(div3, fly, {
					y: 50,
					easing: cubicIn,
					duration: 200,
					delay: 1000
				});

				div3_intro.start();
			});

			current = true;
		},
		o(local) {
			if (div0_intro) div0_intro.invalidate();
			div0_outro = create_out_transition(div0, fly, /*flyOut*/ ctx[1]);
			if (div1_intro) div1_intro.invalidate();
			div1_outro = create_out_transition(div1, fly, /*flyOut*/ ctx[1]);
			if (div2_intro) div2_intro.invalidate();
			div2_outro = create_out_transition(div2, fly, /*flyOut*/ ctx[1]);
			if (div3_intro) div3_intro.invalidate();
			div3_outro = create_out_transition(div3, fly, /*flyOut*/ ctx[1]);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div4);
			if (detaching && div0_outro) div0_outro.end();
			if (detaching && div1_outro) div1_outro.end();
			if (detaching && div2_outro) div2_outro.end();
			if (detaching && div3_outro) div3_outro.end();
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_if_block_2, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*index*/ ctx[0] < 7) return 0;
		if (/*index*/ ctx[0] === 7) return 1;
		return 2;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

let MAX_SLIDES = 8;

function prism(node, { code, lang }) {
	code = code.trim();
	let html = Prism.highlight(code, lang);
	html = html.split("\n").map(line => line.replace(/^(\s+)/, (_, m) => ("<span class=\"tab\"></span>").repeat(m.length / 2))).join("<br />");
	node.innerHTML = html;
}

function instance($$self, $$props, $$invalidate) {
	let index = 0;
	let flyOut = { y: 50, easing: cubicOut, duration: 200 };

	function next() {
		if (index === MAX_SLIDES) return false;
		$$invalidate(0, index++, index);
		return true;
	}

	function prev() {
		if (index === 0) return false;
		$$invalidate(0, index--, index);
		return true;
	}

	const [send, receive] = crossfade({
		duration: 500,
		easing: cubicIn,
		fallback: fade
	});

	return [index, flyOut, send, receive, next, prev];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-sejowh-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, { next: 4, prev: 5 });
	}

	get next() {
		return this.$$.ctx[4];
	}

	get prev() {
		return this.$$.ctx[5];
	}
}

export default Component;