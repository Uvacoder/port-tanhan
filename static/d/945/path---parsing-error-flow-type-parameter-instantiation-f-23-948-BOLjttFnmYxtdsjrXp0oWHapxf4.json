{"data":{"site":{"siteMetadata":{"title":"Tan Li Hau","author":"Tan Li Hau"}},"markdownRemark":{"id":"38a42b37-bf83-5e05-8b06-ffb71accd86a","excerpt":"","html":"<h2>Background</h2>\n<p>Mentioned in the <a href=\"/errors-encountered-upgrading-flow-0.85/\">previous post</a>, we have <a href=\"https://babeljs.io/docs/en/v7-migration\">upgraded babel 7</a> to support the new Flow syntax.</p>\n<p><code class=\"language-text\">foobar&lt;Type&gt;(x)</code> is now <em>call foobar with x, and type parameter <code class=\"language-text\">Type</code></em> rather than <code class=\"language-text\">(foobar &lt; Type) &gt; x)</code> <em>is the result of foobar smaller than Type, greater than x?</em>.</p>\n<blockquote>\n<p>Everything is great, until a weird runtime error caught us offguard.</p>\n</blockquote>\n<h2>ReferenceError: XType is not defined</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> foobar<span class=\"token operator\">&lt;</span>XType<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>baz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                       <span class=\"token operator\">^</span> ReferenceError<span class=\"token punctuation\">:</span> XType is not defined</code></pre></div>\n<p>The first time I saw this error, my first impression was that I forgot to import <code class=\"language-text\">XType</code>, so I scrolled to the top of the document. But, alas, I <strong>did import</strong> <code class=\"language-text\">XType</code>.</p>\n<p>So what is going on? <span class=\"emoji\">$1</span>‍</p>\n<p>I clicked into the error,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> foobar <span class=\"token operator\">&lt;</span> XType <span class=\"token operator\">></span> baz<span class=\"token punctuation\">;</span></code></pre></div>\n<p>looked at me innocently. I knew something was wrong. <code class=\"language-text\">XType</code> wasn’t stripeed by babel!</p>\n<p>Shameless plug: If you read my <a href=\"/eslint-for-flow-explicit-type-argument-syntax/\">eslint for flow syntax</a>, you should be able to come to the same conclusion! <span class=\"emoji\">$1</span></p>\n<p>So I checked the <a href=\"https://babeljs.io/docs/en/babel-plugin-transform-flow-strip-types\">@babel/plugin strip-flow-types</a>, I realise there’s a <code class=\"language-text\">all</code> option that I had missed out, basically it says,</p>\n<blockquote>\n<p><strong>only parse</strong> Flow-specific features if a <code class=\"language-text\">@flow</code> pragma is <strong>present atop</strong> the file</p>\n</blockquote>\n<p>It seems that in my file,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/** @module foobar */</span>\n<span class=\"token comment\">// @flow</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> foobar<span class=\"token operator\">&lt;</span>XType<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>baz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>I had a innocent looking <code class=\"language-text\">/** @module */</code> comment above <code class=\"language-text\">// @flow</code> that breaks my babel plugin!</p>\n<p>So the quick fix is to either:</p>\n<ul>\n<li>Move <code class=\"language-text\">// @flow</code> comment above <code class=\"language-text\">/** @module foobar */</code>, or</li>\n<li>Set <code class=\"language-text\">all: true</code> in <code class=\"language-text\">@babel/plugin-transform-flow-strip-types</code>.</li>\n</ul>\n<p>Either way, it solves the issue.</p>\n<p>However, one thing bothers me:</p>\n<blockquote>\n<p>My Flow works perfectly fine with an extra comment on top <code class=\"language-text\">// @flow</code>, it still typechecks and provides auto-suggestions.</p>\n</blockquote>\n<p>So, the logic for <code class=\"language-text\">@babel/plugin-transform-flow-strip-types</code> and Flow to determine whether a file is a Flow file or not <strong>is different</strong>!</p>\n<p>And as a frequent user of Open Source libraries, this is something I think I <del>can</del> should fix, for the betterment of the JavaScript Open Source world <span class=\"emoji\">$1</span>. I always imagine there’s another innocent front-end developer across the world like me stumbled upon a perplexing bug, if only me let the bug go with a workaround/patch.</p>\n<blockquote>\n<p>There’s so much to achieve if we, not just consume the effort of others from the Open Source, but to also contribute into it.</p>\n</blockquote>\n<h2>Game Plan</h2>\n<p>So, to fix this bug, one simply has to:</p>\n<ul>\n<li>Read Flow’s source code and understand the logic</li>\n<li>Read @babel/plugin-transform-strip-flow-type’s source code and understand the logic</li>\n<li>Make changes to babel code</li>\n<li>Send a MR and brag about it <span class=\"emoji\">$1</span></li>\n</ul>\n<p>Whether this is achieveable at my current level, that’s a different story.\nBut <strong>one has nothing to lose to try and fail</strong>.</p>\n<h2>Flow</h2>\n<p>I’ve read a bit of Flow source code previously, mainly to <a href=\"https://github.com/facebook/flow/pull/7083\">fix a bad developer experience I had with flowconfig previously</a>. I had to learn <a href=\"https://ocaml.org/\">OCaml</a>, which was a fad a while ago because of <a href=\"https://reasonml.github.io/\">ReasonML</a>, to understand Flow source code.</p>\n<p>So, this time around, I am much more comfortable to dig the code to find out the information I want.</p>\n<p>I searched for the term <code class=\"language-text\">&quot;@flow&quot;</code>, which ended me up with <a href=\"https://github.com/facebook/flow/blob/master/src/parsing/parsing_service_js.ml#L143\">this function</a>, <code class=\"language-text\">extract_docblock</code> which returns me the information of whether <code class=\"language-text\">@flow</code> is present in the file. And I dug further, I ended up with <a href=\"https://github.com/facebook/flow/blob/master/src/parsing/parsing_service_js.ml#L275\">the annonymous function that <code class=\"language-text\">extract_docblck</code> returns</a>.</p>\n<p>Allow me to loosely translate the logic into some pseudo JavaScript:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">extract_docblock</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> maxTokens<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">,</span> content <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> file <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> maxTokens<span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">nextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'semicolon'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">'comment'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isFlowComment</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token function\">flowPragmaType</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In human language:</p>\n<p>Flow will read <code class=\"language-text\">maxTokens</code> number of tokens, look for comments that matches <code class=\"language-text\">@flow</code>, if it encounters any order tokens, it will bail out early, with the exception of string and semicolon.</p>\n<p>So,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// @flow</span>\n<span class=\"token function\">foobar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>and</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/** @module */</span>\n<span class=\"token comment\">// @flow</span>\n<span class=\"token function\">foobar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>is considered as a valid Flow file.</p>\n<p>But</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">foobar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// @flow</span></code></pre></div>\n<p>or</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">foobar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>is not.</p>\n<h2>Babel</h2>\n<p>At first, I thought that the logic would be in <code class=\"language-text\">@babel/transform-strip-flow-types</code>, but apparently, its not.</p>\n<p>I discovered that by realising that the <a href=\"https://github.com/babel/babel/blob/master/packages/babel-plugin-transform-flow-strip-types/src/index.js\">source code of @babel/transform-strip-flow-types</a> did not include anything about the <code class=\"language-text\">all</code> options, and <a href=\"https://github.com/babel/babel/blob/master/packages/babel-plugin-transform-flow-strip-types/src/index.js#L14\">this plugin extends the @babel/plugin-syntax-flow</a>, which I knew fairly well that syntax plugins in babel does nothing but to enable syntax switch of the <code class=\"language-text\">@babel/parser</code>. The bulk of the logic lies within the <a href=\"https://github.com/babel/babel/blob/master/packages/babel-parser/src/plugins/flow.js\"><code class=\"language-text\">@babel/parser</code>’s flow plugin</a>.</p>\n<p>That was all because <a href=\"https://github.com/babel/babel/pulls?q=is%3Apr+is%3Aclosed+author%3Atanhauhau\">I contributed to <code class=\"language-text\">@babel/parser</code> before</a>.</p>\n<p>And here we are in babel-parser, and the line that caught my attention is <a href=\"https://github.com/babel/babel/blob/master/packages/babel-parser/src/plugins/flow.js#L98\">this</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">addComment</span><span class=\"token punctuation\">(</span>comment<span class=\"token punctuation\">:</span> <span class=\"token constant\">N</span><span class=\"token punctuation\">.</span>Comment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>flowPragma <span class=\"token operator\">===</span> undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Try to parse a flow pragma.</span>\n    <span class=\"token keyword\">const</span> matches <span class=\"token operator\">=</span> <span class=\"token constant\">FLOW_PRAGMA_REGEX</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>comment<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>matches<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>flowPragma <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matches<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"flow\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>flowPragma <span class=\"token operator\">=</span> <span class=\"token string\">\"flow\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matches<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"noflow\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>flowPragma <span class=\"token operator\">=</span> <span class=\"token string\">\"noflow\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unexpected flow pragma\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">addComment</span><span class=\"token punctuation\">(</span>comment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So, the babel’s logic of getting a Flow pragma is that as soon as the first comment encountered, we parse the comment and we turn on the Flow syntax switch.</p>\n<p>This is the reason why if we have a comment before <code class=\"language-text\">// @flow</code>, we will not treat the file as a valid Flow file.</p>\n<p>Interesting enough, this means that if we write</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">foobar <span class=\"token operator\">&lt;</span> XType <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// @flow</span>\nfoobar<span class=\"token operator\">&lt;</span>XType<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>the first half of the code before <code class=\"language-text\">// @flow</code> was parsed as a normal JS code, and the second half after <code class=\"language-text\">// @flow</code> was parsed as a Flow code.</p>\n<p>You can see this clearly with <a href=\"https://lihautan.com/babel-ast-explorer/#?%7B%22babel%22%3A%7B%22jsx%22%3Afalse%2C%22flow%22%3Atrue%2C%22typescript%22%3Afalse%2C%22objectRestSpread%22%3Afalse%2C%22pipelineOperator%22%3Afalse%2C%22throwExpressions%22%3Afalse%2C%22optionalChaining%22%3Afalse%2C%22nullishCoalescingOperator%22%3Afalse%2C%22exportDefaultFrom%22%3Afalse%2C%22dynamicImport%22%3Afalse%7D%2C%22code%22%3A%22foobar%3CXType%3E(1)%3B%5Cn%2F%2F%20%40flow%5Cnfoobar%3CXType%3E(1)%3B%22%7D\">my recently build ASTExplorer clone for babel</a>.</p>\n<p><em>(I built it with React + Hooks over a long weekend, which I will share about how did it in the future.)</em>.</p>\n<p>You can see that the first expression is a <code class=\"language-text\">BinaryExpression</code> but the second expression is a <code class=\"language-text\">CallExpression</code>;</p>\n<h2>Make changes to the babel code</h2>\n<p>Now step 3, make changes to babel code. So I decided to open an issue and started fixing the code. Surprisingly, someone else <a href=\"https://github.com/babel/babel/issues/9240\">had reported the issue a few months ago</a>, and the issue was still opened.</p>\n<p>So <a href=\"https://github.com/babel/babel/issues/9240#issuecomment-485370957\">I explained what I had discovered</a>, and tried to propose a solution. Well, after some struggle, I realised I am still a bit behind from being able to fix this code.</p>\n<p>So how?</p>\n<h2>Closing Remark</h2>\n<p>Well, I am sorry that I am going to stop here, because the issue is still opened, but I hoped you enjoy the detective journey along the way of hunting this bug.</p>\n<p>If you encountered similar issues, you can patch it first with the solution I mentioned earlier. And do follow the Github issue, I will do my best to fix this.</p>\n<p>As usual, here are the list of references for this article:</p>\n<ul>\n<li><a href=\"/errors-encountered-upgrading-flow-0.85\">Blog: Errors encountered upgrading Flow v0.85</a></li>\n<li><a href=\"/eslint-for-flow-explicit-type-argument-syntax/\">My eslint doesn’t work with for flow 0.85’s explicit type argument syntax</a></li>\n<li><a href=\"https://babeljs.io/docs/en/v7-migration\">Docs: Upgrading Babel v7</a></li>\n<li><a href=\"https://babeljs.io/docs/en/babel-plugin-transform-flow-strip-types\">Docs: @babel/transform-plugin-flow-strip-types</a></li>\n<li><a href=\"https://reasonml.github.io/\">Docs: ReasonML</a></li>\n<li><a href=\"https://github.com/facebook/flow/blob/master/src/parsing/parsing_service_js.ml\">Code: Flow Parsing Service</a></li>\n<li><a href=\"https://github.com/babel/babel/issues/9240\">Issue: Parsing error when calling generic functions with type arguments when flow pragma is not first comment</a></li>\n</ul>","frontmatter":{"title":"Parsing error when calling generic function with type arguments","date":"April 23, 2019","description":"😱"}}},"pageContext":{"type":"blog","slug":"/parsing-error-flow-type-parameter-instantiation/","previous":{"fileAbsolutePath":"/Users/lhtan/Projects/lihautan/content/blog/errors-encountered-upgrading-flow-0.85/index.md","fields":{"slug":"/errors-encountered-upgrading-flow-0.85/","type":"blog"},"frontmatter":{"title":"Errors encountered upgrading Flow v0.85"}},"next":null}}