{"data":{"site":{"siteMetadata":{"title":"Tan Li Hau","author":"Tan Li Hau"}},"markdownRemark":{"id":"c680f74b-d9a5-5ef2-bb4c-253d485c5cbc","excerpt":"Background Despite seeing the JS community  slowly   moving away  from Flow to TypeScript, we are still very much stucked with  Flow . üò® After some silence‚Ä¶","html":"<h2>Background</h2>\n<p>Despite seeing the JS community <a href=\"https://medium.com/entria/incremental-migration-to-typescript-on-a-flowtype-codebase-515f6490d92d\">slowly</a> <a href=\"https://davidgomes.com/porting-30k-lines-of-code-from-flow-to-typescript/\">moving away</a> from Flow to TypeScript, we are still very much stucked with <a href=\"https://flow.org/\">Flow</a>. üò®</p>\n<p>After some silence, Flow <a href=\"https://medium.com/flow-type/what-the-flow-team-has-been-up-to-54239c62004f\">has come back and committed to be a more efficient, reliable and friendly tool.</a> Thus, we decided to give Flow a final chance. However, in order to enjoy the improvements that Flow has made in recent days, we have to upgrade Flow from 0.83 (since our last update) to v0.97 (latest to date), which meant that we need to upgrade past v0.85, <a href=\"https://github.com/facebook/flow/issues/7493\">which meant hell</a> to <a href=\"https://github.com/flow-typed/flow-typed/issues/2946\">codebase that uses react-redux extensively.</a>.</p>\n<p>One of our <a href=\"https://wgao19.cc/\">brave developer, Gao Wei</a> took up the challenge and decided to bring us to the bright side of Flow. üòÖ. She <a href=\"https://twitter.com/wgao19/status/1115969686758248448\">twitted</a> and wrote <a href=\"https://dev.wgao19.cc/2019-04-17__making-flow-happy-after-0.85/\">an article</a> on how she fixed the errors arised in the process.</p>\n<p>To put the problem in perspective, from Flow 0.85 onwards, Flow is asking for <a href=\"https://medium.com/flow-type/asking-for-required-annotations-64d4f9c1edf8\">required annotations for implicit annotations</a>. Or less technical, if you are trying to <code class=\"language-text\">export</code> something that was created from a generic class (eg: <code class=\"language-text\">class Foo&lt;T&gt;</code>) or functions (eg: <code class=\"language-text\">function foo&lt;T&gt;(){}</code>), without explicit type arguments (eg: <code class=\"language-text\">new Foo&lt;Type&gt;()</code> or <code class=\"language-text\">foo&lt;Type&gt;()</code>), Flow is going to give you an error.</p>\n<p>Or in layman terms, if your repo is full of HOCs or <code class=\"language-text\">connect()</code>, you are f**ked. So, be sure the check <a href=\"https://dev.wgao19.cc/2019-04-17__making-flow-happy-after-0.85/\">Gao Wei‚Äôs blog</a> if you are one of the brave souls upgrading a Flow project.</p>\n<!-- TODO: count how many lines of code with flow annotation -->\n<h2>The Tooling</h2>\n<p>In this article, I would like to list out some of the  roadblocks we encountered that was less well discussed, the tooling for the latest Flow syntax, which is the <code class=\"language-text\">TypeParameterInstantiation</code>, eg: calling a function or instantiation a class with a type parameter, <code class=\"language-text\">new Foo&lt;Type&gt;()</code> or <code class=\"language-text\">foo&lt;Type&gt;()</code>.</p>\n<h2>Babel &#x26; Eslint</h2>\n<p>We had to upgrade our babel to <a href=\"https://babeljs.io/docs/en/v7-migration\">babel v7</a> and babel-eslint (a babel wrapper for eslint) to <a href=\"https://github.com/babel/babel-eslint/releases/tag/v9.0.0\">babel-eslint v9</a> to support this new syntax.</p>\n<p>You can read about on how we came to realise the need of this upgrade <a href=\"https://lihautan.com/eslint-for-flow-explicit-type-argument-syntax/\">in my previous post</a>.</p>\n<p>There was another interesting bug that we ran into regarding <a href=\"https://babeljs.io/docs/en/babel-plugin-transform-flow-strip-types\">@babel/plugin-transform-flow-strip-types</a>, you can read more on how we uncover it in my other blog post. <!-- TODO: --></p>\n<h2>Prettier</h2>\n<p>We had to upgrade prettier to <a href=\"https://prettier.io/blog/2019/01/20/1.16.0.html\">v1.16.0</a> and use <code class=\"language-text\">babel-flow</code> parser for <code class=\"language-text\">prettier</code> to resolve the ambiguity in syntax arise in parsing the newer Flow syntax. In simpler terms, to tell Prettier that</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">foobar<span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>is <em>calling foobar with argument, 1 and type, ‚ÄúType‚Äù</em>, instead of:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">foobar <span class=\"token operator\">&lt;</span> Type <span class=\"token operator\">></span> <span class=\"token number\">1</span></code></pre></div>\n<p><em>is the result of foobar &#x3C; Type, greater than 1?</em> üòÇ</p>\n<p>You can read more about it in <a href=\"https://prettier.io/blog/2019/01/20/1.16.0.html#add-babel-flow-parser-5685-by-ikatyang\">Prettier‚Äôs blog post</a>.</p>\n<h2>VSCode</h2>\n<p>Flow <a href=\"https://github.com/facebook/flow/commit/3c0a2bbd118206a0a73a1a4d18375122c4ae1955#diff-7af8df070df39a5abb64109dcad2cc99\">Lazy Mode</a> has been around since v0.68, but we hadn‚Äôt enjoy the benefit of lazy mode through VSCode <a href=\"https://github.com/flowtype/flow-for-vscode/commit/9c1440068f8faee95e487fc9f69b5f5ffed64bf1#diff-04c6e90faac2675aa89e2176d2eec7d8\">until recently</a>.</p>\n<p>Now we can specify <code class=\"language-text\">lazyMode</code> in our <code class=\"language-text\">.vscode/settings.json</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"flow.useLSP\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"flow.lazyMode\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ide\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Although <a href=\"https://flow.org/en/docs/lang/lazy-modes/\">lazy mode</a> reduces the scope where Flow does type checking, one of the pain point we had with Flow was to wait for Flow to do recheck, before returning a meaningful Flow status again. Flow team did some optimisation in <a href=\"https://github.com/facebook/flow/releases/tag/v0.92.0\">v92.0</a>, where it says:</p>\n<blockquote>\n<p>This release culminates months of hard work on quality of life improvements for IDE support.\nExpect your requests to be faster, and your requests to take a bit less time.</p>\n</blockquote>\n<p>According to the release note, Flow is now able to <strong>provide type definitions while rechecking</strong>, for further details on how they achieve this, you can read the <a href=\"https://medium.com/flow-type/a-more-responsive-flow-1a8cb01aec11\">Flow blog</a></p>\n<h2>Closing remarks</h2>\n<p>Finally we managed to get Flow running in v0.97 üéâ. We‚Äôve been struggling with bad developer experience with v0.83 for the longest time, hopefully v0.97 do not let us down.</p>\n<p>Lastly, be sure to check out all the links sprinkled throughout this blog, they link to Github issues, commits, release notes, and who knows it might lead you to some interesting adventures? ü§∑‚Äç</p>","frontmatter":{"title":"Errors encountered upgrading Flow v0.85","date":"April 22, 2019","description":"and how we solved them"}}},"pageContext":{"type":"blog","slug":"/errors-encountered-upgrading-flow-0.85/","previous":{"fileAbsolutePath":"/Users/lhtan/Projects/lihautan/content/talk/css-code-splitting/index.md","fields":{"slug":"/css-code-splitting/","type":"talk"},"frontmatter":{"title":"CSS Code Splitting"}},"next":{"fileAbsolutePath":"/Users/lhtan/Projects/lihautan/content/blog/parsing-error-flow-type-parameter-instantiation/index.md","fields":{"slug":"/parsing-error-flow-type-parameter-instantiation/","type":"blog"},"frontmatter":{"title":"Parsing error when calling generic function with type arguments"}}}}