{"data":{"site":{"siteMetadata":{"title":"Tan Li Hau","author":"Tan Li Hau"}},"markdownRemark":{"id":"8448fc2a-bc6d-5576-8691-87fe4f0bc3e1","excerpt":"This article assumes you have basic knowledge on React and Redux. If you like to learn more about React or Redux, you can go here to learn more. Context Aâ€¦","html":"<blockquote>\n<p>This article assumes you have basic knowledge on React and Redux. If you like to learn more about React or Redux, you can go here to learn more.</p>\n</blockquote>\n<hr>\n<h2>Context</h2>\n<p>A common pattern to write a React Redux application is to have:</p>\n<ul>\n<li>a <code class=\"language-text\">rootReducer</code> that imports <strong>all the reducers</strong> that will be used in the application</li>\n<li>a <code class=\"language-text\">reduxStore</code> that is created using <code class=\"language-text\">rootReducer</code></li>\n<li>the React application</li>\n<li><a href=\"https://github.com/reduxjs/react-redux\">react-redux</a> that bridge React components and Redux together</li>\n</ul>\n<p>This is what its going to be look like in code:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// CustomComponent.js</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> connect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">CustomComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps</span> <span class=\"token operator\">=</span> state <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapDispatchToProps</span> <span class=\"token operator\">=</span> dispatch <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">,</span> mapDispatchToProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>CustomComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// root.js</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Provider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> store <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span>  <span class=\"token string\">'./store'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> CustomComponent <span class=\"token keyword\">from</span> <span class=\"token string\">'./CustomComponent'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// react-redux provider to provide the store in React context</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Provider</span> <span class=\"token attr-name\">store</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>store<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CustomComponent</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Provider</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// store.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createStore<span class=\"token punctuation\">,</span> combineReducers <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// import all your reducers here</span>\n<span class=\"token keyword\">import</span> reducerA <span class=\"token keyword\">from</span> <span class=\"token string\">'./reducerA'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> reducerB <span class=\"token keyword\">from</span> <span class=\"token string\">'./reducerB'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> reducerC <span class=\"token keyword\">from</span> <span class=\"token string\">'./reducerC'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// combine all your reducers here</span>\n<span class=\"token keyword\">const</span> rootReducer <span class=\"token operator\">=</span> <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  reducerA<span class=\"token punctuation\">:</span> reducerA<span class=\"token punctuation\">,</span>\n  reducerB<span class=\"token punctuation\">:</span> reducerB<span class=\"token punctuation\">,</span>\n  reducerC<span class=\"token punctuation\">:</span> reducerC<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// create the redux store!</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>rootReducer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Problem\nEverything seemed perfect, until your app size increases too fastâ€¦</p>\n<p>It takes much longer time to load your web app, and things got worse with a crappy internet speedâ€¦</p>\n<p>Solution\nI know you must have googled for the solution online. ðŸ˜‰</p>\n<p>So, lets talk about one of the solutions that you can do to make your app bundle smallerâ€Šâ€”â€Šcode splitting using webpack!</p>\n<p>Code splitting is one of the most compelling features of webpack. This feature allows you to split your code into various bundles which can then be loaded on demand or in parallel. It can be used to achieve smaller bundles and control resource load prioritization which, if used correctly, can have a major impact on load time.â€Šâ€”â€Šwebpack\nGreat! Webpack provides import() syntax, that conforms to the ECMAScript proposal for dynamic imports. Letâ€™s try to split our code based on different entry points of your routes. This makes perfect sense, user that goes to mywebsite/foo do not need code that is written only for mywebsite/bar!</p>\n<p>By now, you should realise, reducer that is written only for mywebsite/bar, shouldnâ€™t be imported or included when you are visiting mywebsite/foo!</p>\n<p>Then how do I dynamically load reducers for code splitting in a Redux application?\nThatâ€™s a StackOverflow thread that you should read about.</p>\n<p>There may be neater way of expressing thisâ€Šâ€”â€ŠIâ€™m just showing the idea.\nYes, one of a neater way is to write a higher order component that takes care of dynamically loading of reducers.</p>\n<p>inducer (read: Inject Reducer) gives you a HOC that will add you reducer to the Redux store that is currently using during componentWillMount and remove it during componentWillUnmount. Itâ€™s that simple!</p>\n<p>So, how does inducer actually works?\nFirstly, inducer HOC gets the store from context, provided from the StoreProvider of react-redux .</p>\n<p>InjectReducer.contextTypes = {\nstore: PropTypes.shape({\nreplaceReducer: PropTypes.func.isRequired,\n}),\n};\nNext, inducer HOC comes up with the new async root reducer that includes the reducer you want to include, and use replaceReducer from Redux to updates the reducer.</p>\n<p>When componentWillUnmount inducer will remove your reducer and call replaceReducer again!</p>\n<p>You can read the complete code here!</p>","frontmatter":{"title":"Dynamically load reducers for code splitting in a React Redux application","date":"November 16, 2017","description":"How to inject reducer asynchronously"}}},"pageContext":{"slug":"/dynamically-load-async-reducer-for-code-splitting-in-react/","previous":{"fields":{"slug":"/random-stuff-i-learned-from-browser-console/"},"frontmatter":{"title":"Random stuff that Iâ€™ve learned from a browserâ€™s developer console"}},"next":null}}